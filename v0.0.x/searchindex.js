Search.setIndex({"titles": ["Conversions", "Data manipulation", "Detection", "Digital signal processing", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "sdr.AGC", "sdr.AGC.__call__", "sdr.AGC.__init__", "sdr.AGC.attack", "sdr.AGC.decay", "sdr.AGC.gain", "sdr.AGC.reference", "sdr.AGC.reset", "sdr.AGC.streaming", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.Decimator", "sdr.Decimator.__call__", "sdr.Decimator.__init__", "sdr.Decimator.delay", "sdr.Decimator.method", "sdr.Decimator.polyphase_taps", "sdr.Decimator.rate", "sdr.Decimator.reset", "sdr.Decimator.taps", "sdr.Differentiator", "sdr.Differentiator.__init__", "sdr.EnergyDetector", "sdr.EnergyDetector.p_d", "sdr.EnergyDetector.p_fa", "sdr.EnergyDetector.roc", "sdr.EnergyDetector.threshold", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__call__", "sdr.FIR.__init__", "sdr.FIR.__len__", "sdr.FIR.delay", "sdr.FIR.flush", "sdr.FIR.frequency_response", "sdr.FIR.group_delay", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.phase_delay", "sdr.FIR.reset", "sdr.FIR.state", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__call__", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.delay", "sdr.FarrowResampler.flush", "sdr.FarrowResampler.order", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.state", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.FractionalDelay", "sdr.FractionalDelay.__init__", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__call__", "sdr.IIR.__init__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.frequency_response", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.state", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.Integrator", "sdr.Integrator.__init__", "sdr.Interpolator", "sdr.Interpolator.__call__", "sdr.Interpolator.__init__", "sdr.Interpolator.delay", "sdr.Interpolator.method", "sdr.Interpolator.polyphase_taps", "sdr.Interpolator.rate", "sdr.Interpolator.reset", "sdr.Interpolator.taps", "sdr.LeakyIntegrator", "sdr.LeakyIntegrator.__init__", "sdr.LinearModulation", "sdr.LinearModulation.__init__", "sdr.LinearModulation.ber", "sdr.LinearModulation.bps", "sdr.LinearModulation.decide_symbols", "sdr.LinearModulation.demodulate", "sdr.LinearModulation.map_symbols", "sdr.LinearModulation.modulate", "sdr.LinearModulation.order", "sdr.LinearModulation.phase_offset", "sdr.LinearModulation.pulse_shape", "sdr.LinearModulation.rx_filter", "sdr.LinearModulation.ser", "sdr.LinearModulation.sps", "sdr.LinearModulation.symbol_map", "sdr.LinearModulation.tx_filter", "sdr.LoopFilter", "sdr.LoopFilter.__call__", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.iir", "sdr.LoopFilter.integral_gain", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.proportional_gain", "sdr.LoopFilter.reset", "sdr.MLPED", "sdr.MLPED.A_received", "sdr.MLPED.A_reference", "sdr.MLPED.__call__", "sdr.MLPED.__init__", "sdr.MLPED.data_aided_error", "sdr.MLPED.decision_directed_error", "sdr.MLPED.gain", "sdr.MSK", "sdr.MSK.__init__", "sdr.MovingAverager", "sdr.MovingAverager.__init__", "sdr.NCO", "sdr.NCO.__call__", "sdr.NCO.__init__", "sdr.NCO.gain", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.reset", "sdr.NCO.step", "sdr.OQPSK", "sdr.OQPSK.__init__", "sdr.PED", "sdr.PED.__call__", "sdr.PED.__init__", "sdr.PED.data_aided_error", "sdr.PED.decision_directed_error", "sdr.PED.gain", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.ber", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.PiMPSK", "sdr.PiMPSK.__init__", "sdr.Q", "sdr.Qinv", "sdr.ReplicaCorrelator", "sdr.ReplicaCorrelator.p_d", "sdr.ReplicaCorrelator.p_fa", "sdr.ReplicaCorrelator.roc", "sdr.ReplicaCorrelator.threshold", "sdr.Resampler", "sdr.Resampler.__call__", "sdr.Resampler.__init__", "sdr.Resampler.delay", "sdr.Resampler.down", "sdr.Resampler.method", "sdr.Resampler.polyphase_taps", "sdr.Resampler.rate", "sdr.Resampler.reset", "sdr.Resampler.taps", "sdr.Resampler.up", "sdr.albersheim", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.barker", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.db", "sdr.design_bandpass_fir", "sdr.design_bandstop_fir", "sdr.design_frac_delay_fir", "sdr.design_highpass_fir", "sdr.design_lowpass_fir", "sdr.design_multirate_fir", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.downsample", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.euclidean", "sdr.evm", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.hadamard", "sdr.half_sine", "sdr.hamming", "sdr.hexdump", "sdr.iq_imbalance", "sdr.linear", "sdr.mix", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.percent", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.eye", "sdr.plot.filter", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.magnitude_response", "sdr.plot.p_d", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.phase_tree", "sdr.plot.raster", "sdr.plot.roc", "sdr.plot.ser", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.polyphase_decompose", "sdr.ppb", "sdr.ppm", "sdr.raised_cosine", "sdr.rectangular", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.to_complex_bb", "sdr.to_real_pb", "sdr.unpack", "sdr.upsample", "sdr.walsh", "sdr.wavelength", "sdr.zadoff_chu", "Sequences", "Simulation", "Synchronization", "Documentation", "Formatting", "Installation", "Unit Tests", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294], "db": [0, 4, 5, 18, 29, 31, 47, 49, 51, 53, 54, 55, 57, 102, 117, 127, 148, 160, 168, 170, 172, 174, 179, 181, 194, 195, 196, 197, 205, 206, 207, 208, 209, 210, 211, 216, 217, 218, 219, 220, 222, 224, 225, 231, 232, 235, 236, 237, 238, 240, 241, 247, 254, 266, 269, 270, 288, 290, 291, 293], "x": [0, 1, 3, 5, 6, 7, 8, 9, 10, 18, 35, 36, 44, 46, 51, 53, 58, 59, 74, 75, 84, 86, 88, 102, 103, 104, 105, 113, 115, 120, 122, 131, 132, 148, 150, 160, 168, 174, 176, 177, 178, 183, 184, 195, 196, 199, 202, 204, 205, 212, 213, 214, 215, 218, 221, 222, 223, 229, 231, 232, 233, 234, 235, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 257, 258, 262, 263, 266, 268, 273, 274, 279, 283, 288, 289, 290, 293, 294], "arraylik": [0, 1, 2, 3, 4, 5, 6, 7, 8, 35, 36, 37, 44, 46, 47, 48, 49, 50, 51, 53, 58, 59, 60, 74, 80, 84, 86, 87, 88, 89, 102, 104, 105, 106, 113, 115, 116, 117, 119, 120, 121, 122, 127, 140, 143, 148, 149, 150, 160, 161, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 194, 197, 199, 200, 202, 203, 205, 206, 207, 209, 210, 212, 213, 214, 216, 217, 218, 219, 220, 222, 223, 224, 230, 232, 234, 236, 239, 243, 244, 245, 246, 247, 248, 249, 250, 253, 255, 256, 260, 261, 262, 263, 269, 270, 273, 276, 279], "ndarrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 35, 36, 40, 43, 44, 46, 47, 48, 49, 50, 51, 56, 58, 59, 63, 64, 65, 66, 68, 70, 71, 73, 74, 75, 78, 81, 83, 84, 86, 88, 90, 91, 92, 94, 96, 98, 99, 101, 102, 104, 105, 109, 112, 113, 115, 117, 119, 120, 121, 122, 125, 127, 129, 131, 132, 140, 143, 145, 146, 148, 150, 152, 153, 159, 160, 162, 163, 165, 166, 168, 170, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 189, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 251, 252, 254, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279], "float_": [0, 2, 3, 4, 5, 6, 7, 8, 46, 47, 48, 49, 50, 51, 56, 115, 117, 125, 127, 140, 145, 146, 148, 160, 162, 163, 165, 166, 168, 170, 172, 174, 176, 177, 178, 179, 180, 181, 182, 194, 197, 200, 203, 205, 206, 207, 208, 209, 210, 211, 216, 217, 218, 219, 220, 224, 225, 228, 232, 236, 239, 240, 254, 262, 263, 264, 265, 267, 269, 270, 271, 272, 276], "convert": [0, 3, 115, 119, 121, 148, 160, 168, 174, 205, 216, 217, 219, 220, 230, 232, 239, 262, 263, 269, 270, 271, 272], "linear": [0, 9, 14, 16, 44, 74, 104, 106, 108, 115, 116, 145, 146, 148, 160, 165, 166, 168, 174, 183, 185, 188, 196, 205, 232, 246, 248, 253, 255, 257, 292, 293], "unit": [0, 35, 44, 58, 71, 84, 86, 99, 102, 104, 113, 131, 149, 150, 152, 161, 169, 175, 183, 196, 197, 205, 212, 213, 232, 256, 258, 283, 286, 287, 289, 292, 293], "percent": [0, 239, 293], "percentag": [0, 239], "ppm": [0, 263, 268, 279, 293], "part": [0, 258, 262, 263, 268, 289], "per": [0, 1, 36, 59, 105, 115, 116, 118, 120, 122, 128, 148, 149, 153, 160, 161, 168, 169, 174, 175, 196, 197, 216, 217, 219, 220, 223, 225, 228, 230, 234, 241, 242, 251, 262, 263, 264, 265, 267, 268, 269, 270, 273, 282, 288, 291, 293], "million": [0, 263, 268], "ppb": [0, 262, 293], "billion": [0, 262], "ebn0_to_esn0": [0, 127, 172, 216, 290, 293], "ebn0": [0, 7, 115, 117, 148, 160, 168, 170, 174, 197, 216, 217, 240, 290], "bp": [0, 115, 118, 148, 160, 168, 174, 216, 217, 219, 269, 290], "int": [0, 1, 3, 6, 7, 35, 37, 38, 41, 44, 45, 51, 53, 54, 57, 58, 61, 62, 64, 65, 66, 67, 68, 71, 74, 76, 77, 79, 84, 85, 86, 92, 94, 95, 99, 102, 104, 106, 107, 110, 113, 115, 116, 118, 123, 128, 145, 146, 148, 149, 150, 151, 152, 159, 160, 161, 165, 166, 168, 169, 174, 175, 183, 185, 186, 187, 193, 195, 196, 198, 199, 201, 202, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 234, 235, 237, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 255, 256, 261, 264, 265, 267, 269, 270, 273, 274, 275, 277, 278, 290], "ebn0_to_snr": [0, 148, 160, 168, 174, 217, 293], "esn0_to_ebn0": [0, 117, 170, 219, 293], "esn0": [0, 7, 115, 127, 148, 160, 168, 172, 174, 219, 220, 254, 290], "esn0_to_snr": [0, 220, 290, 293], "sp": [0, 6, 7, 115, 116, 120, 122, 128, 148, 149, 160, 161, 168, 169, 174, 175, 217, 220, 225, 228, 242, 251, 258, 264, 265, 267, 269, 270, 271, 272, 288, 290, 291], "1": [0, 6, 8, 9, 11, 12, 13, 16, 18, 25, 28, 32, 34, 35, 37, 40, 43, 44, 45, 46, 47, 49, 50, 51, 58, 61, 62, 64, 65, 68, 74, 76, 77, 84, 85, 86, 87, 92, 102, 103, 104, 105, 106, 109, 112, 113, 114, 115, 116, 119, 120, 121, 122, 129, 131, 133, 134, 140, 144, 148, 149, 150, 152, 154, 160, 161, 162, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 189, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 294], "snr_to_ebn0": [0, 117, 170, 197, 269, 293], "snr": [0, 2, 4, 7, 46, 47, 49, 51, 53, 54, 55, 56, 57, 148, 160, 168, 174, 194, 196, 197, 247, 269, 270, 271, 272, 279, 290, 293], "snr_to_esn0": [0, 127, 172, 270, 293], "pack": [1, 51, 53, 148, 160, 168, 174, 230, 234, 292, 293], "bpe": [1, 234, 273], "int_": [1, 5, 6, 115, 119, 120, 148, 160, 168, 174, 199, 201, 202, 212, 213, 214, 226, 229, 234, 273, 279], "binari": [1, 4, 6, 149, 161, 169, 173, 175, 198, 199, 200, 201, 202, 203, 214, 227, 234, 257, 273, 275, 279, 290, 292, 293], "arrai": [1, 40, 43, 51, 64, 92, 106, 109, 112, 116, 148, 149, 152, 160, 161, 168, 169, 173, 174, 175, 185, 189, 192, 195, 198, 199, 201, 202, 212, 213, 214, 218, 221, 226, 227, 229, 234, 235, 237, 258, 261, 273, 275, 287], "an": [1, 2, 3, 4, 9, 11, 35, 44, 46, 58, 60, 64, 66, 84, 85, 86, 87, 89, 92, 94, 102, 103, 104, 105, 113, 114, 116, 149, 150, 152, 161, 169, 170, 172, 175, 178, 183, 197, 208, 234, 240, 245, 254, 258, 273, 276, 280, 283, 292, 293], "multipl": [1, 64, 92, 234, 273, 290, 293], "bit": [1, 5, 7, 51, 53, 56, 115, 117, 118, 148, 149, 160, 161, 168, 169, 170, 173, 174, 175, 197, 199, 200, 202, 203, 216, 217, 219, 230, 234, 240, 269, 273, 292, 293], "element": [1, 230, 234, 273], "unpack": [1, 51, 53, 230, 273, 290, 292, 293], "hexdump": [1, 51, 230, 292, 293], "byte": [1, 230], "width": [1, 84, 208, 230], "16": [1, 74, 84, 170, 172, 173, 208, 216, 217, 219, 227, 230, 240, 254, 261, 264, 267, 269, 270, 275, 288, 293], "str": [1, 45, 230, 242, 248, 251, 252, 255], "return": [1, 6, 10, 18, 26, 28, 31, 32, 35, 36, 44, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 65, 66, 68, 71, 75, 78, 84, 86, 88, 92, 94, 99, 102, 104, 105, 113, 117, 119, 120, 121, 122, 127, 132, 143, 145, 146, 150, 153, 159, 163, 165, 166, 170, 172, 176, 177, 179, 180, 181, 182, 183, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 286, 287, 288, 290, 293], "specifi": [1, 51, 54, 55, 57, 140, 145, 146, 162, 165, 166, 196, 197, 214, 230, 281, 286, 287, 293], "class": [2, 3, 5, 6, 9, 18, 35, 44, 46, 51, 53, 54, 55, 56, 57, 58, 74, 84, 86, 102, 104, 113, 115, 131, 140, 148, 150, 152, 160, 162, 168, 174, 178, 183, 280, 286, 287, 290, 292, 293], "replicacorrel": [2, 178, 179, 180, 181, 182, 293], "implement": [2, 3, 6, 9, 35, 44, 46, 58, 74, 84, 86, 102, 104, 113, 115, 131, 135, 140, 148, 150, 152, 160, 162, 168, 174, 178, 183, 194, 280, 285], "clairvoy": [2, 178], "replica": [2, 178], "correl": [2, 178, 198, 227, 275, 277], "energydetector": [2, 46, 47, 48, 49, 50, 293], "energi": [2, 46, 117, 127, 170, 172, 178, 179, 180, 181, 182, 197, 216, 217, 218, 219, 220, 225, 228, 240, 254, 264, 265, 267, 269, 270, 292, 293], "albersheim": [2, 194, 293], "p_d": [2, 7, 46, 47, 49, 178, 179, 181, 194, 247, 253, 293], "p_fa": [2, 7, 46, 47, 48, 49, 50, 178, 179, 180, 181, 182, 194, 253], "estim": [2, 18, 115, 119, 120, 148, 160, 168, 174, 194, 248, 255, 289], "minimum": [2, 6, 148, 194, 293], "requir": [2, 36, 59, 105, 194, 281, 282, 283, 284, 293], "singl": [2, 49, 64, 92, 170, 172, 194], "sampl": [2, 3, 11, 12, 13, 18, 25, 33, 35, 36, 38, 44, 47, 48, 49, 50, 58, 59, 62, 64, 65, 66, 68, 71, 74, 77, 80, 84, 92, 94, 99, 104, 105, 106, 107, 115, 116, 120, 122, 128, 131, 133, 137, 148, 149, 150, 152, 153, 154, 156, 158, 159, 160, 161, 168, 169, 174, 175, 183, 185, 186, 194, 196, 215, 217, 220, 223, 225, 228, 233, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 255, 256, 258, 264, 265, 267, 268, 269, 270, 271, 272, 274, 279, 285, 288, 289, 291, 292, 293], "given": [2, 46, 51, 53, 54, 55, 57, 74, 75, 178, 194, 222, 286, 287], "n_": [2, 47, 48, 49, 50, 194], "nc": [2, 47, 48, 49, 50, 194], "non": [2, 36, 47, 48, 49, 50, 59, 105, 194, 228, 258, 265], "coher": [2, 47, 48, 49, 50, 194], "combin": [2, 194], "achiev": [2, 194, 290, 291], "probabl": [2, 7, 46, 47, 48, 49, 50, 176, 177, 178, 179, 180, 181, 182, 194, 199, 200, 202, 203, 214, 247, 253, 279, 293], "fals": [2, 5, 11, 35, 37, 45, 46, 47, 48, 49, 50, 58, 60, 64, 74, 76, 86, 87, 89, 92, 103, 104, 105, 106, 113, 114, 148, 150, 151, 160, 168, 170, 172, 174, 178, 179, 180, 181, 182, 183, 185, 194, 195, 199, 202, 214, 218, 233, 237, 238, 241, 248, 253, 255, 258, 266, 287, 291], "alarm": [2, 46, 47, 48, 49, 50, 178, 179, 180, 181, 182, 194, 253], "p_": [2, 7, 46, 47, 48, 49, 50, 170, 172, 178, 179, 180, 181, 182, 194, 195, 196, 205, 214, 222, 232, 235, 237, 240, 248, 253, 254], "fa": [2, 7, 46, 47, 48, 49, 50, 178, 179, 180, 181, 182, 194, 253], "thi": [2, 18, 35, 53, 54, 55, 57, 58, 86, 104, 106, 115, 116, 129, 140, 148, 153, 160, 161, 168, 169, 173, 174, 175, 183, 185, 194, 196, 197, 199, 202, 214, 215, 222, 224, 227, 242, 248, 252, 255, 258, 274, 275, 281, 283, 284, 285, 287, 289, 290, 291], "function": [2, 7, 8, 18, 27, 44, 58, 84, 86, 87, 113, 131, 176, 177, 194, 197, 215, 225, 227, 240, 247, 248, 253, 254, 255, 274, 275, 286, 287, 289, 291, 292, 293], "": [2, 3, 7, 18, 26, 28, 29, 30, 32, 33, 35, 44, 46, 53, 54, 55, 56, 57, 58, 64, 65, 68, 71, 84, 86, 92, 99, 102, 104, 113, 115, 116, 119, 120, 121, 122, 140, 148, 150, 160, 168, 174, 178, 180, 182, 183, 194, 196, 197, 217, 220, 222, 223, 231, 241, 242, 243, 244, 246, 248, 249, 250, 251, 252, 255, 256, 258, 259, 268, 269, 270, 271, 272, 284, 285, 288, 290, 292, 293], "equat": [2, 26, 28, 29, 30, 31, 32, 47, 48, 50, 86, 113, 160, 168, 174, 179, 180, 182, 194, 224], "finit": [3, 58, 292, 293], "impuls": [3, 7, 35, 44, 58, 66, 84, 86, 94, 102, 104, 113, 150, 183, 206, 207, 208, 209, 210, 211, 225, 243, 245, 291, 292, 293], "respons": [3, 7, 35, 44, 58, 64, 66, 71, 84, 86, 92, 94, 99, 102, 104, 113, 150, 183, 206, 207, 208, 209, 210, 211, 225, 243, 244, 245, 246, 250, 256, 291, 292, 293], "design_lowpass_fir": [3, 64, 210, 293], "order": [3, 18, 35, 36, 44, 45, 51, 56, 58, 59, 67, 74, 76, 79, 84, 86, 95, 102, 104, 105, 106, 113, 115, 116, 123, 131, 133, 148, 150, 160, 168, 169, 174, 175, 183, 185, 196, 206, 207, 209, 210, 216, 217, 219, 222, 223, 225, 241, 242, 251, 252, 264, 267, 268, 269, 280, 287, 288, 289, 290, 293], "design": [3, 35, 37, 39, 84, 104, 106, 108, 116, 161, 169, 175, 183, 185, 188, 206, 207, 208, 209, 210, 211, 281, 292, 293], "lowpass": [3, 210], "h": [3, 7, 35, 44, 46, 58, 60, 64, 66, 84, 86, 92, 94, 102, 104, 113, 115, 116, 125, 126, 130, 131, 148, 150, 160, 161, 168, 169, 174, 175, 178, 183, 206, 207, 208, 209, 210, 211, 225, 242, 243, 245, 246, 250, 261, 288, 289, 291], "n": [3, 5, 6, 7, 8, 9, 10, 18, 35, 36, 44, 45, 46, 49, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 73, 74, 75, 77, 78, 81, 84, 85, 86, 88, 89, 90, 94, 95, 99, 102, 103, 104, 105, 113, 115, 116, 120, 122, 125, 126, 130, 131, 132, 148, 150, 152, 153, 159, 160, 161, 168, 169, 174, 175, 176, 177, 178, 180, 182, 183, 184, 195, 196, 197, 198, 201, 204, 206, 207, 208, 209, 210, 211, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 229, 231, 233, 235, 237, 238, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 255, 256, 258, 266, 268, 269, 270, 271, 272, 274, 275, 277, 278, 279, 289, 291, 292], "us": [3, 7, 9, 16, 35, 37, 39, 42, 44, 45, 58, 60, 63, 64, 69, 74, 76, 78, 84, 86, 87, 89, 92, 97, 102, 103, 104, 105, 106, 108, 111, 113, 114, 115, 116, 119, 120, 131, 135, 140, 145, 146, 148, 150, 151, 160, 161, 162, 165, 166, 168, 169, 174, 175, 183, 185, 188, 191, 197, 200, 203, 206, 207, 208, 209, 210, 211, 222, 227, 230, 234, 241, 242, 243, 245, 247, 248, 255, 256, 273, 275, 281, 282, 283, 284, 286, 287, 289, 290, 291, 292, 294], "window": [3, 35, 44, 45, 64, 104, 183, 206, 207, 208, 209, 210, 211, 248, 255, 293], "method": [3, 7, 39, 103, 106, 108, 185, 188, 206, 207, 208, 209, 210, 211, 248, 255, 286, 287, 293], "design_highpass_fir": [3, 209, 293], "highpass": [3, 209], "design_bandpass_fir": [3, 206, 293], "bandpass": [3, 206], "design_bandstop_fir": [3, 207, 293], "bandstop": [3, 207], "infinit": [3, 86, 102, 292, 293], "movingaverag": [3, 113, 150, 151, 293], "move": [3, 113, 114, 150, 151, 292, 293], "averag": [3, 5, 51, 113, 114, 140, 145, 146, 148, 150, 151, 160, 162, 165, 166, 174, 195, 196, 197, 222, 235, 248, 292, 293], "differenti": [3, 6, 44, 45, 148, 170, 172, 212, 213, 258, 292, 293], "integr": [3, 18, 23, 47, 48, 49, 50, 102, 103, 113, 114, 131, 133, 136, 150, 194, 280, 284, 287, 292, 293], "leakyintegr": [3, 113, 114, 150, 293], "leaki": [3, 113, 114, 150, 292, 293], "interpol": [3, 35, 74, 104, 105, 106, 107, 108, 109, 110, 111, 112, 115, 130, 148, 160, 168, 174, 183, 185, 193, 211, 242, 274, 288, 290, 292, 293], "polyphas": [3, 35, 36, 37, 40, 43, 104, 105, 106, 109, 112, 183, 184, 185, 189, 192, 211, 215, 261, 274, 292, 293], "decim": [3, 35, 36, 37, 38, 39, 40, 41, 42, 43, 115, 116, 119, 120, 121, 122, 126, 129, 148, 149, 160, 161, 168, 169, 173, 174, 175, 183, 185, 187, 211, 215, 290, 292, 293], "ration": [3, 183, 185, 211, 293], "design_multirate_fir": [3, 37, 106, 185, 211, 293], "up": [3, 183, 185, 193, 211, 224, 282], "kaiser": [3, 35, 37, 39, 104, 105, 106, 108, 183, 185, 188, 206, 207, 208, 209, 210, 211], "polyphase_decompos": [3, 261, 293], "tap": [3, 35, 37, 40, 43, 44, 58, 73, 74, 83, 84, 86, 90, 91, 102, 104, 106, 109, 112, 113, 150, 183, 185, 189, 192, 261, 286, 287], "phase": [3, 7, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 44, 58, 68, 84, 104, 115, 116, 124, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 183, 194, 223, 231, 233, 249, 250, 251, 261, 279, 292, 293], "decompos": [3, 35, 104, 183, 261], "h_i": [3, 35, 37, 40, 43, 44, 58, 60, 73, 84, 104, 106, 109, 112, 150, 183, 185, 189, 192, 261, 286], "matrix": [3, 214, 261, 279], "h_": [3, 18, 35, 40, 43, 44, 104, 109, 112, 183, 189, 192, 261, 289], "i": [3, 9, 11, 12, 13, 17, 18, 25, 34, 35, 36, 37, 40, 43, 44, 45, 46, 48, 49, 50, 51, 56, 58, 59, 60, 64, 66, 71, 72, 73, 74, 82, 84, 86, 89, 91, 92, 94, 99, 100, 102, 104, 105, 106, 109, 112, 113, 114, 115, 116, 131, 133, 134, 137, 140, 148, 150, 153, 158, 160, 161, 162, 168, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 189, 192, 194, 195, 196, 197, 199, 200, 202, 203, 205, 206, 207, 208, 209, 210, 214, 216, 217, 218, 219, 220, 221, 223, 224, 225, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 248, 249, 250, 252, 255, 256, 258, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294], "j": [3, 35, 40, 43, 64, 86, 89, 90, 92, 102, 104, 109, 112, 113, 148, 152, 160, 168, 174, 183, 189, 192, 196, 214, 231, 233, 261, 277, 286, 287], "b": [3, 86, 89, 194, 197, 225, 230, 243, 245, 256, 261, 281, 282, 291], "farrowresampl": [3, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 285, 293], "piecewis": [3, 74, 76, 79], "polynomi": [3, 74, 76, 79], "farrow": [3, 74, 75, 76, 78, 79, 80, 81, 82, 83, 292, 293], "fractionaldelai": [3, 84, 85], "fraction": [3, 74, 80, 84, 85, 208, 225, 285, 292, 293], "delai": [3, 7, 35, 36, 38, 44, 58, 59, 62, 65, 68, 74, 77, 84, 85, 104, 105, 107, 131, 150, 152, 183, 186, 208, 212, 213, 228, 244, 249, 265, 289, 292, 293], "design_frac_delay_fir": [3, 208, 293], "length": [3, 6, 7, 35, 36, 44, 45, 49, 58, 59, 61, 66, 71, 84, 85, 88, 104, 105, 106, 114, 116, 120, 122, 149, 150, 151, 161, 169, 175, 183, 185, 198, 201, 206, 207, 208, 209, 210, 211, 225, 226, 227, 228, 243, 245, 248, 252, 255, 256, 264, 265, 267, 271, 275, 277, 278, 282, 285, 288, 291], "mix": [3, 233, 292, 293], "freq": [3, 4, 35, 44, 58, 64, 84, 86, 92, 102, 104, 113, 150, 152, 153, 183, 223, 224, 233, 236, 276, 279, 285, 289], "float": [3, 5, 6, 9, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 44, 45, 49, 51, 53, 54, 55, 57, 58, 64, 65, 68, 74, 75, 78, 84, 85, 86, 87, 92, 93, 102, 104, 113, 114, 115, 116, 124, 131, 133, 134, 136, 137, 138, 140, 141, 142, 144, 147, 148, 149, 150, 152, 154, 155, 156, 157, 160, 161, 162, 167, 168, 169, 171, 174, 175, 181, 183, 190, 195, 196, 197, 199, 202, 204, 206, 207, 208, 209, 210, 211, 222, 223, 225, 231, 233, 235, 237, 238, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 255, 257, 258, 264, 266, 267, 268, 279], "0": [3, 6, 8, 9, 11, 16, 25, 35, 36, 40, 43, 44, 46, 49, 51, 58, 59, 60, 64, 65, 68, 73, 74, 84, 85, 86, 87, 89, 90, 91, 92, 102, 104, 105, 106, 109, 112, 113, 115, 116, 119, 120, 121, 122, 129, 133, 148, 149, 150, 152, 154, 160, 161, 168, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 189, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 236, 239, 241, 242, 243, 244, 245, 246, 249, 250, 251, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 294], "time": [3, 5, 9, 18, 25, 26, 28, 29, 30, 31, 32, 44, 58, 74, 86, 102, 113, 131, 133, 140, 150, 160, 162, 168, 174, 195, 196, 204, 206, 207, 209, 210, 214, 215, 218, 220, 221, 223, 225, 227, 229, 231, 233, 235, 237, 238, 242, 243, 248, 252, 255, 258, 264, 266, 267, 268, 270, 271, 272, 274, 275, 279, 285, 286, 287, 291, 292, 293], "domain": [3, 5, 195, 196, 204, 206, 207, 209, 210, 215, 218, 221, 223, 229, 231, 233, 235, 237, 238, 243, 248, 252, 255, 258, 266, 268, 271, 272, 274, 279, 292, 293], "complex": [3, 5, 7, 18, 35, 44, 46, 47, 48, 49, 50, 58, 64, 84, 86, 92, 102, 104, 113, 115, 116, 119, 120, 121, 122, 129, 140, 143, 148, 149, 150, 152, 153, 159, 160, 161, 162, 163, 168, 169, 173, 174, 175, 178, 179, 180, 181, 182, 183, 196, 197, 215, 222, 231, 233, 241, 242, 244, 246, 249, 250, 252, 257, 258, 271, 272, 274, 279, 285, 286, 287, 289, 290, 292, 293], "exponenti": [3, 153, 215, 233, 271, 272, 274, 285, 286, 287, 293], "real": [3, 47, 48, 50, 148, 160, 176, 177, 179, 180, 182, 196, 233, 242, 244, 246, 249, 250, 252, 258, 271, 272, 285, 286, 287, 289, 292, 293], "sinusoid": [3, 168, 196, 233, 271, 272, 287, 293], "to_complex_bb": [3, 271, 293], "x_r": [3, 271, 272], "complex_": [3, 7, 9, 10, 115, 119, 120, 121, 122, 129, 148, 152, 159, 160, 162, 163, 168, 173, 174, 241, 257, 271, 272, 277, 278], "passband": [3, 84, 206, 207, 208, 209, 210, 225, 228, 264, 265, 267, 271, 272, 288, 293], "center": [3, 206, 207, 208, 209, 210, 228, 258, 265, 271, 272, 293], "f_": [3, 18, 25, 33, 36, 64, 65, 68, 92, 105, 115, 116, 128, 148, 149, 160, 161, 168, 169, 174, 175, 206, 207, 209, 210, 215, 217, 220, 223, 225, 233, 242, 243, 244, 246, 248, 249, 250, 251, 252, 255, 258, 268, 269, 270, 271, 272, 274, 285, 286, 287, 289, 291], "r": [3, 9, 35, 36, 37, 40, 41, 43, 74, 75, 78, 104, 105, 106, 109, 110, 112, 197, 215, 216, 217, 219, 222, 225, 233, 264, 267, 269, 271, 272, 274, 281, 282, 283, 284, 287, 288, 289, 291], "4": [3, 7, 9, 26, 28, 35, 40, 43, 44, 47, 49, 51, 64, 74, 76, 84, 92, 102, 104, 105, 109, 112, 113, 140, 148, 149, 150, 152, 160, 161, 162, 168, 170, 171, 172, 173, 174, 178, 179, 180, 181, 182, 183, 189, 192, 194, 196, 197, 198, 200, 201, 203, 206, 207, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 236, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 254, 256, 257, 258, 259, 260, 261, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 283, 285, 287, 288, 289, 290], "rate": [3, 5, 7, 9, 11, 12, 13, 18, 25, 33, 35, 36, 37, 41, 51, 52, 53, 55, 56, 64, 65, 68, 74, 75, 78, 92, 104, 105, 106, 110, 115, 117, 127, 148, 160, 168, 170, 172, 174, 183, 184, 185, 187, 190, 193, 211, 215, 216, 217, 219, 223, 233, 240, 242, 243, 244, 246, 248, 249, 250, 251, 252, 254, 255, 258, 268, 269, 271, 272, 274, 279, 292, 293], "baseband": [3, 7, 18, 148, 160, 168, 174, 233, 242, 251, 271, 272, 288, 289, 293], "x_c": [3, 271, 272], "c": [3, 18, 26, 28, 29, 30, 31, 32, 53, 54, 55, 56, 57, 115, 116, 129, 131, 148, 160, 168, 173, 174, 197, 200, 203, 224, 236, 257, 271, 272, 276, 289], "2": [3, 6, 7, 9, 18, 26, 28, 31, 35, 40, 43, 44, 46, 47, 48, 49, 50, 51, 58, 62, 64, 65, 68, 74, 77, 84, 92, 102, 104, 105, 109, 112, 113, 114, 115, 116, 123, 140, 148, 150, 152, 160, 161, 162, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 189, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 281, 284, 285, 286, 287, 288, 289, 290, 291], "to_real_pb": [3, 272, 288, 293], "2f_": [3, 272], "upsampl": [3, 104, 183, 274, 293], "factor": [3, 5, 18, 25, 34, 113, 114, 116, 131, 133, 134, 161, 169, 175, 204, 215, 274, 289], "downsampl": [3, 215, 293], "bsc_capac": [4, 203, 293], "p": [4, 8, 152, 153, 176, 177, 183, 185, 189, 190, 192, 193, 199, 200, 202, 203, 211, 214, 279], "calcul": [4, 5, 197, 200, 203, 222, 224, 236, 276, 293], "symmetr": [4, 202, 203, 214, 271, 272, 279, 292], "bsc": [4, 202, 203, 214, 279, 292, 293], "bec_capac": [4, 200, 293], "erasur": [4, 199, 200, 214, 279, 292], "bec": [4, 199, 200, 214, 279, 292, 293], "awgn_capac": [4, 197, 293], "addit": [4, 196, 197, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 274, 279, 292], "white": [4, 196, 197, 279, 292], "gaussian": [4, 6, 44, 102, 113, 150, 196, 197, 225, 279, 292, 293], "nois": [4, 9, 18, 19, 20, 25, 31, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 117, 127, 131, 133, 137, 148, 160, 168, 170, 172, 174, 178, 179, 180, 181, 182, 196, 197, 216, 217, 219, 220, 240, 254, 269, 270, 279, 289, 292], "awgn": [4, 148, 160, 168, 170, 172, 174, 196, 197, 222, 240, 241, 254, 271, 272, 279, 290, 292, 293], "fspl": [4, 224], "distanc": [4, 221, 224, 229, 292, 293], "free": [4, 148, 160, 168, 174, 224, 292], "space": [4, 64, 92, 224, 292], "wavelength": [4, 276, 293], "lambda": [4, 224, 276], "electromagnet": [4, 276], "wave": [4, 74, 148, 276], "frequenc": [4, 18, 26, 28, 30, 35, 44, 58, 64, 65, 68, 74, 84, 86, 92, 102, 104, 113, 131, 148, 150, 152, 153, 183, 206, 207, 208, 209, 210, 215, 223, 224, 233, 236, 243, 244, 246, 248, 249, 250, 255, 271, 272, 274, 276, 279, 291, 292, 293], "f": [4, 26, 28, 35, 44, 49, 64, 65, 68, 84, 92, 102, 104, 152, 153, 183, 194, 196, 223, 224, 225, 233, 236, 268, 276, 277, 282, 285, 286, 287, 288, 289, 290, 291], "parabolic_antenna": [4, 236, 293], "tupl": [4, 35, 44, 45, 46, 49, 51, 53, 56, 58, 64, 65, 68, 84, 86, 92, 102, 104, 113, 115, 119, 120, 140, 145, 146, 148, 150, 160, 162, 165, 166, 168, 174, 178, 181, 183, 195, 218, 221, 229, 235, 236, 237, 241, 243, 244, 245, 246, 249, 250, 256, 257, 260], "gain": [4, 9, 10, 11, 14, 16, 17, 18, 21, 22, 23, 24, 25, 86, 87, 93, 102, 113, 131, 133, 136, 138, 140, 147, 152, 154, 155, 162, 167, 194, 206, 207, 208, 209, 210, 224, 225, 228, 236, 264, 265, 267, 280, 289, 292], "g": [4, 56, 236, 283], "beamwidth": [4, 236], "theta": [4, 152, 154, 157, 158, 236], "parabol": [4, 236], "reflector": [4, 236], "signal": [5, 7, 9, 10, 11, 12, 13, 18, 26, 28, 31, 32, 35, 36, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 63, 74, 75, 78, 84, 86, 88, 102, 104, 105, 113, 115, 116, 125, 131, 132, 140, 141, 142, 144, 148, 150, 152, 153, 159, 160, 161, 168, 169, 174, 175, 178, 179, 180, 181, 182, 183, 184, 195, 196, 197, 204, 205, 206, 207, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 229, 231, 232, 233, 235, 236, 237, 238, 242, 243, 244, 246, 248, 249, 250, 251, 252, 255, 258, 261, 266, 268, 269, 270, 271, 272, 274, 276, 286, 287, 289, 291, 292, 293], "peak_pow": [5, 235, 237, 293], "peak": [5, 148, 160, 174, 204, 222, 235, 237, 238], "average_pow": [5, 195, 235, 293], "papr": [5, 148, 160, 174, 235, 288, 293], "ratio": [5, 31, 47, 49, 51, 53, 54, 55, 56, 57, 117, 127, 148, 160, 170, 172, 174, 179, 181, 196, 197, 216, 217, 219, 220, 235, 239, 240, 254, 262, 263, 269, 270], "peak_voltag": [5, 204, 238, 293], "bool": [5, 9, 11, 17, 35, 37, 44, 45, 47, 48, 49, 50, 58, 60, 64, 72, 74, 76, 82, 84, 86, 87, 89, 92, 100, 102, 103, 104, 106, 113, 114, 148, 150, 151, 160, 168, 170, 172, 174, 179, 180, 181, 182, 183, 185, 195, 218, 233, 237, 238, 241, 250, 252, 257, 258, 266], "rms_voltag": [5, 204, 266, 293], "root": [5, 6, 116, 161, 169, 175, 222, 242, 258, 266, 267, 277, 278, 286, 292], "mean": [5, 222, 248, 255, 266, 291], "squar": [5, 6, 116, 161, 169, 175, 222, 224, 236, 258, 266, 267, 286], "rm": [5, 140, 141, 142, 144, 204, 222, 266], "crest_factor": [5, 204, 235, 293], "crest": [5, 204], "euclidean": [5, 221, 292, 293], "y": [5, 6, 9, 10, 35, 36, 44, 58, 59, 63, 74, 75, 78, 86, 88, 102, 104, 105, 113, 131, 132, 152, 153, 159, 183, 196, 199, 202, 212, 213, 214, 215, 221, 223, 229, 231, 233, 241, 246, 248, 255, 257, 268, 274, 289, 290], "between": [5, 11, 17, 35, 37, 45, 60, 72, 76, 82, 87, 89, 100, 103, 104, 106, 114, 151, 162, 183, 185, 221, 224, 229, 248, 252, 255, 289, 292], "two": [5, 9, 113, 150, 206, 207, 221, 229, 242, 243, 244, 246, 248, 249, 250, 255, 277, 285, 286, 287], "ham": [5, 64, 206, 207, 209, 210, 229, 292, 293], "errorr": [5, 51, 52, 53, 54, 55, 56, 57, 290, 293], "A": [5, 9, 18, 26, 28, 29, 30, 31, 32, 34, 36, 44, 51, 58, 59, 64, 74, 92, 102, 105, 113, 116, 131, 140, 150, 161, 162, 169, 175, 194, 201, 206, 207, 209, 210, 226, 230, 231, 236, 264, 267, 280, 282, 289], "error": [5, 7, 11, 12, 13, 18, 24, 25, 31, 51, 52, 53, 55, 56, 57, 115, 117, 127, 131, 133, 140, 143, 145, 146, 147, 148, 160, 162, 163, 165, 166, 167, 168, 170, 172, 174, 194, 203, 222, 240, 254, 289, 292, 293], "ber": [5, 7, 51, 115, 117, 148, 160, 168, 170, 174, 240, 290, 292, 293], "symbol": [5, 7, 51, 53, 56, 104, 115, 116, 118, 119, 120, 121, 122, 127, 128, 129, 140, 143, 148, 149, 160, 161, 162, 163, 168, 169, 170, 172, 173, 174, 175, 196, 216, 217, 219, 220, 222, 223, 225, 228, 241, 242, 251, 254, 257, 258, 264, 265, 267, 269, 270, 288, 289, 291, 292, 293], "ser": [5, 7, 51, 115, 127, 148, 160, 168, 172, 174, 254, 290, 292, 293], "evm": [5, 222, 292, 293], "x_hat": [5, 7, 51, 53, 222, 241, 290], "ref": [5, 140, 142, 144, 194, 206, 207, 208, 209, 210, 211, 222, 225, 227, 275], "vector": [5, 51, 64, 80, 92, 206, 207, 209, 210, 222, 248, 255, 292, 293], "magnitud": [5, 7, 9, 11, 15, 44, 84, 102, 113, 150, 198, 208, 222, 227, 243, 246, 275, 277, 292, 293], "hat": [5, 7, 53, 115, 119, 120, 140, 143, 148, 160, 162, 163, 168, 174, 222, 241, 257], "k": [5, 6, 7, 44, 53, 102, 115, 116, 118, 119, 120, 121, 122, 123, 140, 143, 148, 160, 162, 163, 168, 169, 174, 175, 212, 213, 216, 217, 219, 222, 241, 257, 258, 269, 288, 291], "linearmodul": [6, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 145, 146, 165, 166, 168, 257, 293], "amplitud": [6, 115, 116, 140, 141, 142, 144, 231, 279, 285, 289], "arbitrari": [6, 74, 75, 76, 78, 79, 80, 81, 82, 83, 115, 292, 293], "psk": [6, 140, 160, 162, 168, 169, 170, 171, 172, 173, 174, 175, 196, 222, 223, 231, 240, 241, 242, 254, 257, 258, 268, 288, 289, 292, 293], "shift": [6, 148, 160, 168, 170, 171, 172, 173, 174, 277, 286, 287, 292, 293], "kei": [6, 148, 160, 168, 170, 171, 172, 173, 174, 292, 293], "demodul": [6, 115, 120, 148, 160, 168, 174, 293], "pimpsk": [6, 174, 175, 293], "pi": [6, 9, 35, 44, 74, 92, 102, 104, 105, 140, 152, 160, 162, 168, 174, 175, 183, 196, 215, 224, 225, 231, 233, 236, 243, 244, 245, 246, 249, 250, 256, 260, 271, 272, 274, 277, 285, 286, 287, 289, 292, 293], "m": [6, 86, 89, 91, 102, 113, 115, 116, 118, 119, 120, 121, 122, 123, 129, 140, 148, 160, 162, 168, 169, 173, 174, 175, 214, 216, 217, 219, 224, 257, 269, 281, 282, 283, 284, 292, 293], "oqpsk": [6, 148, 160, 161, 293], "offset": [6, 26, 28, 35, 74, 104, 105, 115, 116, 124, 148, 149, 152, 153, 154, 157, 160, 161, 168, 169, 171, 174, 175, 183, 223, 233, 245, 258, 268, 279, 289, 292, 293], "quadratur": [6, 148, 160, 231], "msk": [6, 148, 149, 251, 293], "rectangular": [6, 103, 116, 161, 169, 175, 265, 288, 291, 292, 293], "span": [6, 7, 116, 161, 169, 175, 225, 228, 242, 251, 264, 265, 267, 288, 291], "half_sin": [6, 149, 228, 293], "half": [6, 148, 160, 211, 228, 236, 292, 293], "sine": [6, 74, 148, 153, 228, 292, 293], "time_bandwidth": [6, 225], "raised_cosin": [6, 116, 161, 169, 175, 242, 264, 291, 293], "alpha": [6, 9, 11, 12, 113, 114, 116, 161, 169, 175, 225, 259, 264, 267, 288, 291], "rais": [6, 44, 102, 116, 161, 169, 175, 242, 258, 264, 267, 286, 292], "cosin": [6, 44, 102, 116, 153, 161, 169, 175, 242, 258, 264, 267, 286, 292, 293], "rc": [6, 116, 161, 169, 175, 264], "root_raised_cosin": [6, 44, 102, 116, 161, 169, 175, 242, 243, 244, 245, 246, 249, 250, 256, 260, 267, 286, 288, 290, 291, 293], "srrc": [6, 116, 160, 161, 168, 169, 174, 175, 242, 258, 267, 288, 290], "binary_cod": [6, 201, 293], "gener": [6, 148, 160, 168, 174, 196, 199, 201, 202, 214, 226, 253, 281, 290, 293], "code": [6, 149, 161, 169, 173, 175, 198, 201, 216, 217, 219, 226, 227, 241, 257, 269, 275, 278, 283, 290, 293], "gray_cod": [6, 226, 293], "grai": [6, 148, 149, 160, 161, 168, 169, 173, 174, 175, 226, 241, 257, 290, 292], "diff_encod": [6, 148, 160, 168, 170, 172, 174, 212, 213, 293], "y_prev": [6, 212, 213], "input": [6, 9, 10, 18, 26, 28, 31, 32, 35, 36, 37, 38, 44, 45, 58, 59, 60, 66, 70, 71, 74, 75, 76, 80, 81, 84, 86, 87, 88, 89, 94, 99, 102, 103, 104, 105, 106, 107, 113, 114, 131, 132, 150, 151, 152, 153, 160, 168, 170, 172, 174, 176, 183, 184, 185, 186, 196, 197, 199, 200, 202, 203, 205, 212, 213, 214, 215, 232, 234, 239, 245, 256, 262, 263, 273, 274, 279, 286, 287, 289], "data": [6, 140, 145, 162, 165, 212, 213, 230, 234, 258, 273, 292], "diff_decod": [6, 212, 213, 293], "decod": [6, 212], "use_styl": [7, 259], "appli": [7, 35, 45, 104, 116, 183, 223, 231, 241, 242, 245, 248, 255, 257, 258, 259, 268, 279], "default": [7, 66, 71, 149, 161, 169, 173, 175, 195, 218, 221, 229, 235, 237, 241, 244, 246, 249, 250, 252, 255, 257, 259, 290], "matplotlib": [7, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 285, 286, 287, 288, 289, 290, 291, 292], "rcparam": [7, 259], "time_domain": [7, 9, 35, 44, 74, 102, 104, 105, 113, 148, 150, 152, 160, 168, 174, 183, 196, 215, 227, 233, 258, 271, 272, 274, 275, 288, 289, 290, 291, 293], "ani": [7, 35, 44, 58, 64, 84, 86, 92, 102, 104, 113, 150, 152, 153, 183, 198, 205, 215, 227, 232, 258, 274, 275, 278, 284], "dtype": [7, 35, 44, 58, 64, 84, 86, 92, 102, 104, 113, 148, 150, 152, 153, 160, 168, 174, 183, 198, 227, 234, 258, 273, 275, 278, 289], "scalartyp": [7, 258], "t": [7, 18, 20, 25, 46, 131, 133, 137, 178, 225, 230, 258, 281, 285, 293], "raster": [7, 242, 251, 252, 292, 293], "none": [7, 35, 44, 45, 49, 58, 64, 66, 71, 74, 80, 84, 92, 104, 116, 131, 139, 150, 153, 161, 169, 175, 181, 183, 195, 196, 197, 199, 202, 206, 207, 209, 210, 214, 218, 221, 229, 234, 235, 237, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 255, 256, 257, 258, 273, 279, 285, 288, 290], "periodogram": [7, 215, 248, 271, 272, 274, 288, 292, 293], "power": [7, 148, 160, 168, 174, 195, 196, 197, 205, 222, 225, 227, 228, 232, 235, 236, 237, 248, 264, 265, 267, 275, 291, 292], "densiti": [7, 31, 248, 288, 291], "xx": [7, 248], "welch": [7, 248, 255], "spectrogram": [7, 255, 292, 293], "constel": [7, 148, 160, 168, 171, 174, 196, 222, 223, 231, 241, 268, 277, 292, 293], "symbol_map": [7, 115, 116, 129, 148, 160, 168, 171, 173, 174, 222, 257, 290, 293], "map": [7, 115, 116, 121, 129, 148, 160, 168, 173, 174, 222, 257, 292, 293], "ey": [7, 148, 160, 168, 174, 242, 292, 293], "diagram": [7, 9, 18, 35, 58, 104, 113, 131, 152, 183, 212, 213, 242, 292, 293], "phase_tre": [7, 148, 251, 293], "tree": [7, 251, 293], "continu": [7, 102, 148, 251, 285, 293], "cpm": [7, 251, 293], "kwarg": [7, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260], "e_b": [7, 53, 54, 55, 56, 57, 115, 117, 148, 160, 168, 170, 174, 197, 216, 217, 219, 240, 269, 292], "n_0": [7, 11, 12, 13, 31, 53, 54, 55, 56, 57, 115, 117, 127, 148, 160, 168, 170, 172, 174, 196, 197, 216, 217, 219, 220, 222, 240, 241, 254, 269, 270, 290, 292], "e_": [7, 53, 54, 55, 56, 57, 115, 127, 148, 160, 168, 172, 174, 196, 197, 216, 219, 220, 222, 241, 254, 270, 290, 292], "roc": [7, 46, 49, 178, 181, 253, 293], "receiv": [7, 9, 46, 47, 49, 51, 53, 115, 119, 120, 126, 140, 141, 143, 144, 148, 160, 162, 163, 168, 170, 172, 174, 178, 179, 180, 181, 182, 222, 224, 242, 247, 253, 293], "oper": [7, 11, 46, 49, 178, 181, 253, 293], "characterist": [7, 46, 49, 178, 181, 253, 293], "curv": [7, 46, 49, 170, 172, 178, 181, 240, 253, 254, 293], "enr": [7, 178, 179, 181, 247], "impulse_respons": [7, 35, 44, 58, 66, 84, 86, 94, 102, 104, 113, 150, 183, 206, 207, 208, 209, 210, 211, 225, 228, 245, 264, 265, 267, 286, 287, 291, 293], "step_respons": [7, 35, 44, 58, 71, 84, 86, 99, 102, 104, 113, 150, 183, 256, 286, 287, 289, 293], "step": [7, 35, 44, 58, 71, 84, 86, 99, 102, 104, 113, 150, 152, 153, 159, 183, 243, 256, 292], "zeros_pol": [7, 260, 287, 293], "zero": [7, 35, 36, 44, 58, 63, 74, 78, 80, 84, 85, 86, 87, 92, 101, 102, 104, 105, 106, 113, 131, 150, 153, 183, 185, 208, 227, 228, 234, 243, 244, 245, 246, 249, 250, 256, 260, 265, 271, 275, 286, 288, 289, 291, 292, 293], "pole": [7, 86, 87, 92, 96, 102, 113, 243, 244, 245, 246, 249, 250, 256, 260, 286, 292], "magnitude_respons": [7, 44, 64, 84, 92, 102, 113, 150, 206, 207, 208, 209, 210, 211, 228, 246, 264, 265, 267, 286, 287, 289, 291, 293], "omega": [7, 35, 44, 58, 64, 65, 68, 74, 84, 86, 92, 102, 104, 113, 150, 152, 154, 156, 158, 183, 243, 244, 246, 249, 250, 289], "phase_respons": [7, 64, 92, 250, 293], "angl": [7, 162, 250, 289], "phase_delai": [7, 35, 44, 58, 68, 84, 104, 150, 183, 249, 293], "tau_": [7, 35, 44, 58, 68, 84, 104, 150, 183, 249], "phi": [7, 35, 44, 58, 68, 84, 104, 115, 116, 124, 148, 149, 150, 160, 161, 168, 169, 171, 174, 175, 183, 223, 231, 233, 249], "group_delai": [7, 35, 44, 58, 65, 84, 104, 150, 183, 208, 244, 286, 287, 293], "group": [7, 35, 44, 58, 65, 84, 104, 150, 183, 208, 244, 292], "tau_g": [7, 35, 44, 58, 65, 84, 104, 150, 183, 244], "iir": [7, 18, 27, 66, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 113, 114, 131, 135, 150, 243, 244, 245, 246, 249, 250, 256, 260, 286, 289, 292, 293], "q": [8, 148, 160, 176, 177, 178, 179, 180, 182, 183, 185, 187, 190, 211, 277, 293], "comput": [8, 35, 46, 47, 48, 49, 50, 64, 92, 115, 117, 127, 140, 148, 160, 162, 168, 170, 172, 174, 176, 177, 178, 179, 180, 181, 182, 195, 196, 218, 221, 224, 229, 235, 237, 286, 287, 289, 291, 293], "complementari": [8, 176, 177], "cumul": [8, 176, 177], "distribut": [8, 176, 177], "standard": [8, 176, 177], "normal": [8, 18, 20, 25, 131, 133, 137, 176, 177, 206, 207, 209, 210, 222, 225, 228, 243, 244, 246, 248, 249, 250, 255, 264, 265, 267, 289, 291], "mathcal": [8, 46, 176, 177, 178, 179, 180, 181, 182, 196, 214], "qinv": [8, 176, 177, 293], "invers": [8, 177], "agc": [9, 10, 11, 12, 13, 14, 15, 16, 17, 140, 280, 292], "automat": [9, 10, 11, 140, 280, 292], "control": [9, 10, 11, 18, 140, 152, 154, 264, 267, 289, 292, 293], "note": [9, 35, 40, 43, 44, 46, 47, 48, 50, 58, 84, 86, 102, 104, 109, 112, 113, 131, 140, 150, 152, 162, 178, 179, 180, 182, 183, 189, 192, 194, 196, 197, 200, 203, 208, 212, 213, 225, 231, 236, 242, 261, 277], "block": [9, 18, 35, 58, 104, 113, 131, 152, 183, 212, 213], "exp": [9, 92, 153, 160, 168, 174, 215, 225, 231, 233, 243, 244, 245, 246, 249, 250, 256, 260, 272, 274, 277, 285, 287, 289], "z": [9, 18, 58, 86, 102, 113, 131, 152, 212, 213, 277, 286, 287, 289], "log": [9, 243, 244, 246, 248, 249, 250, 286, 287, 289], "beta": [9, 11, 13], "output": [9, 10, 11, 15, 35, 36, 38, 44, 58, 59, 66, 71, 74, 84, 86, 87, 89, 94, 99, 102, 103, 104, 105, 106, 107, 113, 114, 120, 131, 132, 150, 152, 153, 158, 159, 183, 185, 186, 196, 197, 198, 199, 200, 202, 203, 213, 214, 222, 227, 232, 234, 245, 256, 273, 275, 278, 281, 285, 286, 287, 289, 293], "attack": [9, 11, 12], "decai": [9, 11, 13, 285, 287], "refer": [9, 11, 15, 18, 26, 28, 29, 30, 31, 32, 44, 46, 47, 48, 50, 51, 74, 131, 140, 142, 143, 144, 162, 163, 170, 172, 178, 179, 180, 182, 194, 196, 204, 206, 207, 208, 209, 210, 211, 222, 223, 225, 227, 235, 261, 264, 267, 268, 275, 277, 287, 291, 292], "adder": [9, 35, 131, 152, 212, 213, 289], "multipli": [9, 18, 44, 104, 183], "michael": [9, 18, 26, 28, 29, 30, 31, 32, 44, 74, 131, 140, 162, 264, 267], "rice": [9, 18, 26, 28, 29, 30, 31, 32, 44, 74, 131, 140, 162, 264, 267], "digit": [9, 18, 26, 28, 29, 30, 31, 32, 44, 74, 131, 140, 162, 170, 172, 264, 267, 289, 292, 293], "commun": [9, 18, 26, 28, 29, 30, 31, 32, 44, 74, 131, 140, 162, 170, 172, 211, 261, 264, 267, 289, 292], "discret": [9, 18, 26, 28, 29, 30, 31, 32, 44, 74, 102, 113, 131, 140, 150, 162, 196, 214, 220, 264, 267, 270, 279, 285, 289, 292, 293], "approach": [9, 18, 26, 28, 29, 30, 31, 32, 44, 74, 131, 140, 162, 197, 200, 203, 264, 267, 289], "section": [9, 44, 46, 53, 54, 55, 56, 57, 74, 140, 162, 178, 287, 289], "9": [9, 35, 40, 43, 64, 74, 84, 92, 104, 105, 109, 112, 148, 160, 168, 174, 179, 183, 189, 192, 194, 201, 214, 222, 226, 227, 230, 261, 264, 267, 275, 281, 287, 288, 290, 291], "5": [9, 35, 40, 43, 44, 46, 47, 48, 49, 50, 51, 64, 74, 84, 102, 104, 105, 109, 112, 113, 140, 148, 150, 152, 160, 168, 174, 179, 181, 183, 189, 192, 194, 196, 199, 201, 202, 203, 206, 207, 208, 209, 210, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 230, 231, 236, 239, 242, 243, 244, 245, 246, 249, 250, 256, 258, 260, 261, 264, 267, 268, 269, 270, 271, 272, 274, 275, 277, 281, 285, 286, 287, 288, 289, 290, 291], "http": [9, 74, 194, 204, 206, 207, 208, 209, 210, 211, 225, 227, 235, 275, 277, 281, 282, 283], "wirelesspi": [9, 74], "com": [9, 74, 194, 206, 207, 208, 209, 210, 211, 225, 227, 275, 282, 283], "how": [9, 225, 228, 242, 251, 252, 258, 264, 265, 267, 275, 284], "work": 9, "exampl": [9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 40, 42, 43, 44, 45, 47, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 111, 112, 113, 114, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 168, 170, 171, 172, 173, 174, 176, 177, 179, 181, 183, 189, 191, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 289, 293], "creat": [9, 11, 18, 25, 35, 37, 44, 45, 51, 52, 58, 60, 74, 76, 84, 85, 86, 87, 89, 102, 103, 104, 105, 106, 113, 114, 115, 116, 131, 133, 148, 149, 150, 151, 152, 154, 160, 161, 168, 169, 171, 174, 175, 183, 185, 196, 198, 222, 223, 227, 233, 268, 271, 272, 275, 277, 285, 289, 291], "bursti": 9, "surround": 9, "In": [9, 11, 17, 35, 36, 37, 40, 43, 44, 45, 47, 49, 51, 59, 60, 64, 72, 74, 76, 82, 84, 87, 89, 92, 100, 102, 103, 104, 105, 106, 109, 112, 113, 114, 140, 148, 150, 151, 152, 160, 162, 168, 170, 171, 172, 173, 174, 176, 177, 179, 181, 183, 185, 189, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 285, 290], "np": [9, 35, 40, 43, 44, 47, 49, 64, 74, 84, 92, 102, 104, 105, 109, 112, 113, 115, 125, 129, 148, 150, 152, 160, 168, 170, 172, 173, 174, 179, 181, 183, 189, 192, 194, 196, 197, 198, 199, 200, 202, 203, 214, 215, 222, 223, 224, 227, 231, 233, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 254, 256, 258, 260, 261, 268, 271, 272, 274, 275, 277, 285, 286, 287, 288, 289, 290, 291], "1j": [9, 92, 215, 233, 243, 244, 245, 246, 249, 250, 256, 260, 272, 274, 285, 287, 289], "arang": [9, 35, 40, 43, 74, 84, 104, 105, 109, 112, 183, 189, 192, 196, 198, 215, 227, 233, 261, 271, 272, 274, 275, 277, 285, 289], "5000": [9, 262, 263], "100": [9, 44, 49, 64, 86, 92, 94, 99, 102, 113, 150, 152, 170, 172, 194, 196, 197, 200, 203, 205, 206, 207, 209, 210, 222, 232, 233, 240, 242, 243, 245, 251, 254, 256, 268, 271, 272, 274, 285, 289], "1000": [9, 64, 92, 145, 146, 148, 160, 165, 166, 168, 174, 222, 224, 271, 272, 290], "2000": 9, "10": [9, 40, 43, 44, 47, 49, 51, 74, 84, 102, 104, 105, 109, 112, 116, 148, 160, 161, 168, 169, 170, 172, 174, 175, 179, 181, 183, 189, 192, 194, 195, 196, 201, 205, 206, 207, 209, 210, 214, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 235, 236, 237, 238, 240, 241, 243, 244, 245, 246, 249, 250, 254, 256, 258, 260, 261, 264, 265, 266, 267, 268, 269, 270, 275, 285, 286, 287, 288, 289, 290, 291], "3000": 9, "4000": 9, "001": [9, 289], "random": [9, 46, 113, 148, 150, 160, 168, 174, 196, 199, 202, 214, 222, 223, 231, 241, 242, 251, 258, 268, 288, 289, 290], "randn": [9, 113, 150, 258], "size": [9, 120, 122, 198, 214, 227, 258, 275, 285, 289, 290, 291], "3": [9, 18, 26, 28, 29, 32, 35, 40, 43, 44, 46, 47, 51, 64, 74, 76, 84, 92, 102, 104, 105, 109, 112, 113, 140, 148, 150, 152, 160, 162, 168, 170, 171, 172, 173, 174, 178, 179, 183, 189, 192, 194, 196, 197, 198, 199, 201, 202, 205, 206, 207, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 241, 242, 243, 244, 245, 246, 249, 250, 256, 258, 260, 261, 264, 265, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 281, 282, 287, 289, 291, 292], "plt": [9, 35, 44, 47, 49, 74, 84, 102, 104, 105, 113, 140, 148, 150, 152, 160, 162, 168, 170, 171, 172, 173, 174, 179, 181, 183, 194, 196, 197, 198, 200, 203, 206, 207, 208, 209, 210, 211, 215, 222, 223, 224, 225, 227, 228, 231, 233, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 254, 256, 257, 258, 260, 264, 265, 267, 268, 271, 272, 274, 275, 277, 285, 286, 287, 288, 289, 290, 291], "figur": [9, 35, 44, 47, 49, 74, 84, 102, 104, 105, 113, 140, 148, 150, 152, 160, 162, 168, 170, 171, 172, 173, 174, 179, 181, 183, 194, 196, 197, 198, 200, 203, 206, 207, 208, 209, 210, 211, 215, 222, 223, 224, 225, 227, 228, 231, 233, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 254, 256, 257, 258, 259, 260, 264, 265, 267, 268, 271, 272, 274, 275, 277, 285, 286, 287, 288, 289, 290, 291], "figsiz": [9, 35, 44, 47, 49, 74, 84, 102, 104, 105, 113, 140, 148, 150, 152, 160, 162, 168, 170, 171, 172, 173, 174, 179, 181, 183, 194, 196, 197, 198, 200, 203, 206, 207, 208, 209, 210, 211, 215, 222, 223, 224, 225, 227, 228, 231, 233, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 254, 256, 257, 258, 259, 260, 264, 265, 267, 268, 271, 272, 274, 275, 277, 285, 286, 287, 288, 289, 290, 291], "8": [9, 35, 40, 43, 44, 47, 49, 74, 84, 92, 102, 104, 105, 109, 112, 113, 116, 140, 148, 149, 150, 152, 160, 161, 162, 168, 169, 170, 171, 172, 173, 174, 175, 179, 181, 183, 189, 192, 194, 196, 197, 198, 200, 201, 203, 206, 207, 208, 209, 210, 211, 214, 215, 222, 224, 225, 226, 227, 228, 230, 233, 236, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 254, 256, 257, 258, 259, 260, 261, 264, 265, 267, 271, 272, 274, 275, 277, 286, 287, 288, 289, 291], "plot": [9, 35, 44, 47, 49, 64, 65, 66, 68, 71, 74, 84, 92, 94, 99, 102, 104, 105, 113, 140, 148, 150, 152, 160, 162, 168, 170, 171, 172, 173, 174, 179, 181, 183, 196, 197, 198, 200, 203, 206, 207, 208, 209, 210, 211, 215, 222, 223, 224, 225, 227, 228, 231, 233, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 264, 265, 267, 268, 271, 272, 274, 275, 277, 285, 286, 287, 289, 290, 291, 292, 293], "titl": [9, 35, 44, 74, 102, 104, 140, 148, 152, 160, 162, 170, 172, 183, 194, 196, 197, 198, 200, 203, 215, 222, 223, 227, 231, 233, 240, 254, 258, 268, 271, 272, 274, 275, 277, 285, 288, 289, 290, 291], "tight_layout": [9, 35, 44, 74, 102, 104, 140, 148, 152, 160, 162, 170, 172, 183, 194, 196, 197, 198, 200, 203, 215, 222, 223, 224, 227, 233, 240, 254, 258, 268, 271, 272, 274, 275, 277, 288, 289, 290, 291], "01": [9, 64, 92, 173, 174, 230, 287, 289], "notic": [9, 271, 272, 285, 291], "over": [9, 170, 172, 230], "amplifi": [9, 11, 13], "accord": 9, "also": [9, 140, 148, 162, 208, 224, 225, 292], "when": [9, 16, 35, 42, 44, 58, 63, 66, 69, 71, 74, 78, 84, 86, 94, 97, 99, 102, 104, 111, 113, 114, 150, 183, 191, 196, 197, 199, 200, 202, 203, 220, 227, 243, 244, 245, 246, 249, 250, 256, 270, 275, 277, 285, 286, 287], "interest": 9, "appear": [9, 285], "quickli": 9, "decreas": [9, 197], "6": [9, 35, 40, 43, 44, 51, 74, 84, 92, 102, 104, 105, 109, 112, 113, 140, 148, 150, 152, 160, 168, 173, 174, 179, 180, 182, 183, 189, 192, 194, 201, 205, 208, 214, 215, 216, 217, 222, 224, 226, 227, 230, 232, 236, 241, 242, 243, 244, 245, 246, 249, 250, 256, 257, 258, 260, 261, 264, 267, 271, 272, 274, 275, 277, 281, 284, 286, 287, 289, 290], "ylim": [9, 84, 113, 150, 206, 207, 208, 209, 210, 277, 286, 289, 290, 291], "__call__": [9, 10, 11, 17, 35, 36, 37, 44, 45, 58, 59, 60, 72, 74, 75, 76, 82, 84, 86, 87, 88, 89, 100, 102, 103, 104, 105, 106, 113, 114, 131, 132, 140, 143, 150, 151, 152, 153, 162, 163, 183, 184, 185, 293], "perform": [9, 10, 18, 36, 59, 85, 105, 170, 172, 208, 215, 274, 277, 280, 286, 287, 290, 292, 293], "reset": [9, 16, 35, 42, 44, 58, 69, 74, 80, 84, 86, 97, 102, 104, 111, 113, 131, 139, 150, 152, 158, 183, 191], "indic": [9, 11, 17, 35, 37, 38, 44, 45, 48, 49, 50, 58, 60, 72, 74, 76, 82, 84, 86, 87, 89, 100, 102, 103, 104, 106, 107, 113, 114, 115, 116, 148, 149, 150, 151, 160, 161, 168, 169, 170, 172, 174, 175, 179, 180, 181, 182, 183, 185, 186, 195, 218, 225, 228, 231, 233, 237, 238, 242, 250, 251, 252, 258, 264, 265, 266, 267, 275], "whether": [9, 11, 17, 35, 37, 44, 45, 48, 49, 50, 58, 60, 72, 74, 76, 82, 84, 86, 87, 89, 100, 102, 103, 104, 106, 113, 114, 150, 151, 170, 172, 179, 180, 181, 182, 183, 185, 195, 218, 233, 237, 238, 250, 252, 258, 266], "The": [9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 281, 282, 283, 284, 286, 287, 289, 290, 291, 292, 294], "current": [9, 14, 258, 283], "settabl": [9, 12, 13, 15, 140, 141, 142, 152, 155, 156, 157], "desir": [9, 11, 15, 194, 196, 290], "paramet": [10, 11, 16, 25, 26, 28, 31, 36, 37, 45, 47, 48, 49, 50, 53, 54, 55, 57, 59, 60, 64, 65, 66, 68, 71, 75, 76, 78, 80, 85, 87, 88, 89, 92, 94, 99, 103, 105, 106, 114, 116, 117, 119, 120, 121, 122, 127, 132, 133, 143, 144, 145, 146, 149, 151, 153, 154, 159, 161, 163, 165, 166, 169, 170, 172, 175, 176, 177, 179, 180, 181, 182, 185, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], "stream": [11, 16, 17, 36, 37, 42, 45, 59, 60, 63, 69, 72, 76, 78, 82, 87, 89, 97, 100, 103, 105, 106, 111, 114, 148, 151, 160, 168, 174, 185, 191, 287], "meant": [11, 12, 13, 18], "attenu": [11, 12, 206, 207, 209, 210, 211, 264, 267], "strong": [11, 12], "after": [11, 12, 13, 40, 43, 109, 112, 189, 192], "approx": [11, 12, 13, 84], "reduc": [11, 12, 13], "e": [11, 12, 13, 56, 140, 152, 162, 178, 179, 180, 181, 182, 195, 199, 200, 218, 277, 282, 283, 286, 287, 290], "its": [11, 12, 13, 58, 86, 87, 102, 113, 196, 286, 287, 291], "origin": [11, 12, 13, 160, 174, 274, 285], "valu": [11, 12, 13, 46, 115, 116, 117, 127, 148, 149, 160, 161, 168, 169, 170, 172, 174, 175, 176, 177, 198, 205, 212, 213, 225, 227, 231, 232, 241, 244, 246, 249, 250, 257, 275, 282, 287, 293], "weak": [11, 13], "mode": [11, 16, 17, 36, 37, 42, 45, 59, 60, 63, 69, 72, 76, 78, 82, 87, 89, 97, 100, 103, 105, 106, 111, 114, 151, 184, 185, 191, 198, 227, 275, 277], "preserv": [11, 17, 35, 37, 45, 60, 72, 76, 82, 87, 89, 100, 103, 104, 106, 114, 151, 183, 185, 242, 252], "call": [11, 17, 35, 36, 37, 45, 59, 60, 72, 76, 82, 87, 89, 100, 103, 104, 105, 106, 114, 151, 183, 185], "properti": [12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 27, 29, 30, 33, 34, 38, 39, 40, 41, 43, 62, 67, 70, 72, 73, 77, 79, 81, 82, 83, 90, 91, 93, 95, 96, 98, 100, 101, 107, 108, 109, 110, 112, 118, 123, 124, 125, 126, 128, 129, 130, 134, 135, 136, 137, 138, 141, 142, 147, 155, 156, 157, 167, 171, 173, 186, 187, 188, 189, 190, 192, 193, 293], "onli": [16, 18, 36, 42, 59, 63, 64, 69, 78, 92, 97, 105, 111, 116, 140, 149, 161, 169, 173, 175, 191, 196, 206, 207, 209, 210, 224, 227, 228, 252, 265, 275, 284, 289, 290], "initi": [16, 140, 144, 162, 164, 289], "closedlooppl": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 280, 289, 293], "defin": [18, 58, 86, 102, 196, 214, 225, 253, 277, 280, 287, 292], "close": [18, 25, 27, 280, 292, 293], "loop": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 131, 132, 133, 134, 135, 136, 137, 138, 139, 152, 153, 154, 155, 156, 157, 158, 159, 292, 293], "pll": [18, 19, 20, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 280, 292, 293], "analysi": [18, 25, 282, 289, 292, 293], "bb": [18, 288, 289], "phase_err": [18, 289], "ped": [18, 24, 25, 133, 140, 144, 145, 146, 162, 163, 164, 165, 166, 167, 280, 289, 292, 293], "lf": [18, 289], "phase_est": [18, 289], "lo": [18, 289], "nco": [18, 21, 25, 133, 152, 153, 154, 155, 156, 157, 158, 159, 280, 289, 292, 293], "local": [18, 281, 289], "oscil": [18, 152, 154, 280, 289, 292, 293], "detector": [18, 24, 25, 46, 133, 140, 147, 162, 167, 178, 289, 292, 293], "filter": [18, 22, 23, 25, 27, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 120, 126, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 148, 150, 151, 160, 168, 174, 183, 184, 185, 186, 188, 189, 191, 192, 206, 207, 208, 209, 210, 211, 215, 225, 228, 242, 243, 244, 245, 246, 249, 250, 256, 260, 261, 264, 265, 267, 274, 280, 291, 292, 293], "numer": [18, 152, 154, 280, 287, 289, 292, 293], "transfer": [18, 27, 58, 86, 87, 113, 131, 225, 286, 287, 289], "2nd": [18, 131, 133, 280, 289, 293], "proport": [18, 22, 36, 105, 131, 133, 138, 224, 236, 280, 293], "plu": [18, 131, 133, 280, 293], "k_1": [18, 22, 131, 138, 289], "k_2": [18, 23, 131, 136, 289], "frac": [18, 26, 28, 31, 32, 44, 46, 47, 48, 50, 58, 62, 74, 77, 84, 86, 102, 106, 113, 131, 150, 160, 168, 174, 178, 179, 180, 185, 194, 195, 196, 197, 204, 216, 217, 219, 220, 222, 224, 225, 231, 232, 233, 235, 236, 266, 269, 270, 276, 277, 289], "k_0": [18, 21, 25, 133, 152, 154, 155, 289], "k_p": [18, 24, 25, 133, 140, 147, 162, 167, 289], "appendix": [18, 131, 264, 267], "lock": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 131, 132, 133, 134, 135, 136, 137, 138, 139, 152, 153, 154, 155, 156, 157, 158, 159, 292], "see": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 42, 45, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 93, 95, 96, 97, 98, 100, 101, 103, 111, 114, 131, 132, 133, 134, 135, 136, 137, 138, 139, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 168, 171, 173, 174, 183, 191, 206, 207, 209, 210, 215, 225, 228, 243, 244, 245, 246, 249, 250, 256, 260, 264, 265, 267, 292], "noise_bandwidth": [18, 25, 131, 133, 137], "damping_factor": [18, 25, 131, 133, 134], "object": [18, 25, 51, 52, 115, 116, 148, 149, 160, 161, 168, 169, 174, 175, 227, 243, 244, 245, 246, 249, 250, 256, 260, 275, 289, 293], "phase_lock_tim": [18, 32], "frequency_lock_tim": [18, 26], "freq_offset": [18, 26, 28], "lock_tim": [18, 28, 289], "phase_error_vari": [18, 31], "cn0": [18, 31], "varianc": [18, 31, 46, 48, 50, 180, 182, 196], "steadi": [18, 31], "state": [18, 31, 35, 36, 42, 44, 58, 59, 63, 69, 70, 72, 74, 78, 80, 81, 82, 84, 86, 97, 98, 100, 102, 104, 105, 111, 113, 150, 183, 191, 293], "sample_r": [18, 25, 33, 35, 64, 65, 68, 74, 92, 104, 105, 148, 160, 168, 174, 183, 215, 223, 233, 242, 243, 244, 246, 248, 249, 250, 251, 252, 255, 258, 271, 272, 274, 285, 289, 291], "bnt": [18, 20, 289], "bandwidth": [18, 19, 20, 25, 29, 45, 131, 133, 137, 197, 206, 207, 225, 264, 267, 289, 291, 293], "b_n": [18, 19, 20, 25, 26, 28, 31, 32, 131, 133, 137], "bn": [18, 19], "hz": [18, 19, 25, 26, 28, 31, 64, 65, 68, 92, 131, 133, 137, 197, 205, 215, 223, 224, 225, 232, 233, 236, 271, 272, 276, 285], "zeta": [18, 25, 34, 131, 133, 134], "damp": [18, 25, 34, 131, 133, 134, 289], "k0": [18, 21, 25, 133, 152, 289], "kp": [18, 24, 25, 133, 289], "k1": [18, 22, 131, 289], "k2": [18, 23, 131, 289], "repres": [18, 27, 199, 200], "omega_n": [18, 30, 289], "natur": [18, 30], "radian": [18, 29, 30, 31, 140, 143, 145, 146, 152, 153, 154, 156, 157, 158, 162, 163, 165, 166, 174, 289], "omega_3db": [18, 29], "omega_": [18, 29], "textrm": [18, 29], "where": [25, 36, 59, 105, 116, 131, 133, 137, 169, 175, 178, 196, 197, 214, 216, 217, 219, 225, 269, 277, 286, 287, 292], "period": [25, 131, 133, 137, 148, 277], "second": [25, 26, 28, 32, 51, 131, 133, 137, 225], "critic": [25, 34, 131, 133, 134, 289], "underdamp": [25, 34, 131, 133, 134], "overdamp": [25, 34, 131, 133, 134], "ted": [25, 133], "t_": [26, 28, 32, 75, 225, 291], "fl": [26, 28], "delta": [26, 28, 35, 44, 58, 66, 84, 85, 86, 94, 102, 104, 113, 150, 183, 208, 245, 286, 287], "take": [26, 28, 32, 281], "onto": [26, 28, 32], "39": 26, "pl": [28, 32, 282], "38": 28, "34": [29, 258], "33": 30, "sigma_": [31, 46, 47, 49], "theta_": [31, 140, 143, 162, 163], "carrier": [31, 168], "43": 31, "40": [32, 44, 74, 104, 183, 215], "less": [34, 194], "than": [34, 148, 149, 161, 169, 173, 175, 194, 228, 231, 241, 257, 265], "greater": [34, 264, 267], "fir": [35, 36, 37, 38, 40, 42, 43, 44, 45, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 84, 85, 104, 105, 106, 107, 109, 111, 112, 113, 114, 150, 151, 183, 184, 185, 186, 189, 191, 192, 206, 207, 208, 209, 210, 211, 242, 243, 244, 245, 246, 249, 250, 256, 260, 261, 288, 292, 293], "equival": [35, 85, 104, 183, 196, 197, 206, 207, 208, 209, 210, 220, 227, 270, 275, 283, 285], "first": [35, 38, 51, 104, 106, 107, 148, 158, 160, 183, 185, 186, 234, 245, 258, 273, 282, 284], "prototyp": [35, 40, 43, 104, 109, 112, 183, 189, 192], "feedforward": [35, 37, 40, 43, 44, 58, 60, 73, 84, 86, 89, 91, 102, 104, 106, 109, 112, 113, 150, 183, 185, 189, 192, 243, 244, 245, 246, 249, 250, 256, 260, 286, 287], "coeffici": [35, 37, 58, 60, 86, 89, 104, 106, 115, 126, 130, 148, 160, 168, 174, 183, 185, 243, 244, 245, 246, 249, 250, 256, 260, 286, 287], "discard": [35, 183], "each": [35, 36, 59, 104, 105, 183, 222, 230, 248, 252, 255], "instead": [35, 104, 183, 241], "ar": [35, 36, 37, 40, 43, 45, 46, 51, 53, 54, 55, 57, 59, 60, 76, 85, 87, 89, 103, 104, 105, 106, 109, 112, 114, 115, 116, 126, 130, 148, 149, 151, 153, 160, 161, 168, 169, 174, 175, 178, 183, 185, 189, 192, 197, 199, 200, 202, 203, 208, 224, 227, 228, 234, 241, 242, 243, 244, 246, 248, 249, 250, 251, 252, 255, 257, 258, 259, 261, 265, 271, 272, 275, 281, 283, 285, 287, 289, 291, 292, 294], "commut": [35, 104, 183], "parallel": [35, 104, 183], "sum": [35, 46, 58, 86, 178, 291], "prevent": [35, 104, 160, 174, 183], "need": [35, 104, 183, 281, 282, 284], "done": [35, 281], "case": [35, 104, 174, 178, 183], "3x": [35, 104], "v": [35, 152, 205, 232, 281], "7": [35, 40, 43, 44, 74, 84, 104, 105, 109, 112, 140, 148, 160, 162, 168, 173, 174, 179, 183, 189, 192, 194, 201, 208, 209, 211, 214, 222, 226, 227, 230, 261, 275, 277, 281, 282, 283, 287, 289], "summat": 35, "bottom": [35, 104, 183], "top": [35, 104, 183], "relat": [35, 40, 43, 104, 109, 112, 183, 189, 192, 197, 225], "co": [35, 74, 104, 105, 183, 233], "64": [35, 84, 208, 230, 287], "280": 35, "out": [35, 40, 43, 51, 64, 84, 92, 104, 105, 109, 112, 140, 148, 160, 168, 171, 173, 174, 176, 177, 183, 189, 192, 198, 199, 201, 202, 205, 212, 213, 214, 216, 217, 219, 220, 222, 224, 226, 227, 232, 234, 236, 239, 259, 261, 262, 263, 269, 270, 273, 275, 276], "marker": [35, 74, 104, 105, 152, 183, 241, 257, 258, 285, 286, 287, 290], "label": [35, 44, 47, 49, 74, 84, 102, 104, 105, 113, 140, 149, 150, 161, 162, 169, 170, 172, 175, 179, 181, 183, 194, 196, 206, 207, 208, 209, 210, 222, 223, 225, 227, 231, 240, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 254, 255, 258, 264, 267, 268, 275, 285, 288, 289, 290, 291], "o": [35, 74, 104, 105, 183, 285], "true": [35, 47, 48, 49, 50, 64, 74, 92, 104, 105, 140, 145, 146, 148, 160, 162, 165, 166, 168, 170, 172, 174, 179, 180, 181, 182, 183, 194, 195, 197, 199, 200, 202, 203, 214, 218, 224, 227, 233, 237, 238, 241, 250, 252, 257, 258, 259, 266, 275, 288, 289, 290], "y1": [35, 74, 104, 105, 183, 231], "70": [35, 230], "y2": [35, 74, 104, 105, 183, 231], "140": [35, 215], "y3": [35, 74, 104, 105, 183], "210": 35, "y4": [35, 74, 104, 183], "y5": [35, 74, 104, 183], "flush": [35, 36, 44, 58, 59, 63, 74, 78, 84, 104, 105, 150, 183, 293], "y_1": [35, 104, 183, 231], "y_2": [35, 104, 183, 231], "y_3": [35, 104, 183], "y_4": [35, 104, 183], "y_5": [35, 104, 183], "full": [35, 36, 59, 104, 105, 183, 184, 198, 227, 275], "__len__": [35, 44, 58, 61, 84, 104, 150, 183], "pass": [35, 44, 58, 63, 74, 78, 84, 104, 150, 183, 196, 199, 202, 214, 222, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 279, 281, 283, 286, 287, 293], "through": [35, 44, 58, 63, 74, 78, 84, 104, 150, 160, 174, 183, 199, 202, 214, 279, 286, 287, 289], "consist": [35, 44, 53, 54, 55, 56, 57, 58, 70, 74, 81, 84, 104, 150, 183], "previou": [35, 37, 44, 45, 58, 60, 70, 74, 76, 80, 81, 84, 87, 89, 103, 104, 106, 113, 114, 150, 151, 183, 185, 212, 213], "u": [35, 44, 58, 71, 84, 86, 99, 102, 104, 113, 150, 183, 194, 256, 277, 278, 286, 287], "frequency_respons": [35, 44, 58, 64, 84, 86, 92, 102, 104, 113, 150, 183, 293], "numpi": [35, 44, 58, 64, 84, 86, 92, 102, 104, 113, 150, 153, 183, 196, 199, 202, 214, 273, 282, 285, 286, 287, 288, 289, 290, 291, 292], "float64": [35, 44, 58, 64, 84, 86, 92, 102, 104, 113, 150, 152, 153, 183, 198, 227, 275, 278], "complex128": [35, 44, 58, 64, 84, 86, 92, 102, 104, 113, 150, 152, 153, 183], "custom": [35, 39, 104, 108, 116, 161, 169, 175, 183, 188, 206, 207, 209, 210, 293], "multir": [35, 36, 37, 39, 104, 105, 106, 108, 183, 185, 188, 211, 261, 293], "polyphase_tap": [35, 40, 43, 104, 105, 109, 112, 183, 189, 192], "index": [35, 38, 74, 80, 104, 107, 115, 148, 160, 168, 174, 183, 186, 227, 242, 251, 252, 257, 275, 278, 281], "correspond": [35, 38, 51, 56, 104, 107, 183, 186, 252], "l": [36, 59, 84, 85, 88, 105, 114, 150, 151, 208], "convolut": [36, 59, 104, 105], "ha": [36, 59, 102, 104, 105, 148, 160, 168, 196, 206, 207, 208, 209, 210, 215, 224, 225, 236, 274, 277, 289, 290, 291], "align": [36, 59, 105, 106, 160, 185, 227, 275, 285], "howev": [36, 53, 54, 55, 57, 59, 84, 105, 131, 200, 203, 227, 275, 285], "produc": [36, 59, 104, 105, 183, 225, 291], "final": [36, 59, 105], "dictat": [36, 59, 105], "argument": [36, 37, 59, 105, 106, 185, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 282, 286, 287], "specif": [37, 56, 64, 92, 106, 185, 284, 291], "npt": [37, 64, 92, 106, 116, 149, 161, 169, 175, 185, 206, 207, 209, 210, 243, 244, 245, 246, 249, 250, 256, 260], "befor": [40, 43, 109, 112, 189, 192, 294], "decomposit": [40, 43, 109, 112, 189, 192, 293], "cdot": [44, 113, 140, 162, 206, 207, 209, 210, 233], "win": 44, "quad": [44, 150], "le": [44, 85, 150, 194, 208, 233, 236, 264, 267], "truncat": 44, "puls": [44, 102, 115, 116, 120, 122, 125, 126, 130, 148, 160, 161, 168, 169, 174, 175, 225, 228, 242, 258, 264, 265, 267, 292, 293], "same": [44, 59, 105, 140, 162, 258, 286], "deriv": 44, "across": [44, 194, 221, 229], "fir_2": 44, "fir_6": 44, "fir_10": 44, "fir_20": 44, "20": [44, 45, 47, 49, 74, 104, 105, 148, 152, 160, 168, 174, 179, 183, 194, 197, 199, 202, 205, 214, 222, 223, 230, 231, 232, 238, 261, 266, 274, 288, 290, 293], "fir_40": 44, "fir_80": 44, "80": [44, 211, 277], "y_axi": [44, 246, 248, 293], "linspac": [44, 47, 64, 92, 102, 170, 172, 179, 197, 200, 203, 224, 240, 254, 287, 288, 289, 290], "ab": [44, 102, 198, 227, 275, 277, 291], "color": [44, 102, 242, 251, 252, 258, 288, 291], "linestyl": [44, 102, 140, 148, 160, 162, 168, 174, 241, 252, 257, 259, 277, 285, 289, 290, 291], "theori": [44, 46, 47, 48, 50, 102, 178, 179, 180, 182], "legend": [44, 84, 102, 140, 162, 194, 206, 207, 208, 209, 210, 231, 285, 288, 289, 291], "d": [44, 58, 62, 74, 77, 84, 150, 221, 224, 229, 236, 281, 283, 292], "lfloor": [44, 58, 62, 74, 77, 84, 150], "rfloor": [44, 58, 62, 74, 77, 84, 150], "blackman": [45, 206, 207, 209, 210], "increas": [45, 224, 236, 287], "scipi": [45, 58, 86, 206, 207, 209, 210, 248, 255, 291, 292], "definit": [45, 243, 244, 245, 246, 249, 250, 256, 260], "get_window": 45, "detail": 45, "If": [45, 49, 80, 116, 153, 161, 169, 175, 181, 183, 195, 196, 197, 214, 218, 234, 237, 238, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 255, 256, 257, 258, 266, 271, 273, 292], "null": [46, 178, 291], "altern": [46, 178, 287], "hypothes": [46, 178], "follow": [46, 51, 115, 148, 160, 168, 174, 231, 241, 252, 255, 257, 259, 261, 289], "assum": [46, 178, 196, 214, 234, 258, 273], "process": [46, 47, 48, 50, 113, 150, 178, 179, 180, 182, 211, 261, 287, 289, 292], "w": [46, 178, 196, 285, 286, 287, 288, 289, 290, 291], "sigma": [46, 47, 48, 49, 50, 178, 179, 180, 181, 182, 196, 197], "_0": [46, 178], "_1": [46, 178], "test": [46, 178, 282, 283, 292], "statist": [46, 47, 48, 50, 178, 179, 180, 182], "limits_": [46, 58, 86, 178], "left": [46, 47, 48, 84, 86, 160, 162, 168, 174, 178, 179, 180, 182, 194, 195, 196, 197, 218, 221, 222, 224, 225, 231, 233, 236, 237, 238, 266, 277], "right": [46, 47, 48, 86, 160, 162, 168, 174, 178, 179, 180, 182, 194, 195, 196, 197, 218, 221, 222, 224, 225, 231, 233, 236, 237, 238, 266, 277], "gamma": [46, 48, 50, 178, 180, 182, 194], "sim": [46, 178, 196, 282], "chi_": [46, 47, 48], "2n": [46, 47, 48], "text": [46, 174, 178, 194, 195, 196, 197, 200, 203, 204, 205, 211, 222, 223, 224, 232, 235, 237, 238, 266, 268], "under": [46, 178], "detect": [46, 47, 48, 49, 50, 140, 143, 145, 146, 162, 163, 165, 166, 178, 179, 180, 181, 182, 194, 247, 253, 293], "threshold": [46, 48, 50, 178, 180, 182], "q_": [46, 47, 48, 50], "chi_n": [46, 47, 48, 50], "steven": [46, 47, 48, 50, 178, 179, 180, 182], "kai": [46, 47, 48, 50, 178, 179, 180, 182], "fundament": [46, 47, 48, 50, 178, 179, 180, 182], "static": [46, 47, 48, 49, 50, 178, 179, 180, 181, 182, 282], "n_nc": [46, 47, 48, 49, 50, 194], "number": [47, 48, 49, 50, 51, 53, 54, 57, 64, 65, 66, 68, 71, 92, 94, 99, 115, 116, 118, 128, 145, 146, 148, 149, 159, 160, 161, 165, 166, 168, 169, 174, 175, 194, 196, 199, 202, 214, 216, 217, 219, 225, 228, 230, 234, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 255, 256, 261, 264, 265, 267, 269, 273], "For": [47, 48, 50, 179, 180, 182, 196, 215, 224, 274, 281, 286], "101": [47, 49, 179, 181, 206, 207, 209, 210], "25": [47, 199, 202, 208, 214, 239, 242, 262, 263, 285, 288, 289, 291], "1e": [47, 179, 223, 290], "sigma2": [48, 50, 180, 182], "logspac": [49, 64, 92, 181, 194], "theoret": [49, 170, 172, 240, 254, 290, 293], "variou": [49, 84, 282, 291], "1_000": [49, 113, 150, 196, 223, 224, 231, 268, 288], "000": [49, 223], "5_000": 49, "measur": [51, 53, 195, 196, 204, 205, 218, 221, 222, 229, 232, 235, 237, 238, 266, 289, 292, 293], "new": [51, 52, 74, 76, 113, 115, 116, 148, 149, 160, 161, 168, 169, 174, 175, 268], "accumul": [51, 102, 152, 153, 154, 156, 158, 289, 293], "from": [51, 65, 68, 86, 87, 102, 106, 113, 115, 129, 148, 160, 168, 173, 174, 185, 205, 216, 217, 219, 220, 232, 239, 248, 255, 262, 263, 269, 270, 281, 286, 287, 289, 292], "contain": [51, 196, 230], "add": [51, 53, 56, 148, 160, 168, 174, 196, 223, 228, 252, 265, 268, 279, 290, 294], "total": [51, 225, 228, 264, 265, 267, 291], "count": [51, 54, 222], "error_r": [51, 55, 56, 290], "everi": [51, 285], "can": [51, 53, 54, 55, 57, 131, 148, 196, 222, 225, 227, 234, 242, 245, 248, 255, 275, 283, 286, 287, 290, 292, 294], "obtain": 51, "tabul": [51, 52], "all": [51, 56, 153, 222, 242, 251, 252, 282, 284, 292], "ascend": [51, 56], "other": [53, 54, 55, 57, 285, 294], "quantiti": [53, 54, 55, 56, 57], "user": [53, 54, 55, 57, 286, 287], "caution": [53, 54, 55, 57], "instanc": [53, 54, 55, 57, 148], "transmit": [53, 115, 130, 140, 143, 148, 160, 162, 163, 168, 174, 222, 242], "whatev": 56, "wa": [56, 197], "provid": [56, 115, 117, 127, 148, 160, 168, 170, 172, 174, 252, 282, 292], "wrapper": [58, 86], "convolv": 58, "It": [58, 86, 104, 116, 131, 140, 161, 169, 175, 196, 242], "support": [58, 86, 293], "one": [58, 86, 149, 160, 161, 169, 173, 175, 225, 230, 242, 243, 244, 246, 248, 249, 250, 255, 271, 286, 287, 288, 291], "sum_": [58, 86, 180, 182, 195, 196, 197, 218, 221, 222, 229, 266], "valid": [59, 224, 242, 251, 252, 277], "remain": [63, 78, 215, 234], "1024": [64, 65, 68, 92, 243, 244, 246, 249, 250, 288, 291], "whole": [64, 92, 291], "decad": [64, 92, 243, 244, 246, 249, 250, 286, 289], "point": [64, 92, 145, 146, 165, 166, 248, 255], "endpoint": [64, 92, 287], "includ": [64, 92, 282, 283, 284, 292], "integ": [64, 92, 234], "maximum": [64, 92, 115, 119, 120, 140, 148, 160, 168, 174, 225, 228, 241, 257, 264, 265, 267, 280, 289, 293], "max_f": [64, 92], "log10": [64, 92], "evenli": [64, 92], "00000000e": [64, 92, 173, 174, 287], "00": [64, 92, 173, 174, 287], "76562500e": [64, 92], "04": [64, 92, 230, 287], "95312500e": [64, 92], "03": [64, 92, 230, 287], "97070312e": [64, 92], "98046875e": [64, 92], "99023438e": [64, 92], "95337172": 64, "30202676j": 64, "8178049": 64, "5759632j": 64, "6058636": 64, "79630028j": 64, "rad": [64, 92], "0000000000000002": 64, "0j": [64, 92, 149, 161, 169, 175], "sever": [64, 92], "200": [64, 92, 215, 285, 290], "300": [64, 92, 271, 272], "400": [64, 92, 215, 285], "00391660e": 64, "11022302e": 64, "16j": [64, 173, 174], "53081763e": 64, "79453110e": 64, "17j": 64, "62720131e": 64, "99104274e": 64, "83622458e": 64, "17093835e": 64, "resampl": [74, 75, 76, 78, 79, 80, 81, 82, 83, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 211, 261, 292, 293], "structur": 74, "angular": 74, "179": 74, "1415926": 74, "11": [74, 104, 148, 160, 168, 174, 201, 211, 226, 227, 261, 275, 281], "farrow1": 74, "quadrat": 74, "farrow2": 74, "cubic": 74, "farrow3": 74, "quartic": 74, "12": [74, 104, 148, 160, 168, 174, 180, 182, 194, 201, 211, 226, 261, 286, 290, 293], "farrow4": 74, "13": [74, 104, 148, 160, 168, 174, 178, 179, 180, 182, 198, 201, 226, 258, 261, 293], "14": [74, 148, 160, 168, 174, 179, 201, 226, 261, 293], "compar": [74, 113, 140, 150, 162, 170, 172, 206, 207, 208, 209, 210, 245, 291], "vari": [74, 153], "15": [74, 140, 148, 181, 201, 226, 227, 261, 274, 275], "xlim": [74, 215, 274, 288, 289, 291], "comparison": [74, 140, 162, 282], "run": [74, 281], "17": [74, 173, 174, 222, 236, 261, 281], "18": [74, 261, 281, 290], "30": [74, 104, 113, 150, 183, 215, 243, 245, 256, 271, 272, 287, 293], "concaten": [74, 105, 287], "19": [74, 261, 293], "_delai": 74, "must": [76, 196, 206, 207, 209, 210, 225, 227, 233, 252, 264, 267, 275, 277], "should": [80, 140, 148, 242, 283], "equal": [80, 148], "three": [80, 285, 291], "21719": 84, "examin": [84, 242], "flat": [84, 208], "32": [84, 208, 285], "128": 84, "loc": 84, "lower": [84, 148, 160, 174, 264, 267], "effect": 84, "outsid": [84, 287], "symmetri": 84, "about": [84, 206, 207, 258, 284], "band": 84, "worst": 84, "1f": 84, "around": [84, 149, 161, 169, 175], "perfectli": 84, "exactli": 84, "even": [85, 174, 206, 207, 208, 209, 210, 225, 264, 267], "have": [85, 198, 208, 215, 227, 234, 258, 273, 274, 275], "best": [85, 208], "odd": [85, 174, 208, 271], "append": [85, 208, 271, 288], "lfilter": 86, "b_i": [86, 89, 91, 102, 113, 243, 244, 245, 246, 249, 250, 256, 260, 287], "feedback": [86, 89, 90, 102, 113, 243, 244, 245, 246, 249, 250, 256, 260, 287], "a_j": [86, 89, 90, 102, 113, 243, 244, 245, 246, 249, 250, 256, 260, 287], "These": [86, 160, 168, 174, 259, 283, 289], "differ": [86, 113, 149, 161, 169, 173, 175, 206, 207, 208, 209, 210, 227, 245, 258, 275, 277, 291], "a_0": 86, "classmethod": [86, 87, 102, 113], "zerospol": [86, 87, 92, 102, 113, 243, 244, 245, 246, 249, 250, 256, 260, 287], "self": [86, 87, 102, 113], "b_tap": [86, 91, 102, 113, 287], "a_tap": [86, 90, 102, 113, 287], "conj": [92, 243, 244, 245, 246, 249, 250, 256, 260, 287, 289], "4722987": 92, "47271105": 92, "0041658j": 92, "47394825": 92, "00830241j": 92, "47601067": 92, "01238051j": 92, "472298696877605": 92, "36961426": 92, "9678537j": 92, "57338213": 92, "77694738j": 92, "52496713": 92, "3885743j": 92, "51520024": 92, "1706839j": 92, "accordingli": 102, "dc": [102, 208], "backward": [102, 103, 293, 294], "trapezoid": [102, 103, 293], "forward": [102, 103, 152, 159, 293], "iir_back": 102, "iir_trap": 102, "iir_forw": 102, "y_back": 102, "y_trap": 102, "y_forw": 102, "height": 103, "insert": [104, 183], "hold": [104, 106, 183, 185, 234, 293], "recommend": 104, "wai": [104, 283], "zoh": [104, 106, 108, 183, 185, 188], "matlab": [104, 106, 108, 183, 185, 188, 292], "iter": 105, "shape": [105, 115, 116, 120, 122, 125, 126, 130, 148, 160, 161, 168, 169, 174, 175, 225, 228, 242, 258, 264, 265, 267, 287, 292, 293], "linearli": [106, 185], "2r": 106, "ramp": [106, 131, 185], "advanc": [106, 185], "ones": [106, 185, 206, 207, 209, 210, 289], "approxim": [113, 114, 194, 293], "rememb": 113, "scale": [113, 140, 243, 244, 246, 248, 249, 250, 255, 286, 287], "\u03b1": 113, "35": [113, 150], "y_fir": [113, 150], "y_iir": [113, 150], "modul": [115, 116, 122, 123, 125, 140, 145, 146, 148, 152, 160, 161, 162, 165, 166, 168, 169, 170, 172, 174, 175, 216, 217, 219, 222, 240, 242, 251, 254, 257, 258, 269, 281, 284, 290, 292, 293], "nomenclatur": [115, 148, 160, 168, 174], "variabl": [115, 148, 152, 153, 160, 168, 174, 230, 289], "name": [115, 148, 160, 168, 174], "decis": [115, 119, 120, 140, 143, 146, 148, 160, 162, 163, 166, 168, 174, 242, 289], "tild": [115, 119, 120, 140, 143, 148, 160, 162, 163, 168, 174], "map_symbol": [115, 121, 148, 160, 168, 174, 196, 222, 223, 231, 241, 242, 268, 288, 289, 290, 293], "decide_symbol": [115, 119, 148, 160, 168, 174, 289, 290, 293], "a_tild": [115, 119, 148, 160, 168, 174, 289, 290], "likelihood": [115, 119, 120, 140, 148, 160, 168, 174, 280, 289, 293], "mle": [115, 119, 148, 160, 168, 174], "match": [115, 116, 120, 126, 148, 160, 161, 168, 169, 174, 175, 293], "abstract": [115, 117, 127], "log_2": [115, 118, 148, 160, 168, 174, 197, 216, 217, 219, 269], "phase_offset": [115, 116, 124, 148, 149, 160, 161, 168, 169, 171, 174, 175, 196, 222, 223, 231, 241, 242, 257, 258, 268, 288, 289, 290], "degre": [115, 116, 124, 148, 149, 160, 161, 168, 169, 171, 174, 175, 223, 231, 233, 236, 289], "dot": [115, 116, 129, 148, 160, 168, 173, 174, 257], "mapsto": [115, 116, 129, 148, 160, 168, 173, 174, 257], "mathbb": [115, 116, 129, 148, 160, 168, 173, 174, 197, 257, 277], "sym": [115, 116, 128, 148, 149, 160, 161, 168, 169, 174, 175, 217, 220, 225, 269, 270, 291], "pulse_shap": [115, 116, 120, 122, 125, 148, 160, 161, 168, 169, 174, 175, 258, 288, 290], "tx_filter": [115, 130, 148, 160, 168, 174], "rx_filter": [115, 126, 148, 160, 168, 174], "rect": [116, 161, 169, 175, 291], "whose": [116, 149, 161, 168, 169, 175], "import": [116, 140, 161, 169, 175, 283, 285, 286, 287, 288, 289, 290, 291, 292], "string": [116, 161, 169, 175, 230, 248, 255, 293], "roll": [116, 161, 169, 175, 277, 291], "off": [116, 161, 169, 175], "psd": [117, 127, 170, 172, 197, 216, 217, 219, 220, 240, 254, 269, 270], "p_b": 117, "x_tild": 120, "s_hat": [120, 289, 290], "p_e": 127, "loopfilt": [131, 132, 133, 134, 135, 136, 137, 138, 139, 280, 289, 293], "ppi": [131, 133, 280], "track": 131, "constant": [131, 148, 152, 154, 156, 248, 255, 287, 289], "cannot": 131, "chirp": 131, "proportional_gain": [131, 138], "integral_gain": [131, 136], "underli": [131, 135], "mlped": [140, 141, 142, 143, 144, 145, 146, 147, 280, 289, 293], "ml": [140, 144, 280, 289], "aid": [140, 145, 162, 165], "known": [140, 143, 162, 163, 196, 227, 275], "da": [140, 162], "im": 140, "re": [140, 178], "direct": [140, 146, 162, 166, 293], "qpsk": [140, 160, 162, 168, 170, 171, 172, 174, 196, 222, 223, 240, 241, 242, 254, 257, 258, 268, 289, 292, 293], "a_rx": 140, "a_ref": 140, "da_error": [140, 162], "data_aided_error": [140, 145, 162, 165], "dd_error": [140, 162], "decision_directed_error": [140, 146, 162, 166], "grid": [140, 162, 194, 197, 200, 203, 224, 259, 285, 288, 289, 291], "xlabel": [140, 162, 194, 197, 198, 200, 203, 222, 224, 227, 275, 277, 285, 288, 289, 291], "ylabel": [140, 162, 194, 197, 198, 200, 203, 222, 224, 227, 275, 277, 285, 288, 289, 291], "observ": [140, 162, 208, 236, 242], "slope": [140, 162], "a_": [140, 141, 142, 144, 211], "rx": [140, 141, 144], "both": [140, 162, 194, 197, 241, 257, 258, 285, 289], "veri": [140, 292], "becaus": [140, 227, 275], "unambigu": [140, 162], "rang": [140, 162, 241, 289, 290], "a_receiv": [140, 141, 144], "a_refer": [140, 142, 144], "simul": [140, 145, 146, 162, 165, 166, 290, 292], "scheme": [140, 145, 146, 148, 160, 162, 165, 166, 168, 174, 293], "either": [143, 163, 222], "modem": [145, 146, 148, 160, 165, 166, 168, 174], "n_point": [145, 146, 165, 166], "similar": [148, 160, 174, 291], "One": [148, 160, 174, 291], "distinct": [148, 160, 174], "result": [148, 160, 174, 195, 218, 224, 236, 237, 238, 264, 266, 267, 290], "envelop": [148, 286, 287], "which": [148, 160, 174, 194, 195, 196, 197, 218, 221, 223, 229, 231, 235, 236, 237, 241, 244, 246, 249, 250, 257, 268, 285, 289, 291], "consid": [148, 230], "cpfsk": 148, "separ": 148, "45": [148, 149, 160, 161, 168, 171, 196, 222, 223, 231, 233, 241, 242, 257, 258, 268, 288, 289, 290], "symbol_label": [148, 149, 160, 161, 168, 169, 173, 174, 175, 290], "randint": [148, 160, 168, 174, 196, 199, 202, 214, 222, 223, 231, 241, 242, 251, 258, 268, 288, 289, 290], "uint8": [148, 160, 168, 174, 234, 273], "complex_symbol": [148, 160, 168, 174], "70710678": [148, 160, 168], "70710678j": [148, 160, 168], "tx_sampl": [148, 160, 168, 174], "50": [148, 160, 168, 174, 205, 232, 239, 257, 258, 271, 272, 285, 288], "like": [148, 283, 292, 293], "channel": [148, 160, 170, 172, 197, 199, 200, 202, 203, 214, 240, 254, 292, 293], "subplot": [148, 160, 231, 289, 290], "imag": [148, 160, 285], "trajectori": 148, "although": 148, "boundari": 148, "lead": [148, 231, 290], "spectral": [148, 215, 248, 288, 291], "effici": [148, 215, 236, 274], "gmsk": 148, "rx_sampl": [148, 160, 168, 174], "last": [148, 160, 234, 281], "rx_symbol": [148, 160, 168, 174], "rx_complex_symbol": [148, 160, 168, 174], "_": [148, 160, 168, 174, 194, 222], "array_equ": [148, 160, 168, 174, 227, 275], "bin": [149, 161, 169, 173, 175, 222, 241, 257, 290], "absolut": [149, 152, 154, 157, 161, 175, 197], "consecut": [149, 161, 169, 175], "adjac": [149, 161, 169, 173, 175, 290, 291], "mai": [149, 161, 169, 173, 175, 222, 241, 252, 255, 257, 259, 287], "more": [149, 161, 169, 173, 175, 293], "start": [149, 161, 169, 175, 281], "go": [149, 161, 169, 175], "counter": [149, 161, 169, 175], "clockwis": [149, 161, 169, 175], "circl": [149, 161, 169, 175, 287], "increment": [152, 153, 154, 156, 289], "Then": 152, "fsk": 152, "60": [152, 206, 207, 209, 210, 291], "repeat": 152, "cp": 152, "57": 152, "bpsk": [152, 170, 172, 240, 254, 288], "format": [153, 198, 227, 275, 293], "option": [153, 243, 244, 246, 248, 249, 250, 255, 293], "intern": 158, "set": [158, 196, 224, 227, 241, 248, 252, 255, 257, 259, 275, 282, 284, 287], "convent": [160, 174], "transit": [160, 174, 202, 203, 214, 275, 279], "independ": 160, "apart": 160, "taken": [160, 168, 174], "jq": 160, "begin": [160, 174, 178], "end": [160, 174, 178, 271, 282], "heurist": [162, 280, 289, 293], "dd": [162, 289, 293], "encod": [168, 170, 172, 212, 213, 292], "inform": [168, 216, 217, 219, 227, 269, 275], "ge": [169, 175, 194], "were": [170, 172], "simon": [170, 172], "alouini": [170, 172], "fade": [170, 172], "chapter": [170, 172, 211, 261], "john": [170, 172], "proaki": [170, 172], "optimum": [170, 172], "psk8": [170, 172, 240, 254, 290], "psk16": [170, 172, 240, 254, 290], "de": [170, 172, 289, 293], "se": [172, 254], "00j": [173, 174], "07106781e": [173, 174], "01j": [173, 174], "12323400e": [173, 174], "83697020e": 173, "22464680e": [173, 174], "annot": [173, 257, 293], "rotat": [174, 233, 289], "rel": [174, 277, 291], "2m": 174, "displaystyl": 174, "pi4_qpsk": 174, "exceed": [176, 177], "15865525393145707": [176, 177], "158655": [176, 177], "0000010494310452": [176, 177], "perfect": 178, "knowledg": 178, "cn": [178, 196], "mathrm": 178, "sqrt": [178, 179, 180, 182, 194, 221, 222, 225, 266, 277, 288, 289, 291], "____": 183, "down": [183, 185, 187, 211, 261], "2p": 185, "ln": [194, 225], "62": [194, 230], "log_": [194, 195, 205, 218, 224, 235, 237, 238, 266], "54": [194, 230], "44": 194, "12ab": 194, "7b": 194, "claim": 194, "leq": 194, "8096": 194, "radarsp": 194, "weebli": 194, "upload": 194, "21471216": 194, "albersheim_alternative_form": 194, "pdf": [194, 225], "bpb": 194, "w2": 194, "wpmucdn": 194, "site": [194, 281], "gatech": 194, "edu": 194, "dist": [194, 282], "462": 194, "file": [194, 282, 284], "2016": 194, "noncoher": 194, "www": [194, 206, 207, 208, 209, 210, 211, 225, 227, 275], "mathwork": [194, 206, 207, 208, 209, 210, 211, 225, 227, 275], "help": [194, 206, 207, 208, 209, 210, 211, 225, 227, 275], "html": [194, 206, 207, 208, 209, 210, 211, 225, 227, 275, 281], "semilogx": [194, 253], "nuse": 194, "axi": [195, 218, 221, 229, 235, 237, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 257, 258, 285, 293], "avg": [195, 196, 235], "ax": [195, 218, 221, 229, 235, 237, 259, 293], "along": [195, 218, 221, 229, 235, 237, 293], "entir": [195, 218, 221, 229, 235, 237], "decibel": [195, 205, 218, 232, 237, 238, 266, 292, 293], "seed": [196, 199, 202, 214, 293], "ad": [196, 252, 282, 292, 293], "explicitli": 196, "default_rng": [196, 199, 202, 214], "noisi": 196, "sin": [196, 271], "zorder": [196, 223, 268], "infti": [196, 197], "nand": 196, "capac": [197, 200, 203, 292, 293], "2d": [197, 252], "x_i": [197, 199, 200, 202, 203, 214, 231], "y_i": [197, 199, 200, 202, 203, 214], "monoton": 197, "limit": [197, 241, 257, 290], "At": 197, "occur": 197, "view": [197, 282, 292], "59": 197, "shannon": 197, "semilogi": [197, 240, 253, 254], "barker": [198, 278, 292, 293], "int64": [198, 227, 275, 278], "bipolar": [198, 227, 275, 293], "sequenc": [198, 199, 202, 214, 227, 275, 277, 279, 292, 293], "seq": [198, 227, 275], "ideal": [198, 290], "minim": 198, "autocorrel": [198, 227, 275, 277], "sidelob": [198, 206, 207, 209, 210, 227, 264, 267, 275, 277], "corr": [198, 277], "lag": [198, 227, 275, 277], "roughli": [199, 202, 285], "eras": 199, "flip": 202, "h_b": 203, "cf": 204, "v_": [204, 205, 232, 238, 266], "en": [204, 235, 277], "wikipedia": [204, 235, 277], "org": [204, 235, 277], "wiki": [204, 235, 277], "type": [205, 222, 232, 234, 248, 253, 255, 273, 293], "voltag": [205, 232, 238, 266, 292], "x_": [205, 232], "mhz": [205, 232], "77": [205, 230, 232], "50e6": 205, "76": [205, 230], "98970004336019": 205, "mw": [205, 232], "dbm": [205, 232], "dbv": [205, 232], "020599913279624": 205, "center_freq": [206, 207], "hann": [206, 207, 209, 210, 248, 255], "harri": [206, 207, 209, 210, 211, 261], "chebyshev": [206, 207, 209, 210], "atten": [206, 207, 209, 210], "nyquist": [206, 207, 209, 210, 215, 242, 274, 291], "side": [206, 207, 225, 243, 244, 246, 248, 249, 250, 255, 286, 287, 288, 291], "No": [206, 207, 209, 210], "blackmanharri": [206, 207, 209, 210], "chebwin": [206, 207, 209, 210], "dsp": [206, 207, 208, 209, 210, 211, 292], "designbandpassfir": 206, "h_ham": [206, 207, 209, 210], "h_hann": [206, 207, 209, 210], "h_blackman": [206, 207, 209, 210], "h_blackman_harri": [206, 207, 209, 210], "h_chebyshev": [206, 207, 209, 210], "h_kaiser": [206, 207, 209, 210], "larger": [207, 228, 231, 241, 257, 265], "designbandstopfir": 207, "75": [207, 230, 241, 289, 290], "tau": 208, "l_": 208, "designfracdelayfir": 208, "h_8": [208, 264, 267], "h_16": [208, 264, 267], "h_32": 208, "h_64": 208, "cutoff_freq": [209, 210], "cutoff": [209, 210], "f_c": [209, 210], "designhighpassfir": 209, "designlowpassfir": 210, "half_length": 211, "a_stop": 211, "stopband": [211, 264, 267], "stop": 211, "fred": [211, 261], "system": [211, 220, 227, 261, 270, 275, 282, 284, 289, 292], "designmultiratefir": 211, "oplu": [212, 213, 229], "uncod": 213, "dmc": [214, 279, 292, 293], "memoryless": [214, 279, 292], "pr": 214, "y_j": 214, "alphabet": 214, "ldot": 214, "doe": [215, 274], "anti": [215, 274, 293], "alias": [215, 274, 293], "x1": 215, "x2": 215, "130": 215, "x3": [215, 277], "spectrum": [215, 243, 244, 246, 248, 249, 250, 255, 271, 272, 274], "content": 215, "abov": [215, 274], "fold": 215, "cw": 215, "unalias": 215, "fft": [215, 248, 255, 271, 272, 274], "2048": [215, 271, 272, 274, 288], "qam": [216, 217, 219, 269], "249387366082999": [216, 217], "020599913279625": [216, 270], "7506126339170005": [219, 269], "979400086720376": [219, 220], "norm": [222, 225, 228, 264, 265, 267], "noiseless": 222, "sourc": 222, "max": [222, 237, 238], "instantan": 222, "percentil": [222, 255], "948842189779825": 222, "903861583238555": 222, "091827545304124": 222, "95th": 222, "95": 222, "20559485693679": 222, "inst_evm": 222, "hist": 222, "histogram": 222, "frequency_offset": [223, 279, 293], "freq_rat": 223, "cycl": [223, 258], "5e": 223, "deg": [223, 231, 289], "path": [224, 292], "loss": [224, 292], "meter": [224, 236, 276], "transmitt": 224, "far": 224, "field": 224, "neg": [224, 231], "impli": 224, "possibl": [224, 292], "so": [224, 225, 228, 264, 265, 267, 292], "km": 224, "link": [224, 292, 293], "ghz": [224, 236, 276], "1e3": [224, 233, 271], "1e9": [224, 236, 276], "92": 224, "44778322188337": 224, "doubl": [224, 236], "2e3": 224, "98": 224, "468383135163": 224, "2e9": 224, "product": [225, 291], "thought": [225, 294], "smaller": [225, 264, 267, 291], "wider": 225, "gaussdesign": 225, "onlinelibrari": 225, "wilei": 225, "doi": 225, "1002": 225, "9780470041956": 225, "app2": 225, "h_0p1": [225, 264, 267], "h_0p2": 225, "h_0p3": 225, "hadamard": [227, 275, 278, 292, 293], "comm": [227, 275], "hadamardcod": 227, "walsh": [227, 275, 278, 292, 293], "thei": [227, 275, 294], "cross": [227, 275, 277], "seq1": [227, 275], "seq2": [227, 275], "seq3": [227, 275], "quit": [227, 275], "larg": [227, 275, 282], "misalign": [227, 275], "spread": [227, 275], "precis": [227, 275], "xcorr12": [227, 275], "xcorr13": [227, 275], "xcorr23": [227, 275], "uniform": [227, 275], "fact": [227, 275], "high": [227, 275], "acorr1": [227, 275], "acorr2": [227, 275], "acorr3": [227, 275], "reason": [228, 265, 281], "h_half_sin": 228, "displai": [230, 241, 243, 244, 246, 248, 249, 250, 255, 257], "line": [230, 258, 282, 288], "print": [230, 285, 286, 287, 289], "quick": 230, "brown": 230, "fox": 230, "jump": 230, "lazi": 230, "dog": 230, "00000000": 230, "68": 230, "65": 230, "71": 230, "69": 230, "63": 230, "6b": 230, "72": 230, "6f": 230, "6e": 230, "00000010": 230, "66": 230, "78": 230, "6a": 230, "6d": 230, "73": 230, "74": 230, "00000020": 230, "6c": 230, "61": 230, "7a": 230, "79": 230, "67": 230, "he": 230, "02": [230, 287, 289], "00000004": 230, "05": [230, 285, 287, 289], "06": 230, "07": 230, "08": 230, "00000008": 230, "09": 230, "0a": 230, "iq_imbal": [231, 279, 293], "iq": [231, 279, 292], "imbal": [231, 279, 292], "posit": 231, "compon": [231, 271, 272, 274], "g_i": 231, "180": 231, "g_q": 231, "x_q": 231, "horizont": 231, "stretch": 231, "while": [231, 291], "vertic": 231, "northwest": 231, "northeast": 231, "50118723": 232, "36272725": 232, "9952623149688795": 232, "satisfi": 233, "remov": [233, 248, 255, 293], "dtypelik": [234, 273], "most": [234, 273], "signific": [234, 273], "enough": 234, "fill": 234, "smallest": 234, "unsign": 234, "diamet": 236, "55": [236, 258], "eta": 236, "dbi": 236, "arcsin": 236, "83": 236, "dish": 236, "21": [236, 258], "810210290266568": 236, "437435887991374": 236, "23": 236, "sinc": [236, 242, 281, 290], "antenna": [236, 292], "we": [236, 292], "830810203546193": 236, "529544741425365": 236, "keyword": [240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 286, 287], "pyplot": [240, 241, 244, 245, 246, 247, 248, 249, 250, 254, 255, 256, 257, 258, 259, 260, 285, 286, 287, 288, 289, 290, 291], "heatmap": [241, 290], "scatter": 241, "overwritten": [241, 252, 255, 257], "hist2d": 241, "10_000": 241, "imaginari": [242, 252, 258], "interleav": [242, 252], "base": [242, 251, 252, 258, 293], "intersymbol": 242, "interfer": 242, "isi": 242, "cascad": 242, "why": 242, "often": [242, 285], "practic": 242, "n_time": [243, 287], "n_freq": 243, "x_axi": [243, 244, 246, 248, 249, 250, 255, 286, 287, 288, 289, 293], "n_t": 243, "n_f": 243, "logarithm": [243, 244, 246, 248, 249, 250, 286, 287], "h_srrc": [243, 244, 245, 246, 249, 250, 256, 260, 290], "auto": [244, 246, 249, 250, 293], "select": [244, 246, 249, 250, 282], "x_label": 247, "overlap": [248, 255, 288], "detrend": [248, 255], "median": 248, "segment": [248, 255], "256": [248, 255, 288], "trend": [248, 255], "unwrap": [250, 289], "stride": 252, "colorbar": 252, "1d": 252, "determin": 252, "row": 252, "collect": 252, "linecollect": 252, "linewidth": [252, 277], "solid": [252, 258], "cmap": 252, "rainbow": 252, "loglog": 253, "pcolormesh": 255, "vmin": 255, "10th": 255, "vmax": 255, "100th": 255, "shade": 255, "gouraud": 255, "represent": [257, 293], "markers": 257, "diff": [258, 288], "mutual": 258, "exclus": 258, "dash": 258, "share": 258, "10e3": 258, "uniformli": 258, "style": 259, "revert": 259, "rcdefault": 259, "_rc_param": 259, "rc_param": 259, "autolayout": 259, "max_open_warn": 259, "titleweight": 259, "bold": 259, "arrang": 261, "column": 261, "notion": 261, "demonstr": 261, "matric": 261, "000005": 262, "000000025": 262, "005": [263, 289], "000025": 263, "excess": [264, 267, 291], "narrow": [264, 267], "expens": [264, 267], "higher": [264, 267, 291], "h_0p5": [264, 267], "h_0p9": [264, 267], "affect": [264, 267], "longer": [264, 267, 271], "h_4": [264, 267], "h_rect": [265, 291], "sample_rate_offset": [268, 279, 293], "250": [271, 272, 289], "ksp": [271, 272], "conjug": [271, 272, 287], "500": [271, 272, 289], "now": [271, 272, 285, 293], "150": [271, 272], "asymmetr": 272, "copi": 274, "mani": [275, 282], "walshcod": 275, "299792458": 276, "zadoff_chu": [277, 278, 293], "zadoff": [277, 278, 292, 293], "chu": [277, 278, 292, 293], "prime": 277, "gcd": 277, "ne": 277, "cyclic": 277, "x_u": 277, "c_": 277, "2q": 277, "mod": 277, "e2": 277, "93chu_sequ": 277, "x_3": 277, "139": 277, "tile": 277, "x_5": 277, "x5": 277, "xcorr": 277, "sphinx": 281, "immateri": 281, "theme": 281, "depend": [281, 282, 284], "store": [281, 283, 284], "txt": [281, 282, 283, 284], "some": 281, "below": [281, 286, 287], "version": [281, 283, 292], "aren": 281, "resolut": 281, "minut": 281, "ci": 281, "myst": 281, "parser": 281, "updat": [281, 293], "git": [281, 283], "math": 281, "dollar": 281, "ipykernel": 281, "26": 281, "nb": 281, "pickleshar": 281, "switch": 281, "pip": [281, 282, 283, 284, 292], "python3": [281, 282, 283, 284, 292], "built": 281, "command": [281, 282], "dirhtml": 281, "locat": [281, 284], "home": 281, "page": 281, "directori": [281, 283], "get": 281, "necessari": 281, "webpag": 281, "webserv": 281, "easili": [281, 282, 284, 286, 287], "python": [281, 292], "server": 281, "8080": 281, "access": 281, "web": 281, "browser": 281, "localhost": 281, "librari": [282, 283, 284, 285, 290, 292, 294], "ruff": [282, 283, 293], "lint": [282, 283], "your": [282, 284], "develop": [282, 283, 284], "dev": [282, 284], "pyproject": [282, 284], "toml": [282, 283, 284], "tool": [282, 284, 292], "src": 282, "extend": 282, "ipynb": 282, "exclud": 282, "build": [282, 292], "_version": 282, "py": [282, 284], "120": 282, "doc": 282, "pycodestyl": 282, "pyflak": 282, "pyupgrad": 282, "flake8": 282, "bugbear": 282, "simplifi": 282, "isort": 282, "pylint": [282, 293], "npy": 282, "rule": 282, "ruf": 282, "ignor": 282, "e501": 282, "too": 282, "long": 282, "e713": 282, "e714": 282, "plr2004": 282, "magic": 282, "plr0913": 282, "plr5501": 282, "collaps": 282, "els": [282, 288], "plr0912": 282, "branch": [282, 283], "plr0915": 282, "statement": 282, "__init__": 282, "f401": 282, "f403": 282, "manual": [282, 284], "check": 282, "hook": 282, "config": [282, 285, 286, 287, 288, 289, 290, 291], "yaml": 282, "repo": [282, 283], "github": [282, 292], "rev": 282, "v2": 282, "id": 282, "fixer": 282, "trail": 282, "whitespac": 282, "astral": 282, "sh": 282, "v0": 282, "enabl": 282, "disabl": 282, "uninstal": 282, "extens": 282, "vscode": [282, 284], "json": [282, 284], "you": [282, 283, 284, 292], "edit": [282, 287], "latest": [283, 292], "releas": [283, 293], "main": [283, 291], "mhostett": [283, 293], "Or": [283, 284], "pre": 283, "To": 283, "activ": 283, "benefici": 283, "fashion": 283, "allow": [283, 284], "chang": [283, 294], "immedi": 283, "seen": 283, "upon": 283, "next": 283, "clone": 283, "wherev": 283, "flag": 283, "packag": [283, 292], "commit": 283, "pytest": [283, 284], "cov": 283, "xdist": 283, "benchmark": 283, "ini_opt": 284, "minvers": 284, "addopt": 284, "showloc": 284, "testpath": 284, "execut": 284, "test_psk": 284, "instruct": 284, "invok": 284, "infrastructur": 284, "debug": 284, "inlinebackend": [285, 286, 287, 288, 289, 290, 291], "print_figure_kwarg": [285, 286, 287, 288, 289, 290, 291], "facecolor": [285, 286, 287, 288, 289, 290, 291], "inlin": [285, 286, 287, 288, 289, 290, 291], "widget": [285, 286, 287, 288, 289, 290, 291], "tx": 285, "fillstyl": 285, "show": [285, 286, 287, 288, 289, 290, 291], "accomplish": [285, 290], "def": [285, 288, 290], "resample_sign": 285, "new_sample_r": 285, "ty": 285, "gca": [285, 290], "set_prop_cycl": [285, 290], "four": 285, "fourth": 285, "do": 285, "315": 285, "00095883": 286, "00175012": 286, "00423921": 286, "0058825": 286, "006151": 286, "00474595": 286, "0017044": 286, "00254816": 286, "00721645": 286, "0112324": 286, "01342358": 286, "01273202": 286, "00845058": 286, "0004368": 286, "01073669": 286, "02372977": 286, "03650247": 286, "04650654": 286, "05098525": 286, "04734644": 286, "03355896": 286, "00851486": 286, "02769991": 286, "07367348": 286, "12670446": 286, "18301321": 286, "23810898": 286, "28727058": 286, "32607991": 286, "35093841": 286, "35949665": 286, "conveni": [286, 287], "evalu": [286, 287], "29": 286, "31": 286, "here": [286, 287], "478207252018059": 287, "6400000000000001": 287, "7391036260090295": 287, "3061467458920719j": 287, "47820725": 287, "78207252e": 287, "58172329e": 287, "10862468e": 287, "86109590e": 287, "21565653e": 287, "01140214e": 287, "57286400e": 287, "67772160e": 287, "47338728e": 287, "10422993e": 287, "89312837e": 287, "12240078e": 287, "03953322e": 287, "69685122e": 287, "63882791e": 287, "81474977e": 287, "47193366e": 287, "85259041e": 287, "15647504e": 287, "23851924e": 287, "42176895e": 287, "84684395e": 287, "42721858e": 287, "72236648e": 287, "14721649e": 287, "10813095e": 287, "94024315e": 287, "78877688e": 287, "74077567e": 287, "87820725": 287, "53637958": 287, "94724205": 287, "13335164": 287, "1455082": 287, "04436799": 287, "88708159": 287, "71930943": 287, "5719707": 287, "46154771": 287, "39261642": 287, "36139242": 287, "35935288": 287, "3763214": 287, "40270968": 287, "43085717": 287, "45557651": 287, "47410241": 287, "48566716": 287, "49090568": 287, "49124786": 287, "48840102": 287, "4839738": 287, "47925143": 287, "47510421": 287, "47199608": 287, "47005584": 287, "46917696": 287, "46911955": 287, "denomin": 287, "73910363": 287, "30614675j": 287, "plane": 287, "092337035029908": 287, "71104892744724": 287, "684365018955985": 287, "37868538208862": 287, "1263714068241546": 287, "9993519409971622": 287, "1909320767063554": 287, "016796159999999997": 287, "46380627201816593": 287, "3806359704987265j": 287, "4988817673791569": 287, "3333421398098428j": 287, "5543277195052645": 287, "22961005941814036j": 287, "5291527586123693": 287, "28283804209787544j": 287, "lyon": 287, "understand": 287, "3rd": 287, "insid": 287, "unstabl": 287, "n_symbol": 288, "pb": 288, "x_bb_rect": 288, "papr_bb_rect": 288, "x_pb_rect": 288, "papr_pb_rect": 288, "x_bb_0p1": 288, "papr_bb_0p1": 288, "x_pb_0p1": 288, "papr_pb_0p1": 288, "x_bb_0p5": 288, "papr_bb_0p5": 288, "x_pb_0p5": 288, "papr_pb_0p5": 288, "x_bb_0p9": 288, "papr_bb_0p9": 288, "x_pb_0p9": 288, "papr_pb_0p9": 288, "2f": 288, "rf": [288, 289], "512": 288, "sweep_alpha": 288, "bb_papr": 288, "pb_papr": 288, "bpsk_bb_papr": 288, "bpsk_pb_papr": 288, "qpsk_bb_papr": 288, "qpsk_pb_papr": 288, "psk8_bb_papr": 288, "psk8_pb_papr": 288, "psk16_bb_papr": 288, "psk16_pb_papr": 288, "configur": 289, "loop_filt": 289, "0x7f28f4d4ab90": 289, "theta_0": 289, "phase_error": 289, "freq_estim": 289, "suptitl": [289, 290], "make": [289, 294], "a_hat": [289, 290], "rad2deg": 289, "avail": [289, 290, 292], "b_nt": 289, "0005": 289, "0125": 289, "015": 289, "0175": 289, "t_lock": 289, "analyze_psk": 290, "100_000": 290, "n0": 290, "tx_mf": 290, "1e6": 290, "bpsk_ber": 290, "bpsk_ser": 290, "qpsk_ber": 290, "qpsk_ser": 290, "psk8_ber": 290, "psk8_ser": 290, "psk16_ber": 290, "psk16_ser": 290, "1e0": 290, "psk8_bin": 290, "psk8_grai": 290, "wors": 290, "rc_0p1": 291, "rc_0p5": 291, "rc_0p9": 291, "pm": 291, "nearli": 291, "small": 291, "lobe": 291, "much": 291, "freqz": 291, "worn": 291, "h_rc_0p1": 291, "h_rc_0p5": 291, "h_rc_0p9": 291, "p_rect": 291, "cumsum": 291, "p_rc_0p1": 291, "p_rc_0p5": 291, "p_rc_0p9": 291, "within": 291, "srrc_0p1": 291, "srrc_0p5": 291, "srrc_0p9": 291, "therefor": 291, "significantli": 291, "due": 291, "being": 291, "h_srrc_0p1": 291, "h_srrc_0p5": 291, "h_srrc_0p9": 291, "p_srrc_0p1": 291, "p_srrc_0p5": 291, "p_srrc_0p9": 291, "gauss_0p1": 291, "gauss_0p2": 291, "gauss_0p3": 291, "softwar": 292, "radio": 292, "goal": 292, "analyz": 292, "reli": 292, "interoper": 292, "numba": 292, "acceler": 292, "computation": 292, "intens": 292, "addition": 292, "aim": 292, "replic": 292, "relev": 292, "toolbox": 292, "progress": 292, "someth": 292, "pleas": 292, "open": 292, "issu": 292, "pypi": 292, "api": [292, 294], "convers": [292, 293], "synchron": 292, "budget": [292, 293], "manipul": 292, "decemb": 293, "2023": 293, "rework": 293, "frequency_response_log": 293, "explicit": 293, "improv": 293, "jupyt": 293, "notebook": 293, "matt": 293, "hostett": 293, "novemb": 293, "abil": 293, "renam": 293, "multirate_tap": 293, "polyphase_matrix": 293, "model": 293, "replac": 293, "black": 293, "septemb": 293, "sensibl": 293, "august": 293, "27": 293, "without": 293, "superflu": 293, "translat": 293, "fix": [293, 294], "juli": 293, "firinterpol": 293, "impair": 293, "fpsl": 293, "helper": 293, "synthes": 293, "semant": 294, "major": 294, "minor": 294, "patch": 294, "introduc": 294, "featur": 294, "compat": 294, "bug": 294, "There": 294, "guarante": 294, "them": 294}, "objects": {"": [[3, 0, 0, 1, "sdr", ""]], "sdr": [[9, 1, 1, "", "AGC", "Implements an automatic gain controller (AGC)."], [18, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [35, 1, 1, "", "Decimator", "Implements a polyphase decimating FIR filter."], [44, 1, 1, "", "Differentiator", "Implements a differentiator FIR filter."], [46, 1, 1, "", "EnergyDetector", "Implements an energy detector."], [51, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [58, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [74, 1, 1, "", "FarrowResampler", "Implements a piecewise polynomial Farrow arbitrary resampler."], [84, 1, 1, "", "FractionalDelay", "Implements a fractional delay FIR filter."], [86, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [102, 1, 1, "", "Integrator", "Implements an integrator IIR filter."], [104, 1, 1, "", "Interpolator", "Implements a polyphase interpolating FIR filter."], [113, 1, 1, "", "LeakyIntegrator", "Implements a leaky integrator IIR filter."], [115, 1, 1, "", "LinearModulation", "Implements linear phase/amplitude modulation with arbitrary symbol mapping."], [131, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [140, 1, 1, "", "MLPED", "Implements a maximum-likelihood phase error detector (ML-PED)."], [148, 1, 1, "", "MSK", "Implements minimum-shift keying (MSK) modulation and demodulation."], [150, 1, 1, "", "MovingAverager", "Implements a moving average FIR filter."], [152, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [160, 1, 1, "", "OQPSK", "Implements offset quadrature phase-shift keying (OQPSK) modulation and demodulation."], [162, 1, 1, "", "PED", "Implements a heuristic phase error detector (PED)."], [168, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [174, 1, 1, "", "PiMPSK", "Implements $pi/M$ phase-shift keying ($pi/M$ PSK) modulation and demodulation."], [176, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [177, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [178, 1, 1, "", "ReplicaCorrelator", "Implements an clairvoyant replica-correlator detector."], [183, 1, 1, "", "Resampler", "Implements a polyphase rational resampling FIR filter."], [194, 5, 1, "", "albersheim", "Estimates the minimum required single-sample SNR, given $N_{NC}$ non-coherent combinations, to achieve a probability of detection $P_D$ and probability of false alarm $P_{FA}$. This function implements Albersheim's equation."], [195, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [196, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [197, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [198, 5, 1, "", "barker", "Returns the Barker code/sequence of length $N$."], [199, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [200, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [201, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [202, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [203, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [204, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [205, 5, 1, "", "db", "Converts from linear units to decibels."], [206, 5, 1, "", "design_bandpass_fir", "Designs a bandpass FIR filter impulse response $h[n]$ using the window method."], [207, 5, 1, "", "design_bandstop_fir", "Designs a bandstop FIR filter impulse response $h[n]$ using the window method."], [208, 5, 1, "", "design_frac_delay_fir", "Designs a fractional delay FIR filter impulse response $h[n]$ using the Kaiser window method."], [209, 5, 1, "", "design_highpass_fir", "Designs a highpass FIR filter impulse response $h[n]$ using the window method."], [210, 5, 1, "", "design_lowpass_fir", "Designs a lowpass FIR filter impulse response $h[n]$ using the window method."], [211, 5, 1, "", "design_multirate_fir", "Designs a multirate FIR filter impulse response $h[n]$ using the Kaiser window method."], [212, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [213, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [214, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [215, 5, 1, "", "downsample", "Downsamples the time-domain signal $x[n]$ by the factor $r$."], [216, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [217, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [218, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [219, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [220, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [221, 5, 1, "", "euclidean", "Measures the Euclidean distance between two signals $x[n]$ and $y[n]$."], [222, 5, 1, "", "evm", "Calculates the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [223, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [224, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [225, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [226, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [227, 5, 1, "", "hadamard", "Returns the Hadamard code/sequence of length $N$."], [228, 5, 1, "", "half_sine", "Returns a half-sine pulse shape."], [229, 5, 1, "", "hamming", "Measures the Hamming distance between two signals $x[n]$ and $y[n]$."], [230, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [231, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [232, 5, 1, "", "linear", "Converts from decibels to linear units."], [233, 5, 1, "", "mix", "Mixes the time-domain signal $x[n]$ with a complex exponential or real sinusoid."], [234, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [235, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [236, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [237, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [238, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [239, 5, 1, "", "percent", "Converts from a ratio to a percentage."], [261, 5, 1, "", "polyphase_decompose", "Decomposes the FIR filter taps $h_i$ into the polyphase matrix $H_{i, j}$ with $B$ phases."], [262, 5, 1, "", "ppb", "Converts from a ratio to parts per billion (ppb)."], [263, 5, 1, "", "ppm", "Converts from a ratio to parts per million (ppm)."], [264, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [265, 5, 1, "", "rectangular", "Returns a rectangular pulse shape."], [266, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [267, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [268, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [269, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [270, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [271, 5, 1, "", "to_complex_bb", "Converts the real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$ to a complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c} = f_{s,r}/2$."], [272, 5, 1, "", "to_real_pb", "Converts the complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$ to a real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r} = 2f_{s,c}$."], [273, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [274, 5, 1, "", "upsample", "Upsamples the time-domain signal $x[n]$ by the factor $r$."], [275, 5, 1, "", "walsh", "Returns the Walsh code/sequence of length $N$."], [276, 5, 1, "", "wavelength", "Calculates the wavelength $lambda$ of an electromagnetic wave with frequency $f$."], [277, 5, 1, "", "zadoff_chu", "Returns the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.AGC": [[10, 2, 1, "", "__call__", "Performs automatic gain control on the input signal."], [11, 2, 1, "", "__init__", "Creates an automatic gain controller (AGC)."], [12, 4, 1, "", "attack", "(Settable) The attack rate $alpha$."], [13, 4, 1, "", "decay", "(Settable) The decay rate $beta$."], [14, 4, 1, "", "gain", "The current linear gain."], [15, 4, 1, "", "reference", "(Settable) The desired output magnitude."], [16, 2, 1, "", "reset", "Resets the AGC gain. Only useful when using streaming mode."], [17, 4, 1, "", "streaming", "Indicates whether the AGC is in streaming mode."]], "sdr.AGC.__call__": [[10, 3, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.AGC.__init__": [[11, 3, 2, "p-attack", "attack", "The attack rate $alpha$. The attack rate is meant to attenuate strong signals. After $n_0 approx 1 / alpha$ samples the error will reduce to $1 / e$ of its original value."], [11, 3, 2, "p-decay", "decay", "The decay rate $beta$. The decay rate is meant to amplify weak signals. After $n_0 approx 1 / beta$ samples the error will reduce to $1 / e$ of its original value."], [11, 3, 2, "p-reference", "reference", "The desired output magnitude."], [11, 3, 2, "p-streaming", "streaming", "Indicates whether the AGC operates in streaming mode. In streaming mode, the gain is preserved between calls to __call__()."]], "sdr.AGC.reset": [[16, 3, 2, "p-gain", "gain", "The initial linear gain of the AGC."]], "sdr.ClosedLoopPLL": [[19, 4, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [20, 4, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [21, 4, 1, "", "K0", "The NCO gain $K_0$."], [22, 4, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [23, 4, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [24, 4, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [25, 2, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [26, 2, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [27, 4, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [28, 2, 1, "", "lock_time", "Returns the lock time of the PLL."], [29, 4, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [30, 4, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [31, 2, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [32, 2, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [33, 4, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [34, 4, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[25, 3, 2, "p-K0", "K0", "The NCO gain $K_0$."], [25, 3, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [25, 3, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [25, 3, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [25, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[26, 3, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[28, 3, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[31, 3, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.Decimator": [[36, 2, 1, "", "__call__", "Filters and decimates the input signal $x[n]$ with the polyphase FIR filter."], [37, 2, 1, "", "__init__", "Creates a polyphase FIR decimating filter."], [38, 4, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [39, 4, 1, "", "method", "The method used to design the multirate filter."], [40, 4, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [41, 4, 1, "", "rate", "The decimation rate $r$."], [42, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [43, 4, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Decimator.__call__": [[36, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [36, 3, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Decimator.__init__": [[37, 3, 2, "p-rate", "rate", "The decimation rate $r$."], [37, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [37, 3, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.Differentiator": [[45, 2, 1, "", "__init__", "Creates a differentiator FIR filter."]], "sdr.Differentiator.__init__": [[45, 3, 2, "p-order", "order", "The order of the FIR differentiator $N$. The filter length is $N + 1$. Increasing the filter order increases the bandwidth of the differentiator."], [45, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [45, 3, 2, "p-window", "window", "The SciPy window definition. See scipy.signal.windows.get_window() for details. If None, no window is applied."]], "sdr.EnergyDetector": [[47, 2, 1, "", "p_d", "Computes the probability of detection $P_D$."], [48, 2, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [49, 2, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [50, 2, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.EnergyDetector.p_d": [[47, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [47, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [47, 3, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.p_fa": [[48, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [48, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [48, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [48, 3, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.EnergyDetector.roc": [[49, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [49, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [49, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."], [49, 3, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.threshold": [[50, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [50, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [50, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [50, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.ErrorRate": [[52, 2, 1, "", "__init__", "Creates a new error rate tabulation object."], [53, 2, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [54, 2, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [55, 2, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [56, 2, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [57, 2, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[53, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [53, 3, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [53, 3, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[54, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[55, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[57, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[59, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the FIR filter."], [60, 2, 1, "", "__init__", "Creates an FIR filter with feedforward coefficients $h_i$."], [61, 2, 1, "", "__len__", "Returns the filter length $N + 1$."], [62, 4, 1, "", "delay", "The delay of the FIR filter $d = lfloor frac{N + 1}{2} rfloor$ in samples."], [63, 2, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [64, 2, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the FIR filter."], [65, 2, 1, "", "group_delay", "Returns the group delay $tau_g(omega)$ of the FIR filter."], [66, 2, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [67, 4, 1, "", "order", "The order of the FIR filter $N$."], [68, 2, 1, "", "phase_delay", "Returns the phase delay $tau_{phi}(omega)$ of the FIR filter."], [69, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [70, 4, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [71, 2, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [72, 4, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [73, 4, 1, "", "taps", "The feedforward taps $h_i$ for $i = 0,...,N$."]], "sdr.FIR.__call__": [[59, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [59, 3, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.FIR.__init__": [[60, 3, 2, "p-h", "h", "The feedforward coefficients $h_i$ for $i = 0,...N$."], [60, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FIR.frequency_response": [[64, 3, 2, "p-decades", "decades", "Only used if freqs is an integer."], [64, 3, 2, "p-freqs", "freqs", "The frequency specification."], [64, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [64, 3, 2, "p-whole", "whole", "Only used if freqs is an integer."]], "sdr.FIR.group_delay": [[65, 3, 2, "p-N", "N", "The number of samples in the group delay."], [65, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[66, 3, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.phase_delay": [[68, 3, 2, "p-N", "N", "The number of samples in the phase delay."], [68, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.step_response": [[71, 3, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FarrowResampler": [[75, 2, 1, "", "__call__", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [76, 2, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [77, 4, 1, "", "delay", "The delay of the FIR filter $d = lfloor frac{N + 1}{2} rfloor$ in samples."], [78, 2, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [79, 4, 1, "", "order", "The order of the piecewise polynomial."], [80, 2, 1, "", "reset", "Resets the filter state and fractional sample index."], [81, 4, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [82, 4, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [83, 4, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__call__": [[75, 3, 2, "p-rate", "rate", "The resampling rate $r$."], [75, 3, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.__init__": [[76, 3, 2, "p-order", "order", "The order of the piecewise polynomial. Must be between 1 and 4."], [76, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FarrowResampler.flush": [[78, 3, 2, "p-rate", "rate", "The resampling rate $r$."]], "sdr.FarrowResampler.reset": [[80, 3, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.FractionalDelay": [[85, 2, 1, "", "__init__", "Creates a fractional delay FIR filter."]], "sdr.FractionalDelay.__init__": [[85, 3, 2, "p-delay", "delay", "The fractional delay $0 le Delta n le 1$."], [85, 3, 2, "p-length", "length", "The filter length $L$. Filters with even length have best performance. Filters with odd length are equivalent to an even-length filter with an appended zero."]], "sdr.IIR": [[87, 2, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [88, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the IIR filter."], [89, 2, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [90, 4, 1, "", "a_taps", "The feedback taps $a_j$ for $j = 0,...,N$."], [91, 4, 1, "", "b_taps", "The feedforward taps $b_i$ for $i = 0,...,M$."], [92, 2, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the IIR filter."], [93, 4, 1, "", "gain", "The gain of the IIR filter."], [94, 2, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [95, 4, 1, "", "order", "The order of the IIR filter $N$."], [96, 4, 1, "", "poles", "The poles of the IIR filter."], [97, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [98, 4, 1, "", "state", "The filter state."], [99, 2, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [100, 4, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [101, 4, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[87, 3, 2, "p-gain", "gain", "The gain of the transfer function."], [87, 3, 2, "p-poles", "poles", "The poles of the transfer function."], [87, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."], [87, 3, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__call__": [[88, 3, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.IIR.__init__": [[89, 3, 2, "p-a", "a", "The feedback coefficients $a_j$ for $j = 0,...,N$."], [89, 3, 2, "p-b", "b", "The feedforward coefficients $b_i$ for $i = 0,...,M$."], [89, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.IIR.frequency_response": [[92, 3, 2, "p-decades", "decades", "Only used if freqs is an integer."], [92, 3, 2, "p-freqs", "freqs", "The frequency specification."], [92, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [92, 3, 2, "p-whole", "whole", "Only used if freqs is an integer."]], "sdr.IIR.impulse_response": [[94, 3, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[99, 3, 2, "p-N", "N", "The number of samples to return."]], "sdr.Integrator": [[103, 2, 1, "", "__init__", "Creates an integrating IIR filter."]], "sdr.Integrator.__init__": [[103, 3, 2, "p-method", "method", "The integration method."], [103, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.Interpolator": [[105, 2, 1, "", "__call__", "Interpolates and filters the input signal $x[n]$ with the polyphase FIR filter."], [106, 2, 1, "", "__init__", "Creates a polyphase FIR interpolating filter."], [107, 4, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [108, 4, 1, "", "method", "The method used to design the multirate filter."], [109, 4, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [110, 4, 1, "", "rate", "The interpolation rate $r$."], [111, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [112, 4, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Interpolator.__call__": [[105, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [105, 3, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Interpolator.__init__": [[106, 3, 2, "p-rate", "rate", "The interpolation rate $r$."], [106, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [106, 3, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.LeakyIntegrator": [[114, 2, 1, "", "__init__", "Creates a leaky integrator IIR filter."]], "sdr.LeakyIntegrator.__init__": [[114, 3, 2, "p-alpha", "alpha", "The leaky factor $alpha$. An FIR moving average with length $L$ is approximated when $alpha = 1 - 2/L$."], [114, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.LinearModulation": [[116, 2, 1, "", "__init__", "Creates a new linear phase/amplitude modulation object."], [117, 2, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [118, 4, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [119, 2, 1, "", "decide_symbols", "Converts the received complex symbols $tilde{a}[k]$ into decimal symbol decisions $hat{s}[k]$ and complex symbol decisions $hat{a}[k]$ using maximum-likelihood estimation (MLE)."], [120, 2, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples $tilde{x}[n]$ into decimal symbol decisions $hat{s}[k]$ using matched filtering and maximum-likelihood estimation."], [121, 2, 1, "", "map_symbols", "Converts the decimal symbols $s[k]$ to complex symbols $a[k]$."], [122, 2, 1, "", "modulate", "Modulates the decimal symbols $s[k]$ into pulse-shaped complex samples $x[n]$."], [123, 4, 1, "", "order", "The modulation order $M = 2^k$."], [124, 4, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [125, 4, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [126, 4, 1, "", "rx_filter", "The receive decimating matched filter. The filter coefficients are matched to the pulse shape $h[-n]^*$."], [127, 2, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [128, 4, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [129, 4, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."], [130, 4, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter. The filter coefficients are the pulse shape $h[n]$."]], "sdr.LinearModulation.__init__": [[116, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [116, 3, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees to apply to symbol_map."], [116, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [116, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [116, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [116, 3, 2, "p-symbol_map", "symbol_map", "The symbol mapping ${0, dots, M-1} mapsto mathbb{C}$. An $M$-length array whose indices are decimal symbols $s[k]$ and whose values are complex symbols $a[k]$, where $M$ is the modulation order."]], "sdr.LinearModulation.ber": [[117, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.LinearModulation.decide_symbols": [[119, 3, 2, "p-a_tilde", "a_tilde", "The received complex symbols $tilde{a}[k]$."]], "sdr.LinearModulation.demodulate": [[120, 3, 2, "p-x_tilde", "x_tilde", "The received pulse-shaped complex samples $tilde{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.LinearModulation.map_symbols": [[121, 3, 2, "p-s", "s", "The decimal symbols $s[k]$ to map, $0$ to $M-1$."]], "sdr.LinearModulation.modulate": [[122, 3, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.LinearModulation.ser": [[127, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.LoopFilter": [[132, 2, 1, "", "__call__", "Filters the input signal $x[n]$."], [133, 2, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [134, 4, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [135, 4, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [136, 4, 1, "", "integral_gain", "The integral gain $K_2$ of the loop filter."], [137, 4, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [138, 4, 1, "", "proportional_gain", "The proportional gain $K_1$ of the loop filter."], [139, 2, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__call__": [[132, 3, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.LoopFilter.__init__": [[133, 3, 2, "p-K0", "K0", "The NCO gain $K_0$."], [133, 3, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [133, 3, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [133, 3, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.MLPED": [[141, 4, 1, "", "A_received", "(Settable) The received signal RMS amplitude $A_{rx,rms}$."], [142, 4, 1, "", "A_reference", "(Settable) The reference signal RMS amplitude $A_{ref,rms}$."], [143, 2, 1, "", "__call__", "Detects the phase error."], [144, 2, 1, "", "__init__", "Initializes the ML-PED."], [145, 2, 1, "", "data_aided_error", "Simulates the average phase error of the data-aided PED using the specified modulation scheme."], [146, 2, 1, "", "decision_directed_error", "Simulates the average phase error of the decision-directed PED using the specified modulation scheme."], [147, 4, 1, "", "gain", "The gain of the phase error detector $K_p$."]], "sdr.MLPED.__call__": [[143, 3, 2, "p-received", "received", "The received complex symbols $tilde{a}[k]$."], [143, 3, 2, "p-reference", "reference", "The reference complex symbols, either the known transmitted complex symbols $a[k]$ or the complex symbols decisions $hat{a}[k]$."]], "sdr.MLPED.__init__": [[144, 3, 2, "p-A_received", "A_received", "The received signal RMS amplitude $A_{rx,rms}$."], [144, 3, 2, "p-A_reference", "A_reference", "The reference signal RMS amplitude $A_{ref,rms}$."]], "sdr.MLPED.data_aided_error": [[145, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [145, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.MLPED.decision_directed_error": [[146, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [146, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.MSK": [[149, 2, 1, "", "__init__", "Creates a new MSK object."]], "sdr.MSK.__init__": [[149, 3, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [149, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [149, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.MovingAverager": [[151, 2, 1, "", "__init__", "Creates a moving average FIR filter."]], "sdr.MovingAverager.__init__": [[151, 3, 2, "p-length", "length", "The length of the moving average filter $L$."], [151, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.NCO": [[153, 2, 1, "", "__call__", "Steps the NCO with variable frequency and/or phase signals."], [154, 2, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [155, 4, 1, "", "gain", "(Settable) The NCO gain $K_0$."], [156, 4, 1, "", "increment", "(Settable) The constant phase accumulation $omega$ of the NCO in radians/sample."], [157, 4, 1, "", "offset", "(Settable) The absolute phase offset $theta$ of the NCO in radians."], [158, 2, 1, "", "reset", "Resets the NCO."], [159, 2, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__call__": [[153, 3, 2, "p-freq", "freq", "The variable frequency signal $f[n]$ in radians/sample. This input signal varies the per-sample phase increment of the NCO. If None, the signal is all zeros."], [153, 3, 2, "p-output", "output", "The format of the output signal $y[n]$. Options are the accumulated phase, sine, cosine, or complex exponential."], [153, 3, 2, "p-phase", "phase", "The variable phase signal $p[n]$ in radians. This input signal varies the per-sample phase offset of the NCO. If None, the signal is all zeros."]], "sdr.NCO.__init__": [[154, 3, 2, "p-gain", "gain", "The NCO gain $K_0$."], [154, 3, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [154, 3, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.NCO.step": [[159, 3, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.OQPSK": [[161, 2, 1, "", "__init__", "Creates a new OQPSK object."]], "sdr.OQPSK.__init__": [[161, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [161, 3, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [161, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [161, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [161, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [161, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PED": [[163, 2, 1, "", "__call__", "Detects the phase error."], [164, 2, 1, "", "__init__", "Initializes the PED."], [165, 2, 1, "", "data_aided_error", "Simulates the average phase error of the data-aided PED using the specified modulation scheme."], [166, 2, 1, "", "decision_directed_error", "Simulates the average phase error of the decision-directed PED using the specified modulation scheme."], [167, 4, 1, "", "gain", "The gain of the phase error detector $K_p$."]], "sdr.PED.__call__": [[163, 3, 2, "p-received", "received", "The received complex symbols $tilde{a}[k]$."], [163, 3, 2, "p-reference", "reference", "The reference complex symbols, either the known transmitted complex symbols $a[k]$ or the complex symbols decisions $hat{a}[k]$."]], "sdr.PED.data_aided_error": [[165, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [165, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.PED.decision_directed_error": [[166, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [166, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.PSK": [[169, 2, 1, "", "__init__", "Creates a new PSK object."], [170, 2, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [171, 4, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [172, 2, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [173, 4, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[169, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [169, 3, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [169, 3, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [169, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [169, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [169, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [169, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[170, 3, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [170, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.ser": [[172, 3, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [172, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.PiMPSK": [[175, 2, 1, "", "__init__", "Creates a new $pi/M$ PSK object."]], "sdr.PiMPSK.__init__": [[175, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [175, 3, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [175, 3, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [175, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [175, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [175, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [175, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.Q": [[176, 3, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[177, 3, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.ReplicaCorrelator": [[179, 2, 1, "", "p_d", "Computes the probability of detection $P_D$."], [180, 2, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [181, 2, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [182, 2, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.ReplicaCorrelator.p_d": [[179, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [179, 3, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [179, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."]], "sdr.ReplicaCorrelator.p_fa": [[180, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [180, 3, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [180, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [180, 3, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.ReplicaCorrelator.roc": [[181, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [181, 3, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [181, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."]], "sdr.ReplicaCorrelator.threshold": [[182, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [182, 3, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [182, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [182, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.Resampler": [[184, 2, 1, "", "__call__", "Resamples and filters the input signal $x[n]$ with the polyphase FIR filter."], [185, 2, 1, "", "__init__", "Creates a polyphase FIR rational resampling filter."], [186, 4, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [187, 4, 1, "", "down", "The decimation rate $Q$."], [188, 4, 1, "", "method", "The method used to design the multirate filter."], [189, 4, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [190, 4, 1, "", "rate", "The resampling rate $P/Q$."], [191, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [192, 4, 1, "", "taps", "The prototype feedforward taps $h_i$."], [193, 4, 1, "", "up", "The interpolation rate $P$."]], "sdr.Resampler.__init__": [[185, 3, 2, "p-down", "down", "The decimation rate $Q$."], [185, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [185, 3, 2, "p-taps", "taps", "The multirate filter design specification."], [185, 3, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.albersheim": [[194, 3, 2, "p-N_nc", "N_nc", "The number of non-coherent combinations $N_{NC} ge 1$."], [194, 3, 2, "p-p_d", "p_d", "The desired probability of detection $P_D$ in $(0, 1)$."], [194, 3, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{FA}$ in $(0, 1)$."]], "sdr.average_power": [[195, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the average power. The default is None, which computes the average power of the entire array."], [195, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [195, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[196, 3, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [196, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [196, 3, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [196, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[197, 3, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [197, 3, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.barker": [[198, 3, 2, "p-length", "length", "The length $N$ of the Barker code/sequence."], [198, 3, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[199, 3, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [199, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [199, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[200, 3, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[201, 3, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[202, 3, 2, "p-p", "p", "The probability $p$ of a bit flip."], [202, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [202, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[203, 3, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[204, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.db": [[205, 3, 2, "p-type", "type", "The type of input value or signal."], [205, 3, 2, "p-x", "x", "The input value or signal."]], "sdr.design_bandpass_fir": [[206, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [206, 3, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [206, 3, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [206, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [206, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_bandstop_fir": [[207, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [207, 3, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [207, 3, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [207, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [207, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_frac_delay_fir": [[208, 3, 2, "p-delay", "delay", "The fractional delay $0 le Delta n le 1$."], [208, 3, 2, "p-length", "length", "The filter length $L$. Filters with even length have best performance. Filters with odd length are equivalent to an even-length filter with an appended zero."]], "sdr.design_highpass_fir": [[209, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [209, 3, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [209, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [209, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_lowpass_fir": [[210, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [210, 3, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [210, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [210, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_multirate_fir": [[211, 3, 2, "p-A_stop", "A_stop", "The stopband attenuation $A_{text{stop}}$ in dB."], [211, 3, 2, "p-down", "down", "The decimation rate $Q$."], [211, 3, 2, "p-half_length", "half_length", "The half-length of the polyphase filters."], [211, 3, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.diff_decode": [[212, 3, 2, "p-y", "y", "The input encoded data $y[k]$."], [212, 3, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[213, 3, 2, "p-x", "x", "The input uncoded data $x[k]$."], [213, 3, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[214, 3, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [214, 3, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [214, 3, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [214, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [214, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.downsample": [[215, 3, 2, "p-rate", "rate", "The downsampling factor $r$."], [215, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.ebn0_to_esn0": [[216, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [216, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [216, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[217, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [217, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [217, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [217, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[218, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the energy. The default is None, which computes the energy of the entire array."], [218, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [218, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[219, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [219, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [219, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[220, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [220, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.euclidean": [[221, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the distance. The default is None, which computes the distance across the entire array."], [221, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [221, 3, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.evm": [[222, 3, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [222, 3, 2, "p-output", "output", "The output type of the EVM calculation."], [222, 3, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [222, 3, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.frequency_offset": [[223, 3, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [223, 3, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [223, 3, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [223, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [223, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[224, 3, 2, "p-distance", "distance", "The distance $d$ in meters between the transmitter and receiver."], [224, 3, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[225, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [225, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [225, 3, 2, "p-sps", "sps", "The number of samples per symbol."], [225, 3, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[226, 3, 2, "p-n", "n", "The length of the Gray code."]], "sdr.hadamard": [[227, 3, 2, "p-index", "index", "The index $i$ of the Hadamard code."], [227, 3, 2, "p-length", "length", "The length $N$ of the Hadamard code/sequence. Must be a power of 2."], [227, 3, 2, "p-output", "output", "The output format of the Hadamard code/sequence."]], "sdr.half_sine": [[228, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [228, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [228, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.hamming": [[229, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the distance. The default is None, which computes the distance across the entire array."], [229, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [229, 3, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.hexdump": [[230, 3, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [230, 3, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[231, 3, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [231, 3, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [231, 3, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.linear": [[232, 3, 2, "p-type", "type", "The type of output value or signal."], [232, 3, 2, "p-x", "x", "The input value or signal in dB."]], "sdr.mix": [[233, 3, 2, "p-complex", "complex", "Indicates whether to mix by a complex exponential or real sinusoid."], [233, 3, 2, "p-freq", "freq", "The frequency $f$ of the sinusoid in Hz (or 1/samples if sample_rate=1). The frequency must satisfy $-f_s/2 le f le f_s/2$."], [233, 3, 2, "p-phase", "phase", "The phase $phi$ of the sinusoid in degrees."], [233, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal."], [233, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.pack": [[234, 3, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [234, 3, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [234, 3, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[235, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the PAPR. The default is None, which computes the PAPR of the entire array."], [235, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[236, 3, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [236, 3, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [236, 3, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[237, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the peak power. The default is None, which computes the peak power of the entire array."], [237, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [237, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[238, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [238, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.percent": [[239, 3, 2, "p-x", "x", "The input ratio."]], "sdr.plot": [[240, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [241, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [242, 5, 1, "", "eye", "Plots the eye diagram of the baseband modulated signal $x[n]$."], [243, 5, 1, "", "filter", "Plots the magnitude response $|H(omega)|^2$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [244, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [245, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [246, 5, 1, "", "magnitude_response", "Plots the magnitude response $|H(omega)|^2$ of the filter."], [247, 5, 1, "", "p_d", "Plots the probability of detection $P_D$ as a function of received SNR or ENR."], [248, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [249, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [250, 5, 1, "", "phase_response", "Plots the phase response $angle H(omega)$ of the filter."], [251, 5, 1, "", "phase_tree", "Plots the phase tree of a continuous-phase modulated (CPM) signal signal $x[n]$."], [252, 5, 1, "", "raster", "Plots a raster of the time-domain signal $x[n]$."], [253, 5, 1, "", "roc", "Plots the receiver operating characteristic (ROC) curve as a function of $P_{FA}$."], [254, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [255, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [256, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [257, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [258, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [259, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [260, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[240, 3, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [240, 3, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."], [240, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."]], "sdr.plot.constellation": [[241, 3, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [241, 3, 2, "p-kwargs", "kwargs", "If heatmap=False, additional keyword arguments to pass to matplotlib.pyplot.scatter(). The following keyword arguments are set by default. The defaults may be overwritten."], [241, 3, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [241, 3, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.eye": [[242, 3, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [242, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [242, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [242, 3, 2, "p-span", "span", "The number of symbols per raster."], [242, 3, 2, "p-sps", "sps", "The number of samples per symbol."], [242, 3, 2, "p-x", "x", "The baseband modulated signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved."]], "sdr.plot.filter": [[243, 3, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [243, 3, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [243, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [243, 3, 2, "p-filter", "filter", "The filter definition."], [243, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [243, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[244, 3, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [244, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [244, 3, 2, "p-filter", "filter", "The filter definition."], [244, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [244, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [244, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.impulse_response": [[245, 3, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [245, 3, 2, "p-filter", "filter", "The filter definition."], [245, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [245, 3, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. Can be useful for comparing the impulse response of filters with different lengths."]], "sdr.plot.magnitude_response": [[246, 3, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [246, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [246, 3, 2, "p-filter", "filter", "The filter definition."], [246, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [246, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [246, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."], [246, 3, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a linear or logarithmic magnitude response."]], "sdr.plot.p_d": [[247, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [247, 3, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [247, 3, 2, "p-x", "x", "The SNR or ENR in dB."], [247, 3, 2, "p-x_label", "x_label", "The x-axis label to use."]], "sdr.plot.periodogram": [[248, 3, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [248, 3, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [248, 3, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [248, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [248, 3, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [248, 3, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [248, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [248, 3, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [248, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [248, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."], [248, 3, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a linear or logarithmic power spectral density."]], "sdr.plot.phase_delay": [[249, 3, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [249, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [249, 3, 2, "p-filter", "filter", "The filter definition."], [249, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [249, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [249, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.phase_response": [[250, 3, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [250, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [250, 3, 2, "p-filter", "filter", "The filter definition."], [250, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [250, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [250, 3, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [250, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.phase_tree": [[251, 3, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [251, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [251, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [251, 3, 2, "p-span", "span", "The number of symbols per raster."], [251, 3, 2, "p-sps", "sps", "The number of samples per symbol."], [251, 3, 2, "p-x", "x", "The baseband CPM signal $x[n]$."]], "sdr.plot.raster": [[252, 3, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [252, 3, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\"."], [252, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.collections.LineCollection. The following keyword arguments are set by default. The defaults may be overwritten."], [252, 3, 2, "p-length", "length", "The length of each raster in samples. This must be provided if x is 1D."], [252, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [252, 3, 2, "p-stride", "stride", "The stride between each raster in samples. If None, the stride is set to length."], [252, 3, 2, "p-x", "x", "The time-domain signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved. If x is 1D, the rastering is determined by length and stride. If x is 2D, the rows correspond to each raster."]], "sdr.plot.roc": [[253, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to the plotting function defined by type."], [253, 3, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [253, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [253, 3, 2, "p-type", "type", "The type of plot to generate."]], "sdr.plot.ser": [[254, 3, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [254, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."], [254, 3, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.spectrogram": [[255, 3, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [255, 3, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [255, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.pcolormesh(). The following keyword arguments are set by default. The defaults may be overwritten."], [255, 3, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [255, 3, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [255, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [255, 3, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [255, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [255, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[256, 3, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [256, 3, 2, "p-filter", "filter", "The filter definition."], [256, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.symbol_map": [[257, 3, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [257, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot(). The following keyword arguments are set by default. The defaults may be overwritten."], [257, 3, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [257, 3, 2, "p-modulation", "modulation", "The linear modulation or symbol map ${0, dots, M-1} mapsto mathbb{C}$."]], "sdr.plot.time_domain": [[258, 3, 2, "p-centered", "centered", "Indicates whether to center the x-axis about 0. This argument is mutually exclusive with offset."], [258, 3, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal. If \"color\", the real and imaginary parts will have different colors based on the current Matplotlib color cycle. If \"line\", the real part will have a solid line and the imaginary part will have a dashed line, and both lines will share the same color."], [258, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [258, 3, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. The units of the offset are $1/f_s$. This argument is mutually exclusive with centered."], [258, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [258, 3, 2, "p-t", "t", "The time signal $t[n]$. The units are assumed to be $1/f_s$."], [258, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[260, 3, 2, "p-filter", "filter", "The filter definition."], [260, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.polyphase_decompose": [[261, 3, 2, "p-phases", "phases", "The number of phases $B$."], [261, 3, 2, "p-taps", "taps", "The multirate FIR filter taps $h_i$."]], "sdr.ppb": [[262, 3, 2, "p-x", "x", "The input ratio."]], "sdr.ppm": [[263, 3, 2, "p-x", "x", "The input ratio."]], "sdr.raised_cosine": [[264, 3, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [264, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [264, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [264, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rectangular": [[265, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [265, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [265, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[266, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [266, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[267, 3, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [267, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [267, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [267, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[268, 3, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [268, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.snr_to_ebn0": [[269, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [269, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [269, 3, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [269, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[270, 3, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [270, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.to_complex_bb": [[271, 3, 2, "p-x_r", "x_r", "The real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$. If the length is odd, one zero is appended to the end."]], "sdr.to_real_pb": [[272, 3, 2, "p-x_c", "x_c", "The complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$."]], "sdr.unpack": [[273, 3, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [273, 3, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [273, 3, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.upsample": [[274, 3, 2, "p-rate", "rate", "The upsampling factor $r$."], [274, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.walsh": [[275, 3, 2, "p-index", "index", "The index $i$ of the Walsh code. Indicates how many transitions there are in the code."], [275, 3, 2, "p-length", "length", "The length $N$ of the Walsh code/sequence. Must be a power of 2."], [275, 3, 2, "p-output", "output", "The output format of the Walsh code/sequence."]], "sdr.wavelength": [[276, 3, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.zadoff_chu": [[277, 3, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [277, 3, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence. The root must be relatively prime to the length, i.e., $gcd(u, N) = 1$."], [277, 3, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence. When $q ne 0$, the returned sequence is a cyclic shift of the root-$u$ Zadoff-Chu sequence."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:parameter", "4": "py:property", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "parameter", "Python parameter"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"]}, "titleterms": {"convers": 0, "decibel": 0, "ratio": 0, "from": [0, 282, 283, 284], "e_b": 0, "n_0": 0, "e_": 0, "": [0, 286, 287], "n": [0, 285, 286, 287], "data": 1, "manipul": [1, 3], "detect": [2, 7], "detector": [2, 280], "theoret": 2, "limit": 2, "digit": [3, 287], "signal": [3, 279, 285, 288], "process": 3, "fir": [3, 286], "filter": [3, 7, 286, 287, 289], "iir": [3, 287], "applic": 3, "multir": 3, "arbitrari": [3, 285], "resampl": [3, 285], "correl": 3, "link": 4, "budget": 4, "channel": [4, 279], "capac": 4, "path": 4, "loss": 4, "antenna": 4, "measur": 5, "energi": 5, "power": [5, 288], "voltag": 5, "distanc": 5, "modul": [5, 6, 7], "linear": 6, "continu": 6, "phase": [6, 280, 289, 290], "orthogon": 6, "puls": [6, 288, 291], "shape": [6, 288, 291], "symbol": [6, 290], "map": [6, 290], "encod": 6, "plot": [7, 288], "configur": [7, 282, 284], "time": [7, 288, 289], "domain": [7, 288, 289], "frequenc": [7, 286, 287, 288, 289], "spectral": 7, "estim": 7, "analysi": 7, "probabl": 8, "constructor": [9, 18, 35, 44, 51, 58, 74, 84, 86, 102, 104, 113, 115, 131, 140, 148, 150, 152, 160, 162, 168, 174, 183], "special": [9, 35, 44, 58, 74, 84, 86, 102, 104, 113, 131, 140, 150, 152, 162, 183], "method": [9, 18, 35, 44, 46, 51, 58, 74, 84, 86, 102, 104, 113, 115, 131, 140, 148, 150, 152, 160, 162, 168, 174, 178, 183], "stream": [9, 35, 44, 58, 74, 84, 86, 102, 104, 113, 150, 183], "mode": [9, 35, 44, 58, 74, 84, 86, 102, 104, 113, 150, 183], "onli": [9, 35, 44, 58, 74, 84, 86, 102, 104, 113, 150, 183], "properti": [9, 18, 35, 44, 58, 74, 84, 86, 102, 104, 113, 115, 131, 140, 148, 150, 152, 160, 162, 168, 174, 183], "note": [18, 115, 148, 160, 168, 174, 224, 248, 255], "see": [51, 53, 64, 65, 66, 68, 71, 92, 94, 99, 116, 117, 127, 149, 161, 169, 170, 172, 175, 176, 177, 204, 235, 274], "also": [51, 53, 64, 65, 66, 68, 71, 92, 94, 99, 116, 117, 127, 149, 161, 169, 170, 172, 175, 176, 177, 204, 235, 274], "warn": [215, 274], "sequenc": 278, "simul": 279, "model": 279, "impair": 279, "synchron": 280, "lock": [280, 289], "loop": [280, 289], "error": [280, 290], "amplitud": 280, "control": 280, "document": 281, "instal": [281, 282, 283, 284, 292], "build": 281, "doc": 281, "serv": 281, "format": 282, "run": [282, 284], "linter": 282, "formatt": 282, "pre": 282, "commit": 282, "v": [282, 284], "code": [282, 284], "pypi": 283, "github": 283, "edit": 283, "local": 283, "folder": 283, "dev": 283, "depend": 283, "unit": 284, "test": 284, "command": 284, "line": 284, "farrow": 285, "construct": 285, "an": [285, 286, 287], "input": 285, "x": 285, "t_": 285, "rate": [285, 290], "r": 285, "y": 285, "frac": 285, "upsampl": 285, "integ": 285, "downsampl": 285, "irrat": 285, "creat": [286, 287], "examin": [286, 287, 288], "impuls": [286, 287], "respons": [286, 287, 289], "h": [286, 287], "step": [286, 287, 289], "omega": [286, 287], "group": [286, 287], "delai": [286, 287], "tau_g": [286, 287], "fulli": [286, 287], "analyz": [286, 287, 289], "zero": 287, "pole": 287, "stabil": 287, "peak": 288, "averag": 288, "qpsk": [288, 290], "variou": 288, "across": [288, 289], "excess": 288, "bandwidth": 288, "design": 289, "proport": 289, "plu": 289, "integr": 289, "ppi": 289, "implement": 289, "pll": 289, "close": 289, "perform": 289, "compar": 289, "zeta": 289, "b_n": 289, "t": 289, "shift": 290, "kei": 290, "constel": 290, "bpsk": 290, "8": [290, 293], "psk": 290, "16": 290, "curv": 290, "bit": 290, "rais": 291, "cosin": 291, "squar": 291, "root": 291, "gaussian": 291, "sdr": 292, "featur": 292, "v0": 293, "0": 293, "11": 293, "chang": 293, "contributor": 293, "10": 293, "9": 293, "7": 293, "6": 293, "5": 293, "4": 293, "3": 293, "2": 293, "1": 293, "version": 294, "alpha": 294, "releas": 294, "beta": 294}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Conversions": [[0, "conversions"]], "Decibels": [[0, "decibels"]], "Ratios": [[0, "ratios"]], "From E_b/N_0": [[0, "from-e-b-n-0"]], "From E_s/N_0": [[0, "from-e-s-n-0"]], "From S/N": [[0, "from-s-n"]], "Data manipulation": [[1, "data-manipulation"]], "Detection": [[2, "detection"], [7, "detection"]], "Detectors": [[2, "detectors"]], "Theoretical limits": [[2, "theoretical-limits"]], "Digital signal processing": [[3, "digital-signal-processing"]], "FIR filtering": [[3, "fir-filtering"]], "IIR filtering": [[3, "iir-filtering"]], "Filter applications": [[3, "filter-applications"]], "Multirate filtering": [[3, "multirate-filtering"]], "Arbitrary resampling": [[3, "arbitrary-resampling"]], "Correlation": [[3, "correlation"]], "Signal manipulation": [[3, "signal-manipulation"]], "Link budgets": [[4, "link-budgets"]], "Channel capacity": [[4, "channel-capacity"]], "Path losses": [[4, "path-losses"]], "Antennas": [[4, "antennas"]], "Measurement": [[5, "measurement"]], "Energy": [[5, "energy"]], "Power": [[5, "power"]], "Voltage": [[5, "voltage"]], "Distance": [[5, "distance"]], "Modulation": [[5, "modulation"], [6, "modulation"], [7, "modulation"]], "Linear modulations": [[6, "linear-modulations"]], "Continuous-phase modulations": [[6, "continuous-phase-modulations"]], "Orthogonal modulations": [[6, "orthogonal-modulations"]], "Pulse shaping": [[6, "pulse-shaping"]], "Symbol mapping": [[6, "symbol-mapping"], [290, "symbol-mapping"]], "Symbol encoding": [[6, "symbol-encoding"]], "Plotting": [[7, "plotting"]], "Configuration": [[7, "configuration"], [282, "configuration"], [284, "configuration"]], "Time-domain": [[7, "time-domain"]], "Frequency-domain": [[7, "frequency-domain"]], "Spectral estimation": [[7, "spectral-estimation"]], "Filter analysis": [[7, "filter-analysis"]], "Probability": [[8, "probability"]], "Constructors": [[9, "constructors"], [18, "constructors"], [35, "constructors"], [44, "constructors"], [51, "constructors"], [58, "constructors"], [74, "constructors"], [84, "constructors"], [86, "constructors"], [102, "constructors"], [104, "constructors"], [113, "constructors"], [115, "constructors"], [131, "constructors"], [140, "constructors"], [148, "constructors"], [150, "constructors"], [152, "constructors"], [160, "constructors"], [162, "constructors"], [168, "constructors"], [174, "constructors"], [183, "constructors"]], "Special methods": [[9, "special-methods"], [35, "special-methods"], [44, "special-methods"], [58, "special-methods"], [74, "special-methods"], [84, "special-methods"], [86, "special-methods"], [102, "special-methods"], [104, "special-methods"], [113, "special-methods"], [131, "special-methods"], [140, "special-methods"], [150, "special-methods"], [152, "special-methods"], [162, "special-methods"], [183, "special-methods"]], "Streaming mode only": [[9, "streaming-mode-only"], [35, "streaming-mode-only"], [44, "streaming-mode-only"], [58, "streaming-mode-only"], [74, "streaming-mode-only"], [84, "streaming-mode-only"], [86, "streaming-mode-only"], [102, "streaming-mode-only"], [104, "streaming-mode-only"], [113, "streaming-mode-only"], [150, "streaming-mode-only"], [183, "streaming-mode-only"]], "Properties": [[9, "properties"], [18, "properties"], [35, "properties"], [44, "properties"], [58, "properties"], [74, "properties"], [84, "properties"], [86, "properties"], [102, "properties"], [104, "properties"], [113, "properties"], [115, "properties"], [131, "properties"], [140, "properties"], [148, "properties"], [150, "properties"], [152, "properties"], [160, "properties"], [162, "properties"], [168, "properties"], [174, "properties"], [183, "properties"]], "Note": [[18, null], [115, null], [148, null], [160, null], [168, null], [174, null], [224, null], [248, null], [255, null]], "Methods": [[18, "methods"], [35, "methods"], [44, "methods"], [46, "methods"], [51, "methods"], [58, "methods"], [84, "methods"], [86, "methods"], [102, "methods"], [104, "methods"], [113, "methods"], [115, "methods"], [131, "methods"], [140, "methods"], [148, "methods"], [150, "methods"], [152, "methods"], [160, "methods"], [162, "methods"], [168, "methods"], [174, "methods"], [178, "methods"], [183, "methods"]], "See also": [[51, null], [53, null], [64, null], [65, null], [66, null], [68, null], [71, null], [92, null], [94, null], [99, null], [116, null], [117, null], [127, null], [149, null], [161, null], [169, null], [170, null], [172, null], [175, null], [176, null], [177, null], [204, null], [235, null], [274, null]], "Warning": [[215, null], [274, null]], "Sequences": [[278, "sequences"]], "Simulation": [[279, "simulation"]], "Channel models": [[279, "channel-models"]], "Signal impairments": [[279, "signal-impairments"]], "Synchronization": [[280, "synchronization"]], "Phase-locked loops": [[280, "phase-locked-loops"], [289, "phase-locked-loops"]], "Phase error detectors": [[280, "phase-error-detectors"]], "Amplitude control loops": [[280, "amplitude-control-loops"]], "Documentation": [[281, "documentation"]], "Install": [[281, "install"], [282, "install"], [284, "install"]], "Build the docs": [[281, "build-the-docs"]], "Serve the docs": [[281, "serve-the-docs"]], "Formatting": [[282, "formatting"]], "Run the linter": [[282, "run-the-linter"]], "Run the formatter": [[282, "run-the-formatter"]], "Pre-commit": [[282, "pre-commit"]], "Run from VS Code": [[282, "run-from-vs-code"], [284, "run-from-vs-code"]], "Installation": [[283, "installation"], [292, "installation"]], "Install from PyPI": [[283, "install-from-pypi"]], "Install from GitHub": [[283, "install-from-github"]], "Editable install from local folder": [[283, "editable-install-from-local-folder"]], "Install the dev dependencies": [[283, "install-the-dev-dependencies"]], "Unit Tests": [[284, "unit-tests"]], "Run from the command line": [[284, "run-from-the-command-line"]], "Farrow arbitrary resampler": [[285, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[285, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[285, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[285, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[285, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[285, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[285, "downsample-by-an-irrational-rate"]], "FIR filters": [[286, "fir-filters"]], "Create an FIR filter": [[286, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[286, "examine-the-impulse-response-h-n"], [287, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[286, "examine-the-step-response-s-n"], [287, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[286, "examine-the-frequency-response-h-omega"], [287, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[286, "examine-the-group-delay-tau-g-omega"], [287, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[286, "fully-analyze-a-fir-filter"]], "IIR filters": [[287, "iir-filters"]], "Create an IIR filter": [[287, "create-an-iir-filter"]], "Examine the zeros and poles": [[287, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[287, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[287, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[288, "peak-to-average-power"]], "QPSK signal with various pulse shapes": [[288, "qpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[288, "examine-time-domain"]], "Examine frequency domain": [[288, "examine-frequency-domain"]], "Plot across excess bandwidth": [[288, "plot-across-excess-bandwidth"]], "Design a proportional-plus-integrator (PPI) loop filter": [[289, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[289, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[289, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[289, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[289, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[289, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[289, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[290, "phase-shift-keying"]], "Constellations": [[290, "constellations"]], "BPSK": [[290, "bpsk"]], "QPSK": [[290, "qpsk"]], "8-PSK": [[290, "id1"]], "16-PSK": [[290, "id2"]], "Error rate curves": [[290, "error-rate-curves"]], "Bit error rate curves": [[290, "bit-error-rate-curves"]], "Symbol error rate curves": [[290, "symbol-error-rate-curves"]], "Pulse shapes": [[291, "pulse-shapes"]], "Raised cosine": [[291, "raised-cosine"]], "Square-root raised cosine": [[291, "square-root-raised-cosine"]], "Gaussian": [[291, "gaussian"]], "sdr": [[292, "sdr"]], "Features": [[292, "features"]], "v0.0": [[293, "v0-0"]], "v0.0.11": [[293, "v0-0-11"]], "Changes": [[293, "changes"], [293, "id1"], [293, "id3"], [293, "id5"], [293, "id7"], [293, "id9"], [293, "id11"], [293, "id13"], [293, "id15"], [293, "id17"], [293, "id19"]], "Contributors": [[293, "contributors"], [293, "id2"], [293, "id4"], [293, "id6"], [293, "id8"], [293, "id10"], [293, "id12"], [293, "id14"], [293, "id16"], [293, "id18"], [293, "id20"]], "v0.0.10": [[293, "v0-0-10"]], "v0.0.9": [[293, "v0-0-9"]], "v0.0.8": [[293, "v0-0-8"]], "v0.0.7": [[293, "v0-0-7"]], "v0.0.6": [[293, "v0-0-6"]], "v0.0.5": [[293, "v0-0-5"]], "v0.0.4": [[293, "v0-0-4"]], "v0.0.3": [[293, "v0-0-3"]], "v0.0.2": [[293, "v0-0-2"]], "v0.0.1": [[293, "v0-0-1"]], "Versioning": [[294, "versioning"]], "Alpha releases": [[294, "alpha-releases"]], "Beta releases": [[294, "beta-releases"]]}, "indexentries": {"module": [[3, "module-sdr"]], "sdr": [[3, "module-sdr"]]}, "docurls": ["api/conversions/", "api/data-manipulation/", "api/detection/", "api/dsp/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/sdr.AGC/", "api/sdr.AGC.__call__/", "api/sdr.AGC.__init__/", "api/sdr.AGC.attack/", "api/sdr.AGC.decay/", "api/sdr.AGC.gain/", "api/sdr.AGC.reference/", "api/sdr.AGC.reset/", "api/sdr.AGC.streaming/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.Decimator/", "api/sdr.Decimator.__call__/", "api/sdr.Decimator.__init__/", "api/sdr.Decimator.delay/", "api/sdr.Decimator.method/", "api/sdr.Decimator.polyphase_taps/", "api/sdr.Decimator.rate/", "api/sdr.Decimator.reset/", "api/sdr.Decimator.taps/", "api/sdr.Differentiator/", "api/sdr.Differentiator.__init__/", "api/sdr.EnergyDetector/", "api/sdr.EnergyDetector.p_d/", "api/sdr.EnergyDetector.p_fa/", "api/sdr.EnergyDetector.roc/", "api/sdr.EnergyDetector.threshold/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__call__/", "api/sdr.FIR.__init__/", "api/sdr.FIR.__len__/", "api/sdr.FIR.delay/", "api/sdr.FIR.flush/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.group_delay/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.phase_delay/", "api/sdr.FIR.reset/", "api/sdr.FIR.state/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__call__/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.delay/", "api/sdr.FarrowResampler.flush/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.state/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.FractionalDelay/", "api/sdr.FractionalDelay.__init__/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__call__/", "api/sdr.IIR.__init__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.state/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.Integrator/", "api/sdr.Integrator.__init__/", "api/sdr.Interpolator/", "api/sdr.Interpolator.__call__/", "api/sdr.Interpolator.__init__/", "api/sdr.Interpolator.delay/", "api/sdr.Interpolator.method/", "api/sdr.Interpolator.polyphase_taps/", "api/sdr.Interpolator.rate/", "api/sdr.Interpolator.reset/", "api/sdr.Interpolator.taps/", "api/sdr.LeakyIntegrator/", "api/sdr.LeakyIntegrator.__init__/", "api/sdr.LinearModulation/", "api/sdr.LinearModulation.__init__/", "api/sdr.LinearModulation.ber/", "api/sdr.LinearModulation.bps/", "api/sdr.LinearModulation.decide_symbols/", "api/sdr.LinearModulation.demodulate/", "api/sdr.LinearModulation.map_symbols/", "api/sdr.LinearModulation.modulate/", "api/sdr.LinearModulation.order/", "api/sdr.LinearModulation.phase_offset/", "api/sdr.LinearModulation.pulse_shape/", "api/sdr.LinearModulation.rx_filter/", "api/sdr.LinearModulation.ser/", "api/sdr.LinearModulation.sps/", "api/sdr.LinearModulation.symbol_map/", "api/sdr.LinearModulation.tx_filter/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.__call__/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.integral_gain/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.proportional_gain/", "api/sdr.LoopFilter.reset/", "api/sdr.MLPED/", "api/sdr.MLPED.A_received/", "api/sdr.MLPED.A_reference/", "api/sdr.MLPED.__call__/", "api/sdr.MLPED.__init__/", "api/sdr.MLPED.data_aided_error/", "api/sdr.MLPED.decision_directed_error/", "api/sdr.MLPED.gain/", "api/sdr.MSK/", "api/sdr.MSK.__init__/", "api/sdr.MovingAverager/", "api/sdr.MovingAverager.__init__/", "api/sdr.NCO/", "api/sdr.NCO.__call__/", "api/sdr.NCO.__init__/", "api/sdr.NCO.gain/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.OQPSK/", "api/sdr.OQPSK.__init__/", "api/sdr.PED/", "api/sdr.PED.__call__/", "api/sdr.PED.__init__/", "api/sdr.PED.data_aided_error/", "api/sdr.PED.decision_directed_error/", "api/sdr.PED.gain/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.ber/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.PiMPSK/", "api/sdr.PiMPSK.__init__/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.ReplicaCorrelator/", "api/sdr.ReplicaCorrelator.p_d/", "api/sdr.ReplicaCorrelator.p_fa/", "api/sdr.ReplicaCorrelator.roc/", "api/sdr.ReplicaCorrelator.threshold/", "api/sdr.Resampler/", "api/sdr.Resampler.__call__/", "api/sdr.Resampler.__init__/", "api/sdr.Resampler.delay/", "api/sdr.Resampler.down/", "api/sdr.Resampler.method/", "api/sdr.Resampler.polyphase_taps/", "api/sdr.Resampler.rate/", "api/sdr.Resampler.reset/", "api/sdr.Resampler.taps/", "api/sdr.Resampler.up/", "api/sdr.albersheim/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.barker/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.db/", "api/sdr.design_bandpass_fir/", "api/sdr.design_bandstop_fir/", "api/sdr.design_frac_delay_fir/", "api/sdr.design_highpass_fir/", "api/sdr.design_lowpass_fir/", "api/sdr.design_multirate_fir/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.downsample/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.euclidean/", "api/sdr.evm/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.hadamard/", "api/sdr.half_sine/", "api/sdr.hamming/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.linear/", "api/sdr.mix/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.percent/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.eye/", "api/sdr.plot.filter/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.magnitude_response/", "api/sdr.plot.p_d/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.phase_tree/", "api/sdr.plot.raster/", "api/sdr.plot.roc/", "api/sdr.plot.ser/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.polyphase_decompose/", "api/sdr.ppb/", "api/sdr.ppm/", "api/sdr.raised_cosine/", "api/sdr.rectangular/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.to_complex_bb/", "api/sdr.to_real_pb/", "api/sdr.unpack/", "api/sdr.upsample/", "api/sdr.walsh/", "api/sdr.wavelength/", "api/sdr.zadoff_chu/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/formatting/", "development/installation/", "development/unit-tests/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})