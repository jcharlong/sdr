Search.setIndex({"titles": ["Filtering", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.DDS", "sdr.DDS.__init__", "sdr.DDS.nco", "sdr.DDS.process", "sdr.DDS.reset", "sdr.DDS.step", "sdr.FIR", "sdr.FIR.__init__", "sdr.FIR.delay", "sdr.FIR.filter", "sdr.FIR.frequency_response", "sdr.FIR.frequency_response_log", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.reset", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FIRInterpolator", "sdr.FIRInterpolator.__init__", "sdr.FIRInterpolator.filter", "sdr.FIRInterpolator.polyphase_taps", "sdr.FIRInterpolator.rate", "sdr.FIRInterpolator.reset", "sdr.FIRInterpolator.streaming", "sdr.FIRInterpolator.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.resample", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__init__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.filter", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.filter", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.process", "sdr.NCO.reset", "sdr.NCO.step", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.demodulate", "sdr.PSK.modulate", "sdr.PSK.offset", "sdr.PSK.order", "sdr.PSK.symbol_labels", "sdr.PSK.symbol_map", "sdr.Q", "sdr.Qinv", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.energy", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.hexdump", "sdr.iq_imbalance", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.plot.constellation", "sdr.plot.filter", "sdr.plot.frequency_response", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.raised_cosine", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.unpack", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"class": [0, 1, 18, 24, 36, 44, 51, 67, 76, 84, 136, 137, 140], "sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144], "fir": [0, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 118, 119, 120, 121, 123, 124, 126, 130, 142, 143], "implement": [0, 18, 24, 36, 44, 51, 67, 73, 76, 84, 135], "finit": [0, 24, 36, 143], "impuls": [0, 24, 30, 36, 51, 60, 108, 118, 121, 128, 138, 141, 143], "respons": [0, 24, 28, 29, 30, 33, 36, 51, 57, 58, 60, 64, 108, 118, 119, 120, 121, 124, 126, 141, 143], "firinterpol": [0, 36, 37, 38, 39, 40, 41, 42, 43], "polyphas": [0, 36, 37, 39, 43], "interpol": [0, 36, 37, 38, 40], "iir": [0, 1, 10, 29, 30, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 118, 119, 120, 121, 123, 124, 126, 130, 136, 139, 142, 143], "an": [0, 24, 30, 51, 52, 53, 60, 85, 96, 112, 121, 134, 142], "infinit": [0, 51, 143], "gaussian": [0, 95, 96, 108, 142, 143], "time_bandwidth": [0, 108], "float": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 44, 47, 51, 52, 57, 58, 59, 67, 68, 69, 70, 71, 74, 76, 77, 78, 79, 80, 84, 85, 88, 94, 95, 96, 97, 100, 102, 106, 108, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 131, 132, 133], "span": [0, 108, 131, 133, 138, 141], "int": [0, 18, 23, 24, 26, 28, 29, 30, 31, 33, 36, 37, 40, 44, 46, 51, 57, 58, 60, 61, 64, 76, 83, 84, 85, 89, 95, 99, 103, 104, 108, 109, 110, 112, 118, 119, 120, 121, 122, 123, 124, 125, 126, 131, 133, 134], "sp": [0, 108, 131, 133, 138, 141], "ndarrai": [0, 18, 21, 23, 24, 27, 28, 29, 30, 33, 35, 36, 38, 39, 43, 44, 47, 50, 51, 54, 55, 56, 57, 58, 60, 62, 64, 66, 67, 72, 76, 81, 83, 84, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 108, 109, 111, 112, 131, 133, 134], "return": [0, 1, 9, 11, 14, 15, 21, 23, 24, 27, 28, 29, 30, 33, 38, 47, 51, 56, 57, 58, 60, 64, 72, 81, 83, 86, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 131, 132, 133, 134, 136, 137], "raised_cosin": [0, 131, 141, 142, 143], "alpha": [0, 108, 129, 131, 133, 138, 141], "rais": [0, 128, 131, 133, 136], "cosin": [0, 128, 131, 133, 136], "rc": [0, 131], "root_raised_cosin": [0, 118, 119, 120, 121, 123, 124, 126, 128, 130, 133, 136, 138, 141, 142, 143], "squar": [0, 107, 114, 128, 132, 133, 136], "root": [0, 128, 132, 133, 136], "srrc": [0, 128, 133, 138], "farrowresampl": [0, 44, 45, 46, 47, 48, 49, 50, 135, 142, 143], "cubic": [0, 44], "farrow": [0, 44, 45, 46, 47, 48, 49, 50, 143], "arbitrari": [0, 44, 45, 46, 47, 48, 49, 50, 142, 143], "psk": [0, 84, 85, 86, 87, 88, 89, 90, 91, 111, 142], "shift": [0, 84, 86, 87, 88, 89, 91, 136, 137], "kei": [0, 84, 86, 87, 88, 89, 91], "demodul": [0, 84, 86], "binary_cod": [0, 99], "n": [0, 1, 18, 21, 23, 24, 27, 28, 29, 30, 31, 33, 36, 38, 44, 47, 51, 56, 57, 58, 60, 61, 64, 67, 72, 76, 81, 83, 92, 93, 94, 95, 96, 99, 102, 105, 106, 109, 111, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 132, 139, 141], "gener": [0, 95, 99, 109, 140], "binari": [0, 85, 90, 91, 97, 98, 99, 100, 101, 105, 112, 127, 134], "code": [0, 85, 90, 91, 99, 109], "length": [0, 30, 33, 99, 108, 109, 118, 121, 122, 125, 126, 131, 133, 135, 138, 141], "2": [0, 1, 9, 11, 14, 28, 29, 36, 39, 43, 57, 58, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141], "diff_decod": [0, 103, 104, 142], "y": [0, 18, 21, 23, 24, 27, 36, 38, 47, 51, 56, 67, 72, 76, 81, 83, 95, 97, 100, 103, 104, 105, 111, 117, 125, 127, 128, 139], "arraylik": [0, 18, 21, 24, 25, 27, 36, 37, 38, 44, 47, 48, 51, 52, 53, 56, 67, 72, 76, 81, 84, 85, 86, 87, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 134], "y_prev": [0, 103, 104], "0": [0, 8, 18, 19, 24, 28, 29, 36, 39, 43, 51, 52, 57, 58, 70, 76, 78, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 111, 112, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144], "differenti": [0, 103, 104], "decod": [0, 103], "input": [0, 1, 9, 11, 14, 15, 18, 21, 24, 25, 27, 30, 33, 36, 37, 38, 44, 45, 47, 48, 51, 52, 53, 56, 60, 64, 67, 72, 76, 81, 92, 95, 96, 97, 98, 100, 101, 103, 104, 105, 112, 121, 126, 134, 136, 137, 139], "k": [0, 84, 85, 86, 87, 89, 103, 104, 117, 127, 138, 141], "diff_encod": [0, 103, 104, 142], "x": [0, 1, 18, 21, 24, 27, 36, 38, 44, 47, 51, 56, 67, 72, 76, 81, 84, 86, 87, 92, 93, 94, 95, 97, 100, 102, 103, 104, 105, 106, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 132, 134, 138, 139, 140, 144], "encod": [0, 103, 104], "gray_cod": [0, 109, 142], "grai": [0, 85, 90, 91, 109], "closedlooppl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 139, 142, 143], "A": [0, 1, 9, 11, 12, 13, 14, 15, 17, 24, 67, 99, 109, 110, 111, 114, 131, 133, 139], "defin": [0, 1, 24, 51, 95, 105, 108, 137, 142], "perform": [0, 1, 136, 137, 142], "close": [0, 1, 8, 10, 143], "pll": [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 143], "dd": [0, 18, 19, 20, 21, 22, 23, 76, 139, 142, 143], "direct": [0, 18, 19, 139, 143], "digit": [0, 1, 9, 11, 12, 13, 14, 15, 18, 19, 67, 131, 133, 139, 142, 143], "synthes": [0, 18, 19, 139, 143], "loopfilt": [0, 67, 68, 69, 70, 71, 72, 73, 74, 75, 139, 142, 143], "2nd": [0, 1, 67, 70, 139, 143], "order": [0, 1, 24, 31, 44, 46, 51, 61, 67, 70, 84, 85, 89, 108, 131, 133, 139, 140, 143], "proport": [0, 1, 5, 67, 68, 70, 107, 114, 143], "plu": [0, 1, 67, 70, 143], "integr": [0, 1, 6, 67, 69, 70, 137, 143], "ppi": [0, 67, 70], "nco": [0, 1, 4, 8, 18, 19, 20, 70, 76, 77, 78, 79, 80, 81, 82, 83, 139, 142, 143], "numer": [0, 1, 18, 20, 76, 78, 137, 139, 143], "control": [0, 1, 18, 20, 76, 78, 139, 143], "oscil": [0, 1, 18, 20, 76, 78, 139, 143], "awgn": [0, 95, 96, 140, 142], "snr": [0, 95, 96], "none": [0, 24, 30, 33, 44, 48, 67, 75, 95, 96, 105, 112, 117, 118, 121, 122, 125, 126, 127, 134, 135], "add": [0, 95, 140, 144], "addit": [0, 95, 96, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130], "white": [0, 95, 96], "nois": [0, 1, 2, 3, 8, 14, 67, 70, 74, 95, 96, 125, 139], "signal": [0, 1, 9, 11, 14, 15, 18, 21, 24, 27, 36, 38, 44, 47, 51, 56, 67, 72, 76, 81, 83, 94, 95, 96, 102, 106, 107, 108, 111, 113, 114, 115, 116, 122, 125, 128, 132, 136, 137, 138, 139, 141], "iq_imbal": [0, 111, 142], "amplitud": [0, 108, 111, 135, 139], "appli": [0, 36, 111, 117, 127, 129], "iq": [0, 111], "imbal": [0, 111], "complex": [0, 18, 21, 23, 84, 86, 87, 91, 95, 96, 111, 117, 127, 135, 136, 137, 140], "average_pow": [0, 94, 113, 142], "averag": [0, 94, 95, 96, 113, 122], "power": [0, 94, 95, 96, 113, 114, 115, 122, 141], "crest_factor": [0, 102, 113, 142, 143], "crest": [0, 102], "factor": [0, 1, 8, 17, 67, 70, 71, 102, 139], "energi": [0, 96, 106, 131, 133, 142], "papr": [0, 113, 138, 142, 143], "peak": [0, 102, 113, 115, 116], "ratio": [0, 14, 95, 96, 113], "peak_pow": [0, 113, 115, 142], "peak_voltag": [0, 102, 116, 142], "voltag": [0, 116, 132], "rms_voltag": [0, 102, 132, 142], "mean": [0, 122, 132, 141], "rm": [0, 102, 132], "hexdump": [0, 110, 142, 143], "byte": [0, 110], "width": [0, 110], "16": [0, 91, 110, 143], "str": [0, 110, 122, 125], "specifi": [0, 95, 96, 105, 110, 136, 137], "pack": [0, 110, 112, 142, 143], "bpe": [0, 112, 134], "arrai": [0, 39, 43, 85, 90, 91, 97, 99, 100, 103, 104, 105, 109, 112, 128, 134, 137, 138], "multipl": [0, 112, 134], "bit": [0, 90, 91, 96, 97, 98, 100, 101, 110, 112, 134, 143], "per": [0, 21, 81, 96, 108, 110, 112, 131, 133, 134, 138, 141], "element": [0, 110, 112, 134], "unpack": [0, 110, 134, 142, 143], "bec": [0, 97, 98, 105, 142], "p": [0, 92, 93, 97, 98, 100, 101, 105], "pass": [0, 95, 97, 100, 105, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 136, 137], "sequenc": [0, 97, 100, 105], "through": [0, 97, 100, 105, 136, 137, 139], "erasur": [0, 97, 98, 105], "bsc": [0, 100, 101, 105, 142], "symmetr": [0, 100, 101, 105], "transit": [0, 100, 101, 105], "dmc": [0, 105, 142], "discret": [0, 1, 9, 11, 12, 13, 14, 15, 67, 105, 131, 133, 135, 139], "memoryless": [0, 105], "matrix": [0, 105], "awgn_capac": [0, 96, 142], "calcul": [0, 96, 98, 101, 107, 114], "capac": [0, 96, 98, 101], "bec_capac": [0, 98, 142], "bsc_capac": [0, 101, 142], "fspl": [0, 107, 142], "d": [0, 107, 114, 142], "f": [0, 9, 11, 24, 28, 29, 51, 57, 58, 107, 108, 114, 135, 136, 137, 138, 139, 140, 141], "free": [0, 107], "space": [0, 29, 58, 107], "path": [0, 107], "loss": [0, 107], "db": [0, 1, 12, 14, 95, 96, 107, 108, 111, 113, 114, 138, 140, 141], "parabolic_antenna": [0, 114, 142], "freq": [0, 114, 135, 139], "tupl": [0, 24, 28, 29, 51, 57, 58, 114, 117, 127], "gain": [0, 1, 4, 5, 6, 7, 8, 18, 19, 51, 52, 59, 67, 68, 69, 70, 76, 77, 78, 108, 114, 139], "g": [0, 114], "beamwidth": [0, 114], "theta": [0, 19, 76, 78, 80, 114, 124], "parabol": [0, 114], "reflector": [0, 114], "q": [0, 92, 93, 142], "comput": [0, 92, 93, 95, 107, 136, 137, 139, 141], "complementari": [0, 92, 93], "cumul": [0, 92, 93], "distribut": [0, 92, 93], "function": [0, 1, 10, 24, 51, 52, 67, 92, 93, 96, 108, 122, 125, 136, 137, 139, 141, 142, 143], "standard": [0, 92, 93], "normal": [0, 1, 3, 8, 67, 70, 74, 92, 93, 108, 125, 139, 141], "mathcal": [0, 92, 93, 95, 105], "1": [0, 1, 8, 11, 15, 17, 18, 19, 28, 29, 36, 39, 43, 51, 52, 57, 58, 67, 70, 71, 76, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144], "qinv": [0, 92, 93, 142], "invers": [0, 93], "use_styl": [0, 129], "": [0, 1, 9, 11, 12, 13, 15, 16, 24, 28, 29, 33, 51, 57, 58, 64, 84, 86, 87, 96, 111, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 135, 140, 142], "default": [0, 30, 33, 90, 91, 125, 129], "matplotlib": [0, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 135, 136, 137, 138, 139, 140, 141, 142], "rcparam": [0, 129, 135, 139], "time_domain": [0, 95, 128, 138, 141, 142, 143], "sample_r": [0, 1, 8, 16, 28, 29, 57, 58, 118, 119, 120, 122, 123, 124, 125, 128, 135, 139, 141], "periodogram": [0, 122, 138, 142, 143], "estim": [0, 84, 86, 122, 125, 139], "spectral": [0, 122, 138, 141], "densiti": [0, 14, 122, 138, 141], "p_": [0, 94, 95, 105, 113, 115, 122], "xx": [0, 122], "us": [0, 18, 20, 25, 37, 44, 45, 52, 53, 67, 73, 84, 86, 96, 98, 101, 110, 112, 118, 121, 122, 125, 126, 134, 136, 137, 141, 142, 144], "welch": [0, 122, 125], "method": [0, 122, 125, 136, 137], "spectrogram": [0, 125, 142, 143], "b": [0, 51, 53, 96, 108, 110, 118, 119, 120, 121, 123, 124, 126, 130, 141], "h": [0, 24, 25, 28, 29, 30, 36, 51, 57, 58, 60, 67, 108, 118, 119, 121, 138, 139, 141], "omega": [0, 19, 76, 78, 79, 118, 119, 120, 123, 124, 139], "step": [0, 18, 21, 23, 24, 33, 51, 64, 76, 81, 83, 118, 126], "zero": [0, 36, 48, 51, 52, 66, 67, 112, 118, 119, 120, 121, 123, 124, 126, 128, 130, 136, 138, 139, 141], "pole": [0, 51, 52, 62, 118, 119, 120, 121, 123, 124, 126, 130, 136], "frequency_respons": [0, 24, 28, 29, 51, 57, 58, 119, 136, 137, 139, 141, 142, 143], "group_delai": [0, 120, 136, 137, 142, 143], "group": [0, 120], "delai": [0, 18, 24, 26, 44, 67, 76, 103, 104, 120, 123, 139], "tau_g": [0, 120], "impulse_respons": [0, 24, 30, 51, 60, 108, 121, 131, 133, 136, 137, 141, 142, 143], "phase_delai": [0, 123, 142], "tau_": [0, 123], "phi": [0, 84, 85, 88, 111, 123], "phase_respons": [0, 124, 142], "step_respons": [0, 24, 33, 51, 64, 126, 136, 137, 139, 142, 143], "zeros_pol": [0, 130, 137, 142, 143], "kwarg": [0, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130], "loop": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 142, 143], "thi": [1, 21, 24, 36, 51, 81, 84, 91, 95, 96, 118, 119, 120, 121, 122, 123, 124, 125, 126, 130, 135, 137, 139, 141], "i": [1, 8, 17, 24, 30, 33, 34, 36, 39, 42, 43, 44, 49, 51, 60, 64, 65, 67, 70, 71, 74, 92, 93, 95, 96, 98, 101, 105, 107, 108, 110, 111, 112, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 133, 134, 135, 136, 137, 139, 140, 141, 142, 144], "meant": 1, "analysi": [1, 8, 139, 143], "onli": [1, 24, 32, 36, 41, 44, 48, 51, 63, 90, 91, 95, 139], "block": [1, 18, 36, 67, 76, 103, 104], "diagram": [1, 18, 36, 67, 76, 103, 104], "bb": [1, 139], "ped": [1, 7, 8, 70, 139], "lf": [1, 139], "lo": [1, 139], "e": [1, 18, 94, 97, 98, 106, 136, 137, 139, 140], "j": [1, 18, 36, 39, 43, 51, 95, 105, 111, 136, 137, 139], "local": [1, 139], "baseband": [1, 138, 139], "phase": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 111, 123, 124, 142], "error": [1, 7, 8, 14, 67, 70, 101, 139], "detector": [1, 7, 8, 70, 139], "filter": [1, 5, 6, 8, 10, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 108, 118, 119, 120, 121, 123, 124, 126, 128, 130, 131, 133, 138, 141, 142, 143], "The": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 43, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 139, 141, 142, 144], "transfer": [1, 10, 24, 51, 52, 67, 108, 136, 137, 139], "h_": [1, 36, 39, 43, 139], "z": [1, 18, 24, 51, 67, 76, 103, 104, 136, 137, 139], "k_1": [1, 5, 67, 68, 139], "k_2": [1, 6, 67, 69, 139], "frac": [1, 9, 11, 14, 15, 51, 67, 94, 95, 96, 102, 107, 108, 111, 113, 114, 132, 139], "k_0": [1, 4, 8, 19, 70, 76, 77, 78, 139], "k_p": [1, 7, 8, 70, 139], "refer": [1, 9, 11, 12, 13, 14, 15, 44, 67, 102, 108, 113, 131, 133, 137, 141], "michael": [1, 9, 11, 12, 13, 14, 15, 67, 131, 133], "rice": [1, 9, 11, 12, 13, 14, 15, 67, 131, 133], "commun": [1, 9, 11, 12, 13, 14, 15, 67, 131, 133, 139, 142], "time": [1, 8, 9, 11, 12, 13, 14, 15, 24, 51, 67, 70, 94, 95, 102, 105, 106, 108, 111, 113, 115, 116, 118, 122, 125, 128, 131, 132, 133, 135, 136, 137, 141], "approach": [1, 9, 11, 12, 13, 14, 15, 67, 96, 98, 101, 131, 133, 139], "appendix": [1, 67, 131, 133], "c": [1, 9, 11, 12, 13, 14, 15, 67, 84, 91, 96, 98, 101, 107, 114, 139], "lock": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 142], "exampl": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 118, 119, 120, 121, 123, 124, 126, 128, 129, 130, 131, 133, 134, 139], "see": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 31, 32, 34, 35, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 108, 131, 133, 142], "noise_bandwidth": [1, 8, 67, 70, 74], "damping_factor": [1, 8, 67, 70, 71], "creat": [1, 8, 18, 19, 24, 25, 36, 37, 44, 45, 51, 52, 53, 67, 70, 76, 78, 84, 85, 128, 135, 138, 139, 140, 141], "object": [1, 8, 84, 85, 137, 139, 140], "frequency_lock_tim": [1, 9], "freq_offset": [1, 9, 11], "frequenc": [1, 9, 11, 13, 24, 28, 29, 51, 57, 58, 67, 107, 114, 118, 119, 120, 122, 123, 124, 125, 141], "lock_tim": [1, 11, 139], "phase_error_vari": [1, 14], "cn0": [1, 14], "varianc": [1, 14, 95], "steadi": [1, 14], "state": [1, 14, 24, 32, 34, 36, 41, 42, 44, 48, 49, 51, 63, 65], "phase_lock_tim": [1, 15], "bn": [1, 2], "bandwidth": [1, 2, 3, 8, 12, 67, 70, 74, 96, 108, 131, 133, 139, 141], "b_n": [1, 2, 3, 8, 9, 11, 14, 15, 67, 70, 74], "hz": [1, 2, 8, 9, 11, 14, 28, 29, 57, 58, 67, 70, 74, 96, 107, 108, 114, 135], "bnt": [1, 3, 139], "t": [1, 3, 8, 67, 70, 74, 108, 110, 135], "repres": [1, 10, 97, 98], "k0": [1, 4, 8, 18, 19, 70, 76, 77, 78], "k1": [1, 5, 67, 68, 139], "k2": [1, 6, 67, 69, 139], "kp": [1, 7, 8, 70], "omega_3db": [1, 12], "3": [1, 9, 11, 12, 15, 36, 39, 43, 88, 89, 90, 91, 96, 97, 99, 100, 105, 107, 108, 109, 110, 111, 112, 114, 118, 119, 120, 121, 123, 124, 126, 128, 130, 134, 137, 139, 141, 142, 143], "omega_": [1, 12], "textrm": [1, 12], "radian": [1, 12, 13, 14, 18, 19, 139], "omega_n": [1, 13, 139], "natur": [1, 13], "sampl": [1, 8, 16, 18, 19, 21, 23, 24, 26, 28, 29, 30, 33, 36, 38, 44, 48, 57, 58, 60, 64, 67, 70, 74, 76, 78, 79, 81, 83, 108, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 131, 133, 135, 138, 139, 141], "rate": [1, 8, 16, 28, 29, 36, 37, 38, 40, 44, 47, 57, 58, 118, 119, 120, 122, 123, 124, 125, 128], "f_": [1, 8, 16, 28, 29, 38, 57, 58, 108, 118, 119, 120, 122, 123, 124, 125, 128, 135, 136, 137, 139, 141], "zeta": [1, 8, 17, 67, 70, 71], "damp": [1, 8, 17, 67, 70, 71, 139], "properti": [2, 3, 4, 5, 6, 7, 10, 12, 13, 16, 17, 20, 26, 31, 34, 35, 39, 40, 42, 43, 46, 49, 50, 54, 55, 59, 61, 62, 65, 66, 68, 69, 71, 73, 74, 77, 79, 80, 88, 89, 90, 91], "paramet": [8, 9, 11, 14, 19, 21, 23, 25, 27, 28, 29, 30, 33, 37, 38, 45, 47, 48, 52, 53, 56, 57, 58, 60, 64, 70, 72, 78, 81, 83, 85, 86, 87, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134], "where": [8, 67, 70, 74, 95, 96, 105, 108, 136, 137, 142], "period": [8, 67, 70, 74], "second": [8, 9, 11, 15, 67, 70, 74, 108], "critic": [8, 17, 67, 70, 71, 139], "underdamp": [8, 17, 67, 70, 71], "overdamp": [8, 17, 67, 70, 71], "ted": [8, 70], "t_": [9, 11, 15, 47, 108, 141], "fl": [9, 11], "4": [9, 11, 29, 36, 39, 43, 58, 88, 89, 90, 91, 95, 96, 98, 99, 101, 105, 107, 108, 109, 110, 111, 112, 114, 118, 119, 120, 121, 123, 124, 126, 128, 129, 130, 131, 133, 134, 135, 137, 140, 143], "delta": [9, 11, 24, 30, 51, 60, 121, 136, 137], "offset": [9, 11, 18, 19, 76, 78, 80, 84, 85, 88, 111, 139], "take": [9, 11, 15], "onto": [9, 11, 15], "equat": [9, 11, 12, 13, 14, 15, 51], "39": 9, "pl": [11, 15], "38": 11, "34": 12, "33": 13, "sigma_": 14, "theta_": 14, "n_0": [14, 96, 140], "carrier": 14, "43": 14, "40": 15, "less": 17, "than": [17, 90, 91, 111, 117, 127], "greater": 17, "note": [18, 24, 36, 39, 43, 51, 67, 76, 95, 96, 98, 101, 103, 104, 108, 111, 114, 125], "increment": [18, 19, 21, 76, 78, 79, 81, 139], "v": [18, 76], "output": [18, 21, 23, 24, 30, 33, 36, 51, 52, 53, 60, 64, 67, 72, 76, 81, 83, 95, 96, 97, 98, 100, 101, 104, 105, 112, 121, 126, 134, 135, 136, 137, 139], "exponenti": [18, 21, 23, 135, 136, 137], "constant": [18, 19, 67, 76, 78, 79, 137, 139], "accumul": [18, 19, 76, 78, 79, 139], "absolut": [18, 19, 76, 78, 80, 96], "unit": [18, 24, 33, 51, 64, 67, 76, 78, 79, 80, 94, 95, 96, 103, 104, 106, 115, 116, 126, 131, 132, 133, 136, 137, 139], "adder": [18, 67, 76, 103, 104, 139], "process": [18, 21, 76, 81, 137, 139], "variabl": [18, 21, 76, 81, 110, 139], "reset": [18, 22, 24, 32, 36, 41, 44, 48, 51, 63, 67, 75, 76, 82], "forward": [18, 23, 76, 83], "vari": [21, 81], "number": [23, 28, 29, 30, 33, 57, 58, 60, 64, 83, 95, 108, 110, 112, 118, 119, 120, 121, 122, 123, 124, 125, 126, 131, 133, 134], "wrapper": [24, 51], "scipi": [24, 27, 51, 122, 125, 141, 142], "convolv": [24, 27, 128, 138], "It": [24, 51, 67, 95], "support": [24, 51], "one": [24, 51, 90, 91, 108, 110, 118, 119, 120, 122, 123, 124, 125, 136, 137, 138, 141], "stream": [24, 25, 32, 34, 36, 37, 41, 42, 44, 45, 48, 49, 51, 52, 53, 63, 65], "its": [24, 51, 52, 136, 137, 141], "feedforward": [24, 25, 35, 36, 37, 39, 43, 51, 53, 55, 118, 119, 120, 121, 123, 124, 126, 130, 136, 137], "coeffici": [24, 25, 36, 37, 51, 53, 118, 119, 120, 121, 123, 124, 126, 130, 136, 137], "h_i": [24, 25, 35, 36, 37, 39, 43, 136], "sum_": [24, 51, 94, 95, 96, 106, 132], "sum": [24, 51, 141], "limits_": [24, 51], "bool": [24, 25, 34, 36, 37, 42, 44, 45, 49, 51, 52, 53, 65, 117, 124, 127], "fals": [24, 25, 36, 37, 44, 45, 51, 52, 53, 97, 100, 105, 117, 137, 141], "frequency_response_log": [24, 29, 51, 58], "logarithm": [24, 29, 51, 58, 118, 119, 120, 122, 123, 124, 136, 137], "axi": [24, 29, 51, 58, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 135], "when": [24, 30, 33, 51, 60, 64, 96, 97, 98, 100, 101, 118, 119, 120, 121, 123, 124, 126, 135, 136, 137], "mode": [24, 25, 27, 32, 34, 36, 37, 41, 42, 44, 45, 48, 49, 51, 52, 53, 63, 65, 138], "u": [24, 33, 51, 64, 126, 136, 137], "indic": [24, 25, 34, 36, 37, 42, 44, 45, 49, 51, 52, 53, 65, 111, 124], "whether": [24, 25, 34, 36, 37, 42, 44, 45, 49, 51, 52, 53, 65, 124], "tap": [24, 35, 36, 37, 39, 43, 44, 50, 51, 54, 55, 136, 137], "In": [25, 34, 37, 39, 42, 43, 45, 49, 52, 53, 65, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 118, 119, 120, 121, 123, 124, 126, 128, 129, 130, 131, 133, 134, 135, 140], "previou": [25, 37, 45, 48, 52, 53, 103, 104], "ar": [25, 29, 36, 37, 39, 43, 45, 52, 53, 58, 85, 96, 97, 98, 100, 101, 112, 117, 118, 119, 120, 122, 123, 124, 125, 127, 129, 135, 137, 139, 141, 142, 144], "preserv": [25, 34, 37, 42, 45, 49, 52, 53, 65], "between": [25, 34, 36, 37, 42, 45, 49, 52, 53, 65, 107, 122, 125, 139], "call": [25, 34, 37, 42, 45, 49, 52, 53, 65], "liter": [27, 119, 120, 123, 124], "full": 27, "valid": [27, 138], "same": [27, 136], "convolut": 27, "detail": 27, "1024": [28, 29, 57, 58, 118, 119, 120, 123, 124, 138, 141], "from": [28, 29, 51, 52, 57, 58, 84, 85, 91, 125, 136, 137, 139, 142], "plot": [28, 29, 30, 33, 57, 58, 60, 64, 88, 89, 90, 91, 95, 96, 98, 101, 108, 111, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143], "decad": [29, 58, 118, 119, 120, 123, 124, 136, 139], "equival": [36, 96, 135], "first": [36, 112, 134], "upsampl": 36, "r": [36, 37, 38, 39, 40, 43, 44, 47, 96, 108, 131, 133, 137, 139, 141], "insert": 36, "each": [36, 110, 122, 125], "prototyp": [36, 39, 43], "instead": [36, 117], "decompos": 36, "parallel": 36, "commut": 36, "produc": [36, 108, 141], "prevent": 36, "need": 36, "multipli": 36, "case": 36, "2x": 36, "6": [36, 39, 43, 90, 91, 99, 105, 107, 109, 110, 114, 118, 119, 120, 121, 123, 124, 126, 128, 130, 136, 137, 139, 140], "5": [36, 39, 43, 90, 95, 97, 99, 100, 101, 105, 108, 109, 110, 111, 114, 118, 119, 120, 121, 123, 124, 126, 128, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 143], "hold": [36, 112], "top": 36, "bottom": 36, "relat": [36, 39, 43, 96, 108], "polyphase_tap": [36, 39, 43], "befor": [39, 43, 111, 144], "decomposit": [39, 43], "after": [39, 43, 111], "np": [39, 43, 95, 96, 97, 98, 100, 101, 105, 111, 118, 119, 120, 121, 123, 124, 126, 128, 130, 135, 136, 137, 138, 139, 140, 141], "arang": [39, 43, 95, 135, 138, 139], "10": [39, 43, 95, 96, 99, 105, 107, 108, 109, 110, 111, 113, 114, 117, 118, 119, 120, 121, 123, 124, 126, 128, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141], "out": [39, 43, 88, 89, 90, 91, 92, 93, 97, 99, 100, 103, 104, 105, 107, 109, 112, 114, 120, 129, 134], "7": [39, 43, 90, 91, 99, 105, 109, 110, 128], "8": [39, 43, 88, 89, 90, 91, 95, 96, 98, 99, 101, 105, 108, 109, 110, 114, 118, 119, 120, 121, 123, 124, 126, 128, 129, 130, 131, 133, 136, 137, 138, 139, 141], "9": [39, 43, 99, 105, 109, 110, 131, 133, 138, 140, 141, 143], "resampl": [44, 45, 46, 47, 48, 49, 50, 142, 143], "http": [44, 102, 108, 113], "wirelesspi": 44, "com": [44, 108], "fraction": [44, 48, 108, 135], "structur": 44, "new": [44, 45, 84, 85], "given": [44, 47, 136, 137], "index": [44, 48, 127], "vector": [48, 122, 125], "should": 48, "equal": 48, "three": [48, 135, 141], "If": [48, 85, 95, 96, 105, 112, 117, 118, 121, 122, 125, 126, 127, 128, 134, 142], "lfilter": 51, "b_i": [51, 53, 55, 118, 119, 120, 121, 123, 124, 126, 130, 137], "feedback": [51, 53, 54, 118, 119, 120, 121, 123, 124, 126, 130, 137], "a_j": [51, 53, 54, 118, 119, 120, 121, 123, 124, 126, 130, 137], "These": [51, 129, 139], "differ": [51, 90, 91, 141], "a_0": 51, "left": [51, 94, 95, 96, 106, 107, 108, 111, 114, 115, 116, 132], "m": [51, 84, 85, 86, 87, 89, 91, 105], "right": [51, 94, 95, 96, 106, 107, 108, 111, 114, 115, 116, 132], "classmethod": [51, 52], "zerospol": [51, 52, 118, 119, 120, 121, 123, 124, 126, 130, 137], "self": [51, 52], "100": [51, 60, 64, 95, 96, 98, 101, 118, 121, 126, 128, 135], "a_tap": [51, 54, 118, 119, 120, 121, 123, 124, 126, 130, 137, 139], "b_tap": [51, 55, 118, 119, 120, 121, 123, 124, 126, 130, 137, 139], "can": [67, 95, 108, 112, 122, 125, 136, 137, 144], "track": 67, "cannot": 67, "howev": [67, 98, 101, 135], "chirp": 67, "ramp": 67, "underli": [67, 73], "modul": [84, 85, 87, 89, 111, 140, 142], "x_hat": [84, 86, 117, 140], "symbol": [84, 85, 86, 87, 90, 91, 96, 108, 117, 127, 131, 133, 138, 140, 141], "hat": [84, 86, 117, 127], "decim": [84, 86, 87, 91, 140], "maximum": [84, 86, 117, 127], "likelihood": [84, 86], "degre": [84, 85, 88, 111, 114], "symbol_label": [84, 85, 90, 91], "valu": [84, 85, 90, 92, 93, 103, 104, 108, 111, 117, 125, 127, 137], "label": [84, 85, 90, 95, 108, 111, 125, 128, 131, 133, 135, 138, 139, 141], "consecut": [84, 85, 90], "symbol_map": [84, 88, 89, 90, 91, 127, 128, 138], "map": [84, 91, 127], "dot": [84, 91], "mapsto": [84, 91], "mathbb": [84, 91, 96], "bin": [85, 90, 91, 127, 140], "ge": 85, "like": [85, 142], "must": [85, 95, 108, 131, 133], "have": [85, 112, 134], "uniqu": 85, "plt": [88, 89, 90, 91, 95, 96, 98, 101, 108, 111, 118, 119, 120, 121, 123, 124, 126, 128, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141], "figur": [88, 89, 90, 91, 95, 96, 98, 101, 108, 111, 118, 119, 120, 121, 123, 124, 126, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141], "figsiz": [88, 89, 90, 91, 95, 96, 98, 101, 108, 111, 118, 119, 120, 121, 123, 124, 126, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141], "45": [88, 111], "adjac": [90, 91, 141], "annot": [90, 91, 127, 143], "mai": [90, 91, 129, 137], "more": [90, 91, 125], "00000000e": [91, 137], "00": [91, 137], "00j": 91, "07106781e": 91, "01": [91, 110, 137, 139], "01j": 91, "12323400e": 91, "17": [91, 114], "83697020e": 91, "22464680e": 91, "16j": 91, "real": [92, 93, 95, 135, 136, 137, 138, 139], "probabl": [92, 93, 97, 98, 100, 101, 105, 142], "exceed": [92, 93], "15865525393145707": [92, 93], "158655": [92, 93], "0000010494310452": [92, 93], "measur": [94, 95, 102, 106, 113, 115, 116, 132, 139, 142, 143], "domain": [94, 95, 102, 106, 111, 113, 115, 116, 118, 122, 125, 128, 132], "text": [94, 95, 96, 98, 101, 102, 107, 113, 115, 116, 132], "avg": [94, 95, 113], "seed": 95, "which": [95, 96, 111, 114, 117, 127, 135, 139, 141], "ad": [95, 142, 143], "desir": [95, 140], "explicitli": 95, "assum": [95, 105, 112, 134], "contain": [95, 110], "known": 95, "linear": 95, "random": [95, 97, 100, 105, 111, 128, 138, 140], "numpi": [95, 134, 135, 136, 137, 138, 139, 140, 141, 142], "default_rng": 95, "noisi": 95, "w": [95, 135, 136, 137, 138, 139, 140, 141], "sigma": [95, 96], "For": [95, 118, 119, 120, 121, 123, 124, 126, 130, 136], "sim": 95, "cn": 95, "sin": 95, "pi": [95, 107, 108, 111, 114, 118, 119, 120, 121, 123, 124, 126, 128, 130, 135, 136, 137, 138, 139], "titl": [95, 96, 98, 101, 111, 128, 135, 138, 139, 141], "tight_layout": [95, 96, 98, 101, 128, 138, 139, 140, 141], "channel": [96, 97, 98, 100, 101, 105, 142], "2d": 96, "wa": 96, "x_i": [96, 97, 98, 100, 101, 105, 111], "y_i": [96, 97, 98, 100, 101, 105], "log_2": 96, "monoton": 96, "decreas": 96, "limit": [96, 117, 127], "infti": 96, "esn0": [96, 140], "linspac": [96, 98, 101, 137], "20": [96, 97, 100, 105, 110, 111, 138, 141], "xlabel": [96, 98, 101, 135, 139, 141], "psd": 96, "e_": [96, 140], "ylabel": [96, 98, 101, 135, 139, 141], "grid": [96, 98, 101, 129, 135, 139, 141], "true": [96, 97, 98, 100, 101, 105, 117, 124, 127, 129, 140], "At": 96, "occur": 96, "e_b": 96, "view": 96, "59": 96, "shannon": 96, "ebn0": 96, "log10": [96, 141], "25": [97, 100, 105, 135, 139, 141], "roughli": [97, 100, 135], "eras": 97, "randint": [97, 100, 105, 111, 128, 138, 140], "11": [99, 109], "12": [99, 109, 136, 140], "13": [99, 109], "14": [99, 109], "15": [99, 109], "flip": 100, "h_b": 101, "cf": 102, "v_": [102, 116, 132], "en": [102, 113], "wikipedia": [102, 113], "org": [102, 113], "wiki": [102, 113], "data": [103, 104, 110, 112, 134, 142], "uncod": 104, "pr": 105, "y_j": 105, "alphabet": 105, "size": [105, 135, 138, 139, 141], "ldot": 105, "log_": [107, 113], "distanc": 107, "meter": [107, 114], "transmitt": 107, "receiv": 107, "km": 107, "link": [107, 142], "ghz": [107, 114], "1e3": 107, "1e9": [107, 114], "92": 107, "44778322188337": 107, "so": [107, 108, 142], "doubl": [107, 114], "result": [107, 114], "increas": [107, 114, 137], "2e3": 107, "98": 107, "468383135163": 107, "also": [107, 108, 142], "2e9": 107, "puls": [108, 128, 131, 133, 142, 143], "shape": [108, 128, 131, 133, 142, 143], "product": [108, 141], "sym": [108, 141], "side": [108, 118, 119, 120, 122, 123, 124, 125, 136, 137, 138, 141], "thought": [108, 144], "smaller": [108, 141], "wider": 108, "even": [108, 131, 133], "nomin": 108, "passband": [108, 138], "ha": [108, 114, 139, 141], "exp": [108, 111, 118, 119, 120, 121, 123, 124, 126, 128, 130, 135, 137, 138, 139], "sqrt": [108, 132, 138, 139, 141], "ln": 108, "www": 108, "mathwork": 108, "help": 108, "ref": 108, "gaussdesign": 108, "html": 108, "onlinelibrari": 108, "wilei": 108, "doi": 108, "pdf": 108, "1002": 108, "9780470041956": 108, "app2": 108, "h_0p1": [108, 131, 133], "h_0p2": 108, "h_0p3": 108, "displai": [110, 118, 119, 120, 122, 123, 124, 125], "consid": 110, "convert": 110, "line": 110, "string": [110, 122, 125], "print": [110, 135, 136, 137, 139], "quick": 110, "brown": 110, "fox": 110, "jump": 110, "over": 110, "lazi": 110, "dog": 110, "00000000": 110, "54": 110, "68": 110, "65": 110, "71": 110, "75": [110, 139, 140], "69": 110, "63": 110, "6b": 110, "62": 110, "72": 110, "6f": 110, "77": 110, "6e": 110, "00000010": 110, "66": 110, "78": 110, "6a": 110, "6d": 110, "70": [110, 141], "73": 110, "76": 110, "74": 110, "00000020": 110, "6c": 110, "61": 110, "7a": 110, "79": 110, "64": [110, 137], "67": 110, "he": 110, "02": [110, 137, 139], "03": [110, 137], "04": [110, 137], "00000004": 110, "05": [110, 135, 137, 139], "06": 110, "07": 110, "08": 110, "00000008": 110, "09": 110, "0a": 110, "posit": 111, "compon": 111, "larger": [111, 117, 127], "quadratur": 111, "lead": 111, "follow": [111, 129, 139], "g_i": 111, "180": 111, "g_q": 111, "x_q": 111, "horizont": 111, "stretch": 111, "constel": [111, 117], "while": [111, 141], "neg": 111, "vertic": 111, "1_000": 111, "y1": 111, "y2": 111, "subplot": [111, 139, 140], "legend": [111, 135, 138, 139, 141], "northwest": 111, "northeast": 111, "deg": 111, "dtype": [112, 128, 134, 139], "dtypelik": [112, 134], "most": [112, 134], "signific": [112, 134], "enough": 112, "fill": 112, "last": 112, "remain": 112, "type": [112, 119, 120, 122, 123, 124, 134, 143], "smallest": 112, "unsign": 112, "integ": 112, "uint8": [112, 134], "diamet": 114, "effici": 114, "55": 114, "le": [114, 131, 133], "eta": 114, "dbi": 114, "half": 114, "arcsin": 114, "83": 114, "dish": 114, "21": 114, "810210290266568": 114, "437435887991374": 114, "23": 114, "sinc": 114, "antenna": 114, "we": [114, 142], "observ": 114, "830810203546193": 114, "529544741425365": 114, "max": [115, 116], "heatmap": [117, 140], "scatter": 117, "both": [117, 127, 135, 139], "set": [117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 137], "keyword": [117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 136, 137], "argument": [117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 136, 137], "pyplot": [117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 135, 136, 137, 138, 139, 140, 141], "hist2d": 117, "n_time": [118, 137], "n_freq": 118, "x_axi": [118, 119, 120, 122, 123, 124, 125, 136, 137, 138, 139], "two": [118, 119, 120, 122, 123, 124, 125, 135, 136, 137], "log": [118, 119, 120, 122, 123, 124, 136, 137, 139], "n_t": 118, "n_f": 118, "scale": [118, 119, 120, 122, 123, 124, 125, 136, 137], "option": [118, 119, 120, 122, 123, 124, 125], "spectrum": [118, 119, 120, 122, 123, 124, 125], "h_srrc": [118, 119, 120, 121, 123, 124, 126, 128, 130], "1j": [118, 119, 120, 121, 123, 124, 126, 128, 130, 135, 137, 138, 139], "conj": [118, 119, 120, 121, 123, 124, 126, 130, 137, 139], "30": [118, 121, 126, 137], "ylim": [120, 136, 139, 141], "48": 120, "52": 120, "window": [122, 125], "hann": [122, 125], "overlap": [122, 125, 138], "fft": [122, 125], "median": 122, "segment": [122, 125], "256": [122, 125, 138], "point": [122, 125], "unwrap": [124, 139], "pcolormesh": 125, "By": 125, "color": [125, 135, 138, 139, 141], "bar": 125, "rang": [125, 139], "10th": 125, "100th": 125, "percentil": 125, "provid": [125, 142], "dynam": 125, "activ": 125, "chang": [125, 144], "vmin": 125, "vmax": 125, "represent": 127, "50": [127, 135, 138], "bpsk": [128, 138], "1000": 128, "10e3": 128, "qpsk": 128, "complex64": [128, 139], "style": 129, "revert": 129, "rcdefault": 129, "_rc_param": 129, "rc_param": 129, "ax": [129, 135, 139], "autolayout": 129, "max_open_warn": 129, "titleweight": 129, "bold": 129, "linestyl": [129, 135, 139, 141], "excess": [131, 133, 141], "h_0p5": [131, 133], "h_0p9": [131, 133], "import": [135, 136, 137, 138, 139, 140, 141, 142], "config": [135, 136, 137, 138, 139, 140, 141], "inlinebackend": [135, 136, 137, 138, 139, 140, 141], "print_figure_kwarg": [135, 136, 137, 138, 139, 140, 141], "facecolor": [135, 136, 137, 138, 139, 140, 141], "widget": [135, 136, 137, 138, 139, 140, 141], "prop_cycl": [135, 139], "by_kei": [135, 139], "continu": 135, "tx": 135, "decai": [135, 137], "marker": [135, 136, 137], "o": 135, "fillstyl": 135, "imag": 135, "origin": 135, "show": [135, 136, 137, 138, 139, 140, 141], "now": 135, "accomplish": 135, "librari": [135, 140, 142, 144], "def": [135, 140], "resample_sign": 135, "new_sample_r": 135, "ty": 135, "notic": [135, 141], "everi": 135, "200": 135, "four": 135, "400": 135, "other": [135, 144], "appear": 135, "fourth": 135, "often": 135, "do": 135, "align": 135, "315": 135, "32": 135, "user": [136, 137], "below": [136, 137], "00095881": 136, "00175008": 136, "00423912": 136, "00588237": 136, "00615087": 136, "00474585": 136, "00170436": 136, "0025481": 136, "00721629": 136, "01123216": 136, "01342329": 136, "01273174": 136, "00845039": 136, "00043678": 136, "01073645": 136, "02372925": 136, "03650167": 136, "04650553": 136, "05098414": 136, "04734541": 136, "03355823": 136, "00851466": 136, "0276993": 136, "07367186": 136, "12670168": 136, "18306847": 136, "2381038": 136, "28726435": 136, "32607284": 136, "3509308": 136, "35948882": 136, "conveni": [136, 137], "evalu": [136, 137], "envelop": [136, 137], "easili": [136, 137], "here": [136, 137], "altern": 137, "conjug": 137, "0x000002214b040a88": 137, "47820725": 137, "78207252e": 137, "58172329e": 137, "10862468e": 137, "86109590e": 137, "21565653e": 137, "01140214e": 137, "57286400e": 137, "67772160e": 137, "47338728e": 137, "10422993e": 137, "89312837e": 137, "12240078e": 137, "03953322e": 137, "69685122e": 137, "63882791e": 137, "81474977e": 137, "47193366e": 137, "85259041e": 137, "15647504e": 137, "23851924e": 137, "42176895e": 137, "84684395e": 137, "42721858e": 137, "72236648e": 137, "14721649e": 137, "10813095e": 137, "94024315e": 137, "78877688e": 137, "74077567e": 137, "87820725": 137, "53637958": 137, "94724205": 137, "13335164": 137, "1455082": 137, "04436799": 137, "88708159": 137, "71930943": 137, "5719707": 137, "46154771": 137, "39261642": 137, "36139242": 137, "35935288": 137, "3763214": 137, "40270968": 137, "43085717": 137, "45557651": 137, "47410241": 137, "48566716": 137, "49090568": 137, "49124786": 137, "48840102": 137, "4839738": 137, "47925143": 137, "47510421": 137, "47199608": 137, "47005584": 137, "46917696": 137, "46911955": 137, "denomin": 137, "73910363": 137, "30614675j": 137, "plane": 137, "endpoint": 137, "concaten": 137, "0x000002214dc574c8": 137, "lyon": 137, "understand": 137, "3rd": 137, "edit": 137, "section": [137, 139], "insid": 137, "circl": 137, "sinusoid": 137, "outsid": 137, "unstabl": 137, "n_symbol": 138, "500": [138, 139], "x_bb_rect": 138, "papr_bb_rect": 138, "x_pb_rect": 138, "papr_pb_rect": 138, "x_bb_0p9": 138, "papr_bb_0p9": 138, "x_bb_0p5": 138, "papr_bb_0p5": 138, "x_bb_0p1": 138, "papr_bb_0p1": 138, "2f": 138, "rf": [138, 139], "xlim": [138, 139, 141], "x_pb_0p9": 138, "papr_pb_0p9": 138, "x_pb_0p5": 138, "papr_pb_0p5": 138, "x_pb_0p1": 138, "papr_pb_0p1": 138, "configur": 139, "0x00000290f1ce3488": 139, "theta_0": 139, "phase_error": 139, "freq_estim": 139, "suptitl": [139, 140], "ones": 139, "angl": 139, "part": 139, "system": [139, 142], "avail": [139, 140], "001": 139, "005": 139, "b_nt": 139, "0005": 139, "00001": 139, "0125": 139, "015": 139, "0175": 139, "t_lock": 139, "analyze_psk": 140, "100_000": 140, "achiev": [140, 141], "n0": 140, "18": 140, "rectangular": 141, "rect": 141, "rc_0p1": 141, "rc_0p5": 141, "rc_0p9": 141, "nyquist": 141, "specif": 141, "pm": 141, "roll": 141, "60": 141, "total": 141, "nearli": 141, "compar": 141, "null": 141, "small": 141, "lobe": 141, "much": 141, "higher": 141, "h_rect": 141, "freqz": 141, "worn": 141, "whole": 141, "h_rc_0p1": 141, "h_rc_0p5": 141, "h_rc_0p9": 141, "rel": 141, "main": 141, "p_rect": 141, "cumsum": 141, "ab": 141, "p_rc_0p1": 141, "p_rc_0p5": 141, "p_rc_0p9": 141, "One": 141, "within": 141, "variou": 141, "srrc_0p1": 141, "srrc_0p5": 141, "srrc_0p9": 141, "therefor": 141, "similar": 141, "significantli": 141, "due": 141, "being": 141, "h_srrc_0p1": 141, "h_srrc_0p5": 141, "h_srrc_0p9": 141, "p_srrc_0p1": 141, "p_srrc_0p5": 141, "p_srrc_0p9": 141, "gauss_0p1": 141, "gauss_0p2": 141, "gauss_0p3": 141, "python": 142, "packag": 142, "softwar": 142, "radio": 142, "goal": 142, "tool": 142, "design": 142, "build": 142, "analyz": 142, "reli": 142, "interoper": 142, "veri": 142, "possibl": 142, "numba": 142, "acceler": 142, "computation": 142, "intens": 142, "addition": 142, "aim": 142, "replic": 142, "relev": 142, "matlab": 142, "dsp": 142, "toolbox": 142, "progress": 142, "someth": 142, "you": 142, "includ": 142, "pleas": 142, "open": 142, "issu": 142, "github": 142, "impair": 142, "manipul": 142, "model": 142, "budget": 142, "util": 142, "releas": 143, "juli": 143, "2023": 143, "helper": 143, "improv": 143, "matt": 143, "hostett": 143, "mhostett": 143, "semant": 144, "major": 144, "minor": 144, "patch": 144, "introduc": 144, "api": 144, "featur": 144, "backward": 144, "compat": 144, "make": 144, "bug": 144, "fix": 144, "There": 144, "guarante": 144, "them": 144, "thei": 144}, "objects": {"": [[0, 0, 0, 1, "sdr", ""]], "sdr": [[1, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [18, 1, 1, "", "DDS", "Implements a direct digital synthesizer (DDS)."], [24, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [36, 1, 1, "", "FIRInterpolator", "Implements a polyphase finite impulse response (FIR) interpolating filter."], [44, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [51, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [67, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [76, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [84, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [92, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [93, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [94, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [95, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [96, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [97, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [98, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [99, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [100, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [101, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [102, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [103, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [104, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [105, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [106, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [107, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [108, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [109, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [110, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [111, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [112, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [113, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [114, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [115, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [116, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [131, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [132, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [133, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [134, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."]], "sdr.ClosedLoopPLL": [[2, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [3, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [4, 2, 1, "", "K0", "The NCO gain $K_0$."], [5, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [6, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [7, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [8, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [9, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [10, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [11, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [12, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [13, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [14, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [15, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [16, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [17, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[8, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [8, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [8, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [8, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [8, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[9, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[11, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[14, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.DDS": [[19, 3, 1, "", "__init__", "Creates a direct digital synthesizer (DDS)."], [20, 2, 1, "", "nco", "The numerically-controlled oscillator (NCO) used by the DDS."], [21, 3, 1, "", "process", "Steps the DDS with the variable phase increment signal $x[n]$."], [22, 3, 1, "", "reset", "Resets the DDS."], [23, 3, 1, "", "step", "Steps the DDS forward by $N$ samples."]], "sdr.DDS.__init__": [[19, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [19, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [19, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.DDS.process": [[21, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the DDS."]], "sdr.DDS.step": [[23, 4, 2, "p-N", "N", "The number of samples $N$ to step the DDS forward."]], "sdr.FIR": [[25, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [26, 2, 1, "", "delay", "The delay of the FIR filter in samples."], [27, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the FIR filter."], [28, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the FIR filter."], [29, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the FIR filter on a logarithmic frequency axis."], [30, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [31, 2, 1, "", "order", "The order of the FIR filter, $N$."], [32, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [33, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [34, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [35, 2, 1, "", "taps", "The feedforward taps $h_i$."]], "sdr.FIR.__init__": [[25, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$."], [25, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to filter()."]], "sdr.FIR.filter": [[27, 4, 2, "p-mode", "mode", "The convolution mode. See scipy.signal.convolve() for details."], [27, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.FIR.frequency_response": [[28, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [28, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.frequency_response_log": [[29, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [29, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [29, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[30, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.step_response": [[33, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIRInterpolator": [[37, 3, 1, "", "__init__", "Creates a polyphase FIR interpolating filter with feedforward coefficients $h_i$."], [38, 3, 1, "", "filter", "Filters and interpolates the input signal $x[n]$ with the FIR filter."], [39, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [40, 2, 1, "", "rate", "The interpolation rate $r$."], [41, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [42, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [43, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.FIRInterpolator.__init__": [[37, 4, 2, "p-rate", "rate", "The interpolation rate $r$."], [37, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to filter()."], [37, 4, 2, "p-taps", "taps", "The feedforward coefficients $h_i$."]], "sdr.FIRInterpolator.filter": [[38, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$."]], "sdr.FarrowResampler": [[45, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [46, 2, 1, "", "order", "The order of the filter."], [47, 3, 1, "", "resample", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [48, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [49, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [50, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__init__": [[45, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to resample()."]], "sdr.FarrowResampler.resample": [[47, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [47, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.reset": [[48, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[52, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [53, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [54, 2, 1, "", "a_taps", "The feedback taps $a_j$."], [55, 2, 1, "", "b_taps", "The feedforward taps $b_i$."], [56, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the IIR filter."], [57, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the IIR filter."], [58, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the IIR filter on a logarithmic frequency axis."], [59, 2, 1, "", "gain", "The gain of the IIR filter."], [60, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [61, 2, 1, "", "order", "The order of the IIR filter, $N$."], [62, 2, 1, "", "poles", "The poles of the IIR filter."], [63, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [64, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [65, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [66, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[52, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [52, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [52, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."], [52, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__init__": [[53, 4, 2, "p-a", "a", "The feedback coefficients $a_j$."], [53, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [53, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."]], "sdr.IIR.filter": [[56, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.IIR.frequency_response": [[57, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [57, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[58, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [58, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [58, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[60, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[64, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.LoopFilter": [[68, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [69, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [70, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [71, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [72, 3, 1, "", "filter", "Filters the input signal $x[n]$."], [73, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [74, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [75, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__init__": [[70, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [70, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [70, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [70, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.LoopFilter.filter": [[72, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.NCO": [[77, 2, 1, "", "K0", "The NCO gain $K_0$."], [78, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [79, 2, 1, "", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [80, 2, 1, "", "offset", "The absolute offset $theta$ of the NCO in units."], [81, 3, 1, "", "process", "Steps the NCO with the variable-increment signal $x[n]$."], [82, 3, 1, "", "reset", "Resets the NCO."], [83, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__init__": [[78, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [78, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [78, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in units."]], "sdr.NCO.process": [[81, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the NCO."]], "sdr.NCO.step": [[83, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.PSK": [[85, 3, 1, "", "__init__", "Creates a new PSK object."], [86, 3, 1, "", "demodulate", "Demodulates the complex symbols $hat{x}[k]$ to decimal symbols $hat{s}[k]$ using maximum-likelihood estimation."], [87, 3, 1, "", "modulate", "Modulates to decimal symbols $s[k]$ to complex symbols $x[k]$."], [88, 2, 1, "", "offset", "The phase offset $phi$ in degrees."], [89, 2, 1, "", "order", "The modulation order $M = 2^k$."], [90, 2, 1, "", "symbol_labels", "The symbols values (labels) of consecutive symbols."], [91, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[85, 4, 2, "p-offset", "offset", "The phase offset $phi$ in degrees."], [85, 4, 2, "p-order", "order", "The modulation order $M = 2^k$ with $k ge 1$."], [85, 4, 2, "p-symbol_labels", "symbol_labels", "The symbol labels of consecutive symbols. If \"bin\", the symbols are binary-coded. If \"gray\", the symbols are Gray-coded. If an array-like object, the symbols are labeled by the values in the array. The array must have unique values from $0$ to $M-1$."]], "sdr.PSK.demodulate": [[86, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to demodulate."]], "sdr.PSK.modulate": [[87, 4, 2, "p-symbols", "symbols", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.Q": [[92, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[93, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.average_power": [[94, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[95, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [95, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [95, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [95, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[96, 4, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [96, 4, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.bec": [[97, 4, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [97, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[98, 4, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[99, 4, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[100, 4, 2, "p-p", "p", "The probability $p$ of a bit flip."], [100, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[101, 4, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[102, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.diff_decode": [[103, 4, 2, "p-y", "y", "The input encoded data $y[k]$."], [103, 4, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[104, 4, 2, "p-x", "x", "The input uncoded data $x[k]$."], [104, 4, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[105, 4, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [105, 4, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [105, 4, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [105, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.energy": [[106, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.fspl": [[107, 4, 2, "p-d", "d", "The distance $d$ in meters between the transmitter and receiver."], [107, 4, 2, "p-f", "f", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[108, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [108, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [108, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[109, 4, 2, "p-n", "n", "The length of the Gray code."]], "sdr.hexdump": [[110, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [110, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[111, 4, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [111, 4, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [111, 4, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.pack": [[112, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [112, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [112, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[113, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[114, 4, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [114, 4, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [114, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[115, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[116, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.plot": [[117, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [118, 5, 1, "", "filter", "Plots the frequency response $H(omega)$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [119, 5, 1, "", "frequency_response", "Plots the frequency response $H(omega)$ of the filter."], [120, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [121, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [122, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [123, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [124, 5, 1, "", "phase_response", "Plots the phase response $Theta(omega)$ of the filter."], [125, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [126, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [127, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [128, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [129, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [130, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.constellation": [[117, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [117, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [117, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.filter": [[118, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [118, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [118, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [118, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [118, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [118, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [118, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.frequency_response": [[119, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [119, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [119, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [119, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [119, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [119, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[120, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [120, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [120, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [120, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [120, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [120, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.impulse_response": [[121, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [121, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [121, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.plot.periodogram": [[122, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [122, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [122, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [122, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [122, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [122, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [122, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [122, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_delay": [[123, 4, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [123, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [123, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [123, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [123, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [123, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_response": [[124, 4, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [124, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [124, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [124, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [124, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [124, 4, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [124, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.spectrogram": [[125, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [125, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [125, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [125, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [125, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [125, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [125, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[126, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [126, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [126, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.plot.symbol_map": [[127, 4, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [127, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [127, 4, 2, "p-symbol_map", "symbol_map", "The complex symbols $hat{x}[k]$."]], "sdr.plot.time_domain": [[128, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\"."], [128, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[130, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [130, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.raised_cosine": [[131, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [131, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [131, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[132, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[133, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [133, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [133, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.unpack": [[134, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [134, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [134, 4, 2, "p-x", "x", "The input array with bpe bits per element."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"filter": [0, 136, 137, 139], "puls": [0, 138, 141], "shape": [0, 138, 141], "resampl": [0, 135], "modul": 0, "phase": [0, 139, 140], "time": [0, 139], "lock": [0, 139], "loop": [0, 139], "impair": 0, "measur": 0, "data": 0, "manipul": 0, "channel": 0, "model": 0, "link": 0, "budget": 0, "probabl": 0, "plot": 0, "configur": 0, "domain": [0, 139], "frequenc": [0, 136, 137, 139], "analysi": 0, "note": 1, "constructor": [1, 18, 24, 36, 44, 51, 67, 76, 84], "method": [1, 18, 24, 36, 44, 51, 67, 76, 84], "properti": [1, 18, 24, 36, 44, 51, 67, 76, 84], "see": [18, 28, 29, 30, 33, 57, 58, 60, 64, 76, 92, 93, 102, 113, 118, 119, 120, 121, 123, 124, 126, 130], "also": [18, 28, 29, 30, 33, 57, 58, 60, 64, 76, 92, 93, 102, 113, 118, 119, 120, 121, 123, 124, 126, 130], "farrow": 135, "arbitrari": 135, "construct": 135, "an": [135, 136, 137], "input": 135, "signal": 135, "x": 135, "n": [135, 136, 137], "t_": 135, "rate": 135, "r": 135, "y": 135, "frac": 135, "upsampl": 135, "integ": 135, "downsampl": 135, "irrat": 135, "fir": 136, "creat": [136, 137], "examin": [136, 137], "impuls": [136, 137], "respons": [136, 137, 139], "h": [136, 137], "step": [136, 137, 139], "": [136, 137], "omega": [136, 137], "group": [136, 137], "delai": [136, 137], "tau_g": [136, 137], "fulli": [136, 137], "analyz": [136, 137, 139], "iir": 137, "zero": 137, "pole": 137, "digit": 137, "stabil": 137, "peak": 138, "averag": 138, "power": 138, "rectangular": 138, "squar": [138, 141], "root": [138, 141], "rais": [138, 141], "cosin": [138, 141], "design": 139, "proport": 139, "plu": 139, "integr": 139, "ppi": 139, "implement": 139, "pll": 139, "close": 139, "perform": 139, "compar": 139, "across": 139, "zeta": 139, "b_n": 139, "t": 139, "shift": 140, "kei": 140, "constel": 140, "bpsk": 140, "qpsk": 140, "8": 140, "psk": 140, "16": 140, "gaussian": 141, "sdr": 142, "featur": 142, "v0": 143, "0": 143, "2": 143, "chang": 143, "contributor": 143, "1": 143, "version": 144, "alpha": 144, "releas": 144, "beta": 144}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Filtering": [[0, "filtering"]], "Pulse shaping": [[0, "pulse-shaping"]], "Resampling": [[0, "resampling"]], "Modulation": [[0, "modulation"]], "Phase/time-locked loops": [[0, "phase-time-locked-loops"]], "Impairments": [[0, "impairments"]], "Measurement": [[0, "measurement"]], "Data manipulation": [[0, "data-manipulation"]], "Channel models": [[0, "channel-models"]], "Link budgets": [[0, "link-budgets"]], "Probability": [[0, "probability"]], "Plotting": [[0, "plotting"]], "Configuration": [[0, "configuration"]], "Time-domain": [[0, "time-domain"]], "Frequency-domain": [[0, "frequency-domain"]], "Filter analysis": [[0, "filter-analysis"]], "Note": [[1, null]], "Constructors": [[1, "constructors"], [18, "constructors"], [24, "constructors"], [36, "constructors"], [44, "constructors"], [51, "constructors"], [67, "constructors"], [76, "constructors"], [84, "constructors"]], "Methods": [[1, "methods"], [18, "methods"], [24, "methods"], [36, "methods"], [44, "methods"], [51, "methods"], [67, "methods"], [76, "methods"], [84, "methods"]], "Properties": [[1, "properties"], [18, "properties"], [24, "properties"], [36, "properties"], [44, "properties"], [51, "properties"], [67, "properties"], [76, "properties"], [84, "properties"]], "See also": [[18, null], [28, null], [29, null], [30, null], [33, null], [57, null], [58, null], [60, null], [64, null], [76, null], [92, null], [93, null], [102, null], [113, null], [118, null], [119, null], [120, null], [121, null], [123, null], [124, null], [126, null], [130, null]], "Farrow arbitrary resampler": [[135, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[135, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[135, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[135, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[135, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[135, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[135, "downsample-by-an-irrational-rate"]], "FIR filters": [[136, "fir-filters"]], "Create an FIR filter": [[136, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[136, "examine-the-impulse-response-h-n"], [137, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[136, "examine-the-step-response-s-n"], [137, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[136, "examine-the-frequency-response-h-omega"], [137, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[136, "examine-the-group-delay-tau-g-omega"], [137, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[136, "fully-analyze-a-fir-filter"]], "IIR filters": [[137, "iir-filters"]], "Create an IIR filter": [[137, "create-an-iir-filter"]], "Examine the zeros and poles": [[137, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[137, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[137, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[138, "peak-to-average-power"]], "Rectangular pulse shape": [[138, "rectangular-pulse-shape"]], "Square-root raised cosine pulse shape": [[138, "square-root-raised-cosine-pulse-shape"]], "Phase-locked loops": [[139, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[139, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[139, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[139, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[139, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[139, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[139, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[139, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[140, "phase-shift-keying"]], "Constellations": [[140, "constellations"]], "BPSK": [[140, "bpsk"]], "QPSK": [[140, "qpsk"]], "8-PSK": [[140, "id1"]], "16-PSK": [[140, "id2"]], "Pulse shapes": [[141, "pulse-shapes"]], "Raised cosine": [[141, "raised-cosine"]], "Square-root raised cosine": [[141, "square-root-raised-cosine"]], "Gaussian": [[141, "gaussian"]], "sdr": [[142, "sdr"]], "Features": [[142, "features"]], "v0.0": [[143, "v0-0"]], "v0.0.2": [[143, "v0-0-2"]], "Changes": [[143, "changes"], [143, "id1"]], "Contributors": [[143, "contributors"], [143, "id2"]], "v0.0.1": [[143, "v0-0-1"]], "Versioning": [[144, "versioning"]], "Alpha releases": [[144, "alpha-releases"]], "Beta releases": [[144, "beta-releases"]]}, "indexentries": {"module": [[0, "module-sdr"]], "sdr": [[0, "module-sdr"]]}, "docurls": ["api/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.DDS/", "api/sdr.DDS.__init__/", "api/sdr.DDS.nco/", "api/sdr.DDS.process/", "api/sdr.DDS.reset/", "api/sdr.DDS.step/", "api/sdr.FIR/", "api/sdr.FIR.__init__/", "api/sdr.FIR.delay/", "api/sdr.FIR.filter/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.frequency_response_log/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.reset/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FIRInterpolator/", "api/sdr.FIRInterpolator.__init__/", "api/sdr.FIRInterpolator.filter/", "api/sdr.FIRInterpolator.polyphase_taps/", "api/sdr.FIRInterpolator.rate/", "api/sdr.FIRInterpolator.reset/", "api/sdr.FIRInterpolator.streaming/", "api/sdr.FIRInterpolator.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.resample/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__init__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.filter/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.filter/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.process/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.demodulate/", "api/sdr.PSK.modulate/", "api/sdr.PSK.offset/", "api/sdr.PSK.order/", "api/sdr.PSK.symbol_labels/", "api/sdr.PSK.symbol_map/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.energy/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.plot.constellation/", "api/sdr.plot.filter/", "api/sdr.plot.frequency_response/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.raised_cosine/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.unpack/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})