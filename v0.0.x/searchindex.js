Search.setIndex({"titles": ["Conversions", "Data manipulation", "Detection", "Digital signal processing", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.Decimator", "sdr.Decimator.__call__", "sdr.Decimator.__init__", "sdr.Decimator.__repr__", "sdr.Decimator.__str__", "sdr.Decimator.delay", "sdr.Decimator.method", "sdr.Decimator.polyphase_taps", "sdr.Decimator.rate", "sdr.Decimator.reset", "sdr.Decimator.taps", "sdr.Differentiator", "sdr.Differentiator.__init__", "sdr.EnergyDetector", "sdr.EnergyDetector.p_d", "sdr.EnergyDetector.p_fa", "sdr.EnergyDetector.roc", "sdr.EnergyDetector.threshold", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__call__", "sdr.FIR.__init__", "sdr.FIR.__len__", "sdr.FIR.__repr__", "sdr.FIR.__str__", "sdr.FIR.delay", "sdr.FIR.flush", "sdr.FIR.frequency_response", "sdr.FIR.frequency_response_log", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.reset", "sdr.FIR.state", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__call__", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__call__", "sdr.IIR.__init__", "sdr.IIR.__repr__", "sdr.IIR.__str__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.state", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.Integrator", "sdr.Integrator.__init__", "sdr.Interpolator", "sdr.Interpolator.__call__", "sdr.Interpolator.__init__", "sdr.Interpolator.__repr__", "sdr.Interpolator.__str__", "sdr.Interpolator.delay", "sdr.Interpolator.method", "sdr.Interpolator.polyphase_taps", "sdr.Interpolator.rate", "sdr.Interpolator.reset", "sdr.Interpolator.taps", "sdr.LinearModulation", "sdr.LinearModulation.__init__", "sdr.LinearModulation.__repr__", "sdr.LinearModulation.__str__", "sdr.LinearModulation.ber", "sdr.LinearModulation.bps", "sdr.LinearModulation.decide_symbols", "sdr.LinearModulation.demodulate", "sdr.LinearModulation.map_symbols", "sdr.LinearModulation.modulate", "sdr.LinearModulation.order", "sdr.LinearModulation.phase_offset", "sdr.LinearModulation.pulse_shape", "sdr.LinearModulation.rx_filter", "sdr.LinearModulation.ser", "sdr.LinearModulation.sps", "sdr.LinearModulation.symbol_map", "sdr.LinearModulation.tx_filter", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__call__", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.MSK", "sdr.MSK.__init__", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__call__", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.reset", "sdr.NCO.step", "sdr.OQPSK", "sdr.OQPSK.__init__", "sdr.OQPSK.__repr__", "sdr.OQPSK.__str__", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.__repr__", "sdr.PSK.__str__", "sdr.PSK.ber", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.PiMPSK", "sdr.PiMPSK.__init__", "sdr.Q", "sdr.Qinv", "sdr.ReplicaCorrelator", "sdr.ReplicaCorrelator.p_d", "sdr.ReplicaCorrelator.p_fa", "sdr.ReplicaCorrelator.roc", "sdr.ReplicaCorrelator.threshold", "sdr.Resampler", "sdr.Resampler.__call__", "sdr.Resampler.__init__", "sdr.Resampler.__repr__", "sdr.Resampler.__str__", "sdr.Resampler.delay", "sdr.Resampler.down", "sdr.Resampler.method", "sdr.Resampler.polyphase_taps", "sdr.Resampler.rate", "sdr.Resampler.reset", "sdr.Resampler.taps", "sdr.Resampler.up", "sdr.albersheim", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.barker", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.db", "sdr.design_bandpass_fir", "sdr.design_bandstop_fir", "sdr.design_highpass_fir", "sdr.design_lowpass_fir", "sdr.design_multirate_fir", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.downsample", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.euclidean", "sdr.evm", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.half_sine", "sdr.hexdump", "sdr.iq_imbalance", "sdr.linear", "sdr.mix", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.percent", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.eye", "sdr.plot.filter", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.magnitude_response", "sdr.plot.p_d", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.phase_tree", "sdr.plot.raster", "sdr.plot.roc", "sdr.plot.ser", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.polyphase_decompose", "sdr.ppb", "sdr.ppm", "sdr.raised_cosine", "sdr.rectangular", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.to_complex_bb", "sdr.to_real_pb", "sdr.unpack", "sdr.upsample", "sdr.wavelength", "sdr.zadoff_chu", "Sequences", "Simulation", "Synchronization", "Documentation", "Formatting", "Installation", "Unit Tests", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274], "db": [0, 4, 5, 9, 20, 22, 40, 42, 44, 46, 47, 48, 50, 111, 121, 134, 144, 148, 152, 154, 156, 161, 163, 178, 179, 180, 181, 189, 190, 191, 192, 193, 194, 199, 200, 201, 202, 203, 205, 207, 208, 212, 213, 216, 217, 218, 219, 221, 222, 228, 235, 247, 250, 251, 268, 270, 271, 273], "x": [0, 1, 3, 5, 6, 7, 8, 9, 26, 27, 37, 39, 44, 46, 51, 52, 68, 69, 75, 77, 94, 96, 97, 107, 114, 116, 125, 128, 134, 144, 148, 156, 158, 159, 160, 165, 166, 179, 180, 183, 186, 188, 189, 195, 196, 197, 198, 201, 204, 205, 206, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 236, 238, 239, 243, 244, 247, 249, 254, 255, 259, 263, 268, 269, 270, 274], "arraylik": [0, 1, 2, 3, 4, 5, 6, 7, 8, 26, 27, 28, 37, 39, 40, 41, 42, 43, 44, 46, 51, 52, 53, 68, 72, 75, 76, 77, 78, 94, 96, 97, 98, 107, 108, 111, 113, 114, 115, 116, 121, 134, 135, 144, 145, 148, 149, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 178, 181, 183, 184, 186, 187, 189, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 205, 206, 207, 211, 213, 215, 217, 220, 224, 225, 226, 227, 228, 229, 230, 231, 234, 236, 237, 241, 242, 243, 244, 250, 251, 254, 256, 259], "ndarrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 26, 27, 33, 36, 37, 39, 40, 41, 42, 43, 44, 49, 51, 52, 58, 59, 60, 61, 64, 65, 67, 68, 69, 74, 75, 77, 81, 82, 83, 84, 86, 88, 90, 91, 93, 94, 96, 97, 103, 106, 107, 111, 113, 114, 115, 116, 119, 121, 123, 125, 128, 134, 136, 138, 143, 144, 148, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 232, 233, 235, 238, 239, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "float_": [0, 2, 3, 4, 5, 6, 7, 8, 39, 40, 41, 42, 43, 44, 49, 107, 111, 119, 121, 134, 138, 144, 148, 152, 154, 156, 158, 159, 160, 161, 162, 163, 164, 178, 181, 184, 187, 189, 190, 191, 192, 193, 194, 199, 200, 201, 202, 203, 207, 208, 210, 213, 217, 220, 221, 235, 243, 244, 245, 246, 248, 250, 251, 252, 253, 256], "convert": [0, 3, 107, 113, 115, 134, 144, 148, 156, 189, 199, 200, 202, 203, 211, 213, 220, 243, 244, 250, 251, 252, 253], "linear": [0, 96, 98, 102, 107, 108, 134, 144, 148, 156, 165, 167, 172, 180, 189, 213, 229, 234, 236, 238, 272, 273], "unit": [0, 26, 37, 51, 65, 75, 91, 94, 96, 125, 135, 136, 145, 149, 157, 165, 180, 181, 189, 195, 196, 213, 237, 239, 263, 266, 267, 269, 272, 273], "percent": [0, 220, 273], "percentag": [0, 220], "ppm": [0, 244, 249, 259, 273], "part": [0, 239, 243, 244, 249, 269], "per": [0, 1, 27, 52, 97, 107, 108, 112, 114, 116, 122, 134, 135, 138, 144, 145, 148, 149, 156, 157, 180, 181, 199, 200, 202, 203, 206, 208, 210, 211, 215, 222, 223, 232, 243, 244, 245, 246, 248, 249, 250, 251, 254, 262, 268, 271, 273], "million": [0, 244, 249], "ppb": [0, 243, 273], "billion": [0, 243], "ebn0_to_esn0": [0, 121, 154, 199, 270, 273], "ebn0": [0, 7, 107, 111, 134, 144, 148, 152, 156, 181, 199, 200, 221, 270], "bp": [0, 107, 112, 134, 144, 148, 156, 199, 200, 202, 250, 270], "int": [0, 1, 3, 6, 7, 26, 28, 31, 34, 37, 44, 46, 47, 50, 51, 54, 57, 59, 60, 61, 62, 65, 68, 71, 75, 83, 84, 86, 87, 91, 94, 96, 98, 101, 104, 107, 108, 112, 117, 122, 134, 135, 136, 143, 144, 145, 148, 149, 156, 157, 165, 167, 170, 171, 177, 179, 180, 182, 183, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 215, 216, 218, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 236, 237, 242, 245, 246, 248, 250, 251, 254, 255, 257, 258, 270], "ebn0_to_snr": [0, 134, 144, 148, 156, 200, 273], "esn0_to_ebn0": [0, 111, 152, 202, 273], "esn0": [0, 7, 107, 121, 134, 144, 148, 154, 156, 202, 203, 235, 270], "esn0_to_snr": [0, 203, 270, 273], "sp": [0, 6, 7, 107, 108, 114, 116, 122, 134, 135, 144, 145, 148, 149, 156, 157, 200, 203, 208, 210, 223, 232, 245, 246, 248, 250, 251, 252, 253, 268, 270, 271], "1": [0, 6, 8, 9, 16, 19, 23, 25, 26, 28, 29, 30, 33, 36, 37, 39, 40, 42, 43, 44, 51, 54, 55, 56, 57, 59, 60, 75, 76, 79, 80, 83, 84, 94, 96, 97, 98, 99, 100, 103, 106, 107, 108, 113, 114, 115, 116, 123, 125, 129, 130, 134, 135, 136, 139, 144, 145, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 274], "snr_to_ebn0": [0, 111, 152, 181, 250, 273], "snr": [0, 2, 4, 7, 39, 40, 42, 44, 46, 47, 48, 49, 50, 134, 144, 148, 156, 178, 180, 181, 228, 250, 251, 252, 253, 259, 270, 273], "snr_to_esn0": [0, 121, 154, 251, 273], "pack": [1, 44, 46, 134, 144, 148, 156, 211, 215, 272, 273], "bpe": [1, 215, 254], "int_": [1, 6, 107, 113, 114, 134, 144, 148, 156, 183, 185, 186, 195, 196, 197, 209, 215, 254, 259], "binari": [1, 4, 6, 135, 145, 149, 155, 157, 182, 183, 184, 185, 186, 187, 197, 215, 238, 254, 259, 270, 272, 273], "arrai": [1, 33, 36, 44, 98, 103, 106, 108, 134, 135, 136, 144, 145, 148, 149, 155, 156, 157, 167, 173, 176, 179, 182, 183, 185, 186, 195, 196, 197, 201, 204, 209, 215, 216, 218, 239, 242, 254, 267], "an": [1, 2, 3, 4, 26, 37, 39, 51, 61, 75, 76, 78, 86, 94, 95, 96, 97, 108, 135, 136, 145, 149, 152, 154, 157, 160, 165, 181, 215, 221, 226, 235, 254, 256, 263, 272, 273], "multipl": [1, 215, 254, 270, 273], "bit": [1, 5, 7, 44, 46, 49, 107, 111, 112, 134, 135, 144, 145, 148, 149, 152, 155, 156, 157, 181, 183, 184, 186, 187, 199, 200, 202, 211, 215, 221, 250, 254, 272, 273], "element": [1, 211, 215, 254], "unpack": [1, 44, 46, 211, 254, 270, 272, 273], "hexdump": [1, 44, 211, 272, 273], "byte": [1, 211], "width": [1, 211], "16": [1, 152, 154, 155, 169, 199, 200, 202, 211, 221, 235, 242, 245, 248, 250, 251, 268, 273], "str": [1, 26, 29, 30, 37, 51, 55, 56, 75, 79, 80, 94, 96, 99, 100, 107, 109, 110, 134, 144, 146, 147, 148, 150, 151, 156, 165, 168, 169, 211, 223, 229, 232, 233, 236], "return": [1, 6, 9, 17, 19, 22, 23, 26, 27, 29, 30, 37, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 65, 69, 75, 77, 79, 80, 83, 84, 86, 91, 94, 96, 97, 99, 100, 107, 109, 110, 111, 113, 114, 115, 116, 121, 128, 134, 138, 143, 144, 146, 147, 148, 150, 151, 152, 154, 156, 158, 159, 161, 162, 163, 164, 165, 168, 169, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 266, 267, 268, 270, 273], "specifi": [1, 44, 47, 48, 50, 180, 181, 197, 211, 261, 266, 267, 273], "class": [2, 3, 5, 6, 9, 26, 37, 39, 44, 46, 47, 48, 49, 50, 51, 68, 75, 94, 96, 107, 125, 134, 136, 144, 148, 156, 160, 165, 260, 266, 267, 270, 272, 273], "replicacorrel": [2, 160, 161, 162, 163, 164, 273], "implement": [2, 3, 6, 26, 37, 39, 51, 68, 75, 94, 96, 107, 125, 131, 134, 136, 144, 148, 156, 160, 165, 178, 260, 265], "clairvoy": [2, 160], "replica": [2, 160], "correl": [2, 160, 182, 257], "energydetector": [2, 39, 40, 41, 42, 43, 273], "energi": [2, 39, 111, 121, 152, 154, 160, 161, 162, 163, 164, 181, 199, 200, 201, 202, 203, 208, 210, 221, 235, 245, 246, 248, 250, 251, 272, 273], "albersheim": [2, 178, 273], "p_d": [2, 7, 39, 40, 42, 160, 161, 163, 178, 228, 234, 273], "p_fa": [2, 7, 39, 40, 41, 42, 43, 160, 161, 162, 163, 164, 178, 234], "estim": [2, 9, 107, 113, 114, 134, 144, 148, 156, 178, 229, 236, 269], "minimum": [2, 6, 134, 178, 273], "requir": [2, 27, 52, 97, 178, 261, 262, 263, 264, 273], "singl": [2, 42, 152, 154, 178], "sampl": [2, 3, 9, 16, 24, 26, 27, 31, 37, 40, 41, 42, 43, 51, 52, 57, 59, 60, 61, 65, 68, 72, 83, 84, 86, 91, 96, 97, 98, 101, 107, 108, 114, 116, 122, 125, 129, 132, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 148, 149, 156, 157, 165, 167, 170, 178, 180, 198, 200, 203, 206, 208, 210, 214, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 236, 237, 239, 245, 246, 248, 249, 250, 251, 252, 253, 255, 259, 265, 268, 269, 271, 272, 273], "given": [2, 39, 44, 46, 47, 48, 50, 68, 69, 160, 178, 205, 266, 267], "n_": [2, 40, 41, 42, 43, 178], "nc": [2, 40, 41, 42, 43, 178], "non": [2, 27, 40, 41, 42, 43, 52, 97, 178, 210, 246], "coher": [2, 40, 41, 42, 43, 178], "combin": [2, 178], "achiev": [2, 178, 270, 271], "probabl": [2, 7, 39, 40, 41, 42, 43, 158, 159, 160, 161, 162, 163, 164, 178, 183, 184, 186, 187, 197, 228, 234, 259, 273], "fals": [2, 5, 26, 28, 29, 30, 37, 38, 39, 40, 41, 42, 43, 51, 53, 55, 56, 68, 70, 75, 76, 78, 79, 80, 94, 95, 96, 97, 98, 99, 100, 134, 144, 148, 152, 154, 156, 160, 161, 162, 163, 164, 165, 167, 168, 169, 178, 179, 183, 186, 197, 201, 214, 218, 219, 222, 229, 234, 236, 239, 247, 267, 271], "alarm": [2, 39, 40, 41, 42, 43, 160, 161, 162, 163, 164, 178, 234], "p_": [2, 7, 39, 40, 41, 42, 43, 152, 154, 160, 161, 162, 163, 164, 178, 179, 180, 189, 197, 205, 213, 216, 218, 221, 229, 234, 235], "fa": [2, 7, 39, 40, 41, 42, 43, 160, 161, 162, 163, 164, 178, 234], "thi": [2, 9, 26, 46, 47, 48, 50, 51, 75, 96, 98, 107, 108, 123, 134, 138, 144, 145, 148, 149, 155, 156, 157, 165, 167, 178, 180, 181, 183, 186, 197, 198, 205, 207, 223, 227, 229, 233, 236, 239, 255, 261, 263, 264, 265, 267, 269, 270, 271], "function": [2, 7, 8, 9, 18, 37, 51, 75, 76, 94, 125, 158, 159, 178, 181, 198, 208, 221, 228, 229, 234, 235, 236, 255, 266, 267, 269, 271, 272, 273], "": [2, 3, 7, 9, 17, 19, 20, 21, 23, 24, 26, 37, 39, 46, 47, 48, 49, 50, 51, 59, 60, 65, 75, 83, 84, 91, 94, 96, 107, 108, 113, 114, 115, 116, 134, 144, 148, 156, 160, 162, 164, 165, 178, 180, 181, 200, 203, 205, 206, 212, 222, 223, 224, 225, 227, 229, 230, 231, 232, 233, 236, 237, 239, 240, 249, 250, 251, 252, 253, 264, 265, 268, 270, 272, 273], "equat": [2, 17, 19, 20, 21, 22, 23, 40, 41, 43, 75, 144, 148, 156, 161, 162, 164, 178, 207], "finit": [3, 51, 272, 273], "impuls": [3, 7, 26, 37, 51, 61, 75, 86, 94, 96, 165, 190, 191, 192, 193, 194, 208, 224, 226, 239, 271, 272, 273], "respons": [3, 7, 26, 37, 51, 59, 60, 61, 65, 75, 83, 84, 86, 91, 94, 96, 165, 190, 191, 192, 193, 194, 208, 224, 225, 226, 227, 231, 237, 271, 272, 273], "differenti": [3, 6, 37, 38, 134, 152, 154, 195, 196, 239, 272, 273], "design_lowpass_fir": [3, 193], "order": [3, 9, 26, 27, 30, 37, 44, 49, 51, 52, 56, 62, 68, 71, 75, 80, 87, 94, 96, 97, 98, 100, 107, 108, 117, 125, 129, 134, 144, 148, 149, 156, 157, 165, 167, 169, 180, 190, 191, 192, 193, 199, 200, 202, 205, 206, 208, 222, 223, 232, 233, 245, 248, 249, 250, 260, 267, 268, 269, 270, 273], "design": [3, 26, 28, 32, 96, 98, 102, 108, 145, 149, 157, 165, 167, 172, 190, 191, 192, 193, 194, 261, 272, 273], "lowpass": [3, 193], "h": [3, 7, 26, 37, 39, 51, 53, 55, 56, 59, 60, 61, 75, 83, 84, 86, 94, 96, 107, 108, 119, 120, 124, 125, 134, 144, 145, 148, 149, 156, 157, 160, 165, 190, 191, 192, 193, 194, 208, 223, 224, 226, 227, 231, 242, 268, 269, 271], "n": [3, 5, 6, 7, 8, 9, 26, 27, 37, 39, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 69, 75, 77, 78, 81, 83, 84, 86, 87, 91, 94, 96, 97, 107, 108, 114, 116, 119, 120, 124, 125, 128, 134, 136, 138, 143, 144, 145, 148, 149, 156, 157, 158, 159, 160, 162, 164, 165, 166, 179, 180, 181, 182, 185, 188, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 212, 214, 216, 218, 219, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 236, 237, 239, 247, 249, 250, 251, 252, 253, 255, 257, 258, 259, 269, 271, 272], "us": [3, 7, 26, 28, 32, 35, 37, 38, 51, 53, 58, 63, 68, 70, 75, 76, 78, 89, 94, 95, 96, 97, 98, 102, 105, 107, 108, 113, 114, 125, 131, 134, 144, 145, 148, 149, 156, 157, 165, 167, 172, 175, 181, 184, 187, 190, 191, 192, 193, 194, 205, 211, 215, 222, 223, 224, 226, 228, 229, 236, 237, 254, 261, 262, 263, 264, 266, 267, 270, 271, 272, 274], "window": [3, 26, 96, 165, 190, 191, 192, 193, 194, 229, 236], "method": [3, 7, 30, 32, 98, 100, 102, 167, 169, 172, 190, 191, 192, 193, 194, 229, 236, 266, 267, 273], "design_highpass_fir": [3, 192], "highpass": [3, 192], "design_bandpass_fir": [3, 190], "bandpass": [3, 190], "design_bandstop_fir": [3, 191], "bandstop": [3, 191], "infinit": [3, 75, 272, 273], "integr": [3, 9, 14, 40, 41, 42, 43, 94, 95, 125, 127, 129, 178, 260, 264, 267, 272, 273], "interpol": [3, 26, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 124, 134, 144, 148, 156, 165, 167, 177, 194, 223, 255, 268, 270, 272, 273], "polyphas": [3, 26, 27, 28, 33, 36, 96, 97, 98, 103, 106, 165, 166, 167, 173, 176, 194, 198, 242, 255, 272, 273], "decim": [3, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 107, 108, 113, 114, 115, 116, 120, 123, 134, 135, 144, 145, 148, 149, 155, 156, 157, 165, 167, 171, 194, 198, 270, 272, 273], "ration": [3, 165, 167, 194, 273], "design_multirate_fir": [3, 28, 98, 167, 194], "up": [3, 165, 167, 177, 194, 207, 262], "kaiser": [3, 26, 28, 29, 30, 32, 96, 97, 98, 99, 100, 102, 165, 167, 168, 169, 172, 190, 191, 192, 193, 194], "polyphase_decompos": [3, 242], "tap": [3, 26, 28, 33, 36, 37, 51, 56, 67, 68, 74, 75, 81, 82, 94, 96, 98, 103, 106, 165, 167, 173, 176, 242, 266, 267], "phase": [3, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 107, 108, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 152, 153, 154, 155, 156, 157, 178, 206, 212, 214, 230, 231, 232, 242, 259, 272, 273], "decompos": [3, 26, 96, 165, 242], "h_i": [3, 26, 28, 33, 36, 37, 51, 53, 67, 96, 98, 103, 106, 165, 167, 173, 176, 242, 266], "matrix": [3, 197, 242, 259], "h_": [3, 9, 26, 33, 36, 96, 103, 106, 165, 173, 176, 242, 269], "i": [3, 9, 16, 25, 26, 27, 28, 33, 36, 37, 39, 41, 42, 43, 44, 49, 51, 52, 53, 61, 65, 66, 67, 68, 73, 75, 78, 82, 86, 91, 92, 94, 96, 97, 98, 103, 106, 108, 125, 129, 130, 132, 134, 138, 142, 144, 145, 148, 149, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 173, 176, 178, 179, 180, 181, 183, 184, 186, 187, 189, 190, 191, 192, 193, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 222, 223, 224, 226, 227, 229, 233, 236, 237, 239, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274], "j": [3, 26, 33, 36, 75, 78, 81, 94, 96, 103, 106, 134, 136, 144, 148, 156, 165, 173, 176, 180, 197, 212, 214, 242, 257, 266, 267, 269], "b": [3, 75, 78, 178, 181, 208, 211, 224, 226, 237, 242, 261, 262, 271], "farrowresampl": [3, 68, 69, 70, 71, 72, 73, 74, 265, 273], "cubic": [3, 68], "farrow": [3, 68, 69, 70, 71, 72, 73, 74, 272, 273], "mix": [3, 214, 272, 273], "freq": [3, 4, 136, 138, 206, 207, 214, 217, 256, 259, 265, 269], "float": [3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 42, 44, 46, 47, 48, 50, 59, 60, 68, 69, 75, 76, 83, 84, 85, 94, 107, 108, 118, 125, 126, 127, 129, 130, 132, 134, 135, 136, 137, 139, 140, 141, 144, 145, 148, 149, 153, 156, 157, 163, 165, 174, 179, 180, 181, 183, 186, 188, 190, 191, 192, 193, 194, 205, 206, 208, 212, 214, 216, 218, 219, 222, 223, 224, 225, 227, 229, 230, 231, 232, 233, 236, 238, 239, 245, 247, 248, 249, 259], "0": [3, 6, 8, 16, 26, 27, 33, 36, 37, 39, 42, 44, 51, 52, 53, 55, 56, 59, 60, 67, 75, 76, 78, 79, 80, 81, 82, 83, 84, 94, 96, 97, 98, 103, 106, 107, 108, 113, 114, 115, 116, 123, 129, 134, 135, 136, 139, 144, 145, 148, 149, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 195, 196, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 217, 220, 222, 223, 224, 225, 226, 227, 230, 231, 232, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 274], "time": [3, 5, 9, 16, 17, 19, 20, 21, 22, 23, 37, 51, 75, 94, 125, 129, 144, 148, 156, 179, 180, 188, 190, 191, 192, 193, 197, 198, 201, 203, 204, 206, 208, 212, 214, 216, 218, 219, 223, 224, 229, 233, 236, 239, 245, 247, 248, 249, 251, 252, 253, 255, 259, 265, 266, 267, 271, 272, 273], "domain": [3, 5, 179, 180, 188, 190, 191, 192, 193, 198, 201, 204, 206, 212, 214, 216, 218, 219, 224, 229, 233, 236, 239, 247, 249, 252, 253, 255, 259, 272, 273], "complex": [3, 5, 7, 39, 40, 41, 42, 43, 107, 108, 113, 114, 115, 116, 123, 134, 135, 136, 138, 143, 144, 145, 148, 149, 155, 156, 157, 160, 161, 162, 163, 164, 180, 181, 198, 205, 212, 214, 222, 223, 233, 238, 239, 252, 253, 255, 259, 265, 266, 267, 269, 270, 272, 273], "exponenti": [3, 198, 214, 252, 253, 255, 265, 266, 267], "real": [3, 40, 41, 43, 134, 144, 158, 159, 161, 162, 164, 180, 214, 223, 233, 239, 252, 253, 265, 266, 267, 269, 272, 273], "sinusoid": [3, 148, 180, 214, 252, 253, 267, 273], "to_complex_bb": [3, 252, 273], "x_r": [3, 252, 253], "complex_": [3, 7, 107, 114, 115, 116, 123, 134, 136, 138, 143, 144, 148, 155, 156, 222, 238, 252, 253, 257, 258], "passband": [3, 190, 191, 192, 193, 208, 210, 245, 246, 248, 252, 253, 268, 273], "center": [3, 190, 191, 192, 193, 210, 239, 246, 252, 253, 273], "f_": [3, 9, 16, 24, 27, 59, 60, 83, 84, 97, 107, 108, 122, 134, 135, 144, 145, 148, 149, 156, 157, 190, 191, 192, 193, 198, 200, 203, 206, 208, 214, 223, 224, 225, 227, 229, 230, 231, 232, 233, 236, 239, 249, 250, 251, 252, 253, 255, 265, 266, 267, 269, 271], "r": [3, 26, 27, 28, 33, 34, 36, 68, 69, 96, 97, 98, 103, 104, 106, 181, 198, 199, 200, 202, 205, 208, 214, 245, 248, 250, 252, 253, 255, 261, 262, 263, 264, 267, 268, 269, 271], "4": [3, 7, 17, 19, 26, 33, 36, 37, 40, 42, 44, 60, 79, 80, 84, 94, 96, 97, 103, 106, 134, 135, 136, 144, 145, 148, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 168, 169, 173, 176, 178, 180, 181, 182, 184, 185, 187, 190, 191, 192, 193, 194, 197, 198, 199, 200, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 217, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 235, 237, 238, 239, 240, 241, 242, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 257, 263, 265, 267, 268, 270], "rate": [3, 5, 7, 9, 16, 24, 26, 27, 28, 30, 34, 44, 45, 46, 48, 49, 59, 60, 68, 69, 83, 84, 96, 97, 98, 100, 104, 107, 111, 121, 134, 144, 148, 152, 154, 156, 165, 166, 167, 169, 171, 174, 177, 194, 198, 199, 200, 202, 206, 214, 221, 223, 224, 225, 227, 229, 230, 231, 232, 233, 235, 236, 239, 249, 250, 252, 253, 255, 259, 272, 273], "baseband": [3, 7, 9, 134, 144, 148, 156, 214, 223, 232, 252, 253, 268, 269, 273], "x_c": [3, 252, 253], "c": [3, 9, 17, 19, 20, 21, 22, 23, 46, 47, 48, 49, 50, 107, 108, 123, 125, 134, 144, 148, 155, 156, 181, 184, 187, 207, 217, 238, 252, 253, 256, 269], "2": [3, 6, 7, 9, 17, 19, 22, 26, 29, 30, 33, 36, 37, 39, 40, 41, 42, 43, 44, 51, 55, 56, 57, 59, 60, 79, 80, 83, 84, 94, 96, 97, 99, 100, 103, 106, 107, 108, 117, 134, 136, 144, 145, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 261, 264, 265, 266, 267, 268, 269, 270, 271], "to_real_pb": [3, 253, 268, 273], "2f_": [3, 253], "upsampl": [3, 96, 165, 255, 273], "factor": [3, 5, 9, 16, 25, 108, 125, 129, 130, 145, 149, 157, 188, 198, 255, 269], "downsampl": [3, 198, 273], "bsc_capac": [4, 187, 273], "p": [4, 8, 136, 138, 158, 159, 165, 167, 173, 174, 176, 177, 183, 184, 186, 187, 194, 197, 259], "calcul": [4, 5, 181, 184, 187, 205, 207, 217, 256, 273], "symmetr": [4, 186, 187, 197, 252, 253, 259, 272], "bsc": [4, 186, 187, 197, 259, 272, 273], "bec_capac": [4, 184, 273], "erasur": [4, 183, 184, 197, 259, 272], "bec": [4, 183, 184, 197, 259, 272, 273], "awgn_capac": [4, 181, 273], "addit": [4, 180, 181, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 255, 259, 272], "white": [4, 180, 181, 259, 272], "gaussian": [4, 6, 37, 94, 180, 181, 208, 259, 272, 273], "nois": [4, 9, 10, 11, 16, 22, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 111, 121, 125, 129, 132, 134, 144, 148, 152, 154, 156, 160, 161, 162, 163, 164, 180, 181, 199, 200, 202, 203, 221, 235, 250, 251, 259, 269, 272], "awgn": [4, 134, 144, 148, 152, 154, 156, 180, 181, 205, 221, 222, 235, 252, 253, 259, 270, 272, 273], "fspl": [4, 207], "distanc": [4, 204, 207], "free": [4, 134, 144, 148, 156, 207, 272], "space": [4, 60, 84, 207, 272], "wavelength": [4, 256, 273], "lambda": [4, 207, 256], "electromagnet": [4, 256], "wave": [4, 134, 256], "frequenc": [4, 9, 17, 19, 21, 26, 37, 51, 59, 60, 75, 83, 84, 94, 96, 125, 134, 136, 138, 165, 190, 191, 192, 193, 198, 206, 207, 214, 217, 224, 225, 227, 229, 230, 231, 236, 252, 253, 255, 256, 259, 271, 272, 273], "f": [4, 17, 19, 26, 42, 59, 60, 83, 84, 96, 136, 138, 165, 178, 180, 206, 207, 208, 214, 217, 249, 256, 257, 262, 265, 266, 267, 268, 269, 270, 271], "parabolic_antenna": [4, 217, 273], "tupl": [4, 26, 37, 39, 42, 44, 46, 49, 51, 59, 60, 75, 83, 84, 94, 96, 107, 114, 134, 144, 148, 156, 160, 163, 165, 179, 201, 204, 216, 217, 218, 222, 224, 225, 226, 227, 230, 231, 237, 238, 241], "gain": [4, 9, 12, 13, 14, 15, 16, 75, 76, 85, 94, 125, 126, 127, 129, 136, 137, 139, 178, 190, 191, 192, 193, 207, 208, 210, 217, 245, 246, 248, 269, 272], "g": [4, 49, 217, 263], "beamwidth": [4, 217], "theta": [4, 136, 139, 141, 142, 217], "parabol": [4, 217], "reflector": [4, 217], "signal": [5, 7, 9, 17, 19, 22, 23, 26, 27, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 58, 68, 69, 75, 77, 94, 96, 97, 107, 108, 119, 125, 128, 134, 136, 138, 143, 144, 145, 148, 149, 156, 157, 160, 161, 162, 163, 164, 165, 166, 179, 180, 181, 188, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 212, 213, 214, 216, 217, 218, 219, 223, 224, 225, 227, 229, 230, 231, 232, 233, 236, 239, 242, 247, 249, 250, 251, 252, 253, 255, 256, 266, 267, 269, 271, 272, 273], "peak_pow": [5, 216, 218, 273], "peak": [5, 134, 144, 156, 188, 205, 216, 218, 219], "average_pow": [5, 179, 216, 273], "averag": [5, 44, 134, 144, 156, 179, 180, 181, 205, 216, 229], "papr": [5, 134, 144, 156, 216, 268, 273], "ratio": [5, 22, 40, 42, 44, 46, 47, 48, 49, 50, 111, 121, 134, 144, 152, 154, 156, 161, 163, 180, 181, 199, 200, 202, 203, 216, 220, 221, 235, 243, 244, 250, 251], "peak_voltag": [5, 188, 219, 273], "bool": [5, 26, 28, 37, 38, 40, 41, 42, 43, 51, 53, 66, 68, 70, 73, 75, 76, 78, 92, 94, 95, 96, 98, 134, 144, 148, 152, 154, 156, 161, 162, 163, 164, 165, 167, 179, 201, 214, 218, 219, 222, 231, 233, 238, 239, 247], "rms_voltag": [5, 188, 247, 273], "root": [5, 6, 108, 145, 149, 157, 205, 223, 239, 247, 248, 257, 258, 266, 272], "mean": [5, 205, 229, 236, 247, 271], "squar": [5, 6, 108, 145, 149, 157, 205, 207, 217, 239, 247, 248, 266], "rm": [5, 188, 205, 247], "crest_factor": [5, 188, 216, 273], "crest": [5, 188], "euclidean": [5, 204], "y": [5, 6, 26, 27, 37, 51, 52, 58, 69, 75, 77, 94, 96, 97, 125, 128, 136, 138, 143, 165, 180, 183, 186, 195, 196, 197, 198, 204, 206, 212, 214, 222, 227, 229, 236, 238, 239, 249, 255, 269, 270], "between": [5, 26, 28, 38, 53, 66, 70, 73, 76, 78, 92, 95, 96, 98, 165, 167, 204, 207, 229, 233, 236, 269, 272], "two": [5, 190, 191, 204, 223, 224, 225, 227, 229, 230, 231, 236, 257, 265, 266, 267], "errorr": [5, 44, 45, 46, 47, 48, 49, 50, 270, 273], "A": [5, 9, 17, 19, 20, 21, 22, 23, 25, 27, 37, 44, 51, 52, 94, 97, 108, 125, 145, 149, 157, 178, 185, 190, 191, 192, 193, 209, 211, 212, 217, 245, 248, 260, 262, 269], "error": [5, 7, 9, 15, 16, 22, 44, 45, 46, 48, 49, 50, 107, 111, 121, 125, 129, 134, 144, 148, 152, 154, 156, 178, 187, 205, 221, 235, 269, 272, 273], "ber": [5, 7, 44, 107, 111, 134, 144, 148, 152, 156, 221, 270, 272, 273], "symbol": [5, 7, 44, 46, 49, 96, 107, 108, 112, 113, 114, 115, 116, 121, 122, 123, 134, 135, 144, 145, 148, 149, 152, 154, 155, 156, 157, 180, 199, 200, 202, 203, 205, 206, 208, 210, 222, 223, 232, 235, 238, 245, 246, 248, 250, 251, 268, 271, 272, 273], "ser": [5, 7, 44, 107, 121, 134, 144, 148, 154, 156, 235, 270, 272, 273], "evm": [5, 205, 272, 273], "x_hat": [5, 7, 44, 46, 107, 114, 134, 144, 148, 156, 205, 222, 270], "ref": [5, 178, 190, 191, 192, 193, 194, 205, 208], "vector": [5, 44, 72, 190, 191, 192, 193, 205, 229, 236, 272, 273], "magnitud": [5, 7, 182, 205, 224, 227, 257, 272, 273], "hat": [5, 7, 46, 107, 113, 114, 134, 144, 148, 156, 205, 222, 238], "k": [5, 6, 7, 46, 107, 108, 112, 113, 114, 115, 116, 117, 134, 144, 148, 149, 156, 157, 195, 196, 199, 200, 202, 205, 222, 238, 250, 268, 271], "linearmodul": [6, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 148, 238, 273], "amplitud": [6, 107, 108, 212, 259, 265, 269], "arbitrari": [6, 68, 69, 70, 71, 72, 73, 74, 107, 272, 273], "psk": [6, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 180, 205, 206, 212, 221, 222, 223, 235, 238, 249, 268, 272, 273], "shift": [6, 134, 144, 148, 152, 153, 154, 155, 156, 257, 266, 267, 272, 273], "kei": [6, 134, 144, 148, 152, 153, 154, 155, 156, 272, 273], "demodul": [6, 107, 114, 134, 144, 148, 156, 270, 273], "pimpsk": [6, 156, 157, 273], "pi": [6, 26, 79, 80, 96, 97, 136, 144, 148, 156, 157, 165, 180, 198, 207, 208, 212, 214, 217, 224, 225, 226, 227, 230, 231, 237, 239, 241, 252, 253, 255, 257, 265, 266, 267, 269, 272, 273], "m": [6, 75, 78, 82, 94, 107, 108, 112, 113, 114, 115, 116, 117, 123, 134, 144, 148, 149, 155, 156, 157, 197, 199, 200, 202, 207, 238, 250, 261, 262, 263, 264, 272, 273], "oqpsk": [6, 134, 144, 145, 146, 147, 273], "offset": [6, 17, 19, 26, 37, 96, 97, 107, 108, 118, 134, 135, 136, 138, 139, 141, 144, 145, 148, 149, 153, 156, 157, 165, 206, 214, 239, 249, 259, 269, 272, 273], "quadratur": [6, 134, 144, 212], "msk": [6, 134, 135, 232, 273], "rectangular": [6, 108, 145, 149, 157, 246, 268, 271, 272, 273], "span": [6, 7, 108, 145, 149, 157, 208, 210, 223, 232, 245, 246, 248, 268, 271], "half_sin": [6, 135, 210, 273], "half": [6, 134, 144, 194, 210, 217, 272, 273], "sine": [6, 134, 210, 272, 273], "time_bandwidth": [6, 208], "raised_cosin": [6, 108, 145, 149, 157, 223, 245, 271, 273], "alpha": [6, 108, 145, 149, 157, 208, 240, 245, 248, 268, 271], "rais": [6, 37, 94, 108, 145, 149, 157, 223, 239, 245, 248, 266, 272], "cosin": [6, 37, 94, 108, 145, 149, 157, 223, 239, 245, 248, 266, 272], "rc": [6, 108, 145, 149, 157, 245], "root_raised_cosin": [6, 37, 55, 56, 94, 108, 145, 149, 157, 223, 224, 225, 226, 227, 230, 231, 237, 239, 241, 248, 266, 268, 270, 271, 273], "srrc": [6, 108, 144, 145, 148, 149, 156, 157, 223, 239, 248, 268], "binary_cod": [6, 185, 273], "gener": [6, 134, 144, 148, 156, 180, 183, 185, 186, 197, 209, 234, 261, 270, 273], "code": [6, 26, 29, 37, 51, 55, 75, 79, 94, 96, 99, 107, 109, 134, 135, 144, 145, 146, 148, 149, 150, 155, 156, 157, 165, 168, 182, 185, 199, 200, 202, 209, 222, 238, 250, 258, 263, 270, 273], "length": [6, 7, 26, 27, 37, 42, 51, 52, 54, 61, 65, 77, 96, 97, 98, 108, 114, 116, 135, 145, 149, 157, 165, 167, 182, 185, 190, 191, 192, 193, 194, 208, 209, 210, 224, 226, 229, 233, 236, 237, 245, 246, 248, 252, 257, 258, 262, 265, 268, 271], "gray_cod": [6, 209, 273], "grai": [6, 134, 135, 144, 145, 148, 149, 155, 156, 157, 209, 222, 238, 270, 272], "diff_encod": [6, 134, 144, 148, 152, 154, 156, 195, 196, 273], "y_prev": [6, 195, 196], "input": [6, 9, 17, 19, 22, 23, 26, 27, 28, 31, 37, 38, 51, 52, 53, 61, 64, 65, 68, 69, 70, 72, 75, 76, 77, 78, 86, 91, 94, 95, 96, 97, 98, 101, 125, 128, 136, 138, 144, 148, 152, 154, 156, 158, 165, 166, 167, 170, 180, 181, 183, 184, 186, 187, 189, 195, 196, 197, 198, 213, 215, 220, 226, 237, 243, 244, 254, 255, 259, 266, 267, 269], "data": [6, 195, 196, 211, 215, 254, 272], "diff_decod": [6, 195, 196, 273], "decod": [6, 195], "use_styl": [7, 240], "appli": [7, 26, 96, 108, 165, 206, 212, 222, 223, 229, 236, 238, 239, 240, 249, 259], "default": [7, 61, 65, 135, 145, 149, 155, 157, 179, 201, 204, 216, 218, 222, 227, 229, 233, 236, 238, 240, 270], "matplotlib": [7, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 265, 266, 267, 268, 269, 270, 271, 272], "rcparam": [7, 240], "time_domain": [7, 26, 37, 94, 96, 97, 134, 136, 144, 148, 156, 165, 180, 198, 214, 239, 252, 253, 255, 268, 270, 271, 273], "raster": [7, 223, 232, 233, 272, 273], "none": [7, 26, 37, 42, 51, 61, 65, 68, 72, 96, 108, 125, 133, 138, 145, 149, 157, 163, 165, 179, 180, 181, 183, 186, 190, 191, 192, 193, 197, 201, 204, 215, 216, 218, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 236, 237, 238, 239, 254, 259, 265, 268, 270], "periodogram": [7, 198, 229, 252, 253, 255, 268, 272, 273], "power": [7, 134, 144, 148, 156, 179, 180, 181, 189, 205, 208, 210, 213, 216, 217, 218, 229, 245, 246, 248, 271, 272], "densiti": [7, 22, 229, 268, 271], "xx": [7, 229], "welch": [7, 229, 236], "spectrogram": [7, 236, 272, 273], "constel": [7, 134, 144, 148, 153, 156, 180, 205, 206, 212, 222, 249, 257, 272, 273], "symbol_map": [7, 107, 108, 123, 134, 144, 148, 153, 155, 156, 205, 238, 239, 270, 273], "map": [7, 107, 108, 115, 123, 134, 144, 148, 155, 156, 205, 238, 272, 273], "ey": [7, 134, 144, 148, 156, 223, 272, 273], "diagram": [7, 9, 26, 37, 94, 96, 125, 136, 165, 195, 196, 223, 272, 273], "phase_tre": [7, 134, 232, 273], "tree": [7, 232, 273], "continu": [7, 134, 232, 265, 273], "cpm": [7, 232, 273], "kwarg": [7, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241], "e_b": [7, 46, 47, 48, 49, 50, 107, 111, 134, 144, 148, 152, 156, 181, 199, 200, 202, 221, 250, 272], "n_0": [7, 22, 46, 47, 48, 49, 50, 107, 111, 121, 134, 144, 148, 152, 154, 156, 180, 181, 199, 200, 202, 203, 205, 221, 222, 235, 250, 251, 270, 272], "e_": [7, 46, 47, 48, 49, 50, 107, 121, 134, 144, 148, 154, 156, 180, 181, 199, 202, 203, 205, 222, 235, 251, 270, 272], "roc": [7, 39, 42, 160, 163, 234, 273], "receiv": [7, 39, 40, 42, 44, 46, 107, 113, 114, 120, 134, 144, 148, 152, 154, 156, 160, 161, 162, 163, 164, 205, 207, 223, 228, 234, 273], "oper": [7, 39, 42, 160, 163, 234, 273], "characterist": [7, 39, 42, 160, 163, 234, 273], "curv": [7, 39, 42, 152, 154, 160, 163, 221, 234, 235, 273], "enr": [7, 160, 161, 163, 228], "impulse_respons": [7, 26, 37, 51, 61, 75, 86, 94, 96, 165, 190, 191, 192, 193, 194, 208, 210, 226, 245, 246, 248, 266, 267, 271, 273], "step_respons": [7, 26, 37, 51, 65, 75, 91, 94, 96, 165, 237, 266, 267, 269, 273], "step": [7, 26, 37, 51, 65, 75, 91, 94, 96, 136, 138, 143, 165, 224, 237, 272], "zeros_pol": [7, 241, 267, 273], "zero": [7, 26, 27, 37, 51, 58, 72, 75, 76, 79, 80, 93, 94, 96, 97, 98, 125, 138, 165, 167, 210, 215, 224, 225, 226, 227, 230, 231, 237, 239, 241, 246, 252, 266, 268, 269, 271, 272, 273], "pole": [7, 75, 76, 79, 80, 88, 94, 224, 225, 226, 227, 230, 231, 237, 241, 266, 272], "magnitude_respons": [7, 37, 59, 60, 83, 84, 94, 190, 191, 192, 193, 194, 210, 227, 245, 246, 248, 266, 267, 269, 271, 273], "omega": [7, 26, 37, 51, 59, 60, 75, 83, 84, 94, 96, 136, 139, 140, 142, 165, 224, 225, 227, 230, 231, 269], "phase_respons": [7, 59, 60, 83, 84, 231, 273], "angl": [7, 231, 269], "phase_delai": [7, 230, 273], "delai": [7, 26, 27, 30, 31, 37, 51, 52, 56, 57, 68, 96, 97, 100, 101, 125, 136, 165, 169, 170, 195, 196, 210, 225, 230, 246, 269, 272], "tau_": [7, 230], "phi": [7, 107, 108, 118, 134, 135, 144, 145, 148, 149, 153, 156, 157, 206, 212, 214, 230], "group_delai": [7, 225, 266, 267, 273], "group": [7, 225, 272], "tau_g": [7, 225], "iir": [7, 9, 18, 60, 61, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 125, 131, 224, 225, 226, 227, 230, 231, 237, 241, 266, 269, 272, 273], "q": [8, 134, 144, 158, 159, 160, 161, 162, 164, 165, 167, 171, 174, 194, 257, 273], "comput": [8, 26, 39, 40, 41, 42, 43, 107, 111, 121, 134, 144, 148, 152, 154, 156, 158, 159, 160, 161, 162, 163, 164, 179, 180, 201, 204, 207, 216, 218, 266, 267, 269, 271, 273], "complementari": [8, 158, 159], "cumul": [8, 158, 159], "distribut": [8, 158, 159], "standard": [8, 158, 159], "normal": [8, 9, 11, 16, 125, 129, 132, 158, 159, 190, 191, 192, 193, 205, 208, 210, 224, 225, 227, 229, 230, 231, 236, 245, 246, 248, 269, 271], "mathcal": [8, 39, 158, 159, 160, 161, 162, 163, 164, 180, 197], "qinv": [8, 158, 159, 273], "invers": [8, 159], "closedlooppl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 260, 269, 273], "defin": [9, 51, 75, 180, 197, 208, 234, 257, 260, 267, 272], "perform": [9, 27, 52, 97, 152, 154, 198, 255, 257, 260, 266, 267, 270, 272, 273], "close": [9, 16, 18, 260, 272, 273], "loop": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 260, 272, 273], "pll": [9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 260, 272, 273], "meant": 9, "analysi": [9, 16, 262, 269, 272, 273], "onli": [9, 27, 35, 52, 58, 63, 68, 72, 89, 97, 105, 108, 135, 145, 149, 155, 157, 175, 180, 190, 191, 192, 193, 207, 210, 233, 246, 264, 269, 270], "block": [9, 26, 37, 94, 96, 125, 136, 165, 195, 196], "bb": [9, 268, 269], "phase_err": 9, "ped": [9, 15, 16, 129, 269], "lf": [9, 269], "phase_est": 9, "lo": [9, 269], "nco": [9, 12, 16, 129, 136, 137, 138, 139, 140, 141, 142, 143, 260, 269, 272, 273], "local": [9, 261, 269], "oscil": [9, 136, 139, 260, 269, 272, 273], "detector": [9, 15, 16, 39, 129, 160, 269, 273], "filter": [9, 13, 14, 16, 18, 26, 27, 28, 31, 32, 33, 35, 36, 37, 38, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 105, 106, 107, 114, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 144, 148, 156, 165, 166, 167, 170, 172, 173, 175, 176, 190, 191, 192, 193, 194, 198, 208, 210, 223, 224, 225, 226, 227, 230, 231, 237, 239, 241, 242, 245, 246, 248, 255, 260, 271, 272, 273], "numer": [9, 136, 139, 260, 267, 269, 272, 273], "control": [9, 136, 139, 245, 248, 260, 269, 272, 273], "The": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 94, 96, 97, 98, 101, 102, 103, 104, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 264, 266, 267, 269, 270, 271, 272, 274], "transfer": [9, 18, 37, 51, 75, 76, 94, 125, 208, 266, 267, 269], "2nd": [9, 125, 129, 260, 269, 273], "proport": [9, 13, 27, 97, 125, 126, 129, 207, 217, 260, 273], "plu": [9, 125, 129, 260, 273], "z": [9, 37, 51, 75, 94, 125, 136, 195, 196, 257, 266, 267, 269], "k_1": [9, 13, 125, 126, 269], "k_2": [9, 14, 125, 127, 269], "frac": [9, 17, 19, 22, 23, 37, 39, 40, 41, 43, 51, 57, 75, 94, 98, 125, 144, 148, 156, 160, 161, 162, 167, 178, 179, 180, 181, 188, 199, 200, 202, 203, 205, 207, 208, 212, 213, 214, 216, 217, 247, 250, 251, 256, 257, 269], "k_0": [9, 12, 16, 129, 136, 137, 139, 269], "k_p": [9, 15, 16, 129, 269], "refer": [9, 17, 19, 20, 21, 22, 23, 39, 40, 41, 43, 44, 68, 125, 152, 154, 160, 161, 162, 164, 178, 180, 188, 190, 191, 192, 193, 194, 205, 206, 208, 216, 242, 245, 248, 249, 257, 267, 271, 272], "michael": [9, 17, 19, 20, 21, 22, 23, 125, 245, 248], "rice": [9, 17, 19, 20, 21, 22, 23, 125, 245, 248], "digit": [9, 17, 19, 20, 21, 22, 23, 125, 152, 154, 245, 248, 269, 272, 273], "commun": [9, 17, 19, 20, 21, 22, 23, 125, 152, 154, 194, 242, 245, 248, 269, 272], "discret": [9, 17, 19, 20, 21, 22, 23, 37, 94, 125, 180, 197, 203, 245, 248, 251, 259, 265, 269, 272, 273], "approach": [9, 17, 19, 20, 21, 22, 23, 125, 181, 184, 187, 245, 248, 269], "appendix": [9, 125, 245, 248], "lock": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143], "exampl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 33, 35, 36, 37, 38, 40, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 103, 105, 106, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 152, 153, 154, 155, 156, 158, 159, 161, 163, 165, 168, 169, 173, 175, 176, 178, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 269], "see": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 35, 38, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 85, 87, 88, 89, 90, 92, 93, 95, 105, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 153, 155, 156, 165, 175, 190, 191, 192, 193, 198, 208, 210, 224, 225, 226, 227, 230, 231, 237, 241, 245, 246, 248, 272], "noise_bandwidth": [9, 16, 125, 129, 132], "damping_factor": [9, 16, 125, 129, 130], "creat": [9, 16, 26, 28, 37, 38, 44, 45, 51, 53, 68, 70, 75, 76, 78, 94, 95, 96, 97, 98, 107, 108, 125, 129, 134, 135, 136, 139, 144, 145, 148, 149, 153, 156, 157, 165, 167, 180, 182, 205, 206, 214, 239, 249, 252, 253, 257, 265, 269, 271], "object": [9, 16, 26, 29, 30, 37, 44, 45, 51, 55, 56, 75, 79, 80, 94, 96, 99, 100, 107, 108, 109, 110, 134, 135, 144, 145, 146, 147, 148, 149, 150, 151, 156, 157, 165, 168, 169, 224, 225, 226, 227, 230, 231, 237, 241, 269, 273], "phase_lock_tim": [9, 23], "frequency_lock_tim": [9, 17], "freq_offset": [9, 17, 19], "lock_tim": [9, 19, 269], "phase_error_vari": [9, 22], "cn0": [9, 22], "varianc": [9, 22, 39, 41, 43, 162, 164, 180], "steadi": [9, 22], "state": [9, 22, 26, 27, 35, 37, 51, 52, 58, 63, 64, 66, 68, 72, 73, 75, 89, 90, 92, 94, 96, 97, 105, 165, 175, 273], "sample_r": [9, 16, 24, 26, 59, 60, 83, 84, 96, 97, 134, 144, 148, 156, 165, 198, 206, 214, 223, 224, 225, 227, 229, 230, 231, 232, 233, 236, 239, 252, 253, 255, 265, 269, 271], "bnt": [9, 11, 269], "bandwidth": [9, 10, 11, 16, 20, 125, 129, 132, 181, 190, 191, 208, 245, 248, 269, 271], "b_n": [9, 10, 11, 16, 17, 19, 22, 23, 125, 129, 132], "t": [9, 11, 16, 39, 125, 129, 132, 160, 208, 211, 261, 265], "bn": [9, 10], "hz": [9, 10, 16, 17, 19, 22, 59, 60, 83, 84, 125, 129, 132, 181, 189, 198, 206, 207, 208, 213, 214, 217, 252, 253, 256, 265], "zeta": [9, 16, 25, 125, 129, 130], "damp": [9, 16, 25, 125, 129, 130, 269], "k0": [9, 12, 16, 129, 136, 137, 139], "kp": [9, 15, 16, 129], "k1": [9, 13, 125, 126, 269], "k2": [9, 14, 125, 127, 269], "repres": [9, 18, 183, 184], "omega_n": [9, 21, 269], "natur": [9, 21], "radian": [9, 20, 21, 22, 136, 138, 139, 140, 141, 142, 156, 269], "omega_3db": [9, 20], "3": [9, 17, 19, 20, 23, 26, 33, 36, 37, 39, 40, 44, 55, 56, 79, 80, 94, 96, 97, 103, 106, 134, 136, 144, 148, 152, 153, 154, 155, 156, 160, 161, 165, 168, 169, 173, 176, 178, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 222, 223, 224, 225, 226, 227, 230, 231, 237, 239, 241, 242, 245, 246, 248, 249, 250, 252, 253, 254, 255, 256, 257, 261, 262, 267, 269, 271, 272], "omega_": [9, 20], "textrm": [9, 20], "properti": [10, 11, 12, 13, 14, 15, 18, 20, 21, 24, 25, 31, 32, 33, 34, 36, 57, 62, 64, 66, 67, 71, 73, 74, 81, 82, 85, 87, 88, 90, 92, 93, 101, 102, 103, 104, 106, 112, 117, 118, 119, 120, 122, 123, 124, 126, 127, 130, 131, 132, 137, 140, 141, 153, 155, 170, 171, 172, 173, 174, 176, 177, 273], "paramet": [16, 17, 19, 22, 27, 28, 38, 40, 41, 42, 43, 46, 47, 48, 50, 52, 53, 59, 60, 61, 65, 69, 70, 72, 76, 77, 78, 83, 84, 86, 91, 95, 97, 98, 108, 111, 113, 114, 115, 116, 121, 128, 129, 135, 138, 139, 143, 145, 149, 152, 154, 157, 158, 159, 161, 162, 163, 164, 167, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257], "where": [16, 27, 52, 97, 108, 125, 129, 132, 149, 157, 160, 180, 181, 197, 199, 200, 202, 208, 250, 257, 266, 267, 272], "period": [16, 125, 129, 132, 134, 257], "second": [16, 17, 19, 23, 44, 125, 129, 132, 208], "critic": [16, 25, 125, 129, 130, 269], "underdamp": [16, 25, 125, 129, 130], "overdamp": [16, 25, 125, 129, 130], "ted": [16, 129], "t_": [17, 19, 23, 69, 208, 271], "fl": [17, 19], "delta": [17, 19, 26, 37, 51, 61, 75, 86, 94, 96, 165, 226, 266, 267], "take": [17, 19, 23, 261], "onto": [17, 19, 23], "39": 17, "pl": [19, 23], "38": 19, "34": 20, "33": 21, "sigma_": [22, 39, 40, 42], "theta_": 22, "carrier": [22, 148], "43": 22, "40": [23, 96, 165, 198], "less": [25, 178], "than": [25, 134, 135, 145, 149, 155, 157, 178, 210, 212, 222, 238, 246], "greater": [25, 245, 248], "fir": [26, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 96, 97, 98, 99, 100, 101, 103, 105, 106, 165, 166, 167, 168, 169, 170, 173, 175, 176, 190, 191, 192, 193, 194, 223, 224, 225, 226, 227, 230, 231, 237, 241, 242, 268, 272, 273], "note": [26, 33, 36, 37, 39, 40, 41, 43, 51, 75, 94, 96, 103, 106, 125, 134, 136, 144, 148, 156, 160, 161, 162, 164, 165, 173, 176, 178, 180, 181, 184, 187, 195, 196, 208, 212, 217, 223, 242, 257], "equival": [26, 96, 165, 180, 181, 190, 191, 192, 193, 203, 251, 263, 265], "first": [26, 31, 44, 96, 98, 101, 134, 142, 144, 165, 167, 170, 215, 239, 254, 262, 264], "prototyp": [26, 33, 36, 96, 103, 106, 165, 173, 176], "feedforward": [26, 28, 33, 36, 37, 51, 53, 67, 75, 78, 82, 94, 96, 98, 103, 106, 165, 167, 173, 176, 224, 225, 226, 227, 230, 231, 237, 241, 266, 267], "coeffici": [26, 28, 51, 53, 75, 78, 96, 98, 107, 120, 124, 134, 144, 148, 156, 165, 167, 224, 225, 226, 227, 230, 231, 237, 241, 266, 267], "discard": [26, 165], "each": [26, 27, 52, 96, 97, 165, 205, 211, 229, 233, 236], "instead": [26, 96, 165, 222], "ar": [26, 27, 28, 33, 36, 38, 39, 44, 46, 47, 48, 50, 52, 53, 60, 70, 76, 78, 84, 95, 96, 97, 98, 103, 106, 107, 108, 120, 124, 134, 135, 144, 145, 148, 149, 156, 157, 160, 165, 167, 173, 176, 181, 183, 184, 186, 187, 207, 210, 215, 222, 223, 224, 225, 227, 229, 230, 231, 232, 233, 236, 238, 239, 240, 242, 246, 252, 253, 261, 263, 265, 267, 269, 271, 272, 274], "commut": [26, 96, 165], "parallel": [26, 96, 165], "output": [26, 27, 31, 37, 51, 52, 61, 65, 75, 76, 78, 86, 91, 94, 95, 96, 97, 98, 101, 114, 125, 128, 136, 138, 142, 143, 165, 167, 170, 180, 181, 182, 183, 184, 186, 187, 196, 197, 205, 213, 215, 226, 237, 254, 258, 261, 265, 266, 267, 269], "sum": [26, 39, 51, 75, 160, 271], "prevent": [26, 96, 144, 156, 165], "need": [26, 96, 165, 261, 262, 264], "done": [26, 261], "case": [26, 96, 156, 160, 165], "3x": [26, 96], "6": [26, 33, 36, 37, 44, 55, 56, 79, 80, 94, 96, 97, 103, 106, 134, 136, 144, 148, 155, 156, 161, 162, 164, 165, 173, 176, 178, 185, 189, 197, 198, 199, 200, 205, 207, 209, 211, 213, 217, 222, 223, 224, 225, 226, 227, 230, 231, 237, 238, 239, 241, 242, 245, 248, 252, 253, 255, 257, 261, 262, 263, 264, 266, 267, 269, 270], "9": [26, 33, 36, 96, 97, 103, 106, 134, 144, 148, 156, 161, 165, 173, 176, 178, 185, 197, 205, 209, 211, 242, 245, 248, 261, 267, 268, 270, 271], "v": [26, 136, 189, 213, 261], "5": [26, 33, 36, 37, 39, 40, 41, 42, 43, 44, 55, 56, 94, 96, 97, 103, 106, 134, 136, 144, 148, 156, 161, 163, 165, 173, 176, 178, 180, 183, 185, 186, 187, 190, 191, 192, 193, 197, 198, 199, 200, 202, 203, 205, 206, 207, 208, 209, 211, 212, 217, 220, 223, 224, 225, 226, 227, 230, 231, 237, 239, 241, 242, 245, 248, 249, 250, 251, 252, 253, 255, 257, 261, 265, 266, 267, 268, 269, 270, 271], "7": [26, 29, 30, 33, 36, 96, 97, 99, 100, 103, 106, 134, 144, 148, 155, 156, 161, 165, 173, 176, 178, 185, 192, 194, 197, 205, 209, 211, 239, 242, 257, 261, 267], "8": [26, 33, 36, 37, 40, 42, 79, 80, 94, 96, 97, 103, 106, 108, 134, 135, 136, 144, 145, 148, 149, 152, 153, 154, 155, 156, 157, 161, 163, 165, 173, 176, 178, 180, 181, 182, 184, 185, 187, 190, 191, 192, 193, 194, 197, 198, 205, 207, 208, 209, 210, 211, 214, 217, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 235, 237, 238, 239, 240, 241, 242, 245, 246, 248, 252, 253, 255, 257, 266, 267, 268, 269, 271], "summat": 26, "bottom": [26, 96, 165], "top": [26, 96, 165], "adder": [26, 125, 136, 195, 196, 269], "relat": [26, 33, 36, 96, 103, 106, 165, 173, 176, 181, 208], "In": [26, 27, 28, 29, 30, 33, 36, 37, 38, 40, 42, 44, 52, 53, 55, 56, 66, 70, 73, 76, 78, 79, 80, 92, 94, 95, 96, 97, 98, 99, 100, 103, 106, 134, 136, 144, 148, 152, 153, 154, 155, 156, 158, 159, 161, 163, 165, 167, 168, 169, 173, 176, 178, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 265, 270], "np": [26, 33, 36, 40, 42, 79, 80, 96, 97, 103, 106, 107, 119, 123, 134, 136, 144, 148, 152, 154, 155, 156, 161, 163, 165, 173, 176, 178, 180, 181, 182, 183, 184, 186, 187, 197, 198, 205, 206, 207, 212, 214, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 235, 237, 239, 241, 242, 249, 252, 253, 255, 257, 265, 266, 267, 268, 269, 270, 271], "co": [26, 96, 97, 165, 214], "64": [26, 211, 267], "arang": [26, 33, 36, 96, 97, 103, 106, 165, 173, 176, 180, 182, 198, 214, 242, 252, 253, 255, 257, 265, 269], "280": 26, "out": [26, 29, 33, 36, 44, 55, 79, 96, 97, 99, 103, 106, 134, 144, 148, 153, 155, 156, 158, 159, 165, 168, 173, 176, 182, 183, 185, 186, 189, 195, 196, 197, 199, 200, 202, 203, 205, 207, 209, 213, 215, 217, 220, 225, 240, 242, 243, 244, 250, 251, 254, 256], "plt": [26, 37, 40, 42, 94, 96, 97, 134, 136, 144, 148, 152, 153, 154, 155, 156, 161, 163, 165, 178, 180, 181, 182, 184, 187, 190, 191, 192, 193, 194, 198, 205, 206, 207, 208, 210, 212, 214, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 235, 237, 238, 239, 241, 245, 246, 248, 249, 252, 253, 255, 257, 265, 266, 267, 268, 269, 270, 271], "figur": [26, 37, 40, 42, 94, 96, 97, 134, 136, 144, 148, 152, 153, 154, 155, 156, 161, 163, 165, 178, 180, 181, 182, 184, 187, 190, 191, 192, 193, 194, 198, 205, 206, 207, 208, 210, 212, 214, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 235, 237, 238, 239, 240, 241, 245, 246, 248, 249, 252, 253, 255, 257, 265, 266, 267, 268, 269, 270, 271], "figsiz": [26, 37, 40, 42, 94, 96, 97, 134, 136, 144, 148, 152, 153, 154, 155, 156, 161, 163, 165, 178, 180, 181, 182, 184, 187, 190, 191, 192, 193, 194, 198, 205, 206, 207, 208, 210, 212, 214, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 235, 237, 238, 239, 240, 241, 245, 246, 248, 249, 252, 253, 255, 257, 265, 266, 267, 268, 269, 270, 271], "plot": [26, 37, 40, 42, 59, 60, 61, 65, 83, 84, 86, 91, 94, 96, 97, 134, 136, 144, 148, 152, 153, 154, 155, 156, 161, 163, 165, 180, 181, 182, 184, 187, 190, 191, 192, 193, 194, 198, 205, 206, 207, 208, 210, 212, 214, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 245, 246, 248, 249, 252, 253, 255, 257, 265, 266, 267, 269, 270, 271, 272, 273], "marker": [26, 96, 97, 136, 165, 222, 238, 265, 266, 267, 270], "label": [26, 37, 40, 42, 94, 96, 97, 135, 145, 149, 152, 154, 157, 161, 163, 165, 178, 180, 190, 191, 192, 193, 205, 206, 208, 212, 221, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 235, 236, 239, 245, 248, 249, 265, 268, 269, 270, 271], "o": [26, 96, 97, 165, 265], "titl": [26, 37, 94, 96, 134, 136, 144, 152, 154, 165, 178, 180, 181, 182, 184, 187, 198, 205, 206, 212, 214, 221, 235, 239, 249, 252, 253, 255, 257, 265, 268, 269, 270, 271], "tight_layout": [26, 37, 94, 96, 134, 136, 144, 152, 154, 165, 178, 180, 181, 182, 184, 187, 198, 205, 206, 207, 214, 221, 235, 239, 249, 252, 253, 255, 257, 268, 269, 270, 271], "preserv": [26, 28, 38, 53, 66, 70, 73, 76, 78, 92, 95, 96, 98, 165, 167, 223, 233], "call": [26, 27, 28, 38, 52, 53, 66, 70, 73, 76, 78, 92, 95, 96, 97, 98, 165, 167], "true": [26, 40, 41, 42, 43, 96, 97, 134, 144, 148, 152, 154, 156, 161, 162, 163, 164, 165, 178, 179, 181, 183, 184, 186, 187, 197, 201, 207, 214, 218, 219, 222, 231, 233, 238, 240, 247, 268, 270], "y1": [26, 96, 97, 165, 212], "70": [26, 211, 271], "y2": [26, 96, 97, 165, 212], "140": [26, 198], "y3": [26, 96, 97, 165], "210": 26, "y4": [26, 96, 165], "y5": [26, 96, 165], "flush": [26, 27, 37, 51, 52, 58, 96, 97, 165, 273], "y_1": [26, 96, 165, 212], "y_2": [26, 96, 165, 212], "y_3": [26, 96, 165], "y_4": [26, 96, 165], "y_5": [26, 96, 165], "__call__": [26, 27, 28, 37, 38, 51, 52, 53, 66, 68, 69, 70, 73, 75, 76, 77, 78, 92, 94, 95, 96, 97, 98, 125, 128, 136, 138, 165, 166, 167, 273], "full": [26, 27, 52, 96, 97, 165, 166, 182], "__len__": [26, 37, 51, 54, 96, 165], "__repr__": [26, 29, 37, 51, 55, 75, 79, 94, 96, 99, 107, 109, 134, 144, 146, 148, 150, 156, 165, 168], "style": [26, 29, 37, 51, 55, 75, 79, 94, 96, 99, 107, 109, 134, 144, 146, 148, 150, 156, 165, 168, 240], "__str__": [26, 30, 37, 51, 56, 75, 80, 94, 96, 100, 107, 110, 134, 144, 147, 148, 151, 156, 165, 169], "human": [26, 30, 37, 51, 56, 75, 80, 94, 96, 100, 107, 110, 134, 144, 147, 148, 151, 156, 165, 169], "readabl": [26, 30, 37, 51, 56, 75, 80, 94, 96, 100, 107, 110, 134, 144, 147, 148, 151, 156, 165, 169], "reset": [26, 35, 37, 51, 63, 68, 72, 75, 89, 94, 96, 105, 125, 133, 136, 142, 165, 175], "when": [26, 35, 37, 51, 58, 61, 63, 65, 75, 86, 89, 91, 94, 96, 105, 165, 175, 180, 181, 183, 184, 186, 187, 203, 224, 225, 226, 227, 230, 231, 237, 251, 257, 265, 266, 267], "pass": [26, 37, 51, 58, 96, 165, 180, 183, 186, 197, 205, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 259, 261, 263, 266, 267, 273], "through": [26, 37, 51, 58, 96, 144, 156, 165, 183, 186, 197, 259, 266, 267, 269], "indic": [26, 28, 31, 37, 38, 41, 42, 43, 51, 53, 66, 68, 70, 73, 75, 76, 78, 92, 94, 95, 96, 98, 101, 108, 135, 144, 145, 148, 149, 152, 154, 156, 157, 161, 162, 163, 164, 165, 167, 170, 179, 201, 208, 210, 212, 214, 218, 219, 223, 231, 232, 233, 239, 245, 246, 247, 248], "whether": [26, 28, 37, 38, 41, 42, 43, 51, 53, 66, 68, 70, 73, 75, 76, 78, 92, 94, 95, 96, 98, 152, 154, 161, 162, 163, 164, 165, 167, 179, 201, 214, 218, 219, 231, 233, 239, 247], "consist": [26, 37, 46, 47, 48, 49, 50, 51, 64, 96, 165], "previou": [26, 28, 37, 38, 51, 53, 64, 70, 72, 76, 78, 95, 96, 98, 165, 167, 195, 196], "u": [26, 37, 51, 65, 75, 91, 94, 96, 165, 178, 237, 257, 258, 266, 267], "frequency_respons": [26, 37, 51, 59, 75, 83, 94, 96, 165, 273], "frequency_response_log": [26, 37, 51, 60, 75, 84, 94, 96, 165], "logarithm": [26, 37, 51, 60, 75, 84, 94, 96, 165, 224, 225, 227, 229, 230, 231, 266, 267], "axi": [26, 37, 51, 60, 75, 84, 94, 96, 165, 179, 201, 204, 216, 218, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 236, 238, 239, 265, 273], "custom": [26, 32, 96, 102, 108, 145, 149, 157, 165, 172, 190, 191, 192, 193, 273], "multir": [26, 27, 28, 32, 96, 97, 98, 102, 165, 167, 172, 194, 242, 273], "polyphase_tap": [26, 30, 33, 36, 96, 97, 100, 103, 106, 165, 169, 173, 176], "index": [26, 31, 68, 72, 96, 101, 165, 170, 223, 232, 233, 238, 261], "correspond": [26, 31, 44, 49, 96, 101, 165, 170, 233], "mode": [27, 28, 35, 38, 52, 53, 58, 63, 66, 68, 70, 72, 73, 76, 78, 89, 92, 95, 97, 98, 105, 166, 167, 175, 182, 257], "l": [27, 52, 77, 97], "stream": [27, 28, 29, 30, 35, 38, 52, 53, 55, 56, 58, 63, 66, 68, 70, 72, 73, 76, 78, 79, 80, 89, 92, 95, 97, 98, 99, 100, 105, 134, 144, 148, 156, 167, 168, 169, 175, 267], "convolut": [27, 52, 96, 97], "ha": [27, 52, 96, 97, 134, 144, 148, 180, 190, 191, 192, 193, 198, 207, 208, 217, 255, 257, 269, 270, 271], "align": [27, 52, 97, 98, 144, 167, 265], "howev": [27, 46, 47, 48, 50, 52, 97, 125, 184, 187, 265], "produc": [27, 52, 96, 97, 165, 208, 271], "final": [27, 52, 97], "dictat": [27, 52, 97], "argument": [27, 28, 52, 97, 98, 167, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 266, 267], "specif": [28, 49, 98, 167, 264, 271], "npt": [28, 98, 108, 135, 145, 149, 157, 167, 190, 191, 192, 193, 224, 225, 226, 227, 230, 231, 237, 241], "string": [29, 30, 55, 56, 79, 80, 99, 100, 108, 109, 110, 145, 146, 147, 149, 150, 151, 157, 168, 169, 211, 229, 236, 273], "represent": [29, 30, 55, 56, 79, 80, 99, 100, 109, 110, 146, 147, 150, 151, 168, 169, 238, 273], "print": [30, 56, 80, 100, 169, 211, 265, 266, 267, 269], "167": [30, 100], "24": [30, 100, 169], "shape": [30, 56, 80, 97, 100, 107, 108, 114, 116, 119, 120, 124, 134, 144, 145, 148, 149, 156, 157, 169, 208, 210, 223, 239, 245, 246, 248, 267, 272, 273], "12": [30, 96, 134, 144, 148, 156, 162, 164, 178, 185, 194, 209, 242, 266, 270, 273], "befor": [33, 36, 103, 106, 173, 176, 274], "decomposit": [33, 36, 103, 106, 173, 176, 273], "after": [33, 36, 103, 106, 173, 176], "10": [33, 36, 37, 40, 42, 44, 94, 96, 97, 103, 106, 108, 134, 144, 145, 148, 149, 152, 154, 156, 157, 161, 163, 165, 173, 176, 178, 179, 180, 185, 189, 190, 191, 192, 193, 197, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 230, 231, 235, 237, 239, 241, 242, 245, 246, 247, 248, 249, 250, 251, 265, 266, 267, 268, 269, 270, 271], "puls": [37, 94, 107, 108, 114, 116, 119, 120, 124, 134, 144, 145, 148, 149, 156, 157, 208, 210, 223, 239, 245, 246, 248, 272, 273], "deriv": 37, "d": [37, 51, 57, 204, 207, 217, 261, 263, 272], "lfloor": [37, 51, 57], "rfloor": [37, 51, 57], "null": [39, 160, 227, 229, 271], "altern": [39, 160, 267], "hypothes": [39, 160], "follow": [39, 44, 212, 222, 233, 236, 238, 240, 242, 269], "assum": [39, 160, 180, 197, 215, 254], "valu": [39, 107, 108, 111, 121, 134, 135, 144, 145, 148, 149, 152, 154, 156, 157, 158, 159, 182, 189, 195, 196, 208, 212, 213, 222, 238, 267, 273], "random": [39, 134, 144, 148, 156, 180, 183, 186, 197, 205, 206, 212, 222, 223, 232, 239, 249, 268, 270], "process": [39, 40, 41, 43, 160, 161, 162, 164, 194, 242, 267, 269, 272], "w": [39, 160, 180, 265, 266, 267, 268, 269, 270, 271], "sigma": [39, 40, 41, 42, 43, 160, 161, 162, 163, 164, 180, 181], "_0": [39, 160], "_1": [39, 160], "test": [39, 160, 263, 272], "statist": [39, 40, 41, 43, 160, 161, 162, 164], "limits_": [39, 51, 75, 160], "left": [39, 40, 41, 75, 144, 148, 156, 160, 161, 162, 164, 178, 179, 180, 181, 201, 204, 205, 207, 208, 212, 214, 217, 218, 219, 247, 257], "right": [39, 40, 41, 75, 144, 148, 156, 160, 161, 162, 164, 178, 179, 180, 181, 201, 204, 205, 207, 208, 212, 214, 217, 218, 219, 247, 257], "gamma": [39, 41, 43, 160, 162, 164, 178], "sim": [39, 160, 180, 262], "chi_": [39, 40, 41], "2n": [39, 40, 41], "text": [39, 156, 160, 178, 179, 180, 181, 184, 187, 188, 189, 194, 205, 206, 207, 213, 216, 218, 219, 247, 249], "under": [39, 160], "detect": [39, 40, 41, 42, 43, 160, 161, 162, 163, 164, 178, 228, 234, 273], "threshold": [39, 41, 43, 160, 162, 164], "q_": [39, 40, 41, 43], "chi_n": [39, 40, 41, 43], "steven": [39, 40, 41, 43, 160, 161, 162, 164], "kai": [39, 40, 41, 43, 160, 161, 162, 164], "fundament": [39, 40, 41, 43, 160, 161, 162, 164], "theori": [39, 40, 41, 43, 160, 161, 162, 164], "section": [39, 46, 47, 48, 49, 50, 160, 267, 269], "static": [39, 40, 41, 42, 43, 160, 161, 162, 163, 164, 262], "n_nc": [39, 40, 41, 42, 43, 178], "number": [40, 41, 42, 43, 44, 46, 47, 50, 59, 60, 61, 65, 83, 84, 86, 91, 107, 108, 112, 122, 134, 135, 143, 144, 145, 148, 149, 156, 157, 178, 180, 183, 186, 197, 199, 200, 202, 208, 210, 211, 215, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 236, 237, 242, 245, 246, 248, 250, 254], "For": [40, 41, 43, 161, 162, 164, 180, 198, 207, 255, 261, 266], "linspac": [40, 152, 154, 161, 181, 184, 187, 207, 221, 235, 267, 268, 269, 270], "20": [40, 42, 96, 97, 134, 136, 144, 148, 156, 161, 165, 178, 181, 183, 186, 189, 197, 205, 206, 211, 212, 213, 219, 242, 247, 255, 268, 270, 271, 273], "101": [40, 42, 161, 163, 190, 191, 192, 193], "25": [40, 183, 186, 197, 220, 223, 243, 244, 265, 268, 269, 271], "1e": [40, 161, 206, 270], "sigma2": [41, 43, 162, 164], "If": [42, 72, 108, 138, 145, 149, 157, 163, 165, 179, 180, 181, 197, 201, 215, 218, 219, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 236, 237, 238, 239, 247, 252, 254, 272], "logspac": [42, 163, 178], "theoret": [42, 152, 154, 221, 235, 270, 273], "variou": [42, 262, 271], "100": [42, 75, 86, 91, 94, 136, 152, 154, 178, 180, 181, 184, 187, 189, 190, 191, 192, 193, 205, 213, 214, 221, 223, 224, 226, 232, 235, 237, 239, 249, 252, 253, 255, 265, 269], "1_000": [42, 180, 206, 207, 212, 249, 268], "000": [42, 206], "5_000": 42, "measur": [44, 46, 179, 180, 188, 189, 201, 204, 205, 213, 216, 218, 219, 247, 269, 272, 273], "new": [44, 45, 68, 70, 107, 108, 134, 135, 144, 145, 148, 149, 156, 157, 249], "accumul": [44, 136, 139, 140, 142, 269], "from": [44, 59, 60, 75, 76, 83, 84, 94, 98, 107, 123, 134, 144, 148, 155, 156, 167, 189, 199, 200, 202, 203, 213, 220, 229, 236, 243, 244, 250, 251, 261, 266, 267, 269, 272], "contain": [44, 180, 211], "add": [44, 46, 49, 134, 144, 148, 156, 180, 206, 210, 233, 246, 249, 259, 270, 274], "total": [44, 208, 210, 245, 246, 248, 271], "count": [44, 47, 205], "error_r": [44, 48, 49, 270], "everi": [44, 265], "can": [44, 46, 47, 48, 50, 125, 134, 180, 205, 208, 215, 223, 229, 236, 263, 266, 267, 270, 272, 274], "obtain": 44, "tabul": [44, 45], "all": [44, 49, 138, 205, 223, 232, 233, 262, 264, 272], "ascend": [44, 49], "other": [46, 47, 48, 50, 265, 274], "quantiti": [46, 47, 48, 49, 50], "user": [46, 47, 48, 50, 266, 267], "caution": [46, 47, 48, 50], "instanc": [46, 47, 48, 50, 134], "transmit": [46, 107, 124, 134, 144, 148, 156, 205, 223], "e": [49, 136, 160, 161, 162, 163, 164, 179, 183, 184, 201, 257, 262, 263, 266, 267, 269, 270], "whatev": 49, "wa": [49, 181], "provid": [49, 107, 111, 121, 134, 144, 148, 152, 154, 156, 233, 262, 272], "wrapper": [51, 75], "scipi": [51, 75, 190, 191, 192, 193, 229, 236, 271, 272], "convolv": [51, 239], "It": [51, 75, 96, 108, 125, 145, 149, 157, 180, 223], "support": [51, 75, 273], "one": [51, 75, 135, 144, 145, 149, 155, 157, 208, 211, 223, 224, 225, 227, 229, 230, 231, 236, 252, 266, 267, 268, 271], "its": [51, 75, 76, 94, 180, 266, 267, 271], "sum_": [51, 75, 162, 164, 179, 180, 181, 201, 204, 205, 247], "valid": [52, 207, 223, 232, 233, 257], "same": [52, 97, 239, 266], "0013559842808217807": [55, 56], "005995136544658217": [55, 56], "008698817681933214": [55, 56], "0024103767414047302": [55, 56], "010205586837665018": [55, 56], "018983779931504997": [55, 56], "011950905288150394": [55, 56], "01518393864077397": [55, 56], "051622191325047306": [55, 56], "07210389837804473": [55, 56], "04745944982876247": [55, 56], "039173517569276436": [55, 56], "17918683372907862": [55, 56], "3367363220550604": [55, 56], "4611457574513795": [55, 56], "5084040873607553": [55, 56], "30": [56, 96, 165, 198, 224, 226, 237, 252, 253, 267, 273], "31": 56, "15": [56, 134, 163, 185, 209, 242, 255], "remain": [58, 198, 215], "1024": [59, 60, 83, 84, 224, 225, 227, 230, 231, 268, 271], "decad": [60, 84, 224, 225, 227, 230, 231, 266, 269], "resampl": [68, 69, 70, 71, 72, 73, 74, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 194, 242, 272, 273], "http": [68, 178, 188, 190, 191, 192, 193, 194, 208, 216, 257, 261, 262, 263], "wirelesspi": 68, "com": [68, 178, 190, 191, 192, 193, 194, 208, 262, 263], "fraction": [68, 72, 208, 265], "structur": 68, "should": [72, 134, 223, 263], "equal": [72, 134], "three": [72, 265, 271], "lfilter": 75, "b_i": [75, 78, 82, 94, 224, 225, 226, 227, 230, 231, 237, 241, 267], "feedback": [75, 78, 81, 94, 224, 225, 226, 227, 230, 231, 237, 241, 267], "a_j": [75, 78, 81, 94, 224, 225, 226, 227, 230, 231, 237, 241, 267], "These": [75, 144, 148, 156, 240, 263, 269], "differ": [75, 135, 145, 149, 155, 157, 190, 191, 192, 193, 239, 257, 271], "a_0": 75, "classmethod": [75, 76, 94], "zerospol": [75, 76, 79, 80, 94, 224, 225, 226, 227, 230, 231, 237, 241, 267], "self": [75, 76, 94], "b_tap": [75, 80, 82, 94, 267], "a_tap": [75, 80, 81, 94, 267], "exp": [79, 80, 144, 148, 156, 198, 208, 212, 214, 224, 225, 226, 227, 230, 231, 237, 239, 241, 253, 255, 257, 265, 267, 269], "1j": [79, 80, 198, 214, 224, 225, 226, 227, 230, 231, 237, 239, 241, 253, 255, 265, 267, 269], "conj": [79, 80, 224, 225, 226, 227, 230, 231, 237, 241, 267, 269], "478207252018059": [79, 80, 267], "6400000000000001": [79, 80, 267], "7391036260090295": [80, 267], "3061467458920719j": [80, 267], "insert": [96, 165], "multipli": [96, 165], "hold": [96, 98, 165, 167, 215, 273], "recommend": 96, "wai": [96, 263], "11": [96, 134, 144, 148, 156, 185, 194, 209, 242, 261], "zoh": [96, 98, 102, 165, 167, 172], "13": [96, 134, 144, 148, 156, 160, 161, 162, 164, 182, 185, 209, 242, 273], "matlab": [96, 98, 102, 165, 167, 172, 272], "iter": 97, "concaten": [97, 267], "linearli": [98, 167], "2r": 98, "ramp": [98, 125, 167], "advanc": [98, 167], "ones": [98, 167, 190, 191, 192, 193, 269], "84": 100, "modul": [107, 108, 116, 117, 119, 134, 136, 144, 145, 148, 149, 152, 154, 156, 157, 199, 200, 202, 205, 221, 223, 232, 235, 238, 250, 261, 264, 268, 270, 272, 273], "map_symbol": [107, 115, 134, 144, 148, 156, 180, 205, 206, 212, 222, 223, 249, 273], "decide_symbol": [107, 113, 134, 144, 148, 156, 273], "a_hat": [107, 113, 134, 144, 148, 156], "decis": [107, 113, 114, 134, 144, 148, 156, 223], "maximum": [107, 113, 114, 134, 144, 148, 156, 208, 210, 222, 238, 245, 246, 248], "likelihood": [107, 113, 114, 134, 144, 148, 156], "mle": [107, 113, 134, 144, 148, 156], "match": [107, 108, 114, 120, 134, 144, 145, 148, 149, 156, 157, 273], "abstract": [107, 111, 121], "log_2": [107, 112, 134, 144, 148, 156, 181, 199, 200, 202, 250], "phase_offset": [107, 108, 118, 134, 135, 144, 145, 148, 149, 153, 156, 157, 180, 205, 206, 212, 222, 223, 238, 249, 268, 270], "degre": [107, 108, 118, 134, 135, 144, 145, 148, 149, 153, 156, 157, 206, 212, 214, 217], "dot": [107, 108, 123, 134, 144, 148, 155, 156, 238], "mapsto": [107, 108, 123, 134, 144, 148, 155, 156, 238], "mathbb": [107, 108, 123, 134, 144, 148, 155, 156, 181, 238, 257], "sym": [107, 108, 122, 134, 135, 144, 145, 148, 149, 156, 157, 200, 203, 208, 250, 251, 271], "pulse_shap": [107, 108, 114, 116, 119, 134, 144, 145, 148, 149, 156, 157, 268], "tx_filter": [107, 124, 134, 144, 148, 156], "rx_filter": [107, 120, 134, 144, 148, 156], "rect": [108, 145, 149, 157, 271], "whose": [108, 135, 145, 148, 149, 157], "import": [108, 145, 149, 157, 263, 265, 266, 267, 268, 269, 270, 271, 272], "roll": [108, 145, 149, 157, 257, 271], "off": [108, 145, 149, 157], "psd": [111, 121, 152, 154, 181, 199, 200, 202, 203, 221, 235, 250, 251], "p_b": 111, "s_hat": [114, 270], "size": [114, 116, 182, 197, 265, 269, 270, 271], "p_e": 121, "loopfilt": [125, 126, 127, 128, 129, 130, 131, 132, 133, 260, 269, 273], "ppi": [125, 129, 260], "track": 125, "constant": [125, 134, 136, 139, 140, 229, 236, 267, 269], "cannot": 125, "chirp": 125, "underli": [125, 131], "scheme": [134, 144, 148, 156, 273], "similar": [134, 144, 156, 271], "One": [134, 144, 156, 271], "distinct": [134, 144, 156], "result": [134, 144, 156, 179, 201, 207, 217, 218, 219, 245, 247, 248, 270], "envelop": [134, 266, 267], "which": [134, 144, 156, 178, 179, 180, 181, 201, 204, 206, 212, 216, 217, 218, 222, 238, 249, 265, 269, 271], "lower": [134, 144, 156, 227, 229, 245, 248], "also": [134, 207, 208, 272], "consid": [134, 211], "cpfsk": 134, "separ": 134, "modem": [134, 144, 148, 156], "45": [134, 135, 144, 145, 148, 153, 180, 205, 206, 212, 214, 222, 223, 238, 249, 268, 270], "symbol_label": [134, 135, 144, 145, 148, 149, 155, 156, 157, 270], "randint": [134, 144, 148, 156, 180, 183, 186, 197, 205, 206, 212, 222, 223, 232, 239, 249, 268, 270], "1000": [134, 144, 148, 156, 205, 207, 239, 252, 253, 270], "dtype": [134, 144, 148, 156, 182, 215, 239, 254, 258, 269], "uint8": [134, 144, 148, 156, 215, 254], "complex_symbol": [134, 144, 148, 156], "70710678": [134, 144, 148], "70710678j": [134, 144, 148], "linestyl": [134, 144, 148, 156, 222, 233, 238, 240, 257, 265, 269, 270, 271], "tx_sampl": [134, 144, 148, 156], "50": [134, 144, 148, 156, 189, 213, 220, 238, 252, 253, 265, 268], "like": [134, 263, 272, 273], "channel": [134, 144, 152, 154, 181, 183, 184, 186, 187, 197, 221, 235, 272, 273], "subplot": [134, 144, 212, 269, 270], "imag": [134, 144, 265], "trajectori": 134, "although": 134, "boundari": 134, "lead": [134, 212, 270], "spectral": [134, 198, 229, 268, 271], "effici": [134, 198, 217, 255], "gmsk": 134, "rx_sampl": [134, 144, 148, 156], "last": [134, 144, 215, 261], "rx_symbol": [134, 144, 148, 156], "rx_complex_symbol": [134, 144, 148, 156], "14": [134, 144, 148, 156, 161, 185, 209, 242], "array_equ": [134, 144, 148, 156], "bin": [135, 145, 149, 155, 157, 205, 222, 238, 270], "absolut": [135, 136, 139, 141, 145, 157, 181], "consecut": [135, 145, 149, 157], "adjac": [135, 145, 149, 155, 157, 270, 271], "mai": [135, 145, 149, 155, 157, 205, 222, 233, 236, 238, 240, 267], "more": [135, 145, 149, 155, 157, 273], "start": [135, 145, 149, 157, 261], "0j": [135, 145, 149, 157], "go": [135, 145, 149, 157], "counter": [135, 145, 149, 157], "clockwis": [135, 145, 149, 157], "around": [135, 145, 149, 157], "circl": [135, 145, 149, 157, 267], "increment": [136, 138, 139, 140, 269], "Then": 136, "fsk": 136, "60": [136, 190, 191, 192, 193, 271], "repeat": 136, "cp": 136, "57": 136, "bpsk": [136, 152, 154, 221, 235, 239, 268], "variabl": [136, 138, 211, 269], "forward": [136, 143], "settabl": [136, 137, 140, 141], "vari": 138, "intern": 142, "set": [142, 180, 207, 222, 227, 229, 233, 236, 238, 240, 262, 264, 267], "qpsk": [144, 148, 152, 153, 154, 156, 180, 205, 206, 221, 222, 223, 235, 238, 239, 249, 272, 273], "convent": [144, 156], "transit": [144, 156, 186, 187, 197, 259], "independ": 144, "apart": 144, "origin": [144, 156, 255, 265], "taken": [144, 148, 156], "jq": 144, "begin": [144, 156, 160], "end": [144, 156, 160, 252, 262], "encod": [148, 152, 154, 195, 196, 272], "inform": [148, 199, 200, 202, 250], "ge": [149, 157, 178], "were": [152, 154], "simon": [152, 154], "alouini": [152, 154], "over": [152, 154, 211], "fade": [152, 154], "chapter": [152, 154, 194, 242], "john": [152, 154], "proaki": [152, 154], "optimum": [152, 154], "psk8": [152, 154, 221, 235, 270], "psk16": [152, 154, 221, 235, 270], "compar": [152, 154, 190, 191, 192, 193, 271], "de": [152, 154, 273], "se": [154, 235], "00000000e": [155, 156, 267], "00": [155, 156, 267], "00j": [155, 156], "07106781e": [155, 156], "01": [155, 156, 211, 267, 269], "01j": [155, 156], "12323400e": [155, 156], "17": [155, 156, 205, 217, 242, 261], "83697020e": 155, "22464680e": [155, 156], "16j": [155, 156], "annot": [155, 238, 273], "odd": [156, 252], "rotat": [156, 214], "rel": [156, 257, 271], "even": [156, 190, 191, 192, 193, 208, 245, 248], "2m": 156, "displaystyl": 156, "pi4_qpsk": 156, "exceed": [158, 159], "15865525393145707": [158, 159], "158655": [158, 159], "0000010494310452": [158, 159], "perfect": 160, "knowledg": 160, "cn": [160, 180], "mathrm": 160, "re": 160, "sqrt": [160, 161, 162, 164, 178, 204, 205, 208, 247, 257, 268, 269, 271], "____": 165, "down": [165, 167, 171, 194, 242], "2p": 167, "95": [169, 205], "desir": [178, 180, 270], "ln": [178, 208], "62": [178, 211], "_": [178, 205], "log_": [178, 179, 189, 201, 207, 216, 218, 219, 247], "54": [178, 211], "44": 178, "12ab": 178, "7b": 178, "claim": 178, "leq": 178, "le": [178, 214, 217, 245, 248], "8096": 178, "radarsp": 178, "weebli": 178, "upload": 178, "21471216": 178, "albersheim_alternative_form": 178, "pdf": [178, 208], "bpb": 178, "w2": 178, "wpmucdn": 178, "site": [178, 261], "gatech": 178, "edu": 178, "dist": [178, 262], "462": 178, "file": [178, 262, 264], "2016": 178, "noncoher": 178, "approxim": [178, 273], "www": [178, 190, 191, 192, 193, 194, 208], "mathwork": [178, 190, 191, 192, 193, 194, 208], "help": [178, 190, 191, 192, 193, 194, 208], "html": [178, 190, 191, 192, 193, 194, 208, 261], "semilogx": [178, 234], "legend": [178, 190, 191, 192, 193, 212, 265, 268, 269, 271], "grid": [178, 181, 184, 187, 207, 240, 265, 268, 269, 271], "both": [178, 181, 222, 238, 239, 265, 269], "xlabel": [178, 181, 182, 184, 187, 205, 207, 257, 265, 268, 269, 271], "ylabel": [178, 181, 182, 184, 187, 205, 207, 257, 265, 268, 269, 271], "across": [178, 204], "nuse": 178, "avg": [179, 180, 216], "ax": [179, 201, 204, 216, 218, 240], "along": [179, 201, 204, 216, 218, 273], "entir": [179, 201, 204, 216, 218], "decibel": [179, 189, 201, 213, 218, 219, 247, 272, 273], "seed": [180, 183, 186, 197, 273], "ad": [180, 233, 262, 272, 273], "explicitli": 180, "known": 180, "must": [180, 190, 191, 192, 193, 208, 214, 233, 245, 248, 257], "numpi": [180, 183, 186, 197, 254, 265, 266, 267, 268, 269, 270, 271, 272], "default_rng": [180, 183, 186, 197], "noisi": 180, "sin": [180, 252], "zorder": [180, 206, 249], "infti": [180, 181], "nand": 180, "capac": [181, 184, 187, 272, 273], "2d": [181, 233], "x_i": [181, 183, 184, 186, 187, 197, 212], "y_i": [181, 183, 184, 186, 187, 197], "monoton": 181, "decreas": 181, "limit": [181, 222, 227, 229, 238, 270], "At": 181, "occur": 181, "view": [181, 262, 272], "59": 181, "shannon": 181, "semilogi": [181, 221, 234, 235], "barker": [182, 258, 272, 273], "ani": [182, 189, 198, 213, 227, 229, 255, 258, 264], "int64": [182, 258], "bipolar": [182, 273], "float64": [182, 258], "sequenc": [182, 183, 186, 197, 257, 259, 272, 273], "format": 182, "seq": 182, "have": [182, 198, 215, 239, 254, 255], "ideal": [182, 270], "minim": 182, "autocorrel": [182, 257], "sidelob": [182, 190, 191, 192, 193, 245, 248, 257], "corr": [182, 257], "lag": [182, 257], "ab": [182, 257, 271], "roughli": [183, 186, 265], "eras": 183, "flip": 186, "h_b": 187, "cf": 188, "v_": [188, 189, 213, 219, 247], "en": [188, 216, 257], "wikipedia": [188, 216, 257], "org": [188, 216, 257], "wiki": [188, 216, 257], "type": [189, 205, 213, 215, 229, 234, 236, 254, 273], "voltag": [189, 213, 219, 247, 272], "x_": [189, 213], "mhz": [189, 213], "77": [189, 211, 213], "50e6": 189, "76": [189, 211], "98970004336019": 189, "mw": [189, 213], "dbm": [189, 213], "dbv": [189, 213], "020599913279624": 189, "center_freq": [190, 191], "ham": [190, 191, 192, 193], "hann": [190, 191, 192, 193, 229, 236], "blackman": [190, 191, 192, 193], "harri": [190, 191, 192, 193, 194, 242], "chebyshev": [190, 191, 192, 193], "atten": [190, 191, 192, 193], "nyquist": [190, 191, 192, 193, 198, 223, 255, 271], "side": [190, 191, 208, 224, 225, 227, 229, 230, 231, 236, 266, 267, 268, 271], "about": [190, 191, 239, 264], "No": [190, 191, 192, 193], "blackmanharri": [190, 191, 192, 193], "chebwin": [190, 191, 192, 193], "attenu": [190, 191, 192, 193, 194, 245, 248], "dsp": [190, 191, 192, 193, 194, 272], "designbandpassfir": 190, "cdot": [190, 191, 192, 193, 214], "h_ham": [190, 191, 192, 193], "h_hann": [190, 191, 192, 193], "h_blackman": [190, 191, 192, 193], "h_blackman_harri": [190, 191, 192, 193], "h_chebyshev": [190, 191, 192, 193], "h_kaiser": [190, 191, 192, 193], "ylim": [190, 191, 192, 193, 225, 257, 266, 269, 270, 271], "larger": [191, 210, 212, 222, 238, 246], "designbandstopfir": 191, "75": [191, 211, 222, 269, 270], "cutoff_freq": [192, 193], "cutoff": [192, 193], "f_c": [192, 193], "designhighpassfir": 192, "designlowpassfir": 193, "half_length": 194, "a_stop": 194, "80": [194, 257], "stopband": [194, 245, 248], "a_": 194, "stop": 194, "fred": [194, 242], "system": [194, 203, 242, 251, 262, 264, 269, 272], "designmultiratefir": 194, "uncod": 196, "dmc": [197, 259, 272, 273], "memoryless": [197, 259, 272], "pr": 197, "y_j": 197, "alphabet": 197, "ldot": 197, "doe": [198, 255], "anti": [198, 255, 273], "alias": [198, 255, 273], "400": [198, 265], "x1": 198, "200": [198, 265, 270], "x2": 198, "130": 198, "x3": [198, 257], "spectrum": [198, 224, 225, 227, 229, 230, 231, 236, 252, 253, 255], "content": 198, "abov": [198, 255], "fold": 198, "cw": 198, "unalias": 198, "fft": [198, 229, 236, 252, 253, 255], "2048": [198, 252, 253, 255, 268], "xlim": [198, 255, 268, 269, 271], "qam": [199, 200, 202, 250], "249387366082999": [199, 200], "020599913279625": [199, 251], "7506126339170005": [202, 250], "979400086720376": [202, 203], "norm": [205, 208, 210, 245, 246, 248], "noiseless": 205, "sourc": 205, "max": [205, 218, 219], "instantan": 205, "percentil": [205, 227, 229, 236], "either": 205, "101431986924695": 205, "07711182374337": 205, "083918810725038": 205, "95th": 205, "568110889801623": 205, "inst_evm": 205, "hist": 205, "histogram": 205, "frequency_offset": [206, 259, 273], "freq_rat": 206, "cycl": [206, 239], "5e": 206, "deg": [206, 212], "path": [207, 272], "loss": [207, 272], "meter": [207, 217, 256], "transmitt": 207, "far": 207, "field": 207, "neg": [207, 212], "impli": 207, "possibl": [207, 272], "so": [207, 208, 210, 245, 246, 248, 272], "km": 207, "link": [207, 272, 273], "ghz": [207, 217, 256], "1e3": [207, 214, 252], "1e9": [207, 217, 256], "92": 207, "44778322188337": 207, "doubl": [207, 217], "increas": [207, 217, 267], "2e3": 207, "98": 207, "468383135163": 207, "2e9": 207, "product": [208, 271], "thought": [208, 274], "smaller": [208, 245, 248, 271], "wider": 208, "how": [208, 210, 223, 232, 233, 239, 245, 246, 248, 264], "gaussdesign": 208, "onlinelibrari": 208, "wilei": 208, "doi": 208, "1002": 208, "9780470041956": 208, "app2": 208, "h_0p1": [208, 245, 248], "h_0p2": 208, "h_0p3": 208, "reason": [210, 246, 261], "h_half_sin": 210, "displai": [211, 222, 224, 225, 227, 229, 230, 231, 236, 238], "line": [211, 239, 262, 268], "quick": 211, "brown": 211, "fox": 211, "jump": 211, "lazi": 211, "dog": 211, "00000000": 211, "68": 211, "65": 211, "71": 211, "69": 211, "63": 211, "6b": 211, "72": 211, "6f": 211, "6e": 211, "00000010": 211, "66": 211, "78": 211, "6a": 211, "6d": 211, "73": 211, "74": 211, "00000020": 211, "6c": 211, "61": 211, "7a": 211, "79": 211, "67": 211, "he": 211, "02": [211, 267, 269], "03": [211, 267], "04": [211, 267], "00000004": 211, "05": [211, 265, 267, 269], "06": 211, "07": 211, "08": 211, "00000008": 211, "09": 211, "0a": 211, "iq_imbal": [212, 259, 273], "iq": [212, 259, 272], "imbal": [212, 259, 272], "posit": 212, "compon": [212, 252, 253, 255], "g_i": 212, "180": 212, "g_q": 212, "x_q": 212, "horizont": 212, "stretch": 212, "while": [212, 271], "vertic": 212, "northwest": 212, "northeast": 212, "50118723": 213, "36272725": 213, "9952623149688795": 213, "satisfi": 214, "remov": [214, 229, 236, 273], "dtypelik": [215, 254], "most": [215, 254], "signific": [215, 254], "enough": 215, "fill": 215, "smallest": 215, "unsign": 215, "integ": 215, "diamet": 217, "55": 217, "eta": 217, "dbi": 217, "arcsin": 217, "83": 217, "dish": 217, "21": 217, "810210290266568": 217, "437435887991374": 217, "23": 217, "sinc": [217, 223, 261, 270], "antenna": [217, 272], "we": [217, 272], "observ": [217, 223], "830810203546193": 217, "529544741425365": 217, "keyword": [221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 266, 267], "pyplot": [221, 222, 225, 226, 227, 228, 229, 230, 231, 235, 236, 237, 238, 239, 240, 241, 265, 266, 267, 268, 269, 270, 271], "heatmap": [222, 270], "scatter": 222, "overwritten": [222, 233, 236, 238], "rang": [222, 269, 270], "hist2d": 222, "10_000": 222, "color": [223, 232, 233, 239, 268, 271], "imaginari": [223, 233, 239], "interleav": [223, 233], "base": [223, 232, 233, 239], "examin": 223, "intersymbol": 223, "interfer": 223, "isi": 223, "cascad": 223, "why": 223, "often": [223, 265], "practic": 223, "n_time": [224, 267], "n_freq": 224, "x_axi": [224, 225, 227, 229, 230, 231, 236, 266, 267, 268, 269], "log": [224, 225, 227, 229, 230, 231, 266, 267, 269], "definit": [224, 225, 226, 227, 230, 231, 237, 241], "n_t": 224, "n_f": 224, "scale": [224, 225, 227, 229, 230, 231, 236, 266, 267], "option": [224, 225, 227, 229, 230, 231, 236, 273], "h_srrc": [224, 225, 226, 227, 230, 231, 237, 239, 241, 270], "48": 225, "52": 225, "10th": [227, 229, 236], "crop": [227, 229], "deep": [227, 229], "x_label": 228, "overlap": [229, 236, 268], "detrend": [229, 236], "median": 229, "segment": [229, 236], "256": [229, 236, 268], "point": [229, 236], "trend": [229, 236], "unwrap": [231, 269], "stride": 233, "colorbar": 233, "1d": 233, "determin": 233, "row": 233, "collect": 233, "linecollect": 233, "linewidth": [233, 257], "solid": [233, 239], "cmap": 233, "rainbow": 233, "loglog": 234, "pcolormesh": 236, "vmin": 236, "vmax": 236, "100th": 236, "shade": 236, "gouraud": 236, "markers": 238, "diff": [239, 268], "mutual": 239, "exclus": 239, "current": [239, 263], "dash": 239, "share": 239, "10e3": 239, "revert": 240, "rcdefault": 240, "_rc_param": 240, "rc_param": 240, "autolayout": 240, "max_open_warn": 240, "titleweight": 240, "bold": 240, "arrang": 242, "column": 242, "notion": 242, "demonstr": 242, "matric": 242, "18": [242, 261, 270], "19": 242, "000005": 243, "5000": [243, 244], "000000025": 243, "005": [244, 269], "000025": 244, "excess": [245, 248, 271], "narrow": [245, 248], "expens": [245, 248], "higher": [245, 248, 271], "h_0p5": [245, 248], "h_0p9": [245, 248], "affect": [245, 248], "longer": [245, 248, 252], "h_4": [245, 248], "h_8": [245, 248], "h_16": [245, 248], "h_rect": [246, 271], "sample_rate_offset": [249, 259, 273], "append": [252, 268], "250": [252, 253], "300": [252, 253], "ksp": [252, 253], "notic": [252, 253, 265, 271], "conjug": [252, 253, 267], "500": [252, 253, 269], "now": [252, 253, 265, 273], "150": [252, 253], "asymmetr": 253, "copi": 255, "299792458": 256, "zadoff_chu": [257, 258, 273], "zadoff": [257, 258, 272, 273], "chu": [257, 258, 272, 273], "prime": 257, "gcd": 257, "ne": 257, "cyclic": 257, "x_u": 257, "c_": 257, "2q": 257, "mod": 257, "e2": 257, "93chu_sequ": 257, "x_3": 257, "139": 257, "tile": 257, "x_5": 257, "x5": 257, "cross": 257, "xcorr": 257, "sphinx": 261, "immateri": 261, "theme": 261, "depend": [261, 262, 264], "store": [261, 263, 264], "txt": [261, 262, 263, 264], "some": 261, "below": [261, 266, 267], "version": [261, 263, 272], "aren": 261, "resolut": 261, "minut": 261, "ci": 261, "myst": 261, "parser": 261, "updat": 261, "git": [261, 263], "math": 261, "dollar": 261, "ipykernel": 261, "26": 261, "nb": 261, "pickleshar": 261, "switch": 261, "pip": [261, 262, 263, 264, 272], "python3": [261, 262, 263, 264, 272], "built": 261, "run": 261, "command": [261, 262], "dirhtml": 261, "locat": [261, 264], "home": 261, "page": 261, "directori": [261, 263], "get": 261, "necessari": 261, "webpag": 261, "webserv": 261, "easili": [261, 262, 264, 266, 267], "python": [261, 272], "server": 261, "8080": 261, "access": 261, "web": 261, "browser": 261, "localhost": 261, "librari": [262, 263, 264, 265, 270, 272, 274], "ruff": [262, 263, 273], "lint": [262, 263], "your": [262, 264], "develop": [262, 263, 264], "dev": [262, 264], "pyproject": [262, 264], "toml": [262, 263, 264], "tool": [262, 264, 272], "src": 262, "extend": 262, "includ": [262, 263, 264, 272], "ipynb": 262, "exclud": 262, "build": [262, 272], "doc": 262, "_version": 262, "py": [262, 264], "120": 262, "select": 262, "pycodestyl": 262, "pyflak": 262, "pyupgrad": 262, "flake8": 262, "bugbear": 262, "simplifi": 262, "isort": 262, "ignor": 262, "e501": 262, "e713": 262, "e714": 262, "__init__": 262, "f401": 262, "f403": 262, "manual": [262, 264], "check": 262, "hook": 262, "config": [262, 265, 266, 267, 268, 269, 270, 271], "yaml": 262, "repo": [262, 263], "github": [262, 272], "rev": 262, "v2": 262, "id": 262, "larg": 262, "fixer": 262, "trail": 262, "whitespac": 262, "astral": 262, "sh": 262, "v0": 262, "enabl": 262, "disabl": 262, "uninstal": 262, "extens": 262, "vscode": [262, 264], "json": [262, 264], "you": [262, 263, 264, 272], "edit": [262, 267], "latest": [263, 272], "releas": [263, 273], "main": [263, 271], "branch": 263, "mhostett": [263, 273], "Or": [263, 264], "pre": 263, "To": 263, "activ": 263, "benefici": 263, "fashion": 263, "allow": [263, 264], "chang": [263, 274], "immedi": 263, "seen": 263, "upon": 263, "next": 263, "clone": 263, "wherev": 263, "flag": 263, "packag": [263, 272], "commit": 263, "pytest": [263, 264], "cov": 263, "xdist": 263, "benchmark": 263, "ini_opt": 264, "minvers": 264, "addopt": 264, "showloc": 264, "testpath": 264, "execut": 264, "test_psk": 264, "instruct": 264, "invok": 264, "infrastructur": 264, "debug": 264, "inlinebackend": [265, 266, 267, 268, 269, 270, 271], "print_figure_kwarg": [265, 266, 267, 268, 269, 270, 271], "facecolor": [265, 266, 267, 268, 269, 270, 271], "widget": [265, 266, 267, 268, 269, 270, 271], "tx": 265, "decai": [265, 267], "fillstyl": 265, "show": [265, 266, 267, 268, 269, 270, 271], "accomplish": [265, 270], "def": [265, 268, 270], "resample_sign": 265, "new_sample_r": 265, "ty": 265, "gca": [265, 270], "set_prop_cycl": [265, 270], "four": 265, "appear": 265, "fourth": 265, "do": 265, "315": 265, "32": 265, "00095883": 266, "00175012": 266, "00423921": 266, "0058825": 266, "006151": 266, "00474595": 266, "0017044": 266, "00254816": 266, "00721645": 266, "0112324": 266, "01342358": 266, "01273202": 266, "00845058": 266, "0004368": 266, "01073669": 266, "02372977": 266, "03650247": 266, "04650654": 266, "05098525": 266, "04734644": 266, "03355896": 266, "00851486": 266, "02769991": 266, "07367348": 266, "12670447": 266, "1830132": 266, "23810898": 266, "28727058": 266, "3260799": 266, "3509384": 266, "35949665": 266, "conveni": [266, 267], "evalu": [266, 267], "here": [266, 267], "47820725": 267, "78207252e": 267, "58172329e": 267, "10862468e": 267, "86109590e": 267, "21565653e": 267, "01140214e": 267, "57286400e": 267, "67772160e": 267, "47338728e": 267, "10422993e": 267, "89312837e": 267, "12240078e": 267, "03953322e": 267, "69685122e": 267, "63882791e": 267, "81474977e": 267, "47193366e": 267, "85259041e": 267, "15647504e": 267, "23851924e": 267, "42176895e": 267, "84684395e": 267, "42721858e": 267, "72236648e": 267, "14721649e": 267, "10813095e": 267, "94024315e": 267, "78877688e": 267, "74077567e": 267, "87820725": 267, "53637958": 267, "94724205": 267, "13335164": 267, "1455082": 267, "04436799": 267, "88708159": 267, "71930943": 267, "5719707": 267, "46154771": 267, "39261642": 267, "36139242": 267, "35935288": 267, "3763214": 267, "40270968": 267, "43085717": 267, "45557651": 267, "47410241": 267, "48566716": 267, "49090568": 267, "49124786": 267, "48840102": 267, "4839738": 267, "47925143": 267, "47510421": 267, "47199608": 267, "47005584": 267, "46917696": 267, "46911955": 267, "denomin": 267, "73910363": 267, "30614675j": 267, "plane": 267, "endpoint": 267, "092337035029908": 267, "71104892744724": 267, "684365018955985": 267, "37868538208862": 267, "1263714068241546": 267, "9993519409971622": 267, "1909320767063554": 267, "016796159999999997": 267, "46380627201679264": 267, "3806359704987118j": 267, "4988817673846036": 267, "333342139809402j": 267, "5543277195082319": 267, "22961005941718524j": 267, "5291527586053246": 267, "2828380420991956j": 267, "lyon": 267, "understand": 267, "3rd": 267, "insid": 267, "outsid": 267, "unstabl": 267, "n_symbol": 268, "els": 268, "pb": 268, "x_bb_rect": 268, "papr_bb_rect": 268, "x_pb_rect": 268, "papr_pb_rect": 268, "x_bb_0p1": 268, "papr_bb_0p1": 268, "x_pb_0p1": 268, "papr_pb_0p1": 268, "x_bb_0p5": 268, "papr_bb_0p5": 268, "x_pb_0p5": 268, "papr_pb_0p5": 268, "x_bb_0p9": 268, "papr_bb_0p9": 268, "x_pb_0p9": 268, "papr_pb_0p9": 268, "2f": 268, "rf": [268, 269], "512": 268, "sweep_alpha": 268, "bb_papr": 268, "pb_papr": 268, "bpsk_bb_papr": 268, "bpsk_pb_papr": 268, "qpsk_bb_papr": 268, "qpsk_pb_papr": 268, "psk8_bb_papr": 268, "psk8_pb_papr": 268, "psk16_bb_papr": 268, "psk16_pb_papr": 268, "configur": 269, "loop_filt": 269, "0x000002276d2bcc08": 269, "theta_0": 269, "phase_error": 269, "freq_estim": 269, "suptitl": [269, 270], "direct": [269, 273], "synthes": [269, 273], "dd": [269, 273], "avail": [269, 270, 272], "001": 269, "b_nt": 269, "0005": 269, "0125": 269, "015": 269, "0175": 269, "t_lock": 269, "analyze_psk": 270, "100_000": 270, "n0": 270, "tx_mf": 270, "1e6": 270, "bpsk_ber": 270, "bpsk_ser": 270, "qpsk_ber": 270, "qpsk_ser": 270, "psk8_ber": 270, "psk8_ser": 270, "psk16_ber": 270, "psk16_ser": 270, "simul": [270, 272], "1e0": 270, "psk8_bin": 270, "psk8_grai": 270, "wors": 270, "rc_0p1": 271, "rc_0p5": 271, "rc_0p9": 271, "pm": 271, "nearli": 271, "small": 271, "lobe": 271, "much": 271, "freqz": 271, "worn": 271, "whole": 271, "h_rc_0p1": 271, "h_rc_0p5": 271, "h_rc_0p9": 271, "p_rect": 271, "cumsum": 271, "p_rc_0p1": 271, "p_rc_0p5": 271, "p_rc_0p9": 271, "within": 271, "srrc_0p1": 271, "srrc_0p5": 271, "srrc_0p9": 271, "therefor": 271, "significantli": 271, "due": 271, "being": 271, "h_srrc_0p1": 271, "h_srrc_0p5": 271, "h_srrc_0p9": 271, "p_srrc_0p1": 271, "p_srrc_0p5": 271, "p_srrc_0p9": 271, "gauss_0p1": 271, "gauss_0p2": 271, "gauss_0p3": 271, "softwar": 272, "radio": 272, "goal": 272, "analyz": 272, "reli": 272, "interoper": 272, "veri": 272, "numba": 272, "acceler": 272, "computation": 272, "intens": 272, "addition": 272, "aim": 272, "replic": 272, "relev": 272, "toolbox": 272, "progress": 272, "someth": 272, "pleas": 272, "open": 272, "issu": 272, "pypi": 272, "api": [272, 274], "convers": [272, 273], "synchron": 272, "budget": [272, 273], "manipul": 272, "novemb": 273, "2023": 273, "move": 273, "abil": 273, "model": 273, "replac": 273, "pylint": 273, "black": 273, "improv": 273, "matt": 273, "hostett": 273, "septemb": 273, "sensibl": 273, "august": 273, "27": 273, "without": 273, "multirate_tap": 273, "polyphase_matrix": 273, "renam": 273, "superflu": 273, "translat": 273, "fix": [273, 274], "juli": 273, "firinterpol": 273, "impair": 273, "fpsl": 273, "helper": 273, "semant": 274, "major": 274, "minor": 274, "patch": 274, "introduc": 274, "featur": 274, "backward": 274, "compat": 274, "make": 274, "bug": 274, "There": 274, "guarante": 274, "them": 274, "thei": 274}, "objects": {"": [[3, 0, 0, 1, "sdr", ""]], "sdr": [[9, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [26, 1, 1, "", "Decimator", "Implements a polyphase decimating FIR filter."], [37, 1, 1, "", "Differentiator", "Implements a differentiator FIR filter."], [39, 1, 1, "", "EnergyDetector", "Implements an energy detector."], [44, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [51, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [68, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [75, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [94, 1, 1, "", "Integrator", "Implements an integrator IIR filter."], [96, 1, 1, "", "Interpolator", "Implements a polyphase interpolating FIR filter."], [107, 1, 1, "", "LinearModulation", "Implements linear phase/amplitude modulation with arbitrary symbol mapping."], [125, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [134, 1, 1, "", "MSK", "Implements minimum-shift keying (MSK) modulation and demodulation."], [136, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [144, 1, 1, "", "OQPSK", "Implements offset quadrature phase-shift keying (OQPSK) modulation and demodulation."], [148, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [156, 1, 1, "", "PiMPSK", "Implements $pi/M$ phase-shift keying ($pi/M$ PSK) modulation and demodulation."], [158, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [159, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [160, 1, 1, "", "ReplicaCorrelator", "Implements an clairvoyant replica-correlator detector."], [165, 1, 1, "", "Resampler", "Implements a polyphase rational resampling FIR filter."], [178, 5, 1, "", "albersheim", "Estimates the minimum required single-sample SNR, given $N_{NC}$ non-coherent combinations, to achieve a probability of detection $P_D$ and probability of false alarm $P_{FA}$. This function implements Albersheim's equation."], [179, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [180, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [181, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [182, 5, 1, "", "barker", "Returns the Barker code/sequence of length $N$."], [183, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [184, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [185, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [186, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [187, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [188, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [189, 5, 1, "", "db", "Converts from linear units to decibels."], [190, 5, 1, "", "design_bandpass_fir", "Designs a bandpass FIR filter impulse response $h[n]$ using the window method."], [191, 5, 1, "", "design_bandstop_fir", "Designs a bandstop FIR filter impulse response $h[n]$ using the window method."], [192, 5, 1, "", "design_highpass_fir", "Designs a highpass FIR filter impulse response $h[n]$ using the window method."], [193, 5, 1, "", "design_lowpass_fir", "Designs a lowpass FIR filter impulse response $h[n]$ using the window method."], [194, 5, 1, "", "design_multirate_fir", "Designs a multirate FIR filter impulse response $h[n]$ using the Kaiser window method."], [195, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [196, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [197, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [198, 5, 1, "", "downsample", "Downsamples the time-domain signal $x[n]$ by the factor $r$."], [199, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [200, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [201, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [202, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [203, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [204, 5, 1, "", "euclidean", "Measures the Euclidean distance between two signals $x[n]$ and $y[n]$."], [205, 5, 1, "", "evm", "Calculates the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [206, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [207, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [208, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [209, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [210, 5, 1, "", "half_sine", "Returns a half-sine pulse shape."], [211, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [212, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [213, 5, 1, "", "linear", "Converts from decibels to linear units."], [214, 5, 1, "", "mix", "Mixes the time-domain signal $x[n]$ with a complex exponential or real sinusoid."], [215, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [216, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [217, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [218, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [219, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [220, 5, 1, "", "percent", "Converts from a ratio to a percentage."], [242, 5, 1, "", "polyphase_decompose", "Decomposes the FIR filter taps $h_i$ into the polyphase matrix $H_{i, j}$ with $B$ phases."], [243, 5, 1, "", "ppb", "Converts from a ratio to parts per billion (ppb)."], [244, 5, 1, "", "ppm", "Converts from a ratio to parts per million (ppm)."], [245, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [246, 5, 1, "", "rectangular", "Returns a rectangular pulse shape."], [247, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [248, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [249, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [250, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [251, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [252, 5, 1, "", "to_complex_bb", "Converts the real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$ to a complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c} = f_{s,r}/2$."], [253, 5, 1, "", "to_real_pb", "Converts the complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$ to a real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r} = 2f_{s,c}$."], [254, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [255, 5, 1, "", "upsample", "Upsamples the time-domain signal $x[n]$ by the factor $r$."], [256, 5, 1, "", "wavelength", "Calculates the wavelength $lambda$ of an electromagnetic wave with frequency $f$."], [257, 5, 1, "", "zadoff_chu", "Returns the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.ClosedLoopPLL": [[10, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [11, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [12, 2, 1, "", "K0", "The NCO gain $K_0$."], [13, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [14, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [15, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [16, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [17, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [18, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [19, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [20, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [21, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [22, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [23, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [24, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [25, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[16, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [16, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [16, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [16, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [16, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[17, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[19, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[22, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.Decimator": [[27, 3, 1, "", "__call__", "Filters and decimates the input signal $x[n]$ with the polyphase FIR filter."], [28, 3, 1, "", "__init__", "Creates a polyphase FIR decimating filter."], [29, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [30, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [31, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [32, 2, 1, "", "method", "The method used to design the multirate filter."], [33, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [34, 2, 1, "", "rate", "The decimation rate $r$."], [35, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [36, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Decimator.__call__": [[27, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [27, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Decimator.__init__": [[28, 4, 2, "p-rate", "rate", "The decimation rate $r$."], [28, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [28, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.Differentiator": [[38, 3, 1, "", "__init__", "Creates a differentiator FIR filter."]], "sdr.Differentiator.__init__": [[38, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.EnergyDetector": [[40, 3, 1, "", "p_d", "Computes the probability of detection $P_D$."], [41, 3, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [42, 3, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [43, 3, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.EnergyDetector.p_d": [[40, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [40, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [40, 4, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.p_fa": [[41, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [41, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [41, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [41, 4, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.EnergyDetector.roc": [[42, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [42, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [42, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."], [42, 4, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.threshold": [[43, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [43, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [43, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [43, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.ErrorRate": [[45, 3, 1, "", "__init__", "Creates a new error rate tabulation object."], [46, 3, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [47, 3, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [48, 3, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [49, 3, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [50, 3, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[46, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [46, 4, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [46, 4, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[47, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[48, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[50, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[52, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the FIR filter."], [53, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [54, 3, 1, "", "__len__", "Returns the filter length $N + 1$."], [55, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [56, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [57, 2, 1, "", "delay", "The delay of the FIR filter $d = lfloor frac{N + 1}{2} rfloor$ in samples."], [58, 3, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [59, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the FIR filter."], [60, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(omega)$ of the FIR filter on a logarithmic frequency axis."], [61, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [62, 2, 1, "", "order", "The order of the FIR filter $N$."], [63, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [64, 2, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [65, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [66, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [67, 2, 1, "", "taps", "The feedforward taps $h_i$ for $i = 0,...,N$."]], "sdr.FIR.__call__": [[52, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [52, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.FIR.__init__": [[53, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$ for $i = 0,...N$."], [53, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FIR.frequency_response": [[59, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [59, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.frequency_response_log": [[60, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [60, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [60, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[61, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.step_response": [[65, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FarrowResampler": [[69, 3, 1, "", "__call__", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [70, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [71, 2, 1, "", "order", "The order of the filter."], [72, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [73, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [74, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__call__": [[69, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [69, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.__init__": [[70, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FarrowResampler.reset": [[72, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[76, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [77, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the IIR filter."], [78, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [79, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [80, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [81, 2, 1, "", "a_taps", "The feedback taps $a_j$ for $j = 0,...,N$."], [82, 2, 1, "", "b_taps", "The feedforward taps $b_i$ for $i = 0,...,M$."], [83, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the IIR filter."], [84, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(omega)$ of the IIR filter on a logarithmic frequency axis."], [85, 2, 1, "", "gain", "The gain of the IIR filter."], [86, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [87, 2, 1, "", "order", "The order of the IIR filter $N$."], [88, 2, 1, "", "poles", "The poles of the IIR filter."], [89, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [90, 2, 1, "", "state", "The filter state."], [91, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [92, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [93, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[76, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [76, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [76, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."], [76, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__call__": [[77, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.IIR.__init__": [[78, 4, 2, "p-a", "a", "The feedback coefficients $a_j$ for $j = 0,...,N$."], [78, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$ for $i = 0,...,M$."], [78, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.IIR.frequency_response": [[83, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [83, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[84, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [84, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [84, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[86, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[91, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.Integrator": [[95, 3, 1, "", "__init__", "Creates an integrating IIR filter."]], "sdr.Integrator.__init__": [[95, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.Interpolator": [[97, 3, 1, "", "__call__", "Interpolates and filters the input signal $x[n]$ with the polyphase FIR filter."], [98, 3, 1, "", "__init__", "Creates a polyphase FIR interpolating filter."], [99, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [100, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [101, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [102, 2, 1, "", "method", "The method used to design the multirate filter."], [103, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [104, 2, 1, "", "rate", "The interpolation rate $r$."], [105, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [106, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Interpolator.__call__": [[97, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [97, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Interpolator.__init__": [[98, 4, 2, "p-rate", "rate", "The interpolation rate $r$."], [98, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [98, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.LinearModulation": [[108, 3, 1, "", "__init__", "Creates a new linear phase/amplitude modulation object."], [109, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [110, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [111, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [112, 2, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [113, 3, 1, "", "decide_symbols", "Converts the received complex symbols $hat{a}[k]$ into decimal symbol decisions $hat{s}[k]$ using maximum-likelihood estimation (MLE)."], [114, 3, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples $hat{x}[n]$ into decimal symbol decisions $hat{s}[k]$ using matched filtering and maximum-likelihood estimation."], [115, 3, 1, "", "map_symbols", "Converts the decimal symbols $s[k]$ to complex symbols $a[k]$."], [116, 3, 1, "", "modulate", "Modulates the decimal symbols $s[k]$ into pulse-shaped complex samples $x[n]$."], [117, 2, 1, "", "order", "The modulation order $M = 2^k$."], [118, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [119, 2, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [120, 2, 1, "", "rx_filter", "The receive decimating matched filter. The filter coefficients are matched to the pulse shape $h[-n]^*$."], [121, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [122, 2, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [123, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."], [124, 2, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter. The filter coefficients are the pulse shape $h[n]$."]], "sdr.LinearModulation.__init__": [[108, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [108, 4, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees to apply to symbol_map."], [108, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [108, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [108, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [108, 4, 2, "p-symbol_map", "symbol_map", "The symbol mapping ${0, dots, M-1} mapsto mathbb{C}$. An $M$-length array whose indices are decimal symbols $s[k]$ and whose values are complex symbols $a[k]$, where $M$ is the modulation order."]], "sdr.LinearModulation.ber": [[111, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.LinearModulation.decide_symbols": [[113, 4, 2, "p-a_hat", "a_hat", "The received complex symbols $hat{a}[k]$."]], "sdr.LinearModulation.demodulate": [[114, 4, 2, "p-x_hat", "x_hat", "The received pulse-shaped complex samples $hat{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.LinearModulation.map_symbols": [[115, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to map, $0$ to $M-1$."]], "sdr.LinearModulation.modulate": [[116, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.LinearModulation.ser": [[121, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.LoopFilter": [[126, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [127, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [128, 3, 1, "", "__call__", "Filters the input signal $x[n]$."], [129, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [130, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [131, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [132, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [133, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__call__": [[128, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.LoopFilter.__init__": [[129, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [129, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [129, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [129, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.MSK": [[135, 3, 1, "", "__init__", "Creates a new MSK object."]], "sdr.MSK.__init__": [[135, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [135, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [135, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.NCO": [[137, 2, 1, "", "K0", "(Settable) The NCO gain $K_0$."], [138, 3, 1, "", "__call__", "Steps the NCO with variable frequency and/or phase signals."], [139, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [140, 2, 1, "", "increment", "(Settable) The constant phase accumulation $omega$ of the NCO in radians/sample."], [141, 2, 1, "", "offset", "(Settable) The absolute phase offset $theta$ of the NCO in radians."], [142, 3, 1, "", "reset", "Resets the NCO."], [143, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__call__": [[138, 4, 2, "p-freq", "freq", "The variable frequency signal $f[n]$ in radians/sample. This input signal varies the per-sample phase increment of the NCO. If None, the signal is all zeros."], [138, 4, 2, "p-phase", "phase", "The variable phase signal $p[n]$ in radians. This input signal varies the per-sample phase offset of the NCO. If None, the signal is all zeros."]], "sdr.NCO.__init__": [[139, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [139, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [139, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.NCO.step": [[143, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.OQPSK": [[145, 3, 1, "", "__init__", "Creates a new OQPSK object."], [146, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [147, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."]], "sdr.OQPSK.__init__": [[145, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [145, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [145, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [145, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [145, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [145, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK": [[149, 3, 1, "", "__init__", "Creates a new PSK object."], [150, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [151, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [152, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [153, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [154, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [155, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[149, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [149, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [149, 4, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [149, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [149, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [149, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [149, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[152, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [152, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.ser": [[154, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [154, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.PiMPSK": [[157, 3, 1, "", "__init__", "Creates a new $pi/M$ PSK object."]], "sdr.PiMPSK.__init__": [[157, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [157, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [157, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [157, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [157, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [157, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [157, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.Q": [[158, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[159, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.ReplicaCorrelator": [[161, 3, 1, "", "p_d", "Computes the probability of detection $P_D$."], [162, 3, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [163, 3, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [164, 3, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.ReplicaCorrelator.p_d": [[161, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [161, 4, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [161, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."]], "sdr.ReplicaCorrelator.p_fa": [[162, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [162, 4, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [162, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [162, 4, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.ReplicaCorrelator.roc": [[163, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [163, 4, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [163, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."]], "sdr.ReplicaCorrelator.threshold": [[164, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [164, 4, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [164, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [164, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.Resampler": [[166, 3, 1, "", "__call__", "Resamples and filters the input signal $x[n]$ with the polyphase FIR filter."], [167, 3, 1, "", "__init__", "Creates a polyphase FIR rational resampling filter."], [168, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [169, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [170, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [171, 2, 1, "", "down", "The decimation rate $Q$."], [172, 2, 1, "", "method", "The method used to design the multirate filter."], [173, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [174, 2, 1, "", "rate", "The resampling rate $P/Q$."], [175, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [176, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."], [177, 2, 1, "", "up", "The interpolation rate $P$."]], "sdr.Resampler.__init__": [[167, 4, 2, "p-down", "down", "The decimation rate $Q$."], [167, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [167, 4, 2, "p-taps", "taps", "The multirate filter design specification."], [167, 4, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.albersheim": [[178, 4, 2, "p-N_nc", "N_nc", "The number of non-coherent combinations $N_{NC} ge 1$."], [178, 4, 2, "p-p_d", "p_d", "The desired probability of detection $P_D$ in $(0, 1)$."], [178, 4, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{FA}$ in $(0, 1)$."]], "sdr.average_power": [[179, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the average power. The default is None, which computes the average power of the entire array."], [179, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [179, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[180, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [180, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [180, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [180, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[181, 4, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [181, 4, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.barker": [[182, 4, 2, "p-length", "length", "The length $N$ of the Barker code/sequence."], [182, 4, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[183, 4, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [183, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [183, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[184, 4, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[185, 4, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[186, 4, 2, "p-p", "p", "The probability $p$ of a bit flip."], [186, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [186, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[187, 4, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[188, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.db": [[189, 4, 2, "p-type", "type", "The type of input value or signal."], [189, 4, 2, "p-x", "x", "The input value or signal."]], "sdr.design_bandpass_fir": [[190, 4, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [190, 4, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [190, 4, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [190, 4, 2, "p-order", "order", "The filter order $N$. Must be even."], [190, 4, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_bandstop_fir": [[191, 4, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [191, 4, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [191, 4, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [191, 4, 2, "p-order", "order", "The filter order $N$. Must be even."], [191, 4, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_highpass_fir": [[192, 4, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [192, 4, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [192, 4, 2, "p-order", "order", "The filter order $N$. Must be even."], [192, 4, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_lowpass_fir": [[193, 4, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [193, 4, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [193, 4, 2, "p-order", "order", "The filter order $N$. Must be even."], [193, 4, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_multirate_fir": [[194, 4, 2, "p-A_stop", "A_stop", "The stopband attenuation $A_{text{stop}}$ in dB."], [194, 4, 2, "p-down", "down", "The decimation rate $Q$."], [194, 4, 2, "p-half_length", "half_length", "The half-length of the polyphase filters."], [194, 4, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.diff_decode": [[195, 4, 2, "p-y", "y", "The input encoded data $y[k]$."], [195, 4, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[196, 4, 2, "p-x", "x", "The input uncoded data $x[k]$."], [196, 4, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[197, 4, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [197, 4, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [197, 4, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [197, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [197, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.downsample": [[198, 4, 2, "p-rate", "rate", "The downsampling factor $r$."], [198, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.ebn0_to_esn0": [[199, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [199, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [199, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[200, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [200, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [200, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [200, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[201, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the energy. The default is None, which computes the energy of the entire array."], [201, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [201, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[202, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [202, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [202, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[203, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [203, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.euclidean": [[204, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the distance. The default is None, which computes the distance across the entire array."], [204, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [204, 4, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.evm": [[205, 4, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [205, 4, 2, "p-output", "output", "The output type of the EVM calculation."], [205, 4, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [205, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.frequency_offset": [[206, 4, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [206, 4, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [206, 4, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [206, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [206, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[207, 4, 2, "p-distance", "distance", "The distance $d$ in meters between the transmitter and receiver."], [207, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[208, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [208, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [208, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [208, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[209, 4, 2, "p-n", "n", "The length of the Gray code."]], "sdr.half_sine": [[210, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [210, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [210, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.hexdump": [[211, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [211, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[212, 4, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [212, 4, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [212, 4, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.linear": [[213, 4, 2, "p-type", "type", "The type of output value or signal."], [213, 4, 2, "p-x", "x", "The input value or signal in dB."]], "sdr.mix": [[214, 4, 2, "p-complex", "complex", "Indicates whether to mix by a complex exponential or real sinusoid."], [214, 4, 2, "p-freq", "freq", "The frequency $f$ of the sinusoid in Hz (or 1/samples if sample_rate=1). The frequency must satisfy $-f_s/2 le f le f_s/2$."], [214, 4, 2, "p-phase", "phase", "The phase $phi$ of the sinusoid in degrees."], [214, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal."], [214, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.pack": [[215, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [215, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [215, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[216, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the PAPR. The default is None, which computes the PAPR of the entire array."], [216, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[217, 4, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [217, 4, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [217, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[218, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the peak power. The default is None, which computes the peak power of the entire array."], [218, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [218, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[219, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [219, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.percent": [[220, 4, 2, "p-x", "x", "The input ratio."]], "sdr.plot": [[221, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [222, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [223, 5, 1, "", "eye", "Plots the eye diagram of the baseband modulated signal $x[n]$."], [224, 5, 1, "", "filter", "Plots the magnitude response $|H(omega)|^2$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [225, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [226, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [227, 5, 1, "", "magnitude_response", "Plots the magnitude response $|H(omega)|^2$ of the filter."], [228, 5, 1, "", "p_d", "Plots the probability of detection $P_D$ as a function of received SNR or ENR."], [229, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [230, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [231, 5, 1, "", "phase_response", "Plots the phase response $angle H(omega)$ of the filter."], [232, 5, 1, "", "phase_tree", "Plots the phase tree of a continuous-phase modulated (CPM) signal signal $x[n]$."], [233, 5, 1, "", "raster", "Plots a raster of the time-domain signal $x[n]$."], [234, 5, 1, "", "roc", "Plots the receiver operating characteristic (ROC) curve as a function of $P_{FA}$."], [235, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [236, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [237, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [238, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [239, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [240, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [241, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[221, 4, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [221, 4, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."], [221, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."]], "sdr.plot.constellation": [[222, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [222, 4, 2, "p-kwargs", "kwargs", "If heatmap=False, additional keyword arguments to pass to matplotlib.pyplot.scatter(). The following keyword arguments are set by default. The defaults may be overwritten."], [222, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [222, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.eye": [[223, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [223, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [223, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [223, 4, 2, "p-span", "span", "The number of symbols per raster."], [223, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [223, 4, 2, "p-x", "x", "The baseband modulated signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved."]], "sdr.plot.filter": [[224, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [224, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [224, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [224, 4, 2, "p-filter", "filter", "The filter definition."], [224, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [224, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[225, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [225, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [225, 4, 2, "p-filter", "filter", "The filter definition."], [225, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [225, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [225, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.impulse_response": [[226, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [226, 4, 2, "p-filter", "filter", "The filter definition."], [226, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.magnitude_response": [[227, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [227, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [227, 4, 2, "p-filter", "filter", "The filter definition."], [227, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [227, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [227, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.p_d": [[228, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [228, 4, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [228, 4, 2, "p-x", "x", "The SNR or ENR in dB."], [228, 4, 2, "p-x_label", "x_label", "The x-axis label to use."]], "sdr.plot.periodogram": [[229, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [229, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [229, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [229, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [229, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [229, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [229, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [229, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [229, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [229, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_delay": [[230, 4, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [230, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [230, 4, 2, "p-filter", "filter", "The filter definition."], [230, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [230, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [230, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_response": [[231, 4, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [231, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [231, 4, 2, "p-filter", "filter", "The filter definition."], [231, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [231, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [231, 4, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [231, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_tree": [[232, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [232, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [232, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [232, 4, 2, "p-span", "span", "The number of symbols per raster."], [232, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [232, 4, 2, "p-x", "x", "The baseband CPM signal $x[n]$."]], "sdr.plot.raster": [[233, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [233, 4, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\"."], [233, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.collections.LineCollection. The following keyword arguments are set by default. The defaults may be overwritten."], [233, 4, 2, "p-length", "length", "The length of each raster in samples. This must be provided if x is 1D."], [233, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [233, 4, 2, "p-stride", "stride", "The stride between each raster in samples. If None, the stride is set to length."], [233, 4, 2, "p-x", "x", "The time-domain signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved. If x is 1D, the rastering is determined by length and stride. If x is 2D, the rows correspond to each raster."]], "sdr.plot.roc": [[234, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to the plotting function defined by type."], [234, 4, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [234, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [234, 4, 2, "p-type", "type", "The type of plot to generate."]], "sdr.plot.ser": [[235, 4, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [235, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."], [235, 4, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.spectrogram": [[236, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [236, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [236, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.pcolormesh(). The following keyword arguments are set by default. The defaults may be overwritten."], [236, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [236, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [236, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [236, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [236, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [236, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[237, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [237, 4, 2, "p-filter", "filter", "The filter definition."], [237, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.symbol_map": [[238, 4, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [238, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot(). The following keyword arguments are set by default. The defaults may be overwritten."], [238, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [238, 4, 2, "p-modulation", "modulation", "The linear modulation or symbol map ${0, dots, M-1} mapsto mathbb{C}$."]], "sdr.plot.time_domain": [[239, 4, 2, "p-centered", "centered", "Indicates whether to center the x-axis about 0. This argument is mutually exclusive with offset."], [239, 4, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal. If \"color\", the real and imaginary parts will have different colors based on the current Matplotlib color cycle. If \"line\", the real part will have a solid line and the imaginary part will have a dashed line, and both lines will share the same color."], [239, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [239, 4, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. The units of the offset are $1/f_s$. This argument is mutually exclusive with centered."], [239, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [239, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[241, 4, 2, "p-filter", "filter", "The filter definition."], [241, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.polyphase_decompose": [[242, 4, 2, "p-phases", "phases", "The number of phases $B$."], [242, 4, 2, "p-taps", "taps", "The multirate FIR filter taps $h_i$."]], "sdr.ppb": [[243, 4, 2, "p-x", "x", "The input ratio."]], "sdr.ppm": [[244, 4, 2, "p-x", "x", "The input ratio."]], "sdr.raised_cosine": [[245, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [245, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [245, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [245, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rectangular": [[246, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [246, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [246, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[247, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [247, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[248, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [248, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [248, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [248, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[249, 4, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [249, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.snr_to_ebn0": [[250, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [250, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [250, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [250, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[251, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [251, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.to_complex_bb": [[252, 4, 2, "p-x_r", "x_r", "The real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$. If the length is odd, one zero is appended to the end."]], "sdr.to_real_pb": [[253, 4, 2, "p-x_c", "x_c", "The complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$."]], "sdr.unpack": [[254, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [254, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [254, 4, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.upsample": [[255, 4, 2, "p-rate", "rate", "The upsampling factor $r$."], [255, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.wavelength": [[256, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.zadoff_chu": [[257, 4, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [257, 4, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence. The root must be relatively prime to the length, i.e., $gcd(u, N) = 1$."], [257, 4, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence. When $q ne 0$, the returned sequence is a cyclic shift of the root-$u$ Zadoff-Chu sequence."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"convers": 0, "decibel": 0, "ratio": 0, "from": [0, 262, 263, 264], "e_b": 0, "n_0": 0, "e_": 0, "": [0, 266, 267], "n": [0, 265, 266, 267], "data": 1, "manipul": [1, 3], "detect": [2, 7], "detector": 2, "theoret": 2, "limit": 2, "digit": [3, 267], "signal": [3, 259, 265, 268], "process": 3, "fir": [3, 266], "filter": [3, 7, 266, 267, 269], "iir": [3, 267], "multir": 3, "arbitrari": [3, 265], "resampl": [3, 265], "correl": 3, "link": 4, "budget": 4, "channel": [4, 259], "capac": 4, "path": 4, "loss": 4, "antenna": 4, "measur": 5, "energi": 5, "power": [5, 268], "voltag": 5, "distanc": 5, "modul": [5, 6, 7], "linear": 6, "continu": 6, "phase": [6, 269, 270], "orthogon": 6, "puls": [6, 268, 271], "shape": [6, 268, 271], "symbol": [6, 270], "map": [6, 270], "encod": 6, "plot": [7, 268], "configur": [7, 262, 264], "time": [7, 268, 269], "domain": [7, 268, 269], "frequenc": [7, 266, 267, 268, 269], "spectral": 7, "estim": 7, "analysi": 7, "probabl": 8, "note": [9, 207, 227, 229, 236], "constructor": [9, 26, 37, 44, 51, 68, 75, 94, 96, 107, 125, 134, 136, 144, 148, 156, 165], "method": [9, 26, 37, 39, 44, 51, 68, 75, 94, 96, 107, 125, 134, 136, 144, 148, 156, 160, 165], "properti": [9, 26, 37, 51, 68, 75, 94, 96, 107, 125, 134, 136, 144, 148, 156, 165], "special": [26, 37, 51, 68, 75, 94, 96, 125, 136, 165], "string": [26, 37, 51, 75, 94, 96, 107, 134, 144, 148, 156, 165], "represent": [26, 37, 51, 75, 94, 96, 107, 134, 144, 148, 156, 165], "stream": [26, 37, 51, 75, 94, 96, 165], "mode": [26, 37, 51, 75, 94, 96, 165], "onli": [26, 37, 51, 75, 94, 96, 165], "see": [44, 46, 59, 60, 61, 65, 83, 84, 86, 91, 108, 111, 121, 135, 145, 149, 152, 154, 157, 158, 159, 188, 216, 255], "also": [44, 46, 59, 60, 61, 65, 83, 84, 86, 91, 108, 111, 121, 135, 145, 149, 152, 154, 157, 158, 159, 188, 216, 255], "warn": [198, 255], "sequenc": 258, "simul": 259, "model": 259, "impair": 259, "synchron": 260, "document": 261, "instal": [261, 262, 263, 264, 272], "build": 261, "doc": 261, "serv": 261, "format": 262, "run": [262, 264], "linter": 262, "formatt": 262, "pre": 262, "commit": 262, "v": [262, 264], "code": [262, 264], "pypi": 263, "github": 263, "edit": 263, "local": 263, "folder": 263, "dev": 263, "depend": 263, "unit": 264, "test": 264, "command": 264, "line": 264, "farrow": 265, "construct": 265, "an": [265, 266, 267], "input": 265, "x": 265, "t_": 265, "rate": [265, 270], "r": 265, "y": 265, "frac": 265, "upsampl": 265, "integ": 265, "downsampl": 265, "irrat": 265, "creat": [266, 267], "examin": [266, 267, 268], "impuls": [266, 267], "respons": [266, 267, 269], "h": [266, 267], "step": [266, 267, 269], "omega": [266, 267], "group": [266, 267], "delai": [266, 267], "tau_g": [266, 267], "fulli": [266, 267], "analyz": [266, 267, 269], "zero": 267, "pole": 267, "stabil": 267, "peak": 268, "averag": 268, "qpsk": [268, 270], "variou": 268, "across": [268, 269], "excess": 268, "bandwidth": 268, "lock": 269, "loop": 269, "design": 269, "proport": 269, "plu": 269, "integr": 269, "ppi": 269, "implement": 269, "pll": 269, "close": 269, "perform": 269, "compar": 269, "zeta": 269, "b_n": 269, "t": 269, "shift": 270, "kei": 270, "constel": 270, "bpsk": 270, "8": [270, 273], "psk": 270, "16": 270, "error": 270, "curv": 270, "bit": 270, "rais": 271, "cosin": 271, "squar": 271, "root": 271, "gaussian": 271, "sdr": 272, "featur": 272, "v0": 273, "0": 273, "9": 273, "chang": 273, "contributor": 273, "7": 273, "6": 273, "5": 273, "4": 273, "3": 273, "2": 273, "1": 273, "version": 274, "alpha": 274, "releas": 274, "beta": 274}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Conversions": [[0, "conversions"]], "Decibels": [[0, "decibels"]], "Ratios": [[0, "ratios"]], "From E_b/N_0": [[0, "from-e-b-n-0"]], "From E_s/N_0": [[0, "from-e-s-n-0"]], "From S/N": [[0, "from-s-n"]], "Data manipulation": [[1, "data-manipulation"]], "Detection": [[2, "detection"], [7, "detection"]], "Detectors": [[2, "detectors"]], "Theoretical limits": [[2, "theoretical-limits"]], "Digital signal processing": [[3, "digital-signal-processing"]], "FIR filtering": [[3, "fir-filtering"]], "IIR filtering": [[3, "iir-filtering"]], "Multirate filtering": [[3, "multirate-filtering"]], "Arbitrary resampling": [[3, "arbitrary-resampling"]], "Correlation": [[3, "correlation"]], "Signal manipulation": [[3, "signal-manipulation"]], "Link budgets": [[4, "link-budgets"]], "Channel capacity": [[4, "channel-capacity"]], "Path losses": [[4, "path-losses"]], "Antennas": [[4, "antennas"]], "Measurement": [[5, "measurement"]], "Energy": [[5, "energy"]], "Power": [[5, "power"]], "Voltage": [[5, "voltage"]], "Distance": [[5, "distance"]], "Modulation": [[5, "modulation"], [6, "modulation"], [7, "modulation"]], "Linear modulations": [[6, "linear-modulations"]], "Continuous-phase modulations": [[6, "continuous-phase-modulations"]], "Orthogonal modulations": [[6, "orthogonal-modulations"]], "Pulse shaping": [[6, "pulse-shaping"]], "Symbol mapping": [[6, "symbol-mapping"], [270, "symbol-mapping"]], "Symbol encoding": [[6, "symbol-encoding"]], "Plotting": [[7, "plotting"]], "Configuration": [[7, "configuration"], [262, "configuration"], [264, "configuration"]], "Time-domain": [[7, "time-domain"]], "Frequency-domain": [[7, "frequency-domain"]], "Spectral estimation": [[7, "spectral-estimation"]], "Filter analysis": [[7, "filter-analysis"]], "Probability": [[8, "probability"]], "Note": [[9, null], [207, null], [227, null], [229, null], [229, null], [236, null]], "Constructors": [[9, "constructors"], [26, "constructors"], [37, "constructors"], [44, "constructors"], [51, "constructors"], [68, "constructors"], [75, "constructors"], [94, "constructors"], [96, "constructors"], [107, "constructors"], [125, "constructors"], [134, "constructors"], [136, "constructors"], [144, "constructors"], [148, "constructors"], [156, "constructors"], [165, "constructors"]], "Methods": [[9, "methods"], [26, "methods"], [37, "methods"], [39, "methods"], [44, "methods"], [51, "methods"], [68, "methods"], [75, "methods"], [94, "methods"], [96, "methods"], [107, "methods"], [125, "methods"], [134, "methods"], [136, "methods"], [144, "methods"], [148, "methods"], [156, "methods"], [160, "methods"], [165, "methods"]], "Properties": [[9, "properties"], [26, "properties"], [37, "properties"], [51, "properties"], [68, "properties"], [75, "properties"], [94, "properties"], [96, "properties"], [107, "properties"], [125, "properties"], [134, "properties"], [136, "properties"], [144, "properties"], [148, "properties"], [156, "properties"], [165, "properties"]], "Special methods": [[26, "special-methods"], [37, "special-methods"], [51, "special-methods"], [68, "special-methods"], [75, "special-methods"], [94, "special-methods"], [96, "special-methods"], [125, "special-methods"], [136, "special-methods"], [165, "special-methods"]], "String representation": [[26, "string-representation"], [37, "string-representation"], [51, "string-representation"], [75, "string-representation"], [94, "string-representation"], [96, "string-representation"], [107, "string-representation"], [134, "string-representation"], [144, "string-representation"], [148, "string-representation"], [156, "string-representation"], [165, "string-representation"]], "Streaming mode only": [[26, "streaming-mode-only"], [37, "streaming-mode-only"], [51, "streaming-mode-only"], [75, "streaming-mode-only"], [94, "streaming-mode-only"], [96, "streaming-mode-only"], [165, "streaming-mode-only"]], "See also": [[44, null], [46, null], [59, null], [60, null], [61, null], [65, null], [83, null], [84, null], [86, null], [91, null], [108, null], [111, null], [121, null], [135, null], [145, null], [149, null], [152, null], [154, null], [157, null], [158, null], [159, null], [188, null], [216, null], [255, null]], "Warning": [[198, null], [255, null]], "Sequences": [[258, "sequences"]], "Simulation": [[259, "simulation"]], "Channel models": [[259, "channel-models"]], "Signal impairments": [[259, "signal-impairments"]], "Synchronization": [[260, "synchronization"]], "Documentation": [[261, "documentation"]], "Install": [[261, "install"], [262, "install"], [264, "install"]], "Build the docs": [[261, "build-the-docs"]], "Serve the docs": [[261, "serve-the-docs"]], "Formatting": [[262, "formatting"]], "Run the linter": [[262, "run-the-linter"]], "Run the formatter": [[262, "run-the-formatter"]], "Pre-commit": [[262, "pre-commit"]], "Run from VS Code": [[262, "run-from-vs-code"], [264, "run-from-vs-code"]], "Installation": [[263, "installation"], [272, "installation"]], "Install from PyPI": [[263, "install-from-pypi"]], "Install from GitHub": [[263, "install-from-github"]], "Editable install from local folder": [[263, "editable-install-from-local-folder"]], "Install the dev dependencies": [[263, "install-the-dev-dependencies"]], "Unit Tests": [[264, "unit-tests"]], "Run from the command line": [[264, "run-from-the-command-line"]], "Farrow arbitrary resampler": [[265, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[265, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[265, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[265, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[265, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[265, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[265, "downsample-by-an-irrational-rate"]], "FIR filters": [[266, "fir-filters"]], "Create an FIR filter": [[266, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[266, "examine-the-impulse-response-h-n"], [267, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[266, "examine-the-step-response-s-n"], [267, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[266, "examine-the-frequency-response-h-omega"], [267, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[266, "examine-the-group-delay-tau-g-omega"], [267, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[266, "fully-analyze-a-fir-filter"]], "IIR filters": [[267, "iir-filters"]], "Create an IIR filter": [[267, "create-an-iir-filter"]], "Examine the zeros and poles": [[267, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[267, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[267, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[268, "peak-to-average-power"]], "QPSK signal with various pulse shapes": [[268, "qpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[268, "examine-time-domain"]], "Examine frequency domain": [[268, "examine-frequency-domain"]], "Plot across excess bandwidth": [[268, "plot-across-excess-bandwidth"]], "Phase-locked loops": [[269, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[269, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[269, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[269, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[269, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[269, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[269, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[269, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[270, "phase-shift-keying"]], "Constellations": [[270, "constellations"]], "BPSK": [[270, "bpsk"]], "QPSK": [[270, "qpsk"]], "8-PSK": [[270, "id1"]], "16-PSK": [[270, "id2"]], "Error rate curves": [[270, "error-rate-curves"]], "Bit error rate curves": [[270, "bit-error-rate-curves"]], "Symbol error rate curves": [[270, "symbol-error-rate-curves"]], "Pulse shapes": [[271, "pulse-shapes"]], "Raised cosine": [[271, "raised-cosine"]], "Square-root raised cosine": [[271, "square-root-raised-cosine"]], "Gaussian": [[271, "gaussian"]], "sdr": [[272, "sdr"]], "Features": [[272, "features"]], "v0.0": [[273, "v0-0"]], "v0.0.9": [[273, "v0-0-9"]], "Changes": [[273, "changes"], [273, "id1"], [273, "id3"], [273, "id5"], [273, "id7"], [273, "id9"], [273, "id11"], [273, "id13"], [273, "id15"]], "Contributors": [[273, "contributors"], [273, "id2"], [273, "id4"], [273, "id6"], [273, "id8"], [273, "id10"], [273, "id12"], [273, "id14"], [273, "id16"]], "v0.0.8": [[273, "v0-0-8"]], "v0.0.7": [[273, "v0-0-7"]], "v0.0.6": [[273, "v0-0-6"]], "v0.0.5": [[273, "v0-0-5"]], "v0.0.4": [[273, "v0-0-4"]], "v0.0.3": [[273, "v0-0-3"]], "v0.0.2": [[273, "v0-0-2"]], "v0.0.1": [[273, "v0-0-1"]], "Versioning": [[274, "versioning"]], "Alpha releases": [[274, "alpha-releases"]], "Beta releases": [[274, "beta-releases"]]}, "indexentries": {"module": [[3, "module-sdr"]], "sdr": [[3, "module-sdr"]]}, "docurls": ["api/conversions/", "api/data-manipulation/", "api/detection/", "api/dsp/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.Decimator/", "api/sdr.Decimator.__call__/", "api/sdr.Decimator.__init__/", "api/sdr.Decimator.__repr__/", "api/sdr.Decimator.__str__/", "api/sdr.Decimator.delay/", "api/sdr.Decimator.method/", "api/sdr.Decimator.polyphase_taps/", "api/sdr.Decimator.rate/", "api/sdr.Decimator.reset/", "api/sdr.Decimator.taps/", "api/sdr.Differentiator/", "api/sdr.Differentiator.__init__/", "api/sdr.EnergyDetector/", "api/sdr.EnergyDetector.p_d/", "api/sdr.EnergyDetector.p_fa/", "api/sdr.EnergyDetector.roc/", "api/sdr.EnergyDetector.threshold/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__call__/", "api/sdr.FIR.__init__/", "api/sdr.FIR.__len__/", "api/sdr.FIR.__repr__/", "api/sdr.FIR.__str__/", "api/sdr.FIR.delay/", "api/sdr.FIR.flush/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.frequency_response_log/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.reset/", "api/sdr.FIR.state/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__call__/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__call__/", "api/sdr.IIR.__init__/", "api/sdr.IIR.__repr__/", "api/sdr.IIR.__str__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.state/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.Integrator/", "api/sdr.Integrator.__init__/", "api/sdr.Interpolator/", "api/sdr.Interpolator.__call__/", "api/sdr.Interpolator.__init__/", "api/sdr.Interpolator.__repr__/", "api/sdr.Interpolator.__str__/", "api/sdr.Interpolator.delay/", "api/sdr.Interpolator.method/", "api/sdr.Interpolator.polyphase_taps/", "api/sdr.Interpolator.rate/", "api/sdr.Interpolator.reset/", "api/sdr.Interpolator.taps/", "api/sdr.LinearModulation/", "api/sdr.LinearModulation.__init__/", "api/sdr.LinearModulation.__repr__/", "api/sdr.LinearModulation.__str__/", "api/sdr.LinearModulation.ber/", "api/sdr.LinearModulation.bps/", "api/sdr.LinearModulation.decide_symbols/", "api/sdr.LinearModulation.demodulate/", "api/sdr.LinearModulation.map_symbols/", "api/sdr.LinearModulation.modulate/", "api/sdr.LinearModulation.order/", "api/sdr.LinearModulation.phase_offset/", "api/sdr.LinearModulation.pulse_shape/", "api/sdr.LinearModulation.rx_filter/", "api/sdr.LinearModulation.ser/", "api/sdr.LinearModulation.sps/", "api/sdr.LinearModulation.symbol_map/", "api/sdr.LinearModulation.tx_filter/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__call__/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.MSK/", "api/sdr.MSK.__init__/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__call__/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.OQPSK/", "api/sdr.OQPSK.__init__/", "api/sdr.OQPSK.__repr__/", "api/sdr.OQPSK.__str__/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.__repr__/", "api/sdr.PSK.__str__/", "api/sdr.PSK.ber/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.PiMPSK/", "api/sdr.PiMPSK.__init__/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.ReplicaCorrelator/", "api/sdr.ReplicaCorrelator.p_d/", "api/sdr.ReplicaCorrelator.p_fa/", "api/sdr.ReplicaCorrelator.roc/", "api/sdr.ReplicaCorrelator.threshold/", "api/sdr.Resampler/", "api/sdr.Resampler.__call__/", "api/sdr.Resampler.__init__/", "api/sdr.Resampler.__repr__/", "api/sdr.Resampler.__str__/", "api/sdr.Resampler.delay/", "api/sdr.Resampler.down/", "api/sdr.Resampler.method/", "api/sdr.Resampler.polyphase_taps/", "api/sdr.Resampler.rate/", "api/sdr.Resampler.reset/", "api/sdr.Resampler.taps/", "api/sdr.Resampler.up/", "api/sdr.albersheim/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.barker/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.db/", "api/sdr.design_bandpass_fir/", "api/sdr.design_bandstop_fir/", "api/sdr.design_highpass_fir/", "api/sdr.design_lowpass_fir/", "api/sdr.design_multirate_fir/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.downsample/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.euclidean/", "api/sdr.evm/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.half_sine/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.linear/", "api/sdr.mix/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.percent/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.eye/", "api/sdr.plot.filter/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.magnitude_response/", "api/sdr.plot.p_d/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.phase_tree/", "api/sdr.plot.raster/", "api/sdr.plot.roc/", "api/sdr.plot.ser/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.polyphase_decompose/", "api/sdr.ppb/", "api/sdr.ppm/", "api/sdr.raised_cosine/", "api/sdr.rectangular/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.to_complex_bb/", "api/sdr.to_real_pb/", "api/sdr.unpack/", "api/sdr.upsample/", "api/sdr.wavelength/", "api/sdr.zadoff_chu/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/formatting/", "development/installation/", "development/unit-tests/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})