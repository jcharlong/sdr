Search.setIndex({"titles": ["Conversions", "Data manipulation", "Filtering", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "Resampling", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.DDS", "sdr.DDS.__init__", "sdr.DDS.nco", "sdr.DDS.process", "sdr.DDS.reset", "sdr.DDS.step", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__init__", "sdr.FIR.delay", "sdr.FIR.filter", "sdr.FIR.frequency_response", "sdr.FIR.frequency_response_log", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.reset", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FIRInterpolator", "sdr.FIRInterpolator.__init__", "sdr.FIRInterpolator.filter", "sdr.FIRInterpolator.polyphase_taps", "sdr.FIRInterpolator.rate", "sdr.FIRInterpolator.reset", "sdr.FIRInterpolator.streaming", "sdr.FIRInterpolator.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.resample", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__init__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.filter", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.filter", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.process", "sdr.NCO.reset", "sdr.NCO.step", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.ber", "sdr.PSK.bps", "sdr.PSK.demodulate", "sdr.PSK.modulate", "sdr.PSK.order", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.Q", "sdr.Qinv", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.barker", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.evm", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.hexdump", "sdr.iq_imbalance", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.filter", "sdr.plot.frequency_response", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.ser", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.raised_cosine", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.unpack", "sdr.zadoff_chu", "Sequences", "Simulation", "Synchronization", "Documentation", "Installation", "Linter", "Unit Tests", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181], "ebn0_to_esn0": [0, 107, 124, 177, 179, 180], "ebn0": [0, 6, 99, 101, 113, 124, 125, 141, 177], "arraylik": [0, 1, 3, 4, 5, 6, 7, 26, 29, 32, 34, 39, 40, 42, 51, 52, 53, 59, 62, 63, 66, 67, 68, 71, 82, 87, 91, 96, 99, 100, 101, 103, 104, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 160, 161, 162, 163, 166], "bp": [0, 99, 102, 124, 125, 127, 161, 177], "int": [0, 1, 5, 26, 31, 32, 34, 35, 38, 39, 41, 43, 44, 45, 46, 48, 51, 52, 55, 59, 61, 66, 72, 73, 75, 76, 79, 91, 98, 99, 100, 102, 105, 112, 114, 117, 121, 122, 124, 125, 127, 128, 132, 133, 134, 136, 143, 144, 145, 146, 147, 148, 149, 151, 152, 157, 159, 161, 162, 163, 164, 165, 177], "ndarrai": [0, 1, 3, 5, 7, 26, 29, 31, 32, 37, 39, 42, 43, 44, 45, 48, 50, 51, 53, 54, 58, 59, 62, 65, 66, 69, 70, 71, 72, 73, 75, 77, 79, 81, 82, 87, 91, 96, 98, 99, 101, 103, 104, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 127, 128, 130, 131, 132, 133, 135, 136, 157, 159, 160, 161, 162, 163, 164, 165, 166], "convert": [0, 124, 125, 127, 128, 134, 161, 162], "ebn0_to_snr": [0, 125, 179, 180], "esn0_to_ebn0": [0, 101, 127, 179, 180], "esn0": [0, 6, 99, 107, 127, 128, 150, 177], "esn0_to_snr": [0, 128, 177, 179, 180], "sp": [0, 5, 125, 128, 132, 157, 159, 161, 162, 175, 177, 178], "1": [0, 6, 7, 9, 16, 19, 23, 25, 26, 27, 32, 43, 44, 51, 54, 58, 66, 67, 72, 73, 82, 85, 86, 91, 93, 99, 100, 101, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 172, 173, 174, 175, 176, 177, 178, 181], "snr_to_ebn0": [0, 101, 113, 161, 179, 180], "snr": [0, 3, 32, 34, 35, 36, 37, 38, 112, 113, 161, 162, 166, 177, 180], "snr_to_esn0": [0, 107, 162, 179, 180], "hexdump": [1, 32, 134, 179, 180], "byte": [1, 134], "width": [1, 134], "16": [1, 101, 107, 108, 124, 125, 127, 134, 141, 150, 161, 162, 175, 180], "str": [1, 134, 147, 151], "return": [1, 5, 9, 17, 19, 22, 23, 29, 31, 32, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 48, 53, 62, 66, 71, 72, 73, 75, 79, 87, 96, 98, 101, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 157, 158, 159, 160, 161, 162, 163, 164, 165, 173, 174, 175, 177], "specifi": [1, 32, 35, 36, 38, 112, 113, 123, 134, 173, 174], "pack": [1, 32, 34, 134, 136, 179, 180], "x": [1, 4, 5, 6, 7, 9, 26, 29, 32, 34, 39, 42, 51, 53, 59, 62, 66, 71, 82, 87, 91, 96, 99, 103, 104, 109, 110, 111, 112, 115, 118, 120, 121, 122, 123, 126, 129, 130, 135, 136, 137, 139, 140, 142, 143, 144, 145, 147, 148, 149, 151, 153, 154, 158, 160, 163, 166, 169, 175, 176, 177, 181], "bpe": [1, 136, 163], "binari": [1, 3, 5, 100, 108, 114, 115, 116, 117, 118, 119, 123, 136, 153, 163, 166, 177], "arrai": [1, 32, 54, 58, 100, 108, 114, 115, 117, 118, 121, 122, 123, 133, 136, 154, 163, 174], "an": [1, 2, 3, 39, 45, 66, 67, 68, 75, 100, 101, 107, 113, 136, 141, 146, 150, 163, 169, 170, 179], "multipl": [1, 136, 163, 177], "bit": [1, 4, 6, 32, 34, 37, 99, 100, 101, 102, 108, 113, 115, 116, 118, 119, 124, 125, 127, 134, 136, 141, 161, 163, 180], "per": [1, 29, 96, 99, 100, 102, 112, 113, 124, 125, 127, 128, 130, 132, 134, 136, 157, 159, 160, 161, 162, 163, 175, 178], "element": [1, 134, 136, 163], "unpack": [1, 32, 34, 134, 163, 177, 179, 180], "class": [2, 4, 8, 9, 26, 32, 34, 35, 36, 37, 38, 39, 51, 59, 66, 82, 91, 99, 167, 173, 174, 177, 179], "fir": [2, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 143, 144, 145, 146, 148, 149, 152, 156, 175, 179, 180], "implement": [2, 5, 8, 26, 39, 51, 59, 66, 82, 88, 91, 99, 167, 172], "finit": [2, 39, 51, 180], "impuls": [2, 6, 39, 45, 51, 66, 75, 132, 143, 146, 154, 178, 180], "respons": [2, 6, 39, 43, 44, 45, 48, 51, 66, 72, 73, 75, 79, 132, 143, 144, 145, 146, 149, 152, 178, 180], "firinterpol": [2, 51, 52, 53, 54, 55, 56, 57, 58, 175, 177, 179, 180], "polyphas": [2, 51, 52, 54, 58], "interpol": [2, 51, 52, 53, 55, 180], "iir": [2, 6, 9, 18, 44, 45, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 88, 143, 144, 145, 146, 148, 149, 152, 156, 173, 176, 179, 180], "infinit": [2, 66, 180], "awgn_capac": [3, 113, 179, 180], "calcul": [3, 4, 113, 116, 119, 129, 131, 138], "addit": [3, 112, 113, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 166], "white": [3, 112, 113, 166], "gaussian": [3, 5, 112, 113, 132, 166, 179, 180], "nois": [3, 9, 10, 11, 16, 22, 32, 34, 35, 36, 37, 38, 82, 85, 89, 101, 107, 112, 113, 124, 125, 127, 128, 141, 150, 151, 161, 162, 166, 176], "awgn": [3, 101, 107, 112, 113, 129, 141, 142, 150, 166, 177, 179, 180], "bec_capac": [3, 116, 179, 180], "p": [3, 7, 109, 110, 115, 116, 118, 119, 123, 166], "erasur": [3, 115, 116, 123, 166], "bec": [3, 115, 116, 123, 166, 179, 180], "bsc_capac": [3, 119, 179, 180], "symmetr": [3, 118, 119, 123, 166], "bsc": [3, 118, 119, 123, 166, 179, 180], "fspl": [3, 131, 179], "d": [3, 131, 138, 168, 169, 179], "f": [3, 17, 19, 39, 43, 44, 66, 72, 73, 112, 130, 131, 132, 138, 160, 164, 172, 173, 174, 175, 176, 177, 178], "free": [3, 131], "space": [3, 44, 73, 131], "db": [3, 9, 20, 22, 32, 34, 35, 36, 38, 101, 107, 112, 113, 124, 125, 127, 128, 129, 131, 132, 135, 137, 138, 141, 142, 150, 161, 162, 175, 177, 178], "parabolic_antenna": [3, 138, 179, 180], "freq": [3, 130, 138, 166, 172, 176], "tupl": [3, 32, 34, 37, 39, 43, 44, 66, 72, 73, 138, 142, 153], "gain": [3, 9, 12, 13, 14, 15, 16, 26, 27, 66, 67, 74, 82, 83, 84, 85, 91, 92, 93, 132, 138, 176], "g": [3, 37, 138, 169], "beamwidth": [3, 138], "theta": [3, 6, 27, 91, 93, 95, 138, 149], "parabol": [3, 138], "reflector": [3, 138], "float": [4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32, 34, 35, 36, 38, 43, 44, 59, 62, 66, 67, 72, 73, 74, 82, 83, 84, 85, 86, 89, 91, 92, 93, 94, 95, 99, 100, 106, 111, 112, 113, 115, 118, 120, 126, 129, 130, 132, 135, 137, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 151, 153, 154, 157, 158, 159, 160, 166], "time": [4, 9, 16, 17, 19, 20, 21, 22, 23, 39, 66, 82, 85, 99, 111, 112, 120, 123, 126, 128, 130, 132, 135, 137, 139, 140, 143, 147, 151, 154, 157, 158, 159, 160, 162, 166, 172, 173, 174, 178, 179], "domain": [4, 111, 112, 120, 126, 130, 135, 137, 139, 140, 143, 147, 151, 154, 158, 160, 166, 179], "signal": [4, 6, 9, 17, 19, 22, 23, 26, 29, 32, 34, 35, 36, 37, 38, 39, 42, 51, 53, 59, 62, 66, 71, 82, 87, 91, 96, 98, 111, 112, 113, 120, 124, 125, 126, 127, 128, 130, 131, 132, 135, 137, 138, 139, 140, 147, 151, 154, 158, 160, 161, 162, 173, 174, 176, 178, 179, 180], "n": [4, 5, 6, 7, 9, 26, 29, 31, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 48, 51, 53, 59, 62, 66, 71, 72, 73, 75, 76, 79, 82, 87, 91, 96, 98, 109, 110, 111, 112, 113, 114, 117, 120, 123, 124, 125, 126, 127, 128, 129, 130, 133, 135, 137, 139, 140, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 158, 160, 161, 162, 164, 165, 166, 176, 178, 179], "average_pow": [4, 111, 137, 179, 180], "averag": [4, 32, 111, 112, 113, 129, 137, 147], "papr": [4, 137, 175, 179, 180], "peak": [4, 120, 129, 137, 139, 140], "ratio": [4, 22, 32, 34, 35, 36, 37, 38, 101, 107, 112, 113, 124, 125, 127, 128, 137, 141, 150, 161, 162], "peak_pow": [4, 137, 139, 179, 180], "crest_factor": [4, 120, 137, 179, 180], "crest": [4, 120], "factor": [4, 9, 16, 25, 82, 85, 86, 120, 176], "peak_voltag": [4, 120, 140, 179, 180], "rms_voltag": [4, 120, 158, 179, 180], "root": [4, 5, 129, 154, 158, 159, 164, 165, 173], "mean": [4, 129, 147, 158, 178], "squar": [4, 5, 129, 131, 138, 154, 158, 159, 173], "rm": [4, 120, 129, 158], "errorr": [4, 32, 33, 34, 35, 36, 37, 38, 177, 179, 180], "A": [4, 9, 17, 19, 20, 21, 22, 23, 25, 32, 39, 82, 117, 133, 134, 135, 138, 157, 159, 167, 176], "error": [4, 6, 9, 15, 16, 22, 32, 33, 34, 36, 37, 38, 82, 85, 99, 101, 107, 119, 129, 141, 150, 176, 180], "rate": [4, 6, 9, 16, 24, 32, 33, 34, 36, 37, 43, 44, 51, 52, 53, 55, 59, 62, 72, 73, 99, 101, 107, 124, 125, 127, 130, 141, 143, 144, 145, 147, 148, 149, 150, 151, 154, 160, 161, 166, 180], "ber": [4, 6, 32, 99, 101, 141, 177, 179, 180], "symbol": [4, 6, 32, 34, 37, 99, 100, 101, 102, 103, 104, 107, 108, 112, 124, 125, 127, 128, 129, 130, 132, 142, 150, 153, 157, 159, 161, 162, 175, 178, 179, 180], "ser": [4, 6, 32, 99, 107, 150, 177, 179, 180], "evm": [4, 129, 179], "x_hat": [4, 6, 32, 34, 99, 103, 129, 142, 177], "ref": [4, 129, 132], "vector": [4, 32, 63, 129, 147, 151], "magnitud": [4, 114, 129, 164], "complex": [4, 6, 26, 29, 31, 99, 100, 103, 104, 108, 112, 113, 129, 135, 142, 153, 166, 172, 173, 174, 177], "hat": [4, 6, 34, 99, 103, 129, 142, 153], "k": [4, 5, 6, 34, 99, 100, 102, 103, 104, 105, 121, 122, 124, 125, 127, 129, 142, 153, 161, 175, 178], "psk": [5, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 129, 130, 135, 141, 142, 150, 153, 160, 175, 179, 180], "phase": [5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107, 108, 130, 135, 148, 149, 166], "shift": [5, 99, 101, 106, 107, 108, 164, 165, 173, 174], "kei": [5, 99, 101, 106, 107, 108], "demodul": [5, 99, 103, 177], "time_bandwidth": [5, 132], "span": [5, 132, 157, 159, 175, 178], "raised_cosin": [5, 157, 178, 179, 180], "alpha": [5, 132, 155, 157, 159, 175, 178], "rais": [5, 154, 157, 159, 173], "cosin": [5, 154, 157, 159, 173], "rc": [5, 157], "root_raised_cosin": [5, 143, 144, 145, 146, 148, 149, 152, 154, 156, 159, 173, 175, 177, 178, 179, 180], "srrc": [5, 154, 159, 175], "binary_cod": [5, 117, 179, 180], "gener": [5, 112, 117, 133, 168, 177], "code": [5, 100, 108, 114, 117, 124, 125, 127, 133, 142, 153, 161, 165, 169, 177, 180], "length": [5, 45, 48, 100, 114, 117, 132, 133, 143, 146, 147, 151, 152, 157, 159, 164, 165, 172, 175, 178], "2": [5, 9, 17, 19, 22, 32, 43, 44, 51, 54, 58, 72, 73, 99, 100, 101, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 169, 171, 172, 173, 174, 175, 176, 177, 178], "gray_cod": [5, 133, 179, 180], "grai": [5, 100, 108, 133, 142, 153, 177], "diff_decod": [5, 121, 122, 179, 180], "y": [5, 26, 29, 31, 39, 42, 51, 53, 62, 66, 71, 82, 87, 91, 96, 98, 112, 115, 118, 121, 122, 123, 130, 135, 142, 151, 153, 154, 160, 176, 177], "y_prev": [5, 121, 122], "0": [5, 6, 7, 16, 26, 27, 32, 39, 43, 44, 51, 54, 58, 66, 67, 72, 73, 85, 91, 93, 99, 100, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 125, 126, 128, 129, 130, 132, 133, 135, 136, 138, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 172, 173, 174, 175, 176, 177, 178, 181], "differenti": [5, 101, 107, 121, 122, 180], "decod": [5, 121], "input": [5, 9, 17, 19, 22, 23, 26, 29, 39, 40, 42, 45, 48, 51, 52, 53, 59, 60, 62, 63, 66, 67, 68, 71, 75, 79, 82, 87, 91, 96, 99, 101, 107, 109, 112, 113, 115, 116, 118, 119, 121, 122, 123, 136, 146, 152, 163, 166, 173, 174, 176], "data": [5, 121, 122, 134, 136, 163, 179], "diff_encod": [5, 101, 107, 121, 122, 179, 180], "use_styl": [6, 155], "appli": [6, 51, 130, 135, 142, 153, 155, 160, 166], "": [6, 9, 17, 19, 20, 21, 23, 24, 34, 35, 36, 37, 38, 39, 43, 44, 48, 66, 72, 73, 79, 99, 103, 104, 112, 113, 125, 128, 129, 130, 135, 142, 143, 144, 145, 147, 148, 149, 151, 152, 154, 155, 160, 161, 162, 171, 172, 175, 177, 179], "default": [6, 45, 48, 100, 108, 151, 155, 177], "matplotlib": [6, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 172, 173, 174, 175, 176, 177, 178, 179], "rcparam": [6, 155, 172, 176], "time_domain": [6, 112, 154, 175, 177, 178, 179, 180], "sample_r": [6, 9, 16, 24, 43, 44, 72, 73, 130, 143, 144, 145, 147, 148, 149, 151, 154, 172, 176, 178], "periodogram": [6, 147, 175, 179, 180], "estim": [6, 99, 103, 147, 151, 176], "power": [6, 99, 111, 112, 113, 129, 137, 138, 139, 147, 178, 179], "spectral": [6, 147, 175, 178], "densiti": [6, 22, 147, 175, 178], "p_": [6, 101, 107, 111, 112, 123, 129, 137, 139, 141, 147, 150], "xx": [6, 147], "us": [6, 26, 28, 40, 52, 59, 60, 67, 68, 82, 88, 99, 103, 113, 116, 119, 129, 134, 136, 142, 143, 146, 147, 151, 152, 163, 168, 169, 170, 171, 173, 174, 177, 178, 179, 181], "welch": [6, 147, 151], "method": [6, 147, 151, 173, 174], "spectrogram": [6, 151, 179, 180], "kwarg": [6, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156], "function": [6, 7, 9, 18, 39, 66, 67, 82, 109, 110, 113, 132, 141, 147, 150, 151, 173, 174, 176, 178, 179, 180], "e_b": [6, 34, 35, 36, 37, 38, 99, 101, 113, 124, 125, 127, 141, 161, 179], "n_0": [6, 22, 34, 35, 36, 37, 38, 99, 101, 107, 112, 113, 124, 125, 127, 128, 129, 141, 142, 150, 161, 162, 177, 179], "constel": [6, 106, 112, 129, 130, 135, 142, 160, 164, 179, 180], "heatmap": [6, 142, 177], "bool": [6, 39, 40, 49, 51, 52, 57, 59, 60, 64, 66, 67, 68, 80, 101, 107, 142, 149, 153], "fals": [6, 39, 40, 51, 52, 59, 60, 66, 67, 68, 101, 107, 115, 118, 123, 142, 174, 178], "e_": [6, 34, 35, 36, 37, 38, 99, 107, 112, 113, 124, 127, 128, 129, 142, 150, 162, 177, 179], "symbol_map": [6, 99, 106, 108, 129, 153, 154, 177, 179, 180], "map": [6, 99, 108, 129, 153, 179, 180], "b": [6, 66, 68, 113, 132, 134, 143, 144, 145, 146, 148, 149, 152, 156, 168, 178], "h": [6, 39, 40, 43, 44, 45, 51, 66, 72, 73, 75, 82, 132, 143, 144, 146, 175, 176, 178], "omega": [6, 27, 91, 93, 94, 143, 144, 145, 148, 149, 176], "step": [6, 26, 29, 31, 39, 48, 66, 79, 91, 96, 98, 143, 152], "zero": [6, 51, 63, 66, 67, 81, 82, 136, 143, 144, 145, 146, 148, 149, 152, 154, 156, 173, 175, 176, 178], "pole": [6, 66, 67, 77, 143, 144, 145, 146, 148, 149, 152, 156, 173], "frequency_respons": [6, 39, 43, 44, 66, 72, 73, 144, 173, 174, 176, 178, 179, 180], "group_delai": [6, 145, 173, 174, 179, 180], "group": [6, 145], "delai": [6, 26, 39, 41, 59, 82, 91, 121, 122, 145, 148, 176], "tau_g": [6, 145], "impulse_respons": [6, 39, 45, 66, 75, 132, 146, 157, 159, 173, 174, 178, 179, 180], "phase_delai": [6, 148, 179, 180], "tau_": [6, 148], "phi": [6, 99, 100, 106, 130, 135, 148], "phase_respons": [6, 149, 179, 180], "step_respons": [6, 39, 48, 66, 79, 152, 173, 174, 176, 179, 180], "zeros_pol": [6, 156, 174, 179, 180], "q": [7, 109, 110, 164, 179, 180], "comput": [7, 99, 101, 107, 109, 110, 112, 131, 173, 174, 176, 178], "complementari": [7, 109, 110], "cumul": [7, 109, 110], "distribut": [7, 109, 110], "standard": [7, 109, 110], "normal": [7, 9, 11, 16, 82, 85, 89, 109, 110, 129, 132, 151, 176, 178], "mathcal": [7, 109, 110, 112, 123], "qinv": [7, 109, 110, 179, 180], "invers": [7, 110], "farrowresampl": [8, 59, 60, 61, 62, 63, 64, 65, 172, 179, 180], "cubic": [8, 59], "farrow": [8, 59, 60, 61, 62, 63, 64, 65, 180], "arbitrari": [8, 59, 60, 61, 62, 63, 64, 65, 180], "closedlooppl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 167, 176, 179, 180], "defin": [9, 39, 66, 112, 123, 132, 164, 167, 174, 179], "perform": [9, 101, 107, 164, 167, 173, 174, 177, 179], "close": [9, 16, 18, 167, 180], "loop": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 167, 180], "pll": [9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 167, 180], "thi": [9, 29, 34, 35, 36, 38, 39, 51, 66, 96, 99, 108, 112, 113, 129, 143, 144, 145, 146, 147, 148, 149, 151, 152, 156, 168, 169, 170, 171, 172, 174, 176, 177, 178], "i": [9, 16, 25, 32, 37, 39, 45, 48, 49, 51, 54, 57, 58, 59, 64, 66, 75, 79, 80, 82, 85, 86, 89, 99, 100, 109, 110, 112, 113, 116, 119, 123, 124, 125, 127, 128, 130, 131, 132, 134, 135, 136, 138, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 156, 157, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181], "meant": 9, "analysi": [9, 16, 170, 176, 180], "onli": [9, 39, 47, 51, 56, 59, 63, 66, 78, 100, 108, 112, 171, 176, 177], "block": [9, 26, 51, 82, 91, 121, 122], "diagram": [9, 26, 51, 82, 91, 121, 122], "bb": [9, 175, 176], "ped": [9, 15, 16, 85, 176], "lf": [9, 176], "lo": [9, 176], "e": [9, 26, 37, 111, 115, 116, 126, 164, 169, 173, 174, 176, 177], "j": [9, 26, 51, 54, 58, 66, 99, 112, 123, 135, 164, 173, 174, 176], "nco": [9, 12, 16, 26, 27, 28, 85, 91, 92, 93, 94, 95, 96, 97, 98, 167, 176, 179, 180], "local": [9, 168, 176], "oscil": [9, 26, 28, 91, 93, 167, 176, 180], "baseband": [9, 175, 176], "detector": [9, 15, 16, 85, 176], "filter": [9, 13, 14, 16, 18, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 132, 143, 144, 145, 146, 148, 149, 152, 154, 156, 157, 159, 167, 175, 177, 178, 179, 180], "numer": [9, 26, 28, 91, 93, 167, 174, 176, 180], "control": [9, 26, 28, 91, 93, 167, 176, 180], "The": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 58, 59, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 181], "transfer": [9, 18, 39, 66, 67, 82, 132, 173, 174, 176], "2nd": [9, 82, 85, 167, 176, 180], "order": [9, 32, 37, 39, 46, 59, 61, 66, 76, 82, 85, 99, 100, 105, 112, 124, 125, 127, 129, 130, 132, 142, 157, 159, 160, 161, 167, 175, 176, 177, 180], "proport": [9, 13, 82, 83, 85, 131, 138, 167, 180], "plu": [9, 82, 85, 167, 180], "integr": [9, 14, 82, 84, 85, 167, 171, 174, 180], "h_": [9, 51, 54, 58, 176], "z": [9, 26, 39, 66, 82, 91, 121, 122, 164, 173, 174, 176], "k_1": [9, 13, 82, 83, 176], "k_2": [9, 14, 82, 84, 176], "frac": [9, 17, 19, 22, 23, 66, 82, 99, 111, 112, 113, 120, 124, 125, 127, 128, 129, 131, 132, 135, 137, 138, 158, 161, 162, 164, 176], "k_0": [9, 12, 16, 27, 85, 91, 92, 93, 176], "k_p": [9, 15, 16, 85, 176], "refer": [9, 17, 19, 20, 21, 22, 23, 32, 59, 82, 101, 107, 112, 120, 129, 130, 132, 137, 157, 159, 160, 174, 178], "michael": [9, 17, 19, 20, 21, 22, 23, 82, 157, 159], "rice": [9, 17, 19, 20, 21, 22, 23, 82, 157, 159], "digit": [9, 17, 19, 20, 21, 22, 23, 26, 27, 82, 101, 107, 157, 159, 167, 176, 179, 180], "commun": [9, 17, 19, 20, 21, 22, 23, 82, 101, 107, 157, 159, 176, 179], "discret": [9, 17, 19, 20, 21, 22, 23, 82, 112, 123, 128, 157, 159, 162, 166, 172, 176], "approach": [9, 17, 19, 20, 21, 22, 23, 82, 113, 116, 119, 157, 159, 176], "appendix": [9, 82, 157, 159], "c": [9, 17, 19, 20, 21, 22, 23, 34, 35, 36, 37, 38, 82, 99, 108, 113, 116, 119, 131, 138, 176], "lock": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "exampl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 176], "see": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 49, 50, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 106, 108, 132, 157, 159, 179], "noise_bandwidth": [9, 16, 82, 85, 89], "damping_factor": [9, 16, 82, 85, 86], "creat": [9, 16, 26, 27, 32, 33, 39, 40, 51, 52, 59, 60, 66, 67, 68, 82, 85, 91, 93, 99, 100, 106, 112, 114, 129, 130, 154, 160, 164, 172, 176, 178], "object": [9, 16, 32, 33, 99, 100, 174, 176], "frequency_lock_tim": [9, 17], "freq_offset": [9, 17, 19], "frequenc": [9, 17, 19, 21, 39, 43, 44, 66, 72, 73, 82, 130, 131, 138, 143, 144, 145, 147, 148, 149, 151, 166, 178, 179], "lock_tim": [9, 19, 176], "phase_error_vari": [9, 22], "cn0": [9, 22], "varianc": [9, 22, 112], "steadi": [9, 22], "state": [9, 22, 39, 47, 49, 51, 56, 57, 59, 63, 64, 66, 78, 80], "phase_lock_tim": [9, 23], "bn": [9, 10], "bandwidth": [9, 10, 11, 16, 20, 82, 85, 89, 113, 132, 157, 159, 176, 178], "b_n": [9, 10, 11, 16, 17, 19, 22, 23, 82, 85, 89], "hz": [9, 10, 16, 17, 19, 22, 43, 44, 72, 73, 82, 85, 89, 113, 130, 131, 132, 138, 172], "bnt": [9, 11, 176], "t": [9, 11, 16, 82, 85, 89, 132, 134, 172], "repres": [9, 18, 115, 116], "k0": [9, 12, 16, 26, 27, 85, 91, 92, 93], "k1": [9, 13, 82, 83, 176], "k2": [9, 14, 82, 84, 176], "kp": [9, 15, 16, 85], "omega_3db": [9, 20], "3": [9, 17, 19, 20, 23, 32, 51, 54, 58, 101, 106, 107, 108, 112, 113, 114, 115, 117, 118, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 142, 143, 144, 145, 146, 148, 149, 152, 154, 156, 160, 161, 163, 164, 174, 176, 178, 179], "omega_": [9, 20], "textrm": [9, 20], "radian": [9, 20, 21, 22, 26, 27, 176], "omega_n": [9, 21, 176], "natur": [9, 21], "sampl": [9, 16, 24, 26, 27, 29, 31, 39, 41, 43, 44, 45, 48, 51, 53, 59, 63, 72, 73, 75, 79, 82, 85, 89, 91, 93, 94, 96, 98, 112, 125, 128, 130, 132, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 157, 159, 160, 161, 162, 166, 172, 175, 176, 178], "f_": [9, 16, 24, 43, 44, 53, 72, 73, 125, 128, 130, 132, 143, 144, 145, 147, 148, 149, 151, 154, 160, 161, 162, 172, 173, 174, 176, 178], "zeta": [9, 16, 25, 82, 85, 86], "damp": [9, 16, 25, 82, 85, 86, 176], "properti": [10, 11, 12, 13, 14, 15, 18, 20, 21, 24, 25, 28, 41, 46, 49, 50, 54, 55, 57, 58, 61, 64, 65, 69, 70, 74, 76, 77, 80, 81, 83, 84, 86, 88, 89, 92, 94, 95, 102, 105, 106, 108], "paramet": [16, 17, 19, 22, 27, 29, 31, 34, 35, 36, 38, 40, 42, 43, 44, 45, 48, 52, 53, 60, 62, 63, 67, 68, 71, 72, 73, 75, 79, 85, 87, 93, 96, 98, 100, 101, 103, 104, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164], "where": [16, 82, 85, 89, 100, 112, 113, 123, 124, 125, 127, 132, 161, 164, 173, 174, 179], "period": [16, 82, 85, 89, 164], "second": [16, 17, 19, 23, 32, 82, 85, 89, 132], "critic": [16, 25, 82, 85, 86, 176], "underdamp": [16, 25, 82, 85, 86], "overdamp": [16, 25, 82, 85, 86], "ted": [16, 85], "t_": [17, 19, 23, 62, 132, 178], "fl": [17, 19], "4": [17, 19, 32, 44, 51, 54, 58, 73, 101, 106, 107, 108, 112, 113, 114, 116, 117, 119, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 168, 169, 172, 174, 175, 177, 180], "delta": [17, 19, 39, 45, 66, 75, 146, 173, 174], "offset": [17, 19, 26, 27, 91, 93, 95, 99, 100, 106, 130, 160, 166, 176], "take": [17, 19, 23], "onto": [17, 19, 23], "equat": [17, 19, 20, 21, 22, 23, 66, 99], "39": 17, "pl": [19, 23], "38": 19, "34": 20, "33": 21, "sigma_": 22, "theta_": 22, "carrier": [22, 99], "43": 22, "40": 23, "less": 25, "than": [25, 100, 108, 135, 142, 153], "greater": 25, "dd": [26, 27, 28, 29, 30, 31, 91, 167, 176, 179, 180], "direct": [26, 27, 167, 176, 180], "synthes": [26, 27, 167, 176, 180], "note": [26, 39, 51, 54, 58, 66, 82, 91, 99, 112, 113, 116, 119, 121, 122, 132, 135, 138, 151, 164], "increment": [26, 27, 29, 91, 93, 94, 96, 176], "v": [26, 91, 168], "output": [26, 29, 31, 39, 42, 45, 48, 51, 53, 66, 67, 68, 75, 79, 82, 87, 91, 96, 98, 112, 113, 114, 115, 116, 118, 119, 122, 123, 129, 136, 146, 152, 163, 168, 172, 173, 174, 176], "exponenti": [26, 29, 31, 172, 173, 174], "constant": [26, 27, 82, 91, 93, 94, 174, 176], "accumul": [26, 27, 32, 91, 93, 94, 176], "absolut": [26, 27, 91, 93, 95, 113], "unit": [26, 39, 48, 66, 79, 82, 91, 93, 94, 95, 100, 111, 112, 113, 121, 122, 126, 139, 140, 152, 157, 158, 159, 169, 173, 174, 176], "adder": [26, 82, 91, 121, 122, 176], "process": [26, 29, 91, 96, 174, 176], "variabl": [26, 29, 91, 96, 134, 176], "reset": [26, 30, 39, 47, 51, 56, 59, 63, 66, 78, 82, 90, 91, 97], "forward": [26, 31, 91, 98], "vari": [29, 96], "number": [31, 32, 34, 35, 38, 43, 44, 45, 48, 72, 73, 75, 79, 98, 99, 102, 112, 124, 125, 127, 132, 134, 136, 143, 144, 145, 146, 147, 148, 149, 151, 152, 157, 159, 161, 163], "measur": [32, 34, 111, 112, 120, 126, 129, 137, 139, 140, 158, 176, 179, 180], "new": [32, 33, 59, 60, 99, 100, 160], "In": [32, 40, 42, 49, 52, 53, 54, 57, 58, 60, 64, 67, 68, 80, 101, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 172, 177], "from": [32, 43, 44, 66, 67, 72, 73, 99, 108, 124, 125, 127, 128, 151, 161, 162, 168, 173, 174, 176, 179], "first": [32, 51, 136, 163, 170, 171], "receiv": [32, 34, 101, 107, 129, 131], "contain": [32, 112, 134], "10": [32, 54, 58, 101, 107, 112, 117, 123, 124, 125, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 154, 156, 157, 159, 160, 161, 162, 172, 173, 174, 175, 176, 177, 178], "add": [32, 34, 37, 112, 130, 160, 166, 177, 181], "out": [32, 54, 58, 106, 108, 109, 110, 114, 115, 117, 118, 121, 122, 123, 124, 125, 127, 128, 129, 131, 133, 136, 138, 145, 155, 161, 162, 163], "5": [32, 51, 54, 58, 112, 115, 117, 118, 119, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 138, 143, 144, 145, 146, 148, 149, 152, 154, 156, 157, 159, 160, 161, 162, 164, 168, 172, 173, 174, 175, 176, 177, 178, 180], "total": [32, 178], "ar": [32, 34, 35, 36, 38, 40, 44, 51, 52, 54, 58, 60, 67, 68, 73, 99, 100, 113, 115, 116, 118, 119, 136, 142, 143, 144, 145, 147, 148, 149, 151, 153, 155, 168, 169, 170, 172, 174, 176, 178, 179, 181], "count": [32, 35, 129], "error_r": [32, 36, 37, 177], "everi": [32, 172], "can": [32, 34, 35, 36, 38, 82, 112, 129, 132, 136, 147, 151, 169, 173, 174, 177, 181], "obtain": 32, "follow": [32, 135, 155, 176], "6": [32, 51, 54, 58, 108, 117, 123, 124, 125, 129, 131, 133, 134, 138, 142, 143, 144, 145, 146, 148, 149, 152, 154, 156, 164, 171, 173, 174, 176, 177], "tabul": [32, 33], "given": [32, 34, 35, 36, 38, 59, 62, 129, 173, 174], "none": [32, 36, 39, 45, 48, 59, 63, 82, 90, 99, 101, 107, 112, 113, 123, 136, 142, 143, 146, 147, 151, 152, 153, 163, 166, 172, 175, 177], "all": [32, 37, 129, 171], "ascend": [32, 37], "correspond": [32, 37], "other": [34, 35, 36, 38, 172, 181], "quantiti": [34, 35, 36, 37, 38], "howev": [34, 35, 36, 38, 82, 116, 119, 172], "user": [34, 35, 36, 38, 173, 174], "caution": [34, 35, 36, 38], "consist": [34, 35, 36, 37, 38], "instanc": [34, 35, 36, 38], "transmit": [34, 129], "section": [34, 35, 36, 37, 38, 174, 176], "specif": [37, 171, 178], "whatev": 37, "wa": [37, 113], "provid": [37, 99, 101, 107, 151, 179], "wrapper": [39, 66], "scipi": [39, 42, 53, 66, 147, 151, 178, 179], "convolv": [39, 42, 53, 154], "It": [39, 66, 82, 112], "support": [39, 66], "one": [39, 66, 100, 108, 132, 134, 143, 144, 145, 147, 148, 149, 151, 173, 174, 175, 178], "stream": [39, 40, 42, 47, 49, 51, 52, 53, 56, 57, 59, 60, 63, 64, 66, 67, 68, 78, 80, 99], "its": [39, 66, 67, 112, 173, 174, 178], "feedforward": [39, 40, 50, 51, 52, 54, 58, 66, 68, 70, 143, 144, 145, 146, 148, 149, 152, 156, 173, 174], "coeffici": [39, 40, 51, 52, 66, 68, 143, 144, 145, 146, 148, 149, 152, 156, 173, 174], "h_i": [39, 40, 50, 51, 52, 54, 58, 173], "sum_": [39, 66, 111, 112, 113, 126, 129, 158], "sum": [39, 66, 178], "limits_": [39, 66], "frequency_response_log": [39, 44, 66, 73], "logarithm": [39, 44, 66, 73, 143, 144, 145, 147, 148, 149, 173, 174], "axi": [39, 44, 66, 73, 142, 143, 144, 145, 147, 148, 149, 151, 153, 154, 172], "when": [39, 45, 48, 66, 75, 79, 112, 113, 115, 116, 118, 119, 128, 143, 144, 145, 146, 148, 149, 152, 162, 164, 172, 173, 174], "mode": [39, 40, 42, 47, 49, 51, 52, 53, 56, 57, 59, 60, 63, 64, 66, 67, 68, 78, 80, 114, 164], "u": [39, 48, 66, 79, 152, 164, 165, 173, 174], "indic": [39, 40, 49, 51, 52, 57, 59, 60, 64, 66, 67, 68, 80, 99, 100, 101, 107, 135, 149], "whether": [39, 40, 49, 51, 52, 57, 59, 60, 64, 66, 67, 68, 80, 101, 107, 149], "tap": [39, 50, 51, 52, 54, 58, 59, 65, 66, 69, 70, 173, 174], "previou": [40, 52, 60, 63, 67, 68, 121, 122], "preserv": [40, 49, 52, 57, 60, 64, 67, 68, 80], "between": [40, 49, 51, 52, 57, 60, 64, 67, 68, 80, 131, 147, 151, 176], "call": [40, 49, 52, 57, 60, 64, 67, 68, 80], "liter": [42, 53, 114, 144, 145, 148, 149], "full": [42, 53, 114], "valid": [42, 53, 164], "same": [42, 53, 173], "non": [42, 53], "convolut": [42, 53], "detail": [42, 53], "alwai": [42, 53], "produc": [42, 51, 53, 132, 178], "1024": [43, 44, 72, 73, 143, 144, 145, 148, 149, 175, 178], "plot": [43, 44, 45, 48, 72, 73, 75, 79, 101, 106, 107, 108, 112, 113, 114, 116, 119, 129, 130, 132, 135, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 164, 172, 173, 174, 176, 177, 178, 179, 180], "decad": [44, 73, 143, 144, 145, 148, 149, 173, 176], "equival": [51, 112, 113, 128, 162, 169, 172], "upsampl": 51, "r": [51, 52, 53, 54, 55, 58, 59, 62, 113, 124, 125, 127, 129, 132, 157, 159, 161, 168, 169, 170, 171, 174, 175, 176, 178], "insert": 51, "each": [51, 129, 134, 147, 151], "prototyp": [51, 54, 58], "instead": [51, 142], "decompos": 51, "parallel": 51, "commut": 51, "prevent": 51, "need": [51, 170, 171], "multipli": 51, "case": 51, "2x": 51, "hold": [51, 136], "top": 51, "bottom": 51, "relat": [51, 54, 58, 113, 132], "polyphase_tap": [51, 54, 58], "befor": [54, 58, 181], "decomposit": [54, 58], "after": [54, 58], "np": [54, 58, 101, 107, 112, 113, 114, 115, 116, 118, 119, 123, 129, 130, 135, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 154, 156, 160, 164, 172, 173, 174, 175, 176, 177, 178], "arang": [54, 58, 112, 114, 164, 172, 175, 176], "7": [54, 58, 108, 117, 123, 129, 133, 134, 154, 164], "8": [54, 58, 101, 106, 107, 108, 112, 113, 114, 116, 117, 119, 123, 129, 132, 133, 134, 138, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 159, 164, 169, 173, 174, 175, 176, 178], "9": [54, 58, 117, 123, 129, 133, 134, 157, 159, 175, 177, 178, 180], "resampl": [59, 60, 61, 62, 63, 64, 65, 179, 180], "http": [59, 120, 132, 137, 168, 169], "wirelesspi": 59, "com": [59, 132, 169], "fraction": [59, 63, 132, 172], "structur": 59, "index": [59, 63, 153, 168], "should": [63, 169], "equal": 63, "three": [63, 172, 178], "If": [63, 112, 113, 123, 136, 142, 143, 146, 147, 151, 152, 153, 154, 163, 179], "lfilter": 66, "b_i": [66, 68, 70, 143, 144, 145, 146, 148, 149, 152, 156, 174], "feedback": [66, 68, 69, 143, 144, 145, 146, 148, 149, 152, 156, 174], "a_j": [66, 68, 69, 143, 144, 145, 146, 148, 149, 152, 156, 174], "These": [66, 99, 155, 169, 176], "differ": [66, 100, 108, 164, 178], "a_0": 66, "left": [66, 99, 111, 112, 113, 126, 129, 131, 132, 135, 138, 139, 140, 158, 164], "m": [66, 99, 100, 102, 103, 104, 105, 108, 123, 124, 125, 127, 161, 168, 169, 170, 171], "right": [66, 99, 111, 112, 113, 126, 129, 131, 132, 135, 138, 139, 140, 158, 164], "classmethod": [66, 67], "zerospol": [66, 67, 143, 144, 145, 146, 148, 149, 152, 156, 174], "self": [66, 67], "100": [66, 75, 79, 101, 107, 112, 113, 116, 119, 129, 141, 143, 146, 150, 152, 154, 160, 172, 176], "a_tap": [66, 69, 143, 144, 145, 146, 148, 149, 152, 156, 174, 176], "b_tap": [66, 70, 143, 144, 145, 146, 148, 149, 152, 156, 174, 176], "loopfilt": [82, 83, 84, 85, 86, 87, 88, 89, 90, 167, 176, 179, 180], "ppi": [82, 85, 167], "track": 82, "cannot": 82, "chirp": 82, "ramp": 82, "underli": [82, 88], "modul": [99, 100, 101, 104, 105, 107, 112, 124, 125, 127, 129, 130, 135, 141, 142, 150, 160, 161, 168, 171, 175, 177, 179, 180], "linear": [99, 112], "scheme": 99, "encod": [99, 101, 107, 121, 122, 179], "inform": [99, 124, 125, 127, 161], "sinusoid": [99, 112, 174], "taken": 99, "decim": [99, 100, 103, 104, 108, 177], "dot": [99, 108], "mathbb": [99, 108, 113, 164], "exp": [99, 132, 135, 143, 144, 145, 146, 148, 149, 152, 154, 156, 164, 172, 174, 175, 176], "pi": [99, 112, 131, 132, 135, 138, 143, 144, 145, 146, 148, 149, 152, 154, 156, 164, 172, 173, 174, 175, 176], "phase_offset": [99, 100, 106, 112, 129, 130, 135, 142, 153, 160, 177], "valu": [99, 100, 101, 107, 109, 110, 114, 121, 122, 132, 135, 142, 151, 153, 174], "maximum": [99, 103, 142, 153], "likelihood": [99, 103], "log_2": [99, 102, 113, 124, 125, 127, 161], "degre": [99, 100, 106, 130, 135, 138], "mapsto": [99, 108], "symbol_label": [100, 108, 177], "bin": [100, 108, 129, 153, 177], "ge": 100, "label": [100, 101, 107, 112, 129, 130, 132, 135, 141, 150, 151, 154, 157, 159, 160, 172, 175, 176, 177, 178], "consecut": 100, "adjac": [100, 108, 177, 178], "mai": [100, 108, 129, 155, 174], "more": [100, 108, 151, 180], "npt": 100, "whose": 100, "start": [100, 168], "0j": 100, "go": 100, "counter": 100, "clockwis": 100, "around": 100, "circl": [100, 174], "energi": [101, 107, 113, 124, 125, 126, 127, 128, 141, 150, 157, 159, 161, 162, 179, 180], "psd": [101, 107, 113, 124, 125, 127, 128, 141, 150, 161, 162], "were": [101, 107], "simon": [101, 107], "alouini": [101, 107], "over": [101, 107, 134], "fade": [101, 107], "channel": [101, 107, 113, 115, 116, 118, 119, 123, 141, 150, 179, 180], "chapter": [101, 107], "singl": [101, 107], "john": [101, 107], "proaki": [101, 107], "optimum": [101, 107], "theoret": [101, 107, 141, 150, 177], "curv": [101, 107, 141, 150], "bpsk": [101, 107, 141, 150, 154], "qpsk": [101, 106, 107, 112, 129, 130, 141, 142, 150, 153, 154, 160, 175], "psk8": [101, 107, 141, 150, 177], "psk16": [101, 107, 141, 150, 177], "linspac": [101, 107, 113, 116, 119, 141, 150, 174, 175, 176, 177], "plt": [101, 106, 107, 108, 112, 113, 114, 116, 119, 129, 130, 132, 135, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 156, 157, 159, 160, 164, 172, 173, 174, 175, 176, 177, 178], "figur": [101, 106, 107, 108, 112, 113, 114, 116, 119, 129, 130, 132, 135, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 159, 160, 164, 172, 173, 174, 175, 176, 177, 178], "figsiz": [101, 106, 107, 108, 112, 113, 114, 116, 119, 129, 130, 132, 135, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 159, 160, 164, 172, 173, 174, 175, 176, 177, 178], "titl": [101, 107, 112, 113, 114, 116, 119, 129, 130, 135, 141, 150, 154, 160, 164, 172, 175, 176, 177, 178], "tight_layout": [101, 107, 112, 113, 114, 116, 119, 129, 130, 141, 150, 154, 160, 164, 175, 176, 177, 178], "compar": [101, 107, 178], "de": [101, 107], "true": [101, 107, 113, 115, 116, 118, 119, 123, 142, 149, 153, 155, 175, 177], "45": [106, 112, 129, 130, 135, 142, 153, 160, 177], "se": [107, 150], "00000000e": [108, 174], "00": [108, 174], "00j": 108, "07106781e": 108, "01": [108, 134, 174, 176], "01j": 108, "12323400e": 108, "17": [108, 129, 138], "83697020e": 108, "22464680e": 108, "16j": 108, "annot": [108, 153, 180], "real": [109, 110, 112, 172, 173, 174, 175, 176], "probabl": [109, 110, 115, 116, 118, 119, 123, 166, 179, 180], "exceed": [109, 110], "15865525393145707": [109, 110], "158655": [109, 110], "0000010494310452": [109, 110], "text": [111, 112, 113, 116, 119, 120, 129, 130, 131, 137, 139, 140, 158, 160], "avg": [111, 112, 137], "seed": 112, "which": [112, 113, 130, 135, 138, 142, 153, 160, 172, 176, 178], "ad": [112, 170, 179, 180], "desir": [112, 177], "explicitli": 112, "assum": [112, 123, 136, 163], "known": 112, "pass": [112, 115, 118, 123, 129, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 166, 168, 169, 173, 174], "must": [112, 132, 157, 159, 164], "random": [112, 115, 118, 123, 129, 130, 135, 142, 154, 160, 175, 177], "numpi": [112, 163, 172, 173, 174, 175, 176, 177, 178, 179], "default_rng": 112, "noisi": 112, "w": [112, 172, 173, 174, 175, 176, 177, 178], "sigma": [112, 113], "For": [112, 143, 144, 145, 146, 148, 149, 152, 156, 173], "sim": 112, "cn": 112, "set": [112, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 155, 156, 170, 171, 174], "sin": 112, "ha": [112, 132, 138, 164, 176, 177, 178], "randint": [112, 115, 118, 123, 129, 130, 135, 142, 154, 160, 175, 177], "1_000": [112, 130, 135, 160, 175], "zorder": [112, 130, 160], "infti": [112, 113], "nand": 112, "capac": [113, 116, 119, 179, 180], "2d": 113, "x_i": [113, 115, 116, 118, 119, 123, 135], "y_i": [113, 115, 116, 118, 119, 123], "monoton": 113, "decreas": 113, "limit": [113, 142, 153, 177], "20": [113, 115, 118, 123, 129, 130, 134, 135, 175, 177, 178], "xlabel": [113, 114, 116, 119, 129, 164, 172, 175, 176, 178], "ylabel": [113, 114, 116, 119, 129, 164, 172, 175, 176, 178], "grid": [113, 116, 119, 155, 172, 175, 176, 178], "At": 113, "occur": 113, "view": [113, 170], "59": 113, "shannon": 113, "semilogi": [113, 141, 150], "both": [113, 142, 153, 172, 176], "barker": [114, 165, 179], "bipolar": 114, "sequenc": [114, 115, 118, 123, 164, 166, 179], "format": [114, 170], "13": [114, 117, 133], "seq": 114, "have": [114, 136, 163], "ideal": [114, 177], "minim": 114, "autocorrel": [114, 164], "sidelob": [114, 164], "corr": [114, 164], "correl": [114, 164], "lag": [114, 164], "size": [114, 123, 172, 175, 176, 177, 178], "ab": [114, 164, 178], "through": [115, 118, 123, 166, 173, 174, 176], "25": [115, 118, 123, 172, 175, 176, 178], "roughli": [115, 118, 172], "eras": 115, "11": [117, 133, 168], "12": [117, 133, 173, 177], "14": [117, 133, 169], "15": [117, 133], "transit": [118, 119, 123, 166], "flip": 118, "h_b": 119, "cf": 120, "v_": [120, 140, 158], "en": [120, 137], "wikipedia": [120, 137], "org": [120, 137], "wiki": [120, 137], "uncod": 122, "dmc": [123, 166, 179, 180], "memoryless": [123, 166], "matrix": [123, 166], "pr": 123, "y_j": 123, "alphabet": 123, "ldot": 123, "qam": [124, 125, 127, 161], "249387366082999": [124, 125], "020599913279625": [124, 162], "sym": [125, 128, 132, 161, 162, 178], "750612633917001": [127, 161], "979400086720376": [127, 128], "system": [128, 162, 170, 171, 176, 179], "norm": 129, "noiseless": 129, "sourc": 129, "max": [129, 139, 140], "type": [129, 136, 144, 145, 147, 148, 149, 163, 180], "_": 129, "sqrt": [129, 132, 158, 164, 175, 176, 178], "instantan": 129, "percentil": [129, 151], "1000": [129, 154, 177], "either": 129, "797700021227572": 129, "738416350165078": 129, "965195060502896": 129, "95th": 129, "95": 129, "072174713179614": 129, "inst_evm": 129, "hist": 129, "histogram": 129, "frequency_offset": [130, 166, 179, 180], "freq_rat": 130, "cycl": 130, "000": 130, "1e": [130, 177], "5e": 130, "deg": [130, 135], "path": [131, 179], "loss": [131, 179], "log_": [131, 137], "distanc": 131, "meter": [131, 138], "transmitt": 131, "km": 131, "link": [131, 179, 180], "ghz": [131, 138], "1e3": 131, "1e9": [131, 138], "92": 131, "44778322188337": 131, "so": [131, 132, 179], "doubl": [131, 138], "result": [131, 138, 177], "increas": [131, 138, 174], "2e3": 131, "98": 131, "468383135163": 131, "also": [131, 132, 179], "2e9": 131, "puls": [132, 154, 157, 159, 179, 180], "shape": [132, 154, 157, 159, 179, 180], "product": [132, 178], "side": [132, 143, 144, 145, 147, 148, 149, 151, 173, 174, 175, 178], "thought": [132, 181], "smaller": [132, 178], "wider": 132, "even": [132, 157, 159], "amplitud": [132, 135, 166, 172, 176], "nomin": 132, "passband": [132, 175], "ln": 132, "www": 132, "mathwork": 132, "help": 132, "gaussdesign": 132, "html": [132, 168], "onlinelibrari": 132, "wilei": 132, "doi": 132, "pdf": 132, "1002": 132, "9780470041956": 132, "app2": 132, "h_0p1": [132, 157, 159], "h_0p2": 132, "h_0p3": 132, "displai": [134, 142, 143, 144, 145, 147, 148, 149, 151, 153], "consid": 134, "line": 134, "string": [134, 147, 151], "print": [134, 172, 173, 174, 176], "quick": 134, "brown": 134, "fox": 134, "jump": 134, "lazi": 134, "dog": 134, "00000000": 134, "54": 134, "68": 134, "65": 134, "71": 134, "75": [134, 176, 177], "69": 134, "63": 134, "6b": 134, "62": 134, "72": 134, "6f": 134, "77": 134, "6e": 134, "00000010": 134, "66": 134, "78": 134, "6a": 134, "6d": 134, "70": [134, 178], "73": 134, "76": 134, "74": 134, "00000020": 134, "6c": 134, "61": 134, "7a": 134, "79": 134, "64": [134, 174], "67": 134, "he": 134, "02": [134, 174, 176], "03": [134, 174], "04": [134, 174], "00000004": 134, "05": [134, 172, 174, 176], "06": 134, "07": 134, "08": 134, "00000008": 134, "09": 134, "0a": 134, "iq_imbal": [135, 166, 179, 180], "iq": [135, 166], "imbal": [135, 166], "posit": 135, "compon": 135, "larger": [135, 142, 153], "quadratur": 135, "lead": [135, 177], "g_i": 135, "180": 135, "g_q": 135, "x_q": 135, "horizont": 135, "stretch": 135, "while": [135, 178], "neg": 135, "vertic": 135, "y1": 135, "y2": 135, "subplot": [135, 176, 177], "y_1": 135, "legend": [135, 172, 175, 176, 178], "y_2": 135, "northwest": 135, "northeast": 135, "dtype": [136, 154, 163, 176], "dtypelik": [136, 163], "most": [136, 163], "signific": [136, 163], "enough": 136, "fill": 136, "last": [136, 168], "remain": 136, "smallest": 136, "unsign": 136, "integ": 136, "uint8": [136, 163], "diamet": 138, "effici": 138, "55": 138, "le": [138, 157, 159], "eta": 138, "dbi": 138, "half": 138, "arcsin": 138, "83": 138, "dish": 138, "21": 138, "810210290266568": 138, "437435887991374": 138, "23": 138, "sinc": [138, 168, 177], "antenna": [138, 179], "we": [138, 179], "observ": 138, "830810203546193": 138, "529544741425365": 138, "voltag": [140, 158, 179], "keyword": [141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 173, 174], "argument": [141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 173, 174], "pyplot": [141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 172, 173, 174, 175, 176, 177, 178], "scatter": 142, "hist2d": 142, "10_000": 142, "n_time": [143, 174], "n_freq": 143, "x_axi": [143, 144, 145, 147, 148, 149, 151, 173, 174, 175, 176], "two": [143, 144, 145, 147, 148, 149, 151, 164, 172, 173, 174], "log": [143, 144, 145, 147, 148, 149, 173, 174, 176], "n_t": 143, "n_f": 143, "scale": [143, 144, 145, 147, 148, 149, 151, 173, 174], "option": [143, 144, 145, 147, 148, 149, 151], "spectrum": [143, 144, 145, 147, 148, 149, 151], "h_srrc": [143, 144, 145, 146, 148, 149, 152, 154, 156, 177], "1j": [143, 144, 145, 146, 148, 149, 152, 154, 156, 172, 174, 175, 176], "conj": [143, 144, 145, 146, 148, 149, 152, 156, 174, 176], "30": [143, 146, 152, 174, 180], "ylim": [145, 164, 173, 176, 177, 178], "48": 145, "52": 145, "window": [147, 151], "hann": [147, 151], "overlap": [147, 151, 175], "fft": [147, 151], "median": 147, "segment": [147, 151], "256": [147, 151, 175], "point": [147, 151], "unwrap": [149, 176], "pcolormesh": 151, "By": 151, "color": [151, 172, 175, 176, 178], "bar": 151, "rang": [151, 176, 177], "10th": 151, "100th": 151, "dynam": 151, "activ": [151, 169], "chang": [151, 169, 181], "vmin": 151, "vmax": 151, "represent": 153, "50": [153, 172, 175], "10e3": 154, "complex64": [154, 176], "style": 155, "revert": 155, "rcdefault": 155, "_rc_param": 155, "rc_param": 155, "ax": [155, 172, 176], "autolayout": 155, "max_open_warn": 155, "titleweight": 155, "bold": 155, "linestyl": [155, 164, 172, 176, 177, 178], "excess": [157, 159, 178], "h_0p5": [157, 159], "h_0p9": [157, 159], "sample_rate_offset": [160, 166, 179, 180], "ppm": [160, 166], "part": [160, 176], "million": 160, "zadoff_chu": [164, 165, 179], "zadoff": [164, 165], "chu": [164, 165], "rel": [164, 178], "prime": 164, "gcd": 164, "ne": 164, "cyclic": 164, "x_u": 164, "c_": 164, "mod": 164, "x_3": 164, "139": 164, "x3": 164, "linewidth": 164, "roll": [164, 178], "tile": 164, "x_5": 164, "x5": 164, "cross": 164, "xcorr": 164, "sphinx": 168, "immateri": 168, "theme": 168, "depend": [168, 170, 171], "store": [168, 169, 171], "requir": [168, 169, 170, 171], "txt": [168, 169, 170, 171], "myst": 168, "parser": 168, "design": [168, 179], "updat": 168, "git": [168, 169], "math": 168, "dollar": 168, "ipykernel": 168, "nb": 168, "switch": 168, "pip": [168, 169, 170, 171], "python3": [168, 169, 170, 171], "built": 168, "run": 168, "command": 168, "dirhtml": 168, "locat": [168, 171], "home": 168, "page": 168, "site": 168, "directori": [168, 169], "get": 168, "necessari": 168, "webpag": 168, "webserv": 168, "easili": [168, 170, 171, 173, 174], "done": 168, "python": [168, 179], "server": 168, "8080": 168, "access": 168, "web": 168, "browser": 168, "localhost": 168, "latest": 169, "releas": [169, 180], "version": 169, "main": [169, 178], "wai": 169, "branch": 169, "mhostett": [169, 180], "Or": [169, 171], "pre": 169, "To": 169, "develop": [169, 170, 171], "librari": [169, 170, 171, 172, 177, 179, 181], "benefici": 169, "fashion": 169, "allow": [169, 171], "current": 169, "immedi": 169, "seen": 169, "upon": 169, "next": 169, "import": [169, 172, 173, 174, 175, 176, 177, 178, 179], "clone": 169, "repo": 169, "wherev": 169, "you": [169, 170, 171, 179], "like": [169, 179], "flag": 169, "includ": [169, 170, 171, 179], "packag": [169, 179], "lint": 169, "test": 169, "pylint": [169, 170], "black": 169, "jupyt": 169, "22": 169, "pytest": [169, 171], "cov": 169, "toml": [169, 170, 171], "xdist": 169, "benchmark": 169, "static": 170, "your": [170, 171], "dev": [170, 171], "variou": [170, 178], "nuisanc": 170, "warn": 170, "ignor": 170, "list": 170, "pyproject": [170, 171], "manual": [170, 171], "src": 170, "file": [170, 171], "vscode": [170, 171], "json": [170, 171], "instruct": [170, 171], "about": [170, 171], "how": [170, 171], "invok": [170, 171], "edit": [170, 174], "tool": [171, 179], "ini_opt": 171, "minvers": 171, "addopt": 171, "showloc": 171, "testpath": 171, "execut": 171, "test_psk": 171, "py": 171, "infrastructur": 171, "debug": 171, "ani": 171, "config": [172, 173, 174, 175, 176, 177, 178], "inlinebackend": [172, 173, 174, 175, 176, 177, 178], "print_figure_kwarg": [172, 173, 174, 175, 176, 177, 178], "facecolor": [172, 173, 174, 175, 176, 177, 178], "widget": [172, 173, 174, 175, 176, 177, 178], "prop_cycl": [172, 176], "by_kei": [172, 176], "continu": 172, "tx": 172, "decai": [172, 174], "marker": [172, 173, 174], "o": 172, "fillstyl": 172, "imag": 172, "origin": 172, "show": [172, 173, 174, 175, 176, 177, 178], "now": 172, "accomplish": [172, 177], "def": [172, 175, 177], "resample_sign": 172, "new_sample_r": 172, "ty": 172, "gca": [172, 177], "set_prop_cycl": [172, 177], "notic": [172, 178], "200": [172, 177], "four": 172, "400": 172, "appear": 172, "fourth": 172, "often": 172, "do": 172, "align": 172, "315": 172, "32": 172, "below": [173, 174], "00095881": 173, "00175008": 173, "00423912": 173, "00588237": 173, "00615087": 173, "00474585": 173, "00170436": 173, "0025481": 173, "00721629": 173, "01123216": 173, "01342329": 173, "01273174": 173, "00845039": 173, "00043678": 173, "01073645": 173, "02372925": 173, "03650167": 173, "04650553": 173, "05098414": 173, "04734541": 173, "03355823": 173, "00851466": 173, "0276993": 173, "07367186": 173, "12670168": 173, "18306847": 173, "2381038": 173, "28726435": 173, "32607284": 173, "3509308": 173, "35948882": 173, "conveni": [173, 174], "evalu": [173, 174], "envelop": [173, 174], "here": [173, 174], "altern": 174, "conjug": 174, "0x000002214b040a88": 174, "47820725": 174, "78207252e": 174, "58172329e": 174, "10862468e": 174, "86109590e": 174, "21565653e": 174, "01140214e": 174, "57286400e": 174, "67772160e": 174, "47338728e": 174, "10422993e": 174, "89312837e": 174, "12240078e": 174, "03953322e": 174, "69685122e": 174, "63882791e": 174, "81474977e": 174, "47193366e": 174, "85259041e": 174, "15647504e": 174, "23851924e": 174, "42176895e": 174, "84684395e": 174, "42721858e": 174, "72236648e": 174, "14721649e": 174, "10813095e": 174, "94024315e": 174, "78877688e": 174, "74077567e": 174, "87820725": 174, "53637958": 174, "94724205": 174, "13335164": 174, "1455082": 174, "04436799": 174, "88708159": 174, "71930943": 174, "5719707": 174, "46154771": 174, "39261642": 174, "36139242": 174, "35935288": 174, "3763214": 174, "40270968": 174, "43085717": 174, "45557651": 174, "47410241": 174, "48566716": 174, "49090568": 174, "49124786": 174, "48840102": 174, "4839738": 174, "47925143": 174, "47510421": 174, "47199608": 174, "47005584": 174, "46917696": 174, "46911955": 174, "denomin": 174, "73910363": 174, "30614675j": 174, "plane": 174, "endpoint": 174, "concaten": 174, "0x000002214dc574c8": 174, "lyon": 174, "understand": 174, "3rd": 174, "insid": 174, "outsid": 174, "unstabl": 174, "n_symbol": 175, "pulse_shap": 175, "els": 175, "pb": 175, "x_bb_rect": 175, "papr_bb_rect": 175, "x_pb_rect": 175, "papr_pb_rect": 175, "x_bb_0p1": 175, "papr_bb_0p1": 175, "x_pb_0p1": 175, "papr_pb_0p1": 175, "x_bb_0p5": 175, "papr_bb_0p5": 175, "x_pb_0p5": 175, "papr_pb_0p5": 175, "x_bb_0p9": 175, "papr_bb_0p9": 175, "x_pb_0p9": 175, "papr_pb_0p9": 175, "rectangular": [175, 178], "2f": 175, "rf": [175, 176], "xlim": [175, 176, 178], "sweep_alpha": 175, "bb_papr": 175, "pb_papr": 175, "append": 175, "bpsk_bb_papr": 175, "bpsk_pb_papr": 175, "qpsk_bb_papr": 175, "qpsk_pb_papr": 175, "psk8_bb_papr": 175, "psk8_pb_papr": 175, "psk16_bb_papr": 175, "psk16_pb_papr": 175, "configur": 176, "0x7f058065cf10": 176, "theta_0": 176, "phase_error": 176, "freq_estim": 176, "suptitl": [176, 177], "ones": 176, "angl": 176, "avail": [176, 177], "500": 176, "001": 176, "005": 176, "b_nt": 176, "0005": 176, "0125": 176, "015": 176, "0175": 176, "t_lock": 176, "analyze_psk": 177, "100_000": 177, "achiev": [177, 178], "n0": 177, "tx_mf": 177, "18": 177, "1e6": 177, "s_hat": 177, "bpsk_ber": 177, "bpsk_ser": 177, "qpsk_ber": 177, "qpsk_ser": 177, "psk8_ber": 177, "psk8_ser": 177, "psk16_ber": 177, "psk16_ser": 177, "simul": [177, 179], "bit_error_r": 177, "1e0": 177, "psk8_bin": 177, "psk8_grai": 177, "wors": 177, "rect": 178, "rc_0p1": 178, "rc_0p5": 178, "rc_0p9": 178, "nyquist": 178, "pm": 178, "60": 178, "nearli": 178, "null": 178, "small": 178, "lobe": 178, "much": 178, "higher": 178, "h_rect": 178, "freqz": 178, "worn": 178, "whole": 178, "h_rc_0p1": 178, "h_rc_0p5": 178, "h_rc_0p9": 178, "p_rect": 178, "log10": 178, "cumsum": 178, "p_rc_0p1": 178, "p_rc_0p5": 178, "p_rc_0p9": 178, "One": 178, "within": 178, "srrc_0p1": 178, "srrc_0p5": 178, "srrc_0p9": 178, "therefor": 178, "similar": 178, "significantli": 178, "due": 178, "being": 178, "h_srrc_0p1": 178, "h_srrc_0p5": 178, "h_srrc_0p9": 178, "p_srrc_0p1": 178, "p_srrc_0p5": 178, "p_srrc_0p9": 178, "gauss_0p1": 178, "gauss_0p2": 178, "gauss_0p3": 178, "softwar": 179, "radio": 179, "goal": 179, "build": 179, "analyz": 179, "reli": 179, "interoper": 179, "veri": 179, "possibl": 179, "numba": 179, "acceler": 179, "computation": 179, "intens": 179, "addition": 179, "aim": 179, "replic": 179, "relev": 179, "matlab": 179, "dsp": 179, "toolbox": 179, "progress": 179, "someth": 179, "pleas": 179, "open": 179, "issu": 179, "github": 179, "synchron": 179, "convers": [179, 180], "model": [179, 180], "impair": [179, 180], "budget": [179, 180], "manipul": 179, "juli": 180, "2023": 180, "fpsl": 180, "matt": 180, "hostett": 180, "helper": 180, "improv": 180, "semant": 181, "major": 181, "minor": 181, "patch": 181, "introduc": 181, "api": 181, "featur": 181, "backward": 181, "compat": 181, "make": 181, "bug": 181, "fix": 181, "There": 181, "guarante": 181, "them": 181, "thei": 181}, "objects": {"": [[2, 0, 0, 1, "sdr", ""]], "sdr": [[9, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [26, 1, 1, "", "DDS", "Implements a direct digital synthesizer (DDS)."], [32, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [39, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [51, 1, 1, "", "FIRInterpolator", "Implements a polyphase finite impulse response (FIR) interpolating filter."], [59, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [66, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [82, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [91, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [99, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [109, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [110, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [111, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [112, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [113, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [114, 5, 1, "", "barker", "Returns the Barker code/sequence of length $N$."], [115, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [116, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [117, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [118, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [119, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [120, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [121, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [122, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [123, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [124, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [125, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [126, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [127, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [128, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [129, 5, 1, "", "evm", "Calculates the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [130, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [131, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [132, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [133, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [134, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [135, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [136, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [137, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [138, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [139, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [140, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [157, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [158, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [159, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [160, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [161, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [162, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [163, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [164, 5, 1, "", "zadoff_chu", "Returns the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.ClosedLoopPLL": [[10, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [11, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [12, 2, 1, "", "K0", "The NCO gain $K_0$."], [13, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [14, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [15, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [16, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [17, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [18, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [19, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [20, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [21, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [22, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [23, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [24, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [25, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[16, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [16, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [16, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [16, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [16, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[17, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[19, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[22, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.DDS": [[27, 3, 1, "", "__init__", "Creates a direct digital synthesizer (DDS)."], [28, 2, 1, "", "nco", "The numerically-controlled oscillator (NCO) used by the DDS."], [29, 3, 1, "", "process", "Steps the DDS with the variable phase increment signal $x[n]$."], [30, 3, 1, "", "reset", "Resets the DDS."], [31, 3, 1, "", "step", "Steps the DDS forward by $N$ samples."]], "sdr.DDS.__init__": [[27, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [27, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [27, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.DDS.process": [[29, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the DDS."]], "sdr.DDS.step": [[31, 4, 2, "p-N", "N", "The number of samples $N$ to step the DDS forward."]], "sdr.ErrorRate": [[33, 3, 1, "", "__init__", "Creates a new error rate tabulation object."], [34, 3, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [35, 3, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [36, 3, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [37, 3, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [38, 3, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[34, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [34, 4, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [34, 4, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[35, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[36, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[38, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[40, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [41, 2, 1, "", "delay", "The delay of the FIR filter in samples."], [42, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the FIR filter."], [43, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the FIR filter."], [44, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the FIR filter on a logarithmic frequency axis."], [45, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [46, 2, 1, "", "order", "The order of the FIR filter, $N$."], [47, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [48, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [49, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [50, 2, 1, "", "taps", "The feedforward taps $h_i$."]], "sdr.FIR.__init__": [[40, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$."], [40, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to filter()."]], "sdr.FIR.filter": [[42, 4, 2, "p-mode", "mode", "The non-streaming convolution mode. See scipy.signal.convolve() for details. In streaming mode, $N$ inputs always produce $N$ outputs."], [42, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.FIR.frequency_response": [[43, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [43, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.frequency_response_log": [[44, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [44, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [44, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[45, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.step_response": [[48, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIRInterpolator": [[52, 3, 1, "", "__init__", "Creates a polyphase FIR interpolating filter with feedforward coefficients $h_i$."], [53, 3, 1, "", "filter", "Filters and interpolates the input signal $x[n]$ with the FIR filter."], [54, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [55, 2, 1, "", "rate", "The interpolation rate $r$."], [56, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [57, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [58, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.FIRInterpolator.__init__": [[52, 4, 2, "p-rate", "rate", "The interpolation rate $r$."], [52, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to filter()."], [52, 4, 2, "p-taps", "taps", "The feedforward coefficients $h_i$."]], "sdr.FIRInterpolator.filter": [[53, 4, 2, "p-mode", "mode", "The non-streaming convolution mode. See scipy.signal.convolve() for details. In streaming mode, $N$ inputs always produce $N r$ outputs."], [53, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$."]], "sdr.FarrowResampler": [[60, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [61, 2, 1, "", "order", "The order of the filter."], [62, 3, 1, "", "resample", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [63, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [64, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [65, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__init__": [[60, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to resample()."]], "sdr.FarrowResampler.resample": [[62, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [62, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.reset": [[63, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[67, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [68, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [69, 2, 1, "", "a_taps", "The feedback taps $a_j$."], [70, 2, 1, "", "b_taps", "The feedforward taps $b_i$."], [71, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the IIR filter."], [72, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the IIR filter."], [73, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the IIR filter on a logarithmic frequency axis."], [74, 2, 1, "", "gain", "The gain of the IIR filter."], [75, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [76, 2, 1, "", "order", "The order of the IIR filter, $N$."], [77, 2, 1, "", "poles", "The poles of the IIR filter."], [78, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [79, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [80, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [81, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[67, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [67, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [67, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."], [67, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__init__": [[68, 4, 2, "p-a", "a", "The feedback coefficients $a_j$."], [68, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [68, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."]], "sdr.IIR.filter": [[71, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.IIR.frequency_response": [[72, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [72, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[73, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [73, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [73, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[75, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[79, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.LoopFilter": [[83, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [84, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [85, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [86, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [87, 3, 1, "", "filter", "Filters the input signal $x[n]$."], [88, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [89, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [90, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__init__": [[85, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [85, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [85, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [85, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.LoopFilter.filter": [[87, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.NCO": [[92, 2, 1, "", "K0", "The NCO gain $K_0$."], [93, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [94, 2, 1, "", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [95, 2, 1, "", "offset", "The absolute offset $theta$ of the NCO in units."], [96, 3, 1, "", "process", "Steps the NCO with the variable-increment signal $x[n]$."], [97, 3, 1, "", "reset", "Resets the NCO."], [98, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__init__": [[93, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [93, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [93, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in units."]], "sdr.NCO.process": [[96, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the NCO."]], "sdr.NCO.step": [[98, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.PSK": [[100, 3, 1, "", "__init__", "Creates a new PSK object."], [101, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [102, 2, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [103, 3, 1, "", "demodulate", "Demodulates the complex symbols $hat{x}[k]$ to decimal symbols $hat{s}[k]$ using maximum-likelihood estimation."], [104, 3, 1, "", "modulate", "Modulates to decimal symbols $s[k]$ to complex symbols $x[k]$."], [105, 2, 1, "", "order", "The modulation order $M = 2^k$."], [106, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [107, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [108, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[100, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [100, 4, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [100, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[101, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [101, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.demodulate": [[103, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to demodulate."]], "sdr.PSK.modulate": [[104, 4, 2, "p-symbols", "symbols", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.PSK.ser": [[107, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [107, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.Q": [[109, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[110, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.average_power": [[111, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[112, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [112, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [112, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [112, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[113, 4, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [113, 4, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.barker": [[114, 4, 2, "p-length", "length", "The length $N$ of the Barker code/sequence."], [114, 4, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[115, 4, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [115, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[116, 4, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[117, 4, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[118, 4, 2, "p-p", "p", "The probability $p$ of a bit flip."], [118, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[119, 4, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[120, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.diff_decode": [[121, 4, 2, "p-y", "y", "The input encoded data $y[k]$."], [121, 4, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[122, 4, 2, "p-x", "x", "The input uncoded data $x[k]$."], [122, 4, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[123, 4, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [123, 4, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [123, 4, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [123, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.ebn0_to_esn0": [[124, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [124, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [124, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[125, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [125, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [125, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [125, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[126, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[127, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [127, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [127, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[128, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [128, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.evm": [[129, 4, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [129, 4, 2, "p-output", "output", "The output type of the EVM calculation."], [129, 4, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [129, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.frequency_offset": [[130, 4, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [130, 4, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [130, 4, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [130, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [130, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[131, 4, 2, "p-d", "d", "The distance $d$ in meters between the transmitter and receiver."], [131, 4, 2, "p-f", "f", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[132, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [132, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [132, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[133, 4, 2, "p-n", "n", "The length of the Gray code."]], "sdr.hexdump": [[134, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [134, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[135, 4, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [135, 4, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [135, 4, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.pack": [[136, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [136, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [136, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[137, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[138, 4, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [138, 4, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [138, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[139, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[140, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.plot": [[141, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [142, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [143, 5, 1, "", "filter", "Plots the frequency response $H(omega)$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [144, 5, 1, "", "frequency_response", "Plots the frequency response $H(omega)$ of the filter."], [145, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [146, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [147, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [148, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [149, 5, 1, "", "phase_response", "Plots the phase response $Theta(omega)$ of the filter."], [150, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [151, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [152, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [153, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [154, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [155, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [156, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[141, 4, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [141, 4, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."]], "sdr.plot.constellation": [[142, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [142, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [142, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.filter": [[143, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [143, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [143, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [143, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [143, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [143, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [143, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.frequency_response": [[144, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [144, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [144, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [144, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [144, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [144, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[145, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [145, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [145, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [145, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [145, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [145, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.impulse_response": [[146, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [146, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [146, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.plot.periodogram": [[147, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [147, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [147, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [147, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [147, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [147, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [147, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [147, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_delay": [[148, 4, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [148, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [148, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [148, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [148, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [148, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_response": [[149, 4, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [149, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [149, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [149, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [149, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [149, 4, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [149, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.ser": [[150, 4, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [150, 4, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.spectrogram": [[151, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [151, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [151, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [151, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [151, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [151, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [151, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[152, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [152, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [152, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.plot.symbol_map": [[153, 4, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [153, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [153, 4, 2, "p-symbol_map", "symbol_map", "The complex symbols $hat{x}[k]$."]], "sdr.plot.time_domain": [[154, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\"."], [154, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[156, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [156, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.raised_cosine": [[157, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [157, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [157, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[158, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[159, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [159, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [159, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[160, 4, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [160, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.snr_to_ebn0": [[161, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [161, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [161, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [161, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[162, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [162, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.unpack": [[163, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [163, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [163, 4, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.zadoff_chu": [[164, 4, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [164, 4, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence. The root must be relatively prime to the length, i.e., $gcd(u, N) = 1$."], [164, 4, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence. When $q ne 0$, the returned sequence is a cyclic shift of the root-$u$ Zadoff-Chu sequence."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"convers": 0, "from": [0, 169, 170, 171], "e_b": 0, "n_0": 0, "e_": 0, "": [0, 173, 174], "n": [0, 172, 173, 174], "data": 1, "manipul": 1, "filter": [2, 6, 173, 174, 176], "link": 3, "budget": 3, "channel": [3, 166], "capac": 3, "path": 3, "loss": 3, "antenna": 3, "measur": 4, "energi": 4, "power": [4, 175], "voltag": 4, "modul": [4, 5, 6], "class": 5, "puls": [5, 175, 178], "shape": [5, 175, 178], "symbol": [5, 177], "map": [5, 177], "encod": 5, "plot": [6, 175], "configur": [6, 170, 171], "time": [6, 175, 176], "domain": [6, 175, 176], "frequenc": [6, 173, 174, 175, 176], "analysi": 6, "probabl": 7, "resampl": [8, 172], "note": 9, "constructor": [9, 26, 32, 39, 51, 59, 66, 82, 91, 99], "method": [9, 26, 32, 39, 51, 59, 66, 82, 91, 99], "properti": [9, 26, 39, 51, 59, 66, 82, 91, 99], "see": [26, 32, 34, 43, 44, 45, 48, 72, 73, 75, 79, 91, 101, 107, 109, 110, 120, 137, 143, 144, 145, 146, 148, 149, 152, 156], "also": [26, 32, 34, 43, 44, 45, 48, 72, 73, 75, 79, 91, 101, 107, 109, 110, 120, 137, 143, 144, 145, 146, 148, 149, 152, 156], "sequenc": 165, "simul": 166, "model": 166, "signal": [166, 172, 175], "impair": 166, "synchron": 167, "document": 168, "instal": [168, 169, 170, 171], "build": 168, "doc": 168, "serv": 168, "pypi": 169, "github": 169, "edit": 169, "local": 169, "folder": 169, "dev": 169, "depend": 169, "linter": 170, "run": [170, 171], "command": [170, 171], "line": [170, 171], "v": [170, 171], "code": [170, 171], "unit": 171, "test": 171, "farrow": 172, "arbitrari": 172, "construct": 172, "an": [172, 173, 174], "input": 172, "x": 172, "t_": 172, "rate": [172, 177], "r": 172, "y": 172, "frac": 172, "upsampl": 172, "integ": 172, "downsampl": 172, "irrat": 172, "fir": 173, "creat": [173, 174], "examin": [173, 174, 175], "impuls": [173, 174], "respons": [173, 174, 176], "h": [173, 174], "step": [173, 174, 176], "omega": [173, 174], "group": [173, 174], "delai": [173, 174], "tau_g": [173, 174], "fulli": [173, 174], "analyz": [173, 174, 176], "iir": 174, "zero": 174, "pole": 174, "digit": 174, "stabil": 174, "peak": 175, "averag": 175, "bpsk": [175, 177], "variou": 175, "across": [175, 176], "excess": 175, "bandwidth": 175, "phase": [176, 177], "lock": 176, "loop": 176, "design": 176, "proport": 176, "plu": 176, "integr": 176, "ppi": 176, "implement": 176, "pll": 176, "close": 176, "perform": 176, "compar": 176, "zeta": 176, "b_n": 176, "t": 176, "shift": 177, "kei": 177, "constel": 177, "qpsk": 177, "8": 177, "psk": 177, "16": 177, "error": 177, "curv": 177, "bit": 177, "rais": 178, "cosin": 178, "squar": 178, "root": 178, "gaussian": 178, "sdr": 179, "featur": 179, "v0": 180, "0": 180, "3": 180, "chang": 180, "contributor": 180, "2": 180, "1": 180, "version": 181, "alpha": 181, "releas": 181, "beta": 181}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Conversions": [[0, "conversions"]], "From E_b/N_0": [[0, "from-e-b-n-0"]], "From E_s/N_0": [[0, "from-e-s-n-0"]], "From S/N": [[0, "from-s-n"]], "Data manipulation": [[1, "data-manipulation"]], "Filtering": [[2, "filtering"]], "Link budgets": [[3, "link-budgets"]], "Channel capacity": [[3, "channel-capacity"]], "Path losses": [[3, "path-losses"]], "Antennas": [[3, "antennas"]], "Measurement": [[4, "measurement"]], "Energy": [[4, "energy"]], "Power": [[4, "power"]], "Voltage": [[4, "voltage"]], "Modulation": [[4, "modulation"], [5, "modulation"], [6, "modulation"]], "Classes": [[5, "classes"]], "Pulse shaping": [[5, "pulse-shaping"]], "Symbol mapping": [[5, "symbol-mapping"], [177, "symbol-mapping"]], "Symbol encoding": [[5, "symbol-encoding"]], "Plotting": [[6, "plotting"]], "Configuration": [[6, "configuration"], [170, "configuration"], [171, "configuration"]], "Time-domain": [[6, "time-domain"]], "Frequency-domain": [[6, "frequency-domain"]], "Filter analysis": [[6, "filter-analysis"]], "Probability": [[7, "probability"]], "Resampling": [[8, "resampling"]], "Note": [[9, null]], "Constructors": [[9, "constructors"], [26, "constructors"], [32, "constructors"], [39, "constructors"], [51, "constructors"], [59, "constructors"], [66, "constructors"], [82, "constructors"], [91, "constructors"], [99, "constructors"]], "Methods": [[9, "methods"], [26, "methods"], [32, "methods"], [39, "methods"], [51, "methods"], [59, "methods"], [66, "methods"], [82, "methods"], [91, "methods"], [99, "methods"]], "Properties": [[9, "properties"], [26, "properties"], [39, "properties"], [51, "properties"], [59, "properties"], [66, "properties"], [82, "properties"], [91, "properties"], [99, "properties"]], "See also": [[26, null], [32, null], [34, null], [43, null], [44, null], [45, null], [48, null], [72, null], [73, null], [75, null], [79, null], [91, null], [101, null], [107, null], [109, null], [110, null], [120, null], [137, null], [143, null], [144, null], [145, null], [146, null], [148, null], [149, null], [152, null], [156, null]], "Sequences": [[165, "sequences"]], "Simulation": [[166, "simulation"]], "Channel models": [[166, "channel-models"]], "Signal impairments": [[166, "signal-impairments"]], "Synchronization": [[167, "synchronization"]], "Documentation": [[168, "documentation"]], "Install": [[168, "install"], [170, "install"], [171, "install"]], "Build the docs": [[168, "build-the-docs"]], "Serve the docs": [[168, "serve-the-docs"]], "Installation": [[169, "installation"]], "Install from PyPI": [[169, "install-from-pypi"]], "Install from GitHub": [[169, "install-from-github"]], "Editable install from local folder": [[169, "editable-install-from-local-folder"]], "Install the dev dependencies": [[169, "install-the-dev-dependencies"]], "Linter": [[170, "linter"]], "Run from the command line": [[170, "run-from-the-command-line"], [171, "run-from-the-command-line"]], "Run from VS Code": [[170, "run-from-vs-code"], [171, "run-from-vs-code"]], "Unit Tests": [[171, "unit-tests"]], "Farrow arbitrary resampler": [[172, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[172, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[172, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[172, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[172, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[172, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[172, "downsample-by-an-irrational-rate"]], "FIR filters": [[173, "fir-filters"]], "Create an FIR filter": [[173, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[173, "examine-the-impulse-response-h-n"], [174, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[173, "examine-the-step-response-s-n"], [174, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[173, "examine-the-frequency-response-h-omega"], [174, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[173, "examine-the-group-delay-tau-g-omega"], [174, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[173, "fully-analyze-a-fir-filter"]], "IIR filters": [[174, "iir-filters"]], "Create an IIR filter": [[174, "create-an-iir-filter"]], "Examine the zeros and poles": [[174, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[174, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[174, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[175, "peak-to-average-power"]], "BPSK signal with various pulse shapes": [[175, "bpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[175, "examine-time-domain"]], "Examine frequency domain": [[175, "examine-frequency-domain"]], "Plot across excess bandwidth": [[175, "plot-across-excess-bandwidth"]], "Phase-locked loops": [[176, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[176, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[176, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[176, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[176, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[176, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[176, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[176, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[177, "phase-shift-keying"]], "Constellations": [[177, "constellations"]], "BPSK": [[177, "bpsk"]], "QPSK": [[177, "qpsk"]], "8-PSK": [[177, "id1"]], "16-PSK": [[177, "id2"]], "Error rate curves": [[177, "error-rate-curves"]], "Bit error rate curves": [[177, "bit-error-rate-curves"]], "Symbol error rate curves": [[177, "symbol-error-rate-curves"]], "Pulse shapes": [[178, "pulse-shapes"]], "Raised cosine": [[178, "raised-cosine"]], "Square-root raised cosine": [[178, "square-root-raised-cosine"]], "Gaussian": [[178, "gaussian"]], "sdr": [[179, "sdr"]], "Features": [[179, "features"]], "v0.0": [[180, "v0-0"]], "v0.0.3": [[180, "v0-0-3"]], "Changes": [[180, "changes"], [180, "id1"], [180, "id3"]], "Contributors": [[180, "contributors"], [180, "id2"], [180, "id4"]], "v0.0.2": [[180, "v0-0-2"]], "v0.0.1": [[180, "v0-0-1"]], "Versioning": [[181, "versioning"]], "Alpha releases": [[181, "alpha-releases"]], "Beta releases": [[181, "beta-releases"]]}, "indexentries": {"module": [[2, "module-sdr"]], "sdr": [[2, "module-sdr"]]}, "docurls": ["api/conversions/", "api/data-manipulation/", "api/filtering/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/resampling/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.DDS/", "api/sdr.DDS.__init__/", "api/sdr.DDS.nco/", "api/sdr.DDS.process/", "api/sdr.DDS.reset/", "api/sdr.DDS.step/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__init__/", "api/sdr.FIR.delay/", "api/sdr.FIR.filter/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.frequency_response_log/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.reset/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FIRInterpolator/", "api/sdr.FIRInterpolator.__init__/", "api/sdr.FIRInterpolator.filter/", "api/sdr.FIRInterpolator.polyphase_taps/", "api/sdr.FIRInterpolator.rate/", "api/sdr.FIRInterpolator.reset/", "api/sdr.FIRInterpolator.streaming/", "api/sdr.FIRInterpolator.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.resample/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__init__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.filter/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.filter/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.process/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.ber/", "api/sdr.PSK.bps/", "api/sdr.PSK.demodulate/", "api/sdr.PSK.modulate/", "api/sdr.PSK.order/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.barker/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.evm/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.filter/", "api/sdr.plot.frequency_response/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.ser/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.raised_cosine/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.unpack/", "api/sdr.zadoff_chu/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/installation/", "development/linter/", "development/unit-tests/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})