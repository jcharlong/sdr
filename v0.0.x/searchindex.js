Search.setIndex({"titles": ["Conversions", "Data manipulation", "Detection", "Digital signal processing", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.Decimator", "sdr.Decimator.__call__", "sdr.Decimator.__init__", "sdr.Decimator.__repr__", "sdr.Decimator.__str__", "sdr.Decimator.delay", "sdr.Decimator.method", "sdr.Decimator.polyphase_taps", "sdr.Decimator.rate", "sdr.Decimator.reset", "sdr.Decimator.taps", "sdr.EnergyDetector", "sdr.EnergyDetector.p_d", "sdr.EnergyDetector.p_fa", "sdr.EnergyDetector.roc", "sdr.EnergyDetector.threshold", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__call__", "sdr.FIR.__init__", "sdr.FIR.__len__", "sdr.FIR.__repr__", "sdr.FIR.__str__", "sdr.FIR.delay", "sdr.FIR.flush", "sdr.FIR.frequency_response", "sdr.FIR.frequency_response_log", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.reset", "sdr.FIR.state", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__call__", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__call__", "sdr.IIR.__init__", "sdr.IIR.__repr__", "sdr.IIR.__str__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.state", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.Interpolator", "sdr.Interpolator.__call__", "sdr.Interpolator.__init__", "sdr.Interpolator.__repr__", "sdr.Interpolator.__str__", "sdr.Interpolator.delay", "sdr.Interpolator.method", "sdr.Interpolator.polyphase_taps", "sdr.Interpolator.rate", "sdr.Interpolator.reset", "sdr.Interpolator.taps", "sdr.LinearModulation", "sdr.LinearModulation.__init__", "sdr.LinearModulation.__repr__", "sdr.LinearModulation.__str__", "sdr.LinearModulation.ber", "sdr.LinearModulation.bps", "sdr.LinearModulation.decide_symbols", "sdr.LinearModulation.demodulate", "sdr.LinearModulation.map_symbols", "sdr.LinearModulation.modulate", "sdr.LinearModulation.order", "sdr.LinearModulation.phase_offset", "sdr.LinearModulation.pulse_shape", "sdr.LinearModulation.rx_filter", "sdr.LinearModulation.ser", "sdr.LinearModulation.sps", "sdr.LinearModulation.symbol_map", "sdr.LinearModulation.tx_filter", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__call__", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.MSK", "sdr.MSK.__init__", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__call__", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.reset", "sdr.NCO.step", "sdr.OQPSK", "sdr.OQPSK.__init__", "sdr.OQPSK.__repr__", "sdr.OQPSK.__str__", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.__repr__", "sdr.PSK.__str__", "sdr.PSK.ber", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.PiMPSK", "sdr.PiMPSK.__init__", "sdr.Q", "sdr.Qinv", "sdr.ReplicaCorrelator", "sdr.ReplicaCorrelator.p_d", "sdr.ReplicaCorrelator.p_fa", "sdr.ReplicaCorrelator.roc", "sdr.ReplicaCorrelator.threshold", "sdr.Resampler", "sdr.Resampler.__call__", "sdr.Resampler.__init__", "sdr.Resampler.__repr__", "sdr.Resampler.__str__", "sdr.Resampler.delay", "sdr.Resampler.down", "sdr.Resampler.method", "sdr.Resampler.polyphase_taps", "sdr.Resampler.rate", "sdr.Resampler.reset", "sdr.Resampler.taps", "sdr.Resampler.up", "sdr.albersheim", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.barker", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.db", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.downsample", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.evm", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.half_sine", "sdr.hexdump", "sdr.iq_imbalance", "sdr.linear", "sdr.mix", "sdr.multirate_taps", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.percent", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.eye", "sdr.plot.filter", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.magnitude_response", "sdr.plot.p_d", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.phase_tree", "sdr.plot.raster", "sdr.plot.roc", "sdr.plot.ser", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.polyphase_matrix", "sdr.ppb", "sdr.ppm", "sdr.raised_cosine", "sdr.rectangular", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.to_complex_bb", "sdr.to_real_pb", "sdr.unpack", "sdr.upsample", "sdr.wavelength", "sdr.zadoff_chu", "Sequences", "Simulation", "Synchronization", "Documentation", "Formatting", "Installation", "Unit Tests", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265], "db": [0, 4, 5, 9, 20, 22, 38, 40, 42, 44, 45, 46, 48, 107, 117, 130, 140, 144, 148, 150, 152, 157, 159, 174, 175, 176, 177, 185, 190, 191, 192, 193, 194, 195, 197, 198, 202, 203, 205, 207, 208, 209, 210, 212, 213, 219, 226, 238, 241, 242, 259, 261, 262, 264], "x": [0, 1, 3, 5, 6, 7, 8, 9, 26, 27, 37, 42, 44, 49, 50, 66, 67, 73, 75, 92, 93, 103, 110, 112, 121, 124, 130, 140, 144, 152, 154, 155, 156, 161, 162, 175, 176, 179, 182, 184, 185, 186, 187, 188, 189, 192, 195, 196, 202, 203, 204, 206, 207, 209, 210, 211, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 227, 229, 230, 234, 235, 238, 240, 245, 246, 250, 254, 259, 260, 261, 265], "arraylik": [0, 1, 2, 3, 4, 5, 6, 7, 8, 26, 27, 28, 37, 38, 39, 40, 41, 42, 44, 49, 50, 51, 66, 70, 73, 74, 75, 76, 92, 93, 94, 103, 104, 107, 109, 110, 111, 112, 117, 130, 131, 140, 141, 144, 145, 148, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 174, 177, 179, 180, 182, 183, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 201, 203, 206, 208, 211, 215, 216, 217, 218, 219, 220, 221, 222, 225, 227, 228, 232, 233, 234, 235, 241, 242, 245, 247, 250], "ndarrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 26, 27, 33, 36, 37, 38, 39, 40, 41, 42, 47, 49, 50, 56, 57, 58, 59, 62, 63, 65, 66, 67, 72, 73, 75, 79, 80, 81, 82, 84, 86, 88, 89, 91, 92, 93, 99, 102, 103, 107, 109, 110, 111, 112, 115, 117, 119, 121, 124, 130, 132, 134, 139, 140, 144, 148, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 169, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 223, 224, 226, 229, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250], "float_": [0, 2, 3, 4, 5, 6, 7, 8, 37, 38, 39, 40, 41, 42, 47, 103, 107, 115, 117, 130, 134, 140, 144, 148, 150, 152, 154, 155, 156, 157, 158, 159, 160, 174, 177, 180, 183, 185, 190, 191, 192, 193, 194, 197, 198, 200, 203, 205, 208, 211, 212, 226, 234, 235, 236, 237, 239, 241, 242, 243, 244, 247], "convert": [0, 3, 103, 109, 111, 130, 140, 144, 152, 185, 190, 191, 193, 194, 201, 203, 211, 233, 234, 235, 241, 242, 243, 244], "linear": [0, 92, 94, 98, 103, 104, 130, 140, 144, 152, 161, 163, 168, 176, 185, 203, 220, 225, 227, 229, 263, 264], "unit": [0, 26, 49, 63, 73, 89, 92, 121, 131, 132, 141, 145, 153, 161, 176, 177, 185, 186, 187, 203, 228, 230, 254, 257, 258, 260, 263, 264], "percent": [0, 211], "percentag": [0, 211], "ppm": [0, 235, 240, 250], "part": [0, 230, 234, 235, 240, 260], "per": [0, 1, 27, 50, 93, 103, 104, 108, 110, 112, 118, 130, 131, 134, 140, 141, 144, 145, 152, 153, 176, 177, 190, 191, 193, 194, 196, 198, 200, 201, 206, 213, 214, 223, 234, 235, 236, 237, 239, 240, 241, 242, 245, 253, 259, 262, 264], "million": [0, 235, 240], "ppb": [0, 234], "billion": [0, 234], "ebn0_to_esn0": [0, 117, 150, 190, 261, 264], "ebn0": [0, 7, 103, 107, 130, 140, 144, 148, 152, 177, 190, 191, 212, 261], "bp": [0, 103, 108, 130, 140, 144, 152, 190, 191, 193, 241, 261], "int": [0, 1, 3, 6, 7, 26, 28, 31, 34, 42, 44, 45, 48, 49, 52, 55, 57, 58, 59, 60, 63, 66, 69, 73, 81, 82, 84, 85, 89, 92, 94, 97, 100, 103, 104, 108, 113, 118, 130, 131, 132, 139, 140, 141, 144, 145, 152, 153, 161, 163, 166, 167, 173, 175, 176, 178, 179, 181, 182, 186, 187, 188, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201, 205, 206, 207, 209, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 227, 228, 233, 236, 237, 239, 241, 242, 245, 246, 248, 249, 261], "ebn0_to_snr": [0, 130, 140, 144, 152, 191, 264], "esn0_to_ebn0": [0, 107, 148, 193, 264], "esn0": [0, 7, 103, 117, 130, 140, 144, 150, 152, 193, 194, 226, 261], "esn0_to_snr": [0, 194, 261, 264], "sp": [0, 6, 7, 103, 104, 110, 112, 118, 130, 131, 140, 141, 144, 145, 152, 153, 191, 194, 198, 200, 214, 223, 236, 237, 239, 241, 242, 243, 244, 259, 261, 262], "1": [0, 3, 6, 8, 9, 16, 19, 23, 25, 26, 28, 29, 30, 33, 36, 37, 38, 40, 41, 42, 49, 52, 53, 54, 55, 57, 58, 73, 74, 77, 78, 81, 82, 92, 93, 94, 95, 96, 99, 102, 103, 104, 109, 110, 111, 112, 119, 121, 125, 126, 130, 131, 132, 135, 140, 141, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 169, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 265], "snr_to_ebn0": [0, 107, 148, 177, 241, 264], "snr": [0, 2, 4, 7, 37, 38, 40, 42, 44, 45, 46, 47, 48, 130, 140, 144, 152, 174, 176, 177, 219, 241, 242, 243, 244, 250, 261, 264], "snr_to_esn0": [0, 117, 150, 242, 264], "pack": [1, 42, 44, 130, 140, 144, 152, 201, 206, 263, 264], "bpe": [1, 206, 245], "int_": [1, 6, 103, 109, 110, 130, 140, 144, 152, 179, 181, 182, 186, 187, 188, 199, 206, 245, 250], "binari": [1, 4, 6, 131, 141, 145, 151, 153, 178, 179, 180, 181, 182, 183, 188, 206, 229, 245, 250, 261, 263, 264], "arrai": [1, 33, 36, 42, 94, 99, 102, 104, 130, 131, 132, 140, 141, 144, 145, 151, 152, 153, 163, 169, 172, 175, 178, 179, 181, 182, 186, 187, 188, 192, 199, 206, 207, 209, 230, 233, 245, 258], "an": [1, 2, 3, 4, 26, 37, 49, 59, 73, 74, 76, 84, 92, 93, 104, 131, 132, 141, 145, 148, 150, 153, 156, 161, 177, 206, 212, 217, 226, 245, 247, 254, 263, 264], "multipl": [1, 206, 245, 261, 264], "bit": [1, 5, 7, 42, 44, 47, 103, 107, 108, 130, 131, 140, 141, 144, 145, 148, 151, 152, 153, 177, 179, 180, 182, 183, 190, 191, 193, 201, 206, 212, 241, 245, 263, 264], "element": [1, 201, 206, 245], "unpack": [1, 42, 44, 201, 245, 261, 263, 264], "hexdump": [1, 42, 201, 263, 264], "byte": [1, 201], "width": [1, 201], "16": [1, 148, 150, 151, 165, 190, 191, 193, 201, 212, 226, 233, 236, 239, 241, 242, 259, 264], "str": [1, 26, 29, 30, 49, 53, 54, 73, 77, 78, 92, 95, 96, 103, 105, 106, 130, 140, 142, 143, 144, 146, 147, 152, 161, 164, 165, 201, 214, 220, 223, 224, 227], "return": [1, 6, 9, 17, 19, 22, 23, 26, 27, 29, 30, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 63, 67, 73, 75, 77, 78, 81, 82, 84, 89, 92, 93, 95, 96, 103, 105, 106, 107, 109, 110, 111, 112, 117, 124, 130, 134, 139, 140, 142, 143, 144, 146, 147, 148, 150, 152, 154, 155, 157, 158, 159, 160, 161, 164, 165, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 257, 258, 259, 261, 264], "specifi": [1, 42, 45, 46, 48, 176, 177, 188, 201, 252, 257, 258], "class": [2, 3, 5, 6, 9, 26, 37, 42, 44, 45, 46, 47, 48, 49, 66, 73, 92, 103, 121, 130, 132, 140, 144, 152, 156, 161, 251, 257, 258, 261, 263, 264], "replicacorrel": [2, 156, 157, 158, 159, 160, 264], "implement": [2, 3, 6, 26, 37, 49, 66, 73, 92, 103, 121, 127, 130, 132, 140, 144, 152, 156, 161, 174, 251, 256], "clairvoy": [2, 156], "replica": [2, 156], "correl": [2, 156, 178, 248], "energydetector": [2, 37, 38, 39, 40, 41, 264], "energi": [2, 37, 107, 117, 148, 150, 156, 157, 158, 159, 160, 177, 190, 191, 192, 193, 194, 198, 200, 212, 226, 236, 237, 239, 241, 242, 263, 264], "albersheim": [2, 174, 264], "p_d": [2, 7, 37, 38, 40, 156, 157, 159, 174, 219, 225, 264], "p_fa": [2, 7, 37, 38, 39, 40, 41, 156, 157, 158, 159, 160, 174, 225], "estim": [2, 9, 103, 109, 110, 130, 140, 144, 152, 174, 220, 227, 260], "minimum": [2, 6, 130, 174, 264], "requir": [2, 27, 50, 93, 174, 252, 253, 254, 255, 264], "singl": [2, 40, 148, 150, 174], "sampl": [2, 3, 9, 16, 24, 26, 27, 31, 38, 39, 40, 41, 49, 50, 55, 57, 58, 59, 63, 66, 70, 81, 82, 84, 89, 92, 93, 94, 97, 103, 104, 110, 112, 118, 121, 125, 128, 130, 131, 132, 134, 135, 136, 138, 139, 140, 141, 144, 145, 152, 153, 161, 163, 166, 174, 176, 189, 191, 194, 196, 198, 200, 204, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 227, 228, 230, 236, 237, 239, 240, 241, 242, 243, 244, 246, 250, 256, 259, 260, 262, 263, 264], "given": [2, 37, 42, 44, 45, 46, 48, 66, 67, 156, 174, 195, 257, 258], "n_": [2, 38, 39, 40, 41, 174], "nc": [2, 38, 39, 40, 41, 174], "non": [2, 27, 38, 39, 40, 41, 50, 93, 174, 200, 237], "coher": [2, 38, 39, 40, 41, 174], "combin": [2, 174], "achiev": [2, 3, 174, 205, 233, 261, 262], "probabl": [2, 7, 37, 38, 39, 40, 41, 154, 155, 156, 157, 158, 159, 160, 174, 179, 180, 182, 183, 188, 219, 225, 250, 264], "fals": [2, 5, 26, 28, 29, 30, 37, 38, 39, 40, 41, 49, 51, 53, 54, 66, 68, 73, 74, 76, 77, 78, 92, 93, 94, 95, 96, 130, 140, 144, 148, 150, 152, 156, 157, 158, 159, 160, 161, 163, 164, 165, 174, 175, 179, 182, 188, 192, 204, 209, 210, 213, 220, 225, 227, 230, 238, 258, 262], "alarm": [2, 37, 38, 39, 40, 41, 156, 157, 158, 159, 160, 174, 225], "p_": [2, 7, 37, 38, 39, 40, 41, 148, 150, 156, 157, 158, 159, 160, 174, 175, 176, 185, 188, 195, 203, 207, 209, 212, 220, 225, 226], "fa": [2, 7, 37, 38, 39, 40, 41, 156, 157, 158, 159, 160, 174, 225], "thi": [2, 9, 26, 44, 45, 46, 48, 49, 73, 92, 94, 103, 104, 119, 130, 134, 140, 141, 144, 145, 151, 152, 153, 161, 163, 174, 176, 177, 179, 182, 188, 189, 195, 197, 205, 214, 218, 220, 224, 227, 230, 246, 252, 254, 255, 256, 258, 260, 261, 262], "function": [2, 7, 8, 9, 18, 49, 73, 74, 121, 154, 155, 174, 177, 189, 198, 212, 219, 220, 225, 226, 227, 246, 257, 258, 260, 262, 263, 264], "": [2, 3, 7, 9, 17, 19, 20, 21, 23, 24, 26, 37, 44, 45, 46, 47, 48, 49, 57, 58, 63, 73, 81, 82, 89, 92, 103, 104, 109, 110, 111, 112, 130, 140, 144, 152, 156, 158, 160, 161, 174, 176, 177, 191, 194, 195, 196, 202, 213, 214, 215, 216, 218, 220, 221, 222, 223, 224, 227, 228, 230, 231, 240, 241, 242, 243, 244, 255, 256, 259, 261, 263, 264], "equat": [2, 17, 19, 20, 21, 22, 23, 38, 39, 41, 73, 140, 144, 152, 157, 158, 160, 174, 197], "fir": [3, 26, 27, 28, 29, 30, 31, 33, 35, 36, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 92, 93, 94, 95, 96, 97, 99, 101, 102, 161, 162, 163, 164, 165, 166, 169, 171, 172, 205, 214, 215, 216, 217, 218, 221, 222, 228, 232, 233, 259, 263, 264], "finit": [3, 26, 49, 92, 161, 263, 264], "impuls": [3, 7, 26, 49, 59, 73, 84, 92, 161, 198, 215, 217, 230, 262, 263, 264], "respons": [3, 7, 26, 49, 57, 58, 59, 63, 73, 81, 82, 84, 89, 92, 161, 198, 215, 216, 217, 218, 222, 228, 262, 263, 264], "iir": [3, 7, 9, 18, 58, 59, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 121, 127, 215, 216, 217, 218, 221, 222, 228, 232, 257, 260, 263, 264], "infinit": [3, 73, 263, 264], "interpol": [3, 26, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 120, 130, 140, 144, 152, 161, 163, 173, 205, 214, 233, 246, 259, 261, 263, 264], "polyphas": [3, 26, 27, 28, 33, 36, 92, 93, 94, 99, 102, 161, 162, 163, 169, 172, 189, 205, 233, 246, 263, 264], "decim": [3, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 103, 104, 109, 110, 111, 112, 116, 119, 130, 131, 140, 141, 144, 145, 151, 152, 153, 161, 163, 167, 189, 205, 233, 261, 263, 264], "ration": [3, 161, 163, 205, 233], "multirate_tap": [3, 28, 94, 163, 205, 264], "up": [3, 161, 163, 173, 197, 205, 233, 253], "down": [3, 161, 163, 167, 205, 233], "comput": [3, 8, 26, 37, 38, 39, 40, 41, 103, 107, 117, 130, 140, 144, 148, 150, 152, 154, 155, 156, 157, 158, 159, 160, 175, 176, 192, 197, 205, 207, 209, 257, 258, 260, 262], "p": [3, 4, 8, 132, 134, 154, 155, 161, 163, 169, 170, 172, 173, 179, 180, 182, 183, 188, 205, 233, 250], "q": [3, 8, 130, 140, 154, 155, 156, 157, 158, 160, 161, 163, 167, 170, 205, 233, 248, 264], "polyphase_matrix": [3, 233, 264], "tap": [3, 26, 28, 33, 36, 49, 54, 65, 66, 72, 73, 79, 80, 92, 94, 99, 102, 161, 163, 169, 172, 233, 257, 258], "h_i": [3, 26, 28, 33, 36, 49, 51, 65, 92, 94, 99, 102, 161, 163, 169, 172, 233, 257], "matrix": [3, 188, 233, 250], "h_": [3, 9, 26, 33, 36, 92, 99, 102, 161, 169, 172, 233, 260], "i": [3, 9, 16, 25, 26, 27, 28, 33, 36, 37, 39, 40, 41, 42, 47, 49, 50, 51, 59, 63, 64, 65, 66, 71, 73, 76, 80, 84, 89, 90, 92, 93, 94, 99, 102, 104, 121, 125, 126, 128, 130, 134, 138, 140, 141, 144, 145, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 169, 172, 174, 175, 176, 177, 179, 180, 182, 183, 185, 188, 190, 191, 192, 193, 194, 196, 197, 198, 200, 201, 202, 203, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 220, 224, 227, 228, 230, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265], "j": [3, 26, 33, 36, 73, 76, 79, 92, 99, 102, 130, 132, 140, 144, 152, 161, 169, 172, 176, 188, 202, 204, 233, 248, 257, 258, 260], "farrowresampl": [3, 66, 67, 68, 69, 70, 71, 72, 256, 264], "cubic": [3, 66], "farrow": [3, 66, 67, 68, 69, 70, 71, 72, 263, 264], "arbitrari": [3, 6, 66, 67, 68, 69, 70, 71, 72, 103, 263, 264], "mix": [3, 204, 263, 264], "freq": [3, 4, 132, 134, 196, 197, 204, 208, 247, 250, 256, 260], "float": [3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 40, 42, 44, 45, 46, 48, 57, 58, 66, 67, 73, 74, 81, 82, 83, 103, 104, 114, 121, 122, 123, 125, 126, 128, 130, 131, 132, 133, 135, 136, 137, 140, 141, 144, 145, 149, 152, 153, 159, 161, 170, 175, 176, 177, 179, 182, 184, 195, 196, 198, 202, 204, 205, 207, 209, 210, 213, 214, 215, 216, 218, 220, 221, 222, 223, 224, 227, 229, 230, 236, 238, 239, 240, 250], "0": [3, 6, 8, 16, 26, 27, 33, 36, 37, 40, 42, 49, 50, 51, 53, 54, 57, 58, 65, 73, 74, 76, 77, 78, 79, 80, 81, 82, 92, 93, 94, 99, 102, 103, 104, 109, 110, 111, 112, 119, 125, 130, 131, 132, 135, 140, 141, 144, 145, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 169, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 194, 195, 196, 197, 198, 199, 202, 203, 204, 206, 208, 211, 213, 214, 215, 216, 217, 218, 221, 222, 223, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 265], "time": [3, 5, 9, 16, 17, 19, 20, 21, 22, 23, 49, 73, 121, 125, 140, 144, 152, 175, 176, 184, 188, 189, 192, 194, 196, 198, 202, 204, 207, 209, 210, 214, 215, 220, 224, 227, 230, 236, 238, 239, 240, 242, 243, 244, 246, 250, 256, 257, 258, 262, 263, 264], "domain": [3, 5, 175, 176, 184, 189, 192, 196, 202, 204, 207, 209, 210, 215, 220, 224, 227, 230, 238, 240, 243, 244, 246, 250, 263, 264], "n": [3, 5, 6, 7, 8, 9, 26, 27, 37, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 73, 75, 76, 79, 81, 82, 84, 85, 89, 92, 93, 103, 104, 110, 112, 115, 116, 120, 121, 124, 130, 132, 134, 139, 140, 141, 144, 145, 152, 153, 154, 155, 156, 158, 160, 161, 162, 175, 176, 177, 178, 181, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 202, 204, 205, 207, 209, 210, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 227, 228, 230, 238, 240, 241, 242, 243, 244, 246, 248, 249, 250, 260, 262, 263], "complex": [3, 5, 7, 37, 38, 39, 40, 41, 103, 104, 109, 110, 111, 112, 119, 130, 131, 132, 134, 139, 140, 141, 144, 145, 151, 152, 153, 156, 157, 158, 159, 160, 176, 177, 189, 195, 202, 204, 213, 214, 224, 229, 230, 243, 244, 246, 250, 256, 257, 258, 260, 261, 263, 264], "exponenti": [3, 189, 204, 243, 244, 246, 256, 257, 258], "real": [3, 38, 39, 41, 130, 140, 154, 155, 157, 158, 160, 176, 204, 214, 224, 230, 243, 244, 256, 257, 258, 260, 263, 264], "sinusoid": [3, 144, 176, 204, 243, 244, 258, 264], "to_complex_bb": [3, 243, 264], "x_r": [3, 243, 244], "complex_": [3, 7, 103, 110, 111, 112, 119, 130, 132, 134, 139, 140, 144, 151, 152, 213, 229, 243, 244, 248, 249], "passband": [3, 198, 200, 236, 237, 239, 243, 244, 259, 264], "center": [3, 200, 230, 237, 243, 244, 264], "f_": [3, 9, 16, 24, 27, 57, 58, 81, 82, 93, 103, 104, 118, 130, 131, 140, 141, 144, 145, 152, 153, 189, 191, 194, 196, 198, 204, 214, 215, 216, 218, 220, 221, 222, 223, 224, 227, 230, 240, 241, 242, 243, 244, 246, 256, 257, 258, 260, 262], "r": [3, 26, 27, 28, 33, 34, 36, 66, 67, 92, 93, 94, 99, 100, 102, 177, 189, 190, 191, 193, 195, 198, 204, 236, 239, 241, 243, 244, 246, 252, 253, 254, 255, 258, 259, 260, 262], "4": [3, 7, 17, 19, 26, 33, 36, 38, 40, 42, 58, 77, 78, 82, 92, 93, 99, 102, 130, 131, 132, 140, 141, 144, 148, 149, 150, 151, 152, 156, 157, 158, 159, 160, 161, 164, 165, 169, 172, 174, 176, 177, 178, 180, 181, 183, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 208, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 226, 228, 229, 230, 231, 232, 233, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 248, 253, 254, 256, 258, 259, 261], "rate": [3, 5, 7, 9, 16, 24, 26, 27, 28, 30, 34, 42, 43, 44, 46, 47, 57, 58, 66, 67, 81, 82, 92, 93, 94, 96, 100, 103, 107, 117, 130, 140, 144, 148, 150, 152, 161, 162, 163, 165, 167, 170, 173, 189, 190, 191, 193, 196, 204, 205, 212, 214, 215, 216, 218, 220, 221, 222, 223, 224, 226, 227, 230, 233, 240, 241, 243, 244, 246, 250, 263, 264], "baseband": [3, 7, 9, 130, 140, 144, 152, 204, 214, 223, 243, 244, 259, 260, 264], "x_c": [3, 243, 244], "c": [3, 9, 17, 19, 20, 21, 22, 23, 44, 45, 46, 47, 48, 103, 104, 119, 121, 130, 140, 144, 151, 152, 177, 180, 183, 197, 208, 229, 243, 244, 247, 260], "2": [3, 6, 7, 9, 17, 19, 22, 26, 29, 30, 33, 36, 37, 38, 39, 40, 41, 42, 49, 53, 54, 55, 57, 58, 77, 78, 81, 82, 92, 93, 95, 96, 99, 102, 103, 104, 113, 130, 132, 140, 141, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 252, 255, 256, 257, 258, 259, 260, 261, 262], "to_real_pb": [3, 244, 259, 264], "2f_": [3, 244], "upsampl": [3, 92, 161, 246, 264], "factor": [3, 5, 9, 16, 25, 104, 121, 125, 126, 141, 145, 153, 184, 189, 246, 260], "downsampl": [3, 189, 264], "bsc_capac": [4, 183, 264], "calcul": [4, 5, 177, 180, 183, 195, 197, 208, 247, 264], "symmetr": [4, 182, 183, 188, 243, 244, 250, 263], "bsc": [4, 182, 183, 188, 250, 263, 264], "bec_capac": [4, 180, 264], "erasur": [4, 179, 180, 188, 250, 263], "bec": [4, 179, 180, 188, 250, 263, 264], "awgn_capac": [4, 177, 264], "addit": [4, 176, 177, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 246, 250, 263], "white": [4, 176, 177, 250, 263], "gaussian": [4, 6, 176, 177, 198, 250, 263, 264], "nois": [4, 9, 10, 11, 16, 22, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 107, 117, 121, 125, 128, 130, 140, 144, 148, 150, 152, 156, 157, 158, 159, 160, 176, 177, 190, 191, 193, 194, 212, 226, 241, 242, 250, 260, 263], "awgn": [4, 130, 140, 144, 148, 150, 152, 176, 177, 195, 212, 213, 226, 243, 244, 250, 261, 263, 264], "fspl": [4, 197], "distanc": [4, 197], "free": [4, 130, 140, 144, 152, 197, 263], "space": [4, 58, 82, 197, 263], "wavelength": [4, 247, 264], "lambda": [4, 197, 247], "electromagnet": [4, 247], "wave": [4, 130, 247], "frequenc": [4, 9, 17, 19, 21, 26, 49, 57, 58, 73, 81, 82, 92, 121, 130, 132, 134, 161, 189, 196, 197, 204, 208, 215, 216, 218, 220, 221, 222, 227, 243, 244, 246, 247, 250, 262, 263, 264], "f": [4, 17, 19, 26, 40, 57, 58, 81, 82, 92, 132, 134, 161, 174, 176, 196, 197, 198, 204, 208, 240, 247, 248, 253, 256, 257, 258, 259, 260, 261, 262], "parabolic_antenna": [4, 208, 264], "tupl": [4, 26, 37, 40, 42, 44, 47, 49, 57, 58, 73, 81, 82, 92, 103, 110, 130, 140, 144, 152, 156, 159, 161, 175, 192, 207, 208, 209, 213, 215, 216, 217, 218, 221, 222, 228, 229, 232], "gain": [4, 9, 12, 13, 14, 15, 16, 73, 74, 83, 121, 122, 123, 125, 132, 133, 135, 174, 197, 198, 200, 208, 236, 237, 239, 260, 263], "g": [4, 47, 208, 254], "beamwidth": [4, 208], "theta": [4, 132, 135, 137, 138, 208], "parabol": [4, 208], "reflector": [4, 208], "signal": [5, 7, 9, 17, 19, 22, 23, 26, 27, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 56, 66, 67, 73, 75, 92, 93, 103, 104, 115, 121, 124, 130, 132, 134, 139, 140, 141, 144, 145, 152, 153, 156, 157, 158, 159, 160, 161, 162, 175, 176, 177, 184, 185, 189, 190, 191, 192, 193, 194, 196, 197, 198, 202, 203, 204, 205, 207, 208, 209, 210, 214, 215, 216, 218, 220, 221, 222, 223, 224, 227, 230, 233, 238, 240, 241, 242, 243, 244, 246, 247, 257, 258, 260, 262, 263, 264], "peak_pow": [5, 207, 209, 264], "peak": [5, 130, 140, 152, 184, 195, 207, 209, 210], "average_pow": [5, 175, 207, 264], "averag": [5, 42, 130, 140, 152, 175, 176, 177, 195, 207, 220], "papr": [5, 130, 140, 152, 207, 259, 264], "ratio": [5, 22, 38, 40, 42, 44, 45, 46, 47, 48, 107, 117, 130, 140, 148, 150, 152, 157, 159, 176, 177, 190, 191, 193, 194, 207, 211, 212, 226, 234, 235, 241, 242], "peak_voltag": [5, 184, 210, 264], "bool": [5, 26, 28, 38, 39, 40, 41, 49, 51, 64, 66, 68, 71, 73, 74, 76, 90, 92, 94, 130, 140, 144, 148, 150, 152, 157, 158, 159, 160, 161, 163, 175, 192, 204, 209, 210, 213, 222, 224, 229, 230, 238], "rms_voltag": [5, 184, 238, 264], "root": [5, 6, 104, 141, 145, 153, 195, 214, 230, 238, 239, 248, 249, 257, 263], "mean": [5, 195, 220, 227, 238, 262], "squar": [5, 6, 104, 141, 145, 153, 195, 197, 208, 230, 238, 239, 257], "rm": [5, 184, 195, 238], "crest_factor": [5, 184, 207, 264], "crest": [5, 184], "errorr": [5, 42, 43, 44, 45, 46, 47, 48, 261, 264], "A": [5, 9, 17, 19, 20, 21, 22, 23, 25, 27, 42, 49, 50, 93, 104, 121, 141, 145, 153, 174, 181, 199, 201, 202, 208, 236, 239, 251, 253, 260], "error": [5, 7, 9, 15, 16, 22, 42, 43, 44, 46, 47, 48, 103, 107, 117, 121, 125, 130, 140, 144, 148, 150, 152, 174, 183, 195, 212, 226, 260, 263, 264], "ber": [5, 7, 42, 103, 107, 130, 140, 144, 148, 152, 212, 261, 263, 264], "symbol": [5, 7, 42, 44, 47, 92, 103, 104, 108, 109, 110, 111, 112, 117, 118, 119, 130, 131, 140, 141, 144, 145, 148, 150, 151, 152, 153, 176, 190, 191, 193, 194, 195, 196, 198, 200, 213, 214, 223, 226, 229, 236, 237, 239, 241, 242, 259, 262, 263, 264], "ser": [5, 7, 42, 103, 117, 130, 140, 144, 150, 152, 226, 261, 263, 264], "evm": [5, 195, 263, 264], "x_hat": [5, 7, 42, 44, 103, 110, 130, 140, 144, 152, 195, 213, 261], "ref": [5, 174, 195, 198, 205], "vector": [5, 42, 70, 195, 220, 227, 263, 264], "magnitud": [5, 7, 178, 195, 215, 218, 248, 263, 264], "hat": [5, 7, 44, 103, 109, 110, 130, 140, 144, 152, 195, 213, 229], "k": [5, 6, 7, 44, 103, 104, 108, 109, 110, 111, 112, 113, 130, 140, 144, 145, 152, 153, 186, 187, 190, 191, 193, 195, 213, 229, 241, 259, 262], "linearmodul": [6, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 144, 229, 264], "amplitud": [6, 103, 104, 202, 250, 256, 260], "psk": [6, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 176, 195, 196, 202, 212, 213, 214, 226, 229, 240, 259, 263, 264], "shift": [6, 130, 140, 144, 148, 149, 150, 151, 152, 248, 257, 258, 263, 264], "kei": [6, 130, 140, 144, 148, 149, 150, 151, 152, 263, 264], "demodul": [6, 103, 110, 130, 140, 144, 152, 261, 264], "pimpsk": [6, 152, 153, 264], "pi": [6, 26, 77, 78, 92, 93, 132, 140, 144, 152, 153, 161, 176, 189, 197, 198, 202, 204, 208, 215, 216, 217, 218, 221, 222, 228, 230, 232, 243, 244, 246, 248, 256, 257, 258, 260, 263, 264], "m": [6, 73, 76, 80, 103, 104, 108, 109, 110, 111, 112, 113, 119, 130, 140, 144, 145, 151, 152, 153, 188, 190, 191, 193, 197, 229, 241, 252, 253, 254, 255, 263, 264], "oqpsk": [6, 130, 140, 141, 142, 143, 264], "offset": [6, 17, 19, 26, 92, 93, 103, 104, 114, 130, 131, 132, 134, 135, 137, 140, 141, 144, 145, 149, 152, 153, 161, 196, 204, 230, 240, 250, 260, 263, 264], "quadratur": [6, 130, 140, 202], "msk": [6, 130, 131, 223, 264], "rectangular": [6, 104, 141, 145, 153, 237, 259, 262, 263, 264], "span": [6, 7, 104, 141, 145, 153, 198, 200, 214, 223, 236, 237, 239, 259, 262], "half_sin": [6, 131, 200, 264], "half": [6, 130, 140, 200, 205, 208, 263, 264], "sine": [6, 130, 200, 263, 264], "time_bandwidth": [6, 198], "raised_cosin": [6, 104, 141, 145, 153, 214, 236, 262, 264], "alpha": [6, 104, 141, 145, 153, 198, 231, 236, 239, 259, 262], "rais": [6, 104, 141, 145, 153, 214, 230, 236, 239, 257, 263], "cosin": [6, 104, 141, 145, 153, 214, 230, 236, 239, 257, 263], "rc": [6, 104, 141, 145, 153, 236], "root_raised_cosin": [6, 53, 54, 104, 141, 145, 153, 214, 215, 216, 217, 218, 221, 222, 228, 230, 232, 239, 257, 259, 261, 262, 264], "srrc": [6, 104, 140, 141, 144, 145, 152, 153, 214, 230, 239, 259], "binary_cod": [6, 181, 264], "gener": [6, 130, 140, 144, 152, 176, 179, 181, 182, 188, 199, 225, 252, 261, 264], "code": [6, 26, 29, 49, 53, 73, 77, 92, 95, 103, 105, 130, 131, 140, 141, 142, 144, 145, 146, 151, 152, 153, 161, 164, 178, 181, 190, 191, 193, 199, 213, 229, 241, 249, 254, 261, 264], "length": [6, 7, 26, 27, 40, 49, 50, 52, 59, 63, 75, 92, 93, 94, 104, 110, 112, 131, 141, 145, 153, 161, 163, 178, 181, 198, 199, 200, 205, 215, 217, 220, 224, 227, 228, 236, 237, 239, 243, 248, 249, 253, 256, 259, 262], "gray_cod": [6, 199, 264], "grai": [6, 130, 131, 140, 141, 144, 145, 151, 152, 153, 199, 213, 229, 261, 263], "diff_encod": [6, 130, 140, 144, 148, 150, 152, 186, 187, 264], "y_prev": [6, 186, 187], "differenti": [6, 130, 148, 150, 186, 187, 230, 263, 264], "input": [6, 9, 17, 19, 22, 23, 26, 27, 28, 31, 49, 50, 51, 59, 62, 63, 66, 67, 68, 70, 73, 74, 75, 76, 84, 89, 92, 93, 94, 97, 121, 124, 132, 134, 140, 144, 148, 150, 152, 154, 161, 162, 163, 166, 176, 177, 179, 180, 182, 183, 185, 186, 187, 188, 189, 203, 206, 211, 217, 228, 234, 235, 245, 246, 250, 257, 258, 260], "data": [6, 186, 187, 201, 206, 245, 263], "diff_decod": [6, 186, 187, 264], "y": [6, 26, 27, 49, 50, 56, 67, 73, 75, 92, 93, 121, 124, 132, 134, 139, 161, 176, 179, 182, 186, 187, 188, 189, 196, 202, 204, 213, 218, 220, 227, 229, 230, 240, 246, 260, 261], "decod": [6, 186], "use_styl": [7, 231], "appli": [7, 26, 92, 104, 161, 196, 202, 213, 214, 220, 227, 229, 230, 231, 240, 250], "default": [7, 59, 63, 131, 141, 145, 151, 153, 175, 192, 207, 209, 213, 218, 220, 224, 227, 229, 231, 261], "matplotlib": [7, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 256, 257, 258, 259, 260, 261, 262, 263], "rcparam": [7, 231], "time_domain": [7, 26, 92, 93, 130, 132, 140, 144, 152, 161, 176, 189, 204, 230, 243, 244, 246, 259, 261, 262, 264], "raster": [7, 214, 223, 224, 263, 264], "none": [7, 26, 40, 49, 59, 63, 66, 70, 92, 104, 121, 129, 134, 141, 145, 153, 159, 161, 175, 176, 177, 179, 182, 188, 192, 206, 207, 209, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 227, 228, 229, 230, 245, 250, 256, 259, 261], "periodogram": [7, 189, 220, 243, 244, 246, 259, 263, 264], "power": [7, 130, 140, 144, 152, 175, 176, 177, 185, 195, 198, 200, 203, 207, 208, 209, 220, 236, 237, 239, 262, 263], "densiti": [7, 22, 220, 259, 262], "xx": [7, 220], "us": [7, 26, 28, 32, 35, 49, 51, 56, 61, 66, 68, 73, 74, 76, 87, 92, 93, 94, 98, 101, 103, 104, 109, 110, 121, 127, 130, 140, 141, 144, 145, 152, 153, 161, 163, 168, 171, 177, 180, 183, 195, 201, 205, 206, 213, 214, 215, 217, 219, 220, 227, 228, 245, 252, 253, 254, 255, 257, 258, 261, 262, 263, 265], "welch": [7, 220, 227], "method": [7, 30, 32, 94, 96, 98, 163, 165, 168, 220, 227, 257, 258, 264], "spectrogram": [7, 227, 263, 264], "constel": [7, 130, 140, 144, 149, 152, 176, 195, 196, 202, 213, 240, 248, 263, 264], "symbol_map": [7, 103, 104, 119, 130, 140, 144, 149, 151, 152, 195, 229, 230, 261, 264], "map": [7, 103, 104, 111, 119, 130, 140, 144, 151, 152, 195, 229, 263, 264], "ey": [7, 130, 140, 144, 152, 214, 263, 264], "diagram": [7, 9, 26, 92, 121, 132, 161, 186, 187, 214, 263, 264], "phase_tre": [7, 130, 223, 264], "phase": [7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 103, 104, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 145, 148, 149, 150, 151, 152, 153, 174, 196, 202, 204, 221, 222, 223, 250, 263, 264], "tree": [7, 223, 264], "continu": [7, 130, 223, 256, 264], "cpm": [7, 223, 264], "kwarg": [7, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232], "e_b": [7, 44, 45, 46, 47, 48, 103, 107, 130, 140, 144, 148, 152, 177, 190, 191, 193, 212, 241, 263], "n_0": [7, 22, 44, 45, 46, 47, 48, 103, 107, 117, 130, 140, 144, 148, 150, 152, 176, 177, 190, 191, 193, 194, 195, 212, 213, 226, 241, 242, 261, 263], "e_": [7, 44, 45, 46, 47, 48, 103, 117, 130, 140, 144, 150, 152, 176, 177, 190, 193, 194, 195, 213, 226, 242, 261, 263], "roc": [7, 37, 40, 156, 159, 225, 264], "receiv": [7, 37, 38, 40, 42, 44, 103, 109, 110, 116, 130, 140, 144, 148, 150, 152, 156, 157, 158, 159, 160, 195, 197, 214, 219, 225, 264], "oper": [7, 37, 40, 156, 159, 225, 264], "characterist": [7, 37, 40, 156, 159, 225, 264], "curv": [7, 37, 40, 148, 150, 156, 159, 212, 225, 226, 264], "enr": [7, 156, 157, 159, 219], "impulse_respons": [7, 26, 49, 59, 73, 84, 92, 161, 198, 200, 205, 217, 236, 237, 239, 257, 258, 262, 264], "h": [7, 26, 37, 49, 51, 53, 54, 57, 58, 59, 73, 81, 82, 84, 92, 103, 104, 115, 116, 120, 121, 130, 140, 141, 144, 145, 152, 153, 156, 161, 198, 205, 214, 215, 217, 218, 222, 233, 259, 260, 262], "step_respons": [7, 26, 49, 63, 73, 89, 92, 161, 228, 257, 258, 260, 264], "step": [7, 26, 49, 63, 73, 89, 92, 132, 134, 139, 161, 215, 228, 263], "zeros_pol": [7, 232, 258, 264], "zero": [7, 26, 27, 49, 56, 70, 73, 74, 77, 78, 91, 92, 93, 94, 121, 134, 161, 163, 200, 206, 215, 216, 217, 218, 221, 222, 228, 230, 232, 237, 243, 257, 259, 260, 262, 263, 264], "pole": [7, 73, 74, 77, 78, 86, 215, 216, 217, 218, 221, 222, 228, 232, 257, 263], "magnitude_respons": [7, 57, 58, 81, 82, 200, 205, 218, 236, 237, 239, 257, 258, 260, 262, 264], "omega": [7, 26, 49, 57, 58, 73, 81, 82, 92, 132, 135, 136, 138, 161, 215, 216, 218, 221, 222, 260], "phase_respons": [7, 57, 58, 81, 82, 222, 264], "angl": [7, 222, 260], "phase_delai": [7, 221, 264], "delai": [7, 26, 27, 30, 31, 49, 50, 54, 55, 66, 92, 93, 96, 97, 121, 132, 161, 165, 166, 186, 187, 200, 216, 221, 237, 260, 263], "tau_": [7, 221], "phi": [7, 103, 104, 114, 130, 131, 140, 141, 144, 145, 149, 152, 153, 196, 202, 204, 221], "group_delai": [7, 216, 257, 258, 264], "group": [7, 216, 263], "tau_g": [7, 216], "complementari": [8, 154, 155], "cumul": [8, 154, 155], "distribut": [8, 154, 155], "standard": [8, 154, 155], "normal": [8, 9, 11, 16, 121, 125, 128, 154, 155, 195, 198, 200, 215, 216, 218, 220, 221, 222, 227, 236, 237, 239, 260, 262], "mathcal": [8, 37, 154, 155, 156, 157, 158, 159, 160, 176, 188], "qinv": [8, 154, 155, 264], "invers": [8, 155], "closedlooppl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 251, 260, 264], "defin": [9, 49, 73, 176, 188, 198, 225, 248, 251, 258, 263], "perform": [9, 27, 50, 93, 148, 150, 189, 246, 248, 251, 257, 258, 261, 263, 264], "close": [9, 16, 18, 251, 263, 264], "loop": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 251, 263, 264], "pll": [9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 251, 263, 264], "meant": 9, "analysi": [9, 16, 253, 260, 263, 264], "onli": [9, 27, 35, 50, 56, 61, 66, 70, 87, 93, 101, 104, 131, 141, 145, 151, 153, 171, 176, 197, 200, 224, 237, 255, 260, 261], "block": [9, 26, 92, 121, 132, 161, 186, 187], "bb": [9, 259, 260], "phase_err": 9, "ped": [9, 15, 16, 125, 260], "lf": [9, 260], "phase_est": 9, "lo": [9, 260], "nco": [9, 12, 16, 125, 132, 133, 134, 135, 136, 137, 138, 139, 251, 260, 263, 264], "local": [9, 252, 260], "oscil": [9, 132, 135, 251, 260, 263, 264], "detector": [9, 15, 16, 37, 125, 156, 260, 264], "filter": [9, 13, 14, 16, 18, 26, 27, 28, 31, 32, 33, 35, 36, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 101, 102, 103, 110, 116, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 140, 144, 152, 161, 162, 163, 166, 168, 169, 171, 172, 189, 198, 200, 205, 214, 215, 216, 217, 218, 221, 222, 228, 230, 232, 233, 236, 237, 239, 246, 251, 262, 263, 264], "numer": [9, 132, 135, 251, 258, 260, 263, 264], "control": [9, 132, 135, 236, 239, 251, 260, 263, 264], "The": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 69, 70, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 93, 94, 97, 98, 99, 100, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 252, 253, 254, 255, 257, 258, 260, 261, 262, 263, 265], "transfer": [9, 18, 49, 73, 74, 121, 198, 257, 258, 260], "2nd": [9, 121, 125, 251, 260, 264], "order": [9, 26, 27, 30, 42, 47, 49, 50, 54, 60, 66, 69, 73, 78, 85, 92, 93, 94, 96, 103, 104, 113, 121, 125, 130, 140, 144, 145, 152, 153, 161, 163, 165, 176, 190, 191, 193, 195, 196, 198, 213, 214, 223, 224, 236, 239, 240, 241, 251, 258, 259, 260, 261, 264], "proport": [9, 13, 27, 93, 121, 122, 125, 197, 208, 251, 264], "plu": [9, 121, 125, 251, 264], "integr": [9, 14, 38, 39, 40, 41, 121, 123, 125, 174, 251, 255, 258, 264], "z": [9, 49, 73, 121, 132, 186, 187, 248, 257, 258, 260], "k_1": [9, 13, 121, 122, 260], "k_2": [9, 14, 121, 123, 260], "frac": [9, 17, 19, 22, 23, 37, 38, 39, 41, 49, 55, 73, 94, 121, 140, 144, 152, 156, 157, 158, 163, 174, 175, 176, 177, 184, 190, 191, 193, 194, 195, 197, 198, 202, 203, 204, 207, 208, 238, 241, 242, 247, 248, 260], "k_0": [9, 12, 16, 125, 132, 133, 135, 260], "k_p": [9, 15, 16, 125, 260], "refer": [9, 17, 19, 20, 21, 22, 23, 37, 38, 39, 41, 42, 66, 121, 148, 150, 156, 157, 158, 160, 174, 176, 184, 195, 196, 198, 205, 207, 233, 236, 239, 240, 248, 258, 262, 263], "michael": [9, 17, 19, 20, 21, 22, 23, 121, 236, 239], "rice": [9, 17, 19, 20, 21, 22, 23, 121, 236, 239], "digit": [9, 17, 19, 20, 21, 22, 23, 121, 148, 150, 236, 239, 260, 263, 264], "commun": [9, 17, 19, 20, 21, 22, 23, 121, 148, 150, 205, 233, 236, 239, 260, 263], "discret": [9, 17, 19, 20, 21, 22, 23, 121, 176, 188, 194, 236, 239, 242, 250, 256, 260, 263], "approach": [9, 17, 19, 20, 21, 22, 23, 121, 177, 180, 183, 236, 239, 260], "appendix": [9, 121, 236, 239], "lock": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139], "exampl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 33, 35, 36, 38, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 99, 101, 102, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 148, 149, 150, 151, 152, 154, 155, 157, 159, 161, 164, 165, 169, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 260], "see": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 35, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 83, 85, 86, 87, 88, 90, 91, 101, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144, 149, 151, 152, 161, 171, 189, 198, 200, 215, 216, 217, 218, 221, 222, 228, 232, 236, 237, 239, 263], "noise_bandwidth": [9, 16, 121, 125, 128], "damping_factor": [9, 16, 121, 125, 126], "creat": [9, 16, 26, 28, 42, 43, 49, 51, 66, 68, 73, 74, 76, 92, 93, 94, 103, 104, 121, 125, 130, 131, 132, 135, 140, 141, 144, 145, 149, 152, 153, 161, 163, 176, 178, 195, 196, 204, 230, 240, 243, 244, 248, 256, 260, 262], "object": [9, 16, 26, 29, 30, 42, 43, 49, 53, 54, 73, 77, 78, 92, 95, 96, 103, 104, 105, 106, 130, 131, 140, 141, 142, 143, 144, 145, 146, 147, 152, 153, 161, 164, 165, 215, 216, 217, 218, 221, 222, 228, 232, 260, 264], "phase_lock_tim": [9, 23], "frequency_lock_tim": [9, 17], "freq_offset": [9, 17, 19], "lock_tim": [9, 19, 260], "phase_error_vari": [9, 22], "cn0": [9, 22], "varianc": [9, 22, 37, 39, 41, 158, 160, 176], "steadi": [9, 22], "state": [9, 22, 26, 27, 35, 49, 50, 56, 61, 62, 64, 66, 70, 71, 73, 87, 88, 90, 92, 93, 101, 161, 171, 264], "sample_r": [9, 16, 24, 26, 57, 58, 81, 82, 92, 93, 130, 140, 144, 152, 161, 189, 196, 204, 214, 215, 216, 218, 220, 221, 222, 223, 224, 227, 230, 243, 244, 246, 256, 260, 262], "bnt": [9, 11, 260], "bandwidth": [9, 10, 11, 16, 20, 121, 125, 128, 177, 198, 236, 239, 260, 262], "b_n": [9, 10, 11, 16, 17, 19, 22, 23, 121, 125, 128], "t": [9, 11, 16, 37, 121, 125, 128, 156, 198, 201, 252, 256], "bn": [9, 10], "hz": [9, 10, 16, 17, 19, 22, 57, 58, 81, 82, 121, 125, 128, 177, 185, 189, 196, 197, 198, 203, 204, 208, 243, 244, 247, 256], "zeta": [9, 16, 25, 121, 125, 126], "damp": [9, 16, 25, 121, 125, 126, 260], "k0": [9, 12, 16, 125, 132, 133, 135], "kp": [9, 15, 16, 125], "k1": [9, 13, 121, 122, 260], "k2": [9, 14, 121, 123, 260], "repres": [9, 18, 179, 180], "omega_n": [9, 21, 260], "natur": [9, 21], "radian": [9, 20, 21, 22, 132, 134, 135, 136, 137, 138, 152, 260], "omega_3db": [9, 20], "3": [9, 17, 19, 20, 23, 26, 33, 36, 37, 38, 42, 53, 54, 77, 78, 92, 93, 99, 102, 130, 132, 140, 144, 148, 149, 150, 151, 152, 156, 157, 161, 164, 165, 169, 172, 174, 176, 177, 178, 179, 181, 182, 185, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 213, 214, 215, 216, 217, 218, 221, 222, 228, 230, 232, 233, 236, 237, 239, 240, 241, 243, 244, 245, 246, 247, 248, 252, 253, 258, 260, 262, 263], "omega_": [9, 20], "textrm": [9, 20], "properti": [10, 11, 12, 13, 14, 15, 18, 20, 21, 24, 25, 31, 32, 33, 34, 36, 55, 60, 62, 64, 65, 69, 71, 72, 79, 80, 83, 85, 86, 88, 90, 91, 97, 98, 99, 100, 102, 108, 113, 114, 115, 116, 118, 119, 120, 122, 123, 126, 127, 128, 133, 136, 137, 149, 151, 166, 167, 168, 169, 170, 172, 173, 264], "paramet": [16, 17, 19, 22, 27, 28, 38, 39, 40, 41, 44, 45, 46, 48, 50, 51, 57, 58, 59, 63, 67, 68, 70, 74, 75, 76, 81, 82, 84, 89, 93, 94, 104, 107, 109, 110, 111, 112, 117, 124, 125, 131, 134, 135, 139, 141, 145, 148, 150, 153, 154, 155, 157, 158, 159, 160, 163, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248], "where": [16, 27, 50, 93, 104, 121, 125, 128, 145, 153, 156, 176, 177, 188, 190, 191, 193, 198, 241, 248, 257, 258, 263], "period": [16, 121, 125, 128, 130, 248], "second": [16, 17, 19, 23, 42, 121, 125, 128, 198], "critic": [16, 25, 121, 125, 126, 260], "underdamp": [16, 25, 121, 125, 126], "overdamp": [16, 25, 121, 125, 126], "ted": [16, 125], "t_": [17, 19, 23, 67, 198, 262], "fl": [17, 19], "delta": [17, 19, 26, 49, 59, 73, 84, 92, 161, 217, 257, 258], "take": [17, 19, 23, 252], "onto": [17, 19, 23], "39": 17, "pl": [19, 23], "38": 19, "34": 20, "33": 21, "sigma_": [22, 37, 38, 40], "theta_": 22, "carrier": [22, 144], "43": 22, "40": [23, 92, 161, 189], "less": [25, 174], "than": [25, 130, 131, 141, 145, 151, 153, 174, 200, 202, 213, 229, 237], "greater": [25, 236, 239], "note": [26, 33, 36, 37, 38, 39, 41, 49, 73, 92, 99, 102, 121, 130, 132, 140, 144, 152, 156, 157, 158, 160, 161, 169, 172, 174, 176, 177, 180, 183, 186, 187, 198, 202, 208, 214, 233, 248], "equival": [26, 92, 161, 176, 177, 194, 242, 254, 256], "first": [26, 31, 42, 92, 94, 97, 130, 138, 140, 161, 163, 166, 206, 230, 245, 253, 255], "prototyp": [26, 33, 36, 92, 99, 102, 161, 169, 172], "feedforward": [26, 28, 33, 36, 49, 51, 65, 73, 76, 80, 92, 94, 99, 102, 161, 163, 169, 172, 215, 216, 217, 218, 221, 222, 228, 232, 257, 258], "coeffici": [26, 28, 49, 51, 73, 76, 92, 94, 103, 116, 120, 130, 140, 144, 152, 161, 163, 215, 216, 217, 218, 221, 222, 228, 232, 257, 258], "discard": [26, 161], "between": [26, 28, 51, 64, 68, 71, 74, 76, 90, 92, 94, 161, 163, 197, 220, 224, 227, 260, 263], "each": [26, 27, 50, 92, 93, 161, 195, 201, 220, 224, 227], "instead": [26, 92, 161, 213], "decompos": [26, 92, 161], "ar": [26, 27, 28, 33, 36, 37, 42, 44, 45, 46, 48, 50, 51, 58, 68, 74, 76, 82, 92, 93, 94, 99, 102, 103, 104, 116, 120, 130, 131, 140, 141, 144, 145, 152, 153, 156, 161, 163, 169, 172, 177, 179, 180, 182, 183, 197, 200, 206, 213, 214, 215, 216, 218, 220, 221, 222, 223, 224, 227, 229, 230, 231, 233, 237, 243, 244, 252, 254, 256, 258, 260, 262, 263, 265], "commut": [26, 92, 161], "parallel": [26, 92, 161], "output": [26, 27, 31, 49, 50, 59, 63, 73, 74, 76, 84, 89, 92, 93, 94, 97, 110, 121, 124, 132, 134, 138, 139, 161, 163, 166, 176, 177, 178, 179, 180, 182, 183, 187, 188, 195, 203, 206, 217, 228, 245, 249, 252, 256, 257, 258, 260], "sum": [26, 37, 49, 73, 156, 262], "prevent": [26, 92, 140, 152, 161], "need": [26, 92, 161, 252, 253, 255], "done": [26, 252], "case": [26, 92, 152, 156, 161], "2x": [26, 92], "6": [26, 33, 36, 42, 53, 54, 77, 78, 92, 93, 99, 102, 130, 132, 140, 144, 151, 152, 157, 158, 160, 161, 169, 172, 174, 181, 185, 188, 189, 190, 191, 195, 197, 199, 201, 203, 208, 213, 214, 215, 216, 217, 218, 221, 222, 228, 229, 230, 232, 233, 236, 239, 243, 244, 246, 248, 252, 255, 257, 258, 260, 261], "5": [26, 33, 36, 37, 38, 39, 40, 41, 42, 53, 54, 92, 93, 99, 102, 130, 132, 140, 144, 152, 157, 159, 161, 169, 172, 174, 176, 179, 181, 182, 183, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 201, 202, 208, 211, 214, 215, 216, 217, 218, 221, 222, 228, 230, 232, 233, 236, 239, 240, 241, 242, 243, 244, 246, 248, 252, 256, 257, 258, 259, 260, 261, 262], "summat": 26, "bottom": [26, 92, 161], "top": [26, 92, 161], "adder": [26, 121, 132, 186, 187, 260], "relat": [26, 33, 36, 92, 99, 102, 161, 169, 172, 177, 198], "In": [26, 27, 28, 29, 30, 33, 36, 38, 40, 42, 50, 51, 53, 54, 64, 68, 71, 74, 76, 77, 78, 90, 92, 93, 94, 95, 96, 99, 102, 130, 132, 140, 144, 148, 149, 150, 151, 152, 154, 155, 157, 159, 161, 163, 164, 165, 169, 172, 174, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 256, 261], "np": [26, 33, 36, 38, 40, 77, 78, 92, 93, 99, 102, 103, 115, 119, 130, 132, 140, 144, 148, 150, 151, 152, 157, 159, 161, 169, 172, 174, 176, 177, 178, 179, 180, 182, 183, 188, 189, 195, 196, 197, 202, 204, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 226, 228, 230, 232, 233, 240, 243, 244, 246, 248, 256, 257, 258, 259, 260, 261, 262], "co": [26, 92, 93, 161, 204], "64": [26, 195, 201, 258], "arang": [26, 33, 36, 92, 93, 99, 102, 161, 169, 172, 176, 178, 189, 204, 233, 243, 244, 246, 248, 256, 260], "280": 26, "7": [26, 29, 30, 33, 36, 92, 93, 95, 96, 99, 102, 130, 140, 144, 151, 152, 157, 161, 169, 172, 174, 181, 188, 195, 199, 201, 205, 230, 233, 248, 252, 258], "kaiser": [26, 28, 29, 30, 32, 92, 93, 94, 95, 96, 98, 161, 163, 164, 165, 168], "window": [26, 92, 161, 220, 227], "out": [26, 29, 33, 36, 42, 53, 77, 92, 93, 95, 99, 102, 130, 140, 144, 149, 151, 152, 154, 155, 161, 164, 169, 172, 178, 179, 181, 182, 185, 186, 187, 188, 190, 191, 193, 194, 195, 197, 199, 203, 206, 208, 211, 216, 231, 233, 234, 235, 241, 242, 245, 247], "plt": [26, 38, 40, 92, 93, 130, 132, 140, 144, 148, 149, 150, 151, 152, 157, 159, 161, 174, 176, 177, 178, 180, 183, 189, 195, 196, 197, 198, 200, 202, 204, 205, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 226, 228, 229, 230, 232, 236, 237, 239, 240, 243, 244, 246, 248, 256, 257, 258, 259, 260, 261, 262], "figur": [26, 38, 40, 92, 93, 130, 132, 140, 144, 148, 149, 150, 151, 152, 157, 159, 161, 174, 176, 177, 178, 180, 183, 189, 195, 196, 197, 198, 200, 202, 204, 205, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 226, 228, 229, 230, 231, 232, 236, 237, 239, 240, 243, 244, 246, 248, 256, 257, 258, 259, 260, 261, 262], "figsiz": [26, 38, 40, 92, 93, 130, 132, 140, 144, 148, 149, 150, 151, 152, 157, 159, 161, 174, 176, 177, 178, 180, 183, 189, 195, 196, 197, 198, 200, 202, 204, 205, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 226, 228, 229, 230, 231, 232, 236, 237, 239, 240, 243, 244, 246, 248, 256, 257, 258, 259, 260, 261, 262], "8": [26, 33, 36, 38, 40, 77, 78, 92, 93, 99, 102, 104, 130, 131, 132, 140, 141, 144, 145, 148, 149, 150, 151, 152, 153, 157, 159, 161, 169, 172, 174, 176, 177, 178, 180, 181, 183, 188, 189, 195, 197, 198, 199, 200, 201, 204, 205, 208, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 226, 228, 229, 230, 231, 232, 233, 236, 237, 239, 243, 244, 246, 248, 252, 257, 258, 259, 260, 262], "plot": [26, 38, 40, 57, 58, 59, 63, 81, 82, 84, 89, 92, 93, 130, 132, 140, 144, 148, 149, 150, 151, 152, 157, 159, 161, 176, 177, 178, 180, 183, 189, 195, 196, 197, 198, 200, 202, 204, 205, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 236, 237, 239, 240, 243, 244, 246, 248, 256, 257, 258, 260, 261, 262, 263, 264], "marker": [26, 92, 93, 132, 161, 213, 229, 256, 257, 258, 261], "label": [26, 38, 40, 92, 93, 131, 141, 145, 148, 150, 153, 157, 159, 161, 174, 176, 195, 196, 198, 202, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 226, 227, 230, 236, 239, 240, 256, 259, 260, 261, 262], "o": [26, 92, 93, 161, 256], "titl": [26, 92, 130, 132, 140, 148, 150, 161, 174, 176, 177, 178, 180, 183, 189, 195, 196, 202, 204, 212, 226, 230, 240, 243, 244, 246, 248, 256, 259, 260, 261, 262], "tight_layout": [26, 92, 130, 132, 140, 148, 150, 161, 174, 176, 177, 178, 180, 183, 189, 195, 196, 197, 204, 212, 226, 230, 240, 243, 244, 246, 248, 259, 260, 261, 262], "preserv": [26, 28, 51, 64, 68, 71, 74, 76, 90, 92, 94, 161, 163, 214, 224], "call": [26, 27, 28, 50, 51, 64, 68, 71, 74, 76, 90, 92, 93, 94, 161, 163], "true": [26, 38, 39, 40, 41, 92, 93, 130, 140, 144, 148, 150, 152, 157, 158, 159, 160, 161, 174, 175, 177, 179, 180, 182, 183, 188, 192, 197, 204, 209, 210, 213, 222, 224, 229, 231, 238, 259, 261], "y1": [26, 92, 93, 161, 202], "70": [26, 201, 262], "y2": [26, 92, 93, 161, 202], "140": [26, 189], "y3": [26, 92, 93, 161], "210": 26, "y4": [26, 92, 161], "y5": [26, 92, 161], "flush": [26, 27, 49, 50, 56, 92, 93, 161, 264], "y_1": [26, 92, 161, 202], "y_2": [26, 92, 161, 202], "y_3": [26, 92, 161], "y_4": [26, 92, 161], "y_5": [26, 92, 161], "__call__": [26, 27, 28, 49, 50, 51, 64, 66, 67, 68, 71, 73, 74, 75, 76, 90, 92, 93, 94, 121, 124, 132, 134, 161, 162, 163, 264], "full": [26, 27, 50, 92, 93, 161, 162, 178], "__len__": [26, 49, 52, 92, 161], "__repr__": [26, 29, 49, 53, 73, 77, 92, 95, 103, 105, 130, 140, 142, 144, 146, 152, 161, 164], "style": [26, 29, 49, 53, 73, 77, 92, 95, 103, 105, 130, 140, 142, 144, 146, 152, 161, 164, 231], "__str__": [26, 30, 49, 54, 73, 78, 92, 96, 103, 106, 130, 140, 143, 144, 147, 152, 161, 165], "human": [26, 30, 49, 54, 73, 78, 92, 96, 103, 106, 130, 140, 143, 144, 147, 152, 161, 165], "readabl": [26, 30, 49, 54, 73, 78, 92, 96, 103, 106, 130, 140, 143, 144, 147, 152, 161, 165], "reset": [26, 35, 49, 61, 66, 70, 73, 87, 92, 101, 121, 129, 132, 138, 161, 171], "when": [26, 35, 49, 56, 59, 61, 63, 73, 84, 87, 89, 92, 101, 161, 171, 176, 177, 179, 180, 182, 183, 194, 215, 216, 217, 218, 221, 222, 228, 242, 248, 256, 257, 258], "pass": [26, 49, 56, 92, 161, 176, 179, 182, 188, 195, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 250, 252, 254, 257, 258, 264], "through": [26, 49, 56, 92, 140, 152, 161, 179, 182, 188, 250, 257, 258, 260], "indic": [26, 28, 31, 39, 40, 41, 49, 51, 64, 66, 68, 71, 73, 74, 76, 90, 92, 94, 97, 104, 131, 140, 141, 144, 145, 148, 150, 152, 153, 157, 158, 159, 160, 161, 163, 166, 175, 192, 198, 200, 202, 204, 209, 210, 214, 222, 223, 224, 230, 236, 237, 238, 239], "whether": [26, 28, 39, 40, 41, 49, 51, 64, 66, 68, 71, 73, 74, 76, 90, 92, 94, 148, 150, 157, 158, 159, 160, 161, 163, 175, 192, 204, 209, 210, 222, 224, 230, 238], "consist": [26, 44, 45, 46, 47, 48, 49, 62, 92, 161], "previou": [26, 28, 49, 51, 62, 68, 70, 74, 76, 92, 94, 161, 163, 186, 187], "u": [26, 49, 63, 73, 89, 92, 161, 174, 228, 248, 249, 257, 258], "frequency_respons": [26, 49, 57, 73, 81, 92, 161, 264], "frequency_response_log": [26, 49, 58, 73, 82, 92, 161], "logarithm": [26, 49, 58, 73, 82, 92, 161, 215, 216, 218, 220, 221, 222, 257, 258], "axi": [26, 49, 58, 73, 82, 92, 161, 175, 192, 207, 209, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 227, 229, 230, 256], "custom": [26, 32, 92, 98, 104, 141, 145, 153, 161, 168, 264], "design": [26, 28, 32, 92, 94, 98, 104, 141, 145, 153, 161, 163, 168, 205, 252, 263, 264], "multir": [26, 27, 28, 32, 92, 93, 94, 98, 161, 163, 168, 205, 233, 264], "polyphase_tap": [26, 30, 33, 36, 92, 93, 96, 99, 102, 161, 165, 169, 172], "index": [26, 31, 66, 70, 92, 97, 161, 166, 214, 223, 224, 229, 252], "correspond": [26, 31, 42, 47, 92, 97, 161, 166, 224], "mode": [27, 28, 35, 50, 51, 56, 61, 64, 66, 68, 70, 71, 74, 76, 87, 90, 93, 94, 101, 162, 163, 171, 178, 248], "l": [27, 50, 75, 93], "stream": [27, 28, 29, 30, 35, 50, 51, 53, 54, 56, 61, 64, 66, 68, 70, 71, 74, 76, 77, 78, 87, 90, 93, 94, 95, 96, 101, 130, 140, 144, 152, 163, 164, 165, 171, 258], "convolut": [27, 50, 92, 93], "ha": [27, 50, 92, 93, 130, 140, 144, 176, 189, 197, 198, 208, 246, 248, 260, 261, 262], "align": [27, 50, 93, 94, 140, 163, 256], "howev": [27, 44, 45, 46, 48, 50, 93, 121, 180, 183, 256], "produc": [27, 50, 92, 93, 161, 198, 262], "final": [27, 50, 93], "dictat": [27, 50, 93], "argument": [27, 28, 50, 93, 94, 163, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 257, 258], "specif": [28, 47, 94, 163, 255, 262], "npt": [28, 94, 104, 131, 141, 145, 153, 163, 215, 216, 217, 218, 221, 222, 228, 232], "string": [29, 30, 53, 54, 77, 78, 95, 96, 104, 105, 106, 141, 142, 143, 145, 146, 147, 153, 164, 165, 201, 220, 227, 264], "represent": [29, 30, 53, 54, 77, 78, 95, 96, 105, 106, 142, 143, 146, 147, 164, 165, 229, 264], "print": [30, 54, 78, 96, 165, 201, 256, 257, 258, 260], "167": [30, 96], "24": [30, 96, 165], "shape": [30, 54, 78, 93, 96, 103, 104, 110, 112, 115, 116, 120, 130, 140, 141, 144, 145, 152, 153, 165, 198, 200, 214, 230, 236, 237, 239, 258, 263, 264], "12": [30, 92, 130, 140, 144, 152, 158, 160, 174, 181, 199, 205, 233, 257, 261], "befor": [33, 36, 99, 102, 169, 172, 265], "decomposit": [33, 36, 99, 102, 169, 172, 264], "after": [33, 36, 99, 102, 169, 172], "10": [33, 36, 38, 40, 42, 92, 93, 99, 102, 104, 130, 140, 141, 144, 145, 148, 150, 152, 153, 157, 159, 161, 169, 172, 174, 175, 176, 181, 185, 188, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 212, 213, 215, 216, 217, 218, 221, 222, 226, 228, 230, 232, 233, 236, 237, 238, 239, 240, 241, 242, 256, 257, 258, 259, 260, 261, 262], "9": [33, 36, 92, 93, 99, 102, 130, 140, 144, 152, 157, 161, 169, 172, 174, 181, 188, 195, 199, 201, 233, 236, 239, 258, 259, 261, 262, 264], "null": [37, 156, 218, 220, 262], "altern": [37, 156, 258], "hypothes": [37, 156], "follow": [37, 42, 202, 213, 224, 227, 229, 231, 233, 260], "assum": [37, 156, 176, 188, 206, 245], "valu": [37, 103, 104, 107, 117, 130, 131, 140, 141, 144, 145, 148, 150, 152, 153, 154, 155, 178, 185, 186, 187, 198, 202, 203, 213, 229, 258, 264], "random": [37, 130, 140, 144, 152, 176, 179, 182, 188, 195, 196, 202, 213, 214, 223, 230, 240, 259, 261], "process": [37, 38, 39, 41, 156, 157, 158, 160, 205, 233, 258, 260, 263], "w": [37, 156, 176, 256, 257, 258, 259, 260, 261, 262], "sigma": [37, 38, 39, 40, 41, 156, 157, 158, 159, 160, 176, 177], "_0": [37, 156], "_1": [37, 156], "test": [37, 156, 254, 263], "statist": [37, 38, 39, 41, 156, 157, 158, 160], "limits_": [37, 49, 73, 156], "left": [37, 38, 39, 73, 140, 144, 152, 156, 157, 158, 160, 174, 175, 176, 177, 192, 195, 197, 198, 202, 204, 208, 209, 210, 238, 248], "right": [37, 38, 39, 73, 140, 144, 152, 156, 157, 158, 160, 174, 175, 176, 177, 192, 195, 197, 198, 202, 204, 208, 209, 210, 238, 248], "gamma": [37, 39, 41, 156, 158, 160, 174], "sim": [37, 156, 176, 253], "chi_": [37, 38, 39], "2n": [37, 38, 39], "text": [37, 152, 156, 174, 175, 176, 177, 180, 183, 184, 185, 195, 196, 197, 203, 205, 207, 209, 210, 238, 240], "under": [37, 156], "detect": [37, 38, 39, 40, 41, 156, 157, 158, 159, 160, 174, 219, 225, 264], "threshold": [37, 39, 41, 156, 158, 160], "q_": [37, 38, 39, 41], "chi_n": [37, 38, 39, 41], "steven": [37, 38, 39, 41, 156, 157, 158, 160], "kai": [37, 38, 39, 41, 156, 157, 158, 160], "fundament": [37, 38, 39, 41, 156, 157, 158, 160], "theori": [37, 38, 39, 41, 156, 157, 158, 160], "section": [37, 44, 45, 46, 47, 48, 156, 258, 260], "static": [37, 38, 39, 40, 41, 156, 157, 158, 159, 160, 253], "n_nc": [37, 38, 39, 40, 41, 174], "number": [38, 39, 40, 41, 42, 44, 45, 48, 57, 58, 59, 63, 81, 82, 84, 89, 103, 104, 108, 118, 130, 131, 139, 140, 141, 144, 145, 152, 153, 174, 176, 179, 182, 188, 190, 191, 193, 198, 200, 201, 206, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 227, 228, 236, 237, 239, 241, 245], "For": [38, 39, 41, 157, 158, 160, 176, 189, 197, 246, 252, 257], "linspac": [38, 148, 150, 157, 177, 180, 183, 197, 212, 226, 258, 259, 260, 261], "20": [38, 40, 92, 93, 130, 132, 140, 144, 152, 157, 161, 174, 177, 179, 182, 185, 188, 195, 196, 201, 202, 203, 210, 233, 238, 246, 259, 261, 262, 264], "101": [38, 40, 157, 159], "25": [38, 179, 182, 188, 211, 214, 234, 235, 256, 259, 260, 262], "1e": [38, 157, 196, 261], "sigma2": [39, 41, 158, 160], "If": [40, 70, 104, 134, 141, 145, 153, 159, 161, 175, 176, 177, 188, 192, 206, 209, 210, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 227, 228, 229, 230, 238, 243, 245, 263], "logspac": [40, 159, 174], "theoret": [40, 148, 150, 212, 226, 261, 264], "variou": [40, 253, 262], "100": [40, 73, 84, 89, 132, 148, 150, 174, 176, 177, 180, 183, 185, 195, 203, 204, 212, 214, 215, 217, 223, 226, 228, 230, 240, 243, 244, 246, 256, 260], "1_000": [40, 176, 196, 197, 202, 240, 259], "000": [40, 196], "5_000": 40, "measur": [42, 44, 175, 176, 184, 185, 192, 195, 203, 207, 209, 210, 238, 260, 263, 264], "new": [42, 43, 66, 68, 103, 104, 130, 131, 140, 141, 144, 145, 152, 153, 240], "accumul": [42, 132, 135, 136, 138, 260], "from": [42, 57, 58, 73, 74, 81, 82, 94, 103, 119, 130, 140, 144, 151, 152, 163, 185, 190, 191, 193, 194, 203, 211, 220, 227, 234, 235, 241, 242, 252, 257, 258, 260, 263], "contain": [42, 176, 201], "add": [42, 44, 47, 130, 140, 144, 152, 176, 196, 200, 224, 237, 240, 250, 261, 265], "total": [42, 198, 200, 236, 237, 239, 262], "count": [42, 45, 195], "error_r": [42, 46, 47, 261], "everi": [42, 256], "can": [42, 44, 45, 46, 48, 121, 130, 176, 195, 198, 205, 206, 214, 220, 227, 254, 257, 258, 261, 263, 265], "obtain": 42, "tabul": [42, 43], "all": [42, 47, 134, 195, 214, 223, 224, 253, 255, 263], "ascend": [42, 47], "other": [44, 45, 46, 48, 256, 265], "quantiti": [44, 45, 46, 47, 48], "user": [44, 45, 46, 48, 257, 258], "caution": [44, 45, 46, 48], "instanc": [44, 45, 46, 48, 130], "transmit": [44, 103, 120, 130, 140, 144, 152, 195, 214], "e": [47, 132, 156, 157, 158, 159, 160, 175, 179, 180, 192, 248, 253, 254, 257, 258, 260, 261], "whatev": 47, "wa": [47, 177], "provid": [47, 103, 107, 117, 130, 140, 144, 148, 150, 152, 224, 253, 263], "wrapper": [49, 73], "scipi": [49, 73, 220, 227, 262, 263], "convolv": [49, 230], "It": [49, 73, 92, 104, 121, 141, 145, 153, 176, 214], "support": [49, 73, 264], "one": [49, 73, 131, 140, 141, 145, 151, 153, 198, 201, 214, 215, 216, 218, 220, 221, 222, 227, 243, 257, 258, 259, 262], "its": [49, 73, 74, 176, 257, 258, 262], "sum_": [49, 73, 158, 160, 175, 176, 177, 192, 195, 238], "d": [49, 55, 197, 208, 252, 254, 263], "lfloor": [49, 55], "rfloor": [49, 55], "valid": [50, 197, 214, 223, 224, 248], "same": [50, 93, 230, 257], "0013559842808217807": [53, 54], "005995136544658217": [53, 54], "008698817681933214": [53, 54], "0024103767414047302": [53, 54], "010205586837665018": [53, 54], "018983779931504997": [53, 54], "011950905288150394": [53, 54], "01518393864077397": [53, 54], "051622191325047306": [53, 54], "07210389837804473": [53, 54], "04745944982876247": [53, 54], "039173517569276436": [53, 54], "17918683372907862": [53, 54], "3367363220550604": [53, 54], "4611457574513795": [53, 54], "5084040873607553": [53, 54], "30": [54, 92, 161, 189, 215, 217, 228, 243, 244, 258, 264], "31": 54, "15": [54, 130, 159, 181, 199, 233, 246], "remain": [56, 189, 206], "1024": [57, 58, 81, 82, 215, 216, 218, 221, 222, 259, 262], "decad": [58, 82, 215, 216, 218, 221, 222, 257, 260], "resampl": [66, 67, 68, 69, 70, 71, 72, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 205, 233, 263, 264], "http": [66, 174, 184, 198, 205, 207, 248, 252, 253, 254], "wirelesspi": 66, "com": [66, 174, 198, 205, 253, 254], "fraction": [66, 70, 198, 256], "structur": 66, "should": [70, 130, 214, 254], "equal": [70, 130], "three": [70, 256, 262], "lfilter": 73, "b_i": [73, 76, 80, 215, 216, 217, 218, 221, 222, 228, 232, 258], "feedback": [73, 76, 79, 215, 216, 217, 218, 221, 222, 228, 232, 258], "a_j": [73, 76, 79, 215, 216, 217, 218, 221, 222, 228, 232, 258], "These": [73, 140, 144, 152, 231, 254, 260], "differ": [73, 131, 141, 145, 151, 153, 230, 248, 262], "a_0": 73, "b": [73, 76, 174, 177, 198, 201, 215, 217, 228, 252, 253, 262], "classmethod": [73, 74], "zerospol": [73, 74, 77, 78, 215, 216, 217, 218, 221, 222, 228, 232, 258], "self": [73, 74], "b_tap": [73, 78, 80, 258], "a_tap": [73, 78, 79, 258], "exp": [77, 78, 140, 144, 152, 189, 198, 202, 204, 215, 216, 217, 218, 221, 222, 228, 230, 232, 244, 246, 248, 256, 258, 260], "1j": [77, 78, 189, 204, 215, 216, 217, 218, 221, 222, 228, 230, 232, 244, 246, 256, 258, 260], "conj": [77, 78, 215, 216, 217, 218, 221, 222, 228, 232, 258, 260], "478207252018059": [77, 78, 258], "6400000000000001": [77, 78, 258], "7391036260090295": [78, 258], "3061467458920719j": [78, 258], "insert": [92, 161], "multipli": [92, 161], "hold": [92, 94, 161, 163, 206, 264], "recommend": 92, "wai": [92, 254], "11": [92, 130, 140, 144, 152, 181, 199, 205, 233, 252], "zoh": [92, 94, 98, 161, 163, 168], "13": [92, 130, 140, 144, 152, 156, 157, 158, 160, 178, 181, 199, 233, 264], "matlab": [92, 94, 98, 161, 163, 168, 263], "iter": 93, "concaten": [93, 258], "linearli": [94, 163], "2r": 94, "ramp": [94, 121, 163], "advanc": [94, 163], "ones": [94, 163, 260], "84": 96, "modul": [103, 104, 112, 113, 115, 130, 132, 140, 141, 144, 145, 148, 150, 152, 153, 176, 190, 191, 193, 195, 196, 202, 212, 214, 223, 226, 229, 240, 241, 252, 255, 259, 261, 263, 264], "map_symbol": [103, 111, 130, 140, 144, 152, 213, 214, 264], "decide_symbol": [103, 109, 130, 140, 144, 152, 264], "a_hat": [103, 109, 130, 140, 144, 152], "decis": [103, 109, 110, 130, 140, 144, 152, 214], "maximum": [103, 109, 110, 130, 140, 144, 152, 198, 200, 213, 229, 236, 237, 239], "likelihood": [103, 109, 110, 130, 140, 144, 152], "mle": [103, 109, 130, 140, 144, 152], "puls": [103, 104, 110, 112, 115, 116, 120, 130, 140, 141, 144, 145, 152, 153, 198, 200, 214, 230, 236, 237, 239, 263, 264], "match": [103, 104, 110, 116, 130, 140, 141, 144, 145, 152, 153, 264], "abstract": [103, 107, 117], "log_2": [103, 108, 130, 140, 144, 152, 177, 190, 191, 193, 241], "phase_offset": [103, 104, 114, 130, 131, 140, 141, 144, 145, 149, 152, 153, 176, 195, 196, 202, 213, 214, 229, 240, 259, 261], "degre": [103, 104, 114, 130, 131, 140, 141, 144, 145, 149, 152, 153, 196, 202, 204, 208], "dot": [103, 104, 119, 130, 140, 144, 151, 152, 229], "mapsto": [103, 104, 119, 130, 140, 144, 151, 152, 229], "mathbb": [103, 104, 119, 130, 140, 144, 151, 152, 177, 229, 248], "sym": [103, 104, 118, 130, 131, 140, 141, 144, 145, 152, 153, 191, 194, 198, 241, 242, 262], "pulse_shap": [103, 104, 110, 112, 115, 130, 140, 141, 144, 145, 152, 153, 259], "tx_filter": [103, 120, 130, 140, 144, 152], "rx_filter": [103, 116, 130, 140, 144, 152], "rect": [104, 141, 145, 153, 262], "whose": [104, 131, 141, 144, 145, 153], "import": [104, 141, 145, 153, 254, 256, 257, 258, 259, 260, 261, 262, 263], "roll": [104, 141, 145, 153, 248, 262], "off": [104, 141, 145, 153], "psd": [107, 117, 148, 150, 177, 190, 191, 193, 194, 212, 226, 241, 242], "p_b": 107, "s_hat": [110, 261], "size": [110, 112, 178, 188, 256, 260, 261, 262], "p_e": 117, "loopfilt": [121, 122, 123, 124, 125, 126, 127, 128, 129, 251, 260, 264], "ppi": [121, 125, 251], "track": 121, "constant": [121, 130, 132, 135, 136, 220, 227, 258, 260], "cannot": 121, "chirp": 121, "underli": [121, 127], "scheme": [130, 140, 144, 152, 264], "similar": [130, 140, 152, 262], "One": [130, 140, 152, 262], "distinct": [130, 140, 152], "result": [130, 140, 152, 175, 192, 197, 208, 209, 210, 236, 238, 239, 261], "envelop": [130, 257, 258], "which": [130, 140, 152, 174, 175, 176, 177, 192, 196, 202, 207, 208, 209, 213, 229, 240, 256, 260, 262], "lower": [130, 140, 152, 218, 220, 236, 239], "also": [130, 197, 198, 263], "consid": [130, 201], "cpfsk": 130, "separ": 130, "modem": [130, 140, 144, 152], "45": [130, 131, 140, 141, 144, 149, 176, 195, 196, 202, 204, 213, 214, 229, 240, 259, 261], "symbol_label": [130, 131, 140, 141, 144, 145, 151, 152, 153, 261], "randint": [130, 140, 144, 152, 176, 179, 182, 188, 195, 196, 202, 213, 214, 223, 230, 240, 259, 261], "1000": [130, 140, 144, 152, 195, 197, 230, 243, 244, 261], "dtype": [130, 140, 144, 152, 178, 206, 230, 245, 249, 260], "uint8": [130, 140, 144, 152, 206, 245], "complex_symbol": [130, 140, 144, 152], "70710678": [130, 140, 144], "70710678j": [130, 140, 144], "linestyl": [130, 140, 144, 152, 213, 224, 229, 231, 248, 256, 260, 261, 262], "tx_sampl": [130, 140, 144, 152], "50": [130, 140, 144, 152, 185, 203, 211, 229, 243, 244, 256, 259], "like": [130, 254, 263, 264], "channel": [130, 140, 148, 150, 177, 179, 180, 182, 183, 188, 212, 226, 263, 264], "subplot": [130, 140, 202, 260, 261], "imag": [130, 140, 256], "trajectori": 130, "although": 130, "boundari": 130, "lead": [130, 202, 261], "spectral": [130, 189, 220, 259, 262], "effici": [130, 189, 208, 246], "gmsk": 130, "rx_sampl": [130, 140, 144, 152], "last": [130, 140, 206, 252], "rx_symbol": [130, 140, 144, 152], "rx_complex_symbol": [130, 140, 144, 152], "14": [130, 140, 144, 152, 157, 181, 199, 233], "array_equ": [130, 140, 144, 152], "bin": [131, 141, 145, 151, 153, 195, 213, 229, 261], "absolut": [131, 132, 135, 137, 141, 153, 177], "consecut": [131, 141, 145, 153], "adjac": [131, 141, 145, 151, 153, 261, 262], "mai": [131, 141, 145, 151, 153, 195, 213, 224, 227, 229, 231, 258], "more": [131, 141, 145, 151, 153, 264], "start": [131, 141, 145, 153, 252], "0j": [131, 141, 145, 153], "go": [131, 141, 145, 153], "counter": [131, 141, 145, 153], "clockwis": [131, 141, 145, 153], "around": [131, 141, 145, 153], "circl": [131, 141, 145, 153, 258], "increment": [132, 134, 135, 136, 260], "v": [132, 185, 203, 252], "Then": 132, "fsk": 132, "60": [132, 262], "repeat": 132, "cp": 132, "57": 132, "bpsk": [132, 148, 150, 212, 226, 230, 259], "variabl": [132, 134, 201, 260], "forward": [132, 139], "settabl": [132, 133, 136, 137], "vari": 134, "intern": 138, "set": [138, 176, 197, 213, 218, 220, 224, 227, 229, 231, 253, 255, 258], "qpsk": [140, 144, 148, 149, 150, 152, 176, 195, 196, 212, 213, 214, 226, 229, 230, 240, 263, 264], "convent": [140, 152], "transit": [140, 152, 182, 183, 188, 250], "independ": 140, "apart": 140, "origin": [140, 152, 246, 256], "taken": [140, 144, 152], "jq": 140, "begin": [140, 152, 156], "end": [140, 152, 156, 243, 253], "encod": [144, 148, 150, 186, 187, 263], "inform": [144, 190, 191, 193, 241], "ge": [145, 153, 174], "were": [148, 150], "simon": [148, 150], "alouini": [148, 150], "over": [148, 150, 201], "fade": [148, 150], "chapter": [148, 150, 205, 233], "john": [148, 150], "proaki": [148, 150], "optimum": [148, 150], "psk8": [148, 150, 212, 226, 261], "psk16": [148, 150, 212, 226, 261], "compar": [148, 150, 262], "de": [148, 150, 264], "se": [150, 226], "00000000e": [151, 152, 258], "00": [151, 152, 258], "00j": [151, 152], "07106781e": [151, 152], "01": [151, 152, 201, 258, 260], "01j": [151, 152], "12323400e": [151, 152], "17": [151, 152, 208, 233, 252], "83697020e": 151, "22464680e": [151, 152], "16j": [151, 152], "annot": [151, 229, 264], "odd": [152, 243], "rotat": [152, 204], "rel": [152, 248, 262], "even": [152, 198, 236, 239], "2m": 152, "displaystyl": 152, "pi4_qpsk": 152, "exceed": [154, 155], "15865525393145707": [154, 155], "158655": [154, 155], "0000010494310452": [154, 155], "perfect": 156, "knowledg": 156, "cn": [156, 176], "mathrm": 156, "re": 156, "sqrt": [156, 157, 158, 160, 174, 195, 198, 238, 248, 259, 260, 262], "____": 161, "2p": 163, "95": [165, 195], "desir": [174, 176, 261], "ln": [174, 198], "62": [174, 201], "_": [174, 195], "log_": [174, 175, 185, 192, 197, 207, 209, 210, 238], "54": [174, 201], "44": 174, "12ab": 174, "7b": 174, "claim": 174, "leq": 174, "le": [174, 204, 208, 236, 239], "8096": 174, "radarsp": 174, "weebli": 174, "upload": 174, "21471216": 174, "albersheim_alternative_form": 174, "pdf": [174, 198], "bpb": 174, "w2": 174, "wpmucdn": 174, "site": [174, 252], "gatech": 174, "edu": 174, "dist": [174, 253], "462": 174, "file": [174, 253, 255], "2016": 174, "noncoher": 174, "approxim": [174, 264], "www": [174, 198, 205], "mathwork": [174, 198, 205], "help": [174, 198, 205], "html": [174, 198, 205, 252], "semilogx": [174, 225], "legend": [174, 202, 256, 259, 260, 262], "grid": [174, 177, 180, 183, 197, 231, 256, 259, 260, 262], "both": [174, 177, 213, 229, 230, 256, 260], "xlabel": [174, 177, 178, 180, 183, 195, 197, 248, 256, 259, 260, 262], "ylabel": [174, 177, 178, 180, 183, 195, 197, 248, 256, 259, 260, 262], "across": 174, "nuse": 174, "avg": [175, 176, 207], "ax": [175, 192, 207, 209, 231], "along": [175, 192, 207, 209], "entir": [175, 192, 207, 209], "decibel": [175, 185, 192, 203, 209, 210, 238, 263, 264], "seed": [176, 179, 182, 188], "ad": [176, 224, 253, 263, 264], "explicitli": 176, "known": 176, "must": [176, 198, 204, 224, 236, 239, 248], "numpi": [176, 179, 182, 188, 245, 256, 257, 258, 259, 260, 261, 262, 263], "default_rng": [176, 179, 182, 188], "noisi": 176, "sin": [176, 243], "zorder": [176, 196, 240], "infti": [176, 177], "nand": 176, "capac": [177, 180, 183, 263, 264], "2d": [177, 224], "x_i": [177, 179, 180, 182, 183, 188, 202], "y_i": [177, 179, 180, 182, 183, 188], "monoton": 177, "decreas": 177, "limit": [177, 213, 218, 220, 229, 261], "At": 177, "occur": 177, "view": [177, 253, 263], "59": 177, "shannon": 177, "semilogi": [177, 212, 225, 226], "barker": [178, 249, 263, 264], "ani": [178, 185, 189, 203, 218, 220, 246, 249, 255], "int64": [178, 249], "bipolar": [178, 264], "float64": [178, 249], "sequenc": [178, 179, 182, 188, 248, 250, 263, 264], "format": 178, "seq": 178, "have": [178, 189, 206, 230, 245, 246], "ideal": [178, 261], "minim": 178, "autocorrel": [178, 248], "sidelob": [178, 236, 239, 248], "corr": [178, 248], "lag": [178, 248], "ab": [178, 248, 262], "roughli": [179, 182, 256], "eras": 179, "flip": 182, "h_b": 183, "cf": 184, "v_": [184, 185, 203, 210, 238], "en": [184, 207, 248], "wikipedia": [184, 207, 248], "org": [184, 207, 248], "wiki": [184, 207, 248], "type": [185, 195, 203, 206, 220, 225, 227, 245, 264], "voltag": [185, 203, 210, 238, 263], "x_": [185, 203], "mhz": [185, 203], "77": [185, 201, 203], "50e6": 185, "76": [185, 201], "98970004336019": 185, "mw": [185, 203], "dbm": [185, 203], "dbv": [185, 203], "020599913279624": 185, "uncod": 187, "dmc": [188, 250, 263, 264], "memoryless": [188, 250, 263], "pr": 188, "y_j": 188, "alphabet": 188, "ldot": 188, "doe": [189, 246], "anti": [189, 246, 264], "alias": [189, 246, 264], "400": [189, 256], "x1": 189, "200": [189, 256, 261], "x2": 189, "130": 189, "x3": [189, 248], "spectrum": [189, 215, 216, 218, 220, 221, 222, 227, 243, 244, 246], "content": 189, "abov": [189, 246], "nyquist": [189, 214, 246, 262], "fold": 189, "cw": 189, "unalias": 189, "fft": [189, 220, 227, 243, 244, 246], "2048": [189, 243, 244, 246, 259], "xlim": [189, 246, 259, 260, 262], "qam": [190, 191, 193, 241], "249387366082999": [190, 191], "020599913279625": [190, 242], "7506126339170005": [193, 241], "979400086720376": [193, 194], "system": [194, 205, 233, 242, 253, 255, 260, 263], "norm": [195, 198, 200, 236, 237, 239], "noiseless": 195, "sourc": 195, "max": [195, 209, 210], "instantan": 195, "percentil": [195, 218, 220, 227], "either": 195, "77950430359519": 195, "95572708643668": 195, "182": 195, "52304424100592": 195, "138": 195, "91481157212743": 195, "95th": 195, "68": [195, 201], "88862147351092": 195, "inst_evm": 195, "hist": 195, "histogram": 195, "frequency_offset": [196, 250, 264], "freq_rat": 196, "cycl": [196, 230], "5e": 196, "deg": [196, 202], "path": [197, 263], "loss": [197, 263], "meter": [197, 208, 247], "transmitt": 197, "far": 197, "field": 197, "neg": [197, 202], "impli": 197, "possibl": [197, 263], "so": [197, 198, 200, 236, 237, 239, 263], "km": 197, "link": [197, 263, 264], "ghz": [197, 208, 247], "1e3": [197, 204, 243], "1e9": [197, 208, 247], "92": 197, "44778322188337": 197, "doubl": [197, 208], "increas": [197, 208, 258], "2e3": 197, "98": 197, "468383135163": 197, "2e9": 197, "product": [198, 262], "side": [198, 215, 216, 218, 220, 221, 222, 227, 257, 258, 259, 262], "thought": [198, 265], "smaller": [198, 236, 239, 262], "wider": 198, "how": [198, 200, 214, 223, 224, 230, 236, 237, 239, 255], "gaussdesign": 198, "onlinelibrari": 198, "wilei": 198, "doi": 198, "1002": 198, "9780470041956": 198, "app2": 198, "h_0p1": [198, 236, 239], "h_0p2": 198, "h_0p3": 198, "reason": [200, 237, 252], "larger": [200, 202, 213, 229, 237], "h_half_sin": 200, "displai": [201, 213, 215, 216, 218, 220, 221, 222, 227, 229], "line": [201, 230, 253, 259], "quick": 201, "brown": 201, "fox": 201, "jump": 201, "lazi": 201, "dog": 201, "00000000": 201, "65": 201, "71": 201, "75": [201, 213, 260, 261], "69": 201, "63": 201, "6b": 201, "72": 201, "6f": 201, "6e": 201, "00000010": 201, "66": 201, "78": 201, "6a": 201, "6d": 201, "73": 201, "74": 201, "00000020": 201, "6c": 201, "61": 201, "7a": 201, "79": 201, "67": 201, "he": 201, "02": [201, 258, 260], "03": [201, 258], "04": [201, 258], "00000004": 201, "05": [201, 256, 258, 260], "06": 201, "07": 201, "08": 201, "00000008": 201, "09": 201, "0a": 201, "iq_imbal": [202, 250, 264], "iq": [202, 250, 263], "imbal": [202, 250, 263], "posit": 202, "compon": [202, 243, 244, 246], "g_i": 202, "180": 202, "g_q": 202, "x_q": 202, "horizont": 202, "stretch": 202, "while": [202, 262], "vertic": 202, "northwest": 202, "northeast": 202, "50118723": 203, "36272725": 203, "9952623149688795": 203, "satisfi": 204, "cdot": 204, "remov": [204, 220, 227, 264], "half_length": 205, "a_stop": 205, "80": [205, 248], "stopband": [205, 236, 239], "attenu": [205, 236, 239], "a_": 205, "stop": 205, "fred": [205, 233], "harri": [205, 233], "dsp": [205, 263], "designmultiratefir": 205, "dtypelik": [206, 245], "most": [206, 245], "signific": [206, 245], "enough": 206, "fill": 206, "smallest": 206, "unsign": 206, "integ": 206, "diamet": 208, "55": 208, "eta": 208, "dbi": 208, "arcsin": 208, "83": 208, "dish": 208, "21": 208, "810210290266568": 208, "437435887991374": 208, "23": 208, "sinc": [208, 214, 252, 261], "antenna": [208, 263], "we": [208, 263], "observ": [208, 214], "830810203546193": 208, "529544741425365": 208, "keyword": [212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 257, 258], "pyplot": [212, 213, 216, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 256, 257, 258, 259, 260, 261, 262], "heatmap": [213, 261], "scatter": 213, "overwritten": [213, 224, 227, 229], "rang": [213, 260, 261], "hist2d": 213, "10_000": 213, "color": [214, 223, 224, 230, 259, 262], "imaginari": [214, 224, 230], "interleav": [214, 224], "base": [214, 223, 224, 230], "examin": 214, "intersymbol": 214, "interfer": 214, "isi": 214, "two": [214, 215, 216, 218, 220, 221, 222, 227, 248, 256, 257, 258], "cascad": 214, "why": 214, "often": [214, 256], "practic": 214, "n_time": [215, 258], "n_freq": 215, "x_axi": [215, 216, 218, 220, 221, 222, 227, 257, 258, 259, 260], "log": [215, 216, 218, 220, 221, 222, 257, 258, 260], "definit": [215, 216, 217, 218, 221, 222, 228, 232], "n_t": 215, "n_f": 215, "scale": [215, 216, 218, 220, 221, 222, 227, 257, 258], "option": [215, 216, 218, 220, 221, 222, 227], "h_srrc": [215, 216, 217, 218, 221, 222, 228, 230, 232, 261], "ylim": [216, 248, 257, 260, 261, 262], "48": 216, "52": 216, "10th": [218, 220, 227], "crop": [218, 220], "deep": [218, 220], "x_label": 219, "hann": [220, 227], "overlap": [220, 227, 259], "detrend": [220, 227], "median": 220, "segment": [220, 227], "256": [220, 227, 259], "point": [220, 227], "trend": [220, 227], "unwrap": [222, 260], "stride": 224, "colorbar": 224, "1d": 224, "determin": 224, "row": 224, "collect": 224, "linecollect": 224, "linewidth": [224, 248], "solid": [224, 230], "cmap": 224, "rainbow": 224, "loglog": 225, "pcolormesh": 227, "vmin": 227, "vmax": 227, "100th": 227, "shade": 227, "gouraud": 227, "markers": 229, "diff": [230, 259], "about": [230, 255], "mutual": 230, "exclus": 230, "current": [230, 254], "dash": 230, "share": 230, "10e3": 230, "revert": 231, "rcdefault": 231, "_rc_param": 231, "rc_param": 231, "autolayout": 231, "max_open_warn": 231, "titleweight": 231, "bold": 231, "arrang": 233, "column": 233, "notion": 233, "demonstr": 233, "18": [233, 252, 261], "19": 233, "000005": 234, "5000": [234, 235], "000000025": 234, "005": [235, 260], "000025": 235, "excess": [236, 239, 262], "narrow": [236, 239], "expens": [236, 239], "higher": [236, 239, 262], "h_0p5": [236, 239], "h_0p9": [236, 239], "affect": [236, 239], "longer": [236, 239, 243], "h_4": [236, 239], "h_8": [236, 239], "h_16": [236, 239], "h_rect": [237, 262], "sample_rate_offset": [240, 250, 264], "append": [243, 259], "250": [243, 244], "300": [243, 244], "ksp": [243, 244], "notic": [243, 244, 256, 262], "conjug": [243, 244, 258], "500": [243, 244, 260], "now": [243, 244, 256, 264], "150": [243, 244], "asymmetr": 244, "copi": 246, "299792458": 247, "zadoff_chu": [248, 249, 264], "zadoff": [248, 249, 263, 264], "chu": [248, 249, 263, 264], "prime": 248, "gcd": 248, "ne": 248, "cyclic": 248, "x_u": 248, "c_": 248, "2q": 248, "mod": 248, "e2": 248, "93chu_sequ": 248, "x_3": 248, "139": 248, "tile": 248, "x_5": 248, "x5": 248, "cross": 248, "xcorr": 248, "sphinx": 252, "immateri": 252, "theme": 252, "depend": [252, 253, 255], "store": [252, 254, 255], "txt": [252, 253, 254, 255], "some": 252, "below": [252, 257, 258], "version": [252, 254, 263], "aren": 252, "resolut": 252, "minut": 252, "ci": 252, "myst": 252, "parser": 252, "updat": 252, "git": [252, 254], "math": 252, "dollar": 252, "ipykernel": 252, "26": 252, "nb": 252, "pickleshar": 252, "switch": 252, "pip": [252, 253, 254, 255, 263], "python3": [252, 253, 254, 255, 263], "built": 252, "run": 252, "command": [252, 253], "dirhtml": 252, "locat": [252, 255], "home": 252, "page": 252, "directori": [252, 254], "get": 252, "necessari": 252, "webpag": 252, "webserv": 252, "easili": [252, 253, 255, 257, 258], "python": [252, 263], "server": 252, "8080": 252, "access": 252, "web": 252, "browser": 252, "localhost": 252, "librari": [253, 254, 255, 256, 261, 263, 265], "ruff": [253, 254], "lint": [253, 254], "your": [253, 255], "develop": [253, 254, 255], "dev": [253, 255], "pyproject": [253, 255], "toml": [253, 254, 255], "tool": [253, 255, 263], "src": 253, "extend": 253, "includ": [253, 254, 255, 263], "ipynb": 253, "exclud": 253, "build": [253, 263], "doc": 253, "_version": 253, "py": [253, 255], "120": 253, "select": 253, "pycodestyl": 253, "pyflak": 253, "pyupgrad": 253, "flake8": 253, "bugbear": 253, "simplifi": 253, "isort": 253, "ignor": 253, "e501": 253, "e713": 253, "e714": 253, "__init__": 253, "f401": 253, "f403": 253, "manual": [253, 255], "check": 253, "hook": 253, "config": [253, 256, 257, 258, 259, 260, 261, 262], "yaml": 253, "repo": [253, 254], "github": [253, 263], "rev": 253, "v2": 253, "id": 253, "larg": 253, "fixer": 253, "trail": 253, "whitespac": 253, "astral": 253, "sh": 253, "v0": 253, "enabl": 253, "disabl": 253, "uninstal": 253, "extens": 253, "vscode": [253, 255], "json": [253, 255], "you": [253, 254, 255, 263], "edit": [253, 258], "latest": [254, 263], "releas": [254, 264], "main": [254, 262], "branch": 254, "mhostett": [254, 264], "Or": [254, 255], "pre": 254, "To": 254, "activ": 254, "benefici": 254, "fashion": 254, "allow": [254, 255], "chang": [254, 265], "immedi": 254, "seen": 254, "upon": 254, "next": 254, "clone": 254, "wherev": 254, "flag": 254, "packag": [254, 263], "commit": 254, "pytest": [254, 255], "cov": 254, "xdist": 254, "benchmark": 254, "ini_opt": 255, "minvers": 255, "addopt": 255, "showloc": 255, "testpath": 255, "execut": 255, "test_psk": 255, "instruct": 255, "invok": 255, "infrastructur": 255, "debug": 255, "inlinebackend": [256, 257, 258, 259, 260, 261, 262], "print_figure_kwarg": [256, 257, 258, 259, 260, 261, 262], "facecolor": [256, 257, 258, 259, 260, 261, 262], "widget": [256, 257, 258, 259, 260, 261, 262], "tx": 256, "decai": [256, 258], "fillstyl": 256, "show": [256, 257, 258, 259, 260, 261, 262], "accomplish": [256, 261], "def": [256, 259, 261], "resample_sign": 256, "new_sample_r": 256, "ty": 256, "gca": [256, 261], "set_prop_cycl": [256, 261], "four": 256, "appear": 256, "fourth": 256, "do": 256, "315": 256, "32": 256, "00095883": 257, "00175012": 257, "00423921": 257, "0058825": 257, "006151": 257, "00474595": 257, "0017044": 257, "00254816": 257, "00721645": 257, "0112324": 257, "01342358": 257, "01273202": 257, "00845058": 257, "0004368": 257, "01073669": 257, "02372977": 257, "03650247": 257, "04650654": 257, "05098525": 257, "04734644": 257, "03355896": 257, "00851486": 257, "02769991": 257, "07367348": 257, "12670447": 257, "1830132": 257, "23810898": 257, "28727058": 257, "3260799": 257, "3509384": 257, "35949665": 257, "conveni": [257, 258], "evalu": [257, 258], "here": [257, 258], "47820725": 258, "78207252e": 258, "58172329e": 258, "10862468e": 258, "86109590e": 258, "21565653e": 258, "01140214e": 258, "57286400e": 258, "67772160e": 258, "47338728e": 258, "10422993e": 258, "89312837e": 258, "12240078e": 258, "03953322e": 258, "69685122e": 258, "63882791e": 258, "81474977e": 258, "47193366e": 258, "85259041e": 258, "15647504e": 258, "23851924e": 258, "42176895e": 258, "84684395e": 258, "42721858e": 258, "72236648e": 258, "14721649e": 258, "10813095e": 258, "94024315e": 258, "78877688e": 258, "74077567e": 258, "87820725": 258, "53637958": 258, "94724205": 258, "13335164": 258, "1455082": 258, "04436799": 258, "88708159": 258, "71930943": 258, "5719707": 258, "46154771": 258, "39261642": 258, "36139242": 258, "35935288": 258, "3763214": 258, "40270968": 258, "43085717": 258, "45557651": 258, "47410241": 258, "48566716": 258, "49090568": 258, "49124786": 258, "48840102": 258, "4839738": 258, "47925143": 258, "47510421": 258, "47199608": 258, "47005584": 258, "46917696": 258, "46911955": 258, "denomin": 258, "73910363": 258, "30614675j": 258, "plane": 258, "endpoint": 258, "092337035029908": 258, "71104892744724": 258, "684365018955985": 258, "37868538208862": 258, "1263714068241546": 258, "9993519409971622": 258, "1909320767063554": 258, "016796159999999997": 258, "46380627201679264": 258, "3806359704987118j": 258, "4988817673846036": 258, "333342139809402j": 258, "5543277195082319": 258, "22961005941718524j": 258, "5291527586053246": 258, "2828380420991956j": 258, "lyon": 258, "understand": 258, "3rd": 258, "insid": 258, "outsid": 258, "unstabl": 258, "n_symbol": 259, "els": 259, "pb": 259, "x_bb_rect": 259, "papr_bb_rect": 259, "x_pb_rect": 259, "papr_pb_rect": 259, "x_bb_0p1": 259, "papr_bb_0p1": 259, "x_pb_0p1": 259, "papr_pb_0p1": 259, "x_bb_0p5": 259, "papr_bb_0p5": 259, "x_pb_0p5": 259, "papr_pb_0p5": 259, "x_bb_0p9": 259, "papr_bb_0p9": 259, "x_pb_0p9": 259, "papr_pb_0p9": 259, "2f": 259, "rf": [259, 260], "512": 259, "sweep_alpha": 259, "bb_papr": 259, "pb_papr": 259, "bpsk_bb_papr": 259, "bpsk_pb_papr": 259, "qpsk_bb_papr": 259, "qpsk_pb_papr": 259, "psk8_bb_papr": 259, "psk8_pb_papr": 259, "psk16_bb_papr": 259, "psk16_pb_papr": 259, "configur": 260, "loop_filt": 260, "0x000002276d2bcc08": 260, "theta_0": 260, "phase_error": 260, "freq_estim": 260, "suptitl": [260, 261], "direct": [260, 264], "synthes": [260, 264], "dd": [260, 264], "avail": [260, 261, 263], "001": 260, "b_nt": 260, "0005": 260, "0125": 260, "015": 260, "0175": 260, "t_lock": 260, "analyze_psk": 261, "100_000": 261, "n0": 261, "tx_mf": 261, "1e6": 261, "bpsk_ber": 261, "bpsk_ser": 261, "qpsk_ber": 261, "qpsk_ser": 261, "psk8_ber": 261, "psk8_ser": 261, "psk16_ber": 261, "psk16_ser": 261, "simul": [261, 263], "1e0": 261, "psk8_bin": 261, "psk8_grai": 261, "wors": 261, "rc_0p1": 262, "rc_0p5": 262, "rc_0p9": 262, "pm": 262, "nearli": 262, "small": 262, "lobe": 262, "much": 262, "freqz": 262, "worn": 262, "whole": 262, "h_rc_0p1": 262, "h_rc_0p5": 262, "h_rc_0p9": 262, "p_rect": 262, "cumsum": 262, "p_rc_0p1": 262, "p_rc_0p5": 262, "p_rc_0p9": 262, "within": 262, "srrc_0p1": 262, "srrc_0p5": 262, "srrc_0p9": 262, "therefor": 262, "significantli": 262, "due": 262, "being": 262, "h_srrc_0p1": 262, "h_srrc_0p5": 262, "h_srrc_0p9": 262, "p_srrc_0p1": 262, "p_srrc_0p5": 262, "p_srrc_0p9": 262, "gauss_0p1": 262, "gauss_0p2": 262, "gauss_0p3": 262, "softwar": 263, "radio": 263, "goal": 263, "analyz": 263, "reli": 263, "interoper": 263, "veri": 263, "numba": 263, "acceler": 263, "computation": 263, "intens": 263, "addition": 263, "aim": 263, "replic": 263, "relev": 263, "toolbox": 263, "progress": 263, "someth": 263, "pleas": 263, "open": 263, "issu": 263, "pypi": 263, "api": [263, 265], "convers": [263, 264], "synchron": 263, "budget": [263, 264], "manipul": 263, "septemb": 264, "2023": 264, "sensibl": 264, "matt": 264, "hostett": 264, "august": 264, "27": 264, "without": 264, "abil": 264, "improv": 264, "renam": 264, "superflu": 264, "replac": 264, "translat": 264, "fix": [264, 265], "juli": 264, "firinterpol": 264, "model": 264, "impair": 264, "fpsl": 264, "helper": 264, "semant": 265, "major": 265, "minor": 265, "patch": 265, "introduc": 265, "featur": 265, "backward": 265, "compat": 265, "make": 265, "bug": 265, "There": 265, "guarante": 265, "them": 265, "thei": 265}, "objects": {"": [[3, 0, 0, 1, "sdr", ""]], "sdr": [[9, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [26, 1, 1, "", "Decimator", "Implements a polyphase decimating finite impulse response (FIR) filter."], [37, 1, 1, "", "EnergyDetector", "Implements an energy detector."], [42, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [49, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [66, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [73, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [92, 1, 1, "", "Interpolator", "Implements a polyphase interpolating finite impulse response (FIR) filter."], [103, 1, 1, "", "LinearModulation", "Implements linear phase/amplitude modulation with arbitrary symbol mapping."], [121, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [130, 1, 1, "", "MSK", "Implements minimum-shift keying (MSK) modulation and demodulation."], [132, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [140, 1, 1, "", "OQPSK", "Implements offset quadrature phase-shift keying (OQPSK) modulation and demodulation."], [144, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [152, 1, 1, "", "PiMPSK", "Implements $pi/M$ phase-shift keying ($pi/M$ PSK) modulation and demodulation."], [154, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [155, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [156, 1, 1, "", "ReplicaCorrelator", "Implements an clairvoyant replica-correlator detector."], [161, 1, 1, "", "Resampler", "Implements a polyphase rational resampling finite impulse response (FIR) filter."], [174, 5, 1, "", "albersheim", "Estimates the minimum required single-sample SNR, given $N_{NC}$ non-coherent combinations, to achieve a probability of detection $P_D$ and probability of false alarm $P_{FA}$. This function implements Albersheim's equation."], [175, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [176, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [177, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [178, 5, 1, "", "barker", "Returns the Barker code/sequence of length $N$."], [179, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [180, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [181, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [182, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [183, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [184, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [185, 5, 1, "", "db", "Converts from linear units to decibels."], [186, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [187, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [188, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [189, 5, 1, "", "downsample", "Downsamples the time-domain signal $x[n]$ by the factor $r$."], [190, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [191, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [192, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [193, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [194, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [195, 5, 1, "", "evm", "Calculates the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [196, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [197, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [198, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [199, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [200, 5, 1, "", "half_sine", "Returns a half-sine pulse shape."], [201, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [202, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [203, 5, 1, "", "linear", "Converts from decibels to linear units."], [204, 5, 1, "", "mix", "Mixes the time-domain signal $x[n]$ with a complex exponential or real sinusoid."], [205, 5, 1, "", "multirate_taps", "Computes the multirate FIR filter that achieves rational resampling by $P/Q$."], [206, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [207, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [208, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [209, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [210, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [211, 5, 1, "", "percent", "Converts from a ratio to a percentage."], [233, 5, 1, "", "polyphase_matrix", "Converts the multirate FIR filter taps $h_i$ into the polyphase matrix $H_{i, j}$ that achieves rational resampling by $P/Q$."], [234, 5, 1, "", "ppb", "Converts from a ratio to parts per billion (ppb)."], [235, 5, 1, "", "ppm", "Converts from a ratio to parts per million (ppm)."], [236, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [237, 5, 1, "", "rectangular", "Returns a rectangular pulse shape."], [238, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [239, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [240, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [241, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [242, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [243, 5, 1, "", "to_complex_bb", "Converts the real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$ to a complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c} = f_{s,r}/2$."], [244, 5, 1, "", "to_real_pb", "Converts the complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$ to a real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r} = 2f_{s,c}$."], [245, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [246, 5, 1, "", "upsample", "Upsamples the time-domain signal $x[n]$ by the factor $r$."], [247, 5, 1, "", "wavelength", "Calculates the wavelength $lambda$ of an electromagnetic wave with frequency $f$."], [248, 5, 1, "", "zadoff_chu", "Returns the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.ClosedLoopPLL": [[10, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [11, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [12, 2, 1, "", "K0", "The NCO gain $K_0$."], [13, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [14, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [15, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [16, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [17, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [18, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [19, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [20, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [21, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [22, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [23, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [24, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [25, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[16, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [16, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [16, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [16, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [16, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[17, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[19, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[22, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.Decimator": [[27, 3, 1, "", "__call__", "Filters and decimates the input signal $x[n]$ with the polyphase FIR filter."], [28, 3, 1, "", "__init__", "Creates a polyphase FIR decimating filter."], [29, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [30, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [31, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [32, 2, 1, "", "method", "The method used to design the multirate filter."], [33, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [34, 2, 1, "", "rate", "The decimation rate $r$."], [35, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [36, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Decimator.__call__": [[27, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [27, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Decimator.__init__": [[28, 4, 2, "p-rate", "rate", "The decimation rate $r$."], [28, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [28, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.EnergyDetector": [[38, 3, 1, "", "p_d", "Computes the probability of detection $P_D$."], [39, 3, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [40, 3, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [41, 3, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.EnergyDetector.p_d": [[38, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [38, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [38, 4, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.p_fa": [[39, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [39, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [39, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [39, 4, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.EnergyDetector.roc": [[40, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [40, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [40, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."], [40, 4, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.threshold": [[41, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [41, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [41, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [41, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.ErrorRate": [[43, 3, 1, "", "__init__", "Creates a new error rate tabulation object."], [44, 3, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [45, 3, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [46, 3, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [47, 3, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [48, 3, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[44, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [44, 4, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [44, 4, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[45, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[46, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[48, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[50, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the FIR filter."], [51, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [52, 3, 1, "", "__len__", "Returns the filter length $N + 1$."], [53, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [54, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [55, 2, 1, "", "delay", "The delay of the FIR filter $d = lfloor frac{N + 1}{2} rfloor$ in samples."], [56, 3, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [57, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the FIR filter."], [58, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(omega)$ of the FIR filter on a logarithmic frequency axis."], [59, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [60, 2, 1, "", "order", "The order of the FIR filter $N$."], [61, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [62, 2, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [63, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [64, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [65, 2, 1, "", "taps", "The feedforward taps $h_i$ for $i = 0,...,N$."]], "sdr.FIR.__call__": [[50, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [50, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.FIR.__init__": [[51, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$ for $i = 0,...N$."], [51, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FIR.frequency_response": [[57, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [57, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.frequency_response_log": [[58, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [58, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [58, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[59, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.step_response": [[63, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FarrowResampler": [[67, 3, 1, "", "__call__", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [68, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [69, 2, 1, "", "order", "The order of the filter."], [70, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [71, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [72, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__call__": [[67, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [67, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.__init__": [[68, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FarrowResampler.reset": [[70, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[74, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [75, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the IIR filter."], [76, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [77, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [78, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [79, 2, 1, "", "a_taps", "The feedback taps $a_j$ for $j = 0,...,N$."], [80, 2, 1, "", "b_taps", "The feedforward taps $b_i$ for $i = 0,...,M$."], [81, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the IIR filter."], [82, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(omega)$ of the IIR filter on a logarithmic frequency axis."], [83, 2, 1, "", "gain", "The gain of the IIR filter."], [84, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [85, 2, 1, "", "order", "The order of the IIR filter $N$."], [86, 2, 1, "", "poles", "The poles of the IIR filter."], [87, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [88, 2, 1, "", "state", "The filter state."], [89, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [90, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [91, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[74, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [74, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [74, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."], [74, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__call__": [[75, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.IIR.__init__": [[76, 4, 2, "p-a", "a", "The feedback coefficients $a_j$ for $j = 0,...,N$."], [76, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$ for $i = 0,...,M$."], [76, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.IIR.frequency_response": [[81, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [81, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[82, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [82, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [82, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[84, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[89, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.Interpolator": [[93, 3, 1, "", "__call__", "Interpolates and filters the input signal $x[n]$ with the polyphase FIR filter."], [94, 3, 1, "", "__init__", "Creates a polyphase FIR interpolating filter."], [95, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [96, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [97, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [98, 2, 1, "", "method", "The method used to design the multirate filter."], [99, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [100, 2, 1, "", "rate", "The interpolation rate $r$."], [101, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [102, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Interpolator.__call__": [[93, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [93, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Interpolator.__init__": [[94, 4, 2, "p-rate", "rate", "The interpolation rate $r$."], [94, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [94, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.LinearModulation": [[104, 3, 1, "", "__init__", "Creates a new linear phase/amplitude modulation object."], [105, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [106, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [107, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [108, 2, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [109, 3, 1, "", "decide_symbols", "Converts the received complex symbols $hat{a}[k]$ into decimal symbol decisions $hat{s}[k]$ using maximum-likelihood estimation (MLE)."], [110, 3, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples $hat{x}[n]$ into decimal symbol decisions $hat{s}[k]$ using matched filtering and maximum-likelihood estimation."], [111, 3, 1, "", "map_symbols", "Converts the decimal symbols $s[k]$ to complex symbols $a[k]$."], [112, 3, 1, "", "modulate", "Modulates the decimal symbols $s[k]$ into pulse-shaped complex samples $x[n]$."], [113, 2, 1, "", "order", "The modulation order $M = 2^k$."], [114, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [115, 2, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [116, 2, 1, "", "rx_filter", "The receive decimating matched filter. The filter coefficients are matched to the pulse shape $h[-n]^*$."], [117, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [118, 2, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [119, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."], [120, 2, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter. The filter coefficients are the pulse shape $h[n]$."]], "sdr.LinearModulation.__init__": [[104, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [104, 4, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees to apply to symbol_map."], [104, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [104, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [104, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [104, 4, 2, "p-symbol_map", "symbol_map", "The symbol mapping ${0, dots, M-1} mapsto mathbb{C}$. An $M$-length array whose indices are decimal symbols $s[k]$ and whose values are complex symbols $a[k]$, where $M$ is the modulation order."]], "sdr.LinearModulation.ber": [[107, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.LinearModulation.decide_symbols": [[109, 4, 2, "p-a_hat", "a_hat", "The received complex symbols $hat{a}[k]$."]], "sdr.LinearModulation.demodulate": [[110, 4, 2, "p-x_hat", "x_hat", "The received pulse-shaped complex samples $hat{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.LinearModulation.map_symbols": [[111, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to map, $0$ to $M-1$."]], "sdr.LinearModulation.modulate": [[112, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.LinearModulation.ser": [[117, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.LoopFilter": [[122, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [123, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [124, 3, 1, "", "__call__", "Filters the input signal $x[n]$."], [125, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [126, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [127, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [128, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [129, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__call__": [[124, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.LoopFilter.__init__": [[125, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [125, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [125, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [125, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.MSK": [[131, 3, 1, "", "__init__", "Creates a new MSK object."]], "sdr.MSK.__init__": [[131, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [131, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [131, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.NCO": [[133, 2, 1, "", "K0", "(Settable) The NCO gain $K_0$."], [134, 3, 1, "", "__call__", "Steps the NCO with variable frequency and/or phase signals."], [135, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [136, 2, 1, "", "increment", "(Settable) The constant phase accumulation $omega$ of the NCO in radians/sample."], [137, 2, 1, "", "offset", "(Settable) The absolute phase offset $theta$ of the NCO in radians."], [138, 3, 1, "", "reset", "Resets the NCO."], [139, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__call__": [[134, 4, 2, "p-freq", "freq", "The variable frequency signal $f[n]$ in radians/sample. This input signal varies the per-sample phase increment of the NCO. If None, the signal is all zeros."], [134, 4, 2, "p-phase", "phase", "The variable phase signal $p[n]$ in radians. This input signal varies the per-sample phase offset of the NCO. If None, the signal is all zeros."]], "sdr.NCO.__init__": [[135, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [135, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [135, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.NCO.step": [[139, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.OQPSK": [[141, 3, 1, "", "__init__", "Creates a new OQPSK object."], [142, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [143, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."]], "sdr.OQPSK.__init__": [[141, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [141, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [141, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [141, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [141, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [141, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK": [[145, 3, 1, "", "__init__", "Creates a new PSK object."], [146, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [147, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [148, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [149, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [150, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [151, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[145, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [145, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [145, 4, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [145, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [145, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [145, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [145, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[148, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [148, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.ser": [[150, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [150, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.PiMPSK": [[153, 3, 1, "", "__init__", "Creates a new $pi/M$ PSK object."]], "sdr.PiMPSK.__init__": [[153, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [153, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [153, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [153, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [153, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [153, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [153, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.Q": [[154, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[155, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.ReplicaCorrelator": [[157, 3, 1, "", "p_d", "Computes the probability of detection $P_D$."], [158, 3, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [159, 3, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [160, 3, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.ReplicaCorrelator.p_d": [[157, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [157, 4, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [157, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."]], "sdr.ReplicaCorrelator.p_fa": [[158, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [158, 4, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [158, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [158, 4, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.ReplicaCorrelator.roc": [[159, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [159, 4, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [159, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."]], "sdr.ReplicaCorrelator.threshold": [[160, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [160, 4, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [160, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [160, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.Resampler": [[162, 3, 1, "", "__call__", "Resamples and filters the input signal $x[n]$ with the polyphase FIR filter."], [163, 3, 1, "", "__init__", "Creates a polyphase FIR rational resampling filter."], [164, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [165, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [166, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [167, 2, 1, "", "down", "The decimation rate $Q$."], [168, 2, 1, "", "method", "The method used to design the multirate filter."], [169, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [170, 2, 1, "", "rate", "The resampling rate $P/Q$."], [171, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [172, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."], [173, 2, 1, "", "up", "The interpolation rate $P$."]], "sdr.Resampler.__init__": [[163, 4, 2, "p-down", "down", "The decimation rate $Q$."], [163, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [163, 4, 2, "p-taps", "taps", "The multirate filter design specification."], [163, 4, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.albersheim": [[174, 4, 2, "p-N_nc", "N_nc", "The number of non-coherent combinations $N_{NC} ge 1$."], [174, 4, 2, "p-p_d", "p_d", "The desired probability of detection $P_D$ in $(0, 1)$."], [174, 4, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{FA}$ in $(0, 1)$."]], "sdr.average_power": [[175, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the average power. The default is None, which computes the average power of the entire array."], [175, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [175, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[176, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [176, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [176, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [176, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[177, 4, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [177, 4, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.barker": [[178, 4, 2, "p-length", "length", "The length $N$ of the Barker code/sequence."], [178, 4, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[179, 4, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [179, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [179, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[180, 4, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[181, 4, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[182, 4, 2, "p-p", "p", "The probability $p$ of a bit flip."], [182, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [182, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[183, 4, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[184, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.db": [[185, 4, 2, "p-type", "type", "The type of input value or signal."], [185, 4, 2, "p-x", "x", "The input value or signal."]], "sdr.diff_decode": [[186, 4, 2, "p-y", "y", "The input encoded data $y[k]$."], [186, 4, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[187, 4, 2, "p-x", "x", "The input uncoded data $x[k]$."], [187, 4, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[188, 4, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [188, 4, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [188, 4, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [188, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [188, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.downsample": [[189, 4, 2, "p-rate", "rate", "The downsampling factor $r$."], [189, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.ebn0_to_esn0": [[190, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [190, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [190, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[191, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [191, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [191, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [191, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[192, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the energy. The default is None, which computes the energy of the entire array."], [192, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [192, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[193, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [193, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [193, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[194, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [194, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.evm": [[195, 4, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [195, 4, 2, "p-output", "output", "The output type of the EVM calculation."], [195, 4, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [195, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.frequency_offset": [[196, 4, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [196, 4, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [196, 4, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [196, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [196, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[197, 4, 2, "p-distance", "distance", "The distance $d$ in meters between the transmitter and receiver."], [197, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[198, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [198, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [198, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [198, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[199, 4, 2, "p-n", "n", "The length of the Gray code."]], "sdr.half_sine": [[200, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [200, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [200, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.hexdump": [[201, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [201, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[202, 4, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [202, 4, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [202, 4, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.linear": [[203, 4, 2, "p-type", "type", "The type of output value or signal."], [203, 4, 2, "p-x", "x", "The input value or signal in dB."]], "sdr.mix": [[204, 4, 2, "p-complex", "complex", "Indicates whether to mix by a complex exponential or real sinusoid."], [204, 4, 2, "p-freq", "freq", "The frequency $f$ of the sinusoid in Hz (or 1/samples if sample_rate=1). The frequency must satisfy $-f_s/2 le f le f_s/2$."], [204, 4, 2, "p-phase", "phase", "The phase $phi$ of the sinusoid in degrees."], [204, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal."], [204, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.multirate_taps": [[205, 4, 2, "p-A_stop", "A_stop", "The stopband attenuation $A_{text{stop}}$ in dB."], [205, 4, 2, "p-down", "down", "The decimation rate $Q$."], [205, 4, 2, "p-half_length", "half_length", "The half-length of the polyphase filters."], [205, 4, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.pack": [[206, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [206, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [206, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[207, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the PAPR. The default is None, which computes the PAPR of the entire array."], [207, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[208, 4, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [208, 4, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [208, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[209, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the peak power. The default is None, which computes the peak power of the entire array."], [209, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [209, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[210, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [210, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.percent": [[211, 4, 2, "p-x", "x", "The input ratio."]], "sdr.plot": [[212, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [213, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [214, 5, 1, "", "eye", "Plots the eye diagram of the baseband modulated signal $x[n]$."], [215, 5, 1, "", "filter", "Plots the magnitude response $|H(omega)|^2$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [216, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [217, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [218, 5, 1, "", "magnitude_response", "Plots the magnitude response $|H(omega)|^2$ of the filter."], [219, 5, 1, "", "p_d", "Plots the probability of detection $P_D$ as a function of received SNR or ENR."], [220, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [221, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [222, 5, 1, "", "phase_response", "Plots the phase response $angle H(omega)$ of the filter."], [223, 5, 1, "", "phase_tree", "Plots the phase tree of a continuous-phase modulated (CPM) signal signal $x[n]$."], [224, 5, 1, "", "raster", "Plots a raster of the time-domain signal $x[n]$."], [225, 5, 1, "", "roc", "Plots the receiver operating characteristic (ROC) curve as a function of $P_{FA}$."], [226, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [227, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [228, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [229, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [230, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [231, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [232, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[212, 4, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [212, 4, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."], [212, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."]], "sdr.plot.constellation": [[213, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [213, 4, 2, "p-kwargs", "kwargs", "If heatmap=False, additional keyword arguments to pass to matplotlib.pyplot.scatter(). The following keyword arguments are set by default. The defaults may be overwritten."], [213, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [213, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.eye": [[214, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [214, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [214, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [214, 4, 2, "p-span", "span", "The number of symbols per raster."], [214, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [214, 4, 2, "p-x", "x", "The baseband modulated signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved."]], "sdr.plot.filter": [[215, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [215, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [215, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [215, 4, 2, "p-filter", "filter", "The filter definition."], [215, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [215, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[216, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [216, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [216, 4, 2, "p-filter", "filter", "The filter definition."], [216, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [216, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [216, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.impulse_response": [[217, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [217, 4, 2, "p-filter", "filter", "The filter definition."], [217, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.magnitude_response": [[218, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [218, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [218, 4, 2, "p-filter", "filter", "The filter definition."], [218, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [218, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [218, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.p_d": [[219, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [219, 4, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [219, 4, 2, "p-x", "x", "The SNR or ENR in dB."], [219, 4, 2, "p-x_label", "x_label", "The x-axis label to use."]], "sdr.plot.periodogram": [[220, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [220, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [220, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [220, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [220, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [220, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [220, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [220, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [220, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [220, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_delay": [[221, 4, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [221, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [221, 4, 2, "p-filter", "filter", "The filter definition."], [221, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [221, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [221, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_response": [[222, 4, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [222, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [222, 4, 2, "p-filter", "filter", "The filter definition."], [222, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [222, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [222, 4, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [222, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_tree": [[223, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [223, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [223, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [223, 4, 2, "p-span", "span", "The number of symbols per raster."], [223, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [223, 4, 2, "p-x", "x", "The baseband CPM signal $x[n]$."]], "sdr.plot.raster": [[224, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [224, 4, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\"."], [224, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.collections.LineCollection. The following keyword arguments are set by default. The defaults may be overwritten."], [224, 4, 2, "p-length", "length", "The length of each raster in samples. This must be provided if x is 1D."], [224, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [224, 4, 2, "p-stride", "stride", "The stride between each raster in samples. If None, the stride is set to length."], [224, 4, 2, "p-x", "x", "The time-domain signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved. If x is 1D, the rastering is determined by length and stride. If x is 2D, the rows correspond to each raster."]], "sdr.plot.roc": [[225, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to the plotting function defined by type."], [225, 4, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [225, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [225, 4, 2, "p-type", "type", "The type of plot to generate."]], "sdr.plot.ser": [[226, 4, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [226, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."], [226, 4, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.spectrogram": [[227, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [227, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [227, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.pcolormesh(). The following keyword arguments are set by default. The defaults may be overwritten."], [227, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [227, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [227, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [227, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [227, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [227, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[228, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [228, 4, 2, "p-filter", "filter", "The filter definition."], [228, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.symbol_map": [[229, 4, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [229, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot(). The following keyword arguments are set by default. The defaults may be overwritten."], [229, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [229, 4, 2, "p-modulation", "modulation", "The linear modulation or symbol map ${0, dots, M-1} mapsto mathbb{C}$."]], "sdr.plot.time_domain": [[230, 4, 2, "p-centered", "centered", "Indicates whether to center the x-axis about 0. This argument is mutually exclusive with offset."], [230, 4, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal. If \"color\", the real and imaginary parts will have different colors based on the current Matplotlib color cycle. If \"line\", the real part will have a solid line and the imaginary part will have a dashed line, and both lines will share the same color."], [230, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [230, 4, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. The units of the offset are $1/f_s$. This argument is mutually exclusive with centered."], [230, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [230, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[232, 4, 2, "p-filter", "filter", "The filter definition."], [232, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.polyphase_matrix": [[233, 4, 2, "p-down", "down", "The decimation rate $Q$."], [233, 4, 2, "p-taps", "taps", "The multirate FIR filter taps $h_i$."], [233, 4, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.ppb": [[234, 4, 2, "p-x", "x", "The input ratio."]], "sdr.ppm": [[235, 4, 2, "p-x", "x", "The input ratio."]], "sdr.raised_cosine": [[236, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [236, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [236, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [236, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rectangular": [[237, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [237, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [237, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[238, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [238, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[239, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [239, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [239, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [239, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[240, 4, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [240, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.snr_to_ebn0": [[241, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [241, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [241, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [241, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[242, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [242, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.to_complex_bb": [[243, 4, 2, "p-x_r", "x_r", "The real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$. If the length is odd, one zero is appended to the end."]], "sdr.to_real_pb": [[244, 4, 2, "p-x_c", "x_c", "The complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$."]], "sdr.unpack": [[245, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [245, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [245, 4, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.upsample": [[246, 4, 2, "p-rate", "rate", "The upsampling factor $r$."], [246, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.wavelength": [[247, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.zadoff_chu": [[248, 4, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [248, 4, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence. The root must be relatively prime to the length, i.e., $gcd(u, N) = 1$."], [248, 4, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence. When $q ne 0$, the returned sequence is a cyclic shift of the root-$u$ Zadoff-Chu sequence."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"convers": 0, "decibel": 0, "ratio": 0, "from": [0, 253, 254, 255], "e_b": 0, "n_0": 0, "e_": 0, "": [0, 257, 258], "n": [0, 256, 257, 258], "data": 1, "manipul": [1, 3], "detect": [2, 7], "detector": 2, "theoret": 2, "limit": 2, "digit": [3, 258], "signal": [3, 250, 256, 259], "process": 3, "filter": [3, 7, 257, 258, 260], "multir": 3, "resampl": [3, 256], "correl": 3, "link": 4, "budget": 4, "channel": [4, 250], "capac": 4, "path": 4, "loss": 4, "antenna": 4, "measur": 5, "energi": 5, "power": [5, 259], "voltag": 5, "modul": [5, 6, 7], "linear": 6, "continu": 6, "phase": [6, 260, 261], "orthogon": 6, "puls": [6, 259, 262], "shape": [6, 259, 262], "symbol": [6, 261], "map": [6, 261], "encod": 6, "plot": [7, 259], "configur": [7, 253, 255], "time": [7, 259, 260], "domain": [7, 259, 260], "frequenc": [7, 257, 258, 259, 260], "spectral": 7, "estim": 7, "analysi": 7, "probabl": 8, "note": [9, 197, 205, 218, 220, 227], "constructor": [9, 26, 42, 49, 66, 73, 92, 103, 121, 130, 132, 140, 144, 152, 161], "method": [9, 26, 37, 42, 49, 66, 73, 92, 103, 121, 130, 132, 140, 144, 152, 156, 161], "properti": [9, 26, 49, 66, 73, 92, 103, 121, 130, 132, 140, 144, 152, 161], "special": [26, 49, 66, 73, 92, 121, 132, 161], "string": [26, 49, 73, 92, 103, 130, 140, 144, 152, 161], "represent": [26, 49, 73, 92, 103, 130, 140, 144, 152, 161], "stream": [26, 49, 73, 92, 161], "mode": [26, 49, 73, 92, 161], "onli": [26, 49, 73, 92, 161], "see": [42, 44, 57, 58, 59, 63, 81, 82, 84, 89, 104, 107, 117, 131, 141, 145, 148, 150, 153, 154, 155, 184, 207, 246], "also": [42, 44, 57, 58, 59, 63, 81, 82, 84, 89, 104, 107, 117, 131, 141, 145, 148, 150, 153, 154, 155, 184, 207, 246], "warn": [189, 246], "sequenc": 249, "simul": 250, "model": 250, "impair": 250, "synchron": 251, "document": 252, "instal": [252, 253, 254, 255, 263], "build": 252, "doc": 252, "serv": 252, "format": 253, "run": [253, 255], "linter": 253, "formatt": 253, "pre": 253, "commit": 253, "v": [253, 255], "code": [253, 255], "pypi": 254, "github": 254, "edit": 254, "local": 254, "folder": 254, "dev": 254, "depend": 254, "unit": 255, "test": 255, "command": 255, "line": 255, "farrow": 256, "arbitrari": 256, "construct": 256, "an": [256, 257, 258], "input": 256, "x": 256, "t_": 256, "rate": [256, 261], "r": 256, "y": 256, "frac": 256, "upsampl": 256, "integ": 256, "downsampl": 256, "irrat": 256, "fir": 257, "creat": [257, 258], "examin": [257, 258, 259], "impuls": [257, 258], "respons": [257, 258, 260], "h": [257, 258], "step": [257, 258, 260], "omega": [257, 258], "group": [257, 258], "delai": [257, 258], "tau_g": [257, 258], "fulli": [257, 258], "analyz": [257, 258, 260], "iir": 258, "zero": 258, "pole": 258, "stabil": 258, "peak": 259, "averag": 259, "qpsk": [259, 261], "variou": 259, "across": [259, 260], "excess": 259, "bandwidth": 259, "lock": 260, "loop": 260, "design": 260, "proport": 260, "plu": 260, "integr": 260, "ppi": 260, "implement": 260, "pll": 260, "close": 260, "perform": 260, "compar": 260, "zeta": 260, "b_n": 260, "t": 260, "shift": 261, "kei": 261, "constel": 261, "bpsk": 261, "8": [261, 264], "psk": 261, "16": 261, "error": 261, "curv": 261, "bit": 261, "rais": 262, "cosin": 262, "squar": 262, "root": 262, "gaussian": 262, "sdr": 263, "featur": 263, "v0": 264, "0": 264, "chang": 264, "contributor": 264, "7": 264, "6": 264, "5": 264, "4": 264, "3": 264, "2": 264, "1": 264, "version": 265, "alpha": 265, "releas": 265, "beta": 265}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Conversions": [[0, "conversions"]], "Decibels": [[0, "decibels"]], "Ratios": [[0, "ratios"]], "From E_b/N_0": [[0, "from-e-b-n-0"]], "From E_s/N_0": [[0, "from-e-s-n-0"]], "From S/N": [[0, "from-s-n"]], "Data manipulation": [[1, "data-manipulation"]], "Detection": [[2, "detection"], [7, "detection"]], "Detectors": [[2, "detectors"]], "Theoretical limits": [[2, "theoretical-limits"]], "Digital signal processing": [[3, "digital-signal-processing"]], "Filtering": [[3, "filtering"]], "Multirate filtering": [[3, "multirate-filtering"]], "Resampling": [[3, "resampling"]], "Correlation": [[3, "correlation"]], "Signal manipulation": [[3, "signal-manipulation"]], "Link budgets": [[4, "link-budgets"]], "Channel capacity": [[4, "channel-capacity"]], "Path losses": [[4, "path-losses"]], "Antennas": [[4, "antennas"]], "Measurement": [[5, "measurement"]], "Energy": [[5, "energy"]], "Power": [[5, "power"]], "Voltage": [[5, "voltage"]], "Modulation": [[5, "modulation"], [6, "modulation"], [7, "modulation"]], "Linear modulations": [[6, "linear-modulations"]], "Continuous-phase modulations": [[6, "continuous-phase-modulations"]], "Orthogonal modulations": [[6, "orthogonal-modulations"]], "Pulse shaping": [[6, "pulse-shaping"]], "Symbol mapping": [[6, "symbol-mapping"], [261, "symbol-mapping"]], "Symbol encoding": [[6, "symbol-encoding"]], "Plotting": [[7, "plotting"]], "Configuration": [[7, "configuration"], [253, "configuration"], [255, "configuration"]], "Time-domain": [[7, "time-domain"]], "Frequency-domain": [[7, "frequency-domain"]], "Spectral estimation": [[7, "spectral-estimation"]], "Filter analysis": [[7, "filter-analysis"]], "Probability": [[8, "probability"]], "Note": [[9, null], [197, null], [205, null], [218, null], [220, null], [220, null], [227, null]], "Constructors": [[9, "constructors"], [26, "constructors"], [42, "constructors"], [49, "constructors"], [66, "constructors"], [73, "constructors"], [92, "constructors"], [103, "constructors"], [121, "constructors"], [130, "constructors"], [132, "constructors"], [140, "constructors"], [144, "constructors"], [152, "constructors"], [161, "constructors"]], "Methods": [[9, "methods"], [26, "methods"], [37, "methods"], [42, "methods"], [49, "methods"], [66, "methods"], [73, "methods"], [92, "methods"], [103, "methods"], [121, "methods"], [130, "methods"], [132, "methods"], [140, "methods"], [144, "methods"], [152, "methods"], [156, "methods"], [161, "methods"]], "Properties": [[9, "properties"], [26, "properties"], [49, "properties"], [66, "properties"], [73, "properties"], [92, "properties"], [103, "properties"], [121, "properties"], [130, "properties"], [132, "properties"], [140, "properties"], [144, "properties"], [152, "properties"], [161, "properties"]], "Special methods": [[26, "special-methods"], [49, "special-methods"], [66, "special-methods"], [73, "special-methods"], [92, "special-methods"], [121, "special-methods"], [132, "special-methods"], [161, "special-methods"]], "String representation": [[26, "string-representation"], [49, "string-representation"], [73, "string-representation"], [92, "string-representation"], [103, "string-representation"], [130, "string-representation"], [140, "string-representation"], [144, "string-representation"], [152, "string-representation"], [161, "string-representation"]], "Streaming mode only": [[26, "streaming-mode-only"], [49, "streaming-mode-only"], [73, "streaming-mode-only"], [92, "streaming-mode-only"], [161, "streaming-mode-only"]], "See also": [[42, null], [44, null], [57, null], [58, null], [59, null], [63, null], [81, null], [82, null], [84, null], [89, null], [104, null], [107, null], [117, null], [131, null], [141, null], [145, null], [148, null], [150, null], [153, null], [154, null], [155, null], [184, null], [207, null], [246, null]], "Warning": [[189, null], [246, null]], "Sequences": [[249, "sequences"]], "Simulation": [[250, "simulation"]], "Channel models": [[250, "channel-models"]], "Signal impairments": [[250, "signal-impairments"]], "Synchronization": [[251, "synchronization"]], "Documentation": [[252, "documentation"]], "Install": [[252, "install"], [253, "install"], [255, "install"]], "Build the docs": [[252, "build-the-docs"]], "Serve the docs": [[252, "serve-the-docs"]], "Formatting": [[253, "formatting"]], "Run the linter": [[253, "run-the-linter"]], "Run the formatter": [[253, "run-the-formatter"]], "Pre-commit": [[253, "pre-commit"]], "Run from VS Code": [[253, "run-from-vs-code"], [255, "run-from-vs-code"]], "Installation": [[254, "installation"], [263, "installation"]], "Install from PyPI": [[254, "install-from-pypi"]], "Install from GitHub": [[254, "install-from-github"]], "Editable install from local folder": [[254, "editable-install-from-local-folder"]], "Install the dev dependencies": [[254, "install-the-dev-dependencies"]], "Unit Tests": [[255, "unit-tests"]], "Run from the command line": [[255, "run-from-the-command-line"]], "Farrow arbitrary resampler": [[256, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[256, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[256, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[256, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[256, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[256, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[256, "downsample-by-an-irrational-rate"]], "FIR filters": [[257, "fir-filters"]], "Create an FIR filter": [[257, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[257, "examine-the-impulse-response-h-n"], [258, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[257, "examine-the-step-response-s-n"], [258, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[257, "examine-the-frequency-response-h-omega"], [258, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[257, "examine-the-group-delay-tau-g-omega"], [258, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[257, "fully-analyze-a-fir-filter"]], "IIR filters": [[258, "iir-filters"]], "Create an IIR filter": [[258, "create-an-iir-filter"]], "Examine the zeros and poles": [[258, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[258, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[258, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[259, "peak-to-average-power"]], "QPSK signal with various pulse shapes": [[259, "qpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[259, "examine-time-domain"]], "Examine frequency domain": [[259, "examine-frequency-domain"]], "Plot across excess bandwidth": [[259, "plot-across-excess-bandwidth"]], "Phase-locked loops": [[260, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[260, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[260, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[260, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[260, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[260, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[260, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[260, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[261, "phase-shift-keying"]], "Constellations": [[261, "constellations"]], "BPSK": [[261, "bpsk"]], "QPSK": [[261, "qpsk"]], "8-PSK": [[261, "id1"]], "16-PSK": [[261, "id2"]], "Error rate curves": [[261, "error-rate-curves"]], "Bit error rate curves": [[261, "bit-error-rate-curves"]], "Symbol error rate curves": [[261, "symbol-error-rate-curves"]], "Pulse shapes": [[262, "pulse-shapes"]], "Raised cosine": [[262, "raised-cosine"]], "Square-root raised cosine": [[262, "square-root-raised-cosine"]], "Gaussian": [[262, "gaussian"]], "sdr": [[263, "sdr"]], "Features": [[263, "features"]], "v0.0": [[264, "v0-0"]], "v0.0.8": [[264, "v0-0-8"]], "Changes": [[264, "changes"], [264, "id1"], [264, "id3"], [264, "id5"], [264, "id7"], [264, "id9"], [264, "id11"], [264, "id13"]], "Contributors": [[264, "contributors"], [264, "id2"], [264, "id4"], [264, "id6"], [264, "id8"], [264, "id10"], [264, "id12"], [264, "id14"]], "v0.0.7": [[264, "v0-0-7"]], "v0.0.6": [[264, "v0-0-6"]], "v0.0.5": [[264, "v0-0-5"]], "v0.0.4": [[264, "v0-0-4"]], "v0.0.3": [[264, "v0-0-3"]], "v0.0.2": [[264, "v0-0-2"]], "v0.0.1": [[264, "v0-0-1"]], "Versioning": [[265, "versioning"]], "Alpha releases": [[265, "alpha-releases"]], "Beta releases": [[265, "beta-releases"]]}, "indexentries": {"module": [[3, "module-sdr"]], "sdr": [[3, "module-sdr"]]}, "docurls": ["api/conversions/", "api/data-manipulation/", "api/detection/", "api/dsp/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.Decimator/", "api/sdr.Decimator.__call__/", "api/sdr.Decimator.__init__/", "api/sdr.Decimator.__repr__/", "api/sdr.Decimator.__str__/", "api/sdr.Decimator.delay/", "api/sdr.Decimator.method/", "api/sdr.Decimator.polyphase_taps/", "api/sdr.Decimator.rate/", "api/sdr.Decimator.reset/", "api/sdr.Decimator.taps/", "api/sdr.EnergyDetector/", "api/sdr.EnergyDetector.p_d/", "api/sdr.EnergyDetector.p_fa/", "api/sdr.EnergyDetector.roc/", "api/sdr.EnergyDetector.threshold/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__call__/", "api/sdr.FIR.__init__/", "api/sdr.FIR.__len__/", "api/sdr.FIR.__repr__/", "api/sdr.FIR.__str__/", "api/sdr.FIR.delay/", "api/sdr.FIR.flush/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.frequency_response_log/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.reset/", "api/sdr.FIR.state/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__call__/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__call__/", "api/sdr.IIR.__init__/", "api/sdr.IIR.__repr__/", "api/sdr.IIR.__str__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.state/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.Interpolator/", "api/sdr.Interpolator.__call__/", "api/sdr.Interpolator.__init__/", "api/sdr.Interpolator.__repr__/", "api/sdr.Interpolator.__str__/", "api/sdr.Interpolator.delay/", "api/sdr.Interpolator.method/", "api/sdr.Interpolator.polyphase_taps/", "api/sdr.Interpolator.rate/", "api/sdr.Interpolator.reset/", "api/sdr.Interpolator.taps/", "api/sdr.LinearModulation/", "api/sdr.LinearModulation.__init__/", "api/sdr.LinearModulation.__repr__/", "api/sdr.LinearModulation.__str__/", "api/sdr.LinearModulation.ber/", "api/sdr.LinearModulation.bps/", "api/sdr.LinearModulation.decide_symbols/", "api/sdr.LinearModulation.demodulate/", "api/sdr.LinearModulation.map_symbols/", "api/sdr.LinearModulation.modulate/", "api/sdr.LinearModulation.order/", "api/sdr.LinearModulation.phase_offset/", "api/sdr.LinearModulation.pulse_shape/", "api/sdr.LinearModulation.rx_filter/", "api/sdr.LinearModulation.ser/", "api/sdr.LinearModulation.sps/", "api/sdr.LinearModulation.symbol_map/", "api/sdr.LinearModulation.tx_filter/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__call__/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.MSK/", "api/sdr.MSK.__init__/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__call__/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.OQPSK/", "api/sdr.OQPSK.__init__/", "api/sdr.OQPSK.__repr__/", "api/sdr.OQPSK.__str__/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.__repr__/", "api/sdr.PSK.__str__/", "api/sdr.PSK.ber/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.PiMPSK/", "api/sdr.PiMPSK.__init__/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.ReplicaCorrelator/", "api/sdr.ReplicaCorrelator.p_d/", "api/sdr.ReplicaCorrelator.p_fa/", "api/sdr.ReplicaCorrelator.roc/", "api/sdr.ReplicaCorrelator.threshold/", "api/sdr.Resampler/", "api/sdr.Resampler.__call__/", "api/sdr.Resampler.__init__/", "api/sdr.Resampler.__repr__/", "api/sdr.Resampler.__str__/", "api/sdr.Resampler.delay/", "api/sdr.Resampler.down/", "api/sdr.Resampler.method/", "api/sdr.Resampler.polyphase_taps/", "api/sdr.Resampler.rate/", "api/sdr.Resampler.reset/", "api/sdr.Resampler.taps/", "api/sdr.Resampler.up/", "api/sdr.albersheim/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.barker/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.db/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.downsample/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.evm/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.half_sine/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.linear/", "api/sdr.mix/", "api/sdr.multirate_taps/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.percent/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.eye/", "api/sdr.plot.filter/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.magnitude_response/", "api/sdr.plot.p_d/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.phase_tree/", "api/sdr.plot.raster/", "api/sdr.plot.roc/", "api/sdr.plot.ser/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.polyphase_matrix/", "api/sdr.ppb/", "api/sdr.ppm/", "api/sdr.raised_cosine/", "api/sdr.rectangular/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.to_complex_bb/", "api/sdr.to_real_pb/", "api/sdr.unpack/", "api/sdr.upsample/", "api/sdr.wavelength/", "api/sdr.zadoff_chu/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/formatting/", "development/installation/", "development/unit-tests/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})