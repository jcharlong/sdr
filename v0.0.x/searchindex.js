Search.setIndex({"titles": ["Data manipulation", "Filtering", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "Resampling", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.DDS", "sdr.DDS.__init__", "sdr.DDS.nco", "sdr.DDS.process", "sdr.DDS.reset", "sdr.DDS.step", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__init__", "sdr.FIR.delay", "sdr.FIR.filter", "sdr.FIR.frequency_response", "sdr.FIR.frequency_response_log", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.reset", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FIRInterpolator", "sdr.FIRInterpolator.__init__", "sdr.FIRInterpolator.filter", "sdr.FIRInterpolator.polyphase_taps", "sdr.FIRInterpolator.rate", "sdr.FIRInterpolator.reset", "sdr.FIRInterpolator.streaming", "sdr.FIRInterpolator.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.resample", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__init__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.filter", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.filter", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.process", "sdr.NCO.reset", "sdr.NCO.step", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.bit_error_rate", "sdr.PSK.demodulate", "sdr.PSK.modulate", "sdr.PSK.offset", "sdr.PSK.order", "sdr.PSK.symbol_error_rate", "sdr.PSK.symbol_labels", "sdr.PSK.symbol_map", "sdr.Q", "sdr.Qinv", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.energy", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.hexdump", "sdr.iq_imbalance", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.plot.constellation", "sdr.plot.error_rate", "sdr.plot.filter", "sdr.plot.frequency_response", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.raised_cosine", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.unpack", "Simulation", "Synchronization", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165], "hexdump": [0, 31, 127, 163, 164], "arraylik": [0, 2, 3, 4, 5, 6, 25, 28, 31, 33, 38, 39, 41, 50, 51, 52, 58, 61, 62, 65, 66, 67, 70, 81, 86, 90, 95, 98, 99, 100, 101, 102, 105, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 150, 152, 153, 154], "byte": [0, 127], "width": [0, 127], "int": [0, 4, 25, 30, 31, 33, 34, 37, 38, 40, 42, 43, 44, 45, 47, 50, 51, 54, 58, 60, 65, 71, 72, 74, 75, 78, 90, 97, 98, 99, 104, 111, 115, 119, 120, 125, 126, 127, 129, 136, 137, 138, 139, 140, 141, 142, 143, 144, 149, 151, 153, 161], "16": [0, 107, 127, 159, 164], "str": [0, 127, 140, 143], "return": [0, 4, 8, 16, 18, 21, 22, 28, 30, 31, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 47, 52, 61, 65, 70, 71, 72, 74, 78, 86, 95, 97, 100, 101, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 149, 150, 151, 152, 153, 157, 158, 159, 161], "specifi": [0, 31, 34, 35, 37, 111, 112, 121, 127, 157, 158], "pack": [0, 31, 33, 127, 129, 163, 164], "x": [0, 3, 4, 5, 6, 8, 25, 28, 31, 33, 38, 41, 50, 52, 58, 61, 65, 70, 81, 86, 90, 95, 98, 101, 102, 108, 109, 110, 111, 113, 116, 118, 119, 120, 121, 122, 123, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 150, 152, 153, 154, 159, 160, 161, 165], "bpe": [0, 129, 153], "ndarrai": [0, 2, 4, 6, 25, 28, 30, 31, 36, 38, 41, 42, 43, 44, 47, 49, 50, 52, 53, 57, 58, 61, 64, 65, 68, 69, 70, 71, 72, 74, 76, 78, 80, 81, 86, 90, 95, 97, 98, 100, 101, 102, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 123, 124, 125, 126, 128, 129, 149, 151, 152, 153, 154], "binari": [0, 2, 4, 99, 106, 107, 113, 114, 115, 116, 117, 121, 129, 145, 153, 154], "arrai": [0, 31, 53, 57, 99, 106, 107, 113, 115, 116, 119, 120, 121, 126, 129, 146, 153, 158], "an": [0, 1, 2, 38, 44, 65, 66, 67, 74, 99, 112, 129, 139, 153, 163], "multipl": [0, 129, 153], "bit": [0, 3, 5, 31, 33, 36, 98, 100, 105, 106, 107, 112, 113, 114, 116, 117, 127, 129, 135, 153, 161, 164], "per": [0, 28, 95, 111, 112, 123, 125, 127, 129, 149, 151, 152, 153, 159, 161, 162], "element": [0, 127, 129, 153], "unpack": [0, 31, 33, 127, 153, 161, 163, 164], "class": [1, 3, 7, 8, 25, 31, 33, 34, 35, 36, 37, 38, 50, 58, 65, 81, 90, 98, 155, 157, 158, 161], "fir": [1, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 136, 137, 138, 139, 141, 142, 144, 148, 159, 163, 164], "implement": [1, 4, 7, 25, 38, 50, 58, 65, 81, 87, 90, 98, 155, 156], "finit": [1, 38, 50, 164], "impuls": [1, 5, 38, 44, 50, 65, 74, 125, 136, 139, 146, 162, 164], "respons": [1, 5, 38, 42, 43, 44, 47, 50, 65, 71, 72, 74, 78, 125, 136, 137, 138, 139, 142, 144, 162, 164], "firinterpol": [1, 50, 51, 52, 53, 54, 55, 56, 57, 159, 161], "polyphas": [1, 50, 51, 53, 57], "interpol": [1, 50, 51, 52, 54], "iir": [1, 5, 8, 17, 43, 44, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 87, 136, 137, 138, 139, 141, 142, 144, 148, 157, 160, 163, 164], "infinit": [1, 65, 164], "awgn_capac": [2, 112, 163], "snr": [2, 5, 31, 33, 34, 35, 36, 37, 98, 100, 105, 111, 112, 135, 154, 161], "calcul": [2, 112, 114, 117, 124, 131], "addit": [2, 111, 112, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 154], "white": [2, 111, 112, 154], "gaussian": [2, 4, 111, 112, 125, 154, 163, 164], "nois": [2, 5, 8, 9, 10, 15, 21, 31, 33, 34, 35, 36, 37, 81, 84, 88, 100, 105, 111, 112, 135, 143, 154, 160], "awgn": [2, 100, 105, 111, 112, 135, 154, 161, 163], "bec_capac": [2, 114, 163], "p": [2, 6, 108, 109, 113, 114, 116, 117, 121, 154], "erasur": [2, 113, 114, 121, 154], "bec": [2, 113, 114, 121, 154, 163], "bsc_capac": [2, 117, 163], "symmetr": [2, 116, 117, 121, 154], "bsc": [2, 116, 117, 121, 154, 163], "fspl": [2, 124, 163], "d": [2, 124, 131, 163], "f": [2, 16, 18, 38, 42, 43, 65, 71, 72, 111, 123, 124, 125, 131, 152, 156, 157, 158, 159, 160, 161, 162], "free": [2, 124], "space": [2, 43, 72, 124], "db": [2, 8, 19, 21, 31, 33, 34, 35, 37, 100, 105, 111, 112, 124, 125, 128, 130, 131, 135, 159, 161, 162], "parabolic_antenna": [2, 131, 163], "freq": [2, 123, 131, 154, 156, 160], "tupl": [2, 31, 33, 36, 38, 42, 43, 65, 71, 72, 131, 134, 145], "gain": [2, 8, 11, 12, 13, 14, 15, 25, 26, 65, 66, 73, 81, 82, 83, 84, 90, 91, 92, 125, 131, 160], "g": [2, 36, 131], "beamwidth": [2, 131], "theta": [2, 5, 26, 90, 92, 94, 131, 142], "parabol": [2, 131], "reflector": [2, 131], "float": [3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 33, 34, 35, 37, 42, 43, 58, 61, 65, 66, 71, 72, 73, 81, 82, 83, 84, 85, 88, 90, 91, 92, 93, 94, 98, 99, 103, 110, 111, 112, 113, 116, 118, 122, 123, 125, 128, 130, 131, 132, 133, 134, 136, 137, 138, 140, 141, 142, 143, 145, 146, 149, 150, 151, 152, 154], "time": [3, 8, 15, 16, 18, 19, 20, 21, 22, 38, 65, 81, 84, 110, 111, 118, 121, 122, 123, 125, 128, 130, 132, 133, 136, 140, 143, 146, 149, 150, 151, 152, 154, 156, 157, 158, 162], "domain": [3, 110, 111, 118, 122, 123, 128, 130, 132, 133, 136, 140, 143, 146, 150, 152, 154], "signal": [3, 5, 8, 16, 18, 21, 22, 25, 28, 31, 33, 34, 35, 36, 37, 38, 41, 50, 52, 58, 61, 65, 70, 81, 86, 90, 95, 97, 110, 111, 112, 118, 122, 123, 124, 125, 128, 130, 131, 132, 133, 135, 140, 143, 146, 150, 152, 157, 158, 160, 162], "n": [3, 4, 5, 6, 8, 25, 28, 30, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 47, 50, 52, 58, 61, 65, 70, 71, 72, 74, 75, 78, 81, 86, 90, 95, 97, 108, 109, 110, 111, 112, 115, 118, 121, 122, 123, 126, 128, 130, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 150, 152, 154, 160, 162], "average_pow": [3, 110, 130, 163], "averag": [3, 31, 110, 111, 112, 130, 140], "papr": [3, 130, 159, 163, 164], "peak": [3, 118, 130, 132, 133], "ratio": [3, 5, 21, 31, 33, 34, 35, 36, 37, 100, 105, 111, 112, 130, 135], "peak_pow": [3, 130, 132, 163], "crest_factor": [3, 118, 130, 163, 164], "crest": [3, 118], "factor": [3, 8, 15, 24, 81, 84, 85, 118, 160], "peak_voltag": [3, 118, 133, 163], "rms_voltag": [3, 118, 150, 163], "root": [3, 4, 146, 150, 151, 157], "mean": [3, 140, 150, 162], "squar": [3, 4, 124, 131, 146, 150, 151, 157], "rm": [3, 118, 150], "errorr": [3, 31, 32, 33, 34, 35, 36, 37, 161], "A": [3, 8, 16, 18, 19, 20, 21, 22, 24, 31, 38, 81, 115, 126, 127, 128, 131, 135, 149, 151, 155, 160], "rate": [3, 5, 8, 15, 23, 31, 32, 33, 35, 36, 42, 43, 50, 51, 52, 54, 58, 61, 71, 72, 98, 100, 105, 123, 135, 136, 137, 138, 140, 141, 142, 143, 146, 152, 154], "ber": [3, 5, 31, 98, 100, 135, 161], "symbol": [3, 5, 31, 33, 36, 98, 99, 100, 101, 102, 105, 106, 107, 111, 112, 123, 125, 134, 135, 145, 149, 151, 159, 161, 162], "ser": [3, 5, 31, 98, 105, 135, 161], "psk": [4, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 123, 128, 135, 152, 159, 163], "phase": [4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 107, 123, 128, 141, 142, 154, 163], "shift": [4, 98, 101, 102, 103, 104, 107, 157, 158], "kei": [4, 98, 101, 102, 103, 104, 107], "demodul": [4, 98, 101, 161], "time_bandwidth": [4, 125], "span": [4, 125, 149, 151, 159, 162], "sp": [4, 125, 149, 151, 159, 162], "raised_cosin": [4, 149, 162, 163, 164], "alpha": [4, 125, 147, 149, 151, 159, 162], "rais": [4, 146, 149, 151, 157], "cosin": [4, 146, 149, 151, 157], "rc": [4, 149], "root_raised_cosin": [4, 136, 137, 138, 139, 141, 142, 144, 146, 148, 151, 157, 159, 161, 162, 163, 164], "srrc": [4, 146, 151, 159], "binary_cod": [4, 115], "gener": [4, 111, 115, 126, 161], "code": [4, 99, 106, 107, 115, 126], "length": [4, 44, 47, 115, 125, 126, 136, 139, 140, 143, 144, 149, 151, 156, 159, 162], "2": [4, 8, 16, 18, 21, 31, 42, 43, 50, 53, 57, 71, 72, 98, 99, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162], "gray_cod": [4, 126, 163], "grai": [4, 99, 106, 107, 126], "diff_decod": [4, 119, 120, 163], "y": [4, 25, 28, 30, 38, 41, 50, 52, 61, 65, 70, 81, 86, 90, 95, 97, 111, 113, 116, 119, 120, 121, 123, 128, 134, 135, 143, 145, 146, 152, 160, 161], "y_prev": [4, 119, 120], "0": [4, 5, 6, 15, 25, 26, 31, 38, 42, 43, 50, 53, 57, 65, 66, 71, 72, 84, 90, 92, 98, 99, 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 125, 126, 128, 129, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 165], "differenti": [4, 119, 120], "decod": [4, 119], "input": [4, 8, 16, 18, 21, 22, 25, 28, 38, 39, 41, 44, 47, 50, 51, 52, 58, 59, 61, 62, 65, 66, 67, 70, 74, 78, 81, 86, 90, 95, 108, 111, 112, 113, 114, 116, 117, 119, 120, 121, 129, 139, 144, 153, 154, 157, 158, 160], "data": [4, 119, 120, 127, 129, 153, 163], "k": [4, 5, 33, 98, 99, 101, 102, 104, 119, 120, 134, 145, 159, 161, 162], "diff_encod": [4, 119, 120, 163], "use_styl": [5, 147], "appli": [5, 50, 123, 128, 134, 145, 147, 152, 154], "": [5, 8, 16, 18, 19, 20, 22, 23, 33, 34, 35, 36, 37, 38, 42, 43, 47, 65, 71, 72, 78, 98, 101, 102, 111, 112, 123, 128, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 152, 156, 159, 161, 163], "default": [5, 44, 47, 106, 107, 143, 147], "matplotlib": [5, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 156, 157, 158, 159, 160, 161, 162, 163], "rcparam": [5, 147, 156, 160], "time_domain": [5, 111, 146, 159, 161, 162, 163, 164], "sample_r": [5, 8, 15, 23, 42, 43, 71, 72, 123, 136, 137, 138, 140, 141, 142, 143, 146, 156, 160, 162], "1": [5, 6, 8, 15, 18, 22, 24, 25, 26, 31, 42, 43, 50, 53, 57, 65, 66, 71, 72, 81, 84, 85, 90, 92, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 165], "periodogram": [5, 140, 159, 163, 164], "estim": [5, 98, 101, 140, 143, 160], "power": [5, 110, 111, 112, 130, 131, 132, 140, 162], "spectral": [5, 140, 159, 162], "densiti": [5, 21, 140, 159, 162], "p_": [5, 110, 111, 121, 130, 132, 140], "xx": [5, 140], "us": [5, 25, 27, 39, 51, 58, 59, 66, 67, 81, 87, 98, 101, 112, 114, 117, 127, 129, 136, 139, 140, 143, 144, 153, 157, 158, 162, 163, 165], "welch": [5, 140, 143], "method": [5, 140, 143, 157, 158], "spectrogram": [5, 143, 163, 164], "constel": [5, 111, 123, 128, 134, 152], "x_hat": [5, 31, 33, 98, 101, 134, 161], "heatmap": [5, 134, 161], "bool": [5, 38, 39, 48, 50, 51, 56, 58, 59, 63, 65, 66, 67, 79, 134, 142, 145], "fals": [5, 38, 39, 50, 51, 58, 59, 65, 66, 67, 113, 116, 121, 134, 158, 162], "complex": [5, 25, 28, 30, 98, 101, 102, 107, 111, 112, 128, 134, 145, 154, 156, 157, 158, 161], "hat": [5, 33, 98, 101, 134, 145], "error_r": [5, 31, 35, 36, 135, 161], "error": [5, 8, 14, 15, 21, 31, 32, 33, 35, 36, 37, 81, 84, 98, 100, 105, 117, 135, 160], "function": [5, 6, 8, 17, 38, 65, 66, 81, 108, 109, 112, 125, 135, 140, 143, 157, 158, 160, 162, 163, 164], "symbol_map": [5, 98, 103, 104, 106, 107, 145, 146, 161], "map": [5, 98, 107, 145], "b": [5, 65, 67, 112, 125, 127, 136, 137, 138, 139, 141, 142, 144, 148, 162], "h": [5, 38, 39, 42, 43, 44, 50, 65, 71, 72, 74, 81, 125, 136, 137, 139, 159, 160, 162], "omega": [5, 26, 90, 92, 93, 136, 137, 138, 141, 142, 160], "step": [5, 25, 28, 30, 38, 47, 65, 78, 90, 95, 97, 136, 144], "zero": [5, 50, 62, 65, 66, 80, 81, 129, 136, 137, 138, 139, 141, 142, 144, 146, 148, 157, 159, 160, 162], "pole": [5, 65, 66, 76, 136, 137, 138, 139, 141, 142, 144, 148, 157], "frequency_respons": [5, 38, 42, 43, 65, 71, 72, 137, 157, 158, 160, 162, 163, 164], "group_delai": [5, 138, 157, 158, 163, 164], "group": [5, 138], "delai": [5, 25, 38, 40, 58, 81, 90, 119, 120, 138, 141, 160], "tau_g": [5, 138], "impulse_respons": [5, 38, 44, 65, 74, 125, 139, 149, 151, 157, 158, 162, 163, 164], "phase_delai": [5, 141, 163], "tau_": [5, 141], "phi": [5, 98, 99, 103, 123, 128, 141], "phase_respons": [5, 142, 163], "step_respons": [5, 38, 47, 65, 78, 144, 157, 158, 160, 163, 164], "zeros_pol": [5, 148, 158, 163, 164], "kwarg": [5, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148], "q": [6, 108, 109, 163], "comput": [6, 98, 100, 105, 108, 109, 111, 124, 157, 158, 160, 162], "complementari": [6, 108, 109], "cumul": [6, 108, 109], "distribut": [6, 108, 109], "standard": [6, 108, 109], "normal": [6, 8, 10, 15, 81, 84, 88, 108, 109, 125, 143, 160, 162], "mathcal": [6, 108, 109, 111, 121], "qinv": [6, 108, 109, 163], "invers": [6, 109], "farrowresampl": [7, 58, 59, 60, 61, 62, 63, 64, 156, 163, 164], "cubic": [7, 58], "farrow": [7, 58, 59, 60, 61, 62, 63, 64, 164], "arbitrari": [7, 58, 59, 60, 61, 62, 63, 64, 163, 164], "closedlooppl": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 155, 160, 163, 164], "defin": [8, 38, 65, 111, 121, 125, 155, 158, 163], "perform": [8, 155, 157, 158, 163], "close": [8, 15, 17, 155, 164], "loop": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 155, 163, 164], "pll": [8, 9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 155, 164], "thi": [8, 28, 33, 34, 35, 37, 38, 50, 65, 95, 98, 107, 111, 112, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 156, 158, 160, 162], "i": [8, 15, 24, 31, 36, 38, 44, 47, 48, 50, 53, 56, 57, 58, 63, 65, 74, 78, 79, 81, 84, 85, 88, 108, 109, 111, 112, 114, 117, 121, 123, 124, 125, 127, 128, 129, 131, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 149, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 165], "meant": 8, "analysi": [8, 15, 160, 164], "onli": [8, 38, 46, 50, 55, 58, 62, 65, 77, 106, 107, 111, 160], "block": [8, 25, 50, 81, 90, 119, 120], "diagram": [8, 25, 50, 81, 90, 119, 120], "bb": [8, 159, 160], "ped": [8, 14, 15, 84, 160], "lf": [8, 160], "lo": [8, 160], "e": [8, 25, 36, 110, 113, 114, 122, 157, 158, 160, 161], "j": [8, 25, 50, 53, 57, 65, 111, 121, 128, 157, 158, 160], "nco": [8, 11, 15, 25, 26, 27, 84, 90, 91, 92, 93, 94, 95, 96, 97, 155, 160, 163, 164], "local": [8, 160], "oscil": [8, 25, 27, 90, 92, 155, 160, 164], "baseband": [8, 159, 160], "detector": [8, 14, 15, 84, 160], "filter": [8, 12, 13, 15, 17, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 125, 136, 137, 138, 139, 141, 142, 144, 146, 148, 149, 151, 155, 159, 161, 162, 163, 164], "numer": [8, 25, 27, 90, 92, 155, 158, 160, 164], "control": [8, 25, 27, 90, 92, 155, 160, 164], "The": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 57, 58, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 157, 158, 160, 162, 163, 165], "transfer": [8, 17, 38, 65, 66, 81, 125, 157, 158, 160], "2nd": [8, 81, 84, 155, 160, 164], "order": [8, 31, 36, 38, 45, 58, 60, 65, 75, 81, 84, 98, 99, 104, 111, 123, 125, 149, 151, 152, 155, 159, 160, 161, 164], "proport": [8, 12, 81, 82, 84, 124, 131, 155, 164], "plu": [8, 81, 84, 155, 164], "integr": [8, 13, 81, 83, 84, 155, 158, 164], "h_": [8, 50, 53, 57, 160], "z": [8, 25, 38, 65, 81, 90, 119, 120, 157, 158, 160], "k_1": [8, 12, 81, 82, 160], "k_2": [8, 13, 81, 83, 160], "frac": [8, 16, 18, 21, 22, 65, 81, 110, 111, 112, 118, 124, 125, 128, 130, 131, 150, 160], "k_0": [8, 11, 15, 26, 84, 90, 91, 92, 160], "k_p": [8, 14, 15, 84, 160], "refer": [8, 16, 18, 19, 20, 21, 22, 31, 58, 81, 100, 105, 111, 118, 123, 125, 130, 149, 151, 152, 158, 162], "michael": [8, 16, 18, 19, 20, 21, 22, 81, 149, 151], "rice": [8, 16, 18, 19, 20, 21, 22, 81, 149, 151], "digit": [8, 16, 18, 19, 20, 21, 22, 25, 26, 81, 100, 105, 149, 151, 155, 160, 163, 164], "commun": [8, 16, 18, 19, 20, 21, 22, 81, 100, 105, 149, 151, 160, 163], "discret": [8, 16, 18, 19, 20, 21, 22, 81, 111, 121, 149, 151, 154, 156, 160], "approach": [8, 16, 18, 19, 20, 21, 22, 81, 112, 114, 117, 149, 151, 160], "appendix": [8, 81, 149, 151], "c": [8, 16, 18, 19, 20, 21, 22, 33, 34, 35, 36, 37, 81, 98, 107, 112, 114, 117, 124, 131, 160], "lock": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 163], "exampl": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 131, 135, 136, 137, 138, 139, 141, 142, 144, 146, 147, 148, 149, 151, 152, 153, 160], "see": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 48, 49, 52, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 107, 125, 149, 151, 163], "noise_bandwidth": [8, 15, 81, 84, 88], "damping_factor": [8, 15, 81, 84, 85], "creat": [8, 15, 25, 26, 31, 32, 38, 39, 50, 51, 58, 59, 65, 66, 67, 81, 84, 90, 92, 98, 99, 111, 123, 146, 152, 156, 160, 161, 162], "object": [8, 15, 31, 32, 98, 99, 158, 160, 161], "frequency_lock_tim": [8, 16], "freq_offset": [8, 16, 18], "frequenc": [8, 16, 18, 20, 38, 42, 43, 65, 71, 72, 81, 123, 124, 131, 136, 137, 138, 140, 141, 142, 143, 154, 162], "lock_tim": [8, 18, 160], "phase_error_vari": [8, 21], "cn0": [8, 21], "varianc": [8, 21, 111], "steadi": [8, 21], "state": [8, 21, 38, 46, 48, 50, 55, 56, 58, 62, 63, 65, 77, 79], "phase_lock_tim": [8, 22], "bn": [8, 9], "bandwidth": [8, 9, 10, 15, 19, 81, 84, 88, 112, 125, 149, 151, 160, 162], "b_n": [8, 9, 10, 15, 16, 18, 21, 22, 81, 84, 88], "hz": [8, 9, 15, 16, 18, 21, 42, 43, 71, 72, 81, 84, 88, 112, 123, 124, 125, 131, 156], "bnt": [8, 10, 160], "t": [8, 10, 15, 81, 84, 88, 125, 127, 156], "repres": [8, 17, 113, 114], "k0": [8, 11, 15, 25, 26, 84, 90, 91, 92], "k1": [8, 12, 81, 82, 160], "k2": [8, 13, 81, 83, 160], "kp": [8, 14, 15, 84], "omega_3db": [8, 19], "3": [8, 16, 18, 19, 22, 31, 50, 53, 57, 103, 104, 106, 107, 111, 112, 113, 115, 116, 121, 123, 124, 125, 126, 127, 128, 129, 131, 136, 137, 138, 139, 141, 142, 144, 146, 148, 152, 153, 158, 160, 162, 163, 164], "omega_": [8, 19], "textrm": [8, 19], "radian": [8, 19, 20, 21, 25, 26, 160], "omega_n": [8, 20, 160], "natur": [8, 20], "sampl": [8, 15, 23, 25, 26, 28, 30, 38, 40, 42, 43, 44, 47, 50, 52, 58, 62, 71, 72, 74, 78, 81, 84, 88, 90, 92, 93, 95, 97, 111, 123, 125, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 149, 151, 152, 154, 156, 159, 160, 162], "f_": [8, 15, 23, 42, 43, 52, 71, 72, 123, 125, 136, 137, 138, 140, 141, 142, 143, 146, 152, 156, 157, 158, 160, 162], "zeta": [8, 15, 24, 81, 84, 85], "damp": [8, 15, 24, 81, 84, 85, 160], "properti": [9, 10, 11, 12, 13, 14, 17, 19, 20, 23, 24, 27, 40, 45, 48, 49, 53, 54, 56, 57, 60, 63, 64, 68, 69, 73, 75, 76, 79, 80, 82, 83, 85, 87, 88, 91, 93, 94, 103, 104, 106, 107], "paramet": [15, 16, 18, 21, 26, 28, 30, 33, 34, 35, 37, 39, 41, 42, 43, 44, 47, 51, 52, 59, 61, 62, 66, 67, 70, 71, 72, 74, 78, 84, 86, 92, 95, 97, 99, 100, 101, 102, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153], "where": [15, 81, 84, 88, 111, 112, 121, 125, 157, 158, 163], "period": [15, 81, 84, 88], "second": [15, 16, 18, 22, 31, 81, 84, 88, 125], "critic": [15, 24, 81, 84, 85, 160], "underdamp": [15, 24, 81, 84, 85], "overdamp": [15, 24, 81, 84, 85], "ted": [15, 84], "t_": [16, 18, 22, 61, 125, 162], "fl": [16, 18], "4": [16, 18, 31, 43, 50, 53, 57, 72, 100, 103, 104, 105, 106, 107, 111, 112, 114, 115, 117, 121, 123, 124, 125, 126, 127, 128, 129, 131, 135, 136, 137, 138, 139, 141, 142, 144, 146, 147, 148, 149, 151, 152, 153, 156, 158, 159, 161, 164], "delta": [16, 18, 38, 44, 65, 74, 139, 157, 158], "offset": [16, 18, 25, 26, 90, 92, 94, 98, 99, 103, 111, 123, 128, 152, 154, 160, 161], "take": [16, 18, 22], "onto": [16, 18, 22], "equat": [16, 18, 19, 20, 21, 22, 65], "39": 16, "pl": [18, 22], "38": 18, "34": 19, "33": 20, "sigma_": 21, "theta_": 21, "n_0": [21, 33, 34, 35, 36, 37, 100, 105, 111, 112, 135, 161], "carrier": 21, "43": 21, "40": 22, "less": 24, "than": [24, 106, 107, 128, 134, 145], "greater": 24, "dd": [25, 26, 27, 28, 29, 30, 90, 155, 160, 163, 164], "direct": [25, 26, 155, 160, 164], "synthes": [25, 26, 155, 160, 164], "note": [25, 38, 50, 53, 57, 65, 81, 90, 111, 112, 114, 117, 119, 120, 125, 128, 131, 143], "increment": [25, 26, 28, 90, 92, 93, 95, 160], "v": [25, 90], "output": [25, 28, 30, 38, 41, 44, 47, 50, 52, 65, 66, 67, 74, 78, 81, 86, 90, 95, 97, 111, 112, 113, 114, 116, 117, 120, 121, 129, 139, 144, 153, 156, 157, 158, 160], "exponenti": [25, 28, 30, 156, 157, 158], "constant": [25, 26, 81, 90, 92, 93, 158, 160], "accumul": [25, 26, 31, 90, 92, 93, 160], "absolut": [25, 26, 90, 92, 94, 112], "unit": [25, 38, 47, 65, 78, 81, 90, 92, 93, 94, 110, 111, 112, 119, 120, 122, 132, 133, 135, 144, 149, 150, 151, 157, 158, 160], "adder": [25, 81, 90, 119, 120, 160], "process": [25, 28, 90, 95, 158, 160], "variabl": [25, 28, 90, 95, 127, 160], "reset": [25, 29, 38, 46, 50, 55, 58, 62, 65, 77, 81, 89, 90, 96], "forward": [25, 30, 90, 97], "vari": [28, 95], "number": [30, 31, 33, 34, 37, 42, 43, 44, 47, 71, 72, 74, 78, 97, 111, 125, 127, 129, 136, 137, 138, 139, 140, 141, 142, 143, 144, 149, 151, 153], "measur": [31, 33, 110, 111, 118, 122, 130, 132, 133, 150, 160, 163, 164], "new": [31, 32, 58, 59, 98, 99, 152], "In": [31, 39, 41, 48, 51, 52, 53, 56, 57, 59, 63, 66, 67, 79, 103, 104, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 131, 136, 137, 138, 139, 141, 142, 144, 146, 147, 148, 149, 151, 152, 153, 156, 161], "vector": [31, 62, 140, 143], "from": [31, 42, 43, 65, 66, 71, 72, 98, 99, 107, 143, 157, 158, 160, 163], "first": [31, 50, 129, 153], "receiv": [31, 33, 100, 105, 124], "contain": [31, 111, 127], "10": [31, 53, 57, 111, 112, 115, 121, 123, 124, 125, 126, 127, 128, 130, 131, 134, 135, 136, 137, 138, 139, 141, 142, 144, 146, 148, 149, 151, 152, 156, 157, 158, 159, 160, 161, 162], "add": [31, 33, 36, 111, 123, 152, 154, 161, 165], "out": [31, 53, 57, 103, 104, 106, 107, 108, 109, 113, 115, 116, 119, 120, 121, 124, 126, 129, 131, 138, 147, 153], "5": [31, 50, 53, 57, 106, 111, 113, 115, 116, 117, 121, 123, 125, 126, 127, 128, 131, 136, 137, 138, 139, 141, 142, 144, 146, 148, 149, 151, 152, 156, 157, 158, 159, 160, 161, 162, 164], "total": [31, 162], "ar": [31, 33, 34, 35, 37, 39, 43, 50, 51, 53, 57, 59, 66, 67, 72, 99, 112, 113, 114, 116, 117, 129, 134, 136, 137, 138, 140, 141, 142, 143, 145, 147, 156, 158, 160, 162, 163, 165], "count": [31, 34], "everi": [31, 156], "can": [31, 33, 34, 35, 37, 81, 111, 125, 129, 140, 143, 157, 158, 165], "obtain": 31, "follow": [31, 128, 147, 160], "6": [31, 50, 53, 57, 106, 107, 115, 121, 124, 126, 127, 131, 136, 137, 138, 139, 141, 142, 144, 146, 148, 157, 158, 160, 161], "tabul": [31, 32], "given": [31, 33, 34, 35, 37, 58, 61, 157, 158], "none": [31, 35, 38, 44, 47, 58, 62, 81, 89, 98, 100, 105, 111, 112, 121, 129, 134, 136, 139, 140, 143, 144, 145, 153, 154, 156, 159, 161], "all": [31, 36], "ascend": [31, 36], "correspond": [31, 36], "e_b": [33, 34, 35, 36, 37, 100, 105, 112, 135], "e_": [33, 34, 35, 36, 37, 100, 105, 111, 112, 135, 161], "other": [33, 34, 35, 37, 156, 165], "quantiti": [33, 34, 35, 36, 37], "howev": [33, 34, 35, 37, 81, 114, 117, 156], "user": [33, 34, 35, 37, 157, 158], "caution": [33, 34, 35, 37], "consist": [33, 34, 35, 36, 37], "instanc": [33, 34, 35, 37], "transmit": 33, "section": [33, 34, 35, 36, 37, 158, 160], "specif": [36, 162], "whatev": 36, "wa": [36, 112], "provid": [36, 98, 100, 105, 143, 163], "wrapper": [38, 65], "scipi": [38, 41, 52, 65, 140, 143, 162, 163], "convolv": [38, 41, 52, 146], "It": [38, 65, 81, 111], "support": [38, 65], "one": [38, 65, 106, 107, 125, 127, 136, 137, 138, 140, 141, 142, 143, 157, 158, 159, 162], "stream": [38, 39, 41, 46, 48, 50, 51, 52, 55, 56, 58, 59, 62, 63, 65, 66, 67, 77, 79], "its": [38, 65, 66, 111, 157, 158, 162], "feedforward": [38, 39, 49, 50, 51, 53, 57, 65, 67, 69, 136, 137, 138, 139, 141, 142, 144, 148, 157, 158], "coeffici": [38, 39, 50, 51, 65, 67, 136, 137, 138, 139, 141, 142, 144, 148, 157, 158], "h_i": [38, 39, 49, 50, 51, 53, 57, 157], "sum_": [38, 65, 110, 111, 112, 122, 150], "sum": [38, 65, 162], "limits_": [38, 65], "frequency_response_log": [38, 43, 65, 72], "logarithm": [38, 43, 65, 72, 136, 137, 138, 140, 141, 142, 157, 158], "axi": [38, 43, 65, 72, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 156], "when": [38, 44, 47, 65, 74, 78, 111, 112, 113, 114, 116, 117, 136, 137, 138, 139, 141, 142, 144, 156, 157, 158], "mode": [38, 39, 41, 46, 48, 50, 51, 52, 55, 56, 58, 59, 62, 63, 65, 66, 67, 77, 79], "u": [38, 47, 65, 78, 144, 157, 158], "indic": [38, 39, 48, 50, 51, 56, 58, 59, 63, 65, 66, 67, 79, 128, 142], "whether": [38, 39, 48, 50, 51, 56, 58, 59, 63, 65, 66, 67, 79, 142], "tap": [38, 49, 50, 51, 53, 57, 58, 64, 65, 68, 69, 157, 158], "previou": [39, 51, 59, 62, 66, 67, 119, 120], "preserv": [39, 48, 51, 56, 59, 63, 66, 67, 79], "between": [39, 48, 50, 51, 56, 59, 63, 66, 67, 79, 124, 140, 143, 160], "call": [39, 48, 51, 56, 59, 63, 66, 67, 79], "liter": [41, 52, 135, 137, 138, 141, 142], "full": [41, 52], "valid": [41, 52], "same": [41, 52, 157], "non": [41, 52], "convolut": [41, 52], "detail": [41, 52], "alwai": [41, 52], "produc": [41, 50, 52, 125, 162], "1024": [42, 43, 71, 72, 136, 137, 138, 141, 142, 159, 162], "plot": [42, 43, 44, 47, 71, 72, 74, 78, 103, 104, 106, 107, 111, 112, 114, 117, 123, 125, 128, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 156, 157, 158, 160, 161, 162, 163, 164], "decad": [43, 72, 136, 137, 138, 141, 142, 157, 160], "equival": [50, 111, 112, 156], "upsampl": 50, "r": [50, 51, 52, 53, 54, 57, 58, 61, 112, 125, 149, 151, 158, 159, 160, 162], "insert": 50, "each": [50, 127, 140, 143], "prototyp": [50, 53, 57], "instead": [50, 134], "decompos": 50, "parallel": 50, "commut": 50, "prevent": 50, "need": 50, "multipli": 50, "case": 50, "2x": 50, "hold": [50, 129], "top": 50, "bottom": 50, "relat": [50, 53, 57, 112, 125], "polyphase_tap": [50, 53, 57], "befor": [53, 57, 165], "decomposit": [53, 57], "after": [53, 57], "np": [53, 57, 111, 112, 113, 114, 116, 117, 121, 123, 128, 135, 136, 137, 138, 139, 141, 142, 144, 146, 148, 152, 156, 157, 158, 159, 160, 161, 162], "arang": [53, 57, 111, 156, 159, 160], "7": [53, 57, 106, 107, 115, 121, 126, 127, 146], "8": [53, 57, 103, 104, 106, 107, 111, 112, 114, 115, 117, 121, 125, 126, 127, 131, 135, 136, 137, 138, 139, 141, 142, 144, 146, 147, 148, 149, 151, 157, 158, 159, 160, 162], "9": [53, 57, 115, 121, 126, 127, 149, 151, 159, 161, 162, 164], "resampl": [58, 59, 60, 61, 62, 63, 64, 163, 164], "http": [58, 118, 125, 130], "wirelesspi": 58, "com": [58, 125], "fraction": [58, 62, 125, 156], "structur": 58, "index": [58, 62, 145], "should": 62, "equal": 62, "three": [62, 156, 162], "If": [62, 99, 100, 105, 111, 112, 121, 129, 134, 136, 139, 140, 143, 144, 145, 146, 153, 163], "lfilter": 65, "b_i": [65, 67, 69, 136, 137, 138, 139, 141, 142, 144, 148, 158], "feedback": [65, 67, 68, 136, 137, 138, 139, 141, 142, 144, 148, 158], "a_j": [65, 67, 68, 136, 137, 138, 139, 141, 142, 144, 148, 158], "These": [65, 147, 160], "differ": [65, 106, 107, 162], "a_0": 65, "left": [65, 110, 111, 112, 122, 124, 125, 128, 131, 132, 133, 150], "m": [65, 98, 99, 101, 102, 104, 107, 121], "right": [65, 110, 111, 112, 122, 124, 125, 128, 131, 132, 133, 150], "classmethod": [65, 66], "zerospol": [65, 66, 136, 137, 138, 139, 141, 142, 144, 148, 158], "self": [65, 66], "100": [65, 74, 78, 111, 112, 114, 117, 135, 136, 139, 144, 146, 152, 156, 160], "a_tap": [65, 68, 136, 137, 138, 139, 141, 142, 144, 148, 158, 160], "b_tap": [65, 69, 136, 137, 138, 139, 141, 142, 144, 148, 158, 160], "loopfilt": [81, 82, 83, 84, 85, 86, 87, 88, 89, 155, 160, 163, 164], "ppi": [81, 84, 155], "track": 81, "cannot": 81, "chirp": 81, "ramp": 81, "underli": [81, 87], "modul": [98, 99, 102, 104, 111, 123, 128, 152, 159, 161, 163], "bit_error_r": [98, 100], "ebn0": [98, 100, 105, 112, 135, 161], "decim": [98, 101, 102, 107, 161], "maximum": [98, 101, 134, 145], "likelihood": [98, 101], "symbol_error_r": [98, 105], "degre": [98, 99, 103, 123, 128, 131], "symbol_label": [98, 99, 106, 107], "valu": [98, 99, 106, 108, 109, 119, 120, 125, 128, 134, 143, 145, 158], "label": [98, 99, 106, 111, 123, 125, 128, 135, 143, 146, 149, 151, 152, 156, 159, 160, 161, 162], "consecut": [98, 99, 106], "dot": [98, 107], "mapsto": [98, 107], "mathbb": [98, 107, 112], "bin": [99, 106, 107, 145, 161], "ge": 99, "like": [99, 163], "must": [99, 100, 105, 111, 125, 149, 151], "have": [99, 129, 153], "uniqu": 99, "esn0": [100, 105, 112, 135, 161], "energi": [100, 105, 112, 122, 149, 151, 163], "psd": [100, 105, 112], "p_b": 100, "john": [100, 105], "proaki": [100, 105], "chapter": [100, 105], "optimum": [100, 105], "channel": [100, 105, 112, 113, 114, 116, 117, 121, 163], "plt": [103, 104, 106, 107, 111, 112, 114, 117, 123, 125, 128, 135, 136, 137, 138, 139, 141, 142, 144, 146, 148, 149, 151, 152, 156, 157, 158, 159, 160, 161, 162], "figur": [103, 104, 106, 107, 111, 112, 114, 117, 123, 125, 128, 135, 136, 137, 138, 139, 141, 142, 144, 146, 147, 148, 149, 151, 152, 156, 157, 158, 159, 160, 161, 162], "figsiz": [103, 104, 106, 107, 111, 112, 114, 117, 123, 125, 128, 135, 136, 137, 138, 139, 141, 142, 144, 146, 147, 148, 149, 151, 152, 156, 157, 158, 159, 160, 161, 162], "45": [103, 111, 123, 128, 152, 161], "p_e": 105, "adjac": [106, 107, 162], "annot": [106, 107, 145, 164], "mai": [106, 107, 147, 158], "more": [106, 107, 143], "00000000e": [107, 158], "00": [107, 158], "00j": 107, "07106781e": 107, "01": [107, 127, 158, 160], "01j": 107, "12323400e": 107, "17": [107, 131], "83697020e": 107, "22464680e": 107, "16j": 107, "real": [108, 109, 111, 156, 157, 158, 159, 160], "probabl": [108, 109, 113, 114, 116, 117, 121, 154, 163], "exceed": [108, 109], "15865525393145707": [108, 109], "158655": [108, 109], "0000010494310452": [108, 109], "text": [110, 111, 112, 114, 117, 118, 123, 124, 130, 132, 133, 150, 152], "avg": [110, 111, 130], "seed": 111, "which": [111, 112, 123, 128, 131, 134, 145, 152, 156, 160, 162], "ad": [111, 163, 164], "desir": [111, 161], "explicitli": 111, "assum": [111, 121, 129, 153], "known": 111, "pass": [111, 113, 116, 121, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 154, 157, 158], "linear": 111, "random": [111, 113, 116, 121, 123, 128, 146, 152, 159, 161], "numpi": [111, 153, 156, 157, 158, 159, 160, 161, 162, 163], "default_rng": 111, "noisi": 111, "w": [111, 156, 157, 158, 159, 160, 161, 162], "sigma": [111, 112], "For": [111, 136, 137, 138, 139, 141, 142, 144, 148, 157], "sim": 111, "cn": 111, "sinusoid": [111, 158], "set": [111, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 158], "sin": 111, "pi": [111, 124, 125, 128, 131, 136, 137, 138, 139, 141, 142, 144, 146, 148, 156, 157, 158, 159, 160], "titl": [111, 112, 114, 117, 123, 128, 135, 146, 152, 156, 159, 160, 161, 162], "tight_layout": [111, 112, 114, 117, 123, 135, 146, 152, 159, 160, 161, 162], "qpsk": [111, 123, 135, 146, 152, 159], "ha": [111, 125, 131, 160, 162], "randint": [111, 113, 116, 121, 123, 128, 146, 152, 159, 161], "1_000": [111, 123, 128, 152, 159], "zorder": [111, 123, 152], "infti": [111, 112], "nand": 111, "capac": [112, 114, 117], "2d": 112, "x_i": [112, 113, 114, 116, 117, 121, 128], "y_i": [112, 113, 114, 116, 117, 121], "log_2": 112, "monoton": 112, "decreas": 112, "limit": [112, 134, 145, 161], "linspac": [112, 114, 117, 135, 158, 159, 160, 161], "20": [112, 113, 116, 121, 123, 127, 128, 159, 161, 162], "xlabel": [112, 114, 117, 156, 159, 160, 162], "ylabel": [112, 114, 117, 156, 159, 160, 162], "grid": [112, 114, 117, 147, 156, 159, 160, 162], "true": [112, 113, 114, 116, 117, 121, 134, 142, 145, 147, 159, 161], "At": 112, "occur": 112, "view": 112, "59": 112, "shannon": 112, "log10": [112, 161, 162], "sequenc": [113, 116, 121, 154], "through": [113, 116, 121, 154, 157, 158, 160], "25": [113, 116, 121, 156, 159, 160, 162], "roughli": [113, 116, 156], "eras": 113, "11": [115, 126], "12": [115, 126, 157, 161], "13": [115, 126], "14": [115, 126], "15": [115, 126], "transit": [116, 117, 121, 154], "flip": 116, "h_b": 117, "cf": 118, "v_": [118, 133, 150], "en": [118, 130], "wikipedia": [118, 130], "org": [118, 130], "wiki": [118, 130], "encod": [119, 120], "uncod": 120, "dmc": [121, 154, 163], "memoryless": [121, 154], "matrix": [121, 154], "pr": 121, "y_j": 121, "alphabet": 121, "size": [121, 156, 159, 160, 161, 162], "ldot": 121, "frequency_offset": [123, 154], "freq_rat": 123, "cycl": 123, "000": 123, "1e": [123, 161], "5e": 123, "deg": [123, 128], "path": 124, "loss": 124, "log_": [124, 130], "distanc": 124, "meter": [124, 131], "transmitt": 124, "km": 124, "link": [124, 163], "ghz": [124, 131], "1e3": 124, "1e9": [124, 131], "92": 124, "44778322188337": 124, "so": [124, 125, 163], "doubl": [124, 131], "result": [124, 131], "increas": [124, 131, 158], "2e3": 124, "98": 124, "468383135163": 124, "also": [124, 125, 163], "2e9": 124, "puls": [125, 146, 149, 151, 163, 164], "shape": [125, 146, 149, 151, 163, 164], "product": [125, 162], "sym": [125, 162], "side": [125, 136, 137, 138, 140, 141, 142, 143, 157, 158, 159, 162], "thought": [125, 165], "smaller": [125, 162], "wider": 125, "even": [125, 149, 151], "amplitud": [125, 128, 154, 156, 160], "nomin": 125, "passband": [125, 159], "exp": [125, 128, 136, 137, 138, 139, 141, 142, 144, 146, 148, 156, 158, 159, 160], "sqrt": [125, 150, 159, 160, 162], "ln": 125, "www": 125, "mathwork": 125, "help": 125, "ref": 125, "gaussdesign": 125, "html": 125, "onlinelibrari": 125, "wilei": 125, "doi": 125, "pdf": 125, "1002": 125, "9780470041956": 125, "app2": 125, "h_0p1": [125, 149, 151], "h_0p2": 125, "h_0p3": 125, "displai": [127, 136, 137, 138, 140, 141, 142, 143], "consid": 127, "convert": 127, "line": 127, "string": [127, 140, 143], "print": [127, 156, 157, 158, 160], "quick": 127, "brown": 127, "fox": 127, "jump": 127, "over": 127, "lazi": 127, "dog": 127, "00000000": 127, "54": 127, "68": 127, "65": 127, "71": 127, "75": [127, 160, 161], "69": 127, "63": 127, "6b": 127, "62": 127, "72": 127, "6f": 127, "77": 127, "6e": 127, "00000010": 127, "66": 127, "78": 127, "6a": 127, "6d": 127, "70": [127, 162], "73": 127, "76": 127, "74": 127, "00000020": 127, "6c": 127, "61": 127, "7a": 127, "79": 127, "64": [127, 158], "67": 127, "he": 127, "02": [127, 158, 160], "03": [127, 158], "04": [127, 158], "00000004": 127, "05": [127, 156, 158, 160], "06": 127, "07": 127, "08": 127, "00000008": 127, "09": 127, "0a": 127, "iq_imbal": [128, 154, 163], "iq": [128, 154], "imbal": [128, 154], "posit": 128, "compon": 128, "larger": [128, 134, 145], "quadratur": 128, "lead": 128, "g_i": 128, "180": 128, "g_q": 128, "x_q": 128, "horizont": 128, "stretch": 128, "while": [128, 162], "neg": 128, "vertic": 128, "y1": 128, "y2": 128, "subplot": [128, 160, 161], "y_1": 128, "legend": [128, 156, 159, 160, 162], "y_2": 128, "northwest": 128, "northeast": 128, "dtype": [129, 146, 153, 160], "dtypelik": [129, 153], "most": [129, 153], "signific": [129, 153], "enough": 129, "fill": 129, "last": 129, "remain": 129, "type": [129, 137, 138, 140, 141, 142, 153, 164], "smallest": 129, "unsign": 129, "integ": 129, "uint8": [129, 153], "diamet": 131, "effici": 131, "55": 131, "le": [131, 149, 151], "eta": 131, "dbi": 131, "half": 131, "arcsin": 131, "83": 131, "dish": 131, "21": 131, "810210290266568": 131, "437435887991374": 131, "23": 131, "sinc": 131, "antenna": 131, "we": [131, 163], "observ": 131, "830810203546193": 131, "529544741425365": 131, "max": [132, 133], "voltag": [133, 150], "scatter": 134, "both": [134, 145, 156, 160], "keyword": [134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 157, 158], "argument": [134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 157, 158], "pyplot": [134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 156, 157, 158, 159, 160, 161, 162], "hist2d": 134, "x_unit": [135, 161], "y_unit": [135, 161], "form": 135, "either": 135, "semilogi": 135, "bpsk": [135, 146], "psk8": 135, "savefig": 135, "sdr_plot_error_rate_1": 135, "png": 135, "curv": 135, "n_time": [136, 158], "n_freq": 136, "x_axi": [136, 137, 138, 140, 141, 142, 143, 157, 158, 159, 160], "two": [136, 137, 138, 140, 141, 142, 143, 156, 157, 158], "log": [136, 137, 138, 140, 141, 142, 157, 158, 160], "n_t": 136, "n_f": 136, "scale": [136, 137, 138, 140, 141, 142, 143, 157, 158], "option": [136, 137, 138, 140, 141, 142, 143], "spectrum": [136, 137, 138, 140, 141, 142, 143], "h_srrc": [136, 137, 138, 139, 141, 142, 144, 146, 148, 161], "1j": [136, 137, 138, 139, 141, 142, 144, 146, 148, 156, 158, 159, 160], "conj": [136, 137, 138, 139, 141, 142, 144, 148, 158, 160], "30": [136, 139, 144, 158], "ylim": [138, 157, 160, 161, 162], "48": 138, "52": 138, "window": [140, 143], "hann": [140, 143], "overlap": [140, 143, 159], "fft": [140, 143], "median": 140, "segment": [140, 143], "256": [140, 143, 159], "point": [140, 143], "unwrap": [142, 160], "pcolormesh": 143, "By": 143, "color": [143, 156, 159, 160, 162], "bar": 143, "rang": [143, 160, 161], "10th": 143, "100th": 143, "percentil": 143, "dynam": 143, "activ": 143, "chang": [143, 165], "vmin": 143, "vmax": 143, "represent": 145, "50": [145, 156, 159], "1000": [146, 161], "10e3": 146, "complex64": [146, 160], "style": 147, "revert": 147, "rcdefault": 147, "_rc_param": 147, "rc_param": 147, "ax": [147, 156, 160], "autolayout": 147, "max_open_warn": 147, "titleweight": 147, "bold": 147, "linestyl": [147, 156, 160, 161, 162], "excess": [149, 151, 162], "h_0p5": [149, 151], "h_0p9": [149, 151], "sample_rate_offset": [152, 154], "ppm": [152, 154], "part": [152, 160], "million": 152, "import": [156, 157, 158, 159, 160, 161, 162, 163], "config": [156, 157, 158, 159, 160, 161, 162], "inlinebackend": [156, 157, 158, 159, 160, 161, 162], "print_figure_kwarg": [156, 157, 158, 159, 160, 161, 162], "facecolor": [156, 157, 158, 159, 160, 161, 162], "widget": [156, 157, 158, 159, 160, 161, 162], "prop_cycl": [156, 160], "by_kei": [156, 160], "continu": 156, "tx": 156, "decai": [156, 158], "marker": [156, 157, 158], "o": 156, "fillstyl": 156, "imag": 156, "origin": 156, "show": [156, 157, 158, 159, 160, 161, 162], "now": 156, "accomplish": 156, "librari": [156, 161, 163, 165], "def": [156, 159, 161], "resample_sign": 156, "new_sample_r": 156, "ty": 156, "gca": 156, "set_prop_cycl": 156, "notic": [156, 162], "200": 156, "four": 156, "400": 156, "appear": 156, "fourth": 156, "often": 156, "do": 156, "align": 156, "315": 156, "32": 156, "below": [157, 158], "00095881": 157, "00175008": 157, "00423912": 157, "00588237": 157, "00615087": 157, "00474585": 157, "00170436": 157, "0025481": 157, "00721629": 157, "01123216": 157, "01342329": 157, "01273174": 157, "00845039": 157, "00043678": 157, "01073645": 157, "02372925": 157, "03650167": 157, "04650553": 157, "05098414": 157, "04734541": 157, "03355823": 157, "00851466": 157, "0276993": 157, "07367186": 157, "12670168": 157, "18306847": 157, "2381038": 157, "28726435": 157, "32607284": 157, "3509308": 157, "35948882": 157, "conveni": [157, 158], "evalu": [157, 158], "envelop": [157, 158], "easili": [157, 158], "here": [157, 158], "altern": 158, "conjug": 158, "0x000002214b040a88": 158, "47820725": 158, "78207252e": 158, "58172329e": 158, "10862468e": 158, "86109590e": 158, "21565653e": 158, "01140214e": 158, "57286400e": 158, "67772160e": 158, "47338728e": 158, "10422993e": 158, "89312837e": 158, "12240078e": 158, "03953322e": 158, "69685122e": 158, "63882791e": 158, "81474977e": 158, "47193366e": 158, "85259041e": 158, "15647504e": 158, "23851924e": 158, "42176895e": 158, "84684395e": 158, "42721858e": 158, "72236648e": 158, "14721649e": 158, "10813095e": 158, "94024315e": 158, "78877688e": 158, "74077567e": 158, "87820725": 158, "53637958": 158, "94724205": 158, "13335164": 158, "1455082": 158, "04436799": 158, "88708159": 158, "71930943": 158, "5719707": 158, "46154771": 158, "39261642": 158, "36139242": 158, "35935288": 158, "3763214": 158, "40270968": 158, "43085717": 158, "45557651": 158, "47410241": 158, "48566716": 158, "49090568": 158, "49124786": 158, "48840102": 158, "4839738": 158, "47925143": 158, "47510421": 158, "47199608": 158, "47005584": 158, "46917696": 158, "46911955": 158, "denomin": 158, "73910363": 158, "30614675j": 158, "plane": 158, "endpoint": 158, "concaten": 158, "0x000002214dc574c8": 158, "lyon": 158, "understand": 158, "3rd": 158, "edit": 158, "insid": 158, "circl": 158, "outsid": 158, "unstabl": 158, "n_symbol": [159, 161], "pulse_shap": 159, "els": 159, "pb": 159, "x_bb_rect": 159, "papr_bb_rect": 159, "x_pb_rect": 159, "papr_pb_rect": 159, "x_bb_0p1": 159, "papr_bb_0p1": 159, "x_pb_0p1": 159, "papr_pb_0p1": 159, "x_bb_0p5": 159, "papr_bb_0p5": 159, "x_pb_0p5": 159, "papr_pb_0p5": 159, "x_bb_0p9": 159, "papr_bb_0p9": 159, "x_pb_0p9": 159, "papr_pb_0p9": 159, "rectangular": [159, 162], "2f": 159, "rf": [159, 160], "xlim": [159, 160, 162], "sweep_alpha": 159, "bb_papr": 159, "pb_papr": 159, "append": 159, "bpsk_bb_papr": 159, "bpsk_pb_papr": 159, "qpsk_bb_papr": 159, "qpsk_pb_papr": 159, "psk8_bb_papr": 159, "psk8_pb_papr": 159, "psk16_bb_papr": 159, "psk16_pb_papr": 159, "configur": 160, "0x7f058065cf10": 160, "theta_0": 160, "phase_error": 160, "freq_estim": 160, "suptitl": [160, 161], "ones": 160, "angl": 160, "system": [160, 163], "avail": [160, 161], "500": 160, "001": 160, "005": 160, "b_nt": 160, "0005": 160, "0125": 160, "015": 160, "0175": 160, "t_lock": 160, "analyze_psk": 161, "100_000": 161, "achiev": [161, 162], "n0": 161, "tx_mf": 161, "18": 161, "log2": 161, "1e6": 161, "s_hat": 161, "bpsk_ber": 161, "bpsk_ser": 161, "qpsk_ber": 161, "qpsk_ser": 161, "psk8_ber": 161, "psk8_ser": 161, "psk16_ber": 161, "psk16_ser": 161, "1e0": 161, "rect": 162, "rc_0p1": 162, "rc_0p5": 162, "rc_0p9": 162, "nyquist": 162, "pm": 162, "roll": 162, "60": 162, "nearli": 162, "compar": 162, "null": 162, "small": 162, "lobe": 162, "much": 162, "higher": 162, "h_rect": 162, "freqz": 162, "worn": 162, "whole": 162, "h_rc_0p1": 162, "h_rc_0p5": 162, "h_rc_0p9": 162, "rel": 162, "main": 162, "p_rect": 162, "cumsum": 162, "ab": 162, "p_rc_0p1": 162, "p_rc_0p5": 162, "p_rc_0p9": 162, "One": 162, "within": 162, "variou": 162, "srrc_0p1": 162, "srrc_0p5": 162, "srrc_0p9": 162, "therefor": 162, "similar": 162, "significantli": 162, "due": 162, "being": 162, "h_srrc_0p1": 162, "h_srrc_0p5": 162, "h_srrc_0p9": 162, "p_srrc_0p1": 162, "p_srrc_0p5": 162, "p_srrc_0p9": 162, "gauss_0p1": 162, "gauss_0p2": 162, "gauss_0p3": 162, "python": 163, "packag": 163, "softwar": 163, "radio": 163, "goal": 163, "tool": 163, "design": 163, "build": 163, "analyz": 163, "reli": 163, "interoper": 163, "veri": 163, "possibl": 163, "numba": 163, "acceler": 163, "computation": 163, "intens": 163, "addition": 163, "aim": 163, "replic": 163, "relev": 163, "matlab": 163, "dsp": 163, "toolbox": 163, "progress": 163, "someth": 163, "you": 163, "includ": 163, "pleas": 163, "open": 163, "issu": 163, "github": 163, "impair": 163, "manipul": 163, "model": 163, "budget": 163, "util": 163, "releas": 164, "juli": 164, "2023": 164, "helper": 164, "improv": 164, "matt": 164, "hostett": 164, "mhostett": 164, "semant": 165, "major": 165, "minor": 165, "patch": 165, "introduc": 165, "api": 165, "featur": 165, "backward": 165, "compat": 165, "make": 165, "bug": 165, "fix": 165, "There": 165, "guarante": 165, "them": 165, "thei": 165}, "objects": {"": [[1, 0, 0, 1, "sdr", ""]], "sdr": [[8, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [25, 1, 1, "", "DDS", "Implements a direct digital synthesizer (DDS)."], [31, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [38, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [50, 1, 1, "", "FIRInterpolator", "Implements a polyphase finite impulse response (FIR) interpolating filter."], [58, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [65, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [81, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [90, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [98, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [108, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [109, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [110, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [111, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [112, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [113, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [114, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [115, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [116, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [117, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [118, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [119, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [120, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [121, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [122, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [123, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [124, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [125, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [126, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [127, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [128, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [129, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [130, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [131, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [132, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [133, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [149, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [150, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [151, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [152, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [153, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."]], "sdr.ClosedLoopPLL": [[9, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [10, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [11, 2, 1, "", "K0", "The NCO gain $K_0$."], [12, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [13, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [14, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [15, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [16, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [17, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [18, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [19, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [20, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [21, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [22, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [23, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [24, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[15, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [15, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [15, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [15, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [15, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[16, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[18, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[21, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.DDS": [[26, 3, 1, "", "__init__", "Creates a direct digital synthesizer (DDS)."], [27, 2, 1, "", "nco", "The numerically-controlled oscillator (NCO) used by the DDS."], [28, 3, 1, "", "process", "Steps the DDS with the variable phase increment signal $x[n]$."], [29, 3, 1, "", "reset", "Resets the DDS."], [30, 3, 1, "", "step", "Steps the DDS forward by $N$ samples."]], "sdr.DDS.__init__": [[26, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [26, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [26, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.DDS.process": [[28, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the DDS."]], "sdr.DDS.step": [[30, 4, 2, "p-N", "N", "The number of samples $N$ to step the DDS forward."]], "sdr.ErrorRate": [[32, 3, 1, "", "__init__", "Creates a new error rate tabulation object."], [33, 3, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [34, 3, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [35, 3, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [36, 3, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [37, 3, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[33, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [33, 4, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [33, 4, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[34, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[35, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[37, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[39, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [40, 2, 1, "", "delay", "The delay of the FIR filter in samples."], [41, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the FIR filter."], [42, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the FIR filter."], [43, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the FIR filter on a logarithmic frequency axis."], [44, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [45, 2, 1, "", "order", "The order of the FIR filter, $N$."], [46, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [47, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [48, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [49, 2, 1, "", "taps", "The feedforward taps $h_i$."]], "sdr.FIR.__init__": [[39, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$."], [39, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to filter()."]], "sdr.FIR.filter": [[41, 4, 2, "p-mode", "mode", "The non-streaming convolution mode. See scipy.signal.convolve() for details. In streaming mode, $N$ inputs always produce $N$ outputs."], [41, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.FIR.frequency_response": [[42, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [42, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.frequency_response_log": [[43, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [43, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [43, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[44, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.step_response": [[47, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIRInterpolator": [[51, 3, 1, "", "__init__", "Creates a polyphase FIR interpolating filter with feedforward coefficients $h_i$."], [52, 3, 1, "", "filter", "Filters and interpolates the input signal $x[n]$ with the FIR filter."], [53, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [54, 2, 1, "", "rate", "The interpolation rate $r$."], [55, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [56, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [57, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.FIRInterpolator.__init__": [[51, 4, 2, "p-rate", "rate", "The interpolation rate $r$."], [51, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to filter()."], [51, 4, 2, "p-taps", "taps", "The feedforward coefficients $h_i$."]], "sdr.FIRInterpolator.filter": [[52, 4, 2, "p-mode", "mode", "The non-streaming convolution mode. See scipy.signal.convolve() for details. In streaming mode, $N$ inputs always produce $N r$ outputs."], [52, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$."]], "sdr.FarrowResampler": [[59, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [60, 2, 1, "", "order", "The order of the filter."], [61, 3, 1, "", "resample", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [62, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [63, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [64, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__init__": [[59, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to resample()."]], "sdr.FarrowResampler.resample": [[61, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [61, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.reset": [[62, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[66, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [67, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [68, 2, 1, "", "a_taps", "The feedback taps $a_j$."], [69, 2, 1, "", "b_taps", "The feedforward taps $b_i$."], [70, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the IIR filter."], [71, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the IIR filter."], [72, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the IIR filter on a logarithmic frequency axis."], [73, 2, 1, "", "gain", "The gain of the IIR filter."], [74, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [75, 2, 1, "", "order", "The order of the IIR filter, $N$."], [76, 2, 1, "", "poles", "The poles of the IIR filter."], [77, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [78, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [79, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [80, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[66, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [66, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [66, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."], [66, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__init__": [[67, 4, 2, "p-a", "a", "The feedback coefficients $a_j$."], [67, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [67, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."]], "sdr.IIR.filter": [[70, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.IIR.frequency_response": [[71, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [71, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[72, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [72, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [72, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[74, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[78, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.LoopFilter": [[82, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [83, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [84, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [85, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [86, 3, 1, "", "filter", "Filters the input signal $x[n]$."], [87, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [88, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [89, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__init__": [[84, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [84, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [84, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [84, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.LoopFilter.filter": [[86, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.NCO": [[91, 2, 1, "", "K0", "The NCO gain $K_0$."], [92, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [93, 2, 1, "", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [94, 2, 1, "", "offset", "The absolute offset $theta$ of the NCO in units."], [95, 3, 1, "", "process", "Steps the NCO with the variable-increment signal $x[n]$."], [96, 3, 1, "", "reset", "Resets the NCO."], [97, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__init__": [[92, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [92, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [92, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in units."]], "sdr.NCO.process": [[95, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the NCO."]], "sdr.NCO.step": [[97, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.PSK": [[99, 3, 1, "", "__init__", "Creates a new PSK object."], [100, 3, 1, "", "bit_error_rate", "Computes the bit error rate (BER) at the provided SNRs."], [101, 3, 1, "", "demodulate", "Demodulates the complex symbols $hat{x}[k]$ to decimal symbols $hat{s}[k]$ using maximum-likelihood estimation."], [102, 3, 1, "", "modulate", "Modulates to decimal symbols $s[k]$ to complex symbols $x[k]$."], [103, 2, 1, "", "offset", "The phase offset $phi$ in degrees."], [104, 2, 1, "", "order", "The modulation order $M = 2^k$."], [105, 3, 1, "", "symbol_error_rate", "Computes the symbol error rate (SER) at the provided SNRs."], [106, 2, 1, "", "symbol_labels", "The symbols values (labels) of consecutive symbols."], [107, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[99, 4, 2, "p-offset", "offset", "The phase offset $phi$ in degrees."], [99, 4, 2, "p-order", "order", "The modulation order $M = 2^k$ with $k ge 1$."], [99, 4, 2, "p-symbol_labels", "symbol_labels", "The symbol labels of consecutive symbols. If \"bin\", the symbols are binary-coded. If \"gray\", the symbols are Gray-coded. If an array-like object, the symbols are labeled by the values in the array. The array must have unique values from $0$ to $M-1$."]], "sdr.PSK.bit_error_rate": [[100, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB. If None, esn0 must be provided."], [100, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB. If None, ebn0 must be provided."]], "sdr.PSK.demodulate": [[101, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to demodulate."]], "sdr.PSK.modulate": [[102, 4, 2, "p-symbols", "symbols", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.PSK.symbol_error_rate": [[105, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB. If None, esn0 must be provided."], [105, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB. If None, ebn0 must be provided."]], "sdr.Q": [[108, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[109, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.average_power": [[110, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[111, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [111, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [111, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [111, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[112, 4, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [112, 4, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.bec": [[113, 4, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [113, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[114, 4, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[115, 4, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[116, 4, 2, "p-p", "p", "The probability $p$ of a bit flip."], [116, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[117, 4, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[118, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.diff_decode": [[119, 4, 2, "p-y", "y", "The input encoded data $y[k]$."], [119, 4, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[120, 4, 2, "p-x", "x", "The input uncoded data $x[k]$."], [120, 4, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[121, 4, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [121, 4, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [121, 4, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [121, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.energy": [[122, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.frequency_offset": [[123, 4, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [123, 4, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [123, 4, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [123, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [123, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[124, 4, 2, "p-d", "d", "The distance $d$ in meters between the transmitter and receiver."], [124, 4, 2, "p-f", "f", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[125, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [125, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [125, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[126, 4, 2, "p-n", "n", "The length of the Gray code."]], "sdr.hexdump": [[127, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [127, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[128, 4, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [128, 4, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [128, 4, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.pack": [[129, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [129, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [129, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[130, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[131, 4, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [131, 4, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [131, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[132, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[133, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.plot": [[134, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [135, 5, 1, "", "error_rate", "Plots the bit error rate (BER) or symbol error rate (SER) as a function of the signal-to-noise ratio (SNR)."], [136, 5, 1, "", "filter", "Plots the frequency response $H(omega)$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [137, 5, 1, "", "frequency_response", "Plots the frequency response $H(omega)$ of the filter."], [138, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [139, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [140, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [141, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [142, 5, 1, "", "phase_response", "Plots the phase response $Theta(omega)$ of the filter."], [143, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [144, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [145, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [146, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [147, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [148, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.constellation": [[134, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [134, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [134, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.error_rate": [[135, 4, 2, "p-error_rate", "error_rate", "The bit error rate if y_unit=\"ber\" or symbol error rate if y_unit=\"ser\"."], [135, 4, 2, "p-snr", "snr", "A form of signal-to-noise ratio in dB. Either $E_b/N_0$ if x_unit=\"ebn0\", $E_s/N_0$ if x_unit=\"esn0\", or $S/N$ if x_unit=\"snr\"."], [135, 4, 2, "p-x_unit", "x_unit", "The unit of the x-axis."], [135, 4, 2, "p-y_unit", "y_unit", "The unit of the y-axis."]], "sdr.plot.filter": [[136, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [136, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [136, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [136, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [136, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [136, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [136, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.frequency_response": [[137, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [137, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [137, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [137, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [137, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [137, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[138, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [138, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [138, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [138, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [138, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [138, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.impulse_response": [[139, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [139, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [139, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.plot.periodogram": [[140, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [140, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [140, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [140, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [140, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [140, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [140, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [140, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_delay": [[141, 4, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [141, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [141, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [141, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [141, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [141, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_response": [[142, 4, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [142, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [142, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [142, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [142, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [142, 4, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [142, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.spectrogram": [[143, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [143, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [143, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [143, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [143, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [143, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [143, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[144, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [144, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [144, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.plot.symbol_map": [[145, 4, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [145, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [145, 4, 2, "p-symbol_map", "symbol_map", "The complex symbols $hat{x}[k]$."]], "sdr.plot.time_domain": [[146, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\"."], [146, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[148, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [148, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.raised_cosine": [[149, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [149, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [149, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[150, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[151, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [151, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [151, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[152, 4, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [152, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.unpack": [[153, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [153, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [153, 4, 2, "p-x", "x", "The input array with bpe bits per element."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"data": 0, "manipul": 0, "filter": [1, 5, 157, 158, 160], "link": 2, "budget": 2, "channel": [2, 154], "capac": 2, "path": 2, "loss": 2, "antenna": 2, "measur": 3, "energi": 3, "power": [3, 159], "voltag": 3, "error": [3, 161], "modul": [4, 5], "class": 4, "puls": [4, 159, 162], "shape": [4, 159, 162], "symbol": 4, "map": 4, "encod": 4, "plot": [5, 159], "configur": 5, "time": [5, 159, 160], "domain": [5, 159, 160], "frequenc": [5, 157, 158, 159, 160], "analysi": 5, "probabl": 6, "resampl": [7, 156], "note": 8, "constructor": [8, 25, 31, 38, 50, 58, 65, 81, 90, 98], "method": [8, 25, 31, 38, 50, 58, 65, 81, 90, 98], "properti": [8, 25, 38, 50, 58, 65, 81, 90, 98], "see": [25, 31, 33, 42, 43, 44, 47, 71, 72, 74, 78, 90, 108, 109, 118, 130, 136, 137, 138, 139, 141, 142, 144, 148], "also": [25, 31, 33, 42, 43, 44, 47, 71, 72, 74, 78, 90, 108, 109, 118, 130, 136, 137, 138, 139, 141, 142, 144, 148], "simul": 154, "model": 154, "signal": [154, 156, 159], "impair": 154, "synchron": 155, "farrow": 156, "arbitrari": 156, "construct": 156, "an": [156, 157, 158], "input": 156, "x": 156, "n": [156, 157, 158], "t_": 156, "rate": [156, 161], "r": 156, "y": 156, "frac": 156, "upsampl": 156, "integ": 156, "downsampl": 156, "irrat": 156, "fir": 157, "creat": [157, 158], "examin": [157, 158, 159], "impuls": [157, 158], "respons": [157, 158, 160], "h": [157, 158], "step": [157, 158, 160], "": [157, 158], "omega": [157, 158], "group": [157, 158], "delai": [157, 158], "tau_g": [157, 158], "fulli": [157, 158], "analyz": [157, 158, 160], "iir": 158, "zero": 158, "pole": 158, "digit": 158, "stabil": 158, "peak": 159, "averag": 159, "bpsk": [159, 161], "variou": 159, "across": [159, 160], "excess": 159, "bandwidth": 159, "phase": [160, 161], "lock": 160, "loop": 160, "design": 160, "proport": 160, "plu": 160, "integr": 160, "ppi": 160, "implement": 160, "pll": 160, "close": 160, "perform": 160, "compar": 160, "zeta": 160, "b_n": 160, "t": 160, "shift": 161, "kei": 161, "constel": 161, "qpsk": 161, "8": 161, "psk": 161, "16": 161, "curv": 161, "rais": 162, "cosin": 162, "squar": 162, "root": 162, "gaussian": 162, "sdr": 163, "featur": 163, "v0": 164, "0": 164, "2": 164, "chang": 164, "contributor": 164, "1": 164, "version": 165, "alpha": 165, "releas": 165, "beta": 165}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Data manipulation": [[0, "data-manipulation"]], "Filtering": [[1, "filtering"]], "Link budgets": [[2, "link-budgets"]], "Channel capacity": [[2, "channel-capacity"]], "Path losses": [[2, "path-losses"]], "Antennas": [[2, "antennas"]], "Measurement": [[3, "measurement"]], "Energy": [[3, "energy"]], "Power": [[3, "power"]], "Voltage": [[3, "voltage"]], "Errors": [[3, "errors"]], "Modulation": [[4, "modulation"], [5, "modulation"]], "Classes": [[4, "classes"]], "Pulse shaping": [[4, "pulse-shaping"]], "Symbol mapping": [[4, "symbol-mapping"]], "Symbol encoding": [[4, "symbol-encoding"]], "Plotting": [[5, "plotting"]], "Configuration": [[5, "configuration"]], "Time-domain": [[5, "time-domain"]], "Frequency-domain": [[5, "frequency-domain"]], "Filter analysis": [[5, "filter-analysis"]], "Probability": [[6, "probability"]], "Resampling": [[7, "resampling"]], "Note": [[8, null]], "Constructors": [[8, "constructors"], [25, "constructors"], [31, "constructors"], [38, "constructors"], [50, "constructors"], [58, "constructors"], [65, "constructors"], [81, "constructors"], [90, "constructors"], [98, "constructors"]], "Methods": [[8, "methods"], [25, "methods"], [31, "methods"], [38, "methods"], [50, "methods"], [58, "methods"], [65, "methods"], [81, "methods"], [90, "methods"], [98, "methods"]], "Properties": [[8, "properties"], [25, "properties"], [38, "properties"], [50, "properties"], [58, "properties"], [65, "properties"], [81, "properties"], [90, "properties"], [98, "properties"]], "See also": [[25, null], [31, null], [33, null], [42, null], [43, null], [44, null], [47, null], [71, null], [72, null], [74, null], [78, null], [90, null], [108, null], [109, null], [118, null], [130, null], [136, null], [137, null], [138, null], [139, null], [141, null], [142, null], [144, null], [148, null]], "Simulation": [[154, "simulation"]], "Channel models": [[154, "channel-models"]], "Signal impairments": [[154, "signal-impairments"]], "Synchronization": [[155, "synchronization"]], "Farrow arbitrary resampler": [[156, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[156, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[156, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[156, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[156, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[156, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[156, "downsample-by-an-irrational-rate"]], "FIR filters": [[157, "fir-filters"]], "Create an FIR filter": [[157, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[157, "examine-the-impulse-response-h-n"], [158, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[157, "examine-the-step-response-s-n"], [158, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[157, "examine-the-frequency-response-h-omega"], [158, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[157, "examine-the-group-delay-tau-g-omega"], [158, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[157, "fully-analyze-a-fir-filter"]], "IIR filters": [[158, "iir-filters"]], "Create an IIR filter": [[158, "create-an-iir-filter"]], "Examine the zeros and poles": [[158, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[158, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[158, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[159, "peak-to-average-power"]], "BPSK signal with various pulse shapes": [[159, "bpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[159, "examine-time-domain"]], "Examine frequency domain": [[159, "examine-frequency-domain"]], "Plot across excess bandwidth": [[159, "plot-across-excess-bandwidth"]], "Phase-locked loops": [[160, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[160, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[160, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[160, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[160, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[160, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[160, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[160, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[161, "phase-shift-keying"]], "Constellations": [[161, "constellations"]], "BPSK": [[161, "bpsk"]], "QPSK": [[161, "qpsk"]], "8-PSK": [[161, "id1"]], "16-PSK": [[161, "id2"]], "Error rate curves": [[161, "error-rate-curves"]], "Pulse shapes": [[162, "pulse-shapes"]], "Raised cosine": [[162, "raised-cosine"]], "Square-root raised cosine": [[162, "square-root-raised-cosine"]], "Gaussian": [[162, "gaussian"]], "sdr": [[163, "sdr"]], "Features": [[163, "features"]], "v0.0": [[164, "v0-0"]], "v0.0.2": [[164, "v0-0-2"]], "Changes": [[164, "changes"], [164, "id1"]], "Contributors": [[164, "contributors"], [164, "id2"]], "v0.0.1": [[164, "v0-0-1"]], "Versioning": [[165, "versioning"]], "Alpha releases": [[165, "alpha-releases"]], "Beta releases": [[165, "beta-releases"]]}, "indexentries": {"module": [[1, "module-sdr"]], "sdr": [[1, "module-sdr"]]}, "docurls": ["api/data-manipulation/", "api/filtering/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/resampling/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.DDS/", "api/sdr.DDS.__init__/", "api/sdr.DDS.nco/", "api/sdr.DDS.process/", "api/sdr.DDS.reset/", "api/sdr.DDS.step/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__init__/", "api/sdr.FIR.delay/", "api/sdr.FIR.filter/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.frequency_response_log/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.reset/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FIRInterpolator/", "api/sdr.FIRInterpolator.__init__/", "api/sdr.FIRInterpolator.filter/", "api/sdr.FIRInterpolator.polyphase_taps/", "api/sdr.FIRInterpolator.rate/", "api/sdr.FIRInterpolator.reset/", "api/sdr.FIRInterpolator.streaming/", "api/sdr.FIRInterpolator.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.resample/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__init__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.filter/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.filter/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.process/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.bit_error_rate/", "api/sdr.PSK.demodulate/", "api/sdr.PSK.modulate/", "api/sdr.PSK.offset/", "api/sdr.PSK.order/", "api/sdr.PSK.symbol_error_rate/", "api/sdr.PSK.symbol_labels/", "api/sdr.PSK.symbol_map/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.energy/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.plot.constellation/", "api/sdr.plot.error_rate/", "api/sdr.plot.filter/", "api/sdr.plot.frequency_response/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.raised_cosine/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.unpack/", "api/simulation/", "api/synchronization/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})