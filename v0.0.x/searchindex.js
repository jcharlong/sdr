Search.setIndex({"titles": ["sdr", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.DDS", "sdr.DDS.__init__", "sdr.DDS.nco", "sdr.DDS.process", "sdr.DDS.reset", "sdr.DDS.step", "sdr.FIR", "sdr.FIR.__init__", "sdr.FIR.delay", "sdr.FIR.filter", "sdr.FIR.frequency_response", "sdr.FIR.frequency_response_log", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.reset", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.resample", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__init__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.filter", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.filter", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.process", "sdr.NCO.reset", "sdr.NCO.step", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.demodulate", "sdr.PSK.modulate", "sdr.PSK.offset", "sdr.PSK.order", "sdr.PSK.symbol_map", "sdr.Q", "sdr.Qinv", "sdr.average_power", "sdr.awgn", "sdr.bec", "sdr.bsc", "sdr.crest_factor", "sdr.dmc", "sdr.energy", "sdr.fspl", "sdr.gaussian", "sdr.hexdump", "sdr.pack", "sdr.papr", "sdr.peak_power", "sdr.peak_voltage", "sdr.plot.constellation", "sdr.plot.filter", "sdr.plot.frequency_response", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.periodogram", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.raised_cosine", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.unpack", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"class": [0, 1, 18, 24, 36, 43, 59, 68, 76, 115, 116, 119], "fir": [0, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 100, 101, 102, 103, 106, 109, 121, 122], "implement": [0, 18, 24, 36, 43, 59, 65, 68, 76, 114], "finit": [0, 24, 122], "impuls": [0, 24, 30, 43, 52, 93, 100, 103, 107, 117, 120, 122], "respons": [0, 24, 28, 29, 30, 33, 43, 49, 50, 52, 56, 93, 100, 101, 102, 103, 106, 120, 122], "iir": [0, 1, 10, 29, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 65, 100, 101, 102, 103, 106, 109, 115, 118, 121, 122], "an": [0, 24, 30, 43, 44, 45, 52, 95, 103, 113, 121], "infinit": [0, 43, 122], "gaussian": [0, 86, 93, 121, 122], "time_bandwidth": [0, 93], "float": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 36, 39, 43, 44, 49, 50, 51, 59, 60, 61, 62, 63, 66, 68, 69, 70, 71, 72, 76, 77, 80, 85, 86, 87, 88, 89, 91, 93, 96, 97, 98, 100, 101, 102, 104, 105, 107, 110, 111, 112], "span": [0, 93, 110, 112, 117, 120], "int": [0, 18, 23, 24, 26, 28, 29, 30, 31, 33, 36, 38, 43, 49, 50, 52, 53, 56, 68, 75, 76, 77, 81, 86, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113], "sp": [0, 93, 110, 112, 117, 120], "ndarrai": [0, 18, 21, 23, 24, 27, 28, 29, 30, 33, 35, 36, 39, 42, 43, 46, 47, 48, 49, 50, 52, 54, 56, 58, 59, 64, 68, 73, 75, 76, 78, 79, 82, 83, 84, 86, 87, 88, 90, 93, 95, 110, 112, 113], "return": [0, 1, 9, 11, 14, 15, 21, 23, 24, 27, 28, 29, 30, 33, 39, 43, 48, 49, 50, 52, 56, 64, 73, 75, 78, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 110, 111, 112, 113, 115, 116], "raised_cosin": [0, 110, 120, 121, 122], "alpha": [0, 93, 108, 110, 112, 117, 120], "rais": [0, 107, 110, 112, 115], "cosin": [0, 107, 110, 112, 115], "rc": [0, 110], "root_raised_cosin": [0, 100, 101, 102, 103, 106, 107, 109, 112, 115, 117, 120, 121, 122], "squar": [0, 92, 107, 111, 112, 115], "root": [0, 107, 111, 112, 115], "srrc": [0, 107, 112, 117], "farrowresampl": [0, 36, 37, 38, 39, 40, 41, 42, 114, 121, 122], "cubic": [0, 36], "farrow": [0, 36, 37, 38, 39, 40, 41, 42, 122], "arbitrari": [0, 36, 37, 38, 39, 40, 41, 42, 121, 122], "psk": [0, 76, 77, 78, 79, 80, 81, 82], "shift": [0, 76, 78, 79, 80, 81, 82, 115, 116], "kei": [0, 76, 78, 79, 80, 81, 82], "demodul": [0, 76, 78], "closedlooppl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 118, 121, 122], "A": [0, 1, 9, 11, 12, 13, 14, 15, 17, 24, 59, 94, 110, 112, 118], "defin": [0, 1, 24, 43, 86, 90, 93, 116, 121], "perform": [0, 1, 115, 116, 121], "close": [0, 1, 8, 10, 122], "pll": [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 122], "dd": [0, 18, 19, 20, 21, 22, 23, 68, 118, 121, 122], "direct": [0, 18, 19, 118, 122], "digit": [0, 1, 9, 11, 12, 13, 14, 15, 18, 19, 59, 110, 112, 118, 121, 122], "synthes": [0, 18, 19, 118, 122], "loopfilt": [0, 59, 60, 61, 62, 63, 64, 65, 66, 67, 118, 121, 122], "2nd": [0, 1, 59, 62, 118, 122], "order": [0, 1, 24, 31, 36, 38, 43, 53, 59, 62, 76, 77, 81, 93, 110, 112, 118, 119, 122], "proport": [0, 1, 5, 59, 60, 62, 92, 122], "plu": [0, 1, 59, 62, 122], "integr": [0, 1, 6, 59, 61, 62, 116, 122], "ppi": [0, 59, 62], "nco": [0, 1, 4, 8, 18, 19, 20, 62, 68, 69, 70, 71, 72, 73, 74, 75, 118, 121, 122], "numer": [0, 1, 18, 20, 68, 70, 116, 118, 122], "control": [0, 1, 18, 20, 68, 70, 118, 122], "oscil": [0, 1, 18, 20, 68, 70, 118, 122], "awgn": [0, 86, 119, 121], "x": [0, 1, 18, 21, 24, 27, 36, 39, 43, 48, 59, 64, 68, 73, 76, 78, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 111, 113, 117, 118, 119, 123], "arraylik": [0, 18, 21, 24, 25, 27, 36, 39, 40, 43, 44, 45, 48, 59, 64, 68, 73, 76, 78, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 111, 113], "snr": [0, 86], "none": [0, 24, 30, 33, 36, 40, 59, 67, 86, 90, 95, 100, 103, 104, 105, 106, 113, 114], "add": [0, 86, 119, 123], "addit": [0, 86, 99, 101, 102, 103, 104, 105, 106, 107, 109], "white": [0, 86], "nois": [0, 1, 2, 3, 8, 14, 59, 62, 66, 86, 105, 118], "signal": [0, 1, 9, 11, 14, 15, 18, 21, 24, 27, 36, 39, 43, 48, 59, 64, 68, 73, 75, 85, 86, 89, 91, 92, 93, 96, 97, 98, 104, 105, 107, 111, 115, 116, 117, 118, 120], "n": [0, 1, 18, 21, 23, 24, 27, 28, 29, 30, 31, 33, 36, 39, 43, 48, 49, 50, 52, 53, 56, 59, 64, 68, 73, 75, 83, 84, 85, 86, 89, 90, 91, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 111, 118, 120], "average_pow": [0, 85, 96, 121], "averag": [0, 85, 86, 96, 104], "power": [0, 85, 86, 96, 97, 104, 120], "crest_factor": [0, 89, 96, 121, 122], "crest": [0, 89], "factor": [0, 1, 8, 17, 59, 62, 63, 89, 118], "energi": [0, 91, 110, 112, 121], "papr": [0, 96, 117, 121, 122], "peak": [0, 89, 96, 97, 98], "ratio": [0, 14, 86, 96], "peak_pow": [0, 96, 97, 121], "peak_voltag": [0, 89, 98, 121], "voltag": [0, 98, 111], "rms_voltag": [0, 89, 111, 121], "mean": [0, 104, 111, 120], "rm": [0, 89, 111], "hexdump": [0, 94, 121, 122], "byte": [0, 94], "width": [0, 94], "16": [0, 94, 122], "str": [0, 94, 104, 105], "specifi": [0, 86, 90, 94, 115, 116], "pack": [0, 94, 95, 121, 122], "bpe": [0, 95, 113], "binari": [0, 87, 88, 90, 95, 113], "arrai": [0, 87, 88, 90, 95, 107, 113, 116, 117], "multipl": [0, 95, 113], "bit": [0, 87, 88, 94, 95, 113, 122], "per": [0, 21, 73, 93, 94, 95, 110, 112, 113, 117, 120], "element": [0, 94, 95, 113], "unpack": [0, 94, 113, 121, 122], "bec": [0, 87, 90], "p": [0, 83, 84, 87, 88, 90], "pass": [0, 86, 87, 88, 90, 99, 101, 102, 103, 104, 105, 106, 107, 109, 115, 116], "input": [0, 1, 9, 11, 14, 15, 18, 21, 24, 25, 27, 30, 33, 36, 37, 39, 40, 43, 44, 45, 48, 52, 56, 59, 64, 68, 73, 83, 86, 87, 88, 90, 95, 103, 106, 113, 115, 116, 118], "sequenc": [0, 87, 88, 90], "through": [0, 87, 88, 90, 115, 116, 118], "erasur": [0, 87, 90], "bsc": [0, 88, 90], "symmetr": [0, 88, 90], "transit": [0, 88, 90], "dmc": [0, 90], "discret": [0, 1, 9, 11, 12, 13, 14, 15, 59, 90, 110, 112, 114, 118], "memoryless": [0, 90], "matrix": [0, 90], "fspl": [0, 92], "d": [0, 92, 121], "f": [0, 9, 11, 24, 28, 29, 43, 49, 50, 92, 93, 114, 115, 116, 117, 118, 119, 120], "calcul": [0, 92], "free": [0, 92], "space": [0, 29, 50, 92], "path": [0, 92], "loss": [0, 92], "db": [0, 1, 12, 14, 86, 92, 93, 96, 117, 119, 120], "q": [0, 83, 84, 121], "comput": [0, 83, 84, 86, 92, 115, 116, 118, 120], "complementari": [0, 83, 84], "cumul": [0, 83, 84], "distribut": [0, 83, 84], "function": [0, 1, 10, 24, 43, 44, 59, 83, 84, 93, 104, 105, 115, 116, 118, 120, 121, 122], "standard": [0, 83, 84], "normal": [0, 1, 3, 8, 59, 62, 66, 83, 84, 93, 105, 118, 120], "mathcal": [0, 83, 84, 86, 90], "0": [0, 8, 18, 19, 24, 28, 29, 43, 44, 49, 50, 62, 68, 70, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123], "1": [0, 1, 8, 11, 15, 17, 18, 19, 28, 29, 43, 44, 49, 50, 59, 62, 63, 68, 70, 76, 78, 79, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123], "qinv": [0, 83, 84, 121], "invers": [0, 84], "use_styl": [0, 108], "appli": [0, 108], "": [0, 1, 9, 11, 12, 13, 15, 16, 24, 28, 29, 33, 43, 49, 50, 56, 76, 78, 79, 100, 101, 102, 104, 105, 106, 107, 108, 114, 119, 121], "default": [0, 30, 33, 105, 108], "matplotlib": [0, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 114, 115, 116, 117, 118, 119, 120, 121], "rcparam": [0, 108, 114, 118], "time_domain": [0, 86, 107, 117, 120, 121, 122], "sample_r": [0, 1, 8, 16, 28, 29, 49, 50, 100, 101, 102, 104, 105, 107, 114, 118, 120], "periodogram": [0, 104, 117, 121, 122], "estim": [0, 76, 78, 104, 105, 118], "spectral": [0, 104, 117, 120], "densiti": [0, 14, 104, 117, 120], "p_": [0, 85, 86, 90, 96, 97, 104], "xx": [0, 104], "us": [0, 18, 20, 25, 36, 37, 44, 45, 59, 65, 76, 78, 94, 95, 100, 103, 104, 105, 106, 113, 115, 116, 120, 121, 123], "welch": [0, 104, 105], "method": [0, 104, 105, 115, 116], "spectrogram": [0, 105, 121, 122], "b": [0, 43, 45, 93, 94, 100, 101, 102, 103, 106, 109, 120], "h": [0, 24, 25, 28, 29, 30, 43, 49, 50, 52, 59, 93, 100, 101, 103, 117, 118, 120], "e": [0, 1, 18, 85, 87, 91, 100, 101, 115, 116, 118, 119], "j": [0, 1, 18, 43, 86, 90, 100, 101, 115, 116, 118], "omega": [0, 19, 68, 70, 71, 100, 101, 102, 118], "step": [0, 18, 21, 23, 24, 33, 43, 56, 68, 73, 75, 100, 106], "zero": [0, 40, 43, 44, 58, 59, 95, 100, 101, 102, 103, 106, 107, 109, 115, 117, 118, 120], "pole": [0, 43, 44, 54, 100, 101, 102, 103, 106, 109, 115], "frequency_respons": [0, 24, 28, 29, 43, 49, 50, 101, 115, 116, 118, 120, 121, 122], "group_delai": [0, 102, 115, 116, 121, 122], "group": [0, 102], "delai": [0, 18, 24, 26, 36, 59, 68, 102, 118], "tau_g": [0, 102], "impulse_respons": [0, 24, 30, 43, 52, 93, 103, 110, 112, 115, 116, 120, 121, 122], "step_respons": [0, 24, 33, 43, 56, 106, 115, 116, 118, 121, 122], "zeros_pol": [0, 109, 116, 121, 122], "kwarg": [0, 99, 101, 102, 103, 104, 105, 106, 107, 109], "sdr": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123], "loop": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 121, 122], "thi": [1, 21, 24, 43, 73, 76, 82, 86, 100, 101, 102, 103, 104, 105, 106, 109, 114, 116, 118, 120], "i": [1, 8, 17, 24, 30, 33, 34, 36, 41, 43, 52, 56, 57, 59, 62, 63, 66, 83, 84, 86, 90, 92, 93, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 116, 118, 119, 120, 121, 123], "meant": 1, "analysi": [1, 8, 118, 122], "onli": [1, 24, 32, 36, 40, 43, 55, 86, 118], "block": [1, 18, 59, 68], "diagram": [1, 18, 59, 68], "bb": [1, 118], "ped": [1, 7, 8, 62, 118], "lf": [1, 118], "lo": [1, 118], "local": [1, 118], "baseband": [1, 117, 118], "phase": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 121], "error": [1, 7, 8, 14, 59, 62, 118], "detector": [1, 7, 8, 62, 118], "filter": [1, 5, 6, 8, 10, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 93, 100, 101, 102, 103, 106, 107, 109, 110, 112, 117, 120, 121, 122], "The": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 123], "transfer": [1, 10, 24, 43, 44, 59, 93, 115, 116, 118], "h_": [1, 118], "z": [1, 18, 24, 43, 59, 68, 115, 116, 118], "k_1": [1, 5, 59, 60, 118], "k_2": [1, 6, 59, 61, 118], "frac": [1, 9, 11, 14, 15, 43, 59, 85, 86, 89, 92, 93, 96, 111, 118], "k_0": [1, 4, 8, 19, 62, 68, 69, 70, 118], "k_p": [1, 7, 8, 62, 118], "2": [1, 9, 11, 14, 28, 29, 49, 50, 77, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120], "refer": [1, 9, 11, 12, 13, 14, 15, 36, 59, 89, 93, 96, 110, 112, 116, 120], "michael": [1, 9, 11, 12, 13, 14, 15, 59, 110, 112], "rice": [1, 9, 11, 12, 13, 14, 15, 59, 110, 112], "commun": [1, 9, 11, 12, 13, 14, 15, 59, 110, 112, 118, 121], "time": [1, 8, 9, 11, 12, 13, 14, 15, 24, 43, 59, 62, 85, 86, 89, 90, 91, 93, 96, 97, 98, 100, 104, 105, 107, 110, 111, 112, 114, 115, 116, 120], "approach": [1, 9, 11, 12, 13, 14, 15, 59, 110, 112, 118], "appendix": [1, 59, 110, 112], "c": [1, 9, 11, 12, 13, 14, 15, 59, 76, 82, 92, 118], "lock": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 121], "exampl": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 92, 93, 94, 95, 100, 101, 102, 103, 106, 107, 108, 109, 110, 112, 113, 118], "see": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 93, 110, 112, 121], "noise_bandwidth": [1, 8, 59, 62, 66], "damping_factor": [1, 8, 59, 62, 63], "creat": [1, 8, 18, 19, 24, 25, 36, 37, 43, 44, 45, 59, 62, 68, 70, 76, 77, 107, 114, 117, 118, 119, 120], "object": [1, 8, 76, 77, 116, 118, 119], "frequency_lock_tim": [1, 9], "freq_offset": [1, 9, 11], "frequenc": [1, 9, 11, 13, 24, 28, 29, 43, 49, 50, 59, 92, 100, 101, 102, 104, 105, 120], "lock_tim": [1, 11, 118], "phase_error_vari": [1, 14], "cn0": [1, 14], "varianc": [1, 14, 86], "steadi": [1, 14], "state": [1, 14, 24, 32, 34, 36, 40, 41, 43, 55, 57], "phase_lock_tim": [1, 15], "bn": [1, 2], "bandwidth": [1, 2, 3, 8, 12, 59, 62, 66, 93, 110, 112, 118, 120], "b_n": [1, 2, 3, 8, 9, 11, 14, 15, 59, 62, 66], "hz": [1, 2, 8, 9, 11, 14, 28, 29, 49, 50, 59, 62, 66, 92, 93, 114], "bnt": [1, 3, 118], "t": [1, 3, 8, 59, 62, 66, 93, 94, 114], "repres": [1, 10, 87], "k0": [1, 4, 8, 18, 19, 62, 68, 69, 70], "gain": [1, 4, 5, 6, 7, 8, 18, 19, 43, 44, 51, 59, 60, 61, 62, 68, 69, 70, 93, 118], "k1": [1, 5, 59, 60, 118], "k2": [1, 6, 59, 61, 118], "kp": [1, 7, 8, 62], "omega_3db": [1, 12], "3": [1, 9, 11, 12, 15, 87, 88, 90, 92, 93, 94, 95, 100, 101, 102, 103, 106, 107, 109, 113, 116, 118, 120, 121, 122], "omega_": [1, 12], "textrm": [1, 12], "radian": [1, 12, 13, 14, 18, 19, 76, 77, 80, 118], "omega_n": [1, 13, 118], "natur": [1, 13], "sampl": [1, 8, 16, 18, 19, 21, 23, 24, 26, 28, 29, 30, 33, 36, 40, 49, 50, 52, 56, 59, 62, 66, 68, 70, 71, 73, 75, 93, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 114, 117, 118, 120], "rate": [1, 8, 16, 28, 29, 36, 39, 49, 50, 100, 101, 102, 104, 105, 107], "f_": [1, 8, 16, 28, 29, 49, 50, 93, 100, 101, 102, 104, 105, 107, 114, 115, 116, 118, 120], "zeta": [1, 8, 17, 59, 62, 63], "damp": [1, 8, 17, 59, 62, 63, 118], "properti": [2, 3, 4, 5, 6, 7, 10, 12, 13, 16, 17, 20, 26, 31, 34, 35, 38, 41, 42, 46, 47, 51, 53, 54, 57, 58, 60, 61, 63, 65, 66, 69, 71, 72, 80, 81, 82], "paramet": [8, 9, 11, 14, 19, 21, 23, 25, 27, 28, 29, 30, 33, 37, 39, 40, 44, 45, 48, 49, 50, 52, 56, 62, 64, 70, 73, 75, 77, 78, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113], "where": [8, 59, 62, 66, 86, 90, 93, 115, 116, 121], "period": [8, 59, 62, 66], "second": [8, 9, 11, 15, 59, 62, 66, 93], "critic": [8, 17, 59, 62, 63, 118], "underdamp": [8, 17, 59, 62, 63], "overdamp": [8, 17, 59, 62, 63], "ted": [8, 62], "t_": [9, 11, 15, 39, 93, 120], "fl": [9, 11], "4": [9, 11, 29, 50, 86, 90, 92, 93, 94, 95, 100, 101, 102, 103, 106, 107, 108, 109, 110, 112, 113, 114, 116, 119, 122], "delta": [9, 11, 24, 30, 43, 52, 103, 115, 116], "offset": [9, 11, 18, 19, 68, 70, 72, 76, 77, 80, 118], "take": [9, 11, 15], "onto": [9, 11, 15], "equat": [9, 11, 12, 13, 14, 15, 43], "39": 9, "pl": [11, 15], "38": 11, "34": 12, "33": 13, "sigma_": 14, "theta_": 14, "n_0": [14, 119], "carrier": 14, "43": 14, "40": 15, "less": 17, "than": 17, "greater": 17, "note": [18, 24, 43, 59, 68, 86, 93, 105], "increment": [18, 19, 21, 68, 70, 71, 73, 118], "v": [18, 68], "y": [18, 21, 23, 24, 27, 39, 43, 48, 59, 64, 68, 73, 75, 86, 87, 88, 90, 105, 107, 118], "output": [18, 21, 23, 24, 30, 33, 43, 44, 45, 52, 56, 59, 64, 68, 73, 75, 86, 87, 88, 90, 95, 103, 106, 113, 114, 115, 116, 118], "complex": [18, 21, 23, 76, 78, 79, 82, 86, 99, 114, 115, 116, 119], "exponenti": [18, 21, 23, 114, 115, 116], "constant": [18, 19, 59, 68, 70, 71, 116, 118], "accumul": [18, 19, 68, 70, 71, 118], "absolut": [18, 19, 68, 70, 72], "unit": [18, 24, 33, 43, 56, 59, 68, 70, 71, 72, 85, 86, 91, 97, 98, 106, 110, 111, 112, 115, 116, 118], "adder": [18, 59, 68, 118], "process": [18, 21, 68, 73, 116, 118], "variabl": [18, 21, 68, 73, 94, 118], "reset": [18, 22, 24, 32, 36, 40, 43, 55, 59, 67, 68, 74], "forward": [18, 23, 68, 75], "theta": [19, 68, 70, 72], "vari": [21, 73], "number": [23, 28, 29, 30, 33, 49, 50, 52, 56, 75, 86, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113], "wrapper": [24, 43], "scipi": [24, 27, 43, 104, 105, 120, 121], "convolv": [24, 27, 107, 117], "It": [24, 43, 59, 86], "support": [24, 43], "one": [24, 43, 93, 94, 100, 101, 102, 104, 105, 115, 116, 117, 120], "stream": [24, 25, 32, 34, 36, 37, 40, 41, 43, 44, 45, 55, 57], "its": [24, 43, 44, 115, 116, 120], "feedforward": [24, 25, 35, 43, 45, 47, 100, 101, 102, 103, 106, 109, 115, 116], "coeffici": [24, 25, 43, 45, 100, 101, 102, 103, 106, 109, 115, 116], "h_i": [24, 25, 35, 115], "sum_": [24, 43, 85, 86, 91, 111], "sum": [24, 43, 120], "limits_": [24, 43], "bool": [24, 25, 34, 36, 37, 41, 43, 44, 45, 57, 99], "fals": [24, 25, 36, 37, 43, 44, 45, 87, 88, 90, 99, 116, 120], "tupl": [24, 28, 29, 43, 49, 50], "frequency_response_log": [24, 29, 43, 50], "logarithm": [24, 29, 43, 50, 100, 101, 102, 104, 115, 116], "axi": [24, 29, 43, 50, 100, 101, 102, 104, 105, 107, 114], "when": [24, 30, 33, 43, 52, 56, 87, 88, 100, 101, 102, 103, 106, 114, 115, 116], "mode": [24, 25, 27, 32, 34, 36, 37, 40, 41, 43, 44, 45, 55, 57, 117], "u": [24, 33, 43, 56, 106, 115, 116], "indic": [24, 25, 34, 36, 37, 41, 43, 44, 45, 57], "whether": [24, 25, 34, 36, 37, 41, 43, 44, 45, 57], "tap": [24, 35, 36, 42, 43, 46, 47, 115, 116], "In": [25, 34, 37, 41, 44, 45, 57, 83, 84, 86, 87, 88, 90, 92, 93, 94, 95, 100, 101, 102, 103, 106, 107, 108, 109, 110, 112, 113, 114, 119], "previou": [25, 37, 40, 44, 45], "ar": [25, 29, 37, 44, 45, 50, 87, 88, 95, 100, 101, 102, 104, 105, 108, 114, 116, 118, 120, 121, 123], "preserv": [25, 34, 37, 41, 44, 45, 57], "between": [25, 34, 37, 41, 44, 45, 57, 92, 104, 105, 118], "call": [25, 34, 37, 41, 44, 45, 57], "liter": [27, 101, 102], "full": 27, "valid": [27, 117], "same": [27, 115], "convolut": 27, "detail": 27, "1024": [28, 29, 49, 50, 100, 101, 102, 117, 120], "from": [28, 29, 43, 44, 49, 50, 76, 82, 105, 115, 116, 118, 121], "plot": [28, 29, 30, 33, 49, 50, 52, 56, 86, 93, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122], "decad": [29, 50, 100, 101, 102, 115, 118], "length": [30, 33, 93, 100, 103, 104, 105, 106, 110, 112, 114, 117, 120], "resampl": [36, 37, 38, 39, 40, 41, 42, 121, 122], "http": [36, 89, 93, 96], "wirelesspi": 36, "com": [36, 93], "fraction": [36, 40, 93, 114], "structur": 36, "new": [36, 37, 76, 77], "given": [36, 39, 115, 116], "r": [36, 39, 93, 110, 112, 116, 118, 120], "index": [36, 40], "vector": [40, 104, 105], "should": 40, "equal": 40, "three": [40, 114, 120], "If": [40, 86, 90, 95, 99, 100, 103, 104, 105, 106, 107, 113, 121], "lfilter": 43, "b_i": [43, 45, 47, 100, 101, 102, 103, 106, 109, 116], "feedback": [43, 45, 46, 100, 101, 102, 103, 106, 109, 116], "a_j": [43, 45, 46, 100, 101, 102, 103, 106, 109, 116], "These": [43, 108, 118], "differ": [43, 120], "a_0": 43, "left": [43, 85, 86, 91, 92, 93, 97, 98, 111], "m": [43, 76, 77, 78, 79, 81, 82, 90], "right": [43, 85, 86, 91, 92, 93, 97, 98, 111], "classmethod": [43, 44], "zerospol": [43, 44, 100, 101, 102, 103, 106, 109, 116], "self": [43, 44], "100": [43, 52, 56, 86, 100, 103, 106, 107, 114], "a_tap": [43, 46, 100, 101, 102, 103, 106, 109, 116, 118], "b_tap": [43, 47, 100, 101, 102, 103, 106, 109, 116, 118], "can": [59, 86, 93, 95, 104, 105, 115, 116, 123], "track": 59, "cannot": 59, "howev": [59, 114], "chirp": 59, "ramp": 59, "underli": [59, 65], "modul": [76, 77, 79, 81, 119], "x_hat": [76, 78, 99, 119], "symbol": [76, 78, 79, 82, 93, 99, 110, 112, 117, 119, 120], "hat": [76, 78, 99], "k": [76, 78, 79, 99, 117, 120], "decim": [76, 78, 79, 82, 119], "maximum": [76, 78], "likelihood": [76, 78], "phi": [76, 77, 80], "symbol_map": [76, 82, 107, 117], "map": [76, 82], "dot": [76, 82], "mathbb": [76, 82], "must": [77, 86, 93, 110, 112], "least": 77, "real": [83, 84, 86, 114, 115, 116, 117, 118], "valu": [83, 84, 93, 105, 116], "probabl": [83, 84, 87, 88, 90, 121], "exceed": [83, 84], "out": [83, 84, 87, 88, 90, 92, 95, 102, 108, 113], "15865525393145707": [83, 84], "158655": [83, 84], "0000010494310452": [83, 84], "measur": [85, 86, 89, 91, 96, 97, 98, 111, 118, 121, 122], "domain": [85, 86, 89, 91, 96, 97, 98, 100, 104, 105, 107, 111], "text": [85, 86, 89, 92, 96, 97, 98, 111], "avg": [85, 86, 96], "seed": 86, "which": [86, 114, 118, 120], "ad": [86, 121, 122], "desir": [86, 119], "explicitli": 86, "assum": [86, 90, 95, 113], "contain": [86, 94], "known": 86, "linear": 86, "random": [86, 87, 88, 90, 107, 117, 119], "gener": [86, 119], "numpi": [86, 113, 114, 115, 116, 117, 118, 119, 120, 121], "default_rng": 86, "noisi": 86, "w": [86, 114, 115, 116, 117, 118, 119, 120], "sigma": 86, "For": [86, 100, 101, 102, 103, 106, 109, 115], "sim": 86, "cn": 86, "np": [86, 87, 88, 90, 100, 101, 102, 103, 106, 107, 109, 114, 115, 116, 117, 118, 119, 120], "sin": 86, "pi": [86, 92, 93, 100, 101, 102, 103, 106, 107, 109, 114, 115, 116, 117, 118], "5": [86, 87, 88, 90, 93, 94, 100, 101, 102, 103, 106, 107, 109, 110, 112, 114, 115, 116, 117, 118, 119, 120, 122], "arang": [86, 114, 117, 118], "10": [86, 90, 92, 93, 94, 96, 100, 101, 102, 103, 106, 107, 109, 110, 112, 114, 115, 116, 117, 118, 119, 120], "plt": [86, 93, 100, 101, 102, 103, 106, 107, 109, 110, 112, 114, 115, 116, 117, 118, 119, 120], "figur": [86, 93, 100, 101, 102, 103, 106, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 120], "figsiz": [86, 93, 100, 101, 102, 103, 106, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 120], "8": [86, 90, 93, 94, 100, 101, 102, 103, 106, 107, 108, 109, 110, 112, 115, 116, 117, 118, 120], "label": [86, 93, 105, 107, 110, 112, 114, 117, 118, 120], "titl": [86, 107, 114, 117, 118, 120], "tight_layout": [86, 107, 117, 118, 119, 120], "channel": [87, 88, 90], "x_i": [87, 88, 90], "y_i": [87, 88, 90], "20": [87, 88, 90, 94, 117, 120], "25": [87, 88, 90, 114, 118, 120], "roughli": [87, 88, 114], "eras": 87, "randint": [87, 88, 90, 107, 117, 119], "true": [87, 88, 90, 99, 108, 119], "flip": 88, "cf": 89, "v_": [89, 98, 111], "en": [89, 96], "wikipedia": [89, 96], "org": [89, 96], "wiki": [89, 96], "pr": 90, "y_j": 90, "alphabet": 90, "size": [90, 114, 117, 118, 120], "ldot": 90, "6": [90, 92, 94, 100, 101, 102, 103, 106, 107, 109, 115, 116, 118, 119], "7": [90, 94, 107], "9": [90, 94, 110, 112, 117, 119, 120, 122], "log_": [92, 96], "distanc": 92, "meter": 92, "transmitt": 92, "receiv": 92, "km": 92, "link": 92, "ghz": 92, "1e3": 92, "1e9": 92, "92": 92, "44778322188337": 92, "so": [92, 93, 121], "doubl": 92, "result": 92, "increas": [92, 116], "2e3": 92, "98": 92, "468383135163": 92, "also": [92, 93, 121], "2e9": 92, "puls": [93, 107, 110, 112, 121, 122], "shape": [93, 107, 110, 112, 121, 122], "product": [93, 120], "sym": [93, 120], "side": [93, 100, 101, 102, 104, 105, 115, 116, 117, 120], "thought": [93, 123], "smaller": [93, 120], "produc": [93, 120], "wider": 93, "even": [93, 110, 112], "amplitud": [93, 114, 118], "nomin": 93, "passband": [93, 117], "ha": [93, 118, 120], "exp": [93, 100, 101, 102, 103, 106, 107, 109, 114, 116, 117, 118], "relat": 93, "sqrt": [93, 111, 117, 118, 120], "ln": 93, "www": 93, "mathwork": 93, "help": 93, "ref": 93, "gaussdesign": 93, "html": 93, "onlinelibrari": 93, "wilei": 93, "doi": 93, "pdf": 93, "1002": 93, "9780470041956": 93, "app2": 93, "h_0p1": [93, 110, 112], "h_0p2": 93, "h_0p3": 93, "data": [94, 95, 113, 121], "displai": [94, 100, 101, 102, 104, 105], "each": [94, 104, 105], "consid": 94, "convert": 94, "line": 94, "string": [94, 104, 105], "print": [94, 114, 115, 116, 118], "quick": 94, "brown": 94, "fox": 94, "jump": 94, "over": 94, "lazi": 94, "dog": 94, "00000000": 94, "54": 94, "68": 94, "65": 94, "71": 94, "75": [94, 118, 119], "69": 94, "63": 94, "6b": 94, "62": 94, "72": 94, "6f": 94, "77": 94, "6e": 94, "00000010": 94, "66": 94, "78": 94, "6a": 94, "6d": 94, "70": [94, 120], "73": 94, "76": 94, "74": 94, "00000020": 94, "6c": 94, "61": 94, "7a": 94, "79": 94, "64": [94, 116], "67": 94, "he": 94, "01": [94, 116, 118], "02": [94, 116, 118], "03": [94, 116], "04": [94, 116], "00000004": 94, "05": [94, 114, 116, 118], "06": 94, "07": 94, "08": 94, "00000008": 94, "09": 94, "0a": 94, "dtype": [95, 107, 113, 118], "dtypelik": [95, 113], "have": [95, 113], "most": [95, 113], "signific": [95, 113], "first": [95, 113], "enough": 95, "fill": 95, "last": 95, "remain": 95, "type": [95, 101, 102, 104, 113, 122], "smallest": 95, "unsign": 95, "integ": 95, "hold": 95, "uint8": [95, 113], "max": [97, 98], "constel": 99, "heatmap": [99, 119], "instead": 99, "scatter": 99, "keyword": [99, 101, 102, 103, 104, 105, 106, 107, 109, 115, 116], "argument": [99, 101, 102, 103, 104, 105, 106, 107, 109, 115, 116], "pyplot": [99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 114, 115, 116, 117, 118, 119, 120], "hist2d": 99, "n_time": [100, 116], "n_freq": 100, "x_axi": [100, 101, 102, 104, 105, 115, 116, 117, 118], "two": [100, 101, 102, 104, 105, 114, 115, 116], "log": [100, 101, 102, 104, 115, 116, 118], "set": [100, 101, 102, 103, 104, 105, 106, 108, 109, 116], "n_t": 100, "n_f": 100, "scale": [100, 101, 102, 104, 105, 115, 116], "option": [100, 101, 102, 104, 105], "spectrum": [100, 101, 102, 104, 105], "h_srrc": [100, 101, 102, 103, 106, 107, 109], "1j": [100, 101, 102, 103, 106, 107, 109, 114, 116, 117, 118], "conj": [100, 101, 102, 103, 106, 109, 116, 118], "30": [100, 103, 106, 116], "ylim": [102, 115, 118, 120], "48": 102, "52": 102, "window": [104, 105], "hann": [104, 105], "overlap": [104, 105, 117], "fft": [104, 105], "median": 104, "segment": [104, 105], "256": [104, 105, 117], "point": [104, 105], "pcolormesh": 105, "By": 105, "color": [105, 114, 117, 118, 120], "bar": 105, "rang": [105, 118], "10th": 105, "100th": 105, "percentil": 105, "provid": [105, 121], "more": 105, "dynam": 105, "activ": 105, "chang": [105, 123], "vmin": 105, "vmax": 105, "bpsk": [107, 117], "1000": 107, "10e3": 107, "qpsk": 107, "complex64": [107, 118], "style": 108, "mai": [108, 116], "revert": 108, "rcdefault": 108, "follow": [108, 118], "_rc_param": 108, "rc_param": 108, "ax": [108, 114, 118], "grid": [108, 114, 118, 120], "autolayout": 108, "max_open_warn": 108, "titleweight": 108, "bold": 108, "linestyl": [108, 114, 118, 120], "excess": [110, 112, 120], "le": [110, 112], "h_0p5": [110, 112], "h_0p9": [110, 112], "import": [114, 115, 116, 117, 118, 119, 120, 121], "config": [114, 115, 116, 117, 118, 119, 120], "inlinebackend": [114, 115, 116, 117, 118, 119, 120], "print_figure_kwarg": [114, 115, 116, 117, 118, 119, 120], "facecolor": [114, 115, 116, 117, 118, 119, 120], "widget": [114, 115, 116, 117, 118, 119, 120], "prop_cycl": [114, 118], "by_kei": [114, 118], "continu": 114, "freq": [114, 118], "tx": 114, "decai": [114, 116], "marker": [114, 115, 116], "o": 114, "fillstyl": 114, "imag": 114, "xlabel": [114, 118, 120], "ylabel": [114, 118, 120], "origin": 114, "legend": [114, 117, 118, 120], "both": [114, 118], "show": [114, 115, 116, 117, 118, 119, 120], "now": 114, "equival": 114, "accomplish": 114, "librari": [114, 119, 121, 123], "def": [114, 119], "resample_sign": 114, "new_sample_r": 114, "ty": 114, "notic": [114, 120], "everi": 114, "200": 114, "four": 114, "400": 114, "other": [114, 123], "appear": 114, "50": [114, 117], "fourth": 114, "often": 114, "do": 114, "align": 114, "315": 114, "32": 114, "user": [115, 116], "below": [115, 116], "00095881": 115, "00175008": 115, "00423912": 115, "00588237": 115, "00615087": 115, "00474585": 115, "00170436": 115, "0025481": 115, "00721629": 115, "01123216": 115, "01342329": 115, "01273174": 115, "00845039": 115, "00043678": 115, "01073645": 115, "02372925": 115, "03650167": 115, "04650553": 115, "05098414": 115, "04734541": 115, "03355823": 115, "00851466": 115, "0276993": 115, "07367186": 115, "12670168": 115, "18306847": 115, "2381038": 115, "28726435": 115, "32607284": 115, "3509308": 115, "35948882": 115, "conveni": [115, 116], "evalu": [115, 116], "envelop": [115, 116], "easili": [115, 116], "here": [115, 116], "12": [115, 119], "altern": 116, "conjug": 116, "0x000002214b040a88": 116, "47820725": 116, "00000000e": 116, "00": 116, "78207252e": 116, "58172329e": 116, "10862468e": 116, "86109590e": 116, "21565653e": 116, "01140214e": 116, "57286400e": 116, "67772160e": 116, "47338728e": 116, "10422993e": 116, "89312837e": 116, "12240078e": 116, "03953322e": 116, "69685122e": 116, "63882791e": 116, "81474977e": 116, "47193366e": 116, "85259041e": 116, "15647504e": 116, "23851924e": 116, "42176895e": 116, "84684395e": 116, "42721858e": 116, "72236648e": 116, "14721649e": 116, "10813095e": 116, "94024315e": 116, "78877688e": 116, "74077567e": 116, "87820725": 116, "53637958": 116, "94724205": 116, "13335164": 116, "1455082": 116, "04436799": 116, "88708159": 116, "71930943": 116, "5719707": 116, "46154771": 116, "39261642": 116, "36139242": 116, "35935288": 116, "3763214": 116, "40270968": 116, "43085717": 116, "45557651": 116, "47410241": 116, "48566716": 116, "49090568": 116, "49124786": 116, "48840102": 116, "4839738": 116, "47925143": 116, "47510421": 116, "47199608": 116, "47005584": 116, "46917696": 116, "46911955": 116, "denomin": 116, "73910363": 116, "30614675j": 116, "plane": 116, "linspac": 116, "endpoint": 116, "concaten": 116, "0x000002214dc574c8": 116, "lyon": 116, "understand": 116, "3rd": 116, "edit": 116, "section": [116, 118], "insid": 116, "circl": 116, "sinusoid": 116, "outsid": 116, "unstabl": 116, "n_symbol": 117, "500": [117, 118], "x_bb_rect": 117, "papr_bb_rect": 117, "x_pb_rect": 117, "papr_pb_rect": 117, "x_bb_0p9": 117, "papr_bb_0p9": 117, "x_bb_0p5": 117, "papr_bb_0p5": 117, "x_bb_0p1": 117, "papr_bb_0p1": 117, "2f": 117, "rf": [117, 118], "xlim": [117, 118, 120], "x_pb_0p9": 117, "papr_pb_0p9": 117, "x_pb_0p5": 117, "papr_pb_0p5": 117, "x_pb_0p1": 117, "papr_pb_0p1": 117, "configur": 118, "0x00000290f1ce3488": 118, "theta_0": 118, "phase_error": 118, "freq_estim": 118, "subplot": [118, 119], "suptitl": [118, 119], "ones": 118, "angl": 118, "part": 118, "unwrap": 118, "system": [118, 121], "avail": [118, 119], "001": 118, "005": 118, "b_nt": 118, "0005": 118, "00001": 118, "0125": 118, "015": 118, "0175": 118, "t_lock": 118, "analyze_psk": 119, "esn0": 119, "100_000": 119, "achiev": [119, 120], "n0": 119, "bin": 119, "e_": 119, "18": 119, "rectangular": 120, "rect": 120, "rc_0p1": 120, "rc_0p5": 120, "rc_0p9": 120, "nyquist": 120, "adjac": 120, "specif": 120, "pm": 120, "roll": 120, "60": 120, "total": 120, "nearli": 120, "compar": 120, "null": 120, "while": 120, "small": 120, "lobe": 120, "much": 120, "higher": 120, "h_rect": 120, "freqz": 120, "worn": 120, "whole": 120, "h_rc_0p1": 120, "h_rc_0p5": 120, "h_rc_0p9": 120, "rel": 120, "main": 120, "p_rect": 120, "log10": 120, "cumsum": 120, "ab": 120, "p_rc_0p1": 120, "p_rc_0p5": 120, "p_rc_0p9": 120, "One": 120, "within": 120, "variou": 120, "srrc_0p1": 120, "srrc_0p5": 120, "srrc_0p9": 120, "therefor": 120, "similar": 120, "significantli": 120, "due": 120, "being": 120, "h_srrc_0p1": 120, "h_srrc_0p5": 120, "h_srrc_0p9": 120, "p_srrc_0p1": 120, "p_srrc_0p5": 120, "p_srrc_0p9": 120, "gauss_0p1": 120, "gauss_0p2": 120, "gauss_0p3": 120, "python": 121, "packag": 121, "softwar": 121, "radio": 121, "goal": 121, "tool": 121, "design": 121, "build": 121, "analyz": 121, "reli": 121, "interoper": 121, "veri": 121, "possibl": 121, "numba": 121, "acceler": 121, "computation": 121, "intens": 121, "addition": 121, "aim": 121, "replic": 121, "relev": 121, "matlab": 121, "dsp": 121, "toolbox": 121, "we": 121, "progress": 121, "someth": 121, "you": 121, "like": 121, "includ": 121, "pleas": 121, "open": 121, "issu": 121, "github": 121, "impair": 121, "manipul": 121, "util": 121, "releas": 122, "juli": 122, "2023": 122, "helper": 122, "improv": 122, "annot": 122, "matt": 122, "hostett": 122, "mhostett": 122, "semant": 123, "major": 123, "minor": 123, "patch": 123, "introduc": 123, "api": 123, "featur": 123, "backward": 123, "compat": 123, "make": 123, "bug": 123, "fix": 123, "befor": 123, "There": 123, "guarante": 123, "them": 123, "thei": 123}, "objects": {"": [[0, 0, 0, 1, "sdr", ""]], "sdr": [[1, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [18, 1, 1, "", "DDS", "Implements a direct digital synthesizer (DDS)."], [24, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [36, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [43, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [59, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [68, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [76, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [83, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [84, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [85, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [86, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [87, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [88, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [89, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [90, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [91, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [92, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [93, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [94, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [95, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [96, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [97, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [98, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [110, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [111, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [112, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [113, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."]], "sdr.ClosedLoopPLL": [[2, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [3, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [4, 2, 1, "", "K0", "The NCO gain $K_0$."], [5, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [6, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [7, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [8, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [9, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [10, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [11, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [12, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [13, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [14, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [15, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [16, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [17, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[8, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [8, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [8, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [8, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [8, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[9, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[11, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[14, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.DDS": [[19, 3, 1, "", "__init__", "Creates a direct digital synthesizer (DDS)."], [20, 2, 1, "", "nco", "The numerically-controlled oscillator (NCO) used by the DDS."], [21, 3, 1, "", "process", "Steps the DDS with the variable phase increment signal $x[n]$."], [22, 3, 1, "", "reset", "Resets the DDS."], [23, 3, 1, "", "step", "Steps the DDS forward by $N$ samples."]], "sdr.DDS.__init__": [[19, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [19, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [19, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.DDS.process": [[21, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the DDS."]], "sdr.DDS.step": [[23, 4, 2, "p-N", "N", "The number of samples $N$ to step the DDS forward."]], "sdr.FIR": [[25, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [26, 2, 1, "", "delay", "The delay of the FIR filter in samples."], [27, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the FIR filter."], [28, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the FIR filter."], [29, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the FIR filter on a logarithmic frequency axis."], [30, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [31, 2, 1, "", "order", "The order of the FIR filter, $N$."], [32, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [33, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [34, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [35, 2, 1, "", "taps", "The feedforward taps $h_i$."]], "sdr.FIR.__init__": [[25, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$."], [25, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to filter()."]], "sdr.FIR.filter": [[27, 4, 2, "p-mode", "mode", "The convolution mode. See scipy.signal.convolve() for details."], [27, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.FIR.frequency_response": [[28, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [28, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.frequency_response_log": [[29, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [29, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [29, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[30, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.step_response": [[33, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FarrowResampler": [[37, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [38, 2, 1, "", "order", "The order of the filter."], [39, 3, 1, "", "resample", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [40, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [41, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [42, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__init__": [[37, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to resample()."]], "sdr.FarrowResampler.resample": [[39, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [39, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.reset": [[40, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[44, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [45, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [46, 2, 1, "", "a_taps", "The feedback taps $a_j$."], [47, 2, 1, "", "b_taps", "The feedforward taps $b_i$."], [48, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the IIR filter."], [49, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the IIR filter."], [50, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the IIR filter on a logarithmic frequency axis."], [51, 2, 1, "", "gain", "The gain of the IIR filter."], [52, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [53, 2, 1, "", "order", "The order of the IIR filter, $N$."], [54, 2, 1, "", "poles", "The poles of the IIR filter."], [55, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [56, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [57, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [58, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[44, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [44, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [44, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."], [44, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__init__": [[45, 4, 2, "p-a", "a", "The feedback coefficients $a_j$."], [45, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [45, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."]], "sdr.IIR.filter": [[48, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.IIR.frequency_response": [[49, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [49, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[50, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [50, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [50, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[52, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[56, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.LoopFilter": [[60, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [61, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [62, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [63, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [64, 3, 1, "", "filter", "Filters the input signal $x[n]$."], [65, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [66, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [67, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__init__": [[62, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [62, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [62, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [62, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.LoopFilter.filter": [[64, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.NCO": [[69, 2, 1, "", "K0", "The NCO gain $K_0$."], [70, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [71, 2, 1, "", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [72, 2, 1, "", "offset", "The absolute offset $theta$ of the NCO in units."], [73, 3, 1, "", "process", "Steps the NCO with the variable-increment signal $x[n]$."], [74, 3, 1, "", "reset", "Resets the NCO."], [75, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__init__": [[70, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [70, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [70, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in units."]], "sdr.NCO.process": [[73, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the NCO."]], "sdr.NCO.step": [[75, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.PSK": [[77, 3, 1, "", "__init__", "Creates a new PSK object."], [78, 3, 1, "", "demodulate", "Demodulates the complex symbols $hat{x}[k]$ to decimal symbols $hat{s}[k]$ using maximum-likelihood estimation."], [79, 3, 1, "", "modulate", "Modulates to decimal symbols $s[k]$ to complex symbols $x[k]$."], [80, 2, 1, "", "offset", "The phase offset $phi$ in radians."], [81, 2, 1, "", "order", "The modulation order $M$."], [82, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} -> mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[77, 4, 2, "p-offset", "offset", "The phase offset $phi$ in radians."], [77, 4, 2, "p-order", "order", "The modulation order $M$. Must be at least 2."]], "sdr.PSK.demodulate": [[78, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to demodulate."]], "sdr.PSK.modulate": [[79, 4, 2, "p-symbols", "symbols", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.Q": [[83, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[84, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.average_power": [[85, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[86, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [86, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [86, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [86, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.bec": [[87, 4, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [87, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc": [[88, 4, 2, "p-p", "p", "The probability $p$ of a bit flip."], [88, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.crest_factor": [[89, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.dmc": [[90, 4, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [90, 4, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [90, 4, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [90, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.energy": [[91, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.fspl": [[92, 4, 2, "p-d", "d", "The distance $d$ in meters between the transmitter and receiver."], [92, 4, 2, "p-f", "f", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[93, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [93, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [93, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.hexdump": [[94, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [94, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.pack": [[95, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [95, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [95, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[96, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_power": [[97, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[98, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.plot": [[99, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [100, 5, 1, "", "filter", "Plots the frequency response $H(e^{jomega})$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [101, 5, 1, "", "frequency_response", "Plots the frequency response $H(e^{jomega})$ of the filter."], [102, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [103, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [104, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [105, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [106, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [107, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [108, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [109, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.constellation": [[99, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [99, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.filter": [[100, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [100, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [100, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [100, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [100, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [100, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [100, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.frequency_response": [[101, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [101, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [101, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [101, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [101, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [101, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[102, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [102, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [102, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [102, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [102, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [102, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.impulse_response": [[103, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [103, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [103, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.plot.periodogram": [[104, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [104, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [104, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [104, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [104, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [104, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [104, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [104, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.spectrogram": [[105, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [105, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [105, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [105, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [105, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [105, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [105, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[106, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [106, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [106, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.plot.time_domain": [[107, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\"."], [107, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[109, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [109, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.raised_cosine": [[110, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [110, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [110, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[111, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[112, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [112, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [112, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.unpack": [[113, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [113, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [113, 4, 2, "p-x", "x", "The input array with bpe bits per element."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"sdr": [0, 121], "filter": [0, 115, 116, 118], "puls": [0, 117, 120], "shape": [0, 117, 120], "resampl": [0, 114], "modul": 0, "phase": [0, 118, 119], "time": [0, 118], "lock": [0, 118], "loop": [0, 118], "impair": 0, "measur": 0, "data": 0, "manipul": 0, "channel": 0, "model": 0, "link": 0, "budget": 0, "probabl": 0, "plot": 0, "configur": 0, "domain": [0, 118], "frequenc": [0, 115, 116, 118], "analysi": 0, "note": 1, "constructor": [1, 18, 24, 36, 43, 59, 68, 76], "method": [1, 18, 24, 36, 43, 59, 68, 76], "properti": [1, 18, 24, 36, 43, 59, 68, 76], "see": [18, 28, 29, 30, 33, 49, 50, 52, 56, 68, 83, 84, 89, 96, 100, 101, 102, 103, 106, 109], "also": [18, 28, 29, 30, 33, 49, 50, 52, 56, 68, 83, 84, 89, 96, 100, 101, 102, 103, 106, 109], "farrow": 114, "arbitrari": 114, "construct": 114, "an": [114, 115, 116], "input": 114, "signal": 114, "x": 114, "n": [114, 115, 116], "t_": 114, "rate": 114, "r": 114, "y": 114, "frac": 114, "upsampl": 114, "integ": 114, "downsampl": 114, "irrat": 114, "fir": 115, "creat": [115, 116], "examin": [115, 116], "impuls": [115, 116], "respons": [115, 116, 118], "h": [115, 116], "step": [115, 116, 118], "": [115, 116], "omega": [115, 116], "group": [115, 116], "delai": [115, 116], "tau_g": [115, 116], "fulli": [115, 116], "analyz": [115, 116, 118], "iir": 116, "zero": 116, "pole": 116, "digit": 116, "stabil": 116, "peak": 117, "averag": 117, "power": 117, "rectangular": 117, "squar": [117, 120], "root": [117, 120], "rais": [117, 120], "cosin": [117, 120], "design": 118, "proport": 118, "plu": 118, "integr": 118, "ppi": 118, "implement": 118, "pll": 118, "close": 118, "perform": 118, "compar": 118, "across": 118, "zeta": 118, "b_n": 118, "t": 118, "shift": 119, "kei": 119, "constel": 119, "bpsk": 119, "qpsk": 119, "8": 119, "psk": 119, "16": 119, "gaussian": 120, "featur": 121, "v0": 122, "0": 122, "2": 122, "chang": 122, "contributor": 122, "1": 122, "version": 123, "alpha": 123, "releas": 123, "beta": 123}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"sdr": [[0, "sdr"], [121, "sdr"]], "Filtering": [[0, "filtering"]], "Pulse shaping": [[0, "pulse-shaping"]], "Resampling": [[0, "resampling"]], "Modulation": [[0, "modulation"]], "Phase/time-locked loops": [[0, "phase-time-locked-loops"]], "Impairments": [[0, "impairments"]], "Measurement": [[0, "measurement"]], "Data manipulation": [[0, "data-manipulation"]], "Channel models": [[0, "channel-models"]], "Link budgets": [[0, "link-budgets"]], "Probability": [[0, "probability"]], "Plotting": [[0, "plotting"]], "Configuration": [[0, "configuration"]], "Time-domain": [[0, "time-domain"]], "Frequency-domain": [[0, "frequency-domain"]], "Filter analysis": [[0, "filter-analysis"]], "Note": [[1, null]], "Constructors": [[1, "constructors"], [18, "constructors"], [24, "constructors"], [36, "constructors"], [43, "constructors"], [59, "constructors"], [68, "constructors"], [76, "constructors"]], "Methods": [[1, "methods"], [18, "methods"], [24, "methods"], [36, "methods"], [43, "methods"], [59, "methods"], [68, "methods"], [76, "methods"]], "Properties": [[1, "properties"], [18, "properties"], [24, "properties"], [36, "properties"], [43, "properties"], [59, "properties"], [68, "properties"], [76, "properties"]], "See also": [[18, null], [28, null], [29, null], [30, null], [33, null], [49, null], [50, null], [52, null], [56, null], [68, null], [83, null], [84, null], [89, null], [96, null], [100, null], [101, null], [102, null], [103, null], [106, null], [109, null]], "Farrow arbitrary resampler": [[114, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[114, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[114, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[114, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[114, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[114, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[114, "downsample-by-an-irrational-rate"]], "FIR filters": [[115, "fir-filters"]], "Create an FIR filter": [[115, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[115, "examine-the-impulse-response-h-n"], [116, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[115, "examine-the-step-response-s-n"], [116, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[115, "examine-the-frequency-response-h-omega"], [116, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[115, "examine-the-group-delay-tau-g-omega"], [116, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[115, "fully-analyze-a-fir-filter"]], "IIR filters": [[116, "iir-filters"]], "Create an IIR filter": [[116, "create-an-iir-filter"]], "Examine the zeros and poles": [[116, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[116, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[116, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[117, "peak-to-average-power"]], "Rectangular pulse shape": [[117, "rectangular-pulse-shape"]], "Square-root raised cosine pulse shape": [[117, "square-root-raised-cosine-pulse-shape"]], "Phase-locked loops": [[118, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[118, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[118, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[118, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[118, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[118, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[118, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[118, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[119, "phase-shift-keying"]], "Constellations": [[119, "constellations"]], "BPSK": [[119, "bpsk"]], "QPSK": [[119, "qpsk"]], "8-PSK": [[119, "id1"]], "16-PSK": [[119, "id2"]], "Pulse shapes": [[120, "pulse-shapes"]], "Raised cosine": [[120, "raised-cosine"]], "Square-root raised cosine": [[120, "square-root-raised-cosine"]], "Gaussian": [[120, "gaussian"]], "Features": [[121, "features"]], "v0.0": [[122, "v0-0"]], "v0.0.2": [[122, "v0-0-2"]], "Changes": [[122, "changes"], [122, "id1"]], "Contributors": [[122, "contributors"], [122, "id2"]], "v0.0.1": [[122, "v0-0-1"]], "Versioning": [[123, "versioning"]], "Alpha releases": [[123, "alpha-releases"]], "Beta releases": [[123, "beta-releases"]]}, "indexentries": {"module": [[0, "module-sdr"]], "sdr": [[0, "module-sdr"]]}, "docurls": ["api/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.DDS/", "api/sdr.DDS.__init__/", "api/sdr.DDS.nco/", "api/sdr.DDS.process/", "api/sdr.DDS.reset/", "api/sdr.DDS.step/", "api/sdr.FIR/", "api/sdr.FIR.__init__/", "api/sdr.FIR.delay/", "api/sdr.FIR.filter/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.frequency_response_log/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.reset/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.resample/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__init__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.filter/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.filter/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.process/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.demodulate/", "api/sdr.PSK.modulate/", "api/sdr.PSK.offset/", "api/sdr.PSK.order/", "api/sdr.PSK.symbol_map/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.bec/", "api/sdr.bsc/", "api/sdr.crest_factor/", "api/sdr.dmc/", "api/sdr.energy/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.hexdump/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.plot.constellation/", "api/sdr.plot.filter/", "api/sdr.plot.frequency_response/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.periodogram/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.raised_cosine/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.unpack/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})