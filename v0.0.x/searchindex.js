Search.setIndex({"titles": ["Conversions", "Data manipulation", "Detection", "Digital signal processing", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.Decimator", "sdr.Decimator.__call__", "sdr.Decimator.__init__", "sdr.Decimator.__repr__", "sdr.Decimator.__str__", "sdr.Decimator.delay", "sdr.Decimator.method", "sdr.Decimator.polyphase_taps", "sdr.Decimator.rate", "sdr.Decimator.reset", "sdr.Decimator.taps", "sdr.Differentiator", "sdr.Differentiator.__init__", "sdr.EnergyDetector", "sdr.EnergyDetector.p_d", "sdr.EnergyDetector.p_fa", "sdr.EnergyDetector.roc", "sdr.EnergyDetector.threshold", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__call__", "sdr.FIR.__init__", "sdr.FIR.__len__", "sdr.FIR.__repr__", "sdr.FIR.__str__", "sdr.FIR.delay", "sdr.FIR.flush", "sdr.FIR.frequency_response", "sdr.FIR.frequency_response_log", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.reset", "sdr.FIR.state", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__call__", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__call__", "sdr.IIR.__init__", "sdr.IIR.__repr__", "sdr.IIR.__str__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.state", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.Integrator", "sdr.Integrator.__init__", "sdr.Interpolator", "sdr.Interpolator.__call__", "sdr.Interpolator.__init__", "sdr.Interpolator.__repr__", "sdr.Interpolator.__str__", "sdr.Interpolator.delay", "sdr.Interpolator.method", "sdr.Interpolator.polyphase_taps", "sdr.Interpolator.rate", "sdr.Interpolator.reset", "sdr.Interpolator.taps", "sdr.LinearModulation", "sdr.LinearModulation.__init__", "sdr.LinearModulation.__repr__", "sdr.LinearModulation.__str__", "sdr.LinearModulation.ber", "sdr.LinearModulation.bps", "sdr.LinearModulation.decide_symbols", "sdr.LinearModulation.demodulate", "sdr.LinearModulation.map_symbols", "sdr.LinearModulation.modulate", "sdr.LinearModulation.order", "sdr.LinearModulation.phase_offset", "sdr.LinearModulation.pulse_shape", "sdr.LinearModulation.rx_filter", "sdr.LinearModulation.ser", "sdr.LinearModulation.sps", "sdr.LinearModulation.symbol_map", "sdr.LinearModulation.tx_filter", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__call__", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.MSK", "sdr.MSK.__init__", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__call__", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.reset", "sdr.NCO.step", "sdr.OQPSK", "sdr.OQPSK.__init__", "sdr.OQPSK.__repr__", "sdr.OQPSK.__str__", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.__repr__", "sdr.PSK.__str__", "sdr.PSK.ber", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.PiMPSK", "sdr.PiMPSK.__init__", "sdr.Q", "sdr.Qinv", "sdr.ReplicaCorrelator", "sdr.ReplicaCorrelator.p_d", "sdr.ReplicaCorrelator.p_fa", "sdr.ReplicaCorrelator.roc", "sdr.ReplicaCorrelator.threshold", "sdr.Resampler", "sdr.Resampler.__call__", "sdr.Resampler.__init__", "sdr.Resampler.__repr__", "sdr.Resampler.__str__", "sdr.Resampler.delay", "sdr.Resampler.down", "sdr.Resampler.method", "sdr.Resampler.polyphase_taps", "sdr.Resampler.rate", "sdr.Resampler.reset", "sdr.Resampler.taps", "sdr.Resampler.up", "sdr.albersheim", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.barker", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.db", "sdr.design_lowpass_fir", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.downsample", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.evm", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.half_sine", "sdr.hexdump", "sdr.iq_imbalance", "sdr.linear", "sdr.mix", "sdr.multirate_taps", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.percent", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.eye", "sdr.plot.filter", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.magnitude_response", "sdr.plot.p_d", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.phase_tree", "sdr.plot.raster", "sdr.plot.roc", "sdr.plot.ser", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.polyphase_matrix", "sdr.ppb", "sdr.ppm", "sdr.raised_cosine", "sdr.rectangular", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.to_complex_bb", "sdr.to_real_pb", "sdr.unpack", "sdr.upsample", "sdr.wavelength", "sdr.zadoff_chu", "Sequences", "Simulation", "Synchronization", "Documentation", "Formatting", "Installation", "Unit Tests", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270], "db": [0, 4, 5, 9, 20, 22, 40, 42, 44, 46, 47, 48, 50, 111, 121, 134, 144, 148, 152, 154, 156, 161, 163, 178, 179, 180, 181, 189, 190, 195, 196, 197, 198, 199, 200, 202, 203, 207, 208, 210, 212, 213, 214, 215, 217, 218, 224, 231, 243, 246, 247, 264, 266, 267, 269], "x": [0, 1, 3, 5, 6, 7, 8, 9, 26, 27, 37, 39, 44, 46, 51, 52, 68, 69, 75, 77, 94, 96, 97, 107, 114, 116, 125, 128, 134, 144, 148, 156, 158, 159, 160, 165, 166, 179, 180, 183, 186, 188, 189, 191, 192, 193, 194, 197, 200, 201, 207, 208, 209, 211, 212, 214, 215, 216, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 234, 235, 239, 240, 243, 245, 250, 251, 255, 259, 264, 265, 266, 270], "arraylik": [0, 1, 2, 3, 4, 5, 6, 7, 8, 26, 27, 28, 37, 39, 40, 41, 42, 43, 44, 46, 51, 52, 53, 68, 72, 75, 76, 77, 78, 94, 96, 97, 98, 107, 108, 111, 113, 114, 115, 116, 121, 134, 135, 144, 145, 148, 149, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 178, 181, 183, 184, 186, 187, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 206, 208, 211, 213, 216, 220, 221, 222, 223, 224, 225, 226, 227, 230, 232, 233, 237, 238, 239, 240, 246, 247, 250, 252, 255], "ndarrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 26, 27, 33, 36, 37, 39, 40, 41, 42, 43, 44, 49, 51, 52, 58, 59, 60, 61, 64, 65, 67, 68, 69, 74, 75, 77, 81, 82, 83, 84, 86, 88, 90, 91, 93, 94, 96, 97, 103, 106, 107, 111, 113, 114, 115, 116, 119, 121, 123, 125, 128, 134, 136, 138, 143, 144, 148, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 228, 229, 231, 234, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], "float_": [0, 2, 3, 4, 5, 6, 7, 8, 39, 40, 41, 42, 43, 44, 49, 107, 111, 119, 121, 134, 138, 144, 148, 152, 154, 156, 158, 159, 160, 161, 162, 163, 164, 178, 181, 184, 187, 189, 190, 195, 196, 197, 198, 199, 202, 203, 205, 208, 210, 213, 216, 217, 231, 239, 240, 241, 242, 244, 246, 247, 248, 249, 252], "convert": [0, 3, 107, 113, 115, 134, 144, 148, 156, 189, 195, 196, 198, 199, 206, 208, 216, 238, 239, 240, 246, 247, 248, 249], "linear": [0, 96, 98, 102, 107, 108, 134, 144, 148, 156, 165, 167, 172, 180, 189, 208, 225, 230, 232, 234, 268, 269], "unit": [0, 26, 37, 51, 65, 75, 91, 94, 96, 125, 135, 136, 145, 149, 157, 165, 180, 181, 189, 191, 192, 208, 233, 235, 259, 262, 263, 265, 268, 269], "percent": [0, 216, 269], "percentag": [0, 216], "ppm": [0, 240, 245, 255, 269], "part": [0, 235, 239, 240, 245, 265], "per": [0, 1, 27, 52, 97, 107, 108, 112, 114, 116, 122, 134, 135, 138, 144, 145, 148, 149, 156, 157, 180, 181, 195, 196, 198, 199, 201, 203, 205, 206, 211, 218, 219, 228, 239, 240, 241, 242, 244, 245, 246, 247, 250, 258, 264, 267, 269], "million": [0, 240, 245], "ppb": [0, 239, 269], "billion": [0, 239], "ebn0_to_esn0": [0, 121, 154, 195, 266, 269], "ebn0": [0, 7, 107, 111, 134, 144, 148, 152, 156, 181, 195, 196, 217, 266], "bp": [0, 107, 112, 134, 144, 148, 156, 195, 196, 198, 246, 266], "int": [0, 1, 3, 6, 7, 26, 28, 31, 34, 37, 44, 46, 47, 50, 51, 54, 57, 59, 60, 61, 62, 65, 68, 71, 75, 83, 84, 86, 87, 91, 94, 96, 98, 101, 104, 107, 108, 112, 117, 122, 134, 135, 136, 143, 144, 145, 148, 149, 156, 157, 165, 167, 170, 171, 177, 179, 180, 182, 183, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 203, 204, 205, 206, 210, 211, 212, 214, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 232, 233, 238, 241, 242, 244, 246, 247, 250, 251, 253, 254, 266], "ebn0_to_snr": [0, 134, 144, 148, 156, 196, 269], "esn0_to_ebn0": [0, 111, 152, 198, 269], "esn0": [0, 7, 107, 121, 134, 144, 148, 154, 156, 198, 199, 231, 266], "esn0_to_snr": [0, 199, 266, 269], "sp": [0, 6, 7, 107, 108, 114, 116, 122, 134, 135, 144, 145, 148, 149, 156, 157, 196, 199, 203, 205, 219, 228, 241, 242, 244, 246, 247, 248, 249, 264, 266, 267], "1": [0, 3, 6, 8, 9, 16, 19, 23, 25, 26, 28, 29, 30, 33, 36, 37, 39, 40, 42, 43, 44, 51, 54, 55, 56, 57, 59, 60, 75, 76, 79, 80, 83, 84, 94, 96, 97, 98, 99, 100, 103, 106, 107, 108, 113, 114, 115, 116, 123, 125, 129, 130, 134, 135, 136, 139, 144, 145, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 270], "snr_to_ebn0": [0, 111, 152, 181, 246, 269], "snr": [0, 2, 4, 7, 39, 40, 42, 44, 46, 47, 48, 49, 50, 134, 144, 148, 156, 178, 180, 181, 224, 246, 247, 248, 249, 255, 266, 269], "snr_to_esn0": [0, 121, 154, 247, 269], "pack": [1, 44, 46, 134, 144, 148, 156, 206, 211, 268, 269], "bpe": [1, 211, 250], "int_": [1, 6, 107, 113, 114, 134, 144, 148, 156, 183, 185, 186, 191, 192, 193, 204, 211, 250, 255], "binari": [1, 4, 6, 135, 145, 149, 155, 157, 182, 183, 184, 185, 186, 187, 193, 211, 234, 250, 255, 266, 268, 269], "arrai": [1, 33, 36, 44, 98, 103, 106, 108, 134, 135, 136, 144, 145, 148, 149, 155, 156, 157, 167, 173, 176, 179, 182, 183, 185, 186, 191, 192, 193, 197, 204, 211, 212, 214, 235, 238, 250, 263], "an": [1, 2, 3, 4, 26, 37, 39, 51, 61, 75, 76, 78, 86, 94, 95, 96, 97, 108, 135, 136, 145, 149, 152, 154, 157, 160, 165, 181, 211, 217, 222, 231, 250, 252, 259, 268, 269], "multipl": [1, 211, 250, 266, 269], "bit": [1, 5, 7, 44, 46, 49, 107, 111, 112, 134, 135, 144, 145, 148, 149, 152, 155, 156, 157, 181, 183, 184, 186, 187, 195, 196, 198, 206, 211, 217, 246, 250, 268, 269], "element": [1, 206, 211, 250], "unpack": [1, 44, 46, 206, 250, 266, 268, 269], "hexdump": [1, 44, 206, 268, 269], "byte": [1, 206], "width": [1, 206], "16": [1, 152, 154, 155, 169, 195, 196, 198, 200, 206, 217, 231, 238, 241, 244, 246, 247, 264, 269], "str": [1, 26, 29, 30, 37, 51, 55, 56, 75, 79, 80, 94, 96, 99, 100, 107, 109, 110, 134, 144, 146, 147, 148, 150, 151, 156, 165, 168, 169, 206, 219, 225, 228, 229, 232], "return": [1, 6, 9, 17, 19, 22, 23, 26, 27, 29, 30, 37, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 65, 69, 75, 77, 79, 80, 83, 84, 86, 91, 94, 96, 97, 99, 100, 107, 109, 110, 111, 113, 114, 115, 116, 121, 128, 134, 138, 143, 144, 146, 147, 148, 150, 151, 152, 154, 156, 158, 159, 161, 162, 163, 164, 165, 168, 169, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 262, 263, 264, 266, 269], "specifi": [1, 44, 47, 48, 50, 180, 181, 193, 206, 257, 262, 263, 269], "class": [2, 3, 5, 6, 9, 26, 37, 39, 44, 46, 47, 48, 49, 50, 51, 68, 75, 94, 96, 107, 125, 134, 136, 144, 148, 156, 160, 165, 256, 262, 263, 266, 268, 269], "replicacorrel": [2, 160, 161, 162, 163, 164, 269], "implement": [2, 3, 6, 26, 37, 39, 51, 68, 75, 94, 96, 107, 125, 131, 134, 136, 144, 148, 156, 160, 165, 178, 256, 261], "clairvoy": [2, 160], "replica": [2, 160], "correl": [2, 160, 182, 253], "energydetector": [2, 39, 40, 41, 42, 43, 269], "energi": [2, 39, 111, 121, 152, 154, 160, 161, 162, 163, 164, 181, 195, 196, 197, 198, 199, 203, 205, 217, 231, 241, 242, 244, 246, 247, 268, 269], "albersheim": [2, 178, 269], "p_d": [2, 7, 39, 40, 42, 160, 161, 163, 178, 224, 230, 269], "p_fa": [2, 7, 39, 40, 41, 42, 43, 160, 161, 162, 163, 164, 178, 230], "estim": [2, 9, 107, 113, 114, 134, 144, 148, 156, 178, 225, 232, 265], "minimum": [2, 6, 134, 178, 269], "requir": [2, 27, 52, 97, 178, 257, 258, 259, 260, 269], "singl": [2, 42, 152, 154, 178], "sampl": [2, 3, 9, 16, 24, 26, 27, 31, 37, 40, 41, 42, 43, 51, 52, 57, 59, 60, 61, 65, 68, 72, 83, 84, 86, 91, 96, 97, 98, 101, 107, 108, 114, 116, 122, 125, 129, 132, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 148, 149, 156, 157, 165, 167, 170, 178, 180, 194, 196, 199, 201, 203, 205, 209, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 232, 233, 235, 241, 242, 244, 245, 246, 247, 248, 249, 251, 255, 261, 264, 265, 267, 268, 269], "given": [2, 39, 44, 46, 47, 48, 50, 68, 69, 160, 178, 200, 262, 263], "n_": [2, 40, 41, 42, 43, 178], "nc": [2, 40, 41, 42, 43, 178], "non": [2, 27, 40, 41, 42, 43, 52, 97, 178, 205, 242], "coher": [2, 40, 41, 42, 43, 178], "combin": [2, 178], "achiev": [2, 3, 178, 210, 238, 266, 267], "probabl": [2, 7, 39, 40, 41, 42, 43, 158, 159, 160, 161, 162, 163, 164, 178, 183, 184, 186, 187, 193, 224, 230, 255, 269], "fals": [2, 5, 26, 28, 29, 30, 37, 38, 39, 40, 41, 42, 43, 51, 53, 55, 56, 68, 70, 75, 76, 78, 79, 80, 94, 95, 96, 97, 98, 99, 100, 134, 144, 148, 152, 154, 156, 160, 161, 162, 163, 164, 165, 167, 168, 169, 178, 179, 183, 186, 193, 197, 209, 214, 215, 218, 225, 230, 232, 235, 243, 263, 267], "alarm": [2, 39, 40, 41, 42, 43, 160, 161, 162, 163, 164, 178, 230], "p_": [2, 7, 39, 40, 41, 42, 43, 152, 154, 160, 161, 162, 163, 164, 178, 179, 180, 189, 193, 200, 208, 212, 214, 217, 225, 230, 231], "fa": [2, 7, 39, 40, 41, 42, 43, 160, 161, 162, 163, 164, 178, 230], "thi": [2, 9, 26, 46, 47, 48, 50, 51, 75, 96, 98, 107, 108, 123, 134, 138, 144, 145, 148, 149, 155, 156, 157, 165, 167, 178, 180, 181, 183, 186, 193, 194, 200, 202, 210, 219, 223, 225, 229, 232, 235, 251, 257, 259, 260, 261, 263, 265, 266, 267], "function": [2, 7, 8, 9, 18, 37, 51, 75, 76, 94, 125, 158, 159, 178, 181, 194, 203, 217, 224, 225, 230, 231, 232, 251, 262, 263, 265, 267, 268, 269], "": [2, 3, 7, 9, 17, 19, 20, 21, 23, 24, 26, 37, 39, 46, 47, 48, 49, 50, 51, 59, 60, 65, 75, 83, 84, 91, 94, 96, 107, 108, 113, 114, 115, 116, 134, 144, 148, 156, 160, 162, 164, 165, 178, 180, 181, 196, 199, 200, 201, 207, 218, 219, 220, 221, 223, 225, 226, 227, 228, 229, 232, 233, 235, 236, 245, 246, 247, 248, 249, 260, 261, 264, 266, 268, 269], "equat": [2, 17, 19, 20, 21, 22, 23, 40, 41, 43, 75, 144, 148, 156, 161, 162, 164, 178, 202], "finit": [3, 51, 268, 269], "impuls": [3, 7, 26, 37, 51, 61, 75, 86, 94, 96, 165, 190, 203, 220, 222, 235, 267, 268, 269], "respons": [3, 7, 26, 37, 51, 59, 60, 61, 65, 75, 83, 84, 86, 91, 94, 96, 165, 190, 203, 220, 221, 222, 223, 227, 233, 267, 268, 269], "differenti": [3, 6, 37, 38, 134, 152, 154, 191, 192, 235, 268, 269], "design_lowpass_fir": [3, 190], "order": [3, 9, 26, 27, 30, 37, 44, 49, 51, 52, 56, 62, 68, 71, 75, 80, 87, 94, 96, 97, 98, 100, 107, 108, 117, 125, 129, 134, 144, 148, 149, 156, 157, 165, 167, 169, 180, 190, 195, 196, 198, 200, 201, 203, 218, 219, 228, 229, 241, 244, 245, 246, 256, 263, 264, 265, 266, 269], "design": [3, 26, 28, 32, 96, 98, 102, 108, 145, 149, 157, 165, 167, 172, 190, 210, 257, 268, 269], "lowpass": [3, 190], "h": [3, 7, 26, 37, 39, 51, 53, 55, 56, 59, 60, 61, 75, 83, 84, 86, 94, 96, 107, 108, 119, 120, 124, 125, 134, 144, 145, 148, 149, 156, 157, 160, 165, 190, 203, 210, 219, 220, 222, 223, 227, 238, 264, 265, 267], "n": [3, 5, 6, 7, 8, 9, 26, 27, 37, 39, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 69, 75, 77, 78, 81, 83, 84, 86, 87, 91, 94, 96, 97, 107, 108, 114, 116, 119, 120, 124, 125, 128, 134, 136, 138, 143, 144, 145, 148, 149, 156, 157, 158, 159, 160, 162, 164, 165, 166, 179, 180, 181, 182, 185, 188, 190, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 207, 209, 210, 212, 214, 215, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 232, 233, 235, 243, 245, 246, 247, 248, 249, 251, 253, 254, 255, 265, 267, 268], "us": [3, 7, 26, 28, 32, 35, 37, 38, 51, 53, 58, 63, 68, 70, 75, 76, 78, 89, 94, 95, 96, 97, 98, 102, 105, 107, 108, 113, 114, 125, 131, 134, 144, 145, 148, 149, 156, 157, 165, 167, 172, 175, 181, 184, 187, 190, 200, 206, 210, 211, 218, 219, 220, 222, 224, 225, 232, 233, 250, 257, 258, 259, 260, 262, 263, 266, 267, 268, 270], "window": [3, 26, 96, 165, 190, 225, 232], "method": [3, 7, 30, 32, 98, 100, 102, 167, 169, 172, 190, 225, 232, 262, 263, 269], "infinit": [3, 75, 268, 269], "integr": [3, 9, 14, 40, 41, 42, 43, 94, 95, 125, 127, 129, 178, 256, 260, 263, 268, 269], "interpol": [3, 26, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 124, 134, 144, 148, 156, 165, 167, 177, 210, 219, 238, 251, 264, 266, 268, 269], "polyphas": [3, 26, 27, 28, 33, 36, 96, 97, 98, 103, 106, 165, 166, 167, 173, 176, 194, 210, 238, 251, 268, 269], "decim": [3, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 107, 108, 113, 114, 115, 116, 120, 123, 134, 135, 144, 145, 148, 149, 155, 156, 157, 165, 167, 171, 194, 210, 238, 266, 268, 269], "ration": [3, 165, 167, 210, 238, 269], "multirate_tap": [3, 28, 98, 167, 210, 269], "up": [3, 165, 167, 177, 202, 210, 238, 258], "down": [3, 165, 167, 171, 210, 238], "comput": [3, 8, 26, 39, 40, 41, 42, 43, 107, 111, 121, 134, 144, 148, 152, 154, 156, 158, 159, 160, 161, 162, 163, 164, 179, 180, 197, 202, 210, 212, 214, 262, 263, 265, 267, 269], "p": [3, 4, 8, 136, 138, 158, 159, 165, 167, 173, 174, 176, 177, 183, 184, 186, 187, 193, 210, 238, 255], "q": [3, 8, 134, 144, 158, 159, 160, 161, 162, 164, 165, 167, 171, 174, 210, 238, 253, 269], "polyphase_matrix": [3, 238, 269], "tap": [3, 26, 28, 33, 36, 37, 51, 56, 67, 68, 74, 75, 81, 82, 94, 96, 98, 103, 106, 165, 167, 173, 176, 238, 262, 263], "h_i": [3, 26, 28, 33, 36, 37, 51, 53, 67, 96, 98, 103, 106, 165, 167, 173, 176, 238, 262], "matrix": [3, 193, 238, 255], "h_": [3, 9, 26, 33, 36, 96, 103, 106, 165, 173, 176, 238, 265], "i": [3, 9, 16, 25, 26, 27, 28, 33, 36, 37, 39, 41, 42, 43, 44, 49, 51, 52, 53, 61, 65, 66, 67, 68, 73, 75, 78, 82, 86, 91, 92, 94, 96, 97, 98, 103, 106, 108, 125, 129, 130, 132, 134, 138, 142, 144, 145, 148, 149, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 173, 176, 178, 179, 180, 181, 183, 184, 186, 187, 189, 190, 193, 195, 196, 197, 198, 199, 201, 202, 203, 205, 206, 207, 208, 211, 212, 213, 214, 215, 218, 219, 220, 222, 223, 225, 229, 232, 233, 235, 238, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270], "j": [3, 26, 33, 36, 75, 78, 81, 94, 96, 103, 106, 134, 136, 144, 148, 156, 165, 173, 176, 180, 193, 207, 209, 238, 253, 262, 263, 265], "farrowresampl": [3, 68, 69, 70, 71, 72, 73, 74, 261, 269], "cubic": [3, 68], "farrow": [3, 68, 69, 70, 71, 72, 73, 74, 268, 269], "mix": [3, 209, 268, 269], "freq": [3, 4, 136, 138, 201, 202, 209, 213, 252, 255, 261, 265], "float": [3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 42, 44, 46, 47, 48, 50, 59, 60, 68, 69, 75, 76, 83, 84, 85, 94, 107, 108, 118, 125, 126, 127, 129, 130, 132, 134, 135, 136, 137, 139, 140, 141, 144, 145, 148, 149, 153, 156, 157, 163, 165, 174, 179, 180, 181, 183, 186, 188, 190, 200, 201, 203, 207, 209, 210, 212, 214, 215, 218, 219, 220, 221, 223, 225, 226, 227, 228, 229, 232, 234, 235, 241, 243, 244, 245, 255], "0": [3, 6, 8, 16, 26, 27, 33, 36, 37, 39, 42, 44, 51, 52, 53, 55, 56, 59, 60, 67, 75, 76, 78, 79, 80, 81, 82, 83, 84, 94, 96, 97, 98, 103, 106, 107, 108, 113, 114, 115, 116, 123, 129, 134, 135, 136, 139, 144, 145, 148, 149, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 199, 200, 201, 202, 203, 204, 207, 208, 209, 211, 213, 216, 218, 219, 220, 221, 222, 223, 226, 227, 228, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 270], "time": [3, 5, 9, 16, 17, 19, 20, 21, 22, 23, 37, 51, 75, 94, 125, 129, 144, 148, 156, 179, 180, 188, 190, 193, 194, 197, 199, 201, 203, 207, 209, 212, 214, 215, 219, 220, 225, 229, 232, 235, 241, 243, 244, 245, 247, 248, 249, 251, 255, 261, 262, 263, 267, 268, 269], "domain": [3, 5, 179, 180, 188, 190, 194, 197, 201, 207, 209, 212, 214, 215, 220, 225, 229, 232, 235, 243, 245, 248, 249, 251, 255, 268, 269], "complex": [3, 5, 7, 39, 40, 41, 42, 43, 107, 108, 113, 114, 115, 116, 123, 134, 135, 136, 138, 143, 144, 145, 148, 149, 155, 156, 157, 160, 161, 162, 163, 164, 180, 181, 194, 200, 207, 209, 218, 219, 229, 234, 235, 248, 249, 251, 255, 261, 262, 263, 265, 266, 268, 269], "exponenti": [3, 194, 209, 248, 249, 251, 261, 262, 263], "real": [3, 40, 41, 43, 134, 144, 158, 159, 161, 162, 164, 180, 209, 219, 229, 235, 248, 249, 261, 262, 263, 265, 268, 269], "sinusoid": [3, 148, 180, 209, 248, 249, 263, 269], "to_complex_bb": [3, 248, 269], "x_r": [3, 248, 249], "complex_": [3, 7, 107, 114, 115, 116, 123, 134, 136, 138, 143, 144, 148, 155, 156, 218, 234, 248, 249, 253, 254], "passband": [3, 203, 205, 241, 242, 244, 248, 249, 264, 269], "center": [3, 205, 235, 242, 248, 249, 269], "f_": [3, 9, 16, 24, 27, 59, 60, 83, 84, 97, 107, 108, 122, 134, 135, 144, 145, 148, 149, 156, 157, 190, 194, 196, 199, 201, 203, 209, 219, 220, 221, 223, 225, 226, 227, 228, 229, 232, 235, 245, 246, 247, 248, 249, 251, 261, 262, 263, 265, 267], "r": [3, 26, 27, 28, 33, 34, 36, 68, 69, 96, 97, 98, 103, 104, 106, 181, 194, 195, 196, 198, 200, 203, 209, 241, 244, 246, 248, 249, 251, 257, 258, 259, 260, 263, 264, 265, 267], "4": [3, 7, 17, 19, 26, 33, 36, 37, 40, 42, 44, 60, 79, 80, 84, 94, 96, 97, 103, 106, 134, 135, 136, 144, 145, 148, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 168, 169, 173, 176, 178, 180, 181, 182, 184, 185, 187, 190, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 231, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 259, 261, 263, 264, 266], "rate": [3, 5, 7, 9, 16, 24, 26, 27, 28, 30, 34, 44, 45, 46, 48, 49, 59, 60, 68, 69, 83, 84, 96, 97, 98, 100, 104, 107, 111, 121, 134, 144, 148, 152, 154, 156, 165, 166, 167, 169, 171, 174, 177, 194, 195, 196, 198, 201, 209, 210, 217, 219, 220, 221, 223, 225, 226, 227, 228, 229, 231, 232, 235, 238, 245, 246, 248, 249, 251, 255, 268, 269], "baseband": [3, 7, 9, 134, 144, 148, 156, 209, 219, 228, 248, 249, 264, 265, 269], "x_c": [3, 248, 249], "c": [3, 9, 17, 19, 20, 21, 22, 23, 46, 47, 48, 49, 50, 107, 108, 123, 125, 134, 144, 148, 155, 156, 181, 184, 187, 202, 213, 234, 248, 249, 252, 265], "2": [3, 6, 7, 9, 17, 19, 22, 26, 29, 30, 33, 36, 37, 39, 40, 41, 42, 43, 44, 51, 55, 56, 57, 59, 60, 79, 80, 83, 84, 94, 96, 97, 99, 100, 103, 106, 107, 108, 117, 134, 136, 144, 145, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 257, 260, 261, 262, 263, 264, 265, 266, 267], "to_real_pb": [3, 249, 264, 269], "2f_": [3, 249], "upsampl": [3, 96, 165, 251, 269], "factor": [3, 5, 9, 16, 25, 108, 125, 129, 130, 145, 149, 157, 188, 194, 251, 265], "downsampl": [3, 194, 269], "bsc_capac": [4, 187, 269], "calcul": [4, 5, 181, 184, 187, 200, 202, 213, 252, 269], "symmetr": [4, 186, 187, 193, 248, 249, 255, 268], "bsc": [4, 186, 187, 193, 255, 268, 269], "bec_capac": [4, 184, 269], "erasur": [4, 183, 184, 193, 255, 268], "bec": [4, 183, 184, 193, 255, 268, 269], "awgn_capac": [4, 181, 269], "addit": [4, 180, 181, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 251, 255, 268], "white": [4, 180, 181, 255, 268], "gaussian": [4, 6, 37, 94, 180, 181, 203, 255, 268, 269], "nois": [4, 9, 10, 11, 16, 22, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 111, 121, 125, 129, 132, 134, 144, 148, 152, 154, 156, 160, 161, 162, 163, 164, 180, 181, 195, 196, 198, 199, 217, 231, 246, 247, 255, 265, 268], "awgn": [4, 134, 144, 148, 152, 154, 156, 180, 181, 200, 217, 218, 231, 248, 249, 255, 266, 268, 269], "fspl": [4, 202], "distanc": [4, 202], "free": [4, 134, 144, 148, 156, 202, 268], "space": [4, 60, 84, 202, 268], "wavelength": [4, 252, 269], "lambda": [4, 202, 252], "electromagnet": [4, 252], "wave": [4, 134, 252], "frequenc": [4, 9, 17, 19, 21, 26, 37, 51, 59, 60, 75, 83, 84, 94, 96, 125, 134, 136, 138, 165, 190, 194, 201, 202, 209, 213, 220, 221, 223, 225, 226, 227, 232, 248, 249, 251, 252, 255, 267, 268, 269], "f": [4, 17, 19, 26, 42, 59, 60, 83, 84, 96, 136, 138, 165, 178, 180, 201, 202, 203, 209, 213, 245, 252, 253, 258, 261, 262, 263, 264, 265, 266, 267], "parabolic_antenna": [4, 213, 269], "tupl": [4, 26, 37, 39, 42, 44, 46, 49, 51, 59, 60, 75, 83, 84, 94, 96, 107, 114, 134, 144, 148, 156, 160, 163, 165, 179, 197, 212, 213, 214, 218, 220, 221, 222, 223, 226, 227, 233, 234, 237], "gain": [4, 9, 12, 13, 14, 15, 16, 75, 76, 85, 94, 125, 126, 127, 129, 136, 137, 139, 178, 202, 203, 205, 213, 241, 242, 244, 265, 268], "g": [4, 49, 213, 259], "beamwidth": [4, 213], "theta": [4, 136, 139, 141, 142, 213], "parabol": [4, 213], "reflector": [4, 213], "signal": [5, 7, 9, 17, 19, 22, 23, 26, 27, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 58, 68, 69, 75, 77, 94, 96, 97, 107, 108, 119, 125, 128, 134, 136, 138, 143, 144, 145, 148, 149, 156, 157, 160, 161, 162, 163, 164, 165, 166, 179, 180, 181, 188, 189, 190, 194, 195, 196, 197, 198, 199, 201, 202, 203, 207, 208, 209, 210, 212, 213, 214, 215, 219, 220, 221, 223, 225, 226, 227, 228, 229, 232, 235, 238, 243, 245, 246, 247, 248, 249, 251, 252, 262, 263, 265, 267, 268, 269], "peak_pow": [5, 212, 214, 269], "peak": [5, 134, 144, 156, 188, 200, 212, 214, 215], "average_pow": [5, 179, 212, 269], "averag": [5, 44, 134, 144, 156, 179, 180, 181, 200, 212, 225], "papr": [5, 134, 144, 156, 212, 264, 269], "ratio": [5, 22, 40, 42, 44, 46, 47, 48, 49, 50, 111, 121, 134, 144, 152, 154, 156, 161, 163, 180, 181, 195, 196, 198, 199, 212, 216, 217, 231, 239, 240, 246, 247], "peak_voltag": [5, 188, 215, 269], "bool": [5, 26, 28, 37, 38, 40, 41, 42, 43, 51, 53, 66, 68, 70, 73, 75, 76, 78, 92, 94, 95, 96, 98, 134, 144, 148, 152, 154, 156, 161, 162, 163, 164, 165, 167, 179, 197, 209, 214, 215, 218, 227, 229, 234, 235, 243], "rms_voltag": [5, 188, 243, 269], "root": [5, 6, 108, 145, 149, 157, 200, 219, 235, 243, 244, 253, 254, 262, 268], "mean": [5, 200, 225, 232, 243, 267], "squar": [5, 6, 108, 145, 149, 157, 200, 202, 213, 235, 243, 244, 262], "rm": [5, 188, 200, 243], "crest_factor": [5, 188, 212, 269], "crest": [5, 188], "errorr": [5, 44, 45, 46, 47, 48, 49, 50, 266, 269], "A": [5, 9, 17, 19, 20, 21, 22, 23, 25, 27, 37, 44, 51, 52, 94, 97, 108, 125, 145, 149, 157, 178, 185, 190, 204, 206, 207, 213, 241, 244, 256, 258, 265], "error": [5, 7, 9, 15, 16, 22, 44, 45, 46, 48, 49, 50, 107, 111, 121, 125, 129, 134, 144, 148, 152, 154, 156, 178, 187, 200, 217, 231, 265, 268, 269], "ber": [5, 7, 44, 107, 111, 134, 144, 148, 152, 156, 217, 266, 268, 269], "symbol": [5, 7, 44, 46, 49, 96, 107, 108, 112, 113, 114, 115, 116, 121, 122, 123, 134, 135, 144, 145, 148, 149, 152, 154, 155, 156, 157, 180, 195, 196, 198, 199, 200, 201, 203, 205, 218, 219, 228, 231, 234, 241, 242, 244, 246, 247, 264, 267, 268, 269], "ser": [5, 7, 44, 107, 121, 134, 144, 148, 154, 156, 231, 266, 268, 269], "evm": [5, 200, 268, 269], "x_hat": [5, 7, 44, 46, 107, 114, 134, 144, 148, 156, 200, 218, 266], "ref": [5, 178, 190, 200, 203, 210], "vector": [5, 44, 72, 190, 200, 225, 232, 268, 269], "magnitud": [5, 7, 182, 200, 220, 223, 253, 268, 269], "hat": [5, 7, 46, 107, 113, 114, 134, 144, 148, 156, 200, 218, 234], "k": [5, 6, 7, 46, 107, 108, 112, 113, 114, 115, 116, 117, 134, 144, 148, 149, 156, 157, 191, 192, 195, 196, 198, 200, 218, 234, 246, 264, 267], "linearmodul": [6, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 148, 234, 269], "amplitud": [6, 107, 108, 207, 255, 261, 265], "arbitrari": [6, 68, 69, 70, 71, 72, 73, 74, 107, 268, 269], "psk": [6, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 180, 200, 201, 207, 217, 218, 219, 231, 234, 245, 264, 268, 269], "shift": [6, 134, 144, 148, 152, 153, 154, 155, 156, 253, 262, 263, 268, 269], "kei": [6, 134, 144, 148, 152, 153, 154, 155, 156, 268, 269], "demodul": [6, 107, 114, 134, 144, 148, 156, 266, 269], "pimpsk": [6, 156, 157, 269], "pi": [6, 26, 79, 80, 96, 97, 136, 144, 148, 156, 157, 165, 180, 194, 202, 203, 207, 209, 213, 220, 221, 222, 223, 226, 227, 233, 235, 237, 248, 249, 251, 253, 261, 262, 263, 265, 268, 269], "m": [6, 75, 78, 82, 94, 107, 108, 112, 113, 114, 115, 116, 117, 123, 134, 144, 148, 149, 155, 156, 157, 193, 195, 196, 198, 202, 234, 246, 257, 258, 259, 260, 268, 269], "oqpsk": [6, 134, 144, 145, 146, 147, 269], "offset": [6, 17, 19, 26, 37, 96, 97, 107, 108, 118, 134, 135, 136, 138, 139, 141, 144, 145, 148, 149, 153, 156, 157, 165, 201, 209, 235, 245, 255, 265, 268, 269], "quadratur": [6, 134, 144, 207], "msk": [6, 134, 135, 228, 269], "rectangular": [6, 108, 145, 149, 157, 242, 264, 267, 268, 269], "span": [6, 7, 108, 145, 149, 157, 203, 205, 219, 228, 241, 242, 244, 264, 267], "half_sin": [6, 135, 205, 269], "half": [6, 134, 144, 205, 210, 213, 268, 269], "sine": [6, 134, 205, 268, 269], "time_bandwidth": [6, 203], "raised_cosin": [6, 108, 145, 149, 157, 219, 241, 267, 269], "alpha": [6, 108, 145, 149, 157, 203, 236, 241, 244, 264, 267], "rais": [6, 37, 94, 108, 145, 149, 157, 219, 235, 241, 244, 262, 268], "cosin": [6, 37, 94, 108, 145, 149, 157, 219, 235, 241, 244, 262, 268], "rc": [6, 108, 145, 149, 157, 241], "root_raised_cosin": [6, 37, 55, 56, 94, 108, 145, 149, 157, 219, 220, 221, 222, 223, 226, 227, 233, 235, 237, 244, 262, 264, 266, 267, 269], "srrc": [6, 108, 144, 145, 148, 149, 156, 157, 219, 235, 244, 264], "binary_cod": [6, 185, 269], "gener": [6, 134, 144, 148, 156, 180, 183, 185, 186, 193, 204, 230, 257, 266, 269], "code": [6, 26, 29, 37, 51, 55, 75, 79, 94, 96, 99, 107, 109, 134, 135, 144, 145, 146, 148, 149, 150, 155, 156, 157, 165, 168, 182, 185, 195, 196, 198, 204, 218, 234, 246, 254, 259, 266, 269], "length": [6, 7, 26, 27, 37, 42, 51, 52, 54, 61, 65, 77, 96, 97, 98, 108, 114, 116, 135, 145, 149, 157, 165, 167, 182, 185, 190, 203, 204, 205, 210, 220, 222, 225, 229, 232, 233, 241, 242, 244, 248, 253, 254, 258, 261, 264, 267], "gray_cod": [6, 204, 269], "grai": [6, 134, 135, 144, 145, 148, 149, 155, 156, 157, 204, 218, 234, 266, 268], "diff_encod": [6, 134, 144, 148, 152, 154, 156, 191, 192, 269], "y_prev": [6, 191, 192], "input": [6, 9, 17, 19, 22, 23, 26, 27, 28, 31, 37, 38, 51, 52, 53, 61, 64, 65, 68, 69, 70, 72, 75, 76, 77, 78, 86, 91, 94, 95, 96, 97, 98, 101, 125, 128, 136, 138, 144, 148, 152, 154, 156, 158, 165, 166, 167, 170, 180, 181, 183, 184, 186, 187, 189, 191, 192, 193, 194, 208, 211, 216, 222, 233, 239, 240, 250, 251, 255, 262, 263, 265], "data": [6, 191, 192, 206, 211, 250, 268], "diff_decod": [6, 191, 192, 269], "y": [6, 26, 27, 37, 51, 52, 58, 69, 75, 77, 94, 96, 97, 125, 128, 136, 138, 143, 165, 180, 183, 186, 191, 192, 193, 194, 201, 207, 209, 218, 223, 225, 232, 234, 235, 245, 251, 265, 266], "decod": [6, 191], "use_styl": [7, 236], "appli": [7, 26, 96, 108, 165, 201, 207, 218, 219, 225, 232, 234, 235, 236, 245, 255], "default": [7, 61, 65, 135, 145, 149, 155, 157, 179, 197, 212, 214, 218, 223, 225, 229, 232, 234, 236, 266], "matplotlib": [7, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 261, 262, 263, 264, 265, 266, 267, 268], "rcparam": [7, 236], "time_domain": [7, 26, 37, 94, 96, 97, 134, 136, 144, 148, 156, 165, 180, 194, 209, 235, 248, 249, 251, 264, 266, 267, 269], "raster": [7, 219, 228, 229, 268, 269], "none": [7, 26, 37, 42, 51, 61, 65, 68, 72, 96, 108, 125, 133, 138, 145, 149, 157, 163, 165, 179, 180, 181, 183, 186, 190, 193, 197, 211, 212, 214, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 232, 233, 234, 235, 250, 255, 261, 264, 266], "periodogram": [7, 194, 225, 248, 249, 251, 264, 268, 269], "power": [7, 134, 144, 148, 156, 179, 180, 181, 189, 200, 203, 205, 208, 212, 213, 214, 225, 241, 242, 244, 267, 268], "densiti": [7, 22, 225, 264, 267], "xx": [7, 225], "welch": [7, 225, 232], "spectrogram": [7, 232, 268, 269], "constel": [7, 134, 144, 148, 153, 156, 180, 200, 201, 207, 218, 245, 253, 268, 269], "symbol_map": [7, 107, 108, 123, 134, 144, 148, 153, 155, 156, 200, 234, 235, 266, 269], "map": [7, 107, 108, 115, 123, 134, 144, 148, 155, 156, 200, 234, 268, 269], "ey": [7, 134, 144, 148, 156, 219, 268, 269], "diagram": [7, 9, 26, 37, 94, 96, 125, 136, 165, 191, 192, 219, 268, 269], "phase_tre": [7, 134, 228, 269], "phase": [7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 107, 108, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 152, 153, 154, 155, 156, 157, 178, 201, 207, 209, 226, 227, 228, 255, 268, 269], "tree": [7, 228, 269], "continu": [7, 134, 228, 261, 269], "cpm": [7, 228, 269], "kwarg": [7, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237], "e_b": [7, 46, 47, 48, 49, 50, 107, 111, 134, 144, 148, 152, 156, 181, 195, 196, 198, 217, 246, 268], "n_0": [7, 22, 46, 47, 48, 49, 50, 107, 111, 121, 134, 144, 148, 152, 154, 156, 180, 181, 195, 196, 198, 199, 200, 217, 218, 231, 246, 247, 266, 268], "e_": [7, 46, 47, 48, 49, 50, 107, 121, 134, 144, 148, 154, 156, 180, 181, 195, 198, 199, 200, 218, 231, 247, 266, 268], "roc": [7, 39, 42, 160, 163, 230, 269], "receiv": [7, 39, 40, 42, 44, 46, 107, 113, 114, 120, 134, 144, 148, 152, 154, 156, 160, 161, 162, 163, 164, 200, 202, 219, 224, 230, 269], "oper": [7, 39, 42, 160, 163, 230, 269], "characterist": [7, 39, 42, 160, 163, 230, 269], "curv": [7, 39, 42, 152, 154, 160, 163, 217, 230, 231, 269], "enr": [7, 160, 161, 163, 224], "impulse_respons": [7, 26, 37, 51, 61, 75, 86, 94, 96, 165, 190, 203, 205, 210, 222, 241, 242, 244, 262, 263, 267, 269], "step_respons": [7, 26, 37, 51, 65, 75, 91, 94, 96, 165, 233, 262, 263, 265, 269], "step": [7, 26, 37, 51, 65, 75, 91, 94, 96, 136, 138, 143, 165, 220, 233, 268], "zeros_pol": [7, 237, 263, 269], "zero": [7, 26, 27, 37, 51, 58, 72, 75, 76, 79, 80, 93, 94, 96, 97, 98, 125, 138, 165, 167, 205, 211, 220, 221, 222, 223, 226, 227, 233, 235, 237, 242, 248, 262, 264, 265, 267, 268, 269], "pole": [7, 75, 76, 79, 80, 88, 94, 220, 221, 222, 223, 226, 227, 233, 237, 262, 268], "magnitude_respons": [7, 37, 59, 60, 83, 84, 94, 190, 205, 210, 223, 241, 242, 244, 262, 263, 265, 267, 269], "omega": [7, 26, 37, 51, 59, 60, 75, 83, 84, 94, 96, 136, 139, 140, 142, 165, 220, 221, 223, 226, 227, 265], "phase_respons": [7, 59, 60, 83, 84, 227, 269], "angl": [7, 227, 265], "phase_delai": [7, 226, 269], "delai": [7, 26, 27, 30, 31, 37, 51, 52, 56, 57, 68, 96, 97, 100, 101, 125, 136, 165, 169, 170, 191, 192, 205, 221, 226, 242, 265, 268], "tau_": [7, 226], "phi": [7, 107, 108, 118, 134, 135, 144, 145, 148, 149, 153, 156, 157, 201, 207, 209, 226], "group_delai": [7, 221, 262, 263, 269], "group": [7, 221, 268], "tau_g": [7, 221], "iir": [7, 9, 18, 60, 61, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 125, 131, 220, 221, 222, 223, 226, 227, 233, 237, 262, 265, 268, 269], "complementari": [8, 158, 159], "cumul": [8, 158, 159], "distribut": [8, 158, 159], "standard": [8, 158, 159], "normal": [8, 9, 11, 16, 125, 129, 132, 158, 159, 190, 200, 203, 205, 220, 221, 223, 225, 226, 227, 232, 241, 242, 244, 265, 267], "mathcal": [8, 39, 158, 159, 160, 161, 162, 163, 164, 180, 193], "qinv": [8, 158, 159, 269], "invers": [8, 159], "closedlooppl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 256, 265, 269], "defin": [9, 51, 75, 180, 193, 203, 230, 253, 256, 263, 268], "perform": [9, 27, 52, 97, 152, 154, 194, 251, 253, 256, 262, 263, 266, 268, 269], "close": [9, 16, 18, 256, 268, 269], "loop": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 256, 268, 269], "pll": [9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 256, 268, 269], "meant": 9, "analysi": [9, 16, 258, 265, 268, 269], "onli": [9, 27, 35, 52, 58, 63, 68, 72, 89, 97, 105, 108, 135, 145, 149, 155, 157, 175, 180, 202, 205, 229, 242, 260, 265, 266], "block": [9, 26, 37, 94, 96, 125, 136, 165, 191, 192], "bb": [9, 264, 265], "phase_err": 9, "ped": [9, 15, 16, 129, 265], "lf": [9, 265], "phase_est": 9, "lo": [9, 265], "nco": [9, 12, 16, 129, 136, 137, 138, 139, 140, 141, 142, 143, 256, 265, 268, 269], "local": [9, 257, 265], "oscil": [9, 136, 139, 256, 265, 268, 269], "detector": [9, 15, 16, 39, 129, 160, 265, 269], "filter": [9, 13, 14, 16, 18, 26, 27, 28, 31, 32, 33, 35, 36, 37, 38, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 105, 106, 107, 114, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 144, 148, 156, 165, 166, 167, 170, 172, 173, 175, 176, 190, 194, 203, 205, 210, 219, 220, 221, 222, 223, 226, 227, 233, 235, 237, 238, 241, 242, 244, 251, 256, 267, 268, 269], "numer": [9, 136, 139, 256, 263, 265, 268, 269], "control": [9, 136, 139, 241, 244, 256, 265, 268, 269], "The": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 94, 96, 97, 98, 101, 102, 103, 104, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 259, 260, 262, 263, 265, 266, 267, 268, 270], "transfer": [9, 18, 37, 51, 75, 76, 94, 125, 203, 262, 263, 265], "2nd": [9, 125, 129, 256, 265, 269], "proport": [9, 13, 27, 97, 125, 126, 129, 202, 213, 256, 269], "plu": [9, 125, 129, 256, 269], "z": [9, 37, 51, 75, 94, 125, 136, 191, 192, 253, 262, 263, 265], "k_1": [9, 13, 125, 126, 265], "k_2": [9, 14, 125, 127, 265], "frac": [9, 17, 19, 22, 23, 37, 39, 40, 41, 43, 51, 57, 75, 94, 98, 125, 144, 148, 156, 160, 161, 162, 167, 178, 179, 180, 181, 188, 195, 196, 198, 199, 200, 202, 203, 207, 208, 209, 212, 213, 243, 246, 247, 252, 253, 265], "k_0": [9, 12, 16, 129, 136, 137, 139, 265], "k_p": [9, 15, 16, 129, 265], "refer": [9, 17, 19, 20, 21, 22, 23, 39, 40, 41, 43, 44, 68, 125, 152, 154, 160, 161, 162, 164, 178, 180, 188, 190, 200, 201, 203, 210, 212, 238, 241, 244, 245, 253, 263, 267, 268], "michael": [9, 17, 19, 20, 21, 22, 23, 125, 241, 244], "rice": [9, 17, 19, 20, 21, 22, 23, 125, 241, 244], "digit": [9, 17, 19, 20, 21, 22, 23, 125, 152, 154, 241, 244, 265, 268, 269], "commun": [9, 17, 19, 20, 21, 22, 23, 125, 152, 154, 210, 238, 241, 244, 265, 268], "discret": [9, 17, 19, 20, 21, 22, 23, 37, 94, 125, 180, 193, 199, 241, 244, 247, 255, 261, 265, 268, 269], "approach": [9, 17, 19, 20, 21, 22, 23, 125, 181, 184, 187, 241, 244, 265], "appendix": [9, 125, 241, 244], "lock": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143], "exampl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 33, 35, 36, 37, 38, 40, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 103, 105, 106, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 152, 153, 154, 155, 156, 158, 159, 161, 163, 165, 168, 169, 173, 175, 176, 178, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 265], "see": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 35, 38, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 85, 87, 88, 89, 90, 92, 93, 95, 105, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 153, 155, 156, 165, 175, 190, 194, 203, 205, 220, 221, 222, 223, 226, 227, 233, 237, 241, 242, 244, 268], "noise_bandwidth": [9, 16, 125, 129, 132], "damping_factor": [9, 16, 125, 129, 130], "creat": [9, 16, 26, 28, 37, 38, 44, 45, 51, 53, 68, 70, 75, 76, 78, 94, 95, 96, 97, 98, 107, 108, 125, 129, 134, 135, 136, 139, 144, 145, 148, 149, 153, 156, 157, 165, 167, 180, 182, 200, 201, 209, 235, 245, 248, 249, 253, 261, 265, 267], "object": [9, 16, 26, 29, 30, 37, 44, 45, 51, 55, 56, 75, 79, 80, 94, 96, 99, 100, 107, 108, 109, 110, 134, 135, 144, 145, 146, 147, 148, 149, 150, 151, 156, 157, 165, 168, 169, 220, 221, 222, 223, 226, 227, 233, 237, 265, 269], "phase_lock_tim": [9, 23], "frequency_lock_tim": [9, 17], "freq_offset": [9, 17, 19], "lock_tim": [9, 19, 265], "phase_error_vari": [9, 22], "cn0": [9, 22], "varianc": [9, 22, 39, 41, 43, 162, 164, 180], "steadi": [9, 22], "state": [9, 22, 26, 27, 35, 37, 51, 52, 58, 63, 64, 66, 68, 72, 73, 75, 89, 90, 92, 94, 96, 97, 105, 165, 175, 269], "sample_r": [9, 16, 24, 26, 59, 60, 83, 84, 96, 97, 134, 144, 148, 156, 165, 194, 201, 209, 219, 220, 221, 223, 225, 226, 227, 228, 229, 232, 235, 248, 249, 251, 261, 265, 267], "bnt": [9, 11, 265], "bandwidth": [9, 10, 11, 16, 20, 125, 129, 132, 181, 203, 241, 244, 265, 267], "b_n": [9, 10, 11, 16, 17, 19, 22, 23, 125, 129, 132], "t": [9, 11, 16, 39, 125, 129, 132, 160, 203, 206, 257, 261], "bn": [9, 10], "hz": [9, 10, 16, 17, 19, 22, 59, 60, 83, 84, 125, 129, 132, 181, 189, 194, 201, 202, 203, 208, 209, 213, 248, 249, 252, 261], "zeta": [9, 16, 25, 125, 129, 130], "damp": [9, 16, 25, 125, 129, 130, 265], "k0": [9, 12, 16, 129, 136, 137, 139], "kp": [9, 15, 16, 129], "k1": [9, 13, 125, 126, 265], "k2": [9, 14, 125, 127, 265], "repres": [9, 18, 183, 184], "omega_n": [9, 21, 265], "natur": [9, 21], "radian": [9, 20, 21, 22, 136, 138, 139, 140, 141, 142, 156, 265], "omega_3db": [9, 20], "3": [9, 17, 19, 20, 23, 26, 33, 36, 37, 39, 40, 44, 55, 56, 79, 80, 94, 96, 97, 103, 106, 134, 136, 144, 148, 152, 153, 154, 155, 156, 160, 161, 165, 168, 169, 173, 176, 178, 180, 181, 182, 183, 185, 186, 189, 190, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 218, 219, 220, 221, 222, 223, 226, 227, 233, 235, 237, 238, 241, 242, 244, 245, 246, 248, 249, 250, 251, 252, 253, 257, 258, 263, 265, 267, 268], "omega_": [9, 20], "textrm": [9, 20], "properti": [10, 11, 12, 13, 14, 15, 18, 20, 21, 24, 25, 31, 32, 33, 34, 36, 57, 62, 64, 66, 67, 71, 73, 74, 81, 82, 85, 87, 88, 90, 92, 93, 101, 102, 103, 104, 106, 112, 117, 118, 119, 120, 122, 123, 124, 126, 127, 130, 131, 132, 137, 140, 141, 153, 155, 170, 171, 172, 173, 174, 176, 177, 269], "paramet": [16, 17, 19, 22, 27, 28, 38, 40, 41, 42, 43, 46, 47, 48, 50, 52, 53, 59, 60, 61, 65, 69, 70, 72, 76, 77, 78, 83, 84, 86, 91, 95, 97, 98, 108, 111, 113, 114, 115, 116, 121, 128, 129, 135, 138, 139, 143, 145, 149, 152, 154, 157, 158, 159, 161, 162, 163, 164, 167, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253], "where": [16, 27, 52, 97, 108, 125, 129, 132, 149, 157, 160, 180, 181, 193, 195, 196, 198, 203, 246, 253, 262, 263, 268], "period": [16, 125, 129, 132, 134, 253], "second": [16, 17, 19, 23, 44, 125, 129, 132, 203], "critic": [16, 25, 125, 129, 130, 265], "underdamp": [16, 25, 125, 129, 130], "overdamp": [16, 25, 125, 129, 130], "ted": [16, 129], "t_": [17, 19, 23, 69, 203, 267], "fl": [17, 19], "delta": [17, 19, 26, 37, 51, 61, 75, 86, 94, 96, 165, 222, 262, 263], "take": [17, 19, 23, 257], "onto": [17, 19, 23], "39": 17, "pl": [19, 23], "38": 19, "34": 20, "33": [21, 190], "sigma_": [22, 39, 40, 42], "theta_": 22, "carrier": [22, 148], "43": 22, "40": [23, 96, 165, 194], "less": [25, 178], "than": [25, 134, 135, 145, 149, 155, 157, 178, 205, 207, 218, 234, 242], "greater": [25, 241, 244], "fir": [26, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 96, 97, 98, 99, 100, 101, 103, 105, 106, 165, 166, 167, 168, 169, 170, 173, 175, 176, 190, 210, 219, 220, 221, 222, 223, 226, 227, 233, 237, 238, 264, 268, 269], "note": [26, 33, 36, 37, 39, 40, 41, 43, 51, 75, 94, 96, 103, 106, 125, 134, 136, 144, 148, 156, 160, 161, 162, 164, 165, 173, 176, 178, 180, 181, 184, 187, 191, 192, 203, 207, 213, 219, 238, 253], "equival": [26, 96, 165, 180, 181, 190, 199, 247, 259, 261], "first": [26, 31, 44, 96, 98, 101, 134, 142, 144, 165, 167, 170, 211, 235, 250, 258, 260], "prototyp": [26, 33, 36, 96, 103, 106, 165, 173, 176], "feedforward": [26, 28, 33, 36, 37, 51, 53, 67, 75, 78, 82, 94, 96, 98, 103, 106, 165, 167, 173, 176, 220, 221, 222, 223, 226, 227, 233, 237, 262, 263], "coeffici": [26, 28, 51, 53, 75, 78, 96, 98, 107, 120, 124, 134, 144, 148, 156, 165, 167, 220, 221, 222, 223, 226, 227, 233, 237, 262, 263], "discard": [26, 165], "between": [26, 28, 38, 53, 66, 70, 73, 76, 78, 92, 95, 96, 98, 165, 167, 202, 225, 229, 232, 265, 268], "each": [26, 27, 52, 96, 97, 165, 200, 206, 225, 229, 232], "instead": [26, 96, 165, 218], "decompos": [26, 96, 165], "ar": [26, 27, 28, 33, 36, 38, 39, 44, 46, 47, 48, 50, 52, 53, 60, 70, 76, 78, 84, 95, 96, 97, 98, 103, 106, 107, 108, 120, 124, 134, 135, 144, 145, 148, 149, 156, 157, 160, 165, 167, 173, 176, 181, 183, 184, 186, 187, 202, 205, 211, 218, 219, 220, 221, 223, 225, 226, 227, 228, 229, 232, 234, 235, 236, 238, 242, 248, 249, 257, 259, 261, 263, 265, 267, 268, 270], "commut": [26, 96, 165], "parallel": [26, 96, 165], "output": [26, 27, 31, 37, 51, 52, 61, 65, 75, 76, 78, 86, 91, 94, 95, 96, 97, 98, 101, 114, 125, 128, 136, 138, 142, 143, 165, 167, 170, 180, 181, 182, 183, 184, 186, 187, 192, 193, 200, 208, 211, 222, 233, 250, 254, 257, 261, 262, 263, 265], "sum": [26, 39, 51, 75, 160, 267], "prevent": [26, 96, 144, 156, 165], "need": [26, 96, 165, 257, 258, 260], "done": [26, 257], "case": [26, 96, 156, 160, 165], "3x": [26, 96], "6": [26, 33, 36, 37, 44, 55, 56, 79, 80, 94, 96, 97, 103, 106, 134, 136, 144, 148, 155, 156, 161, 162, 164, 165, 173, 176, 178, 185, 189, 193, 194, 195, 196, 200, 202, 204, 206, 208, 213, 218, 219, 220, 221, 222, 223, 226, 227, 233, 234, 235, 237, 238, 241, 244, 248, 249, 251, 253, 257, 258, 259, 260, 262, 263, 265, 266], "9": [26, 33, 36, 96, 97, 103, 106, 134, 144, 148, 156, 161, 165, 173, 176, 178, 185, 193, 200, 204, 206, 238, 241, 244, 257, 263, 264, 266, 267], "v": [26, 136, 189, 208, 257], "5": [26, 33, 36, 37, 39, 40, 41, 42, 43, 44, 55, 56, 94, 96, 97, 103, 106, 134, 136, 144, 148, 156, 161, 163, 165, 173, 176, 178, 180, 183, 185, 186, 187, 190, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 206, 207, 213, 216, 219, 220, 221, 222, 223, 226, 227, 233, 235, 237, 238, 241, 244, 245, 246, 247, 248, 249, 251, 253, 257, 261, 262, 263, 264, 265, 266, 267], "7": [26, 29, 30, 33, 36, 96, 97, 99, 100, 103, 106, 134, 144, 148, 155, 156, 161, 165, 173, 176, 178, 185, 193, 200, 204, 206, 210, 235, 238, 253, 257, 263], "8": [26, 33, 36, 37, 40, 42, 79, 80, 94, 96, 97, 103, 106, 108, 134, 135, 136, 144, 145, 148, 149, 152, 153, 154, 155, 156, 157, 161, 163, 165, 173, 176, 178, 180, 181, 182, 184, 185, 187, 190, 193, 194, 200, 202, 203, 204, 205, 206, 209, 210, 213, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 231, 233, 234, 235, 236, 237, 238, 241, 242, 244, 248, 249, 251, 253, 262, 263, 264, 265, 267], "summat": 26, "bottom": [26, 96, 165], "top": [26, 96, 165], "adder": [26, 125, 136, 191, 192, 265], "relat": [26, 33, 36, 96, 103, 106, 165, 173, 176, 181, 203], "In": [26, 27, 28, 29, 30, 33, 36, 37, 38, 40, 42, 44, 52, 53, 55, 56, 66, 70, 73, 76, 78, 79, 80, 92, 94, 95, 96, 97, 98, 99, 100, 103, 106, 134, 136, 144, 148, 152, 153, 154, 155, 156, 158, 159, 161, 163, 165, 167, 168, 169, 173, 176, 178, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 261, 266], "np": [26, 33, 36, 40, 42, 79, 80, 96, 97, 103, 106, 107, 119, 123, 134, 136, 144, 148, 152, 154, 155, 156, 161, 163, 165, 173, 176, 178, 180, 181, 182, 183, 184, 186, 187, 193, 194, 200, 201, 202, 207, 209, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 231, 233, 235, 237, 238, 245, 248, 249, 251, 253, 261, 262, 263, 264, 265, 266, 267], "co": [26, 96, 97, 165, 209], "64": [26, 206, 263], "arang": [26, 33, 36, 96, 97, 103, 106, 165, 173, 176, 180, 182, 194, 209, 238, 248, 249, 251, 253, 261, 265], "280": 26, "kaiser": [26, 28, 29, 30, 32, 96, 97, 98, 99, 100, 102, 165, 167, 168, 169, 172, 190], "out": [26, 29, 33, 36, 44, 55, 79, 96, 97, 99, 103, 106, 134, 144, 148, 153, 155, 156, 158, 159, 165, 168, 173, 176, 182, 183, 185, 186, 189, 191, 192, 193, 195, 196, 198, 199, 200, 202, 204, 208, 211, 213, 216, 221, 236, 238, 239, 240, 246, 247, 250, 252], "plt": [26, 37, 40, 42, 94, 96, 97, 134, 136, 144, 148, 152, 153, 154, 155, 156, 161, 163, 165, 178, 180, 181, 182, 184, 187, 190, 194, 200, 201, 202, 203, 205, 207, 209, 210, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 231, 233, 234, 235, 237, 241, 242, 244, 245, 248, 249, 251, 253, 261, 262, 263, 264, 265, 266, 267], "figur": [26, 37, 40, 42, 94, 96, 97, 134, 136, 144, 148, 152, 153, 154, 155, 156, 161, 163, 165, 178, 180, 181, 182, 184, 187, 190, 194, 200, 201, 202, 203, 205, 207, 209, 210, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 231, 233, 234, 235, 236, 237, 241, 242, 244, 245, 248, 249, 251, 253, 261, 262, 263, 264, 265, 266, 267], "figsiz": [26, 37, 40, 42, 94, 96, 97, 134, 136, 144, 148, 152, 153, 154, 155, 156, 161, 163, 165, 178, 180, 181, 182, 184, 187, 190, 194, 200, 201, 202, 203, 205, 207, 209, 210, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 231, 233, 234, 235, 236, 237, 241, 242, 244, 245, 248, 249, 251, 253, 261, 262, 263, 264, 265, 266, 267], "plot": [26, 37, 40, 42, 59, 60, 61, 65, 83, 84, 86, 91, 94, 96, 97, 134, 136, 144, 148, 152, 153, 154, 155, 156, 161, 163, 165, 180, 181, 182, 184, 187, 190, 194, 200, 201, 202, 203, 205, 207, 209, 210, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 241, 242, 244, 245, 248, 249, 251, 253, 261, 262, 263, 265, 266, 267, 268, 269], "marker": [26, 96, 97, 136, 165, 218, 234, 261, 262, 263, 266], "label": [26, 37, 40, 42, 94, 96, 97, 135, 145, 149, 152, 154, 157, 161, 163, 165, 178, 180, 190, 200, 201, 203, 207, 217, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 235, 241, 244, 245, 261, 264, 265, 266, 267], "o": [26, 96, 97, 165, 261], "titl": [26, 37, 94, 96, 134, 136, 144, 152, 154, 165, 178, 180, 181, 182, 184, 187, 194, 200, 201, 207, 209, 217, 231, 235, 245, 248, 249, 251, 253, 261, 264, 265, 266, 267], "tight_layout": [26, 37, 94, 96, 134, 136, 144, 152, 154, 165, 178, 180, 181, 182, 184, 187, 194, 200, 201, 202, 209, 217, 231, 235, 245, 248, 249, 251, 253, 264, 265, 266, 267], "preserv": [26, 28, 38, 53, 66, 70, 73, 76, 78, 92, 95, 96, 98, 165, 167, 219, 229], "call": [26, 27, 28, 38, 52, 53, 66, 70, 73, 76, 78, 92, 95, 96, 97, 98, 165, 167], "true": [26, 40, 41, 42, 43, 96, 97, 134, 144, 148, 152, 154, 156, 161, 162, 163, 164, 165, 178, 179, 181, 183, 184, 186, 187, 193, 197, 202, 209, 214, 215, 218, 227, 229, 234, 236, 243, 264, 266], "y1": [26, 96, 97, 165, 207], "70": [26, 206, 267], "y2": [26, 96, 97, 165, 207], "140": [26, 194], "y3": [26, 96, 97, 165], "210": 26, "y4": [26, 96, 165], "y5": [26, 96, 165], "flush": [26, 27, 37, 51, 52, 58, 96, 97, 165, 269], "y_1": [26, 96, 165, 207], "y_2": [26, 96, 165, 207], "y_3": [26, 96, 165], "y_4": [26, 96, 165], "y_5": [26, 96, 165], "__call__": [26, 27, 28, 37, 38, 51, 52, 53, 66, 68, 69, 70, 73, 75, 76, 77, 78, 92, 94, 95, 96, 97, 98, 125, 128, 136, 138, 165, 166, 167, 269], "full": [26, 27, 52, 96, 97, 165, 166, 182], "__len__": [26, 37, 51, 54, 96, 165], "__repr__": [26, 29, 37, 51, 55, 75, 79, 94, 96, 99, 107, 109, 134, 144, 146, 148, 150, 156, 165, 168], "style": [26, 29, 37, 51, 55, 75, 79, 94, 96, 99, 107, 109, 134, 144, 146, 148, 150, 156, 165, 168, 236], "__str__": [26, 30, 37, 51, 56, 75, 80, 94, 96, 100, 107, 110, 134, 144, 147, 148, 151, 156, 165, 169], "human": [26, 30, 37, 51, 56, 75, 80, 94, 96, 100, 107, 110, 134, 144, 147, 148, 151, 156, 165, 169], "readabl": [26, 30, 37, 51, 56, 75, 80, 94, 96, 100, 107, 110, 134, 144, 147, 148, 151, 156, 165, 169], "reset": [26, 35, 37, 51, 63, 68, 72, 75, 89, 94, 96, 105, 125, 133, 136, 142, 165, 175], "when": [26, 35, 37, 51, 58, 61, 63, 65, 75, 86, 89, 91, 94, 96, 105, 165, 175, 180, 181, 183, 184, 186, 187, 199, 220, 221, 222, 223, 226, 227, 233, 247, 253, 261, 262, 263], "pass": [26, 37, 51, 58, 96, 165, 180, 183, 186, 193, 200, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 255, 257, 259, 262, 263, 269], "through": [26, 37, 51, 58, 96, 144, 156, 165, 183, 186, 193, 255, 262, 263, 265], "indic": [26, 28, 31, 37, 38, 41, 42, 43, 51, 53, 66, 68, 70, 73, 75, 76, 78, 92, 94, 95, 96, 98, 101, 108, 135, 144, 145, 148, 149, 152, 154, 156, 157, 161, 162, 163, 164, 165, 167, 170, 179, 197, 203, 205, 207, 209, 214, 215, 219, 227, 228, 229, 235, 241, 242, 243, 244], "whether": [26, 28, 37, 38, 41, 42, 43, 51, 53, 66, 68, 70, 73, 75, 76, 78, 92, 94, 95, 96, 98, 152, 154, 161, 162, 163, 164, 165, 167, 179, 197, 209, 214, 215, 227, 229, 235, 243], "consist": [26, 37, 46, 47, 48, 49, 50, 51, 64, 96, 165], "previou": [26, 28, 37, 38, 51, 53, 64, 70, 72, 76, 78, 95, 96, 98, 165, 167, 191, 192], "u": [26, 37, 51, 65, 75, 91, 94, 96, 165, 178, 233, 253, 254, 262, 263], "frequency_respons": [26, 37, 51, 59, 75, 83, 94, 96, 165, 269], "frequency_response_log": [26, 37, 51, 60, 75, 84, 94, 96, 165], "logarithm": [26, 37, 51, 60, 75, 84, 94, 96, 165, 220, 221, 223, 225, 226, 227, 262, 263], "axi": [26, 37, 51, 60, 75, 84, 94, 96, 165, 179, 197, 212, 214, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 234, 235, 261, 269], "custom": [26, 32, 96, 102, 108, 145, 149, 157, 165, 172, 190, 269], "multir": [26, 27, 28, 32, 96, 97, 98, 102, 165, 167, 172, 210, 238, 269], "polyphase_tap": [26, 30, 33, 36, 96, 97, 100, 103, 106, 165, 169, 173, 176], "index": [26, 31, 68, 72, 96, 101, 165, 170, 219, 228, 229, 234, 257], "correspond": [26, 31, 44, 49, 96, 101, 165, 170, 229], "mode": [27, 28, 35, 38, 52, 53, 58, 63, 66, 68, 70, 72, 73, 76, 78, 89, 92, 95, 97, 98, 105, 166, 167, 175, 182, 253], "l": [27, 52, 77, 97], "stream": [27, 28, 29, 30, 35, 38, 52, 53, 55, 56, 58, 63, 66, 68, 70, 72, 73, 76, 78, 79, 80, 89, 92, 95, 97, 98, 99, 100, 105, 134, 144, 148, 156, 167, 168, 169, 175, 263], "convolut": [27, 52, 96, 97], "ha": [27, 52, 96, 97, 134, 144, 148, 180, 194, 202, 203, 213, 251, 253, 265, 266, 267], "align": [27, 52, 97, 98, 144, 167, 261], "howev": [27, 46, 47, 48, 50, 52, 97, 125, 184, 187, 261], "produc": [27, 52, 96, 97, 165, 203, 267], "final": [27, 52, 97], "dictat": [27, 52, 97], "argument": [27, 28, 52, 97, 98, 167, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 262, 263], "specif": [28, 49, 98, 167, 260, 267], "npt": [28, 98, 108, 135, 145, 149, 157, 167, 190, 220, 221, 222, 223, 226, 227, 233, 237], "string": [29, 30, 55, 56, 79, 80, 99, 100, 108, 109, 110, 145, 146, 147, 149, 150, 151, 157, 168, 169, 206, 225, 232, 269], "represent": [29, 30, 55, 56, 79, 80, 99, 100, 109, 110, 146, 147, 150, 151, 168, 169, 234, 269], "print": [30, 56, 80, 100, 169, 206, 261, 262, 263, 265], "167": [30, 100], "24": [30, 100, 169], "shape": [30, 56, 80, 97, 100, 107, 108, 114, 116, 119, 120, 124, 134, 144, 145, 148, 149, 156, 157, 169, 203, 205, 219, 235, 241, 242, 244, 263, 268, 269], "12": [30, 96, 134, 144, 148, 156, 162, 164, 178, 185, 204, 210, 238, 262, 266, 269], "befor": [33, 36, 103, 106, 173, 176, 270], "decomposit": [33, 36, 103, 106, 173, 176, 269], "after": [33, 36, 103, 106, 173, 176], "10": [33, 36, 37, 40, 42, 44, 94, 96, 97, 103, 106, 108, 134, 144, 145, 148, 149, 152, 154, 156, 157, 161, 163, 165, 173, 176, 178, 179, 180, 185, 189, 190, 193, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 226, 227, 231, 233, 235, 237, 238, 241, 242, 243, 244, 245, 246, 247, 261, 262, 263, 264, 265, 266, 267], "puls": [37, 94, 107, 108, 114, 116, 119, 120, 124, 134, 144, 145, 148, 149, 156, 157, 203, 205, 219, 235, 241, 242, 244, 268, 269], "deriv": 37, "d": [37, 51, 57, 202, 213, 257, 259, 268], "lfloor": [37, 51, 57], "rfloor": [37, 51, 57], "null": [39, 160, 223, 225, 267], "altern": [39, 160, 263], "hypothes": [39, 160], "follow": [39, 44, 207, 218, 229, 232, 234, 236, 238, 265], "assum": [39, 160, 180, 193, 211, 250], "valu": [39, 107, 108, 111, 121, 134, 135, 144, 145, 148, 149, 152, 154, 156, 157, 158, 159, 182, 189, 191, 192, 203, 207, 208, 218, 234, 263, 269], "random": [39, 134, 144, 148, 156, 180, 183, 186, 193, 200, 201, 207, 218, 219, 228, 235, 245, 264, 266], "process": [39, 40, 41, 43, 160, 161, 162, 164, 210, 238, 263, 265, 268], "w": [39, 160, 180, 261, 262, 263, 264, 265, 266, 267], "sigma": [39, 40, 41, 42, 43, 160, 161, 162, 163, 164, 180, 181], "_0": [39, 160], "_1": [39, 160], "test": [39, 160, 259, 268], "statist": [39, 40, 41, 43, 160, 161, 162, 164], "limits_": [39, 51, 75, 160], "left": [39, 40, 41, 75, 144, 148, 156, 160, 161, 162, 164, 178, 179, 180, 181, 197, 200, 202, 203, 207, 209, 213, 214, 215, 243, 253], "right": [39, 40, 41, 75, 144, 148, 156, 160, 161, 162, 164, 178, 179, 180, 181, 197, 200, 202, 203, 207, 209, 213, 214, 215, 243, 253], "gamma": [39, 41, 43, 160, 162, 164, 178], "sim": [39, 160, 180, 258], "chi_": [39, 40, 41], "2n": [39, 40, 41], "text": [39, 156, 160, 178, 179, 180, 181, 184, 187, 188, 189, 200, 201, 202, 208, 210, 212, 214, 215, 243, 245], "under": [39, 160], "detect": [39, 40, 41, 42, 43, 160, 161, 162, 163, 164, 178, 224, 230, 269], "threshold": [39, 41, 43, 160, 162, 164], "q_": [39, 40, 41, 43], "chi_n": [39, 40, 41, 43], "steven": [39, 40, 41, 43, 160, 161, 162, 164], "kai": [39, 40, 41, 43, 160, 161, 162, 164], "fundament": [39, 40, 41, 43, 160, 161, 162, 164], "theori": [39, 40, 41, 43, 160, 161, 162, 164], "section": [39, 46, 47, 48, 49, 50, 160, 263, 265], "static": [39, 40, 41, 42, 43, 160, 161, 162, 163, 164, 258], "n_nc": [39, 40, 41, 42, 43, 178], "number": [40, 41, 42, 43, 44, 46, 47, 50, 59, 60, 61, 65, 83, 84, 86, 91, 107, 108, 112, 122, 134, 135, 143, 144, 145, 148, 149, 156, 157, 178, 180, 183, 186, 193, 195, 196, 198, 203, 205, 206, 211, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 232, 233, 241, 242, 244, 246, 250], "For": [40, 41, 43, 161, 162, 164, 180, 194, 202, 251, 257, 262], "linspac": [40, 152, 154, 161, 181, 184, 187, 202, 217, 231, 263, 264, 265, 266], "20": [40, 42, 96, 97, 134, 136, 144, 148, 156, 161, 165, 178, 181, 183, 186, 189, 193, 200, 201, 206, 207, 208, 215, 238, 243, 251, 264, 266, 267, 269], "101": [40, 42, 161, 163], "25": [40, 183, 186, 193, 216, 219, 239, 240, 261, 264, 265, 267], "1e": [40, 161, 201, 266], "sigma2": [41, 43, 162, 164], "If": [42, 72, 108, 138, 145, 149, 157, 163, 165, 179, 180, 181, 193, 197, 211, 214, 215, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 232, 233, 234, 235, 243, 248, 250, 268], "logspac": [42, 163, 178], "theoret": [42, 152, 154, 217, 231, 266, 269], "variou": [42, 258, 267], "100": [42, 75, 86, 91, 94, 136, 152, 154, 178, 180, 181, 184, 187, 189, 190, 200, 208, 209, 217, 219, 220, 222, 228, 231, 233, 235, 245, 248, 249, 251, 261, 265], "1_000": [42, 180, 201, 202, 207, 245, 264], "000": [42, 201], "5_000": 42, "measur": [44, 46, 179, 180, 188, 189, 197, 200, 208, 212, 214, 215, 243, 265, 268, 269], "new": [44, 45, 68, 70, 107, 108, 134, 135, 144, 145, 148, 149, 156, 157, 245], "accumul": [44, 136, 139, 140, 142, 265], "from": [44, 59, 60, 75, 76, 83, 84, 94, 98, 107, 123, 134, 144, 148, 155, 156, 167, 189, 195, 196, 198, 199, 208, 216, 225, 232, 239, 240, 246, 247, 257, 262, 263, 265, 268], "contain": [44, 180, 206], "add": [44, 46, 49, 134, 144, 148, 156, 180, 201, 205, 229, 242, 245, 255, 266, 270], "total": [44, 203, 205, 241, 242, 244, 267], "count": [44, 47, 200], "error_r": [44, 48, 49, 266], "everi": [44, 261], "can": [44, 46, 47, 48, 50, 125, 134, 180, 200, 203, 210, 211, 219, 225, 232, 259, 262, 263, 266, 268, 270], "obtain": 44, "tabul": [44, 45], "all": [44, 49, 138, 200, 219, 228, 229, 258, 260, 268], "ascend": [44, 49], "other": [46, 47, 48, 50, 261, 270], "quantiti": [46, 47, 48, 49, 50], "user": [46, 47, 48, 50, 262, 263], "caution": [46, 47, 48, 50], "instanc": [46, 47, 48, 50, 134], "transmit": [46, 107, 124, 134, 144, 148, 156, 200, 219], "e": [49, 136, 160, 161, 162, 163, 164, 179, 183, 184, 197, 253, 258, 259, 262, 263, 265, 266], "whatev": 49, "wa": [49, 181], "provid": [49, 107, 111, 121, 134, 144, 148, 152, 154, 156, 229, 258, 268], "wrapper": [51, 75], "scipi": [51, 75, 190, 225, 232, 267, 268], "convolv": [51, 235], "It": [51, 75, 96, 108, 125, 145, 149, 157, 180, 219], "support": [51, 75, 269], "one": [51, 75, 135, 144, 145, 149, 155, 157, 203, 206, 219, 220, 221, 223, 225, 226, 227, 232, 248, 262, 263, 264, 267], "its": [51, 75, 76, 94, 180, 262, 263, 267], "sum_": [51, 75, 162, 164, 179, 180, 181, 197, 200, 243], "valid": [52, 202, 219, 228, 229, 253], "same": [52, 97, 235, 262], "0013559842808217807": [55, 56], "005995136544658217": [55, 56], "008698817681933214": [55, 56], "0024103767414047302": [55, 56], "010205586837665018": [55, 56], "018983779931504997": [55, 56], "011950905288150394": [55, 56], "01518393864077397": [55, 56], "051622191325047306": [55, 56], "07210389837804473": [55, 56], "04745944982876247": [55, 56], "039173517569276436": [55, 56], "17918683372907862": [55, 56], "3367363220550604": [55, 56], "4611457574513795": [55, 56], "5084040873607553": [55, 56], "30": [56, 96, 165, 194, 220, 222, 233, 248, 249, 263, 269], "31": 56, "15": [56, 134, 163, 185, 204, 238, 251], "remain": [58, 194, 211], "1024": [59, 60, 83, 84, 220, 221, 223, 226, 227, 264, 267], "decad": [60, 84, 220, 221, 223, 226, 227, 262, 265], "resampl": [68, 69, 70, 71, 72, 73, 74, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 210, 238, 268, 269], "http": [68, 178, 188, 190, 203, 210, 212, 253, 257, 258, 259], "wirelesspi": 68, "com": [68, 178, 190, 203, 210, 258, 259], "fraction": [68, 72, 203, 261], "structur": 68, "should": [72, 134, 219, 259], "equal": [72, 134], "three": [72, 261, 267], "lfilter": 75, "b_i": [75, 78, 82, 94, 220, 221, 222, 223, 226, 227, 233, 237, 263], "feedback": [75, 78, 81, 94, 220, 221, 222, 223, 226, 227, 233, 237, 263], "a_j": [75, 78, 81, 94, 220, 221, 222, 223, 226, 227, 233, 237, 263], "These": [75, 144, 148, 156, 236, 259, 265], "differ": [75, 135, 145, 149, 155, 157, 190, 235, 253, 267], "a_0": 75, "b": [75, 78, 178, 181, 203, 206, 220, 222, 233, 257, 258, 267], "classmethod": [75, 76, 94], "zerospol": [75, 76, 79, 80, 94, 220, 221, 222, 223, 226, 227, 233, 237, 263], "self": [75, 76, 94], "b_tap": [75, 80, 82, 94, 263], "a_tap": [75, 80, 81, 94, 263], "exp": [79, 80, 144, 148, 156, 194, 203, 207, 209, 220, 221, 222, 223, 226, 227, 233, 235, 237, 249, 251, 253, 261, 263, 265], "1j": [79, 80, 194, 209, 220, 221, 222, 223, 226, 227, 233, 235, 237, 249, 251, 261, 263, 265], "conj": [79, 80, 220, 221, 222, 223, 226, 227, 233, 237, 263, 265], "478207252018059": [79, 80, 263], "6400000000000001": [79, 80, 263], "7391036260090295": [80, 263], "3061467458920719j": [80, 263], "insert": [96, 165], "multipli": [96, 165], "hold": [96, 98, 165, 167, 211, 269], "recommend": 96, "wai": [96, 259], "11": [96, 134, 144, 148, 156, 185, 204, 210, 238, 257], "zoh": [96, 98, 102, 165, 167, 172], "13": [96, 134, 144, 148, 156, 160, 161, 162, 164, 182, 185, 204, 238, 269], "matlab": [96, 98, 102, 165, 167, 172, 268], "iter": 97, "concaten": [97, 263], "linearli": [98, 167], "2r": 98, "ramp": [98, 125, 167], "advanc": [98, 167], "ones": [98, 167, 190, 265], "84": 100, "modul": [107, 108, 116, 117, 119, 134, 136, 144, 145, 148, 149, 152, 154, 156, 157, 195, 196, 198, 200, 217, 219, 228, 231, 234, 246, 257, 260, 264, 266, 268, 269], "map_symbol": [107, 115, 134, 144, 148, 156, 180, 200, 201, 207, 218, 219, 245, 269], "decide_symbol": [107, 113, 134, 144, 148, 156, 269], "a_hat": [107, 113, 134, 144, 148, 156], "decis": [107, 113, 114, 134, 144, 148, 156, 219], "maximum": [107, 113, 114, 134, 144, 148, 156, 203, 205, 218, 234, 241, 242, 244], "likelihood": [107, 113, 114, 134, 144, 148, 156], "mle": [107, 113, 134, 144, 148, 156], "match": [107, 108, 114, 120, 134, 144, 145, 148, 149, 156, 157, 269], "abstract": [107, 111, 121], "log_2": [107, 112, 134, 144, 148, 156, 181, 195, 196, 198, 246], "phase_offset": [107, 108, 118, 134, 135, 144, 145, 148, 149, 153, 156, 157, 180, 200, 201, 207, 218, 219, 234, 245, 264, 266], "degre": [107, 108, 118, 134, 135, 144, 145, 148, 149, 153, 156, 157, 201, 207, 209, 213], "dot": [107, 108, 123, 134, 144, 148, 155, 156, 234], "mapsto": [107, 108, 123, 134, 144, 148, 155, 156, 234], "mathbb": [107, 108, 123, 134, 144, 148, 155, 156, 181, 234, 253], "sym": [107, 108, 122, 134, 135, 144, 145, 148, 149, 156, 157, 196, 199, 203, 246, 247, 267], "pulse_shap": [107, 108, 114, 116, 119, 134, 144, 145, 148, 149, 156, 157, 264], "tx_filter": [107, 124, 134, 144, 148, 156], "rx_filter": [107, 120, 134, 144, 148, 156], "rect": [108, 145, 149, 157, 267], "whose": [108, 135, 145, 148, 149, 157], "import": [108, 145, 149, 157, 259, 261, 262, 263, 264, 265, 266, 267, 268], "roll": [108, 145, 149, 157, 253, 267], "off": [108, 145, 149, 157], "psd": [111, 121, 152, 154, 181, 195, 196, 198, 199, 217, 231, 246, 247], "p_b": 111, "s_hat": [114, 266], "size": [114, 116, 182, 193, 261, 265, 266, 267], "p_e": 121, "loopfilt": [125, 126, 127, 128, 129, 130, 131, 132, 133, 256, 265, 269], "ppi": [125, 129, 256], "track": 125, "constant": [125, 134, 136, 139, 140, 225, 232, 263, 265], "cannot": 125, "chirp": 125, "underli": [125, 131], "scheme": [134, 144, 148, 156, 269], "similar": [134, 144, 156, 267], "One": [134, 144, 156, 267], "distinct": [134, 144, 156], "result": [134, 144, 156, 179, 197, 202, 213, 214, 215, 241, 243, 244, 266], "envelop": [134, 262, 263], "which": [134, 144, 156, 178, 179, 180, 181, 197, 201, 207, 212, 213, 214, 218, 234, 245, 261, 265, 267], "lower": [134, 144, 156, 223, 225, 241, 244], "also": [134, 202, 203, 268], "consid": [134, 206], "cpfsk": 134, "separ": 134, "modem": [134, 144, 148, 156], "45": [134, 135, 144, 145, 148, 153, 180, 200, 201, 207, 209, 218, 219, 234, 245, 264, 266], "symbol_label": [134, 135, 144, 145, 148, 149, 155, 156, 157, 266], "randint": [134, 144, 148, 156, 180, 183, 186, 193, 200, 201, 207, 218, 219, 228, 235, 245, 264, 266], "1000": [134, 144, 148, 156, 200, 202, 235, 248, 249, 266], "dtype": [134, 144, 148, 156, 182, 211, 235, 250, 254, 265], "uint8": [134, 144, 148, 156, 211, 250], "complex_symbol": [134, 144, 148, 156], "70710678": [134, 144, 148], "70710678j": [134, 144, 148], "linestyl": [134, 144, 148, 156, 218, 229, 234, 236, 253, 261, 265, 266, 267], "tx_sampl": [134, 144, 148, 156], "50": [134, 144, 148, 156, 189, 208, 216, 234, 248, 249, 261, 264], "like": [134, 259, 268, 269], "channel": [134, 144, 152, 154, 181, 183, 184, 186, 187, 193, 217, 231, 268, 269], "subplot": [134, 144, 207, 265, 266], "imag": [134, 144, 261], "trajectori": 134, "although": 134, "boundari": 134, "lead": [134, 207, 266], "spectral": [134, 194, 225, 264, 267], "effici": [134, 194, 213, 251], "gmsk": 134, "rx_sampl": [134, 144, 148, 156], "last": [134, 144, 211, 257], "rx_symbol": [134, 144, 148, 156], "rx_complex_symbol": [134, 144, 148, 156], "14": [134, 144, 148, 156, 161, 185, 204, 238], "array_equ": [134, 144, 148, 156], "bin": [135, 145, 149, 155, 157, 200, 218, 234, 266], "absolut": [135, 136, 139, 141, 145, 157, 181], "consecut": [135, 145, 149, 157], "adjac": [135, 145, 149, 155, 157, 266, 267], "mai": [135, 145, 149, 155, 157, 200, 218, 229, 232, 234, 236, 263], "more": [135, 145, 149, 155, 157, 269], "start": [135, 145, 149, 157, 257], "0j": [135, 145, 149, 157], "go": [135, 145, 149, 157], "counter": [135, 145, 149, 157], "clockwis": [135, 145, 149, 157], "around": [135, 145, 149, 157], "circl": [135, 145, 149, 157, 263], "increment": [136, 138, 139, 140, 265], "Then": 136, "fsk": 136, "60": [136, 190, 267], "repeat": 136, "cp": 136, "57": 136, "bpsk": [136, 152, 154, 217, 231, 235, 264], "variabl": [136, 138, 206, 265], "forward": [136, 143], "settabl": [136, 137, 140, 141], "vari": 138, "intern": 142, "set": [142, 180, 202, 218, 223, 225, 229, 232, 234, 236, 258, 260, 263], "qpsk": [144, 148, 152, 153, 154, 156, 180, 200, 201, 217, 218, 219, 231, 234, 235, 245, 268, 269], "convent": [144, 156], "transit": [144, 156, 186, 187, 193, 255], "independ": 144, "apart": 144, "origin": [144, 156, 251, 261], "taken": [144, 148, 156], "jq": 144, "begin": [144, 156, 160], "end": [144, 156, 160, 248, 258], "encod": [148, 152, 154, 191, 192, 268], "inform": [148, 195, 196, 198, 246], "ge": [149, 157, 178], "were": [152, 154], "simon": [152, 154], "alouini": [152, 154], "over": [152, 154, 206], "fade": [152, 154], "chapter": [152, 154, 210, 238], "john": [152, 154], "proaki": [152, 154], "optimum": [152, 154], "psk8": [152, 154, 217, 231, 266], "psk16": [152, 154, 217, 231, 266], "compar": [152, 154, 190, 267], "de": [152, 154, 269], "se": [154, 231], "00000000e": [155, 156, 263], "00": [155, 156, 263], "00j": [155, 156], "07106781e": [155, 156], "01": [155, 156, 206, 263, 265], "01j": [155, 156], "12323400e": [155, 156], "17": [155, 156, 213, 238, 257], "83697020e": 155, "22464680e": [155, 156], "16j": [155, 156], "annot": [155, 234, 269], "odd": [156, 248], "rotat": [156, 209], "rel": [156, 253, 267], "even": [156, 190, 203, 241, 244], "2m": 156, "displaystyl": 156, "pi4_qpsk": 156, "exceed": [158, 159], "15865525393145707": [158, 159], "158655": [158, 159], "0000010494310452": [158, 159], "perfect": 160, "knowledg": 160, "cn": [160, 180], "mathrm": 160, "re": 160, "sqrt": [160, 161, 162, 164, 178, 200, 203, 243, 253, 264, 265, 267], "____": 165, "2p": 167, "95": [169, 200], "desir": [178, 180, 266], "ln": [178, 203], "62": [178, 206], "_": [178, 200], "log_": [178, 179, 189, 197, 202, 212, 214, 215, 243], "54": [178, 206], "44": 178, "12ab": 178, "7b": 178, "claim": 178, "leq": 178, "le": [178, 209, 213, 241, 244], "8096": 178, "radarsp": 178, "weebli": 178, "upload": 178, "21471216": 178, "albersheim_alternative_form": 178, "pdf": [178, 203], "bpb": 178, "w2": 178, "wpmucdn": 178, "site": [178, 257], "gatech": 178, "edu": 178, "dist": [178, 258], "462": 178, "file": [178, 258, 260], "2016": 178, "noncoher": 178, "approxim": [178, 269], "www": [178, 190, 203, 210], "mathwork": [178, 190, 203, 210], "help": [178, 190, 203, 210], "html": [178, 190, 203, 210, 257], "semilogx": [178, 230], "legend": [178, 190, 207, 261, 264, 265, 267], "grid": [178, 181, 184, 187, 202, 236, 261, 264, 265, 267], "both": [178, 181, 218, 234, 235, 261, 265], "xlabel": [178, 181, 182, 184, 187, 200, 202, 253, 261, 264, 265, 267], "ylabel": [178, 181, 182, 184, 187, 200, 202, 253, 261, 264, 265, 267], "across": 178, "nuse": 178, "avg": [179, 180, 212], "ax": [179, 197, 212, 214, 236], "along": [179, 197, 212, 214, 269], "entir": [179, 197, 212, 214], "decibel": [179, 189, 197, 208, 214, 215, 243, 268, 269], "seed": [180, 183, 186, 193, 269], "ad": [180, 229, 258, 268, 269], "explicitli": 180, "known": 180, "must": [180, 190, 203, 209, 229, 241, 244, 253], "numpi": [180, 183, 186, 193, 250, 261, 262, 263, 264, 265, 266, 267, 268], "default_rng": [180, 183, 186, 193], "noisi": 180, "sin": [180, 248], "zorder": [180, 201, 245], "infti": [180, 181], "nand": 180, "capac": [181, 184, 187, 268, 269], "2d": [181, 229], "x_i": [181, 183, 184, 186, 187, 193, 207], "y_i": [181, 183, 184, 186, 187, 193], "monoton": 181, "decreas": 181, "limit": [181, 218, 223, 225, 234, 266], "At": 181, "occur": 181, "view": [181, 258, 268], "59": 181, "shannon": 181, "semilogi": [181, 217, 230, 231], "barker": [182, 254, 268, 269], "ani": [182, 189, 194, 208, 223, 225, 251, 254, 260], "int64": [182, 254], "bipolar": [182, 269], "float64": [182, 254], "sequenc": [182, 183, 186, 193, 253, 255, 268, 269], "format": 182, "seq": 182, "have": [182, 194, 211, 235, 250, 251], "ideal": [182, 266], "minim": 182, "autocorrel": [182, 253], "sidelob": [182, 190, 241, 244, 253], "corr": [182, 253], "lag": [182, 253], "ab": [182, 253, 267], "roughli": [183, 186, 261], "eras": 183, "flip": 186, "h_b": 187, "cf": 188, "v_": [188, 189, 208, 215, 243], "en": [188, 212, 253], "wikipedia": [188, 212, 253], "org": [188, 212, 253], "wiki": [188, 212, 253], "type": [189, 200, 208, 211, 225, 230, 232, 250, 269], "voltag": [189, 208, 215, 243, 268], "x_": [189, 208], "mhz": [189, 208], "77": [189, 206, 208], "50e6": 189, "76": [189, 206], "98970004336019": 189, "mw": [189, 208], "dbm": [189, 208], "dbv": [189, 208], "020599913279624": 189, "cutoff_freq": 190, "ham": 190, "hann": [190, 225, 232], "blackman": 190, "harri": [190, 210, 238], "chebyshev": 190, "cutoff": 190, "f_c": 190, "nyquist": [190, 194, 219, 251, 267], "No": 190, "blackmanharri": 190, "chebwin": 190, "attenu": [190, 210, 241, 244], "beta": 190, "dsp": [190, 210, 268], "designlowpassfir": 190, "cdot": [190, 209], "h_ham": 190, "32": [190, 261], "h_hann": 190, "h_blackman": 190, "h_blackman_harri": 190, "h_chebyshev": 190, "h_kaiser": 190, "ylim": [190, 221, 253, 262, 265, 266, 267], "uncod": 192, "dmc": [193, 255, 268, 269], "memoryless": [193, 255, 268], "pr": 193, "y_j": 193, "alphabet": 193, "ldot": 193, "doe": [194, 251], "anti": [194, 251, 269], "alias": [194, 251, 269], "400": [194, 261], "x1": 194, "200": [194, 261, 266], "x2": 194, "130": 194, "x3": [194, 253], "spectrum": [194, 220, 221, 223, 225, 226, 227, 232, 248, 249, 251], "content": 194, "abov": [194, 251], "fold": 194, "cw": 194, "unalias": 194, "fft": [194, 225, 232, 248, 249, 251], "2048": [194, 248, 249, 251, 264], "xlim": [194, 251, 264, 265, 267], "qam": [195, 196, 198, 246], "249387366082999": [195, 196], "020599913279625": [195, 247], "7506126339170005": [198, 246], "979400086720376": [198, 199], "system": [199, 210, 238, 247, 258, 260, 265, 268], "norm": [200, 203, 205, 241, 242, 244], "noiseless": 200, "sourc": 200, "max": [200, 214, 215], "instantan": 200, "percentil": [200, 223, 225, 232], "either": 200, "973029657239042": 200, "94334030525538": 200, "202205087482211": 200, "95th": 200, "592224378514068": 200, "inst_evm": 200, "hist": 200, "histogram": 200, "frequency_offset": [201, 255, 269], "freq_rat": 201, "cycl": [201, 235], "5e": 201, "deg": [201, 207], "path": [202, 268], "loss": [202, 268], "meter": [202, 213, 252], "transmitt": 202, "far": 202, "field": 202, "neg": [202, 207], "impli": 202, "possibl": [202, 268], "so": [202, 203, 205, 241, 242, 244, 268], "km": 202, "link": [202, 268, 269], "ghz": [202, 213, 252], "1e3": [202, 209, 248], "1e9": [202, 213, 252], "92": 202, "44778322188337": 202, "doubl": [202, 213], "increas": [202, 213, 263], "2e3": 202, "98": 202, "468383135163": 202, "2e9": 202, "product": [203, 267], "side": [203, 220, 221, 223, 225, 226, 227, 232, 262, 263, 264, 267], "thought": [203, 270], "smaller": [203, 241, 244, 267], "wider": 203, "how": [203, 205, 219, 228, 229, 235, 241, 242, 244, 260], "gaussdesign": 203, "onlinelibrari": 203, "wilei": 203, "doi": 203, "1002": 203, "9780470041956": 203, "app2": 203, "h_0p1": [203, 241, 244], "h_0p2": 203, "h_0p3": 203, "reason": [205, 242, 257], "larger": [205, 207, 218, 234, 242], "h_half_sin": 205, "displai": [206, 218, 220, 221, 223, 225, 226, 227, 232, 234], "line": [206, 235, 258, 264], "quick": 206, "brown": 206, "fox": 206, "jump": 206, "lazi": 206, "dog": 206, "00000000": 206, "68": 206, "65": 206, "71": 206, "75": [206, 218, 265, 266], "69": 206, "63": 206, "6b": 206, "72": 206, "6f": 206, "6e": 206, "00000010": 206, "66": 206, "78": 206, "6a": 206, "6d": 206, "73": 206, "74": 206, "00000020": 206, "6c": 206, "61": 206, "7a": 206, "79": 206, "67": 206, "he": 206, "02": [206, 263, 265], "03": [206, 263], "04": [206, 263], "00000004": 206, "05": [206, 261, 263, 265], "06": 206, "07": 206, "08": 206, "00000008": 206, "09": 206, "0a": 206, "iq_imbal": [207, 255, 269], "iq": [207, 255, 268], "imbal": [207, 255, 268], "posit": 207, "compon": [207, 248, 249, 251], "g_i": 207, "180": 207, "g_q": 207, "x_q": 207, "horizont": 207, "stretch": 207, "while": [207, 267], "vertic": 207, "northwest": 207, "northeast": 207, "50118723": 208, "36272725": 208, "9952623149688795": 208, "satisfi": 209, "remov": [209, 225, 232, 269], "half_length": 210, "a_stop": 210, "80": [210, 253], "stopband": [210, 241, 244], "a_": 210, "stop": 210, "fred": [210, 238], "designmultiratefir": 210, "dtypelik": [211, 250], "most": [211, 250], "signific": [211, 250], "enough": 211, "fill": 211, "smallest": 211, "unsign": 211, "integ": 211, "diamet": 213, "55": 213, "eta": 213, "dbi": 213, "arcsin": 213, "83": 213, "dish": 213, "21": 213, "810210290266568": 213, "437435887991374": 213, "23": 213, "sinc": [213, 219, 257, 266], "antenna": [213, 268], "we": [213, 268], "observ": [213, 219], "830810203546193": 213, "529544741425365": 213, "keyword": [217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 262, 263], "pyplot": [217, 218, 221, 222, 223, 224, 225, 226, 227, 231, 232, 233, 234, 235, 236, 237, 261, 262, 263, 264, 265, 266, 267], "heatmap": [218, 266], "scatter": 218, "overwritten": [218, 229, 232, 234], "rang": [218, 265, 266], "hist2d": 218, "10_000": 218, "color": [219, 228, 229, 235, 264, 267], "imaginari": [219, 229, 235], "interleav": [219, 229], "base": [219, 228, 229, 235], "examin": 219, "intersymbol": 219, "interfer": 219, "isi": 219, "two": [219, 220, 221, 223, 225, 226, 227, 232, 253, 261, 262, 263], "cascad": 219, "why": 219, "often": [219, 261], "practic": 219, "n_time": [220, 263], "n_freq": 220, "x_axi": [220, 221, 223, 225, 226, 227, 232, 262, 263, 264, 265], "log": [220, 221, 223, 225, 226, 227, 262, 263, 265], "definit": [220, 221, 222, 223, 226, 227, 233, 237], "n_t": 220, "n_f": 220, "scale": [220, 221, 223, 225, 226, 227, 232, 262, 263], "option": [220, 221, 223, 225, 226, 227, 232, 269], "h_srrc": [220, 221, 222, 223, 226, 227, 233, 235, 237, 266], "48": 221, "52": 221, "10th": [223, 225, 232], "crop": [223, 225], "deep": [223, 225], "x_label": 224, "overlap": [225, 232, 264], "detrend": [225, 232], "median": 225, "segment": [225, 232], "256": [225, 232, 264], "point": [225, 232], "trend": [225, 232], "unwrap": [227, 265], "stride": 229, "colorbar": 229, "1d": 229, "determin": 229, "row": 229, "collect": 229, "linecollect": 229, "linewidth": [229, 253], "solid": [229, 235], "cmap": 229, "rainbow": 229, "loglog": 230, "pcolormesh": 232, "vmin": 232, "vmax": 232, "100th": 232, "shade": 232, "gouraud": 232, "markers": 234, "diff": [235, 264], "about": [235, 260], "mutual": 235, "exclus": 235, "current": [235, 259], "dash": 235, "share": 235, "10e3": 235, "revert": 236, "rcdefault": 236, "_rc_param": 236, "rc_param": 236, "autolayout": 236, "max_open_warn": 236, "titleweight": 236, "bold": 236, "arrang": 238, "column": 238, "notion": 238, "demonstr": 238, "18": [238, 257, 266], "19": 238, "000005": 239, "5000": [239, 240], "000000025": 239, "005": [240, 265], "000025": 240, "excess": [241, 244, 267], "narrow": [241, 244], "expens": [241, 244], "higher": [241, 244, 267], "h_0p5": [241, 244], "h_0p9": [241, 244], "affect": [241, 244], "longer": [241, 244, 248], "h_4": [241, 244], "h_8": [241, 244], "h_16": [241, 244], "h_rect": [242, 267], "sample_rate_offset": [245, 255, 269], "append": [248, 264], "250": [248, 249], "300": [248, 249], "ksp": [248, 249], "notic": [248, 249, 261, 267], "conjug": [248, 249, 263], "500": [248, 249, 265], "now": [248, 249, 261, 269], "150": [248, 249], "asymmetr": 249, "copi": 251, "299792458": 252, "zadoff_chu": [253, 254, 269], "zadoff": [253, 254, 268, 269], "chu": [253, 254, 268, 269], "prime": 253, "gcd": 253, "ne": 253, "cyclic": 253, "x_u": 253, "c_": 253, "2q": 253, "mod": 253, "e2": 253, "93chu_sequ": 253, "x_3": 253, "139": 253, "tile": 253, "x_5": 253, "x5": 253, "cross": 253, "xcorr": 253, "sphinx": 257, "immateri": 257, "theme": 257, "depend": [257, 258, 260], "store": [257, 259, 260], "txt": [257, 258, 259, 260], "some": 257, "below": [257, 262, 263], "version": [257, 259, 268], "aren": 257, "resolut": 257, "minut": 257, "ci": 257, "myst": 257, "parser": 257, "updat": 257, "git": [257, 259], "math": 257, "dollar": 257, "ipykernel": 257, "26": 257, "nb": 257, "pickleshar": 257, "switch": 257, "pip": [257, 258, 259, 260, 268], "python3": [257, 258, 259, 260, 268], "built": 257, "run": 257, "command": [257, 258], "dirhtml": 257, "locat": [257, 260], "home": 257, "page": 257, "directori": [257, 259], "get": 257, "necessari": 257, "webpag": 257, "webserv": 257, "easili": [257, 258, 260, 262, 263], "python": [257, 268], "server": 257, "8080": 257, "access": 257, "web": 257, "browser": 257, "localhost": 257, "librari": [258, 259, 260, 261, 266, 268, 270], "ruff": [258, 259, 269], "lint": [258, 259], "your": [258, 260], "develop": [258, 259, 260], "dev": [258, 260], "pyproject": [258, 260], "toml": [258, 259, 260], "tool": [258, 260, 268], "src": 258, "extend": 258, "includ": [258, 259, 260, 268], "ipynb": 258, "exclud": 258, "build": [258, 268], "doc": 258, "_version": 258, "py": [258, 260], "120": 258, "select": 258, "pycodestyl": 258, "pyflak": 258, "pyupgrad": 258, "flake8": 258, "bugbear": 258, "simplifi": 258, "isort": 258, "ignor": 258, "e501": 258, "e713": 258, "e714": 258, "__init__": 258, "f401": 258, "f403": 258, "manual": [258, 260], "check": 258, "hook": 258, "config": [258, 261, 262, 263, 264, 265, 266, 267], "yaml": 258, "repo": [258, 259], "github": [258, 268], "rev": 258, "v2": 258, "id": 258, "larg": 258, "fixer": 258, "trail": 258, "whitespac": 258, "astral": 258, "sh": 258, "v0": 258, "enabl": 258, "disabl": 258, "uninstal": 258, "extens": 258, "vscode": [258, 260], "json": [258, 260], "you": [258, 259, 260, 268], "edit": [258, 263], "latest": [259, 268], "releas": [259, 269], "main": [259, 267], "branch": 259, "mhostett": [259, 269], "Or": [259, 260], "pre": 259, "To": 259, "activ": 259, "benefici": 259, "fashion": 259, "allow": [259, 260], "chang": [259, 270], "immedi": 259, "seen": 259, "upon": 259, "next": 259, "clone": 259, "wherev": 259, "flag": 259, "packag": [259, 268], "commit": 259, "pytest": [259, 260], "cov": 259, "xdist": 259, "benchmark": 259, "ini_opt": 260, "minvers": 260, "addopt": 260, "showloc": 260, "testpath": 260, "execut": 260, "test_psk": 260, "instruct": 260, "invok": 260, "infrastructur": 260, "debug": 260, "inlinebackend": [261, 262, 263, 264, 265, 266, 267], "print_figure_kwarg": [261, 262, 263, 264, 265, 266, 267], "facecolor": [261, 262, 263, 264, 265, 266, 267], "widget": [261, 262, 263, 264, 265, 266, 267], "tx": 261, "decai": [261, 263], "fillstyl": 261, "show": [261, 262, 263, 264, 265, 266, 267], "accomplish": [261, 266], "def": [261, 264, 266], "resample_sign": 261, "new_sample_r": 261, "ty": 261, "gca": [261, 266], "set_prop_cycl": [261, 266], "four": 261, "appear": 261, "fourth": 261, "do": 261, "315": 261, "00095883": 262, "00175012": 262, "00423921": 262, "0058825": 262, "006151": 262, "00474595": 262, "0017044": 262, "00254816": 262, "00721645": 262, "0112324": 262, "01342358": 262, "01273202": 262, "00845058": 262, "0004368": 262, "01073669": 262, "02372977": 262, "03650247": 262, "04650654": 262, "05098525": 262, "04734644": 262, "03355896": 262, "00851486": 262, "02769991": 262, "07367348": 262, "12670447": 262, "1830132": 262, "23810898": 262, "28727058": 262, "3260799": 262, "3509384": 262, "35949665": 262, "conveni": [262, 263], "evalu": [262, 263], "here": [262, 263], "47820725": 263, "78207252e": 263, "58172329e": 263, "10862468e": 263, "86109590e": 263, "21565653e": 263, "01140214e": 263, "57286400e": 263, "67772160e": 263, "47338728e": 263, "10422993e": 263, "89312837e": 263, "12240078e": 263, "03953322e": 263, "69685122e": 263, "63882791e": 263, "81474977e": 263, "47193366e": 263, "85259041e": 263, "15647504e": 263, "23851924e": 263, "42176895e": 263, "84684395e": 263, "42721858e": 263, "72236648e": 263, "14721649e": 263, "10813095e": 263, "94024315e": 263, "78877688e": 263, "74077567e": 263, "87820725": 263, "53637958": 263, "94724205": 263, "13335164": 263, "1455082": 263, "04436799": 263, "88708159": 263, "71930943": 263, "5719707": 263, "46154771": 263, "39261642": 263, "36139242": 263, "35935288": 263, "3763214": 263, "40270968": 263, "43085717": 263, "45557651": 263, "47410241": 263, "48566716": 263, "49090568": 263, "49124786": 263, "48840102": 263, "4839738": 263, "47925143": 263, "47510421": 263, "47199608": 263, "47005584": 263, "46917696": 263, "46911955": 263, "denomin": 263, "73910363": 263, "30614675j": 263, "plane": 263, "endpoint": 263, "092337035029908": 263, "71104892744724": 263, "684365018955985": 263, "37868538208862": 263, "1263714068241546": 263, "9993519409971622": 263, "1909320767063554": 263, "016796159999999997": 263, "46380627201679264": 263, "3806359704987118j": 263, "4988817673846036": 263, "333342139809402j": 263, "5543277195082319": 263, "22961005941718524j": 263, "5291527586053246": 263, "2828380420991956j": 263, "lyon": 263, "understand": 263, "3rd": 263, "insid": 263, "outsid": 263, "unstabl": 263, "n_symbol": 264, "els": 264, "pb": 264, "x_bb_rect": 264, "papr_bb_rect": 264, "x_pb_rect": 264, "papr_pb_rect": 264, "x_bb_0p1": 264, "papr_bb_0p1": 264, "x_pb_0p1": 264, "papr_pb_0p1": 264, "x_bb_0p5": 264, "papr_bb_0p5": 264, "x_pb_0p5": 264, "papr_pb_0p5": 264, "x_bb_0p9": 264, "papr_bb_0p9": 264, "x_pb_0p9": 264, "papr_pb_0p9": 264, "2f": 264, "rf": [264, 265], "512": 264, "sweep_alpha": 264, "bb_papr": 264, "pb_papr": 264, "bpsk_bb_papr": 264, "bpsk_pb_papr": 264, "qpsk_bb_papr": 264, "qpsk_pb_papr": 264, "psk8_bb_papr": 264, "psk8_pb_papr": 264, "psk16_bb_papr": 264, "psk16_pb_papr": 264, "configur": 265, "loop_filt": 265, "0x000002276d2bcc08": 265, "theta_0": 265, "phase_error": 265, "freq_estim": 265, "suptitl": [265, 266], "direct": [265, 269], "synthes": [265, 269], "dd": [265, 269], "avail": [265, 266, 268], "001": 265, "b_nt": 265, "0005": 265, "0125": 265, "015": 265, "0175": 265, "t_lock": 265, "analyze_psk": 266, "100_000": 266, "n0": 266, "tx_mf": 266, "1e6": 266, "bpsk_ber": 266, "bpsk_ser": 266, "qpsk_ber": 266, "qpsk_ser": 266, "psk8_ber": 266, "psk8_ser": 266, "psk16_ber": 266, "psk16_ser": 266, "simul": [266, 268], "1e0": 266, "psk8_bin": 266, "psk8_grai": 266, "wors": 266, "rc_0p1": 267, "rc_0p5": 267, "rc_0p9": 267, "pm": 267, "nearli": 267, "small": 267, "lobe": 267, "much": 267, "freqz": 267, "worn": 267, "whole": 267, "h_rc_0p1": 267, "h_rc_0p5": 267, "h_rc_0p9": 267, "p_rect": 267, "cumsum": 267, "p_rc_0p1": 267, "p_rc_0p5": 267, "p_rc_0p9": 267, "within": 267, "srrc_0p1": 267, "srrc_0p5": 267, "srrc_0p9": 267, "therefor": 267, "significantli": 267, "due": 267, "being": 267, "h_srrc_0p1": 267, "h_srrc_0p5": 267, "h_srrc_0p9": 267, "p_srrc_0p1": 267, "p_srrc_0p5": 267, "p_srrc_0p9": 267, "gauss_0p1": 267, "gauss_0p2": 267, "gauss_0p3": 267, "softwar": 268, "radio": 268, "goal": 268, "analyz": 268, "reli": 268, "interoper": 268, "veri": 268, "numba": 268, "acceler": 268, "computation": 268, "intens": 268, "addition": 268, "aim": 268, "replic": 268, "relev": 268, "toolbox": 268, "progress": 268, "someth": 268, "pleas": 268, "open": 268, "issu": 268, "pypi": 268, "api": [268, 270], "convers": [268, 269], "synchron": 268, "budget": [268, 269], "manipul": 268, "novemb": 269, "2023": 269, "move": 269, "abil": 269, "model": 269, "replac": 269, "pylint": 269, "black": 269, "improv": 269, "matt": 269, "hostett": 269, "septemb": 269, "sensibl": 269, "august": 269, "27": 269, "without": 269, "renam": 269, "superflu": 269, "translat": 269, "fix": [269, 270], "juli": 269, "firinterpol": 269, "impair": 269, "fpsl": 269, "helper": 269, "semant": 270, "major": 270, "minor": 270, "patch": 270, "introduc": 270, "featur": 270, "backward": 270, "compat": 270, "make": 270, "bug": 270, "There": 270, "guarante": 270, "them": 270, "thei": 270}, "objects": {"": [[3, 0, 0, 1, "sdr", ""]], "sdr": [[9, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [26, 1, 1, "", "Decimator", "Implements a polyphase decimating FIR filter."], [37, 1, 1, "", "Differentiator", "Implements a differentiator FIR filter."], [39, 1, 1, "", "EnergyDetector", "Implements an energy detector."], [44, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [51, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [68, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [75, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [94, 1, 1, "", "Integrator", "Implements an integrator IIR filter."], [96, 1, 1, "", "Interpolator", "Implements a polyphase interpolating FIR filter."], [107, 1, 1, "", "LinearModulation", "Implements linear phase/amplitude modulation with arbitrary symbol mapping."], [125, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [134, 1, 1, "", "MSK", "Implements minimum-shift keying (MSK) modulation and demodulation."], [136, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [144, 1, 1, "", "OQPSK", "Implements offset quadrature phase-shift keying (OQPSK) modulation and demodulation."], [148, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [156, 1, 1, "", "PiMPSK", "Implements $pi/M$ phase-shift keying ($pi/M$ PSK) modulation and demodulation."], [158, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [159, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [160, 1, 1, "", "ReplicaCorrelator", "Implements an clairvoyant replica-correlator detector."], [165, 1, 1, "", "Resampler", "Implements a polyphase rational resampling FIR filter."], [178, 5, 1, "", "albersheim", "Estimates the minimum required single-sample SNR, given $N_{NC}$ non-coherent combinations, to achieve a probability of detection $P_D$ and probability of false alarm $P_{FA}$. This function implements Albersheim's equation."], [179, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [180, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [181, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [182, 5, 1, "", "barker", "Returns the Barker code/sequence of length $N$."], [183, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [184, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [185, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [186, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [187, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [188, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [189, 5, 1, "", "db", "Converts from linear units to decibels."], [190, 5, 1, "", "design_lowpass_fir", "Designs a lowpass FIR filter impulse response $h[n]$ using the window method."], [191, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [192, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [193, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [194, 5, 1, "", "downsample", "Downsamples the time-domain signal $x[n]$ by the factor $r$."], [195, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [196, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [197, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [198, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [199, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [200, 5, 1, "", "evm", "Calculates the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [201, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [202, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [203, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [204, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [205, 5, 1, "", "half_sine", "Returns a half-sine pulse shape."], [206, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [207, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [208, 5, 1, "", "linear", "Converts from decibels to linear units."], [209, 5, 1, "", "mix", "Mixes the time-domain signal $x[n]$ with a complex exponential or real sinusoid."], [210, 5, 1, "", "multirate_taps", "Computes the multirate FIR filter that achieves rational resampling by $P/Q$."], [211, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [212, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [213, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [214, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [215, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [216, 5, 1, "", "percent", "Converts from a ratio to a percentage."], [238, 5, 1, "", "polyphase_matrix", "Converts the multirate FIR filter taps $h_i$ into the polyphase matrix $H_{i, j}$ that achieves rational resampling by $P/Q$."], [239, 5, 1, "", "ppb", "Converts from a ratio to parts per billion (ppb)."], [240, 5, 1, "", "ppm", "Converts from a ratio to parts per million (ppm)."], [241, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [242, 5, 1, "", "rectangular", "Returns a rectangular pulse shape."], [243, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [244, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [245, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [246, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [247, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [248, 5, 1, "", "to_complex_bb", "Converts the real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$ to a complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c} = f_{s,r}/2$."], [249, 5, 1, "", "to_real_pb", "Converts the complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$ to a real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r} = 2f_{s,c}$."], [250, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [251, 5, 1, "", "upsample", "Upsamples the time-domain signal $x[n]$ by the factor $r$."], [252, 5, 1, "", "wavelength", "Calculates the wavelength $lambda$ of an electromagnetic wave with frequency $f$."], [253, 5, 1, "", "zadoff_chu", "Returns the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.ClosedLoopPLL": [[10, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [11, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [12, 2, 1, "", "K0", "The NCO gain $K_0$."], [13, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [14, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [15, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [16, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [17, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [18, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [19, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [20, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [21, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [22, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [23, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [24, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [25, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[16, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [16, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [16, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [16, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [16, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[17, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[19, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[22, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.Decimator": [[27, 3, 1, "", "__call__", "Filters and decimates the input signal $x[n]$ with the polyphase FIR filter."], [28, 3, 1, "", "__init__", "Creates a polyphase FIR decimating filter."], [29, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [30, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [31, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [32, 2, 1, "", "method", "The method used to design the multirate filter."], [33, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [34, 2, 1, "", "rate", "The decimation rate $r$."], [35, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [36, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Decimator.__call__": [[27, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [27, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Decimator.__init__": [[28, 4, 2, "p-rate", "rate", "The decimation rate $r$."], [28, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [28, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.Differentiator": [[38, 3, 1, "", "__init__", "Creates a differentiator FIR filter."]], "sdr.Differentiator.__init__": [[38, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.EnergyDetector": [[40, 3, 1, "", "p_d", "Computes the probability of detection $P_D$."], [41, 3, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [42, 3, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [43, 3, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.EnergyDetector.p_d": [[40, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [40, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [40, 4, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.p_fa": [[41, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [41, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [41, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [41, 4, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.EnergyDetector.roc": [[42, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [42, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [42, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."], [42, 4, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.threshold": [[43, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [43, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [43, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [43, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.ErrorRate": [[45, 3, 1, "", "__init__", "Creates a new error rate tabulation object."], [46, 3, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [47, 3, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [48, 3, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [49, 3, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [50, 3, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[46, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [46, 4, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [46, 4, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[47, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[48, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[50, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[52, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the FIR filter."], [53, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [54, 3, 1, "", "__len__", "Returns the filter length $N + 1$."], [55, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [56, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [57, 2, 1, "", "delay", "The delay of the FIR filter $d = lfloor frac{N + 1}{2} rfloor$ in samples."], [58, 3, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [59, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the FIR filter."], [60, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(omega)$ of the FIR filter on a logarithmic frequency axis."], [61, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [62, 2, 1, "", "order", "The order of the FIR filter $N$."], [63, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [64, 2, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [65, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [66, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [67, 2, 1, "", "taps", "The feedforward taps $h_i$ for $i = 0,...,N$."]], "sdr.FIR.__call__": [[52, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [52, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.FIR.__init__": [[53, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$ for $i = 0,...N$."], [53, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FIR.frequency_response": [[59, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [59, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.frequency_response_log": [[60, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [60, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [60, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[61, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.step_response": [[65, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FarrowResampler": [[69, 3, 1, "", "__call__", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [70, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [71, 2, 1, "", "order", "The order of the filter."], [72, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [73, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [74, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__call__": [[69, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [69, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.__init__": [[70, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FarrowResampler.reset": [[72, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[76, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [77, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the IIR filter."], [78, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [79, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [80, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [81, 2, 1, "", "a_taps", "The feedback taps $a_j$ for $j = 0,...,N$."], [82, 2, 1, "", "b_taps", "The feedforward taps $b_i$ for $i = 0,...,M$."], [83, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the IIR filter."], [84, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(omega)$ of the IIR filter on a logarithmic frequency axis."], [85, 2, 1, "", "gain", "The gain of the IIR filter."], [86, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [87, 2, 1, "", "order", "The order of the IIR filter $N$."], [88, 2, 1, "", "poles", "The poles of the IIR filter."], [89, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [90, 2, 1, "", "state", "The filter state."], [91, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [92, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [93, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[76, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [76, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [76, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."], [76, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__call__": [[77, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.IIR.__init__": [[78, 4, 2, "p-a", "a", "The feedback coefficients $a_j$ for $j = 0,...,N$."], [78, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$ for $i = 0,...,M$."], [78, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.IIR.frequency_response": [[83, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [83, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[84, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [84, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [84, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[86, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[91, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.Integrator": [[95, 3, 1, "", "__init__", "Creates an integrating IIR filter."]], "sdr.Integrator.__init__": [[95, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.Interpolator": [[97, 3, 1, "", "__call__", "Interpolates and filters the input signal $x[n]$ with the polyphase FIR filter."], [98, 3, 1, "", "__init__", "Creates a polyphase FIR interpolating filter."], [99, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [100, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [101, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [102, 2, 1, "", "method", "The method used to design the multirate filter."], [103, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [104, 2, 1, "", "rate", "The interpolation rate $r$."], [105, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [106, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Interpolator.__call__": [[97, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [97, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Interpolator.__init__": [[98, 4, 2, "p-rate", "rate", "The interpolation rate $r$."], [98, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [98, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.LinearModulation": [[108, 3, 1, "", "__init__", "Creates a new linear phase/amplitude modulation object."], [109, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [110, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [111, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [112, 2, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [113, 3, 1, "", "decide_symbols", "Converts the received complex symbols $hat{a}[k]$ into decimal symbol decisions $hat{s}[k]$ using maximum-likelihood estimation (MLE)."], [114, 3, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples $hat{x}[n]$ into decimal symbol decisions $hat{s}[k]$ using matched filtering and maximum-likelihood estimation."], [115, 3, 1, "", "map_symbols", "Converts the decimal symbols $s[k]$ to complex symbols $a[k]$."], [116, 3, 1, "", "modulate", "Modulates the decimal symbols $s[k]$ into pulse-shaped complex samples $x[n]$."], [117, 2, 1, "", "order", "The modulation order $M = 2^k$."], [118, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [119, 2, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [120, 2, 1, "", "rx_filter", "The receive decimating matched filter. The filter coefficients are matched to the pulse shape $h[-n]^*$."], [121, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [122, 2, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [123, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."], [124, 2, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter. The filter coefficients are the pulse shape $h[n]$."]], "sdr.LinearModulation.__init__": [[108, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [108, 4, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees to apply to symbol_map."], [108, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [108, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [108, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [108, 4, 2, "p-symbol_map", "symbol_map", "The symbol mapping ${0, dots, M-1} mapsto mathbb{C}$. An $M$-length array whose indices are decimal symbols $s[k]$ and whose values are complex symbols $a[k]$, where $M$ is the modulation order."]], "sdr.LinearModulation.ber": [[111, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.LinearModulation.decide_symbols": [[113, 4, 2, "p-a_hat", "a_hat", "The received complex symbols $hat{a}[k]$."]], "sdr.LinearModulation.demodulate": [[114, 4, 2, "p-x_hat", "x_hat", "The received pulse-shaped complex samples $hat{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.LinearModulation.map_symbols": [[115, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to map, $0$ to $M-1$."]], "sdr.LinearModulation.modulate": [[116, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.LinearModulation.ser": [[121, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.LoopFilter": [[126, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [127, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [128, 3, 1, "", "__call__", "Filters the input signal $x[n]$."], [129, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [130, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [131, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [132, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [133, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__call__": [[128, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.LoopFilter.__init__": [[129, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [129, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [129, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [129, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.MSK": [[135, 3, 1, "", "__init__", "Creates a new MSK object."]], "sdr.MSK.__init__": [[135, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [135, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [135, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.NCO": [[137, 2, 1, "", "K0", "(Settable) The NCO gain $K_0$."], [138, 3, 1, "", "__call__", "Steps the NCO with variable frequency and/or phase signals."], [139, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [140, 2, 1, "", "increment", "(Settable) The constant phase accumulation $omega$ of the NCO in radians/sample."], [141, 2, 1, "", "offset", "(Settable) The absolute phase offset $theta$ of the NCO in radians."], [142, 3, 1, "", "reset", "Resets the NCO."], [143, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__call__": [[138, 4, 2, "p-freq", "freq", "The variable frequency signal $f[n]$ in radians/sample. This input signal varies the per-sample phase increment of the NCO. If None, the signal is all zeros."], [138, 4, 2, "p-phase", "phase", "The variable phase signal $p[n]$ in radians. This input signal varies the per-sample phase offset of the NCO. If None, the signal is all zeros."]], "sdr.NCO.__init__": [[139, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [139, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [139, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.NCO.step": [[143, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.OQPSK": [[145, 3, 1, "", "__init__", "Creates a new OQPSK object."], [146, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [147, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."]], "sdr.OQPSK.__init__": [[145, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [145, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [145, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [145, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [145, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [145, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK": [[149, 3, 1, "", "__init__", "Creates a new PSK object."], [150, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [151, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [152, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [153, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [154, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [155, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[149, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [149, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [149, 4, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [149, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [149, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [149, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [149, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[152, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [152, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.ser": [[154, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [154, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.PiMPSK": [[157, 3, 1, "", "__init__", "Creates a new $pi/M$ PSK object."]], "sdr.PiMPSK.__init__": [[157, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [157, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [157, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [157, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [157, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [157, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [157, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.Q": [[158, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[159, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.ReplicaCorrelator": [[161, 3, 1, "", "p_d", "Computes the probability of detection $P_D$."], [162, 3, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [163, 3, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [164, 3, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.ReplicaCorrelator.p_d": [[161, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [161, 4, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [161, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."]], "sdr.ReplicaCorrelator.p_fa": [[162, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [162, 4, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [162, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [162, 4, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.ReplicaCorrelator.roc": [[163, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [163, 4, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [163, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."]], "sdr.ReplicaCorrelator.threshold": [[164, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [164, 4, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [164, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [164, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.Resampler": [[166, 3, 1, "", "__call__", "Resamples and filters the input signal $x[n]$ with the polyphase FIR filter."], [167, 3, 1, "", "__init__", "Creates a polyphase FIR rational resampling filter."], [168, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [169, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [170, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [171, 2, 1, "", "down", "The decimation rate $Q$."], [172, 2, 1, "", "method", "The method used to design the multirate filter."], [173, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [174, 2, 1, "", "rate", "The resampling rate $P/Q$."], [175, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [176, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."], [177, 2, 1, "", "up", "The interpolation rate $P$."]], "sdr.Resampler.__init__": [[167, 4, 2, "p-down", "down", "The decimation rate $Q$."], [167, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [167, 4, 2, "p-taps", "taps", "The multirate filter design specification."], [167, 4, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.albersheim": [[178, 4, 2, "p-N_nc", "N_nc", "The number of non-coherent combinations $N_{NC} ge 1$."], [178, 4, 2, "p-p_d", "p_d", "The desired probability of detection $P_D$ in $(0, 1)$."], [178, 4, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{FA}$ in $(0, 1)$."]], "sdr.average_power": [[179, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the average power. The default is None, which computes the average power of the entire array."], [179, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [179, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[180, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [180, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [180, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [180, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[181, 4, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [181, 4, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.barker": [[182, 4, 2, "p-length", "length", "The length $N$ of the Barker code/sequence."], [182, 4, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[183, 4, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [183, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [183, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[184, 4, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[185, 4, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[186, 4, 2, "p-p", "p", "The probability $p$ of a bit flip."], [186, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [186, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[187, 4, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[188, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.db": [[189, 4, 2, "p-type", "type", "The type of input value or signal."], [189, 4, 2, "p-x", "x", "The input value or signal."]], "sdr.design_lowpass_fir": [[190, 4, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [190, 4, 2, "p-order", "order", "The filter order $N$. Must be even."], [190, 4, 2, "p-window", "window", "The time-domain window to use."]], "sdr.diff_decode": [[191, 4, 2, "p-y", "y", "The input encoded data $y[k]$."], [191, 4, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[192, 4, 2, "p-x", "x", "The input uncoded data $x[k]$."], [192, 4, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[193, 4, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [193, 4, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [193, 4, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [193, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [193, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.downsample": [[194, 4, 2, "p-rate", "rate", "The downsampling factor $r$."], [194, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.ebn0_to_esn0": [[195, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [195, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [195, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[196, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [196, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [196, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [196, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[197, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the energy. The default is None, which computes the energy of the entire array."], [197, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [197, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[198, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [198, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [198, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[199, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [199, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.evm": [[200, 4, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [200, 4, 2, "p-output", "output", "The output type of the EVM calculation."], [200, 4, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [200, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.frequency_offset": [[201, 4, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [201, 4, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [201, 4, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [201, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [201, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[202, 4, 2, "p-distance", "distance", "The distance $d$ in meters between the transmitter and receiver."], [202, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[203, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [203, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [203, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [203, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[204, 4, 2, "p-n", "n", "The length of the Gray code."]], "sdr.half_sine": [[205, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [205, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [205, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.hexdump": [[206, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [206, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[207, 4, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [207, 4, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [207, 4, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.linear": [[208, 4, 2, "p-type", "type", "The type of output value or signal."], [208, 4, 2, "p-x", "x", "The input value or signal in dB."]], "sdr.mix": [[209, 4, 2, "p-complex", "complex", "Indicates whether to mix by a complex exponential or real sinusoid."], [209, 4, 2, "p-freq", "freq", "The frequency $f$ of the sinusoid in Hz (or 1/samples if sample_rate=1). The frequency must satisfy $-f_s/2 le f le f_s/2$."], [209, 4, 2, "p-phase", "phase", "The phase $phi$ of the sinusoid in degrees."], [209, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal."], [209, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.multirate_taps": [[210, 4, 2, "p-A_stop", "A_stop", "The stopband attenuation $A_{text{stop}}$ in dB."], [210, 4, 2, "p-down", "down", "The decimation rate $Q$."], [210, 4, 2, "p-half_length", "half_length", "The half-length of the polyphase filters."], [210, 4, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.pack": [[211, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [211, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [211, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[212, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the PAPR. The default is None, which computes the PAPR of the entire array."], [212, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[213, 4, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [213, 4, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [213, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[214, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the peak power. The default is None, which computes the peak power of the entire array."], [214, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [214, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[215, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [215, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.percent": [[216, 4, 2, "p-x", "x", "The input ratio."]], "sdr.plot": [[217, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [218, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [219, 5, 1, "", "eye", "Plots the eye diagram of the baseband modulated signal $x[n]$."], [220, 5, 1, "", "filter", "Plots the magnitude response $|H(omega)|^2$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [221, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [222, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [223, 5, 1, "", "magnitude_response", "Plots the magnitude response $|H(omega)|^2$ of the filter."], [224, 5, 1, "", "p_d", "Plots the probability of detection $P_D$ as a function of received SNR or ENR."], [225, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [226, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [227, 5, 1, "", "phase_response", "Plots the phase response $angle H(omega)$ of the filter."], [228, 5, 1, "", "phase_tree", "Plots the phase tree of a continuous-phase modulated (CPM) signal signal $x[n]$."], [229, 5, 1, "", "raster", "Plots a raster of the time-domain signal $x[n]$."], [230, 5, 1, "", "roc", "Plots the receiver operating characteristic (ROC) curve as a function of $P_{FA}$."], [231, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [232, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [233, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [234, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [235, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [236, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [237, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[217, 4, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [217, 4, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."], [217, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."]], "sdr.plot.constellation": [[218, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [218, 4, 2, "p-kwargs", "kwargs", "If heatmap=False, additional keyword arguments to pass to matplotlib.pyplot.scatter(). The following keyword arguments are set by default. The defaults may be overwritten."], [218, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [218, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.eye": [[219, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [219, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [219, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [219, 4, 2, "p-span", "span", "The number of symbols per raster."], [219, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [219, 4, 2, "p-x", "x", "The baseband modulated signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved."]], "sdr.plot.filter": [[220, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [220, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [220, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [220, 4, 2, "p-filter", "filter", "The filter definition."], [220, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [220, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[221, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [221, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [221, 4, 2, "p-filter", "filter", "The filter definition."], [221, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [221, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [221, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.impulse_response": [[222, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [222, 4, 2, "p-filter", "filter", "The filter definition."], [222, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.magnitude_response": [[223, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [223, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [223, 4, 2, "p-filter", "filter", "The filter definition."], [223, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [223, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [223, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.p_d": [[224, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [224, 4, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [224, 4, 2, "p-x", "x", "The SNR or ENR in dB."], [224, 4, 2, "p-x_label", "x_label", "The x-axis label to use."]], "sdr.plot.periodogram": [[225, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [225, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [225, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [225, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [225, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [225, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [225, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [225, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [225, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [225, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_delay": [[226, 4, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [226, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [226, 4, 2, "p-filter", "filter", "The filter definition."], [226, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [226, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [226, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_response": [[227, 4, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [227, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [227, 4, 2, "p-filter", "filter", "The filter definition."], [227, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [227, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [227, 4, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [227, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_tree": [[228, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [228, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [228, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [228, 4, 2, "p-span", "span", "The number of symbols per raster."], [228, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [228, 4, 2, "p-x", "x", "The baseband CPM signal $x[n]$."]], "sdr.plot.raster": [[229, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [229, 4, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\"."], [229, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.collections.LineCollection. The following keyword arguments are set by default. The defaults may be overwritten."], [229, 4, 2, "p-length", "length", "The length of each raster in samples. This must be provided if x is 1D."], [229, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [229, 4, 2, "p-stride", "stride", "The stride between each raster in samples. If None, the stride is set to length."], [229, 4, 2, "p-x", "x", "The time-domain signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved. If x is 1D, the rastering is determined by length and stride. If x is 2D, the rows correspond to each raster."]], "sdr.plot.roc": [[230, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to the plotting function defined by type."], [230, 4, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [230, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [230, 4, 2, "p-type", "type", "The type of plot to generate."]], "sdr.plot.ser": [[231, 4, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [231, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."], [231, 4, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.spectrogram": [[232, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [232, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [232, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.pcolormesh(). The following keyword arguments are set by default. The defaults may be overwritten."], [232, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [232, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [232, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [232, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [232, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [232, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[233, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [233, 4, 2, "p-filter", "filter", "The filter definition."], [233, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.symbol_map": [[234, 4, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [234, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot(). The following keyword arguments are set by default. The defaults may be overwritten."], [234, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [234, 4, 2, "p-modulation", "modulation", "The linear modulation or symbol map ${0, dots, M-1} mapsto mathbb{C}$."]], "sdr.plot.time_domain": [[235, 4, 2, "p-centered", "centered", "Indicates whether to center the x-axis about 0. This argument is mutually exclusive with offset."], [235, 4, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal. If \"color\", the real and imaginary parts will have different colors based on the current Matplotlib color cycle. If \"line\", the real part will have a solid line and the imaginary part will have a dashed line, and both lines will share the same color."], [235, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [235, 4, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. The units of the offset are $1/f_s$. This argument is mutually exclusive with centered."], [235, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [235, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[237, 4, 2, "p-filter", "filter", "The filter definition."], [237, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.polyphase_matrix": [[238, 4, 2, "p-down", "down", "The decimation rate $Q$."], [238, 4, 2, "p-taps", "taps", "The multirate FIR filter taps $h_i$."], [238, 4, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.ppb": [[239, 4, 2, "p-x", "x", "The input ratio."]], "sdr.ppm": [[240, 4, 2, "p-x", "x", "The input ratio."]], "sdr.raised_cosine": [[241, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [241, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [241, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [241, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rectangular": [[242, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [242, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [242, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[243, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [243, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[244, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [244, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [244, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [244, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[245, 4, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [245, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.snr_to_ebn0": [[246, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [246, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [246, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [246, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[247, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [247, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.to_complex_bb": [[248, 4, 2, "p-x_r", "x_r", "The real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$. If the length is odd, one zero is appended to the end."]], "sdr.to_real_pb": [[249, 4, 2, "p-x_c", "x_c", "The complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$."]], "sdr.unpack": [[250, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [250, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [250, 4, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.upsample": [[251, 4, 2, "p-rate", "rate", "The upsampling factor $r$."], [251, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.wavelength": [[252, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.zadoff_chu": [[253, 4, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [253, 4, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence. The root must be relatively prime to the length, i.e., $gcd(u, N) = 1$."], [253, 4, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence. When $q ne 0$, the returned sequence is a cyclic shift of the root-$u$ Zadoff-Chu sequence."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"convers": 0, "decibel": 0, "ratio": 0, "from": [0, 258, 259, 260], "e_b": 0, "n_0": 0, "e_": 0, "": [0, 262, 263], "n": [0, 261, 262, 263], "data": 1, "manipul": [1, 3], "detect": [2, 7], "detector": 2, "theoret": 2, "limit": 2, "digit": [3, 263], "signal": [3, 255, 261, 264], "process": 3, "fir": [3, 262], "filter": [3, 7, 262, 263, 265], "iir": [3, 263], "multir": 3, "arbitrari": [3, 261], "resampl": [3, 261], "correl": 3, "link": 4, "budget": 4, "channel": [4, 255], "capac": 4, "path": 4, "loss": 4, "antenna": 4, "measur": 5, "energi": 5, "power": [5, 264], "voltag": 5, "modul": [5, 6, 7], "linear": 6, "continu": 6, "phase": [6, 265, 266], "orthogon": 6, "puls": [6, 264, 267], "shape": [6, 264, 267], "symbol": [6, 266], "map": [6, 266], "encod": 6, "plot": [7, 264], "configur": [7, 258, 260], "time": [7, 264, 265], "domain": [7, 264, 265], "frequenc": [7, 262, 263, 264, 265], "spectral": 7, "estim": 7, "analysi": 7, "probabl": 8, "note": [9, 202, 210, 223, 225, 232], "constructor": [9, 26, 37, 44, 51, 68, 75, 94, 96, 107, 125, 134, 136, 144, 148, 156, 165], "method": [9, 26, 37, 39, 44, 51, 68, 75, 94, 96, 107, 125, 134, 136, 144, 148, 156, 160, 165], "properti": [9, 26, 37, 51, 68, 75, 94, 96, 107, 125, 134, 136, 144, 148, 156, 165], "special": [26, 37, 51, 68, 75, 94, 96, 125, 136, 165], "string": [26, 37, 51, 75, 94, 96, 107, 134, 144, 148, 156, 165], "represent": [26, 37, 51, 75, 94, 96, 107, 134, 144, 148, 156, 165], "stream": [26, 37, 51, 75, 94, 96, 165], "mode": [26, 37, 51, 75, 94, 96, 165], "onli": [26, 37, 51, 75, 94, 96, 165], "see": [44, 46, 59, 60, 61, 65, 83, 84, 86, 91, 108, 111, 121, 135, 145, 149, 152, 154, 157, 158, 159, 188, 212, 251], "also": [44, 46, 59, 60, 61, 65, 83, 84, 86, 91, 108, 111, 121, 135, 145, 149, 152, 154, 157, 158, 159, 188, 212, 251], "warn": [194, 251], "sequenc": 254, "simul": 255, "model": 255, "impair": 255, "synchron": 256, "document": 257, "instal": [257, 258, 259, 260, 268], "build": 257, "doc": 257, "serv": 257, "format": 258, "run": [258, 260], "linter": 258, "formatt": 258, "pre": 258, "commit": 258, "v": [258, 260], "code": [258, 260], "pypi": 259, "github": 259, "edit": 259, "local": 259, "folder": 259, "dev": 259, "depend": 259, "unit": 260, "test": 260, "command": 260, "line": 260, "farrow": 261, "construct": 261, "an": [261, 262, 263], "input": 261, "x": 261, "t_": 261, "rate": [261, 266], "r": 261, "y": 261, "frac": 261, "upsampl": 261, "integ": 261, "downsampl": 261, "irrat": 261, "creat": [262, 263], "examin": [262, 263, 264], "impuls": [262, 263], "respons": [262, 263, 265], "h": [262, 263], "step": [262, 263, 265], "omega": [262, 263], "group": [262, 263], "delai": [262, 263], "tau_g": [262, 263], "fulli": [262, 263], "analyz": [262, 263, 265], "zero": 263, "pole": 263, "stabil": 263, "peak": 264, "averag": 264, "qpsk": [264, 266], "variou": 264, "across": [264, 265], "excess": 264, "bandwidth": 264, "lock": 265, "loop": 265, "design": 265, "proport": 265, "plu": 265, "integr": 265, "ppi": 265, "implement": 265, "pll": 265, "close": 265, "perform": 265, "compar": 265, "zeta": 265, "b_n": 265, "t": 265, "shift": 266, "kei": 266, "constel": 266, "bpsk": 266, "8": [266, 269], "psk": 266, "16": 266, "error": 266, "curv": 266, "bit": 266, "rais": 267, "cosin": 267, "squar": 267, "root": 267, "gaussian": 267, "sdr": 268, "featur": 268, "v0": 269, "0": 269, "9": 269, "chang": 269, "contributor": 269, "7": 269, "6": 269, "5": 269, "4": 269, "3": 269, "2": 269, "1": 269, "version": 270, "alpha": 270, "releas": 270, "beta": 270}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Conversions": [[0, "conversions"]], "Decibels": [[0, "decibels"]], "Ratios": [[0, "ratios"]], "From E_b/N_0": [[0, "from-e-b-n-0"]], "From E_s/N_0": [[0, "from-e-s-n-0"]], "From S/N": [[0, "from-s-n"]], "Data manipulation": [[1, "data-manipulation"]], "Detection": [[2, "detection"], [7, "detection"]], "Detectors": [[2, "detectors"]], "Theoretical limits": [[2, "theoretical-limits"]], "Digital signal processing": [[3, "digital-signal-processing"]], "FIR filtering": [[3, "fir-filtering"]], "IIR filtering": [[3, "iir-filtering"]], "Multirate filtering": [[3, "multirate-filtering"]], "Arbitrary resampling": [[3, "arbitrary-resampling"]], "Correlation": [[3, "correlation"]], "Signal manipulation": [[3, "signal-manipulation"]], "Link budgets": [[4, "link-budgets"]], "Channel capacity": [[4, "channel-capacity"]], "Path losses": [[4, "path-losses"]], "Antennas": [[4, "antennas"]], "Measurement": [[5, "measurement"]], "Energy": [[5, "energy"]], "Power": [[5, "power"]], "Voltage": [[5, "voltage"]], "Modulation": [[5, "modulation"], [6, "modulation"], [7, "modulation"]], "Linear modulations": [[6, "linear-modulations"]], "Continuous-phase modulations": [[6, "continuous-phase-modulations"]], "Orthogonal modulations": [[6, "orthogonal-modulations"]], "Pulse shaping": [[6, "pulse-shaping"]], "Symbol mapping": [[6, "symbol-mapping"], [266, "symbol-mapping"]], "Symbol encoding": [[6, "symbol-encoding"]], "Plotting": [[7, "plotting"]], "Configuration": [[7, "configuration"], [258, "configuration"], [260, "configuration"]], "Time-domain": [[7, "time-domain"]], "Frequency-domain": [[7, "frequency-domain"]], "Spectral estimation": [[7, "spectral-estimation"]], "Filter analysis": [[7, "filter-analysis"]], "Probability": [[8, "probability"]], "Note": [[9, null], [202, null], [210, null], [223, null], [225, null], [225, null], [232, null]], "Constructors": [[9, "constructors"], [26, "constructors"], [37, "constructors"], [44, "constructors"], [51, "constructors"], [68, "constructors"], [75, "constructors"], [94, "constructors"], [96, "constructors"], [107, "constructors"], [125, "constructors"], [134, "constructors"], [136, "constructors"], [144, "constructors"], [148, "constructors"], [156, "constructors"], [165, "constructors"]], "Methods": [[9, "methods"], [26, "methods"], [37, "methods"], [39, "methods"], [44, "methods"], [51, "methods"], [68, "methods"], [75, "methods"], [94, "methods"], [96, "methods"], [107, "methods"], [125, "methods"], [134, "methods"], [136, "methods"], [144, "methods"], [148, "methods"], [156, "methods"], [160, "methods"], [165, "methods"]], "Properties": [[9, "properties"], [26, "properties"], [37, "properties"], [51, "properties"], [68, "properties"], [75, "properties"], [94, "properties"], [96, "properties"], [107, "properties"], [125, "properties"], [134, "properties"], [136, "properties"], [144, "properties"], [148, "properties"], [156, "properties"], [165, "properties"]], "Special methods": [[26, "special-methods"], [37, "special-methods"], [51, "special-methods"], [68, "special-methods"], [75, "special-methods"], [94, "special-methods"], [96, "special-methods"], [125, "special-methods"], [136, "special-methods"], [165, "special-methods"]], "String representation": [[26, "string-representation"], [37, "string-representation"], [51, "string-representation"], [75, "string-representation"], [94, "string-representation"], [96, "string-representation"], [107, "string-representation"], [134, "string-representation"], [144, "string-representation"], [148, "string-representation"], [156, "string-representation"], [165, "string-representation"]], "Streaming mode only": [[26, "streaming-mode-only"], [37, "streaming-mode-only"], [51, "streaming-mode-only"], [75, "streaming-mode-only"], [94, "streaming-mode-only"], [96, "streaming-mode-only"], [165, "streaming-mode-only"]], "See also": [[44, null], [46, null], [59, null], [60, null], [61, null], [65, null], [83, null], [84, null], [86, null], [91, null], [108, null], [111, null], [121, null], [135, null], [145, null], [149, null], [152, null], [154, null], [157, null], [158, null], [159, null], [188, null], [212, null], [251, null]], "Warning": [[194, null], [251, null]], "Sequences": [[254, "sequences"]], "Simulation": [[255, "simulation"]], "Channel models": [[255, "channel-models"]], "Signal impairments": [[255, "signal-impairments"]], "Synchronization": [[256, "synchronization"]], "Documentation": [[257, "documentation"]], "Install": [[257, "install"], [258, "install"], [260, "install"]], "Build the docs": [[257, "build-the-docs"]], "Serve the docs": [[257, "serve-the-docs"]], "Formatting": [[258, "formatting"]], "Run the linter": [[258, "run-the-linter"]], "Run the formatter": [[258, "run-the-formatter"]], "Pre-commit": [[258, "pre-commit"]], "Run from VS Code": [[258, "run-from-vs-code"], [260, "run-from-vs-code"]], "Installation": [[259, "installation"], [268, "installation"]], "Install from PyPI": [[259, "install-from-pypi"]], "Install from GitHub": [[259, "install-from-github"]], "Editable install from local folder": [[259, "editable-install-from-local-folder"]], "Install the dev dependencies": [[259, "install-the-dev-dependencies"]], "Unit Tests": [[260, "unit-tests"]], "Run from the command line": [[260, "run-from-the-command-line"]], "Farrow arbitrary resampler": [[261, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[261, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[261, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[261, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[261, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[261, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[261, "downsample-by-an-irrational-rate"]], "FIR filters": [[262, "fir-filters"]], "Create an FIR filter": [[262, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[262, "examine-the-impulse-response-h-n"], [263, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[262, "examine-the-step-response-s-n"], [263, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[262, "examine-the-frequency-response-h-omega"], [263, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[262, "examine-the-group-delay-tau-g-omega"], [263, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[262, "fully-analyze-a-fir-filter"]], "IIR filters": [[263, "iir-filters"]], "Create an IIR filter": [[263, "create-an-iir-filter"]], "Examine the zeros and poles": [[263, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[263, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[263, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[264, "peak-to-average-power"]], "QPSK signal with various pulse shapes": [[264, "qpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[264, "examine-time-domain"]], "Examine frequency domain": [[264, "examine-frequency-domain"]], "Plot across excess bandwidth": [[264, "plot-across-excess-bandwidth"]], "Phase-locked loops": [[265, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[265, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[265, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[265, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[265, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[265, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[265, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[265, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[266, "phase-shift-keying"]], "Constellations": [[266, "constellations"]], "BPSK": [[266, "bpsk"]], "QPSK": [[266, "qpsk"]], "8-PSK": [[266, "id1"]], "16-PSK": [[266, "id2"]], "Error rate curves": [[266, "error-rate-curves"]], "Bit error rate curves": [[266, "bit-error-rate-curves"]], "Symbol error rate curves": [[266, "symbol-error-rate-curves"]], "Pulse shapes": [[267, "pulse-shapes"]], "Raised cosine": [[267, "raised-cosine"]], "Square-root raised cosine": [[267, "square-root-raised-cosine"]], "Gaussian": [[267, "gaussian"]], "sdr": [[268, "sdr"]], "Features": [[268, "features"]], "v0.0": [[269, "v0-0"]], "v0.0.9": [[269, "v0-0-9"]], "Changes": [[269, "changes"], [269, "id1"], [269, "id3"], [269, "id5"], [269, "id7"], [269, "id9"], [269, "id11"], [269, "id13"], [269, "id15"]], "Contributors": [[269, "contributors"], [269, "id2"], [269, "id4"], [269, "id6"], [269, "id8"], [269, "id10"], [269, "id12"], [269, "id14"], [269, "id16"]], "v0.0.8": [[269, "v0-0-8"]], "v0.0.7": [[269, "v0-0-7"]], "v0.0.6": [[269, "v0-0-6"]], "v0.0.5": [[269, "v0-0-5"]], "v0.0.4": [[269, "v0-0-4"]], "v0.0.3": [[269, "v0-0-3"]], "v0.0.2": [[269, "v0-0-2"]], "v0.0.1": [[269, "v0-0-1"]], "Versioning": [[270, "versioning"]], "Alpha releases": [[270, "alpha-releases"]], "Beta releases": [[270, "beta-releases"]]}, "indexentries": {"module": [[3, "module-sdr"]], "sdr": [[3, "module-sdr"]]}, "docurls": ["api/conversions/", "api/data-manipulation/", "api/detection/", "api/dsp/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.Decimator/", "api/sdr.Decimator.__call__/", "api/sdr.Decimator.__init__/", "api/sdr.Decimator.__repr__/", "api/sdr.Decimator.__str__/", "api/sdr.Decimator.delay/", "api/sdr.Decimator.method/", "api/sdr.Decimator.polyphase_taps/", "api/sdr.Decimator.rate/", "api/sdr.Decimator.reset/", "api/sdr.Decimator.taps/", "api/sdr.Differentiator/", "api/sdr.Differentiator.__init__/", "api/sdr.EnergyDetector/", "api/sdr.EnergyDetector.p_d/", "api/sdr.EnergyDetector.p_fa/", "api/sdr.EnergyDetector.roc/", "api/sdr.EnergyDetector.threshold/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__call__/", "api/sdr.FIR.__init__/", "api/sdr.FIR.__len__/", "api/sdr.FIR.__repr__/", "api/sdr.FIR.__str__/", "api/sdr.FIR.delay/", "api/sdr.FIR.flush/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.frequency_response_log/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.reset/", "api/sdr.FIR.state/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__call__/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__call__/", "api/sdr.IIR.__init__/", "api/sdr.IIR.__repr__/", "api/sdr.IIR.__str__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.state/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.Integrator/", "api/sdr.Integrator.__init__/", "api/sdr.Interpolator/", "api/sdr.Interpolator.__call__/", "api/sdr.Interpolator.__init__/", "api/sdr.Interpolator.__repr__/", "api/sdr.Interpolator.__str__/", "api/sdr.Interpolator.delay/", "api/sdr.Interpolator.method/", "api/sdr.Interpolator.polyphase_taps/", "api/sdr.Interpolator.rate/", "api/sdr.Interpolator.reset/", "api/sdr.Interpolator.taps/", "api/sdr.LinearModulation/", "api/sdr.LinearModulation.__init__/", "api/sdr.LinearModulation.__repr__/", "api/sdr.LinearModulation.__str__/", "api/sdr.LinearModulation.ber/", "api/sdr.LinearModulation.bps/", "api/sdr.LinearModulation.decide_symbols/", "api/sdr.LinearModulation.demodulate/", "api/sdr.LinearModulation.map_symbols/", "api/sdr.LinearModulation.modulate/", "api/sdr.LinearModulation.order/", "api/sdr.LinearModulation.phase_offset/", "api/sdr.LinearModulation.pulse_shape/", "api/sdr.LinearModulation.rx_filter/", "api/sdr.LinearModulation.ser/", "api/sdr.LinearModulation.sps/", "api/sdr.LinearModulation.symbol_map/", "api/sdr.LinearModulation.tx_filter/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__call__/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.MSK/", "api/sdr.MSK.__init__/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__call__/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.OQPSK/", "api/sdr.OQPSK.__init__/", "api/sdr.OQPSK.__repr__/", "api/sdr.OQPSK.__str__/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.__repr__/", "api/sdr.PSK.__str__/", "api/sdr.PSK.ber/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.PiMPSK/", "api/sdr.PiMPSK.__init__/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.ReplicaCorrelator/", "api/sdr.ReplicaCorrelator.p_d/", "api/sdr.ReplicaCorrelator.p_fa/", "api/sdr.ReplicaCorrelator.roc/", "api/sdr.ReplicaCorrelator.threshold/", "api/sdr.Resampler/", "api/sdr.Resampler.__call__/", "api/sdr.Resampler.__init__/", "api/sdr.Resampler.__repr__/", "api/sdr.Resampler.__str__/", "api/sdr.Resampler.delay/", "api/sdr.Resampler.down/", "api/sdr.Resampler.method/", "api/sdr.Resampler.polyphase_taps/", "api/sdr.Resampler.rate/", "api/sdr.Resampler.reset/", "api/sdr.Resampler.taps/", "api/sdr.Resampler.up/", "api/sdr.albersheim/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.barker/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.db/", "api/sdr.design_lowpass_fir/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.downsample/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.evm/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.half_sine/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.linear/", "api/sdr.mix/", "api/sdr.multirate_taps/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.percent/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.eye/", "api/sdr.plot.filter/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.magnitude_response/", "api/sdr.plot.p_d/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.phase_tree/", "api/sdr.plot.raster/", "api/sdr.plot.roc/", "api/sdr.plot.ser/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.polyphase_matrix/", "api/sdr.ppb/", "api/sdr.ppm/", "api/sdr.raised_cosine/", "api/sdr.rectangular/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.to_complex_bb/", "api/sdr.to_real_pb/", "api/sdr.unpack/", "api/sdr.upsample/", "api/sdr.wavelength/", "api/sdr.zadoff_chu/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/formatting/", "development/installation/", "development/unit-tests/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})