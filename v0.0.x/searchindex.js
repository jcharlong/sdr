Search.setIndex({"titles": ["Data manipulation", "Filtering", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "Resampling", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.DDS", "sdr.DDS.__init__", "sdr.DDS.nco", "sdr.DDS.process", "sdr.DDS.reset", "sdr.DDS.step", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__init__", "sdr.FIR.delay", "sdr.FIR.filter", "sdr.FIR.frequency_response", "sdr.FIR.frequency_response_log", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.reset", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FIRInterpolator", "sdr.FIRInterpolator.__init__", "sdr.FIRInterpolator.filter", "sdr.FIRInterpolator.polyphase_taps", "sdr.FIRInterpolator.rate", "sdr.FIRInterpolator.reset", "sdr.FIRInterpolator.streaming", "sdr.FIRInterpolator.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.resample", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__init__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.filter", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.filter", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.process", "sdr.NCO.reset", "sdr.NCO.step", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.demodulate", "sdr.PSK.modulate", "sdr.PSK.offset", "sdr.PSK.order", "sdr.PSK.symbol_labels", "sdr.PSK.symbol_map", "sdr.Q", "sdr.Qinv", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.energy", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.hexdump", "sdr.iq_imbalance", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.plot.constellation", "sdr.plot.filter", "sdr.plot.frequency_response", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.raised_cosine", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.unpack", "Simulation", "Synchronization", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162], "hexdump": [0, 31, 125, 160, 161], "arraylik": [0, 2, 3, 4, 5, 6, 25, 28, 31, 33, 38, 39, 41, 50, 51, 52, 58, 61, 62, 65, 66, 67, 70, 81, 86, 90, 95, 98, 99, 100, 101, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 149, 150, 151], "byte": [0, 125], "width": [0, 125], "int": [0, 4, 25, 30, 31, 33, 34, 37, 38, 40, 42, 43, 44, 45, 47, 50, 51, 54, 58, 60, 65, 71, 72, 74, 75, 78, 90, 97, 98, 99, 103, 109, 113, 117, 118, 123, 124, 125, 127, 133, 134, 135, 136, 137, 138, 139, 140, 141, 146, 148, 150], "16": [0, 105, 125, 161], "str": [0, 125, 137, 140], "return": [0, 4, 8, 16, 18, 21, 22, 28, 30, 31, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 47, 52, 61, 65, 70, 71, 72, 74, 78, 86, 95, 97, 100, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 146, 147, 148, 149, 150, 154, 155], "specifi": [0, 31, 34, 35, 37, 109, 110, 119, 125, 154, 155], "pack": [0, 31, 33, 125, 127, 160, 161], "x": [0, 3, 4, 5, 6, 8, 25, 28, 31, 33, 38, 41, 50, 52, 58, 61, 65, 70, 81, 86, 90, 95, 98, 100, 101, 106, 107, 108, 109, 111, 114, 116, 117, 118, 119, 120, 121, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 147, 149, 150, 151, 156, 157, 158, 162], "bpe": [0, 127, 150], "ndarrai": [0, 2, 4, 6, 25, 28, 30, 31, 36, 38, 41, 42, 43, 44, 47, 49, 50, 52, 53, 57, 58, 61, 64, 65, 68, 69, 70, 71, 72, 74, 76, 78, 80, 81, 86, 90, 95, 97, 98, 100, 101, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 126, 127, 146, 148, 149, 150, 151], "binari": [0, 2, 4, 99, 104, 105, 111, 112, 113, 114, 115, 119, 127, 142, 150, 151], "arrai": [0, 31, 53, 57, 99, 104, 105, 111, 113, 114, 117, 118, 119, 124, 127, 143, 150, 155, 156], "an": [0, 1, 2, 38, 44, 65, 66, 67, 74, 99, 110, 127, 136, 150, 160], "multipl": [0, 127, 150], "bit": [0, 3, 31, 33, 36, 104, 105, 110, 111, 112, 114, 115, 125, 127, 150, 161], "per": [0, 28, 95, 109, 110, 121, 123, 125, 127, 146, 148, 149, 150, 156, 159], "element": [0, 125, 127, 150], "unpack": [0, 31, 33, 125, 150, 160, 161], "class": [1, 3, 7, 8, 25, 31, 33, 34, 35, 36, 37, 38, 50, 58, 65, 81, 90, 98, 152, 154, 155, 158], "fir": [1, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 133, 134, 135, 136, 138, 139, 141, 145, 160, 161], "implement": [1, 4, 7, 25, 38, 50, 58, 65, 81, 87, 90, 98, 152, 153], "finit": [1, 38, 50, 161], "impuls": [1, 5, 38, 44, 50, 65, 74, 123, 133, 136, 143, 156, 159, 161], "respons": [1, 5, 38, 42, 43, 44, 47, 50, 65, 71, 72, 74, 78, 123, 133, 134, 135, 136, 139, 141, 159, 161], "firinterpol": [1, 50, 51, 52, 53, 54, 55, 56, 57], "polyphas": [1, 50, 51, 53, 57], "interpol": [1, 50, 51, 52, 54], "iir": [1, 5, 8, 17, 43, 44, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 87, 133, 134, 135, 136, 138, 139, 141, 145, 154, 157, 160, 161], "infinit": [1, 65, 161], "awgn_capac": [2, 110, 160], "snr": [2, 31, 33, 34, 35, 36, 37, 109, 110, 151], "calcul": [2, 110, 112, 115, 122, 129], "addit": [2, 109, 110, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 151], "white": [2, 109, 110, 151], "gaussian": [2, 4, 109, 110, 123, 151, 160, 161], "nois": [2, 8, 9, 10, 15, 21, 31, 33, 34, 35, 36, 37, 81, 84, 88, 109, 110, 140, 151, 157], "awgn": [2, 109, 110, 151, 158, 160], "bec_capac": [2, 112, 160], "p": [2, 6, 106, 107, 111, 112, 114, 115, 119, 151], "erasur": [2, 111, 112, 119, 151], "bec": [2, 111, 112, 119, 151, 160], "bsc_capac": [2, 115, 160], "symmetr": [2, 114, 115, 119, 151], "bsc": [2, 114, 115, 119, 151, 160], "fspl": [2, 122, 160], "d": [2, 122, 129, 160], "f": [2, 16, 18, 38, 42, 43, 65, 71, 72, 109, 121, 122, 123, 129, 149, 153, 154, 155, 156, 157, 158, 159], "free": [2, 122], "space": [2, 43, 72, 122], "db": [2, 8, 19, 21, 31, 33, 34, 35, 37, 109, 110, 122, 123, 126, 128, 129, 156, 158, 159], "parabolic_antenna": [2, 129, 160], "freq": [2, 121, 129, 151, 153, 157], "tupl": [2, 31, 33, 36, 38, 42, 43, 65, 71, 72, 129, 132, 142], "gain": [2, 8, 11, 12, 13, 14, 15, 25, 26, 65, 66, 73, 81, 82, 83, 84, 90, 91, 92, 123, 129, 157], "g": [2, 36, 129], "beamwidth": [2, 129], "theta": [2, 5, 26, 90, 92, 94, 129, 139], "parabol": [2, 129], "reflector": [2, 129], "float": [3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 33, 34, 35, 37, 42, 43, 58, 61, 65, 66, 71, 72, 73, 81, 82, 83, 84, 85, 88, 90, 91, 92, 93, 94, 98, 99, 102, 108, 109, 110, 111, 114, 116, 120, 121, 123, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 146, 147, 148, 149, 151], "time": [3, 8, 15, 16, 18, 19, 20, 21, 22, 38, 65, 81, 84, 108, 109, 116, 119, 120, 121, 123, 126, 128, 130, 131, 133, 137, 140, 143, 146, 147, 148, 149, 151, 153, 154, 155, 159], "domain": [3, 108, 109, 116, 120, 121, 126, 128, 130, 131, 133, 137, 140, 143, 147, 149, 151], "signal": [3, 5, 8, 16, 18, 21, 22, 25, 28, 31, 33, 34, 35, 36, 37, 38, 41, 50, 52, 58, 61, 65, 70, 81, 86, 90, 95, 97, 108, 109, 110, 116, 120, 121, 122, 123, 126, 128, 129, 130, 131, 137, 140, 143, 147, 149, 154, 155, 156, 157, 159], "n": [3, 4, 5, 6, 8, 25, 28, 30, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 47, 50, 52, 58, 61, 65, 70, 71, 72, 74, 75, 78, 81, 86, 90, 95, 97, 106, 107, 108, 109, 110, 113, 116, 119, 120, 121, 124, 126, 128, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 147, 149, 151, 157, 159], "average_pow": [3, 108, 128, 160], "averag": [3, 31, 108, 109, 110, 128, 137], "papr": [3, 128, 156, 160, 161], "peak": [3, 116, 128, 130, 131], "ratio": [3, 21, 31, 33, 34, 35, 36, 37, 109, 110, 128], "peak_pow": [3, 128, 130, 160], "crest_factor": [3, 116, 128, 160, 161], "crest": [3, 116], "factor": [3, 8, 15, 24, 81, 84, 85, 116, 157], "peak_voltag": [3, 116, 131, 160], "rms_voltag": [3, 116, 147, 160], "root": [3, 4, 143, 147, 148, 154], "mean": [3, 137, 147, 159], "squar": [3, 4, 122, 129, 143, 147, 148, 154], "rm": [3, 116, 147], "errorr": [3, 31, 32, 33, 34, 35, 36, 37], "A": [3, 8, 16, 18, 19, 20, 21, 22, 24, 31, 38, 81, 113, 124, 125, 126, 129, 146, 148, 152, 157], "rate": [3, 8, 15, 23, 31, 32, 33, 35, 36, 42, 43, 50, 51, 52, 54, 58, 61, 71, 72, 121, 133, 134, 135, 137, 138, 139, 140, 143, 149, 151], "ber": [3, 31], "symbol": [3, 31, 33, 36, 98, 99, 100, 101, 104, 105, 109, 110, 121, 123, 132, 142, 146, 148, 156, 158, 159], "ser": [3, 31], "psk": [4, 98, 99, 100, 101, 102, 103, 104, 105, 109, 121, 126, 149, 160], "phase": [4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 121, 126, 138, 139, 151, 160], "shift": [4, 98, 100, 101, 102, 103, 105, 154, 155], "kei": [4, 98, 100, 101, 102, 103, 105], "demodul": [4, 98, 100], "time_bandwidth": [4, 123], "span": [4, 123, 146, 148, 156, 159], "sp": [4, 123, 146, 148, 156, 159], "raised_cosin": [4, 146, 159, 160, 161], "alpha": [4, 123, 144, 146, 148, 156, 159], "rais": [4, 143, 146, 148, 154], "cosin": [4, 143, 146, 148, 154], "rc": [4, 146], "root_raised_cosin": [4, 133, 134, 135, 136, 138, 139, 141, 143, 145, 148, 154, 156, 159, 160, 161], "srrc": [4, 143, 148, 156], "binary_cod": [4, 113], "gener": [4, 109, 113, 124, 158], "code": [4, 99, 104, 105, 113, 124], "length": [4, 44, 47, 113, 123, 124, 133, 136, 137, 140, 141, 146, 148, 153, 156, 159], "2": [4, 8, 16, 18, 21, 31, 42, 43, 50, 53, 57, 71, 72, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159], "gray_cod": [4, 124, 160], "grai": [4, 99, 104, 105, 124], "diff_decod": [4, 117, 118, 160], "y": [4, 25, 28, 30, 38, 41, 50, 52, 61, 65, 70, 81, 86, 90, 95, 97, 109, 111, 114, 117, 118, 119, 121, 126, 132, 140, 142, 143, 149, 157], "y_prev": [4, 117, 118], "0": [4, 5, 6, 15, 25, 26, 31, 38, 42, 43, 50, 53, 57, 65, 66, 71, 72, 84, 90, 92, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 123, 124, 126, 127, 129, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 162], "differenti": [4, 117, 118], "decod": [4, 117], "input": [4, 8, 16, 18, 21, 22, 25, 28, 38, 39, 41, 44, 47, 50, 51, 52, 58, 59, 61, 62, 65, 66, 67, 70, 74, 78, 81, 86, 90, 95, 106, 109, 110, 111, 112, 114, 115, 117, 118, 119, 127, 136, 141, 150, 151, 154, 155, 157], "data": [4, 117, 118, 125, 127, 150, 160], "k": [4, 33, 98, 99, 100, 101, 103, 117, 118, 132, 142, 156, 159], "diff_encod": [4, 117, 118, 160], "use_styl": [5, 144], "appli": [5, 50, 121, 126, 132, 142, 144, 149, 151], "": [5, 8, 16, 18, 19, 20, 22, 23, 33, 34, 35, 36, 37, 38, 42, 43, 47, 65, 71, 72, 78, 98, 100, 101, 109, 110, 121, 126, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 149, 153, 158, 160], "default": [5, 44, 47, 104, 105, 140, 144], "matplotlib": [5, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 153, 154, 155, 156, 157, 158, 159, 160], "rcparam": [5, 144, 153, 157], "time_domain": [5, 109, 143, 156, 159, 160, 161], "sample_r": [5, 8, 15, 23, 42, 43, 71, 72, 121, 133, 134, 135, 137, 138, 139, 140, 143, 153, 157, 159], "1": [5, 6, 8, 15, 18, 22, 24, 25, 26, 31, 42, 43, 50, 53, 57, 65, 66, 71, 72, 81, 84, 85, 90, 92, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 162], "periodogram": [5, 137, 156, 160, 161], "estim": [5, 98, 100, 137, 140, 157], "power": [5, 108, 109, 110, 128, 129, 130, 137, 159], "spectral": [5, 137, 156, 159], "densiti": [5, 21, 137, 156, 159], "p_": [5, 108, 109, 119, 128, 130, 137], "xx": [5, 137], "us": [5, 25, 27, 39, 51, 58, 59, 66, 67, 81, 87, 98, 100, 110, 112, 115, 125, 127, 133, 136, 137, 140, 141, 150, 154, 155, 159, 160, 162], "welch": [5, 137, 140], "method": [5, 137, 140, 154, 155], "spectrogram": [5, 140, 160, 161], "b": [5, 65, 67, 110, 123, 125, 133, 134, 135, 136, 138, 139, 141, 145, 159], "h": [5, 38, 39, 42, 43, 44, 50, 65, 71, 72, 74, 81, 123, 133, 134, 136, 156, 157, 159], "omega": [5, 26, 90, 92, 93, 133, 134, 135, 138, 139, 157], "step": [5, 25, 28, 30, 38, 47, 65, 78, 90, 95, 97, 133, 141], "zero": [5, 50, 62, 65, 66, 80, 81, 127, 133, 134, 135, 136, 138, 139, 141, 143, 145, 154, 156, 157, 159], "pole": [5, 65, 66, 76, 133, 134, 135, 136, 138, 139, 141, 145, 154], "frequency_respons": [5, 38, 42, 43, 65, 71, 72, 134, 154, 155, 157, 159, 160, 161], "group_delai": [5, 135, 154, 155, 160, 161], "group": [5, 135], "delai": [5, 25, 38, 40, 58, 81, 90, 117, 118, 135, 138, 157], "tau_g": [5, 135], "impulse_respons": [5, 38, 44, 65, 74, 123, 136, 146, 148, 154, 155, 159, 160, 161], "phase_delai": [5, 138, 160], "tau_": [5, 138], "phi": [5, 98, 99, 102, 121, 126, 138], "phase_respons": [5, 139, 160], "step_respons": [5, 38, 47, 65, 78, 141, 154, 155, 157, 160, 161], "zeros_pol": [5, 145, 155, 160, 161], "kwarg": [5, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145], "q": [6, 106, 107, 160], "comput": [6, 106, 107, 109, 122, 154, 155, 157, 159], "complementari": [6, 106, 107], "cumul": [6, 106, 107], "distribut": [6, 106, 107], "function": [6, 8, 17, 38, 65, 66, 81, 106, 107, 110, 123, 137, 140, 154, 155, 157, 159, 160, 161], "standard": [6, 106, 107], "normal": [6, 8, 10, 15, 81, 84, 88, 106, 107, 123, 140, 157, 159], "mathcal": [6, 106, 107, 109, 119], "qinv": [6, 106, 107, 160], "invers": [6, 107], "farrowresampl": [7, 58, 59, 60, 61, 62, 63, 64, 153, 160, 161], "cubic": [7, 58], "farrow": [7, 58, 59, 60, 61, 62, 63, 64, 161], "arbitrari": [7, 58, 59, 60, 61, 62, 63, 64, 160, 161], "closedlooppl": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 152, 157, 160, 161], "defin": [8, 38, 65, 109, 119, 123, 152, 155, 160], "perform": [8, 152, 154, 155, 160], "close": [8, 15, 17, 152, 161], "loop": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 152, 160, 161], "pll": [8, 9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 152, 161], "thi": [8, 28, 33, 34, 35, 37, 38, 50, 65, 95, 98, 105, 109, 110, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 153, 155, 157, 159], "i": [8, 15, 24, 31, 36, 38, 44, 47, 48, 50, 53, 56, 57, 58, 63, 65, 74, 78, 79, 81, 84, 85, 88, 106, 107, 109, 110, 112, 115, 119, 121, 122, 123, 125, 126, 127, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 145, 146, 148, 149, 150, 153, 154, 155, 157, 158, 159, 160, 162], "meant": 8, "analysi": [8, 15, 157, 161], "onli": [8, 38, 46, 50, 55, 58, 62, 65, 77, 104, 105, 109, 157], "block": [8, 25, 50, 81, 90, 117, 118], "diagram": [8, 25, 50, 81, 90, 117, 118], "bb": [8, 157], "ped": [8, 14, 15, 84, 157], "lf": [8, 157], "lo": [8, 157], "e": [8, 25, 36, 108, 111, 112, 120, 154, 155, 157, 158], "j": [8, 25, 50, 53, 57, 65, 109, 119, 126, 154, 155, 157], "nco": [8, 11, 15, 25, 26, 27, 84, 90, 91, 92, 93, 94, 95, 96, 97, 152, 157, 160, 161], "local": [8, 157], "oscil": [8, 25, 27, 90, 92, 152, 157, 161], "baseband": [8, 156, 157], "error": [8, 14, 15, 21, 31, 32, 33, 35, 36, 37, 81, 84, 115, 157], "detector": [8, 14, 15, 84, 157], "filter": [8, 12, 13, 15, 17, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 123, 133, 134, 135, 136, 138, 139, 141, 143, 145, 146, 148, 152, 156, 159, 160, 161], "numer": [8, 25, 27, 90, 92, 152, 155, 157, 161], "control": [8, 25, 27, 90, 92, 152, 157, 161], "The": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 57, 58, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 154, 155, 157, 159, 160, 162], "transfer": [8, 17, 38, 65, 66, 81, 123, 154, 155, 157], "2nd": [8, 81, 84, 152, 157, 161], "order": [8, 31, 36, 38, 45, 58, 60, 65, 75, 81, 84, 98, 99, 103, 109, 121, 123, 146, 148, 149, 152, 157, 158, 161], "proport": [8, 12, 81, 82, 84, 122, 129, 152, 161], "plu": [8, 81, 84, 152, 161], "integr": [8, 13, 81, 83, 84, 152, 155, 161], "h_": [8, 50, 53, 57, 157], "z": [8, 25, 38, 65, 81, 90, 117, 118, 154, 155, 157], "k_1": [8, 12, 81, 82, 157], "k_2": [8, 13, 81, 83, 157], "frac": [8, 16, 18, 21, 22, 65, 81, 108, 109, 110, 116, 122, 123, 126, 128, 129, 147, 157], "k_0": [8, 11, 15, 26, 84, 90, 91, 92, 157], "k_p": [8, 14, 15, 84, 157], "refer": [8, 16, 18, 19, 20, 21, 22, 31, 58, 81, 109, 116, 121, 123, 128, 146, 148, 149, 155, 159], "michael": [8, 16, 18, 19, 20, 21, 22, 81, 146, 148], "rice": [8, 16, 18, 19, 20, 21, 22, 81, 146, 148], "digit": [8, 16, 18, 19, 20, 21, 22, 25, 26, 81, 146, 148, 152, 157, 160, 161], "commun": [8, 16, 18, 19, 20, 21, 22, 81, 146, 148, 157, 160], "discret": [8, 16, 18, 19, 20, 21, 22, 81, 109, 119, 146, 148, 151, 153, 157], "approach": [8, 16, 18, 19, 20, 21, 22, 81, 110, 112, 115, 146, 148, 157], "appendix": [8, 81, 146, 148], "c": [8, 16, 18, 19, 20, 21, 22, 33, 34, 35, 36, 37, 81, 98, 105, 110, 112, 115, 122, 129, 157], "lock": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 160], "exampl": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 129, 133, 134, 135, 136, 138, 139, 141, 143, 144, 145, 146, 148, 149, 150, 157], "see": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 48, 49, 52, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 123, 146, 148, 160], "noise_bandwidth": [8, 15, 81, 84, 88], "damping_factor": [8, 15, 81, 84, 85], "creat": [8, 15, 25, 26, 31, 32, 38, 39, 50, 51, 58, 59, 65, 66, 67, 81, 84, 90, 92, 98, 99, 109, 121, 143, 149, 153, 156, 157, 158, 159], "object": [8, 15, 31, 32, 98, 99, 155, 157, 158], "frequency_lock_tim": [8, 16], "freq_offset": [8, 16, 18], "frequenc": [8, 16, 18, 20, 38, 42, 43, 65, 71, 72, 81, 121, 122, 129, 133, 134, 135, 137, 138, 139, 140, 151, 159], "lock_tim": [8, 18, 157], "phase_error_vari": [8, 21], "cn0": [8, 21], "varianc": [8, 21, 109], "steadi": [8, 21], "state": [8, 21, 38, 46, 48, 50, 55, 56, 58, 62, 63, 65, 77, 79], "phase_lock_tim": [8, 22], "bn": [8, 9], "bandwidth": [8, 9, 10, 15, 19, 81, 84, 88, 110, 123, 146, 148, 157, 159], "b_n": [8, 9, 10, 15, 16, 18, 21, 22, 81, 84, 88], "hz": [8, 9, 15, 16, 18, 21, 42, 43, 71, 72, 81, 84, 88, 110, 121, 122, 123, 129, 153], "bnt": [8, 10, 157], "t": [8, 10, 15, 81, 84, 88, 123, 125, 153], "repres": [8, 17, 111, 112], "k0": [8, 11, 15, 25, 26, 84, 90, 91, 92], "k1": [8, 12, 81, 82, 157], "k2": [8, 13, 81, 83, 157], "kp": [8, 14, 15, 84], "omega_3db": [8, 19], "3": [8, 16, 18, 19, 22, 31, 50, 53, 57, 102, 103, 104, 105, 109, 110, 111, 113, 114, 119, 121, 122, 123, 124, 125, 126, 127, 129, 133, 134, 135, 136, 138, 139, 141, 143, 145, 149, 150, 155, 157, 159, 160, 161], "omega_": [8, 19], "textrm": [8, 19], "radian": [8, 19, 20, 21, 25, 26, 157], "omega_n": [8, 20, 157], "natur": [8, 20], "sampl": [8, 15, 23, 25, 26, 28, 30, 38, 40, 42, 43, 44, 47, 50, 52, 58, 62, 71, 72, 74, 78, 81, 84, 88, 90, 92, 93, 95, 97, 109, 121, 123, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 146, 148, 149, 151, 153, 156, 157, 159], "f_": [8, 15, 23, 42, 43, 52, 71, 72, 121, 123, 133, 134, 135, 137, 138, 139, 140, 143, 149, 153, 154, 155, 157, 159], "zeta": [8, 15, 24, 81, 84, 85], "damp": [8, 15, 24, 81, 84, 85, 157], "properti": [9, 10, 11, 12, 13, 14, 17, 19, 20, 23, 24, 27, 40, 45, 48, 49, 53, 54, 56, 57, 60, 63, 64, 68, 69, 73, 75, 76, 79, 80, 82, 83, 85, 87, 88, 91, 93, 94, 102, 103, 104, 105], "paramet": [15, 16, 18, 21, 26, 28, 30, 33, 34, 35, 37, 39, 41, 42, 43, 44, 47, 51, 52, 59, 61, 62, 66, 67, 70, 71, 72, 74, 78, 84, 86, 92, 95, 97, 99, 100, 101, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150], "where": [15, 81, 84, 88, 109, 110, 119, 123, 154, 155, 160], "period": [15, 81, 84, 88], "second": [15, 16, 18, 22, 31, 81, 84, 88, 123], "critic": [15, 24, 81, 84, 85, 157], "underdamp": [15, 24, 81, 84, 85], "overdamp": [15, 24, 81, 84, 85], "ted": [15, 84], "t_": [16, 18, 22, 61, 123, 159], "fl": [16, 18], "4": [16, 18, 31, 43, 50, 53, 57, 72, 102, 103, 104, 105, 109, 110, 112, 113, 115, 119, 121, 122, 123, 124, 125, 126, 127, 129, 133, 134, 135, 136, 138, 139, 141, 143, 144, 145, 146, 148, 149, 150, 153, 155, 158, 161], "delta": [16, 18, 38, 44, 65, 74, 136, 154, 155], "offset": [16, 18, 25, 26, 90, 92, 94, 98, 99, 102, 109, 121, 126, 149, 151, 157], "take": [16, 18, 22], "onto": [16, 18, 22], "equat": [16, 18, 19, 20, 21, 22, 65], "39": 16, "pl": [18, 22], "38": 18, "34": 19, "33": 20, "sigma_": 21, "theta_": 21, "n_0": [21, 33, 34, 35, 36, 37, 109, 110, 158], "carrier": 21, "43": 21, "40": 22, "less": 24, "than": [24, 104, 105, 126, 132, 142], "greater": 24, "dd": [25, 26, 27, 28, 29, 30, 90, 152, 157, 160, 161], "direct": [25, 26, 152, 157, 161], "synthes": [25, 26, 152, 157, 161], "note": [25, 38, 50, 53, 57, 65, 81, 90, 109, 110, 112, 115, 117, 118, 123, 126, 129, 140], "increment": [25, 26, 28, 90, 92, 93, 95, 157], "v": [25, 90], "output": [25, 28, 30, 38, 41, 44, 47, 50, 52, 65, 66, 67, 74, 78, 81, 86, 90, 95, 97, 109, 110, 111, 112, 114, 115, 118, 119, 127, 136, 141, 150, 153, 154, 155, 157], "complex": [25, 28, 30, 98, 100, 101, 105, 109, 110, 126, 132, 142, 151, 153, 154, 155, 158], "exponenti": [25, 28, 30, 153, 154, 155], "constant": [25, 26, 81, 90, 92, 93, 155, 157], "accumul": [25, 26, 31, 90, 92, 93, 157], "absolut": [25, 26, 90, 92, 94, 110], "unit": [25, 38, 47, 65, 78, 81, 90, 92, 93, 94, 108, 109, 110, 117, 118, 120, 130, 131, 141, 146, 147, 148, 154, 155, 157], "adder": [25, 81, 90, 117, 118, 157], "process": [25, 28, 90, 95, 155, 157], "variabl": [25, 28, 90, 95, 125, 157], "reset": [25, 29, 38, 46, 50, 55, 58, 62, 65, 77, 81, 89, 90, 96], "forward": [25, 30, 90, 97], "vari": [28, 95], "number": [30, 31, 33, 34, 37, 42, 43, 44, 47, 71, 72, 74, 78, 97, 109, 123, 125, 127, 133, 134, 135, 136, 137, 138, 139, 140, 141, 146, 148, 150], "measur": [31, 33, 108, 109, 116, 120, 128, 130, 131, 147, 157, 160, 161], "new": [31, 32, 58, 59, 98, 99, 149], "In": [31, 39, 41, 48, 51, 52, 53, 56, 57, 59, 63, 66, 67, 79, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 129, 133, 134, 135, 136, 138, 139, 141, 143, 144, 145, 146, 148, 149, 150, 153, 158], "vector": [31, 62, 137, 140], "from": [31, 42, 43, 65, 66, 71, 72, 98, 99, 105, 140, 154, 155, 157, 160], "first": [31, 50, 127, 150], "receiv": [31, 33, 122], "contain": [31, 109, 125], "10": [31, 53, 57, 109, 110, 113, 119, 121, 122, 123, 124, 125, 126, 128, 129, 132, 133, 134, 135, 136, 138, 139, 141, 143, 145, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159], "x_hat": [31, 33, 98, 100, 132, 158], "add": [31, 33, 36, 109, 121, 149, 151, 158, 162], "out": [31, 53, 57, 102, 103, 104, 105, 106, 107, 111, 113, 114, 117, 118, 119, 122, 124, 127, 129, 135, 144, 150], "5": [31, 50, 53, 57, 104, 109, 111, 113, 114, 115, 119, 121, 123, 124, 125, 126, 129, 133, 134, 135, 136, 138, 139, 141, 143, 145, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 161], "total": [31, 159], "ar": [31, 33, 34, 35, 37, 39, 43, 50, 51, 53, 57, 59, 66, 67, 72, 99, 110, 111, 112, 114, 115, 127, 132, 133, 134, 135, 137, 138, 139, 140, 142, 144, 153, 155, 157, 159, 160, 162], "count": [31, 34], "error_r": [31, 35, 36], "everi": [31, 153], "can": [31, 33, 34, 35, 37, 81, 109, 123, 127, 137, 140, 154, 155, 162], "obtain": 31, "follow": [31, 126, 144, 157], "6": [31, 50, 53, 57, 104, 105, 113, 119, 122, 124, 125, 129, 133, 134, 135, 136, 138, 139, 141, 143, 145, 154, 155, 157, 158], "tabul": [31, 32], "given": [31, 33, 34, 35, 37, 58, 61, 154, 155], "none": [31, 35, 38, 44, 47, 58, 62, 81, 89, 109, 110, 119, 127, 132, 133, 136, 137, 140, 141, 142, 150, 151, 153], "all": [31, 36], "ascend": [31, 36], "correspond": [31, 36], "e_b": [33, 34, 35, 36, 37, 110], "e_": [33, 34, 35, 36, 37, 109, 110, 158], "other": [33, 34, 35, 37, 153, 162], "quantiti": [33, 34, 35, 36, 37], "howev": [33, 34, 35, 37, 81, 112, 115, 153], "user": [33, 34, 35, 37, 154, 155], "caution": [33, 34, 35, 37], "consist": [33, 34, 35, 36, 37], "instanc": [33, 34, 35, 37], "transmit": 33, "hat": [33, 98, 100, 132, 142], "section": [33, 34, 35, 36, 37, 155, 157], "specif": [36, 159], "whatev": 36, "wa": [36, 110], "provid": [36, 140, 160], "wrapper": [38, 65], "scipi": [38, 41, 52, 65, 137, 140, 159, 160], "convolv": [38, 41, 52, 143, 156], "It": [38, 65, 81, 109], "support": [38, 65], "one": [38, 65, 104, 105, 123, 125, 133, 134, 135, 137, 138, 139, 140, 154, 155, 156, 159], "stream": [38, 39, 41, 46, 48, 50, 51, 52, 55, 56, 58, 59, 62, 63, 65, 66, 67, 77, 79], "its": [38, 65, 66, 109, 154, 155, 159], "feedforward": [38, 39, 49, 50, 51, 53, 57, 65, 67, 69, 133, 134, 135, 136, 138, 139, 141, 145, 154, 155], "coeffici": [38, 39, 50, 51, 65, 67, 133, 134, 135, 136, 138, 139, 141, 145, 154, 155], "h_i": [38, 39, 49, 50, 51, 53, 57, 154], "sum_": [38, 65, 108, 109, 110, 120, 147], "sum": [38, 65, 159], "limits_": [38, 65], "bool": [38, 39, 48, 50, 51, 56, 58, 59, 63, 65, 66, 67, 79, 132, 139, 142], "fals": [38, 39, 50, 51, 58, 59, 65, 66, 67, 111, 114, 119, 132, 155, 159], "frequency_response_log": [38, 43, 65, 72], "logarithm": [38, 43, 65, 72, 133, 134, 135, 137, 138, 139, 154, 155], "axi": [38, 43, 65, 72, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 153], "when": [38, 44, 47, 65, 74, 78, 109, 110, 111, 112, 114, 115, 133, 134, 135, 136, 138, 139, 141, 153, 154, 155], "mode": [38, 39, 41, 46, 48, 50, 51, 52, 55, 56, 58, 59, 62, 63, 65, 66, 67, 77, 79, 156], "u": [38, 47, 65, 78, 141, 154, 155], "indic": [38, 39, 48, 50, 51, 56, 58, 59, 63, 65, 66, 67, 79, 126, 139], "whether": [38, 39, 48, 50, 51, 56, 58, 59, 63, 65, 66, 67, 79, 139], "tap": [38, 49, 50, 51, 53, 57, 58, 64, 65, 68, 69, 154, 155], "previou": [39, 51, 59, 62, 66, 67, 117, 118], "preserv": [39, 48, 51, 56, 59, 63, 66, 67, 79], "between": [39, 48, 50, 51, 56, 59, 63, 66, 67, 79, 122, 137, 140, 157], "call": [39, 48, 51, 56, 59, 63, 66, 67, 79], "liter": [41, 52, 134, 135, 138, 139], "full": [41, 52], "valid": [41, 52, 156], "same": [41, 52, 154], "non": [41, 52], "convolut": [41, 52], "detail": [41, 52], "alwai": [41, 52], "produc": [41, 50, 52, 123, 159], "1024": [42, 43, 71, 72, 133, 134, 135, 138, 139, 156, 159], "plot": [42, 43, 44, 47, 71, 72, 74, 78, 102, 103, 104, 105, 109, 110, 112, 115, 121, 123, 126, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161], "decad": [43, 72, 133, 134, 135, 138, 139, 154, 157], "equival": [50, 109, 110, 153], "upsampl": 50, "r": [50, 51, 52, 53, 54, 57, 58, 61, 110, 123, 146, 148, 155, 157, 159], "insert": 50, "each": [50, 125, 137, 140], "prototyp": [50, 53, 57], "instead": [50, 132], "decompos": 50, "parallel": 50, "commut": 50, "prevent": 50, "need": 50, "multipli": 50, "case": 50, "2x": 50, "hold": [50, 127], "top": 50, "bottom": 50, "relat": [50, 53, 57, 110, 123], "polyphase_tap": [50, 53, 57], "befor": [53, 57, 162], "decomposit": [53, 57], "after": [53, 57], "np": [53, 57, 109, 110, 111, 112, 114, 115, 119, 121, 126, 133, 134, 135, 136, 138, 139, 141, 143, 145, 149, 153, 154, 155, 156, 157, 158, 159], "arang": [53, 57, 109, 153, 156, 157], "7": [53, 57, 104, 105, 113, 119, 124, 125, 143], "8": [53, 57, 102, 103, 104, 105, 109, 110, 112, 113, 115, 119, 123, 124, 125, 129, 133, 134, 135, 136, 138, 139, 141, 143, 144, 145, 146, 148, 154, 155, 156, 157, 159], "9": [53, 57, 113, 119, 124, 125, 146, 148, 156, 158, 159, 161], "resampl": [58, 59, 60, 61, 62, 63, 64, 160, 161], "http": [58, 116, 123, 128], "wirelesspi": 58, "com": [58, 123], "fraction": [58, 62, 123, 153], "structur": 58, "index": [58, 62, 142], "should": 62, "equal": 62, "three": [62, 153, 159], "If": [62, 99, 109, 110, 119, 127, 132, 133, 136, 137, 140, 141, 142, 143, 150, 160], "lfilter": 65, "b_i": [65, 67, 69, 133, 134, 135, 136, 138, 139, 141, 145, 155], "feedback": [65, 67, 68, 133, 134, 135, 136, 138, 139, 141, 145, 155], "a_j": [65, 67, 68, 133, 134, 135, 136, 138, 139, 141, 145, 155], "These": [65, 144, 157], "differ": [65, 104, 105, 159], "a_0": 65, "left": [65, 108, 109, 110, 120, 122, 123, 126, 129, 130, 131, 147], "m": [65, 98, 99, 100, 101, 103, 105, 119], "right": [65, 108, 109, 110, 120, 122, 123, 126, 129, 130, 131, 147], "classmethod": [65, 66], "zerospol": [65, 66, 133, 134, 135, 136, 138, 139, 141, 145, 155], "self": [65, 66], "100": [65, 74, 78, 109, 110, 112, 115, 133, 136, 141, 143, 149, 153], "a_tap": [65, 68, 133, 134, 135, 136, 138, 139, 141, 145, 155, 157], "b_tap": [65, 69, 133, 134, 135, 136, 138, 139, 141, 145, 155, 157], "loopfilt": [81, 82, 83, 84, 85, 86, 87, 88, 89, 152, 157, 160, 161], "ppi": [81, 84, 152], "track": 81, "cannot": 81, "chirp": 81, "ramp": 81, "underli": [81, 87], "modul": [98, 99, 101, 103, 109, 121, 126, 149, 158, 160], "decim": [98, 100, 101, 105, 158], "maximum": [98, 100, 132, 142], "likelihood": [98, 100], "degre": [98, 99, 102, 121, 126, 129], "symbol_label": [98, 99, 104, 105], "valu": [98, 99, 104, 106, 107, 117, 118, 123, 126, 132, 140, 142, 155], "label": [98, 99, 104, 109, 121, 123, 126, 140, 143, 146, 148, 149, 153, 156, 157, 159], "consecut": [98, 99, 104], "symbol_map": [98, 102, 103, 104, 105, 142, 143, 156], "map": [98, 105, 142], "dot": [98, 105], "mapsto": [98, 105], "mathbb": [98, 105, 110], "bin": [99, 104, 105, 142, 158], "ge": 99, "like": [99, 160], "must": [99, 109, 123, 146, 148], "have": [99, 127, 150], "uniqu": 99, "plt": [102, 103, 104, 105, 109, 110, 112, 115, 121, 123, 126, 133, 134, 135, 136, 138, 139, 141, 143, 145, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159], "figur": [102, 103, 104, 105, 109, 110, 112, 115, 121, 123, 126, 133, 134, 135, 136, 138, 139, 141, 143, 144, 145, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159], "figsiz": [102, 103, 104, 105, 109, 110, 112, 115, 121, 123, 126, 133, 134, 135, 136, 138, 139, 141, 143, 144, 145, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159], "45": [102, 109, 121, 126, 149], "adjac": [104, 105, 159], "annot": [104, 105, 142, 161], "mai": [104, 105, 144, 155], "more": [104, 105, 140], "00000000e": [105, 155], "00": [105, 155], "00j": 105, "07106781e": 105, "01": [105, 125, 155, 157], "01j": 105, "12323400e": 105, "17": [105, 129], "83697020e": 105, "22464680e": 105, "16j": 105, "real": [106, 107, 109, 153, 154, 155, 156, 157], "probabl": [106, 107, 111, 112, 114, 115, 119, 151, 160], "exceed": [106, 107], "15865525393145707": [106, 107], "158655": [106, 107], "0000010494310452": [106, 107], "text": [108, 109, 110, 112, 115, 116, 121, 122, 128, 130, 131, 147, 149], "avg": [108, 109, 128], "seed": 109, "which": [109, 110, 121, 126, 129, 132, 142, 149, 153, 157, 159], "ad": [109, 160, 161], "desir": [109, 158], "explicitli": 109, "assum": [109, 119, 127, 150], "known": 109, "pass": [109, 111, 114, 119, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 151, 154, 155], "linear": 109, "random": [109, 111, 114, 119, 121, 126, 143, 149, 156, 158], "numpi": [109, 150, 153, 154, 155, 156, 157, 158, 159, 160], "default_rng": 109, "noisi": 109, "w": [109, 153, 154, 155, 156, 157, 158, 159], "sigma": [109, 110], "For": [109, 133, 134, 135, 136, 138, 139, 141, 145, 154], "sim": 109, "cn": 109, "sinusoid": [109, 155], "set": [109, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 155], "sin": 109, "pi": [109, 122, 123, 126, 129, 133, 134, 135, 136, 138, 139, 141, 143, 145, 153, 154, 155, 156, 157], "titl": [109, 110, 112, 115, 121, 126, 143, 149, 153, 156, 157, 159], "tight_layout": [109, 110, 112, 115, 121, 143, 149, 156, 157, 158, 159], "qpsk": [109, 121, 143, 149], "ha": [109, 123, 129, 157, 159], "randint": [109, 111, 114, 119, 121, 126, 143, 149, 156, 158], "1_000": [109, 121, 126, 149], "constel": [109, 121, 126, 132, 149], "zorder": [109, 121, 149], "infti": [109, 110], "nand": 109, "capac": [110, 112, 115], "channel": [110, 111, 112, 114, 115, 119, 160], "2d": 110, "x_i": [110, 111, 112, 114, 115, 119, 126], "y_i": [110, 111, 112, 114, 115, 119], "log_2": 110, "monoton": 110, "decreas": 110, "limit": [110, 132, 142], "esn0": [110, 158], "linspac": [110, 112, 115, 155], "20": [110, 111, 114, 119, 121, 125, 126, 156, 159], "xlabel": [110, 112, 115, 153, 157, 159], "energi": [110, 120, 146, 148, 160], "psd": 110, "ylabel": [110, 112, 115, 153, 157, 159], "grid": [110, 112, 115, 144, 153, 157, 159], "true": [110, 111, 112, 114, 115, 119, 132, 139, 142, 144, 158], "At": 110, "occur": 110, "view": 110, "59": 110, "shannon": 110, "ebn0": 110, "log10": [110, 159], "sequenc": [111, 114, 119, 151], "through": [111, 114, 119, 151, 154, 155, 157], "25": [111, 114, 119, 153, 157, 159], "roughli": [111, 114, 153], "eras": 111, "11": [113, 124], "12": [113, 124, 154, 158], "13": [113, 124], "14": [113, 124], "15": [113, 124], "transit": [114, 115, 119, 151], "flip": 114, "h_b": 115, "cf": 116, "v_": [116, 131, 147], "en": [116, 128], "wikipedia": [116, 128], "org": [116, 128], "wiki": [116, 128], "encod": [117, 118], "uncod": 118, "dmc": [119, 151, 160], "memoryless": [119, 151], "matrix": [119, 151], "pr": 119, "y_j": 119, "alphabet": 119, "size": [119, 153, 156, 157, 159], "ldot": 119, "frequency_offset": [121, 151], "freq_rat": 121, "cycl": 121, "000": 121, "1e": 121, "5e": 121, "deg": [121, 126], "path": 122, "loss": 122, "log_": [122, 128], "distanc": 122, "meter": [122, 129], "transmitt": 122, "km": 122, "link": [122, 160], "ghz": [122, 129], "1e3": 122, "1e9": [122, 129], "92": 122, "44778322188337": 122, "so": [122, 123, 160], "doubl": [122, 129], "result": [122, 129], "increas": [122, 129, 155], "2e3": 122, "98": 122, "468383135163": 122, "also": [122, 123, 160], "2e9": 122, "puls": [123, 143, 146, 148, 160, 161], "shape": [123, 143, 146, 148, 160, 161], "product": [123, 159], "sym": [123, 159], "side": [123, 133, 134, 135, 137, 138, 139, 140, 154, 155, 156, 159], "thought": [123, 162], "smaller": [123, 159], "wider": 123, "even": [123, 146, 148], "amplitud": [123, 126, 151, 153, 157], "nomin": 123, "passband": [123, 156], "exp": [123, 126, 133, 134, 135, 136, 138, 139, 141, 143, 145, 153, 155, 156, 157], "sqrt": [123, 147, 156, 157, 159], "ln": 123, "www": 123, "mathwork": 123, "help": 123, "ref": 123, "gaussdesign": 123, "html": 123, "onlinelibrari": 123, "wilei": 123, "doi": 123, "pdf": 123, "1002": 123, "9780470041956": 123, "app2": 123, "h_0p1": [123, 146, 148], "h_0p2": 123, "h_0p3": 123, "displai": [125, 133, 134, 135, 137, 138, 139, 140], "consid": 125, "convert": 125, "line": 125, "string": [125, 137, 140], "print": [125, 153, 154, 155, 157], "quick": 125, "brown": 125, "fox": 125, "jump": 125, "over": 125, "lazi": 125, "dog": 125, "00000000": 125, "54": 125, "68": 125, "65": 125, "71": 125, "75": [125, 157, 158], "69": 125, "63": 125, "6b": 125, "62": 125, "72": 125, "6f": 125, "77": 125, "6e": 125, "00000010": 125, "66": 125, "78": 125, "6a": 125, "6d": 125, "70": [125, 159], "73": 125, "76": 125, "74": 125, "00000020": 125, "6c": 125, "61": 125, "7a": 125, "79": 125, "64": [125, 155], "67": 125, "he": 125, "02": [125, 155, 157], "03": [125, 155], "04": [125, 155], "00000004": 125, "05": [125, 153, 155, 157], "06": 125, "07": 125, "08": 125, "00000008": 125, "09": 125, "0a": 125, "iq_imbal": [126, 151, 160], "iq": [126, 151], "imbal": [126, 151], "posit": 126, "compon": 126, "larger": [126, 132, 142], "quadratur": 126, "lead": 126, "g_i": 126, "180": 126, "g_q": 126, "x_q": 126, "horizont": 126, "stretch": 126, "while": [126, 159], "neg": 126, "vertic": 126, "y1": 126, "y2": 126, "subplot": [126, 157, 158], "y_1": 126, "legend": [126, 153, 156, 157, 159], "y_2": 126, "northwest": 126, "northeast": 126, "dtype": [127, 143, 150, 157], "dtypelik": [127, 150], "most": [127, 150], "signific": [127, 150], "enough": 127, "fill": 127, "last": 127, "remain": 127, "type": [127, 134, 135, 137, 138, 139, 150, 161], "smallest": 127, "unsign": 127, "integ": 127, "uint8": [127, 150], "diamet": 129, "effici": 129, "55": 129, "le": [129, 146, 148], "eta": 129, "dbi": 129, "half": 129, "arcsin": 129, "83": 129, "dish": 129, "21": 129, "810210290266568": 129, "437435887991374": 129, "23": 129, "sinc": 129, "antenna": 129, "we": [129, 160], "observ": 129, "830810203546193": 129, "529544741425365": 129, "max": [130, 131], "voltag": [131, 147], "heatmap": [132, 158], "scatter": 132, "both": [132, 142, 153, 157], "keyword": [132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 154, 155], "argument": [132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 154, 155], "pyplot": [132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 153, 154, 155, 156, 157, 158, 159], "hist2d": 132, "n_time": [133, 155], "n_freq": 133, "x_axi": [133, 134, 135, 137, 138, 139, 140, 154, 155, 156, 157], "two": [133, 134, 135, 137, 138, 139, 140, 153, 154, 155], "log": [133, 134, 135, 137, 138, 139, 154, 155, 157], "n_t": 133, "n_f": 133, "scale": [133, 134, 135, 137, 138, 139, 140, 154, 155], "option": [133, 134, 135, 137, 138, 139, 140], "spectrum": [133, 134, 135, 137, 138, 139, 140], "h_srrc": [133, 134, 135, 136, 138, 139, 141, 143, 145], "1j": [133, 134, 135, 136, 138, 139, 141, 143, 145, 153, 155, 156, 157], "conj": [133, 134, 135, 136, 138, 139, 141, 145, 155, 157], "30": [133, 136, 141, 155], "ylim": [135, 154, 157, 159], "48": 135, "52": 135, "window": [137, 140], "hann": [137, 140], "overlap": [137, 140, 156], "fft": [137, 140], "median": 137, "segment": [137, 140], "256": [137, 140, 156], "point": [137, 140], "unwrap": [139, 157], "pcolormesh": 140, "By": 140, "color": [140, 153, 156, 157, 159], "bar": 140, "rang": [140, 157], "10th": 140, "100th": 140, "percentil": 140, "dynam": 140, "activ": 140, "chang": [140, 162], "vmin": 140, "vmax": 140, "represent": 142, "50": [142, 153, 156], "bpsk": [143, 156], "1000": 143, "10e3": 143, "complex64": [143, 157], "style": 144, "revert": 144, "rcdefault": 144, "_rc_param": 144, "rc_param": 144, "ax": [144, 153, 157], "autolayout": 144, "max_open_warn": 144, "titleweight": 144, "bold": 144, "linestyl": [144, 153, 157, 159], "excess": [146, 148, 159], "h_0p5": [146, 148], "h_0p9": [146, 148], "sample_rate_offset": [149, 151], "ppm": [149, 151], "part": [149, 157], "million": 149, "import": [153, 154, 155, 156, 157, 158, 159, 160], "config": [153, 154, 155, 156, 157, 158, 159], "inlinebackend": [153, 154, 155, 156, 157, 158, 159], "print_figure_kwarg": [153, 154, 155, 156, 157, 158, 159], "facecolor": [153, 154, 155, 156, 157, 158, 159], "widget": [153, 154, 155, 156, 157, 158, 159], "prop_cycl": [153, 157], "by_kei": [153, 157], "continu": 153, "tx": 153, "decai": [153, 155], "marker": [153, 154, 155], "o": 153, "fillstyl": 153, "imag": 153, "origin": 153, "show": [153, 154, 155, 156, 157, 158, 159], "now": 153, "accomplish": 153, "librari": [153, 158, 160, 162], "def": [153, 158], "resample_sign": 153, "new_sample_r": 153, "ty": 153, "notic": [153, 159], "200": 153, "four": 153, "400": 153, "appear": 153, "fourth": 153, "often": 153, "do": 153, "align": 153, "315": 153, "32": 153, "below": [154, 155], "00095881": 154, "00175008": 154, "00423912": 154, "00588237": 154, "00615087": 154, "00474585": 154, "00170436": 154, "0025481": 154, "00721629": 154, "01123216": 154, "01342329": 154, "01273174": 154, "00845039": 154, "00043678": 154, "01073645": 154, "02372925": 154, "03650167": 154, "04650553": 154, "05098414": 154, "04734541": 154, "03355823": 154, "00851466": 154, "0276993": 154, "07367186": 154, "12670168": 154, "18306847": 154, "2381038": 154, "28726435": 154, "32607284": 154, "3509308": 154, "35948882": 154, "conveni": [154, 155], "evalu": [154, 155], "envelop": [154, 155], "easili": [154, 155], "here": [154, 155], "altern": 155, "conjug": 155, "0x000002214b040a88": 155, "47820725": 155, "78207252e": 155, "58172329e": 155, "10862468e": 155, "86109590e": 155, "21565653e": 155, "01140214e": 155, "57286400e": 155, "67772160e": 155, "47338728e": 155, "10422993e": 155, "89312837e": 155, "12240078e": 155, "03953322e": 155, "69685122e": 155, "63882791e": 155, "81474977e": 155, "47193366e": 155, "85259041e": 155, "15647504e": 155, "23851924e": 155, "42176895e": 155, "84684395e": 155, "42721858e": 155, "72236648e": 155, "14721649e": 155, "10813095e": 155, "94024315e": 155, "78877688e": 155, "74077567e": 155, "87820725": 155, "53637958": 155, "94724205": 155, "13335164": 155, "1455082": 155, "04436799": 155, "88708159": 155, "71930943": 155, "5719707": 155, "46154771": 155, "39261642": 155, "36139242": 155, "35935288": 155, "3763214": 155, "40270968": 155, "43085717": 155, "45557651": 155, "47410241": 155, "48566716": 155, "49090568": 155, "49124786": 155, "48840102": 155, "4839738": 155, "47925143": 155, "47510421": 155, "47199608": 155, "47005584": 155, "46917696": 155, "46911955": 155, "denomin": 155, "73910363": 155, "30614675j": 155, "plane": 155, "endpoint": 155, "concaten": 155, "0x000002214dc574c8": 155, "lyon": 155, "understand": 155, "3rd": 155, "edit": 155, "insid": 155, "circl": 155, "outsid": 155, "unstabl": 155, "n_symbol": 156, "500": [156, 157], "x_bb_rect": 156, "papr_bb_rect": 156, "x_pb_rect": 156, "papr_pb_rect": 156, "x_bb_0p9": 156, "papr_bb_0p9": 156, "x_bb_0p5": 156, "papr_bb_0p5": 156, "x_bb_0p1": 156, "papr_bb_0p1": 156, "2f": 156, "rf": [156, 157], "xlim": [156, 157, 159], "x_pb_0p9": 156, "papr_pb_0p9": 156, "x_pb_0p5": 156, "papr_pb_0p5": 156, "x_pb_0p1": 156, "papr_pb_0p1": 156, "configur": 157, "0x00000290f1ce3488": 157, "theta_0": 157, "phase_error": 157, "freq_estim": 157, "suptitl": [157, 158], "ones": 157, "angl": 157, "system": [157, 160], "avail": [157, 158], "001": 157, "005": 157, "b_nt": 157, "0005": 157, "00001": 157, "0125": 157, "015": 157, "0175": 157, "t_lock": 157, "analyze_psk": 158, "100_000": 158, "achiev": [158, 159], "n0": 158, "18": 158, "rectangular": 159, "rect": 159, "rc_0p1": 159, "rc_0p5": 159, "rc_0p9": 159, "nyquist": 159, "pm": 159, "roll": 159, "60": 159, "nearli": 159, "compar": 159, "null": 159, "small": 159, "lobe": 159, "much": 159, "higher": 159, "h_rect": 159, "freqz": 159, "worn": 159, "whole": 159, "h_rc_0p1": 159, "h_rc_0p5": 159, "h_rc_0p9": 159, "rel": 159, "main": 159, "p_rect": 159, "cumsum": 159, "ab": 159, "p_rc_0p1": 159, "p_rc_0p5": 159, "p_rc_0p9": 159, "One": 159, "within": 159, "variou": 159, "srrc_0p1": 159, "srrc_0p5": 159, "srrc_0p9": 159, "therefor": 159, "similar": 159, "significantli": 159, "due": 159, "being": 159, "h_srrc_0p1": 159, "h_srrc_0p5": 159, "h_srrc_0p9": 159, "p_srrc_0p1": 159, "p_srrc_0p5": 159, "p_srrc_0p9": 159, "gauss_0p1": 159, "gauss_0p2": 159, "gauss_0p3": 159, "python": 160, "packag": 160, "softwar": 160, "radio": 160, "goal": 160, "tool": 160, "design": 160, "build": 160, "analyz": 160, "reli": 160, "interoper": 160, "veri": 160, "possibl": 160, "numba": 160, "acceler": 160, "computation": 160, "intens": 160, "addition": 160, "aim": 160, "replic": 160, "relev": 160, "matlab": 160, "dsp": 160, "toolbox": 160, "progress": 160, "someth": 160, "you": 160, "includ": 160, "pleas": 160, "open": 160, "issu": 160, "github": 160, "impair": 160, "manipul": 160, "model": 160, "budget": 160, "util": 160, "releas": 161, "juli": 161, "2023": 161, "helper": 161, "improv": 161, "matt": 161, "hostett": 161, "mhostett": 161, "semant": 162, "major": 162, "minor": 162, "patch": 162, "introduc": 162, "api": 162, "featur": 162, "backward": 162, "compat": 162, "make": 162, "bug": 162, "fix": 162, "There": 162, "guarante": 162, "them": 162, "thei": 162}, "objects": {"": [[1, 0, 0, 1, "sdr", ""]], "sdr": [[8, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [25, 1, 1, "", "DDS", "Implements a direct digital synthesizer (DDS)."], [31, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [38, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [50, 1, 1, "", "FIRInterpolator", "Implements a polyphase finite impulse response (FIR) interpolating filter."], [58, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [65, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [81, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [90, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [98, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [106, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [107, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [108, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [109, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [110, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [111, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [112, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [113, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [114, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [115, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [116, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [117, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [118, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [119, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [120, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [121, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [122, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [123, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [124, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [125, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [126, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [127, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [128, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [129, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [130, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [131, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [146, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [147, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [148, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [149, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [150, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."]], "sdr.ClosedLoopPLL": [[9, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [10, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [11, 2, 1, "", "K0", "The NCO gain $K_0$."], [12, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [13, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [14, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [15, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [16, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [17, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [18, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [19, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [20, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [21, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [22, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [23, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [24, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[15, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [15, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [15, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [15, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [15, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[16, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[18, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[21, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.DDS": [[26, 3, 1, "", "__init__", "Creates a direct digital synthesizer (DDS)."], [27, 2, 1, "", "nco", "The numerically-controlled oscillator (NCO) used by the DDS."], [28, 3, 1, "", "process", "Steps the DDS with the variable phase increment signal $x[n]$."], [29, 3, 1, "", "reset", "Resets the DDS."], [30, 3, 1, "", "step", "Steps the DDS forward by $N$ samples."]], "sdr.DDS.__init__": [[26, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [26, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [26, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.DDS.process": [[28, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the DDS."]], "sdr.DDS.step": [[30, 4, 2, "p-N", "N", "The number of samples $N$ to step the DDS forward."]], "sdr.ErrorRate": [[32, 3, 1, "", "__init__", "Creates a new error rate tabulation object."], [33, 3, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [34, 3, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [35, 3, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [36, 3, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [37, 3, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[33, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [33, 4, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [33, 4, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[34, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[35, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[37, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[39, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [40, 2, 1, "", "delay", "The delay of the FIR filter in samples."], [41, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the FIR filter."], [42, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the FIR filter."], [43, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the FIR filter on a logarithmic frequency axis."], [44, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [45, 2, 1, "", "order", "The order of the FIR filter, $N$."], [46, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [47, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [48, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [49, 2, 1, "", "taps", "The feedforward taps $h_i$."]], "sdr.FIR.__init__": [[39, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$."], [39, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to filter()."]], "sdr.FIR.filter": [[41, 4, 2, "p-mode", "mode", "The non-streaming convolution mode. See scipy.signal.convolve() for details. In streaming mode, $N$ inputs always produce $N$ outputs."], [41, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.FIR.frequency_response": [[42, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [42, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.frequency_response_log": [[43, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [43, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [43, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[44, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.step_response": [[47, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIRInterpolator": [[51, 3, 1, "", "__init__", "Creates a polyphase FIR interpolating filter with feedforward coefficients $h_i$."], [52, 3, 1, "", "filter", "Filters and interpolates the input signal $x[n]$ with the FIR filter."], [53, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [54, 2, 1, "", "rate", "The interpolation rate $r$."], [55, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [56, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [57, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.FIRInterpolator.__init__": [[51, 4, 2, "p-rate", "rate", "The interpolation rate $r$."], [51, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to filter()."], [51, 4, 2, "p-taps", "taps", "The feedforward coefficients $h_i$."]], "sdr.FIRInterpolator.filter": [[52, 4, 2, "p-mode", "mode", "The non-streaming convolution mode. See scipy.signal.convolve() for details. In streaming mode, $N$ inputs always produce $N r$ outputs."], [52, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$."]], "sdr.FarrowResampler": [[59, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [60, 2, 1, "", "order", "The order of the filter."], [61, 3, 1, "", "resample", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [62, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [63, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [64, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__init__": [[59, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to resample()."]], "sdr.FarrowResampler.resample": [[61, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [61, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.reset": [[62, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[66, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [67, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [68, 2, 1, "", "a_taps", "The feedback taps $a_j$."], [69, 2, 1, "", "b_taps", "The feedforward taps $b_i$."], [70, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the IIR filter."], [71, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the IIR filter."], [72, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the IIR filter on a logarithmic frequency axis."], [73, 2, 1, "", "gain", "The gain of the IIR filter."], [74, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [75, 2, 1, "", "order", "The order of the IIR filter, $N$."], [76, 2, 1, "", "poles", "The poles of the IIR filter."], [77, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [78, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [79, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [80, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[66, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [66, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [66, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."], [66, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__init__": [[67, 4, 2, "p-a", "a", "The feedback coefficients $a_j$."], [67, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [67, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."]], "sdr.IIR.filter": [[70, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.IIR.frequency_response": [[71, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [71, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[72, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [72, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [72, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[74, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[78, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.LoopFilter": [[82, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [83, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [84, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [85, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [86, 3, 1, "", "filter", "Filters the input signal $x[n]$."], [87, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [88, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [89, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__init__": [[84, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [84, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [84, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [84, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.LoopFilter.filter": [[86, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.NCO": [[91, 2, 1, "", "K0", "The NCO gain $K_0$."], [92, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [93, 2, 1, "", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [94, 2, 1, "", "offset", "The absolute offset $theta$ of the NCO in units."], [95, 3, 1, "", "process", "Steps the NCO with the variable-increment signal $x[n]$."], [96, 3, 1, "", "reset", "Resets the NCO."], [97, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__init__": [[92, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [92, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [92, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in units."]], "sdr.NCO.process": [[95, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the NCO."]], "sdr.NCO.step": [[97, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.PSK": [[99, 3, 1, "", "__init__", "Creates a new PSK object."], [100, 3, 1, "", "demodulate", "Demodulates the complex symbols $hat{x}[k]$ to decimal symbols $hat{s}[k]$ using maximum-likelihood estimation."], [101, 3, 1, "", "modulate", "Modulates to decimal symbols $s[k]$ to complex symbols $x[k]$."], [102, 2, 1, "", "offset", "The phase offset $phi$ in degrees."], [103, 2, 1, "", "order", "The modulation order $M = 2^k$."], [104, 2, 1, "", "symbol_labels", "The symbols values (labels) of consecutive symbols."], [105, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[99, 4, 2, "p-offset", "offset", "The phase offset $phi$ in degrees."], [99, 4, 2, "p-order", "order", "The modulation order $M = 2^k$ with $k ge 1$."], [99, 4, 2, "p-symbol_labels", "symbol_labels", "The symbol labels of consecutive symbols. If \"bin\", the symbols are binary-coded. If \"gray\", the symbols are Gray-coded. If an array-like object, the symbols are labeled by the values in the array. The array must have unique values from $0$ to $M-1$."]], "sdr.PSK.demodulate": [[100, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to demodulate."]], "sdr.PSK.modulate": [[101, 4, 2, "p-symbols", "symbols", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.Q": [[106, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[107, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.average_power": [[108, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[109, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [109, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [109, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [109, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[110, 4, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [110, 4, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.bec": [[111, 4, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [111, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[112, 4, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[113, 4, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[114, 4, 2, "p-p", "p", "The probability $p$ of a bit flip."], [114, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[115, 4, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[116, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.diff_decode": [[117, 4, 2, "p-y", "y", "The input encoded data $y[k]$."], [117, 4, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[118, 4, 2, "p-x", "x", "The input uncoded data $x[k]$."], [118, 4, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[119, 4, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [119, 4, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [119, 4, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [119, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.energy": [[120, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.frequency_offset": [[121, 4, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [121, 4, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [121, 4, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [121, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [121, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[122, 4, 2, "p-d", "d", "The distance $d$ in meters between the transmitter and receiver."], [122, 4, 2, "p-f", "f", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[123, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [123, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [123, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[124, 4, 2, "p-n", "n", "The length of the Gray code."]], "sdr.hexdump": [[125, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [125, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[126, 4, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [126, 4, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [126, 4, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.pack": [[127, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [127, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [127, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[128, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[129, 4, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [129, 4, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [129, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[130, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[131, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.plot": [[132, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [133, 5, 1, "", "filter", "Plots the frequency response $H(omega)$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [134, 5, 1, "", "frequency_response", "Plots the frequency response $H(omega)$ of the filter."], [135, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [136, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [137, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [138, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [139, 5, 1, "", "phase_response", "Plots the phase response $Theta(omega)$ of the filter."], [140, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [141, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [142, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [143, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [144, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [145, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.constellation": [[132, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [132, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [132, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.filter": [[133, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [133, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [133, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [133, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [133, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [133, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [133, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.frequency_response": [[134, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [134, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [134, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [134, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [134, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [134, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[135, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [135, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [135, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [135, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [135, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [135, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.impulse_response": [[136, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [136, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [136, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.plot.periodogram": [[137, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [137, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [137, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [137, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [137, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [137, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [137, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [137, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_delay": [[138, 4, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [138, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [138, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [138, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [138, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [138, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_response": [[139, 4, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [139, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [139, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [139, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [139, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [139, 4, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [139, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.spectrogram": [[140, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [140, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [140, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [140, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [140, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [140, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [140, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[141, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [141, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [141, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.plot.symbol_map": [[142, 4, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [142, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [142, 4, 2, "p-symbol_map", "symbol_map", "The complex symbols $hat{x}[k]$."]], "sdr.plot.time_domain": [[143, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\"."], [143, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[145, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [145, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.raised_cosine": [[146, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [146, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [146, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[147, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[148, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [148, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [148, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[149, 4, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [149, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.unpack": [[150, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [150, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [150, 4, 2, "p-x", "x", "The input array with bpe bits per element."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"data": 0, "manipul": 0, "filter": [1, 5, 154, 155, 157], "link": 2, "budget": 2, "channel": [2, 151], "capac": 2, "path": 2, "loss": 2, "antenna": 2, "measur": 3, "energi": 3, "power": [3, 156], "voltag": 3, "error": 3, "modul": 4, "class": 4, "puls": [4, 156, 159], "shape": [4, 156, 159], "symbol": 4, "map": 4, "encod": 4, "plot": 5, "configur": 5, "time": [5, 157], "domain": [5, 157], "frequenc": [5, 154, 155, 157], "analysi": 5, "probabl": 6, "resampl": [7, 153], "note": 8, "constructor": [8, 25, 31, 38, 50, 58, 65, 81, 90, 98], "method": [8, 25, 31, 38, 50, 58, 65, 81, 90, 98], "properti": [8, 25, 38, 50, 58, 65, 81, 90, 98], "see": [25, 31, 33, 42, 43, 44, 47, 71, 72, 74, 78, 90, 106, 107, 116, 128, 133, 134, 135, 136, 138, 139, 141, 145], "also": [25, 31, 33, 42, 43, 44, 47, 71, 72, 74, 78, 90, 106, 107, 116, 128, 133, 134, 135, 136, 138, 139, 141, 145], "simul": 151, "model": 151, "signal": [151, 153], "impair": 151, "synchron": 152, "farrow": 153, "arbitrari": 153, "construct": 153, "an": [153, 154, 155], "input": 153, "x": 153, "n": [153, 154, 155], "t_": 153, "rate": 153, "r": 153, "y": 153, "frac": 153, "upsampl": 153, "integ": 153, "downsampl": 153, "irrat": 153, "fir": 154, "creat": [154, 155], "examin": [154, 155], "impuls": [154, 155], "respons": [154, 155, 157], "h": [154, 155], "step": [154, 155, 157], "": [154, 155], "omega": [154, 155], "group": [154, 155], "delai": [154, 155], "tau_g": [154, 155], "fulli": [154, 155], "analyz": [154, 155, 157], "iir": 155, "zero": 155, "pole": 155, "digit": 155, "stabil": 155, "peak": 156, "averag": 156, "rectangular": 156, "squar": [156, 159], "root": [156, 159], "rais": [156, 159], "cosin": [156, 159], "phase": [157, 158], "lock": 157, "loop": 157, "design": 157, "proport": 157, "plu": 157, "integr": 157, "ppi": 157, "implement": 157, "pll": 157, "close": 157, "perform": 157, "compar": 157, "across": 157, "zeta": 157, "b_n": 157, "t": 157, "shift": 158, "kei": 158, "constel": 158, "bpsk": 158, "qpsk": 158, "8": 158, "psk": 158, "16": 158, "gaussian": 159, "sdr": 160, "featur": 160, "v0": 161, "0": 161, "2": 161, "chang": 161, "contributor": 161, "1": 161, "version": 162, "alpha": 162, "releas": 162, "beta": 162}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Data manipulation": [[0, "data-manipulation"]], "Filtering": [[1, "filtering"]], "Link budgets": [[2, "link-budgets"]], "Channel capacity": [[2, "channel-capacity"]], "Path losses": [[2, "path-losses"]], "Antennas": [[2, "antennas"]], "Measurement": [[3, "measurement"]], "Energy": [[3, "energy"]], "Power": [[3, "power"]], "Voltage": [[3, "voltage"]], "Errors": [[3, "errors"]], "Modulation": [[4, "modulation"]], "Classes": [[4, "classes"]], "Pulse shaping": [[4, "pulse-shaping"]], "Symbol mapping": [[4, "symbol-mapping"]], "Symbol encoding": [[4, "symbol-encoding"]], "Plotting": [[5, "plotting"]], "Configuration": [[5, "configuration"]], "Time-domain": [[5, "time-domain"]], "Frequency-domain": [[5, "frequency-domain"]], "Filter analysis": [[5, "filter-analysis"]], "Probability": [[6, "probability"]], "Resampling": [[7, "resampling"]], "Note": [[8, null]], "Constructors": [[8, "constructors"], [25, "constructors"], [31, "constructors"], [38, "constructors"], [50, "constructors"], [58, "constructors"], [65, "constructors"], [81, "constructors"], [90, "constructors"], [98, "constructors"]], "Methods": [[8, "methods"], [25, "methods"], [31, "methods"], [38, "methods"], [50, "methods"], [58, "methods"], [65, "methods"], [81, "methods"], [90, "methods"], [98, "methods"]], "Properties": [[8, "properties"], [25, "properties"], [38, "properties"], [50, "properties"], [58, "properties"], [65, "properties"], [81, "properties"], [90, "properties"], [98, "properties"]], "See also": [[25, null], [31, null], [33, null], [42, null], [43, null], [44, null], [47, null], [71, null], [72, null], [74, null], [78, null], [90, null], [106, null], [107, null], [116, null], [128, null], [133, null], [134, null], [135, null], [136, null], [138, null], [139, null], [141, null], [145, null]], "Simulation": [[151, "simulation"]], "Channel models": [[151, "channel-models"]], "Signal impairments": [[151, "signal-impairments"]], "Synchronization": [[152, "synchronization"]], "Farrow arbitrary resampler": [[153, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[153, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[153, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[153, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[153, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[153, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[153, "downsample-by-an-irrational-rate"]], "FIR filters": [[154, "fir-filters"]], "Create an FIR filter": [[154, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[154, "examine-the-impulse-response-h-n"], [155, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[154, "examine-the-step-response-s-n"], [155, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[154, "examine-the-frequency-response-h-omega"], [155, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[154, "examine-the-group-delay-tau-g-omega"], [155, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[154, "fully-analyze-a-fir-filter"]], "IIR filters": [[155, "iir-filters"]], "Create an IIR filter": [[155, "create-an-iir-filter"]], "Examine the zeros and poles": [[155, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[155, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[155, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[156, "peak-to-average-power"]], "Rectangular pulse shape": [[156, "rectangular-pulse-shape"]], "Square-root raised cosine pulse shape": [[156, "square-root-raised-cosine-pulse-shape"]], "Phase-locked loops": [[157, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[157, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[157, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[157, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[157, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[157, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[157, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[157, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[158, "phase-shift-keying"]], "Constellations": [[158, "constellations"]], "BPSK": [[158, "bpsk"]], "QPSK": [[158, "qpsk"]], "8-PSK": [[158, "id1"]], "16-PSK": [[158, "id2"]], "Pulse shapes": [[159, "pulse-shapes"]], "Raised cosine": [[159, "raised-cosine"]], "Square-root raised cosine": [[159, "square-root-raised-cosine"]], "Gaussian": [[159, "gaussian"]], "sdr": [[160, "sdr"]], "Features": [[160, "features"]], "v0.0": [[161, "v0-0"]], "v0.0.2": [[161, "v0-0-2"]], "Changes": [[161, "changes"], [161, "id1"]], "Contributors": [[161, "contributors"], [161, "id2"]], "v0.0.1": [[161, "v0-0-1"]], "Versioning": [[162, "versioning"]], "Alpha releases": [[162, "alpha-releases"]], "Beta releases": [[162, "beta-releases"]]}, "indexentries": {"module": [[1, "module-sdr"]], "sdr": [[1, "module-sdr"]]}, "docurls": ["api/data-manipulation/", "api/filtering/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/resampling/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.DDS/", "api/sdr.DDS.__init__/", "api/sdr.DDS.nco/", "api/sdr.DDS.process/", "api/sdr.DDS.reset/", "api/sdr.DDS.step/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__init__/", "api/sdr.FIR.delay/", "api/sdr.FIR.filter/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.frequency_response_log/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.reset/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FIRInterpolator/", "api/sdr.FIRInterpolator.__init__/", "api/sdr.FIRInterpolator.filter/", "api/sdr.FIRInterpolator.polyphase_taps/", "api/sdr.FIRInterpolator.rate/", "api/sdr.FIRInterpolator.reset/", "api/sdr.FIRInterpolator.streaming/", "api/sdr.FIRInterpolator.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.resample/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__init__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.filter/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.filter/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.process/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.demodulate/", "api/sdr.PSK.modulate/", "api/sdr.PSK.offset/", "api/sdr.PSK.order/", "api/sdr.PSK.symbol_labels/", "api/sdr.PSK.symbol_map/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.energy/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.plot.constellation/", "api/sdr.plot.filter/", "api/sdr.plot.frequency_response/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.raised_cosine/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.unpack/", "api/simulation/", "api/synchronization/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})