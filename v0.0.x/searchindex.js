Search.setIndex({"titles": ["sdr", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.DDS", "sdr.DDS.__init__", "sdr.DDS.nco", "sdr.DDS.process", "sdr.DDS.reset", "sdr.DDS.step", "sdr.FIR", "sdr.FIR.__init__", "sdr.FIR.delay", "sdr.FIR.filter", "sdr.FIR.frequency_response", "sdr.FIR.frequency_response_log", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.reset", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.resample", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__init__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.filter", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.filter", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.process", "sdr.NCO.reset", "sdr.NCO.step", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.demodulate", "sdr.PSK.modulate", "sdr.PSK.offset", "sdr.PSK.order", "sdr.PSK.symbol_map", "sdr.average_power", "sdr.awgn", "sdr.crest_factor", "sdr.energy", "sdr.gaussian", "sdr.hexdump", "sdr.pack", "sdr.papr", "sdr.peak_power", "sdr.peak_voltage", "sdr.plot.constellation", "sdr.plot.filter", "sdr.plot.frequency_response", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.periodogram", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.raised_cosine", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.unpack", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"class": [0, 1, 18, 24, 36, 43, 59, 68, 76, 109, 110, 113], "fir": [0, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 94, 95, 96, 97, 100, 103, 115, 116], "implement": [0, 18, 24, 36, 43, 59, 65, 68, 76, 108], "finit": [0, 24, 116], "impuls": [0, 24, 30, 43, 52, 87, 94, 97, 101, 111, 114, 116], "respons": [0, 24, 28, 29, 30, 33, 43, 49, 50, 52, 56, 87, 94, 95, 96, 97, 100, 114, 116], "iir": [0, 1, 10, 29, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 65, 94, 95, 96, 97, 100, 103, 109, 112, 115, 116], "an": [0, 24, 30, 43, 44, 45, 52, 89, 97, 107, 115], "infinit": [0, 43, 116], "gaussian": [0, 84, 87, 115, 116], "time_bandwidth": [0, 87], "float": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 36, 39, 43, 44, 49, 50, 51, 59, 60, 61, 62, 63, 66, 68, 69, 70, 71, 72, 76, 77, 80, 83, 84, 85, 86, 87, 90, 91, 92, 94, 95, 96, 98, 99, 101, 104, 105, 106], "span": [0, 87, 104, 106, 111, 114], "int": [0, 18, 23, 24, 26, 28, 29, 30, 31, 33, 36, 38, 43, 49, 50, 52, 53, 56, 68, 75, 76, 77, 81, 84, 87, 88, 89, 94, 95, 96, 97, 98, 99, 100, 104, 106, 107], "sp": [0, 87, 104, 106, 111, 114], "ndarrai": [0, 18, 21, 23, 24, 27, 28, 29, 30, 33, 35, 36, 39, 42, 43, 46, 47, 48, 49, 50, 52, 54, 56, 58, 59, 64, 68, 73, 75, 76, 78, 79, 82, 84, 87, 89, 104, 106, 107], "return": [0, 1, 9, 11, 14, 15, 21, 23, 24, 27, 28, 29, 30, 33, 39, 43, 48, 49, 50, 52, 56, 64, 73, 75, 78, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 104, 105, 106, 107, 109, 110], "raised_cosin": [0, 104, 114, 115, 116], "alpha": [0, 87, 102, 104, 106, 111, 114], "rais": [0, 101, 104, 106, 109], "cosin": [0, 101, 104, 106, 109], "rc": [0, 104], "root_raised_cosin": [0, 94, 95, 96, 97, 100, 101, 103, 106, 109, 111, 114, 115, 116], "squar": [0, 101, 105, 106, 109], "root": [0, 101, 105, 106, 109], "srrc": [0, 101, 106, 111], "farrowresampl": [0, 36, 37, 38, 39, 40, 41, 42, 108, 115, 116], "cubic": [0, 36], "farrow": [0, 36, 37, 38, 39, 40, 41, 42, 116], "arbitrari": [0, 36, 37, 38, 39, 40, 41, 42, 115, 116], "psk": [0, 76, 77, 78, 79, 80, 81, 82], "shift": [0, 76, 78, 79, 80, 81, 82, 109, 110], "kei": [0, 76, 78, 79, 80, 81, 82], "demodul": [0, 76, 78], "closedlooppl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 112, 115, 116], "A": [0, 1, 9, 11, 12, 13, 14, 15, 17, 24, 59, 88, 104, 106, 112], "defin": [0, 1, 24, 43, 84, 87, 110, 115], "perform": [0, 1, 109, 110, 115], "close": [0, 1, 8, 10, 116], "pll": [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 116], "dd": [0, 18, 19, 20, 21, 22, 23, 68, 112, 115, 116], "direct": [0, 18, 19, 112, 116], "digit": [0, 1, 9, 11, 12, 13, 14, 15, 18, 19, 59, 104, 106, 112, 115, 116], "synthes": [0, 18, 19, 112, 116], "loopfilt": [0, 59, 60, 61, 62, 63, 64, 65, 66, 67, 112, 115, 116], "2nd": [0, 1, 59, 62, 112, 116], "order": [0, 1, 24, 31, 36, 38, 43, 53, 59, 62, 76, 77, 81, 87, 104, 106, 112, 113, 116], "proport": [0, 1, 5, 59, 60, 62, 116], "plu": [0, 1, 59, 62, 116], "integr": [0, 1, 6, 59, 61, 62, 110, 116], "ppi": [0, 59, 62], "nco": [0, 1, 4, 8, 18, 19, 20, 62, 68, 69, 70, 71, 72, 73, 74, 75, 112, 115, 116], "numer": [0, 1, 18, 20, 68, 70, 110, 112, 116], "control": [0, 1, 18, 20, 68, 70, 112, 116], "oscil": [0, 1, 18, 20, 68, 70, 112, 116], "awgn": [0, 84, 113, 115], "x": [0, 1, 18, 21, 24, 27, 36, 39, 43, 48, 59, 64, 68, 73, 76, 78, 79, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 105, 107, 111, 112, 113, 117], "arraylik": [0, 18, 21, 24, 25, 27, 36, 39, 40, 43, 44, 45, 48, 59, 64, 68, 73, 76, 78, 79, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107], "snr": [0, 84], "none": [0, 24, 30, 33, 36, 40, 59, 67, 84, 89, 94, 97, 98, 99, 100, 107, 108], "add": [0, 84, 113, 117], "addit": [0, 84, 93, 95, 96, 97, 98, 99, 100, 101, 103], "white": [0, 84], "nois": [0, 1, 2, 3, 8, 14, 59, 62, 66, 84, 99, 112], "signal": [0, 1, 9, 11, 14, 15, 18, 21, 24, 27, 36, 39, 43, 48, 59, 64, 68, 73, 75, 83, 84, 85, 86, 87, 90, 91, 92, 98, 99, 101, 105, 109, 110, 111, 112, 114], "n": [0, 1, 18, 21, 23, 24, 27, 28, 29, 30, 31, 33, 36, 39, 43, 48, 49, 50, 52, 53, 56, 59, 64, 68, 73, 75, 83, 84, 85, 86, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 105, 112, 114], "average_pow": [0, 83, 90, 115], "averag": [0, 83, 84, 90, 98], "power": [0, 83, 84, 90, 91, 98, 114], "crest_factor": [0, 85, 90, 115, 116], "crest": [0, 85], "factor": [0, 1, 8, 17, 59, 62, 63, 85, 112], "energi": [0, 86, 104, 106, 115], "papr": [0, 90, 111, 115, 116], "peak": [0, 85, 90, 91, 92], "ratio": [0, 14, 84, 90], "peak_pow": [0, 90, 91, 115], "peak_voltag": [0, 85, 92, 115], "voltag": [0, 92, 105], "rms_voltag": [0, 85, 105, 115], "mean": [0, 98, 105, 114], "rm": [0, 85, 105], "hexdump": [0, 88, 115, 116], "byte": [0, 88], "width": [0, 88], "16": [0, 88, 116], "str": [0, 88, 98, 99], "specifi": [0, 84, 88, 109, 110], "pack": [0, 88, 89, 115, 116], "bpe": [0, 89, 107], "binari": [0, 89, 107], "arrai": [0, 89, 101, 107, 110, 111], "multipl": [0, 89, 107], "bit": [0, 88, 89, 107, 116], "per": [0, 21, 73, 87, 88, 89, 104, 106, 107, 111, 114], "element": [0, 88, 89, 107], "unpack": [0, 88, 107, 115, 116], "use_styl": [0, 102], "appli": [0, 102], "": [0, 1, 9, 11, 12, 13, 15, 16, 24, 28, 29, 33, 43, 49, 50, 56, 76, 78, 79, 94, 95, 96, 98, 99, 100, 101, 102, 108, 113, 115], "default": [0, 30, 33, 99, 102], "matplotlib": [0, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 108, 109, 110, 111, 112, 113, 114, 115], "rcparam": [0, 102, 108, 112], "time_domain": [0, 84, 101, 111, 114, 115, 116], "sample_r": [0, 1, 8, 16, 28, 29, 49, 50, 94, 95, 96, 98, 99, 101, 108, 112, 114], "1": [0, 1, 8, 11, 15, 17, 18, 19, 28, 29, 43, 44, 49, 50, 59, 62, 63, 68, 70, 76, 78, 79, 82, 83, 84, 86, 87, 88, 89, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117], "0": [0, 8, 18, 19, 24, 28, 29, 43, 44, 49, 50, 62, 68, 70, 76, 77, 78, 79, 82, 83, 84, 86, 87, 89, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117], "periodogram": [0, 98, 111, 115, 116], "estim": [0, 76, 78, 98, 99, 112], "spectral": [0, 98, 111, 114], "densiti": [0, 14, 98, 111, 114], "p_": [0, 83, 84, 90, 91, 98], "xx": [0, 98], "us": [0, 18, 20, 25, 36, 37, 44, 45, 59, 65, 76, 78, 88, 89, 94, 97, 98, 99, 100, 107, 109, 110, 114, 115, 117], "welch": [0, 98, 99], "method": [0, 98, 99, 109, 110], "spectrogram": [0, 99, 115, 116], "b": [0, 43, 45, 87, 88, 94, 95, 96, 97, 100, 103, 114], "h": [0, 24, 25, 28, 29, 30, 43, 49, 50, 52, 59, 87, 94, 95, 97, 111, 112, 114], "e": [0, 1, 18, 83, 86, 94, 95, 109, 110, 112, 113], "j": [0, 1, 18, 43, 84, 94, 95, 109, 110, 112], "omega": [0, 19, 68, 70, 71, 94, 95, 96, 112], "step": [0, 18, 21, 23, 24, 33, 43, 56, 68, 73, 75, 94, 100], "zero": [0, 40, 43, 44, 58, 59, 89, 94, 95, 96, 97, 100, 101, 103, 109, 111, 112, 114], "pole": [0, 43, 44, 54, 94, 95, 96, 97, 100, 103, 109], "frequency_respons": [0, 24, 28, 29, 43, 49, 50, 95, 109, 110, 112, 114, 115, 116], "group_delai": [0, 96, 109, 110, 115, 116], "group": [0, 96], "delai": [0, 18, 24, 26, 36, 59, 68, 96, 112], "tau_g": [0, 96], "impulse_respons": [0, 24, 30, 43, 52, 87, 97, 104, 106, 109, 110, 114, 115, 116], "step_respons": [0, 24, 33, 43, 56, 100, 109, 110, 112, 115, 116], "zeros_pol": [0, 103, 110, 115, 116], "kwarg": [0, 93, 95, 96, 97, 98, 99, 100, 101, 103], "sdr": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117], "loop": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 115, 116], "thi": [1, 21, 24, 43, 73, 76, 82, 84, 94, 95, 96, 97, 98, 99, 100, 103, 108, 110, 112, 114], "i": [1, 8, 17, 24, 30, 33, 34, 36, 41, 43, 52, 56, 57, 59, 62, 63, 66, 84, 87, 88, 89, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117], "meant": 1, "analysi": [1, 8, 112, 116], "onli": [1, 24, 32, 36, 40, 43, 55, 84, 112], "block": [1, 18, 59, 68], "diagram": [1, 18, 59, 68], "bb": [1, 112], "ped": [1, 7, 8, 62, 112], "lf": [1, 112], "lo": [1, 112], "input": [1, 9, 11, 14, 15, 18, 21, 24, 25, 27, 30, 33, 36, 37, 39, 40, 43, 44, 45, 48, 52, 56, 59, 64, 68, 73, 84, 89, 97, 100, 107, 109, 110, 112], "local": [1, 112], "baseband": [1, 111, 112], "phase": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 115], "error": [1, 7, 8, 14, 59, 62, 112], "detector": [1, 7, 8, 62, 112], "filter": [1, 5, 6, 8, 10, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 87, 94, 95, 96, 97, 100, 101, 103, 104, 106, 111, 114, 115, 116], "The": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 112, 114, 115, 117], "transfer": [1, 10, 24, 43, 44, 59, 87, 109, 110, 112], "function": [1, 10, 24, 43, 44, 59, 87, 98, 99, 109, 110, 112, 114, 115, 116], "h_": [1, 112], "z": [1, 18, 24, 43, 59, 68, 109, 110, 112], "k_1": [1, 5, 59, 60, 112], "k_2": [1, 6, 59, 61, 112], "frac": [1, 9, 11, 14, 15, 43, 59, 83, 84, 85, 87, 90, 105, 112], "k_0": [1, 4, 8, 19, 62, 68, 69, 70, 112], "k_p": [1, 7, 8, 62, 112], "2": [1, 9, 11, 14, 28, 29, 49, 50, 77, 83, 84, 86, 87, 88, 89, 91, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114], "refer": [1, 9, 11, 12, 13, 14, 15, 36, 59, 85, 87, 90, 104, 106, 110, 114], "michael": [1, 9, 11, 12, 13, 14, 15, 59, 104, 106], "rice": [1, 9, 11, 12, 13, 14, 15, 59, 104, 106], "commun": [1, 9, 11, 12, 13, 14, 15, 59, 104, 106, 112, 115], "discret": [1, 9, 11, 12, 13, 14, 15, 59, 104, 106, 108, 112], "time": [1, 8, 9, 11, 12, 13, 14, 15, 24, 43, 59, 62, 83, 84, 85, 86, 87, 90, 91, 92, 94, 98, 99, 101, 104, 105, 106, 108, 109, 110, 114], "approach": [1, 9, 11, 12, 13, 14, 15, 59, 104, 106, 112], "appendix": [1, 59, 104, 106], "c": [1, 9, 11, 12, 13, 14, 15, 59, 76, 82, 112], "lock": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 115], "exampl": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 87, 88, 89, 94, 95, 96, 97, 100, 101, 102, 103, 104, 106, 107, 112], "see": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 87, 104, 106, 115], "noise_bandwidth": [1, 8, 59, 62, 66], "damping_factor": [1, 8, 59, 62, 63], "creat": [1, 8, 18, 19, 24, 25, 36, 37, 43, 44, 45, 59, 62, 68, 70, 76, 77, 101, 108, 111, 112, 113, 114], "object": [1, 8, 76, 77, 110, 112, 113], "frequency_lock_tim": [1, 9], "freq_offset": [1, 9, 11], "frequenc": [1, 9, 11, 13, 24, 28, 29, 43, 49, 50, 59, 94, 95, 96, 98, 99, 114], "lock_tim": [1, 11, 112], "phase_error_vari": [1, 14], "cn0": [1, 14], "varianc": [1, 14, 84], "steadi": [1, 14], "state": [1, 14, 24, 32, 34, 36, 40, 41, 43, 55, 57], "phase_lock_tim": [1, 15], "bn": [1, 2], "bandwidth": [1, 2, 3, 8, 12, 59, 62, 66, 87, 104, 106, 112, 114], "b_n": [1, 2, 3, 8, 9, 11, 14, 15, 59, 62, 66], "hz": [1, 2, 8, 9, 11, 14, 28, 29, 49, 50, 59, 62, 66, 87, 108], "bnt": [1, 3, 112], "normal": [1, 3, 8, 59, 62, 66, 87, 99, 112, 114], "t": [1, 3, 8, 59, 62, 66, 87, 88, 108], "repres": [1, 10], "k0": [1, 4, 8, 18, 19, 62, 68, 69, 70], "gain": [1, 4, 5, 6, 7, 8, 18, 19, 43, 44, 51, 59, 60, 61, 62, 68, 69, 70, 87, 112], "k1": [1, 5, 59, 60, 112], "k2": [1, 6, 59, 61, 112], "kp": [1, 7, 8, 62], "omega_3db": [1, 12], "3": [1, 9, 11, 12, 15, 87, 88, 89, 94, 95, 96, 97, 100, 101, 103, 107, 110, 112, 114, 115, 116], "db": [1, 12, 14, 84, 87, 90, 111, 113, 114], "omega_": [1, 12], "textrm": [1, 12], "radian": [1, 12, 13, 14, 18, 19, 76, 77, 80, 112], "omega_n": [1, 13, 112], "natur": [1, 13], "sampl": [1, 8, 16, 18, 19, 21, 23, 24, 26, 28, 29, 30, 33, 36, 40, 49, 50, 52, 56, 59, 62, 66, 68, 70, 71, 73, 75, 87, 94, 95, 96, 97, 98, 99, 100, 101, 104, 106, 108, 111, 112, 114], "rate": [1, 8, 16, 28, 29, 36, 39, 49, 50, 94, 95, 96, 98, 99, 101], "f_": [1, 8, 16, 28, 29, 49, 50, 87, 94, 95, 96, 98, 99, 101, 108, 109, 110, 112, 114], "zeta": [1, 8, 17, 59, 62, 63], "damp": [1, 8, 17, 59, 62, 63, 112], "properti": [2, 3, 4, 5, 6, 7, 10, 12, 13, 16, 17, 20, 26, 31, 34, 35, 38, 41, 42, 46, 47, 51, 53, 54, 57, 58, 60, 61, 63, 65, 66, 69, 71, 72, 80, 81, 82], "paramet": [8, 9, 11, 14, 19, 21, 23, 25, 27, 28, 29, 30, 33, 37, 39, 40, 44, 45, 48, 49, 50, 52, 56, 62, 64, 70, 73, 75, 77, 78, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107], "where": [8, 59, 62, 66, 84, 87, 109, 110, 115], "period": [8, 59, 62, 66], "second": [8, 9, 11, 15, 59, 62, 66, 87], "critic": [8, 17, 59, 62, 63, 112], "underdamp": [8, 17, 59, 62, 63], "overdamp": [8, 17, 59, 62, 63], "ted": [8, 62], "t_": [9, 11, 15, 39, 87, 114], "fl": [9, 11], "4": [9, 11, 29, 50, 84, 87, 88, 89, 94, 95, 96, 97, 100, 101, 102, 103, 104, 106, 107, 108, 110, 113, 116], "delta": [9, 11, 24, 30, 43, 52, 97, 109, 110], "f": [9, 11, 24, 28, 29, 43, 49, 50, 87, 108, 109, 110, 111, 112, 113, 114], "offset": [9, 11, 18, 19, 68, 70, 72, 76, 77, 80, 112], "take": [9, 11, 15], "onto": [9, 11, 15], "equat": [9, 11, 12, 13, 14, 15, 43], "39": 9, "pl": [11, 15], "38": 11, "34": 12, "33": 13, "sigma_": 14, "theta_": 14, "n_0": [14, 113], "carrier": 14, "43": 14, "40": 15, "less": 17, "than": 17, "greater": 17, "note": [18, 24, 43, 59, 68, 84, 87, 99], "increment": [18, 19, 21, 68, 70, 71, 73, 112], "v": [18, 68], "y": [18, 21, 23, 24, 27, 39, 43, 48, 59, 64, 68, 73, 75, 84, 99, 101, 112], "output": [18, 21, 23, 24, 30, 33, 43, 44, 45, 52, 56, 59, 64, 68, 73, 75, 84, 89, 97, 100, 107, 108, 109, 110, 112], "complex": [18, 21, 23, 76, 78, 79, 82, 84, 93, 108, 109, 110, 113], "exponenti": [18, 21, 23, 108, 109, 110], "constant": [18, 19, 59, 68, 70, 71, 110, 112], "accumul": [18, 19, 68, 70, 71, 112], "absolut": [18, 19, 68, 70, 72], "unit": [18, 24, 33, 43, 56, 59, 68, 70, 71, 72, 83, 84, 86, 91, 92, 100, 104, 105, 106, 109, 110, 112], "adder": [18, 59, 68, 112], "process": [18, 21, 68, 73, 110, 112], "variabl": [18, 21, 68, 73, 88, 112], "reset": [18, 22, 24, 32, 36, 40, 43, 55, 59, 67, 68, 74], "forward": [18, 23, 68, 75], "theta": [19, 68, 70, 72], "vari": [21, 73], "number": [23, 28, 29, 30, 33, 49, 50, 52, 56, 75, 84, 87, 88, 89, 94, 95, 96, 97, 98, 99, 100, 104, 106, 107], "wrapper": [24, 43], "scipi": [24, 27, 43, 98, 99, 114, 115], "convolv": [24, 27, 101, 111], "It": [24, 43, 59, 84], "support": [24, 43], "one": [24, 43, 87, 88, 94, 95, 96, 98, 99, 109, 110, 111, 114], "stream": [24, 25, 32, 34, 36, 37, 40, 41, 43, 44, 45, 55, 57], "its": [24, 43, 44, 109, 110, 114], "feedforward": [24, 25, 35, 43, 45, 47, 94, 95, 96, 97, 100, 103, 109, 110], "coeffici": [24, 25, 43, 45, 94, 95, 96, 97, 100, 103, 109, 110], "h_i": [24, 25, 35, 109], "sum_": [24, 43, 83, 84, 86, 105], "sum": [24, 43, 114], "limits_": [24, 43], "bool": [24, 25, 34, 36, 37, 41, 43, 44, 45, 57, 93], "fals": [24, 25, 36, 37, 43, 44, 45, 93, 110, 114], "tupl": [24, 28, 29, 43, 49, 50], "frequency_response_log": [24, 29, 43, 50], "logarithm": [24, 29, 43, 50, 94, 95, 96, 98, 109, 110], "axi": [24, 29, 43, 50, 94, 95, 96, 98, 99, 101, 108], "when": [24, 30, 33, 43, 52, 56, 94, 95, 96, 97, 100, 108, 109, 110], "mode": [24, 25, 27, 32, 34, 36, 37, 40, 41, 43, 44, 45, 55, 57, 111], "u": [24, 33, 43, 56, 100, 109, 110], "indic": [24, 25, 34, 36, 37, 41, 43, 44, 45, 57], "whether": [24, 25, 34, 36, 37, 41, 43, 44, 45, 57], "tap": [24, 35, 36, 42, 43, 46, 47, 109, 110], "In": [25, 34, 37, 41, 44, 45, 57, 84, 87, 88, 89, 94, 95, 96, 97, 100, 101, 102, 103, 104, 106, 107, 108, 113], "previou": [25, 37, 40, 44, 45], "ar": [25, 29, 37, 44, 45, 50, 89, 94, 95, 96, 98, 99, 102, 108, 110, 112, 114, 115, 117], "preserv": [25, 34, 37, 41, 44, 45, 57], "between": [25, 34, 37, 41, 44, 45, 57, 98, 99, 112], "call": [25, 34, 37, 41, 44, 45, 57], "liter": [27, 95, 96], "full": 27, "valid": [27, 111], "same": [27, 109], "convolut": 27, "detail": 27, "1024": [28, 29, 49, 50, 94, 95, 96, 111, 114], "from": [28, 29, 43, 44, 49, 50, 76, 82, 99, 109, 110, 112, 115], "plot": [28, 29, 30, 33, 49, 50, 52, 56, 84, 87, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116], "decad": [29, 50, 94, 95, 96, 109, 112], "space": [29, 50], "length": [30, 33, 87, 94, 97, 98, 99, 100, 104, 106, 108, 111, 114], "resampl": [36, 37, 38, 39, 40, 41, 42, 115, 116], "http": [36, 85, 87, 90], "wirelesspi": 36, "com": [36, 87], "fraction": [36, 40, 87, 108], "structur": 36, "new": [36, 37, 76, 77], "given": [36, 39, 109, 110], "r": [36, 39, 87, 104, 106, 110, 112, 114], "index": [36, 40], "vector": [40, 98, 99], "should": 40, "equal": 40, "three": [40, 108, 114], "If": [40, 84, 89, 93, 94, 97, 98, 99, 100, 101, 107, 115], "lfilter": 43, "b_i": [43, 45, 47, 94, 95, 96, 97, 100, 103, 110], "feedback": [43, 45, 46, 94, 95, 96, 97, 100, 103, 110], "a_j": [43, 45, 46, 94, 95, 96, 97, 100, 103, 110], "These": [43, 102, 112], "differ": [43, 114], "a_0": 43, "left": [43, 83, 84, 86, 87, 91, 92, 105], "m": [43, 76, 77, 78, 79, 81, 82], "right": [43, 83, 84, 86, 87, 91, 92, 105], "classmethod": [43, 44], "zerospol": [43, 44, 94, 95, 96, 97, 100, 103, 110], "self": [43, 44], "100": [43, 52, 56, 84, 94, 97, 100, 101, 108], "a_tap": [43, 46, 94, 95, 96, 97, 100, 103, 110, 112], "b_tap": [43, 47, 94, 95, 96, 97, 100, 103, 110, 112], "can": [59, 84, 87, 89, 98, 99, 109, 110, 117], "track": 59, "cannot": 59, "howev": [59, 108], "chirp": 59, "ramp": 59, "underli": [59, 65], "modul": [76, 77, 79, 81, 113], "x_hat": [76, 78, 93, 113], "symbol": [76, 78, 79, 82, 87, 93, 104, 106, 111, 113, 114], "hat": [76, 78, 93], "k": [76, 78, 79, 93, 111, 114], "decim": [76, 78, 79, 82, 113], "maximum": [76, 78], "likelihood": [76, 78], "phi": [76, 77, 80], "symbol_map": [76, 82, 101, 111], "map": [76, 82], "dot": [76, 82], "mathbb": [76, 82], "must": [77, 84, 87, 104, 106], "least": 77, "measur": [83, 84, 85, 86, 90, 91, 92, 105, 112, 115, 116], "domain": [83, 84, 85, 86, 90, 91, 92, 94, 98, 99, 101, 105], "text": [83, 84, 85, 90, 91, 92, 105], "avg": [83, 84, 90], "seed": 84, "which": [84, 108, 112, 114], "ad": [84, 115, 116], "desir": [84, 113], "explicitli": 84, "assum": [84, 89, 107], "contain": [84, 88], "known": 84, "comput": [84, 109, 110, 112, 114], "pass": [84, 93, 95, 96, 97, 98, 99, 100, 101, 103, 109, 110], "linear": 84, "random": [84, 101, 111, 113], "gener": [84, 113], "numpi": [84, 107, 108, 109, 110, 111, 112, 113, 114, 115], "default_rng": 84, "noisi": 84, "w": [84, 108, 109, 110, 111, 112, 113, 114], "sigma": 84, "For": [84, 94, 95, 96, 97, 100, 103, 109], "real": [84, 108, 109, 110, 111, 112], "sim": 84, "mathcal": 84, "cn": 84, "np": [84, 94, 95, 96, 97, 100, 101, 103, 108, 109, 110, 111, 112, 113, 114], "sin": 84, "pi": [84, 87, 94, 95, 96, 97, 100, 101, 103, 108, 109, 110, 111, 112], "5": [84, 87, 88, 94, 95, 96, 97, 100, 101, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 116], "arang": [84, 108, 111, 112], "10": [84, 87, 88, 90, 94, 95, 96, 97, 100, 101, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114], "plt": [84, 87, 94, 95, 96, 97, 100, 101, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114], "figur": [84, 87, 94, 95, 96, 97, 100, 101, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114], "figsiz": [84, 87, 94, 95, 96, 97, 100, 101, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114], "8": [84, 87, 88, 94, 95, 96, 97, 100, 101, 102, 103, 104, 106, 109, 110, 111, 112, 114], "label": [84, 87, 99, 101, 104, 106, 108, 111, 112, 114], "titl": [84, 101, 108, 111, 112, 114], "tight_layout": [84, 101, 111, 112, 113, 114], "show": [84, 87, 94, 95, 96, 97, 100, 101, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114], "cf": 85, "v_": [85, 92, 105], "en": [85, 90], "wikipedia": [85, 90], "org": [85, 90], "wiki": [85, 90], "puls": [87, 101, 104, 106, 115, 116], "shape": [87, 101, 104, 106, 115, 116], "product": [87, 114], "sym": [87, 114], "side": [87, 94, 95, 96, 98, 99, 109, 110, 111, 114], "also": [87, 115], "thought": [87, 117], "smaller": [87, 114], "valu": [87, 99, 110], "produc": [87, 114], "wider": 87, "even": [87, 104, 106], "amplitud": [87, 108, 112], "so": [87, 115], "nomin": 87, "passband": [87, 111], "ha": [87, 112, 114], "exp": [87, 94, 95, 96, 97, 100, 101, 103, 108, 110, 111, 112], "relat": 87, "sqrt": [87, 105, 111, 112, 114], "ln": 87, "www": 87, "mathwork": 87, "help": 87, "ref": 87, "gaussdesign": 87, "html": 87, "onlinelibrari": 87, "wilei": 87, "doi": 87, "pdf": 87, "1002": 87, "9780470041956": 87, "app2": 87, "h_0p1": [87, 104, 106], "h_0p2": 87, "h_0p3": 87, "data": [88, 89, 107, 115], "displai": [88, 94, 95, 96, 98, 99], "each": [88, 98, 99], "consid": 88, "convert": 88, "line": 88, "string": [88, 98, 99], "print": [88, 108, 109, 110, 112], "quick": 88, "brown": 88, "fox": 88, "jump": 88, "over": 88, "lazi": 88, "dog": 88, "00000000": 88, "54": 88, "68": 88, "65": 88, "20": [88, 111, 114], "71": 88, "75": [88, 112, 113], "69": 88, "63": 88, "6b": 88, "62": 88, "72": 88, "6f": 88, "77": 88, "6e": 88, "00000010": 88, "66": 88, "78": 88, "6a": 88, "6d": 88, "70": [88, 114], "73": 88, "76": 88, "74": 88, "00000020": 88, "6c": 88, "61": 88, "7a": 88, "79": 88, "64": [88, 110], "67": 88, "he": 88, "6": [88, 94, 95, 96, 97, 100, 101, 103, 109, 110, 112, 113], "7": [88, 101], "9": [88, 104, 106, 111, 113, 114, 116], "01": [88, 110, 112], "02": [88, 110, 112], "03": [88, 110], "04": [88, 110], "00000004": 88, "05": [88, 108, 110, 112], "06": 88, "07": 88, "08": 88, "00000008": 88, "09": 88, "0a": 88, "dtype": [89, 101, 107, 112], "dtypelik": [89, 107], "have": [89, 107], "most": [89, 107], "signific": [89, 107], "first": [89, 107], "enough": 89, "fill": 89, "last": 89, "remain": 89, "type": [89, 95, 96, 98, 107, 116], "smallest": 89, "unsign": 89, "integ": 89, "hold": 89, "out": [89, 102, 107], "uint8": [89, 107], "log_": 90, "max": [91, 92], "constel": 93, "heatmap": [93, 113], "true": [93, 102, 113], "instead": 93, "scatter": 93, "keyword": [93, 95, 96, 97, 98, 99, 100, 101, 103, 109, 110], "argument": [93, 95, 96, 97, 98, 99, 100, 101, 103, 109, 110], "pyplot": [93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 108, 109, 110, 111, 112, 113, 114], "hist2d": 93, "n_time": [94, 110], "n_freq": 94, "x_axi": [94, 95, 96, 98, 99, 109, 110, 111, 112], "two": [94, 95, 96, 98, 99, 108, 109, 110], "log": [94, 95, 96, 98, 109, 110, 112], "set": [94, 95, 96, 97, 98, 99, 100, 102, 103, 110], "n_t": 94, "n_f": 94, "scale": [94, 95, 96, 98, 99, 109, 110], "option": [94, 95, 96, 98, 99], "spectrum": [94, 95, 96, 98, 99], "h_srrc": [94, 95, 96, 97, 100, 101, 103], "1j": [94, 95, 96, 97, 100, 101, 103, 108, 110, 111, 112], "conj": [94, 95, 96, 97, 100, 103, 110, 112], "30": [94, 97, 100, 110], "ylim": [96, 109, 112, 114], "48": 96, "52": 96, "window": [98, 99], "hann": [98, 99], "overlap": [98, 99, 111], "fft": [98, 99], "median": 98, "segment": [98, 99], "256": [98, 99, 111], "point": [98, 99], "pcolormesh": 99, "By": 99, "color": [99, 108, 111, 112, 114], "bar": 99, "rang": [99, 112], "10th": 99, "100th": 99, "percentil": 99, "provid": [99, 115], "more": 99, "dynam": 99, "activ": 99, "chang": [99, 117], "vmin": 99, "vmax": 99, "bpsk": [101, 111], "1000": 101, "randint": [101, 111, 113], "10e3": 101, "qpsk": 101, "complex64": [101, 112], "style": 102, "mai": [102, 110], "revert": 102, "rcdefault": 102, "follow": [102, 112], "_rc_param": 102, "rc_param": 102, "ax": [102, 108, 112], "grid": [102, 108, 112, 114], "autolayout": 102, "max_open_warn": 102, "titleweight": 102, "bold": 102, "linestyl": [102, 108, 112, 114], "excess": [104, 106, 114], "le": [104, 106], "h_0p5": [104, 106], "h_0p9": [104, 106], "import": [108, 109, 110, 111, 112, 113, 114, 115], "config": [108, 109, 110, 111, 112, 113, 114], "inlinebackend": [108, 109, 110, 111, 112, 113, 114], "print_figure_kwarg": [108, 109, 110, 111, 112, 113, 114], "facecolor": [108, 109, 110, 111, 112, 113, 114], "widget": [108, 109, 110, 111, 112, 113, 114], "prop_cycl": [108, 112], "by_kei": [108, 112], "continu": 108, "freq": [108, 112], "tx": 108, "decai": [108, 110], "marker": [108, 109, 110], "o": 108, "fillstyl": 108, "imag": 108, "xlabel": [108, 112, 114], "ylabel": [108, 112, 114], "origin": 108, "legend": [108, 111, 112, 114], "both": [108, 112], "now": 108, "equival": 108, "accomplish": 108, "librari": [108, 113, 115, 117], "def": [108, 113], "resample_sign": 108, "new_sample_r": 108, "ty": 108, "size": [108, 111, 112, 114], "notic": [108, 114], "everi": 108, "200": 108, "four": 108, "400": 108, "other": [108, 117], "appear": 108, "50": [108, 111], "fourth": 108, "25": [108, 112, 114], "roughli": 108, "often": 108, "do": 108, "align": 108, "315": 108, "32": 108, "user": [109, 110], "below": [109, 110], "00095881": 109, "00175008": 109, "00423912": 109, "00588237": 109, "00615087": 109, "00474585": 109, "00170436": 109, "0025481": 109, "00721629": 109, "01123216": 109, "01342329": 109, "01273174": 109, "00845039": 109, "00043678": 109, "01073645": 109, "02372925": 109, "03650167": 109, "04650553": 109, "05098414": 109, "04734541": 109, "03355823": 109, "00851466": 109, "0276993": 109, "07367186": 109, "12670168": 109, "18306847": 109, "2381038": 109, "28726435": 109, "32607284": 109, "3509308": 109, "35948882": 109, "conveni": [109, 110], "evalu": [109, 110], "envelop": [109, 110], "through": [109, 110, 112], "easili": [109, 110], "here": [109, 110], "12": [109, 113], "altern": 110, "conjug": 110, "0x000002214b040a88": 110, "47820725": 110, "00000000e": 110, "00": 110, "78207252e": 110, "58172329e": 110, "10862468e": 110, "86109590e": 110, "21565653e": 110, "01140214e": 110, "57286400e": 110, "67772160e": 110, "47338728e": 110, "10422993e": 110, "89312837e": 110, "12240078e": 110, "03953322e": 110, "69685122e": 110, "63882791e": 110, "81474977e": 110, "47193366e": 110, "85259041e": 110, "15647504e": 110, "23851924e": 110, "42176895e": 110, "84684395e": 110, "42721858e": 110, "72236648e": 110, "14721649e": 110, "10813095e": 110, "94024315e": 110, "78877688e": 110, "74077567e": 110, "87820725": 110, "53637958": 110, "94724205": 110, "13335164": 110, "1455082": 110, "04436799": 110, "88708159": 110, "71930943": 110, "5719707": 110, "46154771": 110, "39261642": 110, "36139242": 110, "35935288": 110, "3763214": 110, "40270968": 110, "43085717": 110, "45557651": 110, "47410241": 110, "48566716": 110, "49090568": 110, "49124786": 110, "48840102": 110, "4839738": 110, "47925143": 110, "47510421": 110, "47199608": 110, "47005584": 110, "46917696": 110, "46911955": 110, "denomin": 110, "73910363": 110, "30614675j": 110, "plane": 110, "linspac": 110, "endpoint": 110, "concaten": 110, "0x000002214dc574c8": 110, "lyon": 110, "understand": 110, "3rd": 110, "edit": 110, "section": [110, 112], "insid": 110, "circl": 110, "sinusoid": 110, "outsid": 110, "unstabl": 110, "increas": 110, "n_symbol": 111, "500": [111, 112], "x_bb_rect": 111, "papr_bb_rect": 111, "x_pb_rect": 111, "papr_pb_rect": 111, "x_bb_0p9": 111, "papr_bb_0p9": 111, "x_bb_0p5": 111, "papr_bb_0p5": 111, "x_bb_0p1": 111, "papr_bb_0p1": 111, "2f": 111, "rf": [111, 112], "xlim": [111, 112, 114], "x_pb_0p9": 111, "papr_pb_0p9": 111, "x_pb_0p5": 111, "papr_pb_0p5": 111, "x_pb_0p1": 111, "papr_pb_0p1": 111, "configur": 112, "0x00000290f1ce3488": 112, "theta_0": 112, "phase_error": 112, "freq_estim": 112, "subplot": [112, 113], "suptitl": [112, 113], "ones": 112, "angl": 112, "part": 112, "unwrap": 112, "system": [112, 115], "avail": [112, 113], "001": 112, "005": 112, "b_nt": 112, "0005": 112, "00001": 112, "0125": 112, "015": 112, "0175": 112, "t_lock": 112, "analyze_psk": 113, "esn0": 113, "100_000": 113, "achiev": [113, 114], "n0": 113, "bin": 113, "e_": 113, "18": 113, "rectangular": 114, "rect": 114, "rc_0p1": 114, "rc_0p5": 114, "rc_0p9": 114, "nyquist": 114, "adjac": 114, "specif": 114, "pm": 114, "roll": 114, "60": 114, "total": 114, "nearli": 114, "compar": 114, "null": 114, "while": 114, "small": 114, "lobe": 114, "much": 114, "higher": 114, "h_rect": 114, "freqz": 114, "worn": 114, "whole": 114, "h_rc_0p1": 114, "h_rc_0p5": 114, "h_rc_0p9": 114, "rel": 114, "main": 114, "p_rect": 114, "log10": 114, "cumsum": 114, "ab": 114, "p_rc_0p1": 114, "p_rc_0p5": 114, "p_rc_0p9": 114, "One": 114, "within": 114, "variou": 114, "srrc_0p1": 114, "srrc_0p5": 114, "srrc_0p9": 114, "therefor": 114, "similar": 114, "significantli": 114, "due": 114, "being": 114, "h_srrc_0p1": 114, "h_srrc_0p5": 114, "h_srrc_0p9": 114, "p_srrc_0p1": 114, "p_srrc_0p5": 114, "p_srrc_0p9": 114, "gauss_0p1": 114, "gauss_0p2": 114, "gauss_0p3": 114, "python": 115, "packag": 115, "softwar": 115, "radio": 115, "goal": 115, "tool": 115, "design": 115, "build": 115, "analyz": 115, "reli": 115, "interoper": 115, "veri": 115, "possibl": 115, "numba": 115, "acceler": 115, "computation": 115, "intens": 115, "addition": 115, "aim": 115, "replic": 115, "relev": 115, "matlab": 115, "dsp": 115, "toolbox": 115, "we": 115, "progress": 115, "someth": 115, "you": 115, "d": 115, "like": 115, "includ": 115, "pleas": 115, "open": 115, "issu": 115, "github": 115, "impair": 115, "manipul": 115, "util": 115, "releas": 116, "juli": 116, "2023": 116, "helper": 116, "improv": 116, "annot": 116, "matt": 116, "hostett": 116, "mhostett": 116, "semant": 117, "major": 117, "minor": 117, "patch": 117, "introduc": 117, "api": 117, "featur": 117, "backward": 117, "compat": 117, "make": 117, "bug": 117, "fix": 117, "befor": 117, "There": 117, "guarante": 117, "them": 117, "thei": 117}, "objects": {"": [[0, 0, 0, 1, "sdr", ""]], "sdr": [[1, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [18, 1, 1, "", "DDS", "Implements a direct digital synthesizer (DDS)."], [24, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [36, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [43, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [59, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [68, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [76, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [83, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [84, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [85, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [86, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [87, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [88, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [89, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [90, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [91, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [92, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [104, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [105, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [106, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [107, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."]], "sdr.ClosedLoopPLL": [[2, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [3, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [4, 2, 1, "", "K0", "The NCO gain $K_0$."], [5, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [6, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [7, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [8, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [9, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [10, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [11, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [12, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [13, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [14, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [15, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [16, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [17, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[8, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [8, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [8, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [8, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [8, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[9, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[11, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[14, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.DDS": [[19, 3, 1, "", "__init__", "Creates a direct digital synthesizer (DDS)."], [20, 2, 1, "", "nco", "The numerically-controlled oscillator (NCO) used by the DDS."], [21, 3, 1, "", "process", "Steps the DDS with the variable phase increment signal $x[n]$."], [22, 3, 1, "", "reset", "Resets the DDS."], [23, 3, 1, "", "step", "Steps the DDS forward by $N$ samples."]], "sdr.DDS.__init__": [[19, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [19, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [19, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.DDS.process": [[21, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the DDS."]], "sdr.DDS.step": [[23, 4, 2, "p-N", "N", "The number of samples $N$ to step the DDS forward."]], "sdr.FIR": [[25, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [26, 2, 1, "", "delay", "The delay of the FIR filter in samples."], [27, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the FIR filter."], [28, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the FIR filter."], [29, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the FIR filter on a logarithmic frequency axis."], [30, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [31, 2, 1, "", "order", "The order of the FIR filter, $N$."], [32, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [33, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [34, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [35, 2, 1, "", "taps", "The feedforward taps $h_i$."]], "sdr.FIR.__init__": [[25, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$."], [25, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to filter()."]], "sdr.FIR.filter": [[27, 4, 2, "p-mode", "mode", "The convolution mode. See scipy.signal.convolve() for details."], [27, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.FIR.frequency_response": [[28, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [28, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.frequency_response_log": [[29, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [29, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [29, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[30, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.step_response": [[33, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FarrowResampler": [[37, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [38, 2, 1, "", "order", "The order of the filter."], [39, 3, 1, "", "resample", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [40, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [41, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [42, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__init__": [[37, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to resample()."]], "sdr.FarrowResampler.resample": [[39, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [39, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.reset": [[40, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[44, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [45, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [46, 2, 1, "", "a_taps", "The feedback taps $a_j$."], [47, 2, 1, "", "b_taps", "The feedforward taps $b_i$."], [48, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the IIR filter."], [49, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the IIR filter."], [50, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the IIR filter on a logarithmic frequency axis."], [51, 2, 1, "", "gain", "The gain of the IIR filter."], [52, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [53, 2, 1, "", "order", "The order of the IIR filter, $N$."], [54, 2, 1, "", "poles", "The poles of the IIR filter."], [55, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [56, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [57, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [58, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[44, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [44, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [44, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."], [44, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__init__": [[45, 4, 2, "p-a", "a", "The feedback coefficients $a_j$."], [45, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [45, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."]], "sdr.IIR.filter": [[48, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.IIR.frequency_response": [[49, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [49, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[50, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [50, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [50, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[52, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[56, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.LoopFilter": [[60, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [61, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [62, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [63, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [64, 3, 1, "", "filter", "Filters the input signal $x[n]$."], [65, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [66, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [67, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__init__": [[62, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [62, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [62, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [62, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.LoopFilter.filter": [[64, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.NCO": [[69, 2, 1, "", "K0", "The NCO gain $K_0$."], [70, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [71, 2, 1, "", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [72, 2, 1, "", "offset", "The absolute offset $theta$ of the NCO in units."], [73, 3, 1, "", "process", "Steps the NCO with the variable-increment signal $x[n]$."], [74, 3, 1, "", "reset", "Resets the NCO."], [75, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__init__": [[70, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [70, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [70, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in units."]], "sdr.NCO.process": [[73, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the NCO."]], "sdr.NCO.step": [[75, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.PSK": [[77, 3, 1, "", "__init__", "Creates a new PSK object."], [78, 3, 1, "", "demodulate", "Demodulates the complex symbols $hat{x}[k]$ to decimal symbols $hat{s}[k]$ using maximum-likelihood estimation."], [79, 3, 1, "", "modulate", "Modulates to decimal symbols $s[k]$ to complex symbols $x[k]$."], [80, 2, 1, "", "offset", "The phase offset $phi$ in radians."], [81, 2, 1, "", "order", "The modulation order $M$."], [82, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} -> mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[77, 4, 2, "p-offset", "offset", "The phase offset $phi$ in radians."], [77, 4, 2, "p-order", "order", "The modulation order $M$. Must be at least 2."]], "sdr.PSK.demodulate": [[78, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to demodulate."]], "sdr.PSK.modulate": [[79, 4, 2, "p-symbols", "symbols", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.average_power": [[83, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[84, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [84, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [84, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [84, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.crest_factor": [[85, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.energy": [[86, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.gaussian": [[87, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [87, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [87, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.hexdump": [[88, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [88, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.pack": [[89, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [89, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [89, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[90, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_power": [[91, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[92, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.plot": [[93, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [94, 5, 1, "", "filter", "Plots the frequency response $H(e^{jomega})$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [95, 5, 1, "", "frequency_response", "Plots the frequency response $H(e^{jomega})$ of the filter."], [96, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [97, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [98, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [99, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [100, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [101, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [102, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [103, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.constellation": [[93, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [93, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.filter": [[94, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [94, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [94, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [94, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [94, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [94, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [94, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.frequency_response": [[95, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [95, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [95, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [95, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [95, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [95, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[96, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [96, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [96, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [96, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [96, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [96, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.impulse_response": [[97, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [97, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [97, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.plot.periodogram": [[98, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [98, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [98, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [98, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [98, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [98, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [98, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [98, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.spectrogram": [[99, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [99, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [99, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [99, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [99, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [99, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [99, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[100, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [100, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [100, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.plot.time_domain": [[101, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\"."], [101, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[103, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [103, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.raised_cosine": [[104, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [104, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [104, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[105, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[106, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [106, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [106, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.unpack": [[107, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [107, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [107, 4, 2, "p-x", "x", "The input array with bpe bits per element."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"sdr": [0, 115], "filter": [0, 109, 110, 112], "puls": [0, 111, 114], "shape": [0, 111, 114], "resampl": [0, 108], "modul": 0, "phase": [0, 112, 113], "time": [0, 112], "lock": [0, 112], "loop": [0, 112], "impair": 0, "measur": 0, "data": 0, "manipul": 0, "plot": 0, "configur": 0, "domain": [0, 112], "frequenc": [0, 109, 110, 112], "analysi": 0, "note": 1, "constructor": [1, 18, 24, 36, 43, 59, 68, 76], "method": [1, 18, 24, 36, 43, 59, 68, 76], "properti": [1, 18, 24, 36, 43, 59, 68, 76], "see": [18, 28, 29, 30, 33, 49, 50, 52, 56, 68, 85, 90, 94, 95, 96, 97, 100, 103], "also": [18, 28, 29, 30, 33, 49, 50, 52, 56, 68, 85, 90, 94, 95, 96, 97, 100, 103], "farrow": 108, "arbitrari": 108, "construct": 108, "an": [108, 109, 110], "input": 108, "signal": 108, "x": 108, "n": [108, 109, 110], "t_": 108, "rate": 108, "r": 108, "y": 108, "frac": 108, "upsampl": 108, "integ": 108, "downsampl": 108, "irrat": 108, "fir": 109, "creat": [109, 110], "examin": [109, 110], "impuls": [109, 110], "respons": [109, 110, 112], "h": [109, 110], "step": [109, 110, 112], "": [109, 110], "omega": [109, 110], "group": [109, 110], "delai": [109, 110], "tau_g": [109, 110], "fulli": [109, 110], "analyz": [109, 110, 112], "iir": 110, "zero": 110, "pole": 110, "digit": 110, "stabil": 110, "peak": 111, "averag": 111, "power": 111, "rectangular": 111, "squar": [111, 114], "root": [111, 114], "rais": [111, 114], "cosin": [111, 114], "design": 112, "proport": 112, "plu": 112, "integr": 112, "ppi": 112, "implement": 112, "pll": 112, "close": 112, "perform": 112, "compar": 112, "across": 112, "zeta": 112, "b_n": 112, "t": 112, "shift": 113, "kei": 113, "constel": 113, "bpsk": 113, "qpsk": 113, "8": 113, "psk": 113, "16": 113, "gaussian": 114, "featur": 115, "v0": 116, "0": 116, "2": 116, "chang": 116, "contributor": 116, "1": 116, "version": 117, "alpha": 117, "releas": 117, "beta": 117}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"sdr": [[0, "sdr"], [115, "sdr"]], "Filtering": [[0, "filtering"]], "Pulse shaping": [[0, "pulse-shaping"]], "Resampling": [[0, "resampling"]], "Modulation": [[0, "modulation"]], "Phase/time-locked loops": [[0, "phase-time-locked-loops"]], "Impairments": [[0, "impairments"]], "Measurement": [[0, "measurement"]], "Data manipulation": [[0, "data-manipulation"]], "Plotting": [[0, "plotting"]], "Configuration": [[0, "configuration"]], "Time-domain": [[0, "time-domain"]], "Frequency-domain": [[0, "frequency-domain"]], "Filter analysis": [[0, "filter-analysis"]], "Note": [[1, null]], "Constructors": [[1, "constructors"], [18, "constructors"], [24, "constructors"], [36, "constructors"], [43, "constructors"], [59, "constructors"], [68, "constructors"], [76, "constructors"]], "Methods": [[1, "methods"], [18, "methods"], [24, "methods"], [36, "methods"], [43, "methods"], [59, "methods"], [68, "methods"], [76, "methods"]], "Properties": [[1, "properties"], [18, "properties"], [24, "properties"], [36, "properties"], [43, "properties"], [59, "properties"], [68, "properties"], [76, "properties"]], "See also": [[18, null], [28, null], [29, null], [30, null], [33, null], [49, null], [50, null], [52, null], [56, null], [68, null], [85, null], [90, null], [94, null], [95, null], [96, null], [97, null], [100, null], [103, null]], "Farrow arbitrary resampler": [[108, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[108, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[108, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[108, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[108, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[108, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[108, "downsample-by-an-irrational-rate"]], "FIR filters": [[109, "fir-filters"]], "Create an FIR filter": [[109, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[109, "examine-the-impulse-response-h-n"], [110, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[109, "examine-the-step-response-s-n"], [110, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[109, "examine-the-frequency-response-h-omega"], [110, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[109, "examine-the-group-delay-tau-g-omega"], [110, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[109, "fully-analyze-a-fir-filter"]], "IIR filters": [[110, "iir-filters"]], "Create an IIR filter": [[110, "create-an-iir-filter"]], "Examine the zeros and poles": [[110, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[110, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[110, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[111, "peak-to-average-power"]], "Rectangular pulse shape": [[111, "rectangular-pulse-shape"]], "Square-root raised cosine pulse shape": [[111, "square-root-raised-cosine-pulse-shape"]], "Phase-locked loops": [[112, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[112, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[112, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[112, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[112, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[112, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[112, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[112, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[113, "phase-shift-keying"]], "Constellations": [[113, "constellations"]], "BPSK": [[113, "bpsk"]], "QPSK": [[113, "qpsk"]], "8-PSK": [[113, "id1"]], "16-PSK": [[113, "id2"]], "Pulse shapes": [[114, "pulse-shapes"]], "Raised cosine": [[114, "raised-cosine"]], "Square-root raised cosine": [[114, "square-root-raised-cosine"]], "Gaussian": [[114, "gaussian"]], "Features": [[115, "features"]], "v0.0": [[116, "v0-0"]], "v0.0.2": [[116, "v0-0-2"]], "Changes": [[116, "changes"], [116, "id1"]], "Contributors": [[116, "contributors"], [116, "id2"]], "v0.0.1": [[116, "v0-0-1"]], "Versioning": [[117, "versioning"]], "Alpha releases": [[117, "alpha-releases"]], "Beta releases": [[117, "beta-releases"]]}, "indexentries": {"module": [[0, "module-sdr"]], "sdr": [[0, "module-sdr"]]}, "docurls": ["api/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.DDS/", "api/sdr.DDS.__init__/", "api/sdr.DDS.nco/", "api/sdr.DDS.process/", "api/sdr.DDS.reset/", "api/sdr.DDS.step/", "api/sdr.FIR/", "api/sdr.FIR.__init__/", "api/sdr.FIR.delay/", "api/sdr.FIR.filter/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.frequency_response_log/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.reset/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.resample/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__init__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.filter/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.filter/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.process/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.demodulate/", "api/sdr.PSK.modulate/", "api/sdr.PSK.offset/", "api/sdr.PSK.order/", "api/sdr.PSK.symbol_map/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.crest_factor/", "api/sdr.energy/", "api/sdr.gaussian/", "api/sdr.hexdump/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.plot.constellation/", "api/sdr.plot.filter/", "api/sdr.plot.frequency_response/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.periodogram/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.raised_cosine/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.unpack/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})