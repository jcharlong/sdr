Search.setIndex({"titles": ["sdr", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.DDS", "sdr.DDS.__init__", "sdr.DDS.nco", "sdr.DDS.process", "sdr.DDS.reset", "sdr.DDS.step", "sdr.FIR", "sdr.FIR.__init__", "sdr.FIR.delay", "sdr.FIR.filter", "sdr.FIR.frequency_response", "sdr.FIR.frequency_response_log", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.reset", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.resample", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__init__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.filter", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.filter", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.process", "sdr.NCO.reset", "sdr.NCO.step", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.demodulate", "sdr.PSK.modulate", "sdr.PSK.offset", "sdr.PSK.order", "sdr.PSK.symbol_map", "sdr.Q", "sdr.Qinv", "sdr.average_power", "sdr.awgn", "sdr.crest_factor", "sdr.energy", "sdr.fspl", "sdr.gaussian", "sdr.hexdump", "sdr.pack", "sdr.papr", "sdr.peak_power", "sdr.peak_voltage", "sdr.plot.constellation", "sdr.plot.filter", "sdr.plot.frequency_response", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.periodogram", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.raised_cosine", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.unpack", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"class": [0, 1, 18, 24, 36, 43, 59, 68, 76, 112, 113, 116], "fir": [0, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 97, 98, 99, 100, 103, 106, 118, 119], "implement": [0, 18, 24, 36, 43, 59, 65, 68, 76, 111], "finit": [0, 24, 119], "impuls": [0, 24, 30, 43, 52, 90, 97, 100, 104, 114, 117, 119], "respons": [0, 24, 28, 29, 30, 33, 43, 49, 50, 52, 56, 90, 97, 98, 99, 100, 103, 117, 119], "iir": [0, 1, 10, 29, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 65, 97, 98, 99, 100, 103, 106, 112, 115, 118, 119], "an": [0, 24, 30, 43, 44, 45, 52, 92, 100, 110, 118], "infinit": [0, 43, 119], "gaussian": [0, 86, 90, 118, 119], "time_bandwidth": [0, 90], "float": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 36, 39, 43, 44, 49, 50, 51, 59, 60, 61, 62, 63, 66, 68, 69, 70, 71, 72, 76, 77, 80, 85, 86, 87, 88, 90, 93, 94, 95, 97, 98, 99, 101, 102, 104, 107, 108, 109], "span": [0, 90, 107, 109, 114, 117], "int": [0, 18, 23, 24, 26, 28, 29, 30, 31, 33, 36, 38, 43, 49, 50, 52, 53, 56, 68, 75, 76, 77, 81, 86, 90, 91, 92, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110], "sp": [0, 90, 107, 109, 114, 117], "ndarrai": [0, 18, 21, 23, 24, 27, 28, 29, 30, 33, 35, 36, 39, 42, 43, 46, 47, 48, 49, 50, 52, 54, 56, 58, 59, 64, 68, 73, 75, 76, 78, 79, 82, 83, 84, 86, 90, 92, 107, 109, 110], "return": [0, 1, 9, 11, 14, 15, 21, 23, 24, 27, 28, 29, 30, 33, 39, 43, 48, 49, 50, 52, 56, 64, 73, 75, 78, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 107, 108, 109, 110, 112, 113], "raised_cosin": [0, 107, 117, 118, 119], "alpha": [0, 90, 105, 107, 109, 114, 117], "rais": [0, 104, 107, 109, 112], "cosin": [0, 104, 107, 109, 112], "rc": [0, 107], "root_raised_cosin": [0, 97, 98, 99, 100, 103, 104, 106, 109, 112, 114, 117, 118, 119], "squar": [0, 89, 104, 108, 109, 112], "root": [0, 104, 108, 109, 112], "srrc": [0, 104, 109, 114], "farrowresampl": [0, 36, 37, 38, 39, 40, 41, 42, 111, 118, 119], "cubic": [0, 36], "farrow": [0, 36, 37, 38, 39, 40, 41, 42, 119], "arbitrari": [0, 36, 37, 38, 39, 40, 41, 42, 118, 119], "psk": [0, 76, 77, 78, 79, 80, 81, 82], "shift": [0, 76, 78, 79, 80, 81, 82, 112, 113], "kei": [0, 76, 78, 79, 80, 81, 82], "demodul": [0, 76, 78], "closedlooppl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 115, 118, 119], "A": [0, 1, 9, 11, 12, 13, 14, 15, 17, 24, 59, 91, 107, 109, 115], "defin": [0, 1, 24, 43, 86, 90, 113, 118], "perform": [0, 1, 112, 113, 118], "close": [0, 1, 8, 10, 119], "pll": [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 119], "dd": [0, 18, 19, 20, 21, 22, 23, 68, 115, 118, 119], "direct": [0, 18, 19, 115, 119], "digit": [0, 1, 9, 11, 12, 13, 14, 15, 18, 19, 59, 107, 109, 115, 118, 119], "synthes": [0, 18, 19, 115, 119], "loopfilt": [0, 59, 60, 61, 62, 63, 64, 65, 66, 67, 115, 118, 119], "2nd": [0, 1, 59, 62, 115, 119], "order": [0, 1, 24, 31, 36, 38, 43, 53, 59, 62, 76, 77, 81, 90, 107, 109, 115, 116, 119], "proport": [0, 1, 5, 59, 60, 62, 89, 119], "plu": [0, 1, 59, 62, 119], "integr": [0, 1, 6, 59, 61, 62, 113, 119], "ppi": [0, 59, 62], "nco": [0, 1, 4, 8, 18, 19, 20, 62, 68, 69, 70, 71, 72, 73, 74, 75, 115, 118, 119], "numer": [0, 1, 18, 20, 68, 70, 113, 115, 119], "control": [0, 1, 18, 20, 68, 70, 115, 119], "oscil": [0, 1, 18, 20, 68, 70, 115, 119], "awgn": [0, 86, 116, 118], "x": [0, 1, 18, 21, 24, 27, 36, 39, 43, 48, 59, 64, 68, 73, 76, 78, 79, 83, 84, 85, 86, 87, 88, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 108, 110, 114, 115, 116, 120], "arraylik": [0, 18, 21, 24, 25, 27, 36, 39, 40, 43, 44, 45, 48, 59, 64, 68, 73, 76, 78, 79, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 110], "snr": [0, 86], "none": [0, 24, 30, 33, 36, 40, 59, 67, 86, 92, 97, 100, 101, 102, 103, 110, 111], "add": [0, 86, 116, 120], "addit": [0, 86, 96, 98, 99, 100, 101, 102, 103, 104, 106], "white": [0, 86], "nois": [0, 1, 2, 3, 8, 14, 59, 62, 66, 86, 102, 115], "signal": [0, 1, 9, 11, 14, 15, 18, 21, 24, 27, 36, 39, 43, 48, 59, 64, 68, 73, 75, 85, 86, 87, 88, 89, 90, 93, 94, 95, 101, 102, 104, 108, 112, 113, 114, 115, 117], "n": [0, 1, 18, 21, 23, 24, 27, 28, 29, 30, 31, 33, 36, 39, 43, 48, 49, 50, 52, 53, 56, 59, 64, 68, 73, 75, 83, 84, 85, 86, 87, 88, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 108, 115, 117], "average_pow": [0, 85, 93, 118], "averag": [0, 85, 86, 93, 101], "power": [0, 85, 86, 93, 94, 101, 117], "crest_factor": [0, 87, 93, 118, 119], "crest": [0, 87], "factor": [0, 1, 8, 17, 59, 62, 63, 87, 115], "energi": [0, 88, 107, 109, 118], "papr": [0, 93, 114, 118, 119], "peak": [0, 87, 93, 94, 95], "ratio": [0, 14, 86, 93], "peak_pow": [0, 93, 94, 118], "peak_voltag": [0, 87, 95, 118], "voltag": [0, 95, 108], "rms_voltag": [0, 87, 108, 118], "mean": [0, 101, 108, 117], "rm": [0, 87, 108], "hexdump": [0, 91, 118, 119], "byte": [0, 91], "width": [0, 91], "16": [0, 91, 119], "str": [0, 91, 101, 102], "specifi": [0, 86, 91, 112, 113], "pack": [0, 91, 92, 118, 119], "bpe": [0, 92, 110], "binari": [0, 92, 110], "arrai": [0, 92, 104, 110, 113, 114], "multipl": [0, 92, 110], "bit": [0, 91, 92, 110, 119], "per": [0, 21, 73, 90, 91, 92, 107, 109, 110, 114, 117], "element": [0, 91, 92, 110], "unpack": [0, 91, 110, 118, 119], "fspl": [0, 89], "d": [0, 89, 118], "f": [0, 9, 11, 24, 28, 29, 43, 49, 50, 89, 90, 111, 112, 113, 114, 115, 116, 117], "calcul": [0, 89], "free": [0, 89], "space": [0, 29, 50, 89], "path": [0, 89], "loss": [0, 89], "db": [0, 1, 12, 14, 86, 89, 90, 93, 114, 116, 117], "q": [0, 83, 84, 118], "comput": [0, 83, 84, 86, 89, 112, 113, 115, 117], "complementari": [0, 83, 84], "cumul": [0, 83, 84], "distribut": [0, 83, 84], "function": [0, 1, 10, 24, 43, 44, 59, 83, 84, 90, 101, 102, 112, 113, 115, 117, 118, 119], "standard": [0, 83, 84], "normal": [0, 1, 3, 8, 59, 62, 66, 83, 84, 90, 102, 115, 117], "mathcal": [0, 83, 84, 86], "0": [0, 8, 18, 19, 24, 28, 29, 43, 44, 49, 50, 62, 68, 70, 76, 77, 78, 79, 82, 83, 84, 85, 86, 88, 90, 92, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120], "1": [0, 1, 8, 11, 15, 17, 18, 19, 28, 29, 43, 44, 49, 50, 59, 62, 63, 68, 70, 76, 78, 79, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120], "qinv": [0, 83, 84, 118], "p": [0, 83, 84], "invers": [0, 84], "use_styl": [0, 105], "appli": [0, 105], "": [0, 1, 9, 11, 12, 13, 15, 16, 24, 28, 29, 33, 43, 49, 50, 56, 76, 78, 79, 97, 98, 99, 101, 102, 103, 104, 105, 111, 116, 118], "default": [0, 30, 33, 102, 105], "matplotlib": [0, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 111, 112, 113, 114, 115, 116, 117, 118], "rcparam": [0, 105, 111, 115], "time_domain": [0, 86, 104, 114, 117, 118, 119], "sample_r": [0, 1, 8, 16, 28, 29, 49, 50, 97, 98, 99, 101, 102, 104, 111, 115, 117], "periodogram": [0, 101, 114, 118, 119], "estim": [0, 76, 78, 101, 102, 115], "spectral": [0, 101, 114, 117], "densiti": [0, 14, 101, 114, 117], "p_": [0, 85, 86, 93, 94, 101], "xx": [0, 101], "us": [0, 18, 20, 25, 36, 37, 44, 45, 59, 65, 76, 78, 91, 92, 97, 100, 101, 102, 103, 110, 112, 113, 117, 118, 120], "welch": [0, 101, 102], "method": [0, 101, 102, 112, 113], "spectrogram": [0, 102, 118, 119], "b": [0, 43, 45, 90, 91, 97, 98, 99, 100, 103, 106, 117], "h": [0, 24, 25, 28, 29, 30, 43, 49, 50, 52, 59, 90, 97, 98, 100, 114, 115, 117], "e": [0, 1, 18, 85, 88, 97, 98, 112, 113, 115, 116], "j": [0, 1, 18, 43, 86, 97, 98, 112, 113, 115], "omega": [0, 19, 68, 70, 71, 97, 98, 99, 115], "step": [0, 18, 21, 23, 24, 33, 43, 56, 68, 73, 75, 97, 103], "zero": [0, 40, 43, 44, 58, 59, 92, 97, 98, 99, 100, 103, 104, 106, 112, 114, 115, 117], "pole": [0, 43, 44, 54, 97, 98, 99, 100, 103, 106, 112], "frequency_respons": [0, 24, 28, 29, 43, 49, 50, 98, 112, 113, 115, 117, 118, 119], "group_delai": [0, 99, 112, 113, 118, 119], "group": [0, 99], "delai": [0, 18, 24, 26, 36, 59, 68, 99, 115], "tau_g": [0, 99], "impulse_respons": [0, 24, 30, 43, 52, 90, 100, 107, 109, 112, 113, 117, 118, 119], "step_respons": [0, 24, 33, 43, 56, 103, 112, 113, 115, 118, 119], "zeros_pol": [0, 106, 113, 118, 119], "kwarg": [0, 96, 98, 99, 100, 101, 102, 103, 104, 106], "sdr": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120], "loop": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 118, 119], "thi": [1, 21, 24, 43, 73, 76, 82, 86, 97, 98, 99, 100, 101, 102, 103, 106, 111, 113, 115, 117], "i": [1, 8, 17, 24, 30, 33, 34, 36, 41, 43, 52, 56, 57, 59, 62, 63, 66, 83, 84, 86, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 115, 116, 117, 118, 120], "meant": 1, "analysi": [1, 8, 115, 119], "onli": [1, 24, 32, 36, 40, 43, 55, 86, 115], "block": [1, 18, 59, 68], "diagram": [1, 18, 59, 68], "bb": [1, 115], "ped": [1, 7, 8, 62, 115], "lf": [1, 115], "lo": [1, 115], "input": [1, 9, 11, 14, 15, 18, 21, 24, 25, 27, 30, 33, 36, 37, 39, 40, 43, 44, 45, 48, 52, 56, 59, 64, 68, 73, 83, 86, 92, 100, 103, 110, 112, 113, 115], "local": [1, 115], "baseband": [1, 114, 115], "phase": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 118], "error": [1, 7, 8, 14, 59, 62, 115], "detector": [1, 7, 8, 62, 115], "filter": [1, 5, 6, 8, 10, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 90, 97, 98, 99, 100, 103, 104, 106, 107, 109, 114, 117, 118, 119], "The": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 115, 117, 118, 120], "transfer": [1, 10, 24, 43, 44, 59, 90, 112, 113, 115], "h_": [1, 115], "z": [1, 18, 24, 43, 59, 68, 112, 113, 115], "k_1": [1, 5, 59, 60, 115], "k_2": [1, 6, 59, 61, 115], "frac": [1, 9, 11, 14, 15, 43, 59, 85, 86, 87, 89, 90, 93, 108, 115], "k_0": [1, 4, 8, 19, 62, 68, 69, 70, 115], "k_p": [1, 7, 8, 62, 115], "2": [1, 9, 11, 14, 28, 29, 49, 50, 77, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117], "refer": [1, 9, 11, 12, 13, 14, 15, 36, 59, 87, 90, 93, 107, 109, 113, 117], "michael": [1, 9, 11, 12, 13, 14, 15, 59, 107, 109], "rice": [1, 9, 11, 12, 13, 14, 15, 59, 107, 109], "commun": [1, 9, 11, 12, 13, 14, 15, 59, 107, 109, 115, 118], "discret": [1, 9, 11, 12, 13, 14, 15, 59, 107, 109, 111, 115], "time": [1, 8, 9, 11, 12, 13, 14, 15, 24, 43, 59, 62, 85, 86, 87, 88, 90, 93, 94, 95, 97, 101, 102, 104, 107, 108, 109, 111, 112, 113, 117], "approach": [1, 9, 11, 12, 13, 14, 15, 59, 107, 109, 115], "appendix": [1, 59, 107, 109], "c": [1, 9, 11, 12, 13, 14, 15, 59, 76, 82, 89, 115], "lock": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 118], "exampl": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 97, 98, 99, 100, 103, 104, 105, 106, 107, 109, 110, 115], "see": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 90, 107, 109, 118], "noise_bandwidth": [1, 8, 59, 62, 66], "damping_factor": [1, 8, 59, 62, 63], "creat": [1, 8, 18, 19, 24, 25, 36, 37, 43, 44, 45, 59, 62, 68, 70, 76, 77, 104, 111, 114, 115, 116, 117], "object": [1, 8, 76, 77, 113, 115, 116], "frequency_lock_tim": [1, 9], "freq_offset": [1, 9, 11], "frequenc": [1, 9, 11, 13, 24, 28, 29, 43, 49, 50, 59, 89, 97, 98, 99, 101, 102, 117], "lock_tim": [1, 11, 115], "phase_error_vari": [1, 14], "cn0": [1, 14], "varianc": [1, 14, 86], "steadi": [1, 14], "state": [1, 14, 24, 32, 34, 36, 40, 41, 43, 55, 57], "phase_lock_tim": [1, 15], "bn": [1, 2], "bandwidth": [1, 2, 3, 8, 12, 59, 62, 66, 90, 107, 109, 115, 117], "b_n": [1, 2, 3, 8, 9, 11, 14, 15, 59, 62, 66], "hz": [1, 2, 8, 9, 11, 14, 28, 29, 49, 50, 59, 62, 66, 89, 90, 111], "bnt": [1, 3, 115], "t": [1, 3, 8, 59, 62, 66, 90, 91, 111], "repres": [1, 10], "k0": [1, 4, 8, 18, 19, 62, 68, 69, 70], "gain": [1, 4, 5, 6, 7, 8, 18, 19, 43, 44, 51, 59, 60, 61, 62, 68, 69, 70, 90, 115], "k1": [1, 5, 59, 60, 115], "k2": [1, 6, 59, 61, 115], "kp": [1, 7, 8, 62], "omega_3db": [1, 12], "3": [1, 9, 11, 12, 15, 89, 90, 91, 92, 97, 98, 99, 100, 103, 104, 106, 110, 113, 115, 117, 118, 119], "omega_": [1, 12], "textrm": [1, 12], "radian": [1, 12, 13, 14, 18, 19, 76, 77, 80, 115], "omega_n": [1, 13, 115], "natur": [1, 13], "sampl": [1, 8, 16, 18, 19, 21, 23, 24, 26, 28, 29, 30, 33, 36, 40, 49, 50, 52, 56, 59, 62, 66, 68, 70, 71, 73, 75, 90, 97, 98, 99, 100, 101, 102, 103, 104, 107, 109, 111, 114, 115, 117], "rate": [1, 8, 16, 28, 29, 36, 39, 49, 50, 97, 98, 99, 101, 102, 104], "f_": [1, 8, 16, 28, 29, 49, 50, 90, 97, 98, 99, 101, 102, 104, 111, 112, 113, 115, 117], "zeta": [1, 8, 17, 59, 62, 63], "damp": [1, 8, 17, 59, 62, 63, 115], "properti": [2, 3, 4, 5, 6, 7, 10, 12, 13, 16, 17, 20, 26, 31, 34, 35, 38, 41, 42, 46, 47, 51, 53, 54, 57, 58, 60, 61, 63, 65, 66, 69, 71, 72, 80, 81, 82], "paramet": [8, 9, 11, 14, 19, 21, 23, 25, 27, 28, 29, 30, 33, 37, 39, 40, 44, 45, 48, 49, 50, 52, 56, 62, 64, 70, 73, 75, 77, 78, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110], "where": [8, 59, 62, 66, 86, 90, 112, 113, 118], "period": [8, 59, 62, 66], "second": [8, 9, 11, 15, 59, 62, 66, 90], "critic": [8, 17, 59, 62, 63, 115], "underdamp": [8, 17, 59, 62, 63], "overdamp": [8, 17, 59, 62, 63], "ted": [8, 62], "t_": [9, 11, 15, 39, 90, 117], "fl": [9, 11], "4": [9, 11, 29, 50, 86, 89, 90, 91, 92, 97, 98, 99, 100, 103, 104, 105, 106, 107, 109, 110, 111, 113, 116, 119], "delta": [9, 11, 24, 30, 43, 52, 100, 112, 113], "offset": [9, 11, 18, 19, 68, 70, 72, 76, 77, 80, 115], "take": [9, 11, 15], "onto": [9, 11, 15], "equat": [9, 11, 12, 13, 14, 15, 43], "39": 9, "pl": [11, 15], "38": 11, "34": 12, "33": 13, "sigma_": 14, "theta_": 14, "n_0": [14, 116], "carrier": 14, "43": 14, "40": 15, "less": 17, "than": 17, "greater": 17, "note": [18, 24, 43, 59, 68, 86, 90, 102], "increment": [18, 19, 21, 68, 70, 71, 73, 115], "v": [18, 68], "y": [18, 21, 23, 24, 27, 39, 43, 48, 59, 64, 68, 73, 75, 86, 102, 104, 115], "output": [18, 21, 23, 24, 30, 33, 43, 44, 45, 52, 56, 59, 64, 68, 73, 75, 86, 92, 100, 103, 110, 111, 112, 113, 115], "complex": [18, 21, 23, 76, 78, 79, 82, 86, 96, 111, 112, 113, 116], "exponenti": [18, 21, 23, 111, 112, 113], "constant": [18, 19, 59, 68, 70, 71, 113, 115], "accumul": [18, 19, 68, 70, 71, 115], "absolut": [18, 19, 68, 70, 72], "unit": [18, 24, 33, 43, 56, 59, 68, 70, 71, 72, 85, 86, 88, 94, 95, 103, 107, 108, 109, 112, 113, 115], "adder": [18, 59, 68, 115], "process": [18, 21, 68, 73, 113, 115], "variabl": [18, 21, 68, 73, 91, 115], "reset": [18, 22, 24, 32, 36, 40, 43, 55, 59, 67, 68, 74], "forward": [18, 23, 68, 75], "theta": [19, 68, 70, 72], "vari": [21, 73], "number": [23, 28, 29, 30, 33, 49, 50, 52, 56, 75, 86, 90, 91, 92, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110], "wrapper": [24, 43], "scipi": [24, 27, 43, 101, 102, 117, 118], "convolv": [24, 27, 104, 114], "It": [24, 43, 59, 86], "support": [24, 43], "one": [24, 43, 90, 91, 97, 98, 99, 101, 102, 112, 113, 114, 117], "stream": [24, 25, 32, 34, 36, 37, 40, 41, 43, 44, 45, 55, 57], "its": [24, 43, 44, 112, 113, 117], "feedforward": [24, 25, 35, 43, 45, 47, 97, 98, 99, 100, 103, 106, 112, 113], "coeffici": [24, 25, 43, 45, 97, 98, 99, 100, 103, 106, 112, 113], "h_i": [24, 25, 35, 112], "sum_": [24, 43, 85, 86, 88, 108], "sum": [24, 43, 117], "limits_": [24, 43], "bool": [24, 25, 34, 36, 37, 41, 43, 44, 45, 57, 96], "fals": [24, 25, 36, 37, 43, 44, 45, 96, 113, 117], "tupl": [24, 28, 29, 43, 49, 50], "frequency_response_log": [24, 29, 43, 50], "logarithm": [24, 29, 43, 50, 97, 98, 99, 101, 112, 113], "axi": [24, 29, 43, 50, 97, 98, 99, 101, 102, 104, 111], "when": [24, 30, 33, 43, 52, 56, 97, 98, 99, 100, 103, 111, 112, 113], "mode": [24, 25, 27, 32, 34, 36, 37, 40, 41, 43, 44, 45, 55, 57, 114], "u": [24, 33, 43, 56, 103, 112, 113], "indic": [24, 25, 34, 36, 37, 41, 43, 44, 45, 57], "whether": [24, 25, 34, 36, 37, 41, 43, 44, 45, 57], "tap": [24, 35, 36, 42, 43, 46, 47, 112, 113], "In": [25, 34, 37, 41, 44, 45, 57, 83, 84, 86, 89, 90, 91, 92, 97, 98, 99, 100, 103, 104, 105, 106, 107, 109, 110, 111, 116], "previou": [25, 37, 40, 44, 45], "ar": [25, 29, 37, 44, 45, 50, 92, 97, 98, 99, 101, 102, 105, 111, 113, 115, 117, 118, 120], "preserv": [25, 34, 37, 41, 44, 45, 57], "between": [25, 34, 37, 41, 44, 45, 57, 89, 101, 102, 115], "call": [25, 34, 37, 41, 44, 45, 57], "liter": [27, 98, 99], "full": 27, "valid": [27, 114], "same": [27, 112], "convolut": 27, "detail": 27, "1024": [28, 29, 49, 50, 97, 98, 99, 114, 117], "from": [28, 29, 43, 44, 49, 50, 76, 82, 102, 112, 113, 115, 118], "plot": [28, 29, 30, 33, 49, 50, 52, 56, 86, 90, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119], "decad": [29, 50, 97, 98, 99, 112, 115], "length": [30, 33, 90, 97, 100, 101, 102, 103, 107, 109, 111, 114, 117], "resampl": [36, 37, 38, 39, 40, 41, 42, 118, 119], "http": [36, 87, 90, 93], "wirelesspi": 36, "com": [36, 90], "fraction": [36, 40, 90, 111], "structur": 36, "new": [36, 37, 76, 77], "given": [36, 39, 112, 113], "r": [36, 39, 90, 107, 109, 113, 115, 117], "index": [36, 40], "vector": [40, 101, 102], "should": 40, "equal": 40, "three": [40, 111, 117], "If": [40, 86, 92, 96, 97, 100, 101, 102, 103, 104, 110, 118], "lfilter": 43, "b_i": [43, 45, 47, 97, 98, 99, 100, 103, 106, 113], "feedback": [43, 45, 46, 97, 98, 99, 100, 103, 106, 113], "a_j": [43, 45, 46, 97, 98, 99, 100, 103, 106, 113], "These": [43, 105, 115], "differ": [43, 117], "a_0": 43, "left": [43, 85, 86, 88, 89, 90, 94, 95, 108], "m": [43, 76, 77, 78, 79, 81, 82], "right": [43, 85, 86, 88, 89, 90, 94, 95, 108], "classmethod": [43, 44], "zerospol": [43, 44, 97, 98, 99, 100, 103, 106, 113], "self": [43, 44], "100": [43, 52, 56, 86, 97, 100, 103, 104, 111], "a_tap": [43, 46, 97, 98, 99, 100, 103, 106, 113, 115], "b_tap": [43, 47, 97, 98, 99, 100, 103, 106, 113, 115], "can": [59, 86, 90, 92, 101, 102, 112, 113, 120], "track": 59, "cannot": 59, "howev": [59, 111], "chirp": 59, "ramp": 59, "underli": [59, 65], "modul": [76, 77, 79, 81, 116], "x_hat": [76, 78, 96, 116], "symbol": [76, 78, 79, 82, 90, 96, 107, 109, 114, 116, 117], "hat": [76, 78, 96], "k": [76, 78, 79, 96, 114, 117], "decim": [76, 78, 79, 82, 116], "maximum": [76, 78], "likelihood": [76, 78], "phi": [76, 77, 80], "symbol_map": [76, 82, 104, 114], "map": [76, 82], "dot": [76, 82], "mathbb": [76, 82], "must": [77, 86, 90, 107, 109], "least": 77, "real": [83, 84, 86, 111, 112, 113, 114, 115], "valu": [83, 84, 90, 102, 113], "probabl": [83, 84, 118], "exceed": [83, 84], "out": [83, 84, 89, 92, 105, 110], "15865525393145707": [83, 84], "158655": [83, 84], "0000010494310452": [83, 84], "measur": [85, 86, 87, 88, 93, 94, 95, 108, 115, 118, 119], "domain": [85, 86, 87, 88, 93, 94, 95, 97, 101, 102, 104, 108], "text": [85, 86, 87, 89, 93, 94, 95, 108], "avg": [85, 86, 93], "seed": 86, "which": [86, 111, 115, 117], "ad": [86, 118, 119], "desir": [86, 116], "explicitli": 86, "assum": [86, 92, 110], "contain": [86, 91], "known": 86, "pass": [86, 96, 98, 99, 100, 101, 102, 103, 104, 106, 112, 113], "linear": 86, "random": [86, 104, 114, 116], "gener": [86, 116], "numpi": [86, 110, 111, 112, 113, 114, 115, 116, 117, 118], "default_rng": 86, "noisi": 86, "w": [86, 111, 112, 113, 114, 115, 116, 117], "sigma": 86, "For": [86, 97, 98, 99, 100, 103, 106, 112], "sim": 86, "cn": 86, "np": [86, 97, 98, 99, 100, 103, 104, 106, 111, 112, 113, 114, 115, 116, 117], "sin": 86, "pi": [86, 89, 90, 97, 98, 99, 100, 103, 104, 106, 111, 112, 113, 114, 115], "5": [86, 90, 91, 97, 98, 99, 100, 103, 104, 106, 107, 109, 111, 112, 113, 114, 115, 116, 117, 119], "arang": [86, 111, 114, 115], "10": [86, 89, 90, 91, 93, 97, 98, 99, 100, 103, 104, 106, 107, 109, 111, 112, 113, 114, 115, 116, 117], "plt": [86, 90, 97, 98, 99, 100, 103, 104, 106, 107, 109, 111, 112, 113, 114, 115, 116, 117], "figur": [86, 90, 97, 98, 99, 100, 103, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 116, 117], "figsiz": [86, 90, 97, 98, 99, 100, 103, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 116, 117], "8": [86, 90, 91, 97, 98, 99, 100, 103, 104, 105, 106, 107, 109, 112, 113, 114, 115, 117], "label": [86, 90, 102, 104, 107, 109, 111, 114, 115, 117], "titl": [86, 104, 111, 114, 115, 117], "tight_layout": [86, 104, 114, 115, 116, 117], "show": [86, 90, 97, 98, 99, 100, 103, 104, 106, 107, 109, 111, 112, 113, 114, 115, 116, 117], "cf": 87, "v_": [87, 95, 108], "en": [87, 93], "wikipedia": [87, 93], "org": [87, 93], "wiki": [87, 93], "log_": [89, 93], "distanc": 89, "meter": 89, "transmitt": 89, "receiv": 89, "km": 89, "link": 89, "ghz": 89, "1e3": 89, "1e9": 89, "92": 89, "44778322188337": 89, "so": [89, 90, 118], "doubl": 89, "result": 89, "6": [89, 91, 97, 98, 99, 100, 103, 104, 106, 112, 113, 115, 116], "increas": [89, 113], "2e3": 89, "98": 89, "468383135163": 89, "also": [89, 90, 118], "2e9": 89, "puls": [90, 104, 107, 109, 118, 119], "shape": [90, 104, 107, 109, 118, 119], "product": [90, 117], "sym": [90, 117], "side": [90, 97, 98, 99, 101, 102, 112, 113, 114, 117], "thought": [90, 120], "smaller": [90, 117], "produc": [90, 117], "wider": 90, "even": [90, 107, 109], "amplitud": [90, 111, 115], "nomin": 90, "passband": [90, 114], "ha": [90, 115, 117], "exp": [90, 97, 98, 99, 100, 103, 104, 106, 111, 113, 114, 115], "relat": 90, "sqrt": [90, 108, 114, 115, 117], "ln": 90, "www": 90, "mathwork": 90, "help": 90, "ref": 90, "gaussdesign": 90, "html": 90, "onlinelibrari": 90, "wilei": 90, "doi": 90, "pdf": 90, "1002": 90, "9780470041956": 90, "app2": 90, "h_0p1": [90, 107, 109], "h_0p2": 90, "h_0p3": 90, "data": [91, 92, 110, 118], "displai": [91, 97, 98, 99, 101, 102], "each": [91, 101, 102], "consid": 91, "convert": 91, "line": 91, "string": [91, 101, 102], "print": [91, 111, 112, 113, 115], "quick": 91, "brown": 91, "fox": 91, "jump": 91, "over": 91, "lazi": 91, "dog": 91, "00000000": 91, "54": 91, "68": 91, "65": 91, "20": [91, 114, 117], "71": 91, "75": [91, 115, 116], "69": 91, "63": 91, "6b": 91, "62": 91, "72": 91, "6f": 91, "77": 91, "6e": 91, "00000010": 91, "66": 91, "78": 91, "6a": 91, "6d": 91, "70": [91, 117], "73": 91, "76": 91, "74": 91, "00000020": 91, "6c": 91, "61": 91, "7a": 91, "79": 91, "64": [91, 113], "67": 91, "he": 91, "7": [91, 104], "9": [91, 107, 109, 114, 116, 117, 119], "01": [91, 113, 115], "02": [91, 113, 115], "03": [91, 113], "04": [91, 113], "00000004": 91, "05": [91, 111, 113, 115], "06": 91, "07": 91, "08": 91, "00000008": 91, "09": 91, "0a": 91, "dtype": [92, 104, 110, 115], "dtypelik": [92, 110], "have": [92, 110], "most": [92, 110], "signific": [92, 110], "first": [92, 110], "enough": 92, "fill": 92, "last": 92, "remain": 92, "type": [92, 98, 99, 101, 110, 119], "smallest": 92, "unsign": 92, "integ": 92, "hold": 92, "uint8": [92, 110], "max": [94, 95], "constel": 96, "heatmap": [96, 116], "true": [96, 105, 116], "instead": 96, "scatter": 96, "keyword": [96, 98, 99, 100, 101, 102, 103, 104, 106, 112, 113], "argument": [96, 98, 99, 100, 101, 102, 103, 104, 106, 112, 113], "pyplot": [96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 111, 112, 113, 114, 115, 116, 117], "hist2d": 96, "n_time": [97, 113], "n_freq": 97, "x_axi": [97, 98, 99, 101, 102, 112, 113, 114, 115], "two": [97, 98, 99, 101, 102, 111, 112, 113], "log": [97, 98, 99, 101, 112, 113, 115], "set": [97, 98, 99, 100, 101, 102, 103, 105, 106, 113], "n_t": 97, "n_f": 97, "scale": [97, 98, 99, 101, 102, 112, 113], "option": [97, 98, 99, 101, 102], "spectrum": [97, 98, 99, 101, 102], "h_srrc": [97, 98, 99, 100, 103, 104, 106], "1j": [97, 98, 99, 100, 103, 104, 106, 111, 113, 114, 115], "conj": [97, 98, 99, 100, 103, 106, 113, 115], "30": [97, 100, 103, 113], "ylim": [99, 112, 115, 117], "48": 99, "52": 99, "window": [101, 102], "hann": [101, 102], "overlap": [101, 102, 114], "fft": [101, 102], "median": 101, "segment": [101, 102], "256": [101, 102, 114], "point": [101, 102], "pcolormesh": 102, "By": 102, "color": [102, 111, 114, 115, 117], "bar": 102, "rang": [102, 115], "10th": 102, "100th": 102, "percentil": 102, "provid": [102, 118], "more": 102, "dynam": 102, "activ": 102, "chang": [102, 120], "vmin": 102, "vmax": 102, "bpsk": [104, 114], "1000": 104, "randint": [104, 114, 116], "10e3": 104, "qpsk": 104, "complex64": [104, 115], "style": 105, "mai": [105, 113], "revert": 105, "rcdefault": 105, "follow": [105, 115], "_rc_param": 105, "rc_param": 105, "ax": [105, 111, 115], "grid": [105, 111, 115, 117], "autolayout": 105, "max_open_warn": 105, "titleweight": 105, "bold": 105, "linestyl": [105, 111, 115, 117], "excess": [107, 109, 117], "le": [107, 109], "h_0p5": [107, 109], "h_0p9": [107, 109], "import": [111, 112, 113, 114, 115, 116, 117, 118], "config": [111, 112, 113, 114, 115, 116, 117], "inlinebackend": [111, 112, 113, 114, 115, 116, 117], "print_figure_kwarg": [111, 112, 113, 114, 115, 116, 117], "facecolor": [111, 112, 113, 114, 115, 116, 117], "widget": [111, 112, 113, 114, 115, 116, 117], "prop_cycl": [111, 115], "by_kei": [111, 115], "continu": 111, "freq": [111, 115], "tx": 111, "decai": [111, 113], "marker": [111, 112, 113], "o": 111, "fillstyl": 111, "imag": 111, "xlabel": [111, 115, 117], "ylabel": [111, 115, 117], "origin": 111, "legend": [111, 114, 115, 117], "both": [111, 115], "now": 111, "equival": 111, "accomplish": 111, "librari": [111, 116, 118, 120], "def": [111, 116], "resample_sign": 111, "new_sample_r": 111, "ty": 111, "size": [111, 114, 115, 117], "notic": [111, 117], "everi": 111, "200": 111, "four": 111, "400": 111, "other": [111, 120], "appear": 111, "50": [111, 114], "fourth": 111, "25": [111, 115, 117], "roughli": 111, "often": 111, "do": 111, "align": 111, "315": 111, "32": 111, "user": [112, 113], "below": [112, 113], "00095881": 112, "00175008": 112, "00423912": 112, "00588237": 112, "00615087": 112, "00474585": 112, "00170436": 112, "0025481": 112, "00721629": 112, "01123216": 112, "01342329": 112, "01273174": 112, "00845039": 112, "00043678": 112, "01073645": 112, "02372925": 112, "03650167": 112, "04650553": 112, "05098414": 112, "04734541": 112, "03355823": 112, "00851466": 112, "0276993": 112, "07367186": 112, "12670168": 112, "18306847": 112, "2381038": 112, "28726435": 112, "32607284": 112, "3509308": 112, "35948882": 112, "conveni": [112, 113], "evalu": [112, 113], "envelop": [112, 113], "through": [112, 113, 115], "easili": [112, 113], "here": [112, 113], "12": [112, 116], "altern": 113, "conjug": 113, "0x000002214b040a88": 113, "47820725": 113, "00000000e": 113, "00": 113, "78207252e": 113, "58172329e": 113, "10862468e": 113, "86109590e": 113, "21565653e": 113, "01140214e": 113, "57286400e": 113, "67772160e": 113, "47338728e": 113, "10422993e": 113, "89312837e": 113, "12240078e": 113, "03953322e": 113, "69685122e": 113, "63882791e": 113, "81474977e": 113, "47193366e": 113, "85259041e": 113, "15647504e": 113, "23851924e": 113, "42176895e": 113, "84684395e": 113, "42721858e": 113, "72236648e": 113, "14721649e": 113, "10813095e": 113, "94024315e": 113, "78877688e": 113, "74077567e": 113, "87820725": 113, "53637958": 113, "94724205": 113, "13335164": 113, "1455082": 113, "04436799": 113, "88708159": 113, "71930943": 113, "5719707": 113, "46154771": 113, "39261642": 113, "36139242": 113, "35935288": 113, "3763214": 113, "40270968": 113, "43085717": 113, "45557651": 113, "47410241": 113, "48566716": 113, "49090568": 113, "49124786": 113, "48840102": 113, "4839738": 113, "47925143": 113, "47510421": 113, "47199608": 113, "47005584": 113, "46917696": 113, "46911955": 113, "denomin": 113, "73910363": 113, "30614675j": 113, "plane": 113, "linspac": 113, "endpoint": 113, "concaten": 113, "0x000002214dc574c8": 113, "lyon": 113, "understand": 113, "3rd": 113, "edit": 113, "section": [113, 115], "insid": 113, "circl": 113, "sinusoid": 113, "outsid": 113, "unstabl": 113, "n_symbol": 114, "500": [114, 115], "x_bb_rect": 114, "papr_bb_rect": 114, "x_pb_rect": 114, "papr_pb_rect": 114, "x_bb_0p9": 114, "papr_bb_0p9": 114, "x_bb_0p5": 114, "papr_bb_0p5": 114, "x_bb_0p1": 114, "papr_bb_0p1": 114, "2f": 114, "rf": [114, 115], "xlim": [114, 115, 117], "x_pb_0p9": 114, "papr_pb_0p9": 114, "x_pb_0p5": 114, "papr_pb_0p5": 114, "x_pb_0p1": 114, "papr_pb_0p1": 114, "configur": 115, "0x00000290f1ce3488": 115, "theta_0": 115, "phase_error": 115, "freq_estim": 115, "subplot": [115, 116], "suptitl": [115, 116], "ones": 115, "angl": 115, "part": 115, "unwrap": 115, "system": [115, 118], "avail": [115, 116], "001": 115, "005": 115, "b_nt": 115, "0005": 115, "00001": 115, "0125": 115, "015": 115, "0175": 115, "t_lock": 115, "analyze_psk": 116, "esn0": 116, "100_000": 116, "achiev": [116, 117], "n0": 116, "bin": 116, "e_": 116, "18": 116, "rectangular": 117, "rect": 117, "rc_0p1": 117, "rc_0p5": 117, "rc_0p9": 117, "nyquist": 117, "adjac": 117, "specif": 117, "pm": 117, "roll": 117, "60": 117, "total": 117, "nearli": 117, "compar": 117, "null": 117, "while": 117, "small": 117, "lobe": 117, "much": 117, "higher": 117, "h_rect": 117, "freqz": 117, "worn": 117, "whole": 117, "h_rc_0p1": 117, "h_rc_0p5": 117, "h_rc_0p9": 117, "rel": 117, "main": 117, "p_rect": 117, "log10": 117, "cumsum": 117, "ab": 117, "p_rc_0p1": 117, "p_rc_0p5": 117, "p_rc_0p9": 117, "One": 117, "within": 117, "variou": 117, "srrc_0p1": 117, "srrc_0p5": 117, "srrc_0p9": 117, "therefor": 117, "similar": 117, "significantli": 117, "due": 117, "being": 117, "h_srrc_0p1": 117, "h_srrc_0p5": 117, "h_srrc_0p9": 117, "p_srrc_0p1": 117, "p_srrc_0p5": 117, "p_srrc_0p9": 117, "gauss_0p1": 117, "gauss_0p2": 117, "gauss_0p3": 117, "python": 118, "packag": 118, "softwar": 118, "radio": 118, "goal": 118, "tool": 118, "design": 118, "build": 118, "analyz": 118, "reli": 118, "interoper": 118, "veri": 118, "possibl": 118, "numba": 118, "acceler": 118, "computation": 118, "intens": 118, "addition": 118, "aim": 118, "replic": 118, "relev": 118, "matlab": 118, "dsp": 118, "toolbox": 118, "we": 118, "progress": 118, "someth": 118, "you": 118, "like": 118, "includ": 118, "pleas": 118, "open": 118, "issu": 118, "github": 118, "impair": 118, "manipul": 118, "util": 118, "releas": 119, "juli": 119, "2023": 119, "helper": 119, "improv": 119, "annot": 119, "matt": 119, "hostett": 119, "mhostett": 119, "semant": 120, "major": 120, "minor": 120, "patch": 120, "introduc": 120, "api": 120, "featur": 120, "backward": 120, "compat": 120, "make": 120, "bug": 120, "fix": 120, "befor": 120, "There": 120, "guarante": 120, "them": 120, "thei": 120}, "objects": {"": [[0, 0, 0, 1, "sdr", ""]], "sdr": [[1, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [18, 1, 1, "", "DDS", "Implements a direct digital synthesizer (DDS)."], [24, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [36, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [43, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [59, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [68, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [76, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [83, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [84, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [85, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [86, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [87, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [88, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [89, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [90, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [91, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [92, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [93, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [94, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [95, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [107, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [108, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [109, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [110, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."]], "sdr.ClosedLoopPLL": [[2, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [3, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [4, 2, 1, "", "K0", "The NCO gain $K_0$."], [5, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [6, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [7, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [8, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [9, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [10, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [11, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [12, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [13, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [14, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [15, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [16, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [17, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[8, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [8, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [8, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [8, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [8, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[9, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[11, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[14, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.DDS": [[19, 3, 1, "", "__init__", "Creates a direct digital synthesizer (DDS)."], [20, 2, 1, "", "nco", "The numerically-controlled oscillator (NCO) used by the DDS."], [21, 3, 1, "", "process", "Steps the DDS with the variable phase increment signal $x[n]$."], [22, 3, 1, "", "reset", "Resets the DDS."], [23, 3, 1, "", "step", "Steps the DDS forward by $N$ samples."]], "sdr.DDS.__init__": [[19, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [19, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [19, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.DDS.process": [[21, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the DDS."]], "sdr.DDS.step": [[23, 4, 2, "p-N", "N", "The number of samples $N$ to step the DDS forward."]], "sdr.FIR": [[25, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [26, 2, 1, "", "delay", "The delay of the FIR filter in samples."], [27, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the FIR filter."], [28, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the FIR filter."], [29, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the FIR filter on a logarithmic frequency axis."], [30, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [31, 2, 1, "", "order", "The order of the FIR filter, $N$."], [32, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [33, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [34, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [35, 2, 1, "", "taps", "The feedforward taps $h_i$."]], "sdr.FIR.__init__": [[25, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$."], [25, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to filter()."]], "sdr.FIR.filter": [[27, 4, 2, "p-mode", "mode", "The convolution mode. See scipy.signal.convolve() for details."], [27, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.FIR.frequency_response": [[28, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [28, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.frequency_response_log": [[29, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [29, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [29, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[30, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.step_response": [[33, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FarrowResampler": [[37, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [38, 2, 1, "", "order", "The order of the filter."], [39, 3, 1, "", "resample", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [40, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [41, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [42, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__init__": [[37, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to resample()."]], "sdr.FarrowResampler.resample": [[39, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [39, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.reset": [[40, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[44, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [45, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [46, 2, 1, "", "a_taps", "The feedback taps $a_j$."], [47, 2, 1, "", "b_taps", "The feedforward taps $b_i$."], [48, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the IIR filter."], [49, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the IIR filter."], [50, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the IIR filter on a logarithmic frequency axis."], [51, 2, 1, "", "gain", "The gain of the IIR filter."], [52, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [53, 2, 1, "", "order", "The order of the IIR filter, $N$."], [54, 2, 1, "", "poles", "The poles of the IIR filter."], [55, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [56, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [57, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [58, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[44, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [44, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [44, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."], [44, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__init__": [[45, 4, 2, "p-a", "a", "The feedback coefficients $a_j$."], [45, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [45, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."]], "sdr.IIR.filter": [[48, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.IIR.frequency_response": [[49, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [49, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[50, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [50, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [50, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[52, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[56, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.LoopFilter": [[60, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [61, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [62, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [63, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [64, 3, 1, "", "filter", "Filters the input signal $x[n]$."], [65, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [66, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [67, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__init__": [[62, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [62, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [62, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [62, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.LoopFilter.filter": [[64, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.NCO": [[69, 2, 1, "", "K0", "The NCO gain $K_0$."], [70, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [71, 2, 1, "", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [72, 2, 1, "", "offset", "The absolute offset $theta$ of the NCO in units."], [73, 3, 1, "", "process", "Steps the NCO with the variable-increment signal $x[n]$."], [74, 3, 1, "", "reset", "Resets the NCO."], [75, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__init__": [[70, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [70, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [70, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in units."]], "sdr.NCO.process": [[73, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the NCO."]], "sdr.NCO.step": [[75, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.PSK": [[77, 3, 1, "", "__init__", "Creates a new PSK object."], [78, 3, 1, "", "demodulate", "Demodulates the complex symbols $hat{x}[k]$ to decimal symbols $hat{s}[k]$ using maximum-likelihood estimation."], [79, 3, 1, "", "modulate", "Modulates to decimal symbols $s[k]$ to complex symbols $x[k]$."], [80, 2, 1, "", "offset", "The phase offset $phi$ in radians."], [81, 2, 1, "", "order", "The modulation order $M$."], [82, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} -> mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[77, 4, 2, "p-offset", "offset", "The phase offset $phi$ in radians."], [77, 4, 2, "p-order", "order", "The modulation order $M$. Must be at least 2."]], "sdr.PSK.demodulate": [[78, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to demodulate."]], "sdr.PSK.modulate": [[79, 4, 2, "p-symbols", "symbols", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.Q": [[83, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[84, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.average_power": [[85, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[86, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [86, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [86, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [86, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.crest_factor": [[87, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.energy": [[88, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.fspl": [[89, 4, 2, "p-d", "d", "The distance $d$ in meters between the transmitter and receiver."], [89, 4, 2, "p-f", "f", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[90, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [90, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [90, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.hexdump": [[91, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [91, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.pack": [[92, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [92, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [92, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[93, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_power": [[94, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[95, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.plot": [[96, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [97, 5, 1, "", "filter", "Plots the frequency response $H(e^{jomega})$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [98, 5, 1, "", "frequency_response", "Plots the frequency response $H(e^{jomega})$ of the filter."], [99, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [100, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [101, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [102, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [103, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [104, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [105, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [106, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.constellation": [[96, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [96, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.filter": [[97, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [97, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [97, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [97, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [97, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [97, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [97, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.frequency_response": [[98, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [98, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [98, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [98, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [98, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [98, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[99, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [99, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [99, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [99, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [99, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [99, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.impulse_response": [[100, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [100, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [100, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.plot.periodogram": [[101, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [101, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [101, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [101, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [101, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [101, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [101, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [101, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.spectrogram": [[102, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [102, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [102, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [102, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [102, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [102, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [102, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[103, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [103, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [103, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.plot.time_domain": [[104, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\"."], [104, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[106, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [106, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.raised_cosine": [[107, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [107, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [107, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[108, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[109, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [109, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [109, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.unpack": [[110, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [110, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [110, 4, 2, "p-x", "x", "The input array with bpe bits per element."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"sdr": [0, 118], "filter": [0, 112, 113, 115], "puls": [0, 114, 117], "shape": [0, 114, 117], "resampl": [0, 111], "modul": 0, "phase": [0, 115, 116], "time": [0, 115], "lock": [0, 115], "loop": [0, 115], "impair": 0, "measur": 0, "data": 0, "manipul": 0, "link": 0, "budget": 0, "probabl": 0, "plot": 0, "configur": 0, "domain": [0, 115], "frequenc": [0, 112, 113, 115], "analysi": 0, "note": 1, "constructor": [1, 18, 24, 36, 43, 59, 68, 76], "method": [1, 18, 24, 36, 43, 59, 68, 76], "properti": [1, 18, 24, 36, 43, 59, 68, 76], "see": [18, 28, 29, 30, 33, 49, 50, 52, 56, 68, 83, 84, 87, 93, 97, 98, 99, 100, 103, 106], "also": [18, 28, 29, 30, 33, 49, 50, 52, 56, 68, 83, 84, 87, 93, 97, 98, 99, 100, 103, 106], "farrow": 111, "arbitrari": 111, "construct": 111, "an": [111, 112, 113], "input": 111, "signal": 111, "x": 111, "n": [111, 112, 113], "t_": 111, "rate": 111, "r": 111, "y": 111, "frac": 111, "upsampl": 111, "integ": 111, "downsampl": 111, "irrat": 111, "fir": 112, "creat": [112, 113], "examin": [112, 113], "impuls": [112, 113], "respons": [112, 113, 115], "h": [112, 113], "step": [112, 113, 115], "": [112, 113], "omega": [112, 113], "group": [112, 113], "delai": [112, 113], "tau_g": [112, 113], "fulli": [112, 113], "analyz": [112, 113, 115], "iir": 113, "zero": 113, "pole": 113, "digit": 113, "stabil": 113, "peak": 114, "averag": 114, "power": 114, "rectangular": 114, "squar": [114, 117], "root": [114, 117], "rais": [114, 117], "cosin": [114, 117], "design": 115, "proport": 115, "plu": 115, "integr": 115, "ppi": 115, "implement": 115, "pll": 115, "close": 115, "perform": 115, "compar": 115, "across": 115, "zeta": 115, "b_n": 115, "t": 115, "shift": 116, "kei": 116, "constel": 116, "bpsk": 116, "qpsk": 116, "8": 116, "psk": 116, "16": 116, "gaussian": 117, "featur": 118, "v0": 119, "0": 119, "2": 119, "chang": 119, "contributor": 119, "1": 119, "version": 120, "alpha": 120, "releas": 120, "beta": 120}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"sdr": [[0, "sdr"], [118, "sdr"]], "Filtering": [[0, "filtering"]], "Pulse shaping": [[0, "pulse-shaping"]], "Resampling": [[0, "resampling"]], "Modulation": [[0, "modulation"]], "Phase/time-locked loops": [[0, "phase-time-locked-loops"]], "Impairments": [[0, "impairments"]], "Measurement": [[0, "measurement"]], "Data manipulation": [[0, "data-manipulation"]], "Link budgets": [[0, "link-budgets"]], "Probability": [[0, "probability"]], "Plotting": [[0, "plotting"]], "Configuration": [[0, "configuration"]], "Time-domain": [[0, "time-domain"]], "Frequency-domain": [[0, "frequency-domain"]], "Filter analysis": [[0, "filter-analysis"]], "Note": [[1, null]], "Constructors": [[1, "constructors"], [18, "constructors"], [24, "constructors"], [36, "constructors"], [43, "constructors"], [59, "constructors"], [68, "constructors"], [76, "constructors"]], "Methods": [[1, "methods"], [18, "methods"], [24, "methods"], [36, "methods"], [43, "methods"], [59, "methods"], [68, "methods"], [76, "methods"]], "Properties": [[1, "properties"], [18, "properties"], [24, "properties"], [36, "properties"], [43, "properties"], [59, "properties"], [68, "properties"], [76, "properties"]], "See also": [[18, null], [28, null], [29, null], [30, null], [33, null], [49, null], [50, null], [52, null], [56, null], [68, null], [83, null], [84, null], [87, null], [93, null], [97, null], [98, null], [99, null], [100, null], [103, null], [106, null]], "Farrow arbitrary resampler": [[111, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[111, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[111, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[111, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[111, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[111, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[111, "downsample-by-an-irrational-rate"]], "FIR filters": [[112, "fir-filters"]], "Create an FIR filter": [[112, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[112, "examine-the-impulse-response-h-n"], [113, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[112, "examine-the-step-response-s-n"], [113, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[112, "examine-the-frequency-response-h-omega"], [113, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[112, "examine-the-group-delay-tau-g-omega"], [113, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[112, "fully-analyze-a-fir-filter"]], "IIR filters": [[113, "iir-filters"]], "Create an IIR filter": [[113, "create-an-iir-filter"]], "Examine the zeros and poles": [[113, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[113, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[113, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[114, "peak-to-average-power"]], "Rectangular pulse shape": [[114, "rectangular-pulse-shape"]], "Square-root raised cosine pulse shape": [[114, "square-root-raised-cosine-pulse-shape"]], "Phase-locked loops": [[115, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[115, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[115, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[115, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[115, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[115, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[115, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[115, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[116, "phase-shift-keying"]], "Constellations": [[116, "constellations"]], "BPSK": [[116, "bpsk"]], "QPSK": [[116, "qpsk"]], "8-PSK": [[116, "id1"]], "16-PSK": [[116, "id2"]], "Pulse shapes": [[117, "pulse-shapes"]], "Raised cosine": [[117, "raised-cosine"]], "Square-root raised cosine": [[117, "square-root-raised-cosine"]], "Gaussian": [[117, "gaussian"]], "Features": [[118, "features"]], "v0.0": [[119, "v0-0"]], "v0.0.2": [[119, "v0-0-2"]], "Changes": [[119, "changes"], [119, "id1"]], "Contributors": [[119, "contributors"], [119, "id2"]], "v0.0.1": [[119, "v0-0-1"]], "Versioning": [[120, "versioning"]], "Alpha releases": [[120, "alpha-releases"]], "Beta releases": [[120, "beta-releases"]]}, "indexentries": {"module": [[0, "module-sdr"]], "sdr": [[0, "module-sdr"]]}, "docurls": ["api/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.DDS/", "api/sdr.DDS.__init__/", "api/sdr.DDS.nco/", "api/sdr.DDS.process/", "api/sdr.DDS.reset/", "api/sdr.DDS.step/", "api/sdr.FIR/", "api/sdr.FIR.__init__/", "api/sdr.FIR.delay/", "api/sdr.FIR.filter/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.frequency_response_log/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.reset/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.resample/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__init__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.filter/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.filter/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.process/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.demodulate/", "api/sdr.PSK.modulate/", "api/sdr.PSK.offset/", "api/sdr.PSK.order/", "api/sdr.PSK.symbol_map/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.crest_factor/", "api/sdr.energy/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.hexdump/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.plot.constellation/", "api/sdr.plot.filter/", "api/sdr.plot.frequency_response/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.periodogram/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.raised_cosine/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.unpack/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})