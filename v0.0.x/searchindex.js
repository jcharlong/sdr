Search.setIndex({"titles": ["Conversions", "Data manipulation", "Detection", "Digital signal processing", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.Decimator", "sdr.Decimator.__call__", "sdr.Decimator.__init__", "sdr.Decimator.__repr__", "sdr.Decimator.__str__", "sdr.Decimator.delay", "sdr.Decimator.method", "sdr.Decimator.polyphase_taps", "sdr.Decimator.rate", "sdr.Decimator.reset", "sdr.Decimator.taps", "sdr.Differentiator", "sdr.Differentiator.__init__", "sdr.EnergyDetector", "sdr.EnergyDetector.p_d", "sdr.EnergyDetector.p_fa", "sdr.EnergyDetector.roc", "sdr.EnergyDetector.threshold", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__call__", "sdr.FIR.__init__", "sdr.FIR.__len__", "sdr.FIR.__repr__", "sdr.FIR.__str__", "sdr.FIR.delay", "sdr.FIR.flush", "sdr.FIR.frequency_response", "sdr.FIR.frequency_response_log", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.reset", "sdr.FIR.state", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__call__", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__call__", "sdr.IIR.__init__", "sdr.IIR.__repr__", "sdr.IIR.__str__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.state", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.Integrator", "sdr.Integrator.__init__", "sdr.Interpolator", "sdr.Interpolator.__call__", "sdr.Interpolator.__init__", "sdr.Interpolator.__repr__", "sdr.Interpolator.__str__", "sdr.Interpolator.delay", "sdr.Interpolator.method", "sdr.Interpolator.polyphase_taps", "sdr.Interpolator.rate", "sdr.Interpolator.reset", "sdr.Interpolator.taps", "sdr.LinearModulation", "sdr.LinearModulation.__init__", "sdr.LinearModulation.__repr__", "sdr.LinearModulation.__str__", "sdr.LinearModulation.ber", "sdr.LinearModulation.bps", "sdr.LinearModulation.decide_symbols", "sdr.LinearModulation.demodulate", "sdr.LinearModulation.map_symbols", "sdr.LinearModulation.modulate", "sdr.LinearModulation.order", "sdr.LinearModulation.phase_offset", "sdr.LinearModulation.pulse_shape", "sdr.LinearModulation.rx_filter", "sdr.LinearModulation.ser", "sdr.LinearModulation.sps", "sdr.LinearModulation.symbol_map", "sdr.LinearModulation.tx_filter", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__call__", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.MSK", "sdr.MSK.__init__", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__call__", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.reset", "sdr.NCO.step", "sdr.OQPSK", "sdr.OQPSK.__init__", "sdr.OQPSK.__repr__", "sdr.OQPSK.__str__", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.__repr__", "sdr.PSK.__str__", "sdr.PSK.ber", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.PiMPSK", "sdr.PiMPSK.__init__", "sdr.Q", "sdr.Qinv", "sdr.ReplicaCorrelator", "sdr.ReplicaCorrelator.p_d", "sdr.ReplicaCorrelator.p_fa", "sdr.ReplicaCorrelator.roc", "sdr.ReplicaCorrelator.threshold", "sdr.Resampler", "sdr.Resampler.__call__", "sdr.Resampler.__init__", "sdr.Resampler.__repr__", "sdr.Resampler.__str__", "sdr.Resampler.delay", "sdr.Resampler.down", "sdr.Resampler.method", "sdr.Resampler.polyphase_taps", "sdr.Resampler.rate", "sdr.Resampler.reset", "sdr.Resampler.taps", "sdr.Resampler.up", "sdr.albersheim", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.barker", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.db", "sdr.design_bandpass_fir", "sdr.design_lowpass_fir", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.downsample", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.evm", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.half_sine", "sdr.hexdump", "sdr.iq_imbalance", "sdr.linear", "sdr.mix", "sdr.multirate_taps", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.percent", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.eye", "sdr.plot.filter", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.magnitude_response", "sdr.plot.p_d", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.phase_tree", "sdr.plot.raster", "sdr.plot.roc", "sdr.plot.ser", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.polyphase_matrix", "sdr.ppb", "sdr.ppm", "sdr.raised_cosine", "sdr.rectangular", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.to_complex_bb", "sdr.to_real_pb", "sdr.unpack", "sdr.upsample", "sdr.wavelength", "sdr.zadoff_chu", "Sequences", "Simulation", "Synchronization", "Documentation", "Formatting", "Installation", "Unit Tests", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271], "db": [0, 4, 5, 9, 20, 22, 40, 42, 44, 46, 47, 48, 50, 111, 121, 134, 144, 148, 152, 154, 156, 161, 163, 178, 179, 180, 181, 189, 190, 191, 196, 197, 198, 199, 200, 201, 203, 204, 208, 209, 211, 213, 214, 215, 216, 218, 219, 225, 232, 244, 247, 248, 265, 267, 268, 270], "x": [0, 1, 3, 5, 6, 7, 8, 9, 26, 27, 37, 39, 44, 46, 51, 52, 68, 69, 75, 77, 94, 96, 97, 107, 114, 116, 125, 128, 134, 144, 148, 156, 158, 159, 160, 165, 166, 179, 180, 183, 186, 188, 189, 192, 193, 194, 195, 198, 201, 202, 208, 209, 210, 212, 213, 215, 216, 217, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 233, 235, 236, 240, 241, 244, 246, 251, 252, 256, 260, 265, 266, 267, 271], "arraylik": [0, 1, 2, 3, 4, 5, 6, 7, 8, 26, 27, 28, 37, 39, 40, 41, 42, 43, 44, 46, 51, 52, 53, 68, 72, 75, 76, 77, 78, 94, 96, 97, 98, 107, 108, 111, 113, 114, 115, 116, 121, 134, 135, 144, 145, 148, 149, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 178, 181, 183, 184, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 207, 209, 212, 214, 217, 221, 222, 223, 224, 225, 226, 227, 228, 231, 233, 234, 238, 239, 240, 241, 247, 248, 251, 253, 256], "ndarrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 26, 27, 33, 36, 37, 39, 40, 41, 42, 43, 44, 49, 51, 52, 58, 59, 60, 61, 64, 65, 67, 68, 69, 74, 75, 77, 81, 82, 83, 84, 86, 88, 90, 91, 93, 94, 96, 97, 103, 106, 107, 111, 113, 114, 115, 116, 119, 121, 123, 125, 128, 134, 136, 138, 143, 144, 148, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 229, 230, 232, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "float_": [0, 2, 3, 4, 5, 6, 7, 8, 39, 40, 41, 42, 43, 44, 49, 107, 111, 119, 121, 134, 138, 144, 148, 152, 154, 156, 158, 159, 160, 161, 162, 163, 164, 178, 181, 184, 187, 189, 190, 191, 196, 197, 198, 199, 200, 203, 204, 206, 209, 211, 214, 217, 218, 232, 240, 241, 242, 243, 245, 247, 248, 249, 250, 253], "convert": [0, 3, 107, 113, 115, 134, 144, 148, 156, 189, 196, 197, 199, 200, 207, 209, 217, 239, 240, 241, 247, 248, 249, 250], "linear": [0, 96, 98, 102, 107, 108, 134, 144, 148, 156, 165, 167, 172, 180, 189, 209, 226, 231, 233, 235, 269, 270], "unit": [0, 26, 37, 51, 65, 75, 91, 94, 96, 125, 135, 136, 145, 149, 157, 165, 180, 181, 189, 192, 193, 209, 234, 236, 260, 263, 264, 266, 269, 270], "percent": [0, 217, 270], "percentag": [0, 217], "ppm": [0, 241, 246, 256, 270], "part": [0, 236, 240, 241, 246, 266], "per": [0, 1, 27, 52, 97, 107, 108, 112, 114, 116, 122, 134, 135, 138, 144, 145, 148, 149, 156, 157, 180, 181, 196, 197, 199, 200, 202, 204, 206, 207, 212, 219, 220, 229, 240, 241, 242, 243, 245, 246, 247, 248, 251, 259, 265, 268, 270], "million": [0, 241, 246], "ppb": [0, 240, 270], "billion": [0, 240], "ebn0_to_esn0": [0, 121, 154, 196, 267, 270], "ebn0": [0, 7, 107, 111, 134, 144, 148, 152, 156, 181, 196, 197, 218, 267], "bp": [0, 107, 112, 134, 144, 148, 156, 196, 197, 199, 247, 267], "int": [0, 1, 3, 6, 7, 26, 28, 31, 34, 37, 44, 46, 47, 50, 51, 54, 57, 59, 60, 61, 62, 65, 68, 71, 75, 83, 84, 86, 87, 91, 94, 96, 98, 101, 104, 107, 108, 112, 117, 122, 134, 135, 136, 143, 144, 145, 148, 149, 156, 157, 165, 167, 170, 171, 177, 179, 180, 182, 183, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 204, 205, 206, 207, 211, 212, 213, 215, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 233, 234, 239, 242, 243, 245, 247, 248, 251, 252, 254, 255, 267], "ebn0_to_snr": [0, 134, 144, 148, 156, 197, 270], "esn0_to_ebn0": [0, 111, 152, 199, 270], "esn0": [0, 7, 107, 121, 134, 144, 148, 154, 156, 199, 200, 232, 267], "esn0_to_snr": [0, 200, 267, 270], "sp": [0, 6, 7, 107, 108, 114, 116, 122, 134, 135, 144, 145, 148, 149, 156, 157, 197, 200, 204, 206, 220, 229, 242, 243, 245, 247, 248, 249, 250, 265, 267, 268], "1": [0, 3, 6, 8, 9, 16, 19, 23, 25, 26, 28, 29, 30, 33, 36, 37, 39, 40, 42, 43, 44, 51, 54, 55, 56, 57, 59, 60, 75, 76, 79, 80, 83, 84, 94, 96, 97, 98, 99, 100, 103, 106, 107, 108, 113, 114, 115, 116, 123, 125, 129, 130, 134, 135, 136, 139, 144, 145, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 217, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 271], "snr_to_ebn0": [0, 111, 152, 181, 247, 270], "snr": [0, 2, 4, 7, 39, 40, 42, 44, 46, 47, 48, 49, 50, 134, 144, 148, 156, 178, 180, 181, 225, 247, 248, 249, 250, 256, 267, 270], "snr_to_esn0": [0, 121, 154, 248, 270], "pack": [1, 44, 46, 134, 144, 148, 156, 207, 212, 269, 270], "bpe": [1, 212, 251], "int_": [1, 6, 107, 113, 114, 134, 144, 148, 156, 183, 185, 186, 192, 193, 194, 205, 212, 251, 256], "binari": [1, 4, 6, 135, 145, 149, 155, 157, 182, 183, 184, 185, 186, 187, 194, 212, 235, 251, 256, 267, 269, 270], "arrai": [1, 33, 36, 44, 98, 103, 106, 108, 134, 135, 136, 144, 145, 148, 149, 155, 156, 157, 167, 173, 176, 179, 182, 183, 185, 186, 192, 193, 194, 198, 205, 212, 213, 215, 236, 239, 251, 264], "an": [1, 2, 3, 4, 26, 37, 39, 51, 61, 75, 76, 78, 86, 94, 95, 96, 97, 108, 135, 136, 145, 149, 152, 154, 157, 160, 165, 181, 212, 218, 223, 232, 251, 253, 260, 269, 270], "multipl": [1, 212, 251, 267, 270], "bit": [1, 5, 7, 44, 46, 49, 107, 111, 112, 134, 135, 144, 145, 148, 149, 152, 155, 156, 157, 181, 183, 184, 186, 187, 196, 197, 199, 207, 212, 218, 247, 251, 269, 270], "element": [1, 207, 212, 251], "unpack": [1, 44, 46, 207, 251, 267, 269, 270], "hexdump": [1, 44, 207, 269, 270], "byte": [1, 207], "width": [1, 207], "16": [1, 152, 154, 155, 169, 196, 197, 199, 207, 218, 232, 239, 242, 245, 247, 248, 265, 270], "str": [1, 26, 29, 30, 37, 51, 55, 56, 75, 79, 80, 94, 96, 99, 100, 107, 109, 110, 134, 144, 146, 147, 148, 150, 151, 156, 165, 168, 169, 207, 220, 226, 229, 230, 233], "return": [1, 6, 9, 17, 19, 22, 23, 26, 27, 29, 30, 37, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 65, 69, 75, 77, 79, 80, 83, 84, 86, 91, 94, 96, 97, 99, 100, 107, 109, 110, 111, 113, 114, 115, 116, 121, 128, 134, 138, 143, 144, 146, 147, 148, 150, 151, 152, 154, 156, 158, 159, 161, 162, 163, 164, 165, 168, 169, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 263, 264, 265, 267, 270], "specifi": [1, 44, 47, 48, 50, 180, 181, 194, 207, 258, 263, 264, 270], "class": [2, 3, 5, 6, 9, 26, 37, 39, 44, 46, 47, 48, 49, 50, 51, 68, 75, 94, 96, 107, 125, 134, 136, 144, 148, 156, 160, 165, 257, 263, 264, 267, 269, 270], "replicacorrel": [2, 160, 161, 162, 163, 164, 270], "implement": [2, 3, 6, 26, 37, 39, 51, 68, 75, 94, 96, 107, 125, 131, 134, 136, 144, 148, 156, 160, 165, 178, 257, 262], "clairvoy": [2, 160], "replica": [2, 160], "correl": [2, 160, 182, 254], "energydetector": [2, 39, 40, 41, 42, 43, 270], "energi": [2, 39, 111, 121, 152, 154, 160, 161, 162, 163, 164, 181, 196, 197, 198, 199, 200, 204, 206, 218, 232, 242, 243, 245, 247, 248, 269, 270], "albersheim": [2, 178, 270], "p_d": [2, 7, 39, 40, 42, 160, 161, 163, 178, 225, 231, 270], "p_fa": [2, 7, 39, 40, 41, 42, 43, 160, 161, 162, 163, 164, 178, 231], "estim": [2, 9, 107, 113, 114, 134, 144, 148, 156, 178, 226, 233, 266], "minimum": [2, 6, 134, 178, 270], "requir": [2, 27, 52, 97, 178, 258, 259, 260, 261, 270], "singl": [2, 42, 152, 154, 178], "sampl": [2, 3, 9, 16, 24, 26, 27, 31, 37, 40, 41, 42, 43, 51, 52, 57, 59, 60, 61, 65, 68, 72, 83, 84, 86, 91, 96, 97, 98, 101, 107, 108, 114, 116, 122, 125, 129, 132, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 148, 149, 156, 157, 165, 167, 170, 178, 180, 195, 197, 200, 202, 204, 206, 210, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 233, 234, 236, 242, 243, 245, 246, 247, 248, 249, 250, 252, 256, 262, 265, 266, 268, 269, 270], "given": [2, 39, 44, 46, 47, 48, 50, 68, 69, 160, 178, 201, 263, 264], "n_": [2, 40, 41, 42, 43, 178], "nc": [2, 40, 41, 42, 43, 178], "non": [2, 27, 40, 41, 42, 43, 52, 97, 178, 206, 243], "coher": [2, 40, 41, 42, 43, 178], "combin": [2, 178], "achiev": [2, 3, 178, 211, 239, 267, 268], "probabl": [2, 7, 39, 40, 41, 42, 43, 158, 159, 160, 161, 162, 163, 164, 178, 183, 184, 186, 187, 194, 225, 231, 256, 270], "fals": [2, 5, 26, 28, 29, 30, 37, 38, 39, 40, 41, 42, 43, 51, 53, 55, 56, 68, 70, 75, 76, 78, 79, 80, 94, 95, 96, 97, 98, 99, 100, 134, 144, 148, 152, 154, 156, 160, 161, 162, 163, 164, 165, 167, 168, 169, 178, 179, 183, 186, 194, 198, 210, 215, 216, 219, 226, 231, 233, 236, 244, 264, 268], "alarm": [2, 39, 40, 41, 42, 43, 160, 161, 162, 163, 164, 178, 231], "p_": [2, 7, 39, 40, 41, 42, 43, 152, 154, 160, 161, 162, 163, 164, 178, 179, 180, 189, 194, 201, 209, 213, 215, 218, 226, 231, 232], "fa": [2, 7, 39, 40, 41, 42, 43, 160, 161, 162, 163, 164, 178, 231], "thi": [2, 9, 26, 46, 47, 48, 50, 51, 75, 96, 98, 107, 108, 123, 134, 138, 144, 145, 148, 149, 155, 156, 157, 165, 167, 178, 180, 181, 183, 186, 194, 195, 201, 203, 211, 220, 224, 226, 230, 233, 236, 252, 258, 260, 261, 262, 264, 266, 267, 268], "function": [2, 7, 8, 9, 18, 37, 51, 75, 76, 94, 125, 158, 159, 178, 181, 195, 204, 218, 225, 226, 231, 232, 233, 252, 263, 264, 266, 268, 269, 270], "": [2, 3, 7, 9, 17, 19, 20, 21, 23, 24, 26, 37, 39, 46, 47, 48, 49, 50, 51, 59, 60, 65, 75, 83, 84, 91, 94, 96, 107, 108, 113, 114, 115, 116, 134, 144, 148, 156, 160, 162, 164, 165, 178, 180, 181, 197, 200, 201, 202, 208, 219, 220, 221, 222, 224, 226, 227, 228, 229, 230, 233, 234, 236, 237, 246, 247, 248, 249, 250, 261, 262, 265, 267, 269, 270], "equat": [2, 17, 19, 20, 21, 22, 23, 40, 41, 43, 75, 144, 148, 156, 161, 162, 164, 178, 203], "finit": [3, 51, 269, 270], "impuls": [3, 7, 26, 37, 51, 61, 75, 86, 94, 96, 165, 190, 191, 204, 221, 223, 236, 268, 269, 270], "respons": [3, 7, 26, 37, 51, 59, 60, 61, 65, 75, 83, 84, 86, 91, 94, 96, 165, 190, 191, 204, 221, 222, 223, 224, 228, 234, 268, 269, 270], "differenti": [3, 6, 37, 38, 134, 152, 154, 192, 193, 236, 269, 270], "design_lowpass_fir": [3, 191], "order": [3, 9, 26, 27, 30, 37, 44, 49, 51, 52, 56, 62, 68, 71, 75, 80, 87, 94, 96, 97, 98, 100, 107, 108, 117, 125, 129, 134, 144, 148, 149, 156, 157, 165, 167, 169, 180, 190, 191, 196, 197, 199, 201, 202, 204, 219, 220, 229, 230, 242, 245, 246, 247, 257, 264, 265, 266, 267, 270], "design": [3, 26, 28, 32, 96, 98, 102, 108, 145, 149, 157, 165, 167, 172, 190, 191, 211, 258, 269, 270], "lowpass": [3, 191], "h": [3, 7, 26, 37, 39, 51, 53, 55, 56, 59, 60, 61, 75, 83, 84, 86, 94, 96, 107, 108, 119, 120, 124, 125, 134, 144, 145, 148, 149, 156, 157, 160, 165, 190, 191, 204, 211, 220, 221, 223, 224, 228, 239, 265, 266, 268], "n": [3, 5, 6, 7, 8, 9, 26, 27, 37, 39, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 69, 75, 77, 78, 81, 83, 84, 86, 87, 91, 94, 96, 97, 107, 108, 114, 116, 119, 120, 124, 125, 128, 134, 136, 138, 143, 144, 145, 148, 149, 156, 157, 158, 159, 160, 162, 164, 165, 166, 179, 180, 181, 182, 185, 188, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 208, 210, 211, 213, 215, 216, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 233, 234, 236, 244, 246, 247, 248, 249, 250, 252, 254, 255, 256, 266, 268, 269], "us": [3, 7, 26, 28, 32, 35, 37, 38, 51, 53, 58, 63, 68, 70, 75, 76, 78, 89, 94, 95, 96, 97, 98, 102, 105, 107, 108, 113, 114, 125, 131, 134, 144, 145, 148, 149, 156, 157, 165, 167, 172, 175, 181, 184, 187, 190, 191, 201, 207, 211, 212, 219, 220, 221, 223, 225, 226, 233, 234, 251, 258, 259, 260, 261, 263, 264, 267, 268, 269, 271], "window": [3, 26, 96, 165, 190, 191, 226, 233], "method": [3, 7, 30, 32, 98, 100, 102, 167, 169, 172, 190, 191, 226, 233, 263, 264, 270], "design_bandpass_fir": [3, 190], "bandpass": [3, 190], "infinit": [3, 75, 269, 270], "integr": [3, 9, 14, 40, 41, 42, 43, 94, 95, 125, 127, 129, 178, 257, 261, 264, 269, 270], "interpol": [3, 26, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 124, 134, 144, 148, 156, 165, 167, 177, 211, 220, 239, 252, 265, 267, 269, 270], "polyphas": [3, 26, 27, 28, 33, 36, 96, 97, 98, 103, 106, 165, 166, 167, 173, 176, 195, 211, 239, 252, 269, 270], "decim": [3, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 107, 108, 113, 114, 115, 116, 120, 123, 134, 135, 144, 145, 148, 149, 155, 156, 157, 165, 167, 171, 195, 211, 239, 267, 269, 270], "ration": [3, 165, 167, 211, 239, 270], "multirate_tap": [3, 28, 98, 167, 211, 270], "up": [3, 165, 167, 177, 203, 211, 239, 259], "down": [3, 165, 167, 171, 211, 239], "comput": [3, 8, 26, 39, 40, 41, 42, 43, 107, 111, 121, 134, 144, 148, 152, 154, 156, 158, 159, 160, 161, 162, 163, 164, 179, 180, 198, 203, 211, 213, 215, 263, 264, 266, 268, 270], "p": [3, 4, 8, 136, 138, 158, 159, 165, 167, 173, 174, 176, 177, 183, 184, 186, 187, 194, 211, 239, 256], "q": [3, 8, 134, 144, 158, 159, 160, 161, 162, 164, 165, 167, 171, 174, 211, 239, 254, 270], "polyphase_matrix": [3, 239, 270], "tap": [3, 26, 28, 33, 36, 37, 51, 56, 67, 68, 74, 75, 81, 82, 94, 96, 98, 103, 106, 165, 167, 173, 176, 239, 263, 264], "h_i": [3, 26, 28, 33, 36, 37, 51, 53, 67, 96, 98, 103, 106, 165, 167, 173, 176, 239, 263], "matrix": [3, 194, 239, 256], "h_": [3, 9, 26, 33, 36, 96, 103, 106, 165, 173, 176, 239, 266], "i": [3, 9, 16, 25, 26, 27, 28, 33, 36, 37, 39, 41, 42, 43, 44, 49, 51, 52, 53, 61, 65, 66, 67, 68, 73, 75, 78, 82, 86, 91, 92, 94, 96, 97, 98, 103, 106, 108, 125, 129, 130, 132, 134, 138, 142, 144, 145, 148, 149, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 173, 176, 178, 179, 180, 181, 183, 184, 186, 187, 189, 190, 191, 194, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 212, 213, 214, 215, 216, 219, 220, 221, 223, 224, 226, 230, 233, 234, 236, 239, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271], "j": [3, 26, 33, 36, 75, 78, 81, 94, 96, 103, 106, 134, 136, 144, 148, 156, 165, 173, 176, 180, 194, 208, 210, 239, 254, 263, 264, 266], "farrowresampl": [3, 68, 69, 70, 71, 72, 73, 74, 262, 270], "cubic": [3, 68], "farrow": [3, 68, 69, 70, 71, 72, 73, 74, 269, 270], "mix": [3, 210, 269, 270], "freq": [3, 4, 136, 138, 202, 203, 210, 214, 253, 256, 262, 266], "float": [3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 42, 44, 46, 47, 48, 50, 59, 60, 68, 69, 75, 76, 83, 84, 85, 94, 107, 108, 118, 125, 126, 127, 129, 130, 132, 134, 135, 136, 137, 139, 140, 141, 144, 145, 148, 149, 153, 156, 157, 163, 165, 174, 179, 180, 181, 183, 186, 188, 190, 191, 201, 202, 204, 208, 210, 211, 213, 215, 216, 219, 220, 221, 222, 224, 226, 227, 228, 229, 230, 233, 235, 236, 242, 244, 245, 246, 256], "0": [3, 6, 8, 16, 26, 27, 33, 36, 37, 39, 42, 44, 51, 52, 53, 55, 56, 59, 60, 67, 75, 76, 78, 79, 80, 81, 82, 83, 84, 94, 96, 97, 98, 103, 106, 107, 108, 113, 114, 115, 116, 123, 129, 134, 135, 136, 139, 144, 145, 148, 149, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 208, 209, 210, 212, 214, 217, 219, 220, 221, 222, 223, 224, 227, 228, 229, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 271], "time": [3, 5, 9, 16, 17, 19, 20, 21, 22, 23, 37, 51, 75, 94, 125, 129, 144, 148, 156, 179, 180, 188, 190, 191, 194, 195, 198, 200, 202, 204, 208, 210, 213, 215, 216, 220, 221, 226, 230, 233, 236, 242, 244, 245, 246, 248, 249, 250, 252, 256, 262, 263, 264, 268, 269, 270], "domain": [3, 5, 179, 180, 188, 190, 191, 195, 198, 202, 208, 210, 213, 215, 216, 221, 226, 230, 233, 236, 244, 246, 249, 250, 252, 256, 269, 270], "complex": [3, 5, 7, 39, 40, 41, 42, 43, 107, 108, 113, 114, 115, 116, 123, 134, 135, 136, 138, 143, 144, 145, 148, 149, 155, 156, 157, 160, 161, 162, 163, 164, 180, 181, 195, 201, 208, 210, 219, 220, 230, 235, 236, 249, 250, 252, 256, 262, 263, 264, 266, 267, 269, 270], "exponenti": [3, 195, 210, 249, 250, 252, 262, 263, 264], "real": [3, 40, 41, 43, 134, 144, 158, 159, 161, 162, 164, 180, 210, 220, 230, 236, 249, 250, 262, 263, 264, 266, 269, 270], "sinusoid": [3, 148, 180, 210, 249, 250, 264, 270], "to_complex_bb": [3, 249, 270], "x_r": [3, 249, 250], "complex_": [3, 7, 107, 114, 115, 116, 123, 134, 136, 138, 143, 144, 148, 155, 156, 219, 235, 249, 250, 254, 255], "passband": [3, 204, 206, 242, 243, 245, 249, 250, 265, 270], "center": [3, 190, 206, 236, 243, 249, 250, 270], "f_": [3, 9, 16, 24, 27, 59, 60, 83, 84, 97, 107, 108, 122, 134, 135, 144, 145, 148, 149, 156, 157, 190, 191, 195, 197, 200, 202, 204, 210, 220, 221, 222, 224, 226, 227, 228, 229, 230, 233, 236, 246, 247, 248, 249, 250, 252, 262, 263, 264, 266, 268], "r": [3, 26, 27, 28, 33, 34, 36, 68, 69, 96, 97, 98, 103, 104, 106, 181, 195, 196, 197, 199, 201, 204, 210, 242, 245, 247, 249, 250, 252, 258, 259, 260, 261, 264, 265, 266, 268], "4": [3, 7, 17, 19, 26, 33, 36, 37, 40, 42, 44, 60, 79, 80, 84, 94, 96, 97, 103, 106, 134, 135, 136, 144, 145, 148, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 168, 169, 173, 176, 178, 180, 181, 182, 184, 185, 187, 190, 191, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 232, 234, 235, 236, 237, 238, 239, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 260, 262, 264, 265, 267], "rate": [3, 5, 7, 9, 16, 24, 26, 27, 28, 30, 34, 44, 45, 46, 48, 49, 59, 60, 68, 69, 83, 84, 96, 97, 98, 100, 104, 107, 111, 121, 134, 144, 148, 152, 154, 156, 165, 166, 167, 169, 171, 174, 177, 195, 196, 197, 199, 202, 210, 211, 218, 220, 221, 222, 224, 226, 227, 228, 229, 230, 232, 233, 236, 239, 246, 247, 249, 250, 252, 256, 269, 270], "baseband": [3, 7, 9, 134, 144, 148, 156, 210, 220, 229, 249, 250, 265, 266, 270], "x_c": [3, 249, 250], "c": [3, 9, 17, 19, 20, 21, 22, 23, 46, 47, 48, 49, 50, 107, 108, 123, 125, 134, 144, 148, 155, 156, 181, 184, 187, 203, 214, 235, 249, 250, 253, 266], "2": [3, 6, 7, 9, 17, 19, 22, 26, 29, 30, 33, 36, 37, 39, 40, 41, 42, 43, 44, 51, 55, 56, 57, 59, 60, 79, 80, 83, 84, 94, 96, 97, 99, 100, 103, 106, 107, 108, 117, 134, 136, 144, 145, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 258, 261, 262, 263, 264, 265, 266, 267, 268], "to_real_pb": [3, 250, 265, 270], "2f_": [3, 250], "upsampl": [3, 96, 165, 252, 270], "factor": [3, 5, 9, 16, 25, 108, 125, 129, 130, 145, 149, 157, 188, 195, 252, 266], "downsampl": [3, 195, 270], "bsc_capac": [4, 187, 270], "calcul": [4, 5, 181, 184, 187, 201, 203, 214, 253, 270], "symmetr": [4, 186, 187, 194, 249, 250, 256, 269], "bsc": [4, 186, 187, 194, 256, 269, 270], "bec_capac": [4, 184, 270], "erasur": [4, 183, 184, 194, 256, 269], "bec": [4, 183, 184, 194, 256, 269, 270], "awgn_capac": [4, 181, 270], "addit": [4, 180, 181, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 252, 256, 269], "white": [4, 180, 181, 256, 269], "gaussian": [4, 6, 37, 94, 180, 181, 204, 256, 269, 270], "nois": [4, 9, 10, 11, 16, 22, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 111, 121, 125, 129, 132, 134, 144, 148, 152, 154, 156, 160, 161, 162, 163, 164, 180, 181, 196, 197, 199, 200, 218, 232, 247, 248, 256, 266, 269], "awgn": [4, 134, 144, 148, 152, 154, 156, 180, 181, 201, 218, 219, 232, 249, 250, 256, 267, 269, 270], "fspl": [4, 203], "distanc": [4, 203], "free": [4, 134, 144, 148, 156, 203, 269], "space": [4, 60, 84, 203, 269], "wavelength": [4, 253, 270], "lambda": [4, 203, 253], "electromagnet": [4, 253], "wave": [4, 134, 253], "frequenc": [4, 9, 17, 19, 21, 26, 37, 51, 59, 60, 75, 83, 84, 94, 96, 125, 134, 136, 138, 165, 190, 191, 195, 202, 203, 210, 214, 221, 222, 224, 226, 227, 228, 233, 249, 250, 252, 253, 256, 268, 269, 270], "f": [4, 17, 19, 26, 42, 59, 60, 83, 84, 96, 136, 138, 165, 178, 180, 202, 203, 204, 210, 214, 246, 253, 254, 259, 262, 263, 264, 265, 266, 267, 268], "parabolic_antenna": [4, 214, 270], "tupl": [4, 26, 37, 39, 42, 44, 46, 49, 51, 59, 60, 75, 83, 84, 94, 96, 107, 114, 134, 144, 148, 156, 160, 163, 165, 179, 198, 213, 214, 215, 219, 221, 222, 223, 224, 227, 228, 234, 235, 238], "gain": [4, 9, 12, 13, 14, 15, 16, 75, 76, 85, 94, 125, 126, 127, 129, 136, 137, 139, 178, 203, 204, 206, 214, 242, 243, 245, 266, 269], "g": [4, 49, 214, 260], "beamwidth": [4, 214], "theta": [4, 136, 139, 141, 142, 214], "parabol": [4, 214], "reflector": [4, 214], "signal": [5, 7, 9, 17, 19, 22, 23, 26, 27, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 58, 68, 69, 75, 77, 94, 96, 97, 107, 108, 119, 125, 128, 134, 136, 138, 143, 144, 145, 148, 149, 156, 157, 160, 161, 162, 163, 164, 165, 166, 179, 180, 181, 188, 189, 190, 191, 195, 196, 197, 198, 199, 200, 202, 203, 204, 208, 209, 210, 211, 213, 214, 215, 216, 220, 221, 222, 224, 226, 227, 228, 229, 230, 233, 236, 239, 244, 246, 247, 248, 249, 250, 252, 253, 263, 264, 266, 268, 269, 270], "peak_pow": [5, 213, 215, 270], "peak": [5, 134, 144, 156, 188, 201, 213, 215, 216], "average_pow": [5, 179, 213, 270], "averag": [5, 44, 134, 144, 156, 179, 180, 181, 201, 213, 226], "papr": [5, 134, 144, 156, 213, 265, 270], "ratio": [5, 22, 40, 42, 44, 46, 47, 48, 49, 50, 111, 121, 134, 144, 152, 154, 156, 161, 163, 180, 181, 196, 197, 199, 200, 213, 217, 218, 232, 240, 241, 247, 248], "peak_voltag": [5, 188, 216, 270], "bool": [5, 26, 28, 37, 38, 40, 41, 42, 43, 51, 53, 66, 68, 70, 73, 75, 76, 78, 92, 94, 95, 96, 98, 134, 144, 148, 152, 154, 156, 161, 162, 163, 164, 165, 167, 179, 198, 210, 215, 216, 219, 228, 230, 235, 236, 244], "rms_voltag": [5, 188, 244, 270], "root": [5, 6, 108, 145, 149, 157, 201, 220, 236, 244, 245, 254, 255, 263, 269], "mean": [5, 201, 226, 233, 244, 268], "squar": [5, 6, 108, 145, 149, 157, 201, 203, 214, 236, 244, 245, 263], "rm": [5, 188, 201, 244], "crest_factor": [5, 188, 213, 270], "crest": [5, 188], "errorr": [5, 44, 45, 46, 47, 48, 49, 50, 267, 270], "A": [5, 9, 17, 19, 20, 21, 22, 23, 25, 27, 37, 44, 51, 52, 94, 97, 108, 125, 145, 149, 157, 178, 185, 190, 191, 205, 207, 208, 214, 242, 245, 257, 259, 266], "error": [5, 7, 9, 15, 16, 22, 44, 45, 46, 48, 49, 50, 107, 111, 121, 125, 129, 134, 144, 148, 152, 154, 156, 178, 187, 201, 218, 232, 266, 269, 270], "ber": [5, 7, 44, 107, 111, 134, 144, 148, 152, 156, 218, 267, 269, 270], "symbol": [5, 7, 44, 46, 49, 96, 107, 108, 112, 113, 114, 115, 116, 121, 122, 123, 134, 135, 144, 145, 148, 149, 152, 154, 155, 156, 157, 180, 196, 197, 199, 200, 201, 202, 204, 206, 219, 220, 229, 232, 235, 242, 243, 245, 247, 248, 265, 268, 269, 270], "ser": [5, 7, 44, 107, 121, 134, 144, 148, 154, 156, 232, 267, 269, 270], "evm": [5, 201, 269, 270], "x_hat": [5, 7, 44, 46, 107, 114, 134, 144, 148, 156, 201, 219, 267], "ref": [5, 178, 190, 191, 201, 204, 211], "vector": [5, 44, 72, 190, 191, 201, 226, 233, 269, 270], "magnitud": [5, 7, 182, 201, 221, 224, 254, 269, 270], "hat": [5, 7, 46, 107, 113, 114, 134, 144, 148, 156, 201, 219, 235], "k": [5, 6, 7, 46, 107, 108, 112, 113, 114, 115, 116, 117, 134, 144, 148, 149, 156, 157, 192, 193, 196, 197, 199, 201, 219, 235, 247, 265, 268], "linearmodul": [6, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 148, 235, 270], "amplitud": [6, 107, 108, 208, 256, 262, 266], "arbitrari": [6, 68, 69, 70, 71, 72, 73, 74, 107, 269, 270], "psk": [6, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 180, 201, 202, 208, 218, 219, 220, 232, 235, 246, 265, 269, 270], "shift": [6, 134, 144, 148, 152, 153, 154, 155, 156, 254, 263, 264, 269, 270], "kei": [6, 134, 144, 148, 152, 153, 154, 155, 156, 269, 270], "demodul": [6, 107, 114, 134, 144, 148, 156, 267, 270], "pimpsk": [6, 156, 157, 270], "pi": [6, 26, 79, 80, 96, 97, 136, 144, 148, 156, 157, 165, 180, 195, 203, 204, 208, 210, 214, 221, 222, 223, 224, 227, 228, 234, 236, 238, 249, 250, 252, 254, 262, 263, 264, 266, 269, 270], "m": [6, 75, 78, 82, 94, 107, 108, 112, 113, 114, 115, 116, 117, 123, 134, 144, 148, 149, 155, 156, 157, 194, 196, 197, 199, 203, 235, 247, 258, 259, 260, 261, 269, 270], "oqpsk": [6, 134, 144, 145, 146, 147, 270], "offset": [6, 17, 19, 26, 37, 96, 97, 107, 108, 118, 134, 135, 136, 138, 139, 141, 144, 145, 148, 149, 153, 156, 157, 165, 202, 210, 236, 246, 256, 266, 269, 270], "quadratur": [6, 134, 144, 208], "msk": [6, 134, 135, 229, 270], "rectangular": [6, 108, 145, 149, 157, 243, 265, 268, 269, 270], "span": [6, 7, 108, 145, 149, 157, 204, 206, 220, 229, 242, 243, 245, 265, 268], "half_sin": [6, 135, 206, 270], "half": [6, 134, 144, 206, 211, 214, 269, 270], "sine": [6, 134, 206, 269, 270], "time_bandwidth": [6, 204], "raised_cosin": [6, 108, 145, 149, 157, 220, 242, 268, 270], "alpha": [6, 108, 145, 149, 157, 204, 237, 242, 245, 265, 268], "rais": [6, 37, 94, 108, 145, 149, 157, 220, 236, 242, 245, 263, 269], "cosin": [6, 37, 94, 108, 145, 149, 157, 220, 236, 242, 245, 263, 269], "rc": [6, 108, 145, 149, 157, 242], "root_raised_cosin": [6, 37, 55, 56, 94, 108, 145, 149, 157, 220, 221, 222, 223, 224, 227, 228, 234, 236, 238, 245, 263, 265, 267, 268, 270], "srrc": [6, 108, 144, 145, 148, 149, 156, 157, 220, 236, 245, 265], "binary_cod": [6, 185, 270], "gener": [6, 134, 144, 148, 156, 180, 183, 185, 186, 194, 205, 231, 258, 267, 270], "code": [6, 26, 29, 37, 51, 55, 75, 79, 94, 96, 99, 107, 109, 134, 135, 144, 145, 146, 148, 149, 150, 155, 156, 157, 165, 168, 182, 185, 196, 197, 199, 205, 219, 235, 247, 255, 260, 267, 270], "length": [6, 7, 26, 27, 37, 42, 51, 52, 54, 61, 65, 77, 96, 97, 98, 108, 114, 116, 135, 145, 149, 157, 165, 167, 182, 185, 190, 191, 204, 205, 206, 211, 221, 223, 226, 230, 233, 234, 242, 243, 245, 249, 254, 255, 259, 262, 265, 268], "gray_cod": [6, 205, 270], "grai": [6, 134, 135, 144, 145, 148, 149, 155, 156, 157, 205, 219, 235, 267, 269], "diff_encod": [6, 134, 144, 148, 152, 154, 156, 192, 193, 270], "y_prev": [6, 192, 193], "input": [6, 9, 17, 19, 22, 23, 26, 27, 28, 31, 37, 38, 51, 52, 53, 61, 64, 65, 68, 69, 70, 72, 75, 76, 77, 78, 86, 91, 94, 95, 96, 97, 98, 101, 125, 128, 136, 138, 144, 148, 152, 154, 156, 158, 165, 166, 167, 170, 180, 181, 183, 184, 186, 187, 189, 192, 193, 194, 195, 209, 212, 217, 223, 234, 240, 241, 251, 252, 256, 263, 264, 266], "data": [6, 192, 193, 207, 212, 251, 269], "diff_decod": [6, 192, 193, 270], "y": [6, 26, 27, 37, 51, 52, 58, 69, 75, 77, 94, 96, 97, 125, 128, 136, 138, 143, 165, 180, 183, 186, 192, 193, 194, 195, 202, 208, 210, 219, 224, 226, 233, 235, 236, 246, 252, 266, 267], "decod": [6, 192], "use_styl": [7, 237], "appli": [7, 26, 96, 108, 165, 202, 208, 219, 220, 226, 233, 235, 236, 237, 246, 256], "default": [7, 61, 65, 135, 145, 149, 155, 157, 179, 198, 213, 215, 219, 224, 226, 230, 233, 235, 237, 267], "matplotlib": [7, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 262, 263, 264, 265, 266, 267, 268, 269], "rcparam": [7, 237], "time_domain": [7, 26, 37, 94, 96, 97, 134, 136, 144, 148, 156, 165, 180, 195, 210, 236, 249, 250, 252, 265, 267, 268, 270], "raster": [7, 220, 229, 230, 269, 270], "none": [7, 26, 37, 42, 51, 61, 65, 68, 72, 96, 108, 125, 133, 138, 145, 149, 157, 163, 165, 179, 180, 181, 183, 186, 190, 191, 194, 198, 212, 213, 215, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 233, 234, 235, 236, 251, 256, 262, 265, 267], "periodogram": [7, 195, 226, 249, 250, 252, 265, 269, 270], "power": [7, 134, 144, 148, 156, 179, 180, 181, 189, 201, 204, 206, 209, 213, 214, 215, 226, 242, 243, 245, 268, 269], "densiti": [7, 22, 226, 265, 268], "xx": [7, 226], "welch": [7, 226, 233], "spectrogram": [7, 233, 269, 270], "constel": [7, 134, 144, 148, 153, 156, 180, 201, 202, 208, 219, 246, 254, 269, 270], "symbol_map": [7, 107, 108, 123, 134, 144, 148, 153, 155, 156, 201, 235, 236, 267, 270], "map": [7, 107, 108, 115, 123, 134, 144, 148, 155, 156, 201, 235, 269, 270], "ey": [7, 134, 144, 148, 156, 220, 269, 270], "diagram": [7, 9, 26, 37, 94, 96, 125, 136, 165, 192, 193, 220, 269, 270], "phase_tre": [7, 134, 229, 270], "phase": [7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 107, 108, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 152, 153, 154, 155, 156, 157, 178, 202, 208, 210, 227, 228, 229, 256, 269, 270], "tree": [7, 229, 270], "continu": [7, 134, 229, 262, 270], "cpm": [7, 229, 270], "kwarg": [7, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238], "e_b": [7, 46, 47, 48, 49, 50, 107, 111, 134, 144, 148, 152, 156, 181, 196, 197, 199, 218, 247, 269], "n_0": [7, 22, 46, 47, 48, 49, 50, 107, 111, 121, 134, 144, 148, 152, 154, 156, 180, 181, 196, 197, 199, 200, 201, 218, 219, 232, 247, 248, 267, 269], "e_": [7, 46, 47, 48, 49, 50, 107, 121, 134, 144, 148, 154, 156, 180, 181, 196, 199, 200, 201, 219, 232, 248, 267, 269], "roc": [7, 39, 42, 160, 163, 231, 270], "receiv": [7, 39, 40, 42, 44, 46, 107, 113, 114, 120, 134, 144, 148, 152, 154, 156, 160, 161, 162, 163, 164, 201, 203, 220, 225, 231, 270], "oper": [7, 39, 42, 160, 163, 231, 270], "characterist": [7, 39, 42, 160, 163, 231, 270], "curv": [7, 39, 42, 152, 154, 160, 163, 218, 231, 232, 270], "enr": [7, 160, 161, 163, 225], "impulse_respons": [7, 26, 37, 51, 61, 75, 86, 94, 96, 165, 190, 191, 204, 206, 211, 223, 242, 243, 245, 263, 264, 268, 270], "step_respons": [7, 26, 37, 51, 65, 75, 91, 94, 96, 165, 234, 263, 264, 266, 270], "step": [7, 26, 37, 51, 65, 75, 91, 94, 96, 136, 138, 143, 165, 221, 234, 269], "zeros_pol": [7, 238, 264, 270], "zero": [7, 26, 27, 37, 51, 58, 72, 75, 76, 79, 80, 93, 94, 96, 97, 98, 125, 138, 165, 167, 206, 212, 221, 222, 223, 224, 227, 228, 234, 236, 238, 243, 249, 263, 265, 266, 268, 269, 270], "pole": [7, 75, 76, 79, 80, 88, 94, 221, 222, 223, 224, 227, 228, 234, 238, 263, 269], "magnitude_respons": [7, 37, 59, 60, 83, 84, 94, 190, 191, 206, 211, 224, 242, 243, 245, 263, 264, 266, 268, 270], "omega": [7, 26, 37, 51, 59, 60, 75, 83, 84, 94, 96, 136, 139, 140, 142, 165, 221, 222, 224, 227, 228, 266], "phase_respons": [7, 59, 60, 83, 84, 228, 270], "angl": [7, 228, 266], "phase_delai": [7, 227, 270], "delai": [7, 26, 27, 30, 31, 37, 51, 52, 56, 57, 68, 96, 97, 100, 101, 125, 136, 165, 169, 170, 192, 193, 206, 222, 227, 243, 266, 269], "tau_": [7, 227], "phi": [7, 107, 108, 118, 134, 135, 144, 145, 148, 149, 153, 156, 157, 202, 208, 210, 227], "group_delai": [7, 222, 263, 264, 270], "group": [7, 222, 269], "tau_g": [7, 222], "iir": [7, 9, 18, 60, 61, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 125, 131, 221, 222, 223, 224, 227, 228, 234, 238, 263, 266, 269, 270], "complementari": [8, 158, 159], "cumul": [8, 158, 159], "distribut": [8, 158, 159], "standard": [8, 158, 159], "normal": [8, 9, 11, 16, 125, 129, 132, 158, 159, 190, 191, 201, 204, 206, 221, 222, 224, 226, 227, 228, 233, 242, 243, 245, 266, 268], "mathcal": [8, 39, 158, 159, 160, 161, 162, 163, 164, 180, 194], "qinv": [8, 158, 159, 270], "invers": [8, 159], "closedlooppl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 257, 266, 270], "defin": [9, 51, 75, 180, 194, 204, 231, 254, 257, 264, 269], "perform": [9, 27, 52, 97, 152, 154, 195, 252, 254, 257, 263, 264, 267, 269, 270], "close": [9, 16, 18, 257, 269, 270], "loop": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 257, 269, 270], "pll": [9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 257, 269, 270], "meant": 9, "analysi": [9, 16, 259, 266, 269, 270], "onli": [9, 27, 35, 52, 58, 63, 68, 72, 89, 97, 105, 108, 135, 145, 149, 155, 157, 175, 180, 203, 206, 230, 243, 261, 266, 267], "block": [9, 26, 37, 94, 96, 125, 136, 165, 192, 193], "bb": [9, 265, 266], "phase_err": 9, "ped": [9, 15, 16, 129, 266], "lf": [9, 266], "phase_est": 9, "lo": [9, 266], "nco": [9, 12, 16, 129, 136, 137, 138, 139, 140, 141, 142, 143, 257, 266, 269, 270], "local": [9, 258, 266], "oscil": [9, 136, 139, 257, 266, 269, 270], "detector": [9, 15, 16, 39, 129, 160, 266, 270], "filter": [9, 13, 14, 16, 18, 26, 27, 28, 31, 32, 33, 35, 36, 37, 38, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 105, 106, 107, 114, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 144, 148, 156, 165, 166, 167, 170, 172, 173, 175, 176, 190, 191, 195, 204, 206, 211, 220, 221, 222, 223, 224, 227, 228, 234, 236, 238, 239, 242, 243, 245, 252, 257, 268, 269, 270], "numer": [9, 136, 139, 257, 264, 266, 269, 270], "control": [9, 136, 139, 242, 245, 257, 266, 269, 270], "The": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 94, 96, 97, 98, 101, 102, 103, 104, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 258, 259, 260, 261, 263, 264, 266, 267, 268, 269, 271], "transfer": [9, 18, 37, 51, 75, 76, 94, 125, 204, 263, 264, 266], "2nd": [9, 125, 129, 257, 266, 270], "proport": [9, 13, 27, 97, 125, 126, 129, 203, 214, 257, 270], "plu": [9, 125, 129, 257, 270], "z": [9, 37, 51, 75, 94, 125, 136, 192, 193, 254, 263, 264, 266], "k_1": [9, 13, 125, 126, 266], "k_2": [9, 14, 125, 127, 266], "frac": [9, 17, 19, 22, 23, 37, 39, 40, 41, 43, 51, 57, 75, 94, 98, 125, 144, 148, 156, 160, 161, 162, 167, 178, 179, 180, 181, 188, 196, 197, 199, 200, 201, 203, 204, 208, 209, 210, 213, 214, 244, 247, 248, 253, 254, 266], "k_0": [9, 12, 16, 129, 136, 137, 139, 266], "k_p": [9, 15, 16, 129, 266], "refer": [9, 17, 19, 20, 21, 22, 23, 39, 40, 41, 43, 44, 68, 125, 152, 154, 160, 161, 162, 164, 178, 180, 188, 190, 191, 201, 202, 204, 211, 213, 239, 242, 245, 246, 254, 264, 268, 269], "michael": [9, 17, 19, 20, 21, 22, 23, 125, 242, 245], "rice": [9, 17, 19, 20, 21, 22, 23, 125, 242, 245], "digit": [9, 17, 19, 20, 21, 22, 23, 125, 152, 154, 242, 245, 266, 269, 270], "commun": [9, 17, 19, 20, 21, 22, 23, 125, 152, 154, 211, 239, 242, 245, 266, 269], "discret": [9, 17, 19, 20, 21, 22, 23, 37, 94, 125, 180, 194, 200, 242, 245, 248, 256, 262, 266, 269, 270], "approach": [9, 17, 19, 20, 21, 22, 23, 125, 181, 184, 187, 242, 245, 266], "appendix": [9, 125, 242, 245], "lock": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143], "exampl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 33, 35, 36, 37, 38, 40, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 103, 105, 106, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 152, 153, 154, 155, 156, 158, 159, 161, 163, 165, 168, 169, 173, 175, 176, 178, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 217, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 266], "see": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 35, 38, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 85, 87, 88, 89, 90, 92, 93, 95, 105, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 153, 155, 156, 165, 175, 190, 191, 195, 204, 206, 221, 222, 223, 224, 227, 228, 234, 238, 242, 243, 245, 269], "noise_bandwidth": [9, 16, 125, 129, 132], "damping_factor": [9, 16, 125, 129, 130], "creat": [9, 16, 26, 28, 37, 38, 44, 45, 51, 53, 68, 70, 75, 76, 78, 94, 95, 96, 97, 98, 107, 108, 125, 129, 134, 135, 136, 139, 144, 145, 148, 149, 153, 156, 157, 165, 167, 180, 182, 201, 202, 210, 236, 246, 249, 250, 254, 262, 266, 268], "object": [9, 16, 26, 29, 30, 37, 44, 45, 51, 55, 56, 75, 79, 80, 94, 96, 99, 100, 107, 108, 109, 110, 134, 135, 144, 145, 146, 147, 148, 149, 150, 151, 156, 157, 165, 168, 169, 221, 222, 223, 224, 227, 228, 234, 238, 266, 270], "phase_lock_tim": [9, 23], "frequency_lock_tim": [9, 17], "freq_offset": [9, 17, 19], "lock_tim": [9, 19, 266], "phase_error_vari": [9, 22], "cn0": [9, 22], "varianc": [9, 22, 39, 41, 43, 162, 164, 180], "steadi": [9, 22], "state": [9, 22, 26, 27, 35, 37, 51, 52, 58, 63, 64, 66, 68, 72, 73, 75, 89, 90, 92, 94, 96, 97, 105, 165, 175, 270], "sample_r": [9, 16, 24, 26, 59, 60, 83, 84, 96, 97, 134, 144, 148, 156, 165, 195, 202, 210, 220, 221, 222, 224, 226, 227, 228, 229, 230, 233, 236, 249, 250, 252, 262, 266, 268], "bnt": [9, 11, 266], "bandwidth": [9, 10, 11, 16, 20, 125, 129, 132, 181, 190, 204, 242, 245, 266, 268], "b_n": [9, 10, 11, 16, 17, 19, 22, 23, 125, 129, 132], "t": [9, 11, 16, 39, 125, 129, 132, 160, 204, 207, 258, 262], "bn": [9, 10], "hz": [9, 10, 16, 17, 19, 22, 59, 60, 83, 84, 125, 129, 132, 181, 189, 195, 202, 203, 204, 209, 210, 214, 249, 250, 253, 262], "zeta": [9, 16, 25, 125, 129, 130], "damp": [9, 16, 25, 125, 129, 130, 266], "k0": [9, 12, 16, 129, 136, 137, 139], "kp": [9, 15, 16, 129], "k1": [9, 13, 125, 126, 266], "k2": [9, 14, 125, 127, 266], "repres": [9, 18, 183, 184], "omega_n": [9, 21, 266], "natur": [9, 21], "radian": [9, 20, 21, 22, 136, 138, 139, 140, 141, 142, 156, 266], "omega_3db": [9, 20], "3": [9, 17, 19, 20, 23, 26, 33, 36, 37, 39, 40, 44, 55, 56, 79, 80, 94, 96, 97, 103, 106, 134, 136, 144, 148, 152, 153, 154, 155, 156, 160, 161, 165, 168, 169, 173, 176, 178, 180, 181, 182, 183, 185, 186, 189, 190, 191, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 219, 220, 221, 222, 223, 224, 227, 228, 234, 236, 238, 239, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 258, 259, 264, 266, 268, 269], "omega_": [9, 20], "textrm": [9, 20], "properti": [10, 11, 12, 13, 14, 15, 18, 20, 21, 24, 25, 31, 32, 33, 34, 36, 57, 62, 64, 66, 67, 71, 73, 74, 81, 82, 85, 87, 88, 90, 92, 93, 101, 102, 103, 104, 106, 112, 117, 118, 119, 120, 122, 123, 124, 126, 127, 130, 131, 132, 137, 140, 141, 153, 155, 170, 171, 172, 173, 174, 176, 177, 270], "paramet": [16, 17, 19, 22, 27, 28, 38, 40, 41, 42, 43, 46, 47, 48, 50, 52, 53, 59, 60, 61, 65, 69, 70, 72, 76, 77, 78, 83, 84, 86, 91, 95, 97, 98, 108, 111, 113, 114, 115, 116, 121, 128, 129, 135, 138, 139, 143, 145, 149, 152, 154, 157, 158, 159, 161, 162, 163, 164, 167, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254], "where": [16, 27, 52, 97, 108, 125, 129, 132, 149, 157, 160, 180, 181, 194, 196, 197, 199, 204, 247, 254, 263, 264, 269], "period": [16, 125, 129, 132, 134, 254], "second": [16, 17, 19, 23, 44, 125, 129, 132, 204], "critic": [16, 25, 125, 129, 130, 266], "underdamp": [16, 25, 125, 129, 130], "overdamp": [16, 25, 125, 129, 130], "ted": [16, 129], "t_": [17, 19, 23, 69, 204, 268], "fl": [17, 19], "delta": [17, 19, 26, 37, 51, 61, 75, 86, 94, 96, 165, 223, 263, 264], "take": [17, 19, 23, 258], "onto": [17, 19, 23], "39": 17, "pl": [19, 23], "38": 19, "34": 20, "33": 21, "sigma_": [22, 39, 40, 42], "theta_": 22, "carrier": [22, 148], "43": 22, "40": [23, 96, 165, 195], "less": [25, 178], "than": [25, 134, 135, 145, 149, 155, 157, 178, 206, 208, 219, 235, 243], "greater": [25, 242, 245], "fir": [26, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 96, 97, 98, 99, 100, 101, 103, 105, 106, 165, 166, 167, 168, 169, 170, 173, 175, 176, 190, 191, 211, 220, 221, 222, 223, 224, 227, 228, 234, 238, 239, 265, 269, 270], "note": [26, 33, 36, 37, 39, 40, 41, 43, 51, 75, 94, 96, 103, 106, 125, 134, 136, 144, 148, 156, 160, 161, 162, 164, 165, 173, 176, 178, 180, 181, 184, 187, 192, 193, 204, 208, 214, 220, 239, 254], "equival": [26, 96, 165, 180, 181, 190, 191, 200, 248, 260, 262], "first": [26, 31, 44, 96, 98, 101, 134, 142, 144, 165, 167, 170, 212, 236, 251, 259, 261], "prototyp": [26, 33, 36, 96, 103, 106, 165, 173, 176], "feedforward": [26, 28, 33, 36, 37, 51, 53, 67, 75, 78, 82, 94, 96, 98, 103, 106, 165, 167, 173, 176, 221, 222, 223, 224, 227, 228, 234, 238, 263, 264], "coeffici": [26, 28, 51, 53, 75, 78, 96, 98, 107, 120, 124, 134, 144, 148, 156, 165, 167, 221, 222, 223, 224, 227, 228, 234, 238, 263, 264], "discard": [26, 165], "between": [26, 28, 38, 53, 66, 70, 73, 76, 78, 92, 95, 96, 98, 165, 167, 203, 226, 230, 233, 266, 269], "each": [26, 27, 52, 96, 97, 165, 201, 207, 226, 230, 233], "instead": [26, 96, 165, 219], "decompos": [26, 96, 165], "ar": [26, 27, 28, 33, 36, 38, 39, 44, 46, 47, 48, 50, 52, 53, 60, 70, 76, 78, 84, 95, 96, 97, 98, 103, 106, 107, 108, 120, 124, 134, 135, 144, 145, 148, 149, 156, 157, 160, 165, 167, 173, 176, 181, 183, 184, 186, 187, 203, 206, 212, 219, 220, 221, 222, 224, 226, 227, 228, 229, 230, 233, 235, 236, 237, 239, 243, 249, 250, 258, 260, 262, 264, 266, 268, 269, 271], "commut": [26, 96, 165], "parallel": [26, 96, 165], "output": [26, 27, 31, 37, 51, 52, 61, 65, 75, 76, 78, 86, 91, 94, 95, 96, 97, 98, 101, 114, 125, 128, 136, 138, 142, 143, 165, 167, 170, 180, 181, 182, 183, 184, 186, 187, 193, 194, 201, 209, 212, 223, 234, 251, 255, 258, 262, 263, 264, 266], "sum": [26, 39, 51, 75, 160, 268], "prevent": [26, 96, 144, 156, 165], "need": [26, 96, 165, 258, 259, 261], "done": [26, 258], "case": [26, 96, 156, 160, 165], "3x": [26, 96], "6": [26, 33, 36, 37, 44, 55, 56, 79, 80, 94, 96, 97, 103, 106, 134, 136, 144, 148, 155, 156, 161, 162, 164, 165, 173, 176, 178, 185, 189, 194, 195, 196, 197, 201, 203, 205, 207, 209, 214, 219, 220, 221, 222, 223, 224, 227, 228, 234, 235, 236, 238, 239, 242, 245, 249, 250, 252, 254, 258, 259, 260, 261, 263, 264, 266, 267], "9": [26, 33, 36, 96, 97, 103, 106, 134, 144, 148, 156, 161, 165, 173, 176, 178, 185, 194, 201, 205, 207, 239, 242, 245, 258, 264, 265, 267, 268], "v": [26, 136, 189, 209, 258], "5": [26, 33, 36, 37, 39, 40, 41, 42, 43, 44, 55, 56, 94, 96, 97, 103, 106, 134, 136, 144, 148, 156, 161, 163, 165, 173, 176, 178, 180, 183, 185, 186, 187, 190, 191, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 207, 208, 214, 217, 220, 221, 222, 223, 224, 227, 228, 234, 236, 238, 239, 242, 245, 246, 247, 248, 249, 250, 252, 254, 258, 262, 263, 264, 265, 266, 267, 268], "7": [26, 29, 30, 33, 36, 96, 97, 99, 100, 103, 106, 134, 144, 148, 155, 156, 161, 165, 173, 176, 178, 185, 194, 201, 205, 207, 211, 236, 239, 254, 258, 264], "8": [26, 33, 36, 37, 40, 42, 79, 80, 94, 96, 97, 103, 106, 108, 134, 135, 136, 144, 145, 148, 149, 152, 153, 154, 155, 156, 157, 161, 163, 165, 173, 176, 178, 180, 181, 182, 184, 185, 187, 190, 191, 194, 195, 201, 203, 204, 205, 206, 207, 210, 211, 214, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 232, 234, 235, 236, 237, 238, 239, 242, 243, 245, 249, 250, 252, 254, 263, 264, 265, 266, 268], "summat": 26, "bottom": [26, 96, 165], "top": [26, 96, 165], "adder": [26, 125, 136, 192, 193, 266], "relat": [26, 33, 36, 96, 103, 106, 165, 173, 176, 181, 204], "In": [26, 27, 28, 29, 30, 33, 36, 37, 38, 40, 42, 44, 52, 53, 55, 56, 66, 70, 73, 76, 78, 79, 80, 92, 94, 95, 96, 97, 98, 99, 100, 103, 106, 134, 136, 144, 148, 152, 153, 154, 155, 156, 158, 159, 161, 163, 165, 167, 168, 169, 173, 176, 178, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 217, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 262, 267], "np": [26, 33, 36, 40, 42, 79, 80, 96, 97, 103, 106, 107, 119, 123, 134, 136, 144, 148, 152, 154, 155, 156, 161, 163, 165, 173, 176, 178, 180, 181, 182, 183, 184, 186, 187, 194, 195, 201, 202, 203, 208, 210, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 232, 234, 236, 238, 239, 246, 249, 250, 252, 254, 262, 263, 264, 265, 266, 267, 268], "co": [26, 96, 97, 165, 210], "64": [26, 207, 264], "arang": [26, 33, 36, 96, 97, 103, 106, 165, 173, 176, 180, 182, 195, 210, 239, 249, 250, 252, 254, 262, 266], "280": 26, "kaiser": [26, 28, 29, 30, 32, 96, 97, 98, 99, 100, 102, 165, 167, 168, 169, 172, 190, 191], "out": [26, 29, 33, 36, 44, 55, 79, 96, 97, 99, 103, 106, 134, 144, 148, 153, 155, 156, 158, 159, 165, 168, 173, 176, 182, 183, 185, 186, 189, 192, 193, 194, 196, 197, 199, 200, 201, 203, 205, 209, 212, 214, 217, 222, 237, 239, 240, 241, 247, 248, 251, 253], "plt": [26, 37, 40, 42, 94, 96, 97, 134, 136, 144, 148, 152, 153, 154, 155, 156, 161, 163, 165, 178, 180, 181, 182, 184, 187, 190, 191, 195, 201, 202, 203, 204, 206, 208, 210, 211, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 232, 234, 235, 236, 238, 242, 243, 245, 246, 249, 250, 252, 254, 262, 263, 264, 265, 266, 267, 268], "figur": [26, 37, 40, 42, 94, 96, 97, 134, 136, 144, 148, 152, 153, 154, 155, 156, 161, 163, 165, 178, 180, 181, 182, 184, 187, 190, 191, 195, 201, 202, 203, 204, 206, 208, 210, 211, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 232, 234, 235, 236, 237, 238, 242, 243, 245, 246, 249, 250, 252, 254, 262, 263, 264, 265, 266, 267, 268], "figsiz": [26, 37, 40, 42, 94, 96, 97, 134, 136, 144, 148, 152, 153, 154, 155, 156, 161, 163, 165, 178, 180, 181, 182, 184, 187, 190, 191, 195, 201, 202, 203, 204, 206, 208, 210, 211, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 232, 234, 235, 236, 237, 238, 242, 243, 245, 246, 249, 250, 252, 254, 262, 263, 264, 265, 266, 267, 268], "plot": [26, 37, 40, 42, 59, 60, 61, 65, 83, 84, 86, 91, 94, 96, 97, 134, 136, 144, 148, 152, 153, 154, 155, 156, 161, 163, 165, 180, 181, 182, 184, 187, 190, 191, 195, 201, 202, 203, 204, 206, 208, 210, 211, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 242, 243, 245, 246, 249, 250, 252, 254, 262, 263, 264, 266, 267, 268, 269, 270], "marker": [26, 96, 97, 136, 165, 219, 235, 262, 263, 264, 267], "label": [26, 37, 40, 42, 94, 96, 97, 135, 145, 149, 152, 154, 157, 161, 163, 165, 178, 180, 190, 191, 201, 202, 204, 208, 218, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 236, 242, 245, 246, 262, 265, 266, 267, 268], "o": [26, 96, 97, 165, 262], "titl": [26, 37, 94, 96, 134, 136, 144, 152, 154, 165, 178, 180, 181, 182, 184, 187, 195, 201, 202, 208, 210, 218, 232, 236, 246, 249, 250, 252, 254, 262, 265, 266, 267, 268], "tight_layout": [26, 37, 94, 96, 134, 136, 144, 152, 154, 165, 178, 180, 181, 182, 184, 187, 195, 201, 202, 203, 210, 218, 232, 236, 246, 249, 250, 252, 254, 265, 266, 267, 268], "preserv": [26, 28, 38, 53, 66, 70, 73, 76, 78, 92, 95, 96, 98, 165, 167, 220, 230], "call": [26, 27, 28, 38, 52, 53, 66, 70, 73, 76, 78, 92, 95, 96, 97, 98, 165, 167], "true": [26, 40, 41, 42, 43, 96, 97, 134, 144, 148, 152, 154, 156, 161, 162, 163, 164, 165, 178, 179, 181, 183, 184, 186, 187, 194, 198, 203, 210, 215, 216, 219, 228, 230, 235, 237, 244, 265, 267], "y1": [26, 96, 97, 165, 208], "70": [26, 207, 268], "y2": [26, 96, 97, 165, 208], "140": [26, 195], "y3": [26, 96, 97, 165], "210": 26, "y4": [26, 96, 165], "y5": [26, 96, 165], "flush": [26, 27, 37, 51, 52, 58, 96, 97, 165, 270], "y_1": [26, 96, 165, 208], "y_2": [26, 96, 165, 208], "y_3": [26, 96, 165], "y_4": [26, 96, 165], "y_5": [26, 96, 165], "__call__": [26, 27, 28, 37, 38, 51, 52, 53, 66, 68, 69, 70, 73, 75, 76, 77, 78, 92, 94, 95, 96, 97, 98, 125, 128, 136, 138, 165, 166, 167, 270], "full": [26, 27, 52, 96, 97, 165, 166, 182], "__len__": [26, 37, 51, 54, 96, 165], "__repr__": [26, 29, 37, 51, 55, 75, 79, 94, 96, 99, 107, 109, 134, 144, 146, 148, 150, 156, 165, 168], "style": [26, 29, 37, 51, 55, 75, 79, 94, 96, 99, 107, 109, 134, 144, 146, 148, 150, 156, 165, 168, 237], "__str__": [26, 30, 37, 51, 56, 75, 80, 94, 96, 100, 107, 110, 134, 144, 147, 148, 151, 156, 165, 169], "human": [26, 30, 37, 51, 56, 75, 80, 94, 96, 100, 107, 110, 134, 144, 147, 148, 151, 156, 165, 169], "readabl": [26, 30, 37, 51, 56, 75, 80, 94, 96, 100, 107, 110, 134, 144, 147, 148, 151, 156, 165, 169], "reset": [26, 35, 37, 51, 63, 68, 72, 75, 89, 94, 96, 105, 125, 133, 136, 142, 165, 175], "when": [26, 35, 37, 51, 58, 61, 63, 65, 75, 86, 89, 91, 94, 96, 105, 165, 175, 180, 181, 183, 184, 186, 187, 200, 221, 222, 223, 224, 227, 228, 234, 248, 254, 262, 263, 264], "pass": [26, 37, 51, 58, 96, 165, 180, 183, 186, 194, 201, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 256, 258, 260, 263, 264, 270], "through": [26, 37, 51, 58, 96, 144, 156, 165, 183, 186, 194, 256, 263, 264, 266], "indic": [26, 28, 31, 37, 38, 41, 42, 43, 51, 53, 66, 68, 70, 73, 75, 76, 78, 92, 94, 95, 96, 98, 101, 108, 135, 144, 145, 148, 149, 152, 154, 156, 157, 161, 162, 163, 164, 165, 167, 170, 179, 198, 204, 206, 208, 210, 215, 216, 220, 228, 229, 230, 236, 242, 243, 244, 245], "whether": [26, 28, 37, 38, 41, 42, 43, 51, 53, 66, 68, 70, 73, 75, 76, 78, 92, 94, 95, 96, 98, 152, 154, 161, 162, 163, 164, 165, 167, 179, 198, 210, 215, 216, 228, 230, 236, 244], "consist": [26, 37, 46, 47, 48, 49, 50, 51, 64, 96, 165], "previou": [26, 28, 37, 38, 51, 53, 64, 70, 72, 76, 78, 95, 96, 98, 165, 167, 192, 193], "u": [26, 37, 51, 65, 75, 91, 94, 96, 165, 178, 234, 254, 255, 263, 264], "frequency_respons": [26, 37, 51, 59, 75, 83, 94, 96, 165, 270], "frequency_response_log": [26, 37, 51, 60, 75, 84, 94, 96, 165], "logarithm": [26, 37, 51, 60, 75, 84, 94, 96, 165, 221, 222, 224, 226, 227, 228, 263, 264], "axi": [26, 37, 51, 60, 75, 84, 94, 96, 165, 179, 198, 213, 215, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 233, 235, 236, 262, 270], "custom": [26, 32, 96, 102, 108, 145, 149, 157, 165, 172, 190, 191, 270], "multir": [26, 27, 28, 32, 96, 97, 98, 102, 165, 167, 172, 211, 239, 270], "polyphase_tap": [26, 30, 33, 36, 96, 97, 100, 103, 106, 165, 169, 173, 176], "index": [26, 31, 68, 72, 96, 101, 165, 170, 220, 229, 230, 235, 258], "correspond": [26, 31, 44, 49, 96, 101, 165, 170, 230], "mode": [27, 28, 35, 38, 52, 53, 58, 63, 66, 68, 70, 72, 73, 76, 78, 89, 92, 95, 97, 98, 105, 166, 167, 175, 182, 254], "l": [27, 52, 77, 97], "stream": [27, 28, 29, 30, 35, 38, 52, 53, 55, 56, 58, 63, 66, 68, 70, 72, 73, 76, 78, 79, 80, 89, 92, 95, 97, 98, 99, 100, 105, 134, 144, 148, 156, 167, 168, 169, 175, 264], "convolut": [27, 52, 96, 97], "ha": [27, 52, 96, 97, 134, 144, 148, 180, 195, 203, 204, 214, 252, 254, 266, 267, 268], "align": [27, 52, 97, 98, 144, 167, 262], "howev": [27, 46, 47, 48, 50, 52, 97, 125, 184, 187, 262], "produc": [27, 52, 96, 97, 165, 204, 268], "final": [27, 52, 97], "dictat": [27, 52, 97], "argument": [27, 28, 52, 97, 98, 167, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 263, 264], "specif": [28, 49, 98, 167, 261, 268], "npt": [28, 98, 108, 135, 145, 149, 157, 167, 190, 191, 221, 222, 223, 224, 227, 228, 234, 238], "string": [29, 30, 55, 56, 79, 80, 99, 100, 108, 109, 110, 145, 146, 147, 149, 150, 151, 157, 168, 169, 207, 226, 233, 270], "represent": [29, 30, 55, 56, 79, 80, 99, 100, 109, 110, 146, 147, 150, 151, 168, 169, 235, 270], "print": [30, 56, 80, 100, 169, 207, 262, 263, 264, 266], "167": [30, 100], "24": [30, 100, 169], "shape": [30, 56, 80, 97, 100, 107, 108, 114, 116, 119, 120, 124, 134, 144, 145, 148, 149, 156, 157, 169, 204, 206, 220, 236, 242, 243, 245, 264, 269, 270], "12": [30, 96, 134, 144, 148, 156, 162, 164, 178, 185, 205, 211, 239, 263, 267, 270], "befor": [33, 36, 103, 106, 173, 176, 271], "decomposit": [33, 36, 103, 106, 173, 176, 270], "after": [33, 36, 103, 106, 173, 176], "10": [33, 36, 37, 40, 42, 44, 94, 96, 97, 103, 106, 108, 134, 144, 145, 148, 149, 152, 154, 156, 157, 161, 163, 165, 173, 176, 178, 179, 180, 185, 189, 190, 191, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 227, 228, 232, 234, 236, 238, 239, 242, 243, 244, 245, 246, 247, 248, 262, 263, 264, 265, 266, 267, 268], "puls": [37, 94, 107, 108, 114, 116, 119, 120, 124, 134, 144, 145, 148, 149, 156, 157, 204, 206, 220, 236, 242, 243, 245, 269, 270], "deriv": 37, "d": [37, 51, 57, 203, 214, 258, 260, 269], "lfloor": [37, 51, 57], "rfloor": [37, 51, 57], "null": [39, 160, 224, 226, 268], "altern": [39, 160, 264], "hypothes": [39, 160], "follow": [39, 44, 208, 219, 230, 233, 235, 237, 239, 266], "assum": [39, 160, 180, 194, 212, 251], "valu": [39, 107, 108, 111, 121, 134, 135, 144, 145, 148, 149, 152, 154, 156, 157, 158, 159, 182, 189, 192, 193, 204, 208, 209, 219, 235, 264, 270], "random": [39, 134, 144, 148, 156, 180, 183, 186, 194, 201, 202, 208, 219, 220, 229, 236, 246, 265, 267], "process": [39, 40, 41, 43, 160, 161, 162, 164, 211, 239, 264, 266, 269], "w": [39, 160, 180, 262, 263, 264, 265, 266, 267, 268], "sigma": [39, 40, 41, 42, 43, 160, 161, 162, 163, 164, 180, 181], "_0": [39, 160], "_1": [39, 160], "test": [39, 160, 260, 269], "statist": [39, 40, 41, 43, 160, 161, 162, 164], "limits_": [39, 51, 75, 160], "left": [39, 40, 41, 75, 144, 148, 156, 160, 161, 162, 164, 178, 179, 180, 181, 198, 201, 203, 204, 208, 210, 214, 215, 216, 244, 254], "right": [39, 40, 41, 75, 144, 148, 156, 160, 161, 162, 164, 178, 179, 180, 181, 198, 201, 203, 204, 208, 210, 214, 215, 216, 244, 254], "gamma": [39, 41, 43, 160, 162, 164, 178], "sim": [39, 160, 180, 259], "chi_": [39, 40, 41], "2n": [39, 40, 41], "text": [39, 156, 160, 178, 179, 180, 181, 184, 187, 188, 189, 201, 202, 203, 209, 211, 213, 215, 216, 244, 246], "under": [39, 160], "detect": [39, 40, 41, 42, 43, 160, 161, 162, 163, 164, 178, 225, 231, 270], "threshold": [39, 41, 43, 160, 162, 164], "q_": [39, 40, 41, 43], "chi_n": [39, 40, 41, 43], "steven": [39, 40, 41, 43, 160, 161, 162, 164], "kai": [39, 40, 41, 43, 160, 161, 162, 164], "fundament": [39, 40, 41, 43, 160, 161, 162, 164], "theori": [39, 40, 41, 43, 160, 161, 162, 164], "section": [39, 46, 47, 48, 49, 50, 160, 264, 266], "static": [39, 40, 41, 42, 43, 160, 161, 162, 163, 164, 259], "n_nc": [39, 40, 41, 42, 43, 178], "number": [40, 41, 42, 43, 44, 46, 47, 50, 59, 60, 61, 65, 83, 84, 86, 91, 107, 108, 112, 122, 134, 135, 143, 144, 145, 148, 149, 156, 157, 178, 180, 183, 186, 194, 196, 197, 199, 204, 206, 207, 212, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 233, 234, 242, 243, 245, 247, 251], "For": [40, 41, 43, 161, 162, 164, 180, 195, 203, 252, 258, 263], "linspac": [40, 152, 154, 161, 181, 184, 187, 203, 218, 232, 264, 265, 266, 267], "20": [40, 42, 96, 97, 134, 136, 144, 148, 156, 161, 165, 178, 181, 183, 186, 189, 194, 201, 202, 207, 208, 209, 216, 239, 244, 252, 265, 267, 268, 270], "101": [40, 42, 161, 163, 190, 191], "25": [40, 183, 186, 194, 217, 220, 240, 241, 262, 265, 266, 268], "1e": [40, 161, 202, 267], "sigma2": [41, 43, 162, 164], "If": [42, 72, 108, 138, 145, 149, 157, 163, 165, 179, 180, 181, 194, 198, 212, 215, 216, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 233, 234, 235, 236, 244, 249, 251, 269], "logspac": [42, 163, 178], "theoret": [42, 152, 154, 218, 232, 267, 270], "variou": [42, 259, 268], "100": [42, 75, 86, 91, 94, 136, 152, 154, 178, 180, 181, 184, 187, 189, 190, 191, 201, 209, 210, 218, 220, 221, 223, 229, 232, 234, 236, 246, 249, 250, 252, 262, 266], "1_000": [42, 180, 202, 203, 208, 246, 265], "000": [42, 202], "5_000": 42, "measur": [44, 46, 179, 180, 188, 189, 198, 201, 209, 213, 215, 216, 244, 266, 269, 270], "new": [44, 45, 68, 70, 107, 108, 134, 135, 144, 145, 148, 149, 156, 157, 246], "accumul": [44, 136, 139, 140, 142, 266], "from": [44, 59, 60, 75, 76, 83, 84, 94, 98, 107, 123, 134, 144, 148, 155, 156, 167, 189, 196, 197, 199, 200, 209, 217, 226, 233, 240, 241, 247, 248, 258, 263, 264, 266, 269], "contain": [44, 180, 207], "add": [44, 46, 49, 134, 144, 148, 156, 180, 202, 206, 230, 243, 246, 256, 267, 271], "total": [44, 204, 206, 242, 243, 245, 268], "count": [44, 47, 201], "error_r": [44, 48, 49, 267], "everi": [44, 262], "can": [44, 46, 47, 48, 50, 125, 134, 180, 201, 204, 211, 212, 220, 226, 233, 260, 263, 264, 267, 269, 271], "obtain": 44, "tabul": [44, 45], "all": [44, 49, 138, 201, 220, 229, 230, 259, 261, 269], "ascend": [44, 49], "other": [46, 47, 48, 50, 262, 271], "quantiti": [46, 47, 48, 49, 50], "user": [46, 47, 48, 50, 263, 264], "caution": [46, 47, 48, 50], "instanc": [46, 47, 48, 50, 134], "transmit": [46, 107, 124, 134, 144, 148, 156, 201, 220], "e": [49, 136, 160, 161, 162, 163, 164, 179, 183, 184, 198, 254, 259, 260, 263, 264, 266, 267], "whatev": 49, "wa": [49, 181], "provid": [49, 107, 111, 121, 134, 144, 148, 152, 154, 156, 230, 259, 269], "wrapper": [51, 75], "scipi": [51, 75, 190, 191, 226, 233, 268, 269], "convolv": [51, 236], "It": [51, 75, 96, 108, 125, 145, 149, 157, 180, 220], "support": [51, 75, 270], "one": [51, 75, 135, 144, 145, 149, 155, 157, 204, 207, 220, 221, 222, 224, 226, 227, 228, 233, 249, 263, 264, 265, 268], "its": [51, 75, 76, 94, 180, 263, 264, 268], "sum_": [51, 75, 162, 164, 179, 180, 181, 198, 201, 244], "valid": [52, 203, 220, 229, 230, 254], "same": [52, 97, 236, 263], "0013559842808217807": [55, 56], "005995136544658217": [55, 56], "008698817681933214": [55, 56], "0024103767414047302": [55, 56], "010205586837665018": [55, 56], "018983779931504997": [55, 56], "011950905288150394": [55, 56], "01518393864077397": [55, 56], "051622191325047306": [55, 56], "07210389837804473": [55, 56], "04745944982876247": [55, 56], "039173517569276436": [55, 56], "17918683372907862": [55, 56], "3367363220550604": [55, 56], "4611457574513795": [55, 56], "5084040873607553": [55, 56], "30": [56, 96, 165, 195, 221, 223, 234, 249, 250, 264, 270], "31": 56, "15": [56, 134, 163, 185, 205, 239, 252], "remain": [58, 195, 212], "1024": [59, 60, 83, 84, 221, 222, 224, 227, 228, 265, 268], "decad": [60, 84, 221, 222, 224, 227, 228, 263, 266], "resampl": [68, 69, 70, 71, 72, 73, 74, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 211, 239, 269, 270], "http": [68, 178, 188, 190, 191, 204, 211, 213, 254, 258, 259, 260], "wirelesspi": 68, "com": [68, 178, 190, 191, 204, 211, 259, 260], "fraction": [68, 72, 204, 262], "structur": 68, "should": [72, 134, 220, 260], "equal": [72, 134], "three": [72, 262, 268], "lfilter": 75, "b_i": [75, 78, 82, 94, 221, 222, 223, 224, 227, 228, 234, 238, 264], "feedback": [75, 78, 81, 94, 221, 222, 223, 224, 227, 228, 234, 238, 264], "a_j": [75, 78, 81, 94, 221, 222, 223, 224, 227, 228, 234, 238, 264], "These": [75, 144, 148, 156, 237, 260, 266], "differ": [75, 135, 145, 149, 155, 157, 190, 191, 236, 254, 268], "a_0": 75, "b": [75, 78, 178, 181, 204, 207, 221, 223, 234, 258, 259, 268], "classmethod": [75, 76, 94], "zerospol": [75, 76, 79, 80, 94, 221, 222, 223, 224, 227, 228, 234, 238, 264], "self": [75, 76, 94], "b_tap": [75, 80, 82, 94, 264], "a_tap": [75, 80, 81, 94, 264], "exp": [79, 80, 144, 148, 156, 195, 204, 208, 210, 221, 222, 223, 224, 227, 228, 234, 236, 238, 250, 252, 254, 262, 264, 266], "1j": [79, 80, 195, 210, 221, 222, 223, 224, 227, 228, 234, 236, 238, 250, 252, 262, 264, 266], "conj": [79, 80, 221, 222, 223, 224, 227, 228, 234, 238, 264, 266], "478207252018059": [79, 80, 264], "6400000000000001": [79, 80, 264], "7391036260090295": [80, 264], "3061467458920719j": [80, 264], "insert": [96, 165], "multipli": [96, 165], "hold": [96, 98, 165, 167, 212, 270], "recommend": 96, "wai": [96, 260], "11": [96, 134, 144, 148, 156, 185, 205, 211, 239, 258], "zoh": [96, 98, 102, 165, 167, 172], "13": [96, 134, 144, 148, 156, 160, 161, 162, 164, 182, 185, 205, 239, 270], "matlab": [96, 98, 102, 165, 167, 172, 269], "iter": 97, "concaten": [97, 264], "linearli": [98, 167], "2r": 98, "ramp": [98, 125, 167], "advanc": [98, 167], "ones": [98, 167, 190, 191, 266], "84": 100, "modul": [107, 108, 116, 117, 119, 134, 136, 144, 145, 148, 149, 152, 154, 156, 157, 196, 197, 199, 201, 218, 220, 229, 232, 235, 247, 258, 261, 265, 267, 269, 270], "map_symbol": [107, 115, 134, 144, 148, 156, 180, 201, 202, 208, 219, 220, 246, 270], "decide_symbol": [107, 113, 134, 144, 148, 156, 270], "a_hat": [107, 113, 134, 144, 148, 156], "decis": [107, 113, 114, 134, 144, 148, 156, 220], "maximum": [107, 113, 114, 134, 144, 148, 156, 204, 206, 219, 235, 242, 243, 245], "likelihood": [107, 113, 114, 134, 144, 148, 156], "mle": [107, 113, 134, 144, 148, 156], "match": [107, 108, 114, 120, 134, 144, 145, 148, 149, 156, 157, 270], "abstract": [107, 111, 121], "log_2": [107, 112, 134, 144, 148, 156, 181, 196, 197, 199, 247], "phase_offset": [107, 108, 118, 134, 135, 144, 145, 148, 149, 153, 156, 157, 180, 201, 202, 208, 219, 220, 235, 246, 265, 267], "degre": [107, 108, 118, 134, 135, 144, 145, 148, 149, 153, 156, 157, 202, 208, 210, 214], "dot": [107, 108, 123, 134, 144, 148, 155, 156, 235], "mapsto": [107, 108, 123, 134, 144, 148, 155, 156, 235], "mathbb": [107, 108, 123, 134, 144, 148, 155, 156, 181, 235, 254], "sym": [107, 108, 122, 134, 135, 144, 145, 148, 149, 156, 157, 197, 200, 204, 247, 248, 268], "pulse_shap": [107, 108, 114, 116, 119, 134, 144, 145, 148, 149, 156, 157, 265], "tx_filter": [107, 124, 134, 144, 148, 156], "rx_filter": [107, 120, 134, 144, 148, 156], "rect": [108, 145, 149, 157, 268], "whose": [108, 135, 145, 148, 149, 157], "import": [108, 145, 149, 157, 260, 262, 263, 264, 265, 266, 267, 268, 269], "roll": [108, 145, 149, 157, 254, 268], "off": [108, 145, 149, 157], "psd": [111, 121, 152, 154, 181, 196, 197, 199, 200, 218, 232, 247, 248], "p_b": 111, "s_hat": [114, 267], "size": [114, 116, 182, 194, 262, 266, 267, 268], "p_e": 121, "loopfilt": [125, 126, 127, 128, 129, 130, 131, 132, 133, 257, 266, 270], "ppi": [125, 129, 257], "track": 125, "constant": [125, 134, 136, 139, 140, 226, 233, 264, 266], "cannot": 125, "chirp": 125, "underli": [125, 131], "scheme": [134, 144, 148, 156, 270], "similar": [134, 144, 156, 268], "One": [134, 144, 156, 268], "distinct": [134, 144, 156], "result": [134, 144, 156, 179, 198, 203, 214, 215, 216, 242, 244, 245, 267], "envelop": [134, 263, 264], "which": [134, 144, 156, 178, 179, 180, 181, 198, 202, 208, 213, 214, 215, 219, 235, 246, 262, 266, 268], "lower": [134, 144, 156, 224, 226, 242, 245], "also": [134, 203, 204, 269], "consid": [134, 207], "cpfsk": 134, "separ": 134, "modem": [134, 144, 148, 156], "45": [134, 135, 144, 145, 148, 153, 180, 201, 202, 208, 210, 219, 220, 235, 246, 265, 267], "symbol_label": [134, 135, 144, 145, 148, 149, 155, 156, 157, 267], "randint": [134, 144, 148, 156, 180, 183, 186, 194, 201, 202, 208, 219, 220, 229, 236, 246, 265, 267], "1000": [134, 144, 148, 156, 201, 203, 236, 249, 250, 267], "dtype": [134, 144, 148, 156, 182, 212, 236, 251, 255, 266], "uint8": [134, 144, 148, 156, 212, 251], "complex_symbol": [134, 144, 148, 156], "70710678": [134, 144, 148], "70710678j": [134, 144, 148], "linestyl": [134, 144, 148, 156, 219, 230, 235, 237, 254, 262, 266, 267, 268], "tx_sampl": [134, 144, 148, 156], "50": [134, 144, 148, 156, 189, 209, 217, 235, 249, 250, 262, 265], "like": [134, 260, 269, 270], "channel": [134, 144, 152, 154, 181, 183, 184, 186, 187, 194, 218, 232, 269, 270], "subplot": [134, 144, 208, 266, 267], "imag": [134, 144, 262], "trajectori": 134, "although": 134, "boundari": 134, "lead": [134, 208, 267], "spectral": [134, 195, 226, 265, 268], "effici": [134, 195, 214, 252], "gmsk": 134, "rx_sampl": [134, 144, 148, 156], "last": [134, 144, 212, 258], "rx_symbol": [134, 144, 148, 156], "rx_complex_symbol": [134, 144, 148, 156], "14": [134, 144, 148, 156, 161, 185, 205, 239], "array_equ": [134, 144, 148, 156], "bin": [135, 145, 149, 155, 157, 201, 219, 235, 267], "absolut": [135, 136, 139, 141, 145, 157, 181], "consecut": [135, 145, 149, 157], "adjac": [135, 145, 149, 155, 157, 267, 268], "mai": [135, 145, 149, 155, 157, 201, 219, 230, 233, 235, 237, 264], "more": [135, 145, 149, 155, 157, 270], "start": [135, 145, 149, 157, 258], "0j": [135, 145, 149, 157], "go": [135, 145, 149, 157], "counter": [135, 145, 149, 157], "clockwis": [135, 145, 149, 157], "around": [135, 145, 149, 157], "circl": [135, 145, 149, 157, 264], "increment": [136, 138, 139, 140, 266], "Then": 136, "fsk": 136, "60": [136, 190, 191, 268], "repeat": 136, "cp": 136, "57": 136, "bpsk": [136, 152, 154, 218, 232, 236, 265], "variabl": [136, 138, 207, 266], "forward": [136, 143], "settabl": [136, 137, 140, 141], "vari": 138, "intern": 142, "set": [142, 180, 203, 219, 224, 226, 230, 233, 235, 237, 259, 261, 264], "qpsk": [144, 148, 152, 153, 154, 156, 180, 201, 202, 218, 219, 220, 232, 235, 236, 246, 269, 270], "convent": [144, 156], "transit": [144, 156, 186, 187, 194, 256], "independ": 144, "apart": 144, "origin": [144, 156, 252, 262], "taken": [144, 148, 156], "jq": 144, "begin": [144, 156, 160], "end": [144, 156, 160, 249, 259], "encod": [148, 152, 154, 192, 193, 269], "inform": [148, 196, 197, 199, 247], "ge": [149, 157, 178], "were": [152, 154], "simon": [152, 154], "alouini": [152, 154], "over": [152, 154, 207], "fade": [152, 154], "chapter": [152, 154, 211, 239], "john": [152, 154], "proaki": [152, 154], "optimum": [152, 154], "psk8": [152, 154, 218, 232, 267], "psk16": [152, 154, 218, 232, 267], "compar": [152, 154, 190, 191, 268], "de": [152, 154, 270], "se": [154, 232], "00000000e": [155, 156, 264], "00": [155, 156, 264], "00j": [155, 156], "07106781e": [155, 156], "01": [155, 156, 207, 264, 266], "01j": [155, 156], "12323400e": [155, 156], "17": [155, 156, 201, 214, 239, 258], "83697020e": 155, "22464680e": [155, 156], "16j": [155, 156], "annot": [155, 235, 270], "odd": [156, 249], "rotat": [156, 210], "rel": [156, 254, 268], "even": [156, 190, 191, 204, 242, 245], "2m": 156, "displaystyl": 156, "pi4_qpsk": 156, "exceed": [158, 159], "15865525393145707": [158, 159], "158655": [158, 159], "0000010494310452": [158, 159], "perfect": 160, "knowledg": 160, "cn": [160, 180], "mathrm": 160, "re": 160, "sqrt": [160, 161, 162, 164, 178, 201, 204, 244, 254, 265, 266, 268], "____": 165, "2p": 167, "95": [169, 201], "desir": [178, 180, 267], "ln": [178, 204], "62": [178, 207], "_": [178, 201], "log_": [178, 179, 189, 198, 203, 213, 215, 216, 244], "54": [178, 207], "44": 178, "12ab": 178, "7b": 178, "claim": 178, "leq": 178, "le": [178, 210, 214, 242, 245], "8096": 178, "radarsp": 178, "weebli": 178, "upload": 178, "21471216": 178, "albersheim_alternative_form": 178, "pdf": [178, 204], "bpb": 178, "w2": 178, "wpmucdn": 178, "site": [178, 258], "gatech": 178, "edu": 178, "dist": [178, 259], "462": 178, "file": [178, 259, 261], "2016": 178, "noncoher": 178, "approxim": [178, 270], "www": [178, 190, 191, 204, 211], "mathwork": [178, 190, 191, 204, 211], "help": [178, 190, 191, 204, 211], "html": [178, 190, 191, 204, 211, 258], "semilogx": [178, 231], "legend": [178, 190, 191, 208, 262, 265, 266, 268], "grid": [178, 181, 184, 187, 203, 237, 262, 265, 266, 268], "both": [178, 181, 219, 235, 236, 262, 266], "xlabel": [178, 181, 182, 184, 187, 201, 203, 254, 262, 265, 266, 268], "ylabel": [178, 181, 182, 184, 187, 201, 203, 254, 262, 265, 266, 268], "across": 178, "nuse": 178, "avg": [179, 180, 213], "ax": [179, 198, 213, 215, 237], "along": [179, 198, 213, 215, 270], "entir": [179, 198, 213, 215], "decibel": [179, 189, 198, 209, 215, 216, 244, 269, 270], "seed": [180, 183, 186, 194, 270], "ad": [180, 230, 259, 269, 270], "explicitli": 180, "known": 180, "must": [180, 190, 191, 204, 210, 230, 242, 245, 254], "numpi": [180, 183, 186, 194, 251, 262, 263, 264, 265, 266, 267, 268, 269], "default_rng": [180, 183, 186, 194], "noisi": 180, "sin": [180, 249], "zorder": [180, 202, 246], "infti": [180, 181], "nand": 180, "capac": [181, 184, 187, 269, 270], "2d": [181, 230], "x_i": [181, 183, 184, 186, 187, 194, 208], "y_i": [181, 183, 184, 186, 187, 194], "monoton": 181, "decreas": 181, "limit": [181, 219, 224, 226, 235, 267], "At": 181, "occur": 181, "view": [181, 259, 269], "59": 181, "shannon": 181, "semilogi": [181, 218, 231, 232], "barker": [182, 255, 269, 270], "ani": [182, 189, 195, 209, 224, 226, 252, 255, 261], "int64": [182, 255], "bipolar": [182, 270], "float64": [182, 255], "sequenc": [182, 183, 186, 194, 254, 256, 269, 270], "format": 182, "seq": 182, "have": [182, 195, 212, 236, 251, 252], "ideal": [182, 267], "minim": 182, "autocorrel": [182, 254], "sidelob": [182, 190, 191, 242, 245, 254], "corr": [182, 254], "lag": [182, 254], "ab": [182, 254, 268], "roughli": [183, 186, 262], "eras": 183, "flip": 186, "h_b": 187, "cf": 188, "v_": [188, 189, 209, 216, 244], "en": [188, 213, 254], "wikipedia": [188, 213, 254], "org": [188, 213, 254], "wiki": [188, 213, 254], "type": [189, 201, 209, 212, 226, 231, 233, 251, 270], "voltag": [189, 209, 216, 244, 269], "x_": [189, 209], "mhz": [189, 209], "77": [189, 207, 209], "50e6": 189, "76": [189, 207], "98970004336019": 189, "mw": [189, 209], "dbm": [189, 209], "dbv": [189, 209], "020599913279624": 189, "center_freq": 190, "ham": [190, 191], "hann": [190, 191, 226, 233], "blackman": [190, 191], "harri": [190, 191, 211, 239], "chebyshev": [190, 191], "nyquist": [190, 191, 195, 220, 252, 268], "two": [190, 220, 221, 222, 224, 226, 227, 228, 233, 254, 262, 263, 264], "side": [190, 204, 221, 222, 224, 226, 227, 228, 233, 263, 264, 265, 268], "about": [190, 236, 261], "No": [190, 191], "blackmanharri": [190, 191], "chebwin": [190, 191], "attenu": [190, 191, 211, 242, 245], "beta": [190, 191], "dsp": [190, 191, 211, 269], "designbandpassfir": 190, "cdot": [190, 191, 210], "h_ham": [190, 191], "h_hann": [190, 191], "h_blackman": [190, 191], "h_blackman_harri": [190, 191], "h_chebyshev": [190, 191], "h_kaiser": [190, 191], "ylim": [190, 191, 222, 254, 263, 266, 267, 268], "cutoff_freq": 191, "cutoff": 191, "f_c": 191, "designlowpassfir": 191, "uncod": 193, "dmc": [194, 256, 269, 270], "memoryless": [194, 256, 269], "pr": 194, "y_j": 194, "alphabet": 194, "ldot": 194, "doe": [195, 252], "anti": [195, 252, 270], "alias": [195, 252, 270], "400": [195, 262], "x1": 195, "200": [195, 262, 267], "x2": 195, "130": 195, "x3": [195, 254], "spectrum": [195, 221, 222, 224, 226, 227, 228, 233, 249, 250, 252], "content": 195, "abov": [195, 252], "fold": 195, "cw": 195, "unalias": 195, "fft": [195, 226, 233, 249, 250, 252], "2048": [195, 249, 250, 252, 265], "xlim": [195, 252, 265, 266, 268], "qam": [196, 197, 199, 247], "249387366082999": [196, 197], "020599913279625": [196, 248], "7506126339170005": [199, 247], "979400086720376": [199, 200], "system": [200, 211, 239, 248, 259, 261, 266, 269], "norm": [201, 204, 206, 242, 243, 245], "noiseless": 201, "sourc": 201, "max": [201, 215, 216], "instantan": 201, "percentil": [201, 224, 226, 233], "either": 201, "11185910070388": 201, "112116770071811": 201, "246043223347522": 201, "95th": 201, "587790575024894": 201, "inst_evm": 201, "hist": 201, "histogram": 201, "frequency_offset": [202, 256, 270], "freq_rat": 202, "cycl": [202, 236], "5e": 202, "deg": [202, 208], "path": [203, 269], "loss": [203, 269], "meter": [203, 214, 253], "transmitt": 203, "far": 203, "field": 203, "neg": [203, 208], "impli": 203, "possibl": [203, 269], "so": [203, 204, 206, 242, 243, 245, 269], "km": 203, "link": [203, 269, 270], "ghz": [203, 214, 253], "1e3": [203, 210, 249], "1e9": [203, 214, 253], "92": 203, "44778322188337": 203, "doubl": [203, 214], "increas": [203, 214, 264], "2e3": 203, "98": 203, "468383135163": 203, "2e9": 203, "product": [204, 268], "thought": [204, 271], "smaller": [204, 242, 245, 268], "wider": 204, "how": [204, 206, 220, 229, 230, 236, 242, 243, 245, 261], "gaussdesign": 204, "onlinelibrari": 204, "wilei": 204, "doi": 204, "1002": 204, "9780470041956": 204, "app2": 204, "h_0p1": [204, 242, 245], "h_0p2": 204, "h_0p3": 204, "reason": [206, 243, 258], "larger": [206, 208, 219, 235, 243], "h_half_sin": 206, "displai": [207, 219, 221, 222, 224, 226, 227, 228, 233, 235], "line": [207, 236, 259, 265], "quick": 207, "brown": 207, "fox": 207, "jump": 207, "lazi": 207, "dog": 207, "00000000": 207, "68": 207, "65": 207, "71": 207, "75": [207, 219, 266, 267], "69": 207, "63": 207, "6b": 207, "72": 207, "6f": 207, "6e": 207, "00000010": 207, "66": 207, "78": 207, "6a": 207, "6d": 207, "73": 207, "74": 207, "00000020": 207, "6c": 207, "61": 207, "7a": 207, "79": 207, "67": 207, "he": 207, "02": [207, 264, 266], "03": [207, 264], "04": [207, 264], "00000004": 207, "05": [207, 262, 264, 266], "06": 207, "07": 207, "08": 207, "00000008": 207, "09": 207, "0a": 207, "iq_imbal": [208, 256, 270], "iq": [208, 256, 269], "imbal": [208, 256, 269], "posit": 208, "compon": [208, 249, 250, 252], "g_i": 208, "180": 208, "g_q": 208, "x_q": 208, "horizont": 208, "stretch": 208, "while": [208, 268], "vertic": 208, "northwest": 208, "northeast": 208, "50118723": 209, "36272725": 209, "9952623149688795": 209, "satisfi": 210, "remov": [210, 226, 233, 270], "half_length": 211, "a_stop": 211, "80": [211, 254], "stopband": [211, 242, 245], "a_": 211, "stop": 211, "fred": [211, 239], "designmultiratefir": 211, "dtypelik": [212, 251], "most": [212, 251], "signific": [212, 251], "enough": 212, "fill": 212, "smallest": 212, "unsign": 212, "integ": 212, "diamet": 214, "55": 214, "eta": 214, "dbi": 214, "arcsin": 214, "83": 214, "dish": 214, "21": 214, "810210290266568": 214, "437435887991374": 214, "23": 214, "sinc": [214, 220, 258, 267], "antenna": [214, 269], "we": [214, 269], "observ": [214, 220], "830810203546193": 214, "529544741425365": 214, "keyword": [218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 263, 264], "pyplot": [218, 219, 222, 223, 224, 225, 226, 227, 228, 232, 233, 234, 235, 236, 237, 238, 262, 263, 264, 265, 266, 267, 268], "heatmap": [219, 267], "scatter": 219, "overwritten": [219, 230, 233, 235], "rang": [219, 266, 267], "hist2d": 219, "10_000": 219, "color": [220, 229, 230, 236, 265, 268], "imaginari": [220, 230, 236], "interleav": [220, 230], "base": [220, 229, 230, 236], "examin": 220, "intersymbol": 220, "interfer": 220, "isi": 220, "cascad": 220, "why": 220, "often": [220, 262], "practic": 220, "n_time": [221, 264], "n_freq": 221, "x_axi": [221, 222, 224, 226, 227, 228, 233, 263, 264, 265, 266], "log": [221, 222, 224, 226, 227, 228, 263, 264, 266], "definit": [221, 222, 223, 224, 227, 228, 234, 238], "n_t": 221, "n_f": 221, "scale": [221, 222, 224, 226, 227, 228, 233, 263, 264], "option": [221, 222, 224, 226, 227, 228, 233, 270], "h_srrc": [221, 222, 223, 224, 227, 228, 234, 236, 238, 267], "48": 222, "52": 222, "10th": [224, 226, 233], "crop": [224, 226], "deep": [224, 226], "x_label": 225, "overlap": [226, 233, 265], "detrend": [226, 233], "median": 226, "segment": [226, 233], "256": [226, 233, 265], "point": [226, 233], "trend": [226, 233], "unwrap": [228, 266], "stride": 230, "colorbar": 230, "1d": 230, "determin": 230, "row": 230, "collect": 230, "linecollect": 230, "linewidth": [230, 254], "solid": [230, 236], "cmap": 230, "rainbow": 230, "loglog": 231, "pcolormesh": 233, "vmin": 233, "vmax": 233, "100th": 233, "shade": 233, "gouraud": 233, "markers": 235, "diff": [236, 265], "mutual": 236, "exclus": 236, "current": [236, 260], "dash": 236, "share": 236, "10e3": 236, "revert": 237, "rcdefault": 237, "_rc_param": 237, "rc_param": 237, "autolayout": 237, "max_open_warn": 237, "titleweight": 237, "bold": 237, "arrang": 239, "column": 239, "notion": 239, "demonstr": 239, "18": [239, 258, 267], "19": 239, "000005": 240, "5000": [240, 241], "000000025": 240, "005": [241, 266], "000025": 241, "excess": [242, 245, 268], "narrow": [242, 245], "expens": [242, 245], "higher": [242, 245, 268], "h_0p5": [242, 245], "h_0p9": [242, 245], "affect": [242, 245], "longer": [242, 245, 249], "h_4": [242, 245], "h_8": [242, 245], "h_16": [242, 245], "h_rect": [243, 268], "sample_rate_offset": [246, 256, 270], "append": [249, 265], "250": [249, 250], "300": [249, 250], "ksp": [249, 250], "notic": [249, 250, 262, 268], "conjug": [249, 250, 264], "500": [249, 250, 266], "now": [249, 250, 262, 270], "150": [249, 250], "asymmetr": 250, "copi": 252, "299792458": 253, "zadoff_chu": [254, 255, 270], "zadoff": [254, 255, 269, 270], "chu": [254, 255, 269, 270], "prime": 254, "gcd": 254, "ne": 254, "cyclic": 254, "x_u": 254, "c_": 254, "2q": 254, "mod": 254, "e2": 254, "93chu_sequ": 254, "x_3": 254, "139": 254, "tile": 254, "x_5": 254, "x5": 254, "cross": 254, "xcorr": 254, "sphinx": 258, "immateri": 258, "theme": 258, "depend": [258, 259, 261], "store": [258, 260, 261], "txt": [258, 259, 260, 261], "some": 258, "below": [258, 263, 264], "version": [258, 260, 269], "aren": 258, "resolut": 258, "minut": 258, "ci": 258, "myst": 258, "parser": 258, "updat": 258, "git": [258, 260], "math": 258, "dollar": 258, "ipykernel": 258, "26": 258, "nb": 258, "pickleshar": 258, "switch": 258, "pip": [258, 259, 260, 261, 269], "python3": [258, 259, 260, 261, 269], "built": 258, "run": 258, "command": [258, 259], "dirhtml": 258, "locat": [258, 261], "home": 258, "page": 258, "directori": [258, 260], "get": 258, "necessari": 258, "webpag": 258, "webserv": 258, "easili": [258, 259, 261, 263, 264], "python": [258, 269], "server": 258, "8080": 258, "access": 258, "web": 258, "browser": 258, "localhost": 258, "librari": [259, 260, 261, 262, 267, 269, 271], "ruff": [259, 260, 270], "lint": [259, 260], "your": [259, 261], "develop": [259, 260, 261], "dev": [259, 261], "pyproject": [259, 261], "toml": [259, 260, 261], "tool": [259, 261, 269], "src": 259, "extend": 259, "includ": [259, 260, 261, 269], "ipynb": 259, "exclud": 259, "build": [259, 269], "doc": 259, "_version": 259, "py": [259, 261], "120": 259, "select": 259, "pycodestyl": 259, "pyflak": 259, "pyupgrad": 259, "flake8": 259, "bugbear": 259, "simplifi": 259, "isort": 259, "ignor": 259, "e501": 259, "e713": 259, "e714": 259, "__init__": 259, "f401": 259, "f403": 259, "manual": [259, 261], "check": 259, "hook": 259, "config": [259, 262, 263, 264, 265, 266, 267, 268], "yaml": 259, "repo": [259, 260], "github": [259, 269], "rev": 259, "v2": 259, "id": 259, "larg": 259, "fixer": 259, "trail": 259, "whitespac": 259, "astral": 259, "sh": 259, "v0": 259, "enabl": 259, "disabl": 259, "uninstal": 259, "extens": 259, "vscode": [259, 261], "json": [259, 261], "you": [259, 260, 261, 269], "edit": [259, 264], "latest": [260, 269], "releas": [260, 270], "main": [260, 268], "branch": 260, "mhostett": [260, 270], "Or": [260, 261], "pre": 260, "To": 260, "activ": 260, "benefici": 260, "fashion": 260, "allow": [260, 261], "chang": [260, 271], "immedi": 260, "seen": 260, "upon": 260, "next": 260, "clone": 260, "wherev": 260, "flag": 260, "packag": [260, 269], "commit": 260, "pytest": [260, 261], "cov": 260, "xdist": 260, "benchmark": 260, "ini_opt": 261, "minvers": 261, "addopt": 261, "showloc": 261, "testpath": 261, "execut": 261, "test_psk": 261, "instruct": 261, "invok": 261, "infrastructur": 261, "debug": 261, "inlinebackend": [262, 263, 264, 265, 266, 267, 268], "print_figure_kwarg": [262, 263, 264, 265, 266, 267, 268], "facecolor": [262, 263, 264, 265, 266, 267, 268], "widget": [262, 263, 264, 265, 266, 267, 268], "tx": 262, "decai": [262, 264], "fillstyl": 262, "show": [262, 263, 264, 265, 266, 267, 268], "accomplish": [262, 267], "def": [262, 265, 267], "resample_sign": 262, "new_sample_r": 262, "ty": 262, "gca": [262, 267], "set_prop_cycl": [262, 267], "four": 262, "appear": 262, "fourth": 262, "do": 262, "315": 262, "32": 262, "00095883": 263, "00175012": 263, "00423921": 263, "0058825": 263, "006151": 263, "00474595": 263, "0017044": 263, "00254816": 263, "00721645": 263, "0112324": 263, "01342358": 263, "01273202": 263, "00845058": 263, "0004368": 263, "01073669": 263, "02372977": 263, "03650247": 263, "04650654": 263, "05098525": 263, "04734644": 263, "03355896": 263, "00851486": 263, "02769991": 263, "07367348": 263, "12670447": 263, "1830132": 263, "23810898": 263, "28727058": 263, "3260799": 263, "3509384": 263, "35949665": 263, "conveni": [263, 264], "evalu": [263, 264], "here": [263, 264], "47820725": 264, "78207252e": 264, "58172329e": 264, "10862468e": 264, "86109590e": 264, "21565653e": 264, "01140214e": 264, "57286400e": 264, "67772160e": 264, "47338728e": 264, "10422993e": 264, "89312837e": 264, "12240078e": 264, "03953322e": 264, "69685122e": 264, "63882791e": 264, "81474977e": 264, "47193366e": 264, "85259041e": 264, "15647504e": 264, "23851924e": 264, "42176895e": 264, "84684395e": 264, "42721858e": 264, "72236648e": 264, "14721649e": 264, "10813095e": 264, "94024315e": 264, "78877688e": 264, "74077567e": 264, "87820725": 264, "53637958": 264, "94724205": 264, "13335164": 264, "1455082": 264, "04436799": 264, "88708159": 264, "71930943": 264, "5719707": 264, "46154771": 264, "39261642": 264, "36139242": 264, "35935288": 264, "3763214": 264, "40270968": 264, "43085717": 264, "45557651": 264, "47410241": 264, "48566716": 264, "49090568": 264, "49124786": 264, "48840102": 264, "4839738": 264, "47925143": 264, "47510421": 264, "47199608": 264, "47005584": 264, "46917696": 264, "46911955": 264, "denomin": 264, "73910363": 264, "30614675j": 264, "plane": 264, "endpoint": 264, "092337035029908": 264, "71104892744724": 264, "684365018955985": 264, "37868538208862": 264, "1263714068241546": 264, "9993519409971622": 264, "1909320767063554": 264, "016796159999999997": 264, "46380627201679264": 264, "3806359704987118j": 264, "4988817673846036": 264, "333342139809402j": 264, "5543277195082319": 264, "22961005941718524j": 264, "5291527586053246": 264, "2828380420991956j": 264, "lyon": 264, "understand": 264, "3rd": 264, "insid": 264, "outsid": 264, "unstabl": 264, "n_symbol": 265, "els": 265, "pb": 265, "x_bb_rect": 265, "papr_bb_rect": 265, "x_pb_rect": 265, "papr_pb_rect": 265, "x_bb_0p1": 265, "papr_bb_0p1": 265, "x_pb_0p1": 265, "papr_pb_0p1": 265, "x_bb_0p5": 265, "papr_bb_0p5": 265, "x_pb_0p5": 265, "papr_pb_0p5": 265, "x_bb_0p9": 265, "papr_bb_0p9": 265, "x_pb_0p9": 265, "papr_pb_0p9": 265, "2f": 265, "rf": [265, 266], "512": 265, "sweep_alpha": 265, "bb_papr": 265, "pb_papr": 265, "bpsk_bb_papr": 265, "bpsk_pb_papr": 265, "qpsk_bb_papr": 265, "qpsk_pb_papr": 265, "psk8_bb_papr": 265, "psk8_pb_papr": 265, "psk16_bb_papr": 265, "psk16_pb_papr": 265, "configur": 266, "loop_filt": 266, "0x000002276d2bcc08": 266, "theta_0": 266, "phase_error": 266, "freq_estim": 266, "suptitl": [266, 267], "direct": [266, 270], "synthes": [266, 270], "dd": [266, 270], "avail": [266, 267, 269], "001": 266, "b_nt": 266, "0005": 266, "0125": 266, "015": 266, "0175": 266, "t_lock": 266, "analyze_psk": 267, "100_000": 267, "n0": 267, "tx_mf": 267, "1e6": 267, "bpsk_ber": 267, "bpsk_ser": 267, "qpsk_ber": 267, "qpsk_ser": 267, "psk8_ber": 267, "psk8_ser": 267, "psk16_ber": 267, "psk16_ser": 267, "simul": [267, 269], "1e0": 267, "psk8_bin": 267, "psk8_grai": 267, "wors": 267, "rc_0p1": 268, "rc_0p5": 268, "rc_0p9": 268, "pm": 268, "nearli": 268, "small": 268, "lobe": 268, "much": 268, "freqz": 268, "worn": 268, "whole": 268, "h_rc_0p1": 268, "h_rc_0p5": 268, "h_rc_0p9": 268, "p_rect": 268, "cumsum": 268, "p_rc_0p1": 268, "p_rc_0p5": 268, "p_rc_0p9": 268, "within": 268, "srrc_0p1": 268, "srrc_0p5": 268, "srrc_0p9": 268, "therefor": 268, "significantli": 268, "due": 268, "being": 268, "h_srrc_0p1": 268, "h_srrc_0p5": 268, "h_srrc_0p9": 268, "p_srrc_0p1": 268, "p_srrc_0p5": 268, "p_srrc_0p9": 268, "gauss_0p1": 268, "gauss_0p2": 268, "gauss_0p3": 268, "softwar": 269, "radio": 269, "goal": 269, "analyz": 269, "reli": 269, "interoper": 269, "veri": 269, "numba": 269, "acceler": 269, "computation": 269, "intens": 269, "addition": 269, "aim": 269, "replic": 269, "relev": 269, "toolbox": 269, "progress": 269, "someth": 269, "pleas": 269, "open": 269, "issu": 269, "pypi": 269, "api": [269, 271], "convers": [269, 270], "synchron": 269, "budget": [269, 270], "manipul": 269, "novemb": 270, "2023": 270, "move": 270, "abil": 270, "model": 270, "replac": 270, "pylint": 270, "black": 270, "improv": 270, "matt": 270, "hostett": 270, "septemb": 270, "sensibl": 270, "august": 270, "27": 270, "without": 270, "renam": 270, "superflu": 270, "translat": 270, "fix": [270, 271], "juli": 270, "firinterpol": 270, "impair": 270, "fpsl": 270, "helper": 270, "semant": 271, "major": 271, "minor": 271, "patch": 271, "introduc": 271, "featur": 271, "backward": 271, "compat": 271, "make": 271, "bug": 271, "There": 271, "guarante": 271, "them": 271, "thei": 271}, "objects": {"": [[3, 0, 0, 1, "sdr", ""]], "sdr": [[9, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [26, 1, 1, "", "Decimator", "Implements a polyphase decimating FIR filter."], [37, 1, 1, "", "Differentiator", "Implements a differentiator FIR filter."], [39, 1, 1, "", "EnergyDetector", "Implements an energy detector."], [44, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [51, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [68, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [75, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [94, 1, 1, "", "Integrator", "Implements an integrator IIR filter."], [96, 1, 1, "", "Interpolator", "Implements a polyphase interpolating FIR filter."], [107, 1, 1, "", "LinearModulation", "Implements linear phase/amplitude modulation with arbitrary symbol mapping."], [125, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [134, 1, 1, "", "MSK", "Implements minimum-shift keying (MSK) modulation and demodulation."], [136, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [144, 1, 1, "", "OQPSK", "Implements offset quadrature phase-shift keying (OQPSK) modulation and demodulation."], [148, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [156, 1, 1, "", "PiMPSK", "Implements $pi/M$ phase-shift keying ($pi/M$ PSK) modulation and demodulation."], [158, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [159, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [160, 1, 1, "", "ReplicaCorrelator", "Implements an clairvoyant replica-correlator detector."], [165, 1, 1, "", "Resampler", "Implements a polyphase rational resampling FIR filter."], [178, 5, 1, "", "albersheim", "Estimates the minimum required single-sample SNR, given $N_{NC}$ non-coherent combinations, to achieve a probability of detection $P_D$ and probability of false alarm $P_{FA}$. This function implements Albersheim's equation."], [179, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [180, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [181, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [182, 5, 1, "", "barker", "Returns the Barker code/sequence of length $N$."], [183, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [184, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [185, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [186, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [187, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [188, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [189, 5, 1, "", "db", "Converts from linear units to decibels."], [190, 5, 1, "", "design_bandpass_fir", "Designs a bandpass FIR filter impulse response $h[n]$ using the window method."], [191, 5, 1, "", "design_lowpass_fir", "Designs a lowpass FIR filter impulse response $h[n]$ using the window method."], [192, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [193, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [194, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [195, 5, 1, "", "downsample", "Downsamples the time-domain signal $x[n]$ by the factor $r$."], [196, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [197, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [198, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [199, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [200, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [201, 5, 1, "", "evm", "Calculates the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [202, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [203, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [204, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [205, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [206, 5, 1, "", "half_sine", "Returns a half-sine pulse shape."], [207, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [208, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [209, 5, 1, "", "linear", "Converts from decibels to linear units."], [210, 5, 1, "", "mix", "Mixes the time-domain signal $x[n]$ with a complex exponential or real sinusoid."], [211, 5, 1, "", "multirate_taps", "Computes the multirate FIR filter that achieves rational resampling by $P/Q$."], [212, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [213, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [214, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [215, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [216, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [217, 5, 1, "", "percent", "Converts from a ratio to a percentage."], [239, 5, 1, "", "polyphase_matrix", "Converts the multirate FIR filter taps $h_i$ into the polyphase matrix $H_{i, j}$ that achieves rational resampling by $P/Q$."], [240, 5, 1, "", "ppb", "Converts from a ratio to parts per billion (ppb)."], [241, 5, 1, "", "ppm", "Converts from a ratio to parts per million (ppm)."], [242, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [243, 5, 1, "", "rectangular", "Returns a rectangular pulse shape."], [244, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [245, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [246, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [247, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [248, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [249, 5, 1, "", "to_complex_bb", "Converts the real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$ to a complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c} = f_{s,r}/2$."], [250, 5, 1, "", "to_real_pb", "Converts the complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$ to a real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r} = 2f_{s,c}$."], [251, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [252, 5, 1, "", "upsample", "Upsamples the time-domain signal $x[n]$ by the factor $r$."], [253, 5, 1, "", "wavelength", "Calculates the wavelength $lambda$ of an electromagnetic wave with frequency $f$."], [254, 5, 1, "", "zadoff_chu", "Returns the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.ClosedLoopPLL": [[10, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [11, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [12, 2, 1, "", "K0", "The NCO gain $K_0$."], [13, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [14, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [15, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [16, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [17, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [18, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [19, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [20, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [21, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [22, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [23, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [24, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [25, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[16, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [16, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [16, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [16, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [16, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[17, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[19, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[22, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.Decimator": [[27, 3, 1, "", "__call__", "Filters and decimates the input signal $x[n]$ with the polyphase FIR filter."], [28, 3, 1, "", "__init__", "Creates a polyphase FIR decimating filter."], [29, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [30, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [31, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [32, 2, 1, "", "method", "The method used to design the multirate filter."], [33, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [34, 2, 1, "", "rate", "The decimation rate $r$."], [35, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [36, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Decimator.__call__": [[27, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [27, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Decimator.__init__": [[28, 4, 2, "p-rate", "rate", "The decimation rate $r$."], [28, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [28, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.Differentiator": [[38, 3, 1, "", "__init__", "Creates a differentiator FIR filter."]], "sdr.Differentiator.__init__": [[38, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.EnergyDetector": [[40, 3, 1, "", "p_d", "Computes the probability of detection $P_D$."], [41, 3, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [42, 3, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [43, 3, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.EnergyDetector.p_d": [[40, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [40, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [40, 4, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.p_fa": [[41, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [41, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [41, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [41, 4, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.EnergyDetector.roc": [[42, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [42, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [42, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."], [42, 4, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.threshold": [[43, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [43, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [43, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [43, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.ErrorRate": [[45, 3, 1, "", "__init__", "Creates a new error rate tabulation object."], [46, 3, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [47, 3, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [48, 3, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [49, 3, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [50, 3, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[46, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [46, 4, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [46, 4, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[47, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[48, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[50, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[52, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the FIR filter."], [53, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [54, 3, 1, "", "__len__", "Returns the filter length $N + 1$."], [55, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [56, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [57, 2, 1, "", "delay", "The delay of the FIR filter $d = lfloor frac{N + 1}{2} rfloor$ in samples."], [58, 3, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [59, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the FIR filter."], [60, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(omega)$ of the FIR filter on a logarithmic frequency axis."], [61, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [62, 2, 1, "", "order", "The order of the FIR filter $N$."], [63, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [64, 2, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [65, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [66, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [67, 2, 1, "", "taps", "The feedforward taps $h_i$ for $i = 0,...,N$."]], "sdr.FIR.__call__": [[52, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [52, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.FIR.__init__": [[53, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$ for $i = 0,...N$."], [53, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FIR.frequency_response": [[59, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [59, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.frequency_response_log": [[60, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [60, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [60, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[61, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.step_response": [[65, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FarrowResampler": [[69, 3, 1, "", "__call__", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [70, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [71, 2, 1, "", "order", "The order of the filter."], [72, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [73, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [74, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__call__": [[69, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [69, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.__init__": [[70, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FarrowResampler.reset": [[72, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[76, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [77, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the IIR filter."], [78, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [79, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [80, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [81, 2, 1, "", "a_taps", "The feedback taps $a_j$ for $j = 0,...,N$."], [82, 2, 1, "", "b_taps", "The feedforward taps $b_i$ for $i = 0,...,M$."], [83, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the IIR filter."], [84, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(omega)$ of the IIR filter on a logarithmic frequency axis."], [85, 2, 1, "", "gain", "The gain of the IIR filter."], [86, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [87, 2, 1, "", "order", "The order of the IIR filter $N$."], [88, 2, 1, "", "poles", "The poles of the IIR filter."], [89, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [90, 2, 1, "", "state", "The filter state."], [91, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [92, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [93, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[76, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [76, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [76, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."], [76, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__call__": [[77, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.IIR.__init__": [[78, 4, 2, "p-a", "a", "The feedback coefficients $a_j$ for $j = 0,...,N$."], [78, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$ for $i = 0,...,M$."], [78, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.IIR.frequency_response": [[83, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [83, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[84, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [84, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [84, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[86, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[91, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.Integrator": [[95, 3, 1, "", "__init__", "Creates an integrating IIR filter."]], "sdr.Integrator.__init__": [[95, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.Interpolator": [[97, 3, 1, "", "__call__", "Interpolates and filters the input signal $x[n]$ with the polyphase FIR filter."], [98, 3, 1, "", "__init__", "Creates a polyphase FIR interpolating filter."], [99, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [100, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [101, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [102, 2, 1, "", "method", "The method used to design the multirate filter."], [103, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [104, 2, 1, "", "rate", "The interpolation rate $r$."], [105, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [106, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Interpolator.__call__": [[97, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [97, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Interpolator.__init__": [[98, 4, 2, "p-rate", "rate", "The interpolation rate $r$."], [98, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [98, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.LinearModulation": [[108, 3, 1, "", "__init__", "Creates a new linear phase/amplitude modulation object."], [109, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [110, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [111, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [112, 2, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [113, 3, 1, "", "decide_symbols", "Converts the received complex symbols $hat{a}[k]$ into decimal symbol decisions $hat{s}[k]$ using maximum-likelihood estimation (MLE)."], [114, 3, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples $hat{x}[n]$ into decimal symbol decisions $hat{s}[k]$ using matched filtering and maximum-likelihood estimation."], [115, 3, 1, "", "map_symbols", "Converts the decimal symbols $s[k]$ to complex symbols $a[k]$."], [116, 3, 1, "", "modulate", "Modulates the decimal symbols $s[k]$ into pulse-shaped complex samples $x[n]$."], [117, 2, 1, "", "order", "The modulation order $M = 2^k$."], [118, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [119, 2, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [120, 2, 1, "", "rx_filter", "The receive decimating matched filter. The filter coefficients are matched to the pulse shape $h[-n]^*$."], [121, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [122, 2, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [123, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."], [124, 2, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter. The filter coefficients are the pulse shape $h[n]$."]], "sdr.LinearModulation.__init__": [[108, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [108, 4, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees to apply to symbol_map."], [108, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [108, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [108, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [108, 4, 2, "p-symbol_map", "symbol_map", "The symbol mapping ${0, dots, M-1} mapsto mathbb{C}$. An $M$-length array whose indices are decimal symbols $s[k]$ and whose values are complex symbols $a[k]$, where $M$ is the modulation order."]], "sdr.LinearModulation.ber": [[111, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.LinearModulation.decide_symbols": [[113, 4, 2, "p-a_hat", "a_hat", "The received complex symbols $hat{a}[k]$."]], "sdr.LinearModulation.demodulate": [[114, 4, 2, "p-x_hat", "x_hat", "The received pulse-shaped complex samples $hat{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.LinearModulation.map_symbols": [[115, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to map, $0$ to $M-1$."]], "sdr.LinearModulation.modulate": [[116, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.LinearModulation.ser": [[121, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.LoopFilter": [[126, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [127, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [128, 3, 1, "", "__call__", "Filters the input signal $x[n]$."], [129, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [130, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [131, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [132, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [133, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__call__": [[128, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.LoopFilter.__init__": [[129, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [129, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [129, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [129, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.MSK": [[135, 3, 1, "", "__init__", "Creates a new MSK object."]], "sdr.MSK.__init__": [[135, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [135, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [135, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.NCO": [[137, 2, 1, "", "K0", "(Settable) The NCO gain $K_0$."], [138, 3, 1, "", "__call__", "Steps the NCO with variable frequency and/or phase signals."], [139, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [140, 2, 1, "", "increment", "(Settable) The constant phase accumulation $omega$ of the NCO in radians/sample."], [141, 2, 1, "", "offset", "(Settable) The absolute phase offset $theta$ of the NCO in radians."], [142, 3, 1, "", "reset", "Resets the NCO."], [143, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__call__": [[138, 4, 2, "p-freq", "freq", "The variable frequency signal $f[n]$ in radians/sample. This input signal varies the per-sample phase increment of the NCO. If None, the signal is all zeros."], [138, 4, 2, "p-phase", "phase", "The variable phase signal $p[n]$ in radians. This input signal varies the per-sample phase offset of the NCO. If None, the signal is all zeros."]], "sdr.NCO.__init__": [[139, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [139, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [139, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.NCO.step": [[143, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.OQPSK": [[145, 3, 1, "", "__init__", "Creates a new OQPSK object."], [146, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [147, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."]], "sdr.OQPSK.__init__": [[145, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [145, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [145, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [145, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [145, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [145, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK": [[149, 3, 1, "", "__init__", "Creates a new PSK object."], [150, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [151, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [152, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [153, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [154, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [155, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[149, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [149, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [149, 4, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [149, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [149, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [149, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [149, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[152, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [152, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.ser": [[154, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [154, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.PiMPSK": [[157, 3, 1, "", "__init__", "Creates a new $pi/M$ PSK object."]], "sdr.PiMPSK.__init__": [[157, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [157, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [157, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [157, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [157, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [157, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [157, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.Q": [[158, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[159, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.ReplicaCorrelator": [[161, 3, 1, "", "p_d", "Computes the probability of detection $P_D$."], [162, 3, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [163, 3, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [164, 3, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.ReplicaCorrelator.p_d": [[161, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [161, 4, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [161, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."]], "sdr.ReplicaCorrelator.p_fa": [[162, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [162, 4, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [162, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [162, 4, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.ReplicaCorrelator.roc": [[163, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [163, 4, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [163, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."]], "sdr.ReplicaCorrelator.threshold": [[164, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [164, 4, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [164, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [164, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.Resampler": [[166, 3, 1, "", "__call__", "Resamples and filters the input signal $x[n]$ with the polyphase FIR filter."], [167, 3, 1, "", "__init__", "Creates a polyphase FIR rational resampling filter."], [168, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [169, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [170, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [171, 2, 1, "", "down", "The decimation rate $Q$."], [172, 2, 1, "", "method", "The method used to design the multirate filter."], [173, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [174, 2, 1, "", "rate", "The resampling rate $P/Q$."], [175, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [176, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."], [177, 2, 1, "", "up", "The interpolation rate $P$."]], "sdr.Resampler.__init__": [[167, 4, 2, "p-down", "down", "The decimation rate $Q$."], [167, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [167, 4, 2, "p-taps", "taps", "The multirate filter design specification."], [167, 4, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.albersheim": [[178, 4, 2, "p-N_nc", "N_nc", "The number of non-coherent combinations $N_{NC} ge 1$."], [178, 4, 2, "p-p_d", "p_d", "The desired probability of detection $P_D$ in $(0, 1)$."], [178, 4, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{FA}$ in $(0, 1)$."]], "sdr.average_power": [[179, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the average power. The default is None, which computes the average power of the entire array."], [179, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [179, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[180, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [180, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [180, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [180, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[181, 4, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [181, 4, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.barker": [[182, 4, 2, "p-length", "length", "The length $N$ of the Barker code/sequence."], [182, 4, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[183, 4, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [183, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [183, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[184, 4, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[185, 4, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[186, 4, 2, "p-p", "p", "The probability $p$ of a bit flip."], [186, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [186, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[187, 4, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[188, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.db": [[189, 4, 2, "p-type", "type", "The type of input value or signal."], [189, 4, 2, "p-x", "x", "The input value or signal."]], "sdr.design_bandpass_fir": [[190, 4, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [190, 4, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [190, 4, 2, "p-order", "order", "The filter order $N$. Must be even."], [190, 4, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_lowpass_fir": [[191, 4, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [191, 4, 2, "p-order", "order", "The filter order $N$. Must be even."], [191, 4, 2, "p-window", "window", "The time-domain window to use."]], "sdr.diff_decode": [[192, 4, 2, "p-y", "y", "The input encoded data $y[k]$."], [192, 4, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[193, 4, 2, "p-x", "x", "The input uncoded data $x[k]$."], [193, 4, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[194, 4, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [194, 4, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [194, 4, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [194, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [194, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.downsample": [[195, 4, 2, "p-rate", "rate", "The downsampling factor $r$."], [195, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.ebn0_to_esn0": [[196, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [196, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [196, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[197, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [197, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [197, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [197, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[198, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the energy. The default is None, which computes the energy of the entire array."], [198, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [198, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[199, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [199, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [199, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[200, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [200, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.evm": [[201, 4, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [201, 4, 2, "p-output", "output", "The output type of the EVM calculation."], [201, 4, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [201, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.frequency_offset": [[202, 4, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [202, 4, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [202, 4, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [202, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [202, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[203, 4, 2, "p-distance", "distance", "The distance $d$ in meters between the transmitter and receiver."], [203, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[204, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [204, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [204, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [204, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[205, 4, 2, "p-n", "n", "The length of the Gray code."]], "sdr.half_sine": [[206, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [206, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [206, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.hexdump": [[207, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [207, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[208, 4, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [208, 4, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [208, 4, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.linear": [[209, 4, 2, "p-type", "type", "The type of output value or signal."], [209, 4, 2, "p-x", "x", "The input value or signal in dB."]], "sdr.mix": [[210, 4, 2, "p-complex", "complex", "Indicates whether to mix by a complex exponential or real sinusoid."], [210, 4, 2, "p-freq", "freq", "The frequency $f$ of the sinusoid in Hz (or 1/samples if sample_rate=1). The frequency must satisfy $-f_s/2 le f le f_s/2$."], [210, 4, 2, "p-phase", "phase", "The phase $phi$ of the sinusoid in degrees."], [210, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal."], [210, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.multirate_taps": [[211, 4, 2, "p-A_stop", "A_stop", "The stopband attenuation $A_{text{stop}}$ in dB."], [211, 4, 2, "p-down", "down", "The decimation rate $Q$."], [211, 4, 2, "p-half_length", "half_length", "The half-length of the polyphase filters."], [211, 4, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.pack": [[212, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [212, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [212, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[213, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the PAPR. The default is None, which computes the PAPR of the entire array."], [213, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[214, 4, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [214, 4, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [214, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[215, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the peak power. The default is None, which computes the peak power of the entire array."], [215, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [215, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[216, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [216, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.percent": [[217, 4, 2, "p-x", "x", "The input ratio."]], "sdr.plot": [[218, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [219, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [220, 5, 1, "", "eye", "Plots the eye diagram of the baseband modulated signal $x[n]$."], [221, 5, 1, "", "filter", "Plots the magnitude response $|H(omega)|^2$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [222, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [223, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [224, 5, 1, "", "magnitude_response", "Plots the magnitude response $|H(omega)|^2$ of the filter."], [225, 5, 1, "", "p_d", "Plots the probability of detection $P_D$ as a function of received SNR or ENR."], [226, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [227, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [228, 5, 1, "", "phase_response", "Plots the phase response $angle H(omega)$ of the filter."], [229, 5, 1, "", "phase_tree", "Plots the phase tree of a continuous-phase modulated (CPM) signal signal $x[n]$."], [230, 5, 1, "", "raster", "Plots a raster of the time-domain signal $x[n]$."], [231, 5, 1, "", "roc", "Plots the receiver operating characteristic (ROC) curve as a function of $P_{FA}$."], [232, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [233, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [234, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [235, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [236, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [237, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [238, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[218, 4, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [218, 4, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."], [218, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."]], "sdr.plot.constellation": [[219, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [219, 4, 2, "p-kwargs", "kwargs", "If heatmap=False, additional keyword arguments to pass to matplotlib.pyplot.scatter(). The following keyword arguments are set by default. The defaults may be overwritten."], [219, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [219, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.eye": [[220, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [220, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [220, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [220, 4, 2, "p-span", "span", "The number of symbols per raster."], [220, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [220, 4, 2, "p-x", "x", "The baseband modulated signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved."]], "sdr.plot.filter": [[221, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [221, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [221, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [221, 4, 2, "p-filter", "filter", "The filter definition."], [221, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [221, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[222, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [222, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [222, 4, 2, "p-filter", "filter", "The filter definition."], [222, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [222, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [222, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.impulse_response": [[223, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [223, 4, 2, "p-filter", "filter", "The filter definition."], [223, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.magnitude_response": [[224, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [224, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [224, 4, 2, "p-filter", "filter", "The filter definition."], [224, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [224, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [224, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.p_d": [[225, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [225, 4, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [225, 4, 2, "p-x", "x", "The SNR or ENR in dB."], [225, 4, 2, "p-x_label", "x_label", "The x-axis label to use."]], "sdr.plot.periodogram": [[226, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [226, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [226, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [226, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [226, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [226, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [226, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [226, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [226, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [226, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_delay": [[227, 4, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [227, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [227, 4, 2, "p-filter", "filter", "The filter definition."], [227, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [227, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [227, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_response": [[228, 4, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [228, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [228, 4, 2, "p-filter", "filter", "The filter definition."], [228, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [228, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [228, 4, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [228, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_tree": [[229, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [229, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [229, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [229, 4, 2, "p-span", "span", "The number of symbols per raster."], [229, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [229, 4, 2, "p-x", "x", "The baseband CPM signal $x[n]$."]], "sdr.plot.raster": [[230, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [230, 4, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\"."], [230, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.collections.LineCollection. The following keyword arguments are set by default. The defaults may be overwritten."], [230, 4, 2, "p-length", "length", "The length of each raster in samples. This must be provided if x is 1D."], [230, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [230, 4, 2, "p-stride", "stride", "The stride between each raster in samples. If None, the stride is set to length."], [230, 4, 2, "p-x", "x", "The time-domain signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved. If x is 1D, the rastering is determined by length and stride. If x is 2D, the rows correspond to each raster."]], "sdr.plot.roc": [[231, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to the plotting function defined by type."], [231, 4, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [231, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [231, 4, 2, "p-type", "type", "The type of plot to generate."]], "sdr.plot.ser": [[232, 4, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [232, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."], [232, 4, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.spectrogram": [[233, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [233, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [233, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.pcolormesh(). The following keyword arguments are set by default. The defaults may be overwritten."], [233, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [233, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [233, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [233, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [233, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [233, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[234, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [234, 4, 2, "p-filter", "filter", "The filter definition."], [234, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.symbol_map": [[235, 4, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [235, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot(). The following keyword arguments are set by default. The defaults may be overwritten."], [235, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [235, 4, 2, "p-modulation", "modulation", "The linear modulation or symbol map ${0, dots, M-1} mapsto mathbb{C}$."]], "sdr.plot.time_domain": [[236, 4, 2, "p-centered", "centered", "Indicates whether to center the x-axis about 0. This argument is mutually exclusive with offset."], [236, 4, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal. If \"color\", the real and imaginary parts will have different colors based on the current Matplotlib color cycle. If \"line\", the real part will have a solid line and the imaginary part will have a dashed line, and both lines will share the same color."], [236, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [236, 4, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. The units of the offset are $1/f_s$. This argument is mutually exclusive with centered."], [236, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [236, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[238, 4, 2, "p-filter", "filter", "The filter definition."], [238, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.polyphase_matrix": [[239, 4, 2, "p-down", "down", "The decimation rate $Q$."], [239, 4, 2, "p-taps", "taps", "The multirate FIR filter taps $h_i$."], [239, 4, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.ppb": [[240, 4, 2, "p-x", "x", "The input ratio."]], "sdr.ppm": [[241, 4, 2, "p-x", "x", "The input ratio."]], "sdr.raised_cosine": [[242, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [242, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [242, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [242, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rectangular": [[243, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [243, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [243, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[244, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [244, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[245, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [245, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [245, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [245, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[246, 4, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [246, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.snr_to_ebn0": [[247, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [247, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [247, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [247, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[248, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [248, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.to_complex_bb": [[249, 4, 2, "p-x_r", "x_r", "The real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$. If the length is odd, one zero is appended to the end."]], "sdr.to_real_pb": [[250, 4, 2, "p-x_c", "x_c", "The complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$."]], "sdr.unpack": [[251, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [251, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [251, 4, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.upsample": [[252, 4, 2, "p-rate", "rate", "The upsampling factor $r$."], [252, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.wavelength": [[253, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.zadoff_chu": [[254, 4, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [254, 4, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence. The root must be relatively prime to the length, i.e., $gcd(u, N) = 1$."], [254, 4, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence. When $q ne 0$, the returned sequence is a cyclic shift of the root-$u$ Zadoff-Chu sequence."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"convers": 0, "decibel": 0, "ratio": 0, "from": [0, 259, 260, 261], "e_b": 0, "n_0": 0, "e_": 0, "": [0, 263, 264], "n": [0, 262, 263, 264], "data": 1, "manipul": [1, 3], "detect": [2, 7], "detector": 2, "theoret": 2, "limit": 2, "digit": [3, 264], "signal": [3, 256, 262, 265], "process": 3, "fir": [3, 263], "filter": [3, 7, 263, 264, 266], "iir": [3, 264], "multir": 3, "arbitrari": [3, 262], "resampl": [3, 262], "correl": 3, "link": 4, "budget": 4, "channel": [4, 256], "capac": 4, "path": 4, "loss": 4, "antenna": 4, "measur": 5, "energi": 5, "power": [5, 265], "voltag": 5, "modul": [5, 6, 7], "linear": 6, "continu": 6, "phase": [6, 266, 267], "orthogon": 6, "puls": [6, 265, 268], "shape": [6, 265, 268], "symbol": [6, 267], "map": [6, 267], "encod": 6, "plot": [7, 265], "configur": [7, 259, 261], "time": [7, 265, 266], "domain": [7, 265, 266], "frequenc": [7, 263, 264, 265, 266], "spectral": 7, "estim": 7, "analysi": 7, "probabl": 8, "note": [9, 203, 211, 224, 226, 233], "constructor": [9, 26, 37, 44, 51, 68, 75, 94, 96, 107, 125, 134, 136, 144, 148, 156, 165], "method": [9, 26, 37, 39, 44, 51, 68, 75, 94, 96, 107, 125, 134, 136, 144, 148, 156, 160, 165], "properti": [9, 26, 37, 51, 68, 75, 94, 96, 107, 125, 134, 136, 144, 148, 156, 165], "special": [26, 37, 51, 68, 75, 94, 96, 125, 136, 165], "string": [26, 37, 51, 75, 94, 96, 107, 134, 144, 148, 156, 165], "represent": [26, 37, 51, 75, 94, 96, 107, 134, 144, 148, 156, 165], "stream": [26, 37, 51, 75, 94, 96, 165], "mode": [26, 37, 51, 75, 94, 96, 165], "onli": [26, 37, 51, 75, 94, 96, 165], "see": [44, 46, 59, 60, 61, 65, 83, 84, 86, 91, 108, 111, 121, 135, 145, 149, 152, 154, 157, 158, 159, 188, 213, 252], "also": [44, 46, 59, 60, 61, 65, 83, 84, 86, 91, 108, 111, 121, 135, 145, 149, 152, 154, 157, 158, 159, 188, 213, 252], "warn": [195, 252], "sequenc": 255, "simul": 256, "model": 256, "impair": 256, "synchron": 257, "document": 258, "instal": [258, 259, 260, 261, 269], "build": 258, "doc": 258, "serv": 258, "format": 259, "run": [259, 261], "linter": 259, "formatt": 259, "pre": 259, "commit": 259, "v": [259, 261], "code": [259, 261], "pypi": 260, "github": 260, "edit": 260, "local": 260, "folder": 260, "dev": 260, "depend": 260, "unit": 261, "test": 261, "command": 261, "line": 261, "farrow": 262, "construct": 262, "an": [262, 263, 264], "input": 262, "x": 262, "t_": 262, "rate": [262, 267], "r": 262, "y": 262, "frac": 262, "upsampl": 262, "integ": 262, "downsampl": 262, "irrat": 262, "creat": [263, 264], "examin": [263, 264, 265], "impuls": [263, 264], "respons": [263, 264, 266], "h": [263, 264], "step": [263, 264, 266], "omega": [263, 264], "group": [263, 264], "delai": [263, 264], "tau_g": [263, 264], "fulli": [263, 264], "analyz": [263, 264, 266], "zero": 264, "pole": 264, "stabil": 264, "peak": 265, "averag": 265, "qpsk": [265, 267], "variou": 265, "across": [265, 266], "excess": 265, "bandwidth": 265, "lock": 266, "loop": 266, "design": 266, "proport": 266, "plu": 266, "integr": 266, "ppi": 266, "implement": 266, "pll": 266, "close": 266, "perform": 266, "compar": 266, "zeta": 266, "b_n": 266, "t": 266, "shift": 267, "kei": 267, "constel": 267, "bpsk": 267, "8": [267, 270], "psk": 267, "16": 267, "error": 267, "curv": 267, "bit": 267, "rais": 268, "cosin": 268, "squar": 268, "root": 268, "gaussian": 268, "sdr": 269, "featur": 269, "v0": 270, "0": 270, "9": 270, "chang": 270, "contributor": 270, "7": 270, "6": 270, "5": 270, "4": 270, "3": 270, "2": 270, "1": 270, "version": 271, "alpha": 271, "releas": 271, "beta": 271}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Conversions": [[0, "conversions"]], "Decibels": [[0, "decibels"]], "Ratios": [[0, "ratios"]], "From E_b/N_0": [[0, "from-e-b-n-0"]], "From E_s/N_0": [[0, "from-e-s-n-0"]], "From S/N": [[0, "from-s-n"]], "Data manipulation": [[1, "data-manipulation"]], "Detection": [[2, "detection"], [7, "detection"]], "Detectors": [[2, "detectors"]], "Theoretical limits": [[2, "theoretical-limits"]], "Digital signal processing": [[3, "digital-signal-processing"]], "FIR filtering": [[3, "fir-filtering"]], "IIR filtering": [[3, "iir-filtering"]], "Multirate filtering": [[3, "multirate-filtering"]], "Arbitrary resampling": [[3, "arbitrary-resampling"]], "Correlation": [[3, "correlation"]], "Signal manipulation": [[3, "signal-manipulation"]], "Link budgets": [[4, "link-budgets"]], "Channel capacity": [[4, "channel-capacity"]], "Path losses": [[4, "path-losses"]], "Antennas": [[4, "antennas"]], "Measurement": [[5, "measurement"]], "Energy": [[5, "energy"]], "Power": [[5, "power"]], "Voltage": [[5, "voltage"]], "Modulation": [[5, "modulation"], [6, "modulation"], [7, "modulation"]], "Linear modulations": [[6, "linear-modulations"]], "Continuous-phase modulations": [[6, "continuous-phase-modulations"]], "Orthogonal modulations": [[6, "orthogonal-modulations"]], "Pulse shaping": [[6, "pulse-shaping"]], "Symbol mapping": [[6, "symbol-mapping"], [267, "symbol-mapping"]], "Symbol encoding": [[6, "symbol-encoding"]], "Plotting": [[7, "plotting"]], "Configuration": [[7, "configuration"], [259, "configuration"], [261, "configuration"]], "Time-domain": [[7, "time-domain"]], "Frequency-domain": [[7, "frequency-domain"]], "Spectral estimation": [[7, "spectral-estimation"]], "Filter analysis": [[7, "filter-analysis"]], "Probability": [[8, "probability"]], "Note": [[9, null], [203, null], [211, null], [224, null], [226, null], [226, null], [233, null]], "Constructors": [[9, "constructors"], [26, "constructors"], [37, "constructors"], [44, "constructors"], [51, "constructors"], [68, "constructors"], [75, "constructors"], [94, "constructors"], [96, "constructors"], [107, "constructors"], [125, "constructors"], [134, "constructors"], [136, "constructors"], [144, "constructors"], [148, "constructors"], [156, "constructors"], [165, "constructors"]], "Methods": [[9, "methods"], [26, "methods"], [37, "methods"], [39, "methods"], [44, "methods"], [51, "methods"], [68, "methods"], [75, "methods"], [94, "methods"], [96, "methods"], [107, "methods"], [125, "methods"], [134, "methods"], [136, "methods"], [144, "methods"], [148, "methods"], [156, "methods"], [160, "methods"], [165, "methods"]], "Properties": [[9, "properties"], [26, "properties"], [37, "properties"], [51, "properties"], [68, "properties"], [75, "properties"], [94, "properties"], [96, "properties"], [107, "properties"], [125, "properties"], [134, "properties"], [136, "properties"], [144, "properties"], [148, "properties"], [156, "properties"], [165, "properties"]], "Special methods": [[26, "special-methods"], [37, "special-methods"], [51, "special-methods"], [68, "special-methods"], [75, "special-methods"], [94, "special-methods"], [96, "special-methods"], [125, "special-methods"], [136, "special-methods"], [165, "special-methods"]], "String representation": [[26, "string-representation"], [37, "string-representation"], [51, "string-representation"], [75, "string-representation"], [94, "string-representation"], [96, "string-representation"], [107, "string-representation"], [134, "string-representation"], [144, "string-representation"], [148, "string-representation"], [156, "string-representation"], [165, "string-representation"]], "Streaming mode only": [[26, "streaming-mode-only"], [37, "streaming-mode-only"], [51, "streaming-mode-only"], [75, "streaming-mode-only"], [94, "streaming-mode-only"], [96, "streaming-mode-only"], [165, "streaming-mode-only"]], "See also": [[44, null], [46, null], [59, null], [60, null], [61, null], [65, null], [83, null], [84, null], [86, null], [91, null], [108, null], [111, null], [121, null], [135, null], [145, null], [149, null], [152, null], [154, null], [157, null], [158, null], [159, null], [188, null], [213, null], [252, null]], "Warning": [[195, null], [252, null]], "Sequences": [[255, "sequences"]], "Simulation": [[256, "simulation"]], "Channel models": [[256, "channel-models"]], "Signal impairments": [[256, "signal-impairments"]], "Synchronization": [[257, "synchronization"]], "Documentation": [[258, "documentation"]], "Install": [[258, "install"], [259, "install"], [261, "install"]], "Build the docs": [[258, "build-the-docs"]], "Serve the docs": [[258, "serve-the-docs"]], "Formatting": [[259, "formatting"]], "Run the linter": [[259, "run-the-linter"]], "Run the formatter": [[259, "run-the-formatter"]], "Pre-commit": [[259, "pre-commit"]], "Run from VS Code": [[259, "run-from-vs-code"], [261, "run-from-vs-code"]], "Installation": [[260, "installation"], [269, "installation"]], "Install from PyPI": [[260, "install-from-pypi"]], "Install from GitHub": [[260, "install-from-github"]], "Editable install from local folder": [[260, "editable-install-from-local-folder"]], "Install the dev dependencies": [[260, "install-the-dev-dependencies"]], "Unit Tests": [[261, "unit-tests"]], "Run from the command line": [[261, "run-from-the-command-line"]], "Farrow arbitrary resampler": [[262, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[262, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[262, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[262, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[262, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[262, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[262, "downsample-by-an-irrational-rate"]], "FIR filters": [[263, "fir-filters"]], "Create an FIR filter": [[263, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[263, "examine-the-impulse-response-h-n"], [264, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[263, "examine-the-step-response-s-n"], [264, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[263, "examine-the-frequency-response-h-omega"], [264, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[263, "examine-the-group-delay-tau-g-omega"], [264, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[263, "fully-analyze-a-fir-filter"]], "IIR filters": [[264, "iir-filters"]], "Create an IIR filter": [[264, "create-an-iir-filter"]], "Examine the zeros and poles": [[264, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[264, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[264, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[265, "peak-to-average-power"]], "QPSK signal with various pulse shapes": [[265, "qpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[265, "examine-time-domain"]], "Examine frequency domain": [[265, "examine-frequency-domain"]], "Plot across excess bandwidth": [[265, "plot-across-excess-bandwidth"]], "Phase-locked loops": [[266, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[266, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[266, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[266, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[266, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[266, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[266, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[266, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[267, "phase-shift-keying"]], "Constellations": [[267, "constellations"]], "BPSK": [[267, "bpsk"]], "QPSK": [[267, "qpsk"]], "8-PSK": [[267, "id1"]], "16-PSK": [[267, "id2"]], "Error rate curves": [[267, "error-rate-curves"]], "Bit error rate curves": [[267, "bit-error-rate-curves"]], "Symbol error rate curves": [[267, "symbol-error-rate-curves"]], "Pulse shapes": [[268, "pulse-shapes"]], "Raised cosine": [[268, "raised-cosine"]], "Square-root raised cosine": [[268, "square-root-raised-cosine"]], "Gaussian": [[268, "gaussian"]], "sdr": [[269, "sdr"]], "Features": [[269, "features"]], "v0.0": [[270, "v0-0"]], "v0.0.9": [[270, "v0-0-9"]], "Changes": [[270, "changes"], [270, "id1"], [270, "id3"], [270, "id5"], [270, "id7"], [270, "id9"], [270, "id11"], [270, "id13"], [270, "id15"]], "Contributors": [[270, "contributors"], [270, "id2"], [270, "id4"], [270, "id6"], [270, "id8"], [270, "id10"], [270, "id12"], [270, "id14"], [270, "id16"]], "v0.0.8": [[270, "v0-0-8"]], "v0.0.7": [[270, "v0-0-7"]], "v0.0.6": [[270, "v0-0-6"]], "v0.0.5": [[270, "v0-0-5"]], "v0.0.4": [[270, "v0-0-4"]], "v0.0.3": [[270, "v0-0-3"]], "v0.0.2": [[270, "v0-0-2"]], "v0.0.1": [[270, "v0-0-1"]], "Versioning": [[271, "versioning"]], "Alpha releases": [[271, "alpha-releases"]], "Beta releases": [[271, "beta-releases"]]}, "indexentries": {"module": [[3, "module-sdr"]], "sdr": [[3, "module-sdr"]]}, "docurls": ["api/conversions/", "api/data-manipulation/", "api/detection/", "api/dsp/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.Decimator/", "api/sdr.Decimator.__call__/", "api/sdr.Decimator.__init__/", "api/sdr.Decimator.__repr__/", "api/sdr.Decimator.__str__/", "api/sdr.Decimator.delay/", "api/sdr.Decimator.method/", "api/sdr.Decimator.polyphase_taps/", "api/sdr.Decimator.rate/", "api/sdr.Decimator.reset/", "api/sdr.Decimator.taps/", "api/sdr.Differentiator/", "api/sdr.Differentiator.__init__/", "api/sdr.EnergyDetector/", "api/sdr.EnergyDetector.p_d/", "api/sdr.EnergyDetector.p_fa/", "api/sdr.EnergyDetector.roc/", "api/sdr.EnergyDetector.threshold/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__call__/", "api/sdr.FIR.__init__/", "api/sdr.FIR.__len__/", "api/sdr.FIR.__repr__/", "api/sdr.FIR.__str__/", "api/sdr.FIR.delay/", "api/sdr.FIR.flush/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.frequency_response_log/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.reset/", "api/sdr.FIR.state/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__call__/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__call__/", "api/sdr.IIR.__init__/", "api/sdr.IIR.__repr__/", "api/sdr.IIR.__str__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.state/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.Integrator/", "api/sdr.Integrator.__init__/", "api/sdr.Interpolator/", "api/sdr.Interpolator.__call__/", "api/sdr.Interpolator.__init__/", "api/sdr.Interpolator.__repr__/", "api/sdr.Interpolator.__str__/", "api/sdr.Interpolator.delay/", "api/sdr.Interpolator.method/", "api/sdr.Interpolator.polyphase_taps/", "api/sdr.Interpolator.rate/", "api/sdr.Interpolator.reset/", "api/sdr.Interpolator.taps/", "api/sdr.LinearModulation/", "api/sdr.LinearModulation.__init__/", "api/sdr.LinearModulation.__repr__/", "api/sdr.LinearModulation.__str__/", "api/sdr.LinearModulation.ber/", "api/sdr.LinearModulation.bps/", "api/sdr.LinearModulation.decide_symbols/", "api/sdr.LinearModulation.demodulate/", "api/sdr.LinearModulation.map_symbols/", "api/sdr.LinearModulation.modulate/", "api/sdr.LinearModulation.order/", "api/sdr.LinearModulation.phase_offset/", "api/sdr.LinearModulation.pulse_shape/", "api/sdr.LinearModulation.rx_filter/", "api/sdr.LinearModulation.ser/", "api/sdr.LinearModulation.sps/", "api/sdr.LinearModulation.symbol_map/", "api/sdr.LinearModulation.tx_filter/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__call__/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.MSK/", "api/sdr.MSK.__init__/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__call__/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.OQPSK/", "api/sdr.OQPSK.__init__/", "api/sdr.OQPSK.__repr__/", "api/sdr.OQPSK.__str__/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.__repr__/", "api/sdr.PSK.__str__/", "api/sdr.PSK.ber/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.PiMPSK/", "api/sdr.PiMPSK.__init__/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.ReplicaCorrelator/", "api/sdr.ReplicaCorrelator.p_d/", "api/sdr.ReplicaCorrelator.p_fa/", "api/sdr.ReplicaCorrelator.roc/", "api/sdr.ReplicaCorrelator.threshold/", "api/sdr.Resampler/", "api/sdr.Resampler.__call__/", "api/sdr.Resampler.__init__/", "api/sdr.Resampler.__repr__/", "api/sdr.Resampler.__str__/", "api/sdr.Resampler.delay/", "api/sdr.Resampler.down/", "api/sdr.Resampler.method/", "api/sdr.Resampler.polyphase_taps/", "api/sdr.Resampler.rate/", "api/sdr.Resampler.reset/", "api/sdr.Resampler.taps/", "api/sdr.Resampler.up/", "api/sdr.albersheim/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.barker/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.db/", "api/sdr.design_bandpass_fir/", "api/sdr.design_lowpass_fir/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.downsample/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.evm/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.half_sine/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.linear/", "api/sdr.mix/", "api/sdr.multirate_taps/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.percent/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.eye/", "api/sdr.plot.filter/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.magnitude_response/", "api/sdr.plot.p_d/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.phase_tree/", "api/sdr.plot.raster/", "api/sdr.plot.roc/", "api/sdr.plot.ser/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.polyphase_matrix/", "api/sdr.ppb/", "api/sdr.ppm/", "api/sdr.raised_cosine/", "api/sdr.rectangular/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.to_complex_bb/", "api/sdr.to_real_pb/", "api/sdr.unpack/", "api/sdr.upsample/", "api/sdr.wavelength/", "api/sdr.zadoff_chu/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/formatting/", "development/installation/", "development/unit-tests/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})