Search.setIndex({"titles": ["Conversions", "Data manipulation", "Digital signal processing", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.DDS", "sdr.DDS.__call__", "sdr.DDS.__init__", "sdr.DDS.nco", "sdr.DDS.reset", "sdr.DDS.step", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__call__", "sdr.FIR.__init__", "sdr.FIR.__len__", "sdr.FIR.__repr__", "sdr.FIR.__str__", "sdr.FIR.delay", "sdr.FIR.frequency_response", "sdr.FIR.frequency_response_log", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.reset", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FIRInterpolator", "sdr.FIRInterpolator.__call__", "sdr.FIRInterpolator.__init__", "sdr.FIRInterpolator.__repr__", "sdr.FIRInterpolator.__str__", "sdr.FIRInterpolator.method", "sdr.FIRInterpolator.polyphase_taps", "sdr.FIRInterpolator.rate", "sdr.FIRInterpolator.reset", "sdr.FIRInterpolator.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__call__", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__call__", "sdr.IIR.__init__", "sdr.IIR.__repr__", "sdr.IIR.__str__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__call__", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__call__", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.reset", "sdr.NCO.step", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.ber", "sdr.PSK.bps", "sdr.PSK.demodulate", "sdr.PSK.modulate", "sdr.PSK.order", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.Q", "sdr.Qinv", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.barker", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.db", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.evm", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.hexdump", "sdr.iq_imbalance", "sdr.linear", "sdr.mix", "sdr.multirate_fir", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.filter", "sdr.plot.frequency_response", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.ser", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.raised_cosine", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.to_complex_bb", "sdr.to_real_pb", "sdr.unpack", "sdr.zadoff_chu", "Sequences", "Simulation", "Synchronization", "Documentation", "Installation", "Linter", "Unit Tests", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193], "db": [0, 3, 8, 19, 21, 31, 33, 34, 35, 37, 107, 113, 118, 119, 127, 131, 132, 134, 135, 136, 138, 139, 142, 143, 145, 147, 148, 151, 152, 160, 171, 172, 187, 189, 190], "x": [0, 1, 2, 4, 5, 6, 7, 8, 25, 26, 31, 33, 38, 39, 53, 54, 63, 64, 70, 72, 88, 91, 97, 99, 105, 109, 110, 115, 116, 117, 118, 121, 124, 126, 127, 128, 129, 130, 133, 136, 137, 142, 143, 144, 146, 147, 149, 150, 152, 153, 154, 155, 157, 158, 159, 161, 163, 164, 168, 170, 175, 178, 181, 187, 188, 189, 193], "arraylik": [0, 1, 2, 3, 4, 5, 6, 7, 25, 26, 31, 33, 38, 39, 40, 53, 54, 55, 63, 64, 67, 70, 71, 72, 73, 88, 91, 97, 99, 105, 106, 107, 109, 110, 113, 115, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 168, 170, 171, 172, 173, 174, 175, 178], "ndarrai": [0, 1, 2, 3, 5, 7, 25, 26, 30, 31, 36, 38, 39, 45, 46, 47, 50, 52, 53, 54, 59, 62, 63, 64, 69, 70, 72, 76, 77, 78, 79, 81, 83, 85, 87, 88, 91, 97, 99, 104, 105, 107, 109, 110, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178], "convert": [0, 2, 127, 131, 132, 134, 135, 141, 143, 171, 172, 173, 174], "linear": [0, 53, 55, 58, 105, 118, 127, 143, 157, 161], "unit": [0, 25, 38, 50, 53, 70, 85, 88, 97, 100, 101, 102, 106, 117, 118, 119, 127, 128, 129, 133, 143, 149, 150, 162, 164, 167, 168, 169, 181, 185, 186, 188], "ebn0_to_esn0": [0, 113, 131, 189, 191, 192], "ebn0": [0, 6, 105, 107, 119, 131, 132, 151, 189], "bp": [0, 105, 108, 131, 132, 134, 171, 189], "int": [0, 1, 2, 5, 25, 30, 31, 33, 34, 37, 38, 41, 44, 45, 46, 47, 48, 50, 53, 55, 60, 63, 66, 70, 78, 79, 81, 82, 85, 97, 104, 105, 106, 108, 111, 118, 120, 123, 128, 129, 131, 132, 134, 135, 139, 140, 141, 145, 146, 153, 154, 155, 156, 157, 158, 159, 161, 162, 167, 169, 171, 172, 175, 176, 177, 189], "ebn0_to_snr": [0, 132, 191, 192], "esn0_to_ebn0": [0, 107, 134, 191, 192], "esn0": [0, 6, 105, 113, 134, 135, 160, 189], "esn0_to_snr": [0, 135, 189, 191, 192], "sp": [0, 5, 132, 135, 139, 167, 169, 171, 172, 173, 174, 187, 189, 190], "1": [0, 2, 6, 7, 8, 15, 18, 22, 24, 25, 27, 31, 42, 43, 45, 46, 53, 55, 56, 57, 59, 62, 70, 71, 74, 75, 78, 79, 88, 92, 93, 97, 100, 105, 106, 107, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 184, 185, 186, 187, 188, 189, 190, 193], "snr_to_ebn0": [0, 107, 119, 171, 191, 192], "snr": [0, 3, 31, 33, 34, 35, 36, 37, 118, 119, 171, 172, 173, 174, 178, 189, 192], "snr_to_esn0": [0, 113, 172, 191, 192], "hexdump": [1, 31, 141, 191, 192], "byte": [1, 141], "width": [1, 141], "16": [1, 107, 113, 114, 131, 132, 134, 136, 141, 151, 160, 171, 172, 187, 192], "str": [1, 38, 42, 43, 53, 56, 57, 70, 74, 75, 141, 157, 161], "return": [1, 5, 8, 16, 18, 21, 22, 26, 30, 31, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 50, 53, 54, 56, 57, 64, 70, 72, 74, 75, 78, 79, 81, 85, 91, 99, 104, 107, 109, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 185, 186, 187, 189], "specifi": [1, 31, 34, 35, 37, 118, 119, 130, 141, 185, 186], "pack": [1, 31, 33, 141, 146, 191, 192], "bpe": [1, 146, 175], "binari": [1, 3, 5, 106, 114, 120, 121, 122, 123, 124, 125, 130, 146, 163, 175, 178, 189, 192], "arrai": [1, 31, 53, 55, 59, 62, 106, 114, 120, 121, 123, 124, 128, 129, 130, 140, 146, 164, 175, 186], "an": [1, 2, 3, 38, 47, 53, 70, 71, 73, 81, 106, 107, 113, 119, 146, 151, 156, 160, 175, 181, 182, 191], "multipl": [1, 146, 175, 189], "bit": [1, 4, 6, 31, 33, 36, 105, 106, 107, 108, 114, 119, 121, 122, 124, 125, 131, 132, 134, 141, 146, 151, 171, 175, 192], "per": [1, 26, 99, 105, 106, 108, 118, 119, 131, 132, 134, 135, 137, 139, 141, 146, 152, 167, 169, 170, 171, 172, 175, 187, 190], "element": [1, 141, 146, 175], "unpack": [1, 31, 33, 141, 175, 189, 191, 192], "class": [2, 4, 8, 25, 31, 33, 34, 35, 36, 37, 38, 53, 63, 70, 88, 97, 105, 179, 185, 186, 189, 191], "fir": [2, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 145, 153, 154, 155, 156, 158, 159, 162, 166, 187, 191, 192], "implement": [2, 5, 25, 38, 53, 63, 70, 88, 94, 97, 105, 179, 184], "finit": [2, 38, 53, 192], "impuls": [2, 6, 38, 47, 53, 70, 81, 139, 153, 156, 164, 190, 192], "respons": [2, 6, 38, 45, 46, 47, 50, 53, 70, 78, 79, 81, 85, 139, 153, 154, 155, 156, 159, 162, 190, 192], "iir": [2, 6, 8, 17, 46, 47, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94, 153, 154, 155, 156, 158, 159, 162, 166, 185, 188, 191, 192], "infinit": [2, 70, 192], "firinterpol": [2, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 145, 187, 189, 191, 192], "polyphas": [2, 53, 55, 59, 62, 145], "interpol": [2, 53, 54, 55, 60, 145, 192], "multirate_fir": [2, 55, 145], "p": [2, 3, 7, 115, 116, 121, 122, 124, 125, 130, 145, 178], "q": [2, 7, 115, 116, 145, 176, 191, 192], "comput": [2, 7, 105, 107, 113, 115, 116, 118, 138, 145, 185, 186, 188, 190], "achiev": [2, 145, 189, 190], "ration": [2, 145], "farrowresampl": [2, 63, 64, 65, 66, 67, 68, 69, 184, 191, 192], "cubic": [2, 63], "farrow": [2, 63, 64, 65, 66, 67, 68, 69, 192], "arbitrari": [2, 63, 64, 65, 66, 67, 68, 69, 192], "mix": [2, 144, 191, 192], "freq": [2, 3, 137, 144, 148, 178, 184, 188], "float": [2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 31, 33, 34, 35, 37, 45, 46, 63, 64, 70, 71, 78, 79, 80, 88, 89, 90, 92, 93, 95, 97, 98, 100, 101, 102, 105, 106, 112, 117, 118, 119, 121, 124, 126, 133, 136, 137, 139, 142, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 157, 158, 159, 161, 163, 164, 167, 168, 169, 170, 178], "0": [2, 5, 6, 7, 15, 25, 27, 31, 38, 42, 43, 45, 46, 53, 55, 59, 62, 70, 71, 74, 75, 78, 79, 92, 97, 100, 105, 106, 109, 110, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 132, 133, 135, 136, 137, 139, 140, 142, 143, 144, 146, 148, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 181, 184, 185, 186, 187, 188, 189, 190, 193], "time": [2, 4, 8, 15, 16, 18, 19, 20, 21, 22, 38, 70, 88, 92, 105, 117, 118, 126, 130, 133, 135, 137, 139, 142, 144, 147, 149, 150, 153, 157, 161, 164, 167, 168, 169, 170, 172, 173, 174, 178, 184, 185, 186, 190, 191], "domain": [2, 4, 117, 118, 126, 133, 137, 142, 144, 147, 149, 150, 153, 157, 161, 164, 168, 170, 173, 174, 178, 191], "n": [2, 4, 5, 6, 7, 8, 25, 26, 30, 33, 34, 35, 36, 37, 38, 39, 41, 45, 46, 47, 48, 50, 53, 54, 63, 64, 70, 72, 78, 79, 81, 82, 85, 88, 91, 97, 99, 104, 115, 116, 117, 118, 119, 120, 123, 126, 130, 131, 132, 133, 134, 135, 136, 137, 140, 142, 144, 145, 147, 149, 150, 153, 154, 155, 156, 157, 158, 159, 161, 162, 164, 168, 170, 171, 172, 173, 174, 176, 177, 178, 188, 190, 191], "complex": [2, 4, 6, 25, 26, 30, 105, 106, 109, 110, 114, 118, 119, 136, 142, 144, 152, 163, 164, 173, 174, 178, 184, 185, 186, 189, 192], "exponenti": [2, 25, 26, 30, 144, 173, 174, 184, 185, 186], "to_complex_bb": [2, 173, 191, 192], "x_r": [2, 173, 174], "real": [2, 115, 116, 118, 164, 173, 174, 184, 185, 186, 188, 192], "passband": [2, 139, 173, 174, 187, 192], "center": [2, 164, 173, 174], "f_": [2, 8, 15, 23, 45, 46, 54, 78, 79, 132, 135, 137, 139, 144, 153, 154, 155, 157, 158, 159, 161, 164, 170, 171, 172, 173, 174, 184, 185, 186, 188, 190], "": [2, 6, 8, 16, 18, 19, 20, 22, 23, 33, 34, 35, 36, 37, 38, 45, 46, 50, 53, 70, 78, 79, 85, 105, 109, 110, 118, 119, 132, 135, 136, 137, 142, 152, 153, 154, 155, 157, 158, 159, 161, 162, 164, 165, 170, 171, 172, 173, 174, 183, 184, 187, 189, 191], "r": [2, 53, 54, 55, 59, 60, 62, 63, 64, 119, 131, 132, 134, 136, 139, 144, 167, 169, 171, 173, 174, 180, 181, 182, 183, 186, 187, 188, 190], "4": [2, 16, 18, 31, 46, 53, 59, 62, 74, 75, 79, 107, 112, 113, 114, 118, 119, 120, 122, 123, 125, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 148, 151, 152, 153, 154, 155, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 180, 181, 184, 186, 187, 189], "sampl": [2, 8, 15, 23, 25, 26, 27, 30, 38, 44, 45, 46, 47, 50, 53, 54, 55, 63, 67, 78, 79, 81, 85, 88, 92, 95, 97, 99, 100, 101, 104, 118, 132, 135, 137, 139, 144, 153, 154, 155, 156, 157, 158, 159, 161, 162, 164, 167, 169, 170, 171, 172, 173, 174, 178, 184, 187, 188, 190], "rate": [2, 4, 6, 8, 15, 23, 31, 32, 33, 35, 36, 45, 46, 53, 54, 55, 57, 60, 63, 64, 78, 79, 105, 107, 113, 131, 132, 134, 137, 144, 145, 151, 153, 154, 155, 157, 158, 159, 160, 161, 164, 170, 171, 173, 174, 178, 192], "baseband": [2, 8, 144, 173, 174, 187, 188, 192], "x_c": [2, 173, 174], "c": [2, 8, 16, 18, 19, 20, 21, 22, 33, 34, 35, 36, 37, 88, 105, 114, 119, 122, 125, 138, 148, 173, 174, 188], "2": [2, 5, 8, 16, 18, 21, 31, 42, 43, 45, 46, 53, 56, 57, 59, 62, 74, 75, 78, 79, 105, 106, 107, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 181, 183, 184, 185, 186, 187, 188, 189, 190], "to_real_pb": [2, 174, 187, 191, 192], "2f_": [2, 174], "awgn_capac": [3, 119, 191, 192], "calcul": [3, 4, 119, 122, 125, 136, 138, 148], "addit": [3, 118, 119, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 178], "white": [3, 118, 119, 178], "gaussian": [3, 5, 118, 119, 139, 178, 191, 192], "nois": [3, 8, 9, 10, 15, 21, 31, 33, 34, 35, 36, 37, 88, 92, 95, 107, 113, 118, 119, 131, 132, 134, 135, 151, 160, 171, 172, 178, 188], "awgn": [3, 107, 113, 118, 119, 136, 151, 152, 160, 173, 174, 178, 189, 191, 192], "bec_capac": [3, 122, 191, 192], "erasur": [3, 121, 122, 130, 178], "bec": [3, 121, 122, 130, 178, 191, 192], "bsc_capac": [3, 125, 191, 192], "symmetr": [3, 124, 125, 130, 173, 174, 178], "bsc": [3, 124, 125, 130, 178, 191, 192], "fspl": [3, 138, 191], "d": [3, 138, 148, 180, 181, 191], "f": [3, 16, 18, 38, 45, 46, 53, 70, 78, 79, 118, 137, 138, 139, 144, 148, 170, 176, 184, 185, 186, 187, 188, 189, 190], "free": [3, 138], "space": [3, 46, 79, 138], "parabolic_antenna": [3, 148, 191, 192], "tupl": [3, 31, 33, 36, 38, 45, 46, 53, 70, 78, 79, 148, 152, 153, 154, 155, 156, 158, 159, 162, 163, 166], "gain": [3, 8, 11, 12, 13, 14, 15, 25, 27, 70, 71, 80, 88, 89, 90, 92, 97, 98, 100, 139, 148, 188], "g": [3, 36, 148, 181], "beamwidth": [3, 148], "theta": [3, 6, 27, 97, 100, 102, 148, 159], "parabol": [3, 148], "reflector": [3, 148], "signal": [4, 6, 8, 16, 18, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 38, 39, 53, 54, 63, 64, 70, 72, 88, 91, 97, 99, 104, 117, 118, 119, 126, 127, 131, 132, 133, 134, 135, 137, 138, 139, 142, 143, 144, 145, 147, 148, 149, 150, 157, 161, 164, 168, 170, 171, 172, 173, 174, 185, 186, 188, 190, 191, 192], "average_pow": [4, 117, 147, 191, 192], "averag": [4, 31, 117, 118, 119, 136, 147, 157], "papr": [4, 147, 187, 191, 192], "peak": [4, 126, 136, 147, 149, 150], "ratio": [4, 21, 31, 33, 34, 35, 36, 37, 107, 113, 118, 119, 131, 132, 134, 135, 147, 151, 160, 171, 172], "peak_pow": [4, 147, 149, 191, 192], "crest_factor": [4, 126, 147, 191, 192], "crest": [4, 126], "factor": [4, 8, 15, 24, 88, 92, 93, 126, 188], "peak_voltag": [4, 126, 150, 191, 192], "rms_voltag": [4, 126, 168, 191, 192], "root": [4, 5, 136, 164, 168, 169, 176, 177, 185], "mean": [4, 136, 157, 161, 168, 190], "squar": [4, 5, 136, 138, 148, 164, 168, 169, 185], "rm": [4, 126, 136, 168], "errorr": [4, 31, 32, 33, 34, 35, 36, 37, 189, 191, 192], "A": [4, 8, 16, 18, 19, 20, 21, 22, 24, 31, 38, 88, 123, 140, 141, 142, 148, 167, 169, 179, 188], "error": [4, 6, 8, 14, 15, 21, 31, 32, 33, 35, 36, 37, 88, 92, 105, 107, 113, 125, 136, 151, 160, 188, 192], "ber": [4, 6, 31, 105, 107, 151, 189, 191, 192], "symbol": [4, 6, 31, 33, 36, 105, 106, 107, 108, 109, 110, 113, 114, 118, 131, 132, 134, 135, 136, 137, 139, 152, 160, 163, 167, 169, 171, 172, 187, 190, 191, 192], "ser": [4, 6, 31, 105, 113, 160, 189, 191, 192], "evm": [4, 136, 191, 192], "x_hat": [4, 6, 31, 33, 105, 109, 136, 152, 189], "ref": [4, 136, 139, 145], "vector": [4, 31, 67, 136, 157, 161, 192], "magnitud": [4, 120, 136, 176, 192], "hat": [4, 6, 33, 105, 109, 136, 152, 163], "k": [4, 5, 6, 33, 105, 106, 108, 109, 110, 111, 128, 129, 131, 132, 134, 136, 152, 163, 171, 187, 190], "psk": [5, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 136, 137, 142, 151, 152, 160, 163, 170, 187, 191, 192], "phase": [5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 112, 113, 114, 137, 142, 144, 158, 159, 178], "shift": [5, 105, 107, 112, 113, 114, 176, 177, 185, 186], "kei": [5, 105, 107, 112, 113, 114], "demodul": [5, 105, 109, 189], "time_bandwidth": [5, 139], "span": [5, 139, 167, 169, 187, 190], "raised_cosin": [5, 167, 190, 191, 192], "alpha": [5, 139, 165, 167, 169, 187, 190], "rais": [5, 164, 167, 169, 185], "cosin": [5, 164, 167, 169, 185], "rc": [5, 167], "root_raised_cosin": [5, 42, 43, 153, 154, 155, 156, 158, 159, 162, 164, 166, 169, 185, 187, 189, 190, 191, 192], "srrc": [5, 164, 169, 187], "binary_cod": [5, 123, 191, 192], "gener": [5, 118, 123, 140, 180, 189], "code": [5, 38, 42, 53, 56, 70, 74, 106, 114, 120, 123, 131, 132, 134, 140, 152, 163, 171, 177, 181, 189, 192], "length": [5, 38, 41, 47, 50, 53, 55, 106, 120, 123, 139, 140, 145, 153, 156, 157, 161, 162, 167, 169, 173, 176, 177, 182, 184, 187, 190], "gray_cod": [5, 140, 191, 192], "grai": [5, 106, 114, 140, 152, 163, 189], "diff_decod": [5, 128, 129, 191, 192], "y": [5, 25, 26, 30, 38, 39, 53, 54, 64, 70, 72, 88, 91, 97, 99, 104, 118, 121, 124, 128, 129, 130, 137, 142, 144, 152, 161, 163, 164, 170, 188, 189], "y_prev": [5, 128, 129], "differenti": [5, 107, 113, 128, 129, 164, 192], "decod": [5, 128], "input": [5, 8, 16, 18, 21, 22, 25, 26, 38, 39, 40, 47, 50, 53, 54, 55, 63, 64, 65, 67, 70, 71, 72, 73, 81, 85, 88, 91, 97, 99, 105, 107, 113, 115, 118, 119, 121, 122, 124, 125, 127, 128, 129, 130, 143, 146, 156, 162, 175, 178, 185, 186, 188], "data": [5, 128, 129, 141, 146, 175, 191], "diff_encod": [5, 107, 113, 128, 129, 191, 192], "use_styl": [6, 165], "appli": [6, 53, 137, 142, 152, 157, 161, 163, 164, 165, 170, 178], "default": [6, 47, 50, 106, 114, 152, 161, 163, 165, 189], "matplotlib": [6, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 184, 185, 186, 187, 188, 189, 190, 191], "rcparam": [6, 165], "time_domain": [6, 53, 118, 144, 164, 173, 174, 187, 189, 190, 191, 192], "sample_r": [6, 8, 15, 23, 45, 46, 53, 78, 79, 137, 144, 153, 154, 155, 157, 158, 159, 161, 164, 173, 174, 184, 188, 190], "periodogram": [6, 157, 173, 174, 187, 191, 192], "power": [6, 105, 117, 118, 119, 127, 136, 143, 147, 148, 149, 157, 190, 191], "densiti": [6, 21, 157, 187, 190], "p_": [6, 107, 113, 117, 118, 127, 130, 136, 143, 147, 149, 151, 157, 160], "xx": [6, 157], "us": [6, 25, 28, 40, 53, 55, 58, 63, 65, 71, 73, 88, 94, 105, 109, 119, 122, 125, 136, 141, 145, 146, 152, 153, 156, 157, 161, 162, 175, 180, 181, 182, 183, 185, 186, 189, 190, 191, 193], "welch": [6, 157, 161], "method": [6, 57, 58, 157, 161, 182, 185, 186], "spectrogram": [6, 161, 191, 192], "kwarg": [6, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166], "function": [6, 7, 8, 17, 38, 70, 71, 88, 115, 116, 119, 139, 151, 157, 160, 161, 182, 185, 186, 188, 190, 191, 192], "e_b": [6, 33, 34, 35, 36, 37, 105, 107, 119, 131, 132, 134, 151, 171, 191], "n_0": [6, 21, 33, 34, 35, 36, 37, 105, 107, 113, 118, 119, 131, 132, 134, 135, 136, 151, 152, 160, 171, 172, 189, 191], "constel": [6, 112, 118, 136, 137, 142, 152, 170, 176, 191, 192], "heatmap": [6, 152, 189], "bool": [6, 38, 40, 51, 53, 55, 63, 65, 68, 70, 71, 73, 86, 107, 113, 152, 159, 163, 164], "fals": [6, 38, 40, 42, 43, 53, 55, 56, 57, 63, 65, 70, 71, 73, 74, 75, 107, 113, 121, 124, 130, 152, 157, 161, 164, 186, 190], "e_": [6, 33, 34, 35, 36, 37, 105, 113, 118, 119, 131, 134, 135, 136, 152, 160, 172, 189, 191], "symbol_map": [6, 105, 112, 114, 136, 163, 164, 189, 191, 192], "map": [6, 105, 114, 136, 163, 191, 192], "h": [6, 38, 40, 42, 43, 45, 46, 47, 53, 70, 78, 79, 81, 88, 139, 145, 153, 154, 156, 187, 188, 190], "omega": [6, 27, 97, 100, 101, 153, 154, 155, 158, 159, 188], "step": [6, 25, 26, 30, 38, 50, 53, 70, 85, 97, 99, 104, 153, 162], "zero": [6, 53, 55, 67, 70, 71, 74, 75, 87, 88, 146, 153, 154, 155, 156, 158, 159, 162, 164, 166, 173, 185, 187, 188, 190], "pole": [6, 70, 71, 74, 75, 83, 153, 154, 155, 156, 158, 159, 162, 166, 185], "frequency_respons": [6, 38, 45, 46, 53, 70, 78, 79, 145, 154, 185, 186, 188, 190, 191, 192], "group_delai": [6, 155, 185, 186, 191, 192], "group": [6, 155], "delai": [6, 25, 38, 43, 44, 53, 57, 63, 88, 97, 128, 129, 155, 158, 188], "tau_g": [6, 155], "impulse_respons": [6, 38, 47, 53, 70, 81, 139, 145, 156, 167, 169, 185, 186, 190, 191, 192], "phase_delai": [6, 158, 191, 192], "tau_": [6, 158], "phi": [6, 105, 106, 112, 137, 142, 144, 158], "phase_respons": [6, 159, 191, 192], "step_respons": [6, 38, 50, 53, 70, 85, 162, 185, 186, 188, 191, 192], "zeros_pol": [6, 166, 186, 191, 192], "complementari": [7, 115, 116], "cumul": [7, 115, 116], "distribut": [7, 115, 116], "standard": [7, 115, 116], "normal": [7, 8, 10, 15, 88, 92, 95, 115, 116, 136, 139, 161, 188, 190], "mathcal": [7, 115, 116, 118, 130], "qinv": [7, 115, 116, 191, 192], "invers": [7, 116], "closedlooppl": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 179, 188, 191, 192], "defin": [8, 38, 70, 118, 130, 139, 176, 179, 186, 191], "perform": [8, 107, 113, 176, 179, 185, 186, 189, 191], "close": [8, 15, 17, 179, 192], "loop": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 179, 192], "pll": [8, 9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 179, 192], "thi": [8, 26, 33, 34, 35, 37, 38, 53, 70, 99, 105, 114, 118, 119, 136, 145, 157, 161, 164, 180, 181, 182, 183, 184, 186, 188, 189, 190], "i": [8, 15, 24, 31, 36, 38, 47, 50, 51, 53, 55, 59, 62, 63, 68, 70, 81, 85, 86, 88, 92, 93, 95, 105, 106, 115, 116, 118, 119, 122, 125, 127, 130, 131, 132, 134, 135, 137, 138, 139, 141, 142, 143, 146, 148, 152, 153, 156, 157, 161, 162, 164, 167, 169, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193], "meant": 8, "analysi": [8, 15, 182, 188, 192], "onli": [8, 38, 49, 53, 61, 63, 67, 70, 84, 106, 114, 118, 183, 188, 189], "block": [8, 25, 53, 88, 97, 128, 129], "diagram": [8, 25, 53, 88, 97, 128, 129], "bb": [8, 187, 188], "ped": [8, 14, 15, 92, 188], "lf": [8, 188], "lo": [8, 188], "e": [8, 25, 36, 117, 121, 122, 133, 176, 181, 185, 186, 188, 189], "j": [8, 25, 53, 59, 62, 70, 105, 118, 130, 142, 144, 176, 185, 186, 188], "nco": [8, 11, 15, 25, 27, 28, 92, 97, 98, 99, 100, 101, 102, 103, 104, 179, 188, 191, 192], "local": [8, 180, 182, 188], "oscil": [8, 25, 28, 97, 100, 179, 188, 192], "detector": [8, 14, 15, 92, 188], "filter": [8, 12, 13, 15, 17, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 61, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 139, 145, 153, 154, 155, 156, 158, 159, 162, 164, 166, 167, 169, 179, 190, 191, 192], "numer": [8, 25, 28, 97, 100, 179, 186, 188, 192], "control": [8, 25, 28, 97, 100, 179, 188, 192], "The": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 58, 59, 60, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 185, 186, 188, 189, 190, 191, 193], "transfer": [8, 17, 38, 70, 71, 88, 139, 185, 186, 188], "2nd": [8, 88, 92, 179, 188, 192], "order": [8, 31, 36, 38, 43, 48, 53, 55, 57, 63, 66, 70, 75, 82, 88, 92, 105, 106, 111, 118, 131, 132, 134, 136, 137, 139, 152, 167, 169, 170, 171, 179, 187, 188, 189, 192], "proport": [8, 12, 88, 89, 92, 138, 148, 179, 192], "plu": [8, 88, 92, 179, 192], "integr": [8, 13, 88, 90, 92, 179, 183, 186, 192], "h_": [8, 53, 59, 62, 188], "z": [8, 25, 38, 70, 88, 97, 128, 129, 176, 185, 186, 188], "k_1": [8, 12, 88, 89, 188], "k_2": [8, 13, 88, 90, 188], "frac": [8, 16, 18, 21, 22, 55, 70, 88, 105, 117, 118, 119, 126, 131, 132, 134, 135, 136, 138, 139, 142, 143, 144, 147, 148, 168, 171, 172, 176, 188], "k_0": [8, 11, 15, 27, 92, 97, 98, 100, 188], "k_p": [8, 14, 15, 92, 188], "refer": [8, 16, 18, 19, 20, 21, 22, 31, 63, 88, 107, 113, 118, 126, 136, 137, 139, 145, 147, 167, 169, 170, 176, 186, 190], "michael": [8, 16, 18, 19, 20, 21, 22, 88, 167, 169], "rice": [8, 16, 18, 19, 20, 21, 22, 88, 167, 169], "digit": [8, 16, 18, 19, 20, 21, 22, 25, 27, 88, 107, 113, 167, 169, 179, 188, 191, 192], "commun": [8, 16, 18, 19, 20, 21, 22, 88, 107, 113, 145, 167, 169, 188, 191], "discret": [8, 16, 18, 19, 20, 21, 22, 88, 118, 130, 135, 167, 169, 172, 178, 184, 188], "approach": [8, 16, 18, 19, 20, 21, 22, 88, 119, 122, 125, 167, 169, 188], "appendix": [8, 88, 167, 169], "lock": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "exampl": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 151, 152, 153, 154, 155, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 188], "see": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 44, 48, 49, 51, 52, 54, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 112, 114, 139, 167, 169, 191], "noise_bandwidth": [8, 15, 88, 92, 95], "damping_factor": [8, 15, 88, 92, 93], "creat": [8, 15, 25, 27, 31, 32, 38, 40, 53, 55, 63, 65, 70, 71, 73, 88, 92, 97, 100, 105, 106, 112, 118, 120, 136, 137, 144, 164, 170, 173, 174, 176, 184, 188, 190], "object": [8, 15, 31, 32, 38, 42, 43, 53, 56, 57, 70, 74, 75, 105, 106, 153, 154, 155, 156, 158, 159, 162, 166, 186, 188], "frequency_lock_tim": [8, 16], "freq_offset": [8, 16, 18], "frequenc": [8, 16, 18, 20, 38, 45, 46, 53, 70, 78, 79, 88, 137, 138, 144, 148, 153, 154, 155, 157, 158, 159, 161, 173, 174, 178, 190, 192], "lock_tim": [8, 18, 188], "phase_error_vari": [8, 21], "cn0": [8, 21], "varianc": [8, 21, 118], "steadi": [8, 21], "state": [8, 21, 38, 49, 51, 53, 61, 63, 67, 68, 70, 84, 86], "phase_lock_tim": [8, 22], "bn": [8, 9], "bandwidth": [8, 9, 10, 15, 19, 88, 92, 95, 119, 139, 167, 169, 188, 190], "b_n": [8, 9, 10, 15, 16, 18, 21, 22, 88, 92, 95], "hz": [8, 9, 15, 16, 18, 21, 45, 46, 78, 79, 88, 92, 95, 119, 127, 137, 138, 139, 143, 144, 148, 173, 174, 184], "bnt": [8, 10, 188], "t": [8, 10, 15, 88, 92, 95, 139, 141, 182, 184], "repres": [8, 17, 121, 122], "k0": [8, 11, 15, 25, 27, 92, 97, 98, 100], "k1": [8, 12, 88, 89, 188], "k2": [8, 13, 88, 90, 188], "kp": [8, 14, 15, 92], "omega_3db": [8, 19], "3": [8, 16, 18, 19, 22, 31, 42, 43, 53, 59, 62, 74, 75, 107, 112, 113, 114, 118, 119, 120, 121, 123, 124, 127, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 153, 154, 155, 156, 158, 159, 162, 164, 166, 170, 171, 173, 174, 175, 176, 186, 188, 190, 191], "omega_": [8, 19], "textrm": [8, 19], "radian": [8, 19, 20, 21, 25, 27, 188], "omega_n": [8, 20, 188], "natur": [8, 20], "zeta": [8, 15, 24, 88, 92, 93], "damp": [8, 15, 24, 88, 92, 93, 188], "properti": [9, 10, 11, 12, 13, 14, 17, 19, 20, 23, 24, 28, 44, 48, 51, 52, 58, 59, 60, 62, 66, 68, 69, 76, 77, 80, 82, 83, 86, 87, 89, 90, 93, 94, 95, 98, 101, 102, 108, 111, 112, 114, 182], "paramet": [15, 16, 18, 21, 26, 27, 30, 33, 34, 35, 37, 39, 40, 45, 46, 47, 50, 54, 55, 64, 65, 67, 71, 72, 73, 78, 79, 81, 85, 91, 92, 99, 100, 104, 106, 107, 109, 110, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176], "where": [15, 88, 92, 95, 106, 118, 119, 130, 131, 132, 134, 139, 171, 176, 185, 186, 191], "period": [15, 88, 92, 95, 176], "second": [15, 16, 18, 22, 31, 88, 92, 95, 139], "critic": [15, 24, 88, 92, 93, 188], "underdamp": [15, 24, 88, 92, 93], "overdamp": [15, 24, 88, 92, 93], "ted": [15, 92], "t_": [16, 18, 22, 64, 139, 190], "fl": [16, 18], "delta": [16, 18, 38, 47, 53, 70, 81, 156, 185, 186], "offset": [16, 18, 25, 27, 53, 97, 100, 102, 105, 106, 112, 137, 144, 164, 170, 178, 188], "take": [16, 18, 22], "onto": [16, 18, 22], "equat": [16, 18, 19, 20, 21, 22, 70, 105], "39": 16, "pl": [18, 22], "38": 18, "34": 19, "33": 20, "sigma_": 21, "theta_": 21, "carrier": [21, 105], "43": 21, "40": [22, 53], "less": 24, "than": [24, 106, 114, 142, 152, 163], "greater": 24, "dd": [25, 26, 27, 28, 29, 30, 97, 179, 188, 191, 192], "direct": [25, 27, 179, 188, 192], "synthes": [25, 27, 179, 188, 192], "note": [25, 38, 53, 59, 62, 70, 88, 97, 105, 118, 119, 122, 125, 128, 129, 139, 142, 148, 176], "increment": [25, 26, 27, 97, 99, 100, 101, 188], "v": [25, 97, 127, 143, 180], "output": [25, 26, 30, 38, 39, 47, 50, 53, 54, 70, 71, 73, 81, 85, 88, 91, 97, 99, 104, 118, 119, 120, 121, 122, 124, 125, 129, 130, 136, 143, 146, 156, 162, 175, 180, 184, 185, 186, 188], "constant": [25, 27, 88, 97, 100, 101, 157, 161, 186, 188], "accumul": [25, 27, 31, 97, 100, 101, 188], "absolut": [25, 27, 97, 100, 102, 119], "adder": [25, 88, 97, 128, 129, 188], "__call__": [25, 26, 38, 39, 40, 51, 53, 54, 55, 63, 64, 65, 68, 70, 71, 72, 73, 86, 88, 91, 97, 99], "variabl": [25, 26, 97, 99, 141, 188], "reset": [25, 29, 38, 49, 53, 61, 63, 67, 70, 84, 88, 96, 97, 103], "forward": [25, 30, 97, 104], "vari": [26, 99], "number": [30, 31, 33, 34, 37, 45, 46, 47, 50, 78, 79, 81, 85, 104, 105, 108, 118, 131, 132, 134, 139, 141, 146, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 167, 169, 171, 175], "measur": [31, 33, 117, 118, 126, 127, 133, 136, 143, 147, 149, 150, 168, 188, 191, 192], "new": [31, 32, 63, 65, 105, 106, 170], "In": [31, 39, 40, 42, 43, 51, 53, 54, 55, 56, 57, 59, 62, 65, 68, 71, 73, 74, 75, 86, 107, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 151, 152, 153, 154, 155, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 184, 189], "from": [31, 45, 46, 70, 71, 78, 79, 105, 114, 127, 131, 132, 134, 135, 143, 157, 161, 171, 172, 180, 185, 186, 188, 191], "first": [31, 53, 146, 164, 175, 182, 183], "receiv": [31, 33, 107, 113, 136, 138], "contain": [31, 118, 141], "10": [31, 53, 59, 62, 107, 113, 118, 123, 127, 130, 131, 132, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 147, 148, 151, 152, 153, 154, 155, 156, 158, 159, 160, 162, 164, 166, 167, 169, 170, 171, 172, 184, 185, 186, 187, 188, 189, 190], "add": [31, 33, 36, 118, 137, 170, 178, 189, 193], "out": [31, 42, 53, 56, 59, 62, 74, 112, 114, 115, 116, 120, 121, 123, 124, 127, 128, 129, 130, 131, 132, 134, 135, 136, 138, 140, 143, 146, 148, 155, 165, 171, 172, 175], "5": [31, 42, 43, 53, 59, 62, 118, 121, 123, 124, 125, 130, 131, 132, 134, 135, 136, 137, 139, 140, 141, 142, 148, 153, 154, 155, 156, 158, 159, 162, 164, 166, 167, 169, 170, 171, 172, 173, 174, 176, 180, 184, 185, 186, 187, 188, 189, 190, 192], "total": [31, 190], "ar": [31, 33, 34, 35, 37, 40, 46, 53, 55, 59, 62, 65, 71, 73, 79, 105, 106, 119, 121, 122, 124, 125, 146, 152, 153, 154, 155, 157, 158, 159, 161, 163, 164, 165, 173, 174, 180, 181, 182, 184, 186, 188, 190, 191, 193], "count": [31, 34, 136], "error_r": [31, 35, 36, 189], "everi": [31, 184], "can": [31, 33, 34, 35, 37, 88, 118, 136, 139, 145, 146, 157, 161, 181, 185, 186, 189, 191, 193], "obtain": 31, "follow": [31, 142, 152, 161, 163, 165, 188], "6": [31, 42, 43, 53, 59, 62, 74, 75, 114, 123, 127, 130, 131, 132, 136, 138, 140, 141, 143, 148, 152, 153, 154, 155, 156, 158, 159, 162, 163, 164, 166, 173, 174, 176, 183, 185, 186, 188, 189, 192], "tabul": [31, 32], "given": [31, 33, 34, 35, 37, 63, 64, 136, 185, 186], "none": [31, 35, 38, 47, 50, 53, 63, 67, 88, 96, 105, 107, 113, 118, 119, 130, 146, 152, 153, 156, 157, 161, 162, 163, 175, 178, 184, 187, 189], "numpi": [31, 36, 38, 45, 46, 53, 70, 78, 79, 118, 175, 184, 185, 186, 187, 188, 189, 190, 191], "all": [31, 36, 136, 183], "ascend": [31, 36], "correspond": [31, 36], "other": [33, 34, 35, 37, 184, 193], "quantiti": [33, 34, 35, 36, 37], "howev": [33, 34, 35, 37, 88, 122, 125, 184], "user": [33, 34, 35, 37, 185, 186], "caution": [33, 34, 35, 37], "consist": [33, 34, 35, 36, 37], "instanc": [33, 34, 35, 37, 182], "transmit": [33, 136], "section": [33, 34, 35, 36, 37, 186, 188], "specif": [36, 55, 183, 190], "whatev": 36, "wa": [36, 119], "provid": [36, 105, 107, 113, 191], "wrapper": [38, 70], "scipi": [38, 39, 54, 70, 157, 161, 190, 191], "convolv": [38, 39, 54, 164], "It": [38, 70, 88, 118], "support": [38, 70], "one": [38, 70, 106, 114, 139, 141, 153, 154, 155, 157, 158, 159, 161, 173, 185, 186, 187, 190], "stream": [38, 39, 40, 42, 43, 49, 51, 53, 54, 55, 56, 57, 61, 63, 65, 67, 68, 70, 71, 73, 74, 75, 84, 86, 105], "its": [38, 70, 71, 118, 185, 186, 190], "feedforward": [38, 40, 52, 53, 55, 59, 62, 70, 73, 77, 153, 154, 155, 156, 158, 159, 162, 166, 185, 186], "coeffici": [38, 40, 53, 55, 70, 73, 153, 154, 155, 156, 158, 159, 162, 166, 185, 186], "h_i": [38, 40, 52, 53, 55, 59, 62, 185], "sum_": [38, 70, 117, 118, 119, 133, 136, 168], "sum": [38, 70, 190], "limits_": [38, 70], "__len__": [38, 41, 53], "__repr__": [38, 42, 53, 56, 70, 74], "style": [38, 42, 53, 56, 70, 74, 165], "__str__": [38, 43, 53, 57, 70, 75], "human": [38, 43, 53, 57, 70, 75], "readabl": [38, 43, 53, 57, 70, 75], "frequency_response_log": [38, 46, 53, 70, 79], "logarithm": [38, 46, 53, 70, 79, 153, 154, 155, 157, 158, 159, 185, 186], "axi": [38, 46, 53, 70, 79, 152, 153, 154, 155, 157, 158, 159, 161, 163, 164, 184], "when": [38, 47, 50, 53, 70, 81, 85, 118, 119, 121, 122, 124, 125, 135, 153, 154, 155, 156, 158, 159, 162, 172, 176, 184, 185, 186], "mode": [38, 39, 40, 49, 51, 53, 54, 55, 61, 63, 65, 67, 68, 70, 71, 73, 84, 86, 120, 176], "u": [38, 50, 53, 70, 85, 162, 176, 177, 185, 186], "indic": [38, 40, 51, 53, 55, 63, 65, 68, 70, 71, 73, 86, 105, 106, 107, 113, 142, 159, 164], "whether": [38, 40, 51, 53, 55, 63, 65, 68, 70, 71, 73, 86, 107, 113, 159, 164], "tap": [38, 43, 52, 53, 55, 59, 62, 63, 69, 70, 76, 77, 185, 186], "full": [39, 54, 120], "valid": [39, 54, 176], "same": [39, 54, 164, 185], "non": [39, 54], "convolut": [39, 54], "detail": [39, 54], "alwai": [39, 54], "produc": [39, 53, 54, 139, 190], "previou": [40, 55, 65, 67, 71, 73, 128, 129], "preserv": [40, 51, 55, 65, 68, 71, 73, 86], "between": [40, 51, 53, 55, 65, 68, 71, 73, 86, 138, 157, 161, 188], "call": [40, 51, 55, 65, 68, 71, 73, 86], "string": [42, 43, 56, 57, 74, 75, 141, 157, 161], "represent": [42, 43, 56, 57, 74, 75, 163], "0013559842482209206": [42, 43], "005995136685669422": [42, 43], "00869881734251976": [42, 43], "002410376677289605": [42, 43], "010205586440861225": [42, 43], "018983779475092888": [42, 43], "011950905434787273": [42, 43], "015183938667178154": [42, 43], "051622189581394196": [42, 43], "07210389524698257": [42, 43], "047459449619054794": [42, 43], "039173517376184464": [42, 43], "1791868358850479": [42, 43], "3367363214492798": [42, 43], "4611457586288452": [42, 43], "5084040760993958": [42, 43], "print": [43, 57, 75, 141, 184, 185, 186, 188], "30": [43, 153, 156, 162, 173, 174, 186, 192], "31": 43, "shape": [43, 57, 75, 139, 164, 167, 169, 191, 192], "15": [43, 123, 140], "1024": [45, 46, 78, 79, 153, 154, 155, 158, 159, 187, 190], "plot": [45, 46, 47, 50, 53, 78, 79, 81, 85, 107, 112, 113, 114, 118, 119, 120, 122, 125, 136, 137, 139, 142, 144, 145, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 173, 174, 176, 184, 185, 186, 188, 189, 190, 191, 192], "decad": [46, 79, 153, 154, 155, 158, 159, 185, 188], "equival": [53, 118, 119, 135, 172, 181, 184], "upsampl": 53, "insert": 53, "each": [53, 136, 141, 157, 161], "prototyp": [53, 59, 62], "instead": [53, 152], "decompos": 53, "parallel": 53, "commut": 53, "prevent": 53, "need": [53, 182, 183], "multipli": 53, "case": 53, "2x": 53, "hold": [53, 55, 146], "top": 53, "bottom": 53, "relat": [53, 59, 62, 119, 139], "np": [53, 59, 62, 74, 75, 107, 113, 118, 119, 120, 121, 122, 124, 125, 130, 136, 137, 142, 144, 151, 152, 153, 154, 155, 156, 158, 159, 160, 162, 164, 166, 170, 173, 174, 176, 184, 185, 186, 187, 188, 189, 190], "co": 53, "pi": [53, 74, 75, 105, 118, 138, 139, 142, 144, 148, 153, 154, 155, 156, 158, 159, 162, 164, 166, 173, 174, 176, 184, 185, 186, 188], "arang": [53, 59, 62, 118, 120, 144, 173, 174, 176, 184, 188], "7": [53, 56, 57, 59, 62, 114, 123, 130, 136, 140, 141, 145, 164, 176], "kaiser": [53, 55, 56, 57, 58], "window": [53, 157, 161], "plt": [53, 107, 112, 113, 114, 118, 119, 120, 122, 125, 136, 137, 139, 142, 144, 145, 151, 152, 153, 154, 155, 156, 158, 159, 160, 162, 163, 164, 166, 167, 169, 170, 173, 174, 176, 184, 185, 186, 187, 188, 189, 190], "figur": [53, 107, 112, 113, 114, 118, 119, 120, 122, 125, 136, 137, 139, 142, 144, 145, 151, 152, 153, 154, 155, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 173, 174, 176, 184, 185, 186, 187, 188, 189, 190], "figsiz": [53, 107, 112, 113, 114, 118, 119, 120, 122, 125, 136, 137, 139, 142, 144, 145, 151, 152, 153, 154, 155, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 173, 174, 176, 184, 185, 186, 187, 188, 189, 190], "8": [53, 59, 62, 74, 75, 107, 112, 113, 114, 118, 119, 120, 122, 123, 125, 130, 136, 139, 140, 141, 144, 145, 148, 151, 152, 153, 154, 155, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 169, 173, 174, 176, 181, 185, 186, 187, 188, 190], "marker": [53, 152, 163, 184, 185, 186, 189], "o": [53, 184], "label": [53, 106, 107, 113, 118, 136, 137, 139, 142, 151, 160, 161, 164, 167, 169, 170, 184, 187, 188, 189, 190], "titl": [53, 107, 113, 118, 119, 120, 122, 125, 136, 137, 142, 144, 151, 160, 164, 170, 173, 174, 176, 184, 187, 188, 189, 190], "tight_layout": [53, 107, 113, 118, 119, 120, 122, 125, 136, 137, 144, 151, 160, 164, 170, 173, 174, 176, 187, 188, 189, 190], "polyphase_tap": [53, 57, 59, 62], "14285715": 53, "85714287": 53, "2857143": 53, "71428573": 53, "42857143": 53, "5714286": 53, "dtype": [53, 146, 164, 175, 188], "float32": 53, "9": [53, 59, 62, 123, 130, 136, 140, 141, 167, 169, 187, 189, 190, 192], "zoh": [53, 55, 58], "11": [53, 123, 140, 180], "12": [53, 123, 140, 145, 185, 189], "13": [53, 120, 123, 140], "14": [53, 123, 140, 181], "custom": [53, 58], "design": [53, 55, 58, 145, 180, 191], "multir": [53, 55, 58, 145], "argument": [55, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 182, 185, 186], "linearli": 55, "2r": 55, "ramp": [55, 88], "ones": [55, 188], "npt": [55, 106, 153, 154, 155, 156, 158, 159, 162, 166], "167": 57, "24": 57, "84": 57, "befor": [59, 62, 193], "decomposit": [59, 62], "after": [59, 62], "resampl": [63, 64, 65, 66, 67, 68, 69, 145, 191, 192], "http": [63, 126, 139, 145, 147, 176, 180, 181], "wirelesspi": 63, "com": [63, 139, 145, 181], "fraction": [63, 67, 139, 184], "structur": 63, "index": [63, 67, 163, 180], "should": [67, 181], "equal": 67, "three": [67, 184, 190], "If": [67, 118, 119, 130, 146, 152, 153, 156, 157, 161, 162, 163, 164, 173, 175, 191], "lfilter": 70, "b_i": [70, 73, 77, 153, 154, 155, 156, 158, 159, 162, 166, 186], "feedback": [70, 73, 76, 153, 154, 155, 156, 158, 159, 162, 166, 186], "a_j": [70, 73, 76, 153, 154, 155, 156, 158, 159, 162, 166, 186], "These": [70, 105, 165, 181, 188], "differ": [70, 106, 114, 164, 176, 190], "a_0": 70, "left": [70, 105, 117, 118, 119, 133, 136, 138, 139, 142, 144, 148, 149, 150, 168, 176], "m": [70, 105, 106, 108, 109, 110, 111, 114, 130, 131, 132, 134, 171, 180, 181, 182, 183, 191], "right": [70, 105, 117, 118, 119, 133, 136, 138, 139, 142, 144, 148, 149, 150, 168, 176], "b": [70, 73, 119, 139, 141, 153, 156, 162, 180, 190], "classmethod": [70, 71], "zerospol": [70, 71, 74, 75, 153, 154, 155, 156, 158, 159, 162, 166, 186], "self": [70, 71], "100": [70, 81, 85, 107, 113, 118, 119, 122, 125, 127, 136, 143, 144, 151, 153, 156, 160, 162, 164, 170, 173, 174, 182, 184, 188], "a_tap": [70, 75, 76, 186], "b_tap": [70, 75, 77, 186], "exp": [74, 75, 105, 139, 142, 144, 153, 154, 155, 156, 158, 159, 162, 164, 166, 174, 176, 184, 186, 188], "1j": [74, 75, 144, 153, 154, 155, 156, 158, 159, 162, 164, 166, 174, 184, 186, 188], "conj": [74, 75, 153, 154, 155, 156, 158, 159, 162, 166, 186, 188], "478207252018059": [74, 75], "6400000000000001": [74, 75], "7391036260090295": 75, "3061467458920719j": 75, "loopfilt": [88, 89, 90, 91, 92, 93, 94, 95, 96, 179, 188, 191, 192], "ppi": [88, 92, 179], "track": 88, "cannot": 88, "chirp": 88, "underli": [88, 94], "modul": [105, 106, 107, 110, 111, 113, 118, 131, 132, 134, 136, 137, 142, 151, 152, 160, 170, 171, 180, 183, 187, 189, 191, 192], "scheme": 105, "encod": [105, 107, 113, 128, 129, 191], "inform": [105, 131, 132, 134, 171], "sinusoid": [105, 118, 173, 174, 186], "taken": 105, "decim": [105, 106, 109, 110, 114, 145, 189], "dot": [105, 114], "mathbb": [105, 114, 119, 176], "phase_offset": [105, 106, 112, 118, 136, 137, 142, 152, 163, 170, 187, 189], "valu": [105, 106, 107, 113, 115, 116, 120, 127, 128, 129, 139, 142, 143, 152, 163, 186, 192], "maximum": [105, 109, 152, 163], "likelihood": [105, 109], "estim": [105, 109, 157, 161, 188, 191], "log_2": [105, 108, 119, 131, 132, 134, 171], "degre": [105, 106, 112, 137, 142, 144, 148], "mapsto": [105, 114], "symbol_label": [106, 114, 189], "bin": [106, 114, 136, 152, 163, 189], "ge": 106, "consecut": 106, "adjac": [106, 114, 189, 190], "mai": [106, 114, 136, 152, 161, 163, 165, 186], "more": [106, 114, 192], "whose": 106, "start": [106, 180], "0j": 106, "go": 106, "counter": 106, "clockwis": 106, "around": 106, "circl": [106, 186], "energi": [107, 113, 119, 131, 132, 133, 134, 135, 151, 160, 167, 169, 171, 172, 191, 192], "psd": [107, 113, 119, 131, 132, 134, 135, 151, 160, 171, 172], "were": [107, 113], "simon": [107, 113], "alouini": [107, 113], "over": [107, 113, 141], "fade": [107, 113], "channel": [107, 113, 119, 121, 122, 124, 125, 130, 151, 160, 191, 192], "chapter": [107, 113, 145], "singl": [107, 113], "john": [107, 113], "proaki": [107, 113], "optimum": [107, 113], "theoret": [107, 113, 151, 160, 189, 192], "curv": [107, 113, 151, 160], "bpsk": [107, 113, 151, 160, 164, 187], "qpsk": [107, 112, 113, 118, 136, 137, 151, 152, 160, 163, 164, 170], "psk8": [107, 113, 151, 160, 189], "psk16": [107, 113, 151, 160, 189], "linspac": [107, 113, 119, 122, 125, 151, 160, 186, 187, 188, 189], "compar": [107, 113, 190], "de": [107, 113, 192], "true": [107, 113, 119, 121, 122, 124, 125, 130, 152, 159, 163, 165, 187, 189], "45": [112, 118, 136, 137, 142, 144, 152, 163, 170, 187, 189], "se": [113, 160], "00000000e": [114, 186], "00": [114, 186], "00j": 114, "07106781e": 114, "01": [114, 141, 186, 188], "01j": 114, "12323400e": 114, "17": [114, 148], "83697020e": 114, "22464680e": 114, "16j": 114, "annot": [114, 163, 192], "probabl": [115, 116, 121, 122, 124, 125, 130, 178, 191, 192], "exceed": [115, 116], "15865525393145707": [115, 116], "158655": [115, 116], "0000010494310452": [115, 116], "text": [117, 118, 119, 122, 125, 126, 127, 136, 137, 138, 143, 145, 147, 149, 150, 168, 170], "avg": [117, 118, 147], "seed": 118, "which": [118, 119, 137, 142, 148, 152, 163, 170, 184, 188, 190], "ad": [118, 182, 191, 192], "desir": [118, 189], "explicitli": 118, "assum": [118, 130, 146, 175], "known": 118, "pass": [118, 121, 124, 130, 136, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 178, 180, 181, 185, 186], "must": [118, 139, 144, 167, 169, 176], "random": [118, 121, 124, 130, 136, 137, 142, 152, 164, 170, 187, 189], "default_rng": 118, "noisi": 118, "w": [118, 184, 185, 186, 187, 188, 189, 190], "sigma": [118, 119], "For": [118, 185], "sim": 118, "cn": 118, "set": [118, 152, 157, 161, 163, 165, 182, 183, 186], "sin": [118, 173], "ha": [118, 139, 148, 176, 188, 189, 190], "randint": [118, 121, 124, 130, 136, 137, 142, 152, 164, 170, 187, 189], "1_000": [118, 137, 142, 170, 187], "zorder": [118, 137, 170], "infti": [118, 119], "nand": 118, "capac": [119, 122, 125, 191, 192], "2d": 119, "x_i": [119, 121, 122, 124, 125, 130, 142], "y_i": [119, 121, 122, 124, 125, 130], "monoton": 119, "decreas": 119, "limit": [119, 152, 163, 189], "20": [119, 121, 124, 127, 130, 136, 137, 141, 142, 143, 187, 189, 190], "xlabel": [119, 120, 122, 125, 136, 176, 184, 187, 188, 190], "ylabel": [119, 120, 122, 125, 136, 176, 184, 187, 188, 190], "grid": [119, 122, 125, 165, 184, 187, 188, 190], "At": 119, "occur": 119, "view": [119, 182], "59": 119, "shannon": 119, "semilogi": [119, 151, 160], "both": [119, 152, 163, 164, 184, 188], "barker": [120, 177, 191, 192], "bipolar": [120, 192], "sequenc": [120, 121, 124, 130, 176, 178, 191, 192], "format": [120, 182], "seq": 120, "have": [120, 146, 164, 175], "ideal": [120, 189], "minim": 120, "autocorrel": [120, 176], "sidelob": [120, 176], "corr": [120, 176], "correl": [120, 176], "lag": [120, 176], "size": [120, 130, 184, 188, 189, 190], "ab": [120, 176, 190], "through": [121, 124, 130, 178, 185, 186, 188], "25": [121, 124, 130, 184, 187, 188, 190], "roughli": [121, 124, 184], "eras": 121, "transit": [124, 125, 130, 178], "flip": 124, "h_b": 125, "cf": 126, "v_": [126, 127, 143, 150, 168], "en": [126, 147, 176], "wikipedia": [126, 147, 176], "org": [126, 147, 176], "wiki": [126, 147, 176], "type": [127, 136, 143, 146, 157, 161, 175, 192], "voltag": [127, 143, 150, 168, 191], "decibel": [127, 143], "ani": [127, 143, 183], "x_": [127, 143], "log_": [127, 138, 147], "50": [127, 143, 163, 173, 174, 184, 187], "mhz": [127, 143], "77": [127, 141, 143], "50e6": 127, "76": [127, 141], "98970004336019": 127, "mw": [127, 143], "dbm": [127, 143], "dbv": [127, 143], "020599913279624": 127, "uncod": 129, "dmc": [130, 178, 191, 192], "memoryless": [130, 178], "matrix": [130, 178], "pr": 130, "y_j": 130, "alphabet": 130, "ldot": 130, "qam": [131, 132, 134, 171], "249387366082999": [131, 132], "020599913279625": [131, 172], "sym": [132, 135, 139, 171, 172, 190], "750612633917001": [134, 171], "979400086720376": [134, 135], "system": [135, 145, 172, 182, 183, 188, 191], "norm": 136, "noiseless": 136, "sourc": 136, "max": [136, 149, 150, 182], "_": 136, "sqrt": [136, 139, 168, 176, 187, 188, 190], "instantan": 136, "percentil": [136, 161], "1000": [136, 164, 173, 174, 189], "either": 136, "85288179004344": 136, "792523995980586": 136, "211606894088039": 136, "95th": 136, "95": 136, "988301204046998": 136, "inst_evm": 136, "hist": 136, "histogram": 136, "frequency_offset": [137, 178, 191, 192], "freq_rat": 137, "cycl": [137, 164], "000": 137, "1e": [137, 189], "5e": 137, "deg": [137, 142], "path": [138, 182, 191], "loss": [138, 191], "distanc": 138, "meter": [138, 148], "transmitt": 138, "km": 138, "link": [138, 191, 192], "ghz": [138, 148], "1e3": [138, 144, 173], "1e9": [138, 148], "92": 138, "44778322188337": 138, "so": [138, 139, 191], "doubl": [138, 148], "result": [138, 148, 189], "increas": [138, 148, 186], "2e3": 138, "98": 138, "468383135163": 138, "also": [138, 139, 191], "2e9": 138, "puls": [139, 164, 167, 169, 191, 192], "product": [139, 190], "side": [139, 153, 154, 155, 157, 158, 159, 161, 185, 186, 187, 190], "thought": [139, 193], "smaller": [139, 190], "wider": 139, "even": [139, 167, 169], "amplitud": [139, 142, 178, 184, 188], "nomin": 139, "ln": 139, "www": [139, 145], "mathwork": [139, 145], "help": [139, 145], "gaussdesign": 139, "html": [139, 145, 180], "onlinelibrari": 139, "wilei": 139, "doi": 139, "pdf": 139, "1002": 139, "9780470041956": 139, "app2": 139, "h_0p1": [139, 167, 169], "h_0p2": 139, "h_0p3": 139, "displai": [141, 152, 153, 154, 155, 157, 158, 159, 161, 163], "consid": 141, "line": [141, 164, 187], "quick": 141, "brown": 141, "fox": 141, "jump": 141, "lazi": 141, "dog": 141, "00000000": 141, "54": 141, "68": 141, "65": 141, "71": 141, "75": [141, 152, 188, 189], "69": 141, "63": 141, "6b": 141, "62": 141, "72": 141, "6f": 141, "6e": 141, "00000010": 141, "66": 141, "78": 141, "6a": 141, "6d": 141, "70": [141, 190], "73": 141, "74": 141, "00000020": 141, "6c": 141, "61": 141, "7a": 141, "79": 141, "64": [141, 186], "67": 141, "he": 141, "02": [141, 186, 188], "03": [141, 186], "04": [141, 186], "00000004": 141, "05": [141, 184, 186, 188], "06": 141, "07": 141, "08": 141, "00000008": 141, "09": 141, "0a": 141, "iq_imbal": [142, 178, 191, 192], "iq": [142, 178], "imbal": [142, 178], "posit": 142, "compon": [142, 173, 174], "larger": [142, 152, 163], "quadratur": 142, "lead": [142, 189], "g_i": 142, "180": 142, "g_q": 142, "x_q": 142, "horizont": 142, "stretch": 142, "while": [142, 190], "neg": 142, "vertic": 142, "y1": 142, "y2": 142, "subplot": [142, 188, 189], "y_1": 142, "legend": [142, 184, 187, 188, 190], "y_2": 142, "northwest": 142, "northeast": 142, "50118723": 143, "36272725": 143, "9952623149688795": 143, "cdot": 144, "satisfi": 144, "le": [144, 148, 167, 169], "remov": [144, 157, 161], "rotat": 144, "half_length": 145, "a_stop": 145, "80": [145, 176], "firdecim": 145, "half": [145, 148], "stopband": 145, "attenu": 145, "a_": 145, "stop": 145, "fred": 145, "harri": 145, "process": [145, 186, 188, 191], "dsp": [145, 191], "designmultiratefir": 145, "dtypelik": [146, 175], "most": [146, 175], "signific": [146, 175], "enough": 146, "fill": 146, "last": [146, 180], "remain": 146, "smallest": 146, "unsign": 146, "integ": 146, "uint8": [146, 175], "diamet": 148, "effici": 148, "55": 148, "eta": 148, "dbi": 148, "arcsin": 148, "83": 148, "dish": 148, "21": 148, "810210290266568": 148, "437435887991374": 148, "23": 148, "sinc": [148, 180, 189], "antenna": [148, 191], "we": [148, 191], "observ": 148, "830810203546193": 148, "529544741425365": 148, "keyword": [151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 185, 186], "pyplot": [151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 184, 185, 186, 187, 188, 189, 190], "scatter": 152, "overwritten": [152, 161, 163], "rang": [152, 188, 189], "hist2d": 152, "linestyl": [152, 163, 165, 176, 184, 188, 189, 190], "10_000": 152, "n_time": [153, 186], "n_freq": 153, "x_axi": [153, 154, 155, 157, 158, 159, 161, 185, 186, 187, 188], "two": [153, 154, 155, 157, 158, 159, 161, 176, 184, 185, 186], "log": [153, 154, 155, 157, 158, 159, 185, 186, 188], "definit": [153, 154, 155, 156, 158, 159, 162, 166], "n_t": 153, "n_f": 153, "scale": [153, 154, 155, 157, 158, 159, 161, 185, 186], "option": [153, 154, 155, 157, 158, 159, 161], "spectrum": [153, 154, 155, 157, 158, 159, 161, 173, 174], "h_srrc": [153, 154, 155, 156, 158, 159, 162, 164, 166, 189], "ylim": [155, 176, 185, 188, 189, 190], "48": 155, "52": 155, "hann": [157, 161], "overlap": [157, 161, 187], "fft": [157, 161, 173, 174], "detrend": [157, 161], "median": 157, "spectral": [157, 187, 190, 191], "segment": [157, 161], "256": [157, 161, 187], "point": [157, 161], "trend": [157, 161], "unwrap": [159, 188], "pcolormesh": 161, "vmin": 161, "10th": 161, "vmax": 161, "100th": 161, "shade": 161, "gouraud": 161, "markers": 163, "diff": [164, 187], "color": [164, 187, 190], "about": [164, 182, 183], "mutual": 164, "exclus": 164, "how": [164, 182, 183], "imaginari": 164, "part": [164, 170, 188], "base": 164, "current": [164, 181], "solid": 164, "dash": 164, "share": 164, "10e3": 164, "complex64": [164, 188], "revert": 165, "rcdefault": 165, "_rc_param": 165, "rc_param": 165, "ax": 165, "autolayout": 165, "max_open_warn": 165, "titleweight": 165, "bold": 165, "excess": [167, 169, 190], "h_0p5": [167, 169], "h_0p9": [167, 169], "sample_rate_offset": [170, 178, 191, 192], "ppm": [170, 178], "million": 170, "odd": 173, "append": [173, 187], "end": 173, "250": [173, 174], "300": [173, 174], "ksp": [173, 174], "notic": [173, 174, 184, 190], "conjug": [173, 174, 186], "2048": [173, 174, 187], "500": [173, 174, 188], "longer": 173, "now": [173, 174, 184], "150": [173, 174], "asymmetr": 174, "zadoff_chu": [176, 177, 191, 192], "zadoff": [176, 177, 192], "chu": [176, 177, 192], "rel": [176, 190], "prime": 176, "gcd": 176, "ne": 176, "cyclic": 176, "x_u": 176, "c_": 176, "2q": 176, "mod": 176, "e2": 176, "93chu_sequ": 176, "x_3": 176, "139": 176, "x3": 176, "linewidth": 176, "roll": [176, 190], "tile": 176, "x_5": 176, "x5": 176, "cross": 176, "xcorr": 176, "sphinx": 180, "immateri": 180, "theme": 180, "depend": [180, 182, 183], "store": [180, 181, 183], "requir": [180, 181, 182, 183], "txt": [180, 181, 182, 183], "myst": 180, "parser": 180, "updat": 180, "git": [180, 181], "math": 180, "dollar": 180, "ipykernel": 180, "nb": 180, "switch": 180, "pip": [180, 181, 182, 183, 191], "python3": [180, 181, 182, 183, 191], "built": 180, "run": 180, "command": 180, "dirhtml": 180, "locat": [180, 183], "home": 180, "page": 180, "site": 180, "directori": [180, 181], "get": 180, "necessari": 180, "webpag": 180, "webserv": 180, "easili": [180, 182, 183, 185, 186], "done": 180, "python": [180, 191], "server": 180, "8080": 180, "access": [180, 182], "web": 180, "browser": 180, "localhost": 180, "latest": [181, 191], "releas": [181, 192], "version": [181, 191], "main": [181, 190], "wai": 181, "branch": [181, 182], "mhostett": [181, 192], "Or": [181, 183], "pre": 181, "To": 181, "activ": 181, "develop": [181, 182, 183], "librari": [181, 182, 183, 184, 189, 191, 193], "benefici": 181, "fashion": 181, "allow": [181, 183], "chang": [181, 193], "immedi": 181, "seen": 181, "upon": 181, "next": 181, "import": [181, 184, 185, 186, 187, 188, 189, 190, 191], "clone": 181, "repo": 181, "wherev": 181, "you": [181, 182, 183, 191], "like": [181, 191], "flag": 181, "includ": [181, 182, 183, 191], "packag": [181, 191], "lint": 181, "test": [181, 191], "pylint": [181, 182], "black": 181, "jupyt": 181, "22": 181, "pytest": [181, 183], "cov": 181, "toml": [181, 182, 183], "xdist": 181, "benchmark": 181, "static": 182, "your": [182, 183], "dev": [182, 183], "variou": [182, 190], "nuisanc": 182, "warn": 182, "ignor": 182, "list": 182, "pyproject": [182, 183], "tool": [182, 183, 191], "src": 182, "_version": 182, "py": [182, 183], "disabl": 182, "comparison": 182, "callabl": 182, "doesn": 182, "understand": [182, 186], "metaclass": 182, "fixm": 182, "global": 182, "statement": 182, "invalid": 182, "name": 182, "miss": 182, "docstr": 182, "protect": 182, "too": 182, "mani": 182, "ancestor": 182, "attribut": 182, "public": 182, "unneed": 182, "min": 182, "similar": [182, 190], "120": 182, "manual": [182, 183], "file": [182, 183], "vscode": [182, 183], "json": [182, 183], "instruct": [182, 183], "invok": [182, 183], "edit": [182, 186], "ini_opt": 183, "minvers": 183, "addopt": 183, "showloc": 183, "testpath": 183, "execut": 183, "test_psk": 183, "infrastructur": 183, "debug": 183, "config": [184, 185, 186, 187, 188, 189, 190], "inlinebackend": [184, 185, 186, 187, 188, 189, 190], "print_figure_kwarg": [184, 185, 186, 187, 188, 189, 190], "facecolor": [184, 185, 186, 187, 188, 189, 190], "widget": [184, 185, 186, 187, 188, 189, 190], "continu": 184, "tx": 184, "decai": [184, 186], "fillstyl": 184, "imag": 184, "origin": 184, "show": [184, 185, 186, 187, 188, 189, 190], "accomplish": [184, 189], "def": [184, 187, 189], "resample_sign": 184, "new_sample_r": 184, "ty": 184, "gca": [184, 189], "set_prop_cycl": [184, 189], "200": [184, 189], "four": 184, "400": 184, "appear": 184, "fourth": 184, "often": 184, "do": 184, "align": 184, "315": 184, "32": 184, "below": [185, 186], "00095883": 185, "00175012": 185, "00423921": 185, "0058825": 185, "006151": 185, "00474595": 185, "0017044": 185, "00254816": 185, "00721645": 185, "0112324": 185, "01342358": 185, "01273202": 185, "00845058": 185, "0004368": 185, "01073669": 185, "02372977": 185, "03650247": 185, "04650654": 185, "05098525": 185, "04734644": 185, "03355896": 185, "00851486": 185, "02769991": 185, "07367348": 185, "12670447": 185, "1830132": 185, "23810898": 185, "28727058": 185, "3260799": 185, "3509384": 185, "35949665": 185, "conveni": [185, 186], "evalu": [185, 186], "envelop": [185, 186], "here": [185, 186], "altern": 186, "0x00000179ff644bc8": 186, "47820725": 186, "78207252e": 186, "58172329e": 186, "10862468e": 186, "86109590e": 186, "21565653e": 186, "01140214e": 186, "57286400e": 186, "67772160e": 186, "47338728e": 186, "10422993e": 186, "89312837e": 186, "12240078e": 186, "03953322e": 186, "69685122e": 186, "63882791e": 186, "81474977e": 186, "47193366e": 186, "85259041e": 186, "15647504e": 186, "23851924e": 186, "42176895e": 186, "84684395e": 186, "42721858e": 186, "72236648e": 186, "14721649e": 186, "10813095e": 186, "94024315e": 186, "78877688e": 186, "74077567e": 186, "87820725": 186, "53637958": 186, "94724205": 186, "13335164": 186, "1455082": 186, "04436799": 186, "88708159": 186, "71930943": 186, "5719707": 186, "46154771": 186, "39261642": 186, "36139242": 186, "35935288": 186, "3763214": 186, "40270968": 186, "43085717": 186, "45557651": 186, "47410241": 186, "48566716": 186, "49090568": 186, "49124786": 186, "48840102": 186, "4839738": 186, "47925143": 186, "47510421": 186, "47199608": 186, "47005584": 186, "46917696": 186, "46911955": 186, "denomin": 186, "73910363": 186, "30614675j": 186, "plane": 186, "endpoint": 186, "concaten": 186, "0x000001799a0f5188": 186, "lyon": 186, "3rd": 186, "insid": 186, "outsid": 186, "unstabl": 186, "n_symbol": 187, "pulse_shap": 187, "els": 187, "pb": 187, "x_bb_rect": 187, "papr_bb_rect": 187, "x_pb_rect": 187, "papr_pb_rect": 187, "x_bb_0p1": 187, "papr_bb_0p1": 187, "x_pb_0p1": 187, "papr_pb_0p1": 187, "x_bb_0p5": 187, "papr_bb_0p5": 187, "x_pb_0p5": 187, "papr_pb_0p5": 187, "x_bb_0p9": 187, "papr_bb_0p9": 187, "x_pb_0p9": 187, "papr_pb_0p9": 187, "rectangular": [187, 190], "2f": 187, "rf": [187, 188], "xlim": [187, 188, 190], "512": 187, "sweep_alpha": 187, "bb_papr": 187, "pb_papr": 187, "bpsk_bb_papr": 187, "bpsk_pb_papr": 187, "qpsk_bb_papr": 187, "qpsk_pb_papr": 187, "psk8_bb_papr": 187, "psk8_pb_papr": 187, "psk16_bb_papr": 187, "psk16_pb_papr": 187, "configur": 188, "loop_filt": 188, "0x00000244c97410c8": 188, "theta_0": 188, "phase_error": 188, "freq_estim": 188, "suptitl": [188, 189], "angl": 188, "avail": [188, 189], "001": 188, "005": 188, "b_nt": 188, "0005": 188, "0125": 188, "015": 188, "0175": 188, "t_lock": 188, "analyze_psk": 189, "100_000": 189, "n0": 189, "tx_mf": 189, "18": 189, "1e6": 189, "s_hat": 189, "bpsk_ber": 189, "bpsk_ser": 189, "qpsk_ber": 189, "qpsk_ser": 189, "psk8_ber": 189, "psk8_ser": 189, "psk16_ber": 189, "psk16_ser": 189, "simul": [189, 191], "1e0": 189, "psk8_bin": 189, "psk8_grai": 189, "wors": 189, "rect": 190, "rc_0p1": 190, "rc_0p5": 190, "rc_0p9": 190, "nyquist": 190, "pm": 190, "60": 190, "nearli": 190, "null": 190, "small": 190, "lobe": 190, "much": 190, "higher": 190, "h_rect": 190, "freqz": 190, "worn": 190, "whole": 190, "h_rc_0p1": 190, "h_rc_0p5": 190, "h_rc_0p9": 190, "p_rect": 190, "log10": 190, "cumsum": 190, "p_rc_0p1": 190, "p_rc_0p5": 190, "p_rc_0p9": 190, "One": 190, "within": 190, "srrc_0p1": 190, "srrc_0p5": 190, "srrc_0p9": 190, "therefor": 190, "significantli": 190, "due": 190, "being": 190, "h_srrc_0p1": 190, "h_srrc_0p5": 190, "h_srrc_0p9": 190, "p_srrc_0p1": 190, "p_srrc_0p5": 190, "p_srrc_0p9": 190, "gauss_0p1": 190, "gauss_0p2": 190, "gauss_0p3": 190, "softwar": 191, "radio": 191, "goal": 191, "analyz": 191, "build": 191, "reli": 191, "interoper": 191, "veri": 191, "possibl": 191, "numba": 191, "acceler": 191, "computation": 191, "intens": 191, "addition": 191, "aim": 191, "replic": 191, "relev": 191, "matlab": 191, "toolbox": 191, "progress": 191, "someth": 191, "pleas": 191, "open": 191, "issu": 191, "github": 191, "pypi": 191, "manipul": 191, "synchron": 191, "convers": [191, 192], "model": [191, 192], "impair": [191, 192], "budget": [191, 192], "august": 192, "2023": 192, "translat": 192, "fix": [192, 193], "matt": 192, "hostett": 192, "juli": 192, "fpsl": 192, "helper": 192, "improv": 192, "semant": 193, "major": 193, "minor": 193, "patch": 193, "introduc": 193, "api": 193, "featur": 193, "backward": 193, "compat": 193, "make": 193, "bug": 193, "There": 193, "guarante": 193, "them": 193, "thei": 193}, "objects": {"": [[2, 0, 0, 1, "sdr", ""]], "sdr": [[8, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [25, 1, 1, "", "DDS", "Implements a direct digital synthesizer (DDS)."], [31, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [38, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [53, 1, 1, "", "FIRInterpolator", "Implements a polyphase finite impulse response (FIR) interpolating filter."], [63, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [70, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [88, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [97, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [105, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [115, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [116, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [117, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [118, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [119, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [120, 5, 1, "", "barker", "Returns the Barker code/sequence of length $N$."], [121, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [122, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [123, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [124, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [125, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [126, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [127, 5, 1, "", "db", "Converts from linear units to decibels."], [128, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [129, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [130, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [131, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [132, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [133, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [134, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [135, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [136, 5, 1, "", "evm", "Calculates the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [137, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [138, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [139, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [140, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [141, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [142, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [143, 5, 1, "", "linear", "Converts from decibels to linear units."], [144, 5, 1, "", "mix", "Mixes the time-domain signal $x[n]$ with a complex exponential."], [145, 5, 1, "", "multirate_fir", "Computes the multirate FIR filter that achieves rational resampling by $P/Q$."], [146, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [147, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [148, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [149, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [150, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [167, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [168, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [169, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [170, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [171, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [172, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [173, 5, 1, "", "to_complex_bb", "Converts the real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$ to a complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c} = f_{s,r}/2$."], [174, 5, 1, "", "to_real_pb", "Converts the complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$ to a real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r} = 2f_{s,c}$."], [175, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [176, 5, 1, "", "zadoff_chu", "Returns the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.ClosedLoopPLL": [[9, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [10, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [11, 2, 1, "", "K0", "The NCO gain $K_0$."], [12, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [13, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [14, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [15, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [16, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [17, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [18, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [19, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [20, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [21, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [22, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [23, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [24, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[15, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [15, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [15, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [15, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [15, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[16, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[18, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[21, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.DDS": [[26, 3, 1, "", "__call__", "Steps the DDS with the variable phase increment signal $x[n]$."], [27, 3, 1, "", "__init__", "Creates a direct digital synthesizer (DDS)."], [28, 2, 1, "", "nco", "The numerically-controlled oscillator (NCO) used by the DDS."], [29, 3, 1, "", "reset", "Resets the DDS."], [30, 3, 1, "", "step", "Steps the DDS forward by $N$ samples."]], "sdr.DDS.__call__": [[26, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the DDS."]], "sdr.DDS.__init__": [[27, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [27, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [27, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.DDS.step": [[30, 4, 2, "p-N", "N", "The number of samples $N$ to step the DDS forward."]], "sdr.ErrorRate": [[32, 3, 1, "", "__init__", "Creates a new error rate tabulation object."], [33, 3, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [34, 3, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [35, 3, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [36, 3, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [37, 3, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[33, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [33, 4, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [33, 4, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[34, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[35, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[37, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[39, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the FIR filter."], [40, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [41, 3, 1, "", "__len__", "Returns the filter length $N$."], [42, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [43, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [44, 2, 1, "", "delay", "The delay of the FIR filter in samples."], [45, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the FIR filter."], [46, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the FIR filter on a logarithmic frequency axis."], [47, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [48, 2, 1, "", "order", "The order of the FIR filter, $N$."], [49, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [50, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [51, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [52, 2, 1, "", "taps", "The feedforward taps $h_i$."]], "sdr.FIR.__call__": [[39, 4, 2, "p-mode", "mode", "The non-streaming convolution mode. See scipy.signal.convolve() for details. In streaming mode, $N$ inputs always produce $N$ outputs."], [39, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.FIR.__init__": [[40, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$."], [40, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FIR.frequency_response": [[45, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [45, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.frequency_response_log": [[46, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [46, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [46, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[47, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.step_response": [[50, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIRInterpolator": [[54, 3, 1, "", "__call__", "Filters and interpolates the input signal $x[n]$ with the FIR filter."], [55, 3, 1, "", "__init__", "Creates a polyphase FIR interpolating filter with feedforward coefficients $h_i$."], [56, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [57, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [58, 2, 1, "", "method", "The method used to design the multirate filter."], [59, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [60, 2, 1, "", "rate", "The interpolation rate $r$."], [61, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [62, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.FIRInterpolator.__call__": [[54, 4, 2, "p-mode", "mode", "The non-streaming convolution mode. See scipy.signal.convolve() for details. In streaming mode, $N$ inputs always produce $N r$ outputs."], [54, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$."]], "sdr.FIRInterpolator.__init__": [[55, 4, 2, "p-rate", "rate", "The interpolation rate $r$."], [55, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [55, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.FarrowResampler": [[64, 3, 1, "", "__call__", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [65, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [66, 2, 1, "", "order", "The order of the filter."], [67, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [68, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [69, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__call__": [[64, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [64, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.__init__": [[65, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FarrowResampler.reset": [[67, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[71, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [72, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the IIR filter."], [73, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [74, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [75, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [76, 2, 1, "", "a_taps", "The feedback taps $a_j$."], [77, 2, 1, "", "b_taps", "The feedforward taps $b_i$."], [78, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the IIR filter."], [79, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the IIR filter on a logarithmic frequency axis."], [80, 2, 1, "", "gain", "The gain of the IIR filter."], [81, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [82, 2, 1, "", "order", "The order of the IIR filter, $N$."], [83, 2, 1, "", "poles", "The poles of the IIR filter."], [84, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [85, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [86, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [87, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[71, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [71, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [71, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."], [71, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__call__": [[72, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.IIR.__init__": [[73, 4, 2, "p-a", "a", "The feedback coefficients $a_j$."], [73, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [73, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.IIR.frequency_response": [[78, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [78, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[79, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [79, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [79, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[81, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[85, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.LoopFilter": [[89, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [90, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [91, 3, 1, "", "__call__", "Filters the input signal $x[n]$."], [92, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [93, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [94, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [95, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [96, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__call__": [[91, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.LoopFilter.__init__": [[92, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [92, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [92, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [92, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.NCO": [[98, 2, 1, "", "K0", "The NCO gain $K_0$."], [99, 3, 1, "", "__call__", "Steps the NCO with the variable-increment signal $x[n]$."], [100, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [101, 2, 1, "", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [102, 2, 1, "", "offset", "The absolute offset $theta$ of the NCO in units."], [103, 3, 1, "", "reset", "Resets the NCO."], [104, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__call__": [[99, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the NCO."]], "sdr.NCO.__init__": [[100, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [100, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [100, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in units."]], "sdr.NCO.step": [[104, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.PSK": [[106, 3, 1, "", "__init__", "Creates a new PSK object."], [107, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [108, 2, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [109, 3, 1, "", "demodulate", "Demodulates the complex symbols $hat{x}[k]$ to decimal symbols $hat{s}[k]$ using maximum-likelihood estimation."], [110, 3, 1, "", "modulate", "Modulates to decimal symbols $s[k]$ to complex symbols $x[k]$."], [111, 2, 1, "", "order", "The modulation order $M = 2^k$."], [112, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [113, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [114, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[106, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [106, 4, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [106, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[107, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [107, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.demodulate": [[109, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to demodulate."]], "sdr.PSK.modulate": [[110, 4, 2, "p-symbols", "symbols", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.PSK.ser": [[113, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [113, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.Q": [[115, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[116, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.average_power": [[117, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[118, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [118, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [118, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [118, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[119, 4, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [119, 4, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.barker": [[120, 4, 2, "p-length", "length", "The length $N$ of the Barker code/sequence."], [120, 4, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[121, 4, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [121, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[122, 4, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[123, 4, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[124, 4, 2, "p-p", "p", "The probability $p$ of a bit flip."], [124, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[125, 4, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[126, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.db": [[127, 4, 2, "p-type", "type", "The type of input value or signal."], [127, 4, 2, "p-x", "x", "The input value or signal."]], "sdr.diff_decode": [[128, 4, 2, "p-y", "y", "The input encoded data $y[k]$."], [128, 4, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[129, 4, 2, "p-x", "x", "The input uncoded data $x[k]$."], [129, 4, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[130, 4, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [130, 4, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [130, 4, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [130, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.ebn0_to_esn0": [[131, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [131, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [131, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[132, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [132, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [132, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [132, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[133, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[134, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [134, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [134, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[135, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [135, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.evm": [[136, 4, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [136, 4, 2, "p-output", "output", "The output type of the EVM calculation."], [136, 4, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [136, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.frequency_offset": [[137, 4, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [137, 4, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [137, 4, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [137, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [137, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[138, 4, 2, "p-d", "d", "The distance $d$ in meters between the transmitter and receiver."], [138, 4, 2, "p-f", "f", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[139, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [139, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [139, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[140, 4, 2, "p-n", "n", "The length of the Gray code."]], "sdr.hexdump": [[141, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [141, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[142, 4, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [142, 4, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [142, 4, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.linear": [[143, 4, 2, "p-type", "type", "The type of output value or signal."], [143, 4, 2, "p-x", "x", "The input value or signal in dB."]], "sdr.mix": [[144, 4, 2, "p-freq", "freq", "The frequency $f$ of the complex exponential in Hz (or 1/samples if sample_rate=1). The frequency must satisfy $-f_s/2 le f le f_s/2$."], [144, 4, 2, "p-phase", "phase", "The phase $phi$ of the complex exponential in degrees."], [144, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal."], [144, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.multirate_fir": [[145, 4, 2, "p-A_stop", "A_stop", "The stopband attenuation $A_{text{stop}}$ in dB."], [145, 4, 2, "p-P", "P", "The interpolation rate $P$."], [145, 4, 2, "p-Q", "Q", "The decimation rate $Q$."], [145, 4, 2, "p-half_length", "half_length", "The half-length of the polyphase filters."]], "sdr.pack": [[146, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [146, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [146, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[147, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[148, 4, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [148, 4, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [148, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[149, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[150, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.plot": [[151, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [152, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [153, 5, 1, "", "filter", "Plots the frequency response $H(omega)$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [154, 5, 1, "", "frequency_response", "Plots the frequency response $H(omega)$ of the filter."], [155, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [156, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [157, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [158, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [159, 5, 1, "", "phase_response", "Plots the phase response $Theta(omega)$ of the filter."], [160, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [161, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [162, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [163, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [164, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [165, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [166, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[151, 4, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [151, 4, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."], [151, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."]], "sdr.plot.constellation": [[152, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [152, 4, 2, "p-kwargs", "kwargs", "If heatmap=False, additional keyword arguments to pass to matplotlib.pyplot.scatter(). The following keyword arguments are set by default. The defaults may be overwritten."], [152, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [152, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.filter": [[153, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [153, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [153, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [153, 4, 2, "p-filter", "filter", "The filter definition."], [153, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [153, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.frequency_response": [[154, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [154, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [154, 4, 2, "p-filter", "filter", "The filter definition."], [154, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [154, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [154, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[155, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [155, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [155, 4, 2, "p-filter", "filter", "The filter definition."], [155, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [155, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [155, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.impulse_response": [[156, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [156, 4, 2, "p-filter", "filter", "The filter definition."], [156, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.periodogram": [[157, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [157, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [157, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [157, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [157, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [157, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [157, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [157, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [157, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [157, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_delay": [[158, 4, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [158, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [158, 4, 2, "p-filter", "filter", "The filter definition."], [158, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [158, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [158, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_response": [[159, 4, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [159, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [159, 4, 2, "p-filter", "filter", "The filter definition."], [159, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [159, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [159, 4, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [159, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.ser": [[160, 4, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [160, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."], [160, 4, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.spectrogram": [[161, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [161, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [161, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.pcolormesh(). The following keyword arguments are set by default. The defaults may be overwritten."], [161, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [161, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [161, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [161, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [161, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [161, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[162, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [162, 4, 2, "p-filter", "filter", "The filter definition."], [162, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.symbol_map": [[163, 4, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [163, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot(). The following keyword arguments are set by default. The defaults may be overwritten."], [163, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [163, 4, 2, "p-symbol_map", "symbol_map", "The complex symbols $hat{x}[k]$."]], "sdr.plot.time_domain": [[164, 4, 2, "p-centered", "centered", "Indicates whether to center the x-axis about 0. This argument is mutually exclusive with offset."], [164, 4, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal. If \"color\", the real and imaginary parts will have different colors based on the current Matplotlib color cycle. If \"line\", the real part will have a solid line and the imaginary part will have a dashed line, and both lines will share the same color."], [164, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [164, 4, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. The units of the offset are $1/f_s$. This argument is mutually exclusive with centered."], [164, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\"."], [164, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[166, 4, 2, "p-filter", "filter", "The filter definition."], [166, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.raised_cosine": [[167, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [167, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [167, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[168, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[169, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [169, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [169, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[170, 4, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [170, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.snr_to_ebn0": [[171, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [171, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [171, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [171, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[172, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [172, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.to_complex_bb": [[173, 4, 2, "p-x_r", "x_r", "The real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$. If the length is odd, one zero is appended to the end."]], "sdr.to_real_pb": [[174, 4, 2, "p-x_c", "x_c", "The complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$."]], "sdr.unpack": [[175, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [175, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [175, 4, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.zadoff_chu": [[176, 4, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [176, 4, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence. The root must be relatively prime to the length, i.e., $gcd(u, N) = 1$."], [176, 4, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence. When $q ne 0$, the returned sequence is a cyclic shift of the root-$u$ Zadoff-Chu sequence."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"convers": 0, "decibel": 0, "from": [0, 181, 182, 183], "e_b": 0, "n_0": 0, "e_": 0, "": [0, 185, 186], "n": [0, 184, 185, 186], "data": 1, "manipul": [1, 2], "digit": [2, 186], "signal": [2, 178, 184, 187], "process": 2, "filter": [2, 6, 185, 186, 188], "multir": 2, "resampl": [2, 184], "correl": 2, "link": 3, "budget": 3, "channel": [3, 178], "capac": 3, "path": 3, "loss": 3, "antenna": 3, "measur": 4, "energi": 4, "power": [4, 187], "voltag": 4, "modul": [4, 5, 6], "class": 5, "puls": [5, 187, 190], "shape": [5, 187, 190], "symbol": [5, 189], "map": [5, 189], "encod": 5, "plot": [6, 187], "configur": [6, 182, 183], "time": [6, 187, 188], "domain": [6, 187, 188], "frequenc": [6, 185, 186, 187, 188], "spectral": 6, "estim": 6, "analysi": 6, "probabl": 7, "note": [8, 145, 157, 161], "constructor": [8, 25, 31, 38, 53, 63, 70, 88, 97, 105], "method": [8, 25, 31, 38, 53, 63, 70, 88, 97, 105], "properti": [8, 25, 38, 53, 63, 70, 88, 97, 105], "see": [25, 31, 33, 45, 46, 47, 50, 78, 79, 81, 85, 97, 107, 113, 115, 116, 126, 147, 153, 154, 155, 156, 158, 159, 162, 166], "also": [25, 31, 33, 45, 46, 47, 50, 78, 79, 81, 85, 97, 107, 113, 115, 116, 126, 147, 153, 154, 155, 156, 158, 159, 162, 166], "special": [25, 38, 53, 63, 70, 88, 97], "string": [38, 53, 70], "represent": [38, 53, 70], "sequenc": 177, "simul": 178, "model": 178, "impair": 178, "synchron": 179, "document": 180, "instal": [180, 181, 182, 183, 191], "build": 180, "doc": 180, "serv": 180, "pypi": 181, "github": 181, "edit": 181, "local": 181, "folder": 181, "dev": 181, "depend": 181, "linter": 182, "run": [182, 183], "command": [182, 183], "line": [182, 183], "v": [182, 183], "code": [182, 183], "unit": 183, "test": 183, "farrow": 184, "arbitrari": 184, "construct": 184, "an": [184, 185, 186], "input": 184, "x": 184, "t_": 184, "rate": [184, 189], "r": 184, "y": 184, "frac": 184, "upsampl": 184, "integ": 184, "downsampl": 184, "irrat": 184, "fir": 185, "creat": [185, 186], "examin": [185, 186, 187], "impuls": [185, 186], "respons": [185, 186, 188], "h": [185, 186], "step": [185, 186, 188], "omega": [185, 186], "group": [185, 186], "delai": [185, 186], "tau_g": [185, 186], "fulli": [185, 186], "analyz": [185, 186, 188], "iir": 186, "zero": 186, "pole": 186, "stabil": 186, "peak": 187, "averag": 187, "qpsk": [187, 189], "variou": 187, "across": [187, 188], "excess": 187, "bandwidth": 187, "phase": [188, 189], "lock": 188, "loop": 188, "design": 188, "proport": 188, "plu": 188, "integr": 188, "ppi": 188, "implement": 188, "pll": 188, "close": 188, "perform": 188, "compar": 188, "zeta": 188, "b_n": 188, "t": 188, "shift": 189, "kei": 189, "constel": 189, "bpsk": 189, "8": 189, "psk": 189, "16": 189, "error": 189, "curv": 189, "bit": 189, "rais": 190, "cosin": 190, "squar": 190, "root": 190, "gaussian": 190, "sdr": 191, "featur": 191, "v0": 192, "0": 192, "4": 192, "chang": 192, "contributor": 192, "3": 192, "2": 192, "1": 192, "version": 193, "alpha": 193, "releas": 193, "beta": 193}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Conversions": [[0, "conversions"]], "Decibels": [[0, "decibels"]], "From E_b/N_0": [[0, "from-e-b-n-0"]], "From E_s/N_0": [[0, "from-e-s-n-0"]], "From S/N": [[0, "from-s-n"]], "Data manipulation": [[1, "data-manipulation"]], "Digital signal processing": [[2, "digital-signal-processing"]], "Filtering": [[2, "filtering"]], "Multirate filtering": [[2, "multirate-filtering"]], "Resampling": [[2, "resampling"]], "Correlation": [[2, "correlation"]], "Signal manipulation": [[2, "signal-manipulation"]], "Link budgets": [[3, "link-budgets"]], "Channel capacity": [[3, "channel-capacity"]], "Path losses": [[3, "path-losses"]], "Antennas": [[3, "antennas"]], "Measurement": [[4, "measurement"]], "Energy": [[4, "energy"]], "Power": [[4, "power"]], "Voltage": [[4, "voltage"]], "Modulation": [[4, "modulation"], [5, "modulation"], [6, "modulation"]], "Classes": [[5, "classes"]], "Pulse shaping": [[5, "pulse-shaping"]], "Symbol mapping": [[5, "symbol-mapping"], [189, "symbol-mapping"]], "Symbol encoding": [[5, "symbol-encoding"]], "Plotting": [[6, "plotting"]], "Configuration": [[6, "configuration"], [182, "configuration"], [183, "configuration"]], "Time-domain": [[6, "time-domain"]], "Frequency-domain": [[6, "frequency-domain"]], "Spectral estimation": [[6, "spectral-estimation"]], "Filter analysis": [[6, "filter-analysis"]], "Probability": [[7, "probability"]], "Note": [[8, null], [145, null], [157, null], [161, null]], "Constructors": [[8, "constructors"], [25, "constructors"], [31, "constructors"], [38, "constructors"], [53, "constructors"], [63, "constructors"], [70, "constructors"], [88, "constructors"], [97, "constructors"], [105, "constructors"]], "Methods": [[8, "methods"], [25, "methods"], [31, "methods"], [38, "methods"], [53, "methods"], [63, "methods"], [70, "methods"], [88, "methods"], [97, "methods"], [105, "methods"]], "Properties": [[8, "properties"], [25, "properties"], [38, "properties"], [53, "properties"], [63, "properties"], [70, "properties"], [88, "properties"], [97, "properties"], [105, "properties"]], "See also": [[25, null], [31, null], [33, null], [45, null], [46, null], [47, null], [50, null], [78, null], [79, null], [81, null], [85, null], [97, null], [107, null], [113, null], [115, null], [116, null], [126, null], [147, null], [153, null], [154, null], [155, null], [156, null], [158, null], [159, null], [162, null], [166, null]], "Special methods": [[25, "special-methods"], [38, "special-methods"], [53, "special-methods"], [63, "special-methods"], [70, "special-methods"], [88, "special-methods"], [97, "special-methods"]], "String representation": [[38, "string-representation"], [53, "string-representation"], [70, "string-representation"]], "Sequences": [[177, "sequences"]], "Simulation": [[178, "simulation"]], "Channel models": [[178, "channel-models"]], "Signal impairments": [[178, "signal-impairments"]], "Synchronization": [[179, "synchronization"]], "Documentation": [[180, "documentation"]], "Install": [[180, "install"], [182, "install"], [183, "install"]], "Build the docs": [[180, "build-the-docs"]], "Serve the docs": [[180, "serve-the-docs"]], "Installation": [[181, "installation"], [191, "installation"]], "Install from PyPI": [[181, "install-from-pypi"]], "Install from GitHub": [[181, "install-from-github"]], "Editable install from local folder": [[181, "editable-install-from-local-folder"]], "Install the dev dependencies": [[181, "install-the-dev-dependencies"]], "Linter": [[182, "linter"]], "Run from the command line": [[182, "run-from-the-command-line"], [183, "run-from-the-command-line"]], "Run from VS Code": [[182, "run-from-vs-code"], [183, "run-from-vs-code"]], "Unit Tests": [[183, "unit-tests"]], "Farrow arbitrary resampler": [[184, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[184, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[184, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[184, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[184, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[184, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[184, "downsample-by-an-irrational-rate"]], "FIR filters": [[185, "fir-filters"]], "Create an FIR filter": [[185, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[185, "examine-the-impulse-response-h-n"], [186, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[185, "examine-the-step-response-s-n"], [186, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[185, "examine-the-frequency-response-h-omega"], [186, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[185, "examine-the-group-delay-tau-g-omega"], [186, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[185, "fully-analyze-a-fir-filter"]], "IIR filters": [[186, "iir-filters"]], "Create an IIR filter": [[186, "create-an-iir-filter"]], "Examine the zeros and poles": [[186, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[186, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[186, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[187, "peak-to-average-power"]], "QPSK signal with various pulse shapes": [[187, "qpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[187, "examine-time-domain"]], "Examine frequency domain": [[187, "examine-frequency-domain"]], "Plot across excess bandwidth": [[187, "plot-across-excess-bandwidth"]], "Phase-locked loops": [[188, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[188, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[188, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[188, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[188, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[188, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[188, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[188, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[189, "phase-shift-keying"]], "Constellations": [[189, "constellations"]], "BPSK": [[189, "bpsk"]], "QPSK": [[189, "qpsk"]], "8-PSK": [[189, "id1"]], "16-PSK": [[189, "id2"]], "Error rate curves": [[189, "error-rate-curves"]], "Bit error rate curves": [[189, "bit-error-rate-curves"]], "Symbol error rate curves": [[189, "symbol-error-rate-curves"]], "Pulse shapes": [[190, "pulse-shapes"]], "Raised cosine": [[190, "raised-cosine"]], "Square-root raised cosine": [[190, "square-root-raised-cosine"]], "Gaussian": [[190, "gaussian"]], "sdr": [[191, "sdr"]], "Features": [[191, "features"]], "v0.0": [[192, "v0-0"]], "v0.0.4": [[192, "v0-0-4"]], "Changes": [[192, "changes"], [192, "id1"], [192, "id3"], [192, "id5"]], "Contributors": [[192, "contributors"], [192, "id2"], [192, "id4"], [192, "id6"]], "v0.0.3": [[192, "v0-0-3"]], "v0.0.2": [[192, "v0-0-2"]], "v0.0.1": [[192, "v0-0-1"]], "Versioning": [[193, "versioning"]], "Alpha releases": [[193, "alpha-releases"]], "Beta releases": [[193, "beta-releases"]]}, "indexentries": {"module": [[2, "module-sdr"]], "sdr": [[2, "module-sdr"]]}, "docurls": ["api/conversions/", "api/data-manipulation/", "api/dsp/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.DDS/", "api/sdr.DDS.__call__/", "api/sdr.DDS.__init__/", "api/sdr.DDS.nco/", "api/sdr.DDS.reset/", "api/sdr.DDS.step/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__call__/", "api/sdr.FIR.__init__/", "api/sdr.FIR.__len__/", "api/sdr.FIR.__repr__/", "api/sdr.FIR.__str__/", "api/sdr.FIR.delay/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.frequency_response_log/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.reset/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FIRInterpolator/", "api/sdr.FIRInterpolator.__call__/", "api/sdr.FIRInterpolator.__init__/", "api/sdr.FIRInterpolator.__repr__/", "api/sdr.FIRInterpolator.__str__/", "api/sdr.FIRInterpolator.method/", "api/sdr.FIRInterpolator.polyphase_taps/", "api/sdr.FIRInterpolator.rate/", "api/sdr.FIRInterpolator.reset/", "api/sdr.FIRInterpolator.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__call__/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__call__/", "api/sdr.IIR.__init__/", "api/sdr.IIR.__repr__/", "api/sdr.IIR.__str__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__call__/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__call__/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.ber/", "api/sdr.PSK.bps/", "api/sdr.PSK.demodulate/", "api/sdr.PSK.modulate/", "api/sdr.PSK.order/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.barker/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.db/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.evm/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.linear/", "api/sdr.mix/", "api/sdr.multirate_fir/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.filter/", "api/sdr.plot.frequency_response/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.ser/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.raised_cosine/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.to_complex_bb/", "api/sdr.to_real_pb/", "api/sdr.unpack/", "api/sdr.zadoff_chu/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/installation/", "development/linter/", "development/unit-tests/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})