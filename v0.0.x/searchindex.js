Search.setIndex({"titles": ["Conversions", "Data manipulation", "Detection", "Digital signal processing", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.Decimator", "sdr.Decimator.__call__", "sdr.Decimator.__init__", "sdr.Decimator.__repr__", "sdr.Decimator.__str__", "sdr.Decimator.method", "sdr.Decimator.polyphase_taps", "sdr.Decimator.rate", "sdr.Decimator.reset", "sdr.Decimator.taps", "sdr.EnergyDetector", "sdr.EnergyDetector.p_d", "sdr.EnergyDetector.p_fa", "sdr.EnergyDetector.roc", "sdr.EnergyDetector.threshold", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__call__", "sdr.FIR.__init__", "sdr.FIR.__len__", "sdr.FIR.__repr__", "sdr.FIR.__str__", "sdr.FIR.delay", "sdr.FIR.flush", "sdr.FIR.frequency_response", "sdr.FIR.frequency_response_log", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.reset", "sdr.FIR.state", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__call__", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__call__", "sdr.IIR.__init__", "sdr.IIR.__repr__", "sdr.IIR.__str__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.state", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.Interpolator", "sdr.Interpolator.__call__", "sdr.Interpolator.__init__", "sdr.Interpolator.__repr__", "sdr.Interpolator.__str__", "sdr.Interpolator.method", "sdr.Interpolator.polyphase_taps", "sdr.Interpolator.rate", "sdr.Interpolator.reset", "sdr.Interpolator.taps", "sdr.LinearModulation", "sdr.LinearModulation.__init__", "sdr.LinearModulation.__repr__", "sdr.LinearModulation.__str__", "sdr.LinearModulation.ber", "sdr.LinearModulation.bps", "sdr.LinearModulation.decide_symbols", "sdr.LinearModulation.demodulate", "sdr.LinearModulation.map_symbols", "sdr.LinearModulation.modulate", "sdr.LinearModulation.order", "sdr.LinearModulation.phase_offset", "sdr.LinearModulation.pulse_shape", "sdr.LinearModulation.rx_filter", "sdr.LinearModulation.ser", "sdr.LinearModulation.sps", "sdr.LinearModulation.symbol_map", "sdr.LinearModulation.tx_filter", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__call__", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.MSK", "sdr.MSK.__init__", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__call__", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.reset", "sdr.NCO.step", "sdr.OQPSK", "sdr.OQPSK.__init__", "sdr.OQPSK.__repr__", "sdr.OQPSK.__str__", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.__repr__", "sdr.PSK.__str__", "sdr.PSK.ber", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.PiMPSK", "sdr.PiMPSK.__init__", "sdr.Q", "sdr.Qinv", "sdr.ReplicaCorrelator", "sdr.ReplicaCorrelator.p_d", "sdr.ReplicaCorrelator.p_fa", "sdr.ReplicaCorrelator.roc", "sdr.ReplicaCorrelator.threshold", "sdr.albersheim", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.barker", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.db", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.downsample", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.evm", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.half_sine", "sdr.hexdump", "sdr.iq_imbalance", "sdr.linear", "sdr.mix", "sdr.multirate_taps", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.percent", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.eye", "sdr.plot.filter", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.magnitude_response", "sdr.plot.p_d", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.phase_tree", "sdr.plot.raster", "sdr.plot.roc", "sdr.plot.ser", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.polyphase_matrix", "sdr.ppb", "sdr.ppm", "sdr.raised_cosine", "sdr.rectangular", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.to_complex_bb", "sdr.to_real_pb", "sdr.unpack", "sdr.upsample", "sdr.wavelength", "sdr.zadoff_chu", "Sequences", "Simulation", "Synchronization", "Documentation", "Formatting", "Installation", "Unit Tests", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250], "db": [0, 4, 5, 9, 20, 22, 37, 39, 41, 43, 44, 45, 47, 105, 115, 128, 138, 142, 146, 148, 150, 155, 157, 159, 160, 161, 162, 170, 175, 176, 177, 178, 179, 180, 182, 183, 187, 188, 190, 192, 193, 194, 195, 197, 198, 204, 211, 223, 226, 227, 244, 246, 247, 249], "x": [0, 1, 3, 5, 6, 7, 8, 9, 26, 27, 36, 41, 43, 48, 49, 65, 66, 72, 74, 91, 92, 101, 108, 110, 119, 122, 128, 138, 142, 150, 152, 153, 154, 160, 161, 164, 167, 169, 170, 171, 172, 173, 174, 177, 180, 181, 187, 188, 189, 191, 192, 194, 195, 196, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 212, 214, 215, 219, 220, 223, 225, 230, 231, 235, 239, 244, 245, 246, 250], "arraylik": [0, 1, 2, 3, 4, 5, 6, 7, 8, 26, 27, 28, 36, 37, 38, 39, 40, 41, 43, 48, 49, 50, 65, 69, 72, 73, 74, 75, 91, 92, 93, 101, 102, 105, 107, 108, 109, 110, 115, 128, 129, 138, 139, 142, 143, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 164, 165, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 186, 188, 191, 193, 196, 200, 201, 202, 203, 204, 205, 206, 207, 210, 212, 213, 217, 218, 219, 220, 226, 227, 230, 232, 235], "ndarrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 26, 27, 32, 35, 36, 37, 38, 39, 40, 41, 46, 48, 49, 55, 56, 57, 58, 61, 62, 64, 65, 66, 71, 72, 74, 78, 79, 80, 81, 83, 85, 87, 88, 90, 91, 92, 97, 100, 101, 105, 107, 108, 109, 110, 113, 115, 117, 119, 122, 128, 130, 132, 137, 138, 142, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 208, 209, 211, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235], "float_": [0, 2, 3, 4, 5, 6, 7, 8, 36, 37, 38, 39, 40, 41, 46, 101, 105, 113, 115, 128, 132, 138, 142, 146, 148, 150, 152, 153, 154, 155, 156, 157, 158, 159, 162, 165, 168, 170, 175, 176, 177, 178, 179, 182, 183, 185, 188, 193, 196, 197, 211, 219, 220, 221, 222, 224, 226, 227, 228, 229, 232], "convert": [0, 3, 101, 107, 109, 128, 138, 142, 150, 170, 175, 176, 178, 179, 186, 188, 196, 218, 219, 220, 226, 227, 228, 229], "linear": [0, 91, 93, 96, 101, 102, 128, 138, 142, 150, 161, 170, 188, 205, 210, 212, 214, 248, 249], "unit": [0, 26, 48, 62, 72, 88, 91, 119, 129, 130, 139, 143, 151, 161, 162, 170, 171, 172, 188, 213, 215, 239, 242, 243, 245, 248, 249], "percent": [0, 196], "percentag": [0, 196], "ppm": [0, 220, 225, 235], "part": [0, 215, 219, 220, 225, 245], "per": [0, 1, 27, 49, 92, 101, 102, 106, 108, 110, 116, 128, 129, 132, 138, 139, 142, 143, 150, 151, 161, 162, 175, 176, 178, 179, 181, 183, 185, 186, 191, 198, 199, 208, 219, 220, 221, 222, 224, 225, 226, 227, 230, 238, 244, 247, 249], "million": [0, 220, 225], "ppb": [0, 219], "billion": [0, 219], "ebn0_to_esn0": [0, 115, 148, 175, 246, 249], "ebn0": [0, 7, 101, 105, 128, 138, 142, 146, 150, 162, 175, 176, 197, 246], "bp": [0, 101, 106, 128, 138, 142, 150, 175, 176, 178, 226, 246], "int": [0, 1, 3, 6, 7, 26, 28, 33, 41, 43, 44, 47, 48, 51, 54, 56, 57, 58, 59, 62, 65, 68, 72, 80, 81, 83, 84, 88, 91, 93, 98, 101, 102, 106, 111, 116, 128, 129, 130, 137, 138, 139, 142, 143, 150, 151, 160, 161, 163, 164, 166, 167, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 186, 190, 191, 192, 194, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 212, 213, 218, 221, 222, 224, 226, 227, 230, 231, 233, 234, 246], "ebn0_to_snr": [0, 128, 138, 142, 150, 176, 249], "esn0_to_ebn0": [0, 105, 146, 178, 249], "esn0": [0, 7, 101, 115, 128, 138, 142, 148, 150, 178, 179, 211, 246], "esn0_to_snr": [0, 179, 246, 249], "sp": [0, 6, 7, 101, 102, 108, 110, 116, 128, 129, 138, 139, 142, 143, 150, 151, 176, 179, 183, 185, 199, 208, 221, 222, 224, 226, 227, 228, 229, 244, 246, 247], "1": [0, 3, 6, 8, 9, 16, 19, 23, 25, 26, 28, 29, 30, 32, 35, 36, 37, 39, 40, 41, 48, 51, 52, 53, 54, 56, 57, 72, 73, 76, 77, 80, 81, 91, 92, 93, 94, 95, 97, 100, 101, 102, 107, 108, 109, 110, 117, 119, 123, 124, 128, 129, 130, 133, 138, 139, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 209, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 250], "snr_to_ebn0": [0, 105, 146, 162, 226, 249], "snr": [0, 2, 4, 7, 36, 37, 39, 41, 43, 44, 45, 46, 47, 128, 138, 142, 150, 159, 161, 162, 204, 226, 227, 228, 229, 235, 246, 249], "snr_to_esn0": [0, 115, 148, 227, 249], "pack": [1, 41, 43, 128, 138, 142, 150, 186, 191, 248, 249], "bpe": [1, 191, 230], "int_": [1, 6, 101, 107, 108, 128, 138, 142, 150, 164, 166, 167, 171, 172, 173, 184, 191, 230, 235], "binari": [1, 4, 6, 129, 139, 143, 149, 151, 163, 164, 165, 166, 167, 168, 173, 191, 214, 230, 235, 246, 248, 249], "arrai": [1, 32, 35, 41, 93, 97, 100, 102, 128, 129, 138, 139, 142, 143, 149, 150, 151, 160, 163, 164, 166, 167, 171, 172, 173, 177, 184, 191, 192, 194, 215, 218, 230, 243], "an": [1, 2, 3, 4, 26, 36, 48, 58, 72, 73, 75, 83, 91, 92, 102, 129, 139, 143, 146, 148, 151, 154, 162, 191, 197, 202, 211, 230, 232, 239, 248, 249], "multipl": [1, 191, 230, 246, 249], "bit": [1, 5, 7, 41, 43, 46, 101, 105, 106, 128, 129, 138, 139, 142, 143, 146, 149, 150, 151, 162, 164, 165, 167, 168, 175, 176, 178, 186, 191, 197, 226, 230, 248, 249], "element": [1, 186, 191, 230], "unpack": [1, 41, 43, 186, 230, 246, 248, 249], "hexdump": [1, 41, 186, 248, 249], "byte": [1, 186], "width": [1, 186], "16": [1, 146, 148, 149, 175, 176, 178, 186, 197, 211, 218, 221, 224, 226, 227, 244, 249], "str": [1, 26, 29, 30, 48, 52, 53, 72, 76, 77, 91, 94, 95, 101, 103, 104, 128, 138, 140, 141, 142, 144, 145, 150, 186, 199, 205, 208, 209, 212], "return": [1, 6, 9, 17, 19, 22, 23, 26, 27, 29, 30, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 62, 66, 72, 74, 76, 77, 80, 81, 83, 88, 91, 92, 94, 95, 101, 103, 104, 105, 107, 108, 109, 110, 115, 122, 128, 132, 137, 138, 140, 141, 142, 144, 145, 146, 148, 150, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 246, 249], "specifi": [1, 41, 44, 45, 47, 161, 162, 173, 186, 237, 242, 243], "class": [2, 3, 5, 6, 9, 26, 36, 41, 43, 44, 45, 46, 47, 48, 65, 72, 91, 101, 119, 128, 130, 138, 142, 150, 154, 236, 242, 243, 246, 248, 249], "replicacorrel": [2, 154, 155, 156, 157, 158, 249], "implement": [2, 3, 6, 26, 36, 48, 65, 72, 91, 101, 119, 125, 128, 130, 138, 142, 150, 154, 159, 236, 241], "clairvoy": [2, 154], "replica": [2, 154], "correl": [2, 154, 163, 233], "energydetector": [2, 36, 37, 38, 39, 40, 249], "energi": [2, 36, 105, 115, 146, 148, 154, 155, 156, 157, 158, 162, 175, 176, 177, 178, 179, 183, 185, 197, 211, 221, 222, 224, 226, 227, 248, 249], "albersheim": [2, 159, 249], "p_d": [2, 7, 36, 37, 39, 154, 155, 157, 159, 204, 210, 249], "p_fa": [2, 7, 36, 37, 38, 39, 40, 154, 155, 156, 157, 158, 159, 210], "estim": [2, 9, 101, 107, 108, 128, 138, 142, 150, 159, 205, 212, 245], "minimum": [2, 6, 128, 159, 249], "requir": [2, 27, 49, 92, 159, 237, 238, 239, 240, 249], "singl": [2, 39, 146, 148, 159], "sampl": [2, 3, 9, 16, 24, 26, 27, 37, 38, 39, 40, 48, 49, 54, 56, 57, 58, 62, 65, 69, 80, 81, 83, 88, 91, 92, 93, 101, 102, 108, 110, 116, 119, 123, 126, 128, 129, 130, 132, 133, 134, 137, 138, 139, 142, 143, 150, 151, 159, 161, 174, 176, 179, 181, 183, 185, 189, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 212, 213, 215, 221, 222, 224, 225, 226, 227, 228, 229, 231, 235, 241, 244, 245, 247, 248, 249], "given": [2, 36, 41, 43, 44, 45, 47, 65, 66, 154, 159, 180, 242, 243], "n_": [2, 37, 38, 39, 40, 159], "nc": [2, 37, 38, 39, 40, 159], "non": [2, 27, 37, 38, 39, 40, 49, 92, 159, 185, 222], "coher": [2, 37, 38, 39, 40, 159], "combin": [2, 159], "achiev": [2, 3, 159, 190, 218, 246, 247], "probabl": [2, 7, 36, 37, 38, 39, 40, 152, 153, 154, 155, 156, 157, 158, 159, 164, 165, 167, 168, 173, 204, 210, 235, 249], "fals": [2, 5, 26, 28, 29, 30, 36, 37, 38, 39, 40, 48, 50, 52, 53, 65, 67, 72, 73, 75, 76, 77, 91, 92, 93, 94, 95, 128, 138, 142, 146, 148, 150, 154, 155, 156, 157, 158, 159, 160, 164, 167, 173, 177, 189, 194, 195, 198, 205, 210, 212, 215, 223, 243, 247], "alarm": [2, 36, 37, 38, 39, 40, 154, 155, 156, 157, 158, 159, 210], "p_": [2, 7, 36, 37, 38, 39, 40, 146, 148, 154, 155, 156, 157, 158, 159, 160, 161, 170, 173, 180, 188, 192, 194, 197, 205, 210, 211], "fa": [2, 7, 36, 37, 38, 39, 40, 154, 155, 156, 157, 158, 159, 210], "thi": [2, 9, 26, 43, 44, 45, 47, 48, 72, 91, 101, 102, 117, 128, 132, 138, 139, 142, 143, 149, 150, 151, 159, 161, 162, 164, 167, 173, 174, 180, 182, 190, 199, 203, 205, 209, 212, 215, 231, 237, 239, 240, 241, 243, 245, 246, 247], "function": [2, 7, 8, 9, 18, 48, 72, 73, 119, 152, 153, 159, 162, 174, 183, 197, 204, 205, 210, 211, 212, 231, 242, 243, 245, 247, 248, 249], "": [2, 3, 7, 9, 17, 19, 20, 21, 23, 24, 26, 36, 43, 44, 45, 46, 47, 48, 56, 57, 62, 72, 80, 81, 88, 91, 101, 102, 107, 108, 109, 110, 128, 138, 142, 150, 154, 156, 158, 159, 161, 162, 176, 179, 180, 181, 187, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 212, 213, 215, 216, 225, 226, 227, 228, 229, 240, 241, 244, 246, 248, 249], "equat": [2, 17, 19, 20, 21, 22, 23, 37, 38, 40, 72, 138, 142, 150, 155, 156, 158, 159, 182], "fir": [3, 26, 27, 28, 29, 30, 32, 34, 35, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 95, 97, 99, 100, 190, 199, 200, 201, 202, 203, 206, 207, 213, 217, 218, 244, 248, 249], "finit": [3, 26, 48, 91, 248, 249], "impuls": [3, 7, 26, 48, 58, 72, 83, 91, 183, 200, 202, 215, 247, 248, 249], "respons": [3, 7, 26, 48, 56, 57, 58, 62, 72, 80, 81, 83, 88, 91, 183, 200, 201, 202, 203, 207, 213, 247, 248, 249], "iir": [3, 7, 9, 18, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 119, 125, 200, 201, 202, 203, 206, 207, 213, 217, 242, 245, 248, 249], "infinit": [3, 72, 248, 249], "interpol": [3, 26, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 118, 128, 138, 142, 150, 190, 199, 218, 231, 244, 246, 248, 249], "polyphas": [3, 26, 27, 28, 32, 35, 91, 92, 93, 97, 100, 174, 190, 218, 231, 248, 249], "decim": [3, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 101, 102, 107, 108, 109, 110, 114, 117, 128, 129, 138, 139, 142, 143, 149, 150, 151, 174, 190, 218, 246, 248, 249], "multirate_tap": [3, 28, 93, 190, 249], "p": [3, 4, 8, 130, 132, 152, 153, 164, 165, 167, 168, 173, 190, 218, 235], "q": [3, 8, 128, 138, 152, 153, 154, 155, 156, 158, 190, 218, 233, 249], "comput": [3, 8, 26, 36, 37, 38, 39, 40, 101, 105, 115, 128, 138, 142, 146, 148, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 177, 182, 190, 192, 194, 242, 243, 245, 247], "ration": [3, 190, 218], "polyphase_matrix": [3, 218, 249], "tap": [3, 26, 28, 32, 35, 48, 53, 64, 65, 71, 72, 78, 79, 91, 93, 97, 100, 218, 242, 243], "h_i": [3, 26, 28, 32, 35, 48, 50, 64, 91, 93, 97, 100, 218, 242], "matrix": [3, 173, 218, 235], "h_": [3, 9, 26, 32, 35, 91, 97, 100, 218, 245], "i": [3, 9, 16, 25, 26, 27, 28, 32, 35, 36, 38, 39, 40, 41, 46, 48, 49, 50, 58, 62, 63, 64, 65, 70, 72, 75, 79, 83, 88, 89, 91, 92, 93, 97, 100, 102, 119, 123, 124, 126, 128, 132, 138, 139, 142, 143, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 167, 168, 170, 173, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 191, 192, 193, 194, 195, 198, 199, 200, 202, 203, 205, 209, 212, 213, 215, 218, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250], "j": [3, 26, 32, 35, 72, 75, 78, 91, 97, 100, 128, 130, 138, 142, 150, 161, 173, 187, 189, 218, 233, 242, 243, 245], "farrowresampl": [3, 65, 66, 67, 68, 69, 70, 71, 241, 249], "cubic": [3, 65], "farrow": [3, 65, 66, 67, 68, 69, 70, 71, 248, 249], "arbitrari": [3, 6, 65, 66, 67, 68, 69, 70, 71, 101, 248, 249], "mix": [3, 189, 248, 249], "freq": [3, 4, 132, 181, 182, 189, 193, 232, 235, 241, 245], "float": [3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 39, 41, 43, 44, 45, 47, 56, 57, 65, 66, 72, 73, 80, 81, 82, 101, 102, 112, 119, 120, 121, 123, 124, 126, 128, 129, 130, 131, 133, 134, 135, 138, 139, 142, 143, 147, 150, 151, 157, 160, 161, 162, 164, 167, 169, 180, 181, 183, 187, 189, 190, 192, 194, 195, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 212, 214, 215, 221, 223, 224, 225, 235], "0": [3, 6, 8, 16, 26, 27, 32, 35, 36, 39, 41, 48, 49, 50, 52, 53, 56, 57, 64, 72, 73, 75, 76, 77, 78, 79, 80, 81, 91, 92, 93, 97, 100, 101, 102, 107, 108, 109, 110, 117, 123, 128, 129, 130, 133, 138, 139, 142, 143, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 176, 177, 179, 180, 181, 182, 183, 184, 187, 188, 189, 191, 193, 196, 198, 199, 200, 201, 202, 203, 206, 207, 208, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 250], "time": [3, 5, 9, 16, 17, 19, 20, 21, 22, 23, 48, 72, 119, 123, 138, 142, 150, 160, 161, 169, 173, 174, 177, 179, 181, 183, 187, 189, 192, 194, 195, 199, 200, 205, 209, 212, 215, 221, 223, 224, 225, 227, 228, 229, 231, 235, 241, 242, 243, 247, 248, 249], "domain": [3, 5, 160, 161, 169, 174, 177, 181, 187, 189, 192, 194, 195, 200, 205, 209, 212, 215, 223, 225, 228, 229, 231, 235, 248, 249], "n": [3, 5, 6, 7, 8, 9, 26, 27, 36, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 72, 74, 75, 78, 80, 81, 83, 84, 88, 91, 92, 101, 102, 108, 110, 113, 114, 118, 119, 122, 128, 130, 132, 137, 138, 139, 142, 143, 150, 151, 152, 153, 154, 156, 158, 160, 161, 162, 163, 166, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 184, 187, 189, 190, 192, 194, 195, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 212, 213, 215, 223, 225, 226, 227, 228, 229, 231, 233, 234, 235, 245, 247, 248], "complex": [3, 5, 7, 36, 37, 38, 39, 40, 101, 102, 107, 108, 109, 110, 117, 128, 129, 130, 132, 137, 138, 139, 142, 143, 149, 150, 151, 154, 155, 156, 157, 158, 161, 162, 174, 180, 187, 189, 198, 199, 209, 214, 215, 228, 229, 231, 235, 241, 242, 243, 245, 246, 248, 249], "exponenti": [3, 174, 189, 228, 229, 231, 241, 242, 243], "real": [3, 37, 38, 40, 128, 138, 152, 153, 155, 156, 158, 161, 189, 199, 209, 215, 228, 229, 241, 242, 243, 245, 248, 249], "sinusoid": [3, 142, 161, 189, 228, 229, 243, 249], "to_complex_bb": [3, 228, 249], "x_r": [3, 228, 229], "complex_": [3, 7, 101, 108, 109, 110, 117, 128, 130, 132, 137, 138, 142, 149, 150, 198, 214, 228, 229, 233, 234], "passband": [3, 183, 185, 221, 222, 224, 228, 229, 244, 249], "center": [3, 185, 215, 222, 228, 229, 249], "f_": [3, 9, 16, 24, 27, 56, 57, 80, 81, 92, 101, 102, 116, 128, 129, 138, 139, 142, 143, 150, 151, 174, 176, 179, 181, 183, 189, 199, 200, 201, 203, 205, 206, 207, 208, 209, 212, 215, 225, 226, 227, 228, 229, 231, 241, 242, 243, 245, 247], "r": [3, 26, 27, 28, 32, 33, 35, 65, 66, 91, 92, 93, 97, 98, 100, 162, 174, 175, 176, 178, 180, 183, 189, 221, 224, 226, 228, 229, 231, 237, 238, 239, 240, 243, 244, 245, 247], "4": [3, 7, 17, 19, 26, 32, 35, 37, 39, 41, 57, 76, 77, 81, 91, 92, 97, 100, 128, 129, 138, 139, 142, 146, 147, 148, 149, 150, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 168, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 193, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 211, 213, 214, 215, 216, 217, 218, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 238, 239, 241, 243, 244, 246], "rate": [3, 5, 7, 9, 16, 24, 26, 27, 28, 30, 33, 41, 42, 43, 45, 46, 56, 57, 65, 66, 80, 81, 91, 92, 93, 95, 98, 101, 105, 115, 128, 138, 142, 146, 148, 150, 174, 175, 176, 178, 181, 189, 190, 197, 199, 200, 201, 203, 205, 206, 207, 208, 209, 211, 212, 215, 218, 225, 226, 228, 229, 231, 235, 248, 249], "baseband": [3, 7, 9, 128, 138, 142, 150, 189, 199, 208, 228, 229, 244, 245, 249], "x_c": [3, 228, 229], "c": [3, 9, 17, 19, 20, 21, 22, 23, 43, 44, 45, 46, 47, 101, 102, 117, 119, 128, 138, 142, 149, 150, 162, 165, 168, 182, 193, 214, 228, 229, 232, 245], "2": [3, 6, 7, 9, 17, 19, 22, 26, 29, 30, 32, 35, 36, 37, 38, 39, 40, 41, 48, 52, 53, 54, 56, 57, 76, 77, 80, 81, 91, 92, 94, 95, 97, 100, 101, 102, 111, 128, 138, 139, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 237, 240, 241, 242, 243, 244, 245, 246, 247], "to_real_pb": [3, 229, 244, 249], "2f_": [3, 229], "upsampl": [3, 91, 231, 249], "factor": [3, 5, 9, 16, 25, 102, 119, 123, 124, 139, 143, 151, 169, 174, 231, 245], "downsampl": [3, 174, 249], "bsc_capac": [4, 168, 249], "calcul": [4, 5, 162, 165, 168, 180, 182, 193, 232, 249], "symmetr": [4, 167, 168, 173, 228, 229, 235, 248], "bsc": [4, 167, 168, 173, 235, 248, 249], "bec_capac": [4, 165, 249], "erasur": [4, 164, 165, 173, 235, 248], "bec": [4, 164, 165, 173, 235, 248, 249], "awgn_capac": [4, 162, 249], "addit": [4, 161, 162, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 231, 235, 248], "white": [4, 161, 162, 235, 248], "gaussian": [4, 6, 161, 162, 183, 235, 248, 249], "nois": [4, 9, 10, 11, 16, 22, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 105, 115, 119, 123, 126, 128, 138, 142, 146, 148, 150, 154, 155, 156, 157, 158, 161, 162, 175, 176, 178, 179, 197, 211, 226, 227, 235, 245, 248], "awgn": [4, 128, 138, 142, 146, 148, 150, 161, 162, 180, 197, 198, 211, 228, 229, 235, 246, 248, 249], "fspl": [4, 182], "distanc": [4, 182], "free": [4, 128, 138, 142, 150, 182, 248], "space": [4, 57, 81, 182, 248], "wavelength": [4, 232, 249], "lambda": [4, 182, 232], "electromagnet": [4, 232], "wave": [4, 128, 232], "frequenc": [4, 9, 17, 19, 21, 26, 48, 56, 57, 72, 80, 81, 91, 119, 128, 130, 132, 174, 181, 182, 189, 193, 200, 201, 203, 205, 206, 207, 212, 228, 229, 231, 232, 235, 247, 248, 249], "f": [4, 17, 19, 26, 39, 56, 57, 80, 81, 91, 130, 132, 159, 161, 181, 182, 183, 189, 193, 225, 232, 233, 238, 241, 242, 243, 244, 245, 246, 247], "parabolic_antenna": [4, 193, 249], "tupl": [4, 26, 36, 39, 41, 43, 46, 48, 56, 57, 72, 80, 81, 91, 101, 108, 128, 138, 142, 150, 154, 157, 160, 177, 192, 193, 194, 198, 200, 201, 202, 203, 206, 207, 213, 214, 217], "gain": [4, 9, 12, 13, 14, 15, 16, 72, 73, 82, 119, 120, 121, 123, 130, 131, 133, 159, 182, 183, 185, 193, 221, 222, 224, 245, 248], "g": [4, 46, 193, 239], "beamwidth": [4, 193], "theta": [4, 130, 133, 135, 193], "parabol": [4, 193], "reflector": [4, 193], "signal": [5, 7, 9, 17, 19, 22, 23, 26, 27, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 55, 65, 66, 72, 74, 91, 92, 101, 102, 113, 119, 122, 128, 130, 132, 137, 138, 139, 142, 143, 150, 151, 154, 155, 156, 157, 158, 160, 161, 162, 169, 170, 174, 175, 176, 177, 178, 179, 181, 182, 183, 187, 188, 189, 190, 192, 193, 194, 195, 199, 200, 201, 203, 205, 206, 207, 208, 209, 212, 215, 218, 223, 225, 226, 227, 228, 229, 231, 232, 242, 243, 245, 247, 248, 249], "peak_pow": [5, 192, 194, 249], "peak": [5, 128, 138, 150, 169, 180, 192, 194, 195], "average_pow": [5, 160, 192, 249], "averag": [5, 41, 128, 138, 150, 160, 161, 162, 180, 192, 205], "papr": [5, 128, 138, 150, 192, 244, 249], "ratio": [5, 22, 37, 39, 41, 43, 44, 45, 46, 47, 105, 115, 128, 138, 146, 148, 150, 155, 157, 161, 162, 175, 176, 178, 179, 192, 196, 197, 211, 219, 220, 226, 227], "peak_voltag": [5, 169, 195, 249], "bool": [5, 26, 28, 37, 38, 39, 40, 48, 50, 63, 65, 67, 70, 72, 73, 75, 89, 91, 93, 128, 138, 142, 146, 148, 150, 155, 156, 157, 158, 160, 177, 189, 194, 195, 198, 207, 209, 214, 215, 223], "rms_voltag": [5, 169, 223, 249], "root": [5, 6, 102, 139, 143, 151, 180, 199, 215, 223, 224, 233, 234, 242, 248], "mean": [5, 180, 205, 212, 223, 247], "squar": [5, 6, 102, 139, 143, 151, 180, 182, 193, 215, 223, 224, 242], "rm": [5, 169, 180, 223], "crest_factor": [5, 169, 192, 249], "crest": [5, 169], "errorr": [5, 41, 42, 43, 44, 45, 46, 47, 246, 249], "A": [5, 9, 17, 19, 20, 21, 22, 23, 25, 27, 41, 48, 49, 92, 102, 119, 139, 143, 151, 159, 166, 184, 186, 187, 193, 221, 224, 236, 238, 245], "error": [5, 7, 9, 15, 16, 22, 41, 42, 43, 45, 46, 47, 101, 105, 115, 119, 123, 128, 138, 142, 146, 148, 150, 159, 168, 180, 197, 211, 245, 248, 249], "ber": [5, 7, 41, 101, 105, 128, 138, 142, 146, 150, 197, 246, 248, 249], "symbol": [5, 7, 41, 43, 46, 91, 101, 102, 106, 107, 108, 109, 110, 115, 116, 117, 128, 129, 138, 139, 142, 143, 146, 148, 149, 150, 151, 161, 175, 176, 178, 179, 180, 181, 183, 185, 198, 199, 208, 211, 214, 221, 222, 224, 226, 227, 244, 247, 248, 249], "ser": [5, 7, 41, 101, 115, 128, 138, 142, 148, 150, 211, 246, 248, 249], "evm": [5, 180, 248, 249], "x_hat": [5, 7, 41, 43, 101, 108, 128, 138, 142, 150, 180, 198, 246], "ref": [5, 159, 180, 183, 190], "vector": [5, 41, 69, 180, 205, 212, 248, 249], "magnitud": [5, 7, 163, 180, 200, 203, 233, 248, 249], "hat": [5, 7, 43, 101, 107, 108, 128, 138, 142, 150, 180, 198, 214], "k": [5, 6, 7, 43, 101, 102, 106, 107, 108, 109, 110, 111, 128, 138, 142, 143, 150, 151, 171, 172, 175, 176, 178, 180, 198, 214, 226, 244, 247], "linearmodul": [6, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 142, 214, 249], "amplitud": [6, 101, 102, 187, 235, 241, 245], "psk": [6, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 161, 180, 181, 187, 197, 198, 199, 211, 214, 225, 244, 248, 249], "shift": [6, 128, 138, 142, 146, 147, 148, 149, 150, 233, 242, 243, 248, 249], "kei": [6, 128, 138, 142, 146, 147, 148, 149, 150, 248, 249], "demodul": [6, 101, 108, 128, 138, 142, 150, 246, 249], "pimpsk": [6, 150, 151, 249], "pi": [6, 26, 76, 77, 91, 92, 138, 142, 150, 151, 161, 174, 182, 183, 187, 189, 193, 200, 201, 202, 203, 206, 207, 213, 215, 217, 228, 229, 231, 233, 241, 242, 243, 245, 248, 249], "m": [6, 72, 75, 79, 101, 102, 106, 107, 108, 109, 110, 111, 117, 128, 138, 142, 143, 149, 150, 151, 173, 175, 176, 178, 182, 214, 226, 237, 238, 239, 240, 248, 249], "oqpsk": [6, 128, 138, 139, 140, 141, 249], "offset": [6, 17, 19, 26, 91, 92, 101, 102, 112, 128, 129, 130, 132, 133, 135, 138, 139, 142, 143, 147, 150, 151, 181, 189, 215, 225, 235, 245, 248, 249], "quadratur": [6, 128, 138, 187], "msk": [6, 128, 129, 208, 249], "rectangular": [6, 102, 139, 143, 151, 222, 244, 247, 248, 249], "span": [6, 7, 102, 139, 143, 151, 183, 185, 199, 208, 221, 222, 224, 244, 247], "half_sin": [6, 129, 185, 249], "half": [6, 128, 138, 185, 190, 193, 248, 249], "sine": [6, 128, 185, 248, 249], "time_bandwidth": [6, 183], "raised_cosin": [6, 102, 139, 143, 151, 199, 221, 247, 249], "alpha": [6, 102, 139, 143, 151, 183, 216, 221, 224, 244, 247], "rais": [6, 102, 139, 143, 151, 199, 215, 221, 224, 242, 248], "cosin": [6, 102, 139, 143, 151, 199, 215, 221, 224, 242, 248], "rc": [6, 102, 139, 143, 151, 221], "root_raised_cosin": [6, 52, 53, 102, 139, 143, 151, 199, 200, 201, 202, 203, 206, 207, 213, 215, 217, 224, 242, 244, 246, 247, 249], "srrc": [6, 102, 138, 139, 142, 143, 150, 151, 199, 215, 224, 244], "binary_cod": [6, 166, 249], "gener": [6, 128, 138, 142, 150, 161, 164, 166, 167, 173, 184, 210, 237, 246, 249], "code": [6, 26, 29, 48, 52, 72, 76, 91, 94, 101, 103, 128, 129, 138, 139, 140, 142, 143, 144, 149, 150, 151, 163, 166, 175, 176, 178, 184, 198, 214, 226, 234, 239, 246, 249], "length": [6, 7, 26, 27, 39, 48, 49, 51, 58, 62, 74, 91, 92, 93, 102, 108, 110, 129, 139, 143, 151, 163, 166, 183, 184, 185, 190, 200, 202, 205, 209, 212, 213, 221, 222, 224, 228, 233, 234, 238, 241, 244, 247], "gray_cod": [6, 184, 249], "grai": [6, 128, 129, 138, 139, 142, 143, 149, 150, 151, 184, 198, 214, 246, 248], "diff_encod": [6, 128, 138, 142, 146, 148, 150, 171, 172, 249], "y_prev": [6, 171, 172], "differenti": [6, 128, 146, 148, 171, 172, 215, 248, 249], "input": [6, 9, 17, 19, 22, 23, 26, 27, 28, 48, 49, 50, 58, 61, 62, 65, 66, 67, 69, 72, 73, 74, 75, 83, 88, 91, 92, 93, 119, 122, 130, 132, 138, 142, 146, 148, 150, 152, 161, 162, 164, 165, 167, 168, 170, 171, 172, 173, 174, 188, 191, 196, 202, 213, 219, 220, 230, 231, 235, 242, 243, 245], "data": [6, 171, 172, 186, 191, 230, 248], "diff_decod": [6, 171, 172, 249], "y": [6, 26, 27, 48, 49, 55, 66, 72, 74, 91, 92, 119, 122, 130, 132, 137, 161, 164, 167, 171, 172, 173, 174, 181, 187, 189, 198, 203, 205, 212, 214, 215, 225, 231, 245, 246], "decod": [6, 171], "use_styl": [7, 216], "appli": [7, 26, 91, 102, 181, 187, 198, 199, 205, 212, 214, 215, 216, 225, 235], "default": [7, 58, 62, 129, 139, 143, 149, 151, 160, 177, 192, 194, 198, 203, 205, 209, 212, 214, 216, 246], "matplotlib": [7, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 241, 242, 243, 244, 245, 246, 247, 248], "rcparam": [7, 216], "time_domain": [7, 26, 91, 92, 128, 138, 142, 150, 161, 174, 189, 215, 228, 229, 231, 244, 246, 247, 249], "raster": [7, 199, 208, 209, 248, 249], "none": [7, 26, 39, 48, 58, 62, 65, 69, 91, 102, 119, 127, 132, 139, 143, 151, 157, 160, 161, 162, 164, 167, 173, 177, 191, 192, 194, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 212, 213, 214, 215, 230, 235, 241, 244, 246], "periodogram": [7, 174, 205, 228, 229, 231, 244, 248, 249], "power": [7, 128, 138, 142, 150, 160, 161, 162, 170, 180, 183, 185, 188, 192, 193, 194, 205, 221, 222, 224, 247, 248], "densiti": [7, 22, 205, 244, 247], "xx": [7, 205], "us": [7, 26, 28, 31, 34, 48, 50, 55, 60, 65, 67, 72, 73, 75, 86, 91, 92, 93, 96, 99, 101, 102, 107, 108, 119, 125, 128, 138, 139, 142, 143, 150, 151, 162, 165, 168, 180, 186, 190, 191, 198, 199, 200, 202, 204, 205, 212, 213, 230, 237, 238, 239, 240, 242, 243, 246, 247, 248, 250], "welch": [7, 205, 212], "method": [7, 30, 31, 95, 96, 205, 212, 242, 243, 249], "spectrogram": [7, 212, 248, 249], "constel": [7, 128, 138, 142, 147, 150, 161, 180, 181, 187, 198, 225, 233, 248, 249], "symbol_map": [7, 101, 102, 117, 128, 138, 142, 147, 149, 150, 180, 214, 215, 246, 249], "map": [7, 101, 102, 109, 117, 128, 138, 142, 149, 150, 180, 214, 248, 249], "ey": [7, 128, 138, 142, 150, 199, 248, 249], "diagram": [7, 9, 26, 91, 119, 130, 171, 172, 199, 248, 249], "phase_tre": [7, 128, 208, 249], "phase": [7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 101, 102, 112, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 143, 146, 147, 148, 149, 150, 151, 159, 181, 187, 189, 206, 207, 208, 235, 248, 249], "tree": [7, 208, 249], "continu": [7, 128, 208, 241, 249], "cpm": [7, 208, 249], "kwarg": [7, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217], "e_b": [7, 43, 44, 45, 46, 47, 101, 105, 128, 138, 142, 146, 150, 162, 175, 176, 178, 197, 226, 248], "n_0": [7, 22, 43, 44, 45, 46, 47, 101, 105, 115, 128, 138, 142, 146, 148, 150, 161, 162, 175, 176, 178, 179, 180, 197, 198, 211, 226, 227, 246, 248], "e_": [7, 43, 44, 45, 46, 47, 101, 115, 128, 138, 142, 148, 150, 161, 162, 175, 178, 179, 180, 198, 211, 227, 246, 248], "roc": [7, 36, 39, 154, 157, 210, 249], "receiv": [7, 36, 37, 39, 41, 43, 101, 107, 108, 114, 128, 138, 142, 146, 148, 150, 154, 155, 156, 157, 158, 180, 182, 199, 204, 210, 249], "oper": [7, 36, 39, 154, 157, 210, 249], "characterist": [7, 36, 39, 154, 157, 210, 249], "curv": [7, 36, 39, 146, 148, 154, 157, 197, 210, 211, 249], "enr": [7, 154, 155, 157, 204], "impulse_respons": [7, 26, 48, 58, 72, 83, 91, 183, 185, 190, 202, 221, 222, 224, 242, 243, 247, 249], "h": [7, 26, 36, 48, 50, 52, 53, 56, 57, 58, 72, 80, 81, 83, 91, 101, 102, 113, 114, 118, 119, 128, 138, 139, 142, 143, 150, 151, 154, 183, 190, 199, 200, 202, 203, 207, 218, 244, 245, 247], "step_respons": [7, 26, 48, 62, 72, 88, 91, 213, 242, 243, 245, 249], "step": [7, 26, 48, 62, 72, 88, 91, 130, 132, 137, 200, 213, 248], "zeros_pol": [7, 217, 243, 249], "zero": [7, 26, 27, 48, 55, 69, 72, 73, 76, 77, 90, 91, 92, 93, 119, 132, 185, 191, 200, 201, 202, 203, 206, 207, 213, 215, 217, 222, 228, 242, 244, 245, 247, 248, 249], "pole": [7, 72, 73, 76, 77, 85, 200, 201, 202, 203, 206, 207, 213, 217, 242, 248], "magnitude_respons": [7, 56, 57, 80, 81, 185, 190, 203, 221, 222, 224, 242, 243, 245, 247, 249], "omega": [7, 26, 48, 56, 57, 72, 80, 81, 91, 130, 133, 134, 200, 201, 203, 206, 207, 245], "phase_respons": [7, 56, 57, 80, 81, 207, 249], "angl": [7, 207, 245], "phase_delai": [7, 206, 249], "delai": [7, 26, 27, 30, 48, 49, 53, 54, 65, 91, 92, 95, 119, 130, 171, 172, 185, 201, 206, 222, 245, 248], "tau_": [7, 206], "phi": [7, 101, 102, 112, 128, 129, 138, 139, 142, 143, 147, 150, 151, 181, 187, 189, 206], "group_delai": [7, 201, 242, 243, 249], "group": [7, 201, 248], "tau_g": [7, 201], "complementari": [8, 152, 153], "cumul": [8, 152, 153], "distribut": [8, 152, 153], "standard": [8, 152, 153], "normal": [8, 9, 11, 16, 119, 123, 126, 152, 153, 180, 183, 185, 200, 201, 203, 205, 206, 207, 212, 221, 222, 224, 245, 247], "mathcal": [8, 36, 152, 153, 154, 155, 156, 157, 158, 161, 173], "qinv": [8, 152, 153, 249], "invers": [8, 153], "closedlooppl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 236, 245, 249], "defin": [9, 48, 72, 161, 173, 183, 210, 233, 236, 243, 248], "perform": [9, 27, 49, 92, 146, 148, 174, 231, 233, 236, 242, 243, 246, 248, 249], "close": [9, 16, 18, 236, 248, 249], "loop": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 236, 248, 249], "pll": [9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 236, 248, 249], "meant": 9, "analysi": [9, 16, 238, 245, 248, 249], "onli": [9, 27, 34, 49, 55, 60, 65, 69, 86, 92, 99, 102, 129, 139, 143, 149, 151, 161, 182, 185, 209, 222, 240, 245, 246], "block": [9, 26, 91, 119, 130, 171, 172], "bb": [9, 244, 245], "phase_err": 9, "ped": [9, 15, 16, 123, 245], "lf": [9, 245], "phase_est": 9, "lo": [9, 245], "nco": [9, 12, 16, 123, 130, 131, 132, 133, 134, 135, 136, 137, 236, 245, 248, 249], "local": [9, 237, 245], "oscil": [9, 130, 133, 236, 245, 248, 249], "detector": [9, 15, 16, 36, 123, 154, 245, 249], "filter": [9, 13, 14, 16, 18, 26, 27, 28, 31, 32, 34, 35, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 99, 100, 101, 108, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 138, 142, 150, 174, 183, 185, 190, 199, 200, 201, 202, 203, 206, 207, 213, 215, 217, 218, 221, 222, 224, 231, 236, 247, 248, 249], "numer": [9, 130, 133, 236, 243, 245, 248, 249], "control": [9, 130, 133, 221, 224, 236, 245, 248, 249], "The": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 54, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 68, 69, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 91, 92, 93, 96, 97, 98, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 250], "transfer": [9, 18, 48, 72, 73, 119, 183, 242, 243, 245], "2nd": [9, 119, 123, 236, 245, 249], "order": [9, 26, 27, 30, 41, 46, 48, 49, 53, 59, 65, 68, 72, 77, 84, 91, 92, 93, 95, 101, 102, 111, 119, 123, 128, 138, 142, 143, 150, 151, 161, 175, 176, 178, 180, 181, 183, 198, 199, 208, 209, 221, 224, 225, 226, 236, 243, 244, 245, 246, 249], "proport": [9, 13, 27, 92, 119, 120, 123, 182, 193, 236, 249], "plu": [9, 119, 123, 236, 249], "integr": [9, 14, 37, 38, 39, 40, 119, 121, 123, 159, 236, 240, 243, 249], "z": [9, 48, 72, 119, 130, 171, 172, 233, 242, 243, 245], "k_1": [9, 13, 119, 120, 245], "k_2": [9, 14, 119, 121, 245], "frac": [9, 17, 19, 22, 23, 26, 36, 37, 38, 40, 48, 54, 72, 91, 93, 119, 138, 142, 150, 154, 155, 156, 159, 160, 161, 162, 169, 175, 176, 178, 179, 180, 182, 183, 187, 188, 189, 192, 193, 223, 226, 227, 232, 233, 245], "k_0": [9, 12, 16, 123, 130, 131, 133, 245], "k_p": [9, 15, 16, 123, 245], "refer": [9, 17, 19, 20, 21, 22, 23, 36, 37, 38, 40, 41, 65, 119, 146, 148, 154, 155, 156, 158, 159, 161, 169, 180, 181, 183, 190, 192, 218, 221, 224, 225, 233, 243, 247, 248], "michael": [9, 17, 19, 20, 21, 22, 23, 119, 221, 224], "rice": [9, 17, 19, 20, 21, 22, 23, 119, 221, 224], "digit": [9, 17, 19, 20, 21, 22, 23, 119, 146, 148, 221, 224, 245, 248, 249], "commun": [9, 17, 19, 20, 21, 22, 23, 119, 146, 148, 190, 218, 221, 224, 245, 248], "discret": [9, 17, 19, 20, 21, 22, 23, 119, 161, 173, 179, 221, 224, 227, 235, 241, 245, 248], "approach": [9, 17, 19, 20, 21, 22, 23, 119, 162, 165, 168, 221, 224, 245], "appendix": [9, 119, 221, 224], "lock": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137], "exampl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 32, 34, 35, 37, 39, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 99, 100, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 146, 147, 148, 149, 150, 152, 153, 155, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 245], "see": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 34, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 82, 84, 85, 86, 87, 89, 90, 99, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 147, 149, 150, 174, 183, 185, 200, 201, 202, 203, 206, 207, 213, 217, 221, 222, 224, 248], "noise_bandwidth": [9, 16, 119, 123, 126], "damping_factor": [9, 16, 119, 123, 124], "creat": [9, 16, 26, 28, 41, 42, 48, 50, 65, 67, 72, 73, 75, 91, 92, 93, 101, 102, 119, 123, 128, 129, 130, 133, 138, 139, 142, 143, 147, 150, 151, 161, 163, 180, 181, 189, 215, 225, 228, 229, 233, 241, 245, 247], "object": [9, 16, 26, 29, 30, 41, 42, 48, 52, 53, 72, 76, 77, 91, 94, 95, 101, 102, 103, 104, 128, 129, 138, 139, 140, 141, 142, 143, 144, 145, 150, 151, 200, 201, 202, 203, 206, 207, 213, 217, 245, 249], "phase_lock_tim": [9, 23], "frequency_lock_tim": [9, 17], "freq_offset": [9, 17, 19], "lock_tim": [9, 19, 245], "phase_error_vari": [9, 22], "cn0": [9, 22], "varianc": [9, 22, 36, 38, 40, 156, 158, 161], "steadi": [9, 22], "state": [9, 22, 26, 27, 34, 48, 49, 55, 60, 61, 63, 65, 69, 70, 72, 86, 87, 89, 91, 92, 99, 249], "sample_r": [9, 16, 24, 26, 56, 57, 80, 81, 91, 92, 128, 138, 142, 150, 174, 181, 189, 199, 200, 201, 203, 205, 206, 207, 208, 209, 212, 215, 228, 229, 231, 241, 245, 247], "bnt": [9, 11, 245], "bandwidth": [9, 10, 11, 16, 20, 119, 123, 126, 162, 183, 221, 224, 245, 247], "b_n": [9, 10, 11, 16, 17, 19, 22, 23, 119, 123, 126], "t": [9, 11, 16, 36, 119, 123, 126, 154, 183, 186, 237, 241], "bn": [9, 10], "hz": [9, 10, 16, 17, 19, 22, 56, 57, 80, 81, 119, 123, 126, 162, 170, 174, 181, 182, 183, 188, 189, 193, 228, 229, 232, 241], "zeta": [9, 16, 25, 119, 123, 124], "damp": [9, 16, 25, 119, 123, 124, 245], "k0": [9, 12, 16, 123, 130, 131, 133], "kp": [9, 15, 16, 123], "k1": [9, 13, 119, 120, 245], "k2": [9, 14, 119, 121, 245], "repres": [9, 18, 164, 165], "omega_n": [9, 21, 245], "natur": [9, 21], "radian": [9, 20, 21, 22, 130, 132, 133, 134, 135, 150, 245], "omega_3db": [9, 20], "3": [9, 17, 19, 20, 23, 26, 32, 35, 36, 37, 41, 52, 53, 76, 77, 91, 92, 97, 100, 128, 138, 142, 146, 147, 148, 149, 150, 154, 155, 159, 161, 162, 163, 164, 166, 167, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 198, 199, 200, 201, 202, 203, 206, 207, 213, 215, 217, 218, 221, 222, 224, 225, 226, 228, 229, 230, 231, 232, 233, 237, 238, 243, 245, 247, 248], "omega_": [9, 20], "textrm": [9, 20], "properti": [10, 11, 12, 13, 14, 15, 18, 20, 21, 24, 25, 31, 32, 33, 35, 54, 59, 61, 63, 64, 68, 70, 71, 78, 79, 82, 84, 85, 87, 89, 90, 96, 97, 98, 100, 106, 111, 112, 113, 114, 116, 117, 118, 120, 121, 124, 125, 126, 131, 134, 135, 147, 149, 249], "paramet": [16, 17, 19, 22, 27, 28, 37, 38, 39, 40, 43, 44, 45, 47, 49, 50, 56, 57, 58, 62, 66, 67, 69, 73, 74, 75, 80, 81, 83, 88, 92, 93, 102, 105, 107, 108, 109, 110, 115, 122, 123, 129, 132, 133, 137, 139, 143, 146, 148, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233], "where": [16, 27, 49, 92, 102, 119, 123, 126, 143, 151, 154, 161, 162, 173, 175, 176, 178, 183, 226, 233, 242, 243, 248], "period": [16, 119, 123, 126, 128, 233], "second": [16, 17, 19, 23, 41, 119, 123, 126, 183], "critic": [16, 25, 119, 123, 124, 245], "underdamp": [16, 25, 119, 123, 124], "overdamp": [16, 25, 119, 123, 124], "ted": [16, 123], "t_": [17, 19, 23, 66, 183, 247], "fl": [17, 19], "delta": [17, 19, 26, 48, 58, 72, 83, 91, 202, 242, 243], "take": [17, 19, 23, 237], "onto": [17, 19, 23], "39": 17, "pl": [19, 23], "38": 19, "34": 20, "33": 21, "sigma_": [22, 36, 37, 39], "theta_": 22, "carrier": [22, 142], "43": 22, "40": [23, 91, 174], "less": [25, 159], "than": [25, 128, 129, 139, 143, 149, 151, 159, 185, 187, 198, 214, 222], "greater": [25, 221, 224], "note": [26, 32, 35, 36, 37, 38, 40, 48, 72, 91, 97, 100, 119, 128, 130, 138, 142, 150, 154, 155, 156, 158, 159, 161, 162, 165, 168, 171, 172, 183, 187, 193, 199, 218, 233], "equival": [26, 91, 161, 162, 179, 227, 239, 241], "first": [26, 41, 91, 128, 138, 191, 215, 230, 238, 240], "prototyp": [26, 32, 35, 91, 97, 100], "feedforward": [26, 28, 32, 35, 48, 50, 64, 72, 75, 79, 91, 93, 97, 100, 200, 201, 202, 203, 206, 207, 213, 217, 242, 243], "coeffici": [26, 28, 48, 50, 72, 75, 91, 93, 101, 114, 118, 128, 138, 142, 150, 200, 201, 202, 203, 206, 207, 213, 217, 242, 243], "discard": 26, "between": [26, 28, 50, 63, 67, 70, 73, 75, 89, 91, 93, 182, 205, 209, 212, 245, 248], "each": [26, 27, 49, 91, 92, 180, 186, 205, 209, 212], "instead": [26, 91, 198], "decompos": [26, 91], "ar": [26, 27, 28, 32, 35, 36, 41, 43, 44, 45, 47, 49, 50, 57, 67, 73, 75, 81, 91, 92, 93, 97, 100, 101, 102, 114, 118, 128, 129, 138, 139, 142, 143, 150, 151, 154, 162, 164, 165, 167, 168, 182, 185, 191, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 212, 214, 215, 216, 218, 222, 228, 229, 237, 239, 241, 243, 245, 247, 248, 250], "commut": [26, 91], "parallel": [26, 91], "output": [26, 27, 48, 49, 58, 62, 72, 73, 75, 83, 88, 91, 92, 108, 119, 122, 130, 132, 137, 161, 162, 163, 164, 165, 167, 168, 172, 173, 180, 188, 191, 202, 213, 230, 234, 237, 241, 242, 243, 245], "sum": [26, 36, 48, 72, 154, 247], "prevent": [26, 91, 138, 150], "need": [26, 91, 237, 238, 240], "done": [26, 237], "case": [26, 91, 150, 154], "2x": [26, 91], "6": [26, 32, 35, 41, 52, 53, 76, 77, 91, 92, 97, 100, 128, 138, 142, 149, 150, 155, 156, 158, 159, 166, 170, 173, 174, 175, 176, 180, 182, 184, 186, 188, 193, 198, 199, 200, 201, 202, 203, 206, 207, 213, 214, 215, 217, 218, 221, 224, 228, 229, 231, 233, 237, 240, 242, 243, 245, 246], "5": [26, 32, 35, 36, 37, 38, 39, 40, 41, 52, 53, 91, 92, 97, 100, 128, 138, 142, 150, 155, 157, 159, 161, 164, 166, 167, 168, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 193, 196, 199, 200, 201, 202, 203, 206, 207, 213, 215, 217, 218, 221, 224, 225, 226, 227, 228, 229, 231, 233, 237, 241, 242, 243, 244, 245, 246, 247], "summat": 26, "bottom": [26, 91], "top": [26, 91], "adder": [26, 119, 130, 171, 172, 245], "relat": [26, 32, 35, 91, 97, 100, 162, 183], "In": [26, 27, 28, 29, 30, 32, 35, 37, 39, 41, 49, 50, 52, 53, 63, 67, 70, 73, 75, 76, 77, 89, 91, 92, 93, 94, 95, 97, 100, 128, 138, 142, 146, 147, 148, 149, 150, 152, 153, 155, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 241, 246], "np": [26, 32, 35, 37, 39, 76, 77, 91, 92, 97, 100, 101, 113, 117, 128, 138, 142, 146, 148, 149, 150, 155, 157, 159, 161, 162, 163, 164, 165, 167, 168, 173, 174, 180, 181, 182, 187, 189, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 211, 213, 215, 217, 218, 225, 228, 229, 231, 233, 241, 242, 243, 244, 245, 246, 247], "co": [26, 91, 92, 189], "64": [26, 180, 186, 243], "arang": [26, 32, 35, 91, 92, 97, 100, 161, 163, 174, 189, 218, 228, 229, 231, 233, 241, 245], "280": 26, "7": [26, 29, 30, 32, 35, 91, 92, 94, 95, 97, 100, 128, 138, 142, 149, 150, 155, 159, 166, 173, 180, 184, 186, 190, 215, 218, 233, 237, 243], "kaiser": [26, 28, 29, 30, 31, 91, 92, 93, 94, 95, 96], "window": [26, 91, 205, 212], "out": [26, 29, 32, 35, 41, 52, 76, 91, 92, 94, 97, 100, 128, 138, 142, 147, 149, 150, 152, 153, 163, 164, 166, 167, 170, 171, 172, 173, 175, 176, 178, 179, 180, 182, 184, 188, 191, 193, 196, 201, 216, 218, 219, 220, 226, 227, 230, 232], "plt": [26, 37, 39, 91, 92, 128, 138, 142, 146, 147, 148, 149, 150, 155, 157, 159, 161, 162, 163, 165, 168, 174, 180, 181, 182, 183, 185, 187, 189, 190, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 211, 213, 214, 215, 217, 221, 222, 224, 225, 228, 229, 231, 233, 241, 242, 243, 244, 245, 246, 247], "figur": [26, 37, 39, 91, 92, 128, 138, 142, 146, 147, 148, 149, 150, 155, 157, 159, 161, 162, 163, 165, 168, 174, 180, 181, 182, 183, 185, 187, 189, 190, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 211, 213, 214, 215, 216, 217, 221, 222, 224, 225, 228, 229, 231, 233, 241, 242, 243, 244, 245, 246, 247], "figsiz": [26, 37, 39, 91, 92, 128, 138, 142, 146, 147, 148, 149, 150, 155, 157, 159, 161, 162, 163, 165, 168, 174, 180, 181, 182, 183, 185, 187, 189, 190, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 211, 213, 214, 215, 216, 217, 221, 222, 224, 225, 228, 229, 231, 233, 241, 242, 243, 244, 245, 246, 247], "8": [26, 32, 35, 37, 39, 76, 77, 91, 92, 97, 100, 102, 128, 129, 138, 139, 142, 143, 146, 147, 148, 149, 150, 151, 155, 157, 159, 161, 162, 163, 165, 166, 168, 173, 174, 180, 182, 183, 184, 185, 186, 189, 190, 193, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 211, 213, 214, 215, 216, 217, 218, 221, 222, 224, 228, 229, 231, 233, 237, 242, 243, 244, 245, 247], "plot": [26, 37, 39, 56, 57, 58, 62, 80, 81, 83, 88, 91, 92, 128, 138, 142, 146, 147, 148, 149, 150, 155, 157, 161, 162, 163, 165, 168, 174, 180, 181, 182, 183, 185, 187, 189, 190, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 224, 225, 228, 229, 231, 233, 241, 242, 243, 245, 246, 247, 248, 249], "marker": [26, 91, 92, 198, 214, 241, 242, 243, 246], "o": [26, 91, 92, 241], "label": [26, 37, 39, 91, 92, 129, 139, 143, 146, 148, 151, 155, 157, 159, 161, 180, 181, 183, 187, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 211, 212, 215, 221, 224, 225, 241, 244, 245, 246, 247], "titl": [26, 91, 128, 138, 146, 148, 159, 161, 162, 163, 165, 168, 174, 180, 181, 187, 189, 197, 211, 215, 225, 228, 229, 231, 233, 241, 244, 245, 246, 247], "tight_layout": [26, 91, 128, 138, 146, 148, 159, 161, 162, 163, 165, 168, 174, 180, 181, 182, 189, 197, 211, 215, 225, 228, 229, 231, 233, 244, 245, 246, 247], "preserv": [26, 28, 50, 63, 67, 70, 73, 75, 89, 91, 93, 199, 209], "call": [26, 27, 28, 49, 50, 63, 67, 70, 73, 75, 89, 91, 92, 93], "true": [26, 37, 38, 39, 40, 91, 92, 128, 138, 142, 146, 148, 150, 155, 156, 157, 158, 159, 160, 162, 164, 165, 167, 168, 173, 177, 182, 189, 194, 195, 198, 207, 209, 214, 216, 223, 244, 246], "y1": [26, 91, 92, 187], "70": [26, 186, 247], "y2": [26, 91, 92, 187], "140": [26, 174], "y3": [26, 91, 92], "210": 26, "y4": [26, 91], "y5": [26, 91], "flush": [26, 27, 48, 49, 55, 91, 92, 249], "y_1": [26, 91, 187], "y_2": [26, 91, 187], "y_3": [26, 91], "y_4": [26, 91], "y_5": [26, 91], "__call__": [26, 27, 28, 48, 49, 50, 63, 65, 66, 67, 70, 72, 73, 74, 75, 89, 91, 92, 93, 119, 122, 130, 132, 249], "full": [26, 27, 49, 91, 92, 163], "__len__": [26, 48, 51, 91], "__repr__": [26, 29, 48, 52, 72, 76, 91, 94, 101, 103, 128, 138, 140, 142, 144, 150], "style": [26, 29, 48, 52, 72, 76, 91, 94, 101, 103, 128, 138, 140, 142, 144, 150, 216], "__str__": [26, 30, 48, 53, 72, 77, 91, 95, 101, 104, 128, 138, 141, 142, 145, 150], "human": [26, 30, 48, 53, 72, 77, 91, 95, 101, 104, 128, 138, 141, 142, 145, 150], "readabl": [26, 30, 48, 53, 72, 77, 91, 95, 101, 104, 128, 138, 141, 142, 145, 150], "reset": [26, 34, 48, 60, 65, 69, 72, 86, 91, 99, 119, 127, 130, 136], "when": [26, 34, 48, 55, 58, 60, 62, 72, 83, 86, 88, 91, 99, 161, 162, 164, 165, 167, 168, 179, 200, 201, 202, 203, 206, 207, 213, 227, 233, 241, 242, 243], "pass": [26, 48, 55, 91, 161, 164, 167, 173, 180, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 235, 237, 239, 242, 243, 249], "through": [26, 48, 55, 91, 138, 150, 164, 167, 173, 235, 242, 243, 245], "indic": [26, 28, 38, 39, 40, 48, 50, 63, 65, 67, 70, 72, 73, 75, 89, 91, 93, 102, 129, 138, 139, 142, 143, 146, 148, 150, 151, 155, 156, 157, 158, 160, 177, 183, 185, 187, 189, 194, 195, 199, 207, 208, 209, 215, 221, 222, 223, 224], "whether": [26, 28, 38, 39, 40, 48, 50, 63, 65, 67, 70, 72, 73, 75, 89, 91, 93, 146, 148, 155, 156, 157, 158, 160, 177, 189, 194, 195, 207, 209, 215, 223], "consist": [26, 43, 44, 45, 46, 47, 48, 61, 91], "previou": [26, 28, 48, 50, 61, 67, 69, 73, 75, 91, 93, 171, 172], "u": [26, 48, 62, 72, 88, 91, 159, 213, 233, 234, 242, 243], "frequency_respons": [26, 48, 56, 72, 80, 91, 249], "frequency_response_log": [26, 48, 57, 72, 81, 91], "logarithm": [26, 48, 57, 72, 81, 91, 200, 201, 203, 205, 206, 207, 242, 243], "axi": [26, 48, 57, 72, 81, 91, 160, 177, 192, 194, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 212, 214, 215, 241], "custom": [26, 31, 91, 96, 102, 139, 143, 151, 249], "design": [26, 28, 31, 91, 93, 96, 102, 139, 143, 151, 190, 237, 248, 249], "multir": [26, 27, 28, 31, 91, 92, 93, 96, 190, 218, 249], "polyphase_tap": [26, 30, 32, 35, 91, 92, 95, 97, 100], "d": [26, 48, 54, 91, 182, 193, 237, 239, 248], "lfloor": [26, 48, 54, 91], "rfloor": [26, 48, 54, 91], "mode": [27, 28, 34, 49, 50, 55, 60, 63, 65, 67, 69, 70, 73, 75, 86, 89, 92, 93, 99, 163, 233], "l": [27, 49, 74, 92], "stream": [27, 28, 29, 30, 34, 49, 50, 52, 53, 55, 60, 63, 65, 67, 69, 70, 73, 75, 76, 77, 86, 89, 92, 93, 94, 95, 99, 128, 138, 142, 150, 243], "convolut": [27, 49, 91, 92], "ha": [27, 49, 91, 92, 128, 138, 142, 161, 174, 182, 183, 193, 231, 233, 245, 246, 247], "align": [27, 49, 92, 138, 241], "howev": [27, 43, 44, 45, 47, 49, 92, 119, 165, 168, 241], "produc": [27, 49, 91, 92, 183, 247], "final": [27, 49, 92], "dictat": [27, 49, 92], "argument": [27, 28, 49, 92, 93, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 242, 243], "specif": [28, 46, 93, 240, 247], "npt": [28, 93, 102, 129, 139, 143, 151, 200, 201, 202, 203, 206, 207, 213, 217], "string": [29, 30, 52, 53, 76, 77, 94, 95, 102, 103, 104, 139, 140, 141, 143, 144, 145, 151, 186, 205, 212, 249], "represent": [29, 30, 52, 53, 76, 77, 94, 95, 103, 104, 140, 141, 144, 145, 214, 249], "print": [30, 53, 77, 95, 186, 241, 242, 243, 245], "167": [30, 95], "24": [30, 95], "shape": [30, 53, 77, 92, 95, 101, 102, 108, 110, 113, 114, 118, 128, 138, 139, 142, 143, 150, 151, 183, 185, 199, 215, 221, 222, 224, 243, 248, 249], "84": [30, 95], "befor": [32, 35, 97, 100, 250], "decomposit": [32, 35, 97, 100, 249], "after": [32, 35, 97, 100], "10": [32, 35, 37, 39, 41, 91, 92, 97, 100, 102, 128, 138, 139, 142, 143, 146, 148, 150, 151, 155, 157, 159, 160, 161, 166, 170, 173, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 206, 207, 211, 213, 215, 217, 218, 221, 222, 223, 224, 225, 226, 227, 241, 242, 243, 244, 245, 246, 247], "9": [32, 35, 91, 92, 97, 100, 128, 138, 142, 150, 155, 159, 166, 173, 180, 184, 186, 218, 221, 224, 243, 244, 246, 247, 249], "null": [36, 154, 203, 205, 247], "altern": [36, 154, 243], "hypothes": [36, 154], "follow": [36, 41, 187, 198, 209, 212, 214, 216, 218, 245], "assum": [36, 154, 161, 173, 191, 230], "valu": [36, 101, 102, 105, 115, 128, 129, 138, 139, 142, 143, 146, 148, 150, 151, 152, 153, 163, 170, 171, 172, 183, 187, 188, 198, 214, 243, 249], "random": [36, 128, 138, 142, 150, 161, 164, 167, 173, 180, 181, 187, 198, 199, 208, 215, 225, 244, 246], "process": [36, 37, 38, 40, 154, 155, 156, 158, 190, 218, 243, 245, 248], "w": [36, 154, 161, 241, 242, 243, 244, 245, 246, 247], "sigma": [36, 37, 38, 39, 40, 154, 155, 156, 157, 158, 161, 162], "_0": [36, 154], "_1": [36, 154], "test": [36, 154, 239, 248], "statist": [36, 37, 38, 40, 154, 155, 156, 158], "limits_": [36, 48, 72, 154], "left": [36, 37, 38, 72, 138, 142, 150, 154, 155, 156, 158, 159, 160, 161, 162, 177, 180, 182, 183, 187, 189, 193, 194, 195, 223, 233], "right": [36, 37, 38, 72, 138, 142, 150, 154, 155, 156, 158, 159, 160, 161, 162, 177, 180, 182, 183, 187, 189, 193, 194, 195, 223, 233], "gamma": [36, 38, 40, 154, 156, 158, 159], "sim": [36, 154, 161, 238], "chi_": [36, 37, 38], "2n": [36, 37, 38], "text": [36, 150, 154, 159, 160, 161, 162, 165, 168, 169, 170, 180, 181, 182, 188, 190, 192, 194, 195, 223, 225], "under": [36, 154], "detect": [36, 37, 38, 39, 40, 154, 155, 156, 157, 158, 159, 204, 210, 249], "threshold": [36, 38, 40, 154, 156, 158], "q_": [36, 37, 38, 40], "chi_n": [36, 37, 38, 40], "steven": [36, 37, 38, 40, 154, 155, 156, 158], "kai": [36, 37, 38, 40, 154, 155, 156, 158], "fundament": [36, 37, 38, 40, 154, 155, 156, 158], "theori": [36, 37, 38, 40, 154, 155, 156, 158], "section": [36, 43, 44, 45, 46, 47, 154, 243, 245], "static": [36, 37, 38, 39, 40, 154, 155, 156, 157, 158, 238], "n_nc": [36, 37, 38, 39, 40, 159], "number": [37, 38, 39, 40, 41, 43, 44, 47, 56, 57, 58, 62, 80, 81, 83, 88, 101, 102, 106, 116, 128, 129, 137, 138, 139, 142, 143, 150, 151, 159, 161, 164, 167, 173, 175, 176, 178, 183, 185, 186, 191, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 212, 213, 221, 222, 224, 226, 230], "For": [37, 38, 40, 155, 156, 158, 161, 174, 182, 231, 237, 242], "linspac": [37, 146, 148, 155, 162, 165, 168, 182, 197, 211, 243, 244, 245, 246], "20": [37, 39, 91, 92, 128, 138, 142, 150, 155, 159, 162, 164, 167, 170, 173, 180, 181, 186, 187, 188, 195, 218, 223, 231, 244, 246, 247, 249], "101": [37, 39, 155, 157], "25": [37, 164, 167, 173, 196, 199, 219, 220, 241, 244, 245, 247], "1e": [37, 155, 181, 246], "sigma2": [38, 40, 156, 158], "If": [39, 69, 102, 132, 139, 143, 151, 157, 160, 161, 162, 173, 177, 191, 194, 195, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 212, 213, 214, 215, 223, 228, 230, 248], "logspac": [39, 157, 159], "theoret": [39, 146, 148, 197, 211, 246, 249], "variou": [39, 238, 247], "100": [39, 72, 83, 88, 146, 148, 159, 161, 162, 165, 168, 170, 180, 188, 189, 197, 199, 200, 202, 208, 211, 213, 215, 225, 228, 229, 231, 241, 245], "1_000": [39, 161, 181, 182, 187, 225, 244], "000": [39, 181], "5_000": 39, "measur": [41, 43, 160, 161, 169, 170, 177, 180, 188, 192, 194, 195, 223, 245, 248, 249], "new": [41, 42, 65, 67, 101, 102, 128, 129, 138, 139, 142, 143, 150, 151, 225], "accumul": [41, 130, 133, 134, 245], "from": [41, 56, 57, 72, 73, 80, 81, 101, 117, 128, 138, 142, 149, 150, 170, 175, 176, 178, 179, 188, 196, 205, 212, 219, 220, 226, 227, 237, 242, 243, 245, 248], "contain": [41, 161, 186], "add": [41, 43, 46, 128, 138, 142, 150, 161, 181, 185, 209, 222, 225, 235, 246, 250], "total": [41, 183, 185, 221, 222, 224, 247], "count": [41, 44, 180], "error_r": [41, 45, 46, 246], "everi": [41, 241], "can": [41, 43, 44, 45, 47, 119, 128, 161, 180, 183, 190, 191, 199, 205, 212, 239, 242, 243, 246, 248, 250], "obtain": 41, "tabul": [41, 42], "all": [41, 46, 132, 180, 199, 208, 209, 238, 240, 248], "ascend": [41, 46], "correspond": [41, 46, 209], "other": [43, 44, 45, 47, 241, 250], "quantiti": [43, 44, 45, 46, 47], "user": [43, 44, 45, 47, 242, 243], "caution": [43, 44, 45, 47], "instanc": [43, 44, 45, 47, 128], "transmit": [43, 101, 118, 128, 138, 142, 150, 180, 199], "e": [46, 130, 154, 155, 156, 157, 158, 160, 164, 165, 177, 233, 238, 239, 242, 243, 245, 246], "whatev": 46, "wa": [46, 162], "provid": [46, 101, 105, 115, 128, 138, 142, 146, 148, 150, 209, 238, 248], "wrapper": [48, 72], "scipi": [48, 72, 205, 212, 247, 248], "convolv": [48, 215], "It": [48, 72, 91, 102, 119, 139, 143, 151, 161, 199], "support": [48, 72, 249], "one": [48, 72, 129, 138, 139, 143, 149, 151, 183, 186, 199, 200, 201, 203, 205, 206, 207, 212, 228, 242, 243, 244, 247], "its": [48, 72, 73, 161, 242, 243, 247], "sum_": [48, 72, 156, 158, 160, 161, 162, 177, 180, 223], "valid": [49, 182, 199, 208, 209, 233], "same": [49, 92, 215, 242], "0013559842808217807": [52, 53], "005995136544658217": [52, 53], "008698817681933214": [52, 53], "0024103767414047302": [52, 53], "010205586837665018": [52, 53], "018983779931504997": [52, 53], "011950905288150394": [52, 53], "01518393864077397": [52, 53], "051622191325047306": [52, 53], "07210389837804473": [52, 53], "04745944982876247": [52, 53], "039173517569276436": [52, 53], "17918683372907862": [52, 53], "3367363220550604": [52, 53], "4611457574513795": [52, 53], "5084040873607553": [52, 53], "30": [53, 91, 174, 200, 202, 213, 228, 229, 243, 249], "31": 53, "15": [53, 128, 157, 166, 184, 218, 231], "remain": [55, 174, 191], "1024": [56, 57, 80, 81, 200, 201, 203, 206, 207, 244, 247], "decad": [57, 81, 200, 201, 203, 206, 207, 242, 245], "resampl": [65, 66, 67, 68, 69, 70, 71, 190, 218, 248, 249], "http": [65, 159, 169, 183, 190, 192, 233, 237, 238, 239], "wirelesspi": 65, "com": [65, 159, 183, 190, 238, 239], "fraction": [65, 69, 183, 241], "structur": 65, "index": [65, 69, 199, 208, 209, 214, 237], "should": [69, 128, 199, 239], "equal": [69, 128], "three": [69, 241, 247], "lfilter": 72, "b_i": [72, 75, 79, 200, 201, 202, 203, 206, 207, 213, 217, 243], "feedback": [72, 75, 78, 200, 201, 202, 203, 206, 207, 213, 217, 243], "a_j": [72, 75, 78, 200, 201, 202, 203, 206, 207, 213, 217, 243], "These": [72, 138, 142, 150, 216, 239, 245], "differ": [72, 129, 139, 143, 149, 151, 215, 233, 247], "a_0": 72, "b": [72, 75, 159, 162, 183, 186, 200, 202, 213, 237, 238, 247], "classmethod": [72, 73], "zerospol": [72, 73, 76, 77, 200, 201, 202, 203, 206, 207, 213, 217, 243], "self": [72, 73], "b_tap": [72, 77, 79, 243], "a_tap": [72, 77, 78, 243], "exp": [76, 77, 138, 142, 150, 174, 183, 187, 189, 200, 201, 202, 203, 206, 207, 213, 215, 217, 229, 231, 233, 241, 243, 245], "1j": [76, 77, 174, 189, 200, 201, 202, 203, 206, 207, 213, 215, 217, 229, 231, 241, 243, 245], "conj": [76, 77, 200, 201, 202, 203, 206, 207, 213, 217, 243, 245], "478207252018059": [76, 77, 243], "6400000000000001": [76, 77, 243], "7391036260090295": [77, 243], "3061467458920719j": [77, 243], "insert": 91, "multipli": 91, "hold": [91, 93, 191, 249], "recommend": 91, "wai": [91, 239], "11": [91, 128, 138, 142, 150, 166, 184, 190, 218, 237], "zoh": [91, 93, 96], "12": [91, 128, 138, 142, 150, 156, 158, 159, 166, 184, 190, 218, 242, 246], "13": [91, 128, 138, 142, 150, 154, 155, 156, 158, 163, 166, 184, 218, 249], "iter": 92, "concaten": [92, 243], "linearli": 93, "2r": 93, "ramp": [93, 119], "ones": [93, 245], "modul": [101, 102, 110, 111, 113, 128, 138, 139, 142, 143, 146, 148, 150, 151, 161, 175, 176, 178, 180, 181, 187, 197, 199, 208, 211, 214, 225, 226, 237, 240, 244, 246, 248, 249], "map_symbol": [101, 109, 128, 138, 142, 150, 198, 199, 249], "decide_symbol": [101, 107, 128, 138, 142, 150, 249], "a_hat": [101, 107, 128, 138, 142, 150], "decis": [101, 107, 108, 128, 138, 142, 150, 199], "maximum": [101, 107, 108, 128, 138, 142, 150, 183, 185, 198, 214, 221, 222, 224], "likelihood": [101, 107, 108, 128, 138, 142, 150], "mle": [101, 107, 128, 138, 142, 150], "puls": [101, 102, 108, 110, 113, 114, 118, 128, 138, 139, 142, 143, 150, 151, 183, 185, 199, 215, 221, 222, 224, 248, 249], "match": [101, 102, 108, 114, 128, 138, 139, 142, 143, 150, 151, 249], "abstract": [101, 105, 115], "log_2": [101, 106, 128, 138, 142, 150, 162, 175, 176, 178, 226], "phase_offset": [101, 102, 112, 128, 129, 138, 139, 142, 143, 147, 150, 151, 161, 180, 181, 187, 198, 199, 214, 225, 244, 246], "degre": [101, 102, 112, 128, 129, 138, 139, 142, 143, 147, 150, 151, 181, 187, 189, 193], "dot": [101, 102, 117, 128, 138, 142, 149, 150, 214], "mapsto": [101, 102, 117, 128, 138, 142, 149, 150, 214], "mathbb": [101, 102, 117, 128, 138, 142, 149, 150, 162, 214, 233], "sym": [101, 102, 116, 128, 129, 138, 139, 142, 143, 150, 151, 176, 179, 183, 226, 227, 247], "pulse_shap": [101, 102, 108, 110, 113, 128, 138, 139, 142, 143, 150, 151, 244], "tx_filter": [101, 118, 128, 138, 142, 150], "rx_filter": [101, 114, 128, 138, 142, 150], "rect": [102, 139, 143, 151, 247], "whose": [102, 129, 139, 142, 143, 151], "import": [102, 139, 143, 151, 239, 241, 242, 243, 244, 245, 246, 247, 248], "roll": [102, 139, 143, 151, 233, 247], "off": [102, 139, 143, 151], "psd": [105, 115, 146, 148, 162, 175, 176, 178, 179, 197, 211, 226, 227], "p_b": 105, "s_hat": [108, 246], "size": [108, 110, 163, 173, 241, 245, 246, 247], "p_e": 115, "loopfilt": [119, 120, 121, 122, 123, 124, 125, 126, 127, 236, 245, 249], "ppi": [119, 123, 236], "track": 119, "constant": [119, 128, 130, 133, 134, 205, 212, 243, 245], "cannot": 119, "chirp": 119, "underli": [119, 125], "scheme": [128, 138, 142, 150, 249], "similar": [128, 138, 150, 247], "One": [128, 138, 150, 247], "distinct": [128, 138, 150], "result": [128, 138, 150, 160, 177, 182, 193, 194, 195, 221, 223, 224, 246], "envelop": [128, 242, 243], "which": [128, 138, 150, 159, 160, 161, 162, 177, 181, 187, 192, 193, 194, 198, 214, 225, 241, 245, 247], "lower": [128, 138, 150, 203, 205, 221, 224], "also": [128, 182, 183, 248], "consid": [128, 186], "cpfsk": 128, "separ": 128, "modem": [128, 138, 142, 150], "45": [128, 129, 138, 139, 142, 147, 161, 180, 181, 187, 189, 198, 199, 214, 225, 244, 246], "symbol_label": [128, 129, 138, 139, 142, 143, 149, 150, 151, 246], "randint": [128, 138, 142, 150, 161, 164, 167, 173, 180, 181, 187, 198, 199, 208, 215, 225, 244, 246], "1000": [128, 138, 142, 150, 180, 182, 215, 228, 229, 246], "dtype": [128, 138, 142, 150, 163, 191, 215, 230, 234, 245], "uint8": [128, 138, 142, 150, 191, 230], "complex_symbol": [128, 138, 142, 150], "70710678": [128, 138, 142], "70710678j": [128, 138, 142], "linestyl": [128, 138, 142, 150, 198, 209, 214, 216, 233, 241, 245, 246, 247], "tx_sampl": [128, 138, 142, 150], "50": [128, 138, 142, 150, 170, 188, 196, 214, 228, 229, 241, 244], "like": [128, 239, 248, 249], "channel": [128, 138, 146, 148, 162, 164, 165, 167, 168, 173, 197, 211, 248, 249], "subplot": [128, 138, 187, 245, 246], "imag": [128, 138, 241], "trajectori": 128, "although": 128, "boundari": 128, "lead": [128, 187, 246], "spectral": [128, 174, 205, 244, 247], "effici": [128, 174, 193, 231], "gmsk": 128, "rx_sampl": [128, 138, 142, 150], "last": [128, 138, 191, 237], "rx_symbol": [128, 138, 142, 150], "rx_complex_symbol": [128, 138, 142, 150], "14": [128, 138, 142, 150, 155, 166, 184, 218], "array_equ": [128, 138, 142, 150], "bin": [129, 139, 143, 149, 151, 180, 198, 214, 246], "absolut": [129, 130, 133, 135, 139, 151, 162], "consecut": [129, 139, 143, 151], "adjac": [129, 139, 143, 149, 151, 246, 247], "mai": [129, 139, 143, 149, 151, 180, 198, 209, 212, 214, 216, 243], "more": [129, 139, 143, 149, 151, 249], "start": [129, 139, 143, 151, 237], "0j": [129, 139, 143, 151], "go": [129, 139, 143, 151], "counter": [129, 139, 143, 151], "clockwis": [129, 139, 143, 151], "around": [129, 139, 143, 151], "circl": [129, 139, 143, 151, 243], "increment": [130, 132, 133, 134, 245], "v": [130, 170, 188, 237], "variabl": [130, 132, 186, 245], "forward": [130, 137], "vari": 132, "qpsk": [138, 142, 146, 147, 148, 150, 161, 180, 181, 197, 198, 199, 211, 214, 215, 225, 248, 249], "convent": [138, 150], "transit": [138, 150, 167, 168, 173, 235], "independ": 138, "apart": 138, "origin": [138, 150, 231, 241], "taken": [138, 142, 150], "jq": 138, "begin": [138, 150, 154], "end": [138, 150, 154, 228, 238], "encod": [142, 146, 148, 171, 172, 248], "inform": [142, 175, 176, 178, 226], "ge": [143, 151, 159], "were": [146, 148], "simon": [146, 148], "alouini": [146, 148], "over": [146, 148, 186], "fade": [146, 148], "chapter": [146, 148, 190, 218], "john": [146, 148], "proaki": [146, 148], "optimum": [146, 148], "bpsk": [146, 148, 197, 211, 215, 244], "psk8": [146, 148, 197, 211, 246], "psk16": [146, 148, 197, 211, 246], "compar": [146, 148, 247], "de": [146, 148, 249], "se": [148, 211], "00000000e": [149, 150, 243], "00": [149, 150, 243], "00j": [149, 150], "07106781e": [149, 150], "01": [149, 150, 186, 243, 245], "01j": [149, 150], "12323400e": [149, 150], "17": [149, 150, 193, 218, 237], "83697020e": 149, "22464680e": [149, 150], "16j": [149, 150], "annot": [149, 214, 249], "odd": [150, 228], "rotat": [150, 189], "rel": [150, 233, 247], "even": [150, 183, 221, 224], "2m": 150, "displaystyl": 150, "pi4_qpsk": 150, "exceed": [152, 153], "15865525393145707": [152, 153], "158655": [152, 153], "0000010494310452": [152, 153], "perfect": 154, "knowledg": 154, "cn": [154, 161], "mathrm": 154, "re": 154, "sqrt": [154, 155, 156, 158, 159, 180, 183, 223, 233, 244, 245, 247], "desir": [159, 161, 246], "ln": [159, 183], "62": [159, 186], "_": [159, 180], "log_": [159, 160, 170, 177, 182, 192, 194, 195, 223], "54": [159, 186], "44": 159, "12ab": 159, "7b": 159, "claim": 159, "leq": 159, "le": [159, 189, 193, 221, 224], "8096": 159, "radarsp": 159, "weebli": 159, "upload": 159, "21471216": 159, "albersheim_alternative_form": 159, "pdf": [159, 183], "bpb": 159, "w2": 159, "wpmucdn": 159, "site": [159, 237], "gatech": 159, "edu": 159, "dist": [159, 238], "462": 159, "file": [159, 238, 240], "2016": 159, "noncoher": 159, "approxim": [159, 249], "www": [159, 183, 190], "mathwork": [159, 183, 190], "help": [159, 183, 190], "html": [159, 183, 190, 237], "semilogx": [159, 210], "legend": [159, 187, 241, 244, 245, 247], "grid": [159, 162, 165, 168, 182, 216, 241, 244, 245, 247], "both": [159, 162, 198, 214, 215, 241, 245], "xlabel": [159, 162, 163, 165, 168, 180, 182, 233, 241, 244, 245, 247], "ylabel": [159, 162, 163, 165, 168, 180, 182, 233, 241, 244, 245, 247], "across": 159, "nuse": 159, "avg": [160, 161, 192], "ax": [160, 177, 192, 194, 216], "along": [160, 177, 192, 194], "entir": [160, 177, 192, 194], "decibel": [160, 170, 177, 188, 194, 195, 223, 248, 249], "seed": [161, 164, 167, 173], "ad": [161, 209, 238, 248, 249], "explicitli": 161, "known": 161, "must": [161, 183, 189, 209, 221, 224, 233], "numpi": [161, 164, 167, 173, 230, 241, 242, 243, 244, 245, 246, 247, 248], "default_rng": [161, 164, 167, 173], "noisi": 161, "set": [161, 182, 198, 203, 205, 209, 212, 214, 216, 238, 240, 243], "sin": [161, 228], "zorder": [161, 181, 225], "infti": [161, 162], "nand": 161, "capac": [162, 165, 168, 248, 249], "2d": [162, 209], "x_i": [162, 164, 165, 167, 168, 173, 187], "y_i": [162, 164, 165, 167, 168, 173], "monoton": 162, "decreas": 162, "limit": [162, 198, 203, 205, 214, 246], "At": 162, "occur": 162, "view": [162, 238, 248], "59": 162, "shannon": 162, "semilogi": [162, 197, 210, 211], "barker": [163, 234, 248, 249], "ani": [163, 170, 174, 188, 203, 205, 231, 234, 240], "int64": [163, 234], "bipolar": [163, 249], "float64": [163, 234], "sequenc": [163, 164, 167, 173, 233, 235, 248, 249], "format": 163, "seq": 163, "have": [163, 174, 191, 215, 230, 231], "ideal": [163, 246], "minim": 163, "autocorrel": [163, 233], "sidelob": [163, 221, 224, 233], "corr": [163, 233], "lag": [163, 233], "ab": [163, 233, 247], "roughli": [164, 167, 241], "eras": 164, "flip": 167, "h_b": 168, "cf": 169, "v_": [169, 170, 188, 195, 223], "en": [169, 192, 233], "wikipedia": [169, 192, 233], "org": [169, 192, 233], "wiki": [169, 192, 233], "type": [170, 180, 188, 191, 205, 210, 212, 230, 249], "voltag": [170, 188, 195, 223, 248], "x_": [170, 188], "mhz": [170, 188], "77": [170, 186, 188], "50e6": 170, "76": [170, 186], "98970004336019": 170, "mw": [170, 188], "dbm": [170, 188], "dbv": [170, 188], "020599913279624": 170, "uncod": 172, "dmc": [173, 235, 248, 249], "memoryless": [173, 235, 248], "pr": 173, "y_j": 173, "alphabet": 173, "ldot": 173, "doe": [174, 231], "anti": [174, 231, 249], "alias": [174, 231, 249], "400": [174, 241], "x1": 174, "200": [174, 241, 246], "x2": 174, "130": 174, "x3": [174, 233], "spectrum": [174, 200, 201, 203, 205, 206, 207, 212, 228, 229, 231], "content": 174, "abov": [174, 231], "nyquist": [174, 199, 231, 247], "fold": 174, "cw": 174, "unalias": 174, "fft": [174, 205, 212, 228, 229, 231], "2048": [174, 228, 229, 231, 244], "xlim": [174, 231, 244, 245, 247], "qam": [175, 176, 178, 226], "249387366082999": [175, 176], "020599913279625": [175, 227], "7506126339170005": [178, 226], "979400086720376": [178, 179], "system": [179, 190, 218, 227, 238, 240, 245, 248], "norm": [180, 183, 185, 221, 222, 224], "noiseless": 180, "sourc": 180, "max": [180, 194, 195], "instantan": 180, "percentil": [180, 203, 205, 212], "either": 180, "75137717290222": 180, "962605510953157": 180, "182": 180, "29774542201443": 180, "144": 180, "23941337315895": 180, "95th": 180, "95": 180, "68": [180, 186], "77712406307748": 180, "inst_evm": 180, "hist": 180, "histogram": 180, "frequency_offset": [181, 235, 249], "freq_rat": 181, "cycl": [181, 215], "5e": 181, "deg": [181, 187], "path": [182, 248], "loss": [182, 248], "meter": [182, 193, 232], "transmitt": 182, "far": 182, "field": 182, "neg": [182, 187], "impli": 182, "possibl": [182, 248], "so": [182, 183, 185, 221, 222, 224, 248], "km": 182, "link": [182, 248, 249], "ghz": [182, 193, 232], "1e3": [182, 189, 228], "1e9": [182, 193, 232], "92": 182, "44778322188337": 182, "doubl": [182, 193], "increas": [182, 193, 243], "2e3": 182, "98": 182, "468383135163": 182, "2e9": 182, "up": [182, 238], "product": [183, 247], "side": [183, 200, 201, 203, 205, 206, 207, 212, 242, 243, 244, 247], "thought": [183, 250], "smaller": [183, 221, 224, 247], "wider": 183, "how": [183, 185, 199, 208, 209, 215, 221, 222, 224, 240], "gaussdesign": 183, "onlinelibrari": 183, "wilei": 183, "doi": 183, "1002": 183, "9780470041956": 183, "app2": 183, "h_0p1": [183, 221, 224], "h_0p2": 183, "h_0p3": 183, "reason": [185, 222, 237], "larger": [185, 187, 198, 214, 222], "h_half_sin": 185, "displai": [186, 198, 200, 201, 203, 205, 206, 207, 212, 214], "line": [186, 215, 238, 244], "quick": 186, "brown": 186, "fox": 186, "jump": 186, "lazi": 186, "dog": 186, "00000000": 186, "65": 186, "71": 186, "75": [186, 198, 245, 246], "69": 186, "63": 186, "6b": 186, "72": 186, "6f": 186, "6e": 186, "00000010": 186, "66": 186, "78": 186, "6a": 186, "6d": 186, "73": 186, "74": 186, "00000020": 186, "6c": 186, "61": 186, "7a": 186, "79": 186, "67": 186, "he": 186, "02": [186, 243, 245], "03": [186, 243], "04": [186, 243], "00000004": 186, "05": [186, 241, 243, 245], "06": 186, "07": 186, "08": 186, "00000008": 186, "09": 186, "0a": 186, "iq_imbal": [187, 235, 249], "iq": [187, 235, 248], "imbal": [187, 235, 248], "posit": 187, "compon": [187, 228, 229, 231], "g_i": 187, "180": 187, "g_q": 187, "x_q": 187, "horizont": 187, "stretch": 187, "while": [187, 247], "vertic": 187, "northwest": 187, "northeast": 187, "50118723": 188, "36272725": 188, "9952623149688795": 188, "satisfi": 189, "cdot": 189, "remov": [189, 205, 212, 249], "half_length": 190, "a_stop": 190, "80": [190, 233], "stopband": [190, 221, 224], "attenu": [190, 221, 224], "a_": 190, "stop": 190, "fred": [190, 218], "harri": [190, 218], "dsp": [190, 248], "designmultiratefir": 190, "dtypelik": [191, 230], "most": [191, 230], "signific": [191, 230], "enough": 191, "fill": 191, "smallest": 191, "unsign": 191, "integ": 191, "diamet": 193, "55": 193, "eta": 193, "dbi": 193, "arcsin": 193, "83": 193, "dish": 193, "21": 193, "810210290266568": 193, "437435887991374": 193, "23": 193, "sinc": [193, 199, 237, 246], "antenna": [193, 248], "we": [193, 248], "observ": [193, 199], "830810203546193": 193, "529544741425365": 193, "keyword": [197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 242, 243], "pyplot": [197, 198, 201, 202, 203, 204, 205, 206, 207, 211, 212, 213, 214, 215, 216, 217, 241, 242, 243, 244, 245, 246, 247], "heatmap": [198, 246], "scatter": 198, "overwritten": [198, 209, 212, 214], "rang": [198, 245, 246], "hist2d": 198, "10_000": 198, "color": [199, 208, 209, 215, 244, 247], "imaginari": [199, 209, 215], "interleav": [199, 209], "base": [199, 208, 209, 215], "examin": 199, "intersymbol": 199, "interfer": 199, "isi": 199, "two": [199, 200, 201, 203, 205, 206, 207, 212, 233, 241, 242, 243], "cascad": 199, "why": 199, "often": [199, 241], "practic": 199, "n_time": [200, 243], "n_freq": 200, "x_axi": [200, 201, 203, 205, 206, 207, 212, 242, 243, 244, 245], "log": [200, 201, 203, 205, 206, 207, 242, 243, 245], "definit": [200, 201, 202, 203, 206, 207, 213, 217], "n_t": 200, "n_f": 200, "scale": [200, 201, 203, 205, 206, 207, 212, 242, 243], "option": [200, 201, 203, 205, 206, 207, 212], "h_srrc": [200, 201, 202, 203, 206, 207, 213, 215, 217, 246], "ylim": [201, 233, 242, 245, 246, 247], "48": 201, "52": 201, "10th": [203, 205, 212], "crop": [203, 205], "deep": [203, 205], "x_label": 204, "hann": [205, 212], "overlap": [205, 212, 244], "detrend": [205, 212], "median": 205, "segment": [205, 212], "256": [205, 212, 244], "point": [205, 212], "trend": [205, 212], "unwrap": [207, 245], "stride": 209, "colorbar": 209, "1d": 209, "determin": 209, "row": 209, "collect": 209, "linecollect": 209, "linewidth": [209, 233], "solid": [209, 215], "cmap": 209, "rainbow": 209, "loglog": 210, "pcolormesh": 212, "vmin": 212, "vmax": 212, "100th": 212, "shade": 212, "gouraud": 212, "markers": 214, "diff": [215, 244], "about": [215, 240], "mutual": 215, "exclus": 215, "current": [215, 239], "dash": 215, "share": 215, "10e3": 215, "revert": 216, "rcdefault": 216, "_rc_param": 216, "rc_param": 216, "autolayout": 216, "max_open_warn": 216, "titleweight": 216, "bold": 216, "arrang": 218, "down": 218, "column": 218, "notion": 218, "demonstr": 218, "18": [218, 237, 246], "19": 218, "000005": 219, "5000": [219, 220], "000000025": 219, "005": [220, 245], "000025": 220, "excess": [221, 224, 247], "narrow": [221, 224], "expens": [221, 224], "higher": [221, 224, 247], "h_0p5": [221, 224], "h_0p9": [221, 224], "affect": [221, 224], "longer": [221, 224, 228], "h_4": [221, 224], "h_8": [221, 224], "h_16": [221, 224], "h_rect": [222, 247], "sample_rate_offset": [225, 235, 249], "append": [228, 244], "250": [228, 229], "300": [228, 229], "ksp": [228, 229], "notic": [228, 229, 241, 247], "conjug": [228, 229, 243], "500": [228, 229, 245], "now": [228, 229, 241, 249], "150": [228, 229], "asymmetr": 229, "copi": 231, "299792458": 232, "zadoff_chu": [233, 234, 249], "zadoff": [233, 234, 248, 249], "chu": [233, 234, 248, 249], "prime": 233, "gcd": 233, "ne": 233, "cyclic": 233, "x_u": 233, "c_": 233, "2q": 233, "mod": 233, "e2": 233, "93chu_sequ": 233, "x_3": 233, "139": 233, "tile": 233, "x_5": 233, "x5": 233, "cross": 233, "xcorr": 233, "sphinx": 237, "immateri": 237, "theme": 237, "depend": [237, 238, 240], "store": [237, 239, 240], "txt": [237, 238, 239, 240], "some": 237, "below": [237, 242, 243], "version": [237, 239, 248], "aren": 237, "resolut": 237, "minut": 237, "ci": 237, "myst": 237, "parser": 237, "updat": 237, "git": [237, 239], "math": 237, "dollar": 237, "ipykernel": 237, "26": 237, "nb": 237, "pickleshar": 237, "switch": 237, "pip": [237, 238, 239, 240, 248], "python3": [237, 238, 239, 240, 248], "built": 237, "run": 237, "command": [237, 238], "dirhtml": 237, "locat": [237, 240], "home": 237, "page": 237, "directori": [237, 239], "get": 237, "necessari": 237, "webpag": 237, "webserv": 237, "easili": [237, 238, 240, 242, 243], "python": [237, 248], "server": 237, "8080": 237, "access": 237, "web": 237, "browser": 237, "localhost": 237, "librari": [238, 239, 240, 241, 246, 248, 250], "ruff": [238, 239], "lint": [238, 239], "your": [238, 240], "develop": [238, 239, 240], "dev": [238, 240], "pyproject": [238, 240], "toml": [238, 239, 240], "tool": [238, 240, 248], "src": 238, "extend": 238, "includ": [238, 239, 240, 248], "ipynb": 238, "exclud": 238, "build": [238, 248], "doc": 238, "_version": 238, "py": [238, 240], "120": 238, "select": 238, "pycodestyl": 238, "pyflak": 238, "pyupgrad": 238, "flake8": 238, "bugbear": 238, "simplifi": 238, "isort": 238, "ignor": 238, "e501": 238, "e713": 238, "e714": 238, "__init__": 238, "f401": 238, "f403": 238, "manual": [238, 240], "check": 238, "hook": 238, "config": [238, 241, 242, 243, 244, 245, 246, 247], "yaml": 238, "repo": [238, 239], "github": [238, 248], "rev": 238, "v2": 238, "id": 238, "larg": 238, "fixer": 238, "trail": 238, "whitespac": 238, "astral": 238, "sh": 238, "v0": 238, "enabl": 238, "disabl": 238, "uninstal": 238, "extens": 238, "vscode": [238, 240], "json": [238, 240], "you": [238, 239, 240, 248], "edit": [238, 243], "latest": [239, 248], "releas": [239, 249], "main": [239, 247], "branch": 239, "mhostett": [239, 249], "Or": [239, 240], "pre": 239, "To": 239, "activ": 239, "benefici": 239, "fashion": 239, "allow": [239, 240], "chang": [239, 250], "immedi": 239, "seen": 239, "upon": 239, "next": 239, "clone": 239, "wherev": 239, "flag": 239, "packag": [239, 248], "commit": 239, "pytest": [239, 240], "cov": 239, "xdist": 239, "benchmark": 239, "ini_opt": 240, "minvers": 240, "addopt": 240, "showloc": 240, "testpath": 240, "execut": 240, "test_psk": 240, "instruct": 240, "invok": 240, "infrastructur": 240, "debug": 240, "inlinebackend": [241, 242, 243, 244, 245, 246, 247], "print_figure_kwarg": [241, 242, 243, 244, 245, 246, 247], "facecolor": [241, 242, 243, 244, 245, 246, 247], "widget": [241, 242, 243, 244, 245, 246, 247], "tx": 241, "decai": [241, 243], "fillstyl": 241, "show": [241, 242, 243, 244, 245, 246, 247], "accomplish": [241, 246], "def": [241, 244, 246], "resample_sign": 241, "new_sample_r": 241, "ty": 241, "gca": [241, 246], "set_prop_cycl": [241, 246], "four": 241, "appear": 241, "fourth": 241, "do": 241, "315": 241, "32": 241, "00095883": 242, "00175012": 242, "00423921": 242, "0058825": 242, "006151": 242, "00474595": 242, "0017044": 242, "00254816": 242, "00721645": 242, "0112324": 242, "01342358": 242, "01273202": 242, "00845058": 242, "0004368": 242, "01073669": 242, "02372977": 242, "03650247": 242, "04650654": 242, "05098525": 242, "04734644": 242, "03355896": 242, "00851486": 242, "02769991": 242, "07367348": 242, "12670447": 242, "1830132": 242, "23810898": 242, "28727058": 242, "3260799": 242, "3509384": 242, "35949665": 242, "conveni": [242, 243], "evalu": [242, 243], "here": [242, 243], "47820725": 243, "78207252e": 243, "58172329e": 243, "10862468e": 243, "86109590e": 243, "21565653e": 243, "01140214e": 243, "57286400e": 243, "67772160e": 243, "47338728e": 243, "10422993e": 243, "89312837e": 243, "12240078e": 243, "03953322e": 243, "69685122e": 243, "63882791e": 243, "81474977e": 243, "47193366e": 243, "85259041e": 243, "15647504e": 243, "23851924e": 243, "42176895e": 243, "84684395e": 243, "42721858e": 243, "72236648e": 243, "14721649e": 243, "10813095e": 243, "94024315e": 243, "78877688e": 243, "74077567e": 243, "87820725": 243, "53637958": 243, "94724205": 243, "13335164": 243, "1455082": 243, "04436799": 243, "88708159": 243, "71930943": 243, "5719707": 243, "46154771": 243, "39261642": 243, "36139242": 243, "35935288": 243, "3763214": 243, "40270968": 243, "43085717": 243, "45557651": 243, "47410241": 243, "48566716": 243, "49090568": 243, "49124786": 243, "48840102": 243, "4839738": 243, "47925143": 243, "47510421": 243, "47199608": 243, "47005584": 243, "46917696": 243, "46911955": 243, "denomin": 243, "73910363": 243, "30614675j": 243, "plane": 243, "endpoint": 243, "092337035029908": 243, "71104892744724": 243, "684365018955985": 243, "37868538208862": 243, "1263714068241546": 243, "9993519409971622": 243, "1909320767063554": 243, "016796159999999997": 243, "46380627201679264": 243, "3806359704987118j": 243, "4988817673846036": 243, "333342139809402j": 243, "5543277195082319": 243, "22961005941718524j": 243, "5291527586053246": 243, "2828380420991956j": 243, "lyon": 243, "understand": 243, "3rd": 243, "insid": 243, "outsid": 243, "unstabl": 243, "n_symbol": 244, "els": 244, "pb": 244, "x_bb_rect": 244, "papr_bb_rect": 244, "x_pb_rect": 244, "papr_pb_rect": 244, "x_bb_0p1": 244, "papr_bb_0p1": 244, "x_pb_0p1": 244, "papr_pb_0p1": 244, "x_bb_0p5": 244, "papr_bb_0p5": 244, "x_pb_0p5": 244, "papr_pb_0p5": 244, "x_bb_0p9": 244, "papr_bb_0p9": 244, "x_pb_0p9": 244, "papr_pb_0p9": 244, "2f": 244, "rf": [244, 245], "512": 244, "sweep_alpha": 244, "bb_papr": 244, "pb_papr": 244, "bpsk_bb_papr": 244, "bpsk_pb_papr": 244, "qpsk_bb_papr": 244, "qpsk_pb_papr": 244, "psk8_bb_papr": 244, "psk8_pb_papr": 244, "psk16_bb_papr": 244, "psk16_pb_papr": 244, "configur": 245, "loop_filt": 245, "0x000002276d2bcc08": 245, "theta_0": 245, "phase_error": 245, "freq_estim": 245, "suptitl": [245, 246], "direct": [245, 249], "synthes": [245, 249], "dd": [245, 249], "avail": [245, 246, 248], "001": 245, "b_nt": 245, "0005": 245, "0125": 245, "015": 245, "0175": 245, "t_lock": 245, "analyze_psk": 246, "100_000": 246, "n0": 246, "tx_mf": 246, "1e6": 246, "bpsk_ber": 246, "bpsk_ser": 246, "qpsk_ber": 246, "qpsk_ser": 246, "psk8_ber": 246, "psk8_ser": 246, "psk16_ber": 246, "psk16_ser": 246, "simul": [246, 248], "1e0": 246, "psk8_bin": 246, "psk8_grai": 246, "wors": 246, "rc_0p1": 247, "rc_0p5": 247, "rc_0p9": 247, "pm": 247, "60": 247, "nearli": 247, "small": 247, "lobe": 247, "much": 247, "freqz": 247, "worn": 247, "whole": 247, "h_rc_0p1": 247, "h_rc_0p5": 247, "h_rc_0p9": 247, "p_rect": 247, "cumsum": 247, "p_rc_0p1": 247, "p_rc_0p5": 247, "p_rc_0p9": 247, "within": 247, "srrc_0p1": 247, "srrc_0p5": 247, "srrc_0p9": 247, "therefor": 247, "significantli": 247, "due": 247, "being": 247, "h_srrc_0p1": 247, "h_srrc_0p5": 247, "h_srrc_0p9": 247, "p_srrc_0p1": 247, "p_srrc_0p5": 247, "p_srrc_0p9": 247, "gauss_0p1": 247, "gauss_0p2": 247, "gauss_0p3": 247, "softwar": 248, "radio": 248, "goal": 248, "analyz": 248, "reli": 248, "interoper": 248, "veri": 248, "numba": 248, "acceler": 248, "computation": 248, "intens": 248, "addition": 248, "aim": 248, "replic": 248, "relev": 248, "matlab": 248, "toolbox": 248, "progress": 248, "someth": 248, "pleas": 248, "open": 248, "issu": 248, "pypi": 248, "api": [248, 250], "convers": [248, 249], "synchron": 248, "budget": [248, 249], "manipul": 248, "septemb": 249, "2023": 249, "sensibl": 249, "matt": 249, "hostett": 249, "august": 249, "27": 249, "without": 249, "abil": 249, "improv": 249, "renam": 249, "superflu": 249, "replac": 249, "translat": 249, "fix": [249, 250], "juli": 249, "firinterpol": 249, "model": 249, "impair": 249, "fpsl": 249, "helper": 249, "semant": 250, "major": 250, "minor": 250, "patch": 250, "introduc": 250, "featur": 250, "backward": 250, "compat": 250, "make": 250, "bug": 250, "There": 250, "guarante": 250, "them": 250, "thei": 250}, "objects": {"": [[3, 0, 0, 1, "sdr", ""]], "sdr": [[9, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [26, 1, 1, "", "Decimator", "Implements a polyphase finite impulse response (FIR) decimating filter."], [36, 1, 1, "", "EnergyDetector", "Implements an energy detector."], [41, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [48, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [65, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [72, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [91, 1, 1, "", "Interpolator", "Implements a polyphase finite impulse response (FIR) interpolating filter."], [101, 1, 1, "", "LinearModulation", "Implements linear phase/amplitude modulation with arbitrary symbol mapping."], [119, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [128, 1, 1, "", "MSK", "Implements minimum-shift keying (MSK) modulation and demodulation."], [130, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [138, 1, 1, "", "OQPSK", "Implements offset quadrature phase-shift keying (OQPSK) modulation and demodulation."], [142, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [150, 1, 1, "", "PiMPSK", "Implements $pi/M$ phase-shift keying ($pi/M$ PSK) modulation and demodulation."], [152, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [153, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [154, 1, 1, "", "ReplicaCorrelator", "Implements an clairvoyant replica-correlator detector."], [159, 5, 1, "", "albersheim", "Estimates the minimum required single-sample SNR, given $N_{NC}$ non-coherent combinations, to achieve a probability of detection $P_D$ and probability of false alarm $P_{FA}$. This function implements Albersheim's equation."], [160, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [161, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [162, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [163, 5, 1, "", "barker", "Returns the Barker code/sequence of length $N$."], [164, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [165, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [166, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [167, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [168, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [169, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [170, 5, 1, "", "db", "Converts from linear units to decibels."], [171, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [172, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [173, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [174, 5, 1, "", "downsample", "Downsamples the time-domain signal $x[n]$ by the factor $r$."], [175, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [176, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [177, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [178, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [179, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [180, 5, 1, "", "evm", "Calculates the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [181, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [182, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [183, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [184, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [185, 5, 1, "", "half_sine", "Returns a half-sine pulse shape."], [186, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [187, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [188, 5, 1, "", "linear", "Converts from decibels to linear units."], [189, 5, 1, "", "mix", "Mixes the time-domain signal $x[n]$ with a complex exponential or real sinusoid."], [190, 5, 1, "", "multirate_taps", "Computes the multirate FIR filter that achieves rational resampling by $P/Q$."], [191, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [192, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [193, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [194, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [195, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [196, 5, 1, "", "percent", "Converts from a ratio to a percentage."], [218, 5, 1, "", "polyphase_matrix", "Converts the multirate FIR filter taps $h_i$ into the polyphase matrix $H_{i, j}$ that achieves rational resampling by $P/Q$."], [219, 5, 1, "", "ppb", "Converts from a ratio to parts per billion (ppb)."], [220, 5, 1, "", "ppm", "Converts from a ratio to parts per million (ppm)."], [221, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [222, 5, 1, "", "rectangular", "Returns a rectangular pulse shape."], [223, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [224, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [225, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [226, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [227, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [228, 5, 1, "", "to_complex_bb", "Converts the real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$ to a complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c} = f_{s,r}/2$."], [229, 5, 1, "", "to_real_pb", "Converts the complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$ to a real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r} = 2f_{s,c}$."], [230, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [231, 5, 1, "", "upsample", "Upsamples the time-domain signal $x[n]$ by the factor $r$."], [232, 5, 1, "", "wavelength", "Calculates the wavelength $lambda$ of an electromagnetic wave with frequency $f$."], [233, 5, 1, "", "zadoff_chu", "Returns the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.ClosedLoopPLL": [[10, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [11, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [12, 2, 1, "", "K0", "The NCO gain $K_0$."], [13, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [14, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [15, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [16, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [17, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [18, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [19, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [20, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [21, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [22, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [23, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [24, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [25, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[16, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [16, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [16, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [16, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [16, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[17, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[19, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[22, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.Decimator": [[27, 3, 1, "", "__call__", "Filters and decimates the input signal $x[n]$ with the polyphase FIR filter."], [28, 3, 1, "", "__init__", "Creates a polyphase FIR decimating filter."], [29, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [30, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [31, 2, 1, "", "method", "The method used to design the multirate filter."], [32, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [33, 2, 1, "", "rate", "The decimation rate $r$."], [34, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [35, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Decimator.__call__": [[27, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [27, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Decimator.__init__": [[28, 4, 2, "p-rate", "rate", "The decimation rate $r$."], [28, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [28, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.EnergyDetector": [[37, 3, 1, "", "p_d", "Computes the probability of detection $P_D$."], [38, 3, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [39, 3, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [40, 3, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.EnergyDetector.p_d": [[37, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [37, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [37, 4, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.p_fa": [[38, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [38, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [38, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [38, 4, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.EnergyDetector.roc": [[39, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [39, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [39, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."], [39, 4, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.threshold": [[40, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [40, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [40, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [40, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.ErrorRate": [[42, 3, 1, "", "__init__", "Creates a new error rate tabulation object."], [43, 3, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [44, 3, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [45, 3, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [46, 3, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [47, 3, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[43, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [43, 4, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [43, 4, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[44, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[45, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[47, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[49, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the FIR filter."], [50, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [51, 3, 1, "", "__len__", "Returns the filter length $N + 1$."], [52, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [53, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [54, 2, 1, "", "delay", "The delay of the FIR filter $d = lfloor frac{N + 1}{2} rfloor$ in samples."], [55, 3, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [56, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the FIR filter."], [57, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(omega)$ of the FIR filter on a logarithmic frequency axis."], [58, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [59, 2, 1, "", "order", "The order of the FIR filter $N$."], [60, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [61, 2, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [62, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [63, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [64, 2, 1, "", "taps", "The feedforward taps $h_i$ for $i = 0,...,N$."]], "sdr.FIR.__call__": [[49, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [49, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.FIR.__init__": [[50, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$ for $i = 0,...N$."], [50, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FIR.frequency_response": [[56, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [56, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.frequency_response_log": [[57, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [57, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [57, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[58, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.step_response": [[62, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FarrowResampler": [[66, 3, 1, "", "__call__", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [67, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [68, 2, 1, "", "order", "The order of the filter."], [69, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [70, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [71, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__call__": [[66, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [66, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.__init__": [[67, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FarrowResampler.reset": [[69, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[73, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [74, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the IIR filter."], [75, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [76, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [77, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [78, 2, 1, "", "a_taps", "The feedback taps $a_j$ for $j = 0,...,N$."], [79, 2, 1, "", "b_taps", "The feedforward taps $b_i$ for $i = 0,...,M$."], [80, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the IIR filter."], [81, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(omega)$ of the IIR filter on a logarithmic frequency axis."], [82, 2, 1, "", "gain", "The gain of the IIR filter."], [83, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [84, 2, 1, "", "order", "The order of the IIR filter $N$."], [85, 2, 1, "", "poles", "The poles of the IIR filter."], [86, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [87, 2, 1, "", "state", "The filter state."], [88, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [89, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [90, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[73, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [73, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [73, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."], [73, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__call__": [[74, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.IIR.__init__": [[75, 4, 2, "p-a", "a", "The feedback coefficients $a_j$ for $j = 0,...,N$."], [75, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$ for $i = 0,...,M$."], [75, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.IIR.frequency_response": [[80, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [80, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[81, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [81, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [81, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[83, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[88, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.Interpolator": [[92, 3, 1, "", "__call__", "Interpolates and filters the input signal $x[n]$ with the polyphase FIR filter."], [93, 3, 1, "", "__init__", "Creates a polyphase FIR interpolating filter."], [94, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [95, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [96, 2, 1, "", "method", "The method used to design the multirate filter."], [97, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [98, 2, 1, "", "rate", "The interpolation rate $r$."], [99, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [100, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Interpolator.__call__": [[92, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [92, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Interpolator.__init__": [[93, 4, 2, "p-rate", "rate", "The interpolation rate $r$."], [93, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [93, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.LinearModulation": [[102, 3, 1, "", "__init__", "Creates a new linear phase/amplitude modulation object."], [103, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [104, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [105, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [106, 2, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [107, 3, 1, "", "decide_symbols", "Converts the received complex symbols $hat{a}[k]$ into decimal symbol decisions $hat{s}[k]$ using maximum-likelihood estimation (MLE)."], [108, 3, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples $hat{x}[n]$ into decimal symbol decisions $hat{s}[k]$ using matched filtering and maximum-likelihood estimation."], [109, 3, 1, "", "map_symbols", "Converts the decimal symbols $s[k]$ to complex symbols $a[k]$."], [110, 3, 1, "", "modulate", "Modulates the decimal symbols $s[k]$ into pulse-shaped complex samples $x[n]$."], [111, 2, 1, "", "order", "The modulation order $M = 2^k$."], [112, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [113, 2, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [114, 2, 1, "", "rx_filter", "The receive decimating matched filter. The filter coefficients are matched to the pulse shape $h[-n]^*$."], [115, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [116, 2, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [117, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."], [118, 2, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter. The filter coefficients are the pulse shape $h[n]$."]], "sdr.LinearModulation.__init__": [[102, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [102, 4, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees to apply to symbol_map."], [102, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [102, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [102, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [102, 4, 2, "p-symbol_map", "symbol_map", "The symbol mapping ${0, dots, M-1} mapsto mathbb{C}$. An $M$-length array whose indices are decimal symbols $s[k]$ and whose values are complex symbols $a[k]$, where $M$ is the modulation order."]], "sdr.LinearModulation.ber": [[105, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.LinearModulation.decide_symbols": [[107, 4, 2, "p-a_hat", "a_hat", "The received complex symbols $hat{a}[k]$."]], "sdr.LinearModulation.demodulate": [[108, 4, 2, "p-x_hat", "x_hat", "The received pulse-shaped complex samples $hat{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.LinearModulation.map_symbols": [[109, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to map, $0$ to $M-1$."]], "sdr.LinearModulation.modulate": [[110, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.LinearModulation.ser": [[115, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.LoopFilter": [[120, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [121, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [122, 3, 1, "", "__call__", "Filters the input signal $x[n]$."], [123, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [124, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [125, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [126, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [127, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__call__": [[122, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.LoopFilter.__init__": [[123, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [123, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [123, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [123, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.MSK": [[129, 3, 1, "", "__init__", "Creates a new MSK object."]], "sdr.MSK.__init__": [[129, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [129, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [129, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.NCO": [[131, 2, 1, "", "K0", "The NCO gain $K_0$."], [132, 3, 1, "", "__call__", "Steps the NCO with variable frequency and/or phase signals."], [133, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [134, 2, 1, "", "increment", "The constant phase accumulation $omega$ of the NCO in radians/sample."], [135, 2, 1, "", "offset", "The absolute phase offset $theta$ of the NCO in radians."], [136, 3, 1, "", "reset", "Resets the NCO."], [137, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__call__": [[132, 4, 2, "p-freq", "freq", "The variable frequency signal $f[n]$ in radians/sample. This input signal varies the per-sample phase increment of the NCO. If None, the signal is all zeros."], [132, 4, 2, "p-phase", "phase", "The variable phase signal $p[n]$ in radians. This input signal varies the per-sample phase offset of the NCO. If None, the signal is all zeros."]], "sdr.NCO.__init__": [[133, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [133, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [133, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.NCO.step": [[137, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.OQPSK": [[139, 3, 1, "", "__init__", "Creates a new OQPSK object."], [140, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [141, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."]], "sdr.OQPSK.__init__": [[139, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [139, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [139, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [139, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [139, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [139, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK": [[143, 3, 1, "", "__init__", "Creates a new PSK object."], [144, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [145, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [146, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [147, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [148, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [149, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[143, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [143, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [143, 4, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [143, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [143, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [143, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [143, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[146, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [146, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.ser": [[148, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [148, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.PiMPSK": [[151, 3, 1, "", "__init__", "Creates a new $pi/M$ PSK object."]], "sdr.PiMPSK.__init__": [[151, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [151, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [151, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [151, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [151, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [151, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [151, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.Q": [[152, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[153, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.ReplicaCorrelator": [[155, 3, 1, "", "p_d", "Computes the probability of detection $P_D$."], [156, 3, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [157, 3, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [158, 3, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.ReplicaCorrelator.p_d": [[155, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [155, 4, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [155, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."]], "sdr.ReplicaCorrelator.p_fa": [[156, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [156, 4, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [156, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [156, 4, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.ReplicaCorrelator.roc": [[157, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [157, 4, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [157, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."]], "sdr.ReplicaCorrelator.threshold": [[158, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [158, 4, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [158, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [158, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.albersheim": [[159, 4, 2, "p-N_nc", "N_nc", "The number of non-coherent combinations $N_{NC} ge 1$."], [159, 4, 2, "p-p_d", "p_d", "The desired probability of detection $P_D$ in $(0, 1)$."], [159, 4, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{FA}$ in $(0, 1)$."]], "sdr.average_power": [[160, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the average power. The default is None, which computes the average power of the entire array."], [160, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [160, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[161, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [161, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [161, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [161, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[162, 4, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [162, 4, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.barker": [[163, 4, 2, "p-length", "length", "The length $N$ of the Barker code/sequence."], [163, 4, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[164, 4, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [164, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [164, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[165, 4, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[166, 4, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[167, 4, 2, "p-p", "p", "The probability $p$ of a bit flip."], [167, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [167, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[168, 4, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[169, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.db": [[170, 4, 2, "p-type", "type", "The type of input value or signal."], [170, 4, 2, "p-x", "x", "The input value or signal."]], "sdr.diff_decode": [[171, 4, 2, "p-y", "y", "The input encoded data $y[k]$."], [171, 4, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[172, 4, 2, "p-x", "x", "The input uncoded data $x[k]$."], [172, 4, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[173, 4, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [173, 4, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [173, 4, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [173, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [173, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.downsample": [[174, 4, 2, "p-rate", "rate", "The downsampling factor $r$."], [174, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.ebn0_to_esn0": [[175, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [175, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [175, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[176, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [176, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [176, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [176, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[177, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the energy. The default is None, which computes the energy of the entire array."], [177, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [177, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[178, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [178, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [178, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[179, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [179, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.evm": [[180, 4, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [180, 4, 2, "p-output", "output", "The output type of the EVM calculation."], [180, 4, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [180, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.frequency_offset": [[181, 4, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [181, 4, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [181, 4, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [181, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [181, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[182, 4, 2, "p-distance", "distance", "The distance $d$ in meters between the transmitter and receiver."], [182, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[183, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [183, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [183, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [183, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[184, 4, 2, "p-n", "n", "The length of the Gray code."]], "sdr.half_sine": [[185, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [185, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [185, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.hexdump": [[186, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [186, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[187, 4, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [187, 4, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [187, 4, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.linear": [[188, 4, 2, "p-type", "type", "The type of output value or signal."], [188, 4, 2, "p-x", "x", "The input value or signal in dB."]], "sdr.mix": [[189, 4, 2, "p-complex", "complex", "Indicates whether to mix by a complex exponential or real sinusoid."], [189, 4, 2, "p-freq", "freq", "The frequency $f$ of the sinusoid in Hz (or 1/samples if sample_rate=1). The frequency must satisfy $-f_s/2 le f le f_s/2$."], [189, 4, 2, "p-phase", "phase", "The phase $phi$ of the sinusoid in degrees."], [189, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal."], [189, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.multirate_taps": [[190, 4, 2, "p-A_stop", "A_stop", "The stopband attenuation $A_{text{stop}}$ in dB."], [190, 4, 2, "p-P", "P", "The interpolation rate $P$."], [190, 4, 2, "p-Q", "Q", "The decimation rate $Q$."], [190, 4, 2, "p-half_length", "half_length", "The half-length of the polyphase filters."]], "sdr.pack": [[191, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [191, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [191, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[192, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the PAPR. The default is None, which computes the PAPR of the entire array."], [192, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[193, 4, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [193, 4, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [193, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[194, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the peak power. The default is None, which computes the peak power of the entire array."], [194, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [194, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[195, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [195, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.percent": [[196, 4, 2, "p-x", "x", "The input ratio."]], "sdr.plot": [[197, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [198, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [199, 5, 1, "", "eye", "Plots the eye diagram of the baseband modulated signal $x[n]$."], [200, 5, 1, "", "filter", "Plots the magnitude response $|H(omega)|^2$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [201, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [202, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [203, 5, 1, "", "magnitude_response", "Plots the magnitude response $|H(omega)|^2$ of the filter."], [204, 5, 1, "", "p_d", "Plots the probability of detection $P_D$ as a function of received SNR or ENR."], [205, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [206, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [207, 5, 1, "", "phase_response", "Plots the phase response $angle H(omega)$ of the filter."], [208, 5, 1, "", "phase_tree", "Plots the phase tree of a continuous-phase modulated (CPM) signal signal $x[n]$."], [209, 5, 1, "", "raster", "Plots a raster of the time-domain signal $x[n]$."], [210, 5, 1, "", "roc", "Plots the receiver operating characteristic (ROC) curve as a function of $P_{FA}$."], [211, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [212, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [213, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [214, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [215, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [216, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [217, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[197, 4, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [197, 4, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."], [197, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."]], "sdr.plot.constellation": [[198, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [198, 4, 2, "p-kwargs", "kwargs", "If heatmap=False, additional keyword arguments to pass to matplotlib.pyplot.scatter(). The following keyword arguments are set by default. The defaults may be overwritten."], [198, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [198, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.eye": [[199, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [199, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [199, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [199, 4, 2, "p-span", "span", "The number of symbols per raster."], [199, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [199, 4, 2, "p-x", "x", "The baseband modulated signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved."]], "sdr.plot.filter": [[200, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [200, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [200, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [200, 4, 2, "p-filter", "filter", "The filter definition."], [200, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [200, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[201, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [201, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [201, 4, 2, "p-filter", "filter", "The filter definition."], [201, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [201, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [201, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.impulse_response": [[202, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [202, 4, 2, "p-filter", "filter", "The filter definition."], [202, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.magnitude_response": [[203, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [203, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [203, 4, 2, "p-filter", "filter", "The filter definition."], [203, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [203, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [203, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.p_d": [[204, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [204, 4, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [204, 4, 2, "p-x", "x", "The SNR or ENR in dB."], [204, 4, 2, "p-x_label", "x_label", "The x-axis label to use."]], "sdr.plot.periodogram": [[205, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [205, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [205, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [205, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [205, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [205, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [205, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [205, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [205, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [205, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_delay": [[206, 4, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [206, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [206, 4, 2, "p-filter", "filter", "The filter definition."], [206, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [206, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [206, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_response": [[207, 4, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [207, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [207, 4, 2, "p-filter", "filter", "The filter definition."], [207, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [207, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [207, 4, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [207, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_tree": [[208, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [208, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [208, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [208, 4, 2, "p-span", "span", "The number of symbols per raster."], [208, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [208, 4, 2, "p-x", "x", "The baseband CPM signal $x[n]$."]], "sdr.plot.raster": [[209, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [209, 4, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\"."], [209, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.collections.LineCollection. The following keyword arguments are set by default. The defaults may be overwritten."], [209, 4, 2, "p-length", "length", "The length of each raster in samples. This must be provided if x is 1D."], [209, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [209, 4, 2, "p-stride", "stride", "The stride between each raster in samples. If None, the stride is set to length."], [209, 4, 2, "p-x", "x", "The time-domain signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved. If x is 1D, the rastering is determined by length and stride. If x is 2D, the rows correspond to each raster."]], "sdr.plot.roc": [[210, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to the plotting function defined by type."], [210, 4, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [210, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [210, 4, 2, "p-type", "type", "The type of plot to generate."]], "sdr.plot.ser": [[211, 4, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [211, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."], [211, 4, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.spectrogram": [[212, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [212, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [212, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.pcolormesh(). The following keyword arguments are set by default. The defaults may be overwritten."], [212, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [212, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [212, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [212, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [212, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [212, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[213, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [213, 4, 2, "p-filter", "filter", "The filter definition."], [213, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.symbol_map": [[214, 4, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [214, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot(). The following keyword arguments are set by default. The defaults may be overwritten."], [214, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [214, 4, 2, "p-modulation", "modulation", "The linear modulation or symbol map ${0, dots, M-1} mapsto mathbb{C}$."]], "sdr.plot.time_domain": [[215, 4, 2, "p-centered", "centered", "Indicates whether to center the x-axis about 0. This argument is mutually exclusive with offset."], [215, 4, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal. If \"color\", the real and imaginary parts will have different colors based on the current Matplotlib color cycle. If \"line\", the real part will have a solid line and the imaginary part will have a dashed line, and both lines will share the same color."], [215, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [215, 4, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. The units of the offset are $1/f_s$. This argument is mutually exclusive with centered."], [215, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [215, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[217, 4, 2, "p-filter", "filter", "The filter definition."], [217, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.polyphase_matrix": [[218, 4, 2, "p-P", "P", "The interpolation rate $P$."], [218, 4, 2, "p-Q", "Q", "The decimation rate $Q$."], [218, 4, 2, "p-taps", "taps", "The multirate FIR filter taps $h_i$."]], "sdr.ppb": [[219, 4, 2, "p-x", "x", "The input ratio."]], "sdr.ppm": [[220, 4, 2, "p-x", "x", "The input ratio."]], "sdr.raised_cosine": [[221, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [221, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [221, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [221, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rectangular": [[222, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [222, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [222, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[223, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [223, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[224, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [224, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [224, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [224, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[225, 4, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [225, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.snr_to_ebn0": [[226, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [226, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [226, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [226, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[227, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [227, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.to_complex_bb": [[228, 4, 2, "p-x_r", "x_r", "The real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$. If the length is odd, one zero is appended to the end."]], "sdr.to_real_pb": [[229, 4, 2, "p-x_c", "x_c", "The complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$."]], "sdr.unpack": [[230, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [230, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [230, 4, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.upsample": [[231, 4, 2, "p-rate", "rate", "The upsampling factor $r$."], [231, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.wavelength": [[232, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.zadoff_chu": [[233, 4, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [233, 4, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence. The root must be relatively prime to the length, i.e., $gcd(u, N) = 1$."], [233, 4, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence. When $q ne 0$, the returned sequence is a cyclic shift of the root-$u$ Zadoff-Chu sequence."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"convers": 0, "decibel": 0, "ratio": 0, "from": [0, 238, 239, 240], "e_b": 0, "n_0": 0, "e_": 0, "": [0, 242, 243], "n": [0, 241, 242, 243], "data": 1, "manipul": [1, 3], "detect": [2, 7], "detector": 2, "theoret": 2, "limit": 2, "digit": [3, 243], "signal": [3, 235, 241, 244], "process": 3, "filter": [3, 7, 242, 243, 245], "multir": 3, "resampl": [3, 241], "correl": 3, "link": 4, "budget": 4, "channel": [4, 235], "capac": 4, "path": 4, "loss": 4, "antenna": 4, "measur": 5, "energi": 5, "power": [5, 244], "voltag": 5, "modul": [5, 6, 7], "linear": 6, "continu": 6, "phase": [6, 245, 246], "orthogon": 6, "puls": [6, 244, 247], "shape": [6, 244, 247], "symbol": [6, 246], "map": [6, 246], "encod": 6, "plot": [7, 244], "configur": [7, 238, 240], "time": [7, 244, 245], "domain": [7, 244, 245], "frequenc": [7, 242, 243, 244, 245], "spectral": 7, "estim": 7, "analysi": 7, "probabl": 8, "note": [9, 182, 190, 203, 205, 212], "constructor": [9, 26, 41, 48, 65, 72, 91, 101, 119, 128, 130, 138, 142, 150], "method": [9, 26, 36, 41, 48, 65, 72, 91, 101, 119, 128, 130, 138, 142, 150, 154], "properti": [9, 26, 48, 65, 72, 91, 101, 119, 128, 130, 138, 142, 150], "special": [26, 48, 65, 72, 91, 119, 130], "string": [26, 48, 72, 91, 101, 128, 138, 142, 150], "represent": [26, 48, 72, 91, 101, 128, 138, 142, 150], "stream": [26, 48, 72, 91], "mode": [26, 48, 72, 91], "onli": [26, 48, 72, 91], "see": [41, 43, 56, 57, 58, 62, 80, 81, 83, 88, 102, 105, 115, 129, 139, 143, 146, 148, 151, 152, 153, 169, 192, 231], "also": [41, 43, 56, 57, 58, 62, 80, 81, 83, 88, 102, 105, 115, 129, 139, 143, 146, 148, 151, 152, 153, 169, 192, 231], "warn": [174, 231], "sequenc": 234, "simul": 235, "model": 235, "impair": 235, "synchron": 236, "document": 237, "instal": [237, 238, 239, 240, 248], "build": 237, "doc": 237, "serv": 237, "format": 238, "run": [238, 240], "linter": 238, "formatt": 238, "pre": 238, "commit": 238, "v": [238, 240], "code": [238, 240], "pypi": 239, "github": 239, "edit": 239, "local": 239, "folder": 239, "dev": 239, "depend": 239, "unit": 240, "test": 240, "command": 240, "line": 240, "farrow": 241, "arbitrari": 241, "construct": 241, "an": [241, 242, 243], "input": 241, "x": 241, "t_": 241, "rate": [241, 246], "r": 241, "y": 241, "frac": 241, "upsampl": 241, "integ": 241, "downsampl": 241, "irrat": 241, "fir": 242, "creat": [242, 243], "examin": [242, 243, 244], "impuls": [242, 243], "respons": [242, 243, 245], "h": [242, 243], "step": [242, 243, 245], "omega": [242, 243], "group": [242, 243], "delai": [242, 243], "tau_g": [242, 243], "fulli": [242, 243], "analyz": [242, 243, 245], "iir": 243, "zero": 243, "pole": 243, "stabil": 243, "peak": 244, "averag": 244, "qpsk": [244, 246], "variou": 244, "across": [244, 245], "excess": 244, "bandwidth": 244, "lock": 245, "loop": 245, "design": 245, "proport": 245, "plu": 245, "integr": 245, "ppi": 245, "implement": 245, "pll": 245, "close": 245, "perform": 245, "compar": 245, "zeta": 245, "b_n": 245, "t": 245, "shift": 246, "kei": 246, "constel": 246, "bpsk": 246, "8": [246, 249], "psk": 246, "16": 246, "error": 246, "curv": 246, "bit": 246, "rais": 247, "cosin": 247, "squar": 247, "root": 247, "gaussian": 247, "sdr": 248, "featur": 248, "v0": 249, "0": 249, "chang": 249, "contributor": 249, "7": 249, "6": 249, "5": 249, "4": 249, "3": 249, "2": 249, "1": 249, "version": 250, "alpha": 250, "releas": 250, "beta": 250}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Conversions": [[0, "conversions"]], "Decibels": [[0, "decibels"]], "Ratios": [[0, "ratios"]], "From E_b/N_0": [[0, "from-e-b-n-0"]], "From E_s/N_0": [[0, "from-e-s-n-0"]], "From S/N": [[0, "from-s-n"]], "Data manipulation": [[1, "data-manipulation"]], "Detection": [[2, "detection"], [7, "detection"]], "Detectors": [[2, "detectors"]], "Theoretical limits": [[2, "theoretical-limits"]], "Digital signal processing": [[3, "digital-signal-processing"]], "Filtering": [[3, "filtering"]], "Multirate filtering": [[3, "multirate-filtering"]], "Resampling": [[3, "resampling"]], "Correlation": [[3, "correlation"]], "Signal manipulation": [[3, "signal-manipulation"]], "Link budgets": [[4, "link-budgets"]], "Channel capacity": [[4, "channel-capacity"]], "Path losses": [[4, "path-losses"]], "Antennas": [[4, "antennas"]], "Measurement": [[5, "measurement"]], "Energy": [[5, "energy"]], "Power": [[5, "power"]], "Voltage": [[5, "voltage"]], "Modulation": [[5, "modulation"], [6, "modulation"], [7, "modulation"]], "Linear modulations": [[6, "linear-modulations"]], "Continuous-phase modulations": [[6, "continuous-phase-modulations"]], "Orthogonal modulations": [[6, "orthogonal-modulations"]], "Pulse shaping": [[6, "pulse-shaping"]], "Symbol mapping": [[6, "symbol-mapping"], [246, "symbol-mapping"]], "Symbol encoding": [[6, "symbol-encoding"]], "Plotting": [[7, "plotting"]], "Configuration": [[7, "configuration"], [238, "configuration"], [240, "configuration"]], "Time-domain": [[7, "time-domain"]], "Frequency-domain": [[7, "frequency-domain"]], "Spectral estimation": [[7, "spectral-estimation"]], "Filter analysis": [[7, "filter-analysis"]], "Probability": [[8, "probability"]], "Note": [[9, null], [182, null], [190, null], [203, null], [205, null], [205, null], [212, null]], "Constructors": [[9, "constructors"], [26, "constructors"], [41, "constructors"], [48, "constructors"], [65, "constructors"], [72, "constructors"], [91, "constructors"], [101, "constructors"], [119, "constructors"], [128, "constructors"], [130, "constructors"], [138, "constructors"], [142, "constructors"], [150, "constructors"]], "Methods": [[9, "methods"], [26, "methods"], [36, "methods"], [41, "methods"], [48, "methods"], [65, "methods"], [72, "methods"], [91, "methods"], [101, "methods"], [119, "methods"], [128, "methods"], [130, "methods"], [138, "methods"], [142, "methods"], [150, "methods"], [154, "methods"]], "Properties": [[9, "properties"], [26, "properties"], [48, "properties"], [65, "properties"], [72, "properties"], [91, "properties"], [101, "properties"], [119, "properties"], [128, "properties"], [130, "properties"], [138, "properties"], [142, "properties"], [150, "properties"]], "Special methods": [[26, "special-methods"], [48, "special-methods"], [65, "special-methods"], [72, "special-methods"], [91, "special-methods"], [119, "special-methods"], [130, "special-methods"]], "String representation": [[26, "string-representation"], [48, "string-representation"], [72, "string-representation"], [91, "string-representation"], [101, "string-representation"], [128, "string-representation"], [138, "string-representation"], [142, "string-representation"], [150, "string-representation"]], "Streaming mode only": [[26, "streaming-mode-only"], [48, "streaming-mode-only"], [72, "streaming-mode-only"], [91, "streaming-mode-only"]], "See also": [[41, null], [43, null], [56, null], [57, null], [58, null], [62, null], [80, null], [81, null], [83, null], [88, null], [102, null], [105, null], [115, null], [129, null], [139, null], [143, null], [146, null], [148, null], [151, null], [152, null], [153, null], [169, null], [192, null], [231, null]], "Warning": [[174, null], [231, null]], "Sequences": [[234, "sequences"]], "Simulation": [[235, "simulation"]], "Channel models": [[235, "channel-models"]], "Signal impairments": [[235, "signal-impairments"]], "Synchronization": [[236, "synchronization"]], "Documentation": [[237, "documentation"]], "Install": [[237, "install"], [238, "install"], [240, "install"]], "Build the docs": [[237, "build-the-docs"]], "Serve the docs": [[237, "serve-the-docs"]], "Formatting": [[238, "formatting"]], "Run the linter": [[238, "run-the-linter"]], "Run the formatter": [[238, "run-the-formatter"]], "Pre-commit": [[238, "pre-commit"]], "Run from VS Code": [[238, "run-from-vs-code"], [240, "run-from-vs-code"]], "Installation": [[239, "installation"], [248, "installation"]], "Install from PyPI": [[239, "install-from-pypi"]], "Install from GitHub": [[239, "install-from-github"]], "Editable install from local folder": [[239, "editable-install-from-local-folder"]], "Install the dev dependencies": [[239, "install-the-dev-dependencies"]], "Unit Tests": [[240, "unit-tests"]], "Run from the command line": [[240, "run-from-the-command-line"]], "Farrow arbitrary resampler": [[241, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[241, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[241, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[241, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[241, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[241, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[241, "downsample-by-an-irrational-rate"]], "FIR filters": [[242, "fir-filters"]], "Create an FIR filter": [[242, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[242, "examine-the-impulse-response-h-n"], [243, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[242, "examine-the-step-response-s-n"], [243, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[242, "examine-the-frequency-response-h-omega"], [243, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[242, "examine-the-group-delay-tau-g-omega"], [243, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[242, "fully-analyze-a-fir-filter"]], "IIR filters": [[243, "iir-filters"]], "Create an IIR filter": [[243, "create-an-iir-filter"]], "Examine the zeros and poles": [[243, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[243, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[243, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[244, "peak-to-average-power"]], "QPSK signal with various pulse shapes": [[244, "qpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[244, "examine-time-domain"]], "Examine frequency domain": [[244, "examine-frequency-domain"]], "Plot across excess bandwidth": [[244, "plot-across-excess-bandwidth"]], "Phase-locked loops": [[245, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[245, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[245, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[245, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[245, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[245, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[245, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[245, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[246, "phase-shift-keying"]], "Constellations": [[246, "constellations"]], "BPSK": [[246, "bpsk"]], "QPSK": [[246, "qpsk"]], "8-PSK": [[246, "id1"]], "16-PSK": [[246, "id2"]], "Error rate curves": [[246, "error-rate-curves"]], "Bit error rate curves": [[246, "bit-error-rate-curves"]], "Symbol error rate curves": [[246, "symbol-error-rate-curves"]], "Pulse shapes": [[247, "pulse-shapes"]], "Raised cosine": [[247, "raised-cosine"]], "Square-root raised cosine": [[247, "square-root-raised-cosine"]], "Gaussian": [[247, "gaussian"]], "sdr": [[248, "sdr"]], "Features": [[248, "features"]], "v0.0": [[249, "v0-0"]], "v0.0.8": [[249, "v0-0-8"]], "Changes": [[249, "changes"], [249, "id1"], [249, "id3"], [249, "id5"], [249, "id7"], [249, "id9"], [249, "id11"], [249, "id13"]], "Contributors": [[249, "contributors"], [249, "id2"], [249, "id4"], [249, "id6"], [249, "id8"], [249, "id10"], [249, "id12"], [249, "id14"]], "v0.0.7": [[249, "v0-0-7"]], "v0.0.6": [[249, "v0-0-6"]], "v0.0.5": [[249, "v0-0-5"]], "v0.0.4": [[249, "v0-0-4"]], "v0.0.3": [[249, "v0-0-3"]], "v0.0.2": [[249, "v0-0-2"]], "v0.0.1": [[249, "v0-0-1"]], "Versioning": [[250, "versioning"]], "Alpha releases": [[250, "alpha-releases"]], "Beta releases": [[250, "beta-releases"]]}, "indexentries": {"module": [[3, "module-sdr"]], "sdr": [[3, "module-sdr"]]}, "docurls": ["api/conversions/", "api/data-manipulation/", "api/detection/", "api/dsp/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.Decimator/", "api/sdr.Decimator.__call__/", "api/sdr.Decimator.__init__/", "api/sdr.Decimator.__repr__/", "api/sdr.Decimator.__str__/", "api/sdr.Decimator.method/", "api/sdr.Decimator.polyphase_taps/", "api/sdr.Decimator.rate/", "api/sdr.Decimator.reset/", "api/sdr.Decimator.taps/", "api/sdr.EnergyDetector/", "api/sdr.EnergyDetector.p_d/", "api/sdr.EnergyDetector.p_fa/", "api/sdr.EnergyDetector.roc/", "api/sdr.EnergyDetector.threshold/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__call__/", "api/sdr.FIR.__init__/", "api/sdr.FIR.__len__/", "api/sdr.FIR.__repr__/", "api/sdr.FIR.__str__/", "api/sdr.FIR.delay/", "api/sdr.FIR.flush/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.frequency_response_log/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.reset/", "api/sdr.FIR.state/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__call__/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__call__/", "api/sdr.IIR.__init__/", "api/sdr.IIR.__repr__/", "api/sdr.IIR.__str__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.state/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.Interpolator/", "api/sdr.Interpolator.__call__/", "api/sdr.Interpolator.__init__/", "api/sdr.Interpolator.__repr__/", "api/sdr.Interpolator.__str__/", "api/sdr.Interpolator.method/", "api/sdr.Interpolator.polyphase_taps/", "api/sdr.Interpolator.rate/", "api/sdr.Interpolator.reset/", "api/sdr.Interpolator.taps/", "api/sdr.LinearModulation/", "api/sdr.LinearModulation.__init__/", "api/sdr.LinearModulation.__repr__/", "api/sdr.LinearModulation.__str__/", "api/sdr.LinearModulation.ber/", "api/sdr.LinearModulation.bps/", "api/sdr.LinearModulation.decide_symbols/", "api/sdr.LinearModulation.demodulate/", "api/sdr.LinearModulation.map_symbols/", "api/sdr.LinearModulation.modulate/", "api/sdr.LinearModulation.order/", "api/sdr.LinearModulation.phase_offset/", "api/sdr.LinearModulation.pulse_shape/", "api/sdr.LinearModulation.rx_filter/", "api/sdr.LinearModulation.ser/", "api/sdr.LinearModulation.sps/", "api/sdr.LinearModulation.symbol_map/", "api/sdr.LinearModulation.tx_filter/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__call__/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.MSK/", "api/sdr.MSK.__init__/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__call__/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.OQPSK/", "api/sdr.OQPSK.__init__/", "api/sdr.OQPSK.__repr__/", "api/sdr.OQPSK.__str__/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.__repr__/", "api/sdr.PSK.__str__/", "api/sdr.PSK.ber/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.PiMPSK/", "api/sdr.PiMPSK.__init__/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.ReplicaCorrelator/", "api/sdr.ReplicaCorrelator.p_d/", "api/sdr.ReplicaCorrelator.p_fa/", "api/sdr.ReplicaCorrelator.roc/", "api/sdr.ReplicaCorrelator.threshold/", "api/sdr.albersheim/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.barker/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.db/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.downsample/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.evm/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.half_sine/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.linear/", "api/sdr.mix/", "api/sdr.multirate_taps/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.percent/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.eye/", "api/sdr.plot.filter/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.magnitude_response/", "api/sdr.plot.p_d/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.phase_tree/", "api/sdr.plot.raster/", "api/sdr.plot.roc/", "api/sdr.plot.ser/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.polyphase_matrix/", "api/sdr.ppb/", "api/sdr.ppm/", "api/sdr.raised_cosine/", "api/sdr.rectangular/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.to_complex_bb/", "api/sdr.to_real_pb/", "api/sdr.unpack/", "api/sdr.upsample/", "api/sdr.wavelength/", "api/sdr.zadoff_chu/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/formatting/", "development/installation/", "development/unit-tests/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})