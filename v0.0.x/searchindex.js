Search.setIndex({"titles": ["Conversions", "Data manipulation", "Detection", "Digital signal processing", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "sdr.AGC", "sdr.AGC.__call__", "sdr.AGC.__init__", "sdr.AGC.attack", "sdr.AGC.decay", "sdr.AGC.gain", "sdr.AGC.reference", "sdr.AGC.reset", "sdr.AGC.streaming", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.Decimator", "sdr.Decimator.__call__", "sdr.Decimator.__init__", "sdr.Decimator.delay", "sdr.Decimator.method", "sdr.Decimator.polyphase_taps", "sdr.Decimator.rate", "sdr.Decimator.reset", "sdr.Decimator.taps", "sdr.Differentiator", "sdr.Differentiator.__init__", "sdr.EnergyDetector", "sdr.EnergyDetector.p_d", "sdr.EnergyDetector.p_fa", "sdr.EnergyDetector.roc", "sdr.EnergyDetector.threshold", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__call__", "sdr.FIR.__init__", "sdr.FIR.__len__", "sdr.FIR.delay", "sdr.FIR.flush", "sdr.FIR.frequency_response", "sdr.FIR.group_delay", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.phase_delay", "sdr.FIR.reset", "sdr.FIR.state", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__call__", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__call__", "sdr.IIR.__init__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.frequency_response", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.state", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.Integrator", "sdr.Integrator.__init__", "sdr.Interpolator", "sdr.Interpolator.__call__", "sdr.Interpolator.__init__", "sdr.Interpolator.delay", "sdr.Interpolator.method", "sdr.Interpolator.polyphase_taps", "sdr.Interpolator.rate", "sdr.Interpolator.reset", "sdr.Interpolator.taps", "sdr.LeakyIntegrator", "sdr.LeakyIntegrator.__init__", "sdr.LinearModulation", "sdr.LinearModulation.__init__", "sdr.LinearModulation.ber", "sdr.LinearModulation.bps", "sdr.LinearModulation.decide_symbols", "sdr.LinearModulation.demodulate", "sdr.LinearModulation.map_symbols", "sdr.LinearModulation.modulate", "sdr.LinearModulation.order", "sdr.LinearModulation.phase_offset", "sdr.LinearModulation.pulse_shape", "sdr.LinearModulation.rx_filter", "sdr.LinearModulation.ser", "sdr.LinearModulation.sps", "sdr.LinearModulation.symbol_map", "sdr.LinearModulation.tx_filter", "sdr.LoopFilter", "sdr.LoopFilter.__call__", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.iir", "sdr.LoopFilter.integral_gain", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.proportional_gain", "sdr.LoopFilter.reset", "sdr.MLPED", "sdr.MLPED.A_received", "sdr.MLPED.A_reference", "sdr.MLPED.__call__", "sdr.MLPED.__init__", "sdr.MLPED.data_aided_error", "sdr.MLPED.decision_directed_error", "sdr.MLPED.gain", "sdr.MSK", "sdr.MSK.__init__", "sdr.MovingAverager", "sdr.MovingAverager.__init__", "sdr.NCO", "sdr.NCO.__call__", "sdr.NCO.__init__", "sdr.NCO.gain", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.reset", "sdr.NCO.step", "sdr.OQPSK", "sdr.OQPSK.__init__", "sdr.PED", "sdr.PED.__call__", "sdr.PED.__init__", "sdr.PED.data_aided_error", "sdr.PED.decision_directed_error", "sdr.PED.gain", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.ber", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.PiMPSK", "sdr.PiMPSK.__init__", "sdr.Q", "sdr.Qinv", "sdr.ReplicaCorrelator", "sdr.ReplicaCorrelator.p_d", "sdr.ReplicaCorrelator.p_fa", "sdr.ReplicaCorrelator.roc", "sdr.ReplicaCorrelator.threshold", "sdr.Resampler", "sdr.Resampler.__call__", "sdr.Resampler.__init__", "sdr.Resampler.delay", "sdr.Resampler.down", "sdr.Resampler.method", "sdr.Resampler.polyphase_taps", "sdr.Resampler.rate", "sdr.Resampler.reset", "sdr.Resampler.taps", "sdr.Resampler.up", "sdr.albersheim", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.barker", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.db", "sdr.design_bandpass_fir", "sdr.design_bandstop_fir", "sdr.design_frac_delay_fir", "sdr.design_highpass_fir", "sdr.design_lowpass_fir", "sdr.design_multirate_fir", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.downsample", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.euclidean", "sdr.evm", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.hadamard", "sdr.half_sine", "sdr.hamming", "sdr.hexdump", "sdr.iq_imbalance", "sdr.linear", "sdr.mix", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.percent", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.eye", "sdr.plot.filter", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.magnitude_response", "sdr.plot.p_d", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.phase_tree", "sdr.plot.raster", "sdr.plot.roc", "sdr.plot.ser", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.polyphase_decompose", "sdr.ppb", "sdr.ppm", "sdr.raised_cosine", "sdr.rectangular", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.to_complex_bb", "sdr.to_real_pb", "sdr.unpack", "sdr.upsample", "sdr.walsh", "sdr.wavelength", "sdr.zadoff_chu", "Sequences", "Simulation", "Synchronization", "Documentation", "Formatting", "Installation", "Unit Tests", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289], "db": [0, 4, 5, 18, 29, 31, 47, 49, 51, 53, 54, 55, 57, 97, 112, 122, 143, 155, 163, 165, 167, 169, 174, 176, 189, 190, 191, 192, 200, 201, 202, 203, 204, 205, 206, 211, 212, 213, 214, 215, 217, 219, 220, 226, 227, 230, 231, 232, 233, 235, 236, 242, 249, 261, 264, 265, 283, 285, 286, 288], "x": [0, 1, 3, 5, 6, 7, 8, 9, 10, 18, 35, 36, 44, 46, 51, 53, 58, 59, 74, 75, 81, 83, 97, 98, 99, 100, 108, 110, 115, 117, 126, 127, 143, 145, 155, 163, 169, 171, 172, 173, 178, 179, 190, 191, 194, 197, 199, 200, 207, 208, 209, 210, 213, 216, 217, 218, 224, 226, 227, 228, 229, 230, 232, 233, 234, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 250, 252, 253, 257, 258, 261, 263, 268, 269, 274, 278, 283, 284, 285, 288, 289], "arraylik": [0, 1, 2, 3, 4, 5, 6, 7, 8, 35, 36, 37, 44, 46, 47, 48, 49, 50, 51, 53, 58, 59, 60, 74, 78, 81, 82, 83, 84, 97, 99, 100, 101, 108, 110, 111, 112, 114, 115, 116, 117, 122, 135, 138, 143, 144, 145, 155, 156, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 189, 192, 194, 195, 197, 198, 200, 201, 202, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 217, 218, 219, 225, 227, 229, 231, 234, 238, 239, 240, 241, 242, 243, 244, 245, 248, 250, 251, 255, 256, 257, 258, 264, 265, 268, 271, 274], "ndarrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 35, 36, 40, 43, 44, 46, 47, 48, 49, 50, 51, 56, 58, 59, 63, 64, 65, 66, 68, 70, 71, 73, 74, 75, 80, 81, 83, 85, 86, 87, 89, 91, 93, 94, 96, 97, 99, 100, 104, 107, 108, 110, 112, 114, 115, 116, 117, 120, 122, 124, 126, 127, 135, 138, 140, 141, 143, 145, 147, 148, 154, 155, 157, 158, 160, 161, 163, 165, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 184, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 246, 247, 249, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274], "float_": [0, 2, 3, 4, 5, 6, 7, 8, 46, 47, 48, 49, 50, 51, 56, 110, 112, 120, 122, 135, 140, 141, 143, 155, 157, 158, 160, 161, 163, 165, 167, 169, 171, 172, 173, 174, 175, 176, 177, 189, 192, 195, 198, 200, 201, 202, 203, 204, 205, 206, 211, 212, 213, 214, 215, 219, 220, 223, 227, 231, 234, 235, 249, 257, 258, 259, 260, 262, 264, 265, 266, 267, 271], "convert": [0, 3, 110, 114, 116, 143, 155, 163, 169, 200, 211, 212, 214, 215, 225, 227, 234, 257, 258, 264, 265, 266, 267], "linear": [0, 9, 14, 16, 44, 99, 101, 103, 110, 111, 140, 141, 143, 155, 160, 161, 163, 169, 178, 180, 183, 191, 200, 227, 241, 243, 248, 250, 252, 287, 288], "unit": [0, 35, 44, 58, 71, 81, 94, 97, 99, 108, 126, 144, 145, 147, 156, 164, 170, 178, 191, 192, 200, 207, 208, 227, 251, 253, 278, 281, 282, 284, 287, 288], "percent": [0, 234, 288], "percentag": [0, 234], "ppm": [0, 258, 263, 274, 288], "part": [0, 253, 257, 258, 263, 284], "per": [0, 1, 36, 59, 100, 110, 111, 113, 115, 117, 123, 143, 144, 148, 155, 156, 163, 164, 169, 170, 191, 192, 211, 212, 214, 215, 218, 220, 223, 225, 229, 236, 237, 246, 257, 258, 259, 260, 262, 263, 264, 265, 268, 277, 283, 286, 288], "million": [0, 258, 263], "ppb": [0, 257, 288], "billion": [0, 257], "ebn0_to_esn0": [0, 122, 167, 211, 285, 288], "ebn0": [0, 7, 110, 112, 143, 155, 163, 165, 169, 192, 211, 212, 235, 285], "bp": [0, 110, 113, 143, 155, 163, 169, 211, 212, 214, 264, 285], "int": [0, 1, 3, 6, 7, 35, 37, 38, 41, 44, 45, 51, 53, 54, 57, 58, 61, 62, 64, 65, 66, 67, 68, 71, 74, 77, 81, 87, 89, 90, 94, 97, 99, 101, 102, 105, 108, 110, 111, 113, 118, 123, 140, 141, 143, 144, 145, 146, 147, 154, 155, 156, 160, 161, 163, 164, 169, 170, 178, 180, 181, 182, 188, 190, 191, 193, 194, 196, 197, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 229, 230, 232, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 250, 251, 256, 259, 260, 262, 264, 265, 268, 269, 270, 272, 273, 285], "ebn0_to_snr": [0, 143, 155, 163, 169, 212, 288], "esn0_to_ebn0": [0, 112, 165, 214, 288], "esn0": [0, 7, 110, 122, 143, 155, 163, 167, 169, 214, 215, 249, 285], "esn0_to_snr": [0, 215, 285, 288], "sp": [0, 6, 7, 110, 111, 115, 117, 123, 143, 144, 155, 156, 163, 164, 169, 170, 212, 215, 220, 223, 237, 246, 253, 259, 260, 262, 264, 265, 266, 267, 283, 285, 286], "1": [0, 6, 8, 9, 11, 12, 13, 16, 18, 25, 28, 32, 34, 35, 37, 40, 43, 44, 45, 46, 47, 49, 50, 51, 58, 61, 62, 64, 65, 68, 81, 82, 87, 97, 98, 99, 100, 101, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 124, 126, 128, 129, 135, 139, 143, 144, 145, 147, 149, 155, 156, 157, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 184, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 289], "snr_to_ebn0": [0, 112, 165, 192, 264, 288], "snr": [0, 2, 4, 7, 46, 47, 49, 51, 53, 54, 55, 56, 57, 143, 155, 163, 169, 189, 191, 192, 242, 264, 265, 266, 267, 274, 285, 288], "snr_to_esn0": [0, 122, 167, 265, 288], "pack": [1, 51, 53, 143, 155, 163, 169, 225, 229, 287, 288], "bpe": [1, 229, 268], "int_": [1, 5, 6, 110, 114, 115, 143, 155, 163, 169, 194, 196, 197, 207, 208, 209, 221, 224, 229, 268, 274], "binari": [1, 4, 6, 144, 156, 164, 168, 170, 193, 194, 195, 196, 197, 198, 209, 222, 229, 252, 268, 270, 274, 285, 287, 288], "arrai": [1, 40, 43, 51, 64, 87, 101, 104, 107, 111, 143, 144, 147, 155, 156, 163, 164, 168, 169, 170, 180, 184, 187, 190, 193, 194, 196, 197, 207, 208, 209, 213, 216, 221, 222, 224, 229, 230, 232, 253, 256, 268, 270, 282], "an": [1, 2, 3, 4, 9, 11, 35, 44, 46, 58, 60, 64, 66, 81, 82, 84, 87, 89, 97, 98, 99, 100, 108, 109, 111, 144, 145, 147, 156, 164, 165, 167, 170, 173, 178, 192, 203, 229, 235, 240, 249, 253, 268, 271, 275, 278, 287, 288], "multipl": [1, 64, 87, 229, 268, 285, 288], "bit": [1, 5, 7, 51, 53, 56, 110, 112, 113, 143, 144, 155, 156, 163, 164, 165, 168, 169, 170, 192, 194, 195, 197, 198, 211, 212, 214, 225, 229, 235, 264, 268, 287, 288], "element": [1, 225, 229, 268], "unpack": [1, 51, 53, 225, 268, 285, 287, 288], "hexdump": [1, 51, 225, 287, 288], "byte": [1, 225], "width": [1, 203, 225], "16": [1, 165, 167, 168, 203, 211, 212, 214, 222, 225, 235, 249, 256, 259, 262, 264, 265, 270, 283, 288], "str": [1, 45, 225, 237, 243, 246, 247, 250], "return": [1, 6, 10, 18, 26, 28, 31, 32, 35, 36, 44, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 65, 66, 68, 71, 75, 81, 83, 87, 89, 94, 97, 99, 100, 108, 112, 114, 115, 116, 117, 122, 127, 138, 140, 141, 145, 148, 154, 158, 160, 161, 165, 167, 171, 172, 174, 175, 176, 177, 178, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 281, 282, 283, 285, 288], "specifi": [1, 51, 54, 55, 57, 135, 140, 141, 157, 160, 161, 191, 192, 209, 225, 276, 281, 282, 288], "class": [2, 3, 5, 6, 9, 18, 35, 44, 46, 51, 53, 54, 55, 56, 57, 58, 74, 81, 97, 99, 108, 110, 126, 135, 143, 145, 147, 155, 157, 163, 169, 173, 178, 275, 281, 282, 285, 287, 288], "replicacorrel": [2, 173, 174, 175, 176, 177, 288], "implement": [2, 3, 6, 9, 35, 44, 46, 58, 74, 81, 97, 99, 108, 110, 126, 130, 135, 143, 145, 147, 155, 157, 163, 169, 173, 178, 189, 275, 280], "clairvoy": [2, 173], "replica": [2, 173], "correl": [2, 173, 193, 222, 270, 272], "energydetector": [2, 46, 47, 48, 49, 50, 288], "energi": [2, 46, 112, 122, 165, 167, 173, 174, 175, 176, 177, 192, 211, 212, 213, 214, 215, 220, 223, 235, 249, 259, 260, 262, 264, 265, 287, 288], "albersheim": [2, 189, 288], "p_d": [2, 7, 46, 47, 49, 173, 174, 176, 189, 242, 248, 288], "p_fa": [2, 7, 46, 47, 48, 49, 50, 173, 174, 175, 176, 177, 189, 248], "estim": [2, 18, 110, 114, 115, 143, 155, 163, 169, 189, 243, 250, 284], "minimum": [2, 6, 143, 189, 288], "requir": [2, 36, 59, 100, 189, 276, 277, 278, 279, 288], "singl": [2, 49, 64, 87, 165, 167, 189], "sampl": [2, 3, 11, 12, 13, 18, 25, 33, 35, 36, 38, 44, 47, 48, 49, 50, 58, 59, 62, 64, 65, 66, 68, 71, 74, 78, 87, 89, 94, 99, 100, 101, 102, 110, 111, 115, 117, 123, 126, 128, 132, 143, 144, 145, 147, 148, 149, 151, 153, 154, 155, 156, 163, 164, 169, 170, 178, 180, 181, 189, 191, 210, 212, 215, 218, 220, 223, 228, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 250, 251, 253, 259, 260, 262, 263, 264, 265, 266, 267, 269, 274, 280, 283, 284, 286, 287, 288], "given": [2, 46, 51, 53, 54, 55, 57, 74, 75, 173, 189, 217, 281, 282], "n_": [2, 47, 48, 49, 50, 189], "nc": [2, 47, 48, 49, 50, 189], "non": [2, 36, 47, 48, 49, 50, 59, 100, 189, 223, 253, 260], "coher": [2, 47, 48, 49, 50, 189], "combin": [2, 189], "achiev": [2, 189, 285, 286], "probabl": [2, 7, 46, 47, 48, 49, 50, 171, 172, 173, 174, 175, 176, 177, 189, 194, 195, 197, 198, 209, 242, 248, 274, 288], "fals": [2, 5, 11, 35, 37, 45, 46, 47, 48, 49, 50, 58, 60, 64, 74, 76, 81, 82, 84, 87, 98, 99, 100, 101, 108, 109, 143, 145, 146, 155, 163, 165, 167, 169, 173, 174, 175, 176, 177, 178, 180, 189, 190, 194, 197, 209, 213, 228, 232, 233, 236, 243, 248, 250, 253, 261, 282, 286], "alarm": [2, 46, 47, 48, 49, 50, 173, 174, 175, 176, 177, 189, 248], "p_": [2, 7, 46, 47, 48, 49, 50, 165, 167, 173, 174, 175, 176, 177, 189, 190, 191, 200, 209, 217, 227, 230, 232, 235, 243, 248, 249], "fa": [2, 7, 46, 47, 48, 49, 50, 173, 174, 175, 176, 177, 189, 248], "thi": [2, 18, 35, 53, 54, 55, 57, 58, 81, 99, 101, 110, 111, 124, 135, 143, 148, 155, 156, 163, 164, 168, 169, 170, 178, 180, 189, 191, 192, 194, 197, 209, 210, 217, 219, 222, 237, 243, 247, 250, 253, 269, 270, 276, 278, 279, 280, 282, 284, 285, 286], "function": [2, 7, 8, 18, 27, 44, 58, 81, 82, 108, 126, 171, 172, 189, 192, 210, 220, 222, 235, 242, 243, 248, 249, 250, 269, 270, 281, 282, 284, 286, 287, 288], "": [2, 3, 7, 18, 26, 28, 29, 30, 32, 33, 35, 44, 46, 53, 54, 55, 56, 57, 58, 64, 65, 68, 71, 81, 87, 94, 97, 99, 108, 110, 111, 114, 115, 116, 117, 135, 143, 145, 155, 163, 169, 173, 175, 177, 178, 189, 191, 192, 212, 215, 217, 218, 226, 236, 237, 238, 239, 241, 243, 244, 245, 246, 247, 250, 251, 253, 254, 263, 264, 265, 266, 267, 279, 280, 283, 285, 287, 288], "equat": [2, 26, 28, 29, 30, 31, 32, 47, 48, 50, 81, 108, 155, 163, 169, 174, 175, 177, 189, 219], "finit": [3, 58, 287, 288], "impuls": [3, 7, 35, 44, 58, 66, 81, 89, 97, 99, 108, 145, 178, 201, 202, 203, 204, 205, 206, 220, 238, 240, 286, 287, 288], "respons": [3, 7, 35, 44, 58, 64, 66, 71, 81, 87, 89, 94, 97, 99, 108, 145, 178, 201, 202, 203, 204, 205, 206, 220, 238, 239, 240, 241, 245, 251, 286, 287, 288], "design_lowpass_fir": [3, 64, 205, 288], "order": [3, 18, 35, 36, 44, 45, 51, 56, 58, 59, 67, 74, 77, 81, 90, 97, 99, 100, 101, 108, 110, 111, 118, 126, 128, 143, 145, 155, 163, 164, 169, 170, 178, 180, 191, 201, 202, 204, 205, 211, 212, 214, 217, 218, 220, 236, 237, 246, 247, 259, 262, 263, 264, 275, 282, 283, 284, 285, 288], "design": [3, 35, 37, 39, 99, 101, 103, 111, 156, 164, 170, 178, 180, 183, 201, 202, 203, 204, 205, 206, 276, 287, 288], "lowpass": [3, 205], "h": [3, 7, 35, 44, 46, 58, 60, 64, 66, 81, 87, 89, 97, 99, 108, 110, 111, 120, 121, 125, 126, 143, 145, 155, 156, 163, 164, 169, 170, 173, 178, 201, 202, 203, 204, 205, 206, 220, 237, 238, 240, 241, 245, 256, 283, 284, 286], "n": [3, 5, 6, 7, 8, 9, 10, 18, 35, 36, 44, 45, 46, 49, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 73, 74, 75, 81, 83, 84, 85, 89, 90, 94, 97, 98, 99, 100, 108, 110, 111, 115, 117, 120, 121, 125, 126, 127, 143, 145, 147, 148, 154, 155, 156, 163, 164, 169, 170, 171, 172, 173, 175, 177, 178, 179, 190, 191, 192, 193, 196, 199, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 224, 226, 228, 230, 232, 233, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 250, 251, 253, 261, 263, 264, 265, 266, 267, 269, 270, 272, 273, 274, 284, 286, 287], "us": [3, 7, 9, 16, 35, 37, 39, 42, 44, 45, 58, 60, 63, 64, 69, 74, 76, 81, 82, 84, 87, 92, 97, 98, 99, 100, 101, 103, 106, 108, 109, 110, 111, 114, 115, 126, 130, 135, 140, 141, 143, 145, 146, 155, 156, 157, 160, 161, 163, 164, 169, 170, 178, 180, 183, 186, 192, 195, 198, 201, 202, 203, 204, 205, 206, 217, 222, 225, 229, 236, 237, 238, 240, 242, 243, 250, 251, 268, 270, 276, 277, 278, 279, 281, 282, 284, 285, 286, 287, 289], "window": [3, 35, 44, 45, 64, 99, 178, 201, 202, 203, 204, 205, 206, 243, 250, 288], "method": [3, 7, 39, 98, 101, 103, 180, 183, 201, 202, 203, 204, 205, 206, 243, 250, 281, 282, 288], "design_highpass_fir": [3, 204, 288], "highpass": [3, 204], "design_bandpass_fir": [3, 201, 288], "bandpass": [3, 201], "design_bandstop_fir": [3, 202, 288], "bandstop": [3, 202], "infinit": [3, 81, 97, 287, 288], "movingaverag": [3, 108, 145, 146, 288], "move": [3, 108, 109, 145, 146, 287, 288], "averag": [3, 5, 51, 108, 109, 135, 140, 141, 143, 145, 146, 155, 157, 160, 161, 169, 190, 191, 192, 217, 230, 243, 287, 288], "differenti": [3, 6, 44, 45, 143, 165, 167, 207, 208, 253, 287, 288], "integr": [3, 18, 23, 47, 48, 49, 50, 97, 98, 108, 109, 126, 128, 131, 145, 189, 275, 279, 282, 287, 288], "leakyintegr": [3, 108, 109, 145, 288], "leaki": [3, 108, 109, 145, 287, 288], "interpol": [3, 35, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 125, 143, 155, 163, 169, 178, 180, 188, 206, 237, 269, 283, 285, 287, 288], "polyphas": [3, 35, 36, 37, 40, 43, 99, 100, 101, 104, 107, 178, 179, 180, 184, 187, 206, 210, 256, 269, 287, 288], "decim": [3, 35, 36, 37, 38, 39, 40, 41, 42, 43, 110, 111, 114, 115, 116, 117, 121, 124, 143, 144, 155, 156, 163, 164, 168, 169, 170, 178, 180, 182, 206, 210, 285, 287, 288], "ration": [3, 178, 180, 206, 288], "design_multirate_fir": [3, 37, 101, 180, 206, 288], "up": [3, 178, 180, 188, 206, 219, 277], "kaiser": [3, 35, 37, 39, 99, 100, 101, 103, 178, 180, 183, 201, 202, 203, 204, 205, 206], "polyphase_decompos": [3, 256, 288], "tap": [3, 35, 37, 40, 43, 44, 58, 73, 74, 80, 81, 85, 86, 97, 99, 101, 104, 107, 108, 145, 178, 180, 184, 187, 256, 281, 282], "phase": [3, 7, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 44, 58, 68, 99, 110, 111, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 189, 218, 226, 228, 244, 245, 246, 256, 274, 287, 288], "decompos": [3, 35, 99, 178, 256], "h_i": [3, 35, 37, 40, 43, 44, 58, 60, 73, 99, 101, 104, 107, 145, 178, 180, 184, 187, 256, 281], "matrix": [3, 209, 256, 274], "h_": [3, 18, 35, 40, 43, 44, 99, 104, 107, 178, 184, 187, 256, 284], "i": [3, 9, 11, 12, 13, 17, 18, 25, 34, 35, 36, 37, 40, 43, 44, 45, 46, 48, 49, 50, 51, 56, 58, 59, 60, 64, 66, 71, 72, 73, 74, 79, 81, 84, 86, 87, 89, 94, 95, 97, 99, 100, 101, 104, 107, 108, 109, 110, 111, 126, 128, 129, 132, 135, 143, 145, 148, 153, 155, 156, 157, 163, 164, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 184, 187, 189, 190, 191, 192, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 209, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 243, 244, 245, 247, 250, 251, 253, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289], "j": [3, 35, 40, 43, 64, 81, 84, 85, 87, 97, 99, 104, 107, 108, 143, 147, 155, 163, 169, 178, 184, 187, 191, 209, 226, 228, 256, 272, 281, 282], "b": [3, 81, 84, 189, 192, 220, 225, 238, 240, 251, 256, 276, 277, 286], "farrowresampl": [3, 74, 75, 76, 77, 78, 79, 80, 280, 288], "cubic": [3, 74], "farrow": [3, 74, 75, 76, 77, 78, 79, 80, 287, 288], "design_frac_delay_fir": [3, 203, 288], "length": [3, 6, 7, 35, 36, 44, 45, 49, 58, 59, 61, 66, 71, 83, 99, 100, 101, 109, 111, 115, 117, 144, 145, 146, 156, 164, 170, 178, 180, 193, 196, 201, 202, 203, 204, 205, 206, 220, 221, 222, 223, 238, 240, 243, 247, 250, 251, 259, 260, 262, 266, 270, 272, 273, 277, 280, 283, 286], "delai": [3, 7, 35, 36, 38, 44, 58, 59, 62, 65, 68, 74, 99, 100, 102, 126, 145, 147, 178, 181, 203, 207, 208, 223, 239, 244, 260, 284, 287, 288], "fraction": [3, 74, 78, 203, 220, 280, 287, 288], "mix": [3, 228, 287, 288], "freq": [3, 4, 35, 44, 58, 64, 81, 87, 97, 99, 108, 145, 147, 148, 178, 218, 219, 228, 231, 271, 274, 280, 284], "float": [3, 5, 6, 9, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 44, 45, 49, 51, 53, 54, 55, 57, 58, 64, 65, 68, 74, 75, 81, 82, 87, 88, 97, 99, 108, 109, 110, 111, 119, 126, 128, 129, 131, 132, 133, 135, 136, 137, 139, 142, 143, 144, 145, 147, 149, 150, 151, 152, 155, 156, 157, 162, 163, 164, 166, 169, 170, 176, 178, 185, 190, 191, 192, 194, 197, 199, 201, 202, 203, 204, 205, 206, 217, 218, 220, 226, 228, 230, 232, 233, 236, 237, 238, 239, 241, 243, 244, 245, 246, 247, 250, 252, 253, 259, 261, 262, 263, 274], "0": [3, 6, 8, 9, 11, 16, 25, 35, 36, 40, 43, 44, 46, 49, 51, 58, 59, 60, 64, 65, 68, 73, 81, 82, 84, 85, 86, 87, 97, 99, 100, 101, 104, 107, 108, 110, 111, 114, 115, 116, 117, 124, 128, 143, 144, 145, 147, 149, 155, 156, 163, 164, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 184, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 224, 226, 227, 228, 229, 231, 234, 236, 237, 238, 239, 240, 241, 244, 245, 246, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 289], "time": [3, 5, 9, 18, 25, 26, 28, 29, 30, 31, 32, 44, 58, 81, 97, 108, 126, 128, 135, 145, 155, 157, 163, 169, 190, 191, 199, 201, 202, 204, 205, 209, 210, 213, 215, 216, 218, 220, 222, 224, 226, 228, 230, 232, 233, 237, 238, 243, 247, 250, 253, 259, 261, 262, 263, 265, 266, 267, 269, 270, 274, 280, 281, 282, 286, 287, 288], "domain": [3, 5, 190, 191, 199, 201, 202, 204, 205, 210, 213, 216, 218, 224, 226, 228, 230, 232, 233, 238, 243, 247, 250, 253, 261, 263, 266, 267, 269, 274, 287, 288], "complex": [3, 5, 7, 18, 35, 44, 46, 47, 48, 49, 50, 58, 64, 81, 87, 97, 99, 108, 110, 111, 114, 115, 116, 117, 124, 135, 138, 143, 144, 145, 147, 148, 154, 155, 156, 157, 158, 163, 164, 168, 169, 170, 173, 174, 175, 176, 177, 178, 191, 192, 210, 217, 226, 228, 236, 237, 239, 241, 244, 245, 247, 252, 253, 266, 267, 269, 274, 280, 281, 282, 284, 285, 287, 288], "exponenti": [3, 148, 210, 228, 266, 267, 269, 280, 281, 282, 288], "real": [3, 47, 48, 50, 143, 155, 171, 172, 174, 175, 177, 191, 228, 237, 239, 241, 244, 245, 247, 253, 266, 267, 280, 281, 282, 284, 287, 288], "sinusoid": [3, 163, 191, 228, 266, 267, 282, 288], "to_complex_bb": [3, 266, 288], "x_r": [3, 266, 267], "complex_": [3, 7, 9, 10, 110, 114, 115, 116, 117, 124, 143, 147, 154, 155, 157, 158, 163, 168, 169, 236, 252, 266, 267, 272, 273], "passband": [3, 201, 202, 203, 204, 205, 220, 223, 259, 260, 262, 266, 267, 283, 288], "center": [3, 201, 202, 203, 204, 205, 223, 253, 260, 266, 267, 288], "f_": [3, 18, 25, 33, 36, 64, 65, 68, 87, 100, 110, 111, 123, 143, 144, 155, 156, 163, 164, 169, 170, 201, 202, 204, 205, 210, 212, 215, 218, 220, 228, 237, 238, 239, 241, 243, 244, 245, 246, 247, 250, 253, 263, 264, 265, 266, 267, 269, 280, 281, 282, 284, 286], "r": [3, 9, 35, 36, 37, 40, 41, 43, 74, 75, 99, 100, 101, 104, 105, 107, 192, 210, 211, 212, 214, 217, 220, 228, 259, 262, 264, 266, 267, 269, 276, 277, 278, 279, 282, 283, 284, 286], "4": [3, 7, 9, 26, 28, 35, 40, 43, 44, 47, 49, 51, 64, 87, 97, 99, 100, 104, 107, 108, 135, 143, 144, 145, 147, 155, 156, 157, 163, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 184, 187, 189, 191, 192, 193, 195, 196, 198, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 225, 226, 228, 229, 231, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 249, 251, 252, 253, 254, 255, 256, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 278, 280, 282, 283, 284, 285], "rate": [3, 5, 7, 9, 11, 12, 13, 18, 25, 33, 35, 36, 37, 41, 51, 52, 53, 55, 56, 64, 65, 68, 74, 75, 87, 99, 100, 101, 105, 110, 112, 122, 143, 155, 163, 165, 167, 169, 178, 179, 180, 182, 185, 188, 206, 210, 211, 212, 214, 218, 228, 235, 237, 238, 239, 241, 243, 244, 245, 246, 247, 249, 250, 253, 263, 264, 266, 267, 269, 274, 287, 288], "baseband": [3, 7, 18, 143, 155, 163, 169, 228, 237, 246, 266, 267, 283, 284, 288], "x_c": [3, 266, 267], "c": [3, 18, 26, 28, 29, 30, 31, 32, 53, 54, 55, 56, 57, 110, 111, 124, 126, 143, 155, 163, 168, 169, 192, 195, 198, 219, 231, 252, 266, 267, 271, 284], "2": [3, 6, 7, 9, 18, 26, 28, 31, 35, 40, 43, 44, 46, 47, 48, 49, 50, 51, 58, 62, 64, 65, 68, 87, 97, 99, 100, 104, 107, 108, 109, 110, 111, 118, 135, 143, 145, 147, 155, 156, 157, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 184, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 276, 279, 280, 281, 282, 283, 284, 285, 286], "to_real_pb": [3, 267, 283, 288], "2f_": [3, 267], "upsampl": [3, 99, 178, 269, 288], "factor": [3, 5, 18, 25, 34, 108, 109, 111, 126, 128, 129, 156, 164, 170, 199, 210, 269, 284], "downsampl": [3, 210, 288], "bsc_capac": [4, 198, 288], "p": [4, 8, 147, 148, 171, 172, 178, 180, 184, 185, 187, 188, 194, 195, 197, 198, 206, 209, 274], "calcul": [4, 5, 192, 195, 198, 217, 219, 231, 271, 288], "symmetr": [4, 197, 198, 209, 266, 267, 274, 287], "bsc": [4, 197, 198, 209, 274, 287, 288], "bec_capac": [4, 195, 288], "erasur": [4, 194, 195, 209, 274, 287], "bec": [4, 194, 195, 209, 274, 287, 288], "awgn_capac": [4, 192, 288], "addit": [4, 191, 192, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 269, 274, 287], "white": [4, 191, 192, 274, 287], "gaussian": [4, 6, 44, 97, 108, 145, 191, 192, 220, 274, 287, 288], "nois": [4, 9, 18, 19, 20, 25, 31, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 112, 122, 126, 128, 132, 143, 155, 163, 165, 167, 169, 173, 174, 175, 176, 177, 191, 192, 211, 212, 214, 215, 235, 249, 264, 265, 274, 284, 287], "awgn": [4, 143, 155, 163, 165, 167, 169, 191, 192, 217, 235, 236, 249, 266, 267, 274, 285, 287, 288], "fspl": [4, 219], "distanc": [4, 216, 219, 224, 287, 288], "free": [4, 143, 155, 163, 169, 219, 287], "space": [4, 64, 87, 219, 287], "wavelength": [4, 271, 288], "lambda": [4, 219, 271], "electromagnet": [4, 271], "wave": [4, 143, 271], "frequenc": [4, 18, 26, 28, 30, 35, 44, 58, 64, 65, 68, 81, 87, 97, 99, 108, 126, 143, 145, 147, 148, 178, 201, 202, 203, 204, 205, 210, 218, 219, 228, 231, 238, 239, 241, 243, 244, 245, 250, 266, 267, 269, 271, 274, 286, 287, 288], "f": [4, 26, 28, 35, 44, 49, 64, 65, 68, 87, 97, 99, 147, 148, 178, 189, 191, 218, 219, 220, 228, 231, 263, 271, 272, 277, 280, 281, 282, 283, 284, 285, 286], "parabolic_antenna": [4, 231, 288], "tupl": [4, 35, 44, 45, 46, 49, 51, 53, 56, 58, 64, 65, 68, 81, 87, 97, 99, 108, 110, 114, 115, 135, 140, 141, 143, 145, 155, 157, 160, 161, 163, 169, 173, 176, 178, 190, 213, 216, 224, 230, 231, 232, 236, 238, 239, 240, 241, 244, 245, 251, 252, 255], "gain": [4, 9, 10, 11, 14, 16, 17, 18, 21, 22, 23, 24, 25, 81, 82, 88, 97, 108, 126, 128, 131, 133, 135, 142, 147, 149, 150, 157, 162, 189, 201, 202, 203, 204, 205, 219, 220, 223, 231, 259, 260, 262, 275, 284, 287], "g": [4, 56, 231, 278], "beamwidth": [4, 231], "theta": [4, 147, 149, 152, 153, 231], "parabol": [4, 231], "reflector": [4, 231], "signal": [5, 7, 9, 10, 11, 12, 13, 18, 26, 28, 31, 32, 35, 36, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 63, 74, 75, 81, 83, 97, 99, 100, 108, 110, 111, 120, 126, 127, 135, 136, 137, 139, 143, 145, 147, 148, 154, 155, 156, 163, 164, 169, 170, 173, 174, 175, 176, 177, 178, 179, 190, 191, 192, 199, 200, 201, 202, 204, 205, 206, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 224, 226, 227, 228, 230, 231, 232, 233, 237, 238, 239, 241, 243, 244, 245, 246, 247, 250, 253, 256, 261, 263, 264, 265, 266, 267, 269, 271, 281, 282, 284, 286, 287, 288], "peak_pow": [5, 230, 232, 288], "peak": [5, 143, 155, 169, 199, 217, 230, 232, 233], "average_pow": [5, 190, 230, 288], "papr": [5, 143, 155, 169, 230, 283, 288], "ratio": [5, 31, 47, 49, 51, 53, 54, 55, 56, 57, 112, 122, 143, 155, 165, 167, 169, 174, 176, 191, 192, 211, 212, 214, 215, 230, 234, 235, 249, 257, 258, 264, 265], "peak_voltag": [5, 199, 233, 288], "bool": [5, 9, 11, 17, 35, 37, 44, 45, 47, 48, 49, 50, 58, 60, 64, 72, 74, 76, 79, 81, 82, 84, 87, 95, 97, 98, 99, 101, 108, 109, 143, 145, 146, 155, 163, 165, 167, 169, 174, 175, 176, 177, 178, 180, 190, 213, 228, 232, 233, 236, 245, 247, 252, 253, 261], "rms_voltag": [5, 199, 261, 288], "root": [5, 6, 111, 156, 164, 170, 217, 237, 253, 261, 262, 272, 273, 281, 287], "mean": [5, 217, 243, 250, 261, 286], "squar": [5, 6, 111, 156, 164, 170, 217, 219, 231, 253, 261, 262, 281], "rm": [5, 135, 136, 137, 139, 199, 217, 261], "crest_factor": [5, 199, 230, 288], "crest": [5, 199], "euclidean": [5, 216, 287, 288], "y": [5, 6, 9, 10, 35, 36, 44, 58, 59, 63, 75, 81, 83, 97, 99, 100, 108, 126, 127, 147, 148, 154, 178, 191, 194, 197, 207, 208, 209, 210, 216, 218, 224, 226, 228, 236, 241, 243, 250, 252, 263, 269, 284, 285], "between": [5, 11, 17, 35, 37, 45, 60, 72, 76, 79, 82, 84, 95, 98, 99, 101, 109, 146, 157, 178, 180, 216, 219, 224, 243, 247, 250, 284, 287], "two": [5, 9, 108, 145, 201, 202, 216, 224, 237, 238, 239, 241, 243, 244, 245, 250, 272, 280, 281, 282], "ham": [5, 64, 201, 202, 204, 205, 224, 287, 288], "errorr": [5, 51, 52, 53, 54, 55, 56, 57, 285, 288], "A": [5, 9, 18, 26, 28, 29, 30, 31, 32, 34, 36, 44, 51, 58, 59, 64, 87, 97, 100, 108, 111, 126, 135, 145, 156, 157, 164, 170, 189, 196, 201, 202, 204, 205, 221, 225, 226, 231, 259, 262, 275, 277, 284], "error": [5, 7, 11, 12, 13, 18, 24, 25, 31, 51, 52, 53, 55, 56, 57, 110, 112, 122, 126, 128, 135, 138, 140, 141, 142, 143, 155, 157, 158, 160, 161, 162, 163, 165, 167, 169, 189, 198, 217, 235, 249, 284, 287, 288], "ber": [5, 7, 51, 110, 112, 143, 155, 163, 165, 169, 235, 285, 287, 288], "symbol": [5, 7, 51, 53, 56, 99, 110, 111, 113, 114, 115, 116, 117, 122, 123, 124, 135, 138, 143, 144, 155, 156, 157, 158, 163, 164, 165, 167, 168, 169, 170, 191, 211, 212, 214, 215, 217, 218, 220, 223, 236, 237, 246, 249, 252, 253, 259, 260, 262, 264, 265, 283, 284, 286, 287, 288], "ser": [5, 7, 51, 110, 122, 143, 155, 163, 167, 169, 249, 285, 287, 288], "evm": [5, 217, 287, 288], "x_hat": [5, 7, 51, 53, 217, 236, 285], "ref": [5, 135, 137, 139, 189, 201, 202, 203, 204, 205, 206, 217, 220, 222, 270], "vector": [5, 51, 64, 78, 87, 201, 202, 204, 205, 217, 243, 250, 287, 288], "magnitud": [5, 7, 9, 11, 15, 44, 97, 108, 145, 193, 203, 217, 222, 238, 241, 270, 272, 287, 288], "hat": [5, 7, 53, 110, 114, 115, 135, 138, 143, 155, 157, 158, 163, 169, 217, 236, 252], "k": [5, 6, 7, 44, 53, 97, 110, 111, 113, 114, 115, 116, 117, 118, 135, 138, 143, 155, 157, 158, 163, 164, 169, 170, 207, 208, 211, 212, 214, 217, 236, 252, 253, 264, 283, 286], "linearmodul": [6, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 140, 141, 160, 161, 163, 252, 288], "amplitud": [6, 110, 111, 135, 136, 137, 139, 226, 274, 280, 284], "arbitrari": [6, 74, 75, 76, 77, 78, 79, 80, 110, 287, 288], "psk": [6, 135, 155, 157, 163, 164, 165, 166, 167, 168, 169, 170, 191, 217, 218, 226, 235, 236, 237, 249, 252, 253, 263, 283, 284, 287, 288], "shift": [6, 143, 155, 163, 165, 166, 167, 168, 169, 272, 281, 282, 287, 288], "kei": [6, 143, 155, 163, 165, 166, 167, 168, 169, 287, 288], "demodul": [6, 110, 115, 143, 155, 163, 169, 288], "pimpsk": [6, 169, 170, 288], "pi": [6, 9, 35, 44, 87, 97, 99, 100, 135, 147, 155, 157, 163, 169, 170, 178, 191, 210, 219, 220, 226, 228, 231, 238, 239, 240, 241, 244, 245, 251, 255, 266, 267, 269, 272, 280, 281, 282, 284, 287, 288], "m": [6, 81, 84, 86, 97, 108, 110, 111, 113, 114, 115, 116, 117, 118, 124, 135, 143, 155, 157, 163, 164, 168, 169, 170, 209, 211, 212, 214, 219, 252, 264, 276, 277, 278, 279, 287, 288], "oqpsk": [6, 143, 155, 156, 288], "offset": [6, 26, 28, 35, 99, 100, 110, 111, 119, 143, 144, 147, 148, 149, 152, 155, 156, 163, 164, 166, 169, 170, 178, 218, 228, 253, 263, 274, 284, 287, 288], "quadratur": [6, 143, 155, 226], "msk": [6, 143, 144, 246, 288], "rectangular": [6, 98, 111, 156, 164, 170, 260, 283, 286, 287, 288], "span": [6, 7, 111, 156, 164, 170, 220, 223, 237, 246, 259, 260, 262, 283, 286], "half_sin": [6, 144, 223, 288], "half": [6, 143, 155, 206, 223, 231, 287, 288], "sine": [6, 143, 148, 223, 287, 288], "time_bandwidth": [6, 220], "raised_cosin": [6, 111, 156, 164, 170, 237, 259, 286, 288], "alpha": [6, 9, 11, 12, 108, 109, 111, 156, 164, 170, 220, 254, 259, 262, 283, 286], "rais": [6, 44, 97, 111, 156, 164, 170, 237, 253, 259, 262, 281, 287], "cosin": [6, 44, 97, 111, 148, 156, 164, 170, 237, 253, 259, 262, 281, 287, 288], "rc": [6, 111, 156, 164, 170, 259], "root_raised_cosin": [6, 44, 97, 111, 156, 164, 170, 237, 238, 239, 240, 241, 244, 245, 251, 255, 262, 281, 283, 285, 286, 288], "srrc": [6, 111, 155, 156, 163, 164, 169, 170, 237, 253, 262, 283, 285], "binary_cod": [6, 196, 288], "gener": [6, 143, 155, 163, 169, 191, 194, 196, 197, 209, 221, 248, 276, 285, 288], "code": [6, 144, 156, 164, 168, 170, 193, 196, 211, 212, 214, 221, 222, 236, 252, 264, 270, 273, 278, 285, 288], "gray_cod": [6, 221, 288], "grai": [6, 143, 144, 155, 156, 163, 164, 168, 169, 170, 221, 236, 252, 285, 287], "diff_encod": [6, 143, 155, 163, 165, 167, 169, 207, 208, 288], "y_prev": [6, 207, 208], "input": [6, 9, 10, 18, 26, 28, 31, 32, 35, 36, 37, 38, 44, 45, 58, 59, 60, 66, 70, 71, 74, 75, 76, 78, 81, 82, 83, 84, 89, 94, 97, 98, 99, 100, 101, 102, 108, 109, 126, 127, 145, 146, 147, 148, 155, 163, 165, 167, 169, 171, 178, 179, 180, 181, 191, 192, 194, 195, 197, 198, 200, 207, 208, 209, 210, 227, 229, 234, 240, 251, 257, 258, 268, 269, 274, 281, 282, 284], "data": [6, 135, 140, 157, 160, 207, 208, 225, 229, 253, 268, 287], "diff_decod": [6, 207, 208, 288], "decod": [6, 207], "use_styl": [7, 254], "appli": [7, 35, 45, 99, 111, 178, 218, 226, 236, 237, 243, 250, 252, 253, 254, 263, 274], "default": [7, 66, 71, 144, 156, 164, 168, 170, 190, 213, 216, 224, 230, 232, 236, 239, 241, 244, 245, 247, 250, 252, 254, 285], "matplotlib": [7, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 280, 281, 282, 283, 284, 285, 286, 287], "rcparam": [7, 254], "time_domain": [7, 9, 35, 44, 97, 99, 100, 108, 143, 145, 147, 155, 163, 169, 178, 191, 210, 222, 228, 253, 266, 267, 269, 270, 283, 284, 285, 286, 288], "ani": [7, 35, 44, 58, 64, 81, 87, 97, 99, 108, 145, 147, 148, 178, 193, 200, 210, 222, 227, 253, 269, 270, 273, 279], "dtype": [7, 35, 44, 58, 64, 81, 87, 97, 99, 108, 143, 145, 147, 148, 155, 163, 169, 178, 193, 222, 229, 253, 268, 270, 273, 284], "scalartyp": [7, 253], "t": [7, 18, 20, 25, 46, 126, 128, 132, 173, 220, 225, 253, 276, 280, 288], "raster": [7, 237, 246, 247, 287, 288], "none": [7, 35, 44, 45, 49, 58, 64, 66, 71, 74, 78, 87, 99, 111, 126, 134, 145, 148, 156, 164, 170, 176, 178, 190, 191, 192, 194, 197, 201, 202, 204, 205, 209, 213, 216, 224, 229, 230, 232, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 250, 251, 252, 253, 268, 274, 280, 283, 285], "periodogram": [7, 210, 243, 266, 267, 269, 283, 287, 288], "power": [7, 143, 155, 163, 169, 190, 191, 192, 200, 217, 220, 222, 223, 227, 230, 231, 232, 243, 259, 260, 262, 270, 286, 287], "densiti": [7, 31, 243, 283, 286], "xx": [7, 243], "welch": [7, 243, 250], "spectrogram": [7, 250, 287, 288], "constel": [7, 143, 155, 163, 166, 169, 191, 217, 218, 226, 236, 263, 272, 287, 288], "symbol_map": [7, 110, 111, 124, 143, 155, 163, 166, 168, 169, 217, 252, 285, 288], "map": [7, 110, 111, 116, 124, 143, 155, 163, 168, 169, 217, 252, 287, 288], "ey": [7, 143, 155, 163, 169, 237, 287, 288], "diagram": [7, 9, 18, 35, 58, 99, 108, 126, 147, 178, 207, 208, 237, 287, 288], "phase_tre": [7, 143, 246, 288], "tree": [7, 246, 288], "continu": [7, 97, 143, 246, 280, 288], "cpm": [7, 246, 288], "kwarg": [7, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255], "e_b": [7, 53, 54, 55, 56, 57, 110, 112, 143, 155, 163, 165, 169, 192, 211, 212, 214, 235, 264, 287], "n_0": [7, 11, 12, 13, 31, 53, 54, 55, 56, 57, 110, 112, 122, 143, 155, 163, 165, 167, 169, 191, 192, 211, 212, 214, 215, 217, 235, 236, 249, 264, 265, 285, 287], "e_": [7, 53, 54, 55, 56, 57, 110, 122, 143, 155, 163, 167, 169, 191, 192, 211, 214, 215, 217, 236, 249, 265, 285, 287], "roc": [7, 46, 49, 173, 176, 248, 288], "receiv": [7, 9, 46, 47, 49, 51, 53, 110, 114, 115, 121, 135, 136, 138, 139, 143, 155, 157, 158, 163, 165, 167, 169, 173, 174, 175, 176, 177, 217, 219, 237, 242, 248, 288], "oper": [7, 11, 46, 49, 173, 176, 248, 288], "characterist": [7, 46, 49, 173, 176, 248, 288], "curv": [7, 46, 49, 165, 167, 173, 176, 235, 248, 249, 288], "enr": [7, 173, 174, 176, 242], "impulse_respons": [7, 35, 44, 58, 66, 81, 89, 97, 99, 108, 145, 178, 201, 202, 203, 204, 205, 206, 220, 223, 240, 259, 260, 262, 281, 282, 286, 288], "step_respons": [7, 35, 44, 58, 71, 81, 94, 97, 99, 108, 145, 178, 251, 281, 282, 284, 288], "step": [7, 35, 44, 58, 71, 81, 94, 97, 99, 108, 145, 147, 148, 154, 178, 238, 251, 287], "zeros_pol": [7, 255, 282, 288], "zero": [7, 35, 36, 44, 58, 63, 78, 81, 82, 87, 96, 97, 99, 100, 101, 108, 126, 145, 148, 178, 180, 203, 222, 223, 229, 238, 239, 240, 241, 244, 245, 251, 255, 260, 266, 270, 281, 283, 284, 286, 287, 288], "pole": [7, 81, 82, 87, 91, 97, 108, 238, 239, 240, 241, 244, 245, 251, 255, 281, 287], "magnitude_respons": [7, 44, 64, 87, 97, 108, 145, 201, 202, 203, 204, 205, 206, 223, 241, 259, 260, 262, 281, 282, 284, 286, 288], "omega": [7, 35, 44, 58, 64, 65, 68, 81, 87, 97, 99, 108, 145, 147, 149, 151, 153, 178, 238, 239, 241, 244, 245, 284], "phase_respons": [7, 64, 87, 245, 288], "angl": [7, 157, 245, 284], "phase_delai": [7, 35, 44, 58, 68, 99, 145, 178, 244, 288], "tau_": [7, 35, 44, 58, 68, 99, 145, 178, 244], "phi": [7, 35, 44, 58, 68, 99, 110, 111, 119, 143, 144, 145, 155, 156, 163, 164, 166, 169, 170, 178, 218, 226, 228, 244], "group_delai": [7, 35, 44, 58, 65, 99, 145, 178, 203, 239, 281, 282, 288], "group": [7, 35, 44, 58, 65, 99, 145, 178, 203, 239, 287], "tau_g": [7, 35, 44, 58, 65, 99, 145, 178, 239], "iir": [7, 18, 27, 66, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 108, 109, 126, 130, 145, 238, 239, 240, 241, 244, 245, 251, 255, 281, 284, 287, 288], "q": [8, 143, 155, 171, 172, 173, 174, 175, 177, 178, 180, 182, 185, 206, 272, 288], "comput": [8, 35, 46, 47, 48, 49, 50, 64, 87, 110, 112, 122, 135, 143, 155, 157, 163, 165, 167, 169, 171, 172, 173, 174, 175, 176, 177, 190, 191, 213, 216, 219, 224, 230, 232, 281, 282, 284, 286, 288], "complementari": [8, 171, 172], "cumul": [8, 171, 172], "distribut": [8, 171, 172], "standard": [8, 171, 172], "normal": [8, 18, 20, 25, 126, 128, 132, 171, 172, 201, 202, 204, 205, 217, 220, 223, 238, 239, 241, 243, 244, 245, 250, 259, 260, 262, 284, 286], "mathcal": [8, 46, 171, 172, 173, 174, 175, 176, 177, 191, 209], "qinv": [8, 171, 172, 288], "invers": [8, 172], "agc": [9, 10, 11, 12, 13, 14, 15, 16, 17, 135, 275, 287], "automat": [9, 10, 11, 135, 275, 287], "control": [9, 10, 11, 18, 135, 147, 149, 259, 262, 284, 287, 288], "note": [9, 35, 40, 43, 44, 46, 47, 48, 50, 58, 81, 97, 99, 104, 107, 108, 126, 135, 145, 147, 157, 173, 174, 175, 177, 178, 184, 187, 189, 191, 192, 195, 198, 203, 207, 208, 220, 226, 231, 237, 256, 272], "block": [9, 18, 35, 58, 99, 108, 126, 147, 178, 207, 208], "exp": [9, 87, 148, 155, 163, 169, 210, 220, 226, 228, 238, 239, 240, 241, 244, 245, 251, 255, 267, 269, 272, 280, 282, 284], "z": [9, 18, 58, 81, 97, 108, 126, 147, 207, 208, 272, 281, 282, 284], "log": [9, 238, 239, 241, 243, 244, 245, 281, 282, 284], "beta": [9, 11, 13], "output": [9, 10, 11, 15, 35, 36, 38, 44, 58, 59, 66, 71, 81, 82, 84, 89, 94, 97, 98, 99, 100, 101, 102, 108, 109, 115, 126, 127, 145, 147, 148, 153, 154, 178, 180, 181, 191, 192, 193, 194, 195, 197, 198, 208, 209, 217, 222, 227, 229, 240, 251, 268, 270, 273, 276, 280, 281, 282, 284, 288], "attack": [9, 11, 12], "decai": [9, 11, 13, 280, 282], "refer": [9, 11, 15, 18, 26, 28, 29, 30, 31, 32, 44, 46, 47, 48, 50, 51, 74, 126, 135, 137, 138, 139, 157, 158, 165, 167, 173, 174, 175, 177, 189, 191, 199, 201, 202, 203, 204, 205, 206, 217, 218, 220, 222, 230, 256, 259, 262, 263, 270, 272, 282, 286, 287], "adder": [9, 35, 126, 147, 207, 208, 284], "multipli": [9, 18, 44, 99, 178], "michael": [9, 18, 26, 28, 29, 30, 31, 32, 44, 126, 135, 157, 259, 262], "rice": [9, 18, 26, 28, 29, 30, 31, 32, 44, 126, 135, 157, 259, 262], "digit": [9, 18, 26, 28, 29, 30, 31, 32, 44, 126, 135, 157, 165, 167, 259, 262, 284, 287, 288], "commun": [9, 18, 26, 28, 29, 30, 31, 32, 44, 126, 135, 157, 165, 167, 206, 256, 259, 262, 284, 287], "discret": [9, 18, 26, 28, 29, 30, 31, 32, 44, 97, 108, 126, 135, 145, 157, 191, 209, 215, 259, 262, 265, 274, 280, 284, 287, 288], "approach": [9, 18, 26, 28, 29, 30, 31, 32, 44, 126, 135, 157, 192, 195, 198, 259, 262, 284], "section": [9, 44, 46, 53, 54, 55, 56, 57, 135, 157, 173, 282, 284], "9": [9, 35, 40, 43, 64, 87, 99, 100, 104, 107, 143, 155, 163, 169, 174, 178, 184, 187, 189, 196, 209, 217, 221, 222, 225, 256, 259, 262, 270, 276, 282, 283, 285, 286], "5": [9, 35, 40, 43, 44, 46, 47, 48, 49, 50, 51, 64, 97, 99, 100, 104, 107, 108, 135, 143, 145, 147, 155, 163, 169, 174, 176, 178, 184, 187, 189, 191, 194, 196, 197, 198, 201, 202, 203, 204, 205, 209, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 225, 226, 231, 234, 237, 238, 239, 240, 241, 244, 245, 251, 253, 255, 256, 259, 262, 263, 264, 265, 266, 267, 269, 270, 272, 276, 280, 281, 282, 283, 284, 285, 286], "exampl": [9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 40, 42, 43, 44, 45, 47, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 106, 107, 108, 109, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 163, 165, 166, 167, 168, 169, 171, 172, 174, 176, 178, 184, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 284, 288], "creat": [9, 11, 18, 25, 35, 37, 44, 45, 51, 52, 58, 60, 74, 76, 81, 82, 84, 97, 98, 99, 100, 101, 108, 109, 110, 111, 126, 128, 143, 144, 145, 146, 147, 149, 155, 156, 163, 164, 166, 169, 170, 178, 180, 191, 193, 217, 218, 222, 228, 263, 266, 267, 270, 272, 280, 284, 286], "bursti": 9, "surround": 9, "In": [9, 11, 17, 35, 36, 37, 40, 43, 44, 45, 47, 49, 51, 59, 60, 64, 72, 76, 79, 82, 84, 87, 95, 97, 98, 99, 100, 101, 104, 107, 108, 109, 135, 143, 145, 146, 147, 155, 157, 163, 165, 166, 167, 168, 169, 171, 172, 174, 176, 178, 180, 184, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 280, 285], "np": [9, 35, 40, 43, 44, 47, 49, 64, 87, 97, 99, 100, 104, 107, 108, 110, 120, 124, 143, 145, 147, 155, 163, 165, 167, 168, 169, 174, 176, 178, 184, 187, 189, 191, 192, 193, 194, 195, 197, 198, 209, 210, 217, 218, 219, 222, 226, 228, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 249, 251, 253, 255, 256, 263, 266, 267, 269, 270, 272, 280, 281, 282, 283, 284, 285, 286], "1j": [9, 87, 210, 228, 238, 239, 240, 241, 244, 245, 251, 255, 267, 269, 280, 282, 284], "arang": [9, 35, 40, 43, 99, 100, 104, 107, 178, 184, 187, 191, 193, 210, 222, 228, 256, 266, 267, 269, 270, 272, 280, 284], "5000": [9, 257, 258], "100": [9, 44, 49, 64, 81, 87, 89, 94, 97, 108, 145, 147, 165, 167, 189, 191, 192, 195, 198, 200, 201, 202, 204, 205, 217, 227, 228, 235, 237, 238, 240, 246, 249, 251, 263, 266, 267, 269, 280, 284], "1000": [9, 64, 87, 140, 141, 143, 155, 160, 161, 163, 169, 217, 219, 266, 267, 285], "2000": 9, "10": [9, 40, 43, 44, 47, 49, 51, 97, 99, 100, 104, 107, 111, 143, 155, 156, 163, 164, 165, 167, 169, 170, 174, 176, 178, 184, 187, 189, 190, 191, 196, 200, 201, 202, 204, 205, 209, 211, 212, 213, 214, 215, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 230, 231, 232, 233, 235, 236, 238, 239, 240, 241, 244, 245, 249, 251, 253, 255, 256, 259, 260, 261, 262, 263, 264, 265, 270, 280, 281, 282, 283, 284, 285, 286], "3000": 9, "4000": 9, "001": [9, 284], "random": [9, 46, 108, 143, 145, 155, 163, 169, 191, 194, 197, 209, 217, 218, 226, 236, 237, 246, 253, 263, 283, 284, 285], "randn": [9, 108, 145, 253], "size": [9, 115, 117, 193, 209, 222, 253, 270, 280, 284, 285, 286], "3": [9, 18, 26, 28, 29, 32, 35, 40, 43, 44, 46, 47, 51, 64, 87, 97, 99, 100, 104, 107, 108, 135, 143, 145, 147, 155, 157, 163, 165, 166, 167, 168, 169, 173, 174, 178, 184, 187, 189, 191, 192, 193, 194, 196, 197, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 236, 237, 238, 239, 240, 241, 244, 245, 251, 253, 255, 256, 259, 260, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 276, 277, 282, 284, 286, 287], "plt": [9, 35, 44, 47, 49, 97, 99, 100, 108, 135, 143, 145, 147, 155, 157, 163, 165, 166, 167, 168, 169, 174, 176, 178, 189, 191, 192, 193, 195, 198, 201, 202, 203, 204, 205, 206, 210, 217, 218, 219, 220, 222, 223, 226, 228, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 249, 251, 252, 253, 255, 259, 260, 262, 263, 266, 267, 269, 270, 272, 280, 281, 282, 283, 284, 285, 286], "figur": [9, 35, 44, 47, 49, 97, 99, 100, 108, 135, 143, 145, 147, 155, 157, 163, 165, 166, 167, 168, 169, 174, 176, 178, 189, 191, 192, 193, 195, 198, 201, 202, 203, 204, 205, 206, 210, 217, 218, 219, 220, 222, 223, 226, 228, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 249, 251, 252, 253, 254, 255, 259, 260, 262, 263, 266, 267, 269, 270, 272, 280, 281, 282, 283, 284, 285, 286], "figsiz": [9, 35, 44, 47, 49, 97, 99, 100, 108, 135, 143, 145, 147, 155, 157, 163, 165, 166, 167, 168, 169, 174, 176, 178, 189, 191, 192, 193, 195, 198, 201, 202, 203, 204, 205, 206, 210, 217, 218, 219, 220, 222, 223, 226, 228, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 249, 251, 252, 253, 254, 255, 259, 260, 262, 263, 266, 267, 269, 270, 272, 280, 281, 282, 283, 284, 285, 286], "8": [9, 35, 40, 43, 44, 47, 49, 87, 97, 99, 100, 104, 107, 108, 111, 135, 143, 144, 145, 147, 155, 156, 157, 163, 164, 165, 166, 167, 168, 169, 170, 174, 176, 178, 184, 187, 189, 191, 192, 193, 195, 196, 198, 201, 202, 203, 204, 205, 206, 209, 210, 217, 219, 220, 221, 222, 223, 225, 228, 231, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 249, 251, 252, 253, 254, 255, 256, 259, 260, 262, 266, 267, 269, 270, 272, 281, 282, 283, 284, 286], "plot": [9, 35, 44, 47, 49, 64, 65, 66, 68, 71, 87, 89, 94, 97, 99, 100, 108, 135, 143, 145, 147, 155, 157, 163, 165, 166, 167, 168, 169, 174, 176, 178, 191, 192, 193, 195, 198, 201, 202, 203, 204, 205, 206, 210, 217, 218, 219, 220, 222, 223, 226, 228, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 259, 260, 262, 263, 266, 267, 269, 270, 272, 280, 281, 282, 284, 285, 286, 287, 288], "titl": [9, 35, 44, 97, 99, 135, 143, 147, 155, 157, 165, 167, 178, 189, 191, 192, 193, 195, 198, 210, 217, 218, 222, 226, 228, 235, 249, 253, 263, 266, 267, 269, 270, 272, 280, 283, 284, 285, 286], "tight_layout": [9, 35, 44, 97, 99, 135, 143, 147, 155, 157, 165, 167, 178, 189, 191, 192, 193, 195, 198, 210, 217, 218, 219, 222, 228, 235, 249, 253, 263, 266, 267, 269, 270, 272, 283, 284, 285, 286], "01": [9, 64, 87, 168, 169, 225, 282, 284], "notic": [9, 266, 267, 280, 286], "over": [9, 165, 167, 225], "amplifi": [9, 11, 13], "accord": 9, "also": [9, 135, 143, 157, 203, 219, 220, 287], "when": [9, 16, 35, 42, 44, 58, 63, 66, 69, 71, 81, 89, 92, 94, 97, 99, 106, 108, 109, 145, 178, 186, 191, 192, 194, 195, 197, 198, 215, 222, 238, 239, 240, 241, 244, 245, 251, 265, 270, 272, 280, 281, 282], "interest": 9, "appear": [9, 280], "quickli": 9, "decreas": [9, 192], "6": [9, 35, 40, 43, 44, 51, 87, 97, 99, 100, 104, 107, 108, 135, 143, 145, 147, 155, 163, 168, 169, 174, 175, 177, 178, 184, 187, 189, 196, 200, 203, 209, 210, 211, 212, 217, 219, 221, 222, 225, 227, 231, 236, 237, 238, 239, 240, 241, 244, 245, 251, 252, 253, 255, 256, 259, 262, 266, 267, 269, 270, 272, 276, 279, 281, 282, 284, 285], "ylim": [9, 108, 145, 201, 202, 203, 204, 205, 272, 281, 284, 285, 286], "__call__": [9, 10, 11, 17, 35, 36, 37, 44, 45, 58, 59, 60, 72, 74, 75, 76, 79, 81, 82, 83, 84, 95, 97, 98, 99, 100, 101, 108, 109, 126, 127, 135, 138, 145, 146, 147, 148, 157, 158, 178, 179, 180, 288], "perform": [9, 10, 18, 36, 59, 100, 165, 167, 203, 210, 269, 272, 275, 281, 282, 285, 287, 288], "reset": [9, 16, 35, 42, 44, 58, 69, 74, 78, 81, 92, 97, 99, 106, 108, 126, 134, 145, 147, 153, 178, 186], "indic": [9, 11, 17, 35, 37, 38, 44, 45, 48, 49, 50, 58, 60, 72, 74, 76, 79, 81, 82, 84, 95, 97, 98, 99, 101, 102, 108, 109, 110, 111, 143, 144, 145, 146, 155, 156, 163, 164, 165, 167, 169, 170, 174, 175, 176, 177, 178, 180, 181, 190, 213, 220, 223, 226, 228, 232, 233, 237, 245, 246, 247, 253, 259, 260, 261, 262, 270], "whether": [9, 11, 17, 35, 37, 44, 45, 48, 49, 50, 58, 60, 72, 74, 76, 79, 81, 82, 84, 95, 97, 98, 99, 101, 108, 109, 145, 146, 165, 167, 174, 175, 176, 177, 178, 180, 190, 213, 228, 232, 233, 245, 247, 253, 261], "The": [9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 73, 74, 75, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 276, 277, 278, 279, 281, 282, 284, 285, 286, 287, 289], "current": [9, 14, 253, 278], "settabl": [9, 12, 13, 15, 135, 136, 137, 147, 150, 151, 152], "desir": [9, 11, 15, 189, 191, 285], "paramet": [10, 11, 16, 25, 26, 28, 31, 36, 37, 45, 47, 48, 49, 50, 53, 54, 55, 57, 59, 60, 64, 65, 66, 68, 71, 75, 76, 78, 82, 83, 84, 87, 89, 94, 98, 100, 101, 109, 111, 112, 114, 115, 116, 117, 122, 127, 128, 138, 139, 140, 141, 144, 146, 148, 149, 154, 156, 158, 160, 161, 164, 165, 167, 170, 171, 172, 174, 175, 176, 177, 180, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272], "stream": [11, 16, 17, 36, 37, 42, 45, 59, 60, 63, 69, 72, 74, 76, 78, 79, 82, 84, 92, 95, 98, 100, 101, 106, 109, 143, 146, 155, 163, 169, 180, 186, 282], "meant": [11, 12, 13, 18], "attenu": [11, 12, 201, 202, 204, 205, 206, 259, 262], "strong": [11, 12], "after": [11, 12, 13, 40, 43, 104, 107, 184, 187], "approx": [11, 12, 13], "reduc": [11, 12, 13], "e": [11, 12, 13, 56, 135, 147, 157, 173, 174, 175, 176, 177, 190, 194, 195, 213, 272, 277, 278, 281, 282, 285], "its": [11, 12, 13, 58, 81, 82, 97, 108, 191, 281, 282, 286], "origin": [11, 12, 13, 155, 169, 269, 280], "valu": [11, 12, 13, 46, 110, 111, 112, 122, 143, 144, 155, 156, 163, 164, 165, 167, 169, 170, 171, 172, 193, 200, 207, 208, 220, 222, 226, 227, 236, 239, 241, 244, 245, 252, 270, 277, 282, 288], "weak": [11, 13], "mode": [11, 16, 17, 36, 37, 42, 45, 59, 60, 63, 69, 72, 74, 76, 78, 79, 82, 84, 92, 95, 98, 100, 101, 106, 109, 146, 179, 180, 186, 193, 222, 270, 272], "preserv": [11, 17, 35, 37, 45, 60, 72, 76, 79, 82, 84, 95, 98, 99, 101, 109, 146, 178, 180, 237, 247], "call": [11, 17, 35, 36, 37, 45, 59, 60, 72, 76, 79, 82, 84, 95, 98, 99, 100, 101, 109, 146, 178, 180], "properti": [12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 27, 29, 30, 33, 34, 38, 39, 40, 41, 43, 62, 67, 70, 72, 73, 77, 79, 80, 85, 86, 88, 90, 91, 93, 95, 96, 102, 103, 104, 105, 107, 113, 118, 119, 120, 121, 123, 124, 125, 129, 130, 131, 132, 133, 136, 137, 142, 150, 151, 152, 162, 166, 168, 181, 182, 183, 184, 185, 187, 188, 288], "onli": [16, 18, 36, 42, 59, 63, 64, 69, 74, 78, 87, 92, 100, 106, 111, 135, 144, 156, 164, 168, 170, 186, 191, 201, 202, 204, 205, 219, 222, 223, 247, 260, 270, 279, 284, 285], "initi": [16, 135, 139, 157, 159, 284], "closedlooppl": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 275, 284, 288], "defin": [18, 58, 81, 97, 191, 209, 220, 248, 272, 275, 282, 287], "close": [18, 25, 27, 275, 287, 288], "loop": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 126, 127, 128, 129, 130, 131, 132, 133, 134, 147, 148, 149, 150, 151, 152, 153, 154, 287, 288], "pll": [18, 19, 20, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 275, 287, 288], "analysi": [18, 25, 277, 284, 287, 288], "bb": [18, 283, 284], "phase_err": [18, 284], "ped": [18, 24, 25, 128, 135, 139, 140, 141, 157, 158, 159, 160, 161, 162, 275, 284, 287, 288], "lf": [18, 284], "phase_est": [18, 284], "lo": [18, 284], "nco": [18, 21, 25, 128, 147, 148, 149, 150, 151, 152, 153, 154, 275, 284, 287, 288], "local": [18, 276, 284], "oscil": [18, 147, 149, 275, 284, 287, 288], "detector": [18, 24, 25, 46, 128, 135, 142, 157, 162, 173, 284, 287, 288], "filter": [18, 22, 23, 25, 27, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 115, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 143, 145, 146, 155, 163, 169, 178, 179, 180, 181, 183, 184, 186, 187, 201, 202, 203, 204, 205, 206, 210, 220, 223, 237, 238, 239, 240, 241, 244, 245, 251, 255, 256, 259, 260, 262, 269, 275, 286, 287, 288], "numer": [18, 147, 149, 275, 282, 284, 287, 288], "transfer": [18, 27, 58, 81, 82, 108, 126, 220, 281, 282, 284], "2nd": [18, 126, 128, 275, 284, 288], "proport": [18, 22, 36, 100, 126, 128, 133, 219, 231, 275, 288], "plu": [18, 126, 128, 275, 288], "k_1": [18, 22, 126, 133, 284], "k_2": [18, 23, 126, 131, 284], "frac": [18, 26, 28, 31, 32, 44, 46, 47, 48, 50, 58, 62, 81, 97, 101, 108, 126, 145, 155, 163, 169, 173, 174, 175, 180, 189, 190, 191, 192, 199, 211, 212, 214, 215, 217, 219, 220, 226, 227, 228, 230, 231, 261, 264, 265, 271, 272, 284], "k_0": [18, 21, 25, 128, 147, 149, 150, 284], "k_p": [18, 24, 25, 128, 135, 142, 157, 162, 284], "appendix": [18, 126, 259, 262], "lock": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 126, 127, 128, 129, 130, 131, 132, 133, 134, 147, 148, 149, 150, 151, 152, 153, 154, 287], "see": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 42, 45, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 90, 91, 92, 93, 95, 96, 98, 106, 109, 126, 127, 128, 129, 130, 131, 132, 133, 134, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 163, 166, 168, 169, 178, 186, 201, 202, 204, 205, 210, 220, 223, 238, 239, 240, 241, 244, 245, 251, 255, 259, 260, 262, 287], "noise_bandwidth": [18, 25, 126, 128, 132], "damping_factor": [18, 25, 126, 128, 129], "object": [18, 25, 51, 52, 110, 111, 143, 144, 155, 156, 163, 164, 169, 170, 222, 238, 239, 240, 241, 244, 245, 251, 255, 270, 284, 288], "phase_lock_tim": [18, 32], "frequency_lock_tim": [18, 26], "freq_offset": [18, 26, 28], "lock_tim": [18, 28, 284], "phase_error_vari": [18, 31], "cn0": [18, 31], "varianc": [18, 31, 46, 48, 50, 175, 177, 191], "steadi": [18, 31], "state": [18, 31, 35, 36, 42, 44, 58, 59, 63, 69, 70, 72, 74, 78, 79, 81, 92, 93, 95, 97, 99, 100, 106, 108, 145, 178, 186, 288], "sample_r": [18, 25, 33, 35, 64, 65, 68, 87, 99, 100, 143, 155, 163, 169, 178, 210, 218, 228, 237, 238, 239, 241, 243, 244, 245, 246, 247, 250, 253, 266, 267, 269, 280, 284, 286], "bnt": [18, 20, 284], "bandwidth": [18, 19, 20, 25, 29, 45, 126, 128, 132, 192, 201, 202, 220, 259, 262, 284, 286, 288], "b_n": [18, 19, 20, 25, 26, 28, 31, 32, 126, 128, 132], "bn": [18, 19], "hz": [18, 19, 25, 26, 28, 31, 64, 65, 68, 87, 126, 128, 132, 192, 200, 210, 218, 219, 220, 227, 228, 231, 266, 267, 271, 280], "zeta": [18, 25, 34, 126, 128, 129], "damp": [18, 25, 34, 126, 128, 129, 284], "k0": [18, 21, 25, 128, 147, 284], "kp": [18, 24, 25, 128, 284], "k1": [18, 22, 126, 284], "k2": [18, 23, 126, 284], "repres": [18, 27, 194, 195], "omega_n": [18, 30, 284], "natur": [18, 30], "radian": [18, 29, 30, 31, 135, 138, 140, 141, 147, 148, 149, 151, 152, 153, 157, 158, 160, 161, 169, 284], "omega_3db": [18, 29], "omega_": [18, 29], "textrm": [18, 29], "where": [25, 36, 59, 100, 111, 126, 128, 132, 164, 170, 173, 191, 192, 209, 211, 212, 214, 220, 264, 272, 281, 282, 287], "period": [25, 126, 128, 132, 143, 272], "second": [25, 26, 28, 32, 51, 126, 128, 132, 220], "critic": [25, 34, 126, 128, 129, 284], "underdamp": [25, 34, 126, 128, 129], "overdamp": [25, 34, 126, 128, 129], "ted": [25, 128], "t_": [26, 28, 32, 75, 220, 286], "fl": [26, 28], "delta": [26, 28, 35, 44, 58, 66, 81, 89, 97, 99, 108, 145, 178, 203, 240, 281, 282], "take": [26, 28, 32, 276], "onto": [26, 28, 32], "39": 26, "pl": [28, 32, 277], "38": 28, "34": [29, 253], "33": 30, "sigma_": [31, 46, 47, 49], "theta_": [31, 135, 138, 157, 158], "carrier": [31, 163], "43": 31, "40": [32, 44, 99, 178, 210], "less": [34, 189], "than": [34, 143, 144, 156, 164, 168, 170, 189, 223, 226, 236, 252, 260], "greater": [34, 259, 262], "fir": [35, 36, 37, 38, 40, 42, 43, 44, 45, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 99, 100, 101, 102, 104, 106, 107, 108, 109, 145, 146, 178, 179, 180, 181, 184, 186, 187, 201, 202, 203, 204, 205, 206, 237, 238, 239, 240, 241, 244, 245, 251, 255, 256, 283, 287, 288], "equival": [35, 99, 178, 191, 192, 201, 202, 203, 204, 205, 215, 222, 265, 270, 278, 280], "first": [35, 38, 51, 99, 101, 102, 143, 153, 155, 178, 180, 181, 229, 253, 268, 277, 279], "prototyp": [35, 40, 43, 99, 104, 107, 178, 184, 187], "feedforward": [35, 37, 40, 43, 44, 58, 60, 73, 81, 84, 86, 97, 99, 101, 104, 107, 108, 145, 178, 180, 184, 187, 238, 239, 240, 241, 244, 245, 251, 255, 281, 282], "coeffici": [35, 37, 58, 60, 81, 84, 99, 101, 110, 121, 125, 143, 155, 163, 169, 178, 180, 238, 239, 240, 241, 244, 245, 251, 255, 281, 282], "discard": [35, 178], "each": [35, 36, 59, 99, 100, 178, 217, 225, 243, 247, 250], "instead": [35, 99, 178, 236], "ar": [35, 36, 37, 40, 43, 45, 46, 51, 53, 54, 55, 57, 59, 60, 76, 82, 84, 98, 99, 100, 101, 104, 107, 109, 110, 111, 121, 125, 143, 144, 146, 148, 155, 156, 163, 164, 169, 170, 173, 178, 180, 184, 187, 192, 194, 195, 197, 198, 203, 219, 222, 223, 229, 236, 237, 238, 239, 241, 243, 244, 245, 246, 247, 250, 252, 253, 254, 256, 260, 266, 267, 270, 276, 278, 280, 282, 284, 286, 287, 289], "commut": [35, 99, 178], "parallel": [35, 99, 178], "sum": [35, 46, 58, 81, 173, 286], "prevent": [35, 99, 155, 169, 178], "need": [35, 99, 178, 276, 277, 279], "done": [35, 276], "case": [35, 99, 169, 173, 178], "3x": [35, 99], "v": [35, 147, 200, 227, 276], "7": [35, 40, 43, 44, 99, 100, 104, 107, 135, 143, 155, 157, 163, 168, 169, 174, 178, 184, 187, 189, 196, 203, 204, 206, 209, 217, 221, 222, 225, 256, 270, 272, 276, 277, 278, 282, 284], "summat": 35, "bottom": [35, 99, 178], "top": [35, 99, 178], "relat": [35, 40, 43, 99, 104, 107, 178, 184, 187, 192, 220], "co": [35, 99, 100, 178, 228], "64": [35, 203, 225, 282], "280": 35, "out": [35, 40, 43, 51, 64, 87, 99, 100, 104, 107, 135, 143, 155, 163, 166, 168, 169, 171, 172, 178, 184, 187, 193, 194, 196, 197, 200, 207, 208, 209, 211, 212, 214, 215, 217, 219, 221, 222, 227, 229, 231, 234, 254, 256, 257, 258, 264, 265, 268, 270, 271], "marker": [35, 99, 100, 147, 178, 236, 252, 253, 280, 281, 282, 285], "label": [35, 44, 47, 49, 97, 99, 100, 108, 135, 144, 145, 156, 157, 164, 165, 167, 170, 174, 176, 178, 189, 191, 201, 202, 203, 204, 205, 217, 218, 220, 222, 226, 235, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 249, 250, 253, 259, 262, 263, 270, 280, 283, 284, 285, 286], "o": [35, 99, 100, 178, 280], "true": [35, 47, 48, 49, 50, 64, 87, 99, 100, 135, 140, 141, 143, 155, 157, 160, 161, 163, 165, 167, 169, 174, 175, 176, 177, 178, 189, 190, 192, 194, 195, 197, 198, 209, 213, 219, 222, 228, 232, 233, 236, 245, 247, 252, 253, 254, 261, 270, 283, 284, 285], "y1": [35, 99, 100, 178, 226], "70": [35, 225], "y2": [35, 99, 100, 178, 226], "140": [35, 210], "y3": [35, 99, 100, 178], "210": 35, "y4": [35, 99, 178], "y5": [35, 99, 178], "flush": [35, 36, 44, 58, 59, 63, 99, 100, 145, 178, 288], "y_1": [35, 99, 178, 226], "y_2": [35, 99, 178, 226], "y_3": [35, 99, 178], "y_4": [35, 99, 178], "y_5": [35, 99, 178], "full": [35, 36, 59, 99, 100, 178, 179, 193, 222, 270], "__len__": [35, 44, 58, 61, 99, 145, 178], "pass": [35, 44, 58, 63, 99, 145, 178, 191, 194, 197, 209, 217, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 274, 276, 278, 281, 282, 288], "through": [35, 44, 58, 63, 99, 145, 155, 169, 178, 194, 197, 209, 274, 281, 282, 284], "consist": [35, 44, 53, 54, 55, 56, 57, 58, 70, 99, 145, 178], "previou": [35, 37, 44, 45, 58, 60, 70, 76, 78, 82, 84, 98, 99, 101, 108, 109, 145, 146, 178, 180, 207, 208], "u": [35, 44, 58, 71, 81, 94, 97, 99, 108, 145, 178, 189, 251, 272, 273, 281, 282], "frequency_respons": [35, 44, 58, 64, 81, 87, 97, 99, 108, 145, 178, 288], "numpi": [35, 44, 58, 64, 81, 87, 97, 99, 108, 145, 148, 178, 191, 194, 197, 209, 268, 277, 280, 281, 282, 283, 284, 285, 286, 287], "float64": [35, 44, 58, 64, 81, 87, 97, 99, 108, 145, 147, 148, 178, 193, 222, 270, 273], "complex128": [35, 44, 58, 64, 81, 87, 97, 99, 108, 145, 147, 148, 178], "custom": [35, 39, 99, 103, 111, 156, 164, 170, 178, 183, 201, 202, 204, 205, 288], "multir": [35, 36, 37, 39, 99, 100, 101, 103, 178, 180, 183, 206, 256, 288], "polyphase_tap": [35, 40, 43, 99, 100, 104, 107, 178, 184, 187], "index": [35, 38, 74, 78, 99, 102, 110, 143, 155, 163, 169, 178, 181, 222, 237, 246, 247, 252, 270, 273, 276], "correspond": [35, 38, 51, 56, 99, 102, 178, 181, 247], "l": [36, 59, 83, 100, 109, 145, 146, 203], "convolut": [36, 59, 99, 100], "ha": [36, 59, 97, 99, 100, 143, 155, 163, 191, 201, 202, 203, 204, 205, 210, 219, 220, 231, 269, 272, 284, 285, 286], "align": [36, 59, 100, 101, 155, 180, 222, 270, 280], "howev": [36, 53, 54, 55, 57, 59, 100, 126, 195, 198, 222, 270, 280], "produc": [36, 59, 99, 100, 178, 220, 286], "final": [36, 59, 100], "dictat": [36, 59, 100], "argument": [36, 37, 59, 100, 101, 180, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 277, 281, 282], "specif": [37, 56, 64, 87, 101, 180, 279, 286], "npt": [37, 64, 87, 101, 111, 144, 156, 164, 170, 180, 201, 202, 204, 205, 238, 239, 240, 241, 244, 245, 251, 255], "befor": [40, 43, 104, 107, 184, 187, 289], "decomposit": [40, 43, 104, 107, 184, 187, 288], "cdot": [44, 108, 135, 157, 201, 202, 204, 205, 228], "win": 44, "quad": [44, 145], "le": [44, 145, 189, 203, 228, 231, 259, 262], "truncat": 44, "puls": [44, 97, 110, 111, 115, 117, 120, 121, 125, 143, 155, 156, 163, 164, 169, 170, 220, 223, 237, 253, 259, 260, 262, 287, 288], "same": [44, 59, 100, 135, 157, 253, 281], "deriv": 44, "across": [44, 189, 216, 224], "fir_2": 44, "fir_6": 44, "fir_10": 44, "fir_20": 44, "20": [44, 45, 47, 49, 99, 100, 143, 147, 155, 163, 169, 174, 178, 189, 192, 194, 197, 200, 209, 217, 218, 225, 226, 227, 233, 256, 261, 269, 283, 285, 288], "fir_40": 44, "fir_80": 44, "80": [44, 206, 272], "y_axi": [44, 241, 243, 288], "linspac": [44, 47, 64, 87, 97, 165, 167, 174, 192, 195, 198, 219, 235, 249, 282, 283, 284, 285], "ab": [44, 97, 193, 222, 270, 272, 286], "color": [44, 97, 237, 246, 247, 253, 283, 286], "linestyl": [44, 97, 135, 143, 155, 157, 163, 169, 236, 247, 252, 254, 272, 280, 284, 285, 286], "theori": [44, 46, 47, 48, 50, 97, 173, 174, 175, 177], "legend": [44, 97, 135, 157, 189, 201, 202, 203, 204, 205, 226, 280, 283, 284, 286], "d": [44, 58, 62, 145, 216, 219, 224, 231, 276, 278, 287], "lfloor": [44, 58, 62, 145], "rfloor": [44, 58, 62, 145], "blackman": [45, 201, 202, 204, 205], "increas": [45, 219, 231, 282], "scipi": [45, 58, 81, 201, 202, 204, 205, 243, 250, 286, 287], "definit": [45, 238, 239, 240, 241, 244, 245, 251, 255], "get_window": 45, "detail": 45, "If": [45, 49, 78, 111, 148, 156, 164, 170, 176, 178, 190, 191, 192, 209, 213, 229, 232, 233, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 250, 251, 252, 253, 261, 266, 268, 287], "null": [46, 173, 286], "altern": [46, 173, 282], "hypothes": [46, 173], "follow": [46, 51, 110, 143, 155, 163, 169, 226, 236, 247, 250, 252, 254, 256, 284], "assum": [46, 173, 191, 209, 229, 253, 268], "process": [46, 47, 48, 50, 108, 145, 173, 174, 175, 177, 206, 256, 282, 284, 287], "w": [46, 173, 191, 280, 281, 282, 283, 284, 285, 286], "sigma": [46, 47, 48, 49, 50, 173, 174, 175, 176, 177, 191, 192], "_0": [46, 173], "_1": [46, 173], "test": [46, 173, 277, 278, 287], "statist": [46, 47, 48, 50, 173, 174, 175, 177], "limits_": [46, 58, 81, 173], "left": [46, 47, 48, 81, 155, 157, 163, 169, 173, 174, 175, 177, 189, 190, 191, 192, 213, 216, 217, 219, 220, 226, 228, 231, 232, 233, 261, 272], "right": [46, 47, 48, 81, 155, 157, 163, 169, 173, 174, 175, 177, 189, 190, 191, 192, 213, 216, 217, 219, 220, 226, 228, 231, 232, 233, 261, 272], "gamma": [46, 48, 50, 173, 175, 177, 189], "sim": [46, 173, 191, 277], "chi_": [46, 47, 48], "2n": [46, 47, 48], "text": [46, 169, 173, 189, 190, 191, 192, 195, 198, 199, 200, 206, 217, 218, 219, 227, 230, 232, 233, 261, 263], "under": [46, 173], "detect": [46, 47, 48, 49, 50, 135, 138, 140, 141, 157, 158, 160, 161, 173, 174, 175, 176, 177, 189, 242, 248, 288], "threshold": [46, 48, 50, 173, 175, 177], "q_": [46, 47, 48, 50], "chi_n": [46, 47, 48, 50], "steven": [46, 47, 48, 50, 173, 174, 175, 177], "kai": [46, 47, 48, 50, 173, 174, 175, 177], "fundament": [46, 47, 48, 50, 173, 174, 175, 177], "static": [46, 47, 48, 49, 50, 173, 174, 175, 176, 177, 277], "n_nc": [46, 47, 48, 49, 50, 189], "number": [47, 48, 49, 50, 51, 53, 54, 57, 64, 65, 66, 68, 71, 87, 89, 94, 110, 111, 113, 123, 140, 141, 143, 144, 154, 155, 156, 160, 161, 163, 164, 169, 170, 189, 191, 194, 197, 209, 211, 212, 214, 220, 223, 225, 229, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 250, 251, 256, 259, 260, 262, 264, 268], "For": [47, 48, 50, 174, 175, 177, 191, 210, 219, 269, 276, 281], "101": [47, 49, 174, 176, 201, 202, 204, 205], "25": [47, 194, 197, 203, 209, 234, 237, 257, 258, 280, 283, 284, 286], "1e": [47, 174, 218, 285], "sigma2": [48, 50, 175, 177], "logspac": [49, 64, 87, 176, 189], "theoret": [49, 165, 167, 235, 249, 285, 288], "variou": [49, 277, 286], "1_000": [49, 108, 145, 191, 218, 219, 226, 263, 283], "000": [49, 218], "5_000": 49, "measur": [51, 53, 190, 191, 199, 200, 213, 216, 217, 224, 227, 230, 232, 233, 261, 284, 287, 288], "new": [51, 52, 74, 76, 108, 110, 111, 143, 144, 155, 156, 163, 164, 169, 170, 263], "accumul": [51, 97, 147, 148, 149, 151, 153, 284, 288], "from": [51, 65, 68, 81, 82, 97, 101, 108, 110, 124, 143, 155, 163, 168, 169, 180, 200, 211, 212, 214, 215, 227, 234, 243, 250, 257, 258, 264, 265, 276, 281, 282, 284, 287], "contain": [51, 191, 225], "add": [51, 53, 56, 143, 155, 163, 169, 191, 218, 223, 247, 260, 263, 274, 285, 289], "total": [51, 220, 223, 259, 260, 262, 286], "count": [51, 54, 217], "error_r": [51, 55, 56, 285], "everi": [51, 280], "can": [51, 53, 54, 55, 57, 126, 143, 191, 217, 220, 222, 229, 237, 243, 250, 270, 278, 281, 282, 285, 287, 289], "obtain": 51, "tabul": [51, 52], "all": [51, 56, 148, 217, 237, 246, 247, 277, 279, 287], "ascend": [51, 56], "other": [53, 54, 55, 57, 280, 289], "quantiti": [53, 54, 55, 56, 57], "user": [53, 54, 55, 57, 281, 282], "caution": [53, 54, 55, 57], "instanc": [53, 54, 55, 57, 143], "transmit": [53, 110, 125, 135, 138, 143, 155, 157, 158, 163, 169, 217, 237], "whatev": 56, "wa": [56, 192], "provid": [56, 110, 112, 122, 143, 155, 163, 165, 167, 169, 247, 277, 287], "wrapper": [58, 81], "convolv": 58, "It": [58, 81, 99, 111, 126, 135, 156, 164, 170, 191, 237], "support": [58, 81, 288], "one": [58, 81, 144, 155, 156, 164, 168, 170, 220, 225, 237, 238, 239, 241, 243, 244, 245, 250, 266, 281, 282, 283, 286], "sum_": [58, 81, 175, 177, 190, 191, 192, 213, 216, 217, 224, 261], "valid": [59, 219, 237, 246, 247, 272], "remain": [63, 210, 229], "1024": [64, 65, 68, 87, 238, 239, 241, 244, 245, 283, 286], "whole": [64, 87, 286], "decad": [64, 87, 238, 239, 241, 244, 245, 281, 284], "point": [64, 87, 140, 141, 160, 161, 243, 250], "endpoint": [64, 87, 282], "includ": [64, 87, 277, 278, 279, 287], "integ": [64, 87, 229], "maximum": [64, 87, 110, 114, 115, 135, 143, 155, 163, 169, 220, 223, 236, 252, 259, 260, 262, 275, 284, 288], "max_f": [64, 87], "log10": [64, 87], "evenli": [64, 87], "00000000e": [64, 87, 168, 169, 282], "00": [64, 87, 168, 169, 282], "76562500e": [64, 87], "04": [64, 87, 225, 282], "95312500e": [64, 87], "03": [64, 87, 225, 282], "97070312e": [64, 87], "98046875e": [64, 87], "99023438e": [64, 87], "95337172": 64, "30202676j": 64, "8178049": 64, "5759632j": 64, "6058636": 64, "79630028j": 64, "rad": [64, 87], "0000000000000002": 64, "0j": [64, 87, 144, 156, 164, 170], "sever": [64, 87], "200": [64, 87, 210, 280, 285], "300": [64, 87, 266, 267], "400": [64, 87, 210, 280], "00391660e": 64, "11022302e": 64, "16j": [64, 168, 169], "53081763e": 64, "79453110e": 64, "17j": 64, "62720131e": 64, "99104274e": 64, "83622458e": 64, "17093835e": 64, "resampl": [74, 75, 76, 77, 78, 79, 80, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 206, 256, 287, 288], "http": [74, 189, 199, 201, 202, 203, 204, 205, 206, 220, 222, 230, 270, 272, 276, 277, 278], "wirelesspi": 74, "com": [74, 189, 201, 202, 203, 204, 205, 206, 220, 222, 270, 277, 278], "structur": 74, "should": [78, 135, 143, 237, 278], "equal": [78, 143], "three": [78, 280, 286], "lfilter": 81, "b_i": [81, 84, 86, 97, 108, 238, 239, 240, 241, 244, 245, 251, 255, 282], "feedback": [81, 84, 85, 97, 108, 238, 239, 240, 241, 244, 245, 251, 255, 282], "a_j": [81, 84, 85, 97, 108, 238, 239, 240, 241, 244, 245, 251, 255, 282], "These": [81, 155, 163, 169, 254, 278, 284], "differ": [81, 108, 144, 156, 164, 168, 170, 201, 202, 203, 204, 205, 222, 253, 270, 272, 286], "a_0": 81, "classmethod": [81, 82, 97, 108], "zerospol": [81, 82, 87, 97, 108, 238, 239, 240, 241, 244, 245, 251, 255, 282], "self": [81, 82, 97, 108], "b_tap": [81, 86, 97, 108, 282], "a_tap": [81, 85, 97, 108, 282], "conj": [87, 238, 239, 240, 241, 244, 245, 251, 255, 282, 284], "4722987": 87, "47271105": 87, "0041658j": 87, "47394825": 87, "00830241j": 87, "47601067": 87, "01238051j": 87, "472298696877605": 87, "36961426": 87, "9678537j": 87, "57338213": 87, "77694738j": 87, "52496713": 87, "3885743j": 87, "51520024": 87, "1706839j": 87, "accordingli": 97, "dc": [97, 203], "backward": [97, 98, 288, 289], "trapezoid": [97, 98, 288], "forward": [97, 98, 147, 154, 288], "iir_back": 97, "iir_trap": 97, "iir_forw": 97, "y_back": 97, "y_trap": 97, "y_forw": 97, "height": 98, "insert": [99, 178], "hold": [99, 101, 178, 180, 229, 288], "30": [99, 108, 145, 178, 210, 238, 240, 251, 266, 267, 282, 288], "recommend": 99, "wai": [99, 278], "11": [99, 143, 155, 163, 169, 196, 206, 221, 222, 256, 270, 276], "zoh": [99, 101, 103, 178, 180, 183], "12": [99, 143, 155, 163, 169, 175, 177, 189, 196, 206, 221, 256, 281, 285, 288], "13": [99, 143, 155, 163, 169, 173, 174, 175, 177, 193, 196, 221, 253, 256, 288], "matlab": [99, 101, 103, 178, 180, 183, 287], "iter": 100, "shape": [100, 110, 111, 115, 117, 120, 121, 125, 143, 155, 156, 163, 164, 169, 170, 220, 223, 237, 253, 259, 260, 262, 282, 287, 288], "concaten": [100, 282], "linearli": [101, 180], "2r": 101, "ramp": [101, 126, 180], "advanc": [101, 180], "ones": [101, 180, 201, 202, 204, 205, 284], "approxim": [108, 109, 189, 288], "rememb": 108, "scale": [108, 135, 238, 239, 241, 243, 244, 245, 250, 281, 282], "\u03b1": 108, "compar": [108, 135, 145, 157, 165, 167, 201, 202, 203, 204, 205, 286], "35": [108, 145], "y_fir": [108, 145], "y_iir": [108, 145], "modul": [110, 111, 117, 118, 120, 135, 140, 141, 143, 147, 155, 156, 157, 160, 161, 163, 164, 165, 167, 169, 170, 211, 212, 214, 217, 235, 237, 246, 249, 252, 253, 264, 276, 279, 285, 287, 288], "nomenclatur": [110, 143, 155, 163, 169], "variabl": [110, 143, 147, 148, 155, 163, 169, 225, 284], "name": [110, 143, 155, 163, 169], "decis": [110, 114, 115, 135, 138, 141, 143, 155, 157, 158, 161, 163, 169, 237, 284], "tild": [110, 114, 115, 135, 138, 143, 155, 157, 158, 163, 169], "map_symbol": [110, 116, 143, 155, 163, 169, 191, 217, 218, 226, 236, 237, 263, 283, 284, 285, 288], "decide_symbol": [110, 114, 143, 155, 163, 169, 284, 285, 288], "a_tild": [110, 114, 143, 155, 163, 169, 284, 285], "likelihood": [110, 114, 115, 135, 143, 155, 163, 169, 275, 284, 288], "mle": [110, 114, 143, 155, 163, 169], "match": [110, 111, 115, 121, 143, 155, 156, 163, 164, 169, 170, 288], "abstract": [110, 112, 122], "log_2": [110, 113, 143, 155, 163, 169, 192, 211, 212, 214, 264], "phase_offset": [110, 111, 119, 143, 144, 155, 156, 163, 164, 166, 169, 170, 191, 217, 218, 226, 236, 237, 252, 253, 263, 283, 284, 285], "degre": [110, 111, 119, 143, 144, 155, 156, 163, 164, 166, 169, 170, 218, 226, 228, 231, 284], "dot": [110, 111, 124, 143, 155, 163, 168, 169, 252], "mapsto": [110, 111, 124, 143, 155, 163, 168, 169, 252], "mathbb": [110, 111, 124, 143, 155, 163, 168, 169, 192, 252, 272], "sym": [110, 111, 123, 143, 144, 155, 156, 163, 164, 169, 170, 212, 215, 220, 264, 265, 286], "pulse_shap": [110, 111, 115, 117, 120, 143, 155, 156, 163, 164, 169, 170, 253, 283, 285], "tx_filter": [110, 125, 143, 155, 163, 169], "rx_filter": [110, 121, 143, 155, 163, 169], "rect": [111, 156, 164, 170, 286], "whose": [111, 144, 156, 163, 164, 170], "import": [111, 135, 156, 164, 170, 278, 280, 281, 282, 283, 284, 285, 286, 287], "string": [111, 156, 164, 170, 225, 243, 250, 288], "roll": [111, 156, 164, 170, 272, 286], "off": [111, 156, 164, 170], "psd": [112, 122, 165, 167, 192, 211, 212, 214, 215, 235, 249, 264, 265], "p_b": 112, "x_tild": 115, "s_hat": [115, 284, 285], "p_e": 122, "loopfilt": [126, 127, 128, 129, 130, 131, 132, 133, 134, 275, 284, 288], "ppi": [126, 128, 275], "track": 126, "constant": [126, 143, 147, 149, 151, 243, 250, 282, 284], "cannot": 126, "chirp": 126, "proportional_gain": [126, 133], "integral_gain": [126, 131], "underli": [126, 130], "mlped": [135, 136, 137, 138, 139, 140, 141, 142, 275, 284, 288], "ml": [135, 139, 275, 284], "aid": [135, 140, 157, 160], "known": [135, 138, 157, 158, 191, 222, 270], "da": [135, 157], "im": 135, "re": [135, 173], "direct": [135, 141, 157, 161, 288], "qpsk": [135, 155, 157, 163, 165, 166, 167, 169, 191, 217, 218, 235, 236, 237, 249, 252, 253, 263, 284, 287, 288], "a_rx": 135, "a_ref": 135, "da_error": [135, 157], "data_aided_error": [135, 140, 157, 160], "dd_error": [135, 157], "decision_directed_error": [135, 141, 157, 161], "grid": [135, 157, 189, 192, 195, 198, 219, 254, 280, 283, 284, 286], "xlabel": [135, 157, 189, 192, 193, 195, 198, 217, 219, 222, 270, 272, 280, 283, 284, 286], "ylabel": [135, 157, 189, 192, 193, 195, 198, 217, 219, 222, 270, 272, 280, 283, 284, 286], "comparison": [135, 157, 277], "observ": [135, 157, 203, 231, 237], "slope": [135, 157], "a_": [135, 136, 137, 139, 206], "rx": [135, 136, 139], "both": [135, 157, 189, 192, 236, 252, 253, 280, 284], "veri": [135, 287], "becaus": [135, 222, 270], "15": [135, 143, 176, 196, 221, 222, 256, 269, 270], "unambigu": [135, 157], "rang": [135, 157, 236, 284, 285], "a_receiv": [135, 136, 139], "a_refer": [135, 137, 139], "simul": [135, 140, 141, 157, 160, 161, 285, 287], "scheme": [135, 140, 141, 143, 155, 157, 160, 161, 163, 169, 288], "either": [138, 158, 217], "modem": [140, 141, 143, 155, 160, 161, 163, 169], "n_point": [140, 141, 160, 161], "similar": [143, 155, 169, 286], "One": [143, 155, 169, 286], "distinct": [143, 155, 169], "result": [143, 155, 169, 190, 213, 219, 231, 232, 233, 259, 261, 262, 285], "envelop": [143, 281, 282], "which": [143, 155, 169, 189, 190, 191, 192, 213, 216, 218, 224, 226, 230, 231, 232, 236, 239, 241, 244, 245, 252, 263, 280, 284, 286], "lower": [143, 155, 169, 259, 262], "consid": [143, 225], "cpfsk": 143, "separ": 143, "45": [143, 144, 155, 156, 163, 166, 191, 217, 218, 226, 228, 236, 237, 252, 253, 263, 283, 284, 285], "symbol_label": [143, 144, 155, 156, 163, 164, 168, 169, 170, 285], "randint": [143, 155, 163, 169, 191, 194, 197, 209, 217, 218, 226, 236, 237, 246, 253, 263, 283, 284, 285], "uint8": [143, 155, 163, 169, 229, 268], "complex_symbol": [143, 155, 163, 169], "70710678": [143, 155, 163], "70710678j": [143, 155, 163], "tx_sampl": [143, 155, 163, 169], "50": [143, 155, 163, 169, 200, 227, 234, 252, 253, 266, 267, 280, 283], "like": [143, 278, 287, 288], "channel": [143, 155, 165, 167, 192, 194, 195, 197, 198, 209, 235, 249, 287, 288], "subplot": [143, 155, 226, 284, 285], "imag": [143, 155, 280], "trajectori": 143, "although": 143, "boundari": 143, "lead": [143, 226, 285], "spectral": [143, 210, 243, 283, 286], "effici": [143, 210, 231, 269], "gmsk": 143, "rx_sampl": [143, 155, 163, 169], "last": [143, 155, 229, 276], "rx_symbol": [143, 155, 163, 169], "rx_complex_symbol": [143, 155, 163, 169], "_": [143, 155, 163, 169, 189, 217], "14": [143, 155, 163, 169, 174, 196, 221, 256, 288], "array_equ": [143, 155, 163, 169, 222, 270], "bin": [144, 156, 164, 168, 170, 217, 236, 252, 285], "absolut": [144, 147, 149, 152, 156, 170, 192], "consecut": [144, 156, 164, 170], "adjac": [144, 156, 164, 168, 170, 285, 286], "mai": [144, 156, 164, 168, 170, 217, 236, 247, 250, 252, 254, 282], "more": [144, 156, 164, 168, 170, 288], "start": [144, 156, 164, 170, 276], "go": [144, 156, 164, 170], "counter": [144, 156, 164, 170], "clockwis": [144, 156, 164, 170], "around": [144, 156, 164, 170], "circl": [144, 156, 164, 170, 282], "increment": [147, 148, 149, 151, 284], "Then": 147, "fsk": 147, "60": [147, 201, 202, 204, 205, 286], "repeat": 147, "cp": 147, "57": 147, "bpsk": [147, 165, 167, 235, 249, 283], "vari": 148, "format": [148, 193, 222, 270, 288], "option": [148, 238, 239, 241, 243, 244, 245, 250, 288], "intern": 153, "set": [153, 191, 219, 222, 236, 243, 247, 250, 252, 254, 270, 277, 279, 282], "convent": [155, 169], "transit": [155, 169, 197, 198, 209, 270, 274], "independ": 155, "apart": 155, "taken": [155, 163, 169], "jq": 155, "begin": [155, 169, 173], "end": [155, 169, 173, 266, 277], "heurist": [157, 275, 284, 288], "dd": [157, 284, 288], "encod": [163, 165, 167, 207, 208, 287], "inform": [163, 211, 212, 214, 222, 264, 270], "ge": [164, 170, 189], "were": [165, 167], "simon": [165, 167], "alouini": [165, 167], "fade": [165, 167], "chapter": [165, 167, 206, 256], "john": [165, 167], "proaki": [165, 167], "optimum": [165, 167], "psk8": [165, 167, 235, 249, 285], "psk16": [165, 167, 235, 249, 285], "de": [165, 167, 284, 288], "se": [167, 249], "00j": [168, 169], "07106781e": [168, 169], "01j": [168, 169], "12323400e": [168, 169], "17": [168, 169, 217, 231, 256, 276], "83697020e": 168, "22464680e": [168, 169], "annot": [168, 252, 288], "odd": [169, 203, 266], "rotat": [169, 228, 284], "rel": [169, 272, 286], "even": [169, 201, 202, 203, 204, 205, 220, 259, 262], "2m": 169, "displaystyl": 169, "pi4_qpsk": 169, "exceed": [171, 172], "15865525393145707": [171, 172], "158655": [171, 172], "0000010494310452": [171, 172], "perfect": 173, "knowledg": 173, "cn": [173, 191], "mathrm": 173, "sqrt": [173, 174, 175, 177, 189, 216, 217, 220, 261, 272, 283, 284, 286], "____": 178, "down": [178, 180, 182, 206, 256], "2p": 180, "ln": [189, 220], "62": [189, 225], "log_": [189, 190, 200, 213, 219, 230, 232, 233, 261], "54": [189, 225], "44": 189, "12ab": 189, "7b": 189, "claim": 189, "leq": 189, "8096": 189, "radarsp": 189, "weebli": 189, "upload": 189, "21471216": 189, "albersheim_alternative_form": 189, "pdf": [189, 220], "bpb": 189, "w2": 189, "wpmucdn": 189, "site": [189, 276], "gatech": 189, "edu": 189, "dist": [189, 277], "462": 189, "file": [189, 277, 279], "2016": 189, "noncoher": 189, "www": [189, 201, 202, 203, 204, 205, 206, 220, 222, 270], "mathwork": [189, 201, 202, 203, 204, 205, 206, 220, 222, 270], "help": [189, 201, 202, 203, 204, 205, 206, 220, 222, 270], "html": [189, 201, 202, 203, 204, 205, 206, 220, 222, 270, 276], "semilogx": [189, 248], "nuse": 189, "axi": [190, 213, 216, 224, 230, 232, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 250, 252, 253, 280, 288], "avg": [190, 191, 230], "ax": [190, 213, 216, 224, 230, 232, 254, 288], "along": [190, 213, 216, 224, 230, 232, 288], "entir": [190, 213, 216, 224, 230, 232], "decibel": [190, 200, 213, 227, 232, 233, 261, 287, 288], "seed": [191, 194, 197, 209, 288], "ad": [191, 247, 277, 287, 288], "explicitli": 191, "must": [191, 201, 202, 204, 205, 220, 222, 228, 247, 259, 262, 270, 272], "default_rng": [191, 194, 197, 209], "noisi": 191, "sin": [191, 266], "zorder": [191, 218, 263], "infti": [191, 192], "nand": 191, "capac": [192, 195, 198, 287, 288], "2d": [192, 247], "x_i": [192, 194, 195, 197, 198, 209, 226], "y_i": [192, 194, 195, 197, 198, 209], "monoton": 192, "limit": [192, 236, 252, 285], "At": 192, "occur": 192, "view": [192, 277, 287], "59": 192, "shannon": 192, "semilogi": [192, 235, 248, 249], "barker": [193, 273, 287, 288], "int64": [193, 222, 270, 273], "bipolar": [193, 222, 270, 288], "sequenc": [193, 194, 197, 209, 222, 270, 272, 274, 287, 288], "seq": [193, 222, 270], "have": [193, 203, 210, 222, 229, 253, 268, 269, 270], "ideal": [193, 285], "minim": 193, "autocorrel": [193, 222, 270, 272], "sidelob": [193, 201, 202, 204, 205, 222, 259, 262, 270, 272], "corr": [193, 272], "lag": [193, 222, 270, 272], "roughli": [194, 197, 280], "eras": 194, "flip": 197, "h_b": 198, "cf": 199, "v_": [199, 200, 227, 233, 261], "en": [199, 230, 272], "wikipedia": [199, 230, 272], "org": [199, 230, 272], "wiki": [199, 230, 272], "type": [200, 217, 227, 229, 243, 248, 250, 268, 288], "voltag": [200, 227, 233, 261, 287], "x_": [200, 227], "mhz": [200, 227], "77": [200, 225, 227], "50e6": 200, "76": [200, 225], "98970004336019": 200, "mw": [200, 227], "dbm": [200, 227], "dbv": [200, 227], "020599913279624": 200, "center_freq": [201, 202], "hann": [201, 202, 204, 205, 243, 250], "harri": [201, 202, 204, 205, 206, 256], "chebyshev": [201, 202, 204, 205], "atten": [201, 202, 204, 205], "nyquist": [201, 202, 204, 205, 210, 237, 269, 286], "side": [201, 202, 220, 238, 239, 241, 243, 244, 245, 250, 281, 282, 283, 286], "about": [201, 202, 253, 279], "No": [201, 202, 204, 205], "blackmanharri": [201, 202, 204, 205], "chebwin": [201, 202, 204, 205], "dsp": [201, 202, 203, 204, 205, 206, 287], "designbandpassfir": 201, "h_ham": [201, 202, 204, 205], "h_hann": [201, 202, 204, 205], "h_blackman": [201, 202, 204, 205], "h_blackman_harri": [201, 202, 204, 205], "h_chebyshev": [201, 202, 204, 205], "h_kaiser": [201, 202, 204, 205], "larger": [202, 223, 226, 236, 252, 260], "designbandstopfir": 202, "75": [202, 225, 236, 284, 285], "best": 203, "append": [203, 266, 283], "tau": 203, "l_": 203, "designfracdelayfir": 203, "flat": 203, "h_8": [203, 259, 262], "h_16": [203, 259, 262], "h_32": 203, "32": [203, 280], "h_64": 203, "cutoff_freq": [204, 205], "cutoff": [204, 205], "f_c": [204, 205], "designhighpassfir": 204, "designlowpassfir": 205, "half_length": 206, "a_stop": 206, "stopband": [206, 259, 262], "stop": 206, "fred": [206, 256], "system": [206, 215, 222, 256, 265, 270, 277, 279, 284, 287], "designmultiratefir": 206, "oplu": [207, 208, 224], "uncod": 208, "dmc": [209, 274, 287, 288], "memoryless": [209, 274, 287], "pr": 209, "y_j": 209, "alphabet": 209, "ldot": 209, "doe": [210, 269], "anti": [210, 269, 288], "alias": [210, 269, 288], "x1": 210, "x2": 210, "130": 210, "x3": [210, 272], "spectrum": [210, 238, 239, 241, 243, 244, 245, 250, 266, 267, 269], "content": 210, "abov": [210, 269], "fold": 210, "cw": 210, "unalias": 210, "fft": [210, 243, 250, 266, 267, 269], "2048": [210, 266, 267, 269, 283], "xlim": [210, 269, 283, 284, 286], "qam": [211, 212, 214, 264], "249387366082999": [211, 212], "020599913279625": [211, 265], "7506126339170005": [214, 264], "979400086720376": [214, 215], "norm": [217, 220, 223, 259, 260, 262], "noiseless": 217, "sourc": 217, "max": [217, 232, 233], "instantan": 217, "percentil": [217, 250], "976620466073308": 217, "950594507704608": 217, "302373129421593": 217, "95th": 217, "95": 217, "014131321326914": 217, "inst_evm": 217, "hist": 217, "histogram": 217, "frequency_offset": [218, 274, 288], "freq_rat": 218, "cycl": [218, 253], "5e": 218, "deg": [218, 226, 284], "path": [219, 287], "loss": [219, 287], "meter": [219, 231, 271], "transmitt": 219, "far": 219, "field": 219, "neg": [219, 226], "impli": 219, "possibl": [219, 287], "so": [219, 220, 223, 259, 260, 262, 287], "km": 219, "link": [219, 287, 288], "ghz": [219, 231, 271], "1e3": [219, 228, 266], "1e9": [219, 231, 271], "92": 219, "44778322188337": 219, "doubl": [219, 231], "2e3": 219, "98": 219, "468383135163": 219, "2e9": 219, "product": [220, 286], "thought": [220, 289], "smaller": [220, 259, 262, 286], "wider": 220, "how": [220, 223, 237, 246, 247, 253, 259, 260, 262, 270, 279], "gaussdesign": 220, "onlinelibrari": 220, "wilei": 220, "doi": 220, "1002": 220, "9780470041956": 220, "app2": 220, "h_0p1": [220, 259, 262], "h_0p2": 220, "h_0p3": 220, "hadamard": [222, 270, 273, 287, 288], "comm": [222, 270], "hadamardcod": 222, "walsh": [222, 270, 273, 287, 288], "thei": [222, 270, 289], "cross": [222, 270, 272], "seq1": [222, 270], "seq2": [222, 270], "seq3": [222, 270], "quit": [222, 270], "larg": [222, 270, 277], "misalign": [222, 270], "spread": [222, 270], "precis": [222, 270], "xcorr12": [222, 270], "xcorr13": [222, 270], "xcorr23": [222, 270], "uniform": [222, 270], "fact": [222, 270], "high": [222, 270], "acorr1": [222, 270], "acorr2": [222, 270], "acorr3": [222, 270], "reason": [223, 260, 276], "h_half_sin": 223, "displai": [225, 236, 238, 239, 241, 243, 244, 245, 250, 252], "line": [225, 253, 277, 283], "print": [225, 280, 281, 282, 284], "quick": 225, "brown": 225, "fox": 225, "jump": 225, "lazi": 225, "dog": 225, "00000000": 225, "68": 225, "65": 225, "71": 225, "69": 225, "63": 225, "6b": 225, "72": 225, "6f": 225, "6e": 225, "00000010": 225, "66": 225, "78": 225, "6a": 225, "6d": 225, "73": 225, "74": 225, "00000020": 225, "6c": 225, "61": 225, "7a": 225, "79": 225, "67": 225, "he": 225, "02": [225, 282, 284], "00000004": 225, "05": [225, 280, 282, 284], "06": 225, "07": 225, "08": 225, "00000008": 225, "09": 225, "0a": 225, "iq_imbal": [226, 274, 288], "iq": [226, 274, 287], "imbal": [226, 274, 287], "posit": 226, "compon": [226, 266, 267, 269], "g_i": 226, "180": 226, "g_q": 226, "x_q": 226, "horizont": 226, "stretch": 226, "while": [226, 286], "vertic": 226, "northwest": 226, "northeast": 226, "50118723": 227, "36272725": 227, "9952623149688795": 227, "satisfi": 228, "remov": [228, 243, 250, 288], "dtypelik": [229, 268], "most": [229, 268], "signific": [229, 268], "enough": 229, "fill": 229, "smallest": 229, "unsign": 229, "diamet": 231, "55": [231, 253], "eta": 231, "dbi": 231, "arcsin": 231, "83": 231, "dish": 231, "21": [231, 253], "810210290266568": 231, "437435887991374": 231, "23": 231, "sinc": [231, 237, 276, 285], "antenna": [231, 287], "we": [231, 287], "830810203546193": 231, "529544741425365": 231, "keyword": [235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 281, 282], "pyplot": [235, 236, 239, 240, 241, 242, 243, 244, 245, 249, 250, 251, 252, 253, 254, 255, 280, 281, 282, 283, 284, 285, 286], "heatmap": [236, 285], "scatter": 236, "overwritten": [236, 247, 250, 252], "hist2d": 236, "10_000": 236, "imaginari": [237, 247, 253], "interleav": [237, 247], "base": [237, 246, 247, 253, 288], "examin": 237, "intersymbol": 237, "interfer": 237, "isi": 237, "cascad": 237, "why": 237, "often": [237, 280], "practic": 237, "n_time": [238, 282], "n_freq": 238, "x_axi": [238, 239, 241, 243, 244, 245, 250, 281, 282, 283, 284, 288], "n_t": 238, "n_f": 238, "logarithm": [238, 239, 241, 243, 244, 245, 281, 282], "h_srrc": [238, 239, 240, 241, 244, 245, 251, 255, 285], "auto": [239, 241, 244, 245, 288], "select": [239, 241, 244, 245, 277], "x_label": 242, "overlap": [243, 250, 283], "detrend": [243, 250], "median": 243, "segment": [243, 250], "256": [243, 250, 283], "trend": [243, 250], "unwrap": [245, 284], "stride": 247, "colorbar": 247, "1d": 247, "determin": 247, "row": 247, "collect": 247, "linecollect": 247, "linewidth": [247, 272], "solid": [247, 253], "cmap": 247, "rainbow": 247, "loglog": 248, "pcolormesh": 250, "vmin": 250, "10th": 250, "vmax": 250, "100th": 250, "shade": 250, "gouraud": 250, "represent": [252, 288], "markers": 252, "diff": [253, 283], "mutual": 253, "exclus": 253, "dash": 253, "share": 253, "10e3": 253, "uniformli": 253, "style": 254, "revert": 254, "rcdefault": 254, "_rc_param": 254, "rc_param": 254, "autolayout": 254, "max_open_warn": 254, "titleweight": 254, "bold": 254, "arrang": 256, "column": 256, "notion": 256, "demonstr": 256, "matric": 256, "18": [256, 276, 285], "19": [256, 288], "000005": 257, "000000025": 257, "005": [258, 284], "000025": 258, "excess": [259, 262, 286], "narrow": [259, 262], "expens": [259, 262], "higher": [259, 262, 286], "h_0p5": [259, 262], "h_0p9": [259, 262], "affect": [259, 262], "longer": [259, 262, 266], "h_4": [259, 262], "h_rect": [260, 286], "sample_rate_offset": [263, 274, 288], "250": [266, 267, 284], "ksp": [266, 267], "conjug": [266, 267, 282], "500": [266, 267, 284], "now": [266, 267, 280, 288], "150": [266, 267], "asymmetr": 267, "copi": 269, "mani": [270, 277], "walshcod": 270, "299792458": 271, "zadoff_chu": [272, 273, 288], "zadoff": [272, 273, 287, 288], "chu": [272, 273, 287, 288], "prime": 272, "gcd": 272, "ne": 272, "cyclic": 272, "x_u": 272, "c_": 272, "2q": 272, "mod": 272, "e2": 272, "93chu_sequ": 272, "x_3": 272, "139": 272, "tile": 272, "x_5": 272, "x5": 272, "xcorr": 272, "sphinx": 276, "immateri": 276, "theme": 276, "depend": [276, 277, 279], "store": [276, 278, 279], "txt": [276, 277, 278, 279], "some": 276, "below": [276, 281, 282], "version": [276, 278, 287], "aren": 276, "resolut": 276, "minut": 276, "ci": 276, "myst": 276, "parser": 276, "updat": [276, 288], "git": [276, 278], "math": 276, "dollar": 276, "ipykernel": 276, "26": 276, "nb": 276, "pickleshar": 276, "switch": 276, "pip": [276, 277, 278, 279, 287], "python3": [276, 277, 278, 279, 287], "built": 276, "run": 276, "command": [276, 277], "dirhtml": 276, "locat": [276, 279], "home": 276, "page": 276, "directori": [276, 278], "get": 276, "necessari": 276, "webpag": 276, "webserv": 276, "easili": [276, 277, 279, 281, 282], "python": [276, 287], "server": 276, "8080": 276, "access": 276, "web": 276, "browser": 276, "localhost": 276, "librari": [277, 278, 279, 280, 285, 287, 289], "ruff": [277, 278, 288], "lint": [277, 278], "your": [277, 279], "develop": [277, 278, 279], "dev": [277, 279], "pyproject": [277, 279], "toml": [277, 278, 279], "tool": [277, 279, 287], "src": 277, "extend": 277, "ipynb": 277, "exclud": 277, "build": [277, 287], "_version": 277, "py": [277, 279], "120": 277, "doc": 277, "pycodestyl": 277, "pyflak": 277, "pyupgrad": 277, "flake8": 277, "bugbear": 277, "simplifi": 277, "isort": 277, "pylint": [277, 288], "npy": 277, "rule": 277, "ruf": 277, "ignor": 277, "e501": 277, "too": 277, "long": 277, "e713": 277, "e714": 277, "plr2004": 277, "magic": 277, "plr0913": 277, "plr5501": 277, "collaps": 277, "els": [277, 283], "plr0912": 277, "branch": [277, 278], "plr0915": 277, "statement": 277, "__init__": 277, "f401": 277, "f403": 277, "manual": [277, 279], "check": 277, "hook": 277, "config": [277, 280, 281, 282, 283, 284, 285, 286], "yaml": 277, "repo": [277, 278], "github": [277, 287], "rev": 277, "v2": 277, "id": 277, "fixer": 277, "trail": 277, "whitespac": 277, "astral": 277, "sh": 277, "v0": 277, "enabl": 277, "disabl": 277, "uninstal": 277, "extens": 277, "vscode": [277, 279], "json": [277, 279], "you": [277, 278, 279, 287], "edit": [277, 282], "latest": [278, 287], "releas": [278, 288], "main": [278, 286], "mhostett": [278, 288], "Or": [278, 279], "pre": 278, "To": 278, "activ": 278, "benefici": 278, "fashion": 278, "allow": [278, 279], "chang": [278, 289], "immedi": 278, "seen": 278, "upon": 278, "next": 278, "clone": 278, "wherev": 278, "flag": 278, "packag": [278, 287], "commit": 278, "pytest": [278, 279], "cov": 278, "xdist": 278, "benchmark": 278, "ini_opt": 279, "minvers": 279, "addopt": 279, "showloc": 279, "testpath": 279, "execut": 279, "test_psk": 279, "instruct": 279, "invok": 279, "infrastructur": 279, "debug": 279, "inlinebackend": [280, 281, 282, 283, 284, 285, 286], "print_figure_kwarg": [280, 281, 282, 283, 284, 285, 286], "facecolor": [280, 281, 282, 283, 284, 285, 286], "inlin": [280, 281, 282, 283, 284, 285, 286], "widget": [280, 281, 282, 283, 284, 285, 286], "tx": 280, "fillstyl": 280, "show": [280, 281, 282, 283, 284, 285, 286], "accomplish": [280, 285], "def": [280, 283, 285], "resample_sign": 280, "new_sample_r": 280, "ty": 280, "gca": [280, 285], "set_prop_cycl": [280, 285], "four": 280, "fourth": 280, "do": 280, "315": 280, "00095883": 281, "00175012": 281, "00423921": 281, "0058825": 281, "006151": 281, "00474595": 281, "0017044": 281, "00254816": 281, "00721645": 281, "0112324": 281, "01342358": 281, "01273202": 281, "00845058": 281, "0004368": 281, "01073669": 281, "02372977": 281, "03650247": 281, "04650654": 281, "05098525": 281, "04734644": 281, "03355896": 281, "00851486": 281, "02769991": 281, "07367348": 281, "12670446": 281, "18301321": 281, "23810898": 281, "28727058": 281, "32607991": 281, "35093841": 281, "35949665": 281, "conveni": [281, 282], "evalu": [281, 282], "29": 281, "31": 281, "here": [281, 282], "478207252018059": 282, "6400000000000001": 282, "7391036260090295": 282, "3061467458920719j": 282, "47820725": 282, "78207252e": 282, "58172329e": 282, "10862468e": 282, "86109590e": 282, "21565653e": 282, "01140214e": 282, "57286400e": 282, "67772160e": 282, "47338728e": 282, "10422993e": 282, "89312837e": 282, "12240078e": 282, "03953322e": 282, "69685122e": 282, "63882791e": 282, "81474977e": 282, "47193366e": 282, "85259041e": 282, "15647504e": 282, "23851924e": 282, "42176895e": 282, "84684395e": 282, "42721858e": 282, "72236648e": 282, "14721649e": 282, "10813095e": 282, "94024315e": 282, "78877688e": 282, "74077567e": 282, "87820725": 282, "53637958": 282, "94724205": 282, "13335164": 282, "1455082": 282, "04436799": 282, "88708159": 282, "71930943": 282, "5719707": 282, "46154771": 282, "39261642": 282, "36139242": 282, "35935288": 282, "3763214": 282, "40270968": 282, "43085717": 282, "45557651": 282, "47410241": 282, "48566716": 282, "49090568": 282, "49124786": 282, "48840102": 282, "4839738": 282, "47925143": 282, "47510421": 282, "47199608": 282, "47005584": 282, "46917696": 282, "46911955": 282, "denomin": 282, "73910363": 282, "30614675j": 282, "plane": 282, "092337035029908": 282, "71104892744724": 282, "684365018955985": 282, "37868538208862": 282, "1263714068241546": 282, "9993519409971622": 282, "1909320767063554": 282, "016796159999999997": 282, "46380627201816593": 282, "3806359704987265j": 282, "4988817673791569": 282, "3333421398098428j": 282, "5543277195052645": 282, "22961005941814036j": 282, "5291527586123693": 282, "28283804209787544j": 282, "lyon": 282, "understand": 282, "3rd": 282, "insid": 282, "outsid": 282, "unstabl": 282, "n_symbol": 283, "pb": 283, "x_bb_rect": 283, "papr_bb_rect": 283, "x_pb_rect": 283, "papr_pb_rect": 283, "x_bb_0p1": 283, "papr_bb_0p1": 283, "x_pb_0p1": 283, "papr_pb_0p1": 283, "x_bb_0p5": 283, "papr_bb_0p5": 283, "x_pb_0p5": 283, "papr_pb_0p5": 283, "x_bb_0p9": 283, "papr_bb_0p9": 283, "x_pb_0p9": 283, "papr_pb_0p9": 283, "2f": 283, "rf": [283, 284], "512": 283, "sweep_alpha": 283, "bb_papr": 283, "pb_papr": 283, "bpsk_bb_papr": 283, "bpsk_pb_papr": 283, "qpsk_bb_papr": 283, "qpsk_pb_papr": 283, "psk8_bb_papr": 283, "psk8_pb_papr": 283, "psk16_bb_papr": 283, "psk16_pb_papr": 283, "configur": 284, "loop_filt": 284, "0x7f28f4d4ab90": 284, "theta_0": 284, "phase_error": 284, "freq_estim": 284, "suptitl": [284, 285], "make": [284, 289], "a_hat": [284, 285], "rad2deg": 284, "avail": [284, 285, 287], "b_nt": 284, "0005": 284, "0125": 284, "015": 284, "0175": 284, "t_lock": 284, "analyze_psk": 285, "100_000": 285, "n0": 285, "tx_mf": 285, "1e6": 285, "bpsk_ber": 285, "bpsk_ser": 285, "qpsk_ber": 285, "qpsk_ser": 285, "psk8_ber": 285, "psk8_ser": 285, "psk16_ber": 285, "psk16_ser": 285, "1e0": 285, "psk8_bin": 285, "psk8_grai": 285, "wors": 285, "rc_0p1": 286, "rc_0p5": 286, "rc_0p9": 286, "pm": 286, "nearli": 286, "small": 286, "lobe": 286, "much": 286, "freqz": 286, "worn": 286, "h_rc_0p1": 286, "h_rc_0p5": 286, "h_rc_0p9": 286, "p_rect": 286, "cumsum": 286, "p_rc_0p1": 286, "p_rc_0p5": 286, "p_rc_0p9": 286, "within": 286, "srrc_0p1": 286, "srrc_0p5": 286, "srrc_0p9": 286, "therefor": 286, "significantli": 286, "due": 286, "being": 286, "h_srrc_0p1": 286, "h_srrc_0p5": 286, "h_srrc_0p9": 286, "p_srrc_0p1": 286, "p_srrc_0p5": 286, "p_srrc_0p9": 286, "gauss_0p1": 286, "gauss_0p2": 286, "gauss_0p3": 286, "softwar": 287, "radio": 287, "goal": 287, "analyz": 287, "reli": 287, "interoper": 287, "numba": 287, "acceler": 287, "computation": 287, "intens": 287, "addition": 287, "aim": 287, "replic": 287, "relev": 287, "toolbox": 287, "progress": 287, "someth": 287, "pleas": 287, "open": 287, "issu": 287, "pypi": 287, "api": [287, 289], "convers": [287, 288], "synchron": 287, "budget": [287, 288], "manipul": 287, "decemb": 288, "2023": 288, "rework": 288, "frequency_response_log": 288, "explicit": 288, "improv": 288, "jupyt": 288, "notebook": 288, "matt": 288, "hostett": 288, "novemb": 288, "abil": 288, "renam": 288, "multirate_tap": 288, "polyphase_matrix": 288, "model": 288, "replac": 288, "black": 288, "septemb": 288, "sensibl": 288, "august": 288, "27": 288, "without": 288, "superflu": 288, "translat": 288, "fix": [288, 289], "juli": 288, "firinterpol": 288, "impair": 288, "fpsl": 288, "helper": 288, "synthes": 288, "semant": 289, "major": 289, "minor": 289, "patch": 289, "introduc": 289, "featur": 289, "compat": 289, "bug": 289, "There": 289, "guarante": 289, "them": 289}, "objects": {"": [[3, 0, 0, 1, "sdr", ""]], "sdr": [[9, 1, 1, "", "AGC", "Implements an automatic gain controller (AGC)."], [18, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [35, 1, 1, "", "Decimator", "Implements a polyphase decimating FIR filter."], [44, 1, 1, "", "Differentiator", "Implements a differentiator FIR filter."], [46, 1, 1, "", "EnergyDetector", "Implements an energy detector."], [51, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [58, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [74, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [81, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [97, 1, 1, "", "Integrator", "Implements an integrator IIR filter."], [99, 1, 1, "", "Interpolator", "Implements a polyphase interpolating FIR filter."], [108, 1, 1, "", "LeakyIntegrator", "Implements a leaky integrator IIR filter."], [110, 1, 1, "", "LinearModulation", "Implements linear phase/amplitude modulation with arbitrary symbol mapping."], [126, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [135, 1, 1, "", "MLPED", "Implements a maximum-likelihood phase error detector (ML-PED)."], [143, 1, 1, "", "MSK", "Implements minimum-shift keying (MSK) modulation and demodulation."], [145, 1, 1, "", "MovingAverager", "Implements a moving average FIR filter."], [147, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [155, 1, 1, "", "OQPSK", "Implements offset quadrature phase-shift keying (OQPSK) modulation and demodulation."], [157, 1, 1, "", "PED", "Implements a heuristic phase error detector (PED)."], [163, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [169, 1, 1, "", "PiMPSK", "Implements $pi/M$ phase-shift keying ($pi/M$ PSK) modulation and demodulation."], [171, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [172, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [173, 1, 1, "", "ReplicaCorrelator", "Implements an clairvoyant replica-correlator detector."], [178, 1, 1, "", "Resampler", "Implements a polyphase rational resampling FIR filter."], [189, 5, 1, "", "albersheim", "Estimates the minimum required single-sample SNR, given $N_{NC}$ non-coherent combinations, to achieve a probability of detection $P_D$ and probability of false alarm $P_{FA}$. This function implements Albersheim's equation."], [190, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [191, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [192, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [193, 5, 1, "", "barker", "Returns the Barker code/sequence of length $N$."], [194, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [195, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [196, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [197, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [198, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [199, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [200, 5, 1, "", "db", "Converts from linear units to decibels."], [201, 5, 1, "", "design_bandpass_fir", "Designs a bandpass FIR filter impulse response $h[n]$ using the window method."], [202, 5, 1, "", "design_bandstop_fir", "Designs a bandstop FIR filter impulse response $h[n]$ using the window method."], [203, 5, 1, "", "design_frac_delay_fir", "Designs a fractional delay FIR filter impulse response $h[n]$ using the Kaiser window method."], [204, 5, 1, "", "design_highpass_fir", "Designs a highpass FIR filter impulse response $h[n]$ using the window method."], [205, 5, 1, "", "design_lowpass_fir", "Designs a lowpass FIR filter impulse response $h[n]$ using the window method."], [206, 5, 1, "", "design_multirate_fir", "Designs a multirate FIR filter impulse response $h[n]$ using the Kaiser window method."], [207, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [208, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [209, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [210, 5, 1, "", "downsample", "Downsamples the time-domain signal $x[n]$ by the factor $r$."], [211, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [212, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [213, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [214, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [215, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [216, 5, 1, "", "euclidean", "Measures the Euclidean distance between two signals $x[n]$ and $y[n]$."], [217, 5, 1, "", "evm", "Calculates the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [218, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [219, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [220, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [221, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [222, 5, 1, "", "hadamard", "Returns the Hadamard code/sequence of length $N$."], [223, 5, 1, "", "half_sine", "Returns a half-sine pulse shape."], [224, 5, 1, "", "hamming", "Measures the Hamming distance between two signals $x[n]$ and $y[n]$."], [225, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [226, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [227, 5, 1, "", "linear", "Converts from decibels to linear units."], [228, 5, 1, "", "mix", "Mixes the time-domain signal $x[n]$ with a complex exponential or real sinusoid."], [229, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [230, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [231, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [232, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [233, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [234, 5, 1, "", "percent", "Converts from a ratio to a percentage."], [256, 5, 1, "", "polyphase_decompose", "Decomposes the FIR filter taps $h_i$ into the polyphase matrix $H_{i, j}$ with $B$ phases."], [257, 5, 1, "", "ppb", "Converts from a ratio to parts per billion (ppb)."], [258, 5, 1, "", "ppm", "Converts from a ratio to parts per million (ppm)."], [259, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [260, 5, 1, "", "rectangular", "Returns a rectangular pulse shape."], [261, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [262, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [263, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [264, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [265, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [266, 5, 1, "", "to_complex_bb", "Converts the real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$ to a complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c} = f_{s,r}/2$."], [267, 5, 1, "", "to_real_pb", "Converts the complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$ to a real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r} = 2f_{s,c}$."], [268, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [269, 5, 1, "", "upsample", "Upsamples the time-domain signal $x[n]$ by the factor $r$."], [270, 5, 1, "", "walsh", "Returns the Walsh code/sequence of length $N$."], [271, 5, 1, "", "wavelength", "Calculates the wavelength $lambda$ of an electromagnetic wave with frequency $f$."], [272, 5, 1, "", "zadoff_chu", "Returns the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.AGC": [[10, 2, 1, "", "__call__", "Performs automatic gain control on the input signal."], [11, 2, 1, "", "__init__", "Creates an automatic gain controller (AGC)."], [12, 4, 1, "", "attack", "(Settable) The attack rate $alpha$."], [13, 4, 1, "", "decay", "(Settable) The decay rate $beta$."], [14, 4, 1, "", "gain", "The current linear gain."], [15, 4, 1, "", "reference", "(Settable) The desired output magnitude."], [16, 2, 1, "", "reset", "Resets the AGC gain. Only useful when using streaming mode."], [17, 4, 1, "", "streaming", "Indicates whether the AGC is in streaming mode."]], "sdr.AGC.__call__": [[10, 3, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.AGC.__init__": [[11, 3, 2, "p-attack", "attack", "The attack rate $alpha$. The attack rate is meant to attenuate strong signals. After $n_0 approx 1 / alpha$ samples the error will reduce to $1 / e$ of its original value."], [11, 3, 2, "p-decay", "decay", "The decay rate $beta$. The decay rate is meant to amplify weak signals. After $n_0 approx 1 / beta$ samples the error will reduce to $1 / e$ of its original value."], [11, 3, 2, "p-reference", "reference", "The desired output magnitude."], [11, 3, 2, "p-streaming", "streaming", "Indicates whether the AGC operates in streaming mode. In streaming mode, the gain is preserved between calls to __call__()."]], "sdr.AGC.reset": [[16, 3, 2, "p-gain", "gain", "The initial linear gain of the AGC."]], "sdr.ClosedLoopPLL": [[19, 4, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [20, 4, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [21, 4, 1, "", "K0", "The NCO gain $K_0$."], [22, 4, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [23, 4, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [24, 4, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [25, 2, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [26, 2, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [27, 4, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [28, 2, 1, "", "lock_time", "Returns the lock time of the PLL."], [29, 4, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [30, 4, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [31, 2, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [32, 2, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [33, 4, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [34, 4, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[25, 3, 2, "p-K0", "K0", "The NCO gain $K_0$."], [25, 3, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [25, 3, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [25, 3, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [25, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[26, 3, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[28, 3, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[31, 3, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.Decimator": [[36, 2, 1, "", "__call__", "Filters and decimates the input signal $x[n]$ with the polyphase FIR filter."], [37, 2, 1, "", "__init__", "Creates a polyphase FIR decimating filter."], [38, 4, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [39, 4, 1, "", "method", "The method used to design the multirate filter."], [40, 4, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [41, 4, 1, "", "rate", "The decimation rate $r$."], [42, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [43, 4, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Decimator.__call__": [[36, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [36, 3, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Decimator.__init__": [[37, 3, 2, "p-rate", "rate", "The decimation rate $r$."], [37, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [37, 3, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.Differentiator": [[45, 2, 1, "", "__init__", "Creates a differentiator FIR filter."]], "sdr.Differentiator.__init__": [[45, 3, 2, "p-order", "order", "The order of the FIR differentiator $N$. The filter length is $N + 1$. Increasing the filter order increases the bandwidth of the differentiator."], [45, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [45, 3, 2, "p-window", "window", "The SciPy window definition. See scipy.signal.windows.get_window() for details. If None, no window is applied."]], "sdr.EnergyDetector": [[47, 2, 1, "", "p_d", "Computes the probability of detection $P_D$."], [48, 2, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [49, 2, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [50, 2, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.EnergyDetector.p_d": [[47, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [47, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [47, 3, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.p_fa": [[48, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [48, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [48, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [48, 3, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.EnergyDetector.roc": [[49, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [49, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [49, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."], [49, 3, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.threshold": [[50, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [50, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [50, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [50, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.ErrorRate": [[52, 2, 1, "", "__init__", "Creates a new error rate tabulation object."], [53, 2, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [54, 2, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [55, 2, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [56, 2, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [57, 2, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[53, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [53, 3, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [53, 3, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[54, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[55, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[57, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[59, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the FIR filter."], [60, 2, 1, "", "__init__", "Creates an FIR filter with feedforward coefficients $h_i$."], [61, 2, 1, "", "__len__", "Returns the filter length $N + 1$."], [62, 4, 1, "", "delay", "The delay of the FIR filter $d = lfloor frac{N + 1}{2} rfloor$ in samples."], [63, 2, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [64, 2, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the FIR filter."], [65, 2, 1, "", "group_delay", "Returns the group delay $tau_g(omega)$ of the FIR filter."], [66, 2, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [67, 4, 1, "", "order", "The order of the FIR filter $N$."], [68, 2, 1, "", "phase_delay", "Returns the phase delay $tau_{phi}(omega)$ of the FIR filter."], [69, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [70, 4, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [71, 2, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [72, 4, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [73, 4, 1, "", "taps", "The feedforward taps $h_i$ for $i = 0,...,N$."]], "sdr.FIR.__call__": [[59, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [59, 3, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.FIR.__init__": [[60, 3, 2, "p-h", "h", "The feedforward coefficients $h_i$ for $i = 0,...N$."], [60, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FIR.frequency_response": [[64, 3, 2, "p-decades", "decades", "Only used if freqs is an integer."], [64, 3, 2, "p-freqs", "freqs", "The frequency specification."], [64, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [64, 3, 2, "p-whole", "whole", "Only used if freqs is an integer."]], "sdr.FIR.group_delay": [[65, 3, 2, "p-N", "N", "The number of samples in the group delay."], [65, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[66, 3, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.phase_delay": [[68, 3, 2, "p-N", "N", "The number of samples in the phase delay."], [68, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.step_response": [[71, 3, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FarrowResampler": [[75, 2, 1, "", "__call__", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [76, 2, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [77, 4, 1, "", "order", "The order of the filter."], [78, 2, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [79, 4, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [80, 4, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__call__": [[75, 3, 2, "p-rate", "rate", "The resampling rate $r$."], [75, 3, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.__init__": [[76, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FarrowResampler.reset": [[78, 3, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[82, 2, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [83, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the IIR filter."], [84, 2, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [85, 4, 1, "", "a_taps", "The feedback taps $a_j$ for $j = 0,...,N$."], [86, 4, 1, "", "b_taps", "The feedforward taps $b_i$ for $i = 0,...,M$."], [87, 2, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the IIR filter."], [88, 4, 1, "", "gain", "The gain of the IIR filter."], [89, 2, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [90, 4, 1, "", "order", "The order of the IIR filter $N$."], [91, 4, 1, "", "poles", "The poles of the IIR filter."], [92, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [93, 4, 1, "", "state", "The filter state."], [94, 2, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [95, 4, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [96, 4, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[82, 3, 2, "p-gain", "gain", "The gain of the transfer function."], [82, 3, 2, "p-poles", "poles", "The poles of the transfer function."], [82, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."], [82, 3, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__call__": [[83, 3, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.IIR.__init__": [[84, 3, 2, "p-a", "a", "The feedback coefficients $a_j$ for $j = 0,...,N$."], [84, 3, 2, "p-b", "b", "The feedforward coefficients $b_i$ for $i = 0,...,M$."], [84, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.IIR.frequency_response": [[87, 3, 2, "p-decades", "decades", "Only used if freqs is an integer."], [87, 3, 2, "p-freqs", "freqs", "The frequency specification."], [87, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [87, 3, 2, "p-whole", "whole", "Only used if freqs is an integer."]], "sdr.IIR.impulse_response": [[89, 3, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[94, 3, 2, "p-N", "N", "The number of samples to return."]], "sdr.Integrator": [[98, 2, 1, "", "__init__", "Creates an integrating IIR filter."]], "sdr.Integrator.__init__": [[98, 3, 2, "p-method", "method", "The integration method."], [98, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.Interpolator": [[100, 2, 1, "", "__call__", "Interpolates and filters the input signal $x[n]$ with the polyphase FIR filter."], [101, 2, 1, "", "__init__", "Creates a polyphase FIR interpolating filter."], [102, 4, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [103, 4, 1, "", "method", "The method used to design the multirate filter."], [104, 4, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [105, 4, 1, "", "rate", "The interpolation rate $r$."], [106, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [107, 4, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Interpolator.__call__": [[100, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [100, 3, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Interpolator.__init__": [[101, 3, 2, "p-rate", "rate", "The interpolation rate $r$."], [101, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [101, 3, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.LeakyIntegrator": [[109, 2, 1, "", "__init__", "Creates a leaky integrator IIR filter."]], "sdr.LeakyIntegrator.__init__": [[109, 3, 2, "p-alpha", "alpha", "The leaky factor $alpha$. An FIR moving average with length $L$ is approximated when $alpha = 1 - 2/L$."], [109, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.LinearModulation": [[111, 2, 1, "", "__init__", "Creates a new linear phase/amplitude modulation object."], [112, 2, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [113, 4, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [114, 2, 1, "", "decide_symbols", "Converts the received complex symbols $tilde{a}[k]$ into decimal symbol decisions $hat{s}[k]$ and complex symbol decisions $hat{a}[k]$ using maximum-likelihood estimation (MLE)."], [115, 2, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples $tilde{x}[n]$ into decimal symbol decisions $hat{s}[k]$ using matched filtering and maximum-likelihood estimation."], [116, 2, 1, "", "map_symbols", "Converts the decimal symbols $s[k]$ to complex symbols $a[k]$."], [117, 2, 1, "", "modulate", "Modulates the decimal symbols $s[k]$ into pulse-shaped complex samples $x[n]$."], [118, 4, 1, "", "order", "The modulation order $M = 2^k$."], [119, 4, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [120, 4, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [121, 4, 1, "", "rx_filter", "The receive decimating matched filter. The filter coefficients are matched to the pulse shape $h[-n]^*$."], [122, 2, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [123, 4, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [124, 4, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."], [125, 4, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter. The filter coefficients are the pulse shape $h[n]$."]], "sdr.LinearModulation.__init__": [[111, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [111, 3, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees to apply to symbol_map."], [111, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [111, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [111, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [111, 3, 2, "p-symbol_map", "symbol_map", "The symbol mapping ${0, dots, M-1} mapsto mathbb{C}$. An $M$-length array whose indices are decimal symbols $s[k]$ and whose values are complex symbols $a[k]$, where $M$ is the modulation order."]], "sdr.LinearModulation.ber": [[112, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.LinearModulation.decide_symbols": [[114, 3, 2, "p-a_tilde", "a_tilde", "The received complex symbols $tilde{a}[k]$."]], "sdr.LinearModulation.demodulate": [[115, 3, 2, "p-x_tilde", "x_tilde", "The received pulse-shaped complex samples $tilde{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.LinearModulation.map_symbols": [[116, 3, 2, "p-s", "s", "The decimal symbols $s[k]$ to map, $0$ to $M-1$."]], "sdr.LinearModulation.modulate": [[117, 3, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.LinearModulation.ser": [[122, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.LoopFilter": [[127, 2, 1, "", "__call__", "Filters the input signal $x[n]$."], [128, 2, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [129, 4, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [130, 4, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [131, 4, 1, "", "integral_gain", "The integral gain $K_2$ of the loop filter."], [132, 4, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [133, 4, 1, "", "proportional_gain", "The proportional gain $K_1$ of the loop filter."], [134, 2, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__call__": [[127, 3, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.LoopFilter.__init__": [[128, 3, 2, "p-K0", "K0", "The NCO gain $K_0$."], [128, 3, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [128, 3, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [128, 3, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.MLPED": [[136, 4, 1, "", "A_received", "(Settable) The received signal RMS amplitude $A_{rx,rms}$."], [137, 4, 1, "", "A_reference", "(Settable) The reference signal RMS amplitude $A_{ref,rms}$."], [138, 2, 1, "", "__call__", "Detects the phase error."], [139, 2, 1, "", "__init__", "Initializes the ML-PED."], [140, 2, 1, "", "data_aided_error", "Simulates the average phase error of the data-aided PED using the specified modulation scheme."], [141, 2, 1, "", "decision_directed_error", "Simulates the average phase error of the decision-directed PED using the specified modulation scheme."], [142, 4, 1, "", "gain", "The gain of the phase error detector $K_p$."]], "sdr.MLPED.__call__": [[138, 3, 2, "p-received", "received", "The received complex symbols $tilde{a}[k]$."], [138, 3, 2, "p-reference", "reference", "The reference complex symbols, either the known transmitted complex symbols $a[k]$ or the complex symbols decisions $hat{a}[k]$."]], "sdr.MLPED.__init__": [[139, 3, 2, "p-A_received", "A_received", "The received signal RMS amplitude $A_{rx,rms}$."], [139, 3, 2, "p-A_reference", "A_reference", "The reference signal RMS amplitude $A_{ref,rms}$."]], "sdr.MLPED.data_aided_error": [[140, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [140, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.MLPED.decision_directed_error": [[141, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [141, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.MSK": [[144, 2, 1, "", "__init__", "Creates a new MSK object."]], "sdr.MSK.__init__": [[144, 3, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [144, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [144, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.MovingAverager": [[146, 2, 1, "", "__init__", "Creates a moving average FIR filter."]], "sdr.MovingAverager.__init__": [[146, 3, 2, "p-length", "length", "The length of the moving average filter $L$."], [146, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.NCO": [[148, 2, 1, "", "__call__", "Steps the NCO with variable frequency and/or phase signals."], [149, 2, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [150, 4, 1, "", "gain", "(Settable) The NCO gain $K_0$."], [151, 4, 1, "", "increment", "(Settable) The constant phase accumulation $omega$ of the NCO in radians/sample."], [152, 4, 1, "", "offset", "(Settable) The absolute phase offset $theta$ of the NCO in radians."], [153, 2, 1, "", "reset", "Resets the NCO."], [154, 2, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__call__": [[148, 3, 2, "p-freq", "freq", "The variable frequency signal $f[n]$ in radians/sample. This input signal varies the per-sample phase increment of the NCO. If None, the signal is all zeros."], [148, 3, 2, "p-output", "output", "The format of the output signal $y[n]$. Options are the accumulated phase, sine, cosine, or complex exponential."], [148, 3, 2, "p-phase", "phase", "The variable phase signal $p[n]$ in radians. This input signal varies the per-sample phase offset of the NCO. If None, the signal is all zeros."]], "sdr.NCO.__init__": [[149, 3, 2, "p-gain", "gain", "The NCO gain $K_0$."], [149, 3, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [149, 3, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.NCO.step": [[154, 3, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.OQPSK": [[156, 2, 1, "", "__init__", "Creates a new OQPSK object."]], "sdr.OQPSK.__init__": [[156, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [156, 3, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [156, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [156, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [156, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [156, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PED": [[158, 2, 1, "", "__call__", "Detects the phase error."], [159, 2, 1, "", "__init__", "Initializes the PED."], [160, 2, 1, "", "data_aided_error", "Simulates the average phase error of the data-aided PED using the specified modulation scheme."], [161, 2, 1, "", "decision_directed_error", "Simulates the average phase error of the decision-directed PED using the specified modulation scheme."], [162, 4, 1, "", "gain", "The gain of the phase error detector $K_p$."]], "sdr.PED.__call__": [[158, 3, 2, "p-received", "received", "The received complex symbols $tilde{a}[k]$."], [158, 3, 2, "p-reference", "reference", "The reference complex symbols, either the known transmitted complex symbols $a[k]$ or the complex symbols decisions $hat{a}[k]$."]], "sdr.PED.data_aided_error": [[160, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [160, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.PED.decision_directed_error": [[161, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [161, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.PSK": [[164, 2, 1, "", "__init__", "Creates a new PSK object."], [165, 2, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [166, 4, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [167, 2, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [168, 4, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[164, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [164, 3, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [164, 3, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [164, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [164, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [164, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [164, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[165, 3, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [165, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.ser": [[167, 3, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [167, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.PiMPSK": [[170, 2, 1, "", "__init__", "Creates a new $pi/M$ PSK object."]], "sdr.PiMPSK.__init__": [[170, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [170, 3, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [170, 3, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [170, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [170, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [170, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [170, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.Q": [[171, 3, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[172, 3, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.ReplicaCorrelator": [[174, 2, 1, "", "p_d", "Computes the probability of detection $P_D$."], [175, 2, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [176, 2, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [177, 2, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.ReplicaCorrelator.p_d": [[174, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [174, 3, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [174, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."]], "sdr.ReplicaCorrelator.p_fa": [[175, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [175, 3, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [175, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [175, 3, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.ReplicaCorrelator.roc": [[176, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [176, 3, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [176, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."]], "sdr.ReplicaCorrelator.threshold": [[177, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [177, 3, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [177, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [177, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.Resampler": [[179, 2, 1, "", "__call__", "Resamples and filters the input signal $x[n]$ with the polyphase FIR filter."], [180, 2, 1, "", "__init__", "Creates a polyphase FIR rational resampling filter."], [181, 4, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [182, 4, 1, "", "down", "The decimation rate $Q$."], [183, 4, 1, "", "method", "The method used to design the multirate filter."], [184, 4, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [185, 4, 1, "", "rate", "The resampling rate $P/Q$."], [186, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [187, 4, 1, "", "taps", "The prototype feedforward taps $h_i$."], [188, 4, 1, "", "up", "The interpolation rate $P$."]], "sdr.Resampler.__init__": [[180, 3, 2, "p-down", "down", "The decimation rate $Q$."], [180, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [180, 3, 2, "p-taps", "taps", "The multirate filter design specification."], [180, 3, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.albersheim": [[189, 3, 2, "p-N_nc", "N_nc", "The number of non-coherent combinations $N_{NC} ge 1$."], [189, 3, 2, "p-p_d", "p_d", "The desired probability of detection $P_D$ in $(0, 1)$."], [189, 3, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{FA}$ in $(0, 1)$."]], "sdr.average_power": [[190, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the average power. The default is None, which computes the average power of the entire array."], [190, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [190, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[191, 3, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [191, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [191, 3, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [191, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[192, 3, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [192, 3, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.barker": [[193, 3, 2, "p-length", "length", "The length $N$ of the Barker code/sequence."], [193, 3, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[194, 3, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [194, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [194, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[195, 3, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[196, 3, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[197, 3, 2, "p-p", "p", "The probability $p$ of a bit flip."], [197, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [197, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[198, 3, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[199, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.db": [[200, 3, 2, "p-type", "type", "The type of input value or signal."], [200, 3, 2, "p-x", "x", "The input value or signal."]], "sdr.design_bandpass_fir": [[201, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [201, 3, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [201, 3, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [201, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [201, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_bandstop_fir": [[202, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [202, 3, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [202, 3, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [202, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [202, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_frac_delay_fir": [[203, 3, 2, "p-delay", "delay", "The fractional delay $0 le Delta n le 1$."], [203, 3, 2, "p-length", "length", "The filter length $L$. Filters with even length have best performance. Filters with odd length are equivalent to an even-length filter with an appended zero."]], "sdr.design_highpass_fir": [[204, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [204, 3, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [204, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [204, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_lowpass_fir": [[205, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [205, 3, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [205, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [205, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_multirate_fir": [[206, 3, 2, "p-A_stop", "A_stop", "The stopband attenuation $A_{text{stop}}$ in dB."], [206, 3, 2, "p-down", "down", "The decimation rate $Q$."], [206, 3, 2, "p-half_length", "half_length", "The half-length of the polyphase filters."], [206, 3, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.diff_decode": [[207, 3, 2, "p-y", "y", "The input encoded data $y[k]$."], [207, 3, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[208, 3, 2, "p-x", "x", "The input uncoded data $x[k]$."], [208, 3, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[209, 3, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [209, 3, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [209, 3, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [209, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [209, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.downsample": [[210, 3, 2, "p-rate", "rate", "The downsampling factor $r$."], [210, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.ebn0_to_esn0": [[211, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [211, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [211, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[212, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [212, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [212, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [212, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[213, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the energy. The default is None, which computes the energy of the entire array."], [213, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [213, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[214, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [214, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [214, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[215, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [215, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.euclidean": [[216, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the distance. The default is None, which computes the distance across the entire array."], [216, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [216, 3, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.evm": [[217, 3, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [217, 3, 2, "p-output", "output", "The output type of the EVM calculation."], [217, 3, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [217, 3, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.frequency_offset": [[218, 3, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [218, 3, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [218, 3, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [218, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [218, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[219, 3, 2, "p-distance", "distance", "The distance $d$ in meters between the transmitter and receiver."], [219, 3, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[220, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [220, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [220, 3, 2, "p-sps", "sps", "The number of samples per symbol."], [220, 3, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[221, 3, 2, "p-n", "n", "The length of the Gray code."]], "sdr.hadamard": [[222, 3, 2, "p-index", "index", "The index $i$ of the Hadamard code."], [222, 3, 2, "p-length", "length", "The length $N$ of the Hadamard code/sequence. Must be a power of 2."], [222, 3, 2, "p-output", "output", "The output format of the Hadamard code/sequence."]], "sdr.half_sine": [[223, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [223, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [223, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.hamming": [[224, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the distance. The default is None, which computes the distance across the entire array."], [224, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [224, 3, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.hexdump": [[225, 3, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [225, 3, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[226, 3, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [226, 3, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [226, 3, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.linear": [[227, 3, 2, "p-type", "type", "The type of output value or signal."], [227, 3, 2, "p-x", "x", "The input value or signal in dB."]], "sdr.mix": [[228, 3, 2, "p-complex", "complex", "Indicates whether to mix by a complex exponential or real sinusoid."], [228, 3, 2, "p-freq", "freq", "The frequency $f$ of the sinusoid in Hz (or 1/samples if sample_rate=1). The frequency must satisfy $-f_s/2 le f le f_s/2$."], [228, 3, 2, "p-phase", "phase", "The phase $phi$ of the sinusoid in degrees."], [228, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal."], [228, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.pack": [[229, 3, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [229, 3, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [229, 3, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[230, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the PAPR. The default is None, which computes the PAPR of the entire array."], [230, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[231, 3, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [231, 3, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [231, 3, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[232, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the peak power. The default is None, which computes the peak power of the entire array."], [232, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [232, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[233, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [233, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.percent": [[234, 3, 2, "p-x", "x", "The input ratio."]], "sdr.plot": [[235, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [236, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [237, 5, 1, "", "eye", "Plots the eye diagram of the baseband modulated signal $x[n]$."], [238, 5, 1, "", "filter", "Plots the magnitude response $|H(omega)|^2$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [239, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [240, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [241, 5, 1, "", "magnitude_response", "Plots the magnitude response $|H(omega)|^2$ of the filter."], [242, 5, 1, "", "p_d", "Plots the probability of detection $P_D$ as a function of received SNR or ENR."], [243, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [244, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [245, 5, 1, "", "phase_response", "Plots the phase response $angle H(omega)$ of the filter."], [246, 5, 1, "", "phase_tree", "Plots the phase tree of a continuous-phase modulated (CPM) signal signal $x[n]$."], [247, 5, 1, "", "raster", "Plots a raster of the time-domain signal $x[n]$."], [248, 5, 1, "", "roc", "Plots the receiver operating characteristic (ROC) curve as a function of $P_{FA}$."], [249, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [250, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [251, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [252, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [253, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [254, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [255, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[235, 3, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [235, 3, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."], [235, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."]], "sdr.plot.constellation": [[236, 3, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [236, 3, 2, "p-kwargs", "kwargs", "If heatmap=False, additional keyword arguments to pass to matplotlib.pyplot.scatter(). The following keyword arguments are set by default. The defaults may be overwritten."], [236, 3, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [236, 3, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.eye": [[237, 3, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [237, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [237, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [237, 3, 2, "p-span", "span", "The number of symbols per raster."], [237, 3, 2, "p-sps", "sps", "The number of samples per symbol."], [237, 3, 2, "p-x", "x", "The baseband modulated signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved."]], "sdr.plot.filter": [[238, 3, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [238, 3, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [238, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [238, 3, 2, "p-filter", "filter", "The filter definition."], [238, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [238, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[239, 3, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [239, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [239, 3, 2, "p-filter", "filter", "The filter definition."], [239, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [239, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [239, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.impulse_response": [[240, 3, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [240, 3, 2, "p-filter", "filter", "The filter definition."], [240, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.magnitude_response": [[241, 3, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [241, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [241, 3, 2, "p-filter", "filter", "The filter definition."], [241, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [241, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [241, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."], [241, 3, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a linear or logarithmic magnitude response."]], "sdr.plot.p_d": [[242, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [242, 3, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [242, 3, 2, "p-x", "x", "The SNR or ENR in dB."], [242, 3, 2, "p-x_label", "x_label", "The x-axis label to use."]], "sdr.plot.periodogram": [[243, 3, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [243, 3, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [243, 3, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [243, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [243, 3, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [243, 3, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [243, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [243, 3, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [243, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [243, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."], [243, 3, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a linear or logarithmic power spectral density."]], "sdr.plot.phase_delay": [[244, 3, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [244, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [244, 3, 2, "p-filter", "filter", "The filter definition."], [244, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [244, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [244, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.phase_response": [[245, 3, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [245, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [245, 3, 2, "p-filter", "filter", "The filter definition."], [245, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [245, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [245, 3, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [245, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.phase_tree": [[246, 3, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [246, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [246, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [246, 3, 2, "p-span", "span", "The number of symbols per raster."], [246, 3, 2, "p-sps", "sps", "The number of samples per symbol."], [246, 3, 2, "p-x", "x", "The baseband CPM signal $x[n]$."]], "sdr.plot.raster": [[247, 3, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [247, 3, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\"."], [247, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.collections.LineCollection. The following keyword arguments are set by default. The defaults may be overwritten."], [247, 3, 2, "p-length", "length", "The length of each raster in samples. This must be provided if x is 1D."], [247, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [247, 3, 2, "p-stride", "stride", "The stride between each raster in samples. If None, the stride is set to length."], [247, 3, 2, "p-x", "x", "The time-domain signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved. If x is 1D, the rastering is determined by length and stride. If x is 2D, the rows correspond to each raster."]], "sdr.plot.roc": [[248, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to the plotting function defined by type."], [248, 3, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [248, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [248, 3, 2, "p-type", "type", "The type of plot to generate."]], "sdr.plot.ser": [[249, 3, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [249, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."], [249, 3, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.spectrogram": [[250, 3, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [250, 3, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [250, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.pcolormesh(). The following keyword arguments are set by default. The defaults may be overwritten."], [250, 3, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [250, 3, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [250, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [250, 3, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [250, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [250, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[251, 3, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [251, 3, 2, "p-filter", "filter", "The filter definition."], [251, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.symbol_map": [[252, 3, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [252, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot(). The following keyword arguments are set by default. The defaults may be overwritten."], [252, 3, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [252, 3, 2, "p-modulation", "modulation", "The linear modulation or symbol map ${0, dots, M-1} mapsto mathbb{C}$."]], "sdr.plot.time_domain": [[253, 3, 2, "p-centered", "centered", "Indicates whether to center the x-axis about 0. This argument is mutually exclusive with offset."], [253, 3, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal. If \"color\", the real and imaginary parts will have different colors based on the current Matplotlib color cycle. If \"line\", the real part will have a solid line and the imaginary part will have a dashed line, and both lines will share the same color."], [253, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [253, 3, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. The units of the offset are $1/f_s$. This argument is mutually exclusive with centered."], [253, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [253, 3, 2, "p-t", "t", "The time signal $t[n]$. The units are assumed to be $1/f_s$."], [253, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[255, 3, 2, "p-filter", "filter", "The filter definition."], [255, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.polyphase_decompose": [[256, 3, 2, "p-phases", "phases", "The number of phases $B$."], [256, 3, 2, "p-taps", "taps", "The multirate FIR filter taps $h_i$."]], "sdr.ppb": [[257, 3, 2, "p-x", "x", "The input ratio."]], "sdr.ppm": [[258, 3, 2, "p-x", "x", "The input ratio."]], "sdr.raised_cosine": [[259, 3, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [259, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [259, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [259, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rectangular": [[260, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [260, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [260, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[261, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [261, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[262, 3, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [262, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [262, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [262, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[263, 3, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [263, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.snr_to_ebn0": [[264, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [264, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [264, 3, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [264, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[265, 3, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [265, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.to_complex_bb": [[266, 3, 2, "p-x_r", "x_r", "The real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$. If the length is odd, one zero is appended to the end."]], "sdr.to_real_pb": [[267, 3, 2, "p-x_c", "x_c", "The complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$."]], "sdr.unpack": [[268, 3, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [268, 3, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [268, 3, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.upsample": [[269, 3, 2, "p-rate", "rate", "The upsampling factor $r$."], [269, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.walsh": [[270, 3, 2, "p-index", "index", "The index $i$ of the Walsh code. Indicates how many transitions there are in the code."], [270, 3, 2, "p-length", "length", "The length $N$ of the Walsh code/sequence. Must be a power of 2."], [270, 3, 2, "p-output", "output", "The output format of the Walsh code/sequence."]], "sdr.wavelength": [[271, 3, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.zadoff_chu": [[272, 3, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [272, 3, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence. The root must be relatively prime to the length, i.e., $gcd(u, N) = 1$."], [272, 3, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence. When $q ne 0$, the returned sequence is a cyclic shift of the root-$u$ Zadoff-Chu sequence."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:parameter", "4": "py:property", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "parameter", "Python parameter"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"]}, "titleterms": {"convers": 0, "decibel": 0, "ratio": 0, "from": [0, 277, 278, 279], "e_b": 0, "n_0": 0, "e_": 0, "": [0, 281, 282], "n": [0, 280, 281, 282], "data": 1, "manipul": [1, 3], "detect": [2, 7], "detector": [2, 275], "theoret": 2, "limit": 2, "digit": [3, 282], "signal": [3, 274, 280, 283], "process": 3, "fir": [3, 281], "filter": [3, 7, 281, 282, 284], "iir": [3, 282], "applic": 3, "multir": 3, "arbitrari": [3, 280], "resampl": [3, 280], "correl": 3, "link": 4, "budget": 4, "channel": [4, 274], "capac": 4, "path": 4, "loss": 4, "antenna": 4, "measur": 5, "energi": 5, "power": [5, 283], "voltag": 5, "distanc": 5, "modul": [5, 6, 7], "linear": 6, "continu": 6, "phase": [6, 275, 284, 285], "orthogon": 6, "puls": [6, 283, 286], "shape": [6, 283, 286], "symbol": [6, 285], "map": [6, 285], "encod": 6, "plot": [7, 283], "configur": [7, 277, 279], "time": [7, 283, 284], "domain": [7, 283, 284], "frequenc": [7, 281, 282, 283, 284], "spectral": 7, "estim": 7, "analysi": 7, "probabl": 8, "constructor": [9, 18, 35, 44, 51, 58, 74, 81, 97, 99, 108, 110, 126, 135, 143, 145, 147, 155, 157, 163, 169, 178], "special": [9, 35, 44, 58, 74, 81, 97, 99, 108, 126, 135, 145, 147, 157, 178], "method": [9, 18, 35, 44, 46, 51, 58, 74, 81, 97, 99, 108, 110, 126, 135, 143, 145, 147, 155, 157, 163, 169, 173, 178], "stream": [9, 35, 44, 58, 81, 97, 99, 108, 145, 178], "mode": [9, 35, 44, 58, 81, 97, 99, 108, 145, 178], "onli": [9, 35, 44, 58, 81, 97, 99, 108, 145, 178], "properti": [9, 18, 35, 44, 58, 74, 81, 97, 99, 108, 110, 126, 135, 143, 145, 147, 155, 157, 163, 169, 178], "note": [18, 110, 143, 155, 163, 169, 219, 243, 250], "see": [51, 53, 64, 65, 66, 68, 71, 87, 89, 94, 111, 112, 122, 144, 156, 164, 165, 167, 170, 171, 172, 199, 230, 269], "also": [51, 53, 64, 65, 66, 68, 71, 87, 89, 94, 111, 112, 122, 144, 156, 164, 165, 167, 170, 171, 172, 199, 230, 269], "warn": [210, 269], "sequenc": 273, "simul": 274, "model": 274, "impair": 274, "synchron": 275, "lock": [275, 284], "loop": [275, 284], "error": [275, 285], "amplitud": 275, "control": 275, "document": 276, "instal": [276, 277, 278, 279, 287], "build": 276, "doc": 276, "serv": 276, "format": 277, "run": [277, 279], "linter": 277, "formatt": 277, "pre": 277, "commit": 277, "v": [277, 279], "code": [277, 279], "pypi": 278, "github": 278, "edit": 278, "local": 278, "folder": 278, "dev": 278, "depend": 278, "unit": 279, "test": 279, "command": 279, "line": 279, "farrow": 280, "construct": 280, "an": [280, 281, 282], "input": 280, "x": 280, "t_": 280, "rate": [280, 285], "r": 280, "y": 280, "frac": 280, "upsampl": 280, "integ": 280, "downsampl": 280, "irrat": 280, "creat": [281, 282], "examin": [281, 282, 283], "impuls": [281, 282], "respons": [281, 282, 284], "h": [281, 282], "step": [281, 282, 284], "omega": [281, 282], "group": [281, 282], "delai": [281, 282], "tau_g": [281, 282], "fulli": [281, 282], "analyz": [281, 282, 284], "zero": 282, "pole": 282, "stabil": 282, "peak": 283, "averag": 283, "qpsk": [283, 285], "variou": 283, "across": [283, 284], "excess": 283, "bandwidth": 283, "design": 284, "proport": 284, "plu": 284, "integr": 284, "ppi": 284, "implement": 284, "pll": 284, "close": 284, "perform": 284, "compar": 284, "zeta": 284, "b_n": 284, "t": 284, "shift": 285, "kei": 285, "constel": 285, "bpsk": 285, "8": [285, 288], "psk": 285, "16": 285, "curv": 285, "bit": 285, "rais": 286, "cosin": 286, "squar": 286, "root": 286, "gaussian": 286, "sdr": 287, "featur": 287, "v0": 288, "0": 288, "11": 288, "chang": 288, "contributor": 288, "10": 288, "9": 288, "7": 288, "6": 288, "5": 288, "4": 288, "3": 288, "2": 288, "1": 288, "version": 289, "alpha": 289, "releas": 289, "beta": 289}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Conversions": [[0, "conversions"]], "Decibels": [[0, "decibels"]], "Ratios": [[0, "ratios"]], "From E_b/N_0": [[0, "from-e-b-n-0"]], "From E_s/N_0": [[0, "from-e-s-n-0"]], "From S/N": [[0, "from-s-n"]], "Data manipulation": [[1, "data-manipulation"]], "Detection": [[2, "detection"], [7, "detection"]], "Detectors": [[2, "detectors"]], "Theoretical limits": [[2, "theoretical-limits"]], "Digital signal processing": [[3, "digital-signal-processing"]], "FIR filtering": [[3, "fir-filtering"]], "IIR filtering": [[3, "iir-filtering"]], "Filter applications": [[3, "filter-applications"]], "Multirate filtering": [[3, "multirate-filtering"]], "Arbitrary resampling": [[3, "arbitrary-resampling"]], "Correlation": [[3, "correlation"]], "Signal manipulation": [[3, "signal-manipulation"]], "Link budgets": [[4, "link-budgets"]], "Channel capacity": [[4, "channel-capacity"]], "Path losses": [[4, "path-losses"]], "Antennas": [[4, "antennas"]], "Measurement": [[5, "measurement"]], "Energy": [[5, "energy"]], "Power": [[5, "power"]], "Voltage": [[5, "voltage"]], "Distance": [[5, "distance"]], "Modulation": [[5, "modulation"], [6, "modulation"], [7, "modulation"]], "Linear modulations": [[6, "linear-modulations"]], "Continuous-phase modulations": [[6, "continuous-phase-modulations"]], "Orthogonal modulations": [[6, "orthogonal-modulations"]], "Pulse shaping": [[6, "pulse-shaping"]], "Symbol mapping": [[6, "symbol-mapping"], [285, "symbol-mapping"]], "Symbol encoding": [[6, "symbol-encoding"]], "Plotting": [[7, "plotting"]], "Configuration": [[7, "configuration"], [277, "configuration"], [279, "configuration"]], "Time-domain": [[7, "time-domain"]], "Frequency-domain": [[7, "frequency-domain"]], "Spectral estimation": [[7, "spectral-estimation"]], "Filter analysis": [[7, "filter-analysis"]], "Probability": [[8, "probability"]], "Constructors": [[9, "constructors"], [18, "constructors"], [35, "constructors"], [44, "constructors"], [51, "constructors"], [58, "constructors"], [74, "constructors"], [81, "constructors"], [97, "constructors"], [99, "constructors"], [108, "constructors"], [110, "constructors"], [126, "constructors"], [135, "constructors"], [143, "constructors"], [145, "constructors"], [147, "constructors"], [155, "constructors"], [157, "constructors"], [163, "constructors"], [169, "constructors"], [178, "constructors"]], "Special methods": [[9, "special-methods"], [35, "special-methods"], [44, "special-methods"], [58, "special-methods"], [74, "special-methods"], [81, "special-methods"], [97, "special-methods"], [99, "special-methods"], [108, "special-methods"], [126, "special-methods"], [135, "special-methods"], [145, "special-methods"], [147, "special-methods"], [157, "special-methods"], [178, "special-methods"]], "Streaming mode only": [[9, "streaming-mode-only"], [35, "streaming-mode-only"], [44, "streaming-mode-only"], [58, "streaming-mode-only"], [81, "streaming-mode-only"], [97, "streaming-mode-only"], [99, "streaming-mode-only"], [108, "streaming-mode-only"], [145, "streaming-mode-only"], [178, "streaming-mode-only"]], "Properties": [[9, "properties"], [18, "properties"], [35, "properties"], [44, "properties"], [58, "properties"], [74, "properties"], [81, "properties"], [97, "properties"], [99, "properties"], [108, "properties"], [110, "properties"], [126, "properties"], [135, "properties"], [143, "properties"], [145, "properties"], [147, "properties"], [155, "properties"], [157, "properties"], [163, "properties"], [169, "properties"], [178, "properties"]], "Note": [[18, null], [110, null], [143, null], [155, null], [163, null], [169, null], [219, null], [243, null], [250, null]], "Methods": [[18, "methods"], [35, "methods"], [44, "methods"], [46, "methods"], [51, "methods"], [58, "methods"], [74, "methods"], [81, "methods"], [97, "methods"], [99, "methods"], [108, "methods"], [110, "methods"], [126, "methods"], [135, "methods"], [143, "methods"], [145, "methods"], [147, "methods"], [155, "methods"], [157, "methods"], [163, "methods"], [169, "methods"], [173, "methods"], [178, "methods"]], "See also": [[51, null], [53, null], [64, null], [65, null], [66, null], [68, null], [71, null], [87, null], [89, null], [94, null], [111, null], [112, null], [122, null], [144, null], [156, null], [164, null], [165, null], [167, null], [170, null], [171, null], [172, null], [199, null], [230, null], [269, null]], "Warning": [[210, null], [269, null]], "Sequences": [[273, "sequences"]], "Simulation": [[274, "simulation"]], "Channel models": [[274, "channel-models"]], "Signal impairments": [[274, "signal-impairments"]], "Synchronization": [[275, "synchronization"]], "Phase-locked loops": [[275, "phase-locked-loops"], [284, "phase-locked-loops"]], "Phase error detectors": [[275, "phase-error-detectors"]], "Amplitude control loops": [[275, "amplitude-control-loops"]], "Documentation": [[276, "documentation"]], "Install": [[276, "install"], [277, "install"], [279, "install"]], "Build the docs": [[276, "build-the-docs"]], "Serve the docs": [[276, "serve-the-docs"]], "Formatting": [[277, "formatting"]], "Run the linter": [[277, "run-the-linter"]], "Run the formatter": [[277, "run-the-formatter"]], "Pre-commit": [[277, "pre-commit"]], "Run from VS Code": [[277, "run-from-vs-code"], [279, "run-from-vs-code"]], "Installation": [[278, "installation"], [287, "installation"]], "Install from PyPI": [[278, "install-from-pypi"]], "Install from GitHub": [[278, "install-from-github"]], "Editable install from local folder": [[278, "editable-install-from-local-folder"]], "Install the dev dependencies": [[278, "install-the-dev-dependencies"]], "Unit Tests": [[279, "unit-tests"]], "Run from the command line": [[279, "run-from-the-command-line"]], "Farrow arbitrary resampler": [[280, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[280, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[280, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[280, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[280, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[280, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[280, "downsample-by-an-irrational-rate"]], "FIR filters": [[281, "fir-filters"]], "Create an FIR filter": [[281, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[281, "examine-the-impulse-response-h-n"], [282, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[281, "examine-the-step-response-s-n"], [282, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[281, "examine-the-frequency-response-h-omega"], [282, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[281, "examine-the-group-delay-tau-g-omega"], [282, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[281, "fully-analyze-a-fir-filter"]], "IIR filters": [[282, "iir-filters"]], "Create an IIR filter": [[282, "create-an-iir-filter"]], "Examine the zeros and poles": [[282, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[282, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[282, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[283, "peak-to-average-power"]], "QPSK signal with various pulse shapes": [[283, "qpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[283, "examine-time-domain"]], "Examine frequency domain": [[283, "examine-frequency-domain"]], "Plot across excess bandwidth": [[283, "plot-across-excess-bandwidth"]], "Design a proportional-plus-integrator (PPI) loop filter": [[284, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[284, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[284, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[284, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[284, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[284, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[284, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[285, "phase-shift-keying"]], "Constellations": [[285, "constellations"]], "BPSK": [[285, "bpsk"]], "QPSK": [[285, "qpsk"]], "8-PSK": [[285, "id1"]], "16-PSK": [[285, "id2"]], "Error rate curves": [[285, "error-rate-curves"]], "Bit error rate curves": [[285, "bit-error-rate-curves"]], "Symbol error rate curves": [[285, "symbol-error-rate-curves"]], "Pulse shapes": [[286, "pulse-shapes"]], "Raised cosine": [[286, "raised-cosine"]], "Square-root raised cosine": [[286, "square-root-raised-cosine"]], "Gaussian": [[286, "gaussian"]], "sdr": [[287, "sdr"]], "Features": [[287, "features"]], "v0.0": [[288, "v0-0"]], "v0.0.11": [[288, "v0-0-11"]], "Changes": [[288, "changes"], [288, "id1"], [288, "id3"], [288, "id5"], [288, "id7"], [288, "id9"], [288, "id11"], [288, "id13"], [288, "id15"], [288, "id17"], [288, "id19"]], "Contributors": [[288, "contributors"], [288, "id2"], [288, "id4"], [288, "id6"], [288, "id8"], [288, "id10"], [288, "id12"], [288, "id14"], [288, "id16"], [288, "id18"], [288, "id20"]], "v0.0.10": [[288, "v0-0-10"]], "v0.0.9": [[288, "v0-0-9"]], "v0.0.8": [[288, "v0-0-8"]], "v0.0.7": [[288, "v0-0-7"]], "v0.0.6": [[288, "v0-0-6"]], "v0.0.5": [[288, "v0-0-5"]], "v0.0.4": [[288, "v0-0-4"]], "v0.0.3": [[288, "v0-0-3"]], "v0.0.2": [[288, "v0-0-2"]], "v0.0.1": [[288, "v0-0-1"]], "Versioning": [[289, "versioning"]], "Alpha releases": [[289, "alpha-releases"]], "Beta releases": [[289, "beta-releases"]]}, "indexentries": {"module": [[3, "module-sdr"]], "sdr": [[3, "module-sdr"]]}, "docurls": ["api/conversions/", "api/data-manipulation/", "api/detection/", "api/dsp/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/sdr.AGC/", "api/sdr.AGC.__call__/", "api/sdr.AGC.__init__/", "api/sdr.AGC.attack/", "api/sdr.AGC.decay/", "api/sdr.AGC.gain/", "api/sdr.AGC.reference/", "api/sdr.AGC.reset/", "api/sdr.AGC.streaming/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.Decimator/", "api/sdr.Decimator.__call__/", "api/sdr.Decimator.__init__/", "api/sdr.Decimator.delay/", "api/sdr.Decimator.method/", "api/sdr.Decimator.polyphase_taps/", "api/sdr.Decimator.rate/", "api/sdr.Decimator.reset/", "api/sdr.Decimator.taps/", "api/sdr.Differentiator/", "api/sdr.Differentiator.__init__/", "api/sdr.EnergyDetector/", "api/sdr.EnergyDetector.p_d/", "api/sdr.EnergyDetector.p_fa/", "api/sdr.EnergyDetector.roc/", "api/sdr.EnergyDetector.threshold/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__call__/", "api/sdr.FIR.__init__/", "api/sdr.FIR.__len__/", "api/sdr.FIR.delay/", "api/sdr.FIR.flush/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.group_delay/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.phase_delay/", "api/sdr.FIR.reset/", "api/sdr.FIR.state/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__call__/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__call__/", "api/sdr.IIR.__init__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.state/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.Integrator/", "api/sdr.Integrator.__init__/", "api/sdr.Interpolator/", "api/sdr.Interpolator.__call__/", "api/sdr.Interpolator.__init__/", "api/sdr.Interpolator.delay/", "api/sdr.Interpolator.method/", "api/sdr.Interpolator.polyphase_taps/", "api/sdr.Interpolator.rate/", "api/sdr.Interpolator.reset/", "api/sdr.Interpolator.taps/", "api/sdr.LeakyIntegrator/", "api/sdr.LeakyIntegrator.__init__/", "api/sdr.LinearModulation/", "api/sdr.LinearModulation.__init__/", "api/sdr.LinearModulation.ber/", "api/sdr.LinearModulation.bps/", "api/sdr.LinearModulation.decide_symbols/", "api/sdr.LinearModulation.demodulate/", "api/sdr.LinearModulation.map_symbols/", "api/sdr.LinearModulation.modulate/", "api/sdr.LinearModulation.order/", "api/sdr.LinearModulation.phase_offset/", "api/sdr.LinearModulation.pulse_shape/", "api/sdr.LinearModulation.rx_filter/", "api/sdr.LinearModulation.ser/", "api/sdr.LinearModulation.sps/", "api/sdr.LinearModulation.symbol_map/", "api/sdr.LinearModulation.tx_filter/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.__call__/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.integral_gain/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.proportional_gain/", "api/sdr.LoopFilter.reset/", "api/sdr.MLPED/", "api/sdr.MLPED.A_received/", "api/sdr.MLPED.A_reference/", "api/sdr.MLPED.__call__/", "api/sdr.MLPED.__init__/", "api/sdr.MLPED.data_aided_error/", "api/sdr.MLPED.decision_directed_error/", "api/sdr.MLPED.gain/", "api/sdr.MSK/", "api/sdr.MSK.__init__/", "api/sdr.MovingAverager/", "api/sdr.MovingAverager.__init__/", "api/sdr.NCO/", "api/sdr.NCO.__call__/", "api/sdr.NCO.__init__/", "api/sdr.NCO.gain/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.OQPSK/", "api/sdr.OQPSK.__init__/", "api/sdr.PED/", "api/sdr.PED.__call__/", "api/sdr.PED.__init__/", "api/sdr.PED.data_aided_error/", "api/sdr.PED.decision_directed_error/", "api/sdr.PED.gain/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.ber/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.PiMPSK/", "api/sdr.PiMPSK.__init__/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.ReplicaCorrelator/", "api/sdr.ReplicaCorrelator.p_d/", "api/sdr.ReplicaCorrelator.p_fa/", "api/sdr.ReplicaCorrelator.roc/", "api/sdr.ReplicaCorrelator.threshold/", "api/sdr.Resampler/", "api/sdr.Resampler.__call__/", "api/sdr.Resampler.__init__/", "api/sdr.Resampler.delay/", "api/sdr.Resampler.down/", "api/sdr.Resampler.method/", "api/sdr.Resampler.polyphase_taps/", "api/sdr.Resampler.rate/", "api/sdr.Resampler.reset/", "api/sdr.Resampler.taps/", "api/sdr.Resampler.up/", "api/sdr.albersheim/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.barker/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.db/", "api/sdr.design_bandpass_fir/", "api/sdr.design_bandstop_fir/", "api/sdr.design_frac_delay_fir/", "api/sdr.design_highpass_fir/", "api/sdr.design_lowpass_fir/", "api/sdr.design_multirate_fir/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.downsample/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.euclidean/", "api/sdr.evm/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.hadamard/", "api/sdr.half_sine/", "api/sdr.hamming/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.linear/", "api/sdr.mix/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.percent/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.eye/", "api/sdr.plot.filter/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.magnitude_response/", "api/sdr.plot.p_d/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.phase_tree/", "api/sdr.plot.raster/", "api/sdr.plot.roc/", "api/sdr.plot.ser/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.polyphase_decompose/", "api/sdr.ppb/", "api/sdr.ppm/", "api/sdr.raised_cosine/", "api/sdr.rectangular/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.to_complex_bb/", "api/sdr.to_real_pb/", "api/sdr.unpack/", "api/sdr.upsample/", "api/sdr.walsh/", "api/sdr.wavelength/", "api/sdr.zadoff_chu/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/formatting/", "development/installation/", "development/unit-tests/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})