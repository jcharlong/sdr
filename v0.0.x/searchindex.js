Search.setIndex({"titles": ["Conversions", "Data manipulation", "Detection", "Digital signal processing", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "sdr.AGC", "sdr.AGC.__call__", "sdr.AGC.__init__", "sdr.AGC.attack", "sdr.AGC.decay", "sdr.AGC.gain", "sdr.AGC.reference", "sdr.AGC.reset", "sdr.AGC.streaming", "sdr.CPM", "sdr.CPM.__init__", "sdr.CPM.ber", "sdr.CPM.bps", "sdr.CPM.demodulate", "sdr.CPM.index", "sdr.CPM.modulate", "sdr.CPM.order", "sdr.CPM.phase_offset", "sdr.CPM.pulse_shape", "sdr.CPM.rx_filter", "sdr.CPM.ser", "sdr.CPM.sps", "sdr.CPM.tx_filter", "sdr.Channelizer", "sdr.Channelizer.__call__", "sdr.Channelizer.__init__", "sdr.Channelizer.channels", "sdr.Channelizer.method", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.Decimator", "sdr.Decimator.__init__", "sdr.Decimator.method", "sdr.Decimator.reset", "sdr.Differentiator", "sdr.Differentiator.__init__", "sdr.EnergyDetector", "sdr.EnergyDetector.p_d", "sdr.EnergyDetector.p_fa", "sdr.EnergyDetector.roc", "sdr.EnergyDetector.threshold", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__call__", "sdr.FIR.__init__", "sdr.FIR.__len__", "sdr.FIR.delay", "sdr.FIR.flush", "sdr.FIR.frequency_response", "sdr.FIR.group_delay", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.phase_delay", "sdr.FIR.reset", "sdr.FIR.state", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__call__", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.delay", "sdr.FarrowResampler.flush", "sdr.FarrowResampler.order", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.state", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.FractionalDelay", "sdr.FractionalDelay.__init__", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__call__", "sdr.IIR.__init__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.frequency_response", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.state", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.Integrator", "sdr.Integrator.__init__", "sdr.Interpolator", "sdr.Interpolator.__init__", "sdr.Interpolator.method", "sdr.LeakyIntegrator", "sdr.LeakyIntegrator.__init__", "sdr.LinearModulation", "sdr.LinearModulation.__init__", "sdr.LinearModulation.ber", "sdr.LinearModulation.bps", "sdr.LinearModulation.decide_symbols", "sdr.LinearModulation.demodulate", "sdr.LinearModulation.map_symbols", "sdr.LinearModulation.modulate", "sdr.LinearModulation.order", "sdr.LinearModulation.phase_offset", "sdr.LinearModulation.pulse_shape", "sdr.LinearModulation.rx_filter", "sdr.LinearModulation.ser", "sdr.LinearModulation.sps", "sdr.LinearModulation.symbol_map", "sdr.LinearModulation.tx_filter", "sdr.LoopFilter", "sdr.LoopFilter.__call__", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.iir", "sdr.LoopFilter.integral_gain", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.proportional_gain", "sdr.LoopFilter.reset", "sdr.MLPED", "sdr.MLPED.A_received", "sdr.MLPED.A_reference", "sdr.MLPED.__call__", "sdr.MLPED.__init__", "sdr.MLPED.data_aided_error", "sdr.MLPED.decision_directed_error", "sdr.MLPED.gain", "sdr.MSK", "sdr.MSK.__init__", "sdr.MovingAverager", "sdr.MovingAverager.__init__", "sdr.NCO", "sdr.NCO.__call__", "sdr.NCO.__init__", "sdr.NCO.gain", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.reset", "sdr.NCO.step", "sdr.OQPSK", "sdr.OQPSK.__init__", "sdr.PED", "sdr.PED.__call__", "sdr.PED.__init__", "sdr.PED.data_aided_error", "sdr.PED.decision_directed_error", "sdr.PED.gain", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.ber", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.PiMPSK", "sdr.PiMPSK.__init__", "sdr.PolyphaseFIR", "sdr.PolyphaseFIR.__call__", "sdr.PolyphaseFIR.__init__", "sdr.PolyphaseFIR.branches", "sdr.PolyphaseFIR.decimation", "sdr.PolyphaseFIR.delay", "sdr.PolyphaseFIR.input", "sdr.PolyphaseFIR.interpolation", "sdr.PolyphaseFIR.order", "sdr.PolyphaseFIR.output", "sdr.PolyphaseFIR.polyphase_order", "sdr.PolyphaseFIR.polyphase_taps", "sdr.PolyphaseFIR.rate", "sdr.PolyphaseFIR.reset", "sdr.PolyphaseFIR.taps", "sdr.Q", "sdr.Qinv", "sdr.ReplicaCorrelator", "sdr.ReplicaCorrelator.p_d", "sdr.ReplicaCorrelator.p_fa", "sdr.ReplicaCorrelator.roc", "sdr.ReplicaCorrelator.threshold", "sdr.Resampler", "sdr.Resampler.__call__", "sdr.Resampler.__init__", "sdr.Resampler.method", "sdr.albersheim", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.barker", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.db", "sdr.design_bandpass_fir", "sdr.design_bandstop_fir", "sdr.design_frac_delay_fir", "sdr.design_highpass_fir", "sdr.design_lowpass_fir", "sdr.design_multirate_fir", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.downsample", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.euclidean", "sdr.evm", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.hadamard", "sdr.half_sine", "sdr.hamming", "sdr.hexdump", "sdr.iq_imbalance", "sdr.linear", "sdr.mix", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.percent", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.eye", "sdr.plot.filter", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.magnitude_response", "sdr.plot.p_d", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.phase_tree", "sdr.plot.raster", "sdr.plot.roc", "sdr.plot.ser", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.polyphase_decompose", "sdr.ppb", "sdr.ppm", "sdr.raised_cosine", "sdr.rectangular", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.to_complex_bb", "sdr.to_real_pb", "sdr.unpack", "sdr.upsample", "sdr.walsh", "sdr.wavelength", "sdr.zadoff_chu", "Sequences", "Simulation", "Synchronization", "Documentation", "Formatting", "Installation", "Unit Tests", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310], "db": [0, 4, 5, 20, 29, 32, 34, 37, 48, 50, 55, 61, 63, 65, 67, 68, 69, 71, 116, 119, 125, 135, 156, 168, 176, 178, 180, 182, 202, 204, 208, 210, 211, 212, 213, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 238, 240, 241, 247, 248, 251, 252, 253, 254, 256, 257, 263, 270, 282, 285, 286, 304, 306, 307, 309], "x": [0, 1, 3, 5, 6, 7, 8, 9, 10, 18, 22, 24, 32, 33, 37, 54, 58, 60, 65, 67, 72, 73, 88, 89, 98, 100, 102, 116, 117, 118, 121, 123, 128, 130, 139, 140, 156, 158, 168, 176, 182, 184, 185, 186, 190, 199, 200, 201, 206, 207, 211, 212, 215, 218, 220, 221, 228, 229, 230, 231, 234, 237, 238, 239, 245, 247, 248, 249, 250, 251, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 271, 273, 274, 278, 279, 282, 284, 289, 290, 295, 299, 304, 305, 306, 309, 310], "arraylik": [0, 1, 2, 3, 4, 5, 6, 7, 8, 18, 19, 20, 22, 24, 29, 32, 33, 34, 54, 55, 58, 60, 61, 62, 63, 64, 65, 67, 72, 73, 74, 88, 94, 98, 100, 101, 102, 103, 116, 118, 119, 121, 123, 124, 125, 127, 128, 129, 130, 135, 148, 151, 156, 157, 158, 168, 169, 176, 177, 178, 180, 182, 183, 184, 185, 186, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 213, 215, 216, 218, 219, 221, 222, 223, 225, 226, 228, 229, 230, 232, 233, 234, 235, 236, 238, 239, 240, 246, 248, 250, 252, 255, 259, 260, 261, 262, 263, 264, 265, 266, 269, 271, 272, 276, 277, 278, 279, 285, 286, 289, 292, 295], "ndarrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 18, 20, 22, 24, 27, 29, 32, 33, 54, 58, 60, 61, 62, 63, 64, 65, 70, 72, 73, 77, 78, 79, 80, 82, 84, 85, 87, 88, 89, 92, 95, 97, 98, 100, 102, 104, 105, 106, 108, 110, 112, 113, 115, 116, 118, 121, 123, 125, 127, 128, 129, 130, 133, 135, 137, 139, 140, 148, 151, 153, 154, 156, 158, 160, 161, 167, 168, 170, 171, 173, 174, 176, 178, 180, 181, 182, 184, 185, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 267, 268, 270, 273, 274, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], "float_": [0, 2, 3, 4, 5, 6, 7, 8, 60, 61, 62, 63, 64, 65, 70, 123, 125, 133, 135, 148, 153, 154, 156, 168, 170, 171, 173, 174, 176, 178, 180, 182, 199, 200, 201, 202, 203, 204, 205, 210, 213, 216, 219, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 240, 241, 244, 248, 252, 255, 256, 270, 278, 279, 280, 281, 283, 285, 286, 287, 288, 292], "convert": [0, 3, 123, 127, 129, 156, 168, 176, 182, 221, 232, 233, 235, 236, 246, 248, 255, 278, 279, 285, 286, 287, 288], "linear": [0, 9, 14, 16, 32, 58, 88, 118, 119, 120, 123, 124, 153, 154, 156, 168, 173, 174, 176, 182, 206, 208, 209, 212, 221, 248, 262, 264, 269, 271, 273, 308, 309], "unit": [0, 32, 54, 58, 72, 85, 98, 100, 113, 116, 118, 121, 139, 157, 158, 160, 169, 177, 183, 184, 206, 212, 213, 221, 228, 229, 248, 272, 274, 299, 302, 303, 305, 308, 309], "percent": [0, 255, 309], "percentag": [0, 255], "ppm": [0, 279, 284, 295, 309], "part": [0, 274, 278, 279, 284, 305], "per": [0, 1, 18, 19, 21, 22, 23, 24, 30, 33, 73, 123, 124, 126, 128, 130, 136, 156, 157, 161, 168, 169, 176, 177, 182, 183, 185, 207, 212, 213, 232, 233, 235, 236, 239, 241, 244, 246, 250, 257, 258, 267, 278, 279, 280, 281, 283, 284, 285, 286, 289, 298, 304, 307, 309], "million": [0, 279, 284], "ppb": [0, 278, 309], "billion": [0, 278], "ebn0_to_esn0": [0, 29, 135, 180, 232, 306, 309], "ebn0": [0, 7, 18, 20, 123, 125, 156, 168, 176, 178, 182, 213, 232, 233, 256, 306], "bp": [0, 18, 21, 123, 126, 156, 168, 176, 182, 232, 233, 235, 285, 306], "int": [0, 1, 3, 6, 7, 18, 19, 21, 25, 30, 32, 34, 54, 55, 58, 59, 65, 67, 68, 71, 72, 75, 76, 78, 79, 80, 81, 82, 85, 88, 90, 91, 93, 98, 99, 100, 106, 108, 109, 113, 116, 118, 119, 121, 123, 124, 126, 131, 136, 153, 154, 156, 157, 158, 159, 160, 167, 168, 169, 173, 174, 176, 177, 182, 183, 184, 186, 187, 188, 189, 191, 192, 194, 206, 208, 211, 212, 214, 215, 217, 218, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 241, 242, 243, 244, 245, 246, 250, 251, 253, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 271, 272, 277, 280, 281, 283, 285, 286, 289, 290, 291, 293, 294, 306], "ebn0_to_snr": [0, 156, 168, 176, 182, 233, 309], "esn0_to_ebn0": [0, 20, 125, 178, 235, 309], "esn0": [0, 7, 18, 29, 123, 135, 156, 168, 176, 180, 182, 235, 236, 270, 306], "esn0_to_snr": [0, 236, 306, 309], "sp": [0, 6, 7, 18, 19, 22, 24, 30, 123, 124, 128, 130, 136, 156, 157, 168, 169, 176, 177, 182, 183, 233, 236, 241, 244, 258, 267, 274, 280, 281, 283, 285, 286, 287, 288, 304, 306, 307], "1": [0, 3, 6, 8, 9, 11, 12, 13, 16, 19, 22, 24, 32, 34, 37, 44, 47, 51, 53, 54, 55, 58, 59, 60, 61, 63, 64, 65, 72, 75, 76, 78, 79, 82, 87, 88, 90, 98, 99, 100, 101, 106, 116, 117, 118, 119, 121, 122, 123, 124, 127, 128, 129, 130, 137, 139, 141, 142, 148, 152, 156, 157, 158, 160, 162, 168, 169, 170, 176, 177, 178, 179, 180, 181, 182, 183, 184, 192, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 255, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 268, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 310], "snr_to_ebn0": [0, 20, 125, 178, 213, 285, 309], "snr": [0, 2, 4, 7, 60, 61, 63, 65, 67, 68, 69, 70, 71, 156, 168, 176, 182, 210, 212, 213, 263, 285, 286, 287, 288, 295, 306, 309], "snr_to_esn0": [0, 29, 135, 180, 286, 309], "pack": [1, 65, 67, 156, 168, 176, 182, 246, 250, 308, 309], "bpe": [1, 250, 289], "int_": [1, 5, 6, 18, 22, 123, 127, 128, 156, 168, 176, 182, 215, 217, 218, 228, 229, 230, 242, 245, 250, 289, 295], "binari": [1, 4, 6, 157, 169, 177, 181, 183, 214, 215, 216, 217, 218, 219, 230, 243, 250, 273, 289, 291, 295, 306, 308, 309], "arrai": [1, 33, 65, 78, 106, 119, 124, 156, 157, 160, 168, 169, 176, 177, 181, 182, 183, 192, 194, 195, 198, 208, 211, 214, 215, 217, 218, 228, 229, 230, 234, 237, 242, 243, 245, 250, 251, 253, 274, 277, 289, 291, 303], "an": [1, 2, 3, 4, 9, 11, 32, 54, 58, 60, 72, 74, 78, 80, 98, 99, 100, 101, 103, 106, 108, 116, 117, 118, 121, 122, 124, 157, 158, 160, 169, 177, 178, 180, 183, 184, 201, 206, 213, 224, 250, 256, 261, 270, 274, 289, 292, 296, 299, 308, 309], "multipl": [1, 78, 106, 250, 289, 306, 309], "bit": [1, 5, 7, 18, 20, 21, 65, 67, 70, 123, 125, 126, 156, 157, 168, 169, 176, 177, 178, 181, 182, 183, 213, 215, 216, 218, 219, 232, 233, 235, 246, 250, 256, 285, 289, 308, 309], "element": [1, 246, 250, 289], "unpack": [1, 65, 67, 246, 289, 306, 308, 309], "hexdump": [1, 65, 246, 308, 309], "byte": [1, 246], "width": [1, 98, 224, 246], "16": [1, 88, 98, 178, 180, 181, 224, 232, 233, 235, 243, 246, 256, 270, 277, 280, 283, 285, 286, 291, 304, 309], "str": [1, 59, 246, 258, 264, 267, 268, 271], "return": [1, 6, 10, 20, 22, 24, 29, 32, 33, 37, 45, 47, 50, 51, 54, 58, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 75, 77, 78, 79, 80, 82, 85, 89, 92, 98, 100, 102, 106, 108, 113, 116, 118, 121, 125, 127, 128, 129, 130, 135, 140, 151, 153, 154, 158, 161, 167, 171, 173, 174, 178, 180, 184, 185, 199, 200, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 302, 303, 304, 306, 309], "specifi": [1, 65, 68, 69, 71, 148, 153, 154, 170, 173, 174, 212, 213, 230, 246, 297, 302, 303, 309], "class": [2, 3, 5, 6, 9, 18, 32, 37, 54, 58, 60, 65, 67, 68, 69, 70, 71, 72, 88, 98, 100, 116, 118, 121, 123, 139, 148, 156, 158, 160, 168, 170, 176, 182, 184, 201, 206, 296, 302, 303, 306, 308, 309], "replicacorrel": [2, 201, 202, 203, 204, 205, 309], "implement": [2, 3, 6, 9, 18, 32, 54, 58, 60, 72, 88, 98, 100, 116, 118, 121, 123, 139, 143, 148, 156, 158, 160, 168, 170, 176, 182, 184, 201, 206, 210, 296, 301], "clairvoy": [2, 201], "replica": [2, 201], "correl": [2, 201, 214, 243, 291, 293], "energydetector": [2, 60, 61, 62, 63, 64, 309], "energi": [2, 20, 29, 60, 125, 135, 178, 180, 201, 202, 203, 204, 205, 213, 232, 233, 234, 235, 236, 241, 244, 256, 270, 280, 281, 283, 285, 286, 308, 309], "albersheim": [2, 210, 309], "p_d": [2, 7, 60, 61, 63, 201, 202, 204, 210, 263, 269, 309], "p_fa": [2, 7, 60, 61, 62, 63, 64, 201, 202, 203, 204, 205, 210, 269], "estim": [2, 18, 22, 37, 123, 127, 128, 156, 168, 176, 182, 210, 264, 271, 305], "minimum": [2, 6, 156, 210, 309], "requir": [2, 33, 73, 185, 207, 210, 297, 298, 299, 300, 309], "singl": [2, 63, 78, 106, 178, 180, 210], "sampl": [2, 3, 11, 12, 13, 18, 19, 22, 24, 30, 32, 33, 37, 44, 52, 54, 58, 61, 62, 63, 64, 72, 73, 76, 78, 79, 80, 82, 85, 88, 91, 94, 98, 106, 108, 113, 118, 119, 123, 124, 128, 130, 136, 139, 141, 145, 156, 157, 158, 160, 161, 162, 164, 167, 168, 169, 176, 177, 182, 183, 184, 185, 189, 196, 206, 207, 208, 210, 212, 231, 233, 236, 239, 241, 244, 249, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 271, 272, 274, 280, 281, 283, 284, 285, 286, 287, 288, 290, 295, 301, 304, 305, 307, 308, 309], "given": [2, 60, 65, 67, 68, 69, 71, 88, 89, 184, 195, 198, 201, 210, 238, 302, 303], "n_": [2, 61, 62, 63, 64, 210], "nc": [2, 61, 62, 63, 64, 210], "non": [2, 33, 61, 62, 63, 64, 73, 185, 207, 210, 244, 274, 281], "coher": [2, 61, 62, 63, 64, 210], "combin": [2, 210], "achiev": [2, 210, 306, 307], "probabl": [2, 7, 60, 61, 62, 63, 64, 199, 200, 201, 202, 203, 204, 205, 210, 215, 216, 218, 219, 230, 263, 269, 295, 309], "fals": [2, 5, 11, 32, 34, 54, 55, 59, 60, 61, 62, 63, 64, 72, 74, 78, 88, 90, 100, 101, 103, 106, 117, 118, 119, 121, 122, 156, 158, 159, 168, 176, 178, 180, 182, 186, 201, 202, 203, 204, 205, 206, 208, 210, 211, 215, 218, 230, 234, 249, 253, 254, 257, 264, 269, 271, 274, 282, 303, 307], "alarm": [2, 60, 61, 62, 63, 64, 201, 202, 203, 204, 205, 210, 269], "p_": [2, 7, 60, 61, 62, 63, 64, 178, 180, 201, 202, 203, 204, 205, 210, 211, 212, 221, 230, 238, 248, 251, 253, 256, 264, 269, 270], "fa": [2, 7, 60, 61, 62, 63, 64, 201, 202, 203, 204, 205, 210, 269], "thi": [2, 19, 37, 54, 67, 68, 69, 71, 72, 100, 118, 119, 123, 124, 137, 148, 156, 161, 168, 169, 176, 177, 181, 182, 183, 206, 208, 210, 212, 213, 215, 218, 230, 231, 238, 240, 243, 258, 264, 268, 271, 274, 290, 291, 297, 299, 300, 301, 303, 305, 306, 307], "function": [2, 7, 8, 37, 46, 58, 72, 98, 100, 101, 121, 139, 160, 199, 200, 210, 213, 231, 241, 243, 256, 263, 264, 269, 270, 271, 280, 283, 290, 291, 302, 303, 305, 307, 308, 309], "": [2, 3, 7, 18, 22, 24, 32, 37, 45, 47, 48, 49, 51, 52, 54, 58, 60, 67, 68, 69, 70, 71, 72, 78, 79, 82, 85, 98, 100, 106, 113, 116, 118, 121, 123, 124, 127, 128, 129, 130, 148, 156, 158, 168, 176, 182, 184, 196, 201, 203, 205, 206, 210, 212, 213, 233, 236, 238, 239, 247, 257, 258, 259, 260, 262, 264, 265, 266, 267, 268, 271, 272, 274, 275, 284, 285, 286, 287, 288, 300, 301, 304, 306, 308, 309], "equat": [2, 45, 47, 48, 49, 50, 51, 61, 62, 64, 100, 121, 168, 176, 182, 202, 203, 205, 210, 240], "finit": [3, 72, 308, 309], "impuls": [3, 7, 32, 54, 58, 72, 80, 98, 100, 108, 116, 118, 121, 158, 184, 206, 222, 223, 224, 225, 226, 227, 241, 259, 261, 280, 283, 307, 308, 309], "respons": [3, 7, 32, 54, 58, 72, 78, 80, 85, 98, 100, 106, 108, 113, 116, 118, 121, 158, 184, 206, 222, 223, 224, 225, 226, 227, 241, 259, 260, 261, 262, 266, 272, 280, 283, 307, 308, 309], "design_lowpass_fir": [3, 78, 226, 309], "order": [3, 18, 19, 25, 32, 33, 34, 37, 54, 55, 58, 59, 65, 70, 72, 73, 81, 88, 90, 93, 98, 100, 109, 116, 118, 119, 121, 123, 124, 131, 139, 141, 156, 158, 168, 176, 177, 182, 183, 184, 185, 192, 194, 206, 207, 208, 212, 222, 223, 225, 226, 227, 232, 233, 235, 238, 239, 241, 257, 258, 267, 268, 280, 283, 284, 285, 296, 303, 304, 305, 306, 309], "design": [3, 19, 32, 34, 36, 54, 55, 56, 98, 118, 119, 120, 124, 169, 177, 183, 206, 208, 209, 222, 223, 224, 225, 226, 227, 297, 308, 309], "lowpass": [3, 226], "h": [3, 7, 18, 19, 23, 27, 28, 31, 32, 34, 54, 55, 58, 60, 72, 74, 78, 80, 87, 98, 100, 106, 108, 116, 118, 119, 121, 123, 124, 133, 134, 138, 139, 156, 158, 168, 169, 176, 177, 182, 183, 184, 186, 192, 195, 198, 201, 206, 208, 222, 223, 224, 225, 226, 227, 241, 258, 259, 261, 262, 266, 277, 280, 283, 304, 305, 307], "n": [3, 5, 6, 7, 8, 9, 10, 18, 19, 22, 24, 27, 28, 31, 32, 33, 34, 37, 54, 55, 58, 59, 60, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 87, 88, 89, 92, 95, 98, 99, 100, 102, 103, 104, 108, 109, 113, 116, 117, 118, 119, 121, 123, 124, 128, 130, 133, 134, 138, 139, 140, 156, 158, 160, 161, 167, 168, 169, 176, 177, 182, 183, 184, 185, 186, 190, 192, 193, 194, 195, 198, 199, 200, 201, 203, 205, 206, 207, 208, 211, 212, 213, 214, 217, 220, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 245, 247, 249, 251, 253, 254, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 271, 272, 274, 277, 282, 284, 285, 286, 287, 288, 290, 291, 293, 294, 295, 305, 307, 308], "us": [3, 7, 9, 16, 18, 19, 22, 32, 34, 36, 54, 55, 56, 57, 58, 59, 72, 74, 77, 78, 83, 88, 90, 92, 98, 100, 101, 103, 106, 111, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 139, 143, 148, 153, 154, 156, 158, 159, 168, 169, 170, 173, 174, 176, 177, 182, 183, 184, 186, 190, 193, 197, 206, 208, 209, 213, 216, 219, 222, 223, 224, 225, 226, 227, 238, 243, 246, 250, 257, 258, 259, 261, 263, 264, 271, 272, 289, 291, 297, 298, 299, 300, 302, 303, 305, 306, 307, 308, 309, 310], "window": [3, 54, 58, 59, 78, 118, 206, 222, 223, 224, 225, 226, 227, 264, 271, 309], "method": [3, 7, 36, 56, 117, 119, 120, 186, 190, 193, 208, 209, 222, 223, 224, 225, 226, 227, 264, 271, 302, 303, 309], "design_highpass_fir": [3, 225, 309], "highpass": [3, 225], "design_bandpass_fir": [3, 222, 309], "bandpass": [3, 222], "design_bandstop_fir": [3, 223, 309], "bandstop": [3, 223], "infinit": [3, 100, 116, 308, 309], "polyphasefir": [3, 32, 54, 118, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 206, 309], "gener": [3, 6, 156, 168, 176, 182, 184, 212, 215, 217, 218, 230, 242, 269, 297, 306, 309], "interpol": [3, 18, 31, 32, 54, 88, 118, 119, 120, 123, 138, 156, 168, 176, 182, 184, 186, 190, 191, 193, 206, 208, 227, 258, 290, 304, 306, 308, 309], "decim": [3, 18, 22, 24, 28, 32, 54, 55, 56, 57, 118, 123, 124, 127, 128, 129, 130, 134, 137, 156, 157, 168, 169, 176, 177, 181, 182, 183, 184, 186, 188, 190, 193, 206, 208, 227, 231, 306, 308, 309], "ration": [3, 206, 208, 227, 309], "channel": [3, 32, 33, 34, 35, 36, 156, 168, 178, 180, 184, 186, 193, 213, 215, 216, 218, 219, 230, 256, 270, 308, 309], "design_multirate_fir": [3, 34, 55, 119, 208, 227, 309], "multir": [3, 32, 33, 54, 118, 206, 227, 277, 309], "kaiser": [3, 32, 34, 36, 54, 55, 56, 118, 119, 120, 206, 208, 209, 222, 223, 224, 225, 226, 227, 309], "polyphase_decompos": [3, 277, 309], "branch": [3, 32, 54, 118, 184, 186, 187, 195, 198, 206, 277, 298, 299], "tap": [3, 32, 34, 54, 55, 58, 72, 87, 88, 97, 98, 100, 104, 105, 116, 118, 119, 121, 158, 184, 186, 192, 194, 195, 198, 206, 208, 277, 302, 303], "decompos": [3, 32, 54, 118, 206, 277], "prototyp": [3, 32, 34, 54, 55, 118, 119, 184, 185, 186, 192, 195, 198, 206, 207, 208, 277, 309], "matrix": [3, 230, 277, 295], "h_i": [3, 32, 54, 118, 184, 194, 195, 198, 206, 277, 302], "b": [3, 32, 54, 100, 103, 118, 184, 186, 187, 192, 194, 195, 198, 206, 210, 213, 241, 246, 259, 261, 272, 277, 297, 298, 307], "phase": [3, 7, 18, 19, 23, 26, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 72, 82, 98, 118, 123, 124, 132, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 206, 210, 239, 247, 249, 265, 266, 267, 277, 295, 308, 309], "movingaverag": [3, 121, 158, 159, 309], "move": [3, 121, 122, 158, 159, 308, 309], "averag": [3, 5, 65, 121, 122, 148, 153, 154, 156, 158, 159, 168, 170, 173, 174, 182, 211, 212, 213, 238, 251, 264, 308, 309], "differenti": [3, 6, 58, 59, 156, 178, 180, 228, 229, 274, 308, 309], "integr": [3, 37, 42, 61, 62, 63, 64, 116, 117, 121, 122, 139, 141, 144, 158, 210, 296, 300, 303, 308, 309], "leakyintegr": [3, 121, 122, 158, 309], "leaki": [3, 121, 122, 158, 308, 309], "farrowresampl": [3, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 301, 309], "piecewis": [3, 88, 90, 93], "polynomi": [3, 88, 90, 93, 309], "farrow": [3, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 308, 309], "fractionaldelai": [3, 98, 99, 309], "fraction": [3, 32, 54, 88, 94, 98, 99, 118, 184, 196, 206, 224, 241, 301, 308, 309], "delai": [3, 7, 32, 33, 54, 58, 72, 73, 76, 79, 82, 88, 91, 98, 99, 118, 139, 158, 160, 184, 185, 189, 206, 207, 224, 228, 229, 244, 260, 265, 281, 305, 308, 309], "design_frac_delay_fir": [3, 224, 309], "length": [3, 6, 7, 22, 24, 32, 33, 34, 54, 55, 58, 59, 63, 72, 73, 75, 80, 85, 87, 98, 99, 102, 118, 119, 122, 124, 128, 130, 157, 158, 159, 169, 177, 183, 184, 185, 206, 207, 208, 214, 217, 222, 223, 224, 225, 226, 227, 241, 242, 243, 244, 259, 261, 264, 268, 271, 272, 280, 281, 283, 287, 291, 293, 294, 298, 301, 304, 307], "mix": [3, 32, 249, 308, 309], "freq": [3, 4, 32, 54, 58, 72, 78, 98, 100, 106, 116, 118, 121, 158, 160, 161, 184, 206, 239, 240, 249, 252, 292, 295, 301, 305], "float": [3, 5, 6, 9, 11, 12, 13, 14, 15, 16, 18, 19, 23, 26, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 63, 65, 67, 68, 69, 71, 72, 78, 79, 82, 88, 89, 92, 98, 99, 100, 101, 106, 107, 116, 118, 119, 121, 122, 123, 124, 132, 139, 141, 142, 144, 145, 146, 148, 149, 150, 152, 155, 156, 157, 158, 160, 162, 163, 164, 165, 168, 169, 170, 175, 176, 177, 179, 182, 183, 184, 196, 204, 206, 208, 211, 212, 213, 215, 218, 220, 222, 223, 224, 225, 226, 227, 238, 239, 241, 247, 249, 251, 253, 254, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 271, 273, 274, 280, 282, 283, 284, 295], "0": [3, 6, 8, 9, 11, 16, 18, 19, 22, 24, 32, 33, 44, 54, 58, 60, 63, 65, 72, 73, 78, 79, 82, 88, 98, 99, 100, 101, 103, 104, 105, 106, 116, 118, 119, 121, 123, 124, 127, 128, 129, 130, 137, 141, 156, 157, 158, 160, 162, 168, 169, 176, 177, 179, 181, 182, 183, 184, 185, 192, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 245, 247, 248, 249, 250, 252, 255, 257, 258, 259, 260, 261, 262, 265, 266, 267, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 310], "time": [3, 5, 9, 37, 44, 45, 47, 48, 49, 50, 51, 58, 72, 88, 100, 116, 121, 139, 141, 148, 158, 168, 170, 176, 182, 211, 212, 220, 222, 223, 225, 226, 230, 231, 234, 236, 237, 239, 241, 243, 245, 247, 249, 251, 253, 254, 258, 259, 264, 268, 271, 274, 280, 282, 283, 284, 286, 287, 288, 290, 291, 295, 301, 302, 303, 307, 308, 309], "domain": [3, 5, 211, 212, 220, 222, 223, 225, 226, 231, 234, 237, 239, 245, 247, 249, 251, 253, 254, 259, 264, 268, 271, 274, 282, 284, 287, 288, 290, 295, 308, 309], "complex": [3, 5, 7, 18, 22, 24, 32, 37, 54, 58, 60, 61, 62, 63, 64, 72, 78, 98, 100, 106, 116, 118, 121, 123, 124, 127, 128, 129, 130, 137, 148, 151, 156, 157, 158, 160, 161, 167, 168, 169, 170, 171, 176, 177, 181, 182, 183, 184, 201, 202, 203, 204, 205, 206, 212, 213, 231, 238, 247, 249, 257, 258, 260, 262, 264, 265, 266, 268, 271, 273, 274, 287, 288, 290, 295, 301, 302, 303, 305, 306, 308, 309], "exponenti": [3, 32, 161, 231, 249, 287, 288, 290, 301, 302, 303, 309], "real": [3, 61, 62, 64, 156, 168, 199, 200, 202, 203, 205, 212, 249, 258, 260, 262, 264, 265, 266, 268, 271, 274, 287, 288, 301, 302, 303, 305, 308, 309], "sinusoid": [3, 176, 212, 249, 287, 288, 303, 309], "to_complex_bb": [3, 287, 309], "x_r": [3, 287, 288], "complex_": [3, 7, 9, 10, 18, 24, 123, 127, 128, 129, 130, 137, 156, 160, 167, 168, 170, 171, 176, 181, 182, 257, 273, 287, 288, 293, 294], "passband": [3, 98, 222, 223, 224, 225, 226, 241, 244, 280, 281, 283, 287, 288, 304, 309], "center": [3, 32, 222, 223, 224, 225, 226, 244, 274, 281, 287, 288, 309], "f_": [3, 18, 19, 23, 30, 32, 33, 37, 44, 52, 54, 78, 79, 82, 106, 118, 123, 124, 136, 156, 157, 168, 169, 176, 177, 182, 183, 184, 185, 196, 206, 207, 222, 223, 225, 226, 231, 233, 236, 239, 241, 249, 258, 259, 260, 262, 264, 265, 266, 267, 268, 271, 274, 284, 285, 286, 287, 288, 290, 301, 302, 303, 305, 307], "r": [3, 9, 32, 54, 88, 89, 91, 92, 118, 184, 185, 196, 206, 207, 213, 231, 232, 233, 235, 238, 241, 249, 280, 283, 285, 287, 288, 290, 297, 298, 299, 300, 303, 304, 305, 307], "4": [3, 7, 9, 32, 45, 47, 54, 58, 61, 63, 65, 78, 88, 90, 98, 106, 116, 118, 121, 148, 156, 157, 158, 160, 168, 169, 170, 176, 178, 179, 180, 181, 182, 184, 192, 194, 195, 198, 201, 202, 203, 204, 205, 206, 210, 212, 213, 214, 216, 217, 219, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 235, 236, 238, 239, 240, 241, 242, 243, 244, 246, 247, 249, 250, 252, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 270, 272, 273, 274, 275, 276, 277, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 299, 301, 303, 304, 305, 306], "rate": [3, 5, 7, 9, 11, 12, 13, 18, 19, 20, 23, 29, 32, 33, 34, 37, 44, 52, 54, 55, 65, 66, 67, 69, 70, 78, 79, 82, 88, 89, 91, 92, 106, 118, 119, 123, 125, 135, 156, 168, 176, 178, 180, 182, 184, 185, 188, 191, 196, 206, 207, 208, 227, 231, 232, 233, 235, 239, 249, 256, 258, 259, 260, 262, 264, 265, 266, 267, 268, 270, 271, 274, 284, 285, 287, 288, 290, 295, 308, 309], "baseband": [3, 7, 37, 156, 168, 176, 182, 249, 258, 267, 287, 288, 304, 305, 309], "x_c": [3, 287, 288], "c": [3, 32, 33, 34, 35, 37, 45, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 123, 124, 137, 139, 156, 168, 176, 181, 182, 213, 216, 219, 240, 252, 273, 287, 288, 292, 305], "2": [3, 6, 7, 9, 18, 19, 25, 32, 33, 37, 45, 47, 50, 54, 58, 60, 61, 62, 63, 64, 65, 72, 76, 78, 79, 82, 88, 98, 106, 116, 118, 121, 122, 123, 124, 131, 148, 156, 158, 160, 168, 169, 170, 176, 177, 178, 179, 180, 181, 182, 183, 184, 192, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 297, 300, 301, 302, 303, 304, 305, 306, 307], "to_real_pb": [3, 288, 304, 309], "2f_": [3, 288], "upsampl": [3, 118, 206, 290, 309], "factor": [3, 5, 37, 44, 53, 121, 122, 124, 139, 141, 142, 169, 177, 183, 220, 231, 290, 305], "insert": [3, 118, 206, 290], "zero": [3, 7, 32, 54, 58, 72, 77, 88, 92, 94, 98, 99, 100, 101, 106, 115, 116, 118, 119, 121, 139, 158, 161, 184, 206, 208, 224, 243, 244, 250, 259, 260, 261, 262, 265, 266, 272, 276, 281, 287, 290, 291, 302, 304, 305, 307, 308, 309], "between": [3, 5, 11, 17, 34, 54, 55, 59, 74, 86, 90, 96, 101, 103, 114, 117, 118, 119, 122, 159, 170, 186, 206, 208, 237, 240, 245, 264, 268, 271, 290, 305, 308], "each": [3, 32, 33, 34, 54, 55, 73, 118, 119, 184, 185, 186, 190, 193, 194, 206, 207, 208, 227, 238, 246, 264, 268, 271, 290], "downsampl": [3, 32, 54, 206, 231, 309], "discard": [3, 32, 54, 206, 231], "everi": [3, 32, 54, 65, 206, 231, 301], "bsc_capac": [4, 219, 309], "p": [4, 8, 32, 54, 118, 119, 160, 161, 184, 191, 196, 199, 200, 206, 208, 215, 216, 218, 219, 227, 230, 295], "calcul": [4, 5, 213, 216, 219, 238, 240, 252, 292, 309], "symmetr": [4, 218, 219, 230, 287, 288, 295, 308], "bsc": [4, 218, 219, 230, 295, 308, 309], "bec_capac": [4, 216, 309], "erasur": [4, 215, 216, 230, 295, 308], "bec": [4, 215, 216, 230, 295, 308, 309], "awgn_capac": [4, 213, 309], "addit": [4, 212, 213, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 290, 295, 308], "white": [4, 212, 213, 295, 308], "gaussian": [4, 6, 58, 116, 121, 158, 212, 213, 241, 295, 308, 309], "nois": [4, 9, 20, 29, 37, 38, 39, 44, 50, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 125, 135, 139, 141, 145, 156, 168, 176, 178, 180, 182, 201, 202, 203, 204, 205, 212, 213, 232, 233, 235, 236, 256, 270, 285, 286, 295, 305, 308], "awgn": [4, 156, 168, 176, 178, 180, 182, 212, 213, 238, 256, 257, 270, 287, 288, 295, 306, 308, 309], "fspl": [4, 240], "distanc": [4, 237, 240, 245, 308, 309], "free": [4, 156, 168, 176, 182, 240, 308], "space": [4, 32, 78, 106, 240, 308], "wavelength": [4, 292, 309], "lambda": [4, 240, 292], "electromagnet": [4, 292], "wave": [4, 88, 156, 292], "frequenc": [4, 18, 19, 23, 27, 32, 37, 45, 47, 49, 54, 58, 72, 78, 79, 82, 88, 98, 100, 106, 116, 118, 121, 139, 156, 158, 160, 161, 184, 206, 222, 223, 224, 225, 226, 231, 239, 240, 249, 252, 259, 260, 262, 264, 265, 266, 271, 287, 288, 290, 292, 295, 307, 308, 309], "f": [4, 19, 23, 32, 45, 47, 54, 58, 63, 78, 79, 82, 98, 106, 116, 118, 160, 161, 206, 210, 212, 239, 240, 241, 249, 252, 280, 283, 284, 292, 293, 298, 301, 302, 303, 304, 305, 306, 307], "parabolic_antenna": [4, 252, 309], "tupl": [4, 32, 54, 58, 59, 60, 63, 65, 67, 70, 72, 78, 79, 82, 98, 100, 106, 116, 118, 121, 123, 127, 128, 148, 153, 154, 156, 158, 168, 170, 173, 174, 176, 182, 184, 201, 204, 206, 211, 234, 237, 245, 251, 252, 253, 257, 259, 260, 261, 262, 265, 266, 272, 273, 276], "gain": [4, 9, 10, 11, 14, 16, 17, 37, 40, 41, 42, 43, 44, 100, 101, 107, 116, 121, 139, 141, 144, 146, 148, 155, 160, 162, 163, 170, 175, 210, 222, 223, 224, 225, 226, 240, 241, 244, 252, 280, 281, 283, 296, 305, 308, 309], "g": [4, 70, 252, 299], "beamwidth": [4, 252], "theta": [4, 160, 162, 165, 252], "parabol": [4, 252], "reflector": [4, 252], "signal": [5, 7, 9, 10, 11, 12, 13, 18, 19, 27, 32, 33, 37, 45, 47, 50, 51, 54, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 77, 88, 89, 92, 98, 100, 102, 116, 118, 121, 123, 124, 133, 139, 140, 148, 149, 150, 152, 156, 158, 160, 161, 167, 168, 169, 176, 177, 182, 183, 184, 185, 186, 190, 193, 201, 202, 203, 204, 205, 206, 207, 211, 212, 213, 220, 221, 222, 223, 225, 226, 227, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 245, 247, 248, 249, 251, 252, 253, 254, 258, 259, 260, 262, 264, 265, 266, 267, 268, 271, 274, 277, 282, 284, 285, 286, 287, 288, 290, 292, 302, 303, 305, 307, 308, 309], "peak_pow": [5, 251, 253, 309], "peak": [5, 156, 168, 182, 220, 238, 251, 253, 254], "average_pow": [5, 211, 251, 309], "papr": [5, 156, 168, 182, 251, 304, 309], "ratio": [5, 19, 20, 23, 29, 50, 61, 63, 65, 67, 68, 69, 70, 71, 125, 135, 156, 168, 178, 180, 182, 202, 204, 212, 213, 232, 233, 235, 236, 251, 255, 256, 270, 278, 279, 285, 286], "peak_voltag": [5, 220, 254, 309], "bool": [5, 9, 11, 17, 32, 34, 54, 55, 58, 59, 61, 62, 63, 64, 72, 74, 78, 86, 88, 90, 96, 98, 100, 101, 103, 106, 114, 116, 117, 118, 119, 121, 122, 156, 158, 159, 168, 176, 178, 180, 182, 184, 186, 202, 203, 204, 205, 206, 208, 211, 234, 249, 253, 254, 257, 266, 268, 273, 274, 282], "rms_voltag": [5, 220, 282, 309], "root": [5, 6, 124, 169, 177, 183, 238, 258, 274, 282, 283, 293, 294, 302, 308], "mean": [5, 238, 264, 271, 282, 307], "squar": [5, 6, 124, 169, 177, 183, 238, 240, 252, 274, 282, 283, 302], "rm": [5, 148, 149, 150, 152, 220, 238, 282], "crest_factor": [5, 220, 251, 309], "crest": [5, 220], "euclidean": [5, 237, 308, 309], "y": [5, 6, 9, 10, 32, 54, 58, 72, 73, 77, 88, 89, 92, 100, 102, 116, 118, 121, 139, 140, 160, 161, 167, 184, 185, 186, 193, 206, 207, 212, 215, 218, 228, 229, 230, 231, 237, 239, 245, 247, 249, 257, 262, 264, 271, 273, 284, 290, 305, 306], "two": [5, 9, 121, 158, 222, 223, 237, 245, 258, 259, 260, 262, 264, 265, 266, 271, 293, 301, 302, 303], "ham": [5, 78, 222, 223, 225, 226, 245, 308, 309], "errorr": [5, 65, 66, 67, 68, 69, 70, 71, 306, 309], "A": [5, 9, 19, 33, 37, 45, 47, 48, 49, 50, 51, 53, 58, 65, 72, 73, 78, 88, 106, 116, 121, 124, 139, 148, 158, 169, 170, 177, 183, 185, 207, 210, 217, 222, 223, 225, 226, 242, 246, 247, 252, 280, 283, 296, 298, 305], "error": [5, 7, 11, 12, 13, 18, 20, 29, 37, 43, 44, 50, 65, 66, 67, 69, 70, 71, 123, 125, 135, 139, 141, 148, 151, 153, 154, 155, 156, 168, 170, 171, 173, 174, 175, 176, 178, 180, 182, 210, 219, 238, 256, 270, 305, 308, 309], "ber": [5, 7, 18, 20, 65, 123, 125, 156, 168, 176, 178, 182, 256, 306, 308, 309], "symbol": [5, 7, 18, 19, 21, 22, 23, 24, 29, 30, 65, 67, 70, 118, 123, 124, 126, 127, 128, 129, 130, 135, 136, 137, 148, 151, 156, 157, 168, 169, 170, 171, 176, 177, 178, 180, 181, 182, 183, 212, 232, 233, 235, 236, 238, 239, 241, 244, 257, 258, 267, 270, 273, 274, 280, 281, 283, 285, 286, 304, 305, 307, 308, 309], "ser": [5, 7, 18, 29, 65, 123, 135, 156, 168, 176, 180, 182, 270, 306, 308, 309], "evm": [5, 238, 308, 309], "x_hat": [5, 7, 65, 67, 238, 257, 306], "ref": [5, 148, 150, 152, 210, 222, 223, 224, 225, 226, 227, 238, 241, 243, 291], "vector": [5, 65, 78, 94, 106, 222, 223, 225, 226, 238, 264, 271, 308, 309], "magnitud": [5, 7, 9, 11, 15, 58, 98, 116, 121, 158, 214, 224, 238, 243, 259, 262, 291, 293, 308, 309], "hat": [5, 7, 18, 22, 67, 123, 127, 128, 148, 151, 156, 168, 170, 171, 176, 182, 238, 257, 273], "k": [5, 6, 7, 18, 19, 21, 22, 24, 25, 32, 58, 67, 116, 123, 124, 126, 127, 128, 129, 130, 131, 148, 151, 156, 168, 170, 171, 176, 177, 182, 183, 228, 229, 232, 233, 235, 238, 257, 273, 274, 285, 304, 307], "linearmodul": [6, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 153, 154, 173, 174, 176, 273, 309], "amplitud": [6, 32, 123, 124, 148, 149, 150, 152, 247, 295, 301, 305], "arbitrari": [6, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 123, 308, 309], "psk": [6, 148, 168, 170, 176, 177, 178, 179, 180, 181, 182, 183, 212, 238, 239, 247, 256, 257, 258, 270, 273, 274, 284, 304, 305, 308, 309], "shift": [6, 156, 168, 176, 178, 179, 180, 181, 182, 293, 302, 303, 308, 309], "kei": [6, 156, 168, 176, 178, 179, 180, 181, 182, 308, 309], "demodul": [6, 18, 22, 123, 128, 156, 168, 176, 182, 309], "pimpsk": [6, 182, 183, 309], "pi": [6, 9, 19, 23, 32, 54, 58, 88, 106, 116, 118, 148, 160, 168, 170, 176, 182, 183, 206, 212, 231, 240, 241, 247, 249, 252, 259, 260, 261, 262, 265, 266, 272, 276, 280, 283, 287, 288, 290, 293, 301, 302, 303, 305, 308, 309], "m": [6, 18, 19, 21, 22, 24, 25, 32, 54, 100, 103, 105, 116, 118, 121, 123, 124, 126, 127, 128, 129, 130, 131, 137, 148, 156, 168, 170, 176, 177, 181, 182, 183, 184, 192, 194, 206, 230, 232, 233, 235, 240, 273, 285, 297, 298, 299, 300, 308, 309], "oqpsk": [6, 156, 168, 169, 309], "offset": [6, 18, 19, 26, 45, 47, 54, 88, 118, 123, 124, 132, 156, 157, 160, 161, 162, 165, 168, 169, 176, 177, 179, 182, 183, 206, 239, 249, 261, 274, 284, 295, 305, 308, 309], "quadratur": [6, 156, 168, 247], "cpm": [6, 7, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 267, 309], "msk": [6, 156, 157, 267, 309], "rectangular": [6, 19, 117, 124, 169, 177, 183, 281, 304, 307, 308, 309], "span": [6, 7, 19, 124, 169, 177, 183, 241, 244, 258, 267, 280, 281, 283, 304, 307, 309], "half_sin": [6, 157, 244, 309], "half": [6, 156, 168, 244, 252, 308, 309], "sine": [6, 88, 156, 161, 244, 308, 309], "time_bandwidth": [6, 241], "raised_cosin": [6, 124, 169, 177, 183, 258, 280, 307, 309], "alpha": [6, 9, 11, 12, 32, 121, 122, 124, 169, 177, 183, 241, 275, 280, 283, 304, 307], "rais": [6, 58, 116, 124, 169, 177, 183, 258, 274, 280, 283, 302, 308], "cosin": [6, 58, 116, 124, 161, 169, 177, 183, 258, 274, 280, 283, 302, 308, 309], "rc": [6, 124, 169, 177, 183, 280], "root_raised_cosin": [6, 58, 116, 124, 169, 177, 183, 258, 259, 260, 261, 262, 265, 266, 272, 276, 283, 302, 304, 306, 307, 309], "srrc": [6, 124, 168, 169, 176, 177, 182, 183, 258, 274, 283, 304, 306], "binary_cod": [6, 217, 309], "code": [6, 157, 169, 177, 181, 183, 214, 217, 232, 233, 235, 242, 243, 257, 273, 285, 291, 294, 299, 306, 309], "gray_cod": [6, 242, 309], "grai": [6, 19, 156, 157, 168, 169, 176, 177, 181, 182, 183, 242, 257, 273, 306, 308], "diff_encod": [6, 156, 168, 176, 178, 180, 182, 228, 229, 309], "y_prev": [6, 228, 229], "input": [6, 9, 10, 32, 33, 34, 37, 45, 47, 50, 51, 54, 55, 58, 59, 72, 73, 74, 80, 84, 85, 88, 89, 90, 91, 94, 95, 98, 100, 101, 102, 103, 108, 113, 116, 117, 118, 119, 121, 122, 139, 140, 158, 159, 160, 161, 168, 176, 178, 180, 182, 184, 185, 186, 189, 190, 199, 206, 207, 208, 212, 213, 215, 216, 218, 219, 221, 228, 229, 230, 231, 248, 250, 255, 261, 272, 278, 279, 289, 290, 295, 302, 303, 305], "data": [6, 148, 153, 170, 173, 228, 229, 246, 250, 274, 289, 308], "diff_decod": [6, 228, 229, 309], "decod": [6, 228], "use_styl": [7, 275], "appli": [7, 32, 54, 59, 118, 124, 206, 239, 247, 257, 258, 261, 264, 271, 273, 274, 275, 284, 295], "default": [7, 80, 85, 157, 169, 177, 181, 183, 211, 234, 237, 245, 251, 253, 257, 260, 262, 264, 265, 266, 268, 271, 273, 275, 306], "matplotlib": [7, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 301, 302, 303, 304, 305, 306, 307, 308], "rcparam": [7, 275], "time_domain": [7, 9, 54, 58, 88, 116, 118, 121, 156, 158, 160, 168, 176, 182, 206, 212, 231, 243, 249, 274, 287, 288, 290, 291, 304, 305, 306, 307, 309], "ani": [7, 32, 54, 58, 72, 78, 98, 100, 106, 116, 118, 121, 158, 160, 161, 184, 206, 214, 221, 231, 243, 248, 274, 290, 291, 294, 300], "dtype": [7, 32, 54, 58, 72, 78, 98, 100, 106, 116, 118, 121, 156, 158, 160, 161, 168, 176, 182, 184, 206, 214, 243, 250, 274, 289, 291, 294, 305], "scalartyp": [7, 274], "t": [7, 37, 39, 44, 60, 139, 141, 145, 201, 241, 246, 274, 280, 283, 297, 301, 309], "raster": [7, 258, 267, 268, 308, 309], "none": [7, 18, 20, 32, 54, 58, 59, 63, 72, 78, 80, 85, 88, 94, 98, 106, 118, 124, 139, 147, 158, 161, 169, 177, 183, 184, 204, 206, 211, 212, 213, 215, 218, 222, 223, 225, 226, 230, 234, 237, 245, 250, 251, 253, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 271, 272, 273, 274, 289, 295, 301, 304, 306], "periodogram": [7, 32, 231, 264, 287, 288, 290, 304, 308, 309], "power": [7, 156, 168, 176, 182, 211, 212, 213, 221, 238, 241, 243, 244, 248, 251, 252, 253, 264, 280, 281, 283, 291, 307, 308], "densiti": [7, 50, 264, 304, 307], "xx": [7, 264], "welch": [7, 264, 271], "spectrogram": [7, 271, 308, 309], "constel": [7, 156, 168, 176, 179, 182, 212, 238, 239, 247, 257, 284, 293, 308, 309], "symbol_map": [7, 123, 124, 137, 156, 168, 176, 179, 181, 182, 238, 273, 306, 309], "map": [7, 123, 124, 129, 137, 156, 160, 168, 176, 181, 182, 238, 273, 308, 309], "ey": [7, 156, 168, 176, 182, 258, 308, 309], "diagram": [7, 9, 32, 37, 54, 72, 118, 121, 139, 160, 206, 228, 229, 258, 308, 309], "phase_tre": [7, 156, 267, 309], "tree": [7, 267, 309], "continu": [7, 18, 19, 116, 156, 267, 301, 309], "kwarg": [7, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276], "e_b": [7, 18, 20, 67, 68, 69, 70, 71, 123, 125, 156, 168, 176, 178, 182, 213, 232, 233, 235, 256, 285, 308], "n_0": [7, 11, 12, 13, 18, 20, 29, 50, 67, 68, 69, 70, 71, 123, 125, 135, 156, 168, 176, 178, 180, 182, 212, 213, 232, 233, 235, 236, 238, 256, 257, 270, 285, 286, 306, 308], "e_": [7, 18, 29, 67, 68, 69, 70, 71, 123, 135, 156, 168, 176, 180, 182, 212, 213, 232, 235, 236, 238, 257, 270, 286, 306, 308], "roc": [7, 60, 63, 201, 204, 269, 309], "receiv": [7, 9, 18, 22, 28, 60, 61, 63, 65, 67, 123, 127, 128, 134, 148, 149, 151, 152, 156, 168, 170, 171, 176, 178, 180, 182, 201, 202, 203, 204, 205, 238, 240, 258, 263, 269, 309], "oper": [7, 11, 60, 63, 201, 204, 269, 309], "characterist": [7, 60, 63, 201, 204, 269, 309], "curv": [7, 60, 63, 178, 180, 201, 204, 256, 269, 270, 309], "enr": [7, 201, 202, 204, 263], "impulse_respons": [7, 32, 54, 58, 72, 80, 98, 100, 108, 116, 118, 121, 158, 184, 206, 222, 223, 224, 225, 226, 227, 241, 244, 261, 280, 281, 283, 302, 303, 307, 309], "step_respons": [7, 32, 54, 58, 72, 85, 98, 100, 113, 116, 118, 121, 158, 184, 206, 272, 302, 303, 305, 309], "step": [7, 32, 54, 58, 72, 85, 98, 100, 113, 116, 118, 121, 158, 160, 161, 167, 184, 206, 259, 272, 308], "zeros_pol": [7, 276, 303, 309], "pole": [7, 100, 101, 106, 110, 116, 121, 259, 260, 261, 262, 265, 266, 272, 276, 302, 308], "magnitude_respons": [7, 58, 78, 98, 106, 116, 121, 158, 222, 223, 224, 225, 226, 227, 241, 244, 262, 280, 281, 283, 302, 303, 305, 307, 309], "omega": [7, 32, 54, 58, 72, 78, 79, 82, 88, 98, 100, 106, 116, 118, 121, 158, 160, 162, 164, 184, 206, 259, 260, 262, 265, 266, 305], "phase_respons": [7, 78, 106, 266, 309], "angl": [7, 170, 266, 305], "phase_delai": [7, 32, 54, 58, 72, 82, 98, 118, 158, 184, 206, 265, 309], "tau_": [7, 32, 54, 58, 72, 82, 98, 118, 158, 184, 206, 265], "phi": [7, 18, 19, 26, 32, 54, 58, 72, 82, 98, 118, 123, 124, 132, 156, 157, 158, 168, 169, 176, 177, 179, 182, 183, 184, 206, 239, 247, 249, 265], "group_delai": [7, 32, 54, 58, 72, 79, 98, 118, 158, 184, 206, 224, 260, 302, 303, 309], "group": [7, 32, 54, 58, 72, 79, 98, 118, 158, 184, 206, 224, 260, 308], "tau_g": [7, 32, 54, 58, 72, 79, 98, 118, 158, 184, 206, 260], "iir": [7, 37, 46, 80, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 121, 122, 139, 143, 158, 259, 260, 261, 262, 265, 266, 272, 276, 302, 305, 308, 309], "q": [8, 32, 54, 55, 118, 156, 168, 184, 188, 196, 199, 200, 201, 202, 203, 205, 206, 208, 227, 293, 309], "comput": [8, 18, 20, 29, 54, 60, 61, 62, 63, 64, 78, 106, 123, 125, 135, 148, 156, 168, 170, 176, 178, 180, 182, 199, 200, 201, 202, 203, 204, 205, 211, 212, 234, 237, 240, 245, 251, 253, 302, 303, 305, 307, 309], "complementari": [8, 199, 200], "cumul": [8, 199, 200], "distribut": [8, 199, 200], "standard": [8, 199, 200, 309], "normal": [8, 19, 37, 39, 44, 139, 141, 145, 199, 200, 222, 223, 225, 226, 238, 241, 244, 259, 260, 262, 264, 265, 266, 271, 280, 281, 283, 305, 307], "mathcal": [8, 60, 199, 200, 201, 202, 203, 204, 205, 212, 230], "qinv": [8, 199, 200, 309], "invers": [8, 32, 200], "agc": [9, 10, 11, 12, 13, 14, 15, 16, 17, 148, 296, 308, 309], "automat": [9, 10, 11, 148, 296, 308, 309], "control": [9, 10, 11, 37, 148, 160, 162, 280, 283, 305, 308, 309], "note": [9, 32, 54, 58, 60, 61, 62, 64, 72, 98, 100, 116, 118, 121, 139, 148, 158, 160, 170, 184, 190, 193, 195, 198, 201, 202, 203, 205, 206, 210, 212, 213, 216, 219, 224, 228, 229, 241, 247, 252, 258, 277, 280, 283, 293], "block": [9, 32, 37, 54, 72, 118, 121, 139, 160, 206, 228, 229], "exp": [9, 32, 106, 160, 161, 168, 176, 182, 231, 241, 247, 249, 259, 260, 261, 262, 265, 266, 272, 276, 288, 290, 293, 301, 303, 305], "z": [9, 37, 72, 100, 116, 121, 139, 160, 228, 229, 293, 302, 303, 305], "log": [9, 259, 260, 262, 264, 265, 266, 302, 303, 305], "beta": [9, 11, 13], "output": [9, 10, 11, 15, 32, 33, 54, 58, 72, 73, 80, 85, 88, 91, 98, 100, 101, 103, 108, 113, 116, 117, 118, 119, 121, 122, 128, 139, 140, 158, 160, 161, 167, 184, 185, 186, 189, 193, 196, 206, 207, 208, 212, 213, 214, 215, 216, 218, 219, 229, 230, 238, 243, 248, 250, 261, 272, 289, 291, 294, 297, 301, 302, 303, 305, 309], "attack": [9, 11, 12], "decai": [9, 11, 13, 301, 303], "refer": [9, 11, 15, 32, 37, 45, 47, 48, 49, 50, 51, 54, 58, 60, 61, 62, 64, 65, 88, 118, 139, 148, 150, 151, 152, 170, 171, 178, 180, 201, 202, 203, 205, 206, 210, 212, 220, 222, 223, 224, 225, 226, 227, 238, 239, 241, 243, 251, 277, 280, 283, 284, 291, 293, 303, 307, 308], "adder": [9, 54, 139, 160, 228, 229, 305], "multipli": [9, 37, 58, 118, 206], "michael": [9, 37, 45, 47, 48, 49, 50, 51, 58, 88, 139, 148, 170, 280, 283], "rice": [9, 37, 45, 47, 48, 49, 50, 51, 58, 88, 139, 148, 170, 280, 283], "digit": [9, 37, 45, 47, 48, 49, 50, 51, 58, 88, 139, 148, 170, 178, 180, 280, 283, 305, 308, 309], "commun": [9, 32, 37, 45, 47, 48, 49, 50, 51, 54, 58, 88, 118, 139, 148, 170, 178, 180, 206, 227, 277, 280, 283, 305, 308], "discret": [9, 32, 37, 45, 47, 48, 49, 50, 51, 58, 88, 116, 121, 139, 148, 158, 170, 212, 230, 236, 280, 283, 286, 295, 301, 305, 308, 309], "approach": [9, 37, 45, 47, 48, 49, 50, 51, 58, 88, 139, 148, 170, 213, 216, 219, 280, 283, 305], "section": [9, 58, 60, 67, 68, 69, 70, 71, 88, 148, 170, 201, 303, 305], "9": [9, 32, 54, 78, 88, 98, 106, 118, 156, 168, 176, 182, 184, 192, 194, 195, 198, 202, 206, 210, 217, 230, 238, 242, 243, 246, 277, 280, 283, 291, 297, 303, 304, 306, 307], "5": [9, 18, 19, 32, 54, 58, 60, 61, 62, 63, 64, 65, 78, 88, 98, 116, 118, 121, 148, 156, 158, 160, 168, 176, 182, 184, 192, 194, 195, 198, 202, 204, 206, 210, 212, 215, 217, 218, 219, 222, 223, 224, 225, 226, 230, 231, 232, 233, 235, 236, 238, 239, 240, 241, 242, 243, 246, 247, 252, 255, 258, 259, 260, 261, 262, 265, 266, 272, 274, 276, 277, 280, 283, 284, 285, 286, 287, 288, 290, 291, 293, 297, 301, 302, 303, 304, 305, 306, 307], "http": [9, 88, 210, 220, 222, 223, 224, 225, 226, 227, 241, 243, 251, 291, 293, 297, 298, 299], "wirelesspi": [9, 88], "com": [9, 88, 210, 222, 223, 224, 225, 226, 227, 241, 243, 291, 298, 299], "how": [9, 241, 244, 258, 267, 268, 274, 280, 281, 283, 291, 300], "work": 9, "exampl": [9, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 176, 178, 179, 180, 181, 182, 192, 194, 195, 197, 198, 199, 200, 202, 204, 206, 210, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 252, 255, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 305, 309], "creat": [9, 11, 18, 19, 32, 34, 37, 44, 54, 55, 58, 59, 65, 66, 72, 74, 88, 90, 98, 99, 100, 101, 103, 116, 117, 118, 119, 121, 122, 123, 124, 139, 141, 156, 157, 158, 159, 160, 162, 168, 169, 176, 177, 179, 182, 183, 184, 186, 206, 208, 212, 214, 238, 239, 243, 249, 284, 287, 288, 291, 293, 301, 305, 307], "bursti": 9, "surround": 9, "In": [9, 11, 17, 32, 33, 34, 54, 55, 58, 59, 61, 63, 65, 73, 74, 78, 86, 88, 90, 96, 98, 101, 103, 106, 114, 116, 117, 118, 119, 121, 122, 148, 156, 158, 159, 160, 168, 170, 176, 178, 179, 180, 181, 182, 185, 186, 192, 194, 195, 198, 199, 200, 202, 204, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 252, 255, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 301, 306], "np": [9, 32, 54, 58, 61, 63, 78, 88, 98, 106, 116, 118, 121, 123, 133, 137, 156, 158, 160, 168, 176, 178, 180, 181, 182, 192, 194, 195, 198, 202, 204, 206, 210, 212, 213, 214, 215, 216, 218, 219, 230, 231, 238, 239, 240, 243, 247, 249, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 270, 272, 274, 276, 277, 284, 287, 288, 290, 291, 293, 301, 302, 303, 304, 305, 306, 307], "1j": [9, 32, 106, 231, 249, 259, 260, 261, 262, 265, 266, 272, 276, 288, 290, 301, 303, 305], "arang": [9, 32, 54, 88, 98, 118, 192, 194, 195, 198, 206, 212, 214, 231, 243, 249, 277, 287, 288, 290, 291, 293, 301, 305], "5000": [9, 278, 279], "100": [9, 58, 63, 78, 100, 106, 108, 113, 116, 121, 158, 160, 178, 180, 210, 212, 213, 216, 219, 221, 222, 223, 225, 226, 231, 238, 248, 249, 256, 258, 259, 261, 267, 270, 272, 284, 287, 288, 290, 301, 305], "1000": [9, 78, 106, 153, 154, 156, 168, 173, 174, 176, 182, 238, 240, 287, 288, 306], "2000": 9, "10": [9, 32, 58, 61, 63, 65, 88, 98, 116, 118, 124, 156, 168, 169, 176, 177, 178, 180, 182, 183, 192, 194, 195, 198, 202, 204, 206, 210, 211, 212, 217, 221, 222, 223, 225, 226, 230, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 251, 252, 253, 254, 256, 257, 259, 260, 261, 262, 265, 266, 270, 272, 274, 276, 277, 280, 281, 282, 283, 284, 285, 286, 291, 301, 302, 303, 304, 305, 306, 307], "3000": 9, "4000": 9, "001": [9, 305], "random": [9, 32, 60, 121, 156, 158, 168, 176, 182, 212, 215, 218, 230, 238, 239, 247, 257, 258, 267, 274, 284, 304, 305, 306], "randn": [9, 32, 121, 158, 274], "size": [9, 22, 24, 128, 130, 214, 230, 243, 274, 291, 301, 305, 306, 307], "3": [9, 32, 37, 45, 47, 48, 51, 54, 58, 60, 61, 65, 78, 88, 90, 98, 106, 116, 118, 121, 148, 156, 158, 160, 168, 170, 176, 178, 179, 180, 181, 182, 184, 192, 194, 195, 198, 201, 202, 206, 210, 212, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 235, 236, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 252, 257, 258, 259, 260, 261, 262, 265, 266, 272, 274, 276, 277, 280, 281, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 297, 298, 303, 305, 307, 308], "plt": [9, 32, 54, 58, 61, 63, 88, 98, 116, 118, 121, 148, 156, 158, 160, 168, 170, 176, 178, 179, 180, 181, 182, 202, 204, 206, 210, 212, 213, 214, 216, 219, 222, 223, 224, 225, 226, 227, 231, 238, 239, 240, 241, 243, 244, 247, 249, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 270, 272, 273, 274, 276, 280, 281, 283, 284, 287, 288, 290, 291, 293, 301, 302, 303, 304, 305, 306, 307], "figur": [9, 32, 54, 58, 61, 63, 88, 98, 116, 118, 121, 148, 156, 158, 160, 168, 170, 176, 178, 179, 180, 181, 182, 202, 204, 206, 210, 212, 213, 214, 216, 219, 222, 223, 224, 225, 226, 227, 231, 238, 239, 240, 241, 243, 244, 247, 249, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 270, 272, 273, 274, 275, 276, 280, 281, 283, 284, 287, 288, 290, 291, 293, 301, 302, 303, 304, 305, 306, 307], "figsiz": [9, 32, 54, 58, 61, 63, 88, 98, 116, 118, 121, 148, 156, 158, 160, 168, 170, 176, 178, 179, 180, 181, 182, 202, 204, 206, 210, 212, 213, 214, 216, 219, 222, 223, 224, 225, 226, 227, 231, 238, 239, 240, 241, 243, 244, 247, 249, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 270, 272, 273, 274, 275, 276, 280, 281, 283, 284, 287, 288, 290, 291, 293, 301, 302, 303, 304, 305, 306, 307], "8": [9, 19, 32, 54, 58, 61, 63, 88, 98, 106, 116, 118, 121, 124, 148, 156, 157, 158, 160, 168, 169, 170, 176, 177, 178, 179, 180, 181, 182, 183, 184, 192, 194, 195, 198, 202, 204, 206, 210, 212, 213, 214, 216, 217, 219, 222, 223, 224, 225, 226, 227, 230, 231, 238, 240, 241, 242, 243, 244, 246, 249, 252, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 270, 272, 273, 274, 275, 276, 277, 280, 281, 283, 287, 288, 290, 291, 293, 302, 303, 304, 305, 307], "plot": [9, 32, 54, 58, 61, 63, 78, 79, 80, 82, 85, 88, 98, 106, 108, 113, 116, 118, 121, 148, 156, 158, 160, 168, 170, 176, 178, 179, 180, 181, 182, 202, 204, 206, 212, 213, 214, 216, 219, 222, 223, 224, 225, 226, 227, 231, 238, 239, 240, 241, 243, 244, 247, 249, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 280, 281, 283, 284, 287, 288, 290, 291, 293, 301, 302, 303, 305, 306, 307, 308, 309], "titl": [9, 32, 54, 58, 88, 116, 118, 148, 156, 160, 168, 170, 178, 180, 206, 210, 212, 213, 214, 216, 219, 231, 238, 239, 243, 247, 249, 256, 270, 274, 284, 287, 288, 290, 291, 293, 301, 304, 305, 306, 307], "tight_layout": [9, 54, 58, 88, 116, 118, 148, 156, 160, 168, 170, 178, 180, 206, 210, 212, 213, 214, 216, 219, 231, 238, 239, 240, 243, 249, 256, 270, 274, 284, 287, 288, 290, 291, 293, 304, 305, 306, 307], "01": [9, 78, 106, 181, 182, 246, 303, 305], "notic": [9, 287, 288, 301, 307], "over": [9, 178, 180, 246], "i": [9, 11, 12, 13, 17, 18, 19, 23, 32, 33, 34, 37, 44, 53, 54, 55, 58, 59, 60, 62, 63, 64, 65, 70, 72, 73, 78, 80, 85, 86, 88, 91, 96, 98, 100, 103, 105, 106, 108, 113, 114, 116, 118, 119, 121, 122, 123, 124, 139, 141, 142, 145, 148, 156, 158, 161, 168, 169, 170, 176, 177, 182, 183, 184, 185, 186, 190, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 264, 265, 266, 268, 271, 272, 274, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310], "amplifi": [9, 11, 13], "accord": 9, "also": [9, 32, 148, 156, 170, 224, 240, 241, 308], "when": [9, 16, 32, 34, 54, 55, 57, 58, 72, 77, 80, 83, 85, 88, 92, 98, 100, 108, 111, 113, 116, 118, 119, 121, 122, 158, 184, 197, 206, 208, 212, 213, 215, 216, 218, 219, 236, 243, 259, 260, 261, 262, 265, 266, 272, 286, 291, 293, 301, 302, 303], "interest": 9, "appear": [9, 301], "quickli": 9, "decreas": [9, 213], "6": [9, 32, 54, 58, 65, 88, 98, 106, 116, 118, 121, 148, 156, 158, 160, 168, 176, 181, 182, 184, 192, 194, 195, 198, 202, 203, 205, 206, 210, 217, 221, 224, 230, 231, 232, 233, 238, 240, 242, 243, 246, 248, 252, 257, 258, 259, 260, 261, 262, 265, 266, 272, 273, 274, 276, 277, 280, 283, 287, 288, 290, 291, 293, 297, 300, 302, 303, 305, 306], "ylim": [9, 88, 98, 121, 158, 222, 223, 224, 225, 226, 231, 290, 293, 302, 305, 306, 307], "__call__": [9, 10, 11, 17, 32, 33, 34, 54, 55, 58, 59, 72, 73, 74, 86, 88, 89, 90, 96, 98, 100, 101, 102, 103, 114, 116, 117, 118, 119, 121, 122, 139, 140, 148, 151, 158, 159, 160, 161, 170, 171, 184, 185, 186, 206, 207, 208, 309], "perform": [9, 10, 33, 37, 73, 99, 178, 180, 185, 207, 224, 231, 290, 293, 296, 302, 303, 306, 308, 309], "reset": [9, 16, 32, 54, 57, 58, 72, 83, 88, 94, 98, 100, 111, 116, 118, 121, 139, 147, 158, 160, 166, 184, 197, 206], "indic": [9, 11, 17, 18, 32, 34, 54, 55, 58, 59, 62, 63, 64, 72, 74, 86, 88, 90, 96, 98, 100, 101, 103, 114, 116, 117, 118, 119, 121, 122, 123, 124, 156, 157, 158, 159, 168, 169, 176, 177, 178, 180, 182, 183, 184, 186, 189, 202, 203, 204, 205, 206, 208, 211, 234, 241, 244, 247, 249, 253, 254, 258, 266, 267, 268, 274, 280, 281, 282, 283, 291], "whether": [9, 11, 17, 32, 34, 54, 55, 58, 59, 62, 63, 64, 72, 74, 86, 88, 90, 96, 98, 100, 101, 103, 114, 116, 117, 118, 119, 121, 122, 158, 159, 178, 180, 184, 186, 202, 203, 204, 205, 206, 208, 211, 234, 249, 253, 254, 266, 268, 274, 282], "The": [9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 297, 298, 299, 300, 302, 303, 305, 306, 307, 308, 310], "current": [9, 14, 88, 91, 274, 299], "settabl": [9, 12, 13, 15, 148, 149, 150, 160, 163, 164, 165], "desir": [9, 11, 15, 210, 212, 306], "paramet": [10, 11, 16, 19, 20, 22, 24, 29, 33, 34, 44, 45, 47, 50, 55, 59, 61, 62, 63, 64, 67, 68, 69, 71, 73, 74, 78, 79, 80, 82, 85, 89, 90, 92, 94, 99, 101, 102, 103, 106, 108, 113, 117, 119, 122, 124, 125, 127, 128, 129, 130, 135, 140, 141, 151, 152, 153, 154, 157, 159, 161, 162, 167, 169, 171, 173, 174, 177, 178, 180, 183, 185, 186, 199, 200, 202, 203, 204, 205, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293], "stream": [11, 16, 17, 33, 34, 55, 57, 59, 73, 74, 77, 83, 86, 90, 92, 96, 101, 103, 111, 114, 117, 119, 122, 156, 159, 168, 176, 182, 185, 186, 197, 207, 208, 303], "meant": [11, 12, 13, 37], "attenu": [11, 12, 34, 55, 119, 208, 222, 223, 225, 226, 227, 280, 283], "strong": [11, 12], "after": [11, 12, 13, 195, 198], "approx": [11, 12, 13, 98], "reduc": [11, 12, 13], "e": [11, 12, 13, 70, 148, 170, 201, 202, 203, 204, 205, 211, 215, 216, 234, 293, 298, 299, 302, 303, 306], "its": [11, 12, 13, 72, 100, 101, 116, 121, 212, 302, 303, 307], "origin": [11, 12, 13, 168, 182, 290, 301], "valu": [11, 12, 13, 18, 19, 20, 29, 60, 123, 124, 125, 135, 156, 157, 168, 169, 176, 177, 178, 180, 182, 183, 199, 200, 214, 221, 228, 229, 241, 243, 247, 248, 257, 260, 262, 264, 265, 266, 271, 273, 291, 298, 303, 309], "weak": [11, 13], "mode": [11, 16, 17, 33, 34, 55, 57, 59, 73, 74, 77, 83, 86, 90, 92, 96, 101, 103, 111, 114, 117, 119, 122, 159, 185, 186, 197, 207, 208, 214, 243, 291, 293], "preserv": [11, 17, 34, 54, 55, 59, 74, 86, 90, 96, 101, 103, 114, 117, 118, 119, 122, 159, 186, 206, 208, 258, 268], "call": [11, 17, 33, 34, 54, 55, 59, 73, 74, 86, 90, 96, 101, 103, 114, 117, 118, 119, 122, 159, 185, 186, 206, 207, 208], "properti": [12, 13, 14, 15, 17, 21, 23, 25, 26, 27, 28, 30, 31, 35, 36, 38, 39, 40, 41, 42, 43, 46, 48, 49, 52, 53, 56, 76, 81, 84, 86, 87, 91, 93, 95, 96, 97, 104, 105, 107, 109, 110, 112, 114, 115, 120, 126, 131, 132, 133, 134, 136, 137, 138, 142, 143, 144, 145, 146, 149, 150, 155, 163, 164, 165, 175, 179, 181, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 209, 309], "onli": [16, 19, 33, 34, 37, 55, 57, 73, 77, 78, 83, 92, 106, 111, 119, 124, 148, 157, 169, 177, 181, 183, 185, 197, 207, 208, 212, 222, 223, 225, 226, 240, 243, 244, 268, 281, 291, 300, 305, 306], "initi": [16, 148, 152, 170, 172, 305], "modul": [18, 19, 23, 24, 25, 123, 124, 130, 131, 133, 148, 153, 154, 156, 160, 168, 169, 170, 173, 174, 176, 177, 178, 180, 182, 183, 232, 233, 235, 238, 256, 258, 267, 270, 273, 274, 285, 297, 300, 306, 308, 309], "nomenclatur": [18, 123, 156, 168, 176, 182], "variabl": [18, 123, 156, 160, 161, 168, 176, 182, 246, 305], "name": [18, 123, 156, 168, 176, 182], "follow": [18, 60, 65, 123, 156, 168, 176, 182, 247, 257, 268, 271, 273, 275, 277, 305], "ar": [18, 28, 31, 32, 33, 34, 54, 55, 59, 60, 65, 67, 68, 69, 71, 73, 74, 90, 99, 101, 103, 117, 118, 119, 122, 123, 124, 134, 138, 156, 157, 159, 161, 168, 169, 176, 177, 182, 183, 184, 185, 186, 193, 195, 198, 201, 206, 207, 208, 213, 215, 216, 218, 219, 224, 227, 240, 243, 244, 250, 257, 258, 259, 260, 262, 264, 265, 266, 267, 268, 271, 273, 274, 275, 277, 281, 287, 288, 291, 297, 299, 301, 303, 305, 307, 308, 310], "decis": [18, 22, 123, 127, 128, 148, 151, 154, 156, 168, 170, 171, 174, 176, 182, 258, 305], "tild": [18, 22, 123, 127, 128, 148, 151, 156, 168, 170, 171, 176, 182], "puls": [18, 19, 22, 24, 27, 28, 31, 58, 116, 123, 124, 128, 130, 133, 134, 138, 156, 168, 169, 176, 177, 182, 183, 241, 244, 258, 274, 280, 281, 283, 308, 309], "shape": [18, 19, 22, 24, 27, 28, 31, 32, 123, 124, 128, 130, 133, 134, 138, 156, 168, 169, 176, 177, 182, 183, 241, 244, 258, 274, 280, 281, 283, 303, 308, 309], "index": [18, 19, 23, 32, 54, 88, 94, 118, 123, 156, 168, 176, 182, 184, 189, 206, 243, 258, 267, 268, 273, 291, 294, 297], "new": [18, 19, 65, 66, 88, 90, 121, 123, 124, 156, 157, 168, 169, 176, 177, 182, 183, 284], "object": [18, 19, 37, 44, 65, 66, 123, 124, 156, 157, 168, 169, 176, 177, 182, 183, 243, 259, 260, 261, 262, 265, 266, 272, 276, 291, 305, 309], "x_tild": [18, 22, 128], "match": [18, 19, 22, 28, 123, 124, 128, 134, 156, 168, 169, 176, 177, 182, 183, 309], "filter": [18, 22, 28, 31, 32, 33, 34, 36, 37, 41, 42, 44, 46, 54, 55, 56, 57, 58, 59, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 156, 158, 159, 168, 176, 182, 184, 185, 186, 189, 192, 194, 195, 197, 198, 206, 207, 208, 209, 222, 223, 224, 225, 226, 227, 231, 241, 244, 258, 259, 260, 261, 262, 265, 266, 272, 276, 277, 280, 281, 283, 290, 296, 307, 308, 309], "maximum": [18, 19, 22, 78, 106, 123, 127, 128, 148, 156, 168, 176, 182, 241, 244, 257, 273, 280, 281, 283, 296, 305, 309], "likelihood": [18, 22, 123, 127, 128, 148, 156, 168, 176, 182, 296, 305, 309], "abstract": [18, 20, 29, 123, 125, 135], "provid": [18, 20, 29, 70, 123, 125, 135, 156, 168, 176, 178, 180, 182, 268, 298, 308], "number": [18, 19, 21, 30, 32, 33, 34, 35, 54, 61, 62, 63, 64, 65, 67, 68, 71, 78, 79, 80, 82, 85, 106, 108, 113, 118, 123, 124, 126, 136, 153, 154, 156, 157, 167, 168, 169, 173, 174, 176, 177, 182, 183, 184, 186, 187, 195, 198, 206, 210, 212, 215, 218, 230, 232, 233, 235, 241, 244, 246, 250, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 271, 272, 277, 280, 281, 283, 285, 289], "log_2": [18, 21, 123, 126, 156, 168, 176, 182, 213, 232, 233, 235, 285], "phase_offset": [18, 19, 26, 123, 124, 132, 156, 157, 168, 169, 176, 177, 179, 182, 183, 212, 238, 239, 247, 257, 258, 273, 274, 284, 304, 305, 306], "degre": [18, 19, 26, 123, 124, 132, 156, 157, 168, 169, 176, 177, 179, 182, 183, 239, 247, 249, 252, 305], "sym": [18, 19, 23, 30, 123, 124, 136, 156, 157, 168, 169, 176, 177, 182, 183, 233, 236, 241, 280, 283, 285, 286, 307], "pulse_shap": [18, 19, 22, 24, 27, 123, 124, 128, 130, 133, 156, 168, 169, 176, 177, 182, 183, 274, 304, 306], "instantan": [18, 19, 27, 238], "tx_filter": [18, 31, 123, 138, 156, 168, 176, 182], "transmit": [18, 31, 67, 123, 138, 148, 151, 156, 168, 170, 171, 176, 182, 238, 258], "coeffici": [18, 28, 31, 32, 34, 54, 55, 72, 74, 100, 103, 118, 119, 123, 134, 138, 156, 168, 176, 182, 186, 206, 208, 259, 260, 261, 262, 265, 266, 272, 276, 277, 302, 303], "rx_filter": [18, 28, 123, 134, 156, 168, 176, 182], "symbol_label": [19, 156, 157, 168, 169, 176, 177, 181, 182, 183, 306], "bin": [19, 157, 169, 177, 181, 183, 238, 257, 273, 306], "rect": [19, 124, 169, 177, 183, 307], "deviat": [19, 23], "delta": [19, 23, 32, 45, 47, 54, 58, 72, 80, 98, 99, 100, 108, 116, 118, 121, 158, 184, 206, 224, 261, 302, 303], "chang": [19, 23, 299, 310], "If": [19, 59, 63, 94, 124, 161, 169, 177, 183, 204, 206, 211, 212, 213, 230, 234, 250, 253, 254, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 271, 272, 273, 274, 282, 287, 289, 308], "string": [19, 124, 169, 177, 183, 246, 264, 271, 309], "pass": [19, 32, 54, 58, 72, 77, 88, 92, 98, 118, 158, 184, 186, 190, 206, 212, 215, 218, 230, 238, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 295, 297, 299, 302, 303, 309], "npt": [19, 34, 55, 78, 106, 119, 124, 157, 169, 177, 183, 208, 222, 223, 225, 226, 259, 260, 261, 262, 265, 266, 272, 276], "custom": [19, 32, 36, 54, 56, 118, 120, 124, 169, 177, 183, 206, 209, 222, 223, 225, 226, 309], "It": [19, 72, 100, 118, 124, 139, 148, 169, 177, 183, 212, 258], "import": [19, 124, 148, 169, 177, 183, 299, 301, 302, 303, 304, 305, 306, 307, 308], "psd": [20, 29, 125, 135, 178, 180, 213, 232, 233, 235, 236, 256, 270, 285, 286], "p_b": [20, 125], "s_hat": [22, 128, 305, 306], "p_e": [29, 135], "polyphas": [32, 33, 34, 36, 54, 55, 56, 118, 119, 120, 184, 185, 186, 187, 189, 190, 193, 194, 195, 198, 206, 207, 208, 209, 227, 231, 277, 290, 308, 309], "fir": [32, 33, 34, 54, 55, 57, 58, 59, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 98, 99, 118, 119, 121, 122, 158, 159, 184, 185, 186, 189, 192, 194, 195, 197, 198, 206, 207, 208, 222, 223, 224, 225, 226, 227, 258, 259, 260, 261, 262, 265, 266, 272, 276, 277, 304, 308, 309], "effici": [32, 156, 231, 252, 290], "split": 32, "equal": [32, 94, 156], "ha": [32, 73, 116, 118, 156, 168, 176, 185, 207, 212, 222, 223, 224, 225, 226, 231, 240, 241, 252, 280, 283, 290, 293, 305, 306, 307], "bandwidth": [32, 37, 38, 39, 44, 48, 59, 139, 141, 145, 213, 222, 223, 241, 280, 283, 305, 307, 309], "equival": [32, 54, 99, 118, 206, 212, 213, 222, 223, 224, 225, 226, 236, 243, 286, 291, 299, 301], "first": [32, 54, 65, 88, 91, 118, 119, 156, 168, 184, 189, 206, 208, 250, 261, 274, 289, 298, 300, 309], "f_i": 32, "cdot": [32, 54, 58, 72, 88, 91, 118, 121, 148, 170, 184, 185, 196, 206, 207, 222, 223, 225, 226, 249], "feedforward": [32, 34, 54, 55, 58, 72, 74, 87, 98, 100, 103, 105, 116, 118, 119, 121, 158, 184, 186, 195, 198, 206, 208, 259, 260, 261, 262, 265, 266, 272, 276, 277, 302, 303], "instead": [32, 54, 118, 206, 257], "commut": [32, 54, 118, 184, 186, 190, 193, 206], "parallel": [32, 54, 118, 184, 186, 193, 206], "fourier": 32, "transform": 32, "idft": 32, "produc": [32, 33, 73, 118, 184, 185, 186, 193, 206, 207, 241, 307], "y_i": [32, 33, 184, 213, 215, 216, 218, 219, 230], "7": [32, 54, 58, 88, 98, 118, 148, 156, 168, 170, 176, 181, 182, 184, 192, 194, 195, 198, 202, 206, 210, 217, 224, 225, 227, 230, 238, 242, 243, 246, 277, 291, 293, 297, 303, 305], "bottom": [32, 54, 118, 184, 186, 190, 193, 206], "top": [32, 54, 118, 184, 186, 190, 193, 206], "relat": [32, 54, 118, 184, 195, 198, 206, 213, 241], "j": [32, 54, 78, 100, 103, 104, 106, 116, 118, 121, 156, 160, 168, 176, 182, 184, 195, 198, 206, 212, 230, 247, 249, 293, 302, 303], "fred": [32, 54, 118, 206, 227, 277], "harri": [32, 54, 118, 206, 222, 223, 225, 226, 227, 277], "process": [32, 54, 60, 61, 62, 64, 118, 121, 158, 201, 202, 203, 205, 206, 227, 277, 303, 305, 308], "system": [32, 54, 118, 206, 227, 236, 243, 277, 286, 291, 298, 300, 305, 308], "chapter": [32, 54, 118, 178, 180, 206, 227, 277], "out": [32, 54, 65, 78, 98, 106, 118, 148, 156, 168, 176, 179, 181, 182, 184, 192, 194, 195, 196, 198, 199, 200, 206, 214, 215, 217, 218, 221, 228, 229, 230, 232, 233, 235, 236, 238, 240, 242, 243, 248, 250, 252, 255, 275, 277, 278, 279, 285, 286, 289, 291, 292], "tone": 32, "increas": [32, 59, 240, 252, 303], "10_000": [32, 257], "rang": [32, 148, 170, 257, 305, 306], "25": [32, 61, 215, 218, 224, 230, 255, 258, 278, 279, 301, 304, 305, 307], "overlai": 32, "boundari": [32, 156], "so": [32, 240, 241, 244, 280, 281, 283, 308], "wrap": 32, "from": [32, 65, 79, 82, 100, 101, 116, 119, 121, 123, 137, 156, 168, 176, 181, 182, 184, 186, 190, 193, 208, 221, 232, 233, 235, 236, 248, 255, 264, 271, 278, 279, 285, 286, 297, 302, 303, 305, 308], "posit": [32, 247], "neg": [32, 240, 247], "fft": [32, 231, 264, 271, 287, 288, 290], "1024": [32, 78, 79, 82, 106, 259, 260, 262, 265, 266, 304, 307], "color": [32, 58, 116, 258, 267, 268, 274, 304, 307], "label": [32, 54, 58, 61, 63, 88, 98, 116, 118, 121, 148, 157, 158, 169, 170, 177, 178, 180, 183, 202, 204, 206, 210, 212, 222, 223, 224, 225, 226, 238, 239, 241, 243, 247, 256, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 274, 280, 283, 284, 291, 301, 304, 305, 306, 307], "f_start": 32, "f_stop": 32, "fill_betweenx": 32, "80": [32, 34, 55, 58, 119, 208, 227, 293], "xtick": 32, "legend": [32, 58, 98, 116, 148, 170, 210, 222, 223, 224, 225, 226, 247, 301, 304, 305, 307], "spread": [32, 243, 291], "across": [32, 58, 186, 210, 237, 245], "10000": 32, "1001": 32, "11": [32, 88, 118, 156, 168, 176, 182, 217, 227, 242, 243, 277, 291, 297], "12": [32, 88, 118, 156, 168, 176, 182, 203, 205, 210, 217, 242, 277, 302, 306], "full": [32, 33, 54, 73, 118, 184, 185, 206, 207, 214, 243, 291], "__len__": [32, 54, 58, 72, 75, 98, 118, 158, 184, 206], "state": [32, 33, 37, 50, 54, 57, 58, 72, 73, 77, 83, 84, 86, 88, 92, 94, 95, 96, 98, 100, 111, 112, 114, 116, 118, 121, 158, 184, 185, 197, 206, 207, 309], "flush": [32, 33, 54, 58, 72, 73, 77, 88, 92, 98, 118, 158, 184, 185, 206, 207, 309], "through": [32, 54, 58, 72, 77, 88, 92, 98, 118, 158, 168, 182, 184, 206, 215, 218, 230, 295, 302, 303, 305], "consist": [32, 54, 58, 67, 68, 69, 70, 71, 72, 84, 88, 95, 98, 118, 158, 184, 206], "previou": [32, 34, 54, 55, 58, 59, 72, 74, 84, 88, 90, 94, 95, 98, 101, 103, 117, 118, 119, 121, 122, 158, 159, 184, 186, 206, 208, 228, 229], "u": [32, 54, 58, 72, 85, 98, 100, 113, 116, 118, 121, 158, 184, 206, 210, 272, 293, 294, 302, 303], "frequency_respons": [32, 54, 58, 72, 78, 98, 100, 106, 116, 118, 121, 158, 184, 206, 309], "numpi": [32, 54, 58, 72, 78, 98, 100, 106, 116, 118, 121, 158, 161, 184, 206, 212, 215, 218, 230, 289, 298, 301, 302, 303, 304, 305, 306, 307, 308], "float64": [32, 54, 58, 72, 78, 98, 100, 106, 116, 118, 121, 158, 160, 161, 184, 206, 214, 243, 291, 294], "complex128": [32, 54, 58, 72, 78, 98, 100, 106, 116, 118, 121, 158, 160, 161, 184, 206], "polyphase_tap": [32, 54, 118, 184, 192, 194, 195, 198, 206], "polyphase_ord": [32, 34, 54, 55, 118, 119, 184, 192, 194, 206, 208, 227, 309], "hold": [32, 54, 118, 119, 184, 186, 190, 206, 208, 250, 309], "connect": [32, 54, 118, 184, 186, 190, 193, 206], "sum": [32, 54, 60, 72, 100, 118, 184, 186, 193, 201, 206, 307], "all": [32, 54, 65, 70, 118, 161, 184, 186, 193, 206, 238, 258, 267, 268, 298, 300, 308, 309], "integ": [32, 54, 78, 106, 118, 184, 188, 191, 206, 250], "resampl": [32, 54, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 118, 184, 185, 196, 206, 207, 208, 209, 227, 277, 308, 309], "correspond": [32, 54, 65, 70, 88, 91, 118, 184, 189, 206, 268], "l": [33, 73, 98, 99, 102, 122, 158, 159, 185, 207, 224], "convolut": [33, 73, 118, 185, 207], "have": [33, 99, 214, 224, 231, 243, 250, 274, 289, 290, 291], "proport": [33, 37, 41, 139, 141, 146, 185, 207, 240, 252, 296, 309], "align": [33, 73, 119, 168, 185, 207, 208, 243, 291, 301], "where": [33, 44, 73, 88, 91, 124, 139, 141, 145, 177, 183, 185, 201, 207, 212, 213, 230, 232, 233, 235, 241, 285, 293, 302, 303, 308], "howev": [33, 67, 68, 69, 71, 73, 98, 139, 185, 207, 216, 219, 243, 291, 301], "final": [33, 73, 185, 207], "d": [33, 58, 72, 76, 88, 91, 98, 158, 237, 240, 245, 252, 297, 299, 308], "dictat": [33, 73, 185, 207], "argument": [33, 34, 55, 73, 119, 185, 207, 208, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 298, 302, 303, 309], "23": [34, 55, 119, 208, 227, 252], "atten": [34, 55, 119, 208, 222, 223, 225, 226, 227, 309], "specif": [34, 55, 70, 78, 106, 119, 208, 300, 307], "must": [34, 55, 90, 119, 208, 212, 222, 223, 225, 226, 227, 241, 243, 249, 268, 280, 283, 291, 293], "odd": [34, 55, 99, 119, 182, 208, 224, 227, 287], "even": [34, 55, 99, 119, 182, 208, 222, 223, 224, 225, 226, 227, 241, 280, 283], "stopband": [34, 55, 119, 208, 227, 280, 283], "a_": [34, 55, 119, 148, 149, 150, 152, 208, 227], "text": [34, 55, 60, 119, 182, 201, 208, 210, 211, 212, 213, 216, 219, 220, 221, 227, 238, 239, 240, 248, 251, 253, 254, 282, 284], "stop": [34, 55, 119, 208, 227], "closedlooppl": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 296, 305, 309], "defin": [37, 72, 100, 116, 212, 230, 241, 269, 280, 283, 293, 296, 303, 308], "close": [37, 44, 46, 296, 308, 309], "loop": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 139, 140, 141, 142, 143, 144, 145, 146, 147, 160, 161, 162, 163, 164, 165, 166, 167, 308, 309], "pll": [37, 38, 39, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 296, 308, 309], "analysi": [37, 44, 298, 305, 308, 309], "bb": [37, 304, 305], "phase_err": [37, 305], "ped": [37, 43, 44, 141, 148, 152, 153, 154, 170, 171, 172, 173, 174, 175, 296, 305, 308, 309], "lf": [37, 305], "phase_est": [37, 305], "lo": [37, 305], "nco": [37, 40, 44, 141, 160, 161, 162, 163, 164, 165, 166, 167, 296, 305, 308, 309], "local": [37, 297, 305], "oscil": [37, 160, 162, 296, 305, 308, 309], "detector": [37, 43, 44, 60, 141, 148, 155, 170, 175, 201, 305, 308, 309], "numer": [37, 160, 162, 296, 303, 305, 308, 309], "transfer": [37, 46, 72, 100, 101, 121, 139, 241, 280, 283, 302, 303, 305], "2nd": [37, 139, 141, 296, 305, 309], "plu": [37, 139, 141, 296, 309], "h_": [37, 58, 305], "k_1": [37, 41, 139, 146, 305], "k_2": [37, 42, 139, 144, 305], "frac": [37, 45, 47, 50, 51, 58, 60, 61, 62, 64, 72, 76, 98, 100, 116, 119, 121, 139, 158, 168, 176, 182, 201, 202, 203, 208, 210, 211, 212, 213, 220, 232, 233, 235, 236, 238, 240, 241, 247, 248, 249, 251, 252, 280, 282, 283, 285, 286, 292, 293, 305], "k_0": [37, 40, 44, 141, 160, 162, 163, 305], "k_p": [37, 43, 44, 141, 148, 155, 170, 175, 305], "appendix": [37, 139, 280, 283], "lock": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 139, 140, 141, 142, 143, 144, 145, 146, 147, 160, 161, 162, 163, 164, 165, 166, 167, 308], "see": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 59, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 107, 109, 110, 111, 112, 114, 115, 117, 122, 139, 140, 141, 142, 143, 144, 145, 146, 147, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 176, 179, 181, 182, 197, 206, 222, 223, 225, 226, 231, 241, 244, 259, 260, 261, 262, 265, 266, 272, 276, 280, 281, 283, 308], "noise_bandwidth": [37, 44, 139, 141, 145], "damping_factor": [37, 44, 139, 141, 142], "phase_lock_tim": [37, 51], "frequency_lock_tim": [37, 45], "freq_offset": [37, 45, 47], "lock_tim": [37, 47, 305], "phase_error_vari": [37, 50], "cn0": [37, 50], "varianc": [37, 50, 60, 62, 64, 203, 205, 212], "steadi": [37, 50], "sample_r": [37, 44, 52, 54, 78, 79, 82, 88, 106, 118, 156, 168, 176, 182, 206, 231, 239, 249, 258, 259, 260, 262, 264, 265, 266, 267, 268, 271, 274, 287, 288, 290, 301, 305, 307], "bnt": [37, 39, 305], "b_n": [37, 38, 39, 44, 45, 47, 50, 51, 139, 141, 145], "bn": [37, 38], "hz": [37, 38, 44, 45, 47, 50, 78, 79, 82, 106, 139, 141, 145, 213, 221, 231, 239, 240, 241, 248, 249, 252, 287, 288, 292, 301], "zeta": [37, 44, 53, 139, 141, 142], "damp": [37, 44, 53, 139, 141, 142, 305], "k0": [37, 40, 44, 141, 160, 305], "kp": [37, 43, 44, 141, 305], "k1": [37, 41, 139, 305], "k2": [37, 42, 139, 305], "repres": [37, 46, 215, 216], "omega_n": [37, 49, 305], "natur": [37, 49], "radian": [37, 48, 49, 50, 148, 151, 153, 154, 160, 161, 162, 164, 165, 170, 171, 173, 174, 182, 305], "omega_3db": [37, 48], "omega_": [37, 48], "textrm": [37, 48], "period": [44, 139, 141, 145, 156, 293], "second": [44, 45, 47, 51, 65, 139, 141, 145, 241], "critic": [44, 53, 139, 141, 142, 305], "underdamp": [44, 53, 139, 141, 142], "overdamp": [44, 53, 139, 141, 142], "ted": [44, 141], "t_": [45, 47, 51, 89, 241, 280, 283, 307], "fl": [45, 47], "take": [45, 47, 51, 297], "onto": [45, 47, 51], "39": 45, "pl": [47, 51, 298], "38": 47, "34": [48, 274], "33": 49, "sigma_": [50, 60, 61, 63], "theta_": [50, 148, 151, 170, 171], "carrier": [50, 176], "43": 50, "40": [51, 58, 88, 118, 206, 231], "less": [53, 210], "than": [53, 156, 157, 169, 177, 181, 183, 210, 244, 247, 257, 273, 281], "greater": [53, 280, 283], "prevent": [54, 118, 168, 182, 206], "need": [54, 118, 206, 297, 298, 300], "done": [54, 297], "case": [54, 118, 182, 201, 206, 280, 283], "3x": [54, 118], "v": [54, 160, 184, 221, 248, 297], "summat": [54, 184], "co": [54, 88, 118, 160, 206, 249, 280, 283], "64": [54, 98, 224, 246, 303], "280": 54, "marker": [54, 88, 118, 160, 206, 257, 273, 274, 301, 302, 303, 306], "o": [54, 88, 118, 206, 301], "true": [54, 61, 62, 63, 64, 78, 88, 106, 118, 148, 153, 154, 156, 168, 170, 173, 174, 176, 178, 180, 182, 202, 203, 204, 205, 206, 210, 211, 213, 215, 216, 218, 219, 230, 234, 240, 243, 249, 253, 254, 257, 266, 268, 273, 274, 275, 282, 291, 304, 305, 306], "y1": [54, 88, 118, 206, 247], "70": [54, 246], "y2": [54, 88, 118, 206, 247], "140": [54, 231], "y3": [54, 88, 118, 206], "210": 54, "y4": [54, 88, 118, 206], "y5": [54, 88, 118, 206], "y_1": [54, 118, 206, 247], "y_2": [54, 118, 206, 247], "y_3": [54, 118, 206], "y_4": [54, 118, 206], "y_5": [54, 118, 206], "win": 58, "quad": [58, 158], "le": [58, 99, 158, 210, 224, 249, 252, 280, 283], "truncat": 58, "same": [58, 73, 148, 170, 274, 302], "deriv": 58, "fir_2": 58, "fir_6": 58, "fir_10": 58, "fir_20": 58, "20": [58, 59, 61, 63, 88, 118, 156, 160, 168, 176, 182, 202, 206, 210, 213, 215, 218, 221, 230, 238, 239, 246, 247, 248, 254, 277, 282, 290, 304, 306, 309], "fir_40": 58, "fir_80": 58, "y_axi": [58, 262, 264, 271, 309], "linspac": [58, 61, 78, 106, 116, 178, 180, 202, 213, 216, 219, 240, 256, 270, 303, 304, 305, 306], "ab": [58, 116, 214, 243, 291, 293, 307], "linestyl": [58, 116, 148, 156, 168, 170, 176, 182, 257, 268, 273, 275, 293, 301, 305, 306, 307], "theori": [58, 60, 61, 62, 64, 116, 201, 202, 203, 205], "lfloor": [58, 72, 76, 98, 158], "rfloor": [58, 72, 76, 98, 158], "blackman": [59, 222, 223, 225, 226], "scipi": [59, 72, 100, 222, 223, 225, 226, 264, 271, 307, 308], "definit": [59, 259, 260, 261, 262, 265, 266, 272, 276], "get_window": 59, "detail": 59, "null": [60, 201, 307], "altern": [60, 201, 303], "hypothes": [60, 201], "assum": [60, 201, 212, 230, 250, 274, 289], "w": [60, 201, 212, 301, 302, 303, 304, 305, 306, 307], "sigma": [60, 61, 62, 63, 64, 201, 202, 203, 204, 205, 212, 213], "_0": [60, 201], "_1": [60, 201], "test": [60, 201, 298, 299, 308], "statist": [60, 61, 62, 64, 201, 202, 203, 205], "limits_": [60, 72, 100, 201], "left": [60, 61, 62, 98, 100, 168, 170, 176, 182, 201, 202, 203, 205, 210, 211, 212, 213, 234, 237, 238, 240, 241, 247, 249, 252, 253, 254, 280, 282, 283, 293], "right": [60, 61, 62, 100, 168, 170, 176, 182, 201, 202, 203, 205, 210, 211, 212, 213, 234, 237, 238, 240, 241, 247, 249, 252, 253, 254, 280, 282, 283, 293], "gamma": [60, 62, 64, 201, 203, 205, 210], "sim": [60, 201, 212, 298], "chi_": [60, 61, 62], "2n": [60, 61, 62], "under": [60, 201], "detect": [60, 61, 62, 63, 64, 148, 151, 153, 154, 170, 171, 173, 174, 201, 202, 203, 204, 205, 210, 263, 269, 309], "threshold": [60, 62, 64, 201, 203, 205], "q_": [60, 61, 62, 64], "chi_n": [60, 61, 62, 64], "steven": [60, 61, 62, 64, 201, 202, 203, 205], "kai": [60, 61, 62, 64, 201, 202, 203, 205], "fundament": [60, 61, 62, 64, 201, 202, 203, 205], "static": [60, 61, 62, 63, 64, 201, 202, 203, 204, 205, 298], "n_nc": [60, 61, 62, 63, 64, 210], "For": [61, 62, 64, 202, 203, 205, 212, 231, 240, 290, 297, 302], "101": [61, 63, 202, 204, 222, 223, 225, 226], "1e": [61, 202, 239, 306], "sigma2": [62, 64, 203, 205], "logspac": [63, 78, 106, 204, 210], "theoret": [63, 178, 180, 256, 270, 306, 309], "variou": [63, 98, 298, 307], "1_000": [63, 121, 158, 212, 239, 240, 247, 284, 304], "000": [63, 239], "5_000": 63, "measur": [65, 67, 211, 212, 220, 221, 234, 237, 238, 245, 248, 251, 253, 254, 282, 305, 308, 309], "accumul": [65, 116, 160, 161, 162, 164, 305, 309], "contain": [65, 212, 246], "add": [65, 67, 70, 156, 168, 176, 182, 212, 239, 244, 268, 281, 284, 295, 306, 310], "total": [65, 241, 244, 280, 281, 283, 307], "count": [65, 68, 238], "error_r": [65, 69, 70, 306], "can": [65, 67, 68, 69, 71, 139, 156, 184, 212, 238, 241, 243, 250, 258, 261, 264, 271, 291, 299, 302, 303, 306, 308, 310], "obtain": 65, "tabul": [65, 66], "ascend": [65, 70], "other": [67, 68, 69, 71, 301, 310], "quantiti": [67, 68, 69, 70, 71], "user": [67, 68, 69, 71, 302, 303], "caution": [67, 68, 69, 71], "instanc": [67, 68, 69, 71, 156], "whatev": 70, "wa": [70, 213], "wrapper": [72, 100], "convolv": 72, "support": [72, 100, 309], "one": [72, 100, 157, 168, 169, 177, 181, 183, 241, 246, 258, 259, 260, 262, 264, 265, 266, 271, 287, 302, 303, 304, 307], "sum_": [72, 100, 203, 205, 211, 212, 213, 234, 237, 238, 245, 282], "valid": [73, 240, 258, 267, 268, 293], "remain": [77, 92, 231, 250], "whole": [78, 106, 307], "decad": [78, 106, 259, 260, 262, 265, 266, 302, 305], "point": [78, 106, 153, 154, 173, 174, 264, 271], "endpoint": [78, 106, 303], "includ": [78, 106, 298, 299, 300, 308], "max_f": [78, 106], "log10": [78, 106], "evenli": [78, 106], "00000000e": [78, 106, 181, 182, 303], "00": [78, 106, 181, 182, 303], "76562500e": [78, 106], "04": [78, 106, 246, 303], "95312500e": [78, 106], "03": [78, 106, 246, 303], "97070312e": [78, 106], "98046875e": [78, 106], "99023438e": [78, 106], "95337172": 78, "30202676j": 78, "8178049": 78, "5759632j": 78, "6058636": 78, "79630028j": 78, "rad": [78, 106], "0000000000000002": 78, "0j": [78, 106, 157, 169, 177, 183], "sever": [78, 106], "200": [78, 106, 231, 301, 306], "300": [78, 106, 287, 288], "400": [78, 106, 231, 301], "00391660e": 78, "11022302e": 78, "16j": [78, 181, 182], "53081763e": 78, "79453110e": 78, "17j": 78, "62720131e": 78, "99104274e": 78, "83622458e": 78, "17093835e": 78, "structur": 88, "angular": 88, "179": 88, "farrow1": 88, "quadrat": [88, 309], "farrow2": 88, "cubic": 88, "farrow3": 88, "quartic": [88, 309], "farrow4": 88, "13": [88, 118, 156, 168, 176, 182, 201, 202, 203, 205, 214, 217, 242, 274, 277, 309], "14": [88, 156, 168, 176, 182, 202, 217, 242, 277, 298, 299, 309], "compar": [88, 121, 148, 158, 170, 178, 180, 222, 223, 224, 225, 226, 261, 307], "vari": [88, 161], "15": [88, 148, 156, 204, 217, 242, 243, 277, 290, 291], "xlim": [88, 231, 290, 304, 305, 307], "comparison": [88, 148, 170, 298], "run": [88, 297], "17": [88, 181, 182, 238, 252, 277, 297], "18": [88, 277, 297, 306], "30": [88, 118, 121, 158, 206, 231, 259, 261, 272, 287, 288, 303, 309], "concaten": [88, 303], "19": [88, 277, 309], "should": [94, 148, 156, 258, 299], "three": [94, 301, 307], "21719": 98, "examin": [98, 258], "flat": [98, 224], "32": [98, 224, 301], "128": 98, "loc": 98, "lower": [98, 156, 168, 182, 280, 283], "effect": 98, "outsid": [98, 303], "symmetri": 98, "about": [98, 222, 223, 274, 300], "band": 98, "worst": 98, "1f": 98, "around": [98, 157, 169, 177, 183], "perfectli": 98, "exactli": 98, "best": [99, 224], "append": [99, 224, 287, 304], "lfilter": 100, "b_i": [100, 103, 105, 116, 121, 259, 260, 261, 262, 265, 266, 272, 276, 303], "feedback": [100, 103, 104, 116, 121, 259, 260, 261, 262, 265, 266, 272, 276, 303], "a_j": [100, 103, 104, 116, 121, 259, 260, 261, 262, 265, 266, 272, 276, 303], "These": [100, 168, 176, 182, 275, 299, 305], "differ": [100, 121, 157, 169, 177, 181, 183, 222, 223, 224, 225, 226, 243, 261, 274, 291, 293, 307], "a_0": 100, "classmethod": [100, 101, 116, 121], "zerospol": [100, 101, 106, 116, 121, 259, 260, 261, 262, 265, 266, 272, 276, 303], "self": [100, 101, 116, 121], "b_tap": [100, 105, 116, 121, 303], "a_tap": [100, 104, 116, 121, 303], "conj": [106, 259, 260, 261, 262, 265, 266, 272, 276, 303, 305], "4722987": 106, "47271105": 106, "0041658j": 106, "47394825": 106, "00830241j": 106, "47601067": 106, "01238051j": 106, "472298696877605": 106, "36961426": 106, "9678537j": 106, "57338213": 106, "77694738j": 106, "52496713": 106, "3885743j": 106, "51520024": 106, "1706839j": 106, "accordingli": 116, "dc": [116, 224], "backward": [116, 117, 309, 310], "trapezoid": [116, 117, 309], "forward": [116, 117, 160, 167, 309], "iir_back": 116, "iir_trap": 116, "iir_forw": 116, "y_back": 116, "y_trap": 116, "y_forw": 116, "height": 117, "recommend": 118, "wai": [118, 299], "zoh": [118, 119, 120, 206, 208, 209], "matlab": [118, 119, 120, 206, 208, 209, 308], "linearli": [119, 208], "2p": [119, 208], "ramp": [119, 139, 208], "advanc": [119, 208], "ones": [119, 208, 222, 223, 225, 226, 305], "approxim": [121, 122, 210, 309], "rememb": 121, "scale": [121, 148, 259, 260, 262, 264, 265, 266, 271, 302, 303], "\u03b1": 121, "35": [121, 158], "y_fir": [121, 158], "y_iir": [121, 158], "map_symbol": [123, 129, 156, 168, 176, 182, 212, 238, 239, 247, 257, 258, 284, 304, 305, 306, 309], "decide_symbol": [123, 127, 156, 168, 176, 182, 305, 306, 309], "a_tild": [123, 127, 156, 168, 176, 182, 305, 306], "mle": [123, 127, 156, 168, 176, 182], "dot": [123, 124, 137, 156, 168, 176, 181, 182, 273], "mapsto": [123, 124, 137, 156, 168, 176, 181, 182, 273], "mathbb": [123, 124, 137, 156, 168, 176, 181, 182, 213, 273, 293], "whose": [124, 157, 169, 176, 177, 183], "roll": [124, 169, 177, 183, 293, 307], "off": [124, 169, 177, 183], "loopfilt": [139, 140, 141, 142, 143, 144, 145, 146, 147, 296, 305, 309], "ppi": [139, 141, 296], "track": 139, "constant": [139, 156, 160, 162, 164, 264, 271, 303, 305], "cannot": 139, "chirp": 139, "proportional_gain": [139, 146], "integral_gain": [139, 144], "underli": [139, 143], "mlped": [148, 149, 150, 151, 152, 153, 154, 155, 296, 305, 309], "ml": [148, 152, 296, 305], "aid": [148, 153, 170, 173], "known": [148, 151, 170, 171, 212, 243, 291], "da": [148, 170], "im": 148, "re": [148, 201], "direct": [148, 154, 170, 174, 309], "qpsk": [148, 168, 170, 176, 178, 179, 180, 182, 212, 238, 239, 256, 257, 258, 270, 273, 274, 284, 305, 308, 309], "a_rx": 148, "a_ref": 148, "da_error": [148, 170], "data_aided_error": [148, 153, 170, 173], "dd_error": [148, 170], "decision_directed_error": [148, 154, 170, 174], "grid": [148, 170, 210, 213, 216, 219, 240, 275, 301, 304, 305, 307], "xlabel": [148, 170, 210, 213, 214, 216, 219, 238, 240, 243, 291, 293, 301, 304, 305, 307], "ylabel": [148, 170, 210, 213, 214, 216, 219, 238, 240, 243, 291, 293, 301, 304, 305, 307], "observ": [148, 170, 224, 252, 258], "slope": [148, 170], "rx": [148, 149, 152], "both": [148, 170, 210, 213, 257, 273, 274, 301, 305], "veri": [148, 308], "becaus": [148, 243, 291], "unambigu": [148, 170], "a_receiv": [148, 149, 152], "a_refer": [148, 150, 152], "simul": [148, 153, 154, 170, 173, 174, 306, 308], "scheme": [148, 153, 154, 156, 168, 170, 173, 174, 176, 182, 309], "either": [151, 160, 171, 238], "modem": [153, 154, 156, 168, 173, 174, 176, 182], "n_point": [153, 154, 173, 174], "similar": [156, 168, 182, 307], "One": [156, 168, 182, 307], "distinct": [156, 168, 182], "result": [156, 168, 182, 211, 234, 240, 252, 253, 254, 280, 282, 283, 306], "envelop": [156, 302, 303], "which": [156, 168, 182, 210, 211, 212, 213, 234, 237, 239, 245, 247, 251, 252, 253, 257, 260, 262, 264, 265, 266, 271, 273, 284, 301, 305, 307], "consid": [156, 246], "cpfsk": 156, "separ": 156, "45": [156, 157, 168, 169, 176, 179, 212, 238, 239, 247, 249, 257, 258, 273, 274, 284, 304, 305, 306], "randint": [156, 168, 176, 182, 212, 215, 218, 230, 238, 239, 247, 257, 258, 267, 274, 284, 304, 305, 306], "uint8": [156, 168, 176, 182, 250, 289], "complex_symbol": [156, 168, 176, 182], "70710678": [156, 168, 176], "70710678j": [156, 168, 176], "tx_sampl": [156, 168, 176, 182], "50": [156, 168, 176, 182, 221, 248, 255, 273, 274, 287, 288, 301, 304], "like": [156, 299, 308, 309], "subplot": [156, 168, 247, 305, 306], "imag": [156, 168, 301], "trajectori": 156, "although": 156, "lead": [156, 247, 306], "spectral": [156, 231, 264, 304, 307], "gmsk": 156, "rx_sampl": [156, 168, 176, 182], "last": [156, 168, 250, 297], "rx_symbol": [156, 168, 176, 182], "rx_complex_symbol": [156, 168, 176, 182], "_": [156, 168, 176, 182, 210, 238], "array_equ": [156, 168, 176, 182, 243, 291], "absolut": [157, 160, 162, 165, 169, 183, 213], "consecut": [157, 169, 177, 183], "adjac": [157, 169, 177, 181, 183, 306, 307], "mai": [157, 169, 177, 181, 183, 238, 257, 268, 271, 273, 275, 303], "more": [157, 169, 177, 181, 183, 309], "start": [157, 169, 177, 183, 297], "go": [157, 169, 177, 183], "counter": [157, 169, 177, 183], "clockwis": [157, 169, 177, 183], "circl": [157, 169, 177, 183, 303], "increment": [160, 161, 162, 164, 305], "sin": [160, 212, 280, 283, 287], "Then": 160, "fsk": 160, "60": [160, 222, 223, 225, 226, 307], "repeat": 160, "cp": 160, "57": 160, "bpsk": [160, 178, 180, 256, 270, 304], "format": [161, 214, 243, 291, 309], "option": [161, 259, 260, 262, 264, 265, 266, 271, 309], "convent": [168, 182], "transit": [168, 182, 218, 219, 230, 291, 295], "independ": 168, "apart": 168, "taken": [168, 176, 182, 184], "jq": 168, "begin": [168, 182, 201, 280, 283], "end": [168, 182, 201, 280, 283, 287, 298], "heurist": [170, 296, 305, 309], "dd": [170, 305, 309], "encod": [176, 178, 180, 228, 229, 308], "inform": [176, 232, 233, 235, 243, 285, 291], "ge": [177, 183, 210, 280, 283], "were": [178, 180], "simon": [178, 180], "alouini": [178, 180], "fade": [178, 180], "john": [178, 180], "proaki": [178, 180], "optimum": [178, 180], "psk8": [178, 180, 256, 270, 306], "psk16": [178, 180, 256, 270, 306], "de": [178, 180, 305, 309], "se": [180, 270], "00j": [181, 182], "07106781e": [181, 182], "01j": [181, 182], "12323400e": [181, 182], "83697020e": 181, "22464680e": [181, 182], "annot": [181, 273, 309], "rotat": [182, 249, 305], "rel": [182, 293, 307], "2m": 182, "displaystyl": [182, 280, 283], "pi4_qpsk": 182, "partit": [184, 186, 190, 193], "befor": [195, 198, 310], "decomposit": [195, 198, 309], "exceed": [199, 200], "15865525393145707": [199, 200], "158655": [199, 200], "0000010494310452": [199, 200], "perfect": 201, "knowledg": 201, "cn": [201, 212], "mathrm": 201, "sqrt": [201, 202, 203, 205, 210, 237, 238, 241, 282, 283, 293, 304, 305, 307], "____": 206, "ln": [210, 241], "62": [210, 246], "log_": [210, 211, 221, 234, 240, 251, 253, 254, 282], "54": [210, 246], "44": 210, "12ab": 210, "7b": 210, "claim": 210, "leq": 210, "8096": 210, "radarsp": 210, "weebli": 210, "upload": 210, "21471216": 210, "albersheim_alternative_form": 210, "pdf": [210, 241], "bpb": 210, "w2": 210, "wpmucdn": 210, "site": [210, 297], "gatech": 210, "edu": 210, "dist": [210, 298], "462": 210, "file": [210, 298, 300], "2016": 210, "noncoher": 210, "www": [210, 222, 223, 224, 225, 226, 227, 241, 243, 291], "mathwork": [210, 222, 223, 224, 225, 226, 227, 241, 243, 291], "help": [210, 222, 223, 224, 225, 226, 227, 241, 243, 291], "html": [210, 222, 223, 224, 225, 226, 227, 241, 243, 291, 297], "semilogx": [210, 269], "nuse": 210, "axi": [211, 234, 237, 245, 251, 253, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 271, 273, 274, 301, 309], "avg": [211, 212, 251], "ax": [211, 234, 237, 245, 251, 253, 275, 309], "along": [211, 234, 237, 245, 251, 253, 309], "entir": [211, 234, 237, 245, 251, 253], "decibel": [211, 221, 234, 248, 253, 254, 282, 308, 309], "seed": [212, 215, 218, 230, 309], "ad": [212, 268, 298, 308, 309], "explicitli": 212, "default_rng": [212, 215, 218, 230], "noisi": 212, "set": [212, 240, 243, 257, 264, 268, 271, 273, 275, 291, 298, 300, 303], "zorder": [212, 239, 284], "infti": [212, 213], "nand": 212, "capac": [213, 216, 219, 308, 309], "2d": [213, 268], "x_i": [213, 215, 216, 218, 219, 230, 247], "monoton": 213, "limit": [213, 257, 273, 306], "At": 213, "occur": 213, "view": [213, 298, 308], "59": 213, "shannon": 213, "semilogi": [213, 256, 269, 270], "barker": [214, 294, 308, 309], "int64": [214, 243, 291, 294], "bipolar": [214, 243, 291, 309], "sequenc": [214, 215, 218, 230, 243, 291, 293, 295, 308, 309], "seq": [214, 243, 291], "ideal": [214, 306], "minim": 214, "autocorrel": [214, 243, 291, 293], "sidelob": [214, 222, 223, 225, 226, 243, 280, 283, 291, 293], "corr": [214, 293], "lag": [214, 243, 291, 293], "roughli": [215, 218, 301], "eras": 215, "flip": 218, "h_b": 219, "cf": 220, "v_": [220, 221, 248, 254, 282], "en": [220, 251, 293], "wikipedia": [220, 251, 293], "org": [220, 251, 293], "wiki": [220, 251, 293], "type": [221, 238, 248, 250, 264, 269, 271, 289, 309], "voltag": [221, 248, 254, 282, 308], "x_": [221, 248], "mhz": [221, 248], "77": [221, 246, 248], "50e6": 221, "76": [221, 246], "98970004336019": 221, "mw": [221, 248], "dbm": [221, 248], "dbv": [221, 248], "020599913279624": 221, "center_freq": [222, 223], "hann": [222, 223, 225, 226, 264, 271], "chebyshev": [222, 223, 225, 226], "nyquist": [222, 223, 225, 226, 231, 258, 290, 307], "side": [222, 223, 241, 259, 260, 262, 264, 265, 266, 271, 302, 303, 304, 307], "No": [222, 223, 225, 226], "blackmanharri": [222, 223, 225, 226], "chebwin": [222, 223, 225, 226], "dsp": [222, 223, 224, 225, 226, 227, 308], "designbandpassfir": 222, "h_ham": [222, 223, 225, 226], "h_hann": [222, 223, 225, 226], "h_blackman": [222, 223, 225, 226], "h_blackman_harri": [222, 223, 225, 226], "h_chebyshev": [222, 223, 225, 226], "h_kaiser": [222, 223, 225, 226], "larger": [223, 244, 247, 257, 273, 281], "designbandstopfir": 223, "75": [223, 246, 257, 305, 306], "tau": 224, "l_": 224, "designfracdelayfir": 224, "h_8": [224, 280, 283], "h_16": [224, 280, 283], "h_32": 224, "h_64": 224, "cutoff_freq": [225, 226], "cutoff": [225, 226], "f_c": [225, 226], "designhighpassfir": 225, "designlowpassfir": 226, "designmultiratefir": 227, "oplu": [228, 229, 245], "uncod": 229, "dmc": [230, 295, 308, 309], "memoryless": [230, 295, 308], "pr": 230, "y_j": 230, "alphabet": 230, "ldot": 230, "doe": [231, 290], "anti": [231, 290, 309], "alias": [231, 290, 309], "x1": 231, "x2": 231, "130": 231, "x3": [231, 293], "spectrum": [231, 259, 260, 262, 264, 265, 266, 271, 287, 288, 290], "content": 231, "abov": [231, 290], "fold": 231, "cw": 231, "unalias": 231, "2048": [231, 287, 288, 290, 304], "qam": [232, 233, 235, 285], "249387366082999": [232, 233], "020599913279625": [232, 286], "7506126339170005": [235, 285], "979400086720376": [235, 236], "norm": [238, 241, 244, 280, 281, 283], "noiseless": 238, "sourc": 238, "max": [238, 253, 254], "percentil": [238, 271], "26858624734949": 238, "215333638295037": 238, "275412607232283": 238, "95th": 238, "95": 238, "93683913847921": 238, "inst_evm": 238, "hist": 238, "histogram": 238, "frequency_offset": [239, 295, 309], "freq_rat": 239, "cycl": [239, 274], "5e": 239, "deg": [239, 247, 305], "path": [240, 308], "loss": [240, 308], "meter": [240, 252, 292], "transmitt": 240, "far": 240, "field": 240, "impli": 240, "possibl": [240, 308], "km": 240, "link": [240, 308, 309], "ghz": [240, 252, 292], "1e3": [240, 249, 287], "1e9": [240, 252, 292], "92": 240, "44778322188337": 240, "doubl": [240, 252], "2e3": 240, "98": 240, "468383135163": 240, "2e9": 240, "up": [240, 298], "product": [241, 307], "thought": [241, 310], "smaller": [241, 280, 283, 307], "wider": 241, "gaussdesign": 241, "onlinelibrari": 241, "wilei": 241, "doi": 241, "1002": 241, "9780470041956": 241, "app2": 241, "h_0p1": [241, 280, 283], "h_0p2": 241, "h_0p3": 241, "hadamard": [243, 291, 294, 308, 309], "comm": [243, 291], "hadamardcod": 243, "walsh": [243, 291, 294, 308, 309], "thei": [243, 291, 310], "cross": [243, 291, 293], "seq1": [243, 291], "seq2": [243, 291], "seq3": [243, 291], "quit": [243, 291], "larg": [243, 291, 298], "misalign": [243, 291], "precis": [243, 291], "xcorr12": [243, 291], "xcorr13": [243, 291], "xcorr23": [243, 291], "uniform": [243, 291], "fact": [243, 291], "high": [243, 291], "acorr1": [243, 291], "acorr2": [243, 291], "acorr3": [243, 291], "reason": [244, 281, 297], "h_half_sin": 244, "displai": [246, 257, 259, 260, 262, 264, 265, 266, 271, 273], "line": [246, 274, 298, 304], "print": [246, 301, 302, 303, 305], "quick": 246, "brown": 246, "fox": 246, "jump": 246, "lazi": 246, "dog": 246, "00000000": 246, "68": 246, "65": 246, "71": 246, "69": 246, "63": 246, "6b": 246, "72": 246, "6f": 246, "6e": 246, "00000010": 246, "66": 246, "78": 246, "6a": 246, "6d": 246, "73": 246, "74": 246, "00000020": 246, "6c": 246, "61": 246, "7a": 246, "79": 246, "67": 246, "he": 246, "02": [246, 303, 305], "00000004": 246, "05": [246, 301, 303, 305], "06": 246, "07": 246, "08": 246, "00000008": 246, "09": 246, "0a": 246, "iq_imbal": [247, 295, 309], "iq": [247, 295, 308], "imbal": [247, 295, 308], "compon": [247, 287, 288, 290], "g_i": 247, "180": 247, "g_q": 247, "x_q": 247, "horizont": 247, "stretch": 247, "while": [247, 307], "vertic": 247, "northwest": 247, "northeast": 247, "50118723": 248, "36272725": 248, "9952623149688795": 248, "satisfi": 249, "remov": [249, 264, 271, 309], "dtypelik": [250, 289], "most": [250, 289], "signific": [250, 289], "enough": 250, "fill": 250, "smallest": 250, "unsign": 250, "diamet": 252, "55": [252, 274, 309], "eta": 252, "dbi": 252, "arcsin": 252, "83": 252, "dish": 252, "21": [252, 274], "810210290266568": 252, "437435887991374": 252, "sinc": [252, 258, 297, 306], "antenna": [252, 308], "we": [252, 308], "830810203546193": 252, "529544741425365": 252, "keyword": [256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 302, 303, 309], "pyplot": [256, 257, 260, 261, 262, 263, 264, 265, 266, 270, 271, 272, 273, 274, 275, 276, 301, 302, 303, 304, 305, 306, 307], "heatmap": [257, 306], "scatter": 257, "overwritten": [257, 268, 271, 273], "hist2d": 257, "imaginari": [258, 268, 274], "interleav": [258, 268], "base": [258, 267, 268, 274, 309], "intersymbol": 258, "interfer": 258, "isi": 258, "cascad": 258, "why": 258, "often": [258, 301], "practic": 258, "n_time": [259, 303], "n_freq": 259, "x_axi": [259, 260, 262, 264, 265, 266, 302, 303, 304, 305, 309], "n_t": 259, "n_f": 259, "logarithm": [259, 260, 262, 264, 265, 266, 302, 303], "h_srrc": [259, 260, 261, 262, 265, 266, 272, 276, 306], "auto": [260, 262, 264, 265, 266, 271, 309], "select": [260, 262, 264, 265, 266, 271, 298], "x_label": 263, "overlap": [264, 271, 304], "detrend": [264, 271], "median": 264, "segment": [264, 271], "256": [264, 271, 304], "trend": [264, 271], "unwrap": [266, 305], "stride": 268, "colorbar": 268, "1d": 268, "determin": 268, "row": 268, "collect": 268, "linecollect": 268, "linewidth": [268, 293], "solid": [268, 274], "cmap": 268, "rainbow": 268, "loglog": 269, "pcolormesh": 271, "vmin": 271, "10th": 271, "vmax": 271, "100th": 271, "shade": 271, "gouraud": 271, "represent": [273, 309], "markers": 273, "diff": [274, 304], "mutual": 274, "exclus": 274, "dash": 274, "share": 274, "10e3": 274, "uniformli": 274, "style": 275, "revert": 275, "rcdefault": 275, "_rc_param": 275, "rc_param": 275, "autolayout": 275, "max_open_warn": 275, "titleweight": 275, "bold": 275, "arrang": 277, "down": 277, "column": 277, "notion": 277, "demonstr": 277, "matric": 277, "000005": 278, "000000025": 278, "005": [279, 305], "000025": 279, "excess": [280, 283, 307], "narrow": [280, 283], "expens": [280, 283], "higher": [280, 283, 307], "h_0p5": [280, 283], "h_0p9": [280, 283], "affect": [280, 283], "longer": [280, 283, 287], "h_4": [280, 283], "h_rect": [281, 307], "sample_rate_offset": [284, 295, 309], "250": [287, 288, 305], "ksp": [287, 288], "conjug": [287, 288, 303], "500": [287, 288, 305], "now": [287, 288, 301, 309], "150": [287, 288], "asymmetr": 288, "copi": 290, "mani": [291, 298], "walshcod": 291, "299792458": 292, "zadoff_chu": [293, 294, 309], "zadoff": [293, 294, 308, 309], "chu": [293, 294, 308, 309], "prime": 293, "gcd": 293, "ne": 293, "cyclic": 293, "x_u": 293, "c_": 293, "2q": 293, "mod": 293, "e2": 293, "93chu_sequ": 293, "x_3": 293, "139": 293, "tile": 293, "x_5": 293, "x5": 293, "xcorr": 293, "sphinx": 297, "immateri": 297, "theme": 297, "depend": [297, 298, 300, 309], "store": [297, 299, 300], "txt": [297, 298, 299, 300], "some": 297, "below": [297, 302, 303], "version": [297, 299, 308, 309], "aren": 297, "resolut": 297, "minut": 297, "ci": 297, "myst": 297, "parser": 297, "updat": [297, 309], "git": [297, 299], "math": 297, "dollar": 297, "ipykernel": 297, "26": 297, "nb": 297, "pickleshar": 297, "switch": 297, "pip": [297, 298, 299, 300, 308], "python3": [297, 298, 299, 300, 308], "built": 297, "command": [297, 298], "dirhtml": 297, "locat": [297, 300], "home": 297, "page": 297, "directori": [297, 299], "get": 297, "necessari": 297, "webpag": 297, "webserv": 297, "easili": [297, 298, 300, 302, 303], "python": [297, 308], "server": 297, "8080": 297, "access": 297, "web": 297, "browser": 297, "localhost": 297, "librari": [298, 299, 300, 301, 306, 308, 310], "ruff": [298, 299, 309], "lint": [298, 299], "your": [298, 300], "develop": [298, 299, 300], "dev": [298, 300], "pyproject": [298, 300], "toml": [298, 299, 300], "tool": [298, 300, 308], "src": 298, "extend": 298, "ipynb": 298, "exclud": 298, "build": [298, 308], "_version": 298, "py": [298, 300], "120": 298, "doc": 298, "pycodestyl": 298, "pyflak": 298, "pyupgrad": 298, "flake8": 298, "bugbear": 298, "simplifi": 298, "isort": 298, "pylint": [298, 309], "npy": 298, "rule": 298, "ruf": 298, "ignor": 298, "e501": 298, "too": 298, "long": 298, "e713": 298, "e714": 298, "plr2004": 298, "magic": 298, "plr0913": 298, "plr5501": 298, "collaps": 298, "els": [298, 304], "plr0912": 298, "plr0915": 298, "statement": 298, "__init__": 298, "f401": 298, "f403": 298, "manual": [298, 300], "check": 298, "hook": 298, "config": [298, 301, 302, 303, 304, 305, 306, 307], "yaml": 298, "repo": [298, 299], "github": [298, 308], "rev": 298, "v2": 298, "id": 298, "fixer": 298, "trail": 298, "whitespac": 298, "astral": 298, "sh": 298, "v0": 298, "enabl": [298, 309], "disabl": 298, "uninstal": 298, "extens": 298, "vscode": [298, 300], "json": [298, 300], "you": [298, 299, 300, 308], "edit": [298, 303], "latest": [299, 308], "releas": [299, 309], "main": [299, 307], "mhostett": [299, 309], "Or": [299, 300], "pre": 299, "To": 299, "activ": 299, "benefici": 299, "fashion": 299, "allow": [299, 300], "immedi": 299, "seen": 299, "upon": 299, "next": 299, "clone": 299, "wherev": 299, "flag": 299, "packag": [299, 308], "commit": 299, "pytest": [299, 300], "cov": 299, "xdist": 299, "benchmark": 299, "ini_opt": 300, "minvers": 300, "addopt": 300, "showloc": 300, "testpath": 300, "execut": 300, "test_psk": 300, "instruct": 300, "invok": 300, "infrastructur": 300, "debug": 300, "inlinebackend": [301, 302, 303, 304, 305, 306, 307], "print_figure_kwarg": [301, 302, 303, 304, 305, 306, 307], "facecolor": [301, 302, 303, 304, 305, 306, 307], "inlin": [301, 302, 303, 304, 305, 306, 307], "widget": [301, 302, 303, 304, 305, 306, 307], "tx": 301, "fillstyl": 301, "show": [301, 302, 303, 304, 305, 306, 307], "accomplish": [301, 306], "def": [301, 304, 306], "resample_sign": 301, "new_sample_r": 301, "ty": 301, "gca": [301, 306], "set_prop_cycl": [301, 306], "four": 301, "fourth": 301, "do": 301, "315": 301, "00095883": 302, "00175012": 302, "00423921": 302, "0058825": 302, "006151": 302, "00474595": 302, "0017044": 302, "00254816": 302, "00721645": 302, "0112324": 302, "01342358": 302, "01273202": 302, "00845058": 302, "0004368": 302, "01073669": 302, "02372977": 302, "03650247": 302, "04650654": 302, "05098525": 302, "04734644": 302, "03355896": 302, "00851486": 302, "02769991": 302, "07367348": 302, "12670446": 302, "18301321": 302, "23810898": 302, "28727058": 302, "32607991": 302, "35093841": 302, "35949665": 302, "conveni": [302, 303], "evalu": [302, 303], "29": 302, "31": 302, "here": [302, 303], "478207252018059": 303, "6400000000000001": 303, "7391036260090295": 303, "3061467458920719j": 303, "47820725": 303, "78207252e": 303, "58172329e": 303, "10862468e": 303, "86109590e": 303, "21565653e": 303, "01140214e": 303, "57286400e": 303, "67772160e": 303, "47338728e": 303, "10422993e": 303, "89312837e": 303, "12240078e": 303, "03953322e": 303, "69685122e": 303, "63882791e": 303, "81474977e": 303, "47193366e": 303, "85259041e": 303, "15647504e": 303, "23851924e": 303, "42176895e": 303, "84684395e": 303, "42721858e": 303, "72236648e": 303, "14721649e": 303, "10813095e": 303, "94024315e": 303, "78877688e": 303, "74077567e": 303, "87820725": 303, "53637958": 303, "94724205": 303, "13335164": 303, "1455082": 303, "04436799": 303, "88708159": 303, "71930943": 303, "5719707": 303, "46154771": 303, "39261642": 303, "36139242": 303, "35935288": 303, "3763214": 303, "40270968": 303, "43085717": 303, "45557651": 303, "47410241": 303, "48566716": 303, "49090568": 303, "49124786": 303, "48840102": 303, "4839738": 303, "47925143": 303, "47510421": 303, "47199608": 303, "47005584": 303, "46917696": 303, "46911955": 303, "denomin": 303, "73910363": 303, "30614675j": 303, "plane": 303, "092337035029908": 303, "71104892744724": 303, "684365018955985": 303, "37868538208862": 303, "1263714068241546": 303, "9993519409971622": 303, "1909320767063554": 303, "016796159999999997": 303, "46380627201816593": 303, "3806359704987265j": 303, "4988817673791569": 303, "3333421398098428j": 303, "5543277195052645": 303, "22961005941814036j": 303, "5291527586123693": 303, "28283804209787544j": 303, "lyon": 303, "understand": 303, "3rd": 303, "insid": 303, "unstabl": 303, "n_symbol": 304, "pb": 304, "x_bb_rect": 304, "papr_bb_rect": 304, "x_pb_rect": 304, "papr_pb_rect": 304, "x_bb_0p1": 304, "papr_bb_0p1": 304, "x_pb_0p1": 304, "papr_pb_0p1": 304, "x_bb_0p5": 304, "papr_bb_0p5": 304, "x_pb_0p5": 304, "papr_pb_0p5": 304, "x_bb_0p9": 304, "papr_bb_0p9": 304, "x_pb_0p9": 304, "papr_pb_0p9": 304, "2f": 304, "rf": [304, 305], "512": 304, "sweep_alpha": 304, "bb_papr": 304, "pb_papr": 304, "bpsk_bb_papr": 304, "bpsk_pb_papr": 304, "qpsk_bb_papr": 304, "qpsk_pb_papr": 304, "psk8_bb_papr": 304, "psk8_pb_papr": 304, "psk16_bb_papr": 304, "psk16_pb_papr": 304, "configur": 305, "loop_filt": 305, "0x7fce0c4bd1d0": 305, "theta_0": 305, "phase_error": 305, "freq_estim": 305, "suptitl": [305, 306], "make": [305, 310], "a_hat": [305, 306], "rad2deg": 305, "avail": [305, 306, 308], "b_nt": 305, "0005": 305, "0125": 305, "015": 305, "0175": 305, "t_lock": 305, "analyze_psk": 306, "100_000": 306, "n0": 306, "tx_mf": 306, "1e6": 306, "bpsk_ber": 306, "bpsk_ser": 306, "qpsk_ber": 306, "qpsk_ser": 306, "psk8_ber": 306, "psk8_ser": 306, "psk16_ber": 306, "psk16_ser": 306, "1e0": 306, "psk8_bin": 306, "psk8_grai": 306, "wors": 306, "rc_0p1": 307, "rc_0p5": 307, "rc_0p9": 307, "pm": 307, "nearli": 307, "small": 307, "lobe": 307, "much": 307, "freqz": 307, "worn": 307, "h_rc_0p1": 307, "h_rc_0p5": 307, "h_rc_0p9": 307, "p_rect": 307, "cumsum": 307, "p_rc_0p1": 307, "p_rc_0p5": 307, "p_rc_0p9": 307, "within": 307, "srrc_0p1": 307, "srrc_0p5": 307, "srrc_0p9": 307, "therefor": 307, "significantli": 307, "due": 307, "being": 307, "h_srrc_0p1": 307, "h_srrc_0p5": 307, "h_srrc_0p9": 307, "p_srrc_0p1": 307, "p_srrc_0p5": 307, "p_srrc_0p9": 307, "gauss_0p1": 307, "gauss_0p2": 307, "gauss_0p3": 307, "softwar": 308, "radio": 308, "goal": 308, "analyz": 308, "reli": 308, "interoper": 308, "numba": [308, 309], "acceler": 308, "computation": 308, "intens": 308, "addition": 308, "aim": 308, "replic": 308, "relev": 308, "toolbox": 308, "progress": 308, "someth": 308, "pleas": 308, "open": 308, "issu": 308, "pypi": 308, "api": [308, 309, 310], "convers": [308, 309], "synchron": 308, "budget": [308, 309], "manipul": 308, "januari": 309, "2024": 309, "modifi": 309, "design_multirate_tap": 309, "fix": [309, 310], "bug": [309, 310], "matt": 309, "hostett": 309, "decemb": 309, "2023": 309, "rework": 309, "frequency_response_log": 309, "explicit": 309, "improv": 309, "jupyt": 309, "notebook": 309, "novemb": 309, "abil": 309, "renam": 309, "multirate_tap": 309, "polyphase_matrix": 309, "model": 309, "replac": 309, "black": 309, "septemb": 309, "sensibl": 309, "august": 309, "27": 309, "without": 309, "superflu": 309, "translat": 309, "juli": 309, "firinterpol": 309, "impair": 309, "fpsl": 309, "helper": 309, "synthes": 309, "semant": 310, "major": 310, "minor": 310, "patch": 310, "introduc": 310, "featur": 310, "compat": 310, "There": 310, "guarante": 310, "them": 310}, "objects": {"": [[3, 0, 0, 1, "sdr", ""]], "sdr": [[9, 1, 1, "", "AGC", "Implements an automatic gain controller (AGC)."], [18, 1, 1, "", "CPM", "Implements continuous-phase modulation (CPM)."], [32, 1, 1, "", "Channelizer", "Implements a polyphase channelizer FIR filter."], [37, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [54, 1, 1, "", "Decimator", "Implements a polyphase decimating FIR filter."], [58, 1, 1, "", "Differentiator", "Implements a differentiator FIR filter."], [60, 1, 1, "", "EnergyDetector", "Implements an energy detector."], [65, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [72, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [88, 1, 1, "", "FarrowResampler", "Implements a piecewise polynomial Farrow arbitrary resampler."], [98, 1, 1, "", "FractionalDelay", "Implements a fractional delay FIR filter."], [100, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [116, 1, 1, "", "Integrator", "Implements an integrator IIR filter."], [118, 1, 1, "", "Interpolator", "Implements a polyphase interpolating FIR filter."], [121, 1, 1, "", "LeakyIntegrator", "Implements a leaky integrator IIR filter."], [123, 1, 1, "", "LinearModulation", "Implements linear phase/amplitude modulation with arbitrary symbol mapping."], [139, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [148, 1, 1, "", "MLPED", "Implements a maximum-likelihood phase error detector (ML-PED)."], [156, 1, 1, "", "MSK", "Implements minimum-shift keying (MSK) modulation and demodulation."], [158, 1, 1, "", "MovingAverager", "Implements a moving average FIR filter."], [160, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [168, 1, 1, "", "OQPSK", "Implements offset quadrature phase-shift keying (OQPSK) modulation and demodulation."], [170, 1, 1, "", "PED", "Implements a heuristic phase error detector (PED)."], [176, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [182, 1, 1, "", "PiMPSK", "Implements $pi/M$ phase-shift keying ($pi/M$ PSK) modulation and demodulation."], [184, 1, 1, "", "PolyphaseFIR", "Implements a generic polyphase FIR filter."], [199, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [200, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [201, 1, 1, "", "ReplicaCorrelator", "Implements an clairvoyant replica-correlator detector."], [206, 1, 1, "", "Resampler", "Implements a polyphase rational resampling FIR filter."], [210, 5, 1, "", "albersheim", "Estimates the minimum required single-sample SNR, given $N_{NC}$ non-coherent combinations, to achieve a probability of detection $P_D$ and probability of false alarm $P_{FA}$. This function implements Albersheim's equation."], [211, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [212, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [213, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [214, 5, 1, "", "barker", "Returns the Barker code/sequence of length $N$."], [215, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [216, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [217, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [218, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [219, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [220, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [221, 5, 1, "", "db", "Converts from linear units to decibels."], [222, 5, 1, "", "design_bandpass_fir", "Designs a bandpass FIR filter impulse response $h[n]$ using the window method."], [223, 5, 1, "", "design_bandstop_fir", "Designs a bandstop FIR filter impulse response $h[n]$ using the window method."], [224, 5, 1, "", "design_frac_delay_fir", "Designs a fractional delay FIR filter impulse response $h[n]$ using the Kaiser window method."], [225, 5, 1, "", "design_highpass_fir", "Designs a highpass FIR filter impulse response $h[n]$ using the window method."], [226, 5, 1, "", "design_lowpass_fir", "Designs a lowpass FIR filter impulse response $h[n]$ using the window method."], [227, 5, 1, "", "design_multirate_fir", "Designs a multirate FIR filter impulse response $h[n]$ using the Kaiser window method."], [228, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [229, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [230, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [231, 5, 1, "", "downsample", "Downsamples the time-domain signal $x[n]$ by the factor $r$, by discarding $r-1$ samples every $r$ samples."], [232, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [233, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [234, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [235, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [236, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [237, 5, 1, "", "euclidean", "Measures the Euclidean distance between two signals $x[n]$ and $y[n]$."], [238, 5, 1, "", "evm", "Calculates the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [239, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [240, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [241, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [242, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [243, 5, 1, "", "hadamard", "Returns the Hadamard code/sequence of length $N$."], [244, 5, 1, "", "half_sine", "Returns a half-sine pulse shape."], [245, 5, 1, "", "hamming", "Measures the Hamming distance between two signals $x[n]$ and $y[n]$."], [246, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [247, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [248, 5, 1, "", "linear", "Converts from decibels to linear units."], [249, 5, 1, "", "mix", "Mixes the time-domain signal $x[n]$ with a complex exponential or real sinusoid."], [250, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [251, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [252, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [253, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [254, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [255, 5, 1, "", "percent", "Converts from a ratio to a percentage."], [277, 5, 1, "", "polyphase_decompose", "Decomposes the prototype filter taps $h[n]$ into the polyphase matrix $h_i[n]$ with $B$ phases."], [278, 5, 1, "", "ppb", "Converts from a ratio to parts per billion (ppb)."], [279, 5, 1, "", "ppm", "Converts from a ratio to parts per million (ppm)."], [280, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [281, 5, 1, "", "rectangular", "Returns a rectangular pulse shape."], [282, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [283, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [284, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [285, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [286, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [287, 5, 1, "", "to_complex_bb", "Converts the real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$ to a complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c} = f_{s,r}/2$."], [288, 5, 1, "", "to_real_pb", "Converts the complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$ to a real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r} = 2f_{s,c}$."], [289, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [290, 5, 1, "", "upsample", "Upsamples the time-domain signal $x[n]$ by the factor $r$, by inserting $r-1$ zeros between each sample."], [291, 5, 1, "", "walsh", "Returns the Walsh code/sequence of length $N$."], [292, 5, 1, "", "wavelength", "Calculates the wavelength $lambda$ of an electromagnetic wave with frequency $f$."], [293, 5, 1, "", "zadoff_chu", "Returns the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.AGC": [[10, 2, 1, "", "__call__", "Performs automatic gain control on the input signal."], [11, 2, 1, "", "__init__", "Creates an automatic gain controller (AGC)."], [12, 4, 1, "", "attack", "(Settable) The attack rate $alpha$."], [13, 4, 1, "", "decay", "(Settable) The decay rate $beta$."], [14, 4, 1, "", "gain", "The current linear gain."], [15, 4, 1, "", "reference", "(Settable) The desired output magnitude."], [16, 2, 1, "", "reset", "Resets the AGC gain. Only useful when using streaming mode."], [17, 4, 1, "", "streaming", "Indicates whether the AGC is in streaming mode."]], "sdr.AGC.__call__": [[10, 3, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.AGC.__init__": [[11, 3, 2, "p-attack", "attack", "The attack rate $alpha$. The attack rate is meant to attenuate strong signals. After $n_0 approx 1 / alpha$ samples the error will reduce to $1 / e$ of its original value."], [11, 3, 2, "p-decay", "decay", "The decay rate $beta$. The decay rate is meant to amplify weak signals. After $n_0 approx 1 / beta$ samples the error will reduce to $1 / e$ of its original value."], [11, 3, 2, "p-reference", "reference", "The desired output magnitude."], [11, 3, 2, "p-streaming", "streaming", "Indicates whether the AGC operates in streaming mode. In streaming mode, the gain is preserved between calls to __call__()."]], "sdr.AGC.reset": [[16, 3, 2, "p-gain", "gain", "The initial linear gain of the AGC."]], "sdr.CPM": [[19, 2, 1, "", "__init__", "Creates a new continuous-phase modulation object."], [20, 2, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [21, 4, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [22, 2, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples $tilde{x}[n]$ into decimal symbol decisions $hat{s}[k]$ using matched filtering and maximum-likelihood estimation."], [23, 4, 1, "", "index", "The modulation index $h$."], [24, 2, 1, "", "modulate", "Modulates the decimal symbols $s[k]$ into pulse-shaped complex samples $x[n]$."], [25, 4, 1, "", "order", "The modulation order $M = 2^k$."], [26, 4, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [27, 4, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the instantaneous frequency of the signal."], [28, 4, 1, "", "rx_filter", "The receive decimating matched filter. The filter coefficients are matched to the pulse shape $h[-n]^*$."], [29, 2, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [30, 4, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [31, 4, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter. The filter coefficients are the pulse shape $h[n]$."]], "sdr.CPM.__init__": [[19, 3, 2, "p-index", "index", "The modulation index $h$. The modulation index is the ratio of the frequency deviation to the symbol rate $h = Delta f / f_{sym}$. The phase change per symbol is $pi h$."], [19, 3, 2, "p-order", "order", "The modulation order $M = 2^k$."], [19, 3, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees."], [19, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the instantaneous frequency of the signal. If a string is passed, the pulse shape is normalized such that the maximum value is 1."], [19, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string."], [19, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."]], "sdr.CPM.ber": [[20, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.CPM.demodulate": [[22, 3, 2, "p-x_tilde", "x_tilde", "The received pulse-shaped complex samples $tilde{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.CPM.modulate": [[24, 3, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.CPM.ser": [[29, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.Channelizer": [[33, 2, 1, "", "__call__", "Channelizes the input signal $x[n]$ with the polyphase FIR filter."], [34, 2, 1, "", "__init__", "Creates a polyphase FIR channelizing filter."], [35, 4, 1, "", "channels", "The number of channels $C$."], [36, 4, 1, "", "method", "The method used to design the polyphase channelizing filter."]], "sdr.Channelizer.__call__": [[33, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [33, 3, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Channelizer.__init__": [[34, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB. Only used when taps=\"kaiser\"."], [34, 3, 2, "p-channels", "channels", "The number of channels $C$."], [34, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even. Only used when taps=\"kaiser\"."], [34, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [34, 3, 2, "p-taps", "taps", "The prototype filter design specification."]], "sdr.ClosedLoopPLL": [[38, 4, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [39, 4, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [40, 4, 1, "", "K0", "The NCO gain $K_0$."], [41, 4, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [42, 4, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [43, 4, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [44, 2, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [45, 2, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [46, 4, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [47, 2, 1, "", "lock_time", "Returns the lock time of the PLL."], [48, 4, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [49, 4, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [50, 2, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [51, 2, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [52, 4, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [53, 4, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[44, 3, 2, "p-K0", "K0", "The NCO gain $K_0$."], [44, 3, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [44, 3, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [44, 3, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [44, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[45, 3, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[47, 3, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[50, 3, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.Decimator": [[55, 2, 1, "", "__init__", "Creates a polyphase FIR decimating filter."], [56, 4, 1, "", "method", "The method used to design the polyphase decimating filter."], [57, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."]], "sdr.Decimator.__init__": [[55, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB. Only used when taps=\"kaiser\"."], [55, 3, 2, "p-decimation", "decimation", "The decimation rate $Q$."], [55, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even. Only used when taps=\"kaiser\"."], [55, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [55, 3, 2, "p-taps", "taps", "The prototype filter design specification."]], "sdr.Differentiator": [[59, 2, 1, "", "__init__", "Creates a differentiator FIR filter."]], "sdr.Differentiator.__init__": [[59, 3, 2, "p-order", "order", "The order of the FIR differentiator $N$. The filter length is $N + 1$. Increasing the filter order increases the bandwidth of the differentiator."], [59, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [59, 3, 2, "p-window", "window", "The SciPy window definition. See scipy.signal.windows.get_window() for details. If None, no window is applied."]], "sdr.EnergyDetector": [[61, 2, 1, "", "p_d", "Computes the probability of detection $P_D$."], [62, 2, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [63, 2, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [64, 2, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.EnergyDetector.p_d": [[61, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [61, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [61, 3, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.p_fa": [[62, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [62, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [62, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [62, 3, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.EnergyDetector.roc": [[63, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [63, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [63, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."], [63, 3, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.threshold": [[64, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [64, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [64, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [64, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.ErrorRate": [[66, 2, 1, "", "__init__", "Creates a new error rate tabulation object."], [67, 2, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [68, 2, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [69, 2, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [70, 2, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [71, 2, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[67, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [67, 3, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [67, 3, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[68, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[69, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[71, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[73, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the FIR filter."], [74, 2, 1, "", "__init__", "Creates an FIR filter."], [75, 2, 1, "", "__len__", "Returns the filter length $N + 1$."], [76, 4, 1, "", "delay", "The delay of the FIR filter $d = lfloor frac{N + 1}{2} rfloor$ in samples."], [77, 2, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [78, 2, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the FIR filter."], [79, 2, 1, "", "group_delay", "Returns the group delay $tau_g(omega)$ of the FIR filter."], [80, 2, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [81, 4, 1, "", "order", "The order of the FIR filter $N$."], [82, 2, 1, "", "phase_delay", "Returns the phase delay $tau_{phi}(omega)$ of the FIR filter."], [83, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [84, 4, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [85, 2, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [86, 4, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [87, 4, 1, "", "taps", "The feedforward taps $h[n]$ with length $N + 1$."]], "sdr.FIR.__call__": [[73, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [73, 3, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.FIR.__init__": [[74, 3, 2, "p-h", "h", "The feedforward coefficients $h[n]$."], [74, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FIR.frequency_response": [[78, 3, 2, "p-decades", "decades", "Only used if freqs is an integer."], [78, 3, 2, "p-freqs", "freqs", "The frequency specification."], [78, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [78, 3, 2, "p-whole", "whole", "Only used if freqs is an integer."]], "sdr.FIR.group_delay": [[79, 3, 2, "p-N", "N", "The number of samples in the group delay."], [79, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[80, 3, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.phase_delay": [[82, 3, 2, "p-N", "N", "The number of samples in the phase delay."], [82, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.step_response": [[85, 3, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FarrowResampler": [[89, 2, 1, "", "__call__", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [90, 2, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [91, 4, 1, "", "delay", "The delay $d$ of the Farrow FIR filters in samples. Output sample $d cdot r$, corresponds to the first input sample, where $r$ is the current resampling rate."], [92, 2, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [93, 4, 1, "", "order", "The order of the piecewise polynomial."], [94, 2, 1, "", "reset", "Resets the filter state and fractional sample index."], [95, 4, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [96, 4, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [97, 4, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__call__": [[89, 3, 2, "p-rate", "rate", "The resampling rate $r$."], [89, 3, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.__init__": [[90, 3, 2, "p-order", "order", "The order of the piecewise polynomial. Must be between 1 and 4."], [90, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FarrowResampler.flush": [[92, 3, 2, "p-rate", "rate", "The resampling rate $r$."]], "sdr.FarrowResampler.reset": [[94, 3, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.FractionalDelay": [[99, 2, 1, "", "__init__", "Creates a fractional delay FIR filter."]], "sdr.FractionalDelay.__init__": [[99, 3, 2, "p-delay", "delay", "The fractional delay $0 le Delta n le 1$."], [99, 3, 2, "p-length", "length", "The filter length $L$. Filters with even length have best performance. Filters with odd length are equivalent to an even-length filter with an appended zero."]], "sdr.IIR": [[101, 2, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [102, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the IIR filter."], [103, 2, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [104, 4, 1, "", "a_taps", "The feedback taps $a_j$ for $j = 0,...,N$."], [105, 4, 1, "", "b_taps", "The feedforward taps $b_i$ for $i = 0,...,M$."], [106, 2, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the IIR filter."], [107, 4, 1, "", "gain", "The gain of the IIR filter."], [108, 2, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [109, 4, 1, "", "order", "The order of the IIR filter $N$."], [110, 4, 1, "", "poles", "The poles of the IIR filter."], [111, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [112, 4, 1, "", "state", "The filter state."], [113, 2, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [114, 4, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [115, 4, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[101, 3, 2, "p-gain", "gain", "The gain of the transfer function."], [101, 3, 2, "p-poles", "poles", "The poles of the transfer function."], [101, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."], [101, 3, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__call__": [[102, 3, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.IIR.__init__": [[103, 3, 2, "p-a", "a", "The feedback coefficients $a_j$ for $j = 0,...,N$."], [103, 3, 2, "p-b", "b", "The feedforward coefficients $b_i$ for $i = 0,...,M$."], [103, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.IIR.frequency_response": [[106, 3, 2, "p-decades", "decades", "Only used if freqs is an integer."], [106, 3, 2, "p-freqs", "freqs", "The frequency specification."], [106, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [106, 3, 2, "p-whole", "whole", "Only used if freqs is an integer."]], "sdr.IIR.impulse_response": [[108, 3, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[113, 3, 2, "p-N", "N", "The number of samples to return."]], "sdr.Integrator": [[117, 2, 1, "", "__init__", "Creates an integrating IIR filter."]], "sdr.Integrator.__init__": [[117, 3, 2, "p-method", "method", "The integration method."], [117, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.Interpolator": [[119, 2, 1, "", "__init__", "Creates a polyphase FIR interpolating filter."], [120, 4, 1, "", "method", "The method used to design the polyphase interpolating filter."]], "sdr.Interpolator.__init__": [[119, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB. Only used when taps=\"kaiser\"."], [119, 3, 2, "p-interpolation", "interpolation", "The interpolation rate $P$."], [119, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even. Only used when taps=\"kaiser\"."], [119, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [119, 3, 2, "p-taps", "taps", "The prototype filter design specification."]], "sdr.LeakyIntegrator": [[122, 2, 1, "", "__init__", "Creates a leaky integrator IIR filter."]], "sdr.LeakyIntegrator.__init__": [[122, 3, 2, "p-alpha", "alpha", "The leaky factor $alpha$. An FIR moving average with length $L$ is approximated when $alpha = 1 - 2/L$."], [122, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.LinearModulation": [[124, 2, 1, "", "__init__", "Creates a new linear phase/amplitude modulation object."], [125, 2, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [126, 4, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [127, 2, 1, "", "decide_symbols", "Converts the received complex symbols $tilde{a}[k]$ into decimal symbol decisions $hat{s}[k]$ and complex symbol decisions $hat{a}[k]$ using maximum-likelihood estimation (MLE)."], [128, 2, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples $tilde{x}[n]$ into decimal symbol decisions $hat{s}[k]$ using matched filtering and maximum-likelihood estimation."], [129, 2, 1, "", "map_symbols", "Converts the decimal symbols $s[k]$ to complex symbols $a[k]$."], [130, 2, 1, "", "modulate", "Modulates the decimal symbols $s[k]$ into pulse-shaped complex samples $x[n]$."], [131, 4, 1, "", "order", "The modulation order $M = 2^k$."], [132, 4, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [133, 4, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [134, 4, 1, "", "rx_filter", "The receive decimating matched filter. The filter coefficients are matched to the pulse shape $h[-n]^*$."], [135, 2, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [136, 4, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [137, 4, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."], [138, 4, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter. The filter coefficients are the pulse shape $h[n]$."]], "sdr.LinearModulation.__init__": [[124, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [124, 3, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees to apply to symbol_map."], [124, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [124, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [124, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [124, 3, 2, "p-symbol_map", "symbol_map", "The symbol mapping ${0, dots, M-1} mapsto mathbb{C}$. An $M$-length array whose indices are decimal symbols $s[k]$ and whose values are complex symbols $a[k]$, where $M$ is the modulation order."]], "sdr.LinearModulation.ber": [[125, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.LinearModulation.decide_symbols": [[127, 3, 2, "p-a_tilde", "a_tilde", "The received complex symbols $tilde{a}[k]$."]], "sdr.LinearModulation.demodulate": [[128, 3, 2, "p-x_tilde", "x_tilde", "The received pulse-shaped complex samples $tilde{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.LinearModulation.map_symbols": [[129, 3, 2, "p-s", "s", "The decimal symbols $s[k]$ to map, $0$ to $M-1$."]], "sdr.LinearModulation.modulate": [[130, 3, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.LinearModulation.ser": [[135, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.LoopFilter": [[140, 2, 1, "", "__call__", "Filters the input signal $x[n]$."], [141, 2, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [142, 4, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [143, 4, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [144, 4, 1, "", "integral_gain", "The integral gain $K_2$ of the loop filter."], [145, 4, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [146, 4, 1, "", "proportional_gain", "The proportional gain $K_1$ of the loop filter."], [147, 2, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__call__": [[140, 3, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.LoopFilter.__init__": [[141, 3, 2, "p-K0", "K0", "The NCO gain $K_0$."], [141, 3, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [141, 3, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [141, 3, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.MLPED": [[149, 4, 1, "", "A_received", "(Settable) The received signal RMS amplitude $A_{rx,rms}$."], [150, 4, 1, "", "A_reference", "(Settable) The reference signal RMS amplitude $A_{ref,rms}$."], [151, 2, 1, "", "__call__", "Detects the phase error."], [152, 2, 1, "", "__init__", "Initializes the ML-PED."], [153, 2, 1, "", "data_aided_error", "Simulates the average phase error of the data-aided PED using the specified modulation scheme."], [154, 2, 1, "", "decision_directed_error", "Simulates the average phase error of the decision-directed PED using the specified modulation scheme."], [155, 4, 1, "", "gain", "The gain of the phase error detector $K_p$."]], "sdr.MLPED.__call__": [[151, 3, 2, "p-received", "received", "The received complex symbols $tilde{a}[k]$."], [151, 3, 2, "p-reference", "reference", "The reference complex symbols, either the known transmitted complex symbols $a[k]$ or the complex symbols decisions $hat{a}[k]$."]], "sdr.MLPED.__init__": [[152, 3, 2, "p-A_received", "A_received", "The received signal RMS amplitude $A_{rx,rms}$."], [152, 3, 2, "p-A_reference", "A_reference", "The reference signal RMS amplitude $A_{ref,rms}$."]], "sdr.MLPED.data_aided_error": [[153, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [153, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.MLPED.decision_directed_error": [[154, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [154, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.MSK": [[157, 2, 1, "", "__init__", "Creates a new MSK object."]], "sdr.MSK.__init__": [[157, 3, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [157, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [157, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.MovingAverager": [[159, 2, 1, "", "__init__", "Creates a moving average FIR filter."]], "sdr.MovingAverager.__init__": [[159, 3, 2, "p-length", "length", "The length of the moving average filter $L$."], [159, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.NCO": [[161, 2, 1, "", "__call__", "Steps the NCO with variable frequency and/or phase signals."], [162, 2, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [163, 4, 1, "", "gain", "(Settable) The NCO gain $K_0$."], [164, 4, 1, "", "increment", "(Settable) The constant phase accumulation $omega$ of the NCO in radians/sample."], [165, 4, 1, "", "offset", "(Settable) The absolute phase offset $theta$ of the NCO in radians."], [166, 2, 1, "", "reset", "Resets the NCO."], [167, 2, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__call__": [[161, 3, 2, "p-freq", "freq", "The variable frequency signal $f[n]$ in radians/sample. This input signal varies the per-sample phase increment of the NCO. If None, the signal is all zeros."], [161, 3, 2, "p-output", "output", "The format of the output signal $y[n]$. Options are the accumulated phase, sine, cosine, or complex exponential."], [161, 3, 2, "p-phase", "phase", "The variable phase signal $p[n]$ in radians. This input signal varies the per-sample phase offset of the NCO. If None, the signal is all zeros."]], "sdr.NCO.__init__": [[162, 3, 2, "p-gain", "gain", "The NCO gain $K_0$."], [162, 3, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [162, 3, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.NCO.step": [[167, 3, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.OQPSK": [[169, 2, 1, "", "__init__", "Creates a new OQPSK object."]], "sdr.OQPSK.__init__": [[169, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [169, 3, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [169, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [169, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [169, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [169, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PED": [[171, 2, 1, "", "__call__", "Detects the phase error."], [172, 2, 1, "", "__init__", "Initializes the PED."], [173, 2, 1, "", "data_aided_error", "Simulates the average phase error of the data-aided PED using the specified modulation scheme."], [174, 2, 1, "", "decision_directed_error", "Simulates the average phase error of the decision-directed PED using the specified modulation scheme."], [175, 4, 1, "", "gain", "The gain of the phase error detector $K_p$."]], "sdr.PED.__call__": [[171, 3, 2, "p-received", "received", "The received complex symbols $tilde{a}[k]$."], [171, 3, 2, "p-reference", "reference", "The reference complex symbols, either the known transmitted complex symbols $a[k]$ or the complex symbols decisions $hat{a}[k]$."]], "sdr.PED.data_aided_error": [[173, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [173, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.PED.decision_directed_error": [[174, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [174, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.PSK": [[177, 2, 1, "", "__init__", "Creates a new PSK object."], [178, 2, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [179, 4, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [180, 2, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [181, 4, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[177, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [177, 3, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [177, 3, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [177, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [177, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [177, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [177, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[178, 3, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [178, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.ser": [[180, 3, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [180, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.PiMPSK": [[183, 2, 1, "", "__init__", "Creates a new $pi/M$ PSK object."]], "sdr.PiMPSK.__init__": [[183, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [183, 3, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [183, 3, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [183, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [183, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [183, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [183, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PolyphaseFIR": [[185, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the polyphase FIR filter."], [186, 2, 1, "", "__init__", "Creates a polyphase FIR filter."], [187, 4, 1, "", "branches", "The number of polyphase branches $B$."], [188, 4, 1, "", "decimation", "The integer decimation rate $Q$."], [189, 4, 1, "", "delay", "The delay of polyphase FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [190, 4, 1, "", "input", "The input connection method."], [191, 4, 1, "", "interpolation", "The integer interpolation rate $P$."], [192, 4, 1, "", "order", "The order $N = (M + 1)B - 1$ of the FIR prototype filter $h[n]$."], [193, 4, 1, "", "output", "The output connection method."], [194, 4, 1, "", "polyphase_order", "The order $M = (N + 1)/B - 1$ of each FIR polyphase filter $h_i[n]$."], [195, 4, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_i[n]$."], [196, 4, 1, "", "rate", "The fractional resampling rate $r = P/Q$. The output sample rate is $f_{s,out} = f_{s,in} cdot r$."], [197, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [198, 4, 1, "", "taps", "The prototype feedforward taps $h[n]$."]], "sdr.PolyphaseFIR.__call__": [[185, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [185, 3, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.PolyphaseFIR.__init__": [[186, 3, 2, "p-branches", "branches", "The number of polyphase branches $B$."], [186, 3, 2, "p-input", "input", "The input connection method."], [186, 3, 2, "p-output", "output", "The output connection method."], [186, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [186, 3, 2, "p-taps", "taps", "The prototype filter feedforward coefficients $h[n]$."]], "sdr.Q": [[199, 3, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[200, 3, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.ReplicaCorrelator": [[202, 2, 1, "", "p_d", "Computes the probability of detection $P_D$."], [203, 2, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [204, 2, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [205, 2, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.ReplicaCorrelator.p_d": [[202, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [202, 3, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [202, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."]], "sdr.ReplicaCorrelator.p_fa": [[203, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [203, 3, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [203, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [203, 3, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.ReplicaCorrelator.roc": [[204, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [204, 3, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [204, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."]], "sdr.ReplicaCorrelator.threshold": [[205, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [205, 3, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [205, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [205, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.Resampler": [[207, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the polyphase FIR filter."], [208, 2, 1, "", "__init__", "Creates a polyphase FIR rational resampling filter."], [209, 4, 1, "", "method", "The method used to design the polyphase resampling filter."]], "sdr.Resampler.__call__": [[207, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [207, 3, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Resampler.__init__": [[208, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB. Only used when taps=\"kaiser\"."], [208, 3, 2, "p-decimation", "decimation", "The decimation rate $Q$."], [208, 3, 2, "p-interpolation", "interpolation", "The interpolation rate $P$."], [208, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even. Only used when taps=\"kaiser\"."], [208, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [208, 3, 2, "p-taps", "taps", "The prototype filter design specification."]], "sdr.albersheim": [[210, 3, 2, "p-N_nc", "N_nc", "The number of non-coherent combinations $N_{NC} ge 1$."], [210, 3, 2, "p-p_d", "p_d", "The desired probability of detection $P_D$ in $(0, 1)$."], [210, 3, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{FA}$ in $(0, 1)$."]], "sdr.average_power": [[211, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the average power. The default is None, which computes the average power of the entire array."], [211, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [211, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[212, 3, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [212, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [212, 3, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [212, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[213, 3, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [213, 3, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.barker": [[214, 3, 2, "p-length", "length", "The length $N$ of the Barker code/sequence."], [214, 3, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[215, 3, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [215, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [215, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[216, 3, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[217, 3, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[218, 3, 2, "p-p", "p", "The probability $p$ of a bit flip."], [218, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [218, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[219, 3, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[220, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.db": [[221, 3, 2, "p-type", "type", "The type of input value or signal."], [221, 3, 2, "p-x", "x", "The input value or signal."]], "sdr.design_bandpass_fir": [[222, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [222, 3, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [222, 3, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [222, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [222, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_bandstop_fir": [[223, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [223, 3, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [223, 3, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [223, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [223, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_frac_delay_fir": [[224, 3, 2, "p-delay", "delay", "The fractional delay $0 le Delta n le 1$."], [224, 3, 2, "p-length", "length", "The filter length $L$. Filters with even length have best performance. Filters with odd length are equivalent to an even-length filter with an appended zero."]], "sdr.design_highpass_fir": [[225, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [225, 3, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [225, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [225, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_lowpass_fir": [[226, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [226, 3, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [226, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [226, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_multirate_fir": [[227, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB."], [227, 3, 2, "p-decimation", "decimation", "The decimation rate $Q$."], [227, 3, 2, "p-interpolation", "interpolation", "The interpolation rate $P$."], [227, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even."]], "sdr.diff_decode": [[228, 3, 2, "p-y", "y", "The input encoded data $y[k]$."], [228, 3, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[229, 3, 2, "p-x", "x", "The input uncoded data $x[k]$."], [229, 3, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[230, 3, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [230, 3, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [230, 3, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [230, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [230, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.downsample": [[231, 3, 2, "p-rate", "rate", "The downsampling factor $r$."], [231, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.ebn0_to_esn0": [[232, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [232, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [232, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[233, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [233, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [233, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [233, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[234, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the energy. The default is None, which computes the energy of the entire array."], [234, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [234, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[235, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [235, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [235, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[236, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [236, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.euclidean": [[237, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the distance. The default is None, which computes the distance across the entire array."], [237, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [237, 3, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.evm": [[238, 3, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [238, 3, 2, "p-output", "output", "The output type of the EVM calculation."], [238, 3, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [238, 3, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.frequency_offset": [[239, 3, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [239, 3, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [239, 3, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [239, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [239, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[240, 3, 2, "p-distance", "distance", "The distance $d$ in meters between the transmitter and receiver."], [240, 3, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[241, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [241, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [241, 3, 2, "p-sps", "sps", "The number of samples per symbol."], [241, 3, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[242, 3, 2, "p-n", "n", "The length of the Gray code."]], "sdr.hadamard": [[243, 3, 2, "p-index", "index", "The index $i$ of the Hadamard code."], [243, 3, 2, "p-length", "length", "The length $N$ of the Hadamard code/sequence. Must be a power of 2."], [243, 3, 2, "p-output", "output", "The output format of the Hadamard code/sequence."]], "sdr.half_sine": [[244, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [244, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [244, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.hamming": [[245, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the distance. The default is None, which computes the distance across the entire array."], [245, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [245, 3, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.hexdump": [[246, 3, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [246, 3, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[247, 3, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [247, 3, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [247, 3, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.linear": [[248, 3, 2, "p-type", "type", "The type of output value or signal."], [248, 3, 2, "p-x", "x", "The input value or signal in dB."]], "sdr.mix": [[249, 3, 2, "p-complex", "complex", "Indicates whether to mix by a complex exponential or real sinusoid."], [249, 3, 2, "p-freq", "freq", "The frequency $f$ of the sinusoid in Hz (or 1/samples if sample_rate=1). The frequency must satisfy $-f_s/2 le f le f_s/2$."], [249, 3, 2, "p-phase", "phase", "The phase $phi$ of the sinusoid in degrees."], [249, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal."], [249, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.pack": [[250, 3, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [250, 3, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [250, 3, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[251, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the PAPR. The default is None, which computes the PAPR of the entire array."], [251, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[252, 3, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [252, 3, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [252, 3, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[253, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the peak power. The default is None, which computes the peak power of the entire array."], [253, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [253, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[254, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [254, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.percent": [[255, 3, 2, "p-x", "x", "The input ratio."]], "sdr.plot": [[256, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [257, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [258, 5, 1, "", "eye", "Plots the eye diagram of the baseband modulated signal $x[n]$."], [259, 5, 1, "", "filter", "Plots the magnitude response $|H(omega)|^2$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [260, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [261, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [262, 5, 1, "", "magnitude_response", "Plots the magnitude response $|H(omega)|^2$ of the filter."], [263, 5, 1, "", "p_d", "Plots the probability of detection $P_D$ as a function of received SNR or ENR."], [264, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [265, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [266, 5, 1, "", "phase_response", "Plots the phase response $angle H(omega)$ of the filter."], [267, 5, 1, "", "phase_tree", "Plots the phase tree of a continuous-phase modulated (CPM) signal signal $x[n]$."], [268, 5, 1, "", "raster", "Plots a raster of the time-domain signal $x[n]$."], [269, 5, 1, "", "roc", "Plots the receiver operating characteristic (ROC) curve as a function of $P_{FA}$."], [270, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [271, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [272, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [273, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [274, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [275, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [276, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[256, 3, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [256, 3, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."], [256, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."]], "sdr.plot.constellation": [[257, 3, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [257, 3, 2, "p-kwargs", "kwargs", "If heatmap=False, additional keyword arguments to pass to matplotlib.pyplot.scatter(). The following keyword arguments are set by default. The defaults may be overwritten."], [257, 3, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [257, 3, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.eye": [[258, 3, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [258, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [258, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [258, 3, 2, "p-span", "span", "The number of symbols per raster."], [258, 3, 2, "p-sps", "sps", "The number of samples per symbol."], [258, 3, 2, "p-x", "x", "The baseband modulated signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved."]], "sdr.plot.filter": [[259, 3, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [259, 3, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [259, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [259, 3, 2, "p-filter", "filter", "The filter definition."], [259, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [259, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[260, 3, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [260, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [260, 3, 2, "p-filter", "filter", "The filter definition."], [260, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [260, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [260, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.impulse_response": [[261, 3, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [261, 3, 2, "p-filter", "filter", "The filter definition."], [261, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [261, 3, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. Can be useful for comparing the impulse response of filters with different lengths."]], "sdr.plot.magnitude_response": [[262, 3, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [262, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [262, 3, 2, "p-filter", "filter", "The filter definition."], [262, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [262, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [262, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."], [262, 3, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a linear or logarithmic magnitude response."]], "sdr.plot.p_d": [[263, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [263, 3, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [263, 3, 2, "p-x", "x", "The SNR or ENR in dB."], [263, 3, 2, "p-x_label", "x_label", "The x-axis label to use."]], "sdr.plot.periodogram": [[264, 3, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [264, 3, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [264, 3, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [264, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [264, 3, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [264, 3, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [264, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [264, 3, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [264, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [264, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued signals and \"two-sided\" for complex-valued signals."], [264, 3, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a linear or logarithmic power spectral density."]], "sdr.plot.phase_delay": [[265, 3, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [265, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [265, 3, 2, "p-filter", "filter", "The filter definition."], [265, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [265, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [265, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.phase_response": [[266, 3, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [266, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [266, 3, 2, "p-filter", "filter", "The filter definition."], [266, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [266, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [266, 3, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [266, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.phase_tree": [[267, 3, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [267, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [267, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [267, 3, 2, "p-span", "span", "The number of symbols per raster."], [267, 3, 2, "p-sps", "sps", "The number of samples per symbol."], [267, 3, 2, "p-x", "x", "The baseband CPM signal $x[n]$."]], "sdr.plot.raster": [[268, 3, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [268, 3, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\"."], [268, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.collections.LineCollection. The following keyword arguments are set by default. The defaults may be overwritten."], [268, 3, 2, "p-length", "length", "The length of each raster in samples. This must be provided if x is 1D."], [268, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [268, 3, 2, "p-stride", "stride", "The stride between each raster in samples. If None, the stride is set to length."], [268, 3, 2, "p-x", "x", "The time-domain signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved. If x is 1D, the rastering is determined by length and stride. If x is 2D, the rows correspond to each raster."]], "sdr.plot.roc": [[269, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to the plotting function defined by type."], [269, 3, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [269, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [269, 3, 2, "p-type", "type", "The type of plot to generate."]], "sdr.plot.ser": [[270, 3, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [270, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."], [270, 3, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.spectrogram": [[271, 3, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [271, 3, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [271, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.pcolormesh(). The following keyword arguments are set by default. The defaults may be overwritten."], [271, 3, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [271, 3, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [271, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [271, 3, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [271, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [271, 3, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a one-sided spectrum or a two-sided spectrum. The default is \"auto\" which selects \"one-sided\" for real-valued signals and \"two-sided\" for complex-valued signals."]], "sdr.plot.step_response": [[272, 3, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [272, 3, 2, "p-filter", "filter", "The filter definition."], [272, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.symbol_map": [[273, 3, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [273, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot(). The following keyword arguments are set by default. The defaults may be overwritten."], [273, 3, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [273, 3, 2, "p-modulation", "modulation", "The linear modulation or symbol map ${0, dots, M-1} mapsto mathbb{C}$."]], "sdr.plot.time_domain": [[274, 3, 2, "p-centered", "centered", "Indicates whether to center the x-axis about 0. This argument is mutually exclusive with offset."], [274, 3, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal. If \"color\", the real and imaginary parts will have different colors based on the current Matplotlib color cycle. If \"line\", the real part will have a solid line and the imaginary part will have a dashed line, and both lines will share the same color."], [274, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [274, 3, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. The units of the offset are $1/f_s$. This argument is mutually exclusive with centered."], [274, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [274, 3, 2, "p-t", "t", "The time signal $t[n]$. The units are assumed to be $1/f_s$."], [274, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[276, 3, 2, "p-filter", "filter", "The filter definition."], [276, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.polyphase_decompose": [[277, 3, 2, "p-branches", "branches", "The number of polyphase branches $B$."], [277, 3, 2, "p-taps", "taps", "The prototype filter feedforward coefficients $h[n]$."]], "sdr.ppb": [[278, 3, 2, "p-x", "x", "The input ratio."]], "sdr.ppm": [[279, 3, 2, "p-x", "x", "The input ratio."]], "sdr.raised_cosine": [[280, 3, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [280, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [280, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [280, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rectangular": [[281, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [281, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [281, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[282, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [282, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[283, 3, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [283, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [283, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [283, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[284, 3, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [284, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.snr_to_ebn0": [[285, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [285, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [285, 3, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [285, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[286, 3, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [286, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.to_complex_bb": [[287, 3, 2, "p-x_r", "x_r", "The real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$. If the length is odd, one zero is appended to the end."]], "sdr.to_real_pb": [[288, 3, 2, "p-x_c", "x_c", "The complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$."]], "sdr.unpack": [[289, 3, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [289, 3, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [289, 3, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.upsample": [[290, 3, 2, "p-rate", "rate", "The upsampling factor $r$."], [290, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.walsh": [[291, 3, 2, "p-index", "index", "The index $i$ of the Walsh code. Indicates how many transitions there are in the code."], [291, 3, 2, "p-length", "length", "The length $N$ of the Walsh code/sequence. Must be a power of 2."], [291, 3, 2, "p-output", "output", "The output format of the Walsh code/sequence."]], "sdr.wavelength": [[292, 3, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.zadoff_chu": [[293, 3, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [293, 3, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence. The root must be relatively prime to the length, i.e., $gcd(u, N) = 1$."], [293, 3, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence. When $q ne 0$, the returned sequence is a cyclic shift of the root-$u$ Zadoff-Chu sequence."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:parameter", "4": "py:property", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "parameter", "Python parameter"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"]}, "titleterms": {"convers": 0, "decibel": 0, "ratio": 0, "from": [0, 298, 299, 300], "e_b": 0, "n_0": 0, "e_": 0, "": [0, 302, 303], "n": [0, 301, 302, 303], "data": 1, "manipul": [1, 3], "detect": [2, 7], "detector": [2, 296], "theoret": 2, "limit": 2, "digit": [3, 303], "signal": [3, 295, 301, 304], "process": 3, "fir": [3, 302], "filter": [3, 7, 302, 303, 305], "iir": [3, 303], "polyphas": 3, "applic": 3, "arbitrari": [3, 301], "resampl": [3, 301], "correl": 3, "link": 4, "budget": 4, "channel": [4, 295], "capac": 4, "path": 4, "loss": 4, "antenna": 4, "measur": 5, "energi": 5, "power": [5, 304], "voltag": 5, "distanc": 5, "modul": [5, 6, 7], "linear": 6, "continu": 6, "phase": [6, 296, 305, 306], "orthogon": 6, "puls": [6, 304, 307], "shape": [6, 304, 307], "symbol": [6, 306], "map": [6, 306], "encod": 6, "plot": [7, 304], "configur": [7, 298, 300], "time": [7, 304, 305], "domain": [7, 304, 305], "frequenc": [7, 302, 303, 304, 305], "spectral": 7, "estim": 7, "analysi": 7, "probabl": 8, "constructor": [9, 18, 32, 37, 54, 58, 65, 72, 88, 98, 100, 116, 118, 121, 123, 139, 148, 156, 158, 160, 168, 170, 176, 182, 184, 206], "special": [9, 32, 54, 58, 72, 88, 98, 100, 116, 118, 121, 139, 148, 158, 160, 170, 184, 206], "method": [9, 18, 32, 37, 54, 58, 60, 65, 72, 88, 98, 100, 116, 118, 121, 123, 139, 148, 156, 158, 160, 168, 170, 176, 182, 184, 201, 206], "stream": [9, 32, 54, 58, 72, 88, 98, 100, 116, 118, 121, 158, 184, 206], "mode": [9, 32, 54, 58, 72, 88, 98, 100, 116, 118, 121, 158, 184, 206], "onli": [9, 32, 54, 58, 72, 88, 98, 100, 116, 118, 121, 158, 184, 206], "properti": [9, 18, 32, 37, 54, 58, 72, 88, 98, 100, 116, 118, 121, 123, 139, 148, 156, 158, 160, 168, 170, 176, 182, 184, 206], "note": [18, 37, 123, 156, 168, 176, 182, 240, 264, 271], "see": [19, 20, 29, 65, 67, 78, 79, 80, 82, 85, 106, 108, 113, 124, 125, 135, 157, 169, 177, 178, 180, 183, 199, 200, 220, 251, 290], "also": [19, 20, 29, 65, 67, 78, 79, 80, 82, 85, 106, 108, 113, 124, 125, 135, 157, 169, 177, 178, 180, 183, 199, 200, 220, 251, 290], "warn": [231, 290], "sequenc": 294, "simul": 295, "model": 295, "impair": 295, "synchron": 296, "lock": [296, 305], "loop": [296, 305], "error": [296, 306], "amplitud": 296, "control": 296, "document": 297, "instal": [297, 298, 299, 300, 308], "build": 297, "doc": 297, "serv": 297, "format": 298, "run": [298, 300], "linter": 298, "formatt": 298, "pre": 298, "commit": 298, "v": [298, 300], "code": [298, 300], "pypi": 299, "github": 299, "edit": 299, "local": 299, "folder": 299, "dev": 299, "depend": 299, "unit": 300, "test": 300, "command": 300, "line": 300, "farrow": 301, "construct": 301, "an": [301, 302, 303], "input": 301, "x": 301, "t_": 301, "rate": [301, 306], "r": 301, "y": 301, "frac": 301, "upsampl": 301, "integ": 301, "downsampl": 301, "irrat": 301, "creat": [302, 303], "examin": [302, 303, 304], "impuls": [302, 303], "respons": [302, 303, 305], "h": [302, 303], "step": [302, 303, 305], "omega": [302, 303], "group": [302, 303], "delai": [302, 303], "tau_g": [302, 303], "fulli": [302, 303], "analyz": [302, 303, 305], "zero": 303, "pole": 303, "stabil": 303, "peak": 304, "averag": 304, "qpsk": [304, 306], "variou": 304, "across": [304, 305], "excess": 304, "bandwidth": 304, "design": 305, "proport": 305, "plu": 305, "integr": 305, "ppi": 305, "implement": 305, "pll": 305, "close": 305, "perform": 305, "compar": 305, "zeta": 305, "b_n": 305, "t": 305, "shift": 306, "kei": 306, "constel": 306, "bpsk": 306, "8": [306, 309], "psk": 306, "16": 306, "curv": 306, "bit": 306, "rais": 307, "cosin": 307, "squar": 307, "root": 307, "gaussian": 307, "sdr": 308, "featur": 308, "v0": 309, "0": 309, "12": 309, "chang": 309, "contributor": 309, "11": 309, "10": 309, "9": 309, "7": 309, "6": 309, "5": 309, "4": 309, "3": 309, "2": 309, "1": 309, "version": 310, "alpha": 310, "releas": 310, "beta": 310}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Conversions": [[0, "conversions"]], "Decibels": [[0, "decibels"]], "Ratios": [[0, "ratios"]], "From E_b/N_0": [[0, "from-e-b-n-0"]], "From E_s/N_0": [[0, "from-e-s-n-0"]], "From S/N": [[0, "from-s-n"]], "Data manipulation": [[1, "data-manipulation"]], "Detection": [[2, "detection"], [7, "detection"]], "Detectors": [[2, "detectors"]], "Theoretical limits": [[2, "theoretical-limits"]], "Digital signal processing": [[3, "digital-signal-processing"]], "FIR filtering": [[3, "fir-filtering"]], "IIR filtering": [[3, "iir-filtering"]], "Polyphase FIR filtering": [[3, "polyphase-fir-filtering"]], "Filter applications": [[3, "filter-applications"]], "Arbitrary resampling": [[3, "arbitrary-resampling"]], "Correlation": [[3, "correlation"]], "Signal manipulation": [[3, "signal-manipulation"]], "Link budgets": [[4, "link-budgets"]], "Channel capacity": [[4, "channel-capacity"]], "Path losses": [[4, "path-losses"]], "Antennas": [[4, "antennas"]], "Measurement": [[5, "measurement"]], "Energy": [[5, "energy"]], "Power": [[5, "power"]], "Voltage": [[5, "voltage"]], "Distance": [[5, "distance"]], "Modulation": [[5, "modulation"], [6, "modulation"], [7, "modulation"]], "Linear modulations": [[6, "linear-modulations"]], "Continuous-phase modulations": [[6, "continuous-phase-modulations"]], "Orthogonal modulations": [[6, "orthogonal-modulations"]], "Pulse shaping": [[6, "pulse-shaping"]], "Symbol mapping": [[6, "symbol-mapping"], [306, "symbol-mapping"]], "Symbol encoding": [[6, "symbol-encoding"]], "Plotting": [[7, "plotting"]], "Configuration": [[7, "configuration"], [298, "configuration"], [300, "configuration"]], "Time-domain": [[7, "time-domain"]], "Frequency-domain": [[7, "frequency-domain"]], "Spectral estimation": [[7, "spectral-estimation"]], "Filter analysis": [[7, "filter-analysis"]], "Probability": [[8, "probability"]], "Constructors": [[9, "constructors"], [18, "constructors"], [32, "constructors"], [37, "constructors"], [54, "constructors"], [58, "constructors"], [65, "constructors"], [72, "constructors"], [88, "constructors"], [98, "constructors"], [100, "constructors"], [116, "constructors"], [118, "constructors"], [121, "constructors"], [123, "constructors"], [139, "constructors"], [148, "constructors"], [156, "constructors"], [158, "constructors"], [160, "constructors"], [168, "constructors"], [170, "constructors"], [176, "constructors"], [182, "constructors"], [184, "constructors"], [206, "constructors"]], "Special methods": [[9, "special-methods"], [32, "special-methods"], [54, "special-methods"], [58, "special-methods"], [72, "special-methods"], [88, "special-methods"], [98, "special-methods"], [100, "special-methods"], [116, "special-methods"], [118, "special-methods"], [121, "special-methods"], [139, "special-methods"], [148, "special-methods"], [158, "special-methods"], [160, "special-methods"], [170, "special-methods"], [184, "special-methods"], [206, "special-methods"]], "Streaming mode only": [[9, "streaming-mode-only"], [32, "streaming-mode-only"], [54, "streaming-mode-only"], [58, "streaming-mode-only"], [72, "streaming-mode-only"], [88, "streaming-mode-only"], [98, "streaming-mode-only"], [100, "streaming-mode-only"], [116, "streaming-mode-only"], [118, "streaming-mode-only"], [121, "streaming-mode-only"], [158, "streaming-mode-only"], [184, "streaming-mode-only"], [206, "streaming-mode-only"]], "Properties": [[9, "properties"], [18, "properties"], [32, "properties"], [37, "properties"], [54, "properties"], [58, "properties"], [72, "properties"], [88, "properties"], [98, "properties"], [100, "properties"], [116, "properties"], [118, "properties"], [121, "properties"], [123, "properties"], [139, "properties"], [148, "properties"], [156, "properties"], [158, "properties"], [160, "properties"], [168, "properties"], [170, "properties"], [176, "properties"], [182, "properties"], [184, "properties"], [206, "properties"]], "Note": [[18, null], [37, null], [123, null], [156, null], [168, null], [176, null], [182, null], [240, null], [264, null], [271, null]], "Methods": [[18, "methods"], [32, "methods"], [37, "methods"], [54, "methods"], [58, "methods"], [60, "methods"], [65, "methods"], [72, "methods"], [98, "methods"], [100, "methods"], [116, "methods"], [118, "methods"], [121, "methods"], [123, "methods"], [139, "methods"], [148, "methods"], [156, "methods"], [158, "methods"], [160, "methods"], [168, "methods"], [170, "methods"], [176, "methods"], [182, "methods"], [184, "methods"], [201, "methods"], [206, "methods"]], "See also": [[19, null], [20, null], [29, null], [65, null], [67, null], [78, null], [79, null], [80, null], [82, null], [85, null], [106, null], [108, null], [113, null], [124, null], [125, null], [135, null], [157, null], [169, null], [177, null], [178, null], [180, null], [183, null], [199, null], [200, null], [220, null], [251, null], [290, null]], "Warning": [[231, null], [290, null]], "Sequences": [[294, "sequences"]], "Simulation": [[295, "simulation"]], "Channel models": [[295, "channel-models"]], "Signal impairments": [[295, "signal-impairments"]], "Synchronization": [[296, "synchronization"]], "Phase-locked loops": [[296, "phase-locked-loops"], [305, "phase-locked-loops"]], "Phase error detectors": [[296, "phase-error-detectors"]], "Amplitude control loops": [[296, "amplitude-control-loops"]], "Documentation": [[297, "documentation"]], "Install": [[297, "install"], [298, "install"], [300, "install"]], "Build the docs": [[297, "build-the-docs"]], "Serve the docs": [[297, "serve-the-docs"]], "Formatting": [[298, "formatting"]], "Run the linter": [[298, "run-the-linter"]], "Run the formatter": [[298, "run-the-formatter"]], "Pre-commit": [[298, "pre-commit"]], "Run from VS Code": [[298, "run-from-vs-code"], [300, "run-from-vs-code"]], "Installation": [[299, "installation"], [308, "installation"]], "Install from PyPI": [[299, "install-from-pypi"]], "Install from GitHub": [[299, "install-from-github"]], "Editable install from local folder": [[299, "editable-install-from-local-folder"]], "Install the dev dependencies": [[299, "install-the-dev-dependencies"]], "Unit Tests": [[300, "unit-tests"]], "Run from the command line": [[300, "run-from-the-command-line"]], "Farrow arbitrary resampler": [[301, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[301, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[301, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[301, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[301, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[301, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[301, "downsample-by-an-irrational-rate"]], "FIR filters": [[302, "fir-filters"]], "Create an FIR filter": [[302, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[302, "examine-the-impulse-response-h-n"], [303, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[302, "examine-the-step-response-s-n"], [303, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[302, "examine-the-frequency-response-h-omega"], [303, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[302, "examine-the-group-delay-tau-g-omega"], [303, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[302, "fully-analyze-a-fir-filter"]], "IIR filters": [[303, "iir-filters"]], "Create an IIR filter": [[303, "create-an-iir-filter"]], "Examine the zeros and poles": [[303, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[303, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[303, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[304, "peak-to-average-power"]], "QPSK signal with various pulse shapes": [[304, "qpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[304, "examine-time-domain"]], "Examine frequency domain": [[304, "examine-frequency-domain"]], "Plot across excess bandwidth": [[304, "plot-across-excess-bandwidth"]], "Design a proportional-plus-integrator (PPI) loop filter": [[305, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[305, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[305, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[305, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[305, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[305, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[305, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[306, "phase-shift-keying"]], "Constellations": [[306, "constellations"]], "BPSK": [[306, "bpsk"]], "QPSK": [[306, "qpsk"]], "8-PSK": [[306, "id1"]], "16-PSK": [[306, "id2"]], "Error rate curves": [[306, "error-rate-curves"]], "Bit error rate curves": [[306, "bit-error-rate-curves"]], "Symbol error rate curves": [[306, "symbol-error-rate-curves"]], "Pulse shapes": [[307, "pulse-shapes"]], "Raised cosine": [[307, "raised-cosine"]], "Square-root raised cosine": [[307, "square-root-raised-cosine"]], "Gaussian": [[307, "gaussian"]], "sdr": [[308, "sdr"]], "Features": [[308, "features"]], "v0.0": [[309, "v0-0"]], "v0.0.12": [[309, "v0-0-12"]], "Changes": [[309, "changes"], [309, "id1"], [309, "id3"], [309, "id5"], [309, "id7"], [309, "id9"], [309, "id11"], [309, "id13"], [309, "id15"], [309, "id17"], [309, "id19"], [309, "id21"]], "Contributors": [[309, "contributors"], [309, "id2"], [309, "id4"], [309, "id6"], [309, "id8"], [309, "id10"], [309, "id12"], [309, "id14"], [309, "id16"], [309, "id18"], [309, "id20"], [309, "id22"]], "v0.0.11": [[309, "v0-0-11"]], "v0.0.10": [[309, "v0-0-10"]], "v0.0.9": [[309, "v0-0-9"]], "v0.0.8": [[309, "v0-0-8"]], "v0.0.7": [[309, "v0-0-7"]], "v0.0.6": [[309, "v0-0-6"]], "v0.0.5": [[309, "v0-0-5"]], "v0.0.4": [[309, "v0-0-4"]], "v0.0.3": [[309, "v0-0-3"]], "v0.0.2": [[309, "v0-0-2"]], "v0.0.1": [[309, "v0-0-1"]], "Versioning": [[310, "versioning"]], "Alpha releases": [[310, "alpha-releases"]], "Beta releases": [[310, "beta-releases"]]}, "indexentries": {"module": [[3, "module-sdr"]], "sdr": [[3, "module-sdr"]]}, "docurls": ["api/conversions/", "api/data-manipulation/", "api/detection/", "api/dsp/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/sdr.AGC/", "api/sdr.AGC.__call__/", "api/sdr.AGC.__init__/", "api/sdr.AGC.attack/", "api/sdr.AGC.decay/", "api/sdr.AGC.gain/", "api/sdr.AGC.reference/", "api/sdr.AGC.reset/", "api/sdr.AGC.streaming/", "api/sdr.CPM/", "api/sdr.CPM.__init__/", "api/sdr.CPM.ber/", "api/sdr.CPM.bps/", "api/sdr.CPM.demodulate/", "api/sdr.CPM.index/", "api/sdr.CPM.modulate/", "api/sdr.CPM.order/", "api/sdr.CPM.phase_offset/", "api/sdr.CPM.pulse_shape/", "api/sdr.CPM.rx_filter/", "api/sdr.CPM.ser/", "api/sdr.CPM.sps/", "api/sdr.CPM.tx_filter/", "api/sdr.Channelizer/", "api/sdr.Channelizer.__call__/", "api/sdr.Channelizer.__init__/", "api/sdr.Channelizer.channels/", "api/sdr.Channelizer.method/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.Decimator/", "api/sdr.Decimator.__init__/", "api/sdr.Decimator.method/", "api/sdr.Decimator.reset/", "api/sdr.Differentiator/", "api/sdr.Differentiator.__init__/", "api/sdr.EnergyDetector/", "api/sdr.EnergyDetector.p_d/", "api/sdr.EnergyDetector.p_fa/", "api/sdr.EnergyDetector.roc/", "api/sdr.EnergyDetector.threshold/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__call__/", "api/sdr.FIR.__init__/", "api/sdr.FIR.__len__/", "api/sdr.FIR.delay/", "api/sdr.FIR.flush/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.group_delay/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.phase_delay/", "api/sdr.FIR.reset/", "api/sdr.FIR.state/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__call__/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.delay/", "api/sdr.FarrowResampler.flush/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.state/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.FractionalDelay/", "api/sdr.FractionalDelay.__init__/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__call__/", "api/sdr.IIR.__init__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.state/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.Integrator/", "api/sdr.Integrator.__init__/", "api/sdr.Interpolator/", "api/sdr.Interpolator.__init__/", "api/sdr.Interpolator.method/", "api/sdr.LeakyIntegrator/", "api/sdr.LeakyIntegrator.__init__/", "api/sdr.LinearModulation/", "api/sdr.LinearModulation.__init__/", "api/sdr.LinearModulation.ber/", "api/sdr.LinearModulation.bps/", "api/sdr.LinearModulation.decide_symbols/", "api/sdr.LinearModulation.demodulate/", "api/sdr.LinearModulation.map_symbols/", "api/sdr.LinearModulation.modulate/", "api/sdr.LinearModulation.order/", "api/sdr.LinearModulation.phase_offset/", "api/sdr.LinearModulation.pulse_shape/", "api/sdr.LinearModulation.rx_filter/", "api/sdr.LinearModulation.ser/", "api/sdr.LinearModulation.sps/", "api/sdr.LinearModulation.symbol_map/", "api/sdr.LinearModulation.tx_filter/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.__call__/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.integral_gain/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.proportional_gain/", "api/sdr.LoopFilter.reset/", "api/sdr.MLPED/", "api/sdr.MLPED.A_received/", "api/sdr.MLPED.A_reference/", "api/sdr.MLPED.__call__/", "api/sdr.MLPED.__init__/", "api/sdr.MLPED.data_aided_error/", "api/sdr.MLPED.decision_directed_error/", "api/sdr.MLPED.gain/", "api/sdr.MSK/", "api/sdr.MSK.__init__/", "api/sdr.MovingAverager/", "api/sdr.MovingAverager.__init__/", "api/sdr.NCO/", "api/sdr.NCO.__call__/", "api/sdr.NCO.__init__/", "api/sdr.NCO.gain/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.OQPSK/", "api/sdr.OQPSK.__init__/", "api/sdr.PED/", "api/sdr.PED.__call__/", "api/sdr.PED.__init__/", "api/sdr.PED.data_aided_error/", "api/sdr.PED.decision_directed_error/", "api/sdr.PED.gain/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.ber/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.PiMPSK/", "api/sdr.PiMPSK.__init__/", "api/sdr.PolyphaseFIR/", "api/sdr.PolyphaseFIR.__call__/", "api/sdr.PolyphaseFIR.__init__/", "api/sdr.PolyphaseFIR.branches/", "api/sdr.PolyphaseFIR.decimation/", "api/sdr.PolyphaseFIR.delay/", "api/sdr.PolyphaseFIR.input/", "api/sdr.PolyphaseFIR.interpolation/", "api/sdr.PolyphaseFIR.order/", "api/sdr.PolyphaseFIR.output/", "api/sdr.PolyphaseFIR.polyphase_order/", "api/sdr.PolyphaseFIR.polyphase_taps/", "api/sdr.PolyphaseFIR.rate/", "api/sdr.PolyphaseFIR.reset/", "api/sdr.PolyphaseFIR.taps/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.ReplicaCorrelator/", "api/sdr.ReplicaCorrelator.p_d/", "api/sdr.ReplicaCorrelator.p_fa/", "api/sdr.ReplicaCorrelator.roc/", "api/sdr.ReplicaCorrelator.threshold/", "api/sdr.Resampler/", "api/sdr.Resampler.__call__/", "api/sdr.Resampler.__init__/", "api/sdr.Resampler.method/", "api/sdr.albersheim/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.barker/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.db/", "api/sdr.design_bandpass_fir/", "api/sdr.design_bandstop_fir/", "api/sdr.design_frac_delay_fir/", "api/sdr.design_highpass_fir/", "api/sdr.design_lowpass_fir/", "api/sdr.design_multirate_fir/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.downsample/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.euclidean/", "api/sdr.evm/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.hadamard/", "api/sdr.half_sine/", "api/sdr.hamming/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.linear/", "api/sdr.mix/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.percent/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.eye/", "api/sdr.plot.filter/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.magnitude_response/", "api/sdr.plot.p_d/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.phase_tree/", "api/sdr.plot.raster/", "api/sdr.plot.roc/", "api/sdr.plot.ser/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.polyphase_decompose/", "api/sdr.ppb/", "api/sdr.ppm/", "api/sdr.raised_cosine/", "api/sdr.rectangular/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.to_complex_bb/", "api/sdr.to_real_pb/", "api/sdr.unpack/", "api/sdr.upsample/", "api/sdr.walsh/", "api/sdr.wavelength/", "api/sdr.zadoff_chu/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/formatting/", "development/installation/", "development/unit-tests/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})