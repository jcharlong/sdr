Search.setIndex({"titles": ["Filtering", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.DDS", "sdr.DDS.__init__", "sdr.DDS.nco", "sdr.DDS.process", "sdr.DDS.reset", "sdr.DDS.step", "sdr.FIR", "sdr.FIR.__init__", "sdr.FIR.delay", "sdr.FIR.filter", "sdr.FIR.frequency_response", "sdr.FIR.frequency_response_log", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.reset", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.resample", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__init__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.filter", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.filter", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.process", "sdr.NCO.reset", "sdr.NCO.step", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.demodulate", "sdr.PSK.modulate", "sdr.PSK.offset", "sdr.PSK.order", "sdr.PSK.symbol_labels", "sdr.PSK.symbol_map", "sdr.Q", "sdr.Qinv", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.energy", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.hexdump", "sdr.iq_imbalance", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.plot.constellation", "sdr.plot.filter", "sdr.plot.frequency_response", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.raised_cosine", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.unpack", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"class": [0, 1, 18, 24, 36, 43, 59, 68, 76, 128, 129, 132], "sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136], "fir": [0, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 110, 111, 112, 113, 115, 116, 118, 122, 134, 135], "implement": [0, 18, 24, 36, 43, 59, 65, 68, 76, 127], "finit": [0, 24, 135], "impuls": [0, 24, 30, 43, 52, 100, 110, 113, 120, 130, 133, 135], "respons": [0, 24, 28, 29, 30, 33, 43, 49, 50, 52, 56, 100, 110, 111, 112, 113, 116, 118, 133, 135], "iir": [0, 1, 10, 29, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 65, 110, 111, 112, 113, 115, 116, 118, 122, 128, 131, 134, 135], "an": [0, 24, 30, 43, 44, 45, 52, 77, 88, 104, 113, 126, 134], "infinit": [0, 43, 135], "gaussian": [0, 87, 88, 100, 134, 135], "time_bandwidth": [0, 100], "float": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 36, 39, 43, 44, 49, 50, 51, 59, 60, 61, 62, 63, 66, 68, 69, 70, 71, 72, 76, 77, 80, 86, 87, 88, 89, 92, 94, 98, 100, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 120, 123, 124, 125], "span": [0, 100, 123, 125, 130, 133], "int": [0, 18, 23, 24, 26, 28, 29, 30, 31, 33, 36, 38, 43, 49, 50, 52, 53, 56, 68, 75, 76, 77, 81, 87, 91, 95, 96, 100, 101, 102, 104, 110, 111, 112, 113, 114, 115, 116, 117, 118, 123, 125, 126], "sp": [0, 100, 123, 125, 130, 133], "ndarrai": [0, 18, 21, 23, 24, 27, 28, 29, 30, 33, 35, 36, 39, 42, 43, 46, 47, 48, 49, 50, 52, 54, 56, 58, 59, 64, 68, 73, 75, 76, 78, 79, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 100, 101, 103, 104, 123, 125, 126], "return": [0, 1, 9, 11, 14, 15, 21, 23, 24, 27, 28, 29, 30, 33, 39, 43, 48, 49, 50, 52, 56, 64, 73, 75, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 123, 124, 125, 126, 128, 129], "raised_cosin": [0, 123, 133, 134, 135], "alpha": [0, 100, 121, 123, 125, 130, 133], "rais": [0, 120, 123, 125, 128], "cosin": [0, 120, 123, 125, 128], "rc": [0, 123], "root_raised_cosin": [0, 110, 111, 112, 113, 115, 116, 118, 120, 122, 125, 128, 130, 133, 134, 135], "squar": [0, 99, 106, 120, 124, 125, 128], "root": [0, 120, 124, 125, 128], "srrc": [0, 120, 125, 130], "farrowresampl": [0, 36, 37, 38, 39, 40, 41, 42, 127, 134, 135], "cubic": [0, 36], "farrow": [0, 36, 37, 38, 39, 40, 41, 42, 135], "arbitrari": [0, 36, 37, 38, 39, 40, 41, 42, 134, 135], "psk": [0, 76, 77, 78, 79, 80, 81, 82, 83, 103, 134], "shift": [0, 76, 78, 79, 80, 81, 83, 128, 129], "kei": [0, 76, 78, 79, 80, 81, 83], "demodul": [0, 76, 78], "binary_cod": [0, 91], "n": [0, 1, 18, 21, 23, 24, 27, 28, 29, 30, 31, 33, 36, 39, 43, 48, 49, 50, 52, 53, 56, 59, 64, 68, 73, 75, 84, 85, 86, 87, 88, 91, 94, 97, 98, 101, 103, 105, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 124, 131, 133], "gener": [0, 87, 91, 101, 132], "binari": [0, 77, 82, 83, 89, 90, 91, 92, 93, 97, 104, 119, 126], "code": [0, 77, 82, 83, 91, 101], "length": [0, 30, 33, 91, 100, 101, 110, 113, 114, 117, 118, 123, 125, 127, 130, 133], "2": [0, 1, 9, 11, 14, 28, 29, 49, 50, 76, 77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], "diff_decod": [0, 95, 96, 134], "y": [0, 18, 21, 23, 24, 27, 39, 43, 48, 59, 64, 68, 73, 75, 87, 89, 92, 95, 96, 97, 103, 109, 117, 119, 120, 131], "arraylik": [0, 18, 21, 24, 25, 27, 36, 39, 40, 43, 44, 45, 48, 59, 64, 68, 73, 76, 77, 78, 79, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 124, 126], "y_prev": [0, 95, 96], "0": [0, 8, 18, 19, 24, 28, 29, 43, 44, 49, 50, 62, 68, 70, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 103, 104, 106, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136], "differenti": [0, 95, 96], "decod": [0, 95], "input": [0, 1, 9, 11, 14, 15, 18, 21, 24, 25, 27, 30, 33, 36, 37, 39, 40, 43, 44, 45, 48, 52, 56, 59, 64, 68, 73, 84, 87, 88, 89, 90, 92, 93, 95, 96, 97, 104, 113, 118, 126, 128, 129, 131], "k": [0, 76, 77, 78, 79, 81, 95, 96, 109, 119, 130, 133], "diff_encod": [0, 95, 96, 134], "x": [0, 1, 18, 21, 24, 27, 36, 39, 43, 48, 59, 64, 68, 73, 76, 78, 79, 84, 85, 86, 87, 89, 92, 94, 95, 96, 97, 98, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 120, 124, 126, 130, 131, 132, 136], "encod": [0, 95, 96], "gray_cod": [0, 101, 134], "grai": [0, 77, 82, 83, 101], "closedlooppl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 131, 134, 135], "A": [0, 1, 9, 11, 12, 13, 14, 15, 17, 24, 59, 91, 101, 102, 103, 106, 123, 125, 131], "defin": [0, 1, 24, 43, 87, 97, 100, 129, 134], "perform": [0, 1, 128, 129, 134], "close": [0, 1, 8, 10, 135], "pll": [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 135], "dd": [0, 18, 19, 20, 21, 22, 23, 68, 131, 134, 135], "direct": [0, 18, 19, 131, 135], "digit": [0, 1, 9, 11, 12, 13, 14, 15, 18, 19, 59, 123, 125, 131, 134, 135], "synthes": [0, 18, 19, 131, 135], "loopfilt": [0, 59, 60, 61, 62, 63, 64, 65, 66, 67, 131, 134, 135], "2nd": [0, 1, 59, 62, 131, 135], "order": [0, 1, 24, 31, 36, 38, 43, 53, 59, 62, 76, 77, 81, 100, 123, 125, 131, 132, 135], "proport": [0, 1, 5, 59, 60, 62, 99, 106, 135], "plu": [0, 1, 59, 62, 135], "integr": [0, 1, 6, 59, 61, 62, 129, 135], "ppi": [0, 59, 62], "nco": [0, 1, 4, 8, 18, 19, 20, 62, 68, 69, 70, 71, 72, 73, 74, 75, 131, 134, 135], "numer": [0, 1, 18, 20, 68, 70, 129, 131, 135], "control": [0, 1, 18, 20, 68, 70, 131, 135], "oscil": [0, 1, 18, 20, 68, 70, 131, 135], "awgn": [0, 87, 88, 132, 134], "snr": [0, 87, 88], "none": [0, 24, 30, 33, 36, 40, 59, 67, 87, 88, 97, 104, 109, 110, 113, 114, 117, 118, 119, 126, 127], "add": [0, 87, 132, 136], "addit": [0, 87, 88, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122], "white": [0, 87, 88], "nois": [0, 1, 2, 3, 8, 14, 59, 62, 66, 87, 88, 117, 131], "signal": [0, 1, 9, 11, 14, 15, 18, 21, 24, 27, 36, 39, 43, 48, 59, 64, 68, 73, 75, 86, 87, 88, 94, 98, 99, 100, 103, 105, 106, 107, 108, 114, 117, 120, 124, 128, 129, 130, 131, 133], "iq_imbal": [0, 103, 134], "amplitud": [0, 100, 103, 127, 131], "appli": [0, 103, 109, 119, 121], "iq": [0, 103], "imbal": [0, 103], "complex": [0, 18, 21, 23, 76, 78, 79, 83, 87, 88, 103, 109, 119, 127, 128, 129, 132], "average_pow": [0, 86, 105, 134], "averag": [0, 86, 87, 88, 105, 114], "power": [0, 86, 87, 88, 105, 106, 107, 114, 133], "crest_factor": [0, 94, 105, 134, 135], "crest": [0, 94], "factor": [0, 1, 8, 17, 59, 62, 63, 94, 131], "energi": [0, 88, 98, 123, 125, 134], "papr": [0, 105, 130, 134, 135], "peak": [0, 94, 105, 107, 108], "ratio": [0, 14, 87, 88, 105], "peak_pow": [0, 105, 107, 134], "peak_voltag": [0, 94, 108, 134], "voltag": [0, 108, 124], "rms_voltag": [0, 94, 124, 134], "mean": [0, 114, 124, 133], "rm": [0, 94, 124], "hexdump": [0, 102, 134, 135], "byte": [0, 102], "width": [0, 102], "16": [0, 83, 102, 135], "str": [0, 102, 114, 117], "specifi": [0, 87, 88, 97, 102, 128, 129], "pack": [0, 102, 104, 134, 135], "bpe": [0, 104, 126], "arrai": [0, 77, 82, 83, 89, 91, 92, 95, 96, 97, 101, 104, 120, 126, 129, 130], "multipl": [0, 104, 126], "bit": [0, 82, 83, 88, 89, 90, 92, 93, 102, 104, 126, 135], "per": [0, 21, 73, 88, 100, 102, 104, 123, 125, 126, 130, 133], "element": [0, 102, 104, 126], "unpack": [0, 102, 126, 134, 135], "bec": [0, 89, 90, 97, 134], "p": [0, 84, 85, 89, 90, 92, 93, 97], "pass": [0, 87, 89, 92, 97, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 128, 129], "sequenc": [0, 89, 92, 97], "through": [0, 89, 92, 97, 128, 129, 131], "erasur": [0, 89, 90, 97], "bsc": [0, 92, 93, 97, 134], "symmetr": [0, 92, 93, 97], "transit": [0, 92, 93, 97], "dmc": [0, 97, 134], "discret": [0, 1, 9, 11, 12, 13, 14, 15, 59, 97, 123, 125, 127, 131], "memoryless": [0, 97], "matrix": [0, 97], "awgn_capac": [0, 88, 134], "calcul": [0, 88, 90, 93, 99, 106], "capac": [0, 88, 90, 93], "bec_capac": [0, 90, 134], "bsc_capac": [0, 93, 134], "fspl": [0, 99, 134], "d": [0, 99, 106, 134], "f": [0, 9, 11, 24, 28, 29, 43, 49, 50, 99, 100, 106, 127, 128, 129, 130, 131, 132, 133], "free": [0, 99], "space": [0, 29, 50, 99], "path": [0, 99], "loss": [0, 99], "db": [0, 1, 12, 14, 87, 88, 99, 100, 103, 105, 106, 130, 132, 133], "parabolic_antenna": [0, 106, 134], "freq": [0, 106, 127, 131], "tupl": [0, 24, 28, 29, 43, 49, 50, 106, 109, 119], "gain": [0, 1, 4, 5, 6, 7, 8, 18, 19, 43, 44, 51, 59, 60, 61, 62, 68, 69, 70, 100, 106, 131], "g": [0, 106], "beamwidth": [0, 106], "theta": [0, 19, 68, 70, 72, 106, 116], "parabol": [0, 106], "reflector": [0, 106], "q": [0, 84, 85, 134], "comput": [0, 84, 85, 87, 99, 128, 129, 131, 133], "complementari": [0, 84, 85], "cumul": [0, 84, 85], "distribut": [0, 84, 85], "function": [0, 1, 10, 24, 43, 44, 59, 84, 85, 88, 100, 114, 117, 128, 129, 131, 133, 134, 135], "standard": [0, 84, 85], "normal": [0, 1, 3, 8, 59, 62, 66, 84, 85, 100, 117, 131, 133], "mathcal": [0, 84, 85, 87, 97], "1": [0, 1, 8, 11, 15, 17, 18, 19, 28, 29, 43, 44, 49, 50, 59, 62, 63, 68, 70, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136], "qinv": [0, 84, 85, 134], "invers": [0, 85], "use_styl": [0, 121], "": [0, 1, 9, 11, 12, 13, 15, 16, 24, 28, 29, 33, 43, 49, 50, 56, 76, 78, 79, 88, 103, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 127, 132, 134], "default": [0, 30, 33, 82, 83, 117, 121], "matplotlib": [0, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 127, 128, 129, 130, 131, 132, 133, 134], "rcparam": [0, 121, 127, 131], "time_domain": [0, 87, 120, 130, 133, 134, 135], "sample_r": [0, 1, 8, 16, 28, 29, 49, 50, 110, 111, 112, 114, 115, 116, 117, 120, 127, 131, 133], "periodogram": [0, 114, 130, 134, 135], "estim": [0, 76, 78, 114, 117, 131], "spectral": [0, 114, 130, 133], "densiti": [0, 14, 114, 130, 133], "p_": [0, 86, 87, 97, 105, 107, 114], "xx": [0, 114], "us": [0, 18, 20, 25, 36, 37, 44, 45, 59, 65, 76, 78, 88, 90, 93, 102, 104, 110, 113, 114, 117, 118, 126, 128, 129, 133, 134, 136], "welch": [0, 114, 117], "method": [0, 114, 117, 128, 129], "spectrogram": [0, 117, 134, 135], "b": [0, 43, 45, 88, 100, 102, 110, 111, 112, 113, 115, 116, 118, 122, 133], "h": [0, 24, 25, 28, 29, 30, 43, 49, 50, 52, 59, 100, 110, 111, 113, 130, 131, 133], "omega": [0, 19, 68, 70, 71, 110, 111, 112, 115, 116, 131], "step": [0, 18, 21, 23, 24, 33, 43, 56, 68, 73, 75, 110, 118], "zero": [0, 40, 43, 44, 58, 59, 104, 110, 111, 112, 113, 115, 116, 118, 120, 122, 128, 130, 131, 133], "pole": [0, 43, 44, 54, 110, 111, 112, 113, 115, 116, 118, 122, 128], "frequency_respons": [0, 24, 28, 29, 43, 49, 50, 111, 128, 129, 131, 133, 134, 135], "group_delai": [0, 112, 128, 129, 134, 135], "group": [0, 112], "delai": [0, 18, 24, 26, 36, 59, 68, 95, 96, 112, 115, 131], "tau_g": [0, 112], "impulse_respons": [0, 24, 30, 43, 52, 100, 113, 123, 125, 128, 129, 133, 134, 135], "phase_delai": [0, 115, 134], "tau_": [0, 115], "phi": [0, 76, 77, 80, 103, 115], "phase_respons": [0, 116, 134], "step_respons": [0, 24, 33, 43, 56, 118, 128, 129, 131, 134, 135], "zeros_pol": [0, 122, 129, 134, 135], "kwarg": [0, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122], "loop": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 134, 135], "thi": [1, 21, 24, 43, 73, 76, 83, 87, 88, 110, 111, 112, 113, 114, 115, 116, 117, 118, 122, 127, 129, 131, 133], "i": [1, 8, 17, 24, 30, 33, 34, 36, 41, 43, 52, 56, 57, 59, 62, 63, 66, 84, 85, 87, 88, 90, 93, 97, 99, 100, 102, 103, 104, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 131, 132, 133, 134, 136], "meant": 1, "analysi": [1, 8, 131, 135], "onli": [1, 24, 32, 36, 40, 43, 55, 82, 83, 87, 131], "block": [1, 18, 59, 68, 95, 96], "diagram": [1, 18, 59, 68, 95, 96], "bb": [1, 131], "ped": [1, 7, 8, 62, 131], "lf": [1, 131], "lo": [1, 131], "e": [1, 18, 86, 89, 90, 98, 128, 129, 131, 132], "j": [1, 18, 43, 87, 97, 103, 128, 129, 131], "local": [1, 131], "baseband": [1, 130, 131], "phase": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 103, 115, 116, 134], "error": [1, 7, 8, 14, 59, 62, 93, 131], "detector": [1, 7, 8, 62, 131], "filter": [1, 5, 6, 8, 10, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 100, 110, 111, 112, 113, 115, 116, 118, 120, 122, 123, 125, 130, 133, 134, 135], "The": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 131, 133, 134, 136], "transfer": [1, 10, 24, 43, 44, 59, 100, 128, 129, 131], "h_": [1, 131], "z": [1, 18, 24, 43, 59, 68, 95, 96, 128, 129, 131], "k_1": [1, 5, 59, 60, 131], "k_2": [1, 6, 59, 61, 131], "frac": [1, 9, 11, 14, 15, 43, 59, 86, 87, 88, 94, 99, 100, 103, 105, 106, 124, 131], "k_0": [1, 4, 8, 19, 62, 68, 69, 70, 131], "k_p": [1, 7, 8, 62, 131], "refer": [1, 9, 11, 12, 13, 14, 15, 36, 59, 94, 100, 105, 123, 125, 129, 133], "michael": [1, 9, 11, 12, 13, 14, 15, 59, 123, 125], "rice": [1, 9, 11, 12, 13, 14, 15, 59, 123, 125], "commun": [1, 9, 11, 12, 13, 14, 15, 59, 123, 125, 131, 134], "time": [1, 8, 9, 11, 12, 13, 14, 15, 24, 43, 59, 62, 86, 87, 94, 97, 98, 100, 103, 105, 107, 108, 110, 114, 117, 120, 123, 124, 125, 127, 128, 129, 133], "approach": [1, 9, 11, 12, 13, 14, 15, 59, 88, 90, 93, 123, 125, 131], "appendix": [1, 59, 123, 125], "c": [1, 9, 11, 12, 13, 14, 15, 59, 76, 83, 88, 90, 93, 99, 106, 131], "lock": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 134], "exampl": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 106, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 125, 126, 131], "see": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 100, 123, 125, 134], "noise_bandwidth": [1, 8, 59, 62, 66], "damping_factor": [1, 8, 59, 62, 63], "creat": [1, 8, 18, 19, 24, 25, 36, 37, 43, 44, 45, 59, 62, 68, 70, 76, 77, 120, 127, 130, 131, 132, 133], "object": [1, 8, 76, 77, 129, 131, 132], "frequency_lock_tim": [1, 9], "freq_offset": [1, 9, 11], "frequenc": [1, 9, 11, 13, 24, 28, 29, 43, 49, 50, 59, 99, 106, 110, 111, 112, 114, 115, 116, 117, 133], "lock_tim": [1, 11, 131], "phase_error_vari": [1, 14], "cn0": [1, 14], "varianc": [1, 14, 87], "steadi": [1, 14], "state": [1, 14, 24, 32, 34, 36, 40, 41, 43, 55, 57], "phase_lock_tim": [1, 15], "bn": [1, 2], "bandwidth": [1, 2, 3, 8, 12, 59, 62, 66, 88, 100, 123, 125, 131, 133], "b_n": [1, 2, 3, 8, 9, 11, 14, 15, 59, 62, 66], "hz": [1, 2, 8, 9, 11, 14, 28, 29, 49, 50, 59, 62, 66, 88, 99, 100, 106, 127], "bnt": [1, 3, 131], "t": [1, 3, 8, 59, 62, 66, 100, 102, 127], "repres": [1, 10, 89, 90], "k0": [1, 4, 8, 18, 19, 62, 68, 69, 70], "k1": [1, 5, 59, 60, 131], "k2": [1, 6, 59, 61, 131], "kp": [1, 7, 8, 62], "omega_3db": [1, 12], "3": [1, 9, 11, 12, 15, 80, 81, 82, 83, 88, 89, 91, 92, 97, 99, 100, 101, 102, 103, 104, 106, 110, 111, 112, 113, 115, 116, 118, 120, 122, 126, 129, 131, 133, 134, 135], "omega_": [1, 12], "textrm": [1, 12], "radian": [1, 12, 13, 14, 18, 19, 131], "omega_n": [1, 13, 131], "natur": [1, 13], "sampl": [1, 8, 16, 18, 19, 21, 23, 24, 26, 28, 29, 30, 33, 36, 40, 49, 50, 52, 56, 59, 62, 66, 68, 70, 71, 73, 75, 100, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 123, 125, 127, 130, 131, 133], "rate": [1, 8, 16, 28, 29, 36, 39, 49, 50, 110, 111, 112, 114, 115, 116, 117, 120], "f_": [1, 8, 16, 28, 29, 49, 50, 100, 110, 111, 112, 114, 115, 116, 117, 120, 127, 128, 129, 131, 133], "zeta": [1, 8, 17, 59, 62, 63], "damp": [1, 8, 17, 59, 62, 63, 131], "properti": [2, 3, 4, 5, 6, 7, 10, 12, 13, 16, 17, 20, 26, 31, 34, 35, 38, 41, 42, 46, 47, 51, 53, 54, 57, 58, 60, 61, 63, 65, 66, 69, 71, 72, 80, 81, 82, 83], "paramet": [8, 9, 11, 14, 19, 21, 23, 25, 27, 28, 29, 30, 33, 37, 39, 40, 44, 45, 48, 49, 50, 52, 56, 62, 64, 70, 73, 75, 77, 78, 79, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126], "where": [8, 59, 62, 66, 87, 88, 97, 100, 128, 129, 134], "period": [8, 59, 62, 66], "second": [8, 9, 11, 15, 59, 62, 66, 100], "critic": [8, 17, 59, 62, 63, 131], "underdamp": [8, 17, 59, 62, 63], "overdamp": [8, 17, 59, 62, 63], "ted": [8, 62], "t_": [9, 11, 15, 39, 100, 133], "fl": [9, 11], "4": [9, 11, 29, 50, 80, 81, 82, 83, 87, 88, 90, 91, 93, 97, 99, 100, 101, 102, 103, 104, 106, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 125, 126, 127, 129, 132, 135], "delta": [9, 11, 24, 30, 43, 52, 113, 128, 129], "offset": [9, 11, 18, 19, 68, 70, 72, 76, 77, 80, 103, 131], "take": [9, 11, 15], "onto": [9, 11, 15], "equat": [9, 11, 12, 13, 14, 15, 43], "39": 9, "pl": [11, 15], "38": 11, "34": 12, "33": 13, "sigma_": 14, "theta_": 14, "n_0": [14, 88, 132], "carrier": 14, "43": 14, "40": 15, "less": 17, "than": [17, 82, 83, 103, 109, 119], "greater": 17, "note": [18, 24, 43, 59, 68, 87, 88, 90, 93, 95, 96, 100, 103, 106, 117], "increment": [18, 19, 21, 68, 70, 71, 73, 131], "v": [18, 68], "output": [18, 21, 23, 24, 30, 33, 43, 44, 45, 52, 56, 59, 64, 68, 73, 75, 87, 88, 89, 90, 92, 93, 96, 97, 104, 113, 118, 126, 127, 128, 129, 131], "exponenti": [18, 21, 23, 127, 128, 129], "constant": [18, 19, 59, 68, 70, 71, 129, 131], "accumul": [18, 19, 68, 70, 71, 131], "absolut": [18, 19, 68, 70, 72, 88], "unit": [18, 24, 33, 43, 56, 59, 68, 70, 71, 72, 86, 87, 88, 95, 96, 98, 107, 108, 118, 123, 124, 125, 128, 129, 131], "adder": [18, 59, 68, 95, 96, 131], "process": [18, 21, 68, 73, 129, 131], "variabl": [18, 21, 68, 73, 102, 131], "reset": [18, 22, 24, 32, 36, 40, 43, 55, 59, 67, 68, 74], "forward": [18, 23, 68, 75], "vari": [21, 73], "number": [23, 28, 29, 30, 33, 49, 50, 52, 56, 75, 87, 100, 102, 104, 110, 111, 112, 113, 114, 115, 116, 117, 118, 123, 125, 126], "wrapper": [24, 43], "scipi": [24, 27, 43, 114, 117, 133, 134], "convolv": [24, 27, 120, 130], "It": [24, 43, 59, 87], "support": [24, 43], "one": [24, 43, 82, 83, 100, 102, 110, 111, 112, 114, 115, 116, 117, 128, 129, 130, 133], "stream": [24, 25, 32, 34, 36, 37, 40, 41, 43, 44, 45, 55, 57], "its": [24, 43, 44, 128, 129, 133], "feedforward": [24, 25, 35, 43, 45, 47, 110, 111, 112, 113, 115, 116, 118, 122, 128, 129], "coeffici": [24, 25, 43, 45, 110, 111, 112, 113, 115, 116, 118, 122, 128, 129], "h_i": [24, 25, 35, 128], "sum_": [24, 43, 86, 87, 88, 98, 124], "sum": [24, 43, 133], "limits_": [24, 43], "bool": [24, 25, 34, 36, 37, 41, 43, 44, 45, 57, 109, 116, 119], "fals": [24, 25, 36, 37, 43, 44, 45, 89, 92, 97, 109, 129, 133], "frequency_response_log": [24, 29, 43, 50], "logarithm": [24, 29, 43, 50, 110, 111, 112, 114, 115, 116, 128, 129], "axi": [24, 29, 43, 50, 109, 110, 111, 112, 114, 115, 116, 117, 119, 120, 127], "when": [24, 30, 33, 43, 52, 56, 88, 89, 90, 92, 93, 110, 111, 112, 113, 115, 116, 118, 127, 128, 129], "mode": [24, 25, 27, 32, 34, 36, 37, 40, 41, 43, 44, 45, 55, 57, 130], "u": [24, 33, 43, 56, 118, 128, 129], "indic": [24, 25, 34, 36, 37, 41, 43, 44, 45, 57, 103, 116], "whether": [24, 25, 34, 36, 37, 41, 43, 44, 45, 57, 116], "tap": [24, 35, 36, 42, 43, 46, 47, 128, 129], "In": [25, 34, 37, 41, 44, 45, 57, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 106, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 125, 126, 127, 132], "previou": [25, 37, 40, 44, 45, 95, 96], "ar": [25, 29, 37, 44, 45, 50, 77, 88, 89, 90, 92, 93, 104, 109, 110, 111, 112, 114, 115, 116, 117, 119, 121, 127, 129, 131, 133, 134, 136], "preserv": [25, 34, 37, 41, 44, 45, 57], "between": [25, 34, 37, 41, 44, 45, 57, 99, 114, 117, 131], "call": [25, 34, 37, 41, 44, 45, 57], "liter": [27, 111, 112, 115, 116], "full": 27, "valid": [27, 130], "same": [27, 128], "convolut": 27, "detail": 27, "1024": [28, 29, 49, 50, 110, 111, 112, 115, 116, 130, 133], "from": [28, 29, 43, 44, 49, 50, 76, 77, 83, 117, 128, 129, 131, 134], "plot": [28, 29, 30, 33, 49, 50, 52, 56, 80, 81, 82, 83, 87, 88, 90, 93, 100, 103, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135], "decad": [29, 50, 110, 111, 112, 115, 116, 128, 131], "resampl": [36, 37, 38, 39, 40, 41, 42, 134, 135], "http": [36, 94, 100, 105], "wirelesspi": 36, "com": [36, 100], "fraction": [36, 40, 100, 127], "structur": 36, "new": [36, 37, 76, 77], "given": [36, 39, 128, 129], "r": [36, 39, 88, 100, 123, 125, 129, 131, 133], "index": [36, 40, 119], "vector": [40, 114, 117], "should": 40, "equal": 40, "three": [40, 127, 133], "If": [40, 77, 87, 88, 97, 104, 109, 110, 113, 114, 117, 118, 119, 120, 126, 134], "lfilter": 43, "b_i": [43, 45, 47, 110, 111, 112, 113, 115, 116, 118, 122, 129], "feedback": [43, 45, 46, 110, 111, 112, 113, 115, 116, 118, 122, 129], "a_j": [43, 45, 46, 110, 111, 112, 113, 115, 116, 118, 122, 129], "These": [43, 121, 131], "differ": [43, 82, 83, 133], "a_0": 43, "left": [43, 86, 87, 88, 98, 99, 100, 103, 106, 107, 108, 124], "m": [43, 76, 77, 78, 79, 81, 83, 97], "right": [43, 86, 87, 88, 98, 99, 100, 103, 106, 107, 108, 124], "classmethod": [43, 44], "zerospol": [43, 44, 110, 111, 112, 113, 115, 116, 118, 122, 129], "self": [43, 44], "100": [43, 52, 56, 87, 88, 90, 93, 110, 113, 118, 120, 127], "a_tap": [43, 46, 110, 111, 112, 113, 115, 116, 118, 122, 129, 131], "b_tap": [43, 47, 110, 111, 112, 113, 115, 116, 118, 122, 129, 131], "can": [59, 87, 100, 104, 114, 117, 128, 129, 136], "track": 59, "cannot": 59, "howev": [59, 90, 93, 127], "chirp": 59, "ramp": 59, "underli": [59, 65], "modul": [76, 77, 79, 81, 103, 132, 134], "x_hat": [76, 78, 109, 132], "symbol": [76, 77, 78, 79, 82, 83, 88, 100, 109, 119, 123, 125, 130, 132, 133], "hat": [76, 78, 109, 119], "decim": [76, 78, 79, 83, 132], "maximum": [76, 78, 109, 119], "likelihood": [76, 78], "degre": [76, 77, 80, 103, 106], "symbol_label": [76, 77, 82, 83], "valu": [76, 77, 82, 84, 85, 95, 96, 100, 103, 109, 117, 119, 129], "label": [76, 77, 82, 87, 100, 103, 117, 120, 123, 125, 127, 130, 131, 133], "consecut": [76, 77, 82], "symbol_map": [76, 80, 81, 82, 83, 119, 120, 130], "map": [76, 83, 119], "dot": [76, 83], "mapsto": [76, 83], "mathbb": [76, 83, 88], "bin": [77, 82, 83, 119, 132], "ge": 77, "like": [77, 134], "must": [77, 87, 100, 123, 125], "have": [77, 104, 126], "uniqu": 77, "out": [80, 81, 82, 83, 84, 85, 89, 91, 92, 95, 96, 97, 99, 101, 104, 106, 112, 121, 126], "plt": [80, 81, 82, 83, 87, 88, 90, 93, 100, 103, 110, 111, 112, 113, 115, 116, 118, 120, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133], "figur": [80, 81, 82, 83, 87, 88, 90, 93, 100, 103, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133], "figsiz": [80, 81, 82, 83, 87, 88, 90, 93, 100, 103, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133], "8": [80, 81, 82, 83, 87, 88, 90, 91, 93, 97, 100, 101, 102, 106, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 125, 128, 129, 130, 131, 133], "45": [80, 103], "adjac": [82, 83, 133], "6": [82, 83, 91, 97, 99, 101, 102, 106, 110, 111, 112, 113, 115, 116, 118, 120, 122, 128, 129, 131, 132], "7": [82, 83, 91, 97, 101, 102, 120], "5": [82, 87, 89, 91, 92, 93, 97, 100, 101, 102, 103, 106, 110, 111, 112, 113, 115, 116, 118, 120, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 135], "annot": [82, 83, 119, 135], "mai": [82, 83, 121, 129], "more": [82, 83, 117], "00000000e": [83, 129], "00": [83, 129], "00j": 83, "07106781e": 83, "01": [83, 102, 129, 131], "01j": 83, "12323400e": 83, "17": [83, 106], "83697020e": 83, "22464680e": 83, "16j": 83, "real": [84, 85, 87, 127, 128, 129, 130, 131], "probabl": [84, 85, 89, 90, 92, 93, 97, 134], "exceed": [84, 85], "15865525393145707": [84, 85], "158655": [84, 85], "0000010494310452": [84, 85], "measur": [86, 87, 94, 98, 105, 107, 108, 124, 131, 134, 135], "domain": [86, 87, 94, 98, 103, 105, 107, 108, 110, 114, 117, 120, 124], "text": [86, 87, 88, 90, 93, 94, 99, 105, 107, 108, 124], "avg": [86, 87, 105], "seed": 87, "which": [87, 88, 103, 106, 109, 119, 127, 131, 133], "ad": [87, 134, 135], "desir": [87, 132], "explicitli": 87, "assum": [87, 97, 104, 126], "contain": [87, 102], "known": 87, "linear": 87, "random": [87, 89, 92, 97, 103, 120, 130, 132], "numpi": [87, 126, 127, 128, 129, 130, 131, 132, 133, 134], "default_rng": 87, "noisi": 87, "w": [87, 127, 128, 129, 130, 131, 132, 133], "sigma": [87, 88], "For": [87, 110, 111, 112, 113, 115, 116, 118, 122, 128], "sim": 87, "cn": 87, "np": [87, 88, 89, 90, 92, 93, 97, 103, 110, 111, 112, 113, 115, 116, 118, 120, 122, 127, 128, 129, 130, 131, 132, 133], "sin": 87, "pi": [87, 99, 100, 103, 106, 110, 111, 112, 113, 115, 116, 118, 120, 122, 127, 128, 129, 130, 131], "arang": [87, 127, 130, 131], "10": [87, 88, 91, 97, 99, 100, 101, 102, 103, 105, 106, 109, 110, 111, 112, 113, 115, 116, 118, 120, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133], "titl": [87, 88, 90, 93, 103, 120, 127, 130, 131, 133], "tight_layout": [87, 88, 90, 93, 120, 130, 131, 132, 133], "channel": [88, 89, 90, 92, 93, 97, 134], "2d": 88, "wa": 88, "x_i": [88, 89, 90, 92, 93, 97, 103], "y_i": [88, 89, 90, 92, 93, 97], "log_2": 88, "equival": [88, 127], "monoton": 88, "decreas": 88, "limit": [88, 109, 119], "infti": 88, "esn0": [88, 132], "linspac": [88, 90, 93, 129], "20": [88, 89, 92, 97, 102, 103, 130, 133], "xlabel": [88, 90, 93, 127, 131, 133], "psd": 88, "e_": [88, 132], "ylabel": [88, 90, 93, 127, 131, 133], "grid": [88, 90, 93, 121, 127, 131, 133], "true": [88, 89, 90, 92, 93, 97, 109, 116, 119, 121, 132], "At": 88, "occur": 88, "e_b": 88, "relat": [88, 100], "view": 88, "59": 88, "shannon": 88, "ebn0": 88, "log10": [88, 133], "25": [89, 92, 97, 127, 131, 133], "roughli": [89, 92, 127], "eras": 89, "randint": [89, 92, 97, 103, 120, 130, 132], "9": [91, 97, 101, 102, 123, 125, 130, 132, 133, 135], "11": [91, 101], "12": [91, 101, 128, 132], "13": [91, 101], "14": [91, 101], "15": [91, 101], "flip": 92, "h_b": 93, "cf": 94, "v_": [94, 108, 124], "en": [94, 105], "wikipedia": [94, 105], "org": [94, 105], "wiki": [94, 105], "data": [95, 96, 102, 104, 126, 134], "uncod": 96, "pr": 97, "y_j": 97, "alphabet": 97, "size": [97, 127, 130, 131, 133], "ldot": 97, "log_": [99, 105], "distanc": 99, "meter": [99, 106], "transmitt": 99, "receiv": 99, "km": 99, "link": [99, 134], "ghz": [99, 106], "1e3": 99, "1e9": [99, 106], "92": 99, "44778322188337": 99, "so": [99, 100, 134], "doubl": [99, 106], "result": [99, 106], "increas": [99, 106, 129], "2e3": 99, "98": 99, "468383135163": 99, "also": [99, 100, 134], "2e9": 99, "puls": [100, 120, 123, 125, 134, 135], "shape": [100, 120, 123, 125, 134, 135], "product": [100, 133], "sym": [100, 133], "side": [100, 110, 111, 112, 114, 115, 116, 117, 128, 129, 130, 133], "thought": [100, 136], "smaller": [100, 133], "produc": [100, 133], "wider": 100, "even": [100, 123, 125], "nomin": 100, "passband": [100, 130], "ha": [100, 106, 131, 133], "exp": [100, 103, 110, 111, 112, 113, 115, 116, 118, 120, 122, 127, 129, 130, 131], "sqrt": [100, 124, 130, 131, 133], "ln": 100, "www": 100, "mathwork": 100, "help": 100, "ref": 100, "gaussdesign": 100, "html": 100, "onlinelibrari": 100, "wilei": 100, "doi": 100, "pdf": 100, "1002": 100, "9780470041956": 100, "app2": 100, "h_0p1": [100, 123, 125], "h_0p2": 100, "h_0p3": 100, "displai": [102, 110, 111, 112, 114, 115, 116, 117], "each": [102, 114, 117], "consid": 102, "convert": 102, "line": 102, "string": [102, 114, 117], "print": [102, 127, 128, 129, 131], "quick": 102, "brown": 102, "fox": 102, "jump": 102, "over": 102, "lazi": 102, "dog": 102, "00000000": 102, "54": 102, "68": 102, "65": 102, "71": 102, "75": [102, 131, 132], "69": 102, "63": 102, "6b": 102, "62": 102, "72": 102, "6f": 102, "77": 102, "6e": 102, "00000010": 102, "66": 102, "78": 102, "6a": 102, "6d": 102, "70": [102, 133], "73": 102, "76": 102, "74": 102, "00000020": 102, "6c": 102, "61": 102, "7a": 102, "79": 102, "64": [102, 129], "67": 102, "he": 102, "02": [102, 129, 131], "03": [102, 129], "04": [102, 129], "00000004": 102, "05": [102, 127, 129, 131], "06": 102, "07": 102, "08": 102, "00000008": 102, "09": 102, "0a": 102, "posit": 103, "compon": 103, "larger": [103, 109, 119], "quadratur": 103, "lead": 103, "follow": [103, 121, 131], "g_i": 103, "180": 103, "g_q": 103, "x_q": 103, "horizont": 103, "stretch": 103, "constel": [103, 109], "while": [103, 133], "neg": 103, "vertic": 103, "1_000": 103, "y1": 103, "y2": 103, "subplot": [103, 131, 132], "befor": [103, 136], "after": 103, "legend": [103, 127, 130, 131, 133], "northwest": 103, "northeast": 103, "deg": 103, "dtype": [104, 120, 126, 131], "dtypelik": [104, 126], "most": [104, 126], "signific": [104, 126], "first": [104, 126], "enough": 104, "fill": 104, "last": 104, "remain": 104, "type": [104, 111, 112, 114, 115, 116, 126, 135], "smallest": 104, "unsign": 104, "integ": 104, "hold": 104, "uint8": [104, 126], "diamet": 106, "effici": 106, "55": 106, "le": [106, 123, 125], "eta": 106, "dbi": 106, "half": 106, "arcsin": 106, "83": 106, "dish": 106, "21": 106, "810210290266568": 106, "437435887991374": 106, "23": 106, "sinc": 106, "antenna": 106, "we": [106, 134], "observ": 106, "830810203546193": 106, "529544741425365": 106, "max": [107, 108], "heatmap": [109, 132], "instead": 109, "scatter": 109, "both": [109, 119, 127, 131], "set": [109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 129], "keyword": [109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 128, 129], "argument": [109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 128, 129], "pyplot": [109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 127, 128, 129, 130, 131, 132, 133], "hist2d": 109, "n_time": [110, 129], "n_freq": 110, "x_axi": [110, 111, 112, 114, 115, 116, 117, 128, 129, 130, 131], "two": [110, 111, 112, 114, 115, 116, 117, 127, 128, 129], "log": [110, 111, 112, 114, 115, 116, 128, 129, 131], "n_t": 110, "n_f": 110, "scale": [110, 111, 112, 114, 115, 116, 117, 128, 129], "option": [110, 111, 112, 114, 115, 116, 117], "spectrum": [110, 111, 112, 114, 115, 116, 117], "h_srrc": [110, 111, 112, 113, 115, 116, 118, 120, 122], "1j": [110, 111, 112, 113, 115, 116, 118, 120, 122, 127, 129, 130, 131], "conj": [110, 111, 112, 113, 115, 116, 118, 122, 129, 131], "30": [110, 113, 118, 129], "ylim": [112, 128, 131, 133], "48": 112, "52": 112, "window": [114, 117], "hann": [114, 117], "overlap": [114, 117, 130], "fft": [114, 117], "median": 114, "segment": [114, 117], "256": [114, 117, 130], "point": [114, 117], "unwrap": [116, 131], "pcolormesh": 117, "By": 117, "color": [117, 127, 130, 131, 133], "bar": 117, "rang": [117, 131], "10th": 117, "100th": 117, "percentil": 117, "provid": [117, 134], "dynam": 117, "activ": 117, "chang": [117, 136], "vmin": 117, "vmax": 117, "represent": 119, "50": [119, 127, 130], "bpsk": [120, 130], "1000": 120, "10e3": 120, "qpsk": 120, "complex64": [120, 131], "style": 121, "revert": 121, "rcdefault": 121, "_rc_param": 121, "rc_param": 121, "ax": [121, 127, 131], "autolayout": 121, "max_open_warn": 121, "titleweight": 121, "bold": 121, "linestyl": [121, 127, 131, 133], "excess": [123, 125, 133], "h_0p5": [123, 125], "h_0p9": [123, 125], "import": [127, 128, 129, 130, 131, 132, 133, 134], "config": [127, 128, 129, 130, 131, 132, 133], "inlinebackend": [127, 128, 129, 130, 131, 132, 133], "print_figure_kwarg": [127, 128, 129, 130, 131, 132, 133], "facecolor": [127, 128, 129, 130, 131, 132, 133], "widget": [127, 128, 129, 130, 131, 132, 133], "prop_cycl": [127, 131], "by_kei": [127, 131], "continu": 127, "tx": 127, "decai": [127, 129], "marker": [127, 128, 129], "o": 127, "fillstyl": 127, "imag": 127, "origin": 127, "show": [127, 128, 129, 130, 131, 132, 133], "now": 127, "accomplish": 127, "librari": [127, 132, 134, 136], "def": [127, 132], "resample_sign": 127, "new_sample_r": 127, "ty": 127, "notic": [127, 133], "everi": 127, "200": 127, "four": 127, "400": 127, "other": [127, 136], "appear": 127, "fourth": 127, "often": 127, "do": 127, "align": 127, "315": 127, "32": 127, "user": [128, 129], "below": [128, 129], "00095881": 128, "00175008": 128, "00423912": 128, "00588237": 128, "00615087": 128, "00474585": 128, "00170436": 128, "0025481": 128, "00721629": 128, "01123216": 128, "01342329": 128, "01273174": 128, "00845039": 128, "00043678": 128, "01073645": 128, "02372925": 128, "03650167": 128, "04650553": 128, "05098414": 128, "04734541": 128, "03355823": 128, "00851466": 128, "0276993": 128, "07367186": 128, "12670168": 128, "18306847": 128, "2381038": 128, "28726435": 128, "32607284": 128, "3509308": 128, "35948882": 128, "conveni": [128, 129], "evalu": [128, 129], "envelop": [128, 129], "easili": [128, 129], "here": [128, 129], "altern": 129, "conjug": 129, "0x000002214b040a88": 129, "47820725": 129, "78207252e": 129, "58172329e": 129, "10862468e": 129, "86109590e": 129, "21565653e": 129, "01140214e": 129, "57286400e": 129, "67772160e": 129, "47338728e": 129, "10422993e": 129, "89312837e": 129, "12240078e": 129, "03953322e": 129, "69685122e": 129, "63882791e": 129, "81474977e": 129, "47193366e": 129, "85259041e": 129, "15647504e": 129, "23851924e": 129, "42176895e": 129, "84684395e": 129, "42721858e": 129, "72236648e": 129, "14721649e": 129, "10813095e": 129, "94024315e": 129, "78877688e": 129, "74077567e": 129, "87820725": 129, "53637958": 129, "94724205": 129, "13335164": 129, "1455082": 129, "04436799": 129, "88708159": 129, "71930943": 129, "5719707": 129, "46154771": 129, "39261642": 129, "36139242": 129, "35935288": 129, "3763214": 129, "40270968": 129, "43085717": 129, "45557651": 129, "47410241": 129, "48566716": 129, "49090568": 129, "49124786": 129, "48840102": 129, "4839738": 129, "47925143": 129, "47510421": 129, "47199608": 129, "47005584": 129, "46917696": 129, "46911955": 129, "denomin": 129, "73910363": 129, "30614675j": 129, "plane": 129, "endpoint": 129, "concaten": 129, "0x000002214dc574c8": 129, "lyon": 129, "understand": 129, "3rd": 129, "edit": 129, "section": [129, 131], "insid": 129, "circl": 129, "sinusoid": 129, "outsid": 129, "unstabl": 129, "n_symbol": 130, "500": [130, 131], "x_bb_rect": 130, "papr_bb_rect": 130, "x_pb_rect": 130, "papr_pb_rect": 130, "x_bb_0p9": 130, "papr_bb_0p9": 130, "x_bb_0p5": 130, "papr_bb_0p5": 130, "x_bb_0p1": 130, "papr_bb_0p1": 130, "2f": 130, "rf": [130, 131], "xlim": [130, 131, 133], "x_pb_0p9": 130, "papr_pb_0p9": 130, "x_pb_0p5": 130, "papr_pb_0p5": 130, "x_pb_0p1": 130, "papr_pb_0p1": 130, "configur": 131, "0x00000290f1ce3488": 131, "theta_0": 131, "phase_error": 131, "freq_estim": 131, "suptitl": [131, 132], "ones": 131, "angl": 131, "part": 131, "system": [131, 134], "avail": [131, 132], "001": 131, "005": 131, "b_nt": 131, "0005": 131, "00001": 131, "0125": 131, "015": 131, "0175": 131, "t_lock": 131, "analyze_psk": 132, "100_000": 132, "achiev": [132, 133], "n0": 132, "18": 132, "rectangular": 133, "rect": 133, "rc_0p1": 133, "rc_0p5": 133, "rc_0p9": 133, "nyquist": 133, "specif": 133, "pm": 133, "roll": 133, "60": 133, "total": 133, "nearli": 133, "compar": 133, "null": 133, "small": 133, "lobe": 133, "much": 133, "higher": 133, "h_rect": 133, "freqz": 133, "worn": 133, "whole": 133, "h_rc_0p1": 133, "h_rc_0p5": 133, "h_rc_0p9": 133, "rel": 133, "main": 133, "p_rect": 133, "cumsum": 133, "ab": 133, "p_rc_0p1": 133, "p_rc_0p5": 133, "p_rc_0p9": 133, "One": 133, "within": 133, "variou": 133, "srrc_0p1": 133, "srrc_0p5": 133, "srrc_0p9": 133, "therefor": 133, "similar": 133, "significantli": 133, "due": 133, "being": 133, "h_srrc_0p1": 133, "h_srrc_0p5": 133, "h_srrc_0p9": 133, "p_srrc_0p1": 133, "p_srrc_0p5": 133, "p_srrc_0p9": 133, "gauss_0p1": 133, "gauss_0p2": 133, "gauss_0p3": 133, "python": 134, "packag": 134, "softwar": 134, "radio": 134, "goal": 134, "tool": 134, "design": 134, "build": 134, "analyz": 134, "reli": 134, "interoper": 134, "veri": 134, "possibl": 134, "numba": 134, "acceler": 134, "computation": 134, "intens": 134, "addition": 134, "aim": 134, "replic": 134, "relev": 134, "matlab": 134, "dsp": 134, "toolbox": 134, "progress": 134, "someth": 134, "you": 134, "includ": 134, "pleas": 134, "open": 134, "issu": 134, "github": 134, "impair": 134, "manipul": 134, "model": 134, "budget": 134, "util": 134, "releas": 135, "juli": 135, "2023": 135, "helper": 135, "improv": 135, "matt": 135, "hostett": 135, "mhostett": 135, "semant": 136, "major": 136, "minor": 136, "patch": 136, "introduc": 136, "api": 136, "featur": 136, "backward": 136, "compat": 136, "make": 136, "bug": 136, "fix": 136, "There": 136, "guarante": 136, "them": 136, "thei": 136}, "objects": {"": [[0, 0, 0, 1, "sdr", ""]], "sdr": [[1, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [18, 1, 1, "", "DDS", "Implements a direct digital synthesizer (DDS)."], [24, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [36, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [43, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [59, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [68, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [76, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [84, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [85, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [86, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [87, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [88, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [89, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [90, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [91, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [92, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [93, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [94, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [95, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [96, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [97, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [98, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [99, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [100, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [101, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [102, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [103, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [104, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [105, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [106, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [107, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [108, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [123, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [124, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [125, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [126, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."]], "sdr.ClosedLoopPLL": [[2, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [3, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [4, 2, 1, "", "K0", "The NCO gain $K_0$."], [5, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [6, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [7, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [8, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [9, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [10, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [11, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [12, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [13, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [14, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [15, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [16, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [17, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[8, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [8, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [8, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [8, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [8, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[9, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[11, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[14, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.DDS": [[19, 3, 1, "", "__init__", "Creates a direct digital synthesizer (DDS)."], [20, 2, 1, "", "nco", "The numerically-controlled oscillator (NCO) used by the DDS."], [21, 3, 1, "", "process", "Steps the DDS with the variable phase increment signal $x[n]$."], [22, 3, 1, "", "reset", "Resets the DDS."], [23, 3, 1, "", "step", "Steps the DDS forward by $N$ samples."]], "sdr.DDS.__init__": [[19, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [19, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [19, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.DDS.process": [[21, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the DDS."]], "sdr.DDS.step": [[23, 4, 2, "p-N", "N", "The number of samples $N$ to step the DDS forward."]], "sdr.FIR": [[25, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [26, 2, 1, "", "delay", "The delay of the FIR filter in samples."], [27, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the FIR filter."], [28, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the FIR filter."], [29, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the FIR filter on a logarithmic frequency axis."], [30, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [31, 2, 1, "", "order", "The order of the FIR filter, $N$."], [32, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [33, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [34, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [35, 2, 1, "", "taps", "The feedforward taps $h_i$."]], "sdr.FIR.__init__": [[25, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$."], [25, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to filter()."]], "sdr.FIR.filter": [[27, 4, 2, "p-mode", "mode", "The convolution mode. See scipy.signal.convolve() for details."], [27, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.FIR.frequency_response": [[28, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [28, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.frequency_response_log": [[29, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [29, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [29, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[30, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.step_response": [[33, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FarrowResampler": [[37, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [38, 2, 1, "", "order", "The order of the filter."], [39, 3, 1, "", "resample", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [40, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [41, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [42, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__init__": [[37, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to resample()."]], "sdr.FarrowResampler.resample": [[39, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [39, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.reset": [[40, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[44, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [45, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [46, 2, 1, "", "a_taps", "The feedback taps $a_j$."], [47, 2, 1, "", "b_taps", "The feedforward taps $b_i$."], [48, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the IIR filter."], [49, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the IIR filter."], [50, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the IIR filter on a logarithmic frequency axis."], [51, 2, 1, "", "gain", "The gain of the IIR filter."], [52, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [53, 2, 1, "", "order", "The order of the IIR filter, $N$."], [54, 2, 1, "", "poles", "The poles of the IIR filter."], [55, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [56, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [57, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [58, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[44, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [44, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [44, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."], [44, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__init__": [[45, 4, 2, "p-a", "a", "The feedback coefficients $a_j$."], [45, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [45, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."]], "sdr.IIR.filter": [[48, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.IIR.frequency_response": [[49, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [49, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[50, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [50, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [50, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[52, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[56, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.LoopFilter": [[60, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [61, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [62, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [63, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [64, 3, 1, "", "filter", "Filters the input signal $x[n]$."], [65, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [66, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [67, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__init__": [[62, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [62, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [62, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [62, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.LoopFilter.filter": [[64, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.NCO": [[69, 2, 1, "", "K0", "The NCO gain $K_0$."], [70, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [71, 2, 1, "", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [72, 2, 1, "", "offset", "The absolute offset $theta$ of the NCO in units."], [73, 3, 1, "", "process", "Steps the NCO with the variable-increment signal $x[n]$."], [74, 3, 1, "", "reset", "Resets the NCO."], [75, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__init__": [[70, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [70, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [70, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in units."]], "sdr.NCO.process": [[73, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the NCO."]], "sdr.NCO.step": [[75, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.PSK": [[77, 3, 1, "", "__init__", "Creates a new PSK object."], [78, 3, 1, "", "demodulate", "Demodulates the complex symbols $hat{x}[k]$ to decimal symbols $hat{s}[k]$ using maximum-likelihood estimation."], [79, 3, 1, "", "modulate", "Modulates to decimal symbols $s[k]$ to complex symbols $x[k]$."], [80, 2, 1, "", "offset", "The phase offset $phi$ in degrees."], [81, 2, 1, "", "order", "The modulation order $M = 2^k$."], [82, 2, 1, "", "symbol_labels", "The symbols values (labels) of consecutive symbols."], [83, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[77, 4, 2, "p-offset", "offset", "The phase offset $phi$ in degrees."], [77, 4, 2, "p-order", "order", "The modulation order $M = 2^k$ with $k ge 1$."], [77, 4, 2, "p-symbol_labels", "symbol_labels", "The symbol labels of consecutive symbols. If \"bin\", the symbols are binary-coded. If \"gray\", the symbols are Gray-coded. If an array-like object, the symbols are labeled by the values in the array. The array must have unique values from $0$ to $M-1$."]], "sdr.PSK.demodulate": [[78, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to demodulate."]], "sdr.PSK.modulate": [[79, 4, 2, "p-symbols", "symbols", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.Q": [[84, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[85, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.average_power": [[86, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[87, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [87, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [87, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [87, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[88, 4, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [88, 4, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.bec": [[89, 4, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [89, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[90, 4, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[91, 4, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[92, 4, 2, "p-p", "p", "The probability $p$ of a bit flip."], [92, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[93, 4, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[94, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.diff_decode": [[95, 4, 2, "p-y", "y", "The input encoded data $y[k]$."], [95, 4, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[96, 4, 2, "p-x", "x", "The input uncoded data $x[k]$."], [96, 4, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[97, 4, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [97, 4, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [97, 4, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [97, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.energy": [[98, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.fspl": [[99, 4, 2, "p-d", "d", "The distance $d$ in meters between the transmitter and receiver."], [99, 4, 2, "p-f", "f", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[100, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [100, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [100, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[101, 4, 2, "p-n", "n", "The length of the Gray code."]], "sdr.hexdump": [[102, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [102, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[103, 4, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [103, 4, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [103, 4, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.pack": [[104, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [104, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [104, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[105, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[106, 4, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [106, 4, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [106, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[107, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[108, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.plot": [[109, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [110, 5, 1, "", "filter", "Plots the frequency response $H(omega)$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [111, 5, 1, "", "frequency_response", "Plots the frequency response $H(omega)$ of the filter."], [112, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [113, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [114, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [115, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [116, 5, 1, "", "phase_response", "Plots the phase response $Theta(omega)$ of the filter."], [117, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [118, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [119, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [120, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [121, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [122, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.constellation": [[109, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [109, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [109, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.filter": [[110, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [110, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [110, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [110, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [110, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [110, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [110, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.frequency_response": [[111, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [111, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [111, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [111, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [111, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [111, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[112, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [112, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [112, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [112, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [112, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [112, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.impulse_response": [[113, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [113, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [113, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.plot.periodogram": [[114, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [114, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [114, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [114, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [114, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [114, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [114, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [114, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_delay": [[115, 4, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [115, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [115, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [115, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [115, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [115, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_response": [[116, 4, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [116, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [116, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [116, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [116, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [116, 4, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [116, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.spectrogram": [[117, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [117, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [117, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [117, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [117, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [117, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [117, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[118, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [118, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [118, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.plot.symbol_map": [[119, 4, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [119, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [119, 4, 2, "p-symbol_map", "symbol_map", "The complex symbols $hat{x}[k]$."]], "sdr.plot.time_domain": [[120, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\"."], [120, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[122, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [122, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.raised_cosine": [[123, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [123, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [123, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[124, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[125, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [125, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [125, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.unpack": [[126, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [126, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [126, 4, 2, "p-x", "x", "The input array with bpe bits per element."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"filter": [0, 128, 129, 131], "puls": [0, 130, 133], "shape": [0, 130, 133], "resampl": [0, 127], "modul": 0, "phase": [0, 131, 132], "time": [0, 131], "lock": [0, 131], "loop": [0, 131], "impair": 0, "measur": 0, "data": 0, "manipul": 0, "channel": 0, "model": 0, "link": 0, "budget": 0, "probabl": 0, "plot": 0, "configur": 0, "domain": [0, 131], "frequenc": [0, 128, 129, 131], "analysi": 0, "note": 1, "constructor": [1, 18, 24, 36, 43, 59, 68, 76], "method": [1, 18, 24, 36, 43, 59, 68, 76], "properti": [1, 18, 24, 36, 43, 59, 68, 76], "see": [18, 28, 29, 30, 33, 49, 50, 52, 56, 68, 84, 85, 94, 105, 110, 111, 112, 113, 115, 116, 118, 122], "also": [18, 28, 29, 30, 33, 49, 50, 52, 56, 68, 84, 85, 94, 105, 110, 111, 112, 113, 115, 116, 118, 122], "farrow": 127, "arbitrari": 127, "construct": 127, "an": [127, 128, 129], "input": 127, "signal": 127, "x": 127, "n": [127, 128, 129], "t_": 127, "rate": 127, "r": 127, "y": 127, "frac": 127, "upsampl": 127, "integ": 127, "downsampl": 127, "irrat": 127, "fir": 128, "creat": [128, 129], "examin": [128, 129], "impuls": [128, 129], "respons": [128, 129, 131], "h": [128, 129], "step": [128, 129, 131], "": [128, 129], "omega": [128, 129], "group": [128, 129], "delai": [128, 129], "tau_g": [128, 129], "fulli": [128, 129], "analyz": [128, 129, 131], "iir": 129, "zero": 129, "pole": 129, "digit": 129, "stabil": 129, "peak": 130, "averag": 130, "power": 130, "rectangular": 130, "squar": [130, 133], "root": [130, 133], "rais": [130, 133], "cosin": [130, 133], "design": 131, "proport": 131, "plu": 131, "integr": 131, "ppi": 131, "implement": 131, "pll": 131, "close": 131, "perform": 131, "compar": 131, "across": 131, "zeta": 131, "b_n": 131, "t": 131, "shift": 132, "kei": 132, "constel": 132, "bpsk": 132, "qpsk": 132, "8": 132, "psk": 132, "16": 132, "gaussian": 133, "sdr": 134, "featur": 134, "v0": 135, "0": 135, "2": 135, "chang": 135, "contributor": 135, "1": 135, "version": 136, "alpha": 136, "releas": 136, "beta": 136}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Filtering": [[0, "filtering"]], "Pulse shaping": [[0, "pulse-shaping"]], "Resampling": [[0, "resampling"]], "Modulation": [[0, "modulation"]], "Phase/time-locked loops": [[0, "phase-time-locked-loops"]], "Impairments": [[0, "impairments"]], "Measurement": [[0, "measurement"]], "Data manipulation": [[0, "data-manipulation"]], "Channel models": [[0, "channel-models"]], "Link budgets": [[0, "link-budgets"]], "Probability": [[0, "probability"]], "Plotting": [[0, "plotting"]], "Configuration": [[0, "configuration"]], "Time-domain": [[0, "time-domain"]], "Frequency-domain": [[0, "frequency-domain"]], "Filter analysis": [[0, "filter-analysis"]], "Note": [[1, null]], "Constructors": [[1, "constructors"], [18, "constructors"], [24, "constructors"], [36, "constructors"], [43, "constructors"], [59, "constructors"], [68, "constructors"], [76, "constructors"]], "Methods": [[1, "methods"], [18, "methods"], [24, "methods"], [36, "methods"], [43, "methods"], [59, "methods"], [68, "methods"], [76, "methods"]], "Properties": [[1, "properties"], [18, "properties"], [24, "properties"], [36, "properties"], [43, "properties"], [59, "properties"], [68, "properties"], [76, "properties"]], "See also": [[18, null], [28, null], [29, null], [30, null], [33, null], [49, null], [50, null], [52, null], [56, null], [68, null], [84, null], [85, null], [94, null], [105, null], [110, null], [111, null], [112, null], [113, null], [115, null], [116, null], [118, null], [122, null]], "Farrow arbitrary resampler": [[127, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[127, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[127, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[127, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[127, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[127, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[127, "downsample-by-an-irrational-rate"]], "FIR filters": [[128, "fir-filters"]], "Create an FIR filter": [[128, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[128, "examine-the-impulse-response-h-n"], [129, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[128, "examine-the-step-response-s-n"], [129, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[128, "examine-the-frequency-response-h-omega"], [129, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[128, "examine-the-group-delay-tau-g-omega"], [129, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[128, "fully-analyze-a-fir-filter"]], "IIR filters": [[129, "iir-filters"]], "Create an IIR filter": [[129, "create-an-iir-filter"]], "Examine the zeros and poles": [[129, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[129, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[129, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[130, "peak-to-average-power"]], "Rectangular pulse shape": [[130, "rectangular-pulse-shape"]], "Square-root raised cosine pulse shape": [[130, "square-root-raised-cosine-pulse-shape"]], "Phase-locked loops": [[131, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[131, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[131, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[131, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[131, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[131, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[131, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[131, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[132, "phase-shift-keying"]], "Constellations": [[132, "constellations"]], "BPSK": [[132, "bpsk"]], "QPSK": [[132, "qpsk"]], "8-PSK": [[132, "id1"]], "16-PSK": [[132, "id2"]], "Pulse shapes": [[133, "pulse-shapes"]], "Raised cosine": [[133, "raised-cosine"]], "Square-root raised cosine": [[133, "square-root-raised-cosine"]], "Gaussian": [[133, "gaussian"]], "sdr": [[134, "sdr"]], "Features": [[134, "features"]], "v0.0": [[135, "v0-0"]], "v0.0.2": [[135, "v0-0-2"]], "Changes": [[135, "changes"], [135, "id1"]], "Contributors": [[135, "contributors"], [135, "id2"]], "v0.0.1": [[135, "v0-0-1"]], "Versioning": [[136, "versioning"]], "Alpha releases": [[136, "alpha-releases"]], "Beta releases": [[136, "beta-releases"]]}, "indexentries": {"module": [[0, "module-sdr"]], "sdr": [[0, "module-sdr"]]}, "docurls": ["api/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.DDS/", "api/sdr.DDS.__init__/", "api/sdr.DDS.nco/", "api/sdr.DDS.process/", "api/sdr.DDS.reset/", "api/sdr.DDS.step/", "api/sdr.FIR/", "api/sdr.FIR.__init__/", "api/sdr.FIR.delay/", "api/sdr.FIR.filter/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.frequency_response_log/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.reset/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.resample/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__init__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.filter/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.filter/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.process/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.demodulate/", "api/sdr.PSK.modulate/", "api/sdr.PSK.offset/", "api/sdr.PSK.order/", "api/sdr.PSK.symbol_labels/", "api/sdr.PSK.symbol_map/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.energy/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.plot.constellation/", "api/sdr.plot.filter/", "api/sdr.plot.frequency_response/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.raised_cosine/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.unpack/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})