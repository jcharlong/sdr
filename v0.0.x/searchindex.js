Search.setIndex({"titles": ["Conversions", "Data manipulation", "Digital signal processing", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.DDS", "sdr.DDS.__init__", "sdr.DDS.nco", "sdr.DDS.process", "sdr.DDS.reset", "sdr.DDS.step", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__init__", "sdr.FIR.delay", "sdr.FIR.filter", "sdr.FIR.frequency_response", "sdr.FIR.frequency_response_log", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.reset", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FIRInterpolator", "sdr.FIRInterpolator.__init__", "sdr.FIRInterpolator.filter", "sdr.FIRInterpolator.polyphase_taps", "sdr.FIRInterpolator.rate", "sdr.FIRInterpolator.reset", "sdr.FIRInterpolator.streaming", "sdr.FIRInterpolator.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.resample", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__init__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.filter", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.filter", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.process", "sdr.NCO.reset", "sdr.NCO.step", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.ber", "sdr.PSK.bps", "sdr.PSK.demodulate", "sdr.PSK.modulate", "sdr.PSK.order", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.Q", "sdr.Qinv", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.barker", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.db", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.evm", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.hexdump", "sdr.iq_imbalance", "sdr.linear", "sdr.mix", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.filter", "sdr.plot.frequency_response", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.ser", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.raised_cosine", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.to_complex_bb", "sdr.to_real_pb", "sdr.unpack", "sdr.zadoff_chu", "Sequences", "Simulation", "Synchronization", "Documentation", "Installation", "Linter", "Unit Tests", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185], "db": [0, 3, 8, 19, 21, 31, 33, 34, 35, 37, 100, 106, 111, 112, 120, 124, 125, 127, 128, 129, 131, 132, 135, 136, 139, 140, 143, 144, 152, 163, 164, 179, 181, 182], "x": [0, 1, 2, 4, 5, 6, 7, 8, 25, 28, 31, 33, 38, 41, 50, 52, 58, 61, 65, 70, 81, 86, 90, 95, 98, 102, 103, 108, 109, 110, 111, 114, 117, 119, 120, 121, 122, 123, 126, 129, 130, 135, 136, 137, 138, 139, 141, 142, 144, 145, 146, 147, 149, 150, 151, 153, 155, 156, 160, 162, 167, 170, 173, 179, 180, 181, 185], "arraylik": [0, 1, 2, 3, 4, 5, 6, 7, 25, 28, 31, 33, 38, 39, 41, 50, 51, 52, 58, 61, 62, 65, 66, 67, 70, 81, 86, 90, 95, 98, 99, 100, 102, 103, 106, 108, 109, 110, 111, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 160, 162, 163, 164, 165, 166, 167, 170], "ndarrai": [0, 1, 2, 3, 5, 7, 25, 28, 30, 31, 36, 38, 41, 42, 43, 44, 47, 49, 50, 52, 53, 57, 58, 61, 64, 65, 68, 69, 70, 71, 72, 74, 76, 78, 80, 81, 86, 90, 95, 97, 98, 100, 102, 103, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170], "convert": [0, 2, 120, 124, 125, 127, 128, 134, 136, 163, 164, 165, 166], "linear": [0, 98, 111, 120, 136, 149, 153], "unit": [0, 25, 38, 47, 65, 78, 81, 90, 92, 93, 94, 99, 110, 111, 112, 120, 121, 122, 126, 136, 141, 142, 154, 159, 160, 161, 173, 177, 178, 180], "ebn0_to_esn0": [0, 106, 124, 181, 183, 184], "ebn0": [0, 6, 98, 100, 112, 124, 125, 143, 181], "bp": [0, 98, 101, 124, 125, 127, 163, 181], "int": [0, 1, 5, 25, 30, 31, 33, 34, 37, 38, 40, 42, 43, 44, 45, 47, 50, 51, 54, 58, 60, 65, 71, 72, 74, 75, 78, 90, 97, 98, 99, 101, 104, 111, 113, 116, 121, 122, 124, 125, 127, 128, 132, 133, 134, 138, 145, 146, 147, 148, 149, 150, 151, 153, 154, 159, 161, 163, 164, 167, 168, 169, 181], "ebn0_to_snr": [0, 125, 183, 184], "esn0_to_ebn0": [0, 100, 127, 183, 184], "esn0": [0, 6, 98, 106, 127, 128, 152, 181], "esn0_to_snr": [0, 128, 181, 183, 184], "sp": [0, 5, 125, 128, 132, 159, 161, 163, 164, 165, 166, 179, 181, 182], "1": [0, 6, 7, 8, 15, 18, 22, 24, 25, 26, 31, 42, 43, 50, 53, 57, 65, 66, 71, 72, 81, 84, 85, 90, 92, 98, 99, 100, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 176, 177, 178, 179, 180, 181, 182, 185], "snr_to_ebn0": [0, 100, 112, 163, 183, 184], "snr": [0, 3, 31, 33, 34, 35, 36, 37, 111, 112, 163, 164, 165, 166, 170, 181, 184], "snr_to_esn0": [0, 106, 164, 183, 184], "hexdump": [1, 31, 134, 183, 184], "byte": [1, 134], "width": [1, 134], "16": [1, 100, 106, 107, 124, 125, 127, 134, 143, 152, 163, 164, 179, 184], "str": [1, 134, 149, 153], "return": [1, 5, 8, 16, 18, 21, 22, 28, 30, 31, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 47, 52, 61, 65, 70, 71, 72, 74, 78, 86, 95, 97, 100, 102, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 177, 178, 179, 181], "specifi": [1, 31, 34, 35, 37, 111, 112, 123, 134, 177, 178], "pack": [1, 31, 33, 134, 138, 183, 184], "bpe": [1, 138, 167], "binari": [1, 3, 5, 99, 107, 113, 114, 115, 116, 117, 118, 123, 138, 155, 167, 170, 181, 184], "arrai": [1, 31, 53, 57, 99, 107, 113, 114, 116, 117, 121, 122, 123, 133, 138, 156, 167, 178], "an": [1, 2, 3, 38, 44, 65, 66, 67, 74, 99, 100, 106, 112, 138, 143, 148, 152, 167, 173, 174, 183], "multipl": [1, 138, 167, 181], "bit": [1, 4, 6, 31, 33, 36, 98, 99, 100, 101, 107, 112, 114, 115, 117, 118, 124, 125, 127, 134, 138, 143, 163, 167, 184], "per": [1, 28, 95, 98, 99, 101, 111, 112, 124, 125, 127, 128, 130, 132, 134, 138, 144, 159, 161, 162, 163, 164, 167, 179, 182], "element": [1, 134, 138, 167], "unpack": [1, 31, 33, 134, 167, 181, 183, 184], "class": [2, 4, 8, 25, 31, 33, 34, 35, 36, 37, 38, 50, 58, 65, 81, 90, 98, 171, 177, 178, 181, 183], "fir": [2, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 145, 146, 147, 148, 150, 151, 154, 158, 179, 183, 184], "implement": [2, 5, 25, 38, 50, 58, 65, 81, 87, 90, 98, 171, 176], "finit": [2, 38, 50, 184], "impuls": [2, 6, 38, 44, 50, 65, 74, 132, 145, 148, 156, 182, 184], "respons": [2, 6, 38, 42, 43, 44, 47, 50, 65, 71, 72, 74, 78, 132, 145, 146, 147, 148, 151, 154, 182, 184], "firinterpol": [2, 50, 51, 52, 53, 54, 55, 56, 57, 179, 181, 183, 184], "polyphas": [2, 50, 51, 53, 57], "interpol": [2, 50, 51, 52, 54, 184], "iir": [2, 6, 8, 17, 43, 44, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 87, 145, 146, 147, 148, 150, 151, 154, 158, 177, 180, 183, 184], "infinit": [2, 65, 184], "farrowresampl": [2, 58, 59, 60, 61, 62, 63, 64, 176, 183, 184], "cubic": [2, 58], "farrow": [2, 58, 59, 60, 61, 62, 63, 64, 184], "arbitrari": [2, 58, 59, 60, 61, 62, 63, 64, 184], "mix": [2, 137, 183, 184], "freq": [2, 3, 130, 137, 140, 170, 176, 180], "float": [2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 33, 34, 35, 37, 42, 43, 58, 61, 65, 66, 71, 72, 73, 81, 82, 83, 84, 85, 88, 90, 91, 92, 93, 94, 98, 99, 105, 110, 111, 112, 114, 117, 119, 126, 129, 130, 132, 135, 137, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 153, 155, 156, 159, 160, 161, 162, 170], "0": [2, 5, 6, 7, 15, 25, 26, 31, 38, 42, 43, 50, 53, 57, 65, 66, 71, 72, 84, 90, 92, 98, 99, 102, 103, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 128, 129, 130, 132, 133, 135, 136, 137, 138, 140, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 176, 177, 178, 179, 180, 181, 182, 185], "time": [2, 4, 8, 15, 16, 18, 19, 20, 21, 22, 38, 65, 81, 84, 98, 110, 111, 119, 123, 126, 128, 130, 132, 135, 137, 139, 141, 142, 145, 149, 153, 156, 159, 160, 161, 162, 164, 165, 166, 170, 176, 177, 178, 182, 183], "domain": [2, 4, 110, 111, 119, 126, 130, 135, 137, 139, 141, 142, 145, 149, 153, 156, 160, 162, 165, 166, 170, 183], "n": [2, 4, 5, 6, 7, 8, 25, 28, 30, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 47, 50, 52, 58, 61, 65, 70, 71, 72, 74, 75, 78, 81, 86, 90, 95, 97, 108, 109, 110, 111, 112, 113, 116, 119, 123, 124, 125, 126, 127, 128, 129, 130, 133, 135, 137, 139, 141, 142, 145, 146, 147, 148, 149, 150, 151, 153, 154, 156, 160, 162, 163, 164, 165, 166, 168, 169, 170, 180, 182, 183], "complex": [2, 4, 6, 25, 28, 30, 98, 99, 102, 103, 107, 111, 112, 129, 135, 137, 144, 155, 156, 165, 166, 170, 176, 177, 178, 181, 184], "exponenti": [2, 25, 28, 30, 137, 165, 166, 176, 177, 178], "to_complex_bb": [2, 165, 183, 184], "x_r": [2, 165, 166], "real": [2, 108, 109, 111, 156, 165, 166, 176, 177, 178, 180, 184], "passband": [2, 132, 165, 166, 179, 184], "center": [2, 165, 166], "f_": [2, 8, 15, 23, 42, 43, 52, 71, 72, 125, 128, 130, 132, 137, 145, 146, 147, 149, 150, 151, 153, 156, 162, 163, 164, 165, 166, 176, 177, 178, 180, 182], "": [2, 6, 8, 16, 18, 19, 20, 22, 23, 33, 34, 35, 36, 37, 38, 42, 43, 47, 65, 71, 72, 78, 98, 102, 103, 111, 112, 125, 128, 129, 130, 135, 144, 145, 146, 147, 149, 150, 151, 153, 154, 156, 157, 162, 163, 164, 165, 166, 175, 176, 179, 181, 183], "r": [2, 50, 51, 52, 53, 54, 57, 58, 61, 112, 124, 125, 127, 129, 132, 137, 159, 161, 163, 165, 166, 172, 173, 174, 175, 178, 179, 180, 182], "4": [2, 16, 18, 31, 43, 50, 53, 57, 72, 100, 105, 106, 107, 111, 112, 113, 115, 116, 118, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 140, 143, 144, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 176, 178, 179, 181], "sampl": [2, 8, 15, 23, 25, 26, 28, 30, 38, 40, 42, 43, 44, 47, 50, 52, 58, 62, 71, 72, 74, 78, 81, 84, 88, 90, 92, 93, 95, 97, 111, 125, 128, 130, 132, 137, 145, 146, 147, 148, 149, 150, 151, 153, 154, 156, 159, 161, 162, 163, 164, 165, 166, 170, 176, 179, 180, 182], "rate": [2, 4, 6, 8, 15, 23, 31, 32, 33, 35, 36, 42, 43, 50, 51, 52, 54, 58, 61, 71, 72, 98, 100, 106, 124, 125, 127, 130, 137, 143, 145, 146, 147, 149, 150, 151, 152, 153, 156, 162, 163, 165, 166, 170, 184], "baseband": [2, 8, 137, 165, 166, 179, 180, 184], "x_c": [2, 165, 166], "c": [2, 8, 16, 18, 19, 20, 21, 22, 33, 34, 35, 36, 37, 81, 98, 107, 112, 115, 118, 131, 140, 165, 166, 180], "2": [2, 5, 8, 16, 18, 21, 31, 42, 43, 50, 53, 57, 71, 72, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 173, 175, 176, 177, 178, 179, 180, 181, 182], "to_real_pb": [2, 166, 179, 183, 184], "2f_": [2, 166], "awgn_capac": [3, 112, 183, 184], "calcul": [3, 4, 112, 115, 118, 129, 131, 140], "addit": [3, 111, 112, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 170], "white": [3, 111, 112, 170], "gaussian": [3, 5, 111, 112, 132, 170, 183, 184], "nois": [3, 8, 9, 10, 15, 21, 31, 33, 34, 35, 36, 37, 81, 84, 88, 100, 106, 111, 112, 124, 125, 127, 128, 143, 152, 163, 164, 170, 180], "awgn": [3, 100, 106, 111, 112, 129, 143, 144, 152, 165, 166, 170, 181, 183, 184], "bec_capac": [3, 115, 183, 184], "p": [3, 7, 108, 109, 114, 115, 117, 118, 123, 170], "erasur": [3, 114, 115, 123, 170], "bec": [3, 114, 115, 123, 170, 183, 184], "bsc_capac": [3, 118, 183, 184], "symmetr": [3, 117, 118, 123, 165, 166, 170], "bsc": [3, 117, 118, 123, 170, 183, 184], "fspl": [3, 131, 183], "d": [3, 131, 140, 172, 173, 183], "f": [3, 16, 18, 38, 42, 43, 65, 71, 72, 111, 130, 131, 132, 137, 140, 162, 168, 176, 177, 178, 179, 180, 181, 182], "free": [3, 131], "space": [3, 43, 72, 131], "parabolic_antenna": [3, 140, 183, 184], "tupl": [3, 31, 33, 36, 38, 42, 43, 65, 71, 72, 140, 144, 155], "gain": [3, 8, 11, 12, 13, 14, 15, 25, 26, 65, 66, 73, 81, 82, 83, 84, 90, 91, 92, 132, 140, 180], "g": [3, 36, 140, 173], "beamwidth": [3, 140], "theta": [3, 6, 26, 90, 92, 94, 140, 151], "parabol": [3, 140], "reflector": [3, 140], "signal": [4, 6, 8, 16, 18, 21, 22, 25, 28, 31, 33, 34, 35, 36, 37, 38, 41, 50, 52, 58, 61, 65, 70, 81, 86, 90, 95, 97, 110, 111, 112, 119, 120, 124, 125, 126, 127, 128, 130, 131, 132, 135, 136, 137, 139, 140, 141, 142, 149, 153, 156, 160, 162, 163, 164, 165, 166, 177, 178, 180, 182, 183, 184], "average_pow": [4, 110, 139, 183, 184], "averag": [4, 31, 110, 111, 112, 129, 139, 149], "papr": [4, 139, 179, 183, 184], "peak": [4, 119, 129, 139, 141, 142], "ratio": [4, 21, 31, 33, 34, 35, 36, 37, 100, 106, 111, 112, 124, 125, 127, 128, 139, 143, 152, 163, 164], "peak_pow": [4, 139, 141, 183, 184], "crest_factor": [4, 119, 139, 183, 184], "crest": [4, 119], "factor": [4, 8, 15, 24, 81, 84, 85, 119, 180], "peak_voltag": [4, 119, 142, 183, 184], "rms_voltag": [4, 119, 160, 183, 184], "root": [4, 5, 129, 156, 160, 161, 168, 169, 177], "mean": [4, 129, 149, 153, 160, 182], "squar": [4, 5, 129, 131, 140, 156, 160, 161, 177], "rm": [4, 119, 129, 160], "errorr": [4, 31, 32, 33, 34, 35, 36, 37, 181, 183, 184], "A": [4, 8, 16, 18, 19, 20, 21, 22, 24, 31, 38, 81, 116, 133, 134, 135, 140, 159, 161, 171, 180], "error": [4, 6, 8, 14, 15, 21, 31, 32, 33, 35, 36, 37, 81, 84, 98, 100, 106, 118, 129, 143, 152, 180, 184], "ber": [4, 6, 31, 98, 100, 143, 181, 183, 184], "symbol": [4, 6, 31, 33, 36, 98, 99, 100, 101, 102, 103, 106, 107, 111, 124, 125, 127, 128, 129, 130, 132, 144, 152, 155, 159, 161, 163, 164, 179, 182, 183, 184], "ser": [4, 6, 31, 98, 106, 152, 181, 183, 184], "evm": [4, 129, 183, 184], "x_hat": [4, 6, 31, 33, 98, 102, 129, 144, 181], "ref": [4, 129, 132], "vector": [4, 31, 62, 129, 149, 153, 184], "magnitud": [4, 113, 129, 168, 184], "hat": [4, 6, 33, 98, 102, 129, 144, 155], "k": [4, 5, 6, 33, 98, 99, 101, 102, 103, 104, 121, 122, 124, 125, 127, 129, 144, 155, 163, 179, 182], "psk": [5, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 129, 130, 135, 143, 144, 152, 155, 162, 179, 183, 184], "phase": [5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 105, 106, 107, 130, 135, 137, 150, 151, 170], "shift": [5, 98, 100, 105, 106, 107, 168, 169, 177, 178], "kei": [5, 98, 100, 105, 106, 107], "demodul": [5, 98, 102, 181], "time_bandwidth": [5, 132], "span": [5, 132, 159, 161, 179, 182], "raised_cosin": [5, 159, 182, 183, 184], "alpha": [5, 132, 157, 159, 161, 179, 182], "rais": [5, 156, 159, 161, 177], "cosin": [5, 156, 159, 161, 177], "rc": [5, 159], "root_raised_cosin": [5, 145, 146, 147, 148, 150, 151, 154, 156, 158, 161, 177, 179, 181, 182, 183, 184], "srrc": [5, 156, 161, 179], "binary_cod": [5, 116, 183, 184], "gener": [5, 111, 116, 133, 172, 181], "code": [5, 99, 107, 113, 116, 124, 125, 127, 133, 144, 155, 163, 169, 173, 181, 184], "length": [5, 44, 47, 99, 113, 116, 132, 133, 145, 148, 149, 153, 154, 159, 161, 165, 168, 169, 174, 176, 179, 182], "gray_cod": [5, 133, 183, 184], "grai": [5, 99, 107, 133, 144, 155, 181], "diff_decod": [5, 121, 122, 183, 184], "y": [5, 25, 28, 30, 38, 41, 50, 52, 61, 65, 70, 81, 86, 90, 95, 97, 111, 114, 117, 121, 122, 123, 130, 135, 137, 144, 153, 155, 156, 162, 180, 181], "y_prev": [5, 121, 122], "differenti": [5, 100, 106, 121, 122, 156, 184], "decod": [5, 121], "input": [5, 8, 16, 18, 21, 22, 25, 28, 38, 39, 41, 44, 47, 50, 51, 52, 58, 59, 61, 62, 65, 66, 67, 70, 74, 78, 81, 86, 90, 95, 98, 100, 106, 108, 111, 112, 114, 115, 117, 118, 120, 121, 122, 123, 136, 138, 148, 154, 167, 170, 177, 178, 180], "data": [5, 121, 122, 134, 138, 167, 183], "diff_encod": [5, 100, 106, 121, 122, 183, 184], "use_styl": [6, 157], "appli": [6, 50, 130, 135, 144, 149, 153, 155, 157, 162, 170], "default": [6, 44, 47, 99, 107, 144, 153, 155, 157, 181], "matplotlib": [6, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 176, 177, 178, 179, 180, 181, 182, 183], "rcparam": [6, 157, 176, 180], "time_domain": [6, 111, 137, 156, 165, 166, 179, 181, 182, 183, 184], "sample_r": [6, 8, 15, 23, 42, 43, 71, 72, 130, 137, 145, 146, 147, 149, 150, 151, 153, 156, 165, 166, 176, 180, 182], "periodogram": [6, 149, 165, 166, 179, 183, 184], "power": [6, 98, 110, 111, 112, 120, 129, 136, 139, 140, 141, 149, 182, 183], "densiti": [6, 21, 149, 179, 182], "p_": [6, 100, 106, 110, 111, 120, 123, 129, 136, 139, 141, 143, 149, 152], "xx": [6, 149], "us": [6, 25, 27, 39, 51, 58, 59, 66, 67, 81, 87, 98, 102, 112, 115, 118, 129, 134, 138, 144, 145, 148, 149, 153, 154, 167, 172, 173, 174, 175, 177, 178, 181, 182, 183, 185], "welch": [6, 149, 153], "method": [6, 149, 153, 174, 177, 178], "spectrogram": [6, 153, 183, 184], "kwarg": [6, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158], "function": [6, 7, 8, 17, 38, 65, 66, 81, 108, 109, 112, 132, 143, 149, 152, 153, 174, 177, 178, 180, 182, 183, 184], "e_b": [6, 33, 34, 35, 36, 37, 98, 100, 112, 124, 125, 127, 143, 163, 183], "n_0": [6, 21, 33, 34, 35, 36, 37, 98, 100, 106, 111, 112, 124, 125, 127, 128, 129, 143, 144, 152, 163, 164, 181, 183], "constel": [6, 105, 111, 129, 130, 135, 144, 162, 168, 183, 184], "heatmap": [6, 144, 181], "bool": [6, 38, 39, 48, 50, 51, 56, 58, 59, 63, 65, 66, 67, 79, 100, 106, 144, 151, 155], "fals": [6, 38, 39, 50, 51, 58, 59, 65, 66, 67, 100, 106, 114, 117, 123, 144, 149, 153, 178, 182], "e_": [6, 33, 34, 35, 36, 37, 98, 106, 111, 112, 124, 127, 128, 129, 144, 152, 164, 181, 183], "symbol_map": [6, 98, 105, 107, 129, 155, 156, 181, 183, 184], "map": [6, 98, 107, 129, 155, 183, 184], "b": [6, 65, 67, 112, 132, 134, 145, 146, 147, 148, 150, 151, 154, 158, 172, 182], "h": [6, 38, 39, 42, 43, 44, 50, 65, 71, 72, 74, 81, 132, 145, 146, 148, 179, 180, 182], "omega": [6, 26, 90, 92, 93, 145, 146, 147, 150, 151, 180], "step": [6, 25, 28, 30, 38, 47, 65, 78, 90, 95, 97, 145, 154], "zero": [6, 50, 62, 65, 66, 80, 81, 138, 145, 146, 147, 148, 150, 151, 154, 156, 158, 165, 177, 179, 180, 182], "pole": [6, 65, 66, 76, 145, 146, 147, 148, 150, 151, 154, 158, 177], "frequency_respons": [6, 38, 42, 43, 65, 71, 72, 146, 177, 178, 180, 182, 183, 184], "group_delai": [6, 147, 177, 178, 183, 184], "group": [6, 147], "delai": [6, 25, 38, 40, 58, 81, 90, 121, 122, 147, 150, 180], "tau_g": [6, 147], "impulse_respons": [6, 38, 44, 65, 74, 132, 148, 159, 161, 177, 178, 182, 183, 184], "phase_delai": [6, 150, 183, 184], "tau_": [6, 150], "phi": [6, 98, 99, 105, 130, 135, 137, 150], "phase_respons": [6, 151, 183, 184], "step_respons": [6, 38, 47, 65, 78, 154, 177, 178, 180, 183, 184], "zeros_pol": [6, 158, 178, 183, 184], "q": [7, 108, 109, 168, 183, 184], "comput": [7, 98, 100, 106, 108, 109, 111, 131, 177, 178, 180, 182], "complementari": [7, 108, 109], "cumul": [7, 108, 109], "distribut": [7, 108, 109], "standard": [7, 108, 109], "normal": [7, 8, 10, 15, 81, 84, 88, 108, 109, 129, 132, 153, 180, 182], "mathcal": [7, 108, 109, 111, 123], "qinv": [7, 108, 109, 183, 184], "invers": [7, 109], "closedlooppl": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 171, 180, 183, 184], "defin": [8, 38, 65, 111, 123, 132, 168, 171, 178, 183], "perform": [8, 100, 106, 168, 171, 177, 178, 181, 183], "close": [8, 15, 17, 171, 184], "loop": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 171, 184], "pll": [8, 9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 171, 184], "thi": [8, 28, 33, 34, 35, 37, 38, 50, 65, 95, 98, 107, 111, 112, 129, 145, 146, 147, 148, 149, 150, 151, 153, 154, 158, 172, 173, 174, 175, 176, 178, 180, 181, 182], "i": [8, 15, 24, 31, 36, 38, 44, 47, 48, 50, 53, 56, 57, 58, 63, 65, 74, 78, 79, 81, 84, 85, 88, 98, 99, 108, 109, 111, 112, 115, 118, 120, 123, 124, 125, 127, 128, 130, 131, 132, 134, 135, 136, 138, 140, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185], "meant": 8, "analysi": [8, 15, 174, 180, 184], "onli": [8, 38, 46, 50, 55, 58, 62, 65, 77, 99, 107, 111, 175, 180, 181], "block": [8, 25, 50, 81, 90, 121, 122], "diagram": [8, 25, 50, 81, 90, 121, 122], "bb": [8, 179, 180], "ped": [8, 14, 15, 84, 180], "lf": [8, 180], "lo": [8, 180], "e": [8, 25, 36, 110, 114, 115, 126, 168, 173, 177, 178, 180, 181], "j": [8, 25, 50, 53, 57, 65, 98, 111, 123, 135, 137, 168, 177, 178, 180], "nco": [8, 11, 15, 25, 26, 27, 84, 90, 91, 92, 93, 94, 95, 96, 97, 171, 180, 183, 184], "local": [8, 172, 174, 180], "oscil": [8, 25, 27, 90, 92, 171, 180, 184], "detector": [8, 14, 15, 84, 180], "filter": [8, 12, 13, 15, 17, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 132, 145, 146, 147, 148, 150, 151, 154, 156, 158, 159, 161, 171, 179, 181, 182, 183, 184], "numer": [8, 25, 27, 90, 92, 171, 178, 180, 184], "control": [8, 25, 27, 90, 92, 171, 180, 184], "The": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 57, 58, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 177, 178, 180, 181, 182, 183, 185], "transfer": [8, 17, 38, 65, 66, 81, 132, 177, 178, 180], "2nd": [8, 81, 84, 171, 180, 184], "order": [8, 31, 36, 38, 45, 58, 60, 65, 75, 81, 84, 98, 99, 104, 111, 124, 125, 127, 129, 130, 132, 144, 159, 161, 162, 163, 171, 179, 180, 181, 184], "proport": [8, 12, 81, 82, 84, 131, 140, 171, 184], "plu": [8, 81, 84, 171, 184], "integr": [8, 13, 81, 83, 84, 171, 175, 178, 184], "h_": [8, 50, 53, 57, 180], "z": [8, 25, 38, 65, 81, 90, 121, 122, 168, 177, 178, 180], "k_1": [8, 12, 81, 82, 180], "k_2": [8, 13, 81, 83, 180], "frac": [8, 16, 18, 21, 22, 65, 81, 98, 110, 111, 112, 119, 124, 125, 127, 128, 129, 131, 132, 135, 136, 137, 139, 140, 160, 163, 164, 168, 180], "k_0": [8, 11, 15, 26, 84, 90, 91, 92, 180], "k_p": [8, 14, 15, 84, 180], "refer": [8, 16, 18, 19, 20, 21, 22, 31, 58, 81, 100, 106, 111, 119, 129, 130, 132, 139, 159, 161, 162, 168, 178, 182], "michael": [8, 16, 18, 19, 20, 21, 22, 81, 159, 161], "rice": [8, 16, 18, 19, 20, 21, 22, 81, 159, 161], "digit": [8, 16, 18, 19, 20, 21, 22, 25, 26, 81, 100, 106, 159, 161, 171, 180, 183, 184], "commun": [8, 16, 18, 19, 20, 21, 22, 81, 100, 106, 159, 161, 180, 183], "discret": [8, 16, 18, 19, 20, 21, 22, 81, 111, 123, 128, 159, 161, 164, 170, 176, 180], "approach": [8, 16, 18, 19, 20, 21, 22, 81, 112, 115, 118, 159, 161, 180], "appendix": [8, 81, 159, 161], "lock": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97], "exampl": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 143, 144, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 180], "see": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 48, 49, 52, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 105, 107, 132, 159, 161, 183], "noise_bandwidth": [8, 15, 81, 84, 88], "damping_factor": [8, 15, 81, 84, 85], "creat": [8, 15, 25, 26, 31, 32, 38, 39, 50, 51, 58, 59, 65, 66, 67, 81, 84, 90, 92, 98, 99, 105, 111, 113, 129, 130, 137, 156, 162, 165, 166, 168, 176, 180, 182], "object": [8, 15, 31, 32, 98, 99, 178, 180], "frequency_lock_tim": [8, 16], "freq_offset": [8, 16, 18], "frequenc": [8, 16, 18, 20, 38, 42, 43, 65, 71, 72, 81, 130, 131, 137, 140, 145, 146, 147, 149, 150, 151, 153, 165, 166, 170, 182, 184], "lock_tim": [8, 18, 180], "phase_error_vari": [8, 21], "cn0": [8, 21], "varianc": [8, 21, 111], "steadi": [8, 21], "state": [8, 21, 38, 46, 48, 50, 55, 56, 58, 62, 63, 65, 77, 79], "phase_lock_tim": [8, 22], "bn": [8, 9], "bandwidth": [8, 9, 10, 15, 19, 81, 84, 88, 112, 132, 159, 161, 180, 182], "b_n": [8, 9, 10, 15, 16, 18, 21, 22, 81, 84, 88], "hz": [8, 9, 15, 16, 18, 21, 42, 43, 71, 72, 81, 84, 88, 112, 120, 130, 131, 132, 136, 137, 140, 165, 166, 176], "bnt": [8, 10, 180], "t": [8, 10, 15, 81, 84, 88, 132, 134, 174, 176], "repres": [8, 17, 114, 115], "k0": [8, 11, 15, 25, 26, 84, 90, 91, 92], "k1": [8, 12, 81, 82, 180], "k2": [8, 13, 81, 83, 180], "kp": [8, 14, 15, 84], "omega_3db": [8, 19], "3": [8, 16, 18, 19, 22, 31, 50, 53, 57, 100, 105, 106, 107, 111, 112, 113, 114, 116, 117, 120, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 144, 145, 146, 147, 148, 150, 151, 154, 156, 158, 162, 163, 165, 166, 167, 168, 178, 180, 182, 183], "omega_": [8, 19], "textrm": [8, 19], "radian": [8, 19, 20, 21, 25, 26, 180], "omega_n": [8, 20, 180], "natur": [8, 20], "zeta": [8, 15, 24, 81, 84, 85], "damp": [8, 15, 24, 81, 84, 85, 180], "properti": [9, 10, 11, 12, 13, 14, 17, 19, 20, 23, 24, 27, 40, 45, 48, 49, 53, 54, 56, 57, 60, 63, 64, 68, 69, 73, 75, 76, 79, 80, 82, 83, 85, 87, 88, 91, 93, 94, 101, 104, 105, 107, 174], "paramet": [15, 16, 18, 21, 26, 28, 30, 33, 34, 35, 37, 39, 41, 42, 43, 44, 47, 51, 52, 59, 61, 62, 66, 67, 70, 71, 72, 74, 78, 84, 86, 92, 95, 97, 99, 100, 102, 103, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168], "where": [15, 81, 84, 88, 99, 111, 112, 123, 124, 125, 127, 132, 163, 168, 177, 178, 183], "period": [15, 81, 84, 88, 168], "second": [15, 16, 18, 22, 31, 81, 84, 88, 132], "critic": [15, 24, 81, 84, 85, 180], "underdamp": [15, 24, 81, 84, 85], "overdamp": [15, 24, 81, 84, 85], "ted": [15, 84], "t_": [16, 18, 22, 61, 132, 182], "fl": [16, 18], "delta": [16, 18, 38, 44, 65, 74, 148, 177, 178], "offset": [16, 18, 25, 26, 90, 92, 94, 98, 99, 105, 130, 137, 162, 170, 180], "take": [16, 18, 22], "onto": [16, 18, 22], "equat": [16, 18, 19, 20, 21, 22, 65, 98], "39": 16, "pl": [18, 22], "38": 18, "34": 19, "33": 20, "sigma_": 21, "theta_": 21, "carrier": [21, 98], "43": 21, "40": 22, "less": 24, "than": [24, 99, 107, 135, 144, 155], "greater": 24, "dd": [25, 26, 27, 28, 29, 30, 90, 171, 180, 183, 184], "direct": [25, 26, 171, 180, 184], "synthes": [25, 26, 171, 180, 184], "note": [25, 38, 50, 53, 57, 65, 81, 90, 98, 111, 112, 115, 118, 121, 122, 132, 135, 140, 168], "increment": [25, 26, 28, 90, 92, 93, 95, 180], "v": [25, 90, 120, 136, 172], "output": [25, 28, 30, 38, 41, 44, 47, 50, 52, 65, 66, 67, 74, 78, 81, 86, 90, 95, 97, 111, 112, 113, 114, 115, 117, 118, 122, 123, 129, 136, 138, 148, 154, 167, 172, 176, 177, 178, 180], "constant": [25, 26, 81, 90, 92, 93, 149, 153, 178, 180], "accumul": [25, 26, 31, 90, 92, 93, 180], "absolut": [25, 26, 90, 92, 94, 112], "adder": [25, 81, 90, 121, 122, 180], "process": [25, 28, 90, 95, 178, 180, 183], "variabl": [25, 28, 90, 95, 134, 180], "reset": [25, 29, 38, 46, 50, 55, 58, 62, 65, 77, 81, 89, 90, 96], "forward": [25, 30, 90, 97], "vari": [28, 95], "number": [30, 31, 33, 34, 37, 42, 43, 44, 47, 71, 72, 74, 78, 97, 98, 101, 111, 124, 125, 127, 132, 134, 138, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 159, 161, 163, 167], "measur": [31, 33, 110, 111, 119, 120, 126, 129, 136, 139, 141, 142, 160, 180, 183, 184], "new": [31, 32, 58, 59, 98, 99, 162], "In": [31, 39, 41, 48, 51, 52, 53, 56, 57, 59, 63, 66, 67, 79, 100, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 143, 144, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 176, 181], "from": [31, 42, 43, 65, 66, 71, 72, 98, 107, 120, 124, 125, 127, 128, 136, 149, 153, 163, 164, 172, 177, 178, 180, 183], "first": [31, 50, 138, 167, 174, 175], "receiv": [31, 33, 100, 106, 129, 131], "contain": [31, 111, 134], "10": [31, 53, 57, 100, 106, 111, 116, 120, 123, 124, 125, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 143, 144, 145, 146, 147, 148, 150, 151, 152, 154, 156, 158, 159, 161, 162, 163, 164, 176, 177, 178, 179, 180, 181, 182], "add": [31, 33, 36, 111, 130, 162, 170, 181, 185], "out": [31, 53, 57, 105, 107, 108, 109, 113, 114, 116, 117, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 133, 136, 138, 140, 147, 157, 163, 164, 167], "5": [31, 50, 53, 57, 111, 114, 116, 117, 118, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 140, 145, 146, 147, 148, 150, 151, 154, 156, 158, 159, 161, 162, 163, 164, 165, 166, 168, 172, 176, 177, 178, 179, 180, 181, 182, 184], "total": [31, 182], "ar": [31, 33, 34, 35, 37, 39, 43, 50, 51, 53, 57, 59, 66, 67, 72, 98, 99, 112, 114, 115, 117, 118, 138, 144, 145, 146, 147, 149, 150, 151, 153, 155, 157, 165, 166, 172, 173, 174, 176, 178, 180, 182, 183, 185], "count": [31, 34, 129], "error_r": [31, 35, 36, 181], "everi": [31, 176], "can": [31, 33, 34, 35, 37, 81, 111, 129, 132, 138, 149, 153, 173, 177, 178, 181, 183, 185], "obtain": 31, "follow": [31, 135, 144, 153, 155, 157, 180], "6": [31, 50, 53, 57, 107, 116, 120, 123, 124, 125, 129, 131, 133, 134, 136, 140, 144, 145, 146, 147, 148, 150, 151, 154, 155, 156, 158, 165, 166, 168, 175, 177, 178, 180, 181, 184], "tabul": [31, 32], "given": [31, 33, 34, 35, 37, 58, 61, 129, 177, 178], "none": [31, 35, 38, 44, 47, 58, 62, 81, 89, 98, 100, 106, 111, 112, 123, 138, 144, 145, 148, 149, 153, 154, 155, 167, 170, 176, 179, 181], "numpi": [31, 36, 38, 42, 43, 65, 71, 72, 111, 167, 176, 177, 178, 179, 180, 181, 182, 183], "all": [31, 36, 129, 175], "ascend": [31, 36], "correspond": [31, 36], "other": [33, 34, 35, 37, 176, 185], "quantiti": [33, 34, 35, 36, 37], "howev": [33, 34, 35, 37, 81, 115, 118, 176], "user": [33, 34, 35, 37, 177, 178], "caution": [33, 34, 35, 37], "consist": [33, 34, 35, 36, 37], "instanc": [33, 34, 35, 37, 174], "transmit": [33, 129], "section": [33, 34, 35, 36, 37, 178, 180], "specif": [36, 175, 182], "whatev": 36, "wa": [36, 112], "provid": [36, 98, 100, 106, 183], "wrapper": [38, 65], "scipi": [38, 41, 52, 65, 149, 153, 182, 183], "convolv": [38, 41, 52, 156], "It": [38, 65, 81, 111], "support": [38, 65], "one": [38, 65, 99, 107, 132, 134, 145, 146, 147, 149, 150, 151, 153, 165, 177, 178, 179, 182], "stream": [38, 39, 41, 46, 48, 50, 51, 52, 55, 56, 58, 59, 62, 63, 65, 66, 67, 77, 79, 98], "its": [38, 65, 66, 111, 177, 178, 182], "feedforward": [38, 39, 49, 50, 51, 53, 57, 65, 67, 69, 145, 146, 147, 148, 150, 151, 154, 158, 177, 178], "coeffici": [38, 39, 50, 51, 65, 67, 145, 146, 147, 148, 150, 151, 154, 158, 177, 178], "h_i": [38, 39, 49, 50, 51, 53, 57, 177], "sum_": [38, 65, 110, 111, 112, 126, 129, 160], "sum": [38, 65, 182], "limits_": [38, 65], "frequency_response_log": [38, 43, 65, 72], "logarithm": [38, 43, 65, 72, 145, 146, 147, 149, 150, 151, 177, 178], "axi": [38, 43, 65, 72, 144, 145, 146, 147, 149, 150, 151, 153, 155, 156, 176], "when": [38, 44, 47, 65, 74, 78, 111, 112, 114, 115, 117, 118, 128, 145, 146, 147, 148, 150, 151, 154, 164, 168, 176, 177, 178], "mode": [38, 39, 41, 46, 48, 50, 51, 52, 55, 56, 58, 59, 62, 63, 65, 66, 67, 77, 79, 113, 168], "u": [38, 47, 65, 78, 154, 168, 169, 177, 178], "indic": [38, 39, 48, 50, 51, 56, 58, 59, 63, 65, 66, 67, 79, 98, 99, 100, 106, 135, 151, 156], "whether": [38, 39, 48, 50, 51, 56, 58, 59, 63, 65, 66, 67, 79, 100, 106, 151], "tap": [38, 49, 50, 51, 53, 57, 58, 64, 65, 68, 69, 177, 178], "previou": [39, 51, 59, 62, 66, 67, 121, 122], "preserv": [39, 48, 51, 56, 59, 63, 66, 67, 79], "between": [39, 48, 50, 51, 56, 59, 63, 66, 67, 79, 131, 149, 153, 180], "call": [39, 48, 51, 56, 59, 63, 66, 67, 79], "full": [41, 52, 113], "valid": [41, 52, 168], "same": [41, 52, 156, 177], "non": [41, 52], "convolut": [41, 52], "detail": [41, 52], "alwai": [41, 52], "produc": [41, 50, 52, 132, 182], "1024": [42, 43, 71, 72, 145, 146, 147, 150, 151, 179, 182], "plot": [42, 43, 44, 47, 71, 72, 74, 78, 100, 105, 106, 107, 111, 112, 113, 115, 118, 129, 130, 132, 135, 137, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 165, 166, 168, 176, 177, 178, 180, 181, 182, 183, 184], "decad": [43, 72, 145, 146, 147, 150, 151, 177, 180], "equival": [50, 111, 112, 128, 164, 173, 176], "upsampl": 50, "insert": 50, "each": [50, 129, 134, 149, 153], "prototyp": [50, 53, 57], "instead": [50, 144], "decompos": 50, "parallel": 50, "commut": 50, "prevent": 50, "need": [50, 174, 175], "multipli": 50, "case": 50, "2x": 50, "hold": [50, 138], "top": 50, "bottom": 50, "relat": [50, 53, 57, 112, 132], "polyphase_tap": [50, 53, 57], "befor": [53, 57, 185], "decomposit": [53, 57], "after": [53, 57], "np": [53, 57, 100, 106, 111, 112, 113, 114, 115, 117, 118, 123, 129, 130, 135, 137, 143, 144, 145, 146, 147, 148, 150, 151, 152, 154, 156, 158, 162, 165, 166, 168, 176, 177, 178, 179, 180, 181, 182], "arang": [53, 57, 111, 113, 137, 165, 166, 168, 176, 180], "7": [53, 57, 107, 116, 123, 129, 133, 134, 156, 168], "8": [53, 57, 100, 105, 106, 107, 111, 112, 113, 115, 116, 118, 123, 129, 132, 133, 134, 137, 140, 143, 144, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 157, 158, 159, 161, 165, 166, 168, 173, 177, 178, 179, 180, 182], "9": [53, 57, 116, 123, 129, 133, 134, 159, 161, 179, 181, 182, 184], "resampl": [58, 59, 60, 61, 62, 63, 64, 183, 184], "http": [58, 119, 132, 139, 168, 172, 173], "wirelesspi": 58, "com": [58, 132, 173], "fraction": [58, 62, 132, 176], "structur": 58, "index": [58, 62, 155, 172], "should": [62, 173], "equal": 62, "three": [62, 176, 182], "If": [62, 111, 112, 123, 138, 144, 145, 148, 149, 153, 154, 155, 156, 165, 167, 183], "lfilter": 65, "b_i": [65, 67, 69, 145, 146, 147, 148, 150, 151, 154, 158, 178], "feedback": [65, 67, 68, 145, 146, 147, 148, 150, 151, 154, 158, 178], "a_j": [65, 67, 68, 145, 146, 147, 148, 150, 151, 154, 158, 178], "These": [65, 98, 157, 173, 180], "differ": [65, 99, 107, 156, 168, 182], "a_0": 65, "left": [65, 98, 110, 111, 112, 126, 129, 131, 132, 135, 137, 140, 141, 142, 160, 168], "m": [65, 98, 99, 101, 102, 103, 104, 107, 123, 124, 125, 127, 163, 172, 173, 174, 175, 183], "right": [65, 98, 110, 111, 112, 126, 129, 131, 132, 135, 137, 140, 141, 142, 160, 168], "classmethod": [65, 66], "zerospol": [65, 66, 145, 146, 147, 148, 150, 151, 154, 158, 178], "self": [65, 66], "100": [65, 74, 78, 100, 106, 111, 112, 115, 118, 120, 129, 136, 137, 143, 145, 148, 152, 154, 156, 162, 165, 166, 174, 176, 180], "a_tap": [65, 68, 145, 146, 147, 148, 150, 151, 154, 158, 178, 180], "b_tap": [65, 69, 145, 146, 147, 148, 150, 151, 154, 158, 178, 180], "loopfilt": [81, 82, 83, 84, 85, 86, 87, 88, 89, 171, 180, 183, 184], "ppi": [81, 84, 171], "track": 81, "cannot": 81, "chirp": 81, "ramp": 81, "underli": [81, 87], "modul": [98, 99, 100, 103, 104, 106, 111, 124, 125, 127, 129, 130, 135, 143, 144, 152, 162, 163, 172, 175, 179, 181, 183, 184], "scheme": 98, "encod": [98, 100, 106, 121, 122, 183], "inform": [98, 124, 125, 127, 163], "sinusoid": [98, 111, 165, 166, 178], "taken": 98, "decim": [98, 99, 102, 103, 107, 181], "dot": [98, 107], "mathbb": [98, 107, 112, 168], "exp": [98, 132, 135, 137, 145, 146, 147, 148, 150, 151, 154, 156, 158, 166, 168, 176, 178, 180], "pi": [98, 111, 131, 132, 135, 137, 140, 145, 146, 147, 148, 150, 151, 154, 156, 158, 165, 166, 168, 176, 177, 178, 180], "phase_offset": [98, 99, 105, 111, 129, 130, 135, 144, 155, 162, 179, 181], "valu": [98, 99, 100, 106, 108, 109, 113, 120, 121, 122, 132, 135, 136, 144, 155, 178, 184], "maximum": [98, 102, 144, 155], "likelihood": [98, 102], "estim": [98, 102, 149, 153, 180, 183], "log_2": [98, 101, 112, 124, 125, 127, 163], "degre": [98, 99, 105, 130, 135, 137, 140], "mapsto": [98, 107], "symbol_label": [99, 107, 181], "bin": [99, 107, 129, 144, 155, 181], "ge": 99, "label": [99, 100, 106, 111, 129, 130, 132, 135, 143, 152, 153, 156, 159, 161, 162, 176, 179, 180, 181, 182], "consecut": 99, "adjac": [99, 107, 181, 182], "mai": [99, 107, 129, 144, 153, 155, 157, 178], "more": [99, 107, 184], "npt": 99, "whose": 99, "start": [99, 172], "0j": 99, "go": 99, "counter": 99, "clockwis": 99, "around": 99, "circl": [99, 178], "energi": [100, 106, 112, 124, 125, 126, 127, 128, 143, 152, 159, 161, 163, 164, 183, 184], "psd": [100, 106, 112, 124, 125, 127, 128, 143, 152, 163, 164], "were": [100, 106], "simon": [100, 106], "alouini": [100, 106], "over": [100, 106, 134], "fade": [100, 106], "channel": [100, 106, 112, 114, 115, 117, 118, 123, 143, 152, 183, 184], "chapter": [100, 106], "singl": [100, 106], "john": [100, 106], "proaki": [100, 106], "optimum": [100, 106], "theoret": [100, 106, 143, 152, 181, 184], "curv": [100, 106, 143, 152], "bpsk": [100, 106, 143, 152, 156, 179], "qpsk": [100, 105, 106, 111, 129, 130, 143, 144, 152, 155, 156, 162], "psk8": [100, 106, 143, 152, 181], "psk16": [100, 106, 143, 152, 181], "linspac": [100, 106, 112, 115, 118, 143, 152, 178, 179, 180, 181], "plt": [100, 105, 106, 107, 111, 112, 113, 115, 118, 129, 130, 132, 135, 137, 143, 144, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 161, 162, 165, 166, 168, 176, 177, 178, 179, 180, 181, 182], "figur": [100, 105, 106, 107, 111, 112, 113, 115, 118, 129, 130, 132, 135, 137, 143, 144, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 165, 166, 168, 176, 177, 178, 179, 180, 181, 182], "figsiz": [100, 105, 106, 107, 111, 112, 113, 115, 118, 129, 130, 132, 135, 137, 143, 144, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 165, 166, 168, 176, 177, 178, 179, 180, 181, 182], "titl": [100, 106, 111, 112, 113, 115, 118, 129, 130, 135, 137, 143, 152, 156, 162, 165, 166, 168, 176, 179, 180, 181, 182], "tight_layout": [100, 106, 111, 112, 113, 115, 118, 129, 130, 137, 143, 152, 156, 162, 165, 166, 168, 179, 180, 181, 182], "compar": [100, 106, 182], "de": [100, 106, 184], "true": [100, 106, 112, 114, 115, 117, 118, 123, 144, 151, 155, 157, 179, 181], "45": [105, 111, 129, 130, 135, 137, 144, 155, 162, 179, 181], "se": [106, 152], "00000000e": [107, 178], "00": [107, 178], "00j": 107, "07106781e": 107, "01": [107, 134, 178, 180], "01j": 107, "12323400e": 107, "17": [107, 129, 140], "83697020e": 107, "22464680e": 107, "16j": 107, "annot": [107, 155, 184], "probabl": [108, 109, 114, 115, 117, 118, 123, 170, 183, 184], "exceed": [108, 109], "15865525393145707": [108, 109], "158655": [108, 109], "0000010494310452": [108, 109], "text": [110, 111, 112, 115, 118, 119, 120, 129, 130, 131, 136, 139, 141, 142, 160, 162], "avg": [110, 111, 139], "seed": 111, "which": [111, 112, 130, 135, 140, 144, 155, 162, 176, 180, 182], "ad": [111, 174, 183, 184], "desir": [111, 181], "explicitli": 111, "assum": [111, 123, 138, 167], "known": 111, "pass": [111, 114, 117, 123, 129, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 170, 172, 173, 177, 178], "must": [111, 132, 137, 159, 161, 168], "random": [111, 114, 117, 123, 129, 130, 135, 144, 156, 162, 179, 181], "default_rng": 111, "noisi": 111, "w": [111, 176, 177, 178, 179, 180, 181, 182], "sigma": [111, 112], "For": [111, 145, 146, 147, 148, 150, 151, 154, 158, 177], "sim": 111, "cn": 111, "set": [111, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 157, 158, 174, 175, 178], "sin": [111, 165], "ha": [111, 132, 140, 168, 180, 181, 182], "randint": [111, 114, 117, 123, 129, 130, 135, 144, 156, 162, 179, 181], "1_000": [111, 130, 135, 162, 179], "zorder": [111, 130, 162], "infti": [111, 112], "nand": 111, "capac": [112, 115, 118, 183, 184], "2d": 112, "x_i": [112, 114, 115, 117, 118, 123, 135], "y_i": [112, 114, 115, 117, 118, 123], "monoton": 112, "decreas": 112, "limit": [112, 144, 155, 181], "20": [112, 114, 117, 120, 123, 129, 130, 134, 135, 136, 179, 181, 182], "xlabel": [112, 113, 115, 118, 129, 168, 176, 179, 180, 182], "ylabel": [112, 113, 115, 118, 129, 168, 176, 179, 180, 182], "grid": [112, 115, 118, 157, 176, 179, 180, 182], "At": 112, "occur": 112, "view": [112, 174], "59": 112, "shannon": 112, "semilogi": [112, 143, 152], "both": [112, 144, 155, 156, 176, 180], "barker": [113, 169, 183, 184], "bipolar": [113, 184], "sequenc": [113, 114, 117, 123, 168, 170, 183, 184], "format": [113, 174], "13": [113, 116, 133], "seq": 113, "have": [113, 138, 156, 167], "ideal": [113, 181], "minim": 113, "autocorrel": [113, 168], "sidelob": [113, 168], "corr": [113, 168], "correl": [113, 168], "lag": [113, 168], "size": [113, 123, 176, 180, 181, 182], "ab": [113, 168, 182], "through": [114, 117, 123, 170, 177, 178, 180], "25": [114, 117, 123, 176, 179, 180, 182], "roughli": [114, 117, 176], "eras": 114, "11": [116, 133, 172], "12": [116, 133, 177, 181], "14": [116, 133, 173], "15": [116, 133], "transit": [117, 118, 123, 170], "flip": 117, "h_b": 118, "cf": 119, "v_": [119, 120, 136, 142, 160], "en": [119, 139, 168], "wikipedia": [119, 139, 168], "org": [119, 139, 168], "wiki": [119, 139, 168], "type": [120, 129, 136, 138, 149, 153, 167, 184], "voltag": [120, 136, 142, 160, 183], "decibel": [120, 136], "ani": [120, 136, 175], "x_": [120, 136], "log_": [120, 131, 139], "50": [120, 136, 155, 165, 166, 176, 179], "mhz": [120, 136], "77": [120, 134, 136], "50e6": 120, "76": [120, 134], "98970004336019": 120, "mw": [120, 136], "dbm": [120, 136], "dbv": [120, 136], "020599913279624": 120, "uncod": 122, "dmc": [123, 170, 183, 184], "memoryless": [123, 170], "matrix": [123, 170], "pr": 123, "y_j": 123, "alphabet": 123, "ldot": 123, "qam": [124, 125, 127, 163], "249387366082999": [124, 125], "020599913279625": [124, 164], "sym": [125, 128, 132, 163, 164, 182], "750612633917001": [127, 163], "979400086720376": [127, 128], "system": [128, 164, 174, 175, 180, 183], "norm": 129, "noiseless": 129, "sourc": 129, "max": [129, 141, 142, 174], "_": 129, "sqrt": [129, 132, 160, 168, 179, 180, 182], "instantan": 129, "percentil": [129, 153], "1000": [129, 156, 165, 166, 181], "either": 129, "997456652888417": 129, "934669665030151": 129, "25629121860816": 129, "95th": 129, "95": 129, "4619971695665": 129, "inst_evm": 129, "hist": 129, "histogram": 129, "frequency_offset": [130, 170, 183, 184], "freq_rat": 130, "cycl": [130, 156], "000": 130, "1e": [130, 181], "5e": 130, "deg": [130, 135], "path": [131, 174, 183], "loss": [131, 183], "distanc": 131, "meter": [131, 140], "transmitt": 131, "km": 131, "link": [131, 183, 184], "ghz": [131, 140], "1e3": [131, 137, 165], "1e9": [131, 140], "92": 131, "44778322188337": 131, "so": [131, 132, 183], "doubl": [131, 140], "result": [131, 140, 181], "increas": [131, 140, 178], "2e3": 131, "98": 131, "468383135163": 131, "also": [131, 132, 183], "2e9": 131, "puls": [132, 156, 159, 161, 183, 184], "shape": [132, 156, 159, 161, 183, 184], "product": [132, 182], "side": [132, 145, 146, 147, 149, 150, 151, 153, 177, 178, 179, 182], "thought": [132, 185], "smaller": [132, 182], "wider": 132, "even": [132, 159, 161], "amplitud": [132, 135, 170, 176, 180], "nomin": 132, "ln": 132, "www": 132, "mathwork": 132, "help": 132, "gaussdesign": 132, "html": [132, 172], "onlinelibrari": 132, "wilei": 132, "doi": 132, "pdf": 132, "1002": 132, "9780470041956": 132, "app2": 132, "h_0p1": [132, 159, 161], "h_0p2": 132, "h_0p3": 132, "displai": [134, 144, 145, 146, 147, 149, 150, 151, 153, 155], "consid": 134, "line": [134, 156, 179], "string": [134, 149, 153], "print": [134, 176, 177, 178, 180], "quick": 134, "brown": 134, "fox": 134, "jump": 134, "lazi": 134, "dog": 134, "00000000": 134, "54": 134, "68": 134, "65": 134, "71": 134, "75": [134, 144, 180, 181], "69": 134, "63": 134, "6b": 134, "62": 134, "72": 134, "6f": 134, "6e": 134, "00000010": 134, "66": 134, "78": 134, "6a": 134, "6d": 134, "70": [134, 182], "73": 134, "74": 134, "00000020": 134, "6c": 134, "61": 134, "7a": 134, "79": 134, "64": [134, 178], "67": 134, "he": 134, "02": [134, 178, 180], "03": [134, 178], "04": [134, 178], "00000004": 134, "05": [134, 176, 178, 180], "06": 134, "07": 134, "08": 134, "00000008": 134, "09": 134, "0a": 134, "iq_imbal": [135, 170, 183, 184], "iq": [135, 170], "imbal": [135, 170], "posit": 135, "compon": [135, 165, 166], "larger": [135, 144, 155], "quadratur": 135, "lead": [135, 181], "g_i": 135, "180": 135, "g_q": 135, "x_q": 135, "horizont": 135, "stretch": 135, "while": [135, 182], "neg": 135, "vertic": 135, "y1": 135, "y2": 135, "subplot": [135, 180, 181], "y_1": 135, "legend": [135, 176, 179, 180, 182], "y_2": 135, "northwest": 135, "northeast": 135, "50118723": 136, "36272725": 136, "9952623149688795": 136, "cdot": 137, "satisfi": 137, "le": [137, 140, 159, 161], "1j": [137, 145, 146, 147, 148, 150, 151, 154, 156, 158, 166, 176, 178, 180], "remov": [137, 149, 153], "rotat": 137, "dtype": [138, 156, 167, 180], "dtypelik": [138, 167], "most": [138, 167], "signific": [138, 167], "enough": 138, "fill": 138, "last": [138, 172], "remain": 138, "smallest": 138, "unsign": 138, "integ": 138, "uint8": [138, 167], "diamet": 140, "effici": 140, "55": 140, "eta": 140, "dbi": 140, "half": 140, "arcsin": 140, "83": 140, "dish": 140, "21": 140, "810210290266568": 140, "437435887991374": 140, "23": 140, "sinc": [140, 172, 181], "antenna": [140, 183], "we": [140, 183], "observ": 140, "830810203546193": 140, "529544741425365": 140, "keyword": [143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 177, 178], "argument": [143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 174, 177, 178], "pyplot": [143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 176, 177, 178, 179, 180, 181, 182], "scatter": 144, "overwritten": [144, 153, 155], "rang": [144, 180, 181], "hist2d": 144, "marker": [144, 155, 176, 177, 178, 181], "linestyl": [144, 155, 157, 168, 176, 180, 181, 182], "10_000": 144, "n_time": [145, 178], "n_freq": 145, "x_axi": [145, 146, 147, 149, 150, 151, 153, 177, 178, 179, 180], "two": [145, 146, 147, 149, 150, 151, 153, 168, 176, 177, 178], "log": [145, 146, 147, 149, 150, 151, 177, 178, 180], "n_t": 145, "n_f": 145, "scale": [145, 146, 147, 149, 150, 151, 153, 177, 178], "option": [145, 146, 147, 149, 150, 151, 153], "spectrum": [145, 146, 147, 149, 150, 151, 153, 165, 166], "h_srrc": [145, 146, 147, 148, 150, 151, 154, 156, 158, 181], "conj": [145, 146, 147, 148, 150, 151, 154, 158, 178, 180], "30": [145, 148, 154, 165, 166, 178, 184], "ylim": [147, 168, 177, 180, 181, 182], "48": 147, "52": 147, "window": [149, 153], "hann": [149, 153], "overlap": [149, 153, 179], "fft": [149, 153, 165, 166], "detrend": [149, 153], "median": 149, "spectral": [149, 179, 182, 183], "segment": [149, 153], "256": [149, 153, 179], "point": [149, 153], "trend": [149, 153], "unwrap": [151, 180], "pcolormesh": 153, "vmin": 153, "10th": 153, "vmax": 153, "100th": 153, "shade": 153, "gouraud": 153, "represent": 155, "markers": 155, "diff": [156, 179], "color": [156, 176, 179, 180, 182], "how": [156, 174, 175], "imaginari": 156, "part": [156, 162, 180], "base": 156, "current": [156, 173], "solid": 156, "dash": 156, "share": 156, "10e3": 156, "complex64": [156, 180], "style": 157, "revert": 157, "rcdefault": 157, "_rc_param": 157, "rc_param": 157, "ax": [157, 176, 180], "autolayout": 157, "max_open_warn": 157, "titleweight": 157, "bold": 157, "excess": [159, 161, 182], "h_0p5": [159, 161], "h_0p9": [159, 161], "sample_rate_offset": [162, 170, 183, 184], "ppm": [162, 170], "million": 162, "odd": 165, "append": [165, 179], "end": 165, "250": [165, 166], "300": [165, 166], "ksp": [165, 166], "notic": [165, 166, 176, 182], "conjug": [165, 166, 178], "2048": [165, 166, 179], "500": [165, 166, 180], "longer": 165, "now": [165, 166, 176], "150": [165, 166], "asymmetr": 166, "zadoff_chu": [168, 169, 183, 184], "zadoff": [168, 169, 184], "chu": [168, 169, 184], "rel": [168, 182], "prime": 168, "gcd": 168, "ne": 168, "cyclic": 168, "x_u": 168, "c_": 168, "2q": 168, "mod": 168, "e2": 168, "80": 168, "93chu_sequ": 168, "x_3": 168, "139": 168, "x3": 168, "linewidth": 168, "roll": [168, 182], "tile": 168, "x_5": 168, "x5": 168, "cross": 168, "xcorr": 168, "sphinx": 172, "immateri": 172, "theme": 172, "depend": [172, 174, 175], "store": [172, 173, 175], "requir": [172, 173, 174, 175], "txt": [172, 173, 174, 175], "myst": 172, "parser": 172, "design": [172, 183], "updat": 172, "git": [172, 173], "math": 172, "dollar": 172, "ipykernel": 172, "nb": 172, "switch": 172, "pip": [172, 173, 174, 175, 183], "python3": [172, 173, 174, 175, 183], "built": 172, "run": 172, "command": 172, "dirhtml": 172, "locat": [172, 175], "home": 172, "page": 172, "site": 172, "directori": [172, 173], "get": 172, "necessari": 172, "webpag": 172, "webserv": 172, "easili": [172, 174, 175, 177, 178], "done": 172, "python": [172, 183], "server": 172, "8080": 172, "access": [172, 174], "web": 172, "browser": 172, "localhost": 172, "latest": [173, 183], "releas": [173, 184], "version": [173, 183], "main": [173, 182], "wai": 173, "branch": [173, 174], "mhostett": [173, 184], "Or": [173, 175], "pre": 173, "To": 173, "activ": 173, "develop": [173, 174, 175], "librari": [173, 174, 175, 176, 181, 183, 185], "benefici": 173, "fashion": 173, "allow": [173, 175], "chang": [173, 185], "immedi": 173, "seen": 173, "upon": 173, "next": 173, "import": [173, 176, 177, 178, 179, 180, 181, 182, 183], "clone": 173, "repo": 173, "wherev": 173, "you": [173, 174, 175, 183], "like": [173, 183], "flag": 173, "includ": [173, 174, 175, 183], "packag": [173, 183], "lint": 173, "test": [173, 183], "pylint": [173, 174], "black": 173, "jupyt": 173, "22": 173, "pytest": [173, 175], "cov": 173, "toml": [173, 174, 175], "xdist": 173, "benchmark": 173, "static": 174, "your": [174, 175], "dev": [174, 175], "variou": [174, 182], "nuisanc": 174, "warn": 174, "ignor": 174, "list": 174, "pyproject": [174, 175], "tool": [174, 175, 183], "src": 174, "_version": 174, "py": [174, 175], "disabl": 174, "comparison": 174, "callabl": 174, "doesn": 174, "understand": [174, 178], "metaclass": 174, "fixm": 174, "global": 174, "statement": 174, "invalid": 174, "name": 174, "miss": 174, "docstr": 174, "protect": 174, "too": 174, "mani": 174, "ancestor": 174, "attribut": 174, "public": 174, "unneed": 174, "min": 174, "similar": [174, 182], "120": 174, "manual": [174, 175], "file": [174, 175], "vscode": [174, 175], "json": [174, 175], "instruct": [174, 175], "about": [174, 175], "invok": [174, 175], "edit": [174, 178], "ini_opt": 175, "minvers": 175, "addopt": 175, "showloc": 175, "testpath": 175, "execut": 175, "test_psk": 175, "infrastructur": 175, "debug": 175, "config": [176, 177, 178, 179, 180, 181, 182], "inlinebackend": [176, 177, 178, 179, 180, 181, 182], "print_figure_kwarg": [176, 177, 178, 179, 180, 181, 182], "facecolor": [176, 177, 178, 179, 180, 181, 182], "widget": [176, 177, 178, 179, 180, 181, 182], "prop_cycl": [176, 180], "by_kei": [176, 180], "continu": 176, "tx": 176, "decai": [176, 178], "o": 176, "fillstyl": 176, "imag": 176, "origin": 176, "show": [176, 177, 178, 179, 180, 181, 182], "accomplish": [176, 181], "def": [176, 179, 181], "resample_sign": 176, "new_sample_r": 176, "ty": 176, "gca": [176, 181], "set_prop_cycl": [176, 181], "200": [176, 181], "four": 176, "400": 176, "appear": 176, "fourth": 176, "often": 176, "do": 176, "align": 176, "315": 176, "32": 176, "below": [177, 178], "00095881": 177, "00175008": 177, "00423912": 177, "00588237": 177, "00615087": 177, "00474585": 177, "00170436": 177, "0025481": 177, "00721629": 177, "01123216": 177, "01342329": 177, "01273174": 177, "00845039": 177, "00043678": 177, "01073645": 177, "02372925": 177, "03650167": 177, "04650553": 177, "05098414": 177, "04734541": 177, "03355823": 177, "00851466": 177, "0276993": 177, "07367186": 177, "12670168": 177, "18306847": 177, "2381038": 177, "28726435": 177, "32607284": 177, "3509308": 177, "35948882": 177, "conveni": [177, 178], "evalu": [177, 178], "envelop": [177, 178], "here": [177, 178], "altern": 178, "0x000002214b040a88": 178, "47820725": 178, "78207252e": 178, "58172329e": 178, "10862468e": 178, "86109590e": 178, "21565653e": 178, "01140214e": 178, "57286400e": 178, "67772160e": 178, "47338728e": 178, "10422993e": 178, "89312837e": 178, "12240078e": 178, "03953322e": 178, "69685122e": 178, "63882791e": 178, "81474977e": 178, "47193366e": 178, "85259041e": 178, "15647504e": 178, "23851924e": 178, "42176895e": 178, "84684395e": 178, "42721858e": 178, "72236648e": 178, "14721649e": 178, "10813095e": 178, "94024315e": 178, "78877688e": 178, "74077567e": 178, "87820725": 178, "53637958": 178, "94724205": 178, "13335164": 178, "1455082": 178, "04436799": 178, "88708159": 178, "71930943": 178, "5719707": 178, "46154771": 178, "39261642": 178, "36139242": 178, "35935288": 178, "3763214": 178, "40270968": 178, "43085717": 178, "45557651": 178, "47410241": 178, "48566716": 178, "49090568": 178, "49124786": 178, "48840102": 178, "4839738": 178, "47925143": 178, "47510421": 178, "47199608": 178, "47005584": 178, "46917696": 178, "46911955": 178, "denomin": 178, "73910363": 178, "30614675j": 178, "plane": 178, "endpoint": 178, "concaten": 178, "0x000002214dc574c8": 178, "lyon": 178, "3rd": 178, "insid": 178, "outsid": 178, "unstabl": 178, "n_symbol": 179, "pulse_shap": 179, "els": 179, "pb": 179, "x_bb_rect": 179, "papr_bb_rect": 179, "x_pb_rect": 179, "papr_pb_rect": 179, "x_bb_0p1": 179, "papr_bb_0p1": 179, "x_pb_0p1": 179, "papr_pb_0p1": 179, "x_bb_0p5": 179, "papr_bb_0p5": 179, "x_pb_0p5": 179, "papr_pb_0p5": 179, "x_bb_0p9": 179, "papr_bb_0p9": 179, "x_pb_0p9": 179, "papr_pb_0p9": 179, "rectangular": [179, 182], "2f": 179, "rf": [179, 180], "xlim": [179, 180, 182], "512": 179, "sweep_alpha": 179, "bb_papr": 179, "pb_papr": 179, "bpsk_bb_papr": 179, "bpsk_pb_papr": 179, "qpsk_bb_papr": 179, "qpsk_pb_papr": 179, "psk8_bb_papr": 179, "psk8_pb_papr": 179, "psk16_bb_papr": 179, "psk16_pb_papr": 179, "configur": 180, "0x7f058065cf10": 180, "theta_0": 180, "phase_error": 180, "freq_estim": 180, "suptitl": [180, 181], "ones": 180, "angl": 180, "avail": [180, 181], "001": 180, "005": 180, "b_nt": 180, "0005": 180, "0125": 180, "015": 180, "0175": 180, "t_lock": 180, "analyze_psk": 181, "100_000": 181, "achiev": [181, 182], "n0": 181, "tx_mf": 181, "18": 181, "1e6": 181, "s_hat": 181, "bpsk_ber": 181, "bpsk_ser": 181, "qpsk_ber": 181, "qpsk_ser": 181, "psk8_ber": 181, "psk8_ser": 181, "psk16_ber": 181, "psk16_ser": 181, "simul": [181, 183], "1e0": 181, "psk8_bin": 181, "psk8_grai": 181, "wors": 181, "rect": 182, "rc_0p1": 182, "rc_0p5": 182, "rc_0p9": 182, "nyquist": 182, "pm": 182, "60": 182, "nearli": 182, "null": 182, "small": 182, "lobe": 182, "much": 182, "higher": 182, "h_rect": 182, "freqz": 182, "worn": 182, "whole": 182, "h_rc_0p1": 182, "h_rc_0p5": 182, "h_rc_0p9": 182, "p_rect": 182, "log10": 182, "cumsum": 182, "p_rc_0p1": 182, "p_rc_0p5": 182, "p_rc_0p9": 182, "One": 182, "within": 182, "srrc_0p1": 182, "srrc_0p5": 182, "srrc_0p9": 182, "therefor": 182, "significantli": 182, "due": 182, "being": 182, "h_srrc_0p1": 182, "h_srrc_0p5": 182, "h_srrc_0p9": 182, "p_srrc_0p1": 182, "p_srrc_0p5": 182, "p_srrc_0p9": 182, "gauss_0p1": 182, "gauss_0p2": 182, "gauss_0p3": 182, "softwar": 183, "radio": 183, "goal": 183, "analyz": 183, "build": 183, "reli": 183, "interoper": 183, "veri": 183, "possibl": 183, "numba": 183, "acceler": 183, "computation": 183, "intens": 183, "addition": 183, "aim": 183, "replic": 183, "relev": 183, "matlab": 183, "dsp": 183, "toolbox": 183, "progress": 183, "someth": 183, "pleas": 183, "open": 183, "issu": 183, "github": 183, "pypi": 183, "manipul": 183, "synchron": 183, "convers": [183, 184], "model": [183, 184], "impair": [183, 184], "budget": [183, 184], "august": 184, "2023": 184, "translat": 184, "fix": [184, 185], "matt": 184, "hostett": 184, "juli": 184, "fpsl": 184, "helper": 184, "improv": 184, "semant": 185, "major": 185, "minor": 185, "patch": 185, "introduc": 185, "api": 185, "featur": 185, "backward": 185, "compat": 185, "make": 185, "bug": 185, "There": 185, "guarante": 185, "them": 185, "thei": 185}, "objects": {"": [[2, 0, 0, 1, "sdr", ""]], "sdr": [[8, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [25, 1, 1, "", "DDS", "Implements a direct digital synthesizer (DDS)."], [31, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [38, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [50, 1, 1, "", "FIRInterpolator", "Implements a polyphase finite impulse response (FIR) interpolating filter."], [58, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [65, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [81, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [90, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [98, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [108, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [109, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [110, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [111, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [112, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [113, 5, 1, "", "barker", "Returns the Barker code/sequence of length $N$."], [114, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [115, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [116, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [117, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [118, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [119, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [120, 5, 1, "", "db", "Converts from linear units to decibels."], [121, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [122, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [123, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [124, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [125, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [126, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [127, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [128, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [129, 5, 1, "", "evm", "Calculates the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [130, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [131, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [132, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [133, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [134, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [135, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [136, 5, 1, "", "linear", "Converts from decibels to linear units."], [137, 5, 1, "", "mix", "Mixes the time-domain signal $x[n]$ with a complex exponential."], [138, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [139, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [140, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [141, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [142, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [159, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [160, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [161, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [162, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [163, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [164, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [165, 5, 1, "", "to_complex_bb", "Converts the real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$ to a complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c} = f_{s,r}/2$."], [166, 5, 1, "", "to_real_pb", "Converts the complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$ to a real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r} = 2f_{s,c}$."], [167, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [168, 5, 1, "", "zadoff_chu", "Returns the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.ClosedLoopPLL": [[9, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [10, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [11, 2, 1, "", "K0", "The NCO gain $K_0$."], [12, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [13, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [14, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [15, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [16, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [17, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [18, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [19, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [20, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [21, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [22, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [23, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [24, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[15, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [15, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [15, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [15, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [15, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[16, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[18, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[21, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.DDS": [[26, 3, 1, "", "__init__", "Creates a direct digital synthesizer (DDS)."], [27, 2, 1, "", "nco", "The numerically-controlled oscillator (NCO) used by the DDS."], [28, 3, 1, "", "process", "Steps the DDS with the variable phase increment signal $x[n]$."], [29, 3, 1, "", "reset", "Resets the DDS."], [30, 3, 1, "", "step", "Steps the DDS forward by $N$ samples."]], "sdr.DDS.__init__": [[26, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [26, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [26, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.DDS.process": [[28, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the DDS."]], "sdr.DDS.step": [[30, 4, 2, "p-N", "N", "The number of samples $N$ to step the DDS forward."]], "sdr.ErrorRate": [[32, 3, 1, "", "__init__", "Creates a new error rate tabulation object."], [33, 3, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [34, 3, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [35, 3, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [36, 3, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [37, 3, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[33, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [33, 4, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [33, 4, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[34, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[35, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[37, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[39, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [40, 2, 1, "", "delay", "The delay of the FIR filter in samples."], [41, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the FIR filter."], [42, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the FIR filter."], [43, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the FIR filter on a logarithmic frequency axis."], [44, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [45, 2, 1, "", "order", "The order of the FIR filter, $N$."], [46, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [47, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [48, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [49, 2, 1, "", "taps", "The feedforward taps $h_i$."]], "sdr.FIR.__init__": [[39, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$."], [39, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to filter()."]], "sdr.FIR.filter": [[41, 4, 2, "p-mode", "mode", "The non-streaming convolution mode. See scipy.signal.convolve() for details. In streaming mode, $N$ inputs always produce $N$ outputs."], [41, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.FIR.frequency_response": [[42, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [42, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.frequency_response_log": [[43, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [43, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [43, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[44, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.step_response": [[47, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIRInterpolator": [[51, 3, 1, "", "__init__", "Creates a polyphase FIR interpolating filter with feedforward coefficients $h_i$."], [52, 3, 1, "", "filter", "Filters and interpolates the input signal $x[n]$ with the FIR filter."], [53, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [54, 2, 1, "", "rate", "The interpolation rate $r$."], [55, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [56, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [57, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.FIRInterpolator.__init__": [[51, 4, 2, "p-rate", "rate", "The interpolation rate $r$."], [51, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to filter()."], [51, 4, 2, "p-taps", "taps", "The feedforward coefficients $h_i$."]], "sdr.FIRInterpolator.filter": [[52, 4, 2, "p-mode", "mode", "The non-streaming convolution mode. See scipy.signal.convolve() for details. In streaming mode, $N$ inputs always produce $N r$ outputs."], [52, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$."]], "sdr.FarrowResampler": [[59, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [60, 2, 1, "", "order", "The order of the filter."], [61, 3, 1, "", "resample", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [62, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [63, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [64, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__init__": [[59, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to resample()."]], "sdr.FarrowResampler.resample": [[61, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [61, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.reset": [[62, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[66, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [67, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [68, 2, 1, "", "a_taps", "The feedback taps $a_j$."], [69, 2, 1, "", "b_taps", "The feedforward taps $b_i$."], [70, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the IIR filter."], [71, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the IIR filter."], [72, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the IIR filter on a logarithmic frequency axis."], [73, 2, 1, "", "gain", "The gain of the IIR filter."], [74, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [75, 2, 1, "", "order", "The order of the IIR filter, $N$."], [76, 2, 1, "", "poles", "The poles of the IIR filter."], [77, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [78, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [79, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [80, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[66, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [66, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [66, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."], [66, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__init__": [[67, 4, 2, "p-a", "a", "The feedback coefficients $a_j$."], [67, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [67, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."]], "sdr.IIR.filter": [[70, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.IIR.frequency_response": [[71, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [71, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[72, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [72, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [72, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[74, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[78, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.LoopFilter": [[82, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [83, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [84, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [85, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [86, 3, 1, "", "filter", "Filters the input signal $x[n]$."], [87, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [88, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [89, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__init__": [[84, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [84, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [84, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [84, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.LoopFilter.filter": [[86, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.NCO": [[91, 2, 1, "", "K0", "The NCO gain $K_0$."], [92, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [93, 2, 1, "", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [94, 2, 1, "", "offset", "The absolute offset $theta$ of the NCO in units."], [95, 3, 1, "", "process", "Steps the NCO with the variable-increment signal $x[n]$."], [96, 3, 1, "", "reset", "Resets the NCO."], [97, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__init__": [[92, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [92, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [92, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in units."]], "sdr.NCO.process": [[95, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the NCO."]], "sdr.NCO.step": [[97, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.PSK": [[99, 3, 1, "", "__init__", "Creates a new PSK object."], [100, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [101, 2, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [102, 3, 1, "", "demodulate", "Demodulates the complex symbols $hat{x}[k]$ to decimal symbols $hat{s}[k]$ using maximum-likelihood estimation."], [103, 3, 1, "", "modulate", "Modulates to decimal symbols $s[k]$ to complex symbols $x[k]$."], [104, 2, 1, "", "order", "The modulation order $M = 2^k$."], [105, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [106, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [107, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[99, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [99, 4, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [99, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[100, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [100, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.demodulate": [[102, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to demodulate."]], "sdr.PSK.modulate": [[103, 4, 2, "p-symbols", "symbols", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.PSK.ser": [[106, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [106, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.Q": [[108, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[109, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.average_power": [[110, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[111, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [111, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [111, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [111, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[112, 4, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [112, 4, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.barker": [[113, 4, 2, "p-length", "length", "The length $N$ of the Barker code/sequence."], [113, 4, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[114, 4, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [114, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[115, 4, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[116, 4, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[117, 4, 2, "p-p", "p", "The probability $p$ of a bit flip."], [117, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[118, 4, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[119, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.db": [[120, 4, 2, "p-type", "type", "The type of input value or signal."], [120, 4, 2, "p-x", "x", "The input value or signal."]], "sdr.diff_decode": [[121, 4, 2, "p-y", "y", "The input encoded data $y[k]$."], [121, 4, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[122, 4, 2, "p-x", "x", "The input uncoded data $x[k]$."], [122, 4, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[123, 4, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [123, 4, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [123, 4, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [123, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.ebn0_to_esn0": [[124, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [124, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [124, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[125, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [125, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [125, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [125, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[126, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[127, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [127, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [127, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[128, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [128, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.evm": [[129, 4, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [129, 4, 2, "p-output", "output", "The output type of the EVM calculation."], [129, 4, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [129, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.frequency_offset": [[130, 4, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [130, 4, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [130, 4, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [130, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [130, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[131, 4, 2, "p-d", "d", "The distance $d$ in meters between the transmitter and receiver."], [131, 4, 2, "p-f", "f", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[132, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [132, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [132, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[133, 4, 2, "p-n", "n", "The length of the Gray code."]], "sdr.hexdump": [[134, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [134, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[135, 4, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [135, 4, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [135, 4, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.linear": [[136, 4, 2, "p-type", "type", "The type of output value or signal."], [136, 4, 2, "p-x", "x", "The input value or signal in dB."]], "sdr.mix": [[137, 4, 2, "p-freq", "freq", "The frequency $f$ of the complex exponential in Hz (or 1/samples if sample_rate=1). The frequency must satisfy $-f_s/2 le f le f_s/2$."], [137, 4, 2, "p-phase", "phase", "The phase $phi$ of the complex exponential in degrees."], [137, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal."], [137, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.pack": [[138, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [138, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [138, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[139, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[140, 4, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [140, 4, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [140, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[141, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[142, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.plot": [[143, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [144, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [145, 5, 1, "", "filter", "Plots the frequency response $H(omega)$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [146, 5, 1, "", "frequency_response", "Plots the frequency response $H(omega)$ of the filter."], [147, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [148, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [149, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [150, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [151, 5, 1, "", "phase_response", "Plots the phase response $Theta(omega)$ of the filter."], [152, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [153, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [154, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [155, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [156, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [157, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [158, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[143, 4, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [143, 4, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."], [143, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."]], "sdr.plot.constellation": [[144, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [144, 4, 2, "p-kwargs", "kwargs", "If heatmap=False, additional keyword arguments to pass to matplotlib.pyplot.scatter(). The following keyword arguments are set by default. The defaults may be overwritten."], [144, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [144, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.filter": [[145, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [145, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [145, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [145, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [145, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [145, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [145, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.frequency_response": [[146, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [146, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [146, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [146, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [146, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [146, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [146, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[147, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [147, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [147, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [147, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [147, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [147, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [147, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.impulse_response": [[148, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [148, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [148, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [148, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.periodogram": [[149, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [149, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [149, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [149, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [149, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [149, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [149, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [149, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [149, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [149, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_delay": [[150, 4, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [150, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [150, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [150, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [150, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [150, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [150, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_response": [[151, 4, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [151, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [151, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [151, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [151, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [151, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [151, 4, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [151, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.ser": [[152, 4, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [152, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."], [152, 4, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.spectrogram": [[153, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [153, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [153, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.pcolormesh(). The following keyword arguments are set by default. The defaults may be overwritten."], [153, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [153, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [153, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [153, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [153, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [153, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[154, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [154, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [154, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [154, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.symbol_map": [[155, 4, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [155, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot(). The following keyword arguments are set by default. The defaults may be overwritten."], [155, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [155, 4, 2, "p-symbol_map", "symbol_map", "The complex symbols $hat{x}[k]$."]], "sdr.plot.time_domain": [[156, 4, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal. If \"color\", the real and imaginary parts will have different colors based on the current Matplotlib color cycle. If \"line\", the real part will have a solid line and the imaginary part will have a dashed line, and both lines will share the same color."], [156, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [156, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\"."], [156, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[158, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [158, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [158, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.raised_cosine": [[159, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [159, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [159, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[160, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[161, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [161, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [161, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[162, 4, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [162, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.snr_to_ebn0": [[163, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [163, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [163, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [163, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[164, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [164, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.to_complex_bb": [[165, 4, 2, "p-x_r", "x_r", "The real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$. If the length is odd, one zero is appended to the end."]], "sdr.to_real_pb": [[166, 4, 2, "p-x_c", "x_c", "The complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$."]], "sdr.unpack": [[167, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [167, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [167, 4, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.zadoff_chu": [[168, 4, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [168, 4, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence. The root must be relatively prime to the length, i.e., $gcd(u, N) = 1$."], [168, 4, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence. When $q ne 0$, the returned sequence is a cyclic shift of the root-$u$ Zadoff-Chu sequence."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"convers": 0, "decibel": 0, "from": [0, 173, 174, 175], "e_b": 0, "n_0": 0, "e_": 0, "": [0, 177, 178], "n": [0, 176, 177, 178], "data": 1, "manipul": [1, 2], "digit": [2, 178], "signal": [2, 170, 176, 179], "process": 2, "filter": [2, 6, 177, 178, 180], "resampl": [2, 176], "correl": 2, "link": 3, "budget": 3, "channel": [3, 170], "capac": 3, "path": 3, "loss": 3, "antenna": 3, "measur": 4, "energi": 4, "power": [4, 179], "voltag": 4, "modul": [4, 5, 6], "class": 5, "puls": [5, 179, 182], "shape": [5, 179, 182], "symbol": [5, 181], "map": [5, 181], "encod": 5, "plot": [6, 179], "configur": [6, 174, 175], "time": [6, 179, 180], "domain": [6, 179, 180], "frequenc": [6, 177, 178, 179, 180], "spectral": 6, "estim": 6, "analysi": 6, "probabl": 7, "note": [8, 149, 153], "constructor": [8, 25, 31, 38, 50, 58, 65, 81, 90, 98], "method": [8, 25, 31, 38, 50, 58, 65, 81, 90, 98], "properti": [8, 25, 38, 50, 58, 65, 81, 90, 98], "see": [25, 31, 33, 42, 43, 44, 47, 71, 72, 74, 78, 90, 100, 106, 108, 109, 119, 139, 145, 146, 147, 148, 150, 151, 154, 158], "also": [25, 31, 33, 42, 43, 44, 47, 71, 72, 74, 78, 90, 100, 106, 108, 109, 119, 139, 145, 146, 147, 148, 150, 151, 154, 158], "sequenc": 169, "simul": 170, "model": 170, "impair": 170, "synchron": 171, "document": 172, "instal": [172, 173, 174, 175, 183], "build": 172, "doc": 172, "serv": 172, "pypi": 173, "github": 173, "edit": 173, "local": 173, "folder": 173, "dev": 173, "depend": 173, "linter": 174, "run": [174, 175], "command": [174, 175], "line": [174, 175], "v": [174, 175], "code": [174, 175], "unit": 175, "test": 175, "farrow": 176, "arbitrari": 176, "construct": 176, "an": [176, 177, 178], "input": 176, "x": 176, "t_": 176, "rate": [176, 181], "r": 176, "y": 176, "frac": 176, "upsampl": 176, "integ": 176, "downsampl": 176, "irrat": 176, "fir": 177, "creat": [177, 178], "examin": [177, 178, 179], "impuls": [177, 178], "respons": [177, 178, 180], "h": [177, 178], "step": [177, 178, 180], "omega": [177, 178], "group": [177, 178], "delai": [177, 178], "tau_g": [177, 178], "fulli": [177, 178], "analyz": [177, 178, 180], "iir": 178, "zero": 178, "pole": 178, "stabil": 178, "peak": 179, "averag": 179, "qpsk": [179, 181], "variou": 179, "across": [179, 180], "excess": 179, "bandwidth": 179, "phase": [180, 181], "lock": 180, "loop": 180, "design": 180, "proport": 180, "plu": 180, "integr": 180, "ppi": 180, "implement": 180, "pll": 180, "close": 180, "perform": 180, "compar": 180, "zeta": 180, "b_n": 180, "t": 180, "shift": 181, "kei": 181, "constel": 181, "bpsk": 181, "8": 181, "psk": 181, "16": 181, "error": 181, "curv": 181, "bit": 181, "rais": 182, "cosin": 182, "squar": 182, "root": 182, "gaussian": 182, "sdr": 183, "featur": 183, "v0": 184, "0": 184, "4": 184, "chang": 184, "contributor": 184, "3": 184, "2": 184, "1": 184, "version": 185, "alpha": 185, "releas": 185, "beta": 185}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Conversions": [[0, "conversions"]], "Decibels": [[0, "decibels"]], "From E_b/N_0": [[0, "from-e-b-n-0"]], "From E_s/N_0": [[0, "from-e-s-n-0"]], "From S/N": [[0, "from-s-n"]], "Data manipulation": [[1, "data-manipulation"]], "Digital signal processing": [[2, "digital-signal-processing"]], "Filtering": [[2, "filtering"]], "Resampling": [[2, "resampling"]], "Correlation": [[2, "correlation"]], "Signal manipulation": [[2, "signal-manipulation"]], "Link budgets": [[3, "link-budgets"]], "Channel capacity": [[3, "channel-capacity"]], "Path losses": [[3, "path-losses"]], "Antennas": [[3, "antennas"]], "Measurement": [[4, "measurement"]], "Energy": [[4, "energy"]], "Power": [[4, "power"]], "Voltage": [[4, "voltage"]], "Modulation": [[4, "modulation"], [5, "modulation"], [6, "modulation"]], "Classes": [[5, "classes"]], "Pulse shaping": [[5, "pulse-shaping"]], "Symbol mapping": [[5, "symbol-mapping"], [181, "symbol-mapping"]], "Symbol encoding": [[5, "symbol-encoding"]], "Plotting": [[6, "plotting"]], "Configuration": [[6, "configuration"], [174, "configuration"], [175, "configuration"]], "Time-domain": [[6, "time-domain"]], "Frequency-domain": [[6, "frequency-domain"]], "Spectral estimation": [[6, "spectral-estimation"]], "Filter analysis": [[6, "filter-analysis"]], "Probability": [[7, "probability"]], "Note": [[8, null], [149, null], [153, null]], "Constructors": [[8, "constructors"], [25, "constructors"], [31, "constructors"], [38, "constructors"], [50, "constructors"], [58, "constructors"], [65, "constructors"], [81, "constructors"], [90, "constructors"], [98, "constructors"]], "Methods": [[8, "methods"], [25, "methods"], [31, "methods"], [38, "methods"], [50, "methods"], [58, "methods"], [65, "methods"], [81, "methods"], [90, "methods"], [98, "methods"]], "Properties": [[8, "properties"], [25, "properties"], [38, "properties"], [50, "properties"], [58, "properties"], [65, "properties"], [81, "properties"], [90, "properties"], [98, "properties"]], "See also": [[25, null], [31, null], [33, null], [42, null], [43, null], [44, null], [47, null], [71, null], [72, null], [74, null], [78, null], [90, null], [100, null], [106, null], [108, null], [109, null], [119, null], [139, null], [145, null], [146, null], [147, null], [148, null], [150, null], [151, null], [154, null], [158, null]], "Sequences": [[169, "sequences"]], "Simulation": [[170, "simulation"]], "Channel models": [[170, "channel-models"]], "Signal impairments": [[170, "signal-impairments"]], "Synchronization": [[171, "synchronization"]], "Documentation": [[172, "documentation"]], "Install": [[172, "install"], [174, "install"], [175, "install"]], "Build the docs": [[172, "build-the-docs"]], "Serve the docs": [[172, "serve-the-docs"]], "Installation": [[173, "installation"], [183, "installation"]], "Install from PyPI": [[173, "install-from-pypi"]], "Install from GitHub": [[173, "install-from-github"]], "Editable install from local folder": [[173, "editable-install-from-local-folder"]], "Install the dev dependencies": [[173, "install-the-dev-dependencies"]], "Linter": [[174, "linter"]], "Run from the command line": [[174, "run-from-the-command-line"], [175, "run-from-the-command-line"]], "Run from VS Code": [[174, "run-from-vs-code"], [175, "run-from-vs-code"]], "Unit Tests": [[175, "unit-tests"]], "Farrow arbitrary resampler": [[176, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[176, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[176, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[176, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[176, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[176, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[176, "downsample-by-an-irrational-rate"]], "FIR filters": [[177, "fir-filters"]], "Create an FIR filter": [[177, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[177, "examine-the-impulse-response-h-n"], [178, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[177, "examine-the-step-response-s-n"], [178, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[177, "examine-the-frequency-response-h-omega"], [178, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[177, "examine-the-group-delay-tau-g-omega"], [178, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[177, "fully-analyze-a-fir-filter"]], "IIR filters": [[178, "iir-filters"]], "Create an IIR filter": [[178, "create-an-iir-filter"]], "Examine the zeros and poles": [[178, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[178, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[178, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[179, "peak-to-average-power"]], "QPSK signal with various pulse shapes": [[179, "qpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[179, "examine-time-domain"]], "Examine frequency domain": [[179, "examine-frequency-domain"]], "Plot across excess bandwidth": [[179, "plot-across-excess-bandwidth"]], "Phase-locked loops": [[180, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[180, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[180, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[180, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[180, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[180, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[180, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[180, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[181, "phase-shift-keying"]], "Constellations": [[181, "constellations"]], "BPSK": [[181, "bpsk"]], "QPSK": [[181, "qpsk"]], "8-PSK": [[181, "id1"]], "16-PSK": [[181, "id2"]], "Error rate curves": [[181, "error-rate-curves"]], "Bit error rate curves": [[181, "bit-error-rate-curves"]], "Symbol error rate curves": [[181, "symbol-error-rate-curves"]], "Pulse shapes": [[182, "pulse-shapes"]], "Raised cosine": [[182, "raised-cosine"]], "Square-root raised cosine": [[182, "square-root-raised-cosine"]], "Gaussian": [[182, "gaussian"]], "sdr": [[183, "sdr"]], "Features": [[183, "features"]], "v0.0": [[184, "v0-0"]], "v0.0.4": [[184, "v0-0-4"]], "Changes": [[184, "changes"], [184, "id1"], [184, "id3"], [184, "id5"]], "Contributors": [[184, "contributors"], [184, "id2"], [184, "id4"], [184, "id6"]], "v0.0.3": [[184, "v0-0-3"]], "v0.0.2": [[184, "v0-0-2"]], "v0.0.1": [[184, "v0-0-1"]], "Versioning": [[185, "versioning"]], "Alpha releases": [[185, "alpha-releases"]], "Beta releases": [[185, "beta-releases"]]}, "indexentries": {"module": [[2, "module-sdr"]], "sdr": [[2, "module-sdr"]]}, "docurls": ["api/conversions/", "api/data-manipulation/", "api/dsp/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.DDS/", "api/sdr.DDS.__init__/", "api/sdr.DDS.nco/", "api/sdr.DDS.process/", "api/sdr.DDS.reset/", "api/sdr.DDS.step/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__init__/", "api/sdr.FIR.delay/", "api/sdr.FIR.filter/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.frequency_response_log/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.reset/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FIRInterpolator/", "api/sdr.FIRInterpolator.__init__/", "api/sdr.FIRInterpolator.filter/", "api/sdr.FIRInterpolator.polyphase_taps/", "api/sdr.FIRInterpolator.rate/", "api/sdr.FIRInterpolator.reset/", "api/sdr.FIRInterpolator.streaming/", "api/sdr.FIRInterpolator.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.resample/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__init__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.filter/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.filter/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.process/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.ber/", "api/sdr.PSK.bps/", "api/sdr.PSK.demodulate/", "api/sdr.PSK.modulate/", "api/sdr.PSK.order/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.barker/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.db/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.evm/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.linear/", "api/sdr.mix/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.filter/", "api/sdr.plot.frequency_response/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.ser/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.raised_cosine/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.to_complex_bb/", "api/sdr.to_real_pb/", "api/sdr.unpack/", "api/sdr.zadoff_chu/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/installation/", "development/linter/", "development/unit-tests/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})