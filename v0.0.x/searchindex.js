Search.setIndex({"titles": ["Conversions", "Data manipulation", "Digital signal processing", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.DDS", "sdr.DDS.__call__", "sdr.DDS.__init__", "sdr.DDS.nco", "sdr.DDS.reset", "sdr.DDS.step", "sdr.Decimator", "sdr.Decimator.__call__", "sdr.Decimator.__init__", "sdr.Decimator.__repr__", "sdr.Decimator.__str__", "sdr.Decimator.method", "sdr.Decimator.polyphase_taps", "sdr.Decimator.rate", "sdr.Decimator.reset", "sdr.Decimator.taps", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__call__", "sdr.FIR.__init__", "sdr.FIR.__len__", "sdr.FIR.__repr__", "sdr.FIR.__str__", "sdr.FIR.delay", "sdr.FIR.flush", "sdr.FIR.frequency_response", "sdr.FIR.frequency_response_log", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.reset", "sdr.FIR.state", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__call__", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__call__", "sdr.IIR.__init__", "sdr.IIR.__repr__", "sdr.IIR.__str__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.state", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.Interpolator", "sdr.Interpolator.__call__", "sdr.Interpolator.__init__", "sdr.Interpolator.__repr__", "sdr.Interpolator.__str__", "sdr.Interpolator.method", "sdr.Interpolator.polyphase_taps", "sdr.Interpolator.rate", "sdr.Interpolator.reset", "sdr.Interpolator.taps", "sdr.LinearModulation", "sdr.LinearModulation.__init__", "sdr.LinearModulation.__repr__", "sdr.LinearModulation.__str__", "sdr.LinearModulation.ber", "sdr.LinearModulation.bps", "sdr.LinearModulation.demodulate", "sdr.LinearModulation.modulate", "sdr.LinearModulation.order", "sdr.LinearModulation.phase_offset", "sdr.LinearModulation.ser", "sdr.LinearModulation.symbol_map", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__call__", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__call__", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.reset", "sdr.NCO.step", "sdr.OQPSK", "sdr.OQPSK.__init__", "sdr.OQPSK.__repr__", "sdr.OQPSK.__str__", "sdr.OQPSK.demodulate", "sdr.OQPSK.modulate", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.__repr__", "sdr.PSK.__str__", "sdr.PSK.ber", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.PiMPSK", "sdr.PiMPSK.__init__", "sdr.PiMPSK.demodulate", "sdr.PiMPSK.modulate", "sdr.Q", "sdr.Qinv", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.barker", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.db", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.downsample", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.evm", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.half_sine", "sdr.hexdump", "sdr.iq_imbalance", "sdr.linear", "sdr.mix", "sdr.multirate_taps", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.eye", "sdr.plot.filter", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.magnitude_response", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.raster", "sdr.plot.ser", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.polyphase_matrix", "sdr.raised_cosine", "sdr.rectangular", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.to_complex_bb", "sdr.to_real_pb", "sdr.unpack", "sdr.upsample", "sdr.wavelength", "sdr.zadoff_chu", "Sequences", "Simulation", "Synchronization", "Documentation", "Installation", "Linter", "Unit Tests", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234], "db": [0, 3, 4, 8, 19, 21, 41, 43, 44, 45, 47, 105, 111, 130, 136, 140, 142, 144, 150, 151, 152, 160, 165, 166, 168, 169, 170, 172, 173, 177, 178, 180, 182, 183, 184, 185, 186, 187, 197, 207, 210, 211, 228, 230, 231, 233], "x": [0, 1, 2, 4, 5, 6, 7, 8, 25, 26, 31, 32, 41, 43, 48, 49, 65, 66, 72, 74, 91, 92, 101, 107, 108, 113, 116, 122, 124, 130, 134, 135, 136, 144, 146, 147, 148, 149, 150, 151, 154, 157, 159, 160, 161, 162, 163, 164, 167, 170, 171, 177, 178, 179, 181, 182, 184, 185, 187, 188, 189, 190, 192, 193, 194, 195, 196, 198, 200, 201, 207, 209, 214, 215, 219, 222, 228, 229, 230, 234], "arraylik": [0, 1, 2, 3, 4, 5, 6, 7, 25, 26, 31, 32, 33, 41, 43, 48, 49, 50, 65, 66, 69, 72, 73, 74, 75, 91, 92, 93, 101, 102, 105, 107, 108, 111, 113, 116, 122, 124, 130, 131, 134, 135, 136, 137, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 207, 209, 210, 211, 212, 213, 214, 215, 219], "ndarrai": [0, 1, 2, 3, 5, 7, 25, 26, 30, 31, 32, 37, 40, 41, 46, 48, 49, 55, 56, 57, 58, 61, 62, 64, 65, 66, 71, 72, 74, 78, 79, 80, 81, 83, 85, 87, 88, 90, 91, 92, 97, 100, 101, 105, 107, 108, 111, 112, 113, 116, 122, 124, 129, 130, 134, 135, 136, 140, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 168, 169, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219], "convert": [0, 2, 130, 136, 144, 160, 165, 166, 168, 169, 176, 178, 204, 210, 211, 212, 213], "linear": [0, 91, 93, 96, 101, 102, 130, 136, 144, 151, 160, 178, 193, 198, 200, 232, 233], "unit": [0, 25, 31, 48, 62, 72, 88, 91, 113, 122, 125, 126, 127, 131, 137, 145, 151, 152, 160, 161, 162, 167, 175, 178, 199, 201, 205, 208, 222, 226, 227, 229, 232], "ebn0_to_esn0": [0, 111, 142, 165, 230, 233], "ebn0": [0, 6, 101, 105, 130, 136, 140, 144, 152, 165, 166, 186, 230], "bp": [0, 101, 106, 130, 136, 144, 165, 166, 168, 210, 230], "int": [0, 1, 2, 5, 6, 25, 30, 31, 33, 38, 41, 43, 44, 47, 48, 51, 54, 56, 57, 58, 59, 62, 65, 68, 72, 80, 81, 83, 84, 88, 91, 93, 98, 101, 106, 109, 122, 129, 130, 136, 137, 144, 145, 151, 153, 156, 161, 162, 164, 165, 166, 168, 169, 173, 174, 175, 176, 180, 181, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 204, 205, 206, 208, 210, 211, 214, 215, 217, 218, 230], "ebn0_to_snr": [0, 130, 136, 144, 166, 233], "esn0_to_ebn0": [0, 105, 140, 168, 233], "esn0": [0, 6, 101, 111, 130, 136, 142, 144, 168, 169, 197, 230], "esn0_to_snr": [0, 169, 230, 233], "sp": [0, 5, 6, 130, 136, 144, 166, 169, 173, 175, 188, 205, 206, 208, 210, 211, 212, 213, 228, 230, 231], "1": [0, 2, 5, 6, 7, 8, 15, 18, 22, 24, 25, 27, 31, 33, 34, 35, 37, 40, 41, 48, 51, 52, 53, 54, 56, 57, 72, 73, 76, 77, 80, 81, 91, 92, 93, 94, 95, 97, 100, 101, 102, 107, 108, 112, 113, 117, 118, 122, 125, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 225, 226, 227, 228, 229, 230, 231, 234], "snr_to_ebn0": [0, 105, 140, 152, 210, 233], "snr": [0, 3, 41, 43, 44, 45, 46, 47, 130, 136, 144, 151, 152, 210, 211, 212, 213, 219, 230, 233], "snr_to_esn0": [0, 111, 142, 211, 233], "pack": [1, 41, 43, 130, 136, 144, 176, 181, 232, 233], "bpe": [1, 181, 214], "binari": [1, 3, 5, 131, 137, 143, 145, 153, 154, 155, 156, 157, 158, 163, 181, 200, 214, 219, 230, 232, 233], "arrai": [1, 37, 40, 41, 93, 97, 100, 102, 130, 131, 136, 137, 143, 144, 145, 153, 154, 156, 157, 161, 162, 163, 174, 181, 201, 204, 214, 227], "an": [1, 2, 3, 31, 48, 58, 72, 73, 75, 83, 91, 92, 102, 131, 137, 140, 142, 145, 152, 181, 186, 191, 197, 214, 222, 223, 232], "multipl": [1, 181, 214, 230], "bit": [1, 4, 6, 41, 43, 46, 101, 105, 106, 130, 131, 136, 137, 140, 143, 144, 145, 152, 154, 155, 157, 158, 165, 166, 168, 176, 181, 186, 210, 214, 232, 233], "per": [1, 26, 32, 49, 92, 101, 106, 124, 130, 136, 137, 144, 145, 151, 152, 165, 166, 168, 169, 171, 173, 175, 176, 181, 187, 188, 205, 206, 208, 209, 210, 211, 214, 228, 231], "element": [1, 176, 181, 214], "unpack": [1, 41, 43, 176, 214, 230, 232, 233], "hexdump": [1, 41, 176, 232, 233], "byte": [1, 176], "width": [1, 176], "16": [1, 140, 142, 143, 165, 166, 168, 176, 186, 197, 204, 205, 208, 210, 211, 228, 233], "str": [1, 31, 34, 35, 48, 52, 53, 72, 76, 77, 91, 94, 95, 101, 103, 104, 130, 132, 133, 136, 138, 139, 144, 176, 188, 193, 196, 198], "return": [1, 5, 8, 16, 18, 21, 22, 26, 30, 31, 32, 34, 35, 41, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 62, 66, 72, 74, 76, 77, 80, 81, 83, 88, 91, 92, 94, 95, 101, 103, 104, 105, 107, 111, 116, 124, 129, 130, 132, 133, 134, 136, 138, 139, 140, 142, 144, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 227, 228, 230, 233], "specifi": [1, 41, 44, 45, 47, 151, 152, 163, 176, 226, 227], "class": [2, 4, 5, 8, 25, 31, 41, 43, 44, 45, 46, 47, 48, 65, 72, 91, 101, 113, 122, 130, 136, 144, 220, 226, 227, 230, 232, 233], "fir": [2, 31, 32, 33, 34, 35, 37, 39, 40, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 95, 97, 99, 100, 180, 188, 189, 190, 191, 192, 194, 195, 199, 203, 204, 228, 232, 233], "implement": [2, 5, 25, 31, 48, 65, 72, 91, 101, 113, 119, 122, 130, 136, 144, 220, 225], "finit": [2, 31, 48, 91, 232, 233], "impuls": [2, 6, 31, 48, 58, 72, 83, 91, 173, 189, 191, 201, 231, 232, 233], "respons": [2, 6, 31, 48, 56, 57, 58, 62, 72, 80, 81, 83, 88, 91, 173, 189, 190, 191, 192, 195, 199, 231, 232, 233], "iir": [2, 6, 8, 17, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 113, 119, 189, 190, 191, 192, 194, 195, 199, 203, 226, 229, 232, 233], "infinit": [2, 72, 232, 233], "interpol": [2, 31, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 130, 136, 144, 180, 188, 204, 215, 228, 230, 232, 233], "polyphas": [2, 31, 32, 33, 37, 40, 91, 92, 93, 97, 100, 164, 180, 204, 215, 232, 233], "decim": [2, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 101, 102, 107, 108, 112, 130, 131, 134, 135, 136, 137, 143, 144, 145, 146, 147, 164, 180, 204, 230, 232, 233], "multirate_tap": [2, 33, 93, 180, 233], "p": [2, 3, 7, 148, 149, 154, 155, 157, 158, 163, 180, 204, 219], "q": [2, 7, 130, 148, 149, 180, 204, 217, 233], "comput": [2, 7, 31, 101, 105, 111, 130, 136, 140, 142, 144, 148, 149, 151, 172, 180, 226, 227, 229, 231], "achiev": [2, 180, 204, 230, 231], "ration": [2, 180, 204], "polyphase_matrix": [2, 204, 233], "tap": [2, 31, 33, 37, 40, 48, 53, 64, 65, 71, 72, 78, 79, 91, 93, 97, 100, 204, 226, 227], "h_i": [2, 31, 33, 37, 40, 48, 50, 64, 91, 93, 97, 100, 204, 226], "matrix": [2, 163, 204, 219], "h_": [2, 8, 31, 37, 40, 91, 97, 100, 204, 229], "i": [2, 8, 15, 24, 31, 32, 33, 37, 40, 41, 46, 48, 49, 50, 58, 62, 63, 64, 65, 70, 72, 75, 79, 83, 88, 89, 91, 92, 93, 97, 100, 102, 113, 117, 118, 120, 130, 136, 137, 144, 145, 148, 149, 150, 151, 152, 155, 158, 160, 163, 165, 166, 168, 169, 171, 172, 173, 175, 176, 177, 178, 181, 183, 184, 185, 187, 188, 189, 191, 192, 193, 196, 198, 199, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234], "j": [2, 8, 25, 31, 37, 40, 72, 75, 78, 91, 97, 100, 130, 136, 144, 151, 163, 177, 179, 204, 217, 226, 227, 229], "farrowresampl": [2, 65, 66, 67, 68, 69, 70, 71, 225, 233], "cubic": [2, 65], "farrow": [2, 65, 66, 67, 68, 69, 70, 71, 232, 233], "arbitrari": [2, 5, 65, 66, 67, 68, 69, 70, 71, 101, 232, 233], "mix": [2, 179, 232, 233], "freq": [2, 3, 171, 179, 183, 216, 219, 225, 229], "float": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 41, 43, 44, 45, 47, 56, 57, 65, 66, 72, 73, 80, 81, 82, 101, 102, 110, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 127, 130, 131, 136, 137, 141, 144, 145, 150, 151, 152, 154, 157, 159, 167, 170, 171, 173, 177, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 192, 193, 194, 195, 196, 198, 200, 201, 205, 207, 208, 209, 216, 219], "0": [2, 5, 6, 7, 15, 25, 27, 31, 32, 37, 40, 41, 48, 49, 50, 52, 53, 56, 57, 64, 72, 73, 75, 76, 77, 78, 79, 80, 81, 91, 92, 93, 97, 100, 101, 102, 107, 108, 112, 117, 122, 125, 130, 131, 134, 135, 136, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 166, 167, 169, 170, 171, 172, 173, 174, 177, 178, 179, 181, 183, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 221, 222, 225, 226, 227, 228, 229, 230, 231, 234], "time": [2, 4, 8, 15, 16, 18, 19, 20, 21, 22, 48, 72, 113, 117, 130, 136, 144, 150, 151, 159, 163, 164, 167, 169, 171, 173, 177, 179, 182, 184, 185, 188, 189, 193, 196, 198, 201, 205, 207, 208, 209, 211, 212, 213, 215, 219, 225, 226, 227, 231, 232, 233], "domain": [2, 4, 150, 151, 159, 164, 167, 171, 177, 179, 182, 184, 185, 189, 193, 196, 198, 201, 207, 209, 212, 213, 215, 219, 232, 233], "n": [2, 4, 5, 6, 7, 8, 25, 26, 30, 31, 32, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 72, 74, 75, 78, 80, 81, 83, 84, 88, 91, 92, 113, 116, 122, 124, 129, 148, 149, 150, 151, 152, 153, 156, 159, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 177, 179, 180, 182, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 201, 207, 209, 210, 211, 212, 213, 215, 217, 218, 219, 229, 231, 232], "complex": [2, 4, 6, 25, 26, 30, 101, 102, 107, 108, 112, 130, 131, 134, 135, 136, 137, 143, 144, 145, 146, 147, 151, 152, 164, 170, 177, 179, 187, 188, 196, 200, 201, 212, 213, 215, 219, 225, 226, 227, 229, 230, 232, 233], "exponenti": [2, 25, 26, 30, 164, 179, 212, 213, 215, 225, 226, 227], "real": [2, 148, 149, 151, 179, 188, 196, 201, 212, 213, 225, 226, 227, 229, 232, 233], "sinusoid": [2, 136, 151, 179, 212, 213, 227, 233], "to_complex_bb": [2, 212, 233], "x_r": [2, 212, 213], "passband": [2, 173, 175, 205, 206, 208, 212, 213, 228, 233], "center": [2, 175, 201, 206, 212, 213, 233], "f_": [2, 8, 15, 23, 32, 56, 57, 80, 81, 92, 164, 166, 169, 171, 173, 179, 188, 189, 190, 192, 193, 194, 195, 196, 198, 201, 209, 210, 211, 212, 213, 215, 225, 226, 227, 229, 231], "": [2, 6, 8, 16, 18, 19, 20, 22, 23, 31, 43, 44, 45, 46, 47, 48, 56, 57, 62, 72, 80, 81, 88, 91, 101, 107, 108, 130, 134, 135, 136, 144, 146, 147, 151, 152, 166, 169, 170, 171, 177, 187, 188, 189, 190, 192, 193, 194, 195, 196, 198, 199, 201, 202, 209, 210, 211, 212, 213, 224, 225, 228, 230, 232], "r": [2, 31, 32, 33, 37, 38, 40, 65, 66, 91, 92, 93, 97, 98, 100, 152, 164, 165, 166, 168, 170, 173, 179, 205, 208, 210, 212, 213, 215, 221, 222, 223, 224, 227, 228, 229, 231], "4": [2, 16, 18, 31, 37, 40, 41, 57, 76, 77, 81, 91, 92, 97, 100, 130, 131, 136, 140, 141, 142, 143, 144, 151, 152, 153, 155, 156, 158, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 183, 186, 187, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 217, 221, 222, 225, 227, 228, 230], "sampl": [2, 8, 15, 23, 25, 26, 27, 30, 31, 32, 48, 49, 54, 56, 57, 58, 62, 65, 69, 80, 81, 83, 88, 91, 92, 93, 113, 117, 120, 122, 124, 125, 126, 129, 151, 164, 166, 169, 171, 173, 175, 179, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 201, 205, 206, 208, 209, 210, 211, 212, 213, 215, 219, 225, 228, 229, 231, 232], "rate": [2, 4, 6, 8, 15, 23, 31, 32, 33, 35, 38, 41, 42, 43, 45, 46, 56, 57, 65, 66, 80, 81, 91, 92, 93, 95, 98, 101, 105, 111, 130, 136, 140, 142, 144, 164, 165, 166, 168, 171, 179, 180, 186, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 201, 204, 209, 210, 212, 213, 215, 219, 232, 233], "baseband": [2, 6, 8, 179, 188, 212, 213, 228, 229, 233], "x_c": [2, 212, 213], "c": [2, 8, 16, 18, 19, 20, 21, 22, 43, 44, 45, 46, 47, 101, 102, 112, 113, 130, 136, 143, 144, 152, 155, 158, 172, 183, 200, 212, 213, 216, 229], "2": [2, 5, 6, 8, 16, 18, 21, 31, 34, 35, 37, 40, 41, 48, 52, 53, 54, 56, 57, 76, 77, 80, 81, 91, 92, 94, 95, 97, 100, 101, 109, 130, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 222, 224, 225, 226, 227, 228, 229, 230, 231], "to_real_pb": [2, 213, 228, 233], "2f_": [2, 213], "upsampl": [2, 91, 215, 233], "factor": [2, 4, 8, 15, 24, 113, 117, 118, 159, 164, 215, 229], "downsampl": [2, 164, 233], "bsc_capac": [3, 158, 233], "calcul": [3, 4, 152, 155, 158, 170, 172, 183, 216, 233], "symmetr": [3, 157, 158, 163, 212, 213, 219, 232], "bsc": [3, 157, 158, 163, 219, 232, 233], "bec_capac": [3, 155, 233], "erasur": [3, 154, 155, 163, 219, 232], "bec": [3, 154, 155, 163, 219, 232, 233], "awgn_capac": [3, 152, 233], "addit": [3, 151, 152, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 215, 219, 232], "white": [3, 151, 152, 219, 232], "gaussian": [3, 5, 151, 152, 173, 219, 232, 233], "nois": [3, 8, 9, 10, 15, 21, 41, 43, 44, 45, 46, 47, 105, 111, 113, 117, 120, 130, 136, 140, 142, 144, 151, 152, 165, 166, 168, 169, 186, 197, 210, 211, 219, 229, 232], "awgn": [3, 130, 136, 140, 142, 144, 151, 152, 170, 186, 187, 197, 212, 213, 219, 230, 232, 233], "fspl": [3, 172], "d": [3, 31, 48, 54, 91, 172, 183, 221, 222, 232], "f": [3, 16, 18, 31, 56, 57, 80, 81, 91, 151, 171, 172, 173, 179, 183, 209, 216, 217, 225, 226, 227, 228, 229, 230, 231], "free": [3, 172, 232], "space": [3, 57, 81, 172, 232], "wavelength": [3, 216, 233], "lambda": [3, 172, 216], "electromagnet": [3, 216], "wave": [3, 216], "frequenc": [3, 8, 16, 18, 20, 31, 48, 56, 57, 72, 80, 81, 91, 113, 164, 171, 172, 179, 183, 189, 190, 192, 193, 194, 195, 198, 212, 213, 215, 216, 219, 231, 232, 233], "parabolic_antenna": [3, 183, 233], "tupl": [3, 31, 41, 43, 46, 48, 56, 57, 72, 80, 81, 91, 183, 187, 189, 190, 191, 192, 194, 195, 199, 200, 203], "gain": [3, 8, 11, 12, 13, 14, 15, 25, 27, 72, 73, 82, 113, 114, 115, 117, 122, 123, 125, 172, 173, 175, 183, 205, 206, 208, 229, 232], "g": [3, 46, 183, 222], "beamwidth": [3, 183], "theta": [3, 27, 122, 125, 127, 183], "parabol": [3, 183], "reflector": [3, 183], "signal": [4, 6, 8, 16, 18, 21, 22, 25, 26, 31, 32, 41, 43, 44, 45, 46, 47, 48, 49, 55, 65, 66, 72, 74, 91, 92, 113, 116, 122, 124, 129, 150, 151, 152, 159, 160, 164, 165, 166, 167, 168, 169, 171, 172, 173, 177, 178, 179, 180, 182, 183, 184, 185, 188, 193, 196, 198, 201, 204, 207, 209, 210, 211, 212, 213, 215, 216, 226, 227, 229, 231, 232, 233], "peak_pow": [4, 182, 184, 233], "bool": [4, 6, 31, 33, 48, 50, 63, 65, 67, 70, 72, 73, 75, 89, 91, 93, 140, 142, 150, 179, 184, 185, 187, 195, 196, 200, 201, 207], "fals": [4, 6, 31, 33, 34, 35, 48, 50, 52, 53, 65, 67, 72, 73, 75, 76, 77, 91, 92, 93, 94, 95, 140, 142, 150, 154, 157, 163, 179, 184, 185, 187, 193, 198, 201, 207, 227, 231], "peak": [4, 130, 144, 159, 170, 182, 184, 185], "average_pow": [4, 150, 182, 233], "averag": [4, 41, 130, 144, 150, 151, 152, 170, 182, 193], "papr": [4, 130, 144, 182, 228, 233], "ratio": [4, 21, 41, 43, 44, 45, 46, 47, 105, 111, 130, 140, 142, 144, 151, 152, 165, 166, 168, 169, 182, 186, 197, 210, 211], "peak_voltag": [4, 159, 185, 233], "rms_voltag": [4, 159, 207, 233], "root": [4, 5, 130, 136, 144, 170, 188, 201, 207, 208, 217, 218, 226, 232], "mean": [4, 170, 193, 198, 207, 231], "squar": [4, 5, 130, 136, 144, 170, 172, 183, 201, 207, 208, 226], "rm": [4, 159, 170, 207], "crest_factor": [4, 159, 182, 233], "crest": [4, 159], "errorr": [4, 41, 42, 43, 44, 45, 46, 47, 230, 233], "A": [4, 8, 16, 18, 19, 20, 21, 22, 24, 32, 41, 48, 49, 92, 113, 156, 174, 176, 177, 183, 205, 208, 220, 229], "error": [4, 6, 8, 14, 15, 21, 41, 42, 43, 45, 46, 47, 101, 105, 111, 113, 117, 130, 136, 140, 142, 144, 158, 170, 186, 197, 229, 232, 233], "ber": [4, 6, 41, 101, 105, 130, 136, 140, 144, 186, 230, 232, 233], "symbol": [4, 6, 41, 43, 46, 91, 101, 102, 106, 107, 108, 111, 112, 130, 131, 134, 135, 136, 137, 140, 142, 143, 144, 145, 146, 147, 151, 165, 166, 168, 169, 170, 171, 173, 175, 187, 188, 197, 200, 205, 206, 208, 210, 211, 228, 231, 232, 233], "ser": [4, 6, 41, 101, 111, 130, 136, 142, 144, 197, 230, 232, 233], "evm": [4, 170, 232, 233], "x_hat": [4, 6, 41, 43, 101, 107, 130, 134, 136, 144, 146, 170, 187, 230], "ref": [4, 170, 173, 180], "vector": [4, 41, 69, 170, 193, 198, 232, 233], "magnitud": [4, 6, 153, 170, 189, 192, 217, 232, 233], "hat": [4, 6, 43, 101, 107, 130, 134, 136, 144, 146, 170, 187, 200], "k": [4, 5, 6, 43, 101, 106, 107, 108, 109, 130, 134, 135, 136, 137, 144, 145, 146, 147, 161, 162, 165, 166, 168, 170, 187, 200, 210, 228, 231], "linearmodul": [5, 6, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 136, 200], "phase": [5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 101, 102, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 136, 137, 140, 141, 142, 143, 144, 145, 171, 177, 179, 194, 195, 219, 232], "amplitud": [5, 101, 102, 173, 177, 219, 225, 229], "psk": [5, 130, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 151, 170, 171, 177, 186, 187, 188, 197, 200, 209, 228, 232, 233], "shift": [5, 130, 136, 140, 141, 142, 143, 144, 217, 218, 226, 227, 232], "kei": [5, 130, 136, 140, 141, 142, 143, 144, 232], "demodul": [5, 101, 107, 130, 134, 136, 144, 146, 230], "pimpsk": [5, 144, 145, 146, 147], "pi": [5, 31, 76, 77, 91, 92, 130, 136, 144, 145, 151, 164, 172, 173, 177, 179, 183, 189, 190, 191, 192, 194, 195, 199, 201, 203, 212, 213, 215, 217, 225, 226, 227, 229], "m": [5, 72, 75, 79, 101, 102, 106, 107, 108, 109, 112, 130, 134, 135, 136, 137, 143, 144, 145, 146, 147, 163, 165, 166, 168, 172, 200, 210, 221, 222, 223, 224, 232], "oqpsk": [5, 130, 131, 132, 133, 134, 135], "offset": [5, 16, 18, 25, 27, 31, 91, 92, 101, 102, 110, 122, 125, 127, 130, 131, 136, 137, 141, 144, 145, 171, 179, 201, 209, 219, 229, 232, 233], "quadratur": [5, 130, 177], "rectangular": [5, 206, 228, 231], "span": [5, 6, 173, 175, 188, 205, 206, 208, 228, 231], "half_sin": [5, 175], "half": [5, 130, 175, 180, 183], "sine": [5, 175], "time_bandwidth": [5, 173], "raised_cosin": [5, 188, 205, 231, 233], "alpha": [5, 173, 202, 205, 208, 228, 231], "rais": [5, 130, 136, 144, 188, 201, 205, 208, 226, 232], "cosin": [5, 130, 136, 144, 188, 201, 205, 208, 226, 232], "rc": [5, 205], "root_raised_cosin": [5, 52, 53, 130, 136, 144, 188, 189, 190, 191, 192, 194, 195, 199, 201, 203, 208, 226, 228, 230, 231, 233], "srrc": [5, 188, 201, 208, 228], "binary_cod": [5, 156, 233], "gener": [5, 130, 136, 144, 151, 156, 174, 221, 230], "code": [5, 31, 34, 48, 52, 72, 76, 91, 94, 101, 103, 130, 131, 132, 136, 137, 138, 143, 144, 145, 153, 156, 165, 166, 168, 174, 187, 200, 210, 218, 222, 230, 233], "length": [5, 6, 31, 32, 48, 49, 51, 58, 62, 74, 91, 92, 93, 102, 131, 137, 145, 153, 156, 173, 174, 175, 180, 189, 191, 193, 196, 198, 199, 205, 206, 208, 212, 217, 218, 223, 225, 228, 231], "gray_cod": [5, 174, 233], "grai": [5, 130, 131, 136, 137, 143, 144, 145, 174, 187, 200, 230, 232], "diff_encod": [5, 140, 142, 161, 162, 233], "y_prev": [5, 161, 162], "differenti": [5, 140, 142, 161, 162, 201, 232, 233], "input": [5, 8, 16, 18, 21, 22, 25, 26, 31, 32, 33, 48, 49, 50, 58, 61, 62, 65, 66, 67, 69, 72, 73, 74, 75, 83, 88, 91, 92, 93, 113, 116, 122, 124, 130, 136, 140, 142, 144, 148, 151, 152, 154, 155, 157, 158, 160, 161, 162, 163, 164, 178, 181, 191, 199, 214, 215, 219, 226, 227, 229], "data": [5, 161, 162, 176, 181, 214, 232], "diff_decod": [5, 161, 162, 233], "y": [5, 25, 26, 30, 31, 32, 48, 49, 55, 66, 72, 74, 91, 92, 113, 116, 122, 124, 129, 130, 136, 144, 151, 154, 157, 161, 162, 163, 164, 171, 177, 179, 187, 192, 193, 198, 200, 201, 209, 215, 229, 230], "decod": [5, 161], "use_styl": [6, 202], "appli": [6, 31, 91, 130, 136, 144, 171, 177, 187, 188, 193, 198, 200, 201, 202, 209, 219], "default": [6, 58, 62, 131, 137, 143, 145, 187, 192, 193, 196, 198, 200, 202, 230], "matplotlib": [6, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 225, 226, 227, 228, 229, 230, 231, 232], "rcparam": [6, 202], "time_domain": [6, 31, 91, 92, 130, 136, 144, 151, 164, 179, 201, 212, 213, 215, 228, 230, 231, 233], "raster": [6, 188, 196, 232, 233], "none": [6, 31, 41, 45, 48, 58, 62, 65, 69, 91, 101, 105, 113, 121, 130, 136, 140, 142, 144, 151, 152, 163, 181, 187, 188, 189, 191, 193, 196, 198, 199, 200, 201, 214, 219, 225, 228, 230], "periodogram": [6, 164, 193, 212, 213, 215, 228, 232, 233], "sample_r": [6, 8, 15, 23, 31, 56, 57, 80, 81, 91, 92, 130, 136, 144, 164, 171, 179, 188, 189, 190, 192, 193, 194, 195, 196, 198, 201, 212, 213, 215, 225, 229, 231], "power": [6, 130, 136, 144, 150, 151, 152, 160, 170, 173, 175, 178, 182, 183, 184, 193, 205, 206, 208, 231, 232], "densiti": [6, 21, 193, 228, 231], "p_": [6, 140, 142, 150, 151, 160, 163, 170, 178, 182, 184, 186, 193, 197], "xx": [6, 193], "us": [6, 25, 28, 31, 33, 36, 39, 48, 50, 55, 60, 65, 67, 72, 73, 75, 86, 91, 92, 93, 96, 99, 101, 107, 113, 119, 130, 134, 136, 144, 146, 152, 155, 158, 170, 176, 180, 181, 187, 188, 189, 191, 193, 198, 199, 214, 221, 222, 223, 224, 226, 227, 230, 231, 232, 234], "welch": [6, 193, 198], "method": [6, 35, 36, 95, 96, 193, 198, 223, 226, 227, 233], "spectrogram": [6, 198, 232, 233], "constel": [6, 130, 136, 141, 144, 151, 170, 171, 177, 187, 209, 217, 232, 233], "heatmap": [6, 187, 230], "symbol_map": [6, 101, 102, 112, 130, 136, 141, 143, 144, 170, 200, 201, 230, 233], "map": [6, 101, 102, 112, 130, 136, 143, 144, 170, 200, 232, 233], "ey": [6, 188, 232, 233], "diagram": [6, 8, 25, 31, 91, 113, 122, 161, 162, 188, 232, 233], "kwarg": [6, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203], "function": [6, 7, 8, 17, 48, 72, 73, 113, 148, 149, 152, 164, 173, 186, 193, 197, 198, 215, 223, 226, 227, 229, 231, 232, 233], "e_b": [6, 43, 44, 45, 46, 47, 101, 105, 130, 136, 140, 144, 152, 165, 166, 168, 186, 210, 232], "n_0": [6, 21, 43, 44, 45, 46, 47, 101, 105, 111, 130, 136, 140, 142, 144, 151, 152, 165, 166, 168, 169, 170, 186, 187, 197, 210, 211, 230, 232], "e_": [6, 43, 44, 45, 46, 47, 101, 111, 130, 136, 142, 144, 151, 152, 165, 168, 169, 170, 187, 197, 211, 230, 232], "impulse_respons": [6, 31, 48, 58, 72, 83, 91, 173, 175, 180, 191, 205, 206, 208, 226, 227, 231, 233], "h": [6, 31, 48, 50, 52, 53, 56, 57, 58, 72, 80, 81, 83, 91, 113, 173, 180, 188, 189, 191, 192, 195, 204, 228, 229, 231], "step_respons": [6, 31, 48, 62, 72, 88, 91, 199, 226, 227, 229, 233], "step": [6, 25, 26, 30, 31, 48, 62, 72, 88, 91, 122, 124, 129, 189, 199, 232], "zeros_pol": [6, 203, 227, 233], "zero": [6, 31, 32, 48, 55, 69, 72, 73, 76, 77, 90, 91, 92, 93, 113, 175, 181, 189, 190, 191, 192, 194, 195, 199, 201, 203, 206, 212, 226, 228, 229, 231, 232, 233], "pole": [6, 72, 73, 76, 77, 85, 189, 190, 191, 192, 194, 195, 199, 203, 226, 232], "magnitude_respons": [6, 56, 57, 80, 81, 175, 180, 192, 205, 206, 208, 226, 227, 229, 231, 233], "omega": [6, 27, 31, 48, 56, 57, 72, 80, 81, 91, 122, 125, 126, 189, 190, 192, 194, 195, 229], "phase_respons": [6, 56, 57, 80, 81, 195, 233], "angl": [6, 195, 229], "phase_delai": [6, 194, 233], "delai": [6, 25, 31, 32, 35, 48, 49, 53, 54, 65, 91, 92, 95, 113, 122, 161, 162, 175, 190, 194, 206, 229, 232], "tau_": [6, 194], "phi": [6, 101, 102, 110, 130, 131, 136, 137, 141, 144, 145, 171, 177, 179, 194], "group_delai": [6, 190, 226, 227, 233], "group": [6, 190, 232], "tau_g": [6, 190], "complementari": [7, 148, 149], "cumul": [7, 148, 149], "distribut": [7, 148, 149], "standard": [7, 148, 149], "normal": [7, 8, 10, 15, 113, 117, 120, 148, 149, 170, 173, 175, 198, 205, 206, 208, 229, 231], "mathcal": [7, 148, 149, 151, 163], "qinv": [7, 148, 149, 233], "invers": [7, 149], "closedlooppl": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 220, 229, 233], "defin": [8, 48, 72, 151, 163, 173, 217, 220, 227, 232], "perform": [8, 32, 49, 92, 140, 142, 164, 215, 217, 220, 226, 227, 230, 232], "close": [8, 15, 17, 220, 232, 233], "loop": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 220, 232, 233], "pll": [8, 9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 220, 232, 233], "thi": [8, 26, 31, 43, 44, 45, 47, 48, 72, 91, 101, 112, 124, 130, 136, 143, 144, 151, 152, 164, 170, 172, 180, 188, 192, 193, 196, 198, 201, 215, 221, 222, 223, 224, 225, 227, 229, 230, 231], "meant": 8, "analysi": [8, 15, 223, 229, 232, 233], "onli": [8, 32, 39, 49, 55, 60, 65, 69, 86, 92, 99, 131, 137, 143, 145, 151, 172, 175, 196, 206, 224, 229, 230], "block": [8, 25, 31, 91, 113, 122, 161, 162], "bb": [8, 228, 229], "ped": [8, 14, 15, 117, 229], "lf": [8, 229], "lo": [8, 229], "e": [8, 25, 46, 150, 154, 155, 167, 217, 222, 226, 227, 229, 230], "nco": [8, 11, 15, 25, 27, 28, 117, 122, 123, 124, 125, 126, 127, 128, 129, 220, 229, 232, 233], "local": [8, 221, 223, 229], "oscil": [8, 25, 28, 122, 125, 220, 229, 232, 233], "detector": [8, 14, 15, 117, 229], "filter": [8, 12, 13, 15, 17, 31, 32, 33, 36, 37, 39, 40, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 99, 100, 113, 114, 115, 116, 117, 118, 119, 120, 121, 130, 136, 144, 164, 173, 175, 180, 188, 189, 190, 191, 192, 194, 195, 199, 201, 203, 204, 205, 206, 208, 215, 220, 231, 232, 233], "numer": [8, 25, 28, 122, 125, 220, 227, 229, 232, 233], "control": [8, 25, 28, 122, 125, 205, 208, 220, 229, 232, 233], "The": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 54, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 68, 69, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 91, 92, 93, 96, 97, 98, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 234], "transfer": [8, 17, 48, 72, 73, 113, 173, 226, 227, 229], "2nd": [8, 113, 117, 220, 229, 233], "order": [8, 31, 32, 35, 41, 46, 48, 49, 53, 59, 65, 68, 72, 77, 84, 91, 92, 93, 95, 101, 102, 109, 113, 117, 130, 136, 137, 144, 145, 151, 165, 166, 168, 170, 171, 173, 187, 188, 196, 205, 208, 209, 210, 220, 227, 228, 229, 230, 233], "proport": [8, 12, 32, 92, 113, 114, 117, 172, 183, 220, 233], "plu": [8, 113, 117, 220, 233], "integr": [8, 13, 113, 115, 117, 220, 224, 227, 233], "z": [8, 25, 48, 72, 113, 122, 161, 162, 217, 226, 227, 229], "k_1": [8, 12, 113, 114, 229], "k_2": [8, 13, 113, 115, 229], "frac": [8, 16, 18, 21, 22, 31, 48, 54, 72, 91, 93, 113, 130, 136, 144, 150, 151, 152, 159, 165, 166, 168, 169, 170, 172, 173, 177, 178, 179, 182, 183, 207, 210, 211, 216, 217, 229], "k_0": [8, 11, 15, 27, 117, 122, 123, 125, 229], "k_p": [8, 14, 15, 117, 229], "refer": [8, 16, 18, 19, 20, 21, 22, 41, 65, 113, 140, 142, 151, 159, 170, 171, 173, 180, 182, 204, 205, 208, 209, 217, 227, 231, 232], "michael": [8, 16, 18, 19, 20, 21, 22, 113, 205, 208], "rice": [8, 16, 18, 19, 20, 21, 22, 113, 205, 208], "digit": [8, 16, 18, 19, 20, 21, 22, 25, 27, 113, 140, 142, 205, 208, 220, 229, 232, 233], "commun": [8, 16, 18, 19, 20, 21, 22, 113, 140, 142, 180, 204, 205, 208, 229, 232], "discret": [8, 16, 18, 19, 20, 21, 22, 113, 151, 163, 169, 205, 208, 211, 219, 225, 229, 232], "approach": [8, 16, 18, 19, 20, 21, 22, 113, 152, 155, 158, 205, 208, 229], "appendix": [8, 113, 205, 208], "lock": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "exampl": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 99, 100, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 136, 140, 141, 142, 143, 144, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 186, 187, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 229], "see": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 39, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 82, 84, 85, 86, 87, 89, 90, 99, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 136, 141, 143, 144, 164, 173, 175, 189, 190, 191, 192, 194, 195, 199, 203, 205, 206, 208, 232], "noise_bandwidth": [8, 15, 113, 117, 120], "damping_factor": [8, 15, 113, 117, 118], "creat": [8, 15, 25, 27, 31, 33, 41, 42, 48, 50, 65, 67, 72, 73, 75, 91, 92, 93, 101, 102, 113, 117, 122, 125, 130, 131, 136, 137, 141, 144, 145, 151, 153, 170, 171, 179, 201, 209, 212, 213, 217, 225, 229, 231], "object": [8, 15, 31, 34, 35, 41, 42, 48, 52, 53, 72, 76, 77, 91, 94, 95, 101, 102, 103, 104, 130, 131, 132, 133, 136, 137, 138, 139, 144, 145, 189, 190, 191, 192, 194, 195, 199, 203, 229, 233], "phase_lock_tim": [8, 22], "frequency_lock_tim": [8, 16], "freq_offset": [8, 16, 18], "lock_tim": [8, 18, 229], "phase_error_vari": [8, 21], "cn0": [8, 21], "varianc": [8, 21, 151], "steadi": [8, 21], "state": [8, 21, 31, 32, 39, 48, 49, 55, 60, 61, 63, 65, 69, 70, 72, 86, 87, 89, 91, 92, 99, 233], "bnt": [8, 10, 229], "bandwidth": [8, 9, 10, 15, 19, 113, 117, 120, 152, 173, 205, 208, 229, 231], "b_n": [8, 9, 10, 15, 16, 18, 21, 22, 113, 117, 120], "t": [8, 10, 15, 113, 117, 120, 173, 176, 223, 225], "bn": [8, 9], "hz": [8, 9, 15, 16, 18, 21, 56, 57, 80, 81, 113, 117, 120, 152, 160, 164, 171, 172, 173, 178, 179, 183, 212, 213, 216, 225], "zeta": [8, 15, 24, 113, 117, 118], "damp": [8, 15, 24, 113, 117, 118, 229], "k0": [8, 11, 15, 25, 27, 117, 122, 123, 125], "kp": [8, 14, 15, 117], "k1": [8, 12, 113, 114, 229], "k2": [8, 13, 113, 115, 229], "repres": [8, 17, 154, 155], "omega_n": [8, 20, 229], "natur": [8, 20], "radian": [8, 19, 20, 21, 25, 27, 144, 229], "omega_3db": [8, 19], "3": [8, 16, 18, 19, 22, 31, 37, 40, 41, 52, 53, 76, 77, 91, 92, 97, 100, 130, 136, 140, 141, 142, 143, 144, 151, 152, 153, 154, 156, 157, 160, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 187, 188, 189, 190, 191, 192, 194, 195, 199, 201, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 227, 229, 231, 232], "omega_": [8, 19], "textrm": [8, 19], "properti": [9, 10, 11, 12, 13, 14, 17, 19, 20, 23, 24, 28, 36, 37, 38, 40, 54, 59, 61, 63, 64, 68, 70, 71, 78, 79, 82, 84, 85, 87, 89, 90, 96, 97, 98, 100, 106, 109, 110, 112, 114, 115, 118, 119, 120, 123, 126, 127, 141, 143, 223, 233], "paramet": [15, 16, 18, 21, 26, 27, 30, 32, 33, 43, 44, 45, 47, 49, 50, 56, 57, 58, 62, 66, 67, 69, 73, 74, 75, 80, 81, 83, 88, 92, 93, 102, 105, 107, 108, 111, 116, 117, 124, 125, 129, 131, 134, 135, 137, 140, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "where": [15, 32, 49, 92, 102, 113, 117, 120, 137, 145, 151, 152, 163, 165, 166, 168, 173, 210, 217, 226, 227, 232], "period": [15, 113, 117, 120, 217], "second": [15, 16, 18, 22, 41, 113, 117, 120, 173], "critic": [15, 24, 113, 117, 118, 229], "underdamp": [15, 24, 113, 117, 118], "overdamp": [15, 24, 113, 117, 118], "ted": [15, 117], "t_": [16, 18, 22, 66, 173, 231], "fl": [16, 18], "delta": [16, 18, 31, 48, 58, 72, 83, 91, 191, 226, 227], "take": [16, 18, 22], "onto": [16, 18, 22], "equat": [16, 18, 19, 20, 21, 22, 72, 130, 136, 144, 172], "39": 16, "pl": [18, 22], "38": 18, "34": 19, "33": 20, "sigma_": 21, "theta_": 21, "carrier": [21, 136], "43": 21, "40": [22, 91, 164], "less": 24, "than": [24, 131, 137, 143, 145, 175, 177, 187, 200, 206], "greater": [24, 205, 208], "dd": [25, 26, 27, 28, 29, 30, 122, 220, 229, 232, 233], "direct": [25, 27, 220, 229, 232, 233], "synthes": [25, 27, 220, 229, 232, 233], "note": [25, 31, 37, 40, 48, 72, 91, 97, 100, 113, 122, 130, 136, 144, 151, 152, 155, 158, 161, 162, 173, 177, 183, 188, 204, 217], "increment": [25, 26, 27, 122, 124, 125, 126, 229], "v": [25, 122, 160, 178, 221], "output": [25, 26, 30, 31, 32, 48, 49, 58, 62, 72, 73, 75, 83, 88, 91, 92, 113, 116, 122, 124, 129, 151, 152, 153, 154, 155, 157, 158, 162, 163, 170, 178, 181, 191, 199, 214, 221, 225, 226, 227, 229], "constant": [25, 27, 113, 122, 125, 126, 193, 198, 227, 229], "accumul": [25, 27, 41, 122, 125, 126, 229], "absolut": [25, 27, 122, 125, 127, 131, 145, 152], "adder": [25, 31, 113, 122, 161, 162, 229], "__call__": [25, 26, 31, 32, 33, 48, 49, 50, 63, 65, 66, 67, 70, 72, 73, 74, 75, 89, 91, 92, 93, 113, 116, 122, 124, 233], "variabl": [25, 26, 122, 124, 176, 229], "reset": [25, 29, 31, 39, 48, 60, 65, 69, 72, 86, 91, 99, 113, 121, 122, 128], "forward": [25, 30, 122, 129], "vari": [26, 124], "number": [30, 41, 43, 44, 47, 56, 57, 58, 62, 80, 81, 83, 88, 101, 106, 129, 130, 136, 144, 151, 165, 166, 168, 173, 175, 176, 181, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 205, 206, 208, 210, 214], "equival": [31, 91, 151, 152, 169, 211, 222, 225], "first": [31, 41, 91, 181, 201, 214, 223, 224], "prototyp": [31, 37, 40, 91, 97, 100], "feedforward": [31, 33, 37, 40, 48, 50, 64, 72, 75, 79, 91, 93, 97, 100, 189, 190, 191, 192, 194, 195, 199, 203, 226, 227], "coeffici": [31, 33, 48, 50, 72, 75, 91, 93, 189, 190, 191, 192, 194, 195, 199, 203, 226, 227], "discard": 31, "between": [31, 33, 50, 63, 67, 70, 73, 75, 89, 91, 93, 172, 193, 196, 198, 229, 232], "each": [31, 32, 49, 91, 92, 170, 176, 193, 196, 198], "instead": [31, 91, 187], "decompos": [31, 91], "ar": [31, 32, 33, 37, 40, 41, 43, 44, 45, 47, 49, 50, 57, 67, 73, 75, 81, 91, 92, 93, 97, 100, 102, 130, 131, 136, 137, 144, 145, 152, 154, 155, 157, 158, 172, 175, 181, 187, 188, 189, 190, 192, 193, 194, 195, 196, 198, 200, 201, 202, 204, 206, 212, 213, 221, 222, 223, 225, 227, 229, 231, 232, 234], "commut": [31, 91], "parallel": [31, 91], "sum": [31, 48, 72, 231], "prevent": [31, 91, 130, 144], "need": [31, 91, 223, 224], "done": [31, 221], "case": [31, 91, 144], "2x": [31, 91], "6": [31, 37, 40, 41, 52, 53, 76, 77, 91, 92, 97, 100, 130, 136, 143, 144, 156, 160, 163, 164, 165, 166, 170, 172, 174, 176, 178, 183, 187, 188, 189, 190, 191, 192, 194, 195, 199, 200, 201, 203, 204, 205, 208, 212, 213, 215, 217, 224, 226, 227, 229, 230], "5": [31, 37, 40, 41, 52, 53, 91, 92, 97, 100, 130, 136, 144, 151, 154, 156, 157, 158, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 176, 177, 183, 188, 189, 190, 191, 192, 194, 195, 199, 201, 203, 204, 205, 208, 209, 210, 211, 212, 213, 215, 217, 221, 225, 226, 227, 228, 229, 230, 231], "summat": 31, "bottom": [31, 91], "top": [31, 91], "relat": [31, 37, 40, 91, 97, 100, 152, 173], "In": [31, 32, 33, 34, 35, 37, 40, 41, 49, 50, 52, 53, 63, 67, 70, 73, 75, 76, 77, 89, 91, 92, 93, 94, 95, 97, 100, 130, 136, 140, 141, 142, 143, 144, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 186, 187, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 225, 230], "np": [31, 37, 40, 76, 77, 91, 92, 97, 100, 130, 136, 140, 142, 144, 151, 152, 153, 154, 155, 157, 158, 163, 164, 170, 171, 172, 177, 179, 186, 187, 188, 189, 190, 191, 192, 194, 195, 197, 199, 201, 203, 204, 209, 212, 213, 215, 217, 225, 226, 227, 228, 229, 230, 231], "co": [31, 91, 92, 179], "64": [31, 176, 227], "arang": [31, 37, 40, 91, 92, 97, 100, 151, 153, 164, 179, 204, 212, 213, 215, 217, 225, 229], "280": 31, "7": [31, 34, 35, 37, 40, 91, 92, 94, 95, 97, 100, 130, 136, 143, 144, 156, 163, 170, 174, 176, 180, 201, 204, 217, 227], "kaiser": [31, 33, 34, 35, 36, 91, 92, 93, 94, 95, 96], "window": [31, 91, 193, 198], "out": [31, 34, 37, 40, 41, 52, 76, 91, 92, 94, 97, 100, 130, 136, 141, 143, 144, 148, 149, 153, 154, 156, 157, 160, 161, 162, 163, 165, 166, 168, 169, 170, 172, 174, 178, 181, 183, 190, 202, 204, 210, 211, 214, 216], "plt": [31, 91, 92, 130, 136, 140, 141, 142, 143, 144, 151, 152, 153, 155, 158, 164, 170, 171, 172, 173, 175, 177, 179, 180, 186, 187, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 203, 205, 206, 208, 209, 212, 213, 215, 217, 225, 226, 227, 228, 229, 230, 231], "figur": [31, 91, 92, 130, 136, 140, 141, 142, 143, 144, 151, 152, 153, 155, 158, 164, 170, 171, 172, 173, 175, 177, 179, 180, 186, 187, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 202, 203, 205, 206, 208, 209, 212, 213, 215, 217, 225, 226, 227, 228, 229, 230, 231], "figsiz": [31, 91, 92, 130, 136, 140, 141, 142, 143, 144, 151, 152, 153, 155, 158, 164, 170, 171, 172, 173, 175, 177, 179, 180, 186, 187, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 202, 203, 205, 206, 208, 209, 212, 213, 215, 217, 225, 226, 227, 228, 229, 230, 231], "8": [31, 37, 40, 76, 77, 91, 92, 97, 100, 130, 136, 140, 141, 142, 143, 144, 151, 152, 153, 155, 156, 158, 163, 164, 170, 172, 173, 174, 175, 176, 179, 180, 183, 186, 187, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 208, 212, 213, 215, 217, 222, 226, 227, 228, 229, 231], "plot": [31, 56, 57, 58, 62, 80, 81, 83, 88, 91, 92, 130, 136, 140, 141, 142, 143, 144, 151, 152, 153, 155, 158, 164, 170, 171, 172, 173, 175, 177, 179, 180, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 209, 212, 213, 215, 217, 225, 226, 227, 229, 230, 231, 232, 233], "marker": [31, 91, 92, 187, 200, 225, 226, 227, 230], "o": [31, 91, 92, 225], "label": [31, 91, 92, 131, 137, 140, 142, 145, 151, 170, 171, 173, 177, 186, 188, 196, 197, 198, 201, 205, 208, 209, 225, 228, 229, 230, 231], "titl": [31, 91, 140, 142, 151, 152, 153, 155, 158, 164, 170, 171, 177, 179, 186, 197, 201, 209, 212, 213, 215, 217, 225, 228, 229, 230, 231], "tight_layout": [31, 91, 140, 142, 151, 152, 153, 155, 158, 164, 170, 171, 172, 179, 186, 197, 201, 209, 212, 213, 215, 217, 228, 229, 230, 231], "preserv": [31, 33, 50, 63, 67, 70, 73, 75, 89, 91, 93, 188, 196], "call": [31, 32, 33, 49, 50, 63, 67, 70, 73, 75, 89, 91, 92, 93], "true": [31, 91, 92, 140, 142, 150, 152, 154, 155, 157, 158, 163, 172, 179, 184, 185, 187, 195, 196, 200, 202, 207, 228, 230], "y1": [31, 91, 92, 177], "70": [31, 176, 231], "y2": [31, 91, 92, 177], "140": [31, 164], "y3": [31, 91, 92], "210": 31, "y4": [31, 91], "y5": [31, 91], "flush": [31, 32, 48, 49, 55, 91, 92, 233], "y_1": [31, 91, 177], "y_2": [31, 91, 177], "y_3": [31, 91], "y_4": [31, 91], "y_5": [31, 91], "full": [31, 32, 49, 91, 92, 153], "__len__": [31, 48, 51, 91], "__repr__": [31, 34, 48, 52, 72, 76, 91, 94, 101, 103, 130, 132, 136, 138, 144], "style": [31, 34, 48, 52, 72, 76, 91, 94, 101, 103, 130, 132, 136, 138, 144, 202], "__str__": [31, 35, 48, 53, 72, 77, 91, 95, 101, 104, 130, 133, 136, 139, 144], "human": [31, 35, 48, 53, 72, 77, 91, 95, 101, 104, 130, 133, 136, 139, 144], "readabl": [31, 35, 48, 53, 72, 77, 91, 95, 101, 104, 130, 133, 136, 139, 144], "when": [31, 39, 48, 55, 58, 60, 62, 72, 83, 86, 88, 91, 99, 151, 152, 154, 155, 157, 158, 169, 189, 190, 191, 192, 194, 195, 199, 211, 217, 225, 226, 227], "pass": [31, 48, 55, 91, 151, 154, 157, 163, 170, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 219, 221, 222, 226, 227, 233], "through": [31, 48, 55, 91, 130, 144, 154, 157, 163, 219, 226, 227, 229], "indic": [31, 33, 48, 50, 63, 65, 67, 70, 72, 73, 75, 89, 91, 93, 102, 130, 131, 136, 137, 140, 142, 144, 145, 150, 173, 175, 177, 179, 184, 185, 188, 195, 196, 201, 205, 206, 207, 208], "whether": [31, 33, 48, 50, 63, 65, 67, 70, 72, 73, 75, 89, 91, 93, 140, 142, 150, 179, 184, 185, 195, 196, 201, 207], "consist": [31, 43, 44, 45, 46, 47, 48, 61, 91], "previou": [31, 33, 48, 50, 61, 67, 69, 73, 75, 91, 93, 161, 162], "u": [31, 48, 62, 72, 88, 91, 199, 217, 218, 226, 227], "frequency_respons": [31, 48, 56, 72, 80, 91, 233], "numpi": [31, 41, 46, 48, 56, 57, 72, 80, 81, 91, 151, 214, 225, 226, 227, 228, 229, 230, 231, 232], "frequency_response_log": [31, 48, 57, 72, 81, 91], "logarithm": [31, 48, 57, 72, 81, 91, 189, 190, 192, 193, 194, 195, 226, 227], "axi": [31, 48, 57, 72, 81, 91, 187, 188, 189, 190, 192, 193, 194, 195, 196, 198, 200, 201, 225], "custom": [31, 36, 91, 96], "design": [31, 33, 36, 91, 93, 96, 180, 221, 232, 233], "multir": [31, 32, 33, 36, 91, 92, 93, 96, 180, 204, 233], "polyphase_tap": [31, 35, 37, 40, 91, 92, 95, 97, 100], "lfloor": [31, 48, 54, 91], "rfloor": [31, 48, 54, 91], "mode": [32, 33, 39, 49, 50, 55, 60, 63, 65, 67, 69, 70, 73, 75, 86, 89, 92, 93, 99, 153, 217], "l": [32, 49, 74, 92], "non": [32, 49, 92, 175, 206], "stream": [32, 33, 34, 35, 39, 49, 50, 52, 53, 55, 60, 63, 65, 67, 69, 70, 73, 75, 76, 77, 86, 89, 92, 93, 94, 95, 99, 130, 136, 144, 227], "convolut": [32, 49, 91, 92], "ha": [32, 49, 91, 92, 136, 151, 164, 172, 173, 183, 215, 217, 229, 230, 231], "align": [32, 49, 92, 130, 225], "howev": [32, 43, 44, 45, 47, 49, 92, 113, 155, 158, 225], "produc": [32, 49, 91, 92, 173, 231], "final": [32, 49, 92], "requir": [32, 49, 92, 221, 222, 223, 224], "dictat": [32, 49, 92], "argument": [32, 33, 49, 92, 93, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 223, 226, 227], "specif": [33, 46, 93, 224, 231], "npt": [33, 93, 131, 137, 145, 189, 190, 191, 192, 194, 195, 199, 203], "string": [34, 35, 52, 53, 76, 77, 94, 95, 103, 104, 132, 133, 138, 139, 176, 193, 198, 233], "represent": [34, 35, 52, 53, 76, 77, 94, 95, 103, 104, 132, 133, 138, 139, 200, 233], "print": [35, 53, 77, 95, 176, 225, 226, 227, 229], "167": [35, 95], "24": [35, 95], "shape": [35, 53, 77, 92, 95, 130, 136, 144, 173, 175, 188, 201, 205, 206, 208, 227, 232, 233], "84": [35, 95], "befor": [37, 40, 97, 100, 234], "decomposit": [37, 40, 97, 100, 233], "after": [37, 40, 97, 100], "10": [37, 40, 41, 91, 92, 97, 100, 130, 136, 140, 142, 144, 150, 151, 156, 160, 163, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 194, 195, 197, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 225, 226, 227, 228, 229, 230, 231], "9": [37, 40, 91, 92, 97, 100, 130, 136, 144, 156, 163, 170, 174, 176, 204, 205, 208, 227, 228, 230, 231, 233], "measur": [41, 43, 150, 151, 159, 160, 167, 170, 178, 182, 184, 185, 207, 229, 232, 233], "new": [41, 42, 65, 67, 101, 102, 130, 131, 136, 137, 144, 145, 209], "from": [41, 56, 57, 72, 73, 80, 81, 101, 112, 130, 136, 143, 144, 160, 165, 166, 168, 169, 178, 193, 198, 210, 211, 221, 226, 227, 229, 232], "receiv": [41, 43, 140, 142, 170, 172, 188], "contain": [41, 151, 176], "add": [41, 43, 46, 130, 136, 144, 151, 171, 175, 196, 206, 209, 219, 230, 234], "total": [41, 173, 175, 205, 206, 208, 231], "count": [41, 44, 170], "error_r": [41, 45, 46, 230], "everi": [41, 225], "can": [41, 43, 44, 45, 47, 113, 151, 170, 173, 180, 181, 188, 193, 198, 222, 226, 227, 230, 232, 234], "obtain": 41, "follow": [41, 177, 187, 196, 198, 200, 202, 204, 229], "tabul": [41, 42], "given": [41, 43, 44, 45, 47, 65, 66, 170, 226, 227], "all": [41, 46, 170, 188, 196, 224, 232], "ascend": [41, 46], "correspond": [41, 46, 196], "other": [43, 44, 45, 47, 225, 234], "quantiti": [43, 44, 45, 46, 47], "user": [43, 44, 45, 47, 226, 227], "caution": [43, 44, 45, 47], "instanc": [43, 44, 45, 47, 223], "transmit": [43, 170, 188], "section": [43, 44, 45, 46, 47, 227, 229], "whatev": 46, "wa": [46, 152], "provid": [46, 101, 105, 111, 130, 136, 140, 142, 144, 196, 232], "wrapper": [48, 72], "scipi": [48, 72, 193, 198, 231, 232], "convolv": [48, 201], "It": [48, 72, 91, 113, 151, 188], "support": [48, 72, 233], "one": [48, 72, 130, 131, 137, 143, 145, 173, 176, 188, 189, 190, 192, 193, 194, 195, 198, 212, 226, 227, 228, 231], "its": [48, 72, 73, 151, 226, 227, 231], "sum_": [48, 72, 150, 151, 152, 167, 170, 207], "limits_": [48, 72], "valid": [49, 172, 188, 196, 217], "same": [49, 92, 201, 226], "0013559842808217807": [52, 53], "005995136544658217": [52, 53], "008698817681933214": [52, 53], "0024103767414047302": [52, 53], "010205586837665018": [52, 53], "018983779931504997": [52, 53], "011950905288150394": [52, 53], "01518393864077397": [52, 53], "051622191325047306": [52, 53], "07210389837804473": [52, 53], "04745944982876247": [52, 53], "039173517569276436": [52, 53], "17918683372907862": [52, 53], "3367363220550604": [52, 53], "4611457574513795": [52, 53], "5084040873607553": [52, 53], "30": [53, 91, 130, 136, 144, 164, 189, 191, 199, 212, 213, 227, 233], "31": 53, "15": [53, 156, 174, 204, 215], "remain": [55, 164, 181], "1024": [56, 57, 80, 81, 189, 190, 192, 194, 195, 228, 231], "decad": [57, 81, 189, 190, 192, 194, 195, 226, 229], "resampl": [65, 66, 67, 68, 69, 70, 71, 180, 204, 232, 233], "http": [65, 159, 173, 180, 182, 217, 221, 222], "wirelesspi": 65, "com": [65, 173, 180, 222], "fraction": [65, 69, 173, 225], "structur": 65, "index": [65, 69, 188, 196, 200, 221], "should": [69, 188, 222], "equal": 69, "three": [69, 225, 231], "If": [69, 150, 151, 152, 163, 181, 184, 185, 187, 188, 189, 191, 193, 196, 198, 199, 200, 201, 207, 212, 214, 232], "lfilter": 72, "b_i": [72, 75, 79, 189, 190, 191, 192, 194, 195, 199, 203, 227], "feedback": [72, 75, 78, 189, 190, 191, 192, 194, 195, 199, 203, 227], "a_j": [72, 75, 78, 189, 190, 191, 192, 194, 195, 199, 203, 227], "These": [72, 130, 136, 144, 202, 222, 229], "differ": [72, 131, 137, 143, 145, 201, 217, 231], "a_0": 72, "left": [72, 130, 136, 144, 150, 151, 152, 167, 170, 172, 173, 177, 179, 183, 184, 185, 207, 217], "right": [72, 130, 136, 144, 150, 151, 152, 167, 170, 172, 173, 177, 179, 183, 184, 185, 207, 217], "b": [72, 75, 152, 173, 176, 189, 191, 199, 221, 231], "classmethod": [72, 73], "zerospol": [72, 73, 76, 77, 189, 190, 191, 192, 194, 195, 199, 203, 227], "self": [72, 73], "100": [72, 83, 88, 140, 142, 151, 152, 155, 158, 160, 170, 178, 179, 186, 188, 189, 191, 197, 199, 201, 209, 212, 213, 215, 223, 225, 229], "b_tap": [72, 77, 79, 227], "a_tap": [72, 77, 78, 227], "exp": [76, 77, 130, 136, 144, 164, 173, 177, 179, 189, 190, 191, 192, 194, 195, 199, 201, 203, 213, 215, 217, 225, 227, 229], "1j": [76, 77, 164, 179, 189, 190, 191, 192, 194, 195, 199, 201, 203, 213, 215, 225, 227, 229], "conj": [76, 77, 189, 190, 191, 192, 194, 195, 199, 203, 227, 229], "478207252018059": [76, 77, 227], "6400000000000001": [76, 77, 227], "7391036260090295": [77, 227], "3061467458920719j": [77, 227], "insert": 91, "multipli": 91, "hold": [91, 93, 181, 233], "20": [91, 92, 152, 154, 157, 160, 163, 170, 171, 176, 177, 178, 185, 204, 207, 215, 228, 230, 231, 233], "recommend": 91, "wai": [91, 222], "11": [91, 130, 136, 144, 156, 174, 180, 204, 221], "zoh": [91, 93, 96], "12": [91, 130, 136, 144, 156, 174, 180, 204, 226, 230], "13": [91, 153, 156, 174, 204, 233], "iter": 92, "concaten": [92, 227], "linearli": 93, "2r": 93, "ramp": [93, 113], "ones": [93, 229], "modul": [101, 102, 108, 109, 130, 135, 136, 137, 140, 142, 144, 145, 147, 151, 165, 166, 168, 170, 171, 177, 186, 187, 188, 197, 200, 209, 210, 221, 224, 228, 230, 232, 233], "phase_offset": [101, 102, 110, 130, 131, 136, 137, 141, 144, 145, 151, 170, 171, 177, 187, 188, 200, 209, 228, 230], "maximum": [101, 107, 130, 134, 136, 144, 146, 173, 175, 187, 200, 205, 206, 208], "likelihood": [101, 107, 130, 134, 136, 144, 146], "estim": [101, 107, 130, 134, 136, 144, 146, 193, 198, 229], "abstract": [101, 105, 111], "valu": [101, 102, 105, 111, 130, 131, 136, 137, 140, 142, 144, 145, 148, 149, 153, 160, 161, 162, 173, 177, 178, 187, 200, 227, 233], "log_2": [101, 106, 130, 136, 144, 152, 165, 166, 168, 210], "degre": [101, 102, 110, 130, 131, 136, 137, 141, 144, 145, 171, 177, 179, 183], "dot": [101, 102, 112, 130, 136, 143, 144, 200], "mapsto": [101, 102, 112, 130, 136, 143, 144, 200], "mathbb": [101, 102, 112, 130, 136, 143, 144, 152, 200, 217], "whose": [102, 131, 136, 137, 145], "energi": [105, 111, 140, 142, 152, 165, 166, 167, 168, 169, 173, 175, 186, 197, 205, 206, 208, 210, 211, 232, 233], "psd": [105, 111, 140, 142, 152, 165, 166, 168, 169, 186, 197, 210, 211], "p_b": 105, "p_e": 111, "loopfilt": [113, 114, 115, 116, 117, 118, 119, 120, 121, 220, 229, 233], "ppi": [113, 117, 220], "track": 113, "cannot": 113, "chirp": 113, "underli": [113, 119], "qpsk": [130, 136, 140, 141, 142, 144, 151, 170, 171, 186, 187, 188, 197, 200, 201, 209], "scheme": [130, 136, 144], "similar": [130, 144, 223, 231], "convent": [130, 144], "One": [130, 144, 231], "distinct": [130, 144], "channel": [130, 140, 142, 152, 154, 155, 157, 158, 163, 186, 197, 232, 233], "transit": [130, 144, 157, 158, 163, 219], "independ": 130, "apart": 130, "origin": [130, 144, 215, 225], "which": [130, 144, 151, 152, 171, 177, 183, 187, 200, 209, 225, 229, 231], "result": [130, 144, 150, 172, 183, 184, 185, 205, 207, 208, 230], "lower": [130, 144, 192, 193, 205, 208], "taken": [130, 136, 144], "jq": 130, "begin": [130, 144], "end": [130, 144, 212], "modem": [130, 136, 144], "45": [130, 131, 136, 141, 151, 170, 171, 177, 179, 187, 188, 200, 209, 228, 230], "symbol_label": [130, 131, 136, 137, 143, 144, 145, 230], "random": [130, 136, 144, 151, 154, 157, 163, 170, 171, 177, 187, 188, 201, 209, 228, 230], "randint": [130, 136, 144, 151, 154, 157, 163, 170, 171, 177, 187, 188, 201, 209, 228, 230], "1000": [130, 136, 144, 170, 172, 201, 212, 213, 230], "dtype": [130, 136, 144, 181, 201, 214, 229], "uint8": [130, 136, 144, 181, 214], "70710678": [130, 136], "70710678j": [130, 136], "linestyl": [130, 136, 144, 187, 196, 200, 202, 217, 225, 229, 230, 231], "puls": [130, 136, 144, 173, 175, 188, 201, 205, 206, 208, 232, 233], "h_rrc": [130, 136, 144], "tx_fir": [130, 136, 144], "match": [130, 136, 144], "rx_fir": [130, 136, 144], "y_hat": [130, 136, 144], "bin": [131, 137, 143, 145, 170, 187, 200, 230], "consecut": [131, 137, 145], "adjac": [131, 137, 143, 145, 230, 231], "mai": [131, 137, 143, 145, 170, 187, 196, 198, 200, 202, 227], "more": [131, 137, 143, 145, 233], "start": [131, 137, 145, 221], "0j": [131, 137, 145], "go": [131, 137, 145], "counter": [131, 137, 145], "clockwis": [131, 137, 145], "around": [131, 137, 145], "circl": [131, 137, 145, 227], "encod": [136, 140, 142, 161, 162, 232], "inform": [136, 165, 166, 168, 210], "ge": [137, 145], "were": [140, 142], "simon": [140, 142], "alouini": [140, 142], "over": [140, 142, 176], "fade": [140, 142], "chapter": [140, 142, 180, 204], "singl": [140, 142], "john": [140, 142], "proaki": [140, 142], "optimum": [140, 142], "theoret": [140, 142, 186, 197, 230, 233], "curv": [140, 142, 186, 197], "bpsk": [140, 142, 186, 197, 201, 228], "psk8": [140, 142, 186, 197, 230], "psk16": [140, 142, 186, 197, 230], "linspac": [140, 142, 152, 155, 158, 172, 186, 197, 227, 228, 229, 230], "compar": [140, 142, 231], "de": [140, 142, 233], "se": [142, 197], "00000000e": [143, 144, 227], "00": [143, 144, 227], "00j": [143, 144], "07106781e": [143, 144], "01": [143, 144, 176, 227, 229], "01j": [143, 144], "12323400e": [143, 144], "17": [143, 144, 170, 183, 204], "83697020e": 143, "22464680e": [143, 144], "16j": [143, 144], "annot": [143, 200, 233], "odd": [144, 212], "rotat": [144, 179], "rel": [144, 217, 231], "even": [144, 173, 205, 208], "2m": 144, "displaystyl": 144, "text": [144, 150, 151, 152, 155, 158, 159, 160, 170, 171, 172, 178, 180, 182, 184, 185, 207, 209], "pi4_qpsk": 144, "probabl": [148, 149, 154, 155, 157, 158, 163, 219, 233], "exceed": [148, 149], "15865525393145707": [148, 149], "158655": [148, 149], "0000010494310452": [148, 149], "avg": [150, 151, 182], "log_": [150, 160, 172, 182, 184, 185, 207], "seed": 151, "ad": [151, 196, 223, 232, 233], "desir": [151, 230], "explicitli": 151, "assum": [151, 163, 181, 214], "known": 151, "must": [151, 173, 179, 196, 205, 208, 217], "default_rng": 151, "noisi": 151, "w": [151, 225, 226, 227, 228, 229, 230, 231], "sigma": [151, 152], "For": [151, 164, 172, 215, 226], "sim": 151, "cn": 151, "set": [151, 172, 187, 192, 193, 196, 198, 200, 202, 223, 224, 227], "sin": [151, 212], "1_000": [151, 171, 172, 177, 209, 228], "zorder": [151, 171, 209], "infti": [151, 152], "nand": 151, "capac": [152, 155, 158, 232, 233], "2d": [152, 196], "x_i": [152, 154, 155, 157, 158, 163, 177], "y_i": [152, 154, 155, 157, 158, 163], "monoton": 152, "decreas": 152, "limit": [152, 187, 192, 193, 200, 230], "xlabel": [152, 153, 155, 158, 170, 172, 217, 225, 228, 229, 231], "ylabel": [152, 153, 155, 158, 170, 172, 217, 225, 228, 229, 231], "grid": [152, 155, 158, 172, 202, 225, 228, 229, 231], "At": 152, "occur": 152, "view": [152, 223, 232], "59": 152, "shannon": 152, "semilogi": [152, 186, 197], "both": [152, 187, 200, 201, 225, 229], "barker": [153, 218, 232, 233], "bipolar": [153, 233], "sequenc": [153, 154, 157, 163, 217, 219, 232, 233], "format": [153, 223], "seq": 153, "have": [153, 164, 181, 201, 214, 215], "ideal": [153, 230], "minim": 153, "autocorrel": [153, 217], "sidelob": [153, 205, 208, 217], "corr": [153, 217], "correl": [153, 217], "lag": [153, 217], "size": [153, 163, 225, 229, 230, 231], "ab": [153, 217, 231], "25": [154, 157, 163, 188, 225, 228, 229, 231], "roughli": [154, 157, 225], "eras": 154, "14": [156, 174, 204, 222], "flip": 157, "h_b": 158, "cf": 159, "v_": [159, 160, 178, 185, 207], "en": [159, 182, 217], "wikipedia": [159, 182, 217], "org": [159, 182, 217], "wiki": [159, 182, 217], "type": [160, 170, 178, 181, 193, 198, 214, 233], "voltag": [160, 178, 185, 207, 232], "decibel": [160, 178, 232, 233], "ani": [160, 164, 178, 192, 193, 215, 224], "x_": [160, 178], "50": [160, 178, 200, 212, 213, 225, 228], "mhz": [160, 178], "77": [160, 176, 178], "50e6": 160, "76": [160, 176], "98970004336019": 160, "mw": [160, 178], "dbm": [160, 178], "dbv": [160, 178], "020599913279624": 160, "uncod": 162, "dmc": [163, 219, 232, 233], "memoryless": [163, 219, 232], "pr": 163, "y_j": 163, "alphabet": 163, "ldot": 163, "doe": [164, 215], "anti": [164, 215, 233], "alias": [164, 215, 233], "spectral": [164, 193, 228, 231], "effici": [164, 183, 215], "400": [164, 225], "x1": 164, "200": [164, 225, 230], "x2": 164, "130": 164, "x3": [164, 217], "spectrum": [164, 189, 190, 192, 193, 194, 195, 198, 212, 213, 215], "content": 164, "abov": [164, 215], "nyquist": [164, 188, 215, 231], "fold": 164, "cw": 164, "unalias": 164, "fft": [164, 193, 198, 212, 213, 215], "2048": [164, 212, 213, 215, 228], "xlim": [164, 215, 228, 229, 231], "qam": [165, 166, 168, 210], "249387366082999": [165, 166], "020599913279625": [165, 211], "sym": [166, 169, 173, 210, 211, 231], "750612633917001": [168, 210], "979400086720376": [168, 169], "system": [169, 180, 204, 211, 223, 224, 229, 232], "norm": [170, 173, 175, 205, 206, 208], "noiseless": 170, "sourc": 170, "max": [170, 184, 185, 223], "_": 170, "sqrt": [170, 173, 207, 217, 228, 229, 231], "instantan": 170, "percentil": [170, 192, 193, 198], "either": 170, "074207574012014": 170, "01915509865722": 170, "1900531436013": 170, "95th": 170, "95": 170, "396853153832232": 170, "inst_evm": 170, "hist": 170, "histogram": 170, "frequency_offset": [171, 219, 233], "freq_rat": 171, "cycl": [171, 201], "000": 171, "1e": [171, 230], "5e": 171, "deg": [171, 177], "path": [172, 223, 232], "loss": [172, 232], "distanc": 172, "meter": [172, 183, 216], "transmitt": 172, "far": 172, "field": 172, "neg": [172, 177], "impli": 172, "possibl": [172, 232], "so": [172, 173, 175, 205, 206, 208, 232], "km": 172, "link": [172, 232, 233], "ghz": [172, 183, 216], "1e3": [172, 179, 212], "1e9": [172, 183, 216], "92": 172, "44778322188337": 172, "doubl": [172, 183], "increas": [172, 183, 227], "2e3": 172, "98": 172, "468383135163": 172, "also": [172, 173, 232], "2e9": 172, "up": 172, "product": [173, 231], "side": [173, 189, 190, 192, 193, 194, 195, 198, 226, 227, 228, 231], "thought": [173, 234], "smaller": [173, 205, 208, 231], "wider": 173, "how": [173, 175, 188, 196, 201, 205, 206, 208, 223, 224], "nomin": 173, "ln": 173, "www": [173, 180], "mathwork": [173, 180], "help": [173, 180], "gaussdesign": 173, "html": [173, 180, 221], "onlinelibrari": 173, "wilei": 173, "doi": 173, "pdf": 173, "1002": 173, "9780470041956": 173, "app2": 173, "h_0p1": [173, 205, 208], "h_0p2": 173, "h_0p3": 173, "reason": [175, 206], "larger": [175, 177, 187, 200, 206], "h_half_sin": 175, "displai": [176, 187, 189, 190, 192, 193, 194, 195, 198, 200], "consid": 176, "line": [176, 201, 228], "quick": 176, "brown": 176, "fox": 176, "jump": 176, "lazi": 176, "dog": 176, "00000000": 176, "54": 176, "68": 176, "65": 176, "71": 176, "75": [176, 187, 229, 230], "69": 176, "63": 176, "6b": 176, "62": 176, "72": 176, "6f": 176, "6e": 176, "00000010": 176, "66": 176, "78": 176, "6a": 176, "6d": 176, "73": 176, "74": 176, "00000020": 176, "6c": 176, "61": 176, "7a": 176, "79": 176, "67": 176, "he": 176, "02": [176, 227, 229], "03": [176, 227], "04": [176, 227], "00000004": 176, "05": [176, 225, 227, 229], "06": 176, "07": 176, "08": 176, "00000008": 176, "09": 176, "0a": 176, "iq_imbal": [177, 219, 233], "iq": [177, 219, 232], "imbal": [177, 219, 232], "posit": 177, "compon": [177, 212, 213, 215], "lead": [177, 230], "g_i": 177, "180": 177, "g_q": 177, "x_q": 177, "horizont": 177, "stretch": 177, "while": [177, 231], "vertic": 177, "subplot": [177, 229, 230], "legend": [177, 225, 228, 229, 231], "northwest": 177, "northeast": 177, "50118723": 178, "36272725": 178, "9952623149688795": 178, "satisfi": 179, "le": [179, 183, 205, 208], "cdot": 179, "remov": [179, 193, 198, 233], "half_length": 180, "a_stop": 180, "80": [180, 217], "stopband": [180, 205, 208], "attenu": [180, 205, 208], "a_": 180, "stop": 180, "fred": [180, 204], "harri": [180, 204], "process": [180, 204, 227, 229, 232], "dsp": [180, 232], "designmultiratefir": 180, "dtypelik": [181, 214], "most": [181, 214], "signific": [181, 214], "enough": 181, "fill": 181, "last": [181, 221], "smallest": 181, "unsign": 181, "integ": 181, "diamet": 183, "55": 183, "eta": 183, "dbi": 183, "arcsin": 183, "83": 183, "dish": 183, "21": 183, "810210290266568": 183, "437435887991374": 183, "23": 183, "sinc": [183, 188, 221, 230], "antenna": [183, 232], "we": [183, 232], "observ": [183, 188], "830810203546193": 183, "529544741425365": 183, "keyword": [186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 226, 227], "pyplot": [186, 187, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 225, 226, 227, 228, 229, 230, 231], "scatter": 187, "overwritten": [187, 196, 198, 200], "rang": [187, 229, 230], "hist2d": 187, "10_000": 187, "color": [188, 196, 201, 228, 231], "imaginari": [188, 196, 201], "interleav": [188, 196], "base": [188, 196, 201], "examin": 188, "intersymbol": 188, "interfer": 188, "isi": 188, "decis": 188, "two": [188, 189, 190, 192, 193, 194, 195, 198, 217, 225, 226, 227], "cascad": 188, "why": 188, "often": [188, 225], "practic": 188, "n_time": [189, 227], "n_freq": 189, "x_axi": [189, 190, 192, 193, 194, 195, 198, 226, 227, 228, 229], "log": [189, 190, 192, 193, 194, 195, 226, 227, 229], "definit": [189, 190, 191, 192, 194, 195, 199, 203], "n_t": 189, "n_f": 189, "scale": [189, 190, 192, 193, 194, 195, 198, 226, 227], "option": [189, 190, 192, 193, 194, 195, 198], "h_srrc": [189, 190, 191, 192, 194, 195, 199, 201, 203, 230], "ylim": [190, 217, 226, 229, 230, 231], "48": 190, "52": 190, "10th": [192, 193, 198], "crop": [192, 193], "deep": [192, 193], "null": [192, 193, 231], "hann": [193, 198], "overlap": [193, 198, 228], "detrend": [193, 198], "median": 193, "segment": [193, 198], "256": [193, 198, 228], "point": [193, 198], "trend": [193, 198], "unwrap": [195, 229], "stride": 196, "colorbar": 196, "1d": 196, "determin": 196, "row": 196, "collect": 196, "linecollect": 196, "linewidth": [196, 217], "solid": [196, 201], "cmap": 196, "rainbow": 196, "pcolormesh": 198, "vmin": 198, "vmax": 198, "100th": 198, "shade": 198, "gouraud": 198, "markers": 200, "diff": [201, 228], "about": [201, 223, 224], "mutual": 201, "exclus": 201, "part": [201, 209, 229], "current": [201, 222], "dash": 201, "share": 201, "10e3": 201, "revert": 202, "rcdefault": 202, "_rc_param": 202, "rc_param": 202, "ax": 202, "autolayout": 202, "max_open_warn": 202, "titleweight": 202, "bold": 202, "arrang": 204, "down": 204, "column": 204, "notion": 204, "demonstr": 204, "18": [204, 230], "19": 204, "excess": [205, 208, 231], "narrow": [205, 208], "expens": [205, 208], "higher": [205, 208, 231], "h_0p5": [205, 208], "h_0p9": [205, 208], "affect": [205, 208], "longer": [205, 208, 212], "h_4": [205, 208], "h_8": [205, 208], "h_16": [205, 208], "h_rect": [206, 231], "sample_rate_offset": [209, 219, 233], "ppm": [209, 219], "million": 209, "append": [212, 228], "250": [212, 213], "300": [212, 213], "ksp": [212, 213], "notic": [212, 213, 225, 231], "conjug": [212, 213, 227], "500": [212, 213, 229], "now": [212, 213, 225], "150": [212, 213], "asymmetr": 213, "copi": 215, "299792458": 216, "zadoff_chu": [217, 218, 233], "zadoff": [217, 218, 232, 233], "chu": [217, 218, 232, 233], "prime": 217, "gcd": 217, "ne": 217, "cyclic": 217, "x_u": 217, "c_": 217, "2q": 217, "mod": 217, "e2": 217, "93chu_sequ": 217, "x_3": 217, "139": 217, "roll": [217, 231], "tile": 217, "x_5": 217, "x5": 217, "cross": 217, "xcorr": 217, "sphinx": 221, "immateri": 221, "theme": 221, "depend": [221, 223, 224], "store": [221, 222, 224], "txt": [221, 222, 223, 224], "myst": 221, "parser": 221, "updat": 221, "git": [221, 222], "math": 221, "dollar": 221, "ipykernel": 221, "nb": 221, "switch": 221, "pip": [221, 222, 223, 224, 232], "python3": [221, 222, 223, 224, 232], "built": 221, "run": 221, "command": 221, "dirhtml": 221, "locat": [221, 224], "home": 221, "page": 221, "site": 221, "directori": [221, 222], "get": 221, "necessari": 221, "webpag": 221, "webserv": 221, "easili": [221, 223, 224, 226, 227], "python": [221, 232], "server": 221, "8080": 221, "access": [221, 223], "web": 221, "browser": 221, "localhost": 221, "latest": [222, 232], "releas": [222, 233], "version": [222, 232], "main": [222, 231], "branch": [222, 223], "mhostett": [222, 233], "Or": [222, 224], "pre": 222, "To": 222, "activ": 222, "develop": [222, 223, 224], "librari": [222, 223, 224, 225, 230, 232, 234], "benefici": 222, "fashion": 222, "allow": [222, 224], "chang": [222, 234], "immedi": 222, "seen": 222, "upon": 222, "next": 222, "import": [222, 225, 226, 227, 228, 229, 230, 231, 232], "clone": 222, "repo": 222, "wherev": 222, "you": [222, 223, 224, 232], "like": [222, 232, 233], "flag": 222, "includ": [222, 223, 224, 232], "packag": [222, 232], "lint": 222, "test": [222, 232], "pylint": [222, 223], "black": 222, "jupyt": 222, "22": 222, "pytest": [222, 224], "cov": 222, "toml": [222, 223, 224], "xdist": 222, "benchmark": 222, "static": 223, "your": [223, 224], "dev": [223, 224], "variou": [223, 231], "nuisanc": 223, "warn": 223, "ignor": 223, "list": 223, "pyproject": [223, 224], "tool": [223, 224, 232], "src": 223, "_version": 223, "py": [223, 224], "disabl": 223, "comparison": 223, "callabl": 223, "doesn": 223, "understand": [223, 227], "metaclass": 223, "fixm": 223, "global": 223, "statement": 223, "invalid": 223, "name": 223, "miss": 223, "docstr": 223, "protect": 223, "too": 223, "mani": 223, "ancestor": 223, "attribut": 223, "public": 223, "unneed": 223, "min": 223, "120": 223, "manual": [223, 224], "file": [223, 224], "vscode": [223, 224], "json": [223, 224], "instruct": [223, 224], "invok": [223, 224], "edit": [223, 227], "ini_opt": 224, "minvers": 224, "addopt": 224, "showloc": 224, "testpath": 224, "execut": 224, "test_psk": 224, "infrastructur": 224, "debug": 224, "config": [225, 226, 227, 228, 229, 230, 231], "inlinebackend": [225, 226, 227, 228, 229, 230, 231], "print_figure_kwarg": [225, 226, 227, 228, 229, 230, 231], "facecolor": [225, 226, 227, 228, 229, 230, 231], "widget": [225, 226, 227, 228, 229, 230, 231], "continu": 225, "tx": 225, "decai": [225, 227], "fillstyl": 225, "imag": 225, "show": [225, 226, 227, 228, 229, 230, 231], "accomplish": [225, 230], "def": [225, 228, 230], "resample_sign": 225, "new_sample_r": 225, "ty": 225, "gca": [225, 230], "set_prop_cycl": [225, 230], "four": 225, "appear": 225, "fourth": 225, "do": 225, "315": 225, "32": 225, "below": [226, 227], "00095883": 226, "00175012": 226, "00423921": 226, "0058825": 226, "006151": 226, "00474595": 226, "0017044": 226, "00254816": 226, "00721645": 226, "0112324": 226, "01342358": 226, "01273202": 226, "00845058": 226, "0004368": 226, "01073669": 226, "02372977": 226, "03650247": 226, "04650654": 226, "05098525": 226, "04734644": 226, "03355896": 226, "00851486": 226, "02769991": 226, "07367348": 226, "12670447": 226, "1830132": 226, "23810898": 226, "28727058": 226, "3260799": 226, "3509384": 226, "35949665": 226, "conveni": [226, 227], "evalu": [226, 227], "envelop": [226, 227], "here": [226, 227], "altern": 227, "47820725": 227, "78207252e": 227, "58172329e": 227, "10862468e": 227, "86109590e": 227, "21565653e": 227, "01140214e": 227, "57286400e": 227, "67772160e": 227, "47338728e": 227, "10422993e": 227, "89312837e": 227, "12240078e": 227, "03953322e": 227, "69685122e": 227, "63882791e": 227, "81474977e": 227, "47193366e": 227, "85259041e": 227, "15647504e": 227, "23851924e": 227, "42176895e": 227, "84684395e": 227, "42721858e": 227, "72236648e": 227, "14721649e": 227, "10813095e": 227, "94024315e": 227, "78877688e": 227, "74077567e": 227, "87820725": 227, "53637958": 227, "94724205": 227, "13335164": 227, "1455082": 227, "04436799": 227, "88708159": 227, "71930943": 227, "5719707": 227, "46154771": 227, "39261642": 227, "36139242": 227, "35935288": 227, "3763214": 227, "40270968": 227, "43085717": 227, "45557651": 227, "47410241": 227, "48566716": 227, "49090568": 227, "49124786": 227, "48840102": 227, "4839738": 227, "47925143": 227, "47510421": 227, "47199608": 227, "47005584": 227, "46917696": 227, "46911955": 227, "denomin": 227, "73910363": 227, "30614675j": 227, "plane": 227, "endpoint": 227, "092337035029908": 227, "71104892744724": 227, "684365018955985": 227, "37868538208862": 227, "1263714068241546": 227, "9993519409971622": 227, "1909320767063554": 227, "016796159999999997": 227, "46380627201679264": 227, "3806359704987118j": 227, "4988817673846036": 227, "333342139809402j": 227, "5543277195082319": 227, "22961005941718524j": 227, "5291527586053246": 227, "2828380420991956j": 227, "lyon": 227, "3rd": 227, "insid": 227, "outsid": 227, "unstabl": 227, "n_symbol": 228, "pulse_shap": 228, "els": 228, "pb": 228, "x_bb_rect": 228, "papr_bb_rect": 228, "x_pb_rect": 228, "papr_pb_rect": 228, "x_bb_0p1": 228, "papr_bb_0p1": 228, "x_pb_0p1": 228, "papr_pb_0p1": 228, "x_bb_0p5": 228, "papr_bb_0p5": 228, "x_pb_0p5": 228, "papr_pb_0p5": 228, "x_bb_0p9": 228, "papr_bb_0p9": 228, "x_pb_0p9": 228, "papr_pb_0p9": 228, "2f": 228, "rf": [228, 229], "512": 228, "sweep_alpha": 228, "bb_papr": 228, "pb_papr": 228, "bpsk_bb_papr": 228, "bpsk_pb_papr": 228, "qpsk_bb_papr": 228, "qpsk_pb_papr": 228, "psk8_bb_papr": 228, "psk8_pb_papr": 228, "psk16_bb_papr": 228, "psk16_pb_papr": 228, "configur": 229, "loop_filt": 229, "0x000002276d2bcc08": 229, "theta_0": 229, "phase_error": 229, "freq_estim": 229, "suptitl": [229, 230], "avail": [229, 230, 232], "001": 229, "005": 229, "b_nt": 229, "0005": 229, "0125": 229, "015": 229, "0175": 229, "t_lock": 229, "analyze_psk": 230, "100_000": 230, "n0": 230, "tx_mf": 230, "1e6": 230, "s_hat": 230, "bpsk_ber": 230, "bpsk_ser": 230, "qpsk_ber": 230, "qpsk_ser": 230, "psk8_ber": 230, "psk8_ser": 230, "psk16_ber": 230, "psk16_ser": 230, "simul": [230, 232], "1e0": 230, "psk8_bin": 230, "psk8_grai": 230, "wors": 230, "rect": 231, "rc_0p1": 231, "rc_0p5": 231, "rc_0p9": 231, "pm": 231, "60": 231, "nearli": 231, "small": 231, "lobe": 231, "much": 231, "freqz": 231, "worn": 231, "whole": 231, "h_rc_0p1": 231, "h_rc_0p5": 231, "h_rc_0p9": 231, "p_rect": 231, "cumsum": 231, "p_rc_0p1": 231, "p_rc_0p5": 231, "p_rc_0p9": 231, "within": 231, "srrc_0p1": 231, "srrc_0p5": 231, "srrc_0p9": 231, "therefor": 231, "significantli": 231, "due": 231, "being": 231, "h_srrc_0p1": 231, "h_srrc_0p5": 231, "h_srrc_0p9": 231, "p_srrc_0p1": 231, "p_srrc_0p5": 231, "p_srrc_0p9": 231, "gauss_0p1": 231, "gauss_0p2": 231, "gauss_0p3": 231, "softwar": 232, "radio": 232, "goal": 232, "analyz": 232, "build": 232, "reli": 232, "interoper": 232, "veri": 232, "numba": 232, "acceler": 232, "computation": 232, "intens": 232, "addition": 232, "aim": 232, "replic": 232, "relev": 232, "matlab": 232, "toolbox": 232, "progress": 232, "someth": 232, "pleas": 232, "open": 232, "issu": 232, "github": 232, "pypi": 232, "api": [232, 234], "convers": [232, 233], "synchron": 232, "budget": [232, 233], "manipul": 232, "august": 233, "2023": 233, "without": 233, "matt": 233, "hostett": 233, "abil": 233, "improv": 233, "renam": 233, "superflu": 233, "replac": 233, "translat": 233, "fix": [233, 234], "juli": 233, "firinterpol": 233, "model": 233, "impair": 233, "fpsl": 233, "helper": 233, "semant": 234, "major": 234, "minor": 234, "patch": 234, "introduc": 234, "featur": 234, "backward": 234, "compat": 234, "make": 234, "bug": 234, "There": 234, "guarante": 234, "them": 234, "thei": 234}, "objects": {"": [[2, 0, 0, 1, "sdr", ""]], "sdr": [[8, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [25, 1, 1, "", "DDS", "Implements a direct digital synthesizer (DDS)."], [31, 1, 1, "", "Decimator", "Implements a polyphase finite impulse response (FIR) decimating filter."], [41, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [48, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [65, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [72, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [91, 1, 1, "", "Interpolator", "Implements a polyphase finite impulse response (FIR) interpolating filter."], [101, 1, 1, "", "LinearModulation", "Implements linear phase/amplitude modulation with arbitrary symbol mapping."], [113, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [122, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [130, 1, 1, "", "OQPSK", "Implements offset quadrature phase-shift keying (OQPSK) modulation and demodulation."], [136, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [144, 1, 1, "", "PiMPSK", "Implements $pi/M$ phase-shift keying ($pi/M$ PSK) modulation and demodulation."], [148, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [149, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [150, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [151, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [152, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [153, 5, 1, "", "barker", "Returns the Barker code/sequence of length $N$."], [154, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [155, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [156, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [157, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [158, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [159, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [160, 5, 1, "", "db", "Converts from linear units to decibels."], [161, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [162, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [163, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [164, 5, 1, "", "downsample", "Downsamples the time-domain signal $x[n]$ by the factor $r$."], [165, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [166, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [167, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [168, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [169, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [170, 5, 1, "", "evm", "Calculates the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [171, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [172, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [173, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [174, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [175, 5, 1, "", "half_sine", "Returns a half-sine pulse shape."], [176, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [177, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [178, 5, 1, "", "linear", "Converts from decibels to linear units."], [179, 5, 1, "", "mix", "Mixes the time-domain signal $x[n]$ with a complex exponential or real sinusoid."], [180, 5, 1, "", "multirate_taps", "Computes the multirate FIR filter that achieves rational resampling by $P/Q$."], [181, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [182, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [183, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [184, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [185, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [204, 5, 1, "", "polyphase_matrix", "Converts the multirate FIR filter taps $h_i$ into the polyphase matrix $H_{i, j}$ that achieves rational resampling by $P/Q$."], [205, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [206, 5, 1, "", "rectangular", "Returns a rectangular pulse shape."], [207, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [208, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [209, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [210, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [211, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [212, 5, 1, "", "to_complex_bb", "Converts the real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$ to a complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c} = f_{s,r}/2$."], [213, 5, 1, "", "to_real_pb", "Converts the complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$ to a real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r} = 2f_{s,c}$."], [214, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [215, 5, 1, "", "upsample", "Upsamples the time-domain signal $x[n]$ by the factor $r$."], [216, 5, 1, "", "wavelength", "Calculates the wavelength $lambda$ of a electromagnetic wave with frequency $f$."], [217, 5, 1, "", "zadoff_chu", "Returns the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.ClosedLoopPLL": [[9, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [10, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [11, 2, 1, "", "K0", "The NCO gain $K_0$."], [12, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [13, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [14, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [15, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [16, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [17, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [18, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [19, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [20, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [21, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [22, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [23, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [24, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[15, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [15, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [15, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [15, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [15, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[16, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[18, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[21, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.DDS": [[26, 3, 1, "", "__call__", "Steps the DDS with the variable phase increment signal $x[n]$."], [27, 3, 1, "", "__init__", "Creates a direct digital synthesizer (DDS)."], [28, 2, 1, "", "nco", "The numerically-controlled oscillator (NCO) used by the DDS."], [29, 3, 1, "", "reset", "Resets the DDS."], [30, 3, 1, "", "step", "Steps the DDS forward by $N$ samples."]], "sdr.DDS.__call__": [[26, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the DDS."]], "sdr.DDS.__init__": [[27, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [27, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [27, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.DDS.step": [[30, 4, 2, "p-N", "N", "The number of samples $N$ to step the DDS forward."]], "sdr.Decimator": [[32, 3, 1, "", "__call__", "Filters and decimates the input signal $x[n]$ with the polyphase FIR filter."], [33, 3, 1, "", "__init__", "Creates a polyphase FIR decimating filter."], [34, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [35, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [36, 2, 1, "", "method", "The method used to design the multirate filter."], [37, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [38, 2, 1, "", "rate", "The decimation rate $r$."], [39, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [40, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Decimator.__call__": [[32, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [32, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Decimator.__init__": [[33, 4, 2, "p-rate", "rate", "The decimation rate $r$."], [33, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [33, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.ErrorRate": [[42, 3, 1, "", "__init__", "Creates a new error rate tabulation object."], [43, 3, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [44, 3, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [45, 3, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [46, 3, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [47, 3, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[43, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [43, 4, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [43, 4, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[44, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[45, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[47, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[49, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the FIR filter."], [50, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [51, 3, 1, "", "__len__", "Returns the filter length $N + 1$."], [52, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [53, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [54, 2, 1, "", "delay", "The delay of the FIR filter $d = lfloor frac{N + 1}{2} rfloor$ in samples."], [55, 3, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [56, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the FIR filter."], [57, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(omega)$ of the FIR filter on a logarithmic frequency axis."], [58, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [59, 2, 1, "", "order", "The order of the FIR filter $N$."], [60, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [61, 2, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [62, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [63, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [64, 2, 1, "", "taps", "The feedforward taps $h_i$ for $i = 0,...,N$."]], "sdr.FIR.__call__": [[49, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [49, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.FIR.__init__": [[50, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$ for $i = 0,...N$."], [50, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FIR.frequency_response": [[56, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [56, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.frequency_response_log": [[57, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [57, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [57, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[58, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.step_response": [[62, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FarrowResampler": [[66, 3, 1, "", "__call__", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [67, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [68, 2, 1, "", "order", "The order of the filter."], [69, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [70, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [71, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__call__": [[66, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [66, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.__init__": [[67, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FarrowResampler.reset": [[69, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[73, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [74, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the IIR filter."], [75, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [76, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [77, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [78, 2, 1, "", "a_taps", "The feedback taps $a_j$ for $j = 0,...,N$."], [79, 2, 1, "", "b_taps", "The feedforward taps $b_i$ for $i = 0,...,M$."], [80, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the IIR filter."], [81, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(omega)$ of the IIR filter on a logarithmic frequency axis."], [82, 2, 1, "", "gain", "The gain of the IIR filter."], [83, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [84, 2, 1, "", "order", "The order of the IIR filter $N$."], [85, 2, 1, "", "poles", "The poles of the IIR filter."], [86, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [87, 2, 1, "", "state", "The filter state."], [88, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [89, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [90, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[73, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [73, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [73, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."], [73, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__call__": [[74, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.IIR.__init__": [[75, 4, 2, "p-a", "a", "The feedback coefficients $a_j$ for $j = 0,...,N$."], [75, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$ for $i = 0,...,M$."], [75, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.IIR.frequency_response": [[80, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [80, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[81, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [81, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [81, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[83, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[88, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.Interpolator": [[92, 3, 1, "", "__call__", "Interpolates and filters the input signal $x[n]$ with the polyphase FIR filter."], [93, 3, 1, "", "__init__", "Creates a polyphase FIR interpolating filter."], [94, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [95, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [96, 2, 1, "", "method", "The method used to design the multirate filter."], [97, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [98, 2, 1, "", "rate", "The interpolation rate $r$."], [99, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [100, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Interpolator.__call__": [[92, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [92, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Interpolator.__init__": [[93, 4, 2, "p-rate", "rate", "The interpolation rate $r$."], [93, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [93, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.LinearModulation": [[102, 3, 1, "", "__init__", "Creates a new linear phase/amplitude modulation object."], [103, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [104, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [105, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [106, 2, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [107, 3, 1, "", "demodulate", "Demodulates the complex symbols $hat{x}[k]$ to decimal symbols $hat{s}[k]$ using maximum-likelihood estimation."], [108, 3, 1, "", "modulate", "Modulates to decimal symbols $s[k]$ to complex symbols $x[k]$."], [109, 2, 1, "", "order", "The modulation order $M = 2^k$."], [110, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [111, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [112, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.LinearModulation.__init__": [[102, 4, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [102, 4, 2, "p-symbol_map", "symbol_map", "The symbol mapping ${0, dots, M-1} mapsto mathbb{C}$. An $M$-length array whose indices are decimal symbols and whose values are complex symbols, where $M$ is the modulation order."]], "sdr.LinearModulation.ber": [[105, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.LinearModulation.demodulate": [[107, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to demodulate."]], "sdr.LinearModulation.modulate": [[108, 4, 2, "p-symbols", "symbols", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.LinearModulation.ser": [[111, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.LoopFilter": [[114, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [115, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [116, 3, 1, "", "__call__", "Filters the input signal $x[n]$."], [117, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [118, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [119, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [120, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [121, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__call__": [[116, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.LoopFilter.__init__": [[117, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [117, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [117, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [117, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.NCO": [[123, 2, 1, "", "K0", "The NCO gain $K_0$."], [124, 3, 1, "", "__call__", "Steps the NCO with the variable-increment signal $x[n]$."], [125, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [126, 2, 1, "", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [127, 2, 1, "", "offset", "The absolute offset $theta$ of the NCO in units."], [128, 3, 1, "", "reset", "Resets the NCO."], [129, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__call__": [[124, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the NCO."]], "sdr.NCO.__init__": [[125, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [125, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [125, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in units."]], "sdr.NCO.step": [[129, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.OQPSK": [[131, 3, 1, "", "__init__", "Creates a new OQPSK object."], [132, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [133, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [134, 3, 1, "", "demodulate", "Demodulates the complex symbols $hat{x}[k]$ to decimal symbols $hat{s}[k]$ using maximum-likelihood estimation."], [135, 3, 1, "", "modulate", "Modulates to decimal symbols $s[k]$ to complex symbols $x[k]$."]], "sdr.OQPSK.__init__": [[131, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [131, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.OQPSK.demodulate": [[134, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to demodulate."]], "sdr.OQPSK.modulate": [[135, 4, 2, "p-symbols", "symbols", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.PSK": [[137, 3, 1, "", "__init__", "Creates a new PSK object."], [138, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [139, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [140, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [141, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [142, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [143, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[137, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [137, 4, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [137, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[140, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [140, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.ser": [[142, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [142, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.PiMPSK": [[145, 3, 1, "", "__init__", "Creates a new $pi/M$ PSK object."], [146, 3, 1, "", "demodulate", "Demodulates the complex symbols $hat{x}[k]$ to decimal symbols $hat{s}[k]$ using maximum-likelihood estimation."], [147, 3, 1, "", "modulate", "Modulates to decimal symbols $s[k]$ to complex symbols $x[k]$."]], "sdr.PiMPSK.__init__": [[145, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [145, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [145, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PiMPSK.demodulate": [[146, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to demodulate."]], "sdr.PiMPSK.modulate": [[147, 4, 2, "p-symbols", "symbols", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.Q": [[148, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[149, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.average_power": [[150, 4, 2, "p-db", "db", "Indicates whether to return the result in dB."], [150, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[151, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [151, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [151, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [151, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[152, 4, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [152, 4, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.barker": [[153, 4, 2, "p-length", "length", "The length $N$ of the Barker code/sequence."], [153, 4, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[154, 4, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [154, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[155, 4, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[156, 4, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[157, 4, 2, "p-p", "p", "The probability $p$ of a bit flip."], [157, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[158, 4, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[159, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.db": [[160, 4, 2, "p-type", "type", "The type of input value or signal."], [160, 4, 2, "p-x", "x", "The input value or signal."]], "sdr.diff_decode": [[161, 4, 2, "p-y", "y", "The input encoded data $y[k]$."], [161, 4, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[162, 4, 2, "p-x", "x", "The input uncoded data $x[k]$."], [162, 4, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[163, 4, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [163, 4, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [163, 4, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [163, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.downsample": [[164, 4, 2, "p-rate", "rate", "The downsampling factor $r$."], [164, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.ebn0_to_esn0": [[165, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [165, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [165, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[166, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [166, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [166, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [166, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[167, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[168, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [168, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [168, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[169, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [169, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.evm": [[170, 4, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [170, 4, 2, "p-output", "output", "The output type of the EVM calculation."], [170, 4, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [170, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.frequency_offset": [[171, 4, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [171, 4, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [171, 4, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [171, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [171, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[172, 4, 2, "p-d", "d", "The distance $d$ in meters between the transmitter and receiver."], [172, 4, 2, "p-f", "f", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[173, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [173, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [173, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [173, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[174, 4, 2, "p-n", "n", "The length of the Gray code."]], "sdr.half_sine": [[175, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [175, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [175, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.hexdump": [[176, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [176, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[177, 4, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [177, 4, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [177, 4, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.linear": [[178, 4, 2, "p-type", "type", "The type of output value or signal."], [178, 4, 2, "p-x", "x", "The input value or signal in dB."]], "sdr.mix": [[179, 4, 2, "p-complex", "complex", "Indicates whether to mix by a complex exponential or real sinusoid."], [179, 4, 2, "p-freq", "freq", "The frequency $f$ of the sinusoid in Hz (or 1/samples if sample_rate=1). The frequency must satisfy $-f_s/2 le f le f_s/2$."], [179, 4, 2, "p-phase", "phase", "The phase $phi$ of the sinusoid in degrees."], [179, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal."], [179, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.multirate_taps": [[180, 4, 2, "p-A_stop", "A_stop", "The stopband attenuation $A_{text{stop}}$ in dB."], [180, 4, 2, "p-P", "P", "The interpolation rate $P$."], [180, 4, 2, "p-Q", "Q", "The decimation rate $Q$."], [180, 4, 2, "p-half_length", "half_length", "The half-length of the polyphase filters."]], "sdr.pack": [[181, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [181, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [181, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[182, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[183, 4, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [183, 4, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [183, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[184, 4, 2, "p-db", "db", "Indicates whether to return the result in dB."], [184, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[185, 4, 2, "p-db", "db", "Indicates whether to return the result in dB."], [185, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.plot": [[186, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [187, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [188, 5, 1, "", "eye", "Plots the eye diagram of the baseband modulated signal $x[n]$."], [189, 5, 1, "", "filter", "Plots the magnitude response $|H(omega)|^2$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [190, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [191, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [192, 5, 1, "", "magnitude_response", "Plots the magnitude response $|H(omega)|^2$ of the filter."], [193, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [194, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [195, 5, 1, "", "phase_response", "Plots the phase response $angle H(omega)$ of the filter."], [196, 5, 1, "", "raster", "Plots a raster of the time-domain signal $x[n]$."], [197, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [198, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [199, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [200, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [201, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [202, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [203, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[186, 4, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [186, 4, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."], [186, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."]], "sdr.plot.constellation": [[187, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [187, 4, 2, "p-kwargs", "kwargs", "If heatmap=False, additional keyword arguments to pass to matplotlib.pyplot.scatter(). The following keyword arguments are set by default. The defaults may be overwritten."], [187, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [187, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.eye": [[188, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [188, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [188, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [188, 4, 2, "p-span", "span", "The number of symbols per raster."], [188, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [188, 4, 2, "p-x", "x", "The baseband modulated signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved."]], "sdr.plot.filter": [[189, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [189, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [189, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [189, 4, 2, "p-filter", "filter", "The filter definition."], [189, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [189, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[190, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [190, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [190, 4, 2, "p-filter", "filter", "The filter definition."], [190, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [190, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [190, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.impulse_response": [[191, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [191, 4, 2, "p-filter", "filter", "The filter definition."], [191, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.magnitude_response": [[192, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [192, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [192, 4, 2, "p-filter", "filter", "The filter definition."], [192, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [192, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [192, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.periodogram": [[193, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [193, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [193, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [193, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [193, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [193, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [193, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [193, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [193, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [193, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_delay": [[194, 4, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [194, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [194, 4, 2, "p-filter", "filter", "The filter definition."], [194, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [194, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [194, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_response": [[195, 4, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [195, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [195, 4, 2, "p-filter", "filter", "The filter definition."], [195, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [195, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [195, 4, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [195, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.raster": [[196, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [196, 4, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\"."], [196, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.collections.LineCollection. The following keyword arguments are set by default. The defaults may be overwritten."], [196, 4, 2, "p-length", "length", "The length of each raster in samples. This must be provided if x is 1D."], [196, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [196, 4, 2, "p-stride", "stride", "The stride between each raster in samples. If None, the stride is set to length."], [196, 4, 2, "p-x", "x", "The time-domain signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved. If x is 1D, the rastering is determined by length and stride. If x is 2D, the rows correspond to each raster."]], "sdr.plot.ser": [[197, 4, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [197, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."], [197, 4, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.spectrogram": [[198, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [198, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [198, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.pcolormesh(). The following keyword arguments are set by default. The defaults may be overwritten."], [198, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [198, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [198, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [198, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [198, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [198, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[199, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [199, 4, 2, "p-filter", "filter", "The filter definition."], [199, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.symbol_map": [[200, 4, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [200, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot(). The following keyword arguments are set by default. The defaults may be overwritten."], [200, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [200, 4, 2, "p-modulation", "modulation", "The linear modulation or symbol map ${0, dots, M-1} mapsto mathbb{C}$."]], "sdr.plot.time_domain": [[201, 4, 2, "p-centered", "centered", "Indicates whether to center the x-axis about 0. This argument is mutually exclusive with offset."], [201, 4, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal. If \"color\", the real and imaginary parts will have different colors based on the current Matplotlib color cycle. If \"line\", the real part will have a solid line and the imaginary part will have a dashed line, and both lines will share the same color."], [201, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [201, 4, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. The units of the offset are $1/f_s$. This argument is mutually exclusive with centered."], [201, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [201, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[203, 4, 2, "p-filter", "filter", "The filter definition."], [203, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.polyphase_matrix": [[204, 4, 2, "p-P", "P", "The interpolation rate $P$."], [204, 4, 2, "p-Q", "Q", "The decimation rate $Q$."], [204, 4, 2, "p-taps", "taps", "The multirate FIR filter taps $h_i$."]], "sdr.raised_cosine": [[205, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [205, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [205, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [205, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rectangular": [[206, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [206, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [206, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[207, 4, 2, "p-db", "db", "Indicates whether to return the result in dB."], [207, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[208, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [208, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [208, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [208, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[209, 4, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [209, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.snr_to_ebn0": [[210, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [210, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [210, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [210, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[211, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [211, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.to_complex_bb": [[212, 4, 2, "p-x_r", "x_r", "The real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$. If the length is odd, one zero is appended to the end."]], "sdr.to_real_pb": [[213, 4, 2, "p-x_c", "x_c", "The complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$."]], "sdr.unpack": [[214, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [214, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [214, 4, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.upsample": [[215, 4, 2, "p-rate", "rate", "The upsampling factor $r$."], [215, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.wavelength": [[216, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.zadoff_chu": [[217, 4, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [217, 4, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence. The root must be relatively prime to the length, i.e., $gcd(u, N) = 1$."], [217, 4, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence. When $q ne 0$, the returned sequence is a cyclic shift of the root-$u$ Zadoff-Chu sequence."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"convers": 0, "decibel": 0, "from": [0, 222, 223, 224], "e_b": 0, "n_0": 0, "e_": 0, "": [0, 226, 227], "n": [0, 225, 226, 227], "data": 1, "manipul": [1, 2], "digit": [2, 227], "signal": [2, 219, 225, 228], "process": 2, "filter": [2, 6, 226, 227, 229], "multir": 2, "resampl": [2, 225], "correl": 2, "link": 3, "budget": 3, "channel": [3, 219], "capac": 3, "path": 3, "loss": 3, "antenna": 3, "measur": 4, "energi": 4, "power": [4, 228], "voltag": 4, "modul": [4, 5, 6], "linear": 5, "orthogon": 5, "puls": [5, 228, 231], "shape": [5, 228, 231], "symbol": [5, 230], "map": [5, 230], "encod": 5, "plot": [6, 228], "configur": [6, 223, 224], "time": [6, 228, 229], "domain": [6, 228, 229], "frequenc": [6, 226, 227, 228, 229], "spectral": 6, "estim": 6, "analysi": 6, "probabl": 7, "note": [8, 172, 180, 192, 193, 198], "constructor": [8, 25, 31, 41, 48, 65, 72, 91, 101, 113, 122, 130, 136, 144], "method": [8, 25, 31, 41, 48, 65, 72, 91, 101, 113, 122, 130, 136, 144], "properti": [8, 25, 31, 48, 65, 72, 91, 101, 113, 122, 130, 136, 144], "see": [25, 41, 43, 56, 57, 58, 62, 80, 81, 83, 88, 105, 111, 122, 140, 142, 148, 149, 159, 182, 215], "also": [25, 41, 43, 56, 57, 58, 62, 80, 81, 83, 88, 105, 111, 122, 140, 142, 148, 149, 159, 182, 215], "special": [25, 31, 48, 65, 72, 91, 113, 122], "string": [31, 48, 72, 91, 101, 130, 136, 144], "represent": [31, 48, 72, 91, 101, 130, 136, 144], "stream": [31, 48, 72, 91], "mode": [31, 48, 72, 91], "onli": [31, 48, 72, 91], "warn": [164, 215], "sequenc": 218, "simul": 219, "model": 219, "impair": 219, "synchron": 220, "document": 221, "instal": [221, 222, 223, 224, 232], "build": 221, "doc": 221, "serv": 221, "pypi": 222, "github": 222, "edit": 222, "local": 222, "folder": 222, "dev": 222, "depend": 222, "linter": 223, "run": [223, 224], "command": [223, 224], "line": [223, 224], "v": [223, 224], "code": [223, 224], "unit": 224, "test": 224, "farrow": 225, "arbitrari": 225, "construct": 225, "an": [225, 226, 227], "input": 225, "x": 225, "t_": 225, "rate": [225, 230], "r": 225, "y": 225, "frac": 225, "upsampl": 225, "integ": 225, "downsampl": 225, "irrat": 225, "fir": 226, "creat": [226, 227], "examin": [226, 227, 228], "impuls": [226, 227], "respons": [226, 227, 229], "h": [226, 227], "step": [226, 227, 229], "omega": [226, 227], "group": [226, 227], "delai": [226, 227], "tau_g": [226, 227], "fulli": [226, 227], "analyz": [226, 227, 229], "iir": 227, "zero": 227, "pole": 227, "stabil": 227, "peak": 228, "averag": 228, "qpsk": [228, 230], "variou": 228, "across": [228, 229], "excess": 228, "bandwidth": 228, "phase": [229, 230], "lock": 229, "loop": 229, "design": 229, "proport": 229, "plu": 229, "integr": 229, "ppi": 229, "implement": 229, "pll": 229, "close": 229, "perform": 229, "compar": 229, "zeta": 229, "b_n": 229, "t": 229, "shift": 230, "kei": 230, "constel": 230, "bpsk": 230, "8": 230, "psk": 230, "16": 230, "error": 230, "curv": 230, "bit": 230, "rais": 231, "cosin": 231, "squar": 231, "root": 231, "gaussian": 231, "sdr": 232, "featur": 232, "v0": 233, "0": 233, "6": 233, "chang": 233, "contributor": 233, "5": 233, "4": 233, "3": 233, "2": 233, "1": 233, "version": 234, "alpha": 234, "releas": 234, "beta": 234}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Conversions": [[0, "conversions"]], "Decibels": [[0, "decibels"]], "From E_b/N_0": [[0, "from-e-b-n-0"]], "From E_s/N_0": [[0, "from-e-s-n-0"]], "From S/N": [[0, "from-s-n"]], "Data manipulation": [[1, "data-manipulation"]], "Digital signal processing": [[2, "digital-signal-processing"]], "Filtering": [[2, "filtering"]], "Multirate filtering": [[2, "multirate-filtering"]], "Resampling": [[2, "resampling"]], "Correlation": [[2, "correlation"]], "Signal manipulation": [[2, "signal-manipulation"]], "Link budgets": [[3, "link-budgets"]], "Channel capacity": [[3, "channel-capacity"]], "Path losses": [[3, "path-losses"]], "Antennas": [[3, "antennas"]], "Measurement": [[4, "measurement"]], "Energy": [[4, "energy"]], "Power": [[4, "power"]], "Voltage": [[4, "voltage"]], "Modulation": [[4, "modulation"], [5, "modulation"], [6, "modulation"]], "Linear modulations": [[5, "linear-modulations"]], "Orthogonal modulations": [[5, "orthogonal-modulations"]], "Pulse shaping": [[5, "pulse-shaping"]], "Symbol mapping": [[5, "symbol-mapping"], [230, "symbol-mapping"]], "Symbol encoding": [[5, "symbol-encoding"]], "Plotting": [[6, "plotting"]], "Configuration": [[6, "configuration"], [223, "configuration"], [224, "configuration"]], "Time-domain": [[6, "time-domain"]], "Frequency-domain": [[6, "frequency-domain"]], "Spectral estimation": [[6, "spectral-estimation"]], "Filter analysis": [[6, "filter-analysis"]], "Probability": [[7, "probability"]], "Note": [[8, null], [172, null], [180, null], [192, null], [193, null], [193, null], [198, null]], "Constructors": [[8, "constructors"], [25, "constructors"], [31, "constructors"], [41, "constructors"], [48, "constructors"], [65, "constructors"], [72, "constructors"], [91, "constructors"], [101, "constructors"], [113, "constructors"], [122, "constructors"], [130, "constructors"], [136, "constructors"], [144, "constructors"]], "Methods": [[8, "methods"], [25, "methods"], [31, "methods"], [41, "methods"], [48, "methods"], [65, "methods"], [72, "methods"], [91, "methods"], [101, "methods"], [113, "methods"], [122, "methods"], [130, "methods"], [136, "methods"], [144, "methods"]], "Properties": [[8, "properties"], [25, "properties"], [31, "properties"], [48, "properties"], [65, "properties"], [72, "properties"], [91, "properties"], [101, "properties"], [113, "properties"], [122, "properties"], [130, "properties"], [136, "properties"], [144, "properties"]], "See also": [[25, null], [41, null], [43, null], [56, null], [57, null], [58, null], [62, null], [80, null], [81, null], [83, null], [88, null], [105, null], [111, null], [122, null], [140, null], [142, null], [148, null], [149, null], [159, null], [182, null], [215, null]], "Special methods": [[25, "special-methods"], [31, "special-methods"], [48, "special-methods"], [65, "special-methods"], [72, "special-methods"], [91, "special-methods"], [113, "special-methods"], [122, "special-methods"]], "String representation": [[31, "string-representation"], [48, "string-representation"], [72, "string-representation"], [91, "string-representation"], [101, "string-representation"], [130, "string-representation"], [136, "string-representation"], [144, "string-representation"]], "Streaming mode only": [[31, "streaming-mode-only"], [48, "streaming-mode-only"], [72, "streaming-mode-only"], [91, "streaming-mode-only"]], "Warning": [[164, null], [215, null]], "Sequences": [[218, "sequences"]], "Simulation": [[219, "simulation"]], "Channel models": [[219, "channel-models"]], "Signal impairments": [[219, "signal-impairments"]], "Synchronization": [[220, "synchronization"]], "Documentation": [[221, "documentation"]], "Install": [[221, "install"], [223, "install"], [224, "install"]], "Build the docs": [[221, "build-the-docs"]], "Serve the docs": [[221, "serve-the-docs"]], "Installation": [[222, "installation"], [232, "installation"]], "Install from PyPI": [[222, "install-from-pypi"]], "Install from GitHub": [[222, "install-from-github"]], "Editable install from local folder": [[222, "editable-install-from-local-folder"]], "Install the dev dependencies": [[222, "install-the-dev-dependencies"]], "Linter": [[223, "linter"]], "Run from the command line": [[223, "run-from-the-command-line"], [224, "run-from-the-command-line"]], "Run from VS Code": [[223, "run-from-vs-code"], [224, "run-from-vs-code"]], "Unit Tests": [[224, "unit-tests"]], "Farrow arbitrary resampler": [[225, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[225, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[225, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[225, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[225, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[225, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[225, "downsample-by-an-irrational-rate"]], "FIR filters": [[226, "fir-filters"]], "Create an FIR filter": [[226, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[226, "examine-the-impulse-response-h-n"], [227, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[226, "examine-the-step-response-s-n"], [227, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[226, "examine-the-frequency-response-h-omega"], [227, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[226, "examine-the-group-delay-tau-g-omega"], [227, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[226, "fully-analyze-a-fir-filter"]], "IIR filters": [[227, "iir-filters"]], "Create an IIR filter": [[227, "create-an-iir-filter"]], "Examine the zeros and poles": [[227, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[227, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[227, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[228, "peak-to-average-power"]], "QPSK signal with various pulse shapes": [[228, "qpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[228, "examine-time-domain"]], "Examine frequency domain": [[228, "examine-frequency-domain"]], "Plot across excess bandwidth": [[228, "plot-across-excess-bandwidth"]], "Phase-locked loops": [[229, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[229, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[229, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[229, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[229, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[229, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[229, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[229, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[230, "phase-shift-keying"]], "Constellations": [[230, "constellations"]], "BPSK": [[230, "bpsk"]], "QPSK": [[230, "qpsk"]], "8-PSK": [[230, "id1"]], "16-PSK": [[230, "id2"]], "Error rate curves": [[230, "error-rate-curves"]], "Bit error rate curves": [[230, "bit-error-rate-curves"]], "Symbol error rate curves": [[230, "symbol-error-rate-curves"]], "Pulse shapes": [[231, "pulse-shapes"]], "Raised cosine": [[231, "raised-cosine"]], "Square-root raised cosine": [[231, "square-root-raised-cosine"]], "Gaussian": [[231, "gaussian"]], "sdr": [[232, "sdr"]], "Features": [[232, "features"]], "v0.0": [[233, "v0-0"]], "v0.0.6": [[233, "v0-0-6"]], "Changes": [[233, "changes"], [233, "id1"], [233, "id3"], [233, "id5"], [233, "id7"], [233, "id9"]], "Contributors": [[233, "contributors"], [233, "id2"], [233, "id4"], [233, "id6"], [233, "id8"], [233, "id10"]], "v0.0.5": [[233, "v0-0-5"]], "v0.0.4": [[233, "v0-0-4"]], "v0.0.3": [[233, "v0-0-3"]], "v0.0.2": [[233, "v0-0-2"]], "v0.0.1": [[233, "v0-0-1"]], "Versioning": [[234, "versioning"]], "Alpha releases": [[234, "alpha-releases"]], "Beta releases": [[234, "beta-releases"]]}, "indexentries": {"module": [[2, "module-sdr"]], "sdr": [[2, "module-sdr"]]}, "docurls": ["api/conversions/", "api/data-manipulation/", "api/dsp/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.DDS/", "api/sdr.DDS.__call__/", "api/sdr.DDS.__init__/", "api/sdr.DDS.nco/", "api/sdr.DDS.reset/", "api/sdr.DDS.step/", "api/sdr.Decimator/", "api/sdr.Decimator.__call__/", "api/sdr.Decimator.__init__/", "api/sdr.Decimator.__repr__/", "api/sdr.Decimator.__str__/", "api/sdr.Decimator.method/", "api/sdr.Decimator.polyphase_taps/", "api/sdr.Decimator.rate/", "api/sdr.Decimator.reset/", "api/sdr.Decimator.taps/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__call__/", "api/sdr.FIR.__init__/", "api/sdr.FIR.__len__/", "api/sdr.FIR.__repr__/", "api/sdr.FIR.__str__/", "api/sdr.FIR.delay/", "api/sdr.FIR.flush/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.frequency_response_log/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.reset/", "api/sdr.FIR.state/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__call__/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__call__/", "api/sdr.IIR.__init__/", "api/sdr.IIR.__repr__/", "api/sdr.IIR.__str__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.state/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.Interpolator/", "api/sdr.Interpolator.__call__/", "api/sdr.Interpolator.__init__/", "api/sdr.Interpolator.__repr__/", "api/sdr.Interpolator.__str__/", "api/sdr.Interpolator.method/", "api/sdr.Interpolator.polyphase_taps/", "api/sdr.Interpolator.rate/", "api/sdr.Interpolator.reset/", "api/sdr.Interpolator.taps/", "api/sdr.LinearModulation/", "api/sdr.LinearModulation.__init__/", "api/sdr.LinearModulation.__repr__/", "api/sdr.LinearModulation.__str__/", "api/sdr.LinearModulation.ber/", "api/sdr.LinearModulation.bps/", "api/sdr.LinearModulation.demodulate/", "api/sdr.LinearModulation.modulate/", "api/sdr.LinearModulation.order/", "api/sdr.LinearModulation.phase_offset/", "api/sdr.LinearModulation.ser/", "api/sdr.LinearModulation.symbol_map/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__call__/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__call__/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.OQPSK/", "api/sdr.OQPSK.__init__/", "api/sdr.OQPSK.__repr__/", "api/sdr.OQPSK.__str__/", "api/sdr.OQPSK.demodulate/", "api/sdr.OQPSK.modulate/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.__repr__/", "api/sdr.PSK.__str__/", "api/sdr.PSK.ber/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.PiMPSK/", "api/sdr.PiMPSK.__init__/", "api/sdr.PiMPSK.demodulate/", "api/sdr.PiMPSK.modulate/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.barker/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.db/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.downsample/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.evm/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.half_sine/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.linear/", "api/sdr.mix/", "api/sdr.multirate_taps/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.eye/", "api/sdr.plot.filter/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.magnitude_response/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.raster/", "api/sdr.plot.ser/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.polyphase_matrix/", "api/sdr.raised_cosine/", "api/sdr.rectangular/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.to_complex_bb/", "api/sdr.to_real_pb/", "api/sdr.unpack/", "api/sdr.upsample/", "api/sdr.wavelength/", "api/sdr.zadoff_chu/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/installation/", "development/linter/", "development/unit-tests/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})