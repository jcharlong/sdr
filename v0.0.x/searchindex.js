Search.setIndex({"titles": ["Conversions", "Data manipulation", "Detection", "Digital signal processing", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.Decimator", "sdr.Decimator.__call__", "sdr.Decimator.__init__", "sdr.Decimator.__repr__", "sdr.Decimator.__str__", "sdr.Decimator.method", "sdr.Decimator.polyphase_taps", "sdr.Decimator.rate", "sdr.Decimator.reset", "sdr.Decimator.taps", "sdr.EnergyDetector", "sdr.EnergyDetector.p_d", "sdr.EnergyDetector.p_fa", "sdr.EnergyDetector.roc", "sdr.EnergyDetector.threshold", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__call__", "sdr.FIR.__init__", "sdr.FIR.__len__", "sdr.FIR.__repr__", "sdr.FIR.__str__", "sdr.FIR.delay", "sdr.FIR.flush", "sdr.FIR.frequency_response", "sdr.FIR.frequency_response_log", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.reset", "sdr.FIR.state", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__call__", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__call__", "sdr.IIR.__init__", "sdr.IIR.__repr__", "sdr.IIR.__str__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.state", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.Interpolator", "sdr.Interpolator.__call__", "sdr.Interpolator.__init__", "sdr.Interpolator.__repr__", "sdr.Interpolator.__str__", "sdr.Interpolator.method", "sdr.Interpolator.polyphase_taps", "sdr.Interpolator.rate", "sdr.Interpolator.reset", "sdr.Interpolator.taps", "sdr.LinearModulation", "sdr.LinearModulation.__init__", "sdr.LinearModulation.__repr__", "sdr.LinearModulation.__str__", "sdr.LinearModulation.ber", "sdr.LinearModulation.bps", "sdr.LinearModulation.decide_symbols", "sdr.LinearModulation.demodulate", "sdr.LinearModulation.map_symbols", "sdr.LinearModulation.modulate", "sdr.LinearModulation.order", "sdr.LinearModulation.phase_offset", "sdr.LinearModulation.pulse_shape", "sdr.LinearModulation.rx_filter", "sdr.LinearModulation.ser", "sdr.LinearModulation.sps", "sdr.LinearModulation.symbol_map", "sdr.LinearModulation.tx_filter", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__call__", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.MSK", "sdr.MSK.__init__", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__call__", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.reset", "sdr.NCO.step", "sdr.OQPSK", "sdr.OQPSK.__init__", "sdr.OQPSK.__repr__", "sdr.OQPSK.__str__", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.__repr__", "sdr.PSK.__str__", "sdr.PSK.ber", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.PiMPSK", "sdr.PiMPSK.__init__", "sdr.Q", "sdr.Qinv", "sdr.ReplicaCorrelator", "sdr.ReplicaCorrelator.p_d", "sdr.ReplicaCorrelator.p_fa", "sdr.ReplicaCorrelator.roc", "sdr.ReplicaCorrelator.threshold", "sdr.Resampler", "sdr.Resampler.__call__", "sdr.Resampler.__init__", "sdr.Resampler.__repr__", "sdr.Resampler.__str__", "sdr.Resampler.delay", "sdr.Resampler.down", "sdr.Resampler.method", "sdr.Resampler.polyphase_taps", "sdr.Resampler.rate", "sdr.Resampler.reset", "sdr.Resampler.taps", "sdr.Resampler.up", "sdr.albersheim", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.barker", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.db", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.downsample", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.evm", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.half_sine", "sdr.hexdump", "sdr.iq_imbalance", "sdr.linear", "sdr.mix", "sdr.multirate_taps", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.percent", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.eye", "sdr.plot.filter", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.magnitude_response", "sdr.plot.p_d", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.phase_tree", "sdr.plot.raster", "sdr.plot.roc", "sdr.plot.ser", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.polyphase_matrix", "sdr.ppb", "sdr.ppm", "sdr.raised_cosine", "sdr.rectangular", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.to_complex_bb", "sdr.to_real_pb", "sdr.unpack", "sdr.upsample", "sdr.wavelength", "sdr.zadoff_chu", "Sequences", "Simulation", "Synchronization", "Documentation", "Formatting", "Installation", "Unit Tests", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263], "db": [0, 4, 5, 9, 20, 22, 37, 39, 41, 43, 44, 45, 47, 105, 115, 128, 138, 142, 146, 148, 150, 155, 157, 172, 173, 174, 175, 183, 188, 189, 190, 191, 192, 193, 195, 196, 200, 201, 203, 205, 206, 207, 208, 210, 211, 217, 224, 236, 239, 240, 257, 259, 260, 262], "x": [0, 1, 3, 5, 6, 7, 8, 9, 26, 27, 36, 41, 43, 48, 49, 65, 66, 72, 74, 91, 92, 101, 108, 110, 119, 122, 128, 138, 142, 150, 152, 153, 154, 159, 160, 173, 174, 177, 180, 182, 183, 184, 185, 186, 187, 190, 193, 194, 200, 201, 202, 204, 205, 207, 208, 209, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 225, 227, 228, 232, 233, 236, 238, 243, 244, 248, 252, 257, 258, 259, 263], "arraylik": [0, 1, 2, 3, 4, 5, 6, 7, 8, 26, 27, 28, 36, 37, 38, 39, 40, 41, 43, 48, 49, 50, 65, 69, 72, 73, 74, 75, 91, 92, 93, 101, 102, 105, 107, 108, 109, 110, 115, 128, 129, 138, 139, 142, 143, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 172, 175, 177, 178, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 199, 201, 204, 206, 209, 213, 214, 215, 216, 217, 218, 219, 220, 223, 225, 226, 230, 231, 232, 233, 239, 240, 243, 245, 248], "ndarrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 26, 27, 32, 35, 36, 37, 38, 39, 40, 41, 46, 48, 49, 55, 56, 57, 58, 61, 62, 64, 65, 66, 71, 72, 74, 78, 79, 80, 81, 83, 85, 87, 88, 90, 91, 92, 97, 100, 101, 105, 107, 108, 109, 110, 113, 115, 117, 119, 122, 128, 130, 132, 137, 138, 142, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 167, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 221, 222, 224, 227, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248], "float_": [0, 2, 3, 4, 5, 6, 7, 8, 36, 37, 38, 39, 40, 41, 46, 101, 105, 113, 115, 128, 132, 138, 142, 146, 148, 150, 152, 153, 154, 155, 156, 157, 158, 172, 175, 178, 181, 183, 188, 189, 190, 191, 192, 195, 196, 198, 201, 203, 206, 209, 210, 224, 232, 233, 234, 235, 237, 239, 240, 241, 242, 245], "convert": [0, 3, 101, 107, 109, 128, 138, 142, 150, 183, 188, 189, 191, 192, 199, 201, 209, 231, 232, 233, 239, 240, 241, 242], "linear": [0, 91, 93, 96, 101, 102, 128, 138, 142, 150, 159, 161, 166, 174, 183, 201, 218, 223, 225, 227, 261, 262], "unit": [0, 26, 48, 62, 72, 88, 91, 119, 129, 130, 139, 143, 151, 159, 174, 175, 183, 184, 185, 201, 226, 228, 252, 255, 256, 258, 261, 262], "percent": [0, 209], "percentag": [0, 209], "ppm": [0, 233, 238, 248], "part": [0, 228, 232, 233, 238, 258], "per": [0, 1, 27, 49, 92, 101, 102, 106, 108, 110, 116, 128, 129, 132, 138, 139, 142, 143, 150, 151, 174, 175, 188, 189, 191, 192, 194, 196, 198, 199, 204, 211, 212, 221, 232, 233, 234, 235, 237, 238, 239, 240, 243, 251, 257, 260, 262], "million": [0, 233, 238], "ppb": [0, 232], "billion": [0, 232], "ebn0_to_esn0": [0, 115, 148, 188, 259, 262], "ebn0": [0, 7, 101, 105, 128, 138, 142, 146, 150, 175, 188, 189, 210, 259], "bp": [0, 101, 106, 128, 138, 142, 150, 188, 189, 191, 239, 259], "int": [0, 1, 3, 6, 7, 26, 28, 33, 41, 43, 44, 47, 48, 51, 54, 56, 57, 58, 59, 62, 65, 68, 72, 80, 81, 83, 84, 88, 91, 93, 98, 101, 102, 106, 111, 116, 128, 129, 130, 137, 138, 139, 142, 143, 150, 151, 159, 161, 165, 171, 173, 174, 176, 177, 179, 180, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 197, 198, 199, 203, 204, 205, 207, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 225, 226, 231, 234, 235, 237, 239, 240, 243, 244, 246, 247, 259], "ebn0_to_snr": [0, 128, 138, 142, 150, 189, 262], "esn0_to_ebn0": [0, 105, 146, 191, 262], "esn0": [0, 7, 101, 115, 128, 138, 142, 148, 150, 191, 192, 224, 259], "esn0_to_snr": [0, 192, 259, 262], "sp": [0, 6, 7, 101, 102, 108, 110, 116, 128, 129, 138, 139, 142, 143, 150, 151, 189, 192, 196, 198, 212, 221, 234, 235, 237, 239, 240, 241, 242, 257, 259, 260], "1": [0, 3, 6, 8, 9, 16, 19, 23, 25, 26, 28, 29, 30, 32, 35, 36, 37, 39, 40, 41, 48, 51, 52, 53, 54, 56, 57, 72, 73, 76, 77, 80, 81, 91, 92, 93, 94, 95, 97, 100, 101, 102, 107, 108, 109, 110, 117, 119, 123, 124, 128, 129, 130, 133, 138, 139, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 167, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 263], "snr_to_ebn0": [0, 105, 146, 175, 239, 262], "snr": [0, 2, 4, 7, 36, 37, 39, 41, 43, 44, 45, 46, 47, 128, 138, 142, 150, 172, 174, 175, 217, 239, 240, 241, 242, 248, 259, 262], "snr_to_esn0": [0, 115, 148, 240, 262], "pack": [1, 41, 43, 128, 138, 142, 150, 199, 204, 261, 262], "bpe": [1, 204, 243], "int_": [1, 6, 101, 107, 108, 128, 138, 142, 150, 177, 179, 180, 184, 185, 186, 197, 204, 243, 248], "binari": [1, 4, 6, 129, 139, 143, 149, 151, 176, 177, 178, 179, 180, 181, 186, 204, 227, 243, 248, 259, 261, 262], "arrai": [1, 32, 35, 41, 93, 97, 100, 102, 128, 129, 130, 138, 139, 142, 143, 149, 150, 151, 161, 167, 170, 173, 176, 177, 179, 180, 184, 185, 186, 190, 197, 204, 205, 207, 228, 231, 243, 256], "an": [1, 2, 3, 4, 26, 36, 48, 58, 72, 73, 75, 83, 91, 92, 102, 129, 130, 139, 143, 146, 148, 151, 154, 159, 175, 204, 210, 215, 224, 243, 245, 252, 261, 262], "multipl": [1, 204, 243, 259, 262], "bit": [1, 5, 7, 41, 43, 46, 101, 105, 106, 128, 129, 138, 139, 142, 143, 146, 149, 150, 151, 175, 177, 178, 180, 181, 188, 189, 191, 199, 204, 210, 239, 243, 261, 262], "element": [1, 199, 204, 243], "unpack": [1, 41, 43, 199, 243, 259, 261, 262], "hexdump": [1, 41, 199, 261, 262], "byte": [1, 199], "width": [1, 199], "16": [1, 146, 148, 149, 163, 188, 189, 191, 199, 210, 224, 231, 234, 237, 239, 240, 257, 262], "str": [1, 26, 29, 30, 48, 52, 53, 72, 76, 77, 91, 94, 95, 101, 103, 104, 128, 138, 140, 141, 142, 144, 145, 150, 159, 162, 163, 199, 212, 218, 221, 222, 225], "return": [1, 6, 9, 17, 19, 22, 23, 26, 27, 29, 30, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 62, 66, 72, 74, 76, 77, 80, 81, 83, 88, 91, 92, 94, 95, 101, 103, 104, 105, 107, 108, 109, 110, 115, 122, 128, 132, 137, 138, 140, 141, 142, 144, 145, 146, 148, 150, 152, 153, 155, 156, 157, 158, 159, 162, 163, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 255, 256, 257, 259, 262], "specifi": [1, 41, 44, 45, 47, 174, 175, 186, 199, 250, 255, 256], "class": [2, 3, 5, 6, 9, 26, 36, 41, 43, 44, 45, 46, 47, 48, 65, 72, 91, 101, 119, 128, 130, 138, 142, 150, 154, 159, 249, 255, 256, 259, 261, 262], "replicacorrel": [2, 154, 155, 156, 157, 158, 262], "implement": [2, 3, 6, 26, 36, 48, 65, 72, 91, 101, 119, 125, 128, 130, 138, 142, 150, 154, 159, 172, 249, 254], "clairvoy": [2, 154], "replica": [2, 154], "correl": [2, 154, 176, 246], "energydetector": [2, 36, 37, 38, 39, 40, 262], "energi": [2, 36, 105, 115, 146, 148, 154, 155, 156, 157, 158, 175, 188, 189, 190, 191, 192, 196, 198, 210, 224, 234, 235, 237, 239, 240, 261, 262], "albersheim": [2, 172, 262], "p_d": [2, 7, 36, 37, 39, 154, 155, 157, 172, 217, 223, 262], "p_fa": [2, 7, 36, 37, 38, 39, 40, 154, 155, 156, 157, 158, 172, 223], "estim": [2, 9, 101, 107, 108, 128, 138, 142, 150, 172, 218, 225, 258], "minimum": [2, 6, 128, 172, 262], "requir": [2, 27, 49, 92, 172, 250, 251, 252, 253, 262], "singl": [2, 39, 146, 148, 172], "sampl": [2, 3, 9, 16, 24, 26, 27, 37, 38, 39, 40, 48, 49, 54, 56, 57, 58, 62, 65, 69, 80, 81, 83, 88, 91, 92, 93, 101, 102, 108, 110, 116, 119, 123, 126, 128, 129, 130, 132, 133, 134, 136, 137, 138, 139, 142, 143, 150, 151, 159, 161, 164, 172, 174, 187, 189, 192, 194, 196, 198, 202, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 225, 226, 228, 234, 235, 237, 238, 239, 240, 241, 242, 244, 248, 254, 257, 258, 260, 261, 262], "given": [2, 36, 41, 43, 44, 45, 47, 65, 66, 154, 172, 193, 255, 256], "n_": [2, 37, 38, 39, 40, 172], "nc": [2, 37, 38, 39, 40, 172], "non": [2, 27, 37, 38, 39, 40, 49, 92, 172, 198, 235], "coher": [2, 37, 38, 39, 40, 172], "combin": [2, 172], "achiev": [2, 3, 172, 203, 231, 259, 260], "probabl": [2, 7, 36, 37, 38, 39, 40, 152, 153, 154, 155, 156, 157, 158, 172, 177, 178, 180, 181, 186, 217, 223, 248, 262], "fals": [2, 5, 26, 28, 29, 30, 36, 37, 38, 39, 40, 48, 50, 52, 53, 65, 67, 72, 73, 75, 76, 77, 91, 92, 93, 94, 95, 128, 138, 142, 146, 148, 150, 154, 155, 156, 157, 158, 159, 161, 162, 163, 172, 173, 177, 180, 186, 190, 202, 207, 208, 211, 218, 223, 225, 228, 236, 256, 260], "alarm": [2, 36, 37, 38, 39, 40, 154, 155, 156, 157, 158, 172, 223], "p_": [2, 7, 36, 37, 38, 39, 40, 146, 148, 154, 155, 156, 157, 158, 172, 173, 174, 183, 186, 193, 201, 205, 207, 210, 218, 223, 224], "fa": [2, 7, 36, 37, 38, 39, 40, 154, 155, 156, 157, 158, 172, 223], "thi": [2, 9, 26, 43, 44, 45, 47, 48, 72, 91, 93, 101, 102, 117, 128, 132, 138, 139, 142, 143, 149, 150, 151, 159, 161, 172, 174, 175, 177, 180, 186, 187, 193, 195, 203, 212, 216, 218, 222, 225, 228, 244, 250, 252, 253, 254, 256, 258, 259, 260], "function": [2, 7, 8, 9, 18, 48, 72, 73, 119, 152, 153, 172, 175, 187, 196, 210, 217, 218, 223, 224, 225, 244, 255, 256, 258, 260, 261, 262], "": [2, 3, 7, 9, 17, 19, 20, 21, 23, 24, 26, 36, 43, 44, 45, 46, 47, 48, 56, 57, 62, 72, 80, 81, 88, 91, 101, 102, 107, 108, 109, 110, 128, 138, 142, 150, 154, 156, 158, 159, 172, 174, 175, 189, 192, 193, 194, 200, 211, 212, 213, 214, 216, 218, 219, 220, 221, 222, 225, 226, 228, 229, 238, 239, 240, 241, 242, 253, 254, 257, 259, 261, 262], "equat": [2, 17, 19, 20, 21, 22, 23, 37, 38, 40, 72, 138, 142, 150, 155, 156, 158, 172, 195], "fir": [3, 26, 27, 28, 29, 30, 32, 34, 35, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 95, 97, 99, 100, 159, 160, 161, 162, 163, 164, 167, 169, 170, 203, 212, 213, 214, 215, 216, 219, 220, 226, 230, 231, 257, 261, 262], "finit": [3, 26, 48, 91, 159, 261, 262], "impuls": [3, 7, 26, 48, 58, 72, 83, 91, 159, 196, 213, 215, 228, 260, 261, 262], "respons": [3, 7, 26, 48, 56, 57, 58, 62, 72, 80, 81, 83, 88, 91, 159, 196, 213, 214, 215, 216, 220, 226, 260, 261, 262], "iir": [3, 7, 9, 18, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 119, 125, 213, 214, 215, 216, 219, 220, 226, 230, 255, 258, 261, 262], "infinit": [3, 72, 261, 262], "interpol": [3, 26, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 118, 128, 138, 142, 150, 159, 161, 171, 203, 212, 231, 244, 257, 259, 261, 262], "polyphas": [3, 26, 27, 28, 32, 35, 91, 92, 93, 97, 100, 159, 160, 161, 167, 170, 187, 203, 231, 244, 261, 262], "decim": [3, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 101, 102, 107, 108, 109, 110, 114, 117, 128, 129, 138, 139, 142, 143, 149, 150, 151, 159, 161, 165, 187, 203, 231, 259, 261, 262], "ration": [3, 159, 161, 203, 231], "multirate_tap": [3, 28, 93, 161, 203, 262], "up": [3, 159, 161, 171, 195, 203, 231, 251], "down": [3, 159, 161, 165, 203, 231], "comput": [3, 8, 26, 36, 37, 38, 39, 40, 101, 105, 115, 128, 138, 142, 146, 148, 150, 152, 153, 154, 155, 156, 157, 158, 173, 174, 190, 195, 203, 205, 207, 255, 256, 258, 260], "p": [3, 4, 8, 130, 132, 152, 153, 159, 161, 167, 168, 170, 171, 177, 178, 180, 181, 186, 203, 231, 248], "q": [3, 8, 128, 138, 152, 153, 154, 155, 156, 158, 159, 161, 165, 168, 203, 231, 246, 262], "polyphase_matrix": [3, 231, 262], "tap": [3, 26, 28, 32, 35, 48, 53, 64, 65, 71, 72, 78, 79, 91, 93, 97, 100, 159, 161, 167, 170, 231, 255, 256], "h_i": [3, 26, 28, 32, 35, 48, 50, 64, 91, 93, 97, 100, 159, 161, 167, 170, 231, 255], "matrix": [3, 186, 231, 248], "h_": [3, 9, 26, 32, 35, 91, 97, 100, 159, 167, 170, 231, 258], "i": [3, 9, 16, 25, 26, 27, 28, 32, 35, 36, 38, 39, 40, 41, 46, 48, 49, 50, 58, 62, 63, 64, 65, 70, 72, 75, 79, 83, 88, 89, 91, 92, 93, 97, 100, 102, 119, 123, 124, 126, 128, 132, 136, 138, 139, 142, 143, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 167, 170, 172, 173, 174, 175, 177, 178, 180, 181, 183, 186, 188, 189, 190, 191, 192, 194, 195, 196, 198, 199, 200, 201, 204, 205, 206, 207, 208, 211, 212, 213, 215, 216, 218, 222, 225, 226, 228, 231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263], "j": [3, 26, 32, 35, 72, 75, 78, 91, 97, 100, 128, 130, 138, 142, 150, 159, 167, 170, 174, 186, 200, 202, 231, 246, 255, 256, 258], "farrowresampl": [3, 65, 66, 67, 68, 69, 70, 71, 254, 262], "cubic": [3, 65], "farrow": [3, 65, 66, 67, 68, 69, 70, 71, 261, 262], "arbitrari": [3, 6, 65, 66, 67, 68, 69, 70, 71, 101, 261, 262], "mix": [3, 202, 261, 262], "freq": [3, 4, 130, 132, 194, 195, 202, 206, 245, 248, 254, 258], "float": [3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 39, 41, 43, 44, 45, 47, 56, 57, 65, 66, 72, 73, 80, 81, 82, 101, 102, 112, 119, 120, 121, 123, 124, 126, 128, 129, 130, 131, 133, 134, 135, 138, 139, 142, 143, 147, 150, 151, 157, 159, 164, 168, 173, 174, 175, 177, 180, 182, 193, 194, 196, 200, 202, 203, 205, 207, 208, 211, 212, 213, 214, 216, 218, 219, 220, 221, 222, 225, 227, 228, 234, 236, 237, 238, 248], "0": [3, 6, 8, 16, 26, 27, 32, 35, 36, 39, 41, 48, 49, 50, 52, 53, 56, 57, 64, 72, 73, 75, 76, 77, 78, 79, 80, 81, 91, 92, 93, 97, 100, 101, 102, 107, 108, 109, 110, 117, 123, 128, 129, 130, 133, 138, 139, 142, 143, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 163, 167, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 204, 206, 209, 211, 212, 213, 214, 215, 216, 219, 220, 221, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 263], "time": [3, 5, 9, 16, 17, 19, 20, 21, 22, 23, 48, 72, 119, 123, 138, 142, 150, 173, 174, 182, 186, 187, 190, 192, 194, 196, 200, 202, 205, 207, 208, 212, 213, 218, 222, 225, 228, 234, 236, 237, 238, 240, 241, 242, 244, 248, 254, 255, 256, 260, 261, 262], "domain": [3, 5, 173, 174, 182, 187, 190, 194, 200, 202, 205, 207, 208, 213, 218, 222, 225, 228, 236, 238, 241, 242, 244, 248, 261, 262], "n": [3, 5, 6, 7, 8, 9, 26, 27, 36, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 72, 74, 75, 78, 80, 81, 83, 84, 88, 91, 92, 101, 102, 108, 110, 113, 114, 118, 119, 122, 128, 130, 132, 137, 138, 139, 142, 143, 150, 151, 152, 153, 154, 156, 158, 159, 160, 164, 173, 174, 175, 176, 179, 182, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 200, 202, 203, 205, 207, 208, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 225, 226, 228, 236, 238, 239, 240, 241, 242, 244, 246, 247, 248, 258, 260, 261], "complex": [3, 5, 7, 36, 37, 38, 39, 40, 101, 102, 107, 108, 109, 110, 117, 128, 129, 130, 132, 137, 138, 139, 142, 143, 149, 150, 151, 154, 155, 156, 157, 158, 174, 175, 187, 193, 200, 202, 211, 212, 222, 227, 228, 241, 242, 244, 248, 254, 255, 256, 258, 259, 261, 262], "exponenti": [3, 187, 202, 241, 242, 244, 254, 255, 256], "real": [3, 37, 38, 40, 128, 138, 152, 153, 155, 156, 158, 174, 202, 212, 222, 228, 241, 242, 254, 255, 256, 258, 261, 262], "sinusoid": [3, 142, 174, 202, 241, 242, 256, 262], "to_complex_bb": [3, 241, 262], "x_r": [3, 241, 242], "complex_": [3, 7, 101, 108, 109, 110, 117, 128, 130, 132, 137, 138, 142, 149, 150, 211, 227, 241, 242, 246, 247], "passband": [3, 196, 198, 234, 235, 237, 241, 242, 257, 262], "center": [3, 198, 228, 235, 241, 242, 262], "f_": [3, 9, 16, 24, 27, 56, 57, 80, 81, 92, 101, 102, 116, 128, 129, 138, 139, 142, 143, 150, 151, 187, 189, 192, 194, 196, 202, 212, 213, 214, 216, 218, 219, 220, 221, 222, 225, 228, 238, 239, 240, 241, 242, 244, 254, 255, 256, 258, 260], "r": [3, 26, 27, 28, 32, 33, 35, 65, 66, 91, 92, 93, 97, 98, 100, 175, 187, 188, 189, 191, 193, 196, 202, 234, 237, 239, 241, 242, 244, 250, 251, 252, 253, 256, 257, 258, 260], "4": [3, 7, 17, 19, 26, 32, 35, 37, 39, 41, 57, 76, 77, 81, 91, 92, 97, 100, 128, 129, 130, 138, 139, 142, 146, 147, 148, 149, 150, 154, 155, 156, 157, 158, 159, 162, 163, 167, 170, 172, 174, 175, 176, 178, 179, 181, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 224, 226, 227, 228, 229, 230, 231, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 246, 251, 252, 254, 256, 257, 259], "rate": [3, 5, 7, 9, 16, 24, 26, 27, 28, 30, 33, 41, 42, 43, 45, 46, 56, 57, 65, 66, 80, 81, 91, 92, 93, 95, 98, 101, 105, 115, 128, 138, 142, 146, 148, 150, 159, 160, 161, 163, 165, 168, 171, 187, 188, 189, 191, 194, 202, 203, 210, 212, 213, 214, 216, 218, 219, 220, 221, 222, 224, 225, 228, 231, 238, 239, 241, 242, 244, 248, 261, 262], "baseband": [3, 7, 9, 128, 138, 142, 150, 202, 212, 221, 241, 242, 257, 258, 262], "x_c": [3, 241, 242], "c": [3, 9, 17, 19, 20, 21, 22, 23, 43, 44, 45, 46, 47, 101, 102, 117, 119, 128, 138, 142, 149, 150, 175, 178, 181, 195, 206, 227, 241, 242, 245, 258], "2": [3, 6, 7, 9, 17, 19, 22, 26, 29, 30, 32, 35, 36, 37, 38, 39, 40, 41, 48, 52, 53, 54, 56, 57, 76, 77, 80, 81, 91, 92, 94, 95, 97, 100, 101, 102, 111, 128, 130, 138, 139, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 167, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 250, 253, 254, 255, 256, 257, 258, 259, 260], "to_real_pb": [3, 242, 257, 262], "2f_": [3, 242], "upsampl": [3, 91, 159, 244, 262], "factor": [3, 5, 9, 16, 25, 102, 119, 123, 124, 139, 143, 151, 182, 187, 244, 258], "downsampl": [3, 187, 262], "bsc_capac": [4, 181, 262], "calcul": [4, 5, 175, 178, 181, 193, 195, 206, 245, 262], "symmetr": [4, 180, 181, 186, 241, 242, 248, 261], "bsc": [4, 180, 181, 186, 248, 261, 262], "bec_capac": [4, 178, 262], "erasur": [4, 177, 178, 186, 248, 261], "bec": [4, 177, 178, 186, 248, 261, 262], "awgn_capac": [4, 175, 262], "addit": [4, 174, 175, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 244, 248, 261], "white": [4, 174, 175, 248, 261], "gaussian": [4, 6, 174, 175, 196, 248, 261, 262], "nois": [4, 9, 10, 11, 16, 22, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 105, 115, 119, 123, 126, 128, 138, 142, 146, 148, 150, 154, 155, 156, 157, 158, 174, 175, 188, 189, 191, 192, 210, 224, 239, 240, 248, 258, 261], "awgn": [4, 128, 138, 142, 146, 148, 150, 174, 175, 193, 210, 211, 224, 241, 242, 248, 259, 261, 262], "fspl": [4, 195], "distanc": [4, 195], "free": [4, 128, 138, 142, 150, 195, 261], "space": [4, 57, 81, 195, 261], "wavelength": [4, 245, 262], "lambda": [4, 195, 245], "electromagnet": [4, 245], "wave": [4, 128, 245], "frequenc": [4, 9, 17, 19, 21, 26, 48, 56, 57, 72, 80, 81, 91, 119, 128, 130, 132, 159, 187, 194, 195, 202, 206, 213, 214, 216, 218, 219, 220, 225, 241, 242, 244, 245, 248, 260, 261, 262], "f": [4, 17, 19, 26, 39, 56, 57, 80, 81, 91, 130, 132, 159, 172, 174, 194, 195, 196, 202, 206, 238, 245, 246, 251, 254, 255, 256, 257, 258, 259, 260], "parabolic_antenna": [4, 206, 262], "tupl": [4, 26, 36, 39, 41, 43, 46, 48, 56, 57, 72, 80, 81, 91, 101, 108, 128, 138, 142, 150, 154, 157, 159, 173, 190, 205, 206, 207, 211, 213, 214, 215, 216, 219, 220, 226, 227, 230], "gain": [4, 9, 12, 13, 14, 15, 16, 72, 73, 82, 119, 120, 121, 123, 130, 131, 133, 172, 195, 196, 198, 206, 234, 235, 237, 258, 261], "g": [4, 46, 206, 252], "beamwidth": [4, 206], "theta": [4, 130, 133, 135, 136, 206], "parabol": [4, 206], "reflector": [4, 206], "signal": [5, 7, 9, 17, 19, 22, 23, 26, 27, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 55, 65, 66, 72, 74, 91, 92, 101, 102, 113, 119, 122, 128, 130, 132, 137, 138, 139, 142, 143, 150, 151, 154, 155, 156, 157, 158, 159, 160, 173, 174, 175, 182, 183, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 202, 203, 205, 206, 207, 208, 212, 213, 214, 216, 218, 219, 220, 221, 222, 225, 228, 231, 236, 238, 239, 240, 241, 242, 244, 245, 255, 256, 258, 260, 261, 262], "peak_pow": [5, 205, 207, 262], "peak": [5, 128, 138, 150, 182, 193, 205, 207, 208], "average_pow": [5, 173, 205, 262], "averag": [5, 41, 128, 138, 150, 173, 174, 175, 193, 205, 218], "papr": [5, 128, 138, 150, 205, 257, 262], "ratio": [5, 22, 37, 39, 41, 43, 44, 45, 46, 47, 105, 115, 128, 138, 146, 148, 150, 155, 157, 174, 175, 188, 189, 191, 192, 205, 209, 210, 224, 232, 233, 239, 240], "peak_voltag": [5, 182, 208, 262], "bool": [5, 26, 28, 37, 38, 39, 40, 48, 50, 63, 65, 67, 70, 72, 73, 75, 89, 91, 93, 128, 138, 142, 146, 148, 150, 155, 156, 157, 158, 159, 161, 173, 190, 202, 207, 208, 211, 220, 222, 227, 228, 236], "rms_voltag": [5, 182, 236, 262], "root": [5, 6, 102, 139, 143, 151, 193, 212, 228, 236, 237, 246, 247, 255, 261], "mean": [5, 193, 218, 225, 236, 260], "squar": [5, 6, 102, 139, 143, 151, 193, 195, 206, 228, 236, 237, 255], "rm": [5, 182, 193, 236], "crest_factor": [5, 182, 205, 262], "crest": [5, 182], "errorr": [5, 41, 42, 43, 44, 45, 46, 47, 259, 262], "A": [5, 9, 17, 19, 20, 21, 22, 23, 25, 27, 41, 48, 49, 92, 102, 119, 139, 143, 151, 172, 179, 197, 199, 200, 206, 234, 237, 249, 251, 258], "error": [5, 7, 9, 15, 16, 22, 41, 42, 43, 45, 46, 47, 101, 105, 115, 119, 123, 128, 138, 142, 146, 148, 150, 172, 181, 193, 210, 224, 258, 261, 262], "ber": [5, 7, 41, 101, 105, 128, 138, 142, 146, 150, 210, 259, 261, 262], "symbol": [5, 7, 41, 43, 46, 91, 101, 102, 106, 107, 108, 109, 110, 115, 116, 117, 128, 129, 138, 139, 142, 143, 146, 148, 149, 150, 151, 174, 188, 189, 191, 192, 193, 194, 196, 198, 211, 212, 221, 224, 227, 234, 235, 237, 239, 240, 257, 260, 261, 262], "ser": [5, 7, 41, 101, 115, 128, 138, 142, 148, 150, 224, 259, 261, 262], "evm": [5, 193, 261, 262], "x_hat": [5, 7, 41, 43, 101, 108, 128, 138, 142, 150, 193, 211, 259], "ref": [5, 172, 193, 196, 203], "vector": [5, 41, 69, 193, 218, 225, 261, 262], "magnitud": [5, 7, 176, 193, 213, 216, 246, 261, 262], "hat": [5, 7, 43, 101, 107, 108, 128, 138, 142, 150, 193, 211, 227], "k": [5, 6, 7, 43, 101, 102, 106, 107, 108, 109, 110, 111, 128, 138, 142, 143, 150, 151, 184, 185, 188, 189, 191, 193, 211, 227, 239, 257, 260], "linearmodul": [6, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 142, 227, 262], "amplitud": [6, 101, 102, 200, 248, 254, 258], "psk": [6, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 174, 193, 194, 200, 210, 211, 212, 224, 227, 238, 257, 261, 262], "shift": [6, 128, 138, 142, 146, 147, 148, 149, 150, 246, 255, 256, 261, 262], "kei": [6, 128, 138, 142, 146, 147, 148, 149, 150, 261, 262], "demodul": [6, 101, 108, 128, 138, 142, 150, 259, 262], "pimpsk": [6, 150, 151, 262], "pi": [6, 26, 76, 77, 91, 92, 130, 138, 142, 150, 151, 159, 174, 187, 195, 196, 200, 202, 206, 213, 214, 215, 216, 219, 220, 226, 228, 230, 241, 242, 244, 246, 254, 255, 256, 258, 261, 262], "m": [6, 72, 75, 79, 101, 102, 106, 107, 108, 109, 110, 111, 117, 128, 138, 142, 143, 149, 150, 151, 186, 188, 189, 191, 195, 227, 239, 250, 251, 252, 253, 261, 262], "oqpsk": [6, 128, 138, 139, 140, 141, 262], "offset": [6, 17, 19, 26, 91, 92, 101, 102, 112, 128, 129, 130, 132, 133, 135, 138, 139, 142, 143, 147, 150, 151, 159, 194, 202, 228, 238, 248, 258, 261, 262], "quadratur": [6, 128, 138, 200], "msk": [6, 128, 129, 221, 262], "rectangular": [6, 102, 139, 143, 151, 235, 257, 260, 261, 262], "span": [6, 7, 102, 139, 143, 151, 196, 198, 212, 221, 234, 235, 237, 257, 260], "half_sin": [6, 129, 198, 262], "half": [6, 128, 138, 198, 203, 206, 261, 262], "sine": [6, 128, 198, 261, 262], "time_bandwidth": [6, 196], "raised_cosin": [6, 102, 139, 143, 151, 212, 234, 260, 262], "alpha": [6, 102, 139, 143, 151, 196, 229, 234, 237, 257, 260], "rais": [6, 102, 139, 143, 151, 212, 228, 234, 237, 255, 261], "cosin": [6, 102, 139, 143, 151, 212, 228, 234, 237, 255, 261], "rc": [6, 102, 139, 143, 151, 234], "root_raised_cosin": [6, 52, 53, 102, 139, 143, 151, 212, 213, 214, 215, 216, 219, 220, 226, 228, 230, 237, 255, 257, 259, 260, 262], "srrc": [6, 102, 138, 139, 142, 143, 150, 151, 212, 228, 237, 257], "binary_cod": [6, 179, 262], "gener": [6, 128, 138, 142, 150, 174, 177, 179, 180, 186, 197, 223, 250, 259, 262], "code": [6, 26, 29, 48, 52, 72, 76, 91, 94, 101, 103, 128, 129, 138, 139, 140, 142, 143, 144, 149, 150, 151, 159, 162, 176, 179, 188, 189, 191, 197, 211, 227, 239, 247, 252, 259, 262], "length": [6, 7, 26, 27, 39, 48, 49, 51, 58, 62, 74, 91, 92, 93, 102, 108, 110, 129, 139, 143, 151, 159, 161, 176, 179, 196, 197, 198, 203, 213, 215, 218, 222, 225, 226, 234, 235, 237, 241, 246, 247, 251, 254, 257, 260], "gray_cod": [6, 197, 262], "grai": [6, 128, 129, 138, 139, 142, 143, 149, 150, 151, 197, 211, 227, 259, 261], "diff_encod": [6, 128, 138, 142, 146, 148, 150, 184, 185, 262], "y_prev": [6, 184, 185], "differenti": [6, 128, 146, 148, 184, 185, 228, 261, 262], "input": [6, 9, 17, 19, 22, 23, 26, 27, 28, 48, 49, 50, 58, 61, 62, 65, 66, 67, 69, 72, 73, 74, 75, 83, 88, 91, 92, 93, 119, 122, 130, 132, 138, 142, 146, 148, 150, 152, 159, 160, 161, 174, 175, 177, 178, 180, 181, 183, 184, 185, 186, 187, 201, 204, 209, 215, 226, 232, 233, 243, 244, 248, 255, 256, 258], "data": [6, 184, 185, 199, 204, 243, 261], "diff_decod": [6, 184, 185, 262], "y": [6, 26, 27, 48, 49, 55, 66, 72, 74, 91, 92, 119, 122, 130, 132, 137, 159, 174, 177, 180, 184, 185, 186, 187, 194, 200, 202, 211, 216, 218, 225, 227, 228, 238, 244, 258, 259], "decod": [6, 184], "use_styl": [7, 229], "appli": [7, 26, 91, 102, 159, 194, 200, 211, 212, 218, 225, 227, 228, 229, 238, 248], "default": [7, 58, 62, 129, 139, 143, 149, 151, 173, 190, 205, 207, 211, 216, 218, 222, 225, 227, 229, 259], "matplotlib": [7, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 254, 255, 256, 257, 258, 259, 260, 261], "rcparam": [7, 229], "time_domain": [7, 26, 91, 92, 128, 130, 138, 142, 150, 159, 174, 187, 202, 228, 241, 242, 244, 257, 259, 260, 262], "raster": [7, 212, 221, 222, 261, 262], "none": [7, 26, 39, 48, 58, 62, 65, 69, 91, 102, 119, 127, 132, 139, 143, 151, 157, 159, 173, 174, 175, 177, 180, 186, 190, 204, 205, 207, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 225, 226, 227, 228, 243, 248, 254, 257, 259], "periodogram": [7, 187, 218, 241, 242, 244, 257, 261, 262], "power": [7, 128, 138, 142, 150, 173, 174, 175, 183, 193, 196, 198, 201, 205, 206, 207, 218, 234, 235, 237, 260, 261], "densiti": [7, 22, 218, 257, 260], "xx": [7, 218], "us": [7, 26, 28, 31, 34, 48, 50, 55, 60, 65, 67, 72, 73, 75, 86, 91, 92, 93, 96, 99, 101, 102, 107, 108, 119, 125, 128, 138, 139, 142, 143, 150, 151, 159, 161, 166, 169, 175, 178, 181, 193, 199, 203, 204, 211, 212, 213, 215, 217, 218, 225, 226, 243, 250, 251, 252, 253, 255, 256, 259, 260, 261, 263], "welch": [7, 218, 225], "method": [7, 30, 31, 93, 95, 96, 161, 163, 166, 218, 225, 255, 256, 262], "spectrogram": [7, 225, 261, 262], "constel": [7, 128, 138, 142, 147, 150, 174, 193, 194, 200, 211, 238, 246, 261, 262], "symbol_map": [7, 101, 102, 117, 128, 138, 142, 147, 149, 150, 193, 227, 228, 259, 262], "map": [7, 101, 102, 109, 117, 128, 138, 142, 149, 150, 193, 227, 261, 262], "ey": [7, 128, 138, 142, 150, 212, 261, 262], "diagram": [7, 9, 26, 91, 119, 130, 159, 184, 185, 212, 261, 262], "phase_tre": [7, 128, 221, 262], "phase": [7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 101, 102, 112, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 143, 146, 147, 148, 149, 150, 151, 172, 194, 200, 202, 219, 220, 221, 248, 261, 262], "tree": [7, 221, 262], "continu": [7, 128, 221, 254, 262], "cpm": [7, 221, 262], "kwarg": [7, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230], "e_b": [7, 43, 44, 45, 46, 47, 101, 105, 128, 138, 142, 146, 150, 175, 188, 189, 191, 210, 239, 261], "n_0": [7, 22, 43, 44, 45, 46, 47, 101, 105, 115, 128, 138, 142, 146, 148, 150, 174, 175, 188, 189, 191, 192, 193, 210, 211, 224, 239, 240, 259, 261], "e_": [7, 43, 44, 45, 46, 47, 101, 115, 128, 138, 142, 148, 150, 174, 175, 188, 191, 192, 193, 211, 224, 240, 259, 261], "roc": [7, 36, 39, 154, 157, 223, 262], "receiv": [7, 36, 37, 39, 41, 43, 101, 107, 108, 114, 128, 138, 142, 146, 148, 150, 154, 155, 156, 157, 158, 193, 195, 212, 217, 223, 262], "oper": [7, 36, 39, 154, 157, 223, 262], "characterist": [7, 36, 39, 154, 157, 223, 262], "curv": [7, 36, 39, 146, 148, 154, 157, 210, 223, 224, 262], "enr": [7, 154, 155, 157, 217], "impulse_respons": [7, 26, 48, 58, 72, 83, 91, 159, 196, 198, 203, 215, 234, 235, 237, 255, 256, 260, 262], "h": [7, 26, 36, 48, 50, 52, 53, 56, 57, 58, 72, 80, 81, 83, 91, 101, 102, 113, 114, 118, 119, 128, 138, 139, 142, 143, 150, 151, 154, 159, 196, 203, 212, 213, 215, 216, 220, 231, 257, 258, 260], "step_respons": [7, 26, 48, 62, 72, 88, 91, 159, 226, 255, 256, 258, 262], "step": [7, 26, 48, 62, 72, 88, 91, 130, 132, 137, 159, 213, 226, 261], "zeros_pol": [7, 230, 256, 262], "zero": [7, 26, 27, 48, 55, 69, 72, 73, 76, 77, 90, 91, 92, 93, 119, 132, 159, 161, 198, 204, 213, 214, 215, 216, 219, 220, 226, 228, 230, 235, 241, 255, 257, 258, 260, 261, 262], "pole": [7, 72, 73, 76, 77, 85, 213, 214, 215, 216, 219, 220, 226, 230, 255, 261], "magnitude_respons": [7, 56, 57, 80, 81, 198, 203, 216, 234, 235, 237, 255, 256, 258, 260, 262], "omega": [7, 26, 48, 56, 57, 72, 80, 81, 91, 130, 133, 134, 136, 159, 213, 214, 216, 219, 220, 258], "phase_respons": [7, 56, 57, 80, 81, 220, 262], "angl": [7, 220, 258], "phase_delai": [7, 219, 262], "delai": [7, 26, 27, 30, 48, 49, 53, 54, 65, 91, 92, 95, 119, 130, 159, 163, 164, 184, 185, 198, 214, 219, 235, 258, 261], "tau_": [7, 219], "phi": [7, 101, 102, 112, 128, 129, 138, 139, 142, 143, 147, 150, 151, 194, 200, 202, 219], "group_delai": [7, 214, 255, 256, 262], "group": [7, 214, 261], "tau_g": [7, 214], "complementari": [8, 152, 153], "cumul": [8, 152, 153], "distribut": [8, 152, 153], "standard": [8, 152, 153], "normal": [8, 9, 11, 16, 119, 123, 126, 152, 153, 193, 196, 198, 213, 214, 216, 218, 219, 220, 225, 234, 235, 237, 258, 260], "mathcal": [8, 36, 152, 153, 154, 155, 156, 157, 158, 174, 186], "qinv": [8, 152, 153, 262], "invers": [8, 153], "closedlooppl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 249, 258, 262], "defin": [9, 48, 72, 174, 186, 196, 223, 246, 249, 256, 261], "perform": [9, 27, 49, 92, 146, 148, 187, 244, 246, 249, 255, 256, 259, 261, 262], "close": [9, 16, 18, 249, 261, 262], "loop": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 249, 261, 262], "pll": [9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 249, 261, 262], "meant": 9, "analysi": [9, 16, 251, 258, 261, 262], "onli": [9, 27, 34, 49, 55, 60, 65, 69, 86, 92, 99, 102, 129, 139, 143, 149, 151, 169, 174, 195, 198, 222, 235, 253, 258, 259], "block": [9, 26, 91, 119, 130, 159, 184, 185], "bb": [9, 257, 258], "phase_err": 9, "ped": [9, 15, 16, 123, 258], "lf": [9, 258], "phase_est": 9, "lo": [9, 258], "nco": [9, 12, 16, 123, 130, 131, 132, 133, 134, 135, 136, 137, 249, 258, 261, 262], "local": [9, 250, 258], "oscil": [9, 130, 133, 249, 258, 261, 262], "detector": [9, 15, 16, 36, 123, 154, 258, 262], "filter": [9, 13, 14, 16, 18, 26, 27, 28, 31, 32, 34, 35, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 99, 100, 101, 108, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 138, 142, 150, 159, 160, 161, 164, 166, 167, 169, 170, 187, 196, 198, 203, 212, 213, 214, 215, 216, 219, 220, 226, 228, 230, 231, 234, 235, 237, 244, 249, 260, 261, 262], "numer": [9, 130, 133, 249, 256, 258, 261, 262], "control": [9, 130, 133, 234, 237, 249, 258, 261, 262], "The": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 54, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 68, 69, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 91, 92, 93, 96, 97, 98, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 255, 256, 258, 259, 260, 261, 263], "transfer": [9, 18, 48, 72, 73, 119, 196, 255, 256, 258], "2nd": [9, 119, 123, 249, 258, 262], "order": [9, 26, 27, 30, 41, 46, 48, 49, 53, 59, 65, 68, 72, 77, 84, 91, 92, 93, 95, 101, 102, 111, 119, 123, 128, 138, 142, 143, 150, 151, 159, 161, 163, 174, 188, 189, 191, 193, 194, 196, 211, 212, 221, 222, 234, 237, 238, 239, 249, 256, 257, 258, 259, 262], "proport": [9, 13, 27, 92, 119, 120, 123, 195, 206, 249, 262], "plu": [9, 119, 123, 249, 262], "integr": [9, 14, 37, 38, 39, 40, 119, 121, 123, 172, 249, 253, 256, 262], "z": [9, 48, 72, 119, 130, 184, 185, 246, 255, 256, 258], "k_1": [9, 13, 119, 120, 258], "k_2": [9, 14, 119, 121, 258], "frac": [9, 17, 19, 22, 23, 26, 36, 37, 38, 40, 48, 54, 72, 91, 93, 119, 138, 142, 150, 154, 155, 156, 159, 161, 164, 172, 173, 174, 175, 182, 188, 189, 191, 192, 193, 195, 196, 200, 201, 202, 205, 206, 236, 239, 240, 245, 246, 258], "k_0": [9, 12, 16, 123, 130, 131, 133, 258], "k_p": [9, 15, 16, 123, 258], "refer": [9, 17, 19, 20, 21, 22, 23, 36, 37, 38, 40, 41, 65, 119, 146, 148, 154, 155, 156, 158, 172, 174, 182, 193, 194, 196, 203, 205, 231, 234, 237, 238, 246, 256, 260, 261], "michael": [9, 17, 19, 20, 21, 22, 23, 119, 234, 237], "rice": [9, 17, 19, 20, 21, 22, 23, 119, 234, 237], "digit": [9, 17, 19, 20, 21, 22, 23, 119, 146, 148, 234, 237, 258, 261, 262], "commun": [9, 17, 19, 20, 21, 22, 23, 119, 146, 148, 203, 231, 234, 237, 258, 261], "discret": [9, 17, 19, 20, 21, 22, 23, 119, 174, 186, 192, 234, 237, 240, 248, 254, 258, 261], "approach": [9, 17, 19, 20, 21, 22, 23, 119, 175, 178, 181, 234, 237, 258], "appendix": [9, 119, 234, 237], "lock": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137], "exampl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 32, 34, 35, 37, 39, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 99, 100, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 146, 147, 148, 149, 150, 152, 153, 155, 157, 159, 162, 163, 164, 167, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 258], "see": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 34, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 82, 84, 85, 86, 87, 89, 90, 99, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 147, 149, 150, 159, 164, 169, 187, 196, 198, 213, 214, 215, 216, 219, 220, 226, 230, 234, 235, 237, 261], "noise_bandwidth": [9, 16, 119, 123, 126], "damping_factor": [9, 16, 119, 123, 124], "creat": [9, 16, 26, 28, 41, 42, 48, 50, 65, 67, 72, 73, 75, 91, 92, 93, 101, 102, 119, 123, 128, 129, 130, 133, 138, 139, 142, 143, 147, 150, 151, 159, 161, 174, 176, 193, 194, 202, 228, 238, 241, 242, 246, 254, 258, 260], "object": [9, 16, 26, 29, 30, 41, 42, 48, 52, 53, 72, 76, 77, 91, 94, 95, 101, 102, 103, 104, 128, 129, 138, 139, 140, 141, 142, 143, 144, 145, 150, 151, 159, 162, 163, 213, 214, 215, 216, 219, 220, 226, 230, 258, 262], "phase_lock_tim": [9, 23], "frequency_lock_tim": [9, 17], "freq_offset": [9, 17, 19], "lock_tim": [9, 19, 258], "phase_error_vari": [9, 22], "cn0": [9, 22], "varianc": [9, 22, 36, 38, 40, 156, 158, 174], "steadi": [9, 22], "state": [9, 22, 26, 27, 34, 48, 49, 55, 60, 61, 63, 65, 69, 70, 72, 86, 87, 89, 91, 92, 99, 159, 169, 262], "sample_r": [9, 16, 24, 26, 56, 57, 80, 81, 91, 92, 128, 138, 142, 150, 159, 187, 194, 202, 212, 213, 214, 216, 218, 219, 220, 221, 222, 225, 228, 241, 242, 244, 254, 258, 260], "bnt": [9, 11, 258], "bandwidth": [9, 10, 11, 16, 20, 119, 123, 126, 175, 196, 234, 237, 258, 260], "b_n": [9, 10, 11, 16, 17, 19, 22, 23, 119, 123, 126], "t": [9, 11, 16, 36, 119, 123, 126, 154, 196, 199, 250, 254], "bn": [9, 10], "hz": [9, 10, 16, 17, 19, 22, 56, 57, 80, 81, 119, 123, 126, 175, 183, 187, 194, 195, 196, 201, 202, 206, 241, 242, 245, 254], "zeta": [9, 16, 25, 119, 123, 124], "damp": [9, 16, 25, 119, 123, 124, 258], "k0": [9, 12, 16, 123, 130, 131, 133], "kp": [9, 15, 16, 123], "k1": [9, 13, 119, 120, 258], "k2": [9, 14, 119, 121, 258], "repres": [9, 18, 177, 178], "omega_n": [9, 21, 258], "natur": [9, 21], "radian": [9, 20, 21, 22, 130, 132, 133, 134, 135, 136, 150, 258], "omega_3db": [9, 20], "3": [9, 17, 19, 20, 23, 26, 32, 35, 36, 37, 41, 52, 53, 76, 77, 91, 92, 97, 100, 128, 130, 138, 142, 146, 147, 148, 149, 150, 154, 155, 159, 162, 163, 167, 170, 172, 174, 175, 176, 177, 179, 180, 183, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 211, 212, 213, 214, 215, 216, 219, 220, 226, 228, 230, 231, 234, 235, 237, 238, 239, 241, 242, 243, 244, 245, 246, 250, 251, 256, 258, 260, 261], "omega_": [9, 20], "textrm": [9, 20], "properti": [10, 11, 12, 13, 14, 15, 18, 20, 21, 24, 25, 31, 32, 33, 35, 54, 59, 61, 63, 64, 68, 70, 71, 78, 79, 82, 84, 85, 87, 89, 90, 96, 97, 98, 100, 106, 111, 112, 113, 114, 116, 117, 118, 120, 121, 124, 125, 126, 131, 134, 135, 147, 149, 164, 165, 166, 167, 168, 170, 171, 262], "paramet": [16, 17, 19, 22, 27, 28, 37, 38, 39, 40, 43, 44, 45, 47, 49, 50, 56, 57, 58, 62, 66, 67, 69, 73, 74, 75, 80, 81, 83, 88, 92, 93, 102, 105, 107, 108, 109, 110, 115, 122, 123, 129, 132, 133, 137, 139, 143, 146, 148, 151, 152, 153, 155, 156, 157, 158, 161, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246], "where": [16, 27, 49, 92, 102, 119, 123, 126, 143, 151, 154, 174, 175, 186, 188, 189, 191, 196, 239, 246, 255, 256, 261], "period": [16, 119, 123, 126, 128, 246], "second": [16, 17, 19, 23, 41, 119, 123, 126, 196], "critic": [16, 25, 119, 123, 124, 258], "underdamp": [16, 25, 119, 123, 124], "overdamp": [16, 25, 119, 123, 124], "ted": [16, 123], "t_": [17, 19, 23, 66, 196, 260], "fl": [17, 19], "delta": [17, 19, 26, 48, 58, 72, 83, 91, 159, 215, 255, 256], "take": [17, 19, 23, 250], "onto": [17, 19, 23], "39": 17, "pl": [19, 23], "38": 19, "34": 20, "33": 21, "sigma_": [22, 36, 37, 39], "theta_": 22, "carrier": [22, 142], "43": 22, "40": [23, 91, 159, 187], "less": [25, 172], "than": [25, 128, 129, 139, 143, 149, 151, 172, 198, 200, 211, 227, 235], "greater": [25, 234, 237], "note": [26, 32, 35, 36, 37, 38, 40, 48, 72, 91, 97, 100, 119, 128, 130, 138, 142, 150, 154, 155, 156, 158, 159, 167, 170, 172, 174, 175, 178, 181, 184, 185, 196, 200, 206, 212, 231, 246], "equival": [26, 91, 159, 174, 175, 192, 240, 252, 254], "first": [26, 41, 91, 93, 128, 136, 138, 159, 161, 204, 228, 243, 251, 253], "prototyp": [26, 32, 35, 91, 97, 100, 159, 167, 170], "feedforward": [26, 28, 32, 35, 48, 50, 64, 72, 75, 79, 91, 93, 97, 100, 159, 161, 167, 170, 213, 214, 215, 216, 219, 220, 226, 230, 255, 256], "coeffici": [26, 28, 48, 50, 72, 75, 91, 93, 101, 114, 118, 128, 138, 142, 150, 159, 161, 213, 214, 215, 216, 219, 220, 226, 230, 255, 256], "discard": [26, 159], "between": [26, 28, 50, 63, 67, 70, 73, 75, 89, 91, 93, 159, 161, 195, 218, 222, 225, 258, 261], "each": [26, 27, 49, 91, 92, 159, 193, 199, 218, 222, 225], "instead": [26, 91, 159, 211], "decompos": [26, 91, 159], "ar": [26, 27, 28, 32, 35, 36, 41, 43, 44, 45, 47, 49, 50, 57, 67, 73, 75, 81, 91, 92, 93, 97, 100, 101, 102, 114, 118, 128, 129, 138, 139, 142, 143, 150, 151, 154, 159, 161, 167, 170, 175, 177, 178, 180, 181, 195, 198, 204, 211, 212, 213, 214, 216, 218, 219, 220, 221, 222, 225, 227, 228, 229, 231, 235, 241, 242, 250, 252, 254, 256, 258, 260, 261, 263], "commut": [26, 91, 159], "parallel": [26, 91, 159], "output": [26, 27, 48, 49, 58, 62, 72, 73, 75, 83, 88, 91, 92, 93, 108, 119, 122, 130, 132, 136, 137, 159, 161, 174, 175, 176, 177, 178, 180, 181, 185, 186, 193, 201, 204, 215, 226, 243, 247, 250, 254, 255, 256, 258], "sum": [26, 36, 48, 72, 154, 260], "prevent": [26, 91, 138, 150, 159], "need": [26, 91, 159, 250, 251, 253], "done": [26, 250], "case": [26, 91, 150, 154, 159], "2x": [26, 91], "6": [26, 32, 35, 41, 52, 53, 76, 77, 91, 92, 97, 100, 128, 130, 138, 142, 149, 150, 155, 156, 158, 159, 167, 170, 172, 179, 183, 186, 187, 188, 189, 193, 195, 197, 199, 201, 206, 211, 212, 213, 214, 215, 216, 219, 220, 226, 227, 228, 230, 231, 234, 237, 241, 242, 244, 246, 250, 253, 255, 256, 258, 259], "5": [26, 32, 35, 36, 37, 38, 39, 40, 41, 52, 53, 91, 92, 97, 100, 128, 130, 138, 142, 150, 155, 157, 159, 167, 170, 172, 174, 177, 179, 180, 181, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 199, 200, 206, 209, 212, 213, 214, 215, 216, 219, 220, 226, 228, 230, 231, 234, 237, 238, 239, 240, 241, 242, 244, 246, 250, 254, 255, 256, 257, 258, 259, 260], "summat": 26, "bottom": [26, 91, 159], "top": [26, 91, 159], "adder": [26, 119, 130, 184, 185, 258], "relat": [26, 32, 35, 91, 97, 100, 159, 167, 170, 175, 196], "In": [26, 27, 28, 29, 30, 32, 35, 37, 39, 41, 49, 50, 52, 53, 63, 67, 70, 73, 75, 76, 77, 89, 91, 92, 93, 94, 95, 97, 100, 128, 130, 138, 142, 146, 147, 148, 149, 150, 152, 153, 155, 157, 159, 161, 162, 163, 167, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 254, 259], "np": [26, 32, 35, 37, 39, 76, 77, 91, 92, 97, 100, 101, 113, 117, 128, 130, 138, 142, 146, 148, 149, 150, 155, 157, 159, 167, 170, 172, 174, 175, 176, 177, 178, 180, 181, 186, 187, 193, 194, 195, 200, 202, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 224, 226, 228, 230, 231, 238, 241, 242, 244, 246, 254, 255, 256, 257, 258, 259, 260], "co": [26, 91, 92, 159, 202], "64": [26, 193, 199, 256], "arang": [26, 32, 35, 91, 92, 97, 100, 159, 167, 170, 174, 176, 187, 202, 231, 241, 242, 244, 246, 254, 258], "280": 26, "7": [26, 29, 30, 32, 35, 91, 92, 94, 95, 97, 100, 128, 138, 142, 149, 150, 155, 159, 167, 170, 172, 179, 186, 193, 197, 199, 203, 228, 231, 246, 250, 256], "kaiser": [26, 28, 29, 30, 31, 91, 92, 93, 94, 95, 96, 159, 161, 162, 163, 166], "window": [26, 91, 159, 218, 225], "out": [26, 29, 32, 35, 41, 52, 76, 91, 92, 94, 97, 100, 128, 138, 142, 147, 149, 150, 152, 153, 159, 162, 167, 170, 176, 177, 179, 180, 183, 184, 185, 186, 188, 189, 191, 192, 193, 195, 197, 201, 204, 206, 209, 214, 229, 231, 232, 233, 239, 240, 243, 245], "plt": [26, 37, 39, 91, 92, 128, 130, 138, 142, 146, 147, 148, 149, 150, 155, 157, 159, 172, 174, 175, 176, 178, 181, 187, 193, 194, 195, 196, 198, 200, 202, 203, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 224, 226, 227, 228, 230, 234, 235, 237, 238, 241, 242, 244, 246, 254, 255, 256, 257, 258, 259, 260], "figur": [26, 37, 39, 91, 92, 128, 130, 138, 142, 146, 147, 148, 149, 150, 155, 157, 159, 172, 174, 175, 176, 178, 181, 187, 193, 194, 195, 196, 198, 200, 202, 203, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 224, 226, 227, 228, 229, 230, 234, 235, 237, 238, 241, 242, 244, 246, 254, 255, 256, 257, 258, 259, 260], "figsiz": [26, 37, 39, 91, 92, 128, 130, 138, 142, 146, 147, 148, 149, 150, 155, 157, 159, 172, 174, 175, 176, 178, 181, 187, 193, 194, 195, 196, 198, 200, 202, 203, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 224, 226, 227, 228, 229, 230, 234, 235, 237, 238, 241, 242, 244, 246, 254, 255, 256, 257, 258, 259, 260], "8": [26, 32, 35, 37, 39, 76, 77, 91, 92, 97, 100, 102, 128, 129, 130, 138, 139, 142, 143, 146, 147, 148, 149, 150, 151, 155, 157, 159, 167, 170, 172, 174, 175, 176, 178, 179, 181, 186, 187, 193, 195, 196, 197, 198, 199, 202, 203, 206, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 224, 226, 227, 228, 229, 230, 231, 234, 235, 237, 241, 242, 244, 246, 250, 255, 256, 257, 258, 260], "plot": [26, 37, 39, 56, 57, 58, 62, 80, 81, 83, 88, 91, 92, 128, 130, 138, 142, 146, 147, 148, 149, 150, 155, 157, 159, 174, 175, 176, 178, 181, 187, 193, 194, 195, 196, 198, 200, 202, 203, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 234, 235, 237, 238, 241, 242, 244, 246, 254, 255, 256, 258, 259, 260, 261, 262], "marker": [26, 91, 92, 130, 159, 211, 227, 254, 255, 256, 259], "label": [26, 37, 39, 91, 92, 129, 139, 143, 146, 148, 151, 155, 157, 159, 172, 174, 193, 194, 196, 200, 210, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 228, 234, 237, 238, 254, 257, 258, 259, 260], "o": [26, 91, 92, 159, 254], "titl": [26, 91, 128, 130, 138, 146, 148, 159, 172, 174, 175, 176, 178, 181, 187, 193, 194, 200, 202, 210, 224, 228, 238, 241, 242, 244, 246, 254, 257, 258, 259, 260], "tight_layout": [26, 91, 128, 130, 138, 146, 148, 159, 172, 174, 175, 176, 178, 181, 187, 193, 194, 195, 202, 210, 224, 228, 238, 241, 242, 244, 246, 257, 258, 259, 260], "preserv": [26, 28, 50, 63, 67, 70, 73, 75, 89, 91, 93, 159, 161, 212, 222], "call": [26, 27, 28, 49, 50, 63, 67, 70, 73, 75, 89, 91, 92, 93, 159, 161], "true": [26, 37, 38, 39, 40, 91, 92, 128, 138, 142, 146, 148, 150, 155, 156, 157, 158, 159, 172, 173, 175, 177, 178, 180, 181, 186, 190, 195, 202, 207, 208, 211, 220, 222, 227, 229, 236, 257, 259], "y1": [26, 91, 92, 159, 200], "70": [26, 199, 260], "y2": [26, 91, 92, 159, 200], "140": [26, 187], "y3": [26, 91, 92, 159], "210": 26, "y4": [26, 91, 159], "y5": [26, 91, 159], "flush": [26, 27, 48, 49, 55, 91, 92, 159, 262], "y_1": [26, 91, 159, 200], "y_2": [26, 91, 159, 200], "y_3": [26, 91, 159], "y_4": [26, 91, 159], "y_5": [26, 91, 159], "__call__": [26, 27, 28, 48, 49, 50, 63, 65, 66, 67, 70, 72, 73, 74, 75, 89, 91, 92, 93, 119, 122, 130, 132, 159, 160, 161, 262], "full": [26, 27, 49, 91, 92, 159, 160, 176], "__len__": [26, 48, 51, 91, 159], "__repr__": [26, 29, 48, 52, 72, 76, 91, 94, 101, 103, 128, 138, 140, 142, 144, 150, 159, 162], "style": [26, 29, 48, 52, 72, 76, 91, 94, 101, 103, 128, 138, 140, 142, 144, 150, 159, 162, 229], "__str__": [26, 30, 48, 53, 72, 77, 91, 95, 101, 104, 128, 138, 141, 142, 145, 150, 159, 163], "human": [26, 30, 48, 53, 72, 77, 91, 95, 101, 104, 128, 138, 141, 142, 145, 150, 159, 163], "readabl": [26, 30, 48, 53, 72, 77, 91, 95, 101, 104, 128, 138, 141, 142, 145, 150, 159, 163], "reset": [26, 34, 48, 60, 65, 69, 72, 86, 91, 99, 119, 127, 130, 136, 159, 169], "when": [26, 34, 48, 55, 58, 60, 62, 72, 83, 86, 88, 91, 99, 159, 169, 174, 175, 177, 178, 180, 181, 192, 213, 214, 215, 216, 219, 220, 226, 240, 246, 254, 255, 256], "pass": [26, 48, 55, 91, 159, 174, 177, 180, 186, 193, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 248, 250, 252, 255, 256, 262], "through": [26, 48, 55, 91, 138, 150, 159, 177, 180, 186, 248, 255, 256, 258], "indic": [26, 28, 38, 39, 40, 48, 50, 63, 65, 67, 70, 72, 73, 75, 89, 91, 93, 102, 129, 138, 139, 142, 143, 146, 148, 150, 151, 155, 156, 157, 158, 159, 161, 173, 190, 196, 198, 200, 202, 207, 208, 212, 220, 221, 222, 228, 234, 235, 236, 237], "whether": [26, 28, 38, 39, 40, 48, 50, 63, 65, 67, 70, 72, 73, 75, 89, 91, 93, 146, 148, 155, 156, 157, 158, 159, 161, 173, 190, 202, 207, 208, 220, 222, 228, 236], "consist": [26, 43, 44, 45, 46, 47, 48, 61, 91, 159], "previou": [26, 28, 48, 50, 61, 67, 69, 73, 75, 91, 93, 159, 161, 184, 185], "u": [26, 48, 62, 72, 88, 91, 159, 172, 226, 246, 247, 255, 256], "frequency_respons": [26, 48, 56, 72, 80, 91, 159, 262], "frequency_response_log": [26, 48, 57, 72, 81, 91, 159], "logarithm": [26, 48, 57, 72, 81, 91, 159, 213, 214, 216, 218, 219, 220, 255, 256], "axi": [26, 48, 57, 72, 81, 91, 159, 173, 190, 205, 207, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 225, 227, 228, 254], "custom": [26, 31, 91, 96, 102, 139, 143, 151, 159, 166, 262], "design": [26, 28, 31, 91, 93, 96, 102, 139, 143, 151, 159, 161, 166, 203, 250, 261, 262], "multir": [26, 27, 28, 31, 91, 92, 93, 96, 159, 161, 166, 203, 231, 262], "polyphase_tap": [26, 30, 32, 35, 91, 92, 95, 97, 100, 159, 163, 167, 170], "d": [26, 48, 54, 91, 159, 164, 195, 206, 250, 252, 261], "lfloor": [26, 48, 54, 91, 159, 164], "rfloor": [26, 48, 54, 91, 159, 164], "mode": [27, 28, 34, 49, 50, 55, 60, 63, 65, 67, 69, 70, 73, 75, 86, 89, 92, 93, 99, 160, 161, 169, 176, 246], "l": [27, 49, 74, 92], "stream": [27, 28, 29, 30, 34, 49, 50, 52, 53, 55, 60, 63, 65, 67, 69, 70, 73, 75, 76, 77, 86, 89, 92, 93, 94, 95, 99, 128, 138, 142, 150, 161, 162, 163, 169, 256], "convolut": [27, 49, 91, 92], "ha": [27, 49, 91, 92, 128, 138, 142, 174, 187, 195, 196, 206, 244, 246, 258, 259, 260], "align": [27, 49, 92, 93, 138, 161, 254], "howev": [27, 43, 44, 45, 47, 49, 92, 119, 178, 181, 254], "produc": [27, 49, 91, 92, 159, 196, 260], "final": [27, 49, 92], "dictat": [27, 49, 92], "argument": [27, 28, 49, 92, 93, 161, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 255, 256], "specif": [28, 46, 93, 161, 253, 260], "npt": [28, 93, 102, 129, 139, 143, 151, 161, 213, 214, 215, 216, 219, 220, 226, 230], "string": [29, 30, 52, 53, 76, 77, 94, 95, 102, 103, 104, 139, 140, 141, 143, 144, 145, 151, 162, 163, 199, 218, 225, 262], "represent": [29, 30, 52, 53, 76, 77, 94, 95, 103, 104, 140, 141, 144, 145, 162, 163, 227, 262], "print": [30, 53, 77, 95, 163, 199, 254, 255, 256, 258], "167": [30, 95], "24": [30, 95, 163], "shape": [30, 53, 77, 92, 95, 101, 102, 108, 110, 113, 114, 118, 128, 138, 139, 142, 143, 150, 151, 163, 196, 198, 212, 228, 234, 235, 237, 256, 261, 262], "84": [30, 95], "befor": [32, 35, 97, 100, 167, 170, 263], "decomposit": [32, 35, 97, 100, 167, 170, 262], "after": [32, 35, 97, 100, 167, 170], "10": [32, 35, 37, 39, 41, 91, 92, 97, 100, 102, 128, 138, 139, 142, 143, 146, 148, 150, 151, 155, 157, 159, 167, 170, 172, 173, 174, 179, 183, 186, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 210, 211, 213, 214, 215, 216, 219, 220, 224, 226, 228, 230, 231, 234, 235, 236, 237, 238, 239, 240, 254, 255, 256, 257, 258, 259, 260], "9": [32, 35, 91, 92, 97, 100, 128, 138, 142, 150, 155, 159, 167, 170, 172, 179, 186, 193, 197, 199, 231, 234, 237, 256, 257, 259, 260, 262], "null": [36, 154, 216, 218, 260], "altern": [36, 154, 256], "hypothes": [36, 154], "follow": [36, 41, 200, 211, 222, 225, 227, 229, 231, 258], "assum": [36, 154, 174, 186, 204, 243], "valu": [36, 101, 102, 105, 115, 128, 129, 138, 139, 142, 143, 146, 148, 150, 151, 152, 153, 176, 183, 184, 185, 196, 200, 201, 211, 227, 256, 262], "random": [36, 128, 138, 142, 150, 174, 177, 180, 186, 193, 194, 200, 211, 212, 221, 228, 238, 257, 259], "process": [36, 37, 38, 40, 154, 155, 156, 158, 203, 231, 256, 258, 261], "w": [36, 154, 174, 254, 255, 256, 257, 258, 259, 260], "sigma": [36, 37, 38, 39, 40, 154, 155, 156, 157, 158, 174, 175], "_0": [36, 154], "_1": [36, 154], "test": [36, 154, 252, 261], "statist": [36, 37, 38, 40, 154, 155, 156, 158], "limits_": [36, 48, 72, 154], "left": [36, 37, 38, 72, 138, 142, 150, 154, 155, 156, 158, 172, 173, 174, 175, 190, 193, 195, 196, 200, 202, 206, 207, 208, 236, 246], "right": [36, 37, 38, 72, 138, 142, 150, 154, 155, 156, 158, 172, 173, 174, 175, 190, 193, 195, 196, 200, 202, 206, 207, 208, 236, 246], "gamma": [36, 38, 40, 154, 156, 158, 172], "sim": [36, 154, 174, 251], "chi_": [36, 37, 38], "2n": [36, 37, 38], "text": [36, 150, 154, 172, 173, 174, 175, 178, 181, 182, 183, 193, 194, 195, 201, 203, 205, 207, 208, 236, 238], "under": [36, 154], "detect": [36, 37, 38, 39, 40, 154, 155, 156, 157, 158, 172, 217, 223, 262], "threshold": [36, 38, 40, 154, 156, 158], "q_": [36, 37, 38, 40], "chi_n": [36, 37, 38, 40], "steven": [36, 37, 38, 40, 154, 155, 156, 158], "kai": [36, 37, 38, 40, 154, 155, 156, 158], "fundament": [36, 37, 38, 40, 154, 155, 156, 158], "theori": [36, 37, 38, 40, 154, 155, 156, 158], "section": [36, 43, 44, 45, 46, 47, 154, 256, 258], "static": [36, 37, 38, 39, 40, 154, 155, 156, 157, 158, 251], "n_nc": [36, 37, 38, 39, 40, 172], "number": [37, 38, 39, 40, 41, 43, 44, 47, 56, 57, 58, 62, 80, 81, 83, 88, 101, 102, 106, 116, 128, 129, 137, 138, 139, 142, 143, 150, 151, 172, 174, 177, 180, 186, 188, 189, 191, 196, 198, 199, 204, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 225, 226, 234, 235, 237, 239, 243], "For": [37, 38, 40, 155, 156, 158, 174, 187, 195, 244, 250, 255], "linspac": [37, 146, 148, 155, 175, 178, 181, 195, 210, 224, 256, 257, 258, 259], "20": [37, 39, 91, 92, 128, 130, 138, 142, 150, 155, 159, 172, 175, 177, 180, 183, 186, 193, 194, 199, 200, 201, 208, 231, 236, 244, 257, 259, 260, 262], "101": [37, 39, 155, 157], "25": [37, 177, 180, 186, 209, 212, 232, 233, 254, 257, 258, 260], "1e": [37, 155, 194, 259], "sigma2": [38, 40, 156, 158], "If": [39, 69, 102, 132, 139, 143, 151, 157, 159, 173, 174, 175, 186, 190, 204, 207, 208, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 225, 226, 227, 228, 236, 241, 243, 261], "logspac": [39, 157, 172], "theoret": [39, 146, 148, 210, 224, 259, 262], "variou": [39, 251, 260], "100": [39, 72, 83, 88, 130, 146, 148, 172, 174, 175, 178, 181, 183, 193, 201, 202, 210, 212, 213, 215, 221, 224, 226, 228, 238, 241, 242, 244, 254, 258], "1_000": [39, 174, 194, 195, 200, 238, 257], "000": [39, 194], "5_000": 39, "measur": [41, 43, 173, 174, 182, 183, 190, 193, 201, 205, 207, 208, 236, 258, 261, 262], "new": [41, 42, 65, 67, 101, 102, 128, 129, 138, 139, 142, 143, 150, 151, 238], "accumul": [41, 130, 133, 134, 136, 258], "from": [41, 56, 57, 72, 73, 80, 81, 93, 101, 117, 128, 138, 142, 149, 150, 161, 183, 188, 189, 191, 192, 201, 209, 218, 225, 232, 233, 239, 240, 250, 255, 256, 258, 261], "contain": [41, 174, 199], "add": [41, 43, 46, 128, 138, 142, 150, 174, 194, 198, 222, 235, 238, 248, 259, 263], "total": [41, 196, 198, 234, 235, 237, 260], "count": [41, 44, 193], "error_r": [41, 45, 46, 259], "everi": [41, 254], "can": [41, 43, 44, 45, 47, 119, 128, 174, 193, 196, 203, 204, 212, 218, 225, 252, 255, 256, 259, 261, 263], "obtain": 41, "tabul": [41, 42], "all": [41, 46, 132, 193, 212, 221, 222, 251, 253, 261], "ascend": [41, 46], "correspond": [41, 46, 222], "other": [43, 44, 45, 47, 254, 263], "quantiti": [43, 44, 45, 46, 47], "user": [43, 44, 45, 47, 255, 256], "caution": [43, 44, 45, 47], "instanc": [43, 44, 45, 47, 128], "transmit": [43, 101, 118, 128, 138, 142, 150, 193, 212], "e": [46, 130, 154, 155, 156, 157, 158, 173, 177, 178, 190, 246, 251, 252, 255, 256, 258, 259], "whatev": 46, "wa": [46, 175], "provid": [46, 101, 105, 115, 128, 138, 142, 146, 148, 150, 222, 251, 261], "wrapper": [48, 72], "scipi": [48, 72, 218, 225, 260, 261], "convolv": [48, 228], "It": [48, 72, 91, 102, 119, 139, 143, 151, 174, 212], "support": [48, 72, 262], "one": [48, 72, 129, 138, 139, 143, 149, 151, 196, 199, 212, 213, 214, 216, 218, 219, 220, 225, 241, 255, 256, 257, 260], "its": [48, 72, 73, 174, 255, 256, 260], "sum_": [48, 72, 156, 158, 173, 174, 175, 190, 193, 236], "valid": [49, 195, 212, 221, 222, 246], "same": [49, 92, 228, 255], "0013559842808217807": [52, 53], "005995136544658217": [52, 53], "008698817681933214": [52, 53], "0024103767414047302": [52, 53], "010205586837665018": [52, 53], "018983779931504997": [52, 53], "011950905288150394": [52, 53], "01518393864077397": [52, 53], "051622191325047306": [52, 53], "07210389837804473": [52, 53], "04745944982876247": [52, 53], "039173517569276436": [52, 53], "17918683372907862": [52, 53], "3367363220550604": [52, 53], "4611457574513795": [52, 53], "5084040873607553": [52, 53], "30": [53, 91, 159, 187, 213, 215, 226, 241, 242, 256, 262], "31": 53, "15": [53, 128, 157, 179, 197, 231, 244], "remain": [55, 187, 204], "1024": [56, 57, 80, 81, 213, 214, 216, 219, 220, 257, 260], "decad": [57, 81, 213, 214, 216, 219, 220, 255, 258], "resampl": [65, 66, 67, 68, 69, 70, 71, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 203, 231, 261, 262], "http": [65, 172, 182, 196, 203, 205, 246, 250, 251, 252], "wirelesspi": 65, "com": [65, 172, 196, 203, 251, 252], "fraction": [65, 69, 196, 254], "structur": 65, "index": [65, 69, 212, 221, 222, 227, 250], "should": [69, 128, 212, 252], "equal": [69, 128], "three": [69, 254, 260], "lfilter": 72, "b_i": [72, 75, 79, 213, 214, 215, 216, 219, 220, 226, 230, 256], "feedback": [72, 75, 78, 213, 214, 215, 216, 219, 220, 226, 230, 256], "a_j": [72, 75, 78, 213, 214, 215, 216, 219, 220, 226, 230, 256], "These": [72, 138, 142, 150, 229, 252, 258], "differ": [72, 129, 139, 143, 149, 151, 228, 246, 260], "a_0": 72, "b": [72, 75, 172, 175, 196, 199, 213, 215, 226, 250, 251, 260], "classmethod": [72, 73], "zerospol": [72, 73, 76, 77, 213, 214, 215, 216, 219, 220, 226, 230, 256], "self": [72, 73], "b_tap": [72, 77, 79, 256], "a_tap": [72, 77, 78, 256], "exp": [76, 77, 138, 142, 150, 187, 196, 200, 202, 213, 214, 215, 216, 219, 220, 226, 228, 230, 242, 244, 246, 254, 256, 258], "1j": [76, 77, 187, 202, 213, 214, 215, 216, 219, 220, 226, 228, 230, 242, 244, 254, 256, 258], "conj": [76, 77, 213, 214, 215, 216, 219, 220, 226, 230, 256, 258], "478207252018059": [76, 77, 256], "6400000000000001": [76, 77, 256], "7391036260090295": [77, 256], "3061467458920719j": [77, 256], "insert": [91, 159], "multipli": [91, 159], "hold": [91, 93, 159, 161, 204, 262], "recommend": 91, "wai": [91, 252], "11": [91, 128, 138, 142, 150, 179, 197, 203, 231, 250], "zoh": [91, 93, 96, 159, 161, 166], "12": [91, 128, 138, 142, 150, 156, 158, 172, 179, 197, 203, 231, 255, 259], "13": [91, 128, 138, 142, 150, 154, 155, 156, 158, 176, 179, 197, 231, 262], "matlab": [91, 93, 96, 159, 161, 166, 261], "iter": 92, "concaten": [92, 256], "linearli": [93, 161], "2r": 93, "ramp": [93, 119, 161], "advanc": [93, 161], "ones": [93, 161, 258], "modul": [101, 102, 110, 111, 113, 128, 130, 138, 139, 142, 143, 146, 148, 150, 151, 174, 188, 189, 191, 193, 194, 200, 210, 212, 221, 224, 227, 238, 239, 250, 253, 257, 259, 261, 262], "map_symbol": [101, 109, 128, 138, 142, 150, 211, 212, 262], "decide_symbol": [101, 107, 128, 138, 142, 150, 262], "a_hat": [101, 107, 128, 138, 142, 150], "decis": [101, 107, 108, 128, 138, 142, 150, 212], "maximum": [101, 107, 108, 128, 138, 142, 150, 196, 198, 211, 227, 234, 235, 237], "likelihood": [101, 107, 108, 128, 138, 142, 150], "mle": [101, 107, 128, 138, 142, 150], "puls": [101, 102, 108, 110, 113, 114, 118, 128, 138, 139, 142, 143, 150, 151, 196, 198, 212, 228, 234, 235, 237, 261, 262], "match": [101, 102, 108, 114, 128, 138, 139, 142, 143, 150, 151, 262], "abstract": [101, 105, 115], "log_2": [101, 106, 128, 138, 142, 150, 175, 188, 189, 191, 239], "phase_offset": [101, 102, 112, 128, 129, 138, 139, 142, 143, 147, 150, 151, 174, 193, 194, 200, 211, 212, 227, 238, 257, 259], "degre": [101, 102, 112, 128, 129, 138, 139, 142, 143, 147, 150, 151, 194, 200, 202, 206], "dot": [101, 102, 117, 128, 138, 142, 149, 150, 227], "mapsto": [101, 102, 117, 128, 138, 142, 149, 150, 227], "mathbb": [101, 102, 117, 128, 138, 142, 149, 150, 175, 227, 246], "sym": [101, 102, 116, 128, 129, 138, 139, 142, 143, 150, 151, 189, 192, 196, 239, 240, 260], "pulse_shap": [101, 102, 108, 110, 113, 128, 138, 139, 142, 143, 150, 151, 257], "tx_filter": [101, 118, 128, 138, 142, 150], "rx_filter": [101, 114, 128, 138, 142, 150], "rect": [102, 139, 143, 151, 260], "whose": [102, 129, 139, 142, 143, 151], "import": [102, 139, 143, 151, 252, 254, 255, 256, 257, 258, 259, 260, 261], "roll": [102, 139, 143, 151, 246, 260], "off": [102, 139, 143, 151], "psd": [105, 115, 146, 148, 175, 188, 189, 191, 192, 210, 224, 239, 240], "p_b": 105, "s_hat": [108, 259], "size": [108, 110, 176, 186, 254, 258, 259, 260], "p_e": 115, "loopfilt": [119, 120, 121, 122, 123, 124, 125, 126, 127, 249, 258, 262], "ppi": [119, 123, 249], "track": 119, "constant": [119, 128, 130, 133, 134, 218, 225, 256, 258], "cannot": 119, "chirp": 119, "underli": [119, 125], "scheme": [128, 138, 142, 150, 262], "similar": [128, 138, 150, 260], "One": [128, 138, 150, 260], "distinct": [128, 138, 150], "result": [128, 138, 150, 173, 190, 195, 206, 207, 208, 234, 236, 237, 259], "envelop": [128, 255, 256], "which": [128, 138, 150, 172, 173, 174, 175, 190, 194, 200, 205, 206, 207, 211, 227, 238, 254, 258, 260], "lower": [128, 138, 150, 216, 218, 234, 237], "also": [128, 195, 196, 261], "consid": [128, 199], "cpfsk": 128, "separ": 128, "modem": [128, 138, 142, 150], "45": [128, 129, 138, 139, 142, 147, 174, 193, 194, 200, 202, 211, 212, 227, 238, 257, 259], "symbol_label": [128, 129, 138, 139, 142, 143, 149, 150, 151, 259], "randint": [128, 138, 142, 150, 174, 177, 180, 186, 193, 194, 200, 211, 212, 221, 228, 238, 257, 259], "1000": [128, 138, 142, 150, 193, 195, 228, 241, 242, 259], "dtype": [128, 138, 142, 150, 176, 204, 228, 243, 247, 258], "uint8": [128, 138, 142, 150, 204, 243], "complex_symbol": [128, 138, 142, 150], "70710678": [128, 138, 142], "70710678j": [128, 138, 142], "linestyl": [128, 138, 142, 150, 211, 222, 227, 229, 246, 254, 258, 259, 260], "tx_sampl": [128, 138, 142, 150], "50": [128, 138, 142, 150, 183, 201, 209, 227, 241, 242, 254, 257], "like": [128, 252, 261, 262], "channel": [128, 138, 146, 148, 175, 177, 178, 180, 181, 186, 210, 224, 261, 262], "subplot": [128, 138, 200, 258, 259], "imag": [128, 138, 254], "trajectori": 128, "although": 128, "boundari": 128, "lead": [128, 200, 259], "spectral": [128, 187, 218, 257, 260], "effici": [128, 187, 206, 244], "gmsk": 128, "rx_sampl": [128, 138, 142, 150], "last": [128, 138, 204, 250], "rx_symbol": [128, 138, 142, 150], "rx_complex_symbol": [128, 138, 142, 150], "14": [128, 138, 142, 150, 155, 179, 197, 231], "array_equ": [128, 138, 142, 150], "bin": [129, 139, 143, 149, 151, 193, 211, 227, 259], "absolut": [129, 130, 133, 135, 139, 151, 175], "consecut": [129, 139, 143, 151], "adjac": [129, 139, 143, 149, 151, 259, 260], "mai": [129, 139, 143, 149, 151, 193, 211, 222, 225, 227, 229, 256], "more": [129, 139, 143, 149, 151, 262], "start": [129, 139, 143, 151, 250], "0j": [129, 139, 143, 151], "go": [129, 139, 143, 151], "counter": [129, 139, 143, 151], "clockwis": [129, 139, 143, 151], "around": [129, 139, 143, 151], "circl": [129, 139, 143, 151, 256], "increment": [130, 132, 133, 134, 258], "v": [130, 183, 201, 250], "Then": 130, "fsk": 130, "60": [130, 260], "repeat": 130, "cp": 130, "57": 130, "bpsk": [130, 146, 148, 210, 224, 228, 257], "variabl": [130, 132, 199, 258], "forward": [130, 137], "settabl": [130, 131, 134, 135], "vari": 132, "intern": 136, "set": [136, 174, 195, 211, 216, 218, 222, 225, 227, 229, 251, 253, 256], "qpsk": [138, 142, 146, 147, 148, 150, 174, 193, 194, 210, 211, 212, 224, 227, 228, 238, 261, 262], "convent": [138, 150], "transit": [138, 150, 180, 181, 186, 248], "independ": 138, "apart": 138, "origin": [138, 150, 244, 254], "taken": [138, 142, 150], "jq": 138, "begin": [138, 150, 154], "end": [138, 150, 154, 241, 251], "encod": [142, 146, 148, 184, 185, 261], "inform": [142, 188, 189, 191, 239], "ge": [143, 151, 172], "were": [146, 148], "simon": [146, 148], "alouini": [146, 148], "over": [146, 148, 199], "fade": [146, 148], "chapter": [146, 148, 203, 231], "john": [146, 148], "proaki": [146, 148], "optimum": [146, 148], "psk8": [146, 148, 210, 224, 259], "psk16": [146, 148, 210, 224, 259], "compar": [146, 148, 260], "de": [146, 148, 262], "se": [148, 224], "00000000e": [149, 150, 256], "00": [149, 150, 256], "00j": [149, 150], "07106781e": [149, 150], "01": [149, 150, 199, 256, 258], "01j": [149, 150], "12323400e": [149, 150], "17": [149, 150, 206, 231, 250], "83697020e": 149, "22464680e": [149, 150], "16j": [149, 150], "annot": [149, 227, 262], "odd": [150, 241], "rotat": [150, 202], "rel": [150, 246, 260], "even": [150, 196, 234, 237], "2m": 150, "displaystyl": 150, "pi4_qpsk": 150, "exceed": [152, 153], "15865525393145707": [152, 153], "158655": [152, 153], "0000010494310452": [152, 153], "perfect": 154, "knowledg": 154, "cn": [154, 174], "mathrm": 154, "re": 154, "sqrt": [154, 155, 156, 158, 172, 193, 196, 236, 246, 257, 258, 260], "____": 159, "2p": 161, "95": [163, 193], "desir": [172, 174, 259], "ln": [172, 196], "62": [172, 199], "_": [172, 193], "log_": [172, 173, 183, 190, 195, 205, 207, 208, 236], "54": [172, 199], "44": 172, "12ab": 172, "7b": 172, "claim": 172, "leq": 172, "le": [172, 202, 206, 234, 237], "8096": 172, "radarsp": 172, "weebli": 172, "upload": 172, "21471216": 172, "albersheim_alternative_form": 172, "pdf": [172, 196], "bpb": 172, "w2": 172, "wpmucdn": 172, "site": [172, 250], "gatech": 172, "edu": 172, "dist": [172, 251], "462": 172, "file": [172, 251, 253], "2016": 172, "noncoher": 172, "approxim": [172, 262], "www": [172, 196, 203], "mathwork": [172, 196, 203], "help": [172, 196, 203], "html": [172, 196, 203, 250], "semilogx": [172, 223], "legend": [172, 200, 254, 257, 258, 260], "grid": [172, 175, 178, 181, 195, 229, 254, 257, 258, 260], "both": [172, 175, 211, 227, 228, 254, 258], "xlabel": [172, 175, 176, 178, 181, 193, 195, 246, 254, 257, 258, 260], "ylabel": [172, 175, 176, 178, 181, 193, 195, 246, 254, 257, 258, 260], "across": 172, "nuse": 172, "avg": [173, 174, 205], "ax": [173, 190, 205, 207, 229], "along": [173, 190, 205, 207], "entir": [173, 190, 205, 207], "decibel": [173, 183, 190, 201, 207, 208, 236, 261, 262], "seed": [174, 177, 180, 186], "ad": [174, 222, 251, 261, 262], "explicitli": 174, "known": 174, "must": [174, 196, 202, 222, 234, 237, 246], "numpi": [174, 177, 180, 186, 243, 254, 255, 256, 257, 258, 259, 260, 261], "default_rng": [174, 177, 180, 186], "noisi": 174, "sin": [174, 241], "zorder": [174, 194, 238], "infti": [174, 175], "nand": 174, "capac": [175, 178, 181, 261, 262], "2d": [175, 222], "x_i": [175, 177, 178, 180, 181, 186, 200], "y_i": [175, 177, 178, 180, 181, 186], "monoton": 175, "decreas": 175, "limit": [175, 211, 216, 218, 227, 259], "At": 175, "occur": 175, "view": [175, 251, 261], "59": 175, "shannon": 175, "semilogi": [175, 210, 223, 224], "barker": [176, 247, 261, 262], "ani": [176, 183, 187, 201, 216, 218, 244, 247, 253], "int64": [176, 247], "bipolar": [176, 262], "float64": [176, 247], "sequenc": [176, 177, 180, 186, 246, 248, 261, 262], "format": 176, "seq": 176, "have": [176, 187, 204, 228, 243, 244], "ideal": [176, 259], "minim": 176, "autocorrel": [176, 246], "sidelob": [176, 234, 237, 246], "corr": [176, 246], "lag": [176, 246], "ab": [176, 246, 260], "roughli": [177, 180, 254], "eras": 177, "flip": 180, "h_b": 181, "cf": 182, "v_": [182, 183, 201, 208, 236], "en": [182, 205, 246], "wikipedia": [182, 205, 246], "org": [182, 205, 246], "wiki": [182, 205, 246], "type": [183, 193, 201, 204, 218, 223, 225, 243, 262], "voltag": [183, 201, 208, 236, 261], "x_": [183, 201], "mhz": [183, 201], "77": [183, 199, 201], "50e6": 183, "76": [183, 199], "98970004336019": 183, "mw": [183, 201], "dbm": [183, 201], "dbv": [183, 201], "020599913279624": 183, "uncod": 185, "dmc": [186, 248, 261, 262], "memoryless": [186, 248, 261], "pr": 186, "y_j": 186, "alphabet": 186, "ldot": 186, "doe": [187, 244], "anti": [187, 244, 262], "alias": [187, 244, 262], "400": [187, 254], "x1": 187, "200": [187, 254, 259], "x2": 187, "130": 187, "x3": [187, 246], "spectrum": [187, 213, 214, 216, 218, 219, 220, 225, 241, 242, 244], "content": 187, "abov": [187, 244], "nyquist": [187, 212, 244, 260], "fold": 187, "cw": 187, "unalias": 187, "fft": [187, 218, 225, 241, 242, 244], "2048": [187, 241, 242, 244, 257], "xlim": [187, 244, 257, 258, 260], "qam": [188, 189, 191, 239], "249387366082999": [188, 189], "020599913279625": [188, 240], "750612633917001": [191, 239], "979400086720376": [191, 192], "system": [192, 203, 231, 240, 251, 253, 258, 261], "norm": [193, 196, 198, 234, 235, 237], "noiseless": 193, "sourc": 193, "max": [193, 207, 208], "instantan": 193, "percentil": [193, 216, 218, 225], "either": 193, "72054562264887": 193, "980052996078825": 193, "182": 193, "04864939013262": 193, "142": 193, "05971743961175": 193, "95th": 193, "68": [193, 199], "7565813117864": 193, "inst_evm": 193, "hist": 193, "histogram": 193, "frequency_offset": [194, 248, 262], "freq_rat": 194, "cycl": [194, 228], "5e": 194, "deg": [194, 200], "path": [195, 261], "loss": [195, 261], "meter": [195, 206, 245], "transmitt": 195, "far": 195, "field": 195, "neg": [195, 200], "impli": 195, "possibl": [195, 261], "so": [195, 196, 198, 234, 235, 237, 261], "km": 195, "link": [195, 261, 262], "ghz": [195, 206, 245], "1e3": [195, 202, 241], "1e9": [195, 206, 245], "92": 195, "44778322188337": 195, "doubl": [195, 206], "increas": [195, 206, 256], "2e3": 195, "98": 195, "468383135163": 195, "2e9": 195, "product": [196, 260], "side": [196, 213, 214, 216, 218, 219, 220, 225, 255, 256, 257, 260], "thought": [196, 263], "smaller": [196, 234, 237, 260], "wider": 196, "how": [196, 198, 212, 221, 222, 228, 234, 235, 237, 253], "gaussdesign": 196, "onlinelibrari": 196, "wilei": 196, "doi": 196, "1002": 196, "9780470041956": 196, "app2": 196, "h_0p1": [196, 234, 237], "h_0p2": 196, "h_0p3": 196, "reason": [198, 235, 250], "larger": [198, 200, 211, 227, 235], "h_half_sin": 198, "displai": [199, 211, 213, 214, 216, 218, 219, 220, 225, 227], "line": [199, 228, 251, 257], "quick": 199, "brown": 199, "fox": 199, "jump": 199, "lazi": 199, "dog": 199, "00000000": 199, "65": 199, "71": 199, "75": [199, 211, 258, 259], "69": 199, "63": 199, "6b": 199, "72": 199, "6f": 199, "6e": 199, "00000010": 199, "66": 199, "78": 199, "6a": 199, "6d": 199, "73": 199, "74": 199, "00000020": 199, "6c": 199, "61": 199, "7a": 199, "79": 199, "67": 199, "he": 199, "02": [199, 256, 258], "03": [199, 256], "04": [199, 256], "00000004": 199, "05": [199, 254, 256, 258], "06": 199, "07": 199, "08": 199, "00000008": 199, "09": 199, "0a": 199, "iq_imbal": [200, 248, 262], "iq": [200, 248, 261], "imbal": [200, 248, 261], "posit": 200, "compon": [200, 241, 242, 244], "g_i": 200, "180": 200, "g_q": 200, "x_q": 200, "horizont": 200, "stretch": 200, "while": [200, 260], "vertic": 200, "northwest": 200, "northeast": 200, "50118723": 201, "36272725": 201, "9952623149688795": 201, "satisfi": 202, "cdot": 202, "remov": [202, 218, 225, 262], "half_length": 203, "a_stop": 203, "80": [203, 246], "stopband": [203, 234, 237], "attenu": [203, 234, 237], "a_": 203, "stop": 203, "fred": [203, 231], "harri": [203, 231], "dsp": [203, 261], "designmultiratefir": 203, "dtypelik": [204, 243], "most": [204, 243], "signific": [204, 243], "enough": 204, "fill": 204, "smallest": 204, "unsign": 204, "integ": 204, "diamet": 206, "55": 206, "eta": 206, "dbi": 206, "arcsin": 206, "83": 206, "dish": 206, "21": 206, "810210290266568": 206, "437435887991374": 206, "23": 206, "sinc": [206, 212, 250, 259], "antenna": [206, 261], "we": [206, 261], "observ": [206, 212], "830810203546193": 206, "529544741425365": 206, "keyword": [210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 255, 256], "pyplot": [210, 211, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 254, 255, 256, 257, 258, 259, 260], "heatmap": [211, 259], "scatter": 211, "overwritten": [211, 222, 225, 227], "rang": [211, 258, 259], "hist2d": 211, "10_000": 211, "color": [212, 221, 222, 228, 257, 260], "imaginari": [212, 222, 228], "interleav": [212, 222], "base": [212, 221, 222, 228], "examin": 212, "intersymbol": 212, "interfer": 212, "isi": 212, "two": [212, 213, 214, 216, 218, 219, 220, 225, 246, 254, 255, 256], "cascad": 212, "why": 212, "often": [212, 254], "practic": 212, "n_time": [213, 256], "n_freq": 213, "x_axi": [213, 214, 216, 218, 219, 220, 225, 255, 256, 257, 258], "log": [213, 214, 216, 218, 219, 220, 255, 256, 258], "definit": [213, 214, 215, 216, 219, 220, 226, 230], "n_t": 213, "n_f": 213, "scale": [213, 214, 216, 218, 219, 220, 225, 255, 256], "option": [213, 214, 216, 218, 219, 220, 225], "h_srrc": [213, 214, 215, 216, 219, 220, 226, 228, 230, 259], "ylim": [214, 246, 255, 258, 259, 260], "48": 214, "52": 214, "10th": [216, 218, 225], "crop": [216, 218], "deep": [216, 218], "x_label": 217, "hann": [218, 225], "overlap": [218, 225, 257], "detrend": [218, 225], "median": 218, "segment": [218, 225], "256": [218, 225, 257], "point": [218, 225], "trend": [218, 225], "unwrap": [220, 258], "stride": 222, "colorbar": 222, "1d": 222, "determin": 222, "row": 222, "collect": 222, "linecollect": 222, "linewidth": [222, 246], "solid": [222, 228], "cmap": 222, "rainbow": 222, "loglog": 223, "pcolormesh": 225, "vmin": 225, "vmax": 225, "100th": 225, "shade": 225, "gouraud": 225, "markers": 227, "diff": [228, 257], "about": [228, 253], "mutual": 228, "exclus": 228, "current": [228, 252], "dash": 228, "share": 228, "10e3": 228, "revert": 229, "rcdefault": 229, "_rc_param": 229, "rc_param": 229, "autolayout": 229, "max_open_warn": 229, "titleweight": 229, "bold": 229, "arrang": 231, "column": 231, "notion": 231, "demonstr": 231, "18": [231, 250, 259], "19": 231, "000005": 232, "5000": [232, 233], "000000025": 232, "005": [233, 258], "000025": 233, "excess": [234, 237, 260], "narrow": [234, 237], "expens": [234, 237], "higher": [234, 237, 260], "h_0p5": [234, 237], "h_0p9": [234, 237], "affect": [234, 237], "longer": [234, 237, 241], "h_4": [234, 237], "h_8": [234, 237], "h_16": [234, 237], "h_rect": [235, 260], "sample_rate_offset": [238, 248, 262], "append": [241, 257], "250": [241, 242], "300": [241, 242], "ksp": [241, 242], "notic": [241, 242, 254, 260], "conjug": [241, 242, 256], "500": [241, 242, 258], "now": [241, 242, 254, 262], "150": [241, 242], "asymmetr": 242, "copi": 244, "299792458": 245, "zadoff_chu": [246, 247, 262], "zadoff": [246, 247, 261, 262], "chu": [246, 247, 261, 262], "prime": 246, "gcd": 246, "ne": 246, "cyclic": 246, "x_u": 246, "c_": 246, "2q": 246, "mod": 246, "e2": 246, "93chu_sequ": 246, "x_3": 246, "139": 246, "tile": 246, "x_5": 246, "x5": 246, "cross": 246, "xcorr": 246, "sphinx": 250, "immateri": 250, "theme": 250, "depend": [250, 251, 253], "store": [250, 252, 253], "txt": [250, 251, 252, 253], "some": 250, "below": [250, 255, 256], "version": [250, 252, 261], "aren": 250, "resolut": 250, "minut": 250, "ci": 250, "myst": 250, "parser": 250, "updat": 250, "git": [250, 252], "math": 250, "dollar": 250, "ipykernel": 250, "26": 250, "nb": 250, "pickleshar": 250, "switch": 250, "pip": [250, 251, 252, 253, 261], "python3": [250, 251, 252, 253, 261], "built": 250, "run": 250, "command": [250, 251], "dirhtml": 250, "locat": [250, 253], "home": 250, "page": 250, "directori": [250, 252], "get": 250, "necessari": 250, "webpag": 250, "webserv": 250, "easili": [250, 251, 253, 255, 256], "python": [250, 261], "server": 250, "8080": 250, "access": 250, "web": 250, "browser": 250, "localhost": 250, "librari": [251, 252, 253, 254, 259, 261, 263], "ruff": [251, 252], "lint": [251, 252], "your": [251, 253], "develop": [251, 252, 253], "dev": [251, 253], "pyproject": [251, 253], "toml": [251, 252, 253], "tool": [251, 253, 261], "src": 251, "extend": 251, "includ": [251, 252, 253, 261], "ipynb": 251, "exclud": 251, "build": [251, 261], "doc": 251, "_version": 251, "py": [251, 253], "120": 251, "select": 251, "pycodestyl": 251, "pyflak": 251, "pyupgrad": 251, "flake8": 251, "bugbear": 251, "simplifi": 251, "isort": 251, "ignor": 251, "e501": 251, "e713": 251, "e714": 251, "__init__": 251, "f401": 251, "f403": 251, "manual": [251, 253], "check": 251, "hook": 251, "config": [251, 254, 255, 256, 257, 258, 259, 260], "yaml": 251, "repo": [251, 252], "github": [251, 261], "rev": 251, "v2": 251, "id": 251, "larg": 251, "fixer": 251, "trail": 251, "whitespac": 251, "astral": 251, "sh": 251, "v0": 251, "enabl": 251, "disabl": 251, "uninstal": 251, "extens": 251, "vscode": [251, 253], "json": [251, 253], "you": [251, 252, 253, 261], "edit": [251, 256], "latest": [252, 261], "releas": [252, 262], "main": [252, 260], "branch": 252, "mhostett": [252, 262], "Or": [252, 253], "pre": 252, "To": 252, "activ": 252, "benefici": 252, "fashion": 252, "allow": [252, 253], "chang": [252, 263], "immedi": 252, "seen": 252, "upon": 252, "next": 252, "clone": 252, "wherev": 252, "flag": 252, "packag": [252, 261], "commit": 252, "pytest": [252, 253], "cov": 252, "xdist": 252, "benchmark": 252, "ini_opt": 253, "minvers": 253, "addopt": 253, "showloc": 253, "testpath": 253, "execut": 253, "test_psk": 253, "instruct": 253, "invok": 253, "infrastructur": 253, "debug": 253, "inlinebackend": [254, 255, 256, 257, 258, 259, 260], "print_figure_kwarg": [254, 255, 256, 257, 258, 259, 260], "facecolor": [254, 255, 256, 257, 258, 259, 260], "widget": [254, 255, 256, 257, 258, 259, 260], "tx": 254, "decai": [254, 256], "fillstyl": 254, "show": [254, 255, 256, 257, 258, 259, 260], "accomplish": [254, 259], "def": [254, 257, 259], "resample_sign": 254, "new_sample_r": 254, "ty": 254, "gca": [254, 259], "set_prop_cycl": [254, 259], "four": 254, "appear": 254, "fourth": 254, "do": 254, "315": 254, "32": 254, "00095883": 255, "00175012": 255, "00423921": 255, "0058825": 255, "006151": 255, "00474595": 255, "0017044": 255, "00254816": 255, "00721645": 255, "0112324": 255, "01342358": 255, "01273202": 255, "00845058": 255, "0004368": 255, "01073669": 255, "02372977": 255, "03650247": 255, "04650654": 255, "05098525": 255, "04734644": 255, "03355896": 255, "00851486": 255, "02769991": 255, "07367348": 255, "12670447": 255, "1830132": 255, "23810898": 255, "28727058": 255, "3260799": 255, "3509384": 255, "35949665": 255, "conveni": [255, 256], "evalu": [255, 256], "here": [255, 256], "47820725": 256, "78207252e": 256, "58172329e": 256, "10862468e": 256, "86109590e": 256, "21565653e": 256, "01140214e": 256, "57286400e": 256, "67772160e": 256, "47338728e": 256, "10422993e": 256, "89312837e": 256, "12240078e": 256, "03953322e": 256, "69685122e": 256, "63882791e": 256, "81474977e": 256, "47193366e": 256, "85259041e": 256, "15647504e": 256, "23851924e": 256, "42176895e": 256, "84684395e": 256, "42721858e": 256, "72236648e": 256, "14721649e": 256, "10813095e": 256, "94024315e": 256, "78877688e": 256, "74077567e": 256, "87820725": 256, "53637958": 256, "94724205": 256, "13335164": 256, "1455082": 256, "04436799": 256, "88708159": 256, "71930943": 256, "5719707": 256, "46154771": 256, "39261642": 256, "36139242": 256, "35935288": 256, "3763214": 256, "40270968": 256, "43085717": 256, "45557651": 256, "47410241": 256, "48566716": 256, "49090568": 256, "49124786": 256, "48840102": 256, "4839738": 256, "47925143": 256, "47510421": 256, "47199608": 256, "47005584": 256, "46917696": 256, "46911955": 256, "denomin": 256, "73910363": 256, "30614675j": 256, "plane": 256, "endpoint": 256, "092337035029908": 256, "71104892744724": 256, "684365018955985": 256, "37868538208862": 256, "1263714068241546": 256, "9993519409971622": 256, "1909320767063554": 256, "016796159999999997": 256, "46380627201679264": 256, "3806359704987118j": 256, "4988817673846036": 256, "333342139809402j": 256, "5543277195082319": 256, "22961005941718524j": 256, "5291527586053246": 256, "2828380420991956j": 256, "lyon": 256, "understand": 256, "3rd": 256, "insid": 256, "outsid": 256, "unstabl": 256, "n_symbol": 257, "els": 257, "pb": 257, "x_bb_rect": 257, "papr_bb_rect": 257, "x_pb_rect": 257, "papr_pb_rect": 257, "x_bb_0p1": 257, "papr_bb_0p1": 257, "x_pb_0p1": 257, "papr_pb_0p1": 257, "x_bb_0p5": 257, "papr_bb_0p5": 257, "x_pb_0p5": 257, "papr_pb_0p5": 257, "x_bb_0p9": 257, "papr_bb_0p9": 257, "x_pb_0p9": 257, "papr_pb_0p9": 257, "2f": 257, "rf": [257, 258], "512": 257, "sweep_alpha": 257, "bb_papr": 257, "pb_papr": 257, "bpsk_bb_papr": 257, "bpsk_pb_papr": 257, "qpsk_bb_papr": 257, "qpsk_pb_papr": 257, "psk8_bb_papr": 257, "psk8_pb_papr": 257, "psk16_bb_papr": 257, "psk16_pb_papr": 257, "configur": 258, "loop_filt": 258, "0x000002276d2bcc08": 258, "theta_0": 258, "phase_error": 258, "freq_estim": 258, "suptitl": [258, 259], "direct": [258, 262], "synthes": [258, 262], "dd": [258, 262], "avail": [258, 259, 261], "001": 258, "b_nt": 258, "0005": 258, "0125": 258, "015": 258, "0175": 258, "t_lock": 258, "analyze_psk": 259, "100_000": 259, "n0": 259, "tx_mf": 259, "1e6": 259, "bpsk_ber": 259, "bpsk_ser": 259, "qpsk_ber": 259, "qpsk_ser": 259, "psk8_ber": 259, "psk8_ser": 259, "psk16_ber": 259, "psk16_ser": 259, "simul": [259, 261], "1e0": 259, "psk8_bin": 259, "psk8_grai": 259, "wors": 259, "rc_0p1": 260, "rc_0p5": 260, "rc_0p9": 260, "pm": 260, "nearli": 260, "small": 260, "lobe": 260, "much": 260, "freqz": 260, "worn": 260, "whole": 260, "h_rc_0p1": 260, "h_rc_0p5": 260, "h_rc_0p9": 260, "p_rect": 260, "cumsum": 260, "p_rc_0p1": 260, "p_rc_0p5": 260, "p_rc_0p9": 260, "within": 260, "srrc_0p1": 260, "srrc_0p5": 260, "srrc_0p9": 260, "therefor": 260, "significantli": 260, "due": 260, "being": 260, "h_srrc_0p1": 260, "h_srrc_0p5": 260, "h_srrc_0p9": 260, "p_srrc_0p1": 260, "p_srrc_0p5": 260, "p_srrc_0p9": 260, "gauss_0p1": 260, "gauss_0p2": 260, "gauss_0p3": 260, "softwar": 261, "radio": 261, "goal": 261, "analyz": 261, "reli": 261, "interoper": 261, "veri": 261, "numba": 261, "acceler": 261, "computation": 261, "intens": 261, "addition": 261, "aim": 261, "replic": 261, "relev": 261, "toolbox": 261, "progress": 261, "someth": 261, "pleas": 261, "open": 261, "issu": 261, "pypi": 261, "api": [261, 263], "convers": [261, 262], "synchron": 261, "budget": [261, 262], "manipul": 261, "septemb": 262, "2023": 262, "sensibl": 262, "matt": 262, "hostett": 262, "august": 262, "27": 262, "without": 262, "abil": 262, "improv": 262, "renam": 262, "superflu": 262, "replac": 262, "translat": 262, "fix": [262, 263], "juli": 262, "firinterpol": 262, "model": 262, "impair": 262, "fpsl": 262, "helper": 262, "semant": 263, "major": 263, "minor": 263, "patch": 263, "introduc": 263, "featur": 263, "backward": 263, "compat": 263, "make": 263, "bug": 263, "There": 263, "guarante": 263, "them": 263, "thei": 263}, "objects": {"": [[3, 0, 0, 1, "sdr", ""]], "sdr": [[9, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [26, 1, 1, "", "Decimator", "Implements a polyphase decimating finite impulse response (FIR) filter."], [36, 1, 1, "", "EnergyDetector", "Implements an energy detector."], [41, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [48, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [65, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [72, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [91, 1, 1, "", "Interpolator", "Implements a polyphase interpolating finite impulse response (FIR) filter."], [101, 1, 1, "", "LinearModulation", "Implements linear phase/amplitude modulation with arbitrary symbol mapping."], [119, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [128, 1, 1, "", "MSK", "Implements minimum-shift keying (MSK) modulation and demodulation."], [130, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [138, 1, 1, "", "OQPSK", "Implements offset quadrature phase-shift keying (OQPSK) modulation and demodulation."], [142, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [150, 1, 1, "", "PiMPSK", "Implements $pi/M$ phase-shift keying ($pi/M$ PSK) modulation and demodulation."], [152, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [153, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [154, 1, 1, "", "ReplicaCorrelator", "Implements an clairvoyant replica-correlator detector."], [159, 1, 1, "", "Resampler", "Implements a polyphase rational resampling finite impulse response (FIR) filter."], [172, 5, 1, "", "albersheim", "Estimates the minimum required single-sample SNR, given $N_{NC}$ non-coherent combinations, to achieve a probability of detection $P_D$ and probability of false alarm $P_{FA}$. This function implements Albersheim's equation."], [173, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [174, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [175, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [176, 5, 1, "", "barker", "Returns the Barker code/sequence of length $N$."], [177, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [178, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [179, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [180, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [181, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [182, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [183, 5, 1, "", "db", "Converts from linear units to decibels."], [184, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [185, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [186, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [187, 5, 1, "", "downsample", "Downsamples the time-domain signal $x[n]$ by the factor $r$."], [188, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [189, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [190, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [191, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [192, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [193, 5, 1, "", "evm", "Calculates the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [194, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [195, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [196, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [197, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [198, 5, 1, "", "half_sine", "Returns a half-sine pulse shape."], [199, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [200, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [201, 5, 1, "", "linear", "Converts from decibels to linear units."], [202, 5, 1, "", "mix", "Mixes the time-domain signal $x[n]$ with a complex exponential or real sinusoid."], [203, 5, 1, "", "multirate_taps", "Computes the multirate FIR filter that achieves rational resampling by $P/Q$."], [204, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [205, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [206, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [207, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [208, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [209, 5, 1, "", "percent", "Converts from a ratio to a percentage."], [231, 5, 1, "", "polyphase_matrix", "Converts the multirate FIR filter taps $h_i$ into the polyphase matrix $H_{i, j}$ that achieves rational resampling by $P/Q$."], [232, 5, 1, "", "ppb", "Converts from a ratio to parts per billion (ppb)."], [233, 5, 1, "", "ppm", "Converts from a ratio to parts per million (ppm)."], [234, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [235, 5, 1, "", "rectangular", "Returns a rectangular pulse shape."], [236, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [237, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [238, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [239, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [240, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [241, 5, 1, "", "to_complex_bb", "Converts the real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$ to a complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c} = f_{s,r}/2$."], [242, 5, 1, "", "to_real_pb", "Converts the complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$ to a real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r} = 2f_{s,c}$."], [243, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [244, 5, 1, "", "upsample", "Upsamples the time-domain signal $x[n]$ by the factor $r$."], [245, 5, 1, "", "wavelength", "Calculates the wavelength $lambda$ of an electromagnetic wave with frequency $f$."], [246, 5, 1, "", "zadoff_chu", "Returns the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.ClosedLoopPLL": [[10, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [11, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [12, 2, 1, "", "K0", "The NCO gain $K_0$."], [13, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [14, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [15, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [16, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [17, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [18, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [19, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [20, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [21, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [22, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [23, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [24, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [25, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[16, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [16, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [16, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [16, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [16, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[17, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[19, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[22, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.Decimator": [[27, 3, 1, "", "__call__", "Filters and decimates the input signal $x[n]$ with the polyphase FIR filter."], [28, 3, 1, "", "__init__", "Creates a polyphase FIR decimating filter."], [29, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [30, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [31, 2, 1, "", "method", "The method used to design the multirate filter."], [32, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [33, 2, 1, "", "rate", "The decimation rate $r$."], [34, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [35, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Decimator.__call__": [[27, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [27, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Decimator.__init__": [[28, 4, 2, "p-rate", "rate", "The decimation rate $r$."], [28, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [28, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.EnergyDetector": [[37, 3, 1, "", "p_d", "Computes the probability of detection $P_D$."], [38, 3, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [39, 3, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [40, 3, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.EnergyDetector.p_d": [[37, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [37, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [37, 4, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.p_fa": [[38, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [38, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [38, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [38, 4, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.EnergyDetector.roc": [[39, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [39, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [39, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."], [39, 4, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.threshold": [[40, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [40, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [40, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [40, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.ErrorRate": [[42, 3, 1, "", "__init__", "Creates a new error rate tabulation object."], [43, 3, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [44, 3, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [45, 3, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [46, 3, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [47, 3, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[43, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [43, 4, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [43, 4, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[44, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[45, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[47, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[49, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the FIR filter."], [50, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [51, 3, 1, "", "__len__", "Returns the filter length $N + 1$."], [52, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [53, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [54, 2, 1, "", "delay", "The delay of the FIR filter $d = lfloor frac{N + 1}{2} rfloor$ in samples."], [55, 3, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [56, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the FIR filter."], [57, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(omega)$ of the FIR filter on a logarithmic frequency axis."], [58, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [59, 2, 1, "", "order", "The order of the FIR filter $N$."], [60, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [61, 2, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [62, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [63, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [64, 2, 1, "", "taps", "The feedforward taps $h_i$ for $i = 0,...,N$."]], "sdr.FIR.__call__": [[49, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [49, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.FIR.__init__": [[50, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$ for $i = 0,...N$."], [50, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FIR.frequency_response": [[56, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [56, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.frequency_response_log": [[57, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [57, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [57, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[58, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.step_response": [[62, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FarrowResampler": [[66, 3, 1, "", "__call__", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [67, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [68, 2, 1, "", "order", "The order of the filter."], [69, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [70, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [71, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__call__": [[66, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [66, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.__init__": [[67, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FarrowResampler.reset": [[69, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[73, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [74, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the IIR filter."], [75, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [76, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [77, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [78, 2, 1, "", "a_taps", "The feedback taps $a_j$ for $j = 0,...,N$."], [79, 2, 1, "", "b_taps", "The feedforward taps $b_i$ for $i = 0,...,M$."], [80, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the IIR filter."], [81, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(omega)$ of the IIR filter on a logarithmic frequency axis."], [82, 2, 1, "", "gain", "The gain of the IIR filter."], [83, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [84, 2, 1, "", "order", "The order of the IIR filter $N$."], [85, 2, 1, "", "poles", "The poles of the IIR filter."], [86, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [87, 2, 1, "", "state", "The filter state."], [88, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [89, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [90, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[73, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [73, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [73, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."], [73, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__call__": [[74, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.IIR.__init__": [[75, 4, 2, "p-a", "a", "The feedback coefficients $a_j$ for $j = 0,...,N$."], [75, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$ for $i = 0,...,M$."], [75, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.IIR.frequency_response": [[80, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [80, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[81, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [81, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [81, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[83, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[88, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.Interpolator": [[92, 3, 1, "", "__call__", "Interpolates and filters the input signal $x[n]$ with the polyphase FIR filter."], [93, 3, 1, "", "__init__", "Creates a polyphase FIR interpolating filter."], [94, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [95, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [96, 2, 1, "", "method", "The method used to design the multirate filter."], [97, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [98, 2, 1, "", "rate", "The interpolation rate $r$."], [99, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [100, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Interpolator.__call__": [[92, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [92, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Interpolator.__init__": [[93, 4, 2, "p-rate", "rate", "The interpolation rate $r$."], [93, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [93, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.LinearModulation": [[102, 3, 1, "", "__init__", "Creates a new linear phase/amplitude modulation object."], [103, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [104, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [105, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [106, 2, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [107, 3, 1, "", "decide_symbols", "Converts the received complex symbols $hat{a}[k]$ into decimal symbol decisions $hat{s}[k]$ using maximum-likelihood estimation (MLE)."], [108, 3, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples $hat{x}[n]$ into decimal symbol decisions $hat{s}[k]$ using matched filtering and maximum-likelihood estimation."], [109, 3, 1, "", "map_symbols", "Converts the decimal symbols $s[k]$ to complex symbols $a[k]$."], [110, 3, 1, "", "modulate", "Modulates the decimal symbols $s[k]$ into pulse-shaped complex samples $x[n]$."], [111, 2, 1, "", "order", "The modulation order $M = 2^k$."], [112, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [113, 2, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [114, 2, 1, "", "rx_filter", "The receive decimating matched filter. The filter coefficients are matched to the pulse shape $h[-n]^*$."], [115, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [116, 2, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [117, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."], [118, 2, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter. The filter coefficients are the pulse shape $h[n]$."]], "sdr.LinearModulation.__init__": [[102, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [102, 4, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees to apply to symbol_map."], [102, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [102, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [102, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [102, 4, 2, "p-symbol_map", "symbol_map", "The symbol mapping ${0, dots, M-1} mapsto mathbb{C}$. An $M$-length array whose indices are decimal symbols $s[k]$ and whose values are complex symbols $a[k]$, where $M$ is the modulation order."]], "sdr.LinearModulation.ber": [[105, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.LinearModulation.decide_symbols": [[107, 4, 2, "p-a_hat", "a_hat", "The received complex symbols $hat{a}[k]$."]], "sdr.LinearModulation.demodulate": [[108, 4, 2, "p-x_hat", "x_hat", "The received pulse-shaped complex samples $hat{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.LinearModulation.map_symbols": [[109, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to map, $0$ to $M-1$."]], "sdr.LinearModulation.modulate": [[110, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.LinearModulation.ser": [[115, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.LoopFilter": [[120, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [121, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [122, 3, 1, "", "__call__", "Filters the input signal $x[n]$."], [123, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [124, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [125, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [126, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [127, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__call__": [[122, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.LoopFilter.__init__": [[123, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [123, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [123, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [123, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.MSK": [[129, 3, 1, "", "__init__", "Creates a new MSK object."]], "sdr.MSK.__init__": [[129, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [129, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [129, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.NCO": [[131, 2, 1, "", "K0", "(Settable) The NCO gain $K_0$."], [132, 3, 1, "", "__call__", "Steps the NCO with variable frequency and/or phase signals."], [133, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [134, 2, 1, "", "increment", "(Settable) The constant phase accumulation $omega$ of the NCO in radians/sample."], [135, 2, 1, "", "offset", "(Settable) The absolute phase offset $theta$ of the NCO in radians."], [136, 3, 1, "", "reset", "Resets the NCO."], [137, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__call__": [[132, 4, 2, "p-freq", "freq", "The variable frequency signal $f[n]$ in radians/sample. This input signal varies the per-sample phase increment of the NCO. If None, the signal is all zeros."], [132, 4, 2, "p-phase", "phase", "The variable phase signal $p[n]$ in radians. This input signal varies the per-sample phase offset of the NCO. If None, the signal is all zeros."]], "sdr.NCO.__init__": [[133, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [133, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [133, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.NCO.step": [[137, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.OQPSK": [[139, 3, 1, "", "__init__", "Creates a new OQPSK object."], [140, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [141, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."]], "sdr.OQPSK.__init__": [[139, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [139, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [139, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [139, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [139, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [139, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK": [[143, 3, 1, "", "__init__", "Creates a new PSK object."], [144, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [145, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [146, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [147, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [148, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [149, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[143, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [143, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [143, 4, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [143, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [143, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [143, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [143, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[146, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [146, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.ser": [[148, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [148, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.PiMPSK": [[151, 3, 1, "", "__init__", "Creates a new $pi/M$ PSK object."]], "sdr.PiMPSK.__init__": [[151, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [151, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [151, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [151, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [151, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [151, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [151, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.Q": [[152, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[153, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.ReplicaCorrelator": [[155, 3, 1, "", "p_d", "Computes the probability of detection $P_D$."], [156, 3, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [157, 3, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [158, 3, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.ReplicaCorrelator.p_d": [[155, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [155, 4, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [155, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."]], "sdr.ReplicaCorrelator.p_fa": [[156, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [156, 4, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [156, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [156, 4, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.ReplicaCorrelator.roc": [[157, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [157, 4, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [157, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."]], "sdr.ReplicaCorrelator.threshold": [[158, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [158, 4, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [158, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [158, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.Resampler": [[160, 3, 1, "", "__call__", "Resamples and filters the input signal $x[n]$ with the polyphase FIR filter."], [161, 3, 1, "", "__init__", "Creates a polyphase FIR rational resampling filter."], [162, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [163, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [164, 2, 1, "", "delay", "The delay of the FIR filter $d = lfloor frac{N + 1}{2} rfloor$ in samples."], [165, 2, 1, "", "down", "The decimation rate $Q$."], [166, 2, 1, "", "method", "The method used to design the multirate filter."], [167, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [168, 2, 1, "", "rate", "The resampling rate $P/Q$."], [169, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [170, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."], [171, 2, 1, "", "up", "The interpolation rate $P$."]], "sdr.Resampler.__init__": [[161, 4, 2, "p-down", "down", "The decimation rate $Q$."], [161, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [161, 4, 2, "p-taps", "taps", "The multirate filter design specification."], [161, 4, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.albersheim": [[172, 4, 2, "p-N_nc", "N_nc", "The number of non-coherent combinations $N_{NC} ge 1$."], [172, 4, 2, "p-p_d", "p_d", "The desired probability of detection $P_D$ in $(0, 1)$."], [172, 4, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{FA}$ in $(0, 1)$."]], "sdr.average_power": [[173, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the average power. The default is None, which computes the average power of the entire array."], [173, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [173, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[174, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [174, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [174, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [174, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[175, 4, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [175, 4, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.barker": [[176, 4, 2, "p-length", "length", "The length $N$ of the Barker code/sequence."], [176, 4, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[177, 4, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [177, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [177, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[178, 4, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[179, 4, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[180, 4, 2, "p-p", "p", "The probability $p$ of a bit flip."], [180, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [180, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[181, 4, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[182, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.db": [[183, 4, 2, "p-type", "type", "The type of input value or signal."], [183, 4, 2, "p-x", "x", "The input value or signal."]], "sdr.diff_decode": [[184, 4, 2, "p-y", "y", "The input encoded data $y[k]$."], [184, 4, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[185, 4, 2, "p-x", "x", "The input uncoded data $x[k]$."], [185, 4, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[186, 4, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [186, 4, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [186, 4, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [186, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [186, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.downsample": [[187, 4, 2, "p-rate", "rate", "The downsampling factor $r$."], [187, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.ebn0_to_esn0": [[188, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [188, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [188, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[189, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [189, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [189, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [189, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[190, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the energy. The default is None, which computes the energy of the entire array."], [190, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [190, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[191, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [191, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [191, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[192, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [192, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.evm": [[193, 4, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [193, 4, 2, "p-output", "output", "The output type of the EVM calculation."], [193, 4, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [193, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.frequency_offset": [[194, 4, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [194, 4, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [194, 4, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [194, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [194, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[195, 4, 2, "p-distance", "distance", "The distance $d$ in meters between the transmitter and receiver."], [195, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[196, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [196, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [196, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [196, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[197, 4, 2, "p-n", "n", "The length of the Gray code."]], "sdr.half_sine": [[198, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [198, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [198, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.hexdump": [[199, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [199, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[200, 4, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [200, 4, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [200, 4, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.linear": [[201, 4, 2, "p-type", "type", "The type of output value or signal."], [201, 4, 2, "p-x", "x", "The input value or signal in dB."]], "sdr.mix": [[202, 4, 2, "p-complex", "complex", "Indicates whether to mix by a complex exponential or real sinusoid."], [202, 4, 2, "p-freq", "freq", "The frequency $f$ of the sinusoid in Hz (or 1/samples if sample_rate=1). The frequency must satisfy $-f_s/2 le f le f_s/2$."], [202, 4, 2, "p-phase", "phase", "The phase $phi$ of the sinusoid in degrees."], [202, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal."], [202, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.multirate_taps": [[203, 4, 2, "p-A_stop", "A_stop", "The stopband attenuation $A_{text{stop}}$ in dB."], [203, 4, 2, "p-down", "down", "The decimation rate $Q$."], [203, 4, 2, "p-half_length", "half_length", "The half-length of the polyphase filters."], [203, 4, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.pack": [[204, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [204, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [204, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[205, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the PAPR. The default is None, which computes the PAPR of the entire array."], [205, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[206, 4, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [206, 4, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [206, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[207, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the peak power. The default is None, which computes the peak power of the entire array."], [207, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [207, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[208, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [208, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.percent": [[209, 4, 2, "p-x", "x", "The input ratio."]], "sdr.plot": [[210, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [211, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [212, 5, 1, "", "eye", "Plots the eye diagram of the baseband modulated signal $x[n]$."], [213, 5, 1, "", "filter", "Plots the magnitude response $|H(omega)|^2$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [214, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [215, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [216, 5, 1, "", "magnitude_response", "Plots the magnitude response $|H(omega)|^2$ of the filter."], [217, 5, 1, "", "p_d", "Plots the probability of detection $P_D$ as a function of received SNR or ENR."], [218, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [219, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [220, 5, 1, "", "phase_response", "Plots the phase response $angle H(omega)$ of the filter."], [221, 5, 1, "", "phase_tree", "Plots the phase tree of a continuous-phase modulated (CPM) signal signal $x[n]$."], [222, 5, 1, "", "raster", "Plots a raster of the time-domain signal $x[n]$."], [223, 5, 1, "", "roc", "Plots the receiver operating characteristic (ROC) curve as a function of $P_{FA}$."], [224, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [225, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [226, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [227, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [228, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [229, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [230, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[210, 4, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [210, 4, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."], [210, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."]], "sdr.plot.constellation": [[211, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [211, 4, 2, "p-kwargs", "kwargs", "If heatmap=False, additional keyword arguments to pass to matplotlib.pyplot.scatter(). The following keyword arguments are set by default. The defaults may be overwritten."], [211, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [211, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.eye": [[212, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [212, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [212, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [212, 4, 2, "p-span", "span", "The number of symbols per raster."], [212, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [212, 4, 2, "p-x", "x", "The baseband modulated signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved."]], "sdr.plot.filter": [[213, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [213, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [213, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [213, 4, 2, "p-filter", "filter", "The filter definition."], [213, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [213, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[214, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [214, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [214, 4, 2, "p-filter", "filter", "The filter definition."], [214, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [214, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [214, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.impulse_response": [[215, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [215, 4, 2, "p-filter", "filter", "The filter definition."], [215, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.magnitude_response": [[216, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [216, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [216, 4, 2, "p-filter", "filter", "The filter definition."], [216, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [216, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [216, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.p_d": [[217, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [217, 4, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [217, 4, 2, "p-x", "x", "The SNR or ENR in dB."], [217, 4, 2, "p-x_label", "x_label", "The x-axis label to use."]], "sdr.plot.periodogram": [[218, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [218, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [218, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [218, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [218, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [218, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [218, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [218, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [218, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [218, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_delay": [[219, 4, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [219, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [219, 4, 2, "p-filter", "filter", "The filter definition."], [219, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [219, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [219, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_response": [[220, 4, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [220, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [220, 4, 2, "p-filter", "filter", "The filter definition."], [220, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [220, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [220, 4, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [220, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_tree": [[221, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [221, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [221, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [221, 4, 2, "p-span", "span", "The number of symbols per raster."], [221, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [221, 4, 2, "p-x", "x", "The baseband CPM signal $x[n]$."]], "sdr.plot.raster": [[222, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [222, 4, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\"."], [222, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.collections.LineCollection. The following keyword arguments are set by default. The defaults may be overwritten."], [222, 4, 2, "p-length", "length", "The length of each raster in samples. This must be provided if x is 1D."], [222, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [222, 4, 2, "p-stride", "stride", "The stride between each raster in samples. If None, the stride is set to length."], [222, 4, 2, "p-x", "x", "The time-domain signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved. If x is 1D, the rastering is determined by length and stride. If x is 2D, the rows correspond to each raster."]], "sdr.plot.roc": [[223, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to the plotting function defined by type."], [223, 4, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [223, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [223, 4, 2, "p-type", "type", "The type of plot to generate."]], "sdr.plot.ser": [[224, 4, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [224, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."], [224, 4, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.spectrogram": [[225, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [225, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [225, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.pcolormesh(). The following keyword arguments are set by default. The defaults may be overwritten."], [225, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [225, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [225, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [225, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [225, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [225, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[226, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [226, 4, 2, "p-filter", "filter", "The filter definition."], [226, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.symbol_map": [[227, 4, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [227, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot(). The following keyword arguments are set by default. The defaults may be overwritten."], [227, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [227, 4, 2, "p-modulation", "modulation", "The linear modulation or symbol map ${0, dots, M-1} mapsto mathbb{C}$."]], "sdr.plot.time_domain": [[228, 4, 2, "p-centered", "centered", "Indicates whether to center the x-axis about 0. This argument is mutually exclusive with offset."], [228, 4, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal. If \"color\", the real and imaginary parts will have different colors based on the current Matplotlib color cycle. If \"line\", the real part will have a solid line and the imaginary part will have a dashed line, and both lines will share the same color."], [228, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [228, 4, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. The units of the offset are $1/f_s$. This argument is mutually exclusive with centered."], [228, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [228, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[230, 4, 2, "p-filter", "filter", "The filter definition."], [230, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.polyphase_matrix": [[231, 4, 2, "p-down", "down", "The decimation rate $Q$."], [231, 4, 2, "p-taps", "taps", "The multirate FIR filter taps $h_i$."], [231, 4, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.ppb": [[232, 4, 2, "p-x", "x", "The input ratio."]], "sdr.ppm": [[233, 4, 2, "p-x", "x", "The input ratio."]], "sdr.raised_cosine": [[234, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [234, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [234, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [234, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rectangular": [[235, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [235, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [235, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[236, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [236, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[237, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [237, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [237, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [237, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[238, 4, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [238, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.snr_to_ebn0": [[239, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [239, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [239, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [239, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[240, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [240, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.to_complex_bb": [[241, 4, 2, "p-x_r", "x_r", "The real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$. If the length is odd, one zero is appended to the end."]], "sdr.to_real_pb": [[242, 4, 2, "p-x_c", "x_c", "The complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$."]], "sdr.unpack": [[243, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [243, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [243, 4, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.upsample": [[244, 4, 2, "p-rate", "rate", "The upsampling factor $r$."], [244, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.wavelength": [[245, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.zadoff_chu": [[246, 4, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [246, 4, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence. The root must be relatively prime to the length, i.e., $gcd(u, N) = 1$."], [246, 4, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence. When $q ne 0$, the returned sequence is a cyclic shift of the root-$u$ Zadoff-Chu sequence."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"convers": 0, "decibel": 0, "ratio": 0, "from": [0, 251, 252, 253], "e_b": 0, "n_0": 0, "e_": 0, "": [0, 255, 256], "n": [0, 254, 255, 256], "data": 1, "manipul": [1, 3], "detect": [2, 7], "detector": 2, "theoret": 2, "limit": 2, "digit": [3, 256], "signal": [3, 248, 254, 257], "process": 3, "filter": [3, 7, 255, 256, 258], "multir": 3, "resampl": [3, 254], "correl": 3, "link": 4, "budget": 4, "channel": [4, 248], "capac": 4, "path": 4, "loss": 4, "antenna": 4, "measur": 5, "energi": 5, "power": [5, 257], "voltag": 5, "modul": [5, 6, 7], "linear": 6, "continu": 6, "phase": [6, 258, 259], "orthogon": 6, "puls": [6, 257, 260], "shape": [6, 257, 260], "symbol": [6, 259], "map": [6, 259], "encod": 6, "plot": [7, 257], "configur": [7, 251, 253], "time": [7, 257, 258], "domain": [7, 257, 258], "frequenc": [7, 255, 256, 257, 258], "spectral": 7, "estim": 7, "analysi": 7, "probabl": 8, "note": [9, 195, 203, 216, 218, 225], "constructor": [9, 26, 41, 48, 65, 72, 91, 101, 119, 128, 130, 138, 142, 150, 159], "method": [9, 26, 36, 41, 48, 65, 72, 91, 101, 119, 128, 130, 138, 142, 150, 154, 159], "properti": [9, 26, 48, 65, 72, 91, 101, 119, 128, 130, 138, 142, 150, 159], "special": [26, 48, 65, 72, 91, 119, 130, 159], "string": [26, 48, 72, 91, 101, 128, 138, 142, 150, 159], "represent": [26, 48, 72, 91, 101, 128, 138, 142, 150, 159], "stream": [26, 48, 72, 91, 159], "mode": [26, 48, 72, 91, 159], "onli": [26, 48, 72, 91, 159], "see": [41, 43, 56, 57, 58, 62, 80, 81, 83, 88, 102, 105, 115, 129, 139, 143, 146, 148, 151, 152, 153, 182, 205, 244], "also": [41, 43, 56, 57, 58, 62, 80, 81, 83, 88, 102, 105, 115, 129, 139, 143, 146, 148, 151, 152, 153, 182, 205, 244], "warn": [187, 244], "sequenc": 247, "simul": 248, "model": 248, "impair": 248, "synchron": 249, "document": 250, "instal": [250, 251, 252, 253, 261], "build": 250, "doc": 250, "serv": 250, "format": 251, "run": [251, 253], "linter": 251, "formatt": 251, "pre": 251, "commit": 251, "v": [251, 253], "code": [251, 253], "pypi": 252, "github": 252, "edit": 252, "local": 252, "folder": 252, "dev": 252, "depend": 252, "unit": 253, "test": 253, "command": 253, "line": 253, "farrow": 254, "arbitrari": 254, "construct": 254, "an": [254, 255, 256], "input": 254, "x": 254, "t_": 254, "rate": [254, 259], "r": 254, "y": 254, "frac": 254, "upsampl": 254, "integ": 254, "downsampl": 254, "irrat": 254, "fir": 255, "creat": [255, 256], "examin": [255, 256, 257], "impuls": [255, 256], "respons": [255, 256, 258], "h": [255, 256], "step": [255, 256, 258], "omega": [255, 256], "group": [255, 256], "delai": [255, 256], "tau_g": [255, 256], "fulli": [255, 256], "analyz": [255, 256, 258], "iir": 256, "zero": 256, "pole": 256, "stabil": 256, "peak": 257, "averag": 257, "qpsk": [257, 259], "variou": 257, "across": [257, 258], "excess": 257, "bandwidth": 257, "lock": 258, "loop": 258, "design": 258, "proport": 258, "plu": 258, "integr": 258, "ppi": 258, "implement": 258, "pll": 258, "close": 258, "perform": 258, "compar": 258, "zeta": 258, "b_n": 258, "t": 258, "shift": 259, "kei": 259, "constel": 259, "bpsk": 259, "8": [259, 262], "psk": 259, "16": 259, "error": 259, "curv": 259, "bit": 259, "rais": 260, "cosin": 260, "squar": 260, "root": 260, "gaussian": 260, "sdr": 261, "featur": 261, "v0": 262, "0": 262, "chang": 262, "contributor": 262, "7": 262, "6": 262, "5": 262, "4": 262, "3": 262, "2": 262, "1": 262, "version": 263, "alpha": 263, "releas": 263, "beta": 263}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Conversions": [[0, "conversions"]], "Decibels": [[0, "decibels"]], "Ratios": [[0, "ratios"]], "From E_b/N_0": [[0, "from-e-b-n-0"]], "From E_s/N_0": [[0, "from-e-s-n-0"]], "From S/N": [[0, "from-s-n"]], "Data manipulation": [[1, "data-manipulation"]], "Detection": [[2, "detection"], [7, "detection"]], "Detectors": [[2, "detectors"]], "Theoretical limits": [[2, "theoretical-limits"]], "Digital signal processing": [[3, "digital-signal-processing"]], "Filtering": [[3, "filtering"]], "Multirate filtering": [[3, "multirate-filtering"]], "Resampling": [[3, "resampling"]], "Correlation": [[3, "correlation"]], "Signal manipulation": [[3, "signal-manipulation"]], "Link budgets": [[4, "link-budgets"]], "Channel capacity": [[4, "channel-capacity"]], "Path losses": [[4, "path-losses"]], "Antennas": [[4, "antennas"]], "Measurement": [[5, "measurement"]], "Energy": [[5, "energy"]], "Power": [[5, "power"]], "Voltage": [[5, "voltage"]], "Modulation": [[5, "modulation"], [6, "modulation"], [7, "modulation"]], "Linear modulations": [[6, "linear-modulations"]], "Continuous-phase modulations": [[6, "continuous-phase-modulations"]], "Orthogonal modulations": [[6, "orthogonal-modulations"]], "Pulse shaping": [[6, "pulse-shaping"]], "Symbol mapping": [[6, "symbol-mapping"], [259, "symbol-mapping"]], "Symbol encoding": [[6, "symbol-encoding"]], "Plotting": [[7, "plotting"]], "Configuration": [[7, "configuration"], [251, "configuration"], [253, "configuration"]], "Time-domain": [[7, "time-domain"]], "Frequency-domain": [[7, "frequency-domain"]], "Spectral estimation": [[7, "spectral-estimation"]], "Filter analysis": [[7, "filter-analysis"]], "Probability": [[8, "probability"]], "Note": [[9, null], [195, null], [203, null], [216, null], [218, null], [218, null], [225, null]], "Constructors": [[9, "constructors"], [26, "constructors"], [41, "constructors"], [48, "constructors"], [65, "constructors"], [72, "constructors"], [91, "constructors"], [101, "constructors"], [119, "constructors"], [128, "constructors"], [130, "constructors"], [138, "constructors"], [142, "constructors"], [150, "constructors"], [159, "constructors"]], "Methods": [[9, "methods"], [26, "methods"], [36, "methods"], [41, "methods"], [48, "methods"], [65, "methods"], [72, "methods"], [91, "methods"], [101, "methods"], [119, "methods"], [128, "methods"], [130, "methods"], [138, "methods"], [142, "methods"], [150, "methods"], [154, "methods"], [159, "methods"]], "Properties": [[9, "properties"], [26, "properties"], [48, "properties"], [65, "properties"], [72, "properties"], [91, "properties"], [101, "properties"], [119, "properties"], [128, "properties"], [130, "properties"], [138, "properties"], [142, "properties"], [150, "properties"], [159, "properties"]], "Special methods": [[26, "special-methods"], [48, "special-methods"], [65, "special-methods"], [72, "special-methods"], [91, "special-methods"], [119, "special-methods"], [130, "special-methods"], [159, "special-methods"]], "String representation": [[26, "string-representation"], [48, "string-representation"], [72, "string-representation"], [91, "string-representation"], [101, "string-representation"], [128, "string-representation"], [138, "string-representation"], [142, "string-representation"], [150, "string-representation"], [159, "string-representation"]], "Streaming mode only": [[26, "streaming-mode-only"], [48, "streaming-mode-only"], [72, "streaming-mode-only"], [91, "streaming-mode-only"], [159, "streaming-mode-only"]], "See also": [[41, null], [43, null], [56, null], [57, null], [58, null], [62, null], [80, null], [81, null], [83, null], [88, null], [102, null], [105, null], [115, null], [129, null], [139, null], [143, null], [146, null], [148, null], [151, null], [152, null], [153, null], [182, null], [205, null], [244, null]], "Warning": [[187, null], [244, null]], "Sequences": [[247, "sequences"]], "Simulation": [[248, "simulation"]], "Channel models": [[248, "channel-models"]], "Signal impairments": [[248, "signal-impairments"]], "Synchronization": [[249, "synchronization"]], "Documentation": [[250, "documentation"]], "Install": [[250, "install"], [251, "install"], [253, "install"]], "Build the docs": [[250, "build-the-docs"]], "Serve the docs": [[250, "serve-the-docs"]], "Formatting": [[251, "formatting"]], "Run the linter": [[251, "run-the-linter"]], "Run the formatter": [[251, "run-the-formatter"]], "Pre-commit": [[251, "pre-commit"]], "Run from VS Code": [[251, "run-from-vs-code"], [253, "run-from-vs-code"]], "Installation": [[252, "installation"], [261, "installation"]], "Install from PyPI": [[252, "install-from-pypi"]], "Install from GitHub": [[252, "install-from-github"]], "Editable install from local folder": [[252, "editable-install-from-local-folder"]], "Install the dev dependencies": [[252, "install-the-dev-dependencies"]], "Unit Tests": [[253, "unit-tests"]], "Run from the command line": [[253, "run-from-the-command-line"]], "Farrow arbitrary resampler": [[254, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[254, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[254, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[254, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[254, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[254, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[254, "downsample-by-an-irrational-rate"]], "FIR filters": [[255, "fir-filters"]], "Create an FIR filter": [[255, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[255, "examine-the-impulse-response-h-n"], [256, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[255, "examine-the-step-response-s-n"], [256, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[255, "examine-the-frequency-response-h-omega"], [256, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[255, "examine-the-group-delay-tau-g-omega"], [256, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[255, "fully-analyze-a-fir-filter"]], "IIR filters": [[256, "iir-filters"]], "Create an IIR filter": [[256, "create-an-iir-filter"]], "Examine the zeros and poles": [[256, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[256, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[256, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[257, "peak-to-average-power"]], "QPSK signal with various pulse shapes": [[257, "qpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[257, "examine-time-domain"]], "Examine frequency domain": [[257, "examine-frequency-domain"]], "Plot across excess bandwidth": [[257, "plot-across-excess-bandwidth"]], "Phase-locked loops": [[258, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[258, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[258, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[258, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[258, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[258, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[258, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[258, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[259, "phase-shift-keying"]], "Constellations": [[259, "constellations"]], "BPSK": [[259, "bpsk"]], "QPSK": [[259, "qpsk"]], "8-PSK": [[259, "id1"]], "16-PSK": [[259, "id2"]], "Error rate curves": [[259, "error-rate-curves"]], "Bit error rate curves": [[259, "bit-error-rate-curves"]], "Symbol error rate curves": [[259, "symbol-error-rate-curves"]], "Pulse shapes": [[260, "pulse-shapes"]], "Raised cosine": [[260, "raised-cosine"]], "Square-root raised cosine": [[260, "square-root-raised-cosine"]], "Gaussian": [[260, "gaussian"]], "sdr": [[261, "sdr"]], "Features": [[261, "features"]], "v0.0": [[262, "v0-0"]], "v0.0.8": [[262, "v0-0-8"]], "Changes": [[262, "changes"], [262, "id1"], [262, "id3"], [262, "id5"], [262, "id7"], [262, "id9"], [262, "id11"], [262, "id13"]], "Contributors": [[262, "contributors"], [262, "id2"], [262, "id4"], [262, "id6"], [262, "id8"], [262, "id10"], [262, "id12"], [262, "id14"]], "v0.0.7": [[262, "v0-0-7"]], "v0.0.6": [[262, "v0-0-6"]], "v0.0.5": [[262, "v0-0-5"]], "v0.0.4": [[262, "v0-0-4"]], "v0.0.3": [[262, "v0-0-3"]], "v0.0.2": [[262, "v0-0-2"]], "v0.0.1": [[262, "v0-0-1"]], "Versioning": [[263, "versioning"]], "Alpha releases": [[263, "alpha-releases"]], "Beta releases": [[263, "beta-releases"]]}, "indexentries": {"module": [[3, "module-sdr"]], "sdr": [[3, "module-sdr"]]}, "docurls": ["api/conversions/", "api/data-manipulation/", "api/detection/", "api/dsp/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.Decimator/", "api/sdr.Decimator.__call__/", "api/sdr.Decimator.__init__/", "api/sdr.Decimator.__repr__/", "api/sdr.Decimator.__str__/", "api/sdr.Decimator.method/", "api/sdr.Decimator.polyphase_taps/", "api/sdr.Decimator.rate/", "api/sdr.Decimator.reset/", "api/sdr.Decimator.taps/", "api/sdr.EnergyDetector/", "api/sdr.EnergyDetector.p_d/", "api/sdr.EnergyDetector.p_fa/", "api/sdr.EnergyDetector.roc/", "api/sdr.EnergyDetector.threshold/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__call__/", "api/sdr.FIR.__init__/", "api/sdr.FIR.__len__/", "api/sdr.FIR.__repr__/", "api/sdr.FIR.__str__/", "api/sdr.FIR.delay/", "api/sdr.FIR.flush/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.frequency_response_log/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.reset/", "api/sdr.FIR.state/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__call__/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__call__/", "api/sdr.IIR.__init__/", "api/sdr.IIR.__repr__/", "api/sdr.IIR.__str__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.state/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.Interpolator/", "api/sdr.Interpolator.__call__/", "api/sdr.Interpolator.__init__/", "api/sdr.Interpolator.__repr__/", "api/sdr.Interpolator.__str__/", "api/sdr.Interpolator.method/", "api/sdr.Interpolator.polyphase_taps/", "api/sdr.Interpolator.rate/", "api/sdr.Interpolator.reset/", "api/sdr.Interpolator.taps/", "api/sdr.LinearModulation/", "api/sdr.LinearModulation.__init__/", "api/sdr.LinearModulation.__repr__/", "api/sdr.LinearModulation.__str__/", "api/sdr.LinearModulation.ber/", "api/sdr.LinearModulation.bps/", "api/sdr.LinearModulation.decide_symbols/", "api/sdr.LinearModulation.demodulate/", "api/sdr.LinearModulation.map_symbols/", "api/sdr.LinearModulation.modulate/", "api/sdr.LinearModulation.order/", "api/sdr.LinearModulation.phase_offset/", "api/sdr.LinearModulation.pulse_shape/", "api/sdr.LinearModulation.rx_filter/", "api/sdr.LinearModulation.ser/", "api/sdr.LinearModulation.sps/", "api/sdr.LinearModulation.symbol_map/", "api/sdr.LinearModulation.tx_filter/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__call__/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.MSK/", "api/sdr.MSK.__init__/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__call__/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.OQPSK/", "api/sdr.OQPSK.__init__/", "api/sdr.OQPSK.__repr__/", "api/sdr.OQPSK.__str__/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.__repr__/", "api/sdr.PSK.__str__/", "api/sdr.PSK.ber/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.PiMPSK/", "api/sdr.PiMPSK.__init__/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.ReplicaCorrelator/", "api/sdr.ReplicaCorrelator.p_d/", "api/sdr.ReplicaCorrelator.p_fa/", "api/sdr.ReplicaCorrelator.roc/", "api/sdr.ReplicaCorrelator.threshold/", "api/sdr.Resampler/", "api/sdr.Resampler.__call__/", "api/sdr.Resampler.__init__/", "api/sdr.Resampler.__repr__/", "api/sdr.Resampler.__str__/", "api/sdr.Resampler.delay/", "api/sdr.Resampler.down/", "api/sdr.Resampler.method/", "api/sdr.Resampler.polyphase_taps/", "api/sdr.Resampler.rate/", "api/sdr.Resampler.reset/", "api/sdr.Resampler.taps/", "api/sdr.Resampler.up/", "api/sdr.albersheim/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.barker/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.db/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.downsample/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.evm/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.half_sine/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.linear/", "api/sdr.mix/", "api/sdr.multirate_taps/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.percent/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.eye/", "api/sdr.plot.filter/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.magnitude_response/", "api/sdr.plot.p_d/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.phase_tree/", "api/sdr.plot.raster/", "api/sdr.plot.roc/", "api/sdr.plot.ser/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.polyphase_matrix/", "api/sdr.ppb/", "api/sdr.ppm/", "api/sdr.raised_cosine/", "api/sdr.rectangular/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.to_complex_bb/", "api/sdr.to_real_pb/", "api/sdr.unpack/", "api/sdr.upsample/", "api/sdr.wavelength/", "api/sdr.zadoff_chu/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/formatting/", "development/installation/", "development/unit-tests/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})