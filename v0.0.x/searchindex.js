Search.setIndex({"titles": ["Conversions", "Data manipulation", "Digital signal processing", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.DDS", "sdr.DDS.__call__", "sdr.DDS.__init__", "sdr.DDS.nco", "sdr.DDS.reset", "sdr.DDS.step", "sdr.Decimator", "sdr.Decimator.__call__", "sdr.Decimator.__init__", "sdr.Decimator.__repr__", "sdr.Decimator.__str__", "sdr.Decimator.method", "sdr.Decimator.polyphase_taps", "sdr.Decimator.rate", "sdr.Decimator.reset", "sdr.Decimator.taps", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__call__", "sdr.FIR.__init__", "sdr.FIR.__len__", "sdr.FIR.__repr__", "sdr.FIR.__str__", "sdr.FIR.delay", "sdr.FIR.flush", "sdr.FIR.frequency_response", "sdr.FIR.frequency_response_log", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.reset", "sdr.FIR.state", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__call__", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__call__", "sdr.IIR.__init__", "sdr.IIR.__repr__", "sdr.IIR.__str__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.state", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.Interpolator", "sdr.Interpolator.__call__", "sdr.Interpolator.__init__", "sdr.Interpolator.__repr__", "sdr.Interpolator.__str__", "sdr.Interpolator.method", "sdr.Interpolator.polyphase_taps", "sdr.Interpolator.rate", "sdr.Interpolator.reset", "sdr.Interpolator.taps", "sdr.LinearModulation", "sdr.LinearModulation.__init__", "sdr.LinearModulation.__repr__", "sdr.LinearModulation.__str__", "sdr.LinearModulation.ber", "sdr.LinearModulation.bps", "sdr.LinearModulation.decide_symbols", "sdr.LinearModulation.demodulate", "sdr.LinearModulation.map_symbols", "sdr.LinearModulation.modulate", "sdr.LinearModulation.order", "sdr.LinearModulation.phase_offset", "sdr.LinearModulation.pulse_shape", "sdr.LinearModulation.rx_filter", "sdr.LinearModulation.ser", "sdr.LinearModulation.sps", "sdr.LinearModulation.symbol_map", "sdr.LinearModulation.tx_filter", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__call__", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__call__", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.reset", "sdr.NCO.step", "sdr.OQPSK", "sdr.OQPSK.__init__", "sdr.OQPSK.__repr__", "sdr.OQPSK.__str__", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.__repr__", "sdr.PSK.__str__", "sdr.PSK.ber", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.PiMPSK", "sdr.PiMPSK.__init__", "sdr.Q", "sdr.Qinv", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.barker", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.db", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.downsample", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.evm", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.half_sine", "sdr.hexdump", "sdr.iq_imbalance", "sdr.linear", "sdr.mix", "sdr.multirate_taps", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.eye", "sdr.plot.filter", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.magnitude_response", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.raster", "sdr.plot.ser", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.polyphase_matrix", "sdr.raised_cosine", "sdr.rectangular", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.to_complex_bb", "sdr.to_real_pb", "sdr.unpack", "sdr.upsample", "sdr.wavelength", "sdr.zadoff_chu", "Sequences", "Simulation", "Synchronization", "Documentation", "Installation", "Linter", "Unit Tests", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236], "db": [0, 3, 4, 8, 19, 21, 41, 43, 44, 45, 47, 105, 115, 136, 140, 144, 146, 148, 152, 153, 154, 162, 167, 168, 170, 171, 172, 174, 175, 179, 180, 182, 184, 185, 186, 187, 188, 189, 199, 209, 212, 213, 230, 232, 233, 235], "x": [0, 1, 2, 4, 5, 6, 7, 8, 25, 26, 31, 32, 41, 43, 48, 49, 65, 66, 72, 74, 91, 92, 101, 108, 110, 119, 122, 128, 130, 136, 140, 148, 150, 151, 152, 153, 156, 159, 161, 162, 163, 164, 165, 166, 169, 172, 173, 179, 180, 181, 183, 184, 186, 187, 189, 190, 191, 192, 194, 195, 196, 197, 198, 200, 202, 203, 209, 211, 216, 217, 221, 224, 230, 231, 232, 236], "arraylik": [0, 1, 2, 3, 4, 5, 6, 7, 25, 26, 31, 32, 33, 41, 43, 48, 49, 50, 65, 66, 69, 72, 73, 74, 75, 91, 92, 93, 101, 102, 105, 107, 108, 109, 110, 115, 119, 122, 128, 130, 136, 137, 140, 141, 144, 146, 148, 149, 150, 151, 152, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 209, 211, 212, 213, 214, 215, 216, 217, 221], "ndarrai": [0, 1, 2, 3, 5, 7, 25, 26, 30, 31, 32, 37, 40, 41, 46, 48, 49, 55, 56, 57, 58, 61, 62, 64, 65, 66, 71, 72, 74, 78, 79, 80, 81, 83, 85, 87, 88, 90, 91, 92, 97, 100, 101, 105, 107, 108, 109, 110, 113, 115, 117, 119, 122, 128, 130, 135, 136, 140, 144, 146, 147, 148, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 171, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221], "convert": [0, 2, 101, 107, 109, 136, 140, 148, 162, 167, 168, 170, 171, 178, 180, 206, 212, 213, 214, 215], "linear": [0, 91, 93, 96, 101, 102, 136, 140, 148, 153, 162, 180, 195, 200, 202, 234, 235], "unit": [0, 25, 31, 48, 62, 72, 88, 91, 119, 128, 131, 132, 133, 137, 141, 149, 153, 154, 162, 163, 164, 169, 180, 201, 203, 224, 228, 229, 231, 234], "ebn0_to_esn0": [0, 115, 146, 167, 232, 235], "ebn0": [0, 6, 101, 105, 136, 140, 144, 148, 154, 167, 168, 188, 232], "bp": [0, 101, 106, 136, 140, 148, 167, 168, 170, 212, 232], "int": [0, 1, 2, 5, 6, 25, 30, 31, 33, 38, 41, 43, 44, 47, 48, 51, 54, 56, 57, 58, 59, 62, 65, 68, 72, 80, 81, 83, 84, 88, 91, 93, 98, 101, 102, 106, 111, 116, 128, 135, 136, 137, 140, 141, 148, 149, 153, 155, 158, 163, 164, 166, 167, 168, 170, 171, 175, 176, 177, 178, 182, 183, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 206, 207, 208, 210, 212, 213, 216, 217, 219, 220, 232], "ebn0_to_snr": [0, 136, 140, 148, 168, 235], "esn0_to_ebn0": [0, 105, 144, 170, 235], "esn0": [0, 6, 101, 115, 136, 140, 146, 148, 170, 171, 199, 232], "esn0_to_snr": [0, 171, 232, 235], "sp": [0, 5, 6, 101, 102, 108, 110, 116, 136, 137, 140, 141, 148, 149, 168, 171, 175, 177, 190, 207, 208, 210, 212, 213, 214, 215, 230, 232, 233], "1": [0, 2, 5, 6, 7, 8, 15, 18, 22, 24, 25, 27, 31, 33, 34, 35, 37, 40, 41, 48, 51, 52, 53, 54, 56, 57, 72, 73, 76, 77, 80, 81, 91, 92, 93, 94, 95, 97, 100, 101, 102, 107, 108, 109, 110, 117, 119, 123, 124, 128, 131, 136, 137, 140, 141, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 227, 228, 229, 230, 231, 232, 233, 236], "snr_to_ebn0": [0, 105, 144, 154, 212, 235], "snr": [0, 3, 41, 43, 44, 45, 46, 47, 136, 140, 148, 153, 154, 212, 213, 214, 215, 221, 232, 235], "snr_to_esn0": [0, 115, 146, 213, 235], "pack": [1, 41, 43, 136, 140, 148, 178, 183, 234, 235], "bpe": [1, 183, 216], "binari": [1, 3, 5, 137, 141, 147, 149, 155, 156, 157, 158, 159, 160, 165, 183, 202, 216, 221, 232, 234, 235], "arrai": [1, 37, 40, 41, 93, 97, 100, 102, 136, 137, 140, 141, 147, 148, 149, 155, 156, 158, 159, 163, 164, 165, 176, 183, 203, 206, 216, 229], "an": [1, 2, 3, 31, 48, 58, 72, 73, 75, 83, 91, 92, 102, 137, 141, 144, 146, 149, 154, 183, 188, 193, 199, 216, 224, 225, 234], "multipl": [1, 183, 216, 232, 235], "bit": [1, 4, 6, 41, 43, 46, 101, 105, 106, 136, 137, 140, 141, 144, 147, 148, 149, 154, 156, 157, 159, 160, 167, 168, 170, 178, 183, 188, 212, 216, 234, 235], "per": [1, 26, 32, 49, 92, 101, 102, 106, 108, 110, 116, 130, 136, 137, 140, 141, 148, 149, 153, 154, 167, 168, 170, 171, 173, 175, 177, 178, 183, 189, 190, 207, 208, 210, 211, 212, 213, 216, 230, 233, 235], "element": [1, 178, 183, 216], "unpack": [1, 41, 43, 178, 216, 232, 234, 235], "hexdump": [1, 41, 178, 234, 235], "byte": [1, 178], "width": [1, 178], "16": [1, 144, 146, 147, 167, 168, 170, 178, 188, 199, 206, 207, 210, 212, 213, 230, 235], "str": [1, 31, 34, 35, 48, 52, 53, 72, 76, 77, 91, 94, 95, 101, 103, 104, 136, 138, 139, 140, 142, 143, 148, 178, 190, 195, 198, 200], "return": [1, 5, 8, 16, 18, 21, 22, 26, 30, 31, 32, 34, 35, 41, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 62, 66, 72, 74, 76, 77, 80, 81, 83, 88, 91, 92, 94, 95, 101, 103, 104, 105, 107, 108, 109, 110, 115, 122, 130, 135, 136, 138, 139, 140, 142, 143, 144, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 228, 229, 230, 232, 235], "specifi": [1, 41, 44, 45, 47, 153, 154, 165, 178, 228, 229], "class": [2, 4, 5, 8, 25, 31, 41, 43, 44, 45, 46, 47, 48, 65, 72, 91, 101, 119, 128, 136, 140, 148, 222, 228, 229, 232, 234, 235], "fir": [2, 31, 32, 33, 34, 35, 37, 39, 40, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 95, 97, 99, 100, 182, 190, 191, 192, 193, 194, 196, 197, 201, 205, 206, 230, 234, 235], "implement": [2, 5, 25, 31, 48, 65, 72, 91, 101, 119, 125, 128, 136, 140, 148, 222, 227], "finit": [2, 31, 48, 91, 234, 235], "impuls": [2, 6, 31, 48, 58, 72, 83, 91, 175, 191, 193, 203, 233, 234, 235], "respons": [2, 6, 31, 48, 56, 57, 58, 62, 72, 80, 81, 83, 88, 91, 175, 191, 192, 193, 194, 197, 201, 233, 234, 235], "iir": [2, 6, 8, 17, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 119, 125, 191, 192, 193, 194, 196, 197, 201, 205, 228, 231, 234, 235], "infinit": [2, 72, 234, 235], "interpol": [2, 31, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 118, 136, 140, 148, 182, 190, 206, 217, 230, 232, 234, 235], "polyphas": [2, 31, 32, 33, 37, 40, 91, 92, 93, 97, 100, 166, 182, 206, 217, 234, 235], "decim": [2, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 101, 102, 107, 108, 109, 110, 114, 117, 136, 137, 140, 141, 147, 148, 149, 166, 182, 206, 232, 234, 235], "multirate_tap": [2, 33, 93, 182, 235], "p": [2, 3, 7, 150, 151, 156, 157, 159, 160, 165, 182, 206, 221], "q": [2, 7, 136, 150, 151, 182, 206, 219, 235], "comput": [2, 7, 31, 101, 105, 115, 136, 140, 144, 146, 148, 150, 151, 153, 174, 182, 228, 229, 231, 233], "achiev": [2, 182, 206, 232, 233], "ration": [2, 182, 206], "polyphase_matrix": [2, 206, 235], "tap": [2, 31, 33, 37, 40, 48, 53, 64, 65, 71, 72, 78, 79, 91, 93, 97, 100, 206, 228, 229], "h_i": [2, 31, 33, 37, 40, 48, 50, 64, 91, 93, 97, 100, 206, 228], "matrix": [2, 165, 206, 221], "h_": [2, 8, 31, 37, 40, 91, 97, 100, 206, 231], "i": [2, 8, 15, 24, 31, 32, 33, 37, 40, 41, 46, 48, 49, 50, 58, 62, 63, 64, 65, 70, 72, 75, 79, 83, 88, 89, 91, 92, 93, 97, 100, 102, 119, 123, 124, 126, 136, 137, 140, 141, 148, 149, 150, 151, 152, 153, 154, 157, 160, 162, 165, 167, 168, 170, 171, 173, 174, 175, 177, 178, 179, 180, 183, 185, 186, 187, 189, 190, 191, 193, 194, 195, 198, 200, 201, 203, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236], "j": [2, 8, 25, 31, 37, 40, 72, 75, 78, 91, 97, 100, 136, 140, 148, 153, 165, 179, 181, 206, 219, 228, 229, 231], "farrowresampl": [2, 65, 66, 67, 68, 69, 70, 71, 227, 235], "cubic": [2, 65], "farrow": [2, 65, 66, 67, 68, 69, 70, 71, 234, 235], "arbitrari": [2, 5, 65, 66, 67, 68, 69, 70, 71, 101, 234, 235], "mix": [2, 181, 234, 235], "freq": [2, 3, 173, 181, 185, 218, 221, 227, 231], "float": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 41, 43, 44, 45, 47, 56, 57, 65, 66, 72, 73, 80, 81, 82, 101, 102, 112, 119, 120, 121, 123, 124, 126, 128, 129, 131, 132, 133, 136, 137, 140, 141, 145, 148, 149, 152, 153, 154, 156, 159, 161, 169, 172, 173, 175, 179, 181, 182, 184, 185, 186, 187, 189, 190, 191, 192, 194, 195, 196, 197, 198, 200, 202, 203, 207, 209, 210, 211, 218, 221], "0": [2, 5, 6, 7, 15, 25, 27, 31, 32, 37, 40, 41, 48, 49, 50, 52, 53, 56, 57, 64, 72, 73, 75, 76, 77, 78, 79, 80, 81, 91, 92, 93, 97, 100, 101, 102, 107, 108, 109, 110, 117, 123, 128, 131, 136, 137, 140, 141, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 179, 180, 181, 183, 185, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 223, 224, 227, 228, 229, 230, 231, 232, 233, 236], "time": [2, 4, 8, 15, 16, 18, 19, 20, 21, 22, 48, 72, 119, 123, 136, 140, 148, 152, 153, 161, 165, 166, 169, 171, 173, 175, 179, 181, 184, 186, 187, 190, 191, 195, 198, 200, 203, 207, 209, 210, 211, 213, 214, 215, 217, 221, 227, 228, 229, 233, 234, 235], "domain": [2, 4, 152, 153, 161, 166, 169, 173, 179, 181, 184, 186, 187, 191, 195, 198, 200, 203, 209, 211, 214, 215, 217, 221, 234, 235], "n": [2, 4, 5, 6, 7, 8, 25, 26, 30, 31, 32, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 72, 74, 75, 78, 80, 81, 83, 84, 88, 91, 92, 101, 102, 108, 110, 113, 114, 118, 119, 122, 128, 130, 135, 136, 137, 140, 141, 148, 149, 150, 151, 152, 153, 154, 155, 158, 161, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 179, 181, 182, 184, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 203, 209, 211, 212, 213, 214, 215, 217, 219, 220, 221, 231, 233, 234], "complex": [2, 4, 6, 25, 26, 30, 101, 102, 107, 108, 109, 110, 117, 136, 137, 140, 141, 147, 148, 149, 153, 154, 166, 172, 179, 181, 189, 190, 198, 202, 203, 214, 215, 217, 221, 227, 228, 229, 231, 232, 234, 235], "exponenti": [2, 25, 26, 30, 166, 181, 214, 215, 217, 227, 228, 229], "real": [2, 150, 151, 153, 181, 190, 198, 203, 214, 215, 227, 228, 229, 231, 234, 235], "sinusoid": [2, 140, 153, 181, 214, 215, 229, 235], "to_complex_bb": [2, 214, 235], "x_r": [2, 214, 215], "passband": [2, 175, 177, 207, 208, 210, 214, 215, 230, 235], "center": [2, 177, 203, 208, 214, 215, 235], "f_": [2, 8, 15, 23, 32, 56, 57, 80, 81, 92, 101, 102, 116, 136, 137, 140, 141, 148, 149, 166, 168, 171, 173, 175, 181, 190, 191, 192, 194, 195, 196, 197, 198, 200, 203, 211, 212, 213, 214, 215, 217, 227, 228, 229, 231, 233], "": [2, 6, 8, 16, 18, 19, 20, 22, 23, 31, 43, 44, 45, 46, 47, 48, 56, 57, 62, 72, 80, 81, 88, 91, 101, 102, 107, 108, 109, 110, 136, 140, 148, 153, 154, 168, 171, 172, 173, 179, 189, 190, 191, 192, 194, 195, 196, 197, 198, 200, 201, 203, 204, 211, 212, 213, 214, 215, 226, 227, 230, 232, 234], "r": [2, 31, 32, 33, 37, 38, 40, 65, 66, 91, 92, 93, 97, 98, 100, 154, 166, 167, 168, 170, 172, 175, 181, 207, 210, 212, 214, 215, 217, 223, 224, 225, 226, 229, 230, 231, 233], "4": [2, 16, 18, 31, 37, 40, 41, 57, 76, 77, 81, 91, 92, 97, 100, 136, 137, 140, 144, 145, 146, 147, 148, 153, 154, 155, 157, 158, 160, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 188, 189, 190, 191, 192, 193, 194, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 219, 223, 224, 227, 229, 230, 232], "sampl": [2, 8, 15, 23, 25, 26, 27, 30, 31, 32, 48, 49, 54, 56, 57, 58, 62, 65, 69, 80, 81, 83, 88, 91, 92, 93, 101, 102, 108, 110, 116, 119, 123, 126, 128, 130, 131, 132, 135, 136, 137, 140, 141, 148, 149, 153, 166, 168, 171, 173, 175, 177, 181, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 203, 207, 208, 210, 211, 212, 213, 214, 215, 217, 221, 227, 230, 231, 233, 234, 235], "rate": [2, 4, 6, 8, 15, 23, 31, 32, 33, 35, 38, 41, 42, 43, 45, 46, 56, 57, 65, 66, 80, 81, 91, 92, 93, 95, 98, 101, 105, 115, 136, 140, 144, 146, 148, 166, 167, 168, 170, 173, 181, 182, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 203, 206, 211, 212, 214, 215, 217, 221, 234, 235], "baseband": [2, 6, 8, 136, 140, 148, 181, 190, 214, 215, 230, 231, 235], "x_c": [2, 214, 215], "c": [2, 8, 16, 18, 19, 20, 21, 22, 43, 44, 45, 46, 47, 101, 102, 117, 119, 136, 140, 147, 148, 154, 157, 160, 174, 185, 202, 214, 215, 218, 231], "2": [2, 5, 6, 8, 16, 18, 21, 31, 34, 35, 37, 40, 41, 48, 52, 53, 54, 56, 57, 76, 77, 80, 81, 91, 92, 94, 95, 97, 100, 101, 102, 111, 136, 137, 140, 141, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 224, 226, 227, 228, 229, 230, 231, 232, 233], "to_real_pb": [2, 215, 230, 235], "2f_": [2, 215], "upsampl": [2, 91, 217, 235], "factor": [2, 4, 8, 15, 24, 102, 119, 123, 124, 137, 141, 149, 161, 166, 217, 231], "downsampl": [2, 166, 235], "bsc_capac": [3, 160, 235], "calcul": [3, 4, 154, 157, 160, 172, 174, 185, 218, 235], "symmetr": [3, 159, 160, 165, 214, 215, 221, 234], "bsc": [3, 159, 160, 165, 221, 234, 235], "bec_capac": [3, 157, 235], "erasur": [3, 156, 157, 165, 221, 234], "bec": [3, 156, 157, 165, 221, 234, 235], "awgn_capac": [3, 154, 235], "addit": [3, 153, 154, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 217, 221, 234], "white": [3, 153, 154, 221, 234], "gaussian": [3, 5, 153, 154, 175, 221, 234, 235], "nois": [3, 8, 9, 10, 15, 21, 41, 43, 44, 45, 46, 47, 105, 115, 119, 123, 126, 136, 140, 144, 146, 148, 153, 154, 167, 168, 170, 171, 188, 199, 212, 213, 221, 231, 234], "awgn": [3, 136, 140, 144, 146, 148, 153, 154, 172, 188, 189, 199, 214, 215, 221, 232, 234, 235], "fspl": [3, 174], "d": [3, 31, 48, 54, 91, 174, 185, 223, 224, 234], "f": [3, 16, 18, 31, 56, 57, 80, 81, 91, 153, 173, 174, 175, 181, 185, 211, 218, 219, 227, 228, 229, 230, 231, 232, 233], "free": [3, 136, 140, 148, 174, 234], "space": [3, 57, 81, 174, 234], "wavelength": [3, 218, 235], "lambda": [3, 174, 218], "electromagnet": [3, 218], "wave": [3, 218], "frequenc": [3, 8, 16, 18, 20, 31, 48, 56, 57, 72, 80, 81, 91, 119, 166, 173, 174, 181, 185, 191, 192, 194, 195, 196, 197, 200, 214, 215, 217, 218, 221, 233, 234, 235], "parabolic_antenna": [3, 185, 235], "tupl": [3, 31, 41, 43, 46, 48, 56, 57, 72, 80, 81, 91, 101, 108, 136, 140, 148, 185, 189, 191, 192, 193, 194, 196, 197, 201, 202, 205], "gain": [3, 8, 11, 12, 13, 14, 15, 25, 27, 72, 73, 82, 119, 120, 121, 123, 128, 129, 131, 174, 175, 177, 185, 207, 208, 210, 231, 234], "g": [3, 46, 185, 224], "beamwidth": [3, 185], "theta": [3, 27, 128, 131, 133, 185], "parabol": [3, 185], "reflector": [3, 185], "signal": [4, 6, 8, 16, 18, 21, 22, 25, 26, 31, 32, 41, 43, 44, 45, 46, 47, 48, 49, 55, 65, 66, 72, 74, 91, 92, 101, 102, 113, 119, 122, 128, 130, 135, 136, 137, 140, 141, 148, 149, 152, 153, 154, 161, 162, 166, 167, 168, 169, 170, 171, 173, 174, 175, 179, 180, 181, 182, 184, 185, 186, 187, 190, 195, 198, 200, 203, 206, 209, 211, 212, 213, 214, 215, 217, 218, 228, 229, 231, 233, 234, 235], "peak_pow": [4, 184, 186, 235], "bool": [4, 6, 31, 33, 48, 50, 63, 65, 67, 70, 72, 73, 75, 89, 91, 93, 144, 146, 152, 181, 186, 187, 189, 197, 198, 202, 203, 209], "fals": [4, 6, 31, 33, 34, 35, 48, 50, 52, 53, 65, 67, 72, 73, 75, 76, 77, 91, 92, 93, 94, 95, 144, 146, 152, 156, 159, 165, 181, 186, 187, 189, 195, 200, 203, 209, 229, 233], "peak": [4, 136, 148, 161, 172, 184, 186, 187], "average_pow": [4, 152, 184, 235], "averag": [4, 41, 136, 148, 152, 153, 154, 172, 184, 195], "papr": [4, 136, 148, 184, 230, 235], "ratio": [4, 21, 41, 43, 44, 45, 46, 47, 105, 115, 136, 144, 146, 148, 153, 154, 167, 168, 170, 171, 184, 188, 199, 212, 213], "peak_voltag": [4, 161, 187, 235], "rms_voltag": [4, 161, 209, 235], "root": [4, 5, 102, 137, 141, 149, 172, 190, 203, 209, 210, 219, 220, 228, 234], "mean": [4, 172, 195, 200, 209, 233], "squar": [4, 5, 102, 137, 141, 149, 172, 174, 185, 203, 209, 210, 228], "rm": [4, 161, 172, 209], "crest_factor": [4, 161, 184, 235], "crest": [4, 161], "errorr": [4, 41, 42, 43, 44, 45, 46, 47, 232, 235], "A": [4, 8, 16, 18, 19, 20, 21, 22, 24, 32, 41, 48, 49, 92, 102, 119, 137, 141, 149, 158, 176, 178, 179, 185, 207, 210, 222, 231], "error": [4, 6, 8, 14, 15, 21, 41, 42, 43, 45, 46, 47, 101, 105, 115, 119, 123, 136, 140, 144, 146, 148, 160, 172, 188, 199, 231, 234, 235], "ber": [4, 6, 41, 101, 105, 136, 140, 144, 148, 188, 232, 234, 235], "symbol": [4, 6, 41, 43, 46, 91, 101, 102, 106, 107, 108, 109, 110, 115, 116, 117, 136, 137, 140, 141, 144, 146, 147, 148, 149, 153, 167, 168, 170, 171, 172, 173, 175, 177, 189, 190, 199, 202, 207, 208, 210, 212, 213, 230, 233, 234, 235], "ser": [4, 6, 41, 101, 115, 136, 140, 146, 148, 199, 232, 234, 235], "evm": [4, 172, 234, 235], "x_hat": [4, 6, 41, 43, 101, 108, 136, 140, 148, 172, 189, 232], "ref": [4, 172, 175, 182], "vector": [4, 41, 69, 172, 195, 200, 234, 235], "magnitud": [4, 6, 155, 172, 191, 194, 219, 234, 235], "hat": [4, 6, 43, 101, 107, 108, 136, 140, 148, 172, 189, 202], "k": [4, 5, 6, 43, 101, 102, 106, 107, 108, 109, 110, 111, 136, 140, 141, 148, 149, 163, 164, 167, 168, 170, 172, 189, 202, 212, 230, 233], "linearmodul": [5, 6, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 140, 202, 235], "phase": [5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 101, 102, 112, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 144, 145, 146, 147, 148, 149, 173, 179, 181, 196, 197, 221, 234], "amplitud": [5, 101, 102, 179, 221, 227, 231], "psk": [5, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 153, 172, 173, 179, 188, 189, 190, 199, 202, 211, 230, 234, 235], "shift": [5, 136, 140, 144, 145, 146, 147, 148, 219, 220, 228, 229, 234], "kei": [5, 136, 140, 144, 145, 146, 147, 148, 234], "demodul": [5, 101, 108, 136, 140, 148, 232, 235], "pimpsk": [5, 148, 149, 235], "pi": [5, 31, 76, 77, 91, 92, 136, 140, 148, 149, 153, 166, 174, 175, 179, 181, 185, 191, 192, 193, 194, 196, 197, 201, 203, 205, 214, 215, 217, 219, 227, 228, 229, 231, 234, 235], "m": [5, 72, 75, 79, 101, 102, 106, 107, 108, 109, 110, 111, 117, 136, 140, 141, 147, 148, 149, 165, 167, 168, 170, 174, 202, 212, 223, 224, 225, 226, 234, 235], "oqpsk": [5, 136, 137, 138, 139, 235], "offset": [5, 16, 18, 25, 27, 31, 91, 92, 101, 102, 112, 128, 131, 133, 136, 137, 140, 141, 145, 148, 149, 173, 181, 203, 211, 221, 231, 234, 235], "quadratur": [5, 136, 179], "rectangular": [5, 102, 137, 141, 149, 208, 230, 233, 234, 235], "span": [5, 6, 102, 137, 141, 149, 175, 177, 190, 207, 208, 210, 230, 233], "half_sin": [5, 102, 137, 141, 149, 177, 235], "half": [5, 102, 136, 137, 141, 149, 177, 182, 185, 234, 235], "sine": [5, 102, 137, 141, 149, 177, 234, 235], "time_bandwidth": [5, 175], "raised_cosin": [5, 102, 137, 141, 149, 190, 207, 233, 235], "alpha": [5, 175, 204, 207, 210, 230, 233], "rais": [5, 102, 137, 141, 149, 190, 203, 207, 210, 228, 234], "cosin": [5, 102, 137, 141, 149, 190, 203, 207, 210, 228, 234], "rc": [5, 102, 137, 141, 149, 207], "root_raised_cosin": [5, 52, 53, 102, 137, 141, 149, 190, 191, 192, 193, 194, 196, 197, 201, 203, 205, 210, 228, 230, 232, 233, 235], "srrc": [5, 102, 136, 137, 140, 141, 148, 149, 190, 203, 210, 230], "binary_cod": [5, 158, 235], "gener": [5, 136, 140, 148, 153, 158, 176, 223, 232, 235], "code": [5, 31, 34, 48, 52, 72, 76, 91, 94, 101, 103, 136, 137, 138, 140, 141, 142, 147, 148, 149, 155, 158, 167, 168, 170, 176, 189, 202, 212, 220, 224, 232, 235], "length": [5, 6, 31, 32, 48, 49, 51, 58, 62, 74, 91, 92, 93, 102, 108, 110, 137, 141, 149, 155, 158, 175, 176, 177, 182, 191, 193, 195, 198, 200, 201, 207, 208, 210, 214, 219, 220, 225, 227, 230, 233], "gray_cod": [5, 176, 235], "grai": [5, 136, 137, 140, 141, 147, 148, 149, 176, 189, 202, 232, 234], "diff_encod": [5, 144, 146, 163, 164, 235], "y_prev": [5, 163, 164], "differenti": [5, 144, 146, 163, 164, 203, 234, 235], "input": [5, 8, 16, 18, 21, 22, 25, 26, 31, 32, 33, 48, 49, 50, 58, 61, 62, 65, 66, 67, 69, 72, 73, 74, 75, 83, 88, 91, 92, 93, 119, 122, 128, 130, 136, 140, 144, 146, 148, 150, 153, 154, 156, 157, 159, 160, 162, 163, 164, 165, 166, 180, 183, 193, 201, 216, 217, 221, 228, 229, 231], "data": [5, 163, 164, 178, 183, 216, 234], "diff_decod": [5, 163, 164, 235], "y": [5, 25, 26, 30, 31, 32, 48, 49, 55, 66, 72, 74, 91, 92, 119, 122, 128, 130, 135, 153, 156, 159, 163, 164, 165, 166, 173, 179, 181, 189, 194, 195, 200, 202, 203, 211, 217, 231, 232], "decod": [5, 163], "use_styl": [6, 204], "appli": [6, 31, 91, 102, 173, 179, 189, 190, 195, 200, 202, 203, 204, 211, 221], "default": [6, 58, 62, 137, 141, 147, 149, 189, 194, 195, 198, 200, 202, 204, 232], "matplotlib": [6, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 227, 228, 229, 230, 231, 232, 233, 234], "rcparam": [6, 204], "time_domain": [6, 31, 91, 92, 136, 140, 148, 153, 166, 181, 203, 214, 215, 217, 230, 232, 233, 235], "raster": [6, 190, 198, 234, 235], "none": [6, 31, 41, 45, 48, 58, 62, 65, 69, 91, 101, 105, 119, 127, 136, 140, 144, 146, 148, 153, 154, 165, 183, 189, 190, 191, 193, 195, 198, 200, 201, 202, 203, 216, 221, 227, 230, 232], "periodogram": [6, 166, 195, 214, 215, 217, 230, 234, 235], "sample_r": [6, 8, 15, 23, 31, 56, 57, 80, 81, 91, 92, 136, 140, 148, 166, 173, 181, 190, 191, 192, 194, 195, 196, 197, 198, 200, 203, 214, 215, 217, 227, 231, 233], "power": [6, 136, 140, 148, 152, 153, 154, 162, 172, 175, 177, 180, 184, 185, 186, 195, 207, 208, 210, 233, 234], "densiti": [6, 21, 195, 230, 233], "p_": [6, 144, 146, 152, 153, 162, 165, 172, 180, 184, 186, 188, 195, 199], "xx": [6, 195], "us": [6, 25, 28, 31, 33, 36, 39, 48, 50, 55, 60, 65, 67, 72, 73, 75, 86, 91, 92, 93, 96, 99, 101, 107, 108, 119, 125, 136, 140, 148, 154, 157, 160, 172, 178, 182, 183, 189, 190, 191, 193, 195, 200, 201, 216, 223, 224, 225, 226, 228, 229, 232, 233, 234, 236], "welch": [6, 195, 200], "method": [6, 35, 36, 95, 96, 195, 200, 225, 228, 229, 235], "spectrogram": [6, 200, 234, 235], "constel": [6, 136, 140, 145, 148, 153, 172, 173, 179, 189, 211, 219, 234, 235], "heatmap": [6, 189, 232], "symbol_map": [6, 101, 102, 117, 136, 140, 145, 147, 148, 172, 202, 203, 232, 235], "map": [6, 101, 102, 109, 117, 136, 140, 147, 148, 172, 202, 234, 235], "ey": [6, 190, 234, 235], "diagram": [6, 8, 25, 31, 91, 119, 128, 163, 164, 190, 234, 235], "kwarg": [6, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205], "function": [6, 7, 8, 17, 48, 72, 73, 119, 150, 151, 154, 166, 175, 188, 195, 199, 200, 217, 225, 228, 229, 231, 233, 234, 235], "e_b": [6, 43, 44, 45, 46, 47, 101, 105, 136, 140, 144, 148, 154, 167, 168, 170, 188, 212, 234], "n_0": [6, 21, 43, 44, 45, 46, 47, 101, 105, 115, 136, 140, 144, 146, 148, 153, 154, 167, 168, 170, 171, 172, 188, 189, 199, 212, 213, 232, 234], "e_": [6, 43, 44, 45, 46, 47, 101, 115, 136, 140, 146, 148, 153, 154, 167, 170, 171, 172, 189, 199, 213, 232, 234], "impulse_respons": [6, 31, 48, 58, 72, 83, 91, 175, 177, 182, 193, 207, 208, 210, 228, 229, 233, 235], "h": [6, 31, 48, 50, 52, 53, 56, 57, 58, 72, 80, 81, 83, 91, 101, 102, 113, 114, 118, 119, 136, 137, 140, 141, 148, 149, 175, 182, 190, 191, 193, 194, 197, 206, 230, 231, 233], "step_respons": [6, 31, 48, 62, 72, 88, 91, 201, 228, 229, 231, 235], "step": [6, 25, 26, 30, 31, 48, 62, 72, 88, 91, 128, 130, 135, 191, 201, 234], "zeros_pol": [6, 205, 229, 235], "zero": [6, 31, 32, 48, 55, 69, 72, 73, 76, 77, 90, 91, 92, 93, 119, 177, 183, 191, 192, 193, 194, 196, 197, 201, 203, 205, 208, 214, 228, 230, 231, 233, 234, 235], "pole": [6, 72, 73, 76, 77, 85, 191, 192, 193, 194, 196, 197, 201, 205, 228, 234], "magnitude_respons": [6, 56, 57, 80, 81, 177, 182, 194, 207, 208, 210, 228, 229, 231, 233, 235], "omega": [6, 27, 31, 48, 56, 57, 72, 80, 81, 91, 128, 131, 132, 191, 192, 194, 196, 197, 231], "phase_respons": [6, 56, 57, 80, 81, 197, 235], "angl": [6, 197, 231], "phase_delai": [6, 196, 235], "delai": [6, 25, 31, 32, 35, 48, 49, 53, 54, 65, 91, 92, 95, 119, 128, 163, 164, 177, 192, 196, 208, 231, 234], "tau_": [6, 196], "phi": [6, 101, 102, 112, 136, 137, 140, 141, 145, 148, 149, 173, 179, 181, 196], "group_delai": [6, 192, 228, 229, 235], "group": [6, 192, 234], "tau_g": [6, 192], "complementari": [7, 150, 151], "cumul": [7, 150, 151], "distribut": [7, 150, 151], "standard": [7, 150, 151], "normal": [7, 8, 10, 15, 119, 123, 126, 150, 151, 172, 175, 177, 200, 207, 208, 210, 231, 233], "mathcal": [7, 150, 151, 153, 165], "qinv": [7, 150, 151, 235], "invers": [7, 151], "closedlooppl": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 222, 231, 235], "defin": [8, 48, 72, 153, 165, 175, 219, 222, 229, 234], "perform": [8, 32, 49, 92, 144, 146, 166, 217, 219, 222, 228, 229, 232, 234], "close": [8, 15, 17, 222, 234, 235], "loop": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 222, 234, 235], "pll": [8, 9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 222, 234, 235], "thi": [8, 26, 31, 43, 44, 45, 47, 48, 72, 91, 101, 102, 117, 130, 136, 137, 140, 141, 147, 148, 149, 153, 154, 166, 172, 174, 182, 190, 194, 195, 198, 200, 203, 217, 223, 224, 225, 226, 227, 229, 231, 232, 233], "meant": 8, "analysi": [8, 15, 225, 231, 234, 235], "onli": [8, 32, 39, 49, 55, 60, 65, 69, 86, 92, 99, 137, 141, 147, 149, 153, 174, 177, 198, 208, 226, 231, 232], "block": [8, 25, 31, 91, 119, 128, 163, 164], "bb": [8, 230, 231], "ped": [8, 14, 15, 123, 231], "lf": [8, 231], "lo": [8, 231], "e": [8, 25, 46, 152, 156, 157, 169, 219, 224, 228, 229, 231, 232], "nco": [8, 11, 15, 25, 27, 28, 123, 128, 129, 130, 131, 132, 133, 134, 135, 222, 231, 234, 235], "local": [8, 223, 225, 231], "oscil": [8, 25, 28, 128, 131, 222, 231, 234, 235], "detector": [8, 14, 15, 123, 231], "filter": [8, 12, 13, 15, 17, 31, 32, 33, 36, 37, 39, 40, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 99, 100, 101, 108, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 136, 140, 148, 166, 175, 177, 182, 190, 191, 192, 193, 194, 196, 197, 201, 203, 205, 206, 207, 208, 210, 217, 222, 233, 234, 235], "numer": [8, 25, 28, 128, 131, 222, 229, 231, 234, 235], "control": [8, 25, 28, 128, 131, 207, 210, 222, 231, 234, 235], "The": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 54, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 68, 69, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 91, 92, 93, 96, 97, 98, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 140, 141, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 236], "transfer": [8, 17, 48, 72, 73, 119, 175, 228, 229, 231], "2nd": [8, 119, 123, 222, 231, 235], "order": [8, 31, 32, 35, 41, 46, 48, 49, 53, 59, 65, 68, 72, 77, 84, 91, 92, 93, 95, 101, 102, 111, 119, 123, 136, 140, 141, 148, 149, 153, 167, 168, 170, 172, 173, 175, 189, 190, 198, 207, 210, 211, 212, 222, 229, 230, 231, 232, 235], "proport": [8, 12, 32, 92, 119, 120, 123, 174, 185, 222, 235], "plu": [8, 119, 123, 222, 235], "integr": [8, 13, 119, 121, 123, 222, 226, 229, 235], "z": [8, 25, 48, 72, 119, 128, 163, 164, 219, 228, 229, 231], "k_1": [8, 12, 119, 120, 231], "k_2": [8, 13, 119, 121, 231], "frac": [8, 16, 18, 21, 22, 31, 48, 54, 72, 91, 93, 119, 136, 140, 148, 152, 153, 154, 161, 167, 168, 170, 171, 172, 174, 175, 179, 180, 181, 184, 185, 209, 212, 213, 218, 219, 231], "k_0": [8, 11, 15, 27, 123, 128, 129, 131, 231], "k_p": [8, 14, 15, 123, 231], "refer": [8, 16, 18, 19, 20, 21, 22, 41, 65, 119, 144, 146, 153, 161, 172, 173, 175, 182, 184, 206, 207, 210, 211, 219, 229, 233, 234], "michael": [8, 16, 18, 19, 20, 21, 22, 119, 207, 210], "rice": [8, 16, 18, 19, 20, 21, 22, 119, 207, 210], "digit": [8, 16, 18, 19, 20, 21, 22, 25, 27, 119, 144, 146, 207, 210, 222, 231, 234, 235], "commun": [8, 16, 18, 19, 20, 21, 22, 119, 144, 146, 182, 206, 207, 210, 231, 234], "discret": [8, 16, 18, 19, 20, 21, 22, 119, 153, 165, 171, 207, 210, 213, 221, 227, 231, 234], "approach": [8, 16, 18, 19, 20, 21, 22, 119, 154, 157, 160, 207, 210, 231], "appendix": [8, 119, 207, 210], "lock": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135], "exampl": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 99, 100, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 144, 145, 146, 147, 148, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 188, 189, 190, 191, 192, 193, 194, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 231], "see": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 39, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 82, 84, 85, 86, 87, 89, 90, 99, 102, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 145, 147, 148, 149, 166, 175, 177, 191, 192, 193, 194, 196, 197, 201, 205, 207, 208, 210, 234], "noise_bandwidth": [8, 15, 119, 123, 126], "damping_factor": [8, 15, 119, 123, 124], "creat": [8, 15, 25, 27, 31, 33, 41, 42, 48, 50, 65, 67, 72, 73, 75, 91, 92, 93, 101, 102, 119, 123, 128, 131, 136, 137, 140, 141, 145, 148, 149, 153, 155, 172, 173, 181, 203, 211, 214, 215, 219, 227, 231, 233], "object": [8, 15, 31, 34, 35, 41, 42, 48, 52, 53, 72, 76, 77, 91, 94, 95, 101, 102, 103, 104, 136, 137, 138, 139, 140, 141, 142, 143, 148, 149, 191, 192, 193, 194, 196, 197, 201, 205, 231, 235], "phase_lock_tim": [8, 22], "frequency_lock_tim": [8, 16], "freq_offset": [8, 16, 18], "lock_tim": [8, 18, 231], "phase_error_vari": [8, 21], "cn0": [8, 21], "varianc": [8, 21, 153], "steadi": [8, 21], "state": [8, 21, 31, 32, 39, 48, 49, 55, 60, 61, 63, 65, 69, 70, 72, 86, 87, 89, 91, 92, 99, 235], "bnt": [8, 10, 231], "bandwidth": [8, 9, 10, 15, 19, 119, 123, 126, 154, 175, 207, 210, 231, 233], "b_n": [8, 9, 10, 15, 16, 18, 21, 22, 119, 123, 126], "t": [8, 10, 15, 119, 123, 126, 175, 178, 225, 227], "bn": [8, 9], "hz": [8, 9, 15, 16, 18, 21, 56, 57, 80, 81, 119, 123, 126, 154, 162, 166, 173, 174, 175, 180, 181, 185, 214, 215, 218, 227], "zeta": [8, 15, 24, 119, 123, 124], "damp": [8, 15, 24, 119, 123, 124, 231], "k0": [8, 11, 15, 25, 27, 123, 128, 129, 131], "kp": [8, 14, 15, 123], "k1": [8, 12, 119, 120, 231], "k2": [8, 13, 119, 121, 231], "repres": [8, 17, 156, 157], "omega_n": [8, 20, 231], "natur": [8, 20], "radian": [8, 19, 20, 21, 25, 27, 148, 231], "omega_3db": [8, 19], "3": [8, 16, 18, 19, 22, 31, 37, 40, 41, 52, 53, 76, 77, 91, 92, 97, 100, 136, 140, 144, 145, 146, 147, 148, 153, 154, 155, 156, 158, 159, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 189, 190, 191, 192, 193, 194, 196, 197, 201, 203, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 229, 231, 233, 234], "omega_": [8, 19], "textrm": [8, 19], "properti": [9, 10, 11, 12, 13, 14, 17, 19, 20, 23, 24, 28, 36, 37, 38, 40, 54, 59, 61, 63, 64, 68, 70, 71, 78, 79, 82, 84, 85, 87, 89, 90, 96, 97, 98, 100, 106, 111, 112, 113, 114, 116, 117, 118, 120, 121, 124, 125, 126, 129, 132, 133, 145, 147, 225, 235], "paramet": [15, 16, 18, 21, 26, 27, 30, 32, 33, 43, 44, 45, 47, 49, 50, 56, 57, 58, 62, 66, 67, 69, 73, 74, 75, 80, 81, 83, 88, 92, 93, 102, 105, 107, 108, 109, 110, 115, 122, 123, 130, 131, 135, 137, 141, 144, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219], "where": [15, 32, 49, 92, 102, 119, 123, 126, 141, 149, 153, 154, 165, 167, 168, 170, 175, 212, 219, 228, 229, 234], "period": [15, 119, 123, 126, 219], "second": [15, 16, 18, 22, 41, 119, 123, 126, 175], "critic": [15, 24, 119, 123, 124, 231], "underdamp": [15, 24, 119, 123, 124], "overdamp": [15, 24, 119, 123, 124], "ted": [15, 123], "t_": [16, 18, 22, 66, 175, 233], "fl": [16, 18], "delta": [16, 18, 31, 48, 58, 72, 83, 91, 193, 228, 229], "take": [16, 18, 22], "onto": [16, 18, 22], "equat": [16, 18, 19, 20, 21, 22, 72, 136, 140, 148, 174], "39": 16, "pl": [18, 22], "38": 18, "34": 19, "33": 20, "sigma_": 21, "theta_": 21, "carrier": [21, 140], "43": 21, "40": [22, 91, 166], "less": 24, "than": [24, 137, 141, 147, 149, 177, 179, 189, 202, 208], "greater": [24, 207, 210], "dd": [25, 26, 27, 28, 29, 30, 128, 222, 231, 234, 235], "direct": [25, 27, 222, 231, 234, 235], "synthes": [25, 27, 222, 231, 234, 235], "note": [25, 31, 37, 40, 48, 72, 91, 97, 100, 119, 128, 136, 140, 148, 153, 154, 157, 160, 163, 164, 175, 179, 185, 190, 206, 219], "increment": [25, 26, 27, 128, 130, 131, 132, 231], "v": [25, 128, 162, 180, 223], "output": [25, 26, 30, 31, 32, 48, 49, 58, 62, 72, 73, 75, 83, 88, 91, 92, 108, 119, 122, 128, 130, 135, 153, 154, 155, 156, 157, 159, 160, 164, 165, 172, 180, 183, 193, 201, 216, 223, 227, 228, 229, 231], "constant": [25, 27, 119, 128, 131, 132, 195, 200, 229, 231], "accumul": [25, 27, 41, 128, 131, 132, 231], "absolut": [25, 27, 128, 131, 133, 137, 149, 154], "adder": [25, 31, 119, 128, 163, 164, 231], "__call__": [25, 26, 31, 32, 33, 48, 49, 50, 63, 65, 66, 67, 70, 72, 73, 74, 75, 89, 91, 92, 93, 119, 122, 128, 130, 235], "variabl": [25, 26, 128, 130, 178, 231], "reset": [25, 29, 31, 39, 48, 60, 65, 69, 72, 86, 91, 99, 119, 127, 128, 134], "forward": [25, 30, 128, 135], "vari": [26, 130], "number": [30, 41, 43, 44, 47, 56, 57, 58, 62, 80, 81, 83, 88, 101, 102, 106, 116, 135, 136, 137, 140, 141, 148, 149, 153, 167, 168, 170, 175, 177, 178, 183, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 207, 208, 210, 212, 216], "equival": [31, 91, 153, 154, 171, 213, 224, 227], "first": [31, 41, 91, 136, 183, 203, 216, 225, 226], "prototyp": [31, 37, 40, 91, 97, 100], "feedforward": [31, 33, 37, 40, 48, 50, 64, 72, 75, 79, 91, 93, 97, 100, 191, 192, 193, 194, 196, 197, 201, 205, 228, 229], "coeffici": [31, 33, 48, 50, 72, 75, 91, 93, 101, 114, 118, 136, 140, 148, 191, 192, 193, 194, 196, 197, 201, 205, 228, 229], "discard": 31, "between": [31, 33, 50, 63, 67, 70, 73, 75, 89, 91, 93, 174, 195, 198, 200, 231, 234], "each": [31, 32, 49, 91, 92, 172, 178, 195, 198, 200], "instead": [31, 91, 189], "decompos": [31, 91], "ar": [31, 32, 33, 37, 40, 41, 43, 44, 45, 47, 49, 50, 57, 67, 73, 75, 81, 91, 92, 93, 97, 100, 101, 102, 114, 118, 136, 137, 140, 141, 148, 149, 154, 156, 157, 159, 160, 174, 177, 183, 189, 190, 191, 192, 194, 195, 196, 197, 198, 200, 202, 203, 204, 206, 208, 214, 215, 223, 224, 225, 227, 229, 231, 233, 234, 236], "commut": [31, 91], "parallel": [31, 91], "sum": [31, 48, 72, 233], "prevent": [31, 91, 136, 148], "need": [31, 91, 225, 226], "done": [31, 223], "case": [31, 91, 148], "2x": [31, 91], "6": [31, 37, 40, 41, 52, 53, 76, 77, 91, 92, 97, 100, 136, 140, 147, 148, 158, 162, 165, 166, 167, 168, 172, 174, 176, 178, 180, 185, 189, 190, 191, 192, 193, 194, 196, 197, 201, 202, 203, 205, 206, 207, 210, 214, 215, 217, 219, 226, 228, 229, 231, 232], "5": [31, 37, 40, 41, 52, 53, 91, 92, 97, 100, 136, 140, 148, 153, 156, 158, 159, 160, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 179, 185, 190, 191, 192, 193, 194, 196, 197, 201, 203, 205, 206, 207, 210, 211, 212, 213, 214, 215, 217, 219, 223, 227, 228, 229, 230, 231, 232, 233], "summat": 31, "bottom": [31, 91], "top": [31, 91], "relat": [31, 37, 40, 91, 97, 100, 154, 175], "In": [31, 32, 33, 34, 35, 37, 40, 41, 49, 50, 52, 53, 63, 67, 70, 73, 75, 76, 77, 89, 91, 92, 93, 94, 95, 97, 100, 136, 140, 144, 145, 146, 147, 148, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 188, 189, 190, 191, 192, 193, 194, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 227, 232], "np": [31, 37, 40, 76, 77, 91, 92, 97, 100, 136, 140, 144, 146, 148, 153, 154, 155, 156, 157, 159, 160, 165, 166, 172, 173, 174, 179, 181, 188, 189, 190, 191, 192, 193, 194, 196, 197, 199, 201, 203, 205, 206, 211, 214, 215, 217, 219, 227, 228, 229, 230, 231, 232, 233], "co": [31, 91, 92, 181], "64": [31, 172, 178, 229], "arang": [31, 37, 40, 91, 92, 97, 100, 153, 155, 166, 181, 206, 214, 215, 217, 219, 227, 231], "280": 31, "7": [31, 34, 35, 37, 40, 91, 92, 94, 95, 97, 100, 136, 140, 147, 148, 158, 165, 172, 176, 178, 182, 203, 206, 219, 229], "kaiser": [31, 33, 34, 35, 36, 91, 92, 93, 94, 95, 96], "window": [31, 91, 195, 200], "out": [31, 34, 37, 40, 41, 52, 76, 91, 92, 94, 97, 100, 136, 140, 145, 147, 148, 150, 151, 155, 156, 158, 159, 162, 163, 164, 165, 167, 168, 170, 171, 172, 174, 176, 180, 183, 185, 192, 204, 206, 212, 213, 216, 218], "plt": [31, 91, 92, 136, 140, 144, 145, 146, 147, 148, 153, 154, 155, 157, 160, 166, 172, 173, 174, 175, 177, 179, 181, 182, 188, 189, 190, 191, 192, 193, 194, 196, 197, 199, 201, 202, 203, 205, 207, 208, 210, 211, 214, 215, 217, 219, 227, 228, 229, 230, 231, 232, 233], "figur": [31, 91, 92, 136, 140, 144, 145, 146, 147, 148, 153, 154, 155, 157, 160, 166, 172, 173, 174, 175, 177, 179, 181, 182, 188, 189, 190, 191, 192, 193, 194, 196, 197, 199, 201, 202, 203, 204, 205, 207, 208, 210, 211, 214, 215, 217, 219, 227, 228, 229, 230, 231, 232, 233], "figsiz": [31, 91, 92, 136, 140, 144, 145, 146, 147, 148, 153, 154, 155, 157, 160, 166, 172, 173, 174, 175, 177, 179, 181, 182, 188, 189, 190, 191, 192, 193, 194, 196, 197, 199, 201, 202, 203, 204, 205, 207, 208, 210, 211, 214, 215, 217, 219, 227, 228, 229, 230, 231, 232, 233], "8": [31, 37, 40, 76, 77, 91, 92, 97, 100, 102, 136, 137, 140, 141, 144, 145, 146, 147, 148, 149, 153, 154, 155, 157, 158, 160, 165, 166, 172, 174, 175, 176, 177, 178, 181, 182, 185, 188, 189, 190, 191, 192, 193, 194, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 210, 214, 215, 217, 219, 224, 228, 229, 230, 231, 233], "plot": [31, 56, 57, 58, 62, 80, 81, 83, 88, 91, 92, 136, 140, 144, 145, 146, 147, 148, 153, 154, 155, 157, 160, 166, 172, 173, 174, 175, 177, 179, 181, 182, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 210, 211, 214, 215, 217, 219, 227, 228, 229, 231, 232, 233, 234, 235], "marker": [31, 91, 92, 189, 202, 227, 228, 229, 232], "o": [31, 91, 92, 227], "label": [31, 91, 92, 137, 141, 144, 146, 149, 153, 172, 173, 175, 179, 188, 190, 198, 199, 200, 203, 207, 210, 211, 227, 230, 231, 232, 233], "titl": [31, 91, 144, 146, 153, 154, 155, 157, 160, 166, 172, 173, 179, 181, 188, 199, 203, 211, 214, 215, 217, 219, 227, 230, 231, 232, 233], "tight_layout": [31, 91, 144, 146, 153, 154, 155, 157, 160, 166, 172, 173, 174, 181, 188, 199, 203, 211, 214, 215, 217, 219, 230, 231, 232, 233], "preserv": [31, 33, 50, 63, 67, 70, 73, 75, 89, 91, 93, 190, 198], "call": [31, 32, 33, 49, 50, 63, 67, 70, 73, 75, 89, 91, 92, 93], "true": [31, 91, 92, 136, 140, 144, 146, 148, 152, 154, 156, 157, 159, 160, 165, 174, 181, 186, 187, 189, 197, 198, 202, 204, 209, 230, 232], "y1": [31, 91, 92, 179], "70": [31, 178, 233], "y2": [31, 91, 92, 179], "140": [31, 166], "y3": [31, 91, 92], "210": 31, "y4": [31, 91], "y5": [31, 91], "flush": [31, 32, 48, 49, 55, 91, 92, 235], "y_1": [31, 91, 179], "y_2": [31, 91, 179], "y_3": [31, 91], "y_4": [31, 91], "y_5": [31, 91], "full": [31, 32, 49, 91, 92, 155], "__len__": [31, 48, 51, 91], "__repr__": [31, 34, 48, 52, 72, 76, 91, 94, 101, 103, 136, 138, 140, 142, 148], "style": [31, 34, 48, 52, 72, 76, 91, 94, 101, 103, 136, 138, 140, 142, 148, 204], "__str__": [31, 35, 48, 53, 72, 77, 91, 95, 101, 104, 136, 139, 140, 143, 148], "human": [31, 35, 48, 53, 72, 77, 91, 95, 101, 104, 136, 139, 140, 143, 148], "readabl": [31, 35, 48, 53, 72, 77, 91, 95, 101, 104, 136, 139, 140, 143, 148], "when": [31, 39, 48, 55, 58, 60, 62, 72, 83, 86, 88, 91, 99, 153, 154, 156, 157, 159, 160, 171, 191, 192, 193, 194, 196, 197, 201, 213, 219, 227, 228, 229], "pass": [31, 48, 55, 91, 153, 156, 159, 165, 172, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 221, 223, 224, 228, 229, 235], "through": [31, 48, 55, 91, 136, 148, 156, 159, 165, 221, 228, 229, 231], "indic": [31, 33, 48, 50, 63, 65, 67, 70, 72, 73, 75, 89, 91, 93, 102, 136, 137, 140, 141, 144, 146, 148, 149, 152, 175, 177, 179, 181, 186, 187, 190, 197, 198, 203, 207, 208, 209, 210], "whether": [31, 33, 48, 50, 63, 65, 67, 70, 72, 73, 75, 89, 91, 93, 144, 146, 152, 181, 186, 187, 197, 198, 203, 209], "consist": [31, 43, 44, 45, 46, 47, 48, 61, 91], "previou": [31, 33, 48, 50, 61, 67, 69, 73, 75, 91, 93, 163, 164], "u": [31, 48, 62, 72, 88, 91, 201, 219, 220, 228, 229], "frequency_respons": [31, 48, 56, 72, 80, 91, 235], "numpi": [31, 41, 46, 48, 56, 57, 72, 80, 81, 91, 101, 108, 136, 140, 148, 153, 216, 227, 228, 229, 230, 231, 232, 233, 234], "frequency_response_log": [31, 48, 57, 72, 81, 91], "logarithm": [31, 48, 57, 72, 81, 91, 191, 192, 194, 195, 196, 197, 228, 229], "axi": [31, 48, 57, 72, 81, 91, 189, 190, 191, 192, 194, 195, 196, 197, 198, 200, 202, 203, 227], "custom": [31, 36, 91, 96, 102, 137, 141, 149], "design": [31, 33, 36, 91, 93, 96, 102, 137, 141, 149, 182, 223, 234, 235], "multir": [31, 32, 33, 36, 91, 92, 93, 96, 182, 206, 235], "polyphase_tap": [31, 35, 37, 40, 91, 92, 95, 97, 100], "lfloor": [31, 48, 54, 91], "rfloor": [31, 48, 54, 91], "mode": [32, 33, 39, 49, 50, 55, 60, 63, 65, 67, 69, 70, 73, 75, 86, 89, 92, 93, 99, 155, 219], "l": [32, 49, 74, 92], "non": [32, 49, 92, 177, 208], "stream": [32, 33, 34, 35, 39, 49, 50, 52, 53, 55, 60, 63, 65, 67, 69, 70, 73, 75, 76, 77, 86, 89, 92, 93, 94, 95, 99, 136, 140, 148, 229], "convolut": [32, 49, 91, 92], "ha": [32, 49, 91, 92, 136, 140, 153, 166, 174, 175, 185, 217, 219, 231, 232, 233], "align": [32, 49, 92, 136, 227], "howev": [32, 43, 44, 45, 47, 49, 92, 119, 157, 160, 227], "produc": [32, 49, 91, 92, 175, 233], "final": [32, 49, 92], "requir": [32, 49, 92, 223, 224, 225, 226], "dictat": [32, 49, 92], "argument": [32, 33, 49, 92, 93, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 225, 228, 229], "specif": [33, 46, 93, 226, 233], "npt": [33, 93, 102, 137, 141, 149, 191, 192, 193, 194, 196, 197, 201, 205], "string": [34, 35, 52, 53, 76, 77, 94, 95, 103, 104, 138, 139, 142, 143, 178, 195, 200, 235], "represent": [34, 35, 52, 53, 76, 77, 94, 95, 103, 104, 138, 139, 142, 143, 202, 235], "print": [35, 53, 77, 95, 178, 227, 228, 229, 231], "167": [35, 95], "24": [35, 95], "shape": [35, 53, 77, 92, 95, 101, 102, 108, 110, 113, 114, 118, 136, 137, 140, 141, 148, 149, 175, 177, 190, 203, 207, 208, 210, 229, 234, 235], "84": [35, 95], "befor": [37, 40, 97, 100, 236], "decomposit": [37, 40, 97, 100, 235], "after": [37, 40, 97, 100], "10": [37, 40, 41, 91, 92, 97, 100, 102, 136, 137, 140, 141, 144, 146, 148, 149, 152, 153, 158, 162, 165, 167, 168, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 199, 201, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 227, 228, 229, 230, 231, 232, 233], "9": [37, 40, 91, 92, 97, 100, 136, 140, 148, 158, 165, 172, 176, 178, 206, 207, 210, 229, 230, 232, 233, 235], "measur": [41, 43, 152, 153, 161, 162, 169, 172, 180, 184, 186, 187, 209, 231, 234, 235], "new": [41, 42, 65, 67, 101, 102, 136, 137, 140, 141, 148, 149, 211], "from": [41, 56, 57, 72, 73, 80, 81, 101, 117, 136, 140, 147, 148, 162, 167, 168, 170, 171, 180, 195, 200, 212, 213, 223, 228, 229, 231, 234], "receiv": [41, 43, 101, 107, 108, 114, 136, 140, 144, 146, 148, 172, 174, 190], "contain": [41, 153, 178], "add": [41, 43, 46, 136, 140, 148, 153, 173, 177, 198, 208, 211, 221, 232, 236], "total": [41, 175, 177, 207, 208, 210, 233], "count": [41, 44, 172], "error_r": [41, 45, 46, 232], "everi": [41, 227], "can": [41, 43, 44, 45, 47, 102, 119, 137, 141, 149, 153, 172, 175, 182, 183, 190, 195, 200, 224, 228, 229, 232, 234, 236], "obtain": 41, "follow": [41, 179, 189, 198, 200, 202, 204, 206, 231], "tabul": [41, 42], "given": [41, 43, 44, 45, 47, 65, 66, 172, 228, 229], "all": [41, 46, 172, 190, 198, 226, 234], "ascend": [41, 46], "correspond": [41, 46, 198], "other": [43, 44, 45, 47, 227, 236], "quantiti": [43, 44, 45, 46, 47], "user": [43, 44, 45, 47, 102, 137, 141, 149, 228, 229], "caution": [43, 44, 45, 47], "instanc": [43, 44, 45, 47, 225], "transmit": [43, 101, 118, 136, 140, 148, 172, 190], "section": [43, 44, 45, 46, 47, 229, 231], "whatev": 46, "wa": [46, 154], "provid": [46, 101, 105, 115, 136, 140, 144, 146, 148, 198, 234], "wrapper": [48, 72], "scipi": [48, 72, 195, 200, 233, 234], "convolv": [48, 203], "It": [48, 72, 91, 102, 119, 137, 141, 149, 153, 190], "support": [48, 72, 235], "one": [48, 72, 136, 137, 141, 147, 149, 175, 178, 190, 191, 192, 194, 195, 196, 197, 200, 214, 228, 229, 230, 233], "its": [48, 72, 73, 153, 228, 229, 233], "sum_": [48, 72, 152, 153, 154, 169, 172, 209], "limits_": [48, 72], "valid": [49, 174, 190, 198, 219], "same": [49, 92, 203, 228], "0013559842808217807": [52, 53], "005995136544658217": [52, 53], "008698817681933214": [52, 53], "0024103767414047302": [52, 53], "010205586837665018": [52, 53], "018983779931504997": [52, 53], "011950905288150394": [52, 53], "01518393864077397": [52, 53], "051622191325047306": [52, 53], "07210389837804473": [52, 53], "04745944982876247": [52, 53], "039173517569276436": [52, 53], "17918683372907862": [52, 53], "3367363220550604": [52, 53], "4611457574513795": [52, 53], "5084040873607553": [52, 53], "30": [53, 91, 166, 191, 193, 201, 214, 215, 229, 235], "31": 53, "15": [53, 158, 176, 206, 217], "remain": [55, 166, 183], "1024": [56, 57, 80, 81, 191, 192, 194, 196, 197, 230, 233], "decad": [57, 81, 191, 192, 194, 196, 197, 228, 231], "resampl": [65, 66, 67, 68, 69, 70, 71, 182, 206, 234, 235], "http": [65, 161, 175, 182, 184, 219, 223, 224], "wirelesspi": 65, "com": [65, 175, 182, 224], "fraction": [65, 69, 175, 227], "structur": 65, "index": [65, 69, 190, 198, 202, 223], "should": [69, 190, 224], "equal": 69, "three": [69, 227, 233], "If": [69, 152, 153, 154, 165, 183, 186, 187, 189, 190, 191, 193, 195, 198, 200, 201, 202, 203, 209, 214, 216, 234], "lfilter": 72, "b_i": [72, 75, 79, 191, 192, 193, 194, 196, 197, 201, 205, 229], "feedback": [72, 75, 78, 191, 192, 193, 194, 196, 197, 201, 205, 229], "a_j": [72, 75, 78, 191, 192, 193, 194, 196, 197, 201, 205, 229], "These": [72, 136, 140, 148, 204, 224, 231], "differ": [72, 137, 141, 147, 149, 203, 219, 233], "a_0": 72, "left": [72, 136, 140, 148, 152, 153, 154, 169, 172, 174, 175, 179, 181, 185, 186, 187, 209, 219], "right": [72, 136, 140, 148, 152, 153, 154, 169, 172, 174, 175, 179, 181, 185, 186, 187, 209, 219], "b": [72, 75, 154, 175, 178, 191, 193, 201, 223, 233], "classmethod": [72, 73], "zerospol": [72, 73, 76, 77, 191, 192, 193, 194, 196, 197, 201, 205, 229], "self": [72, 73], "100": [72, 83, 88, 144, 146, 153, 154, 157, 160, 162, 172, 180, 181, 188, 190, 191, 193, 199, 201, 203, 211, 214, 215, 217, 225, 227, 231], "b_tap": [72, 77, 79, 229], "a_tap": [72, 77, 78, 229], "exp": [76, 77, 136, 140, 148, 166, 175, 179, 181, 191, 192, 193, 194, 196, 197, 201, 203, 205, 215, 217, 219, 227, 229, 231], "1j": [76, 77, 166, 181, 191, 192, 193, 194, 196, 197, 201, 203, 205, 215, 217, 227, 229, 231], "conj": [76, 77, 191, 192, 193, 194, 196, 197, 201, 205, 229, 231], "478207252018059": [76, 77, 229], "6400000000000001": [76, 77, 229], "7391036260090295": [77, 229], "3061467458920719j": [77, 229], "insert": 91, "multipli": 91, "hold": [91, 93, 183, 235], "20": [91, 92, 136, 140, 148, 154, 156, 159, 162, 165, 172, 173, 178, 179, 180, 187, 206, 209, 217, 230, 232, 233, 235], "recommend": 91, "wai": [91, 224], "11": [91, 136, 140, 148, 158, 176, 182, 206, 223], "zoh": [91, 93, 96], "12": [91, 136, 140, 148, 158, 176, 182, 206, 228, 232], "13": [91, 136, 140, 148, 155, 158, 176, 206, 235], "iter": 92, "concaten": [92, 229], "linearli": 93, "2r": 93, "ramp": [93, 119], "ones": [93, 231], "modul": [101, 102, 110, 111, 113, 136, 137, 140, 141, 144, 146, 148, 149, 153, 167, 168, 170, 172, 173, 179, 188, 189, 190, 199, 202, 211, 212, 223, 226, 230, 232, 234, 235], "map_symbol": [101, 109, 136, 140, 148, 235], "decide_symbol": [101, 107, 136, 140, 148, 235], "a_hat": [101, 107, 136, 140, 148], "decis": [101, 107, 108, 136, 140, 148, 190], "maximum": [101, 107, 108, 136, 140, 148, 175, 177, 189, 202, 207, 208, 210], "likelihood": [101, 107, 108, 136, 140, 148], "estim": [101, 107, 108, 136, 140, 148, 195, 200, 231], "mle": [101, 107, 136, 140, 148], "puls": [101, 102, 108, 110, 113, 114, 118, 136, 137, 140, 141, 148, 149, 175, 177, 190, 203, 207, 208, 210, 234, 235], "match": [101, 102, 108, 114, 136, 137, 140, 141, 148, 149], "abstract": [101, 105, 115], "valu": [101, 102, 105, 115, 136, 137, 140, 141, 144, 146, 148, 149, 150, 151, 155, 162, 163, 164, 175, 179, 180, 189, 202, 229, 235], "log_2": [101, 106, 136, 140, 148, 154, 167, 168, 170, 212], "phase_offset": [101, 102, 112, 136, 137, 140, 141, 145, 148, 149, 153, 172, 173, 179, 189, 190, 202, 211, 230, 232], "degre": [101, 102, 112, 136, 137, 140, 141, 145, 148, 149, 173, 179, 181, 185], "dot": [101, 102, 117, 136, 140, 147, 148, 202], "mapsto": [101, 102, 117, 136, 140, 147, 148, 202], "mathbb": [101, 102, 117, 136, 140, 147, 148, 154, 202, 219], "sym": [101, 102, 116, 136, 137, 140, 141, 148, 149, 168, 171, 175, 212, 213, 233], "pulse_shap": [101, 102, 108, 110, 113, 136, 137, 140, 141, 148, 149, 230], "tx_filter": [101, 118, 136, 140, 148], "rx_filter": [101, 114, 136, 140, 148], "rect": [102, 137, 141, 149, 233], "whose": [102, 137, 140, 141, 149], "import": [102, 137, 141, 149, 224, 227, 228, 229, 230, 231, 232, 233, 234], "roll": [102, 137, 141, 149, 219, 233], "off": [102, 137, 141, 149], "option": [102, 137, 141, 149, 191, 192, 194, 195, 196, 197, 200], "conveni": [102, 137, 141, 149, 228, 229], "own": [102, 137, 141, 149], "energi": [105, 115, 144, 146, 154, 167, 168, 169, 170, 171, 175, 177, 188, 199, 207, 208, 210, 212, 213, 234, 235], "psd": [105, 115, 144, 146, 154, 167, 168, 170, 171, 188, 199, 212, 213], "p_b": 105, "s_hat": [108, 232], "size": [108, 110, 155, 165, 227, 231, 232, 233], "p_e": 115, "loopfilt": [119, 120, 121, 122, 123, 124, 125, 126, 127, 222, 231, 235], "ppi": [119, 123, 222], "track": 119, "cannot": 119, "chirp": 119, "underli": [119, 125], "qpsk": [136, 140, 144, 145, 146, 148, 153, 172, 173, 188, 189, 190, 199, 202, 203, 211, 234, 235], "scheme": [136, 140, 148, 235], "similar": [136, 148, 225, 233], "convent": [136, 148], "One": [136, 148, 233], "distinct": [136, 148], "channel": [136, 144, 146, 154, 156, 157, 159, 160, 165, 188, 199, 234, 235], "transit": [136, 148, 159, 160, 165, 221], "independ": 136, "apart": 136, "origin": [136, 148, 217, 227], "which": [136, 148, 153, 154, 173, 179, 185, 189, 202, 211, 227, 231, 233], "result": [136, 148, 152, 174, 185, 186, 187, 207, 209, 210, 232], "lower": [136, 148, 194, 195, 207, 210], "taken": [136, 140, 148], "jq": 136, "begin": [136, 148], "end": [136, 148, 214], "modem": [136, 140, 148], "45": [136, 137, 140, 145, 153, 172, 173, 179, 181, 189, 190, 202, 211, 230, 232], "symbol_label": [136, 137, 140, 141, 147, 148, 149, 232], "random": [136, 140, 148, 153, 156, 159, 165, 172, 173, 179, 189, 190, 203, 211, 230, 232], "randint": [136, 140, 148, 153, 156, 159, 165, 172, 173, 179, 189, 190, 203, 211, 230, 232], "1000": [136, 140, 148, 172, 174, 203, 214, 215, 232], "dtype": [136, 140, 148, 183, 203, 216, 231], "uint8": [136, 140, 148, 183, 216], "complex_symbol": [136, 140, 148], "70710678": [136, 140], "70710678j": [136, 140], "linestyl": [136, 140, 148, 189, 198, 202, 204, 219, 227, 231, 232, 233], "tx_sampl": [136, 140, 148], "50": [136, 140, 148, 162, 180, 202, 214, 215, 227, 230], "rx_sampl": [136, 140, 148], "last": [136, 183, 223], "rx_symbol": [136, 140, 148], "rx_complex_symbol": [136, 140, 148], "array_equ": [136, 140, 148], "bin": [137, 141, 147, 149, 172, 189, 202, 232], "consecut": [137, 141, 149], "adjac": [137, 141, 147, 149, 232, 233], "mai": [137, 141, 147, 149, 172, 189, 198, 200, 202, 204, 229], "more": [137, 141, 147, 149, 235], "start": [137, 141, 149, 223], "0j": [137, 141, 149], "go": [137, 141, 149], "counter": [137, 141, 149], "clockwis": [137, 141, 149], "around": [137, 141, 149], "circl": [137, 141, 149, 229], "encod": [140, 144, 146, 163, 164, 234], "inform": [140, 167, 168, 170, 212], "ge": [141, 149], "were": [144, 146], "simon": [144, 146], "alouini": [144, 146], "over": [144, 146, 178], "fade": [144, 146], "chapter": [144, 146, 182, 206], "singl": [144, 146], "john": [144, 146], "proaki": [144, 146], "optimum": [144, 146], "theoret": [144, 146, 188, 199, 232, 235], "curv": [144, 146, 188, 199], "bpsk": [144, 146, 188, 199, 203, 230], "psk8": [144, 146, 188, 199, 232], "psk16": [144, 146, 188, 199, 232], "linspac": [144, 146, 154, 157, 160, 174, 188, 199, 229, 230, 231, 232], "compar": [144, 146, 233], "de": [144, 146, 235], "se": [146, 199], "00000000e": [147, 148, 229], "00": [147, 148, 229], "00j": [147, 148], "07106781e": [147, 148], "01": [147, 148, 178, 229, 231], "01j": [147, 148], "12323400e": [147, 148], "17": [147, 148, 185, 206], "83697020e": 147, "22464680e": [147, 148], "16j": [147, 148], "annot": [147, 202, 235], "odd": [148, 214], "rotat": [148, 181], "rel": [148, 219, 233], "even": [148, 175, 207, 210], "2m": 148, "displaystyl": 148, "text": [148, 152, 153, 154, 157, 160, 161, 162, 172, 173, 174, 180, 182, 184, 186, 187, 209, 211], "pi4_qpsk": 148, "probabl": [150, 151, 156, 157, 159, 160, 165, 221, 235], "exceed": [150, 151], "15865525393145707": [150, 151], "158655": [150, 151], "0000010494310452": [150, 151], "avg": [152, 153, 184], "log_": [152, 162, 174, 184, 186, 187, 209], "seed": 153, "ad": [153, 198, 225, 234, 235], "desir": [153, 232], "explicitli": 153, "assum": [153, 165, 183, 216], "known": 153, "must": [153, 175, 181, 198, 207, 210, 219], "default_rng": 153, "noisi": 153, "w": [153, 227, 228, 229, 230, 231, 232, 233], "sigma": [153, 154], "For": [153, 166, 174, 217, 228], "sim": 153, "cn": 153, "set": [153, 174, 189, 194, 195, 198, 200, 202, 204, 225, 226, 229], "sin": [153, 214], "1_000": [153, 173, 174, 179, 211, 230], "zorder": [153, 173, 211], "infti": [153, 154], "nand": 153, "capac": [154, 157, 160, 234, 235], "2d": [154, 198], "x_i": [154, 156, 157, 159, 160, 165, 179], "y_i": [154, 156, 157, 159, 160, 165], "monoton": 154, "decreas": 154, "limit": [154, 189, 194, 195, 202, 232], "xlabel": [154, 155, 157, 160, 172, 174, 219, 227, 230, 231, 233], "ylabel": [154, 155, 157, 160, 172, 174, 219, 227, 230, 231, 233], "grid": [154, 157, 160, 174, 204, 227, 230, 231, 233], "At": 154, "occur": 154, "view": [154, 225, 234], "59": 154, "shannon": 154, "semilogi": [154, 188, 199], "both": [154, 189, 202, 203, 227, 231], "barker": [155, 220, 234, 235], "bipolar": [155, 235], "sequenc": [155, 156, 159, 165, 219, 221, 234, 235], "format": [155, 225], "seq": 155, "have": [155, 166, 183, 203, 216, 217], "ideal": [155, 232], "minim": 155, "autocorrel": [155, 219], "sidelob": [155, 207, 210, 219], "corr": [155, 219], "correl": [155, 219], "lag": [155, 219], "ab": [155, 219, 233], "25": [156, 159, 165, 190, 227, 230, 231, 233], "roughli": [156, 159, 227], "eras": 156, "14": [158, 176, 206, 224], "flip": 159, "h_b": 160, "cf": 161, "v_": [161, 162, 180, 187, 209], "en": [161, 184, 219], "wikipedia": [161, 184, 219], "org": [161, 184, 219], "wiki": [161, 184, 219], "type": [162, 172, 180, 183, 195, 200, 216, 235], "voltag": [162, 180, 187, 209, 234], "decibel": [162, 180, 234, 235], "ani": [162, 166, 180, 194, 195, 217, 226], "x_": [162, 180], "mhz": [162, 180], "77": [162, 178, 180], "50e6": 162, "76": [162, 178], "98970004336019": 162, "mw": [162, 180], "dbm": [162, 180], "dbv": [162, 180], "020599913279624": 162, "uncod": 164, "dmc": [165, 221, 234, 235], "memoryless": [165, 221, 234], "pr": 165, "y_j": 165, "alphabet": 165, "ldot": 165, "doe": [166, 217], "anti": [166, 217, 235], "alias": [166, 217, 235], "spectral": [166, 195, 230, 233], "effici": [166, 185, 217], "400": [166, 227], "x1": 166, "200": [166, 227, 232], "x2": 166, "130": 166, "x3": [166, 219], "spectrum": [166, 191, 192, 194, 195, 196, 197, 200, 214, 215, 217], "content": 166, "abov": [166, 217], "nyquist": [166, 190, 217, 233], "fold": 166, "cw": 166, "unalias": 166, "fft": [166, 195, 200, 214, 215, 217], "2048": [166, 214, 215, 217, 230], "xlim": [166, 217, 230, 231, 233], "qam": [167, 168, 170, 212], "249387366082999": [167, 168], "020599913279625": [167, 213], "7506126339170005": [170, 212], "979400086720376": [170, 171], "system": [171, 182, 206, 213, 225, 226, 231, 234], "norm": [172, 175, 177, 207, 208, 210], "noiseless": 172, "sourc": 172, "max": [172, 186, 187, 225], "_": 172, "sqrt": [172, 175, 209, 219, 230, 231, 233], "instantan": 172, "percentil": [172, 194, 195, 200], "either": 172, "76641741041334": 172, "966297022923962": 172, "182": 172, "4160965026436": 172, "145": 172, "9470056986133": 172, "95th": 172, "95": 172, "68": [172, 178], "81063983122282": 172, "inst_evm": 172, "hist": 172, "histogram": 172, "frequency_offset": [173, 221, 235], "freq_rat": 173, "cycl": [173, 203], "000": 173, "1e": [173, 232], "5e": 173, "deg": [173, 179], "path": [174, 225, 234], "loss": [174, 234], "distanc": 174, "meter": [174, 185, 218], "transmitt": 174, "far": 174, "field": 174, "neg": [174, 179], "impli": 174, "possibl": [174, 234], "so": [174, 175, 177, 207, 208, 210, 234], "km": 174, "link": [174, 234, 235], "ghz": [174, 185, 218], "1e3": [174, 181, 214], "1e9": [174, 185, 218], "92": 174, "44778322188337": 174, "doubl": [174, 185], "increas": [174, 185, 229], "2e3": 174, "98": 174, "468383135163": 174, "also": [174, 175, 234], "2e9": 174, "up": 174, "product": [175, 233], "side": [175, 191, 192, 194, 195, 196, 197, 200, 228, 229, 230, 233], "thought": [175, 236], "smaller": [175, 207, 210, 233], "wider": 175, "how": [175, 177, 190, 198, 203, 207, 208, 210, 225, 226], "ln": 175, "www": [175, 182], "mathwork": [175, 182], "help": [175, 182], "gaussdesign": 175, "html": [175, 182, 223], "onlinelibrari": 175, "wilei": 175, "doi": 175, "pdf": 175, "1002": 175, "9780470041956": 175, "app2": 175, "h_0p1": [175, 207, 210], "h_0p2": 175, "h_0p3": 175, "reason": [177, 208], "larger": [177, 179, 189, 202, 208], "h_half_sin": 177, "displai": [178, 189, 191, 192, 194, 195, 196, 197, 200, 202], "consid": 178, "line": [178, 203, 230], "quick": 178, "brown": 178, "fox": 178, "jump": 178, "lazi": 178, "dog": 178, "00000000": 178, "54": 178, "65": 178, "71": 178, "75": [178, 189, 231, 232], "69": 178, "63": 178, "6b": 178, "62": 178, "72": 178, "6f": 178, "6e": 178, "00000010": 178, "66": 178, "78": 178, "6a": 178, "6d": 178, "73": 178, "74": 178, "00000020": 178, "6c": 178, "61": 178, "7a": 178, "79": 178, "67": 178, "he": 178, "02": [178, 229, 231], "03": [178, 229], "04": [178, 229], "00000004": 178, "05": [178, 227, 229, 231], "06": 178, "07": 178, "08": 178, "00000008": 178, "09": 178, "0a": 178, "iq_imbal": [179, 221, 235], "iq": [179, 221, 234], "imbal": [179, 221, 234], "posit": 179, "compon": [179, 214, 215, 217], "lead": [179, 232], "g_i": 179, "180": 179, "g_q": 179, "x_q": 179, "horizont": 179, "stretch": 179, "while": [179, 233], "vertic": 179, "subplot": [179, 231, 232], "legend": [179, 227, 230, 231, 233], "northwest": 179, "northeast": 179, "50118723": 180, "36272725": 180, "9952623149688795": 180, "satisfi": 181, "le": [181, 185, 207, 210], "cdot": 181, "remov": [181, 195, 200, 235], "half_length": 182, "a_stop": 182, "80": [182, 219], "stopband": [182, 207, 210], "attenu": [182, 207, 210], "a_": 182, "stop": 182, "fred": [182, 206], "harri": [182, 206], "process": [182, 206, 229, 231, 234], "dsp": [182, 234], "designmultiratefir": 182, "dtypelik": [183, 216], "most": [183, 216], "signific": [183, 216], "enough": 183, "fill": 183, "smallest": 183, "unsign": 183, "integ": 183, "diamet": 185, "55": 185, "eta": 185, "dbi": 185, "arcsin": 185, "83": 185, "dish": 185, "21": 185, "810210290266568": 185, "437435887991374": 185, "23": 185, "sinc": [185, 190, 223, 232], "antenna": [185, 234], "we": [185, 234], "observ": [185, 190], "830810203546193": 185, "529544741425365": 185, "keyword": [188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 228, 229], "pyplot": [188, 189, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 227, 228, 229, 230, 231, 232, 233], "scatter": 189, "overwritten": [189, 198, 200, 202], "rang": [189, 231, 232], "hist2d": 189, "10_000": 189, "color": [190, 198, 203, 230, 233], "imaginari": [190, 198, 203], "interleav": [190, 198], "base": [190, 198, 203], "examin": 190, "intersymbol": 190, "interfer": 190, "isi": 190, "two": [190, 191, 192, 194, 195, 196, 197, 200, 219, 227, 228, 229], "cascad": 190, "why": 190, "often": [190, 227], "practic": 190, "n_time": [191, 229], "n_freq": 191, "x_axi": [191, 192, 194, 195, 196, 197, 200, 228, 229, 230, 231], "log": [191, 192, 194, 195, 196, 197, 228, 229, 231], "definit": [191, 192, 193, 194, 196, 197, 201, 205], "n_t": 191, "n_f": 191, "scale": [191, 192, 194, 195, 196, 197, 200, 228, 229], "h_srrc": [191, 192, 193, 194, 196, 197, 201, 203, 205, 232], "ylim": [192, 219, 228, 231, 232, 233], "48": 192, "52": 192, "10th": [194, 195, 200], "crop": [194, 195], "deep": [194, 195], "null": [194, 195, 233], "hann": [195, 200], "overlap": [195, 200, 230], "detrend": [195, 200], "median": 195, "segment": [195, 200], "256": [195, 200, 230], "point": [195, 200], "trend": [195, 200], "unwrap": [197, 231], "stride": 198, "colorbar": 198, "1d": 198, "determin": 198, "row": 198, "collect": 198, "linecollect": 198, "linewidth": [198, 219], "solid": [198, 203], "cmap": 198, "rainbow": 198, "pcolormesh": 200, "vmin": 200, "vmax": 200, "100th": 200, "shade": 200, "gouraud": 200, "markers": 202, "diff": [203, 230], "about": [203, 225, 226], "mutual": 203, "exclus": 203, "part": [203, 211, 231], "current": [203, 224], "dash": 203, "share": 203, "10e3": 203, "revert": 204, "rcdefault": 204, "_rc_param": 204, "rc_param": 204, "ax": 204, "autolayout": 204, "max_open_warn": 204, "titleweight": 204, "bold": 204, "arrang": 206, "down": 206, "column": 206, "notion": 206, "demonstr": 206, "18": [206, 232], "19": 206, "excess": [207, 210, 233], "narrow": [207, 210], "expens": [207, 210], "higher": [207, 210, 233], "h_0p5": [207, 210], "h_0p9": [207, 210], "affect": [207, 210], "longer": [207, 210, 214], "h_4": [207, 210], "h_8": [207, 210], "h_16": [207, 210], "h_rect": [208, 233], "sample_rate_offset": [211, 221, 235], "ppm": [211, 221], "million": 211, "append": [214, 230], "250": [214, 215], "300": [214, 215], "ksp": [214, 215], "notic": [214, 215, 227, 233], "conjug": [214, 215, 229], "500": [214, 215, 231], "now": [214, 215, 227, 235], "150": [214, 215], "asymmetr": 215, "copi": 217, "299792458": 218, "zadoff_chu": [219, 220, 235], "zadoff": [219, 220, 234, 235], "chu": [219, 220, 234, 235], "prime": 219, "gcd": 219, "ne": 219, "cyclic": 219, "x_u": 219, "c_": 219, "2q": 219, "mod": 219, "e2": 219, "93chu_sequ": 219, "x_3": 219, "139": 219, "tile": 219, "x_5": 219, "x5": 219, "cross": 219, "xcorr": 219, "sphinx": 223, "immateri": 223, "theme": 223, "depend": [223, 225, 226], "store": [223, 224, 226], "txt": [223, 224, 225, 226], "myst": 223, "parser": 223, "updat": 223, "git": [223, 224], "math": 223, "dollar": 223, "ipykernel": 223, "nb": 223, "switch": 223, "pip": [223, 224, 225, 226, 234], "python3": [223, 224, 225, 226, 234], "built": 223, "run": 223, "command": 223, "dirhtml": 223, "locat": [223, 226], "home": 223, "page": 223, "site": 223, "directori": [223, 224], "get": 223, "necessari": 223, "webpag": 223, "webserv": 223, "easili": [223, 225, 226, 228, 229], "python": [223, 234], "server": 223, "8080": 223, "access": [223, 225], "web": 223, "browser": 223, "localhost": 223, "latest": [224, 234], "releas": [224, 235], "version": [224, 234], "main": [224, 233], "branch": [224, 225], "mhostett": [224, 235], "Or": [224, 226], "pre": 224, "To": 224, "activ": 224, "develop": [224, 225, 226], "librari": [224, 225, 226, 227, 232, 234, 236], "benefici": 224, "fashion": 224, "allow": [224, 226], "chang": [224, 236], "immedi": 224, "seen": 224, "upon": 224, "next": 224, "clone": 224, "repo": 224, "wherev": 224, "you": [224, 225, 226, 234], "like": [224, 234, 235], "flag": 224, "includ": [224, 225, 226, 234], "packag": [224, 234], "lint": 224, "test": [224, 234], "pylint": [224, 225], "black": 224, "jupyt": 224, "22": 224, "pytest": [224, 226], "cov": 224, "toml": [224, 225, 226], "xdist": 224, "benchmark": 224, "static": 225, "your": [225, 226], "dev": [225, 226], "variou": [225, 233], "nuisanc": 225, "warn": 225, "ignor": 225, "list": 225, "pyproject": [225, 226], "tool": [225, 226, 234], "src": 225, "_version": 225, "py": [225, 226], "disabl": 225, "comparison": 225, "callabl": 225, "doesn": 225, "understand": [225, 229], "metaclass": 225, "fixm": 225, "global": 225, "statement": 225, "invalid": 225, "name": 225, "miss": 225, "docstr": 225, "protect": 225, "too": 225, "mani": 225, "ancestor": 225, "attribut": 225, "public": 225, "unneed": 225, "min": 225, "120": 225, "manual": [225, 226], "file": [225, 226], "vscode": [225, 226], "json": [225, 226], "instruct": [225, 226], "invok": [225, 226], "edit": [225, 229], "ini_opt": 226, "minvers": 226, "addopt": 226, "showloc": 226, "testpath": 226, "execut": 226, "test_psk": 226, "infrastructur": 226, "debug": 226, "config": [227, 228, 229, 230, 231, 232, 233], "inlinebackend": [227, 228, 229, 230, 231, 232, 233], "print_figure_kwarg": [227, 228, 229, 230, 231, 232, 233], "facecolor": [227, 228, 229, 230, 231, 232, 233], "widget": [227, 228, 229, 230, 231, 232, 233], "continu": 227, "tx": 227, "decai": [227, 229], "fillstyl": 227, "imag": 227, "show": [227, 228, 229, 230, 231, 232, 233], "accomplish": [227, 232], "def": [227, 230, 232], "resample_sign": 227, "new_sample_r": 227, "ty": 227, "gca": [227, 232], "set_prop_cycl": [227, 232], "four": 227, "appear": 227, "fourth": 227, "do": 227, "315": 227, "32": 227, "below": [228, 229], "00095883": 228, "00175012": 228, "00423921": 228, "0058825": 228, "006151": 228, "00474595": 228, "0017044": 228, "00254816": 228, "00721645": 228, "0112324": 228, "01342358": 228, "01273202": 228, "00845058": 228, "0004368": 228, "01073669": 228, "02372977": 228, "03650247": 228, "04650654": 228, "05098525": 228, "04734644": 228, "03355896": 228, "00851486": 228, "02769991": 228, "07367348": 228, "12670447": 228, "1830132": 228, "23810898": 228, "28727058": 228, "3260799": 228, "3509384": 228, "35949665": 228, "evalu": [228, 229], "envelop": [228, 229], "here": [228, 229], "altern": 229, "47820725": 229, "78207252e": 229, "58172329e": 229, "10862468e": 229, "86109590e": 229, "21565653e": 229, "01140214e": 229, "57286400e": 229, "67772160e": 229, "47338728e": 229, "10422993e": 229, "89312837e": 229, "12240078e": 229, "03953322e": 229, "69685122e": 229, "63882791e": 229, "81474977e": 229, "47193366e": 229, "85259041e": 229, "15647504e": 229, "23851924e": 229, "42176895e": 229, "84684395e": 229, "42721858e": 229, "72236648e": 229, "14721649e": 229, "10813095e": 229, "94024315e": 229, "78877688e": 229, "74077567e": 229, "87820725": 229, "53637958": 229, "94724205": 229, "13335164": 229, "1455082": 229, "04436799": 229, "88708159": 229, "71930943": 229, "5719707": 229, "46154771": 229, "39261642": 229, "36139242": 229, "35935288": 229, "3763214": 229, "40270968": 229, "43085717": 229, "45557651": 229, "47410241": 229, "48566716": 229, "49090568": 229, "49124786": 229, "48840102": 229, "4839738": 229, "47925143": 229, "47510421": 229, "47199608": 229, "47005584": 229, "46917696": 229, "46911955": 229, "denomin": 229, "73910363": 229, "30614675j": 229, "plane": 229, "endpoint": 229, "092337035029908": 229, "71104892744724": 229, "684365018955985": 229, "37868538208862": 229, "1263714068241546": 229, "9993519409971622": 229, "1909320767063554": 229, "016796159999999997": 229, "46380627201679264": 229, "3806359704987118j": 229, "4988817673846036": 229, "333342139809402j": 229, "5543277195082319": 229, "22961005941718524j": 229, "5291527586053246": 229, "2828380420991956j": 229, "lyon": 229, "3rd": 229, "insid": 229, "outsid": 229, "unstabl": 229, "n_symbol": 230, "els": 230, "pb": 230, "x_bb_rect": 230, "papr_bb_rect": 230, "x_pb_rect": 230, "papr_pb_rect": 230, "x_bb_0p1": 230, "papr_bb_0p1": 230, "x_pb_0p1": 230, "papr_pb_0p1": 230, "x_bb_0p5": 230, "papr_bb_0p5": 230, "x_pb_0p5": 230, "papr_pb_0p5": 230, "x_bb_0p9": 230, "papr_bb_0p9": 230, "x_pb_0p9": 230, "papr_pb_0p9": 230, "2f": 230, "rf": [230, 231], "512": 230, "sweep_alpha": 230, "bb_papr": 230, "pb_papr": 230, "bpsk_bb_papr": 230, "bpsk_pb_papr": 230, "qpsk_bb_papr": 230, "qpsk_pb_papr": 230, "psk8_bb_papr": 230, "psk8_pb_papr": 230, "psk16_bb_papr": 230, "psk16_pb_papr": 230, "configur": 231, "loop_filt": 231, "0x000002276d2bcc08": 231, "theta_0": 231, "phase_error": 231, "freq_estim": 231, "suptitl": [231, 232], "avail": [231, 232, 234], "001": 231, "005": 231, "b_nt": 231, "0005": 231, "0125": 231, "015": 231, "0175": 231, "t_lock": 231, "analyze_psk": 232, "100_000": 232, "n0": 232, "tx_mf": 232, "1e6": 232, "bpsk_ber": 232, "bpsk_ser": 232, "qpsk_ber": 232, "qpsk_ser": 232, "psk8_ber": 232, "psk8_ser": 232, "psk16_ber": 232, "psk16_ser": 232, "simul": [232, 234], "1e0": 232, "psk8_bin": 232, "psk8_grai": 232, "wors": 232, "rc_0p1": 233, "rc_0p5": 233, "rc_0p9": 233, "pm": 233, "60": 233, "nearli": 233, "small": 233, "lobe": 233, "much": 233, "freqz": 233, "worn": 233, "whole": 233, "h_rc_0p1": 233, "h_rc_0p5": 233, "h_rc_0p9": 233, "p_rect": 233, "cumsum": 233, "p_rc_0p1": 233, "p_rc_0p5": 233, "p_rc_0p9": 233, "within": 233, "srrc_0p1": 233, "srrc_0p5": 233, "srrc_0p9": 233, "therefor": 233, "significantli": 233, "due": 233, "being": 233, "h_srrc_0p1": 233, "h_srrc_0p5": 233, "h_srrc_0p9": 233, "p_srrc_0p1": 233, "p_srrc_0p5": 233, "p_srrc_0p9": 233, "gauss_0p1": 233, "gauss_0p2": 233, "gauss_0p3": 233, "softwar": 234, "radio": 234, "goal": 234, "analyz": 234, "build": 234, "reli": 234, "interoper": 234, "veri": 234, "numba": 234, "acceler": 234, "computation": 234, "intens": 234, "addition": 234, "aim": 234, "replic": 234, "relev": 234, "matlab": 234, "toolbox": 234, "progress": 234, "someth": 234, "pleas": 234, "open": 234, "issu": 234, "github": 234, "pypi": 234, "api": [234, 236], "convers": [234, 235], "synchron": 234, "budget": [234, 235], "manipul": 234, "august": 235, "27": 235, "2023": 235, "oper": 235, "matt": 235, "hostett": 235, "without": 235, "abil": 235, "improv": 235, "renam": 235, "superflu": 235, "replac": 235, "translat": 235, "fix": [235, 236], "juli": 235, "firinterpol": 235, "model": 235, "impair": 235, "fpsl": 235, "helper": 235, "semant": 236, "major": 236, "minor": 236, "patch": 236, "introduc": 236, "featur": 236, "backward": 236, "compat": 236, "make": 236, "bug": 236, "There": 236, "guarante": 236, "them": 236, "thei": 236}, "objects": {"": [[2, 0, 0, 1, "sdr", ""]], "sdr": [[8, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [25, 1, 1, "", "DDS", "Implements a direct digital synthesizer (DDS)."], [31, 1, 1, "", "Decimator", "Implements a polyphase finite impulse response (FIR) decimating filter."], [41, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [48, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [65, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [72, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [91, 1, 1, "", "Interpolator", "Implements a polyphase finite impulse response (FIR) interpolating filter."], [101, 1, 1, "", "LinearModulation", "Implements linear phase/amplitude modulation with arbitrary symbol mapping."], [119, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [128, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [136, 1, 1, "", "OQPSK", "Implements offset quadrature phase-shift keying (OQPSK) modulation and demodulation."], [140, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [148, 1, 1, "", "PiMPSK", "Implements $pi/M$ phase-shift keying ($pi/M$ PSK) modulation and demodulation."], [150, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [151, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [152, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [153, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [154, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [155, 5, 1, "", "barker", "Returns the Barker code/sequence of length $N$."], [156, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [157, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [158, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [159, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [160, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [161, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [162, 5, 1, "", "db", "Converts from linear units to decibels."], [163, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [164, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [165, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [166, 5, 1, "", "downsample", "Downsamples the time-domain signal $x[n]$ by the factor $r$."], [167, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [168, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [169, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [170, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [171, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [172, 5, 1, "", "evm", "Calculates the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [173, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [174, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [175, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [176, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [177, 5, 1, "", "half_sine", "Returns a half-sine pulse shape."], [178, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [179, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [180, 5, 1, "", "linear", "Converts from decibels to linear units."], [181, 5, 1, "", "mix", "Mixes the time-domain signal $x[n]$ with a complex exponential or real sinusoid."], [182, 5, 1, "", "multirate_taps", "Computes the multirate FIR filter that achieves rational resampling by $P/Q$."], [183, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [184, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [185, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [186, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [187, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [206, 5, 1, "", "polyphase_matrix", "Converts the multirate FIR filter taps $h_i$ into the polyphase matrix $H_{i, j}$ that achieves rational resampling by $P/Q$."], [207, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [208, 5, 1, "", "rectangular", "Returns a rectangular pulse shape."], [209, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [210, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [211, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [212, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [213, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [214, 5, 1, "", "to_complex_bb", "Converts the real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$ to a complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c} = f_{s,r}/2$."], [215, 5, 1, "", "to_real_pb", "Converts the complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$ to a real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r} = 2f_{s,c}$."], [216, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [217, 5, 1, "", "upsample", "Upsamples the time-domain signal $x[n]$ by the factor $r$."], [218, 5, 1, "", "wavelength", "Calculates the wavelength $lambda$ of a electromagnetic wave with frequency $f$."], [219, 5, 1, "", "zadoff_chu", "Returns the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.ClosedLoopPLL": [[9, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [10, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [11, 2, 1, "", "K0", "The NCO gain $K_0$."], [12, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [13, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [14, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [15, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [16, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [17, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [18, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [19, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [20, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [21, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [22, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [23, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [24, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[15, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [15, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [15, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [15, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [15, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[16, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[18, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[21, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.DDS": [[26, 3, 1, "", "__call__", "Steps the DDS with the variable phase increment signal $x[n]$."], [27, 3, 1, "", "__init__", "Creates a direct digital synthesizer (DDS)."], [28, 2, 1, "", "nco", "The numerically-controlled oscillator (NCO) used by the DDS."], [29, 3, 1, "", "reset", "Resets the DDS."], [30, 3, 1, "", "step", "Steps the DDS forward by $N$ samples."]], "sdr.DDS.__call__": [[26, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the DDS."]], "sdr.DDS.__init__": [[27, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [27, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [27, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.DDS.step": [[30, 4, 2, "p-N", "N", "The number of samples $N$ to step the DDS forward."]], "sdr.Decimator": [[32, 3, 1, "", "__call__", "Filters and decimates the input signal $x[n]$ with the polyphase FIR filter."], [33, 3, 1, "", "__init__", "Creates a polyphase FIR decimating filter."], [34, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [35, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [36, 2, 1, "", "method", "The method used to design the multirate filter."], [37, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [38, 2, 1, "", "rate", "The decimation rate $r$."], [39, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [40, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Decimator.__call__": [[32, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [32, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Decimator.__init__": [[33, 4, 2, "p-rate", "rate", "The decimation rate $r$."], [33, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [33, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.ErrorRate": [[42, 3, 1, "", "__init__", "Creates a new error rate tabulation object."], [43, 3, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [44, 3, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [45, 3, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [46, 3, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [47, 3, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[43, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [43, 4, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [43, 4, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[44, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[45, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[47, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[49, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the FIR filter."], [50, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [51, 3, 1, "", "__len__", "Returns the filter length $N + 1$."], [52, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [53, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [54, 2, 1, "", "delay", "The delay of the FIR filter $d = lfloor frac{N + 1}{2} rfloor$ in samples."], [55, 3, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [56, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the FIR filter."], [57, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(omega)$ of the FIR filter on a logarithmic frequency axis."], [58, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [59, 2, 1, "", "order", "The order of the FIR filter $N$."], [60, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [61, 2, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [62, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [63, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [64, 2, 1, "", "taps", "The feedforward taps $h_i$ for $i = 0,...,N$."]], "sdr.FIR.__call__": [[49, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [49, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.FIR.__init__": [[50, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$ for $i = 0,...N$."], [50, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FIR.frequency_response": [[56, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [56, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.frequency_response_log": [[57, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [57, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [57, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[58, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.step_response": [[62, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FarrowResampler": [[66, 3, 1, "", "__call__", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [67, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [68, 2, 1, "", "order", "The order of the filter."], [69, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [70, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [71, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__call__": [[66, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [66, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.__init__": [[67, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FarrowResampler.reset": [[69, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[73, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [74, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the IIR filter."], [75, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [76, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [77, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [78, 2, 1, "", "a_taps", "The feedback taps $a_j$ for $j = 0,...,N$."], [79, 2, 1, "", "b_taps", "The feedforward taps $b_i$ for $i = 0,...,M$."], [80, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the IIR filter."], [81, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(omega)$ of the IIR filter on a logarithmic frequency axis."], [82, 2, 1, "", "gain", "The gain of the IIR filter."], [83, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [84, 2, 1, "", "order", "The order of the IIR filter $N$."], [85, 2, 1, "", "poles", "The poles of the IIR filter."], [86, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [87, 2, 1, "", "state", "The filter state."], [88, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [89, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [90, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[73, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [73, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [73, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."], [73, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__call__": [[74, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.IIR.__init__": [[75, 4, 2, "p-a", "a", "The feedback coefficients $a_j$ for $j = 0,...,N$."], [75, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$ for $i = 0,...,M$."], [75, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.IIR.frequency_response": [[80, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [80, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[81, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [81, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [81, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[83, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[88, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.Interpolator": [[92, 3, 1, "", "__call__", "Interpolates and filters the input signal $x[n]$ with the polyphase FIR filter."], [93, 3, 1, "", "__init__", "Creates a polyphase FIR interpolating filter."], [94, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [95, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [96, 2, 1, "", "method", "The method used to design the multirate filter."], [97, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [98, 2, 1, "", "rate", "The interpolation rate $r$."], [99, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [100, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Interpolator.__call__": [[92, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [92, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Interpolator.__init__": [[93, 4, 2, "p-rate", "rate", "The interpolation rate $r$."], [93, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [93, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.LinearModulation": [[102, 3, 1, "", "__init__", "Creates a new linear phase/amplitude modulation object."], [103, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [104, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [105, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [106, 2, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [107, 3, 1, "", "decide_symbols", "Converts the received complex symbols $hat{a}[k]$ into decimal symbol decisions $hat{s}[k]$ using maximum-likelihood estimation (MLE)."], [108, 3, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples $hat{x}[n]$ into decimal symbol decisions $hat{s}[k]$ using matched filtering and maximum-likelihood estimation."], [109, 3, 1, "", "map_symbols", "Converts the decimal symbols $s[k]$ to complex symbols $a[k]$."], [110, 3, 1, "", "modulate", "Modulates the decimal symbols $s[k]$ into pulse-shaped complex samples $x[n]$."], [111, 2, 1, "", "order", "The modulation order $M = 2^k$."], [112, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [113, 2, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [114, 2, 1, "", "rx_filter", "The receive decimating matched filter. The filter coefficients are matched to the pulse shape $h[-n]^*$."], [115, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [116, 2, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [117, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."], [118, 2, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter. The filter coefficients are the pulse shape $h[n]$."]], "sdr.LinearModulation.__init__": [[102, 4, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees to apply to symbol_map."], [102, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [102, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [102, 4, 2, "p-symbol_map", "symbol_map", "The symbol mapping ${0, dots, M-1} mapsto mathbb{C}$. An $M$-length array whose indices are decimal symbols $s[k]$ and whose values are complex symbols $a[k]$, where $M$ is the modulation order."]], "sdr.LinearModulation.ber": [[105, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.LinearModulation.decide_symbols": [[107, 4, 2, "p-a_hat", "a_hat", "The received complex symbols $hat{a}[k]$."]], "sdr.LinearModulation.demodulate": [[108, 4, 2, "p-x_hat", "x_hat", "The received pulse-shaped complex samples $hat{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.LinearModulation.map_symbols": [[109, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to map, $0$ to $M-1$."]], "sdr.LinearModulation.modulate": [[110, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.LinearModulation.ser": [[115, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.LoopFilter": [[120, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [121, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [122, 3, 1, "", "__call__", "Filters the input signal $x[n]$."], [123, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [124, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [125, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [126, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [127, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__call__": [[122, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.LoopFilter.__init__": [[123, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [123, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [123, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [123, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.NCO": [[129, 2, 1, "", "K0", "The NCO gain $K_0$."], [130, 3, 1, "", "__call__", "Steps the NCO with the variable-increment signal $x[n]$."], [131, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [132, 2, 1, "", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [133, 2, 1, "", "offset", "The absolute offset $theta$ of the NCO in units."], [134, 3, 1, "", "reset", "Resets the NCO."], [135, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__call__": [[130, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the NCO."]], "sdr.NCO.__init__": [[131, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [131, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [131, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in units."]], "sdr.NCO.step": [[135, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.OQPSK": [[137, 3, 1, "", "__init__", "Creates a new OQPSK object."], [138, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [139, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."]], "sdr.OQPSK.__init__": [[137, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [137, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [137, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [137, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK": [[141, 3, 1, "", "__init__", "Creates a new PSK object."], [142, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [143, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [144, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [145, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [146, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [147, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[141, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [141, 4, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [141, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [141, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [141, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[144, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [144, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.ser": [[146, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [146, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.PiMPSK": [[149, 3, 1, "", "__init__", "Creates a new $pi/M$ PSK object."]], "sdr.PiMPSK.__init__": [[149, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [149, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [149, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [149, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [149, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.Q": [[150, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[151, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.average_power": [[152, 4, 2, "p-db", "db", "Indicates whether to return the result in dB."], [152, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[153, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [153, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [153, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [153, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[154, 4, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [154, 4, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.barker": [[155, 4, 2, "p-length", "length", "The length $N$ of the Barker code/sequence."], [155, 4, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[156, 4, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [156, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[157, 4, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[158, 4, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[159, 4, 2, "p-p", "p", "The probability $p$ of a bit flip."], [159, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[160, 4, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[161, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.db": [[162, 4, 2, "p-type", "type", "The type of input value or signal."], [162, 4, 2, "p-x", "x", "The input value or signal."]], "sdr.diff_decode": [[163, 4, 2, "p-y", "y", "The input encoded data $y[k]$."], [163, 4, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[164, 4, 2, "p-x", "x", "The input uncoded data $x[k]$."], [164, 4, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[165, 4, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [165, 4, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [165, 4, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [165, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.downsample": [[166, 4, 2, "p-rate", "rate", "The downsampling factor $r$."], [166, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.ebn0_to_esn0": [[167, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [167, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [167, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[168, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [168, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [168, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [168, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[169, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[170, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [170, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [170, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[171, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [171, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.evm": [[172, 4, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [172, 4, 2, "p-output", "output", "The output type of the EVM calculation."], [172, 4, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [172, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.frequency_offset": [[173, 4, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [173, 4, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [173, 4, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [173, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [173, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[174, 4, 2, "p-d", "d", "The distance $d$ in meters between the transmitter and receiver."], [174, 4, 2, "p-f", "f", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[175, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [175, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [175, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [175, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[176, 4, 2, "p-n", "n", "The length of the Gray code."]], "sdr.half_sine": [[177, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [177, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [177, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.hexdump": [[178, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [178, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[179, 4, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [179, 4, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [179, 4, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.linear": [[180, 4, 2, "p-type", "type", "The type of output value or signal."], [180, 4, 2, "p-x", "x", "The input value or signal in dB."]], "sdr.mix": [[181, 4, 2, "p-complex", "complex", "Indicates whether to mix by a complex exponential or real sinusoid."], [181, 4, 2, "p-freq", "freq", "The frequency $f$ of the sinusoid in Hz (or 1/samples if sample_rate=1). The frequency must satisfy $-f_s/2 le f le f_s/2$."], [181, 4, 2, "p-phase", "phase", "The phase $phi$ of the sinusoid in degrees."], [181, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal."], [181, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.multirate_taps": [[182, 4, 2, "p-A_stop", "A_stop", "The stopband attenuation $A_{text{stop}}$ in dB."], [182, 4, 2, "p-P", "P", "The interpolation rate $P$."], [182, 4, 2, "p-Q", "Q", "The decimation rate $Q$."], [182, 4, 2, "p-half_length", "half_length", "The half-length of the polyphase filters."]], "sdr.pack": [[183, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [183, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [183, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[184, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[185, 4, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [185, 4, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [185, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[186, 4, 2, "p-db", "db", "Indicates whether to return the result in dB."], [186, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[187, 4, 2, "p-db", "db", "Indicates whether to return the result in dB."], [187, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.plot": [[188, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [189, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [190, 5, 1, "", "eye", "Plots the eye diagram of the baseband modulated signal $x[n]$."], [191, 5, 1, "", "filter", "Plots the magnitude response $|H(omega)|^2$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [192, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [193, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [194, 5, 1, "", "magnitude_response", "Plots the magnitude response $|H(omega)|^2$ of the filter."], [195, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [196, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [197, 5, 1, "", "phase_response", "Plots the phase response $angle H(omega)$ of the filter."], [198, 5, 1, "", "raster", "Plots a raster of the time-domain signal $x[n]$."], [199, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [200, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [201, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [202, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [203, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [204, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [205, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[188, 4, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [188, 4, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."], [188, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."]], "sdr.plot.constellation": [[189, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [189, 4, 2, "p-kwargs", "kwargs", "If heatmap=False, additional keyword arguments to pass to matplotlib.pyplot.scatter(). The following keyword arguments are set by default. The defaults may be overwritten."], [189, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [189, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.eye": [[190, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [190, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [190, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [190, 4, 2, "p-span", "span", "The number of symbols per raster."], [190, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [190, 4, 2, "p-x", "x", "The baseband modulated signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved."]], "sdr.plot.filter": [[191, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [191, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [191, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [191, 4, 2, "p-filter", "filter", "The filter definition."], [191, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [191, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[192, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [192, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [192, 4, 2, "p-filter", "filter", "The filter definition."], [192, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [192, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [192, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.impulse_response": [[193, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [193, 4, 2, "p-filter", "filter", "The filter definition."], [193, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.magnitude_response": [[194, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [194, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [194, 4, 2, "p-filter", "filter", "The filter definition."], [194, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [194, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [194, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.periodogram": [[195, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [195, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [195, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [195, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [195, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [195, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [195, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [195, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [195, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [195, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_delay": [[196, 4, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [196, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [196, 4, 2, "p-filter", "filter", "The filter definition."], [196, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [196, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [196, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_response": [[197, 4, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [197, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [197, 4, 2, "p-filter", "filter", "The filter definition."], [197, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [197, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [197, 4, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [197, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.raster": [[198, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [198, 4, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\"."], [198, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.collections.LineCollection. The following keyword arguments are set by default. The defaults may be overwritten."], [198, 4, 2, "p-length", "length", "The length of each raster in samples. This must be provided if x is 1D."], [198, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [198, 4, 2, "p-stride", "stride", "The stride between each raster in samples. If None, the stride is set to length."], [198, 4, 2, "p-x", "x", "The time-domain signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved. If x is 1D, the rastering is determined by length and stride. If x is 2D, the rows correspond to each raster."]], "sdr.plot.ser": [[199, 4, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [199, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."], [199, 4, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.spectrogram": [[200, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [200, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [200, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.pcolormesh(). The following keyword arguments are set by default. The defaults may be overwritten."], [200, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [200, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [200, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [200, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [200, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [200, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[201, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [201, 4, 2, "p-filter", "filter", "The filter definition."], [201, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.symbol_map": [[202, 4, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [202, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot(). The following keyword arguments are set by default. The defaults may be overwritten."], [202, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [202, 4, 2, "p-modulation", "modulation", "The linear modulation or symbol map ${0, dots, M-1} mapsto mathbb{C}$."]], "sdr.plot.time_domain": [[203, 4, 2, "p-centered", "centered", "Indicates whether to center the x-axis about 0. This argument is mutually exclusive with offset."], [203, 4, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal. If \"color\", the real and imaginary parts will have different colors based on the current Matplotlib color cycle. If \"line\", the real part will have a solid line and the imaginary part will have a dashed line, and both lines will share the same color."], [203, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [203, 4, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. The units of the offset are $1/f_s$. This argument is mutually exclusive with centered."], [203, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [203, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[205, 4, 2, "p-filter", "filter", "The filter definition."], [205, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.polyphase_matrix": [[206, 4, 2, "p-P", "P", "The interpolation rate $P$."], [206, 4, 2, "p-Q", "Q", "The decimation rate $Q$."], [206, 4, 2, "p-taps", "taps", "The multirate FIR filter taps $h_i$."]], "sdr.raised_cosine": [[207, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [207, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [207, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [207, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rectangular": [[208, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [208, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [208, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[209, 4, 2, "p-db", "db", "Indicates whether to return the result in dB."], [209, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[210, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [210, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [210, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [210, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[211, 4, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [211, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.snr_to_ebn0": [[212, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [212, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [212, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [212, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[213, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [213, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.to_complex_bb": [[214, 4, 2, "p-x_r", "x_r", "The real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$. If the length is odd, one zero is appended to the end."]], "sdr.to_real_pb": [[215, 4, 2, "p-x_c", "x_c", "The complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$."]], "sdr.unpack": [[216, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [216, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [216, 4, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.upsample": [[217, 4, 2, "p-rate", "rate", "The upsampling factor $r$."], [217, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.wavelength": [[218, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.zadoff_chu": [[219, 4, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [219, 4, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence. The root must be relatively prime to the length, i.e., $gcd(u, N) = 1$."], [219, 4, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence. When $q ne 0$, the returned sequence is a cyclic shift of the root-$u$ Zadoff-Chu sequence."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"convers": 0, "decibel": 0, "from": [0, 224, 225, 226], "e_b": 0, "n_0": 0, "e_": 0, "": [0, 228, 229], "n": [0, 227, 228, 229], "data": 1, "manipul": [1, 2], "digit": [2, 229], "signal": [2, 221, 227, 230], "process": 2, "filter": [2, 6, 228, 229, 231], "multir": 2, "resampl": [2, 227], "correl": 2, "link": 3, "budget": 3, "channel": [3, 221], "capac": 3, "path": 3, "loss": 3, "antenna": 3, "measur": 4, "energi": 4, "power": [4, 230], "voltag": 4, "modul": [4, 5, 6], "linear": 5, "orthogon": 5, "puls": [5, 230, 233], "shape": [5, 230, 233], "symbol": [5, 232], "map": [5, 232], "encod": 5, "plot": [6, 230], "configur": [6, 225, 226], "time": [6, 230, 231], "domain": [6, 230, 231], "frequenc": [6, 228, 229, 230, 231], "spectral": 6, "estim": 6, "analysi": 6, "probabl": 7, "note": [8, 174, 182, 194, 195, 200], "constructor": [8, 25, 31, 41, 48, 65, 72, 91, 101, 119, 128, 136, 140, 148], "method": [8, 25, 31, 41, 48, 65, 72, 91, 101, 119, 128, 136, 140, 148], "properti": [8, 25, 31, 48, 65, 72, 91, 101, 119, 128, 136, 140, 148], "see": [25, 41, 43, 56, 57, 58, 62, 80, 81, 83, 88, 105, 115, 128, 144, 146, 150, 151, 161, 184, 217], "also": [25, 41, 43, 56, 57, 58, 62, 80, 81, 83, 88, 105, 115, 128, 144, 146, 150, 151, 161, 184, 217], "special": [25, 31, 48, 65, 72, 91, 119, 128], "string": [31, 48, 72, 91, 101, 136, 140, 148], "represent": [31, 48, 72, 91, 101, 136, 140, 148], "stream": [31, 48, 72, 91], "mode": [31, 48, 72, 91], "onli": [31, 48, 72, 91], "warn": [166, 217], "sequenc": 220, "simul": 221, "model": 221, "impair": 221, "synchron": 222, "document": 223, "instal": [223, 224, 225, 226, 234], "build": 223, "doc": 223, "serv": 223, "pypi": 224, "github": 224, "edit": 224, "local": 224, "folder": 224, "dev": 224, "depend": 224, "linter": 225, "run": [225, 226], "command": [225, 226], "line": [225, 226], "v": [225, 226], "code": [225, 226], "unit": 226, "test": 226, "farrow": 227, "arbitrari": 227, "construct": 227, "an": [227, 228, 229], "input": 227, "x": 227, "t_": 227, "rate": [227, 232], "r": 227, "y": 227, "frac": 227, "upsampl": 227, "integ": 227, "downsampl": 227, "irrat": 227, "fir": 228, "creat": [228, 229], "examin": [228, 229, 230], "impuls": [228, 229], "respons": [228, 229, 231], "h": [228, 229], "step": [228, 229, 231], "omega": [228, 229], "group": [228, 229], "delai": [228, 229], "tau_g": [228, 229], "fulli": [228, 229], "analyz": [228, 229, 231], "iir": 229, "zero": 229, "pole": 229, "stabil": 229, "peak": 230, "averag": 230, "qpsk": [230, 232], "variou": 230, "across": [230, 231], "excess": 230, "bandwidth": 230, "phase": [231, 232], "lock": 231, "loop": 231, "design": 231, "proport": 231, "plu": 231, "integr": 231, "ppi": 231, "implement": 231, "pll": 231, "close": 231, "perform": 231, "compar": 231, "zeta": 231, "b_n": 231, "t": 231, "shift": 232, "kei": 232, "constel": 232, "bpsk": 232, "8": 232, "psk": 232, "16": 232, "error": 232, "curv": 232, "bit": 232, "rais": 233, "cosin": 233, "squar": 233, "root": 233, "gaussian": 233, "sdr": 234, "featur": 234, "v0": 235, "0": 235, "7": 235, "chang": 235, "contributor": 235, "6": 235, "5": 235, "4": 235, "3": 235, "2": 235, "1": 235, "version": 236, "alpha": 236, "releas": 236, "beta": 236}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Conversions": [[0, "conversions"]], "Decibels": [[0, "decibels"]], "From E_b/N_0": [[0, "from-e-b-n-0"]], "From E_s/N_0": [[0, "from-e-s-n-0"]], "From S/N": [[0, "from-s-n"]], "Data manipulation": [[1, "data-manipulation"]], "Digital signal processing": [[2, "digital-signal-processing"]], "Filtering": [[2, "filtering"]], "Multirate filtering": [[2, "multirate-filtering"]], "Resampling": [[2, "resampling"]], "Correlation": [[2, "correlation"]], "Signal manipulation": [[2, "signal-manipulation"]], "Link budgets": [[3, "link-budgets"]], "Channel capacity": [[3, "channel-capacity"]], "Path losses": [[3, "path-losses"]], "Antennas": [[3, "antennas"]], "Measurement": [[4, "measurement"]], "Energy": [[4, "energy"]], "Power": [[4, "power"]], "Voltage": [[4, "voltage"]], "Modulation": [[4, "modulation"], [5, "modulation"], [6, "modulation"]], "Linear modulations": [[5, "linear-modulations"]], "Orthogonal modulations": [[5, "orthogonal-modulations"]], "Pulse shaping": [[5, "pulse-shaping"]], "Symbol mapping": [[5, "symbol-mapping"], [232, "symbol-mapping"]], "Symbol encoding": [[5, "symbol-encoding"]], "Plotting": [[6, "plotting"]], "Configuration": [[6, "configuration"], [225, "configuration"], [226, "configuration"]], "Time-domain": [[6, "time-domain"]], "Frequency-domain": [[6, "frequency-domain"]], "Spectral estimation": [[6, "spectral-estimation"]], "Filter analysis": [[6, "filter-analysis"]], "Probability": [[7, "probability"]], "Note": [[8, null], [174, null], [182, null], [194, null], [195, null], [195, null], [200, null]], "Constructors": [[8, "constructors"], [25, "constructors"], [31, "constructors"], [41, "constructors"], [48, "constructors"], [65, "constructors"], [72, "constructors"], [91, "constructors"], [101, "constructors"], [119, "constructors"], [128, "constructors"], [136, "constructors"], [140, "constructors"], [148, "constructors"]], "Methods": [[8, "methods"], [25, "methods"], [31, "methods"], [41, "methods"], [48, "methods"], [65, "methods"], [72, "methods"], [91, "methods"], [101, "methods"], [119, "methods"], [128, "methods"], [136, "methods"], [140, "methods"], [148, "methods"]], "Properties": [[8, "properties"], [25, "properties"], [31, "properties"], [48, "properties"], [65, "properties"], [72, "properties"], [91, "properties"], [101, "properties"], [119, "properties"], [128, "properties"], [136, "properties"], [140, "properties"], [148, "properties"]], "See also": [[25, null], [41, null], [43, null], [56, null], [57, null], [58, null], [62, null], [80, null], [81, null], [83, null], [88, null], [105, null], [115, null], [128, null], [144, null], [146, null], [150, null], [151, null], [161, null], [184, null], [217, null]], "Special methods": [[25, "special-methods"], [31, "special-methods"], [48, "special-methods"], [65, "special-methods"], [72, "special-methods"], [91, "special-methods"], [119, "special-methods"], [128, "special-methods"]], "String representation": [[31, "string-representation"], [48, "string-representation"], [72, "string-representation"], [91, "string-representation"], [101, "string-representation"], [136, "string-representation"], [140, "string-representation"], [148, "string-representation"]], "Streaming mode only": [[31, "streaming-mode-only"], [48, "streaming-mode-only"], [72, "streaming-mode-only"], [91, "streaming-mode-only"]], "Warning": [[166, null], [217, null]], "Sequences": [[220, "sequences"]], "Simulation": [[221, "simulation"]], "Channel models": [[221, "channel-models"]], "Signal impairments": [[221, "signal-impairments"]], "Synchronization": [[222, "synchronization"]], "Documentation": [[223, "documentation"]], "Install": [[223, "install"], [225, "install"], [226, "install"]], "Build the docs": [[223, "build-the-docs"]], "Serve the docs": [[223, "serve-the-docs"]], "Installation": [[224, "installation"], [234, "installation"]], "Install from PyPI": [[224, "install-from-pypi"]], "Install from GitHub": [[224, "install-from-github"]], "Editable install from local folder": [[224, "editable-install-from-local-folder"]], "Install the dev dependencies": [[224, "install-the-dev-dependencies"]], "Linter": [[225, "linter"]], "Run from the command line": [[225, "run-from-the-command-line"], [226, "run-from-the-command-line"]], "Run from VS Code": [[225, "run-from-vs-code"], [226, "run-from-vs-code"]], "Unit Tests": [[226, "unit-tests"]], "Farrow arbitrary resampler": [[227, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[227, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[227, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[227, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[227, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[227, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[227, "downsample-by-an-irrational-rate"]], "FIR filters": [[228, "fir-filters"]], "Create an FIR filter": [[228, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[228, "examine-the-impulse-response-h-n"], [229, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[228, "examine-the-step-response-s-n"], [229, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[228, "examine-the-frequency-response-h-omega"], [229, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[228, "examine-the-group-delay-tau-g-omega"], [229, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[228, "fully-analyze-a-fir-filter"]], "IIR filters": [[229, "iir-filters"]], "Create an IIR filter": [[229, "create-an-iir-filter"]], "Examine the zeros and poles": [[229, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[229, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[229, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[230, "peak-to-average-power"]], "QPSK signal with various pulse shapes": [[230, "qpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[230, "examine-time-domain"]], "Examine frequency domain": [[230, "examine-frequency-domain"]], "Plot across excess bandwidth": [[230, "plot-across-excess-bandwidth"]], "Phase-locked loops": [[231, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[231, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[231, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[231, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[231, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[231, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[231, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[231, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[232, "phase-shift-keying"]], "Constellations": [[232, "constellations"]], "BPSK": [[232, "bpsk"]], "QPSK": [[232, "qpsk"]], "8-PSK": [[232, "id1"]], "16-PSK": [[232, "id2"]], "Error rate curves": [[232, "error-rate-curves"]], "Bit error rate curves": [[232, "bit-error-rate-curves"]], "Symbol error rate curves": [[232, "symbol-error-rate-curves"]], "Pulse shapes": [[233, "pulse-shapes"]], "Raised cosine": [[233, "raised-cosine"]], "Square-root raised cosine": [[233, "square-root-raised-cosine"]], "Gaussian": [[233, "gaussian"]], "sdr": [[234, "sdr"]], "Features": [[234, "features"]], "v0.0": [[235, "v0-0"]], "v0.0.7": [[235, "v0-0-7"]], "Changes": [[235, "changes"], [235, "id1"], [235, "id3"], [235, "id5"], [235, "id7"], [235, "id9"], [235, "id11"]], "Contributors": [[235, "contributors"], [235, "id2"], [235, "id4"], [235, "id6"], [235, "id8"], [235, "id10"], [235, "id12"]], "v0.0.6": [[235, "v0-0-6"]], "v0.0.5": [[235, "v0-0-5"]], "v0.0.4": [[235, "v0-0-4"]], "v0.0.3": [[235, "v0-0-3"]], "v0.0.2": [[235, "v0-0-2"]], "v0.0.1": [[235, "v0-0-1"]], "Versioning": [[236, "versioning"]], "Alpha releases": [[236, "alpha-releases"]], "Beta releases": [[236, "beta-releases"]]}, "indexentries": {"module": [[2, "module-sdr"]], "sdr": [[2, "module-sdr"]]}, "docurls": ["api/conversions/", "api/data-manipulation/", "api/dsp/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.DDS/", "api/sdr.DDS.__call__/", "api/sdr.DDS.__init__/", "api/sdr.DDS.nco/", "api/sdr.DDS.reset/", "api/sdr.DDS.step/", "api/sdr.Decimator/", "api/sdr.Decimator.__call__/", "api/sdr.Decimator.__init__/", "api/sdr.Decimator.__repr__/", "api/sdr.Decimator.__str__/", "api/sdr.Decimator.method/", "api/sdr.Decimator.polyphase_taps/", "api/sdr.Decimator.rate/", "api/sdr.Decimator.reset/", "api/sdr.Decimator.taps/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__call__/", "api/sdr.FIR.__init__/", "api/sdr.FIR.__len__/", "api/sdr.FIR.__repr__/", "api/sdr.FIR.__str__/", "api/sdr.FIR.delay/", "api/sdr.FIR.flush/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.frequency_response_log/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.reset/", "api/sdr.FIR.state/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__call__/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__call__/", "api/sdr.IIR.__init__/", "api/sdr.IIR.__repr__/", "api/sdr.IIR.__str__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.state/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.Interpolator/", "api/sdr.Interpolator.__call__/", "api/sdr.Interpolator.__init__/", "api/sdr.Interpolator.__repr__/", "api/sdr.Interpolator.__str__/", "api/sdr.Interpolator.method/", "api/sdr.Interpolator.polyphase_taps/", "api/sdr.Interpolator.rate/", "api/sdr.Interpolator.reset/", "api/sdr.Interpolator.taps/", "api/sdr.LinearModulation/", "api/sdr.LinearModulation.__init__/", "api/sdr.LinearModulation.__repr__/", "api/sdr.LinearModulation.__str__/", "api/sdr.LinearModulation.ber/", "api/sdr.LinearModulation.bps/", "api/sdr.LinearModulation.decide_symbols/", "api/sdr.LinearModulation.demodulate/", "api/sdr.LinearModulation.map_symbols/", "api/sdr.LinearModulation.modulate/", "api/sdr.LinearModulation.order/", "api/sdr.LinearModulation.phase_offset/", "api/sdr.LinearModulation.pulse_shape/", "api/sdr.LinearModulation.rx_filter/", "api/sdr.LinearModulation.ser/", "api/sdr.LinearModulation.sps/", "api/sdr.LinearModulation.symbol_map/", "api/sdr.LinearModulation.tx_filter/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__call__/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__call__/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.OQPSK/", "api/sdr.OQPSK.__init__/", "api/sdr.OQPSK.__repr__/", "api/sdr.OQPSK.__str__/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.__repr__/", "api/sdr.PSK.__str__/", "api/sdr.PSK.ber/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.PiMPSK/", "api/sdr.PiMPSK.__init__/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.barker/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.db/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.downsample/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.evm/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.half_sine/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.linear/", "api/sdr.mix/", "api/sdr.multirate_taps/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.eye/", "api/sdr.plot.filter/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.magnitude_response/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.raster/", "api/sdr.plot.ser/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.polyphase_matrix/", "api/sdr.raised_cosine/", "api/sdr.rectangular/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.to_complex_bb/", "api/sdr.to_real_pb/", "api/sdr.unpack/", "api/sdr.upsample/", "api/sdr.wavelength/", "api/sdr.zadoff_chu/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/installation/", "development/linter/", "development/unit-tests/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})