Search.setIndex({"titles": ["Filtering", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.DDS", "sdr.DDS.__init__", "sdr.DDS.nco", "sdr.DDS.process", "sdr.DDS.reset", "sdr.DDS.step", "sdr.FIR", "sdr.FIR.__init__", "sdr.FIR.delay", "sdr.FIR.filter", "sdr.FIR.frequency_response", "sdr.FIR.frequency_response_log", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.reset", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.resample", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__init__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.filter", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.filter", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.process", "sdr.NCO.reset", "sdr.NCO.step", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.demodulate", "sdr.PSK.modulate", "sdr.PSK.offset", "sdr.PSK.order", "sdr.PSK.symbol_map", "sdr.Q", "sdr.Qinv", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.bec", "sdr.bec_capacity", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.dmc", "sdr.energy", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.hexdump", "sdr.iq_imbalance", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.plot.constellation", "sdr.plot.filter", "sdr.plot.frequency_response", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.raised_cosine", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.unpack", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"class": [0, 1, 18, 24, 36, 43, 59, 68, 76, 123, 124, 127], "sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131], "fir": [0, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 106, 107, 108, 109, 111, 112, 114, 117, 129, 130], "implement": [0, 18, 24, 36, 43, 59, 65, 68, 76, 122], "finit": [0, 24, 130], "impuls": [0, 24, 30, 43, 52, 96, 106, 109, 115, 125, 128, 130], "respons": [0, 24, 28, 29, 30, 33, 43, 49, 50, 52, 56, 96, 106, 107, 108, 109, 112, 114, 128, 130], "iir": [0, 1, 10, 29, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 65, 106, 107, 108, 109, 111, 112, 114, 117, 123, 126, 129, 130], "an": [0, 24, 30, 43, 44, 45, 52, 87, 100, 109, 121, 129], "infinit": [0, 43, 130], "gaussian": [0, 86, 87, 96, 129, 130], "time_bandwidth": [0, 96], "float": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 36, 39, 43, 44, 49, 50, 51, 59, 60, 61, 62, 63, 66, 68, 69, 70, 71, 72, 76, 77, 80, 85, 86, 87, 88, 90, 92, 94, 96, 99, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 115, 118, 119, 120], "span": [0, 96, 118, 120, 125, 128], "int": [0, 18, 23, 24, 26, 28, 29, 30, 31, 33, 36, 38, 43, 49, 50, 52, 53, 56, 68, 75, 76, 77, 81, 86, 96, 97, 98, 100, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 120, 121], "sp": [0, 96, 118, 120, 125, 128], "ndarrai": [0, 18, 21, 23, 24, 27, 28, 29, 30, 33, 35, 36, 39, 42, 43, 46, 47, 48, 49, 50, 52, 54, 56, 58, 59, 64, 68, 73, 75, 76, 78, 79, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 96, 97, 99, 100, 118, 120, 121], "return": [0, 1, 9, 11, 14, 15, 21, 23, 24, 27, 28, 29, 30, 33, 39, 43, 48, 49, 50, 52, 56, 64, 73, 75, 78, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 118, 119, 120, 121, 123, 124], "raised_cosin": [0, 118, 128, 129, 130], "alpha": [0, 96, 116, 118, 120, 125, 128], "rais": [0, 115, 118, 120, 123], "cosin": [0, 115, 118, 120, 123], "rc": [0, 118], "root_raised_cosin": [0, 106, 107, 108, 109, 111, 112, 114, 115, 117, 120, 123, 125, 128, 129, 130], "squar": [0, 95, 102, 115, 119, 120, 123], "root": [0, 115, 119, 120, 123], "srrc": [0, 115, 120, 125], "farrowresampl": [0, 36, 37, 38, 39, 40, 41, 42, 122, 129, 130], "cubic": [0, 36], "farrow": [0, 36, 37, 38, 39, 40, 41, 42, 130], "arbitrari": [0, 36, 37, 38, 39, 40, 41, 42, 129, 130], "psk": [0, 76, 77, 78, 79, 80, 81, 82, 99, 129], "shift": [0, 76, 78, 79, 80, 81, 82, 123, 124], "kei": [0, 76, 78, 79, 80, 81, 82], "demodul": [0, 76, 78], "gray_cod": [0, 97, 129], "n": [0, 1, 18, 21, 23, 24, 27, 28, 29, 30, 31, 33, 36, 39, 43, 48, 49, 50, 52, 53, 56, 59, 64, 68, 73, 75, 83, 84, 85, 86, 87, 92, 93, 94, 97, 99, 101, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 119, 126, 128], "gener": [0, 86, 97, 127], "grai": [0, 97], "code": [0, 97], "length": [0, 30, 33, 96, 97, 106, 109, 110, 113, 114, 118, 120, 122, 125, 128], "2": [0, 1, 9, 11, 14, 28, 29, 49, 50, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128], "closedlooppl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 126, 129, 130], "A": [0, 1, 9, 11, 12, 13, 14, 15, 17, 24, 59, 97, 98, 99, 102, 118, 120, 126], "defin": [0, 1, 24, 43, 86, 93, 96, 124, 129], "perform": [0, 1, 123, 124, 129], "close": [0, 1, 8, 10, 130], "pll": [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 130], "dd": [0, 18, 19, 20, 21, 22, 23, 68, 126, 129, 130], "direct": [0, 18, 19, 126, 130], "digit": [0, 1, 9, 11, 12, 13, 14, 15, 18, 19, 59, 118, 120, 126, 129, 130], "synthes": [0, 18, 19, 126, 130], "loopfilt": [0, 59, 60, 61, 62, 63, 64, 65, 66, 67, 126, 129, 130], "2nd": [0, 1, 59, 62, 126, 130], "order": [0, 1, 24, 31, 36, 38, 43, 53, 59, 62, 76, 77, 81, 96, 118, 120, 126, 127, 130], "proport": [0, 1, 5, 59, 60, 62, 95, 102, 130], "plu": [0, 1, 59, 62, 130], "integr": [0, 1, 6, 59, 61, 62, 124, 130], "ppi": [0, 59, 62], "nco": [0, 1, 4, 8, 18, 19, 20, 62, 68, 69, 70, 71, 72, 73, 74, 75, 126, 129, 130], "numer": [0, 1, 18, 20, 68, 70, 124, 126, 130], "control": [0, 1, 18, 20, 68, 70, 126, 130], "oscil": [0, 1, 18, 20, 68, 70, 126, 130], "awgn": [0, 86, 87, 127, 129], "x": [0, 1, 18, 21, 24, 27, 36, 39, 43, 48, 59, 64, 68, 73, 76, 78, 79, 83, 84, 85, 86, 88, 90, 92, 93, 94, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 119, 121, 125, 126, 127, 131], "arraylik": [0, 18, 21, 24, 25, 27, 36, 39, 40, 43, 44, 45, 48, 59, 64, 68, 73, 76, 78, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 119, 121], "snr": [0, 86, 87], "none": [0, 24, 30, 33, 36, 40, 59, 67, 86, 87, 93, 100, 106, 109, 110, 113, 114, 121, 122], "add": [0, 86, 127, 131], "addit": [0, 86, 87, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117], "white": [0, 86, 87], "nois": [0, 1, 2, 3, 8, 14, 59, 62, 66, 86, 87, 113, 126], "signal": [0, 1, 9, 11, 14, 15, 18, 21, 24, 27, 36, 39, 43, 48, 59, 64, 68, 73, 75, 85, 86, 87, 92, 94, 95, 96, 99, 101, 102, 103, 104, 110, 113, 115, 119, 123, 124, 125, 126, 128], "iq_imbal": [0, 99, 129], "amplitud": [0, 96, 99, 122, 126], "appli": [0, 99, 116], "iq": [0, 99], "imbal": [0, 99], "complex": [0, 18, 21, 23, 76, 78, 79, 82, 86, 87, 99, 105, 122, 123, 124, 127], "average_pow": [0, 85, 101, 129], "averag": [0, 85, 86, 87, 101, 110], "power": [0, 85, 86, 87, 101, 102, 103, 110, 128], "crest_factor": [0, 92, 101, 129, 130], "crest": [0, 92], "factor": [0, 1, 8, 17, 59, 62, 63, 92, 126], "energi": [0, 87, 94, 118, 120, 129], "papr": [0, 101, 125, 129, 130], "peak": [0, 92, 101, 103, 104], "ratio": [0, 14, 86, 87, 101], "peak_pow": [0, 101, 103, 129], "peak_voltag": [0, 92, 104, 129], "voltag": [0, 104, 119], "rms_voltag": [0, 92, 119, 129], "mean": [0, 110, 119, 128], "rm": [0, 92, 119], "hexdump": [0, 98, 129, 130], "byte": [0, 98], "width": [0, 98], "16": [0, 98, 130], "str": [0, 98, 110, 113], "specifi": [0, 86, 87, 93, 98, 123, 124], "pack": [0, 98, 100, 129, 130], "bpe": [0, 100, 121], "binari": [0, 88, 89, 90, 91, 93, 100, 121], "arrai": [0, 88, 90, 93, 97, 100, 115, 121, 124, 125], "multipl": [0, 100, 121], "bit": [0, 87, 88, 89, 90, 91, 98, 100, 121, 130], "per": [0, 21, 73, 87, 96, 98, 100, 118, 120, 121, 125, 128], "element": [0, 98, 100, 121], "unpack": [0, 98, 121, 129, 130], "bec": [0, 88, 89, 93, 129], "p": [0, 83, 84, 88, 89, 90, 91, 93], "pass": [0, 86, 88, 90, 93, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 123, 124], "input": [0, 1, 9, 11, 14, 15, 18, 21, 24, 25, 27, 30, 33, 36, 37, 39, 40, 43, 44, 45, 48, 52, 56, 59, 64, 68, 73, 83, 86, 87, 88, 89, 90, 91, 93, 100, 109, 114, 121, 123, 124, 126], "sequenc": [0, 88, 90, 93], "through": [0, 88, 90, 93, 123, 124, 126], "erasur": [0, 88, 89, 93], "bsc": [0, 90, 91, 93, 129], "symmetr": [0, 90, 91, 93], "transit": [0, 90, 91, 93], "dmc": [0, 93, 129], "discret": [0, 1, 9, 11, 12, 13, 14, 15, 59, 93, 118, 120, 122, 126], "memoryless": [0, 93], "matrix": [0, 93], "awgn_capac": [0, 87, 129], "calcul": [0, 87, 89, 91, 95, 102], "capac": [0, 87, 89, 91], "bec_capac": [0, 89, 129], "bsc_capac": [0, 91, 129], "fspl": [0, 95, 129], "d": [0, 95, 102, 129], "f": [0, 9, 11, 24, 28, 29, 43, 49, 50, 95, 96, 102, 122, 123, 124, 125, 126, 127, 128], "free": [0, 95], "space": [0, 29, 50, 95], "path": [0, 95], "loss": [0, 95], "db": [0, 1, 12, 14, 86, 87, 95, 96, 99, 101, 102, 125, 127, 128], "parabolic_antenna": [0, 102, 129], "freq": [0, 102, 122, 126], "tupl": [0, 24, 28, 29, 43, 49, 50, 102], "gain": [0, 1, 4, 5, 6, 7, 8, 18, 19, 43, 44, 51, 59, 60, 61, 62, 68, 69, 70, 96, 102, 126], "g": [0, 102], "beamwidth": [0, 102], "theta": [0, 19, 68, 70, 72, 102, 112], "parabol": [0, 102], "reflector": [0, 102], "q": [0, 83, 84, 129], "comput": [0, 83, 84, 86, 95, 123, 124, 126, 128], "complementari": [0, 83, 84], "cumul": [0, 83, 84], "distribut": [0, 83, 84], "function": [0, 1, 10, 24, 43, 44, 59, 83, 84, 87, 96, 110, 113, 123, 124, 126, 128, 129, 130], "standard": [0, 83, 84], "normal": [0, 1, 3, 8, 59, 62, 66, 83, 84, 96, 113, 126, 128], "mathcal": [0, 83, 84, 86, 93], "0": [0, 8, 18, 19, 24, 28, 29, 43, 44, 49, 50, 62, 68, 70, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 99, 100, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131], "1": [0, 1, 8, 11, 15, 17, 18, 19, 28, 29, 43, 44, 49, 50, 59, 62, 63, 68, 70, 76, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131], "qinv": [0, 83, 84, 129], "invers": [0, 84], "use_styl": [0, 116], "": [0, 1, 9, 11, 12, 13, 15, 16, 24, 28, 29, 33, 43, 49, 50, 56, 76, 78, 79, 87, 99, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 122, 127, 129], "default": [0, 30, 33, 113, 116], "matplotlib": [0, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 123, 124, 125, 126, 127, 128, 129], "rcparam": [0, 116, 122, 126], "time_domain": [0, 86, 115, 125, 128, 129, 130], "sample_r": [0, 1, 8, 16, 28, 29, 49, 50, 106, 107, 108, 110, 111, 112, 113, 115, 122, 126, 128], "periodogram": [0, 110, 125, 129, 130], "estim": [0, 76, 78, 110, 113, 126], "spectral": [0, 110, 125, 128], "densiti": [0, 14, 110, 125, 128], "p_": [0, 85, 86, 93, 101, 103, 110], "xx": [0, 110], "us": [0, 18, 20, 25, 36, 37, 44, 45, 59, 65, 76, 78, 87, 89, 91, 98, 100, 106, 109, 110, 113, 114, 121, 123, 124, 128, 129, 131], "welch": [0, 110, 113], "method": [0, 110, 113, 123, 124], "spectrogram": [0, 113, 129, 130], "b": [0, 43, 45, 87, 96, 98, 106, 107, 108, 109, 111, 112, 114, 117, 128], "h": [0, 24, 25, 28, 29, 30, 43, 49, 50, 52, 59, 96, 106, 107, 109, 125, 126, 128], "omega": [0, 19, 68, 70, 71, 106, 107, 108, 111, 112, 126], "step": [0, 18, 21, 23, 24, 33, 43, 56, 68, 73, 75, 106, 114], "zero": [0, 40, 43, 44, 58, 59, 100, 106, 107, 108, 109, 111, 112, 114, 115, 117, 123, 125, 126, 128], "pole": [0, 43, 44, 54, 106, 107, 108, 109, 111, 112, 114, 117, 123], "frequency_respons": [0, 24, 28, 29, 43, 49, 50, 107, 123, 124, 126, 128, 129, 130], "group_delai": [0, 108, 123, 124, 129, 130], "group": [0, 108], "delai": [0, 18, 24, 26, 36, 59, 68, 108, 111, 126], "tau_g": [0, 108], "impulse_respons": [0, 24, 30, 43, 52, 96, 109, 118, 120, 123, 124, 128, 129, 130], "phase_delai": [0, 111, 129], "tau_": [0, 111], "phi": [0, 76, 77, 80, 99, 111], "phase_respons": [0, 112, 129], "step_respons": [0, 24, 33, 43, 56, 114, 123, 124, 126, 129, 130], "zeros_pol": [0, 117, 124, 129, 130], "kwarg": [0, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117], "loop": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 129, 130], "thi": [1, 21, 24, 43, 73, 76, 82, 86, 87, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 122, 124, 126, 128], "i": [1, 8, 17, 24, 30, 33, 34, 36, 41, 43, 52, 56, 57, 59, 62, 63, 66, 83, 84, 86, 87, 89, 91, 93, 95, 96, 98, 99, 100, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 129, 131], "meant": 1, "analysi": [1, 8, 126, 130], "onli": [1, 24, 32, 36, 40, 43, 55, 86, 126], "block": [1, 18, 59, 68], "diagram": [1, 18, 59, 68], "bb": [1, 126], "ped": [1, 7, 8, 62, 126], "lf": [1, 126], "lo": [1, 126], "e": [1, 18, 85, 88, 89, 94, 123, 124, 126, 127], "j": [1, 18, 43, 86, 93, 99, 123, 124, 126], "local": [1, 126], "baseband": [1, 125, 126], "phase": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 99, 111, 112, 129], "error": [1, 7, 8, 14, 59, 62, 91, 126], "detector": [1, 7, 8, 62, 126], "filter": [1, 5, 6, 8, 10, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 96, 106, 107, 108, 109, 111, 112, 114, 115, 117, 118, 120, 125, 128, 129, 130], "The": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 126, 128, 129, 131], "transfer": [1, 10, 24, 43, 44, 59, 96, 123, 124, 126], "h_": [1, 126], "z": [1, 18, 24, 43, 59, 68, 123, 124, 126], "k_1": [1, 5, 59, 60, 126], "k_2": [1, 6, 59, 61, 126], "frac": [1, 9, 11, 14, 15, 43, 59, 85, 86, 87, 92, 95, 96, 99, 101, 102, 119, 126], "k_0": [1, 4, 8, 19, 62, 68, 69, 70, 126], "k_p": [1, 7, 8, 62, 126], "refer": [1, 9, 11, 12, 13, 14, 15, 36, 59, 92, 96, 101, 118, 120, 124, 128], "michael": [1, 9, 11, 12, 13, 14, 15, 59, 118, 120], "rice": [1, 9, 11, 12, 13, 14, 15, 59, 118, 120], "commun": [1, 9, 11, 12, 13, 14, 15, 59, 118, 120, 126, 129], "time": [1, 8, 9, 11, 12, 13, 14, 15, 24, 43, 59, 62, 85, 86, 92, 93, 94, 96, 99, 101, 103, 104, 106, 110, 113, 115, 118, 119, 120, 122, 123, 124, 128], "approach": [1, 9, 11, 12, 13, 14, 15, 59, 87, 89, 91, 118, 120, 126], "appendix": [1, 59, 118, 120], "c": [1, 9, 11, 12, 13, 14, 15, 59, 76, 82, 87, 89, 91, 95, 102, 126], "lock": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 129], "exampl": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 102, 106, 107, 108, 109, 111, 112, 114, 115, 116, 117, 118, 120, 121, 126], "see": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 96, 118, 120, 129], "noise_bandwidth": [1, 8, 59, 62, 66], "damping_factor": [1, 8, 59, 62, 63], "creat": [1, 8, 18, 19, 24, 25, 36, 37, 43, 44, 45, 59, 62, 68, 70, 76, 77, 115, 122, 125, 126, 127, 128], "object": [1, 8, 76, 77, 124, 126, 127], "frequency_lock_tim": [1, 9], "freq_offset": [1, 9, 11], "frequenc": [1, 9, 11, 13, 24, 28, 29, 43, 49, 50, 59, 95, 102, 106, 107, 108, 110, 111, 112, 113, 128], "lock_tim": [1, 11, 126], "phase_error_vari": [1, 14], "cn0": [1, 14], "varianc": [1, 14, 86], "steadi": [1, 14], "state": [1, 14, 24, 32, 34, 36, 40, 41, 43, 55, 57], "phase_lock_tim": [1, 15], "bn": [1, 2], "bandwidth": [1, 2, 3, 8, 12, 59, 62, 66, 87, 96, 118, 120, 126, 128], "b_n": [1, 2, 3, 8, 9, 11, 14, 15, 59, 62, 66], "hz": [1, 2, 8, 9, 11, 14, 28, 29, 49, 50, 59, 62, 66, 87, 95, 96, 102, 122], "bnt": [1, 3, 126], "t": [1, 3, 8, 59, 62, 66, 96, 98, 122], "repres": [1, 10, 88, 89], "k0": [1, 4, 8, 18, 19, 62, 68, 69, 70], "k1": [1, 5, 59, 60, 126], "k2": [1, 6, 59, 61, 126], "kp": [1, 7, 8, 62], "omega_3db": [1, 12], "3": [1, 9, 11, 12, 15, 87, 88, 90, 93, 95, 96, 97, 98, 99, 100, 102, 106, 107, 108, 109, 111, 112, 114, 115, 117, 121, 124, 126, 128, 129, 130], "omega_": [1, 12], "textrm": [1, 12], "radian": [1, 12, 13, 14, 18, 19, 76, 77, 80, 126], "omega_n": [1, 13, 126], "natur": [1, 13], "sampl": [1, 8, 16, 18, 19, 21, 23, 24, 26, 28, 29, 30, 33, 36, 40, 49, 50, 52, 56, 59, 62, 66, 68, 70, 71, 73, 75, 96, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 120, 122, 125, 126, 128], "rate": [1, 8, 16, 28, 29, 36, 39, 49, 50, 106, 107, 108, 110, 111, 112, 113, 115], "f_": [1, 8, 16, 28, 29, 49, 50, 96, 106, 107, 108, 110, 111, 112, 113, 115, 122, 123, 124, 126, 128], "zeta": [1, 8, 17, 59, 62, 63], "damp": [1, 8, 17, 59, 62, 63, 126], "properti": [2, 3, 4, 5, 6, 7, 10, 12, 13, 16, 17, 20, 26, 31, 34, 35, 38, 41, 42, 46, 47, 51, 53, 54, 57, 58, 60, 61, 63, 65, 66, 69, 71, 72, 80, 81, 82], "paramet": [8, 9, 11, 14, 19, 21, 23, 25, 27, 28, 29, 30, 33, 37, 39, 40, 44, 45, 48, 49, 50, 52, 56, 62, 64, 70, 73, 75, 77, 78, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121], "where": [8, 59, 62, 66, 86, 87, 93, 96, 123, 124, 129], "period": [8, 59, 62, 66], "second": [8, 9, 11, 15, 59, 62, 66, 96], "critic": [8, 17, 59, 62, 63, 126], "underdamp": [8, 17, 59, 62, 63], "overdamp": [8, 17, 59, 62, 63], "ted": [8, 62], "t_": [9, 11, 15, 39, 96, 128], "fl": [9, 11], "4": [9, 11, 29, 50, 86, 87, 89, 91, 93, 95, 96, 97, 98, 99, 100, 102, 106, 107, 108, 109, 111, 112, 114, 115, 116, 117, 118, 120, 121, 122, 124, 127, 130], "delta": [9, 11, 24, 30, 43, 52, 109, 123, 124], "offset": [9, 11, 18, 19, 68, 70, 72, 76, 77, 80, 99, 126], "take": [9, 11, 15], "onto": [9, 11, 15], "equat": [9, 11, 12, 13, 14, 15, 43], "39": 9, "pl": [11, 15], "38": 11, "34": 12, "33": 13, "sigma_": 14, "theta_": 14, "n_0": [14, 87, 127], "carrier": 14, "43": 14, "40": 15, "less": 17, "than": [17, 99], "greater": 17, "note": [18, 24, 43, 59, 68, 86, 87, 89, 91, 96, 99, 102, 113], "increment": [18, 19, 21, 68, 70, 71, 73, 126], "v": [18, 68], "y": [18, 21, 23, 24, 27, 39, 43, 48, 59, 64, 68, 73, 75, 86, 88, 90, 93, 99, 113, 115, 126], "output": [18, 21, 23, 24, 30, 33, 43, 44, 45, 52, 56, 59, 64, 68, 73, 75, 86, 87, 88, 89, 90, 91, 93, 100, 109, 114, 121, 122, 123, 124, 126], "exponenti": [18, 21, 23, 122, 123, 124], "constant": [18, 19, 59, 68, 70, 71, 124, 126], "accumul": [18, 19, 68, 70, 71, 126], "absolut": [18, 19, 68, 70, 72, 87], "unit": [18, 24, 33, 43, 56, 59, 68, 70, 71, 72, 85, 86, 87, 94, 103, 104, 114, 118, 119, 120, 123, 124, 126], "adder": [18, 59, 68, 126], "process": [18, 21, 68, 73, 124, 126], "variabl": [18, 21, 68, 73, 98, 126], "reset": [18, 22, 24, 32, 36, 40, 43, 55, 59, 67, 68, 74], "forward": [18, 23, 68, 75], "vari": [21, 73], "number": [23, 28, 29, 30, 33, 49, 50, 52, 56, 75, 86, 96, 98, 100, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 120, 121], "wrapper": [24, 43], "scipi": [24, 27, 43, 110, 113, 128, 129], "convolv": [24, 27, 115, 125], "It": [24, 43, 59, 86], "support": [24, 43], "one": [24, 43, 96, 98, 106, 107, 108, 110, 111, 112, 113, 123, 124, 125, 128], "stream": [24, 25, 32, 34, 36, 37, 40, 41, 43, 44, 45, 55, 57], "its": [24, 43, 44, 123, 124, 128], "feedforward": [24, 25, 35, 43, 45, 47, 106, 107, 108, 109, 111, 112, 114, 117, 123, 124], "coeffici": [24, 25, 43, 45, 106, 107, 108, 109, 111, 112, 114, 117, 123, 124], "h_i": [24, 25, 35, 123], "sum_": [24, 43, 85, 86, 87, 94, 119], "sum": [24, 43, 128], "limits_": [24, 43], "bool": [24, 25, 34, 36, 37, 41, 43, 44, 45, 57, 105, 112], "fals": [24, 25, 36, 37, 43, 44, 45, 88, 90, 93, 105, 124, 128], "frequency_response_log": [24, 29, 43, 50], "logarithm": [24, 29, 43, 50, 106, 107, 108, 110, 111, 112, 123, 124], "axi": [24, 29, 43, 50, 106, 107, 108, 110, 111, 112, 113, 115, 122], "when": [24, 30, 33, 43, 52, 56, 87, 88, 89, 90, 91, 106, 107, 108, 109, 111, 112, 114, 122, 123, 124], "mode": [24, 25, 27, 32, 34, 36, 37, 40, 41, 43, 44, 45, 55, 57, 125], "u": [24, 33, 43, 56, 114, 123, 124], "indic": [24, 25, 34, 36, 37, 41, 43, 44, 45, 57, 99, 112], "whether": [24, 25, 34, 36, 37, 41, 43, 44, 45, 57, 112], "tap": [24, 35, 36, 42, 43, 46, 47, 123, 124], "In": [25, 34, 37, 41, 44, 45, 57, 83, 84, 86, 87, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 102, 106, 107, 108, 109, 111, 112, 114, 115, 116, 117, 118, 120, 121, 122, 127], "previou": [25, 37, 40, 44, 45], "ar": [25, 29, 37, 44, 45, 50, 87, 88, 89, 90, 91, 100, 106, 107, 108, 110, 111, 112, 113, 116, 122, 124, 126, 128, 129, 131], "preserv": [25, 34, 37, 41, 44, 45, 57], "between": [25, 34, 37, 41, 44, 45, 57, 95, 110, 113, 126], "call": [25, 34, 37, 41, 44, 45, 57], "liter": [27, 107, 108, 111, 112], "full": 27, "valid": [27, 125], "same": [27, 123], "convolut": 27, "detail": 27, "1024": [28, 29, 49, 50, 106, 107, 108, 111, 112, 125, 128], "from": [28, 29, 43, 44, 49, 50, 76, 82, 113, 123, 124, 126, 129], "plot": [28, 29, 30, 33, 49, 50, 52, 56, 86, 87, 89, 91, 96, 99, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130], "decad": [29, 50, 106, 107, 108, 111, 112, 123, 126], "resampl": [36, 37, 38, 39, 40, 41, 42, 129, 130], "http": [36, 92, 96, 101], "wirelesspi": 36, "com": [36, 96], "fraction": [36, 40, 96, 122], "structur": 36, "new": [36, 37, 76, 77], "given": [36, 39, 123, 124], "r": [36, 39, 87, 96, 118, 120, 124, 126, 128], "index": [36, 40], "vector": [40, 110, 113], "should": 40, "equal": 40, "three": [40, 122, 128], "If": [40, 86, 87, 93, 100, 105, 106, 109, 110, 113, 114, 115, 121, 129], "lfilter": 43, "b_i": [43, 45, 47, 106, 107, 108, 109, 111, 112, 114, 117, 124], "feedback": [43, 45, 46, 106, 107, 108, 109, 111, 112, 114, 117, 124], "a_j": [43, 45, 46, 106, 107, 108, 109, 111, 112, 114, 117, 124], "These": [43, 116, 126], "differ": [43, 128], "a_0": 43, "left": [43, 85, 86, 87, 94, 95, 96, 99, 102, 103, 104, 119], "m": [43, 76, 77, 78, 79, 81, 82, 93], "right": [43, 85, 86, 87, 94, 95, 96, 99, 102, 103, 104, 119], "classmethod": [43, 44], "zerospol": [43, 44, 106, 107, 108, 109, 111, 112, 114, 117, 124], "self": [43, 44], "100": [43, 52, 56, 86, 87, 89, 91, 106, 109, 114, 115, 122], "a_tap": [43, 46, 106, 107, 108, 109, 111, 112, 114, 117, 124, 126], "b_tap": [43, 47, 106, 107, 108, 109, 111, 112, 114, 117, 124, 126], "can": [59, 86, 96, 100, 110, 113, 123, 124, 131], "track": 59, "cannot": 59, "howev": [59, 89, 91, 122], "chirp": 59, "ramp": 59, "underli": [59, 65], "modul": [76, 77, 79, 81, 99, 127, 129], "x_hat": [76, 78, 105, 127], "symbol": [76, 78, 79, 82, 87, 96, 105, 118, 120, 125, 127, 128], "hat": [76, 78, 105], "k": [76, 78, 79, 105, 125, 128], "decim": [76, 78, 79, 82, 127], "maximum": [76, 78], "likelihood": [76, 78], "symbol_map": [76, 82, 115, 125], "map": [76, 82], "dot": [76, 82], "mathbb": [76, 82, 87], "must": [77, 86, 96, 118, 120], "least": 77, "real": [83, 84, 86, 122, 123, 124, 125, 126], "valu": [83, 84, 96, 99, 113, 124], "probabl": [83, 84, 88, 89, 90, 91, 93, 129], "exceed": [83, 84], "out": [83, 84, 88, 90, 93, 95, 97, 100, 102, 108, 116, 121], "15865525393145707": [83, 84], "158655": [83, 84], "0000010494310452": [83, 84], "measur": [85, 86, 92, 94, 101, 103, 104, 119, 126, 129, 130], "domain": [85, 86, 92, 94, 99, 101, 103, 104, 106, 110, 113, 115, 119], "text": [85, 86, 87, 89, 91, 92, 95, 101, 103, 104, 119], "avg": [85, 86, 101], "seed": 86, "which": [86, 87, 99, 102, 122, 126, 128], "ad": [86, 129, 130], "desir": [86, 127], "explicitli": 86, "assum": [86, 93, 100, 121], "contain": [86, 98], "known": 86, "linear": 86, "random": [86, 88, 90, 93, 99, 115, 125, 127], "numpi": [86, 121, 122, 123, 124, 125, 126, 127, 128, 129], "default_rng": 86, "noisi": 86, "w": [86, 122, 123, 124, 125, 126, 127, 128], "sigma": [86, 87], "For": [86, 106, 107, 108, 109, 111, 112, 114, 117, 123], "sim": 86, "cn": 86, "np": [86, 87, 88, 89, 90, 91, 93, 99, 106, 107, 108, 109, 111, 112, 114, 115, 117, 122, 123, 124, 125, 126, 127, 128], "sin": 86, "pi": [86, 95, 96, 99, 102, 106, 107, 108, 109, 111, 112, 114, 115, 117, 122, 123, 124, 125, 126], "5": [86, 88, 90, 91, 93, 96, 97, 98, 99, 102, 106, 107, 108, 109, 111, 112, 114, 115, 117, 118, 120, 122, 123, 124, 125, 126, 127, 128, 130], "arang": [86, 122, 125, 126], "10": [86, 87, 93, 95, 96, 97, 98, 99, 101, 102, 106, 107, 108, 109, 111, 112, 114, 115, 117, 118, 120, 122, 123, 124, 125, 126, 127, 128], "plt": [86, 87, 89, 91, 96, 99, 106, 107, 108, 109, 111, 112, 114, 115, 117, 118, 120, 122, 123, 124, 125, 126, 127, 128], "figur": [86, 87, 89, 91, 96, 99, 106, 107, 108, 109, 111, 112, 114, 115, 116, 117, 118, 120, 122, 123, 124, 125, 126, 127, 128], "figsiz": [86, 87, 89, 91, 96, 99, 106, 107, 108, 109, 111, 112, 114, 115, 116, 117, 118, 120, 122, 123, 124, 125, 126, 127, 128], "8": [86, 87, 89, 91, 93, 96, 97, 98, 102, 106, 107, 108, 109, 111, 112, 114, 115, 116, 117, 118, 120, 123, 124, 125, 126, 128], "label": [86, 96, 99, 113, 115, 118, 120, 122, 125, 126, 128], "titl": [86, 87, 89, 91, 99, 115, 122, 125, 126, 128], "tight_layout": [86, 87, 89, 91, 115, 125, 126, 127, 128], "channel": [87, 88, 89, 90, 91, 93, 129], "2d": 87, "wa": 87, "x_i": [87, 88, 89, 90, 91, 93, 99], "y_i": [87, 88, 89, 90, 91, 93], "log_2": 87, "equival": [87, 122], "monoton": 87, "decreas": 87, "limit": 87, "infti": 87, "esn0": [87, 127], "linspac": [87, 89, 91, 124], "20": [87, 88, 90, 93, 98, 99, 125, 128], "xlabel": [87, 89, 91, 122, 126, 128], "psd": 87, "e_": [87, 127], "ylabel": [87, 89, 91, 122, 126, 128], "grid": [87, 89, 91, 116, 122, 126, 128], "true": [87, 88, 89, 90, 91, 93, 105, 112, 116, 127], "At": 87, "occur": 87, "e_b": 87, "relat": [87, 96], "view": 87, "59": 87, "shannon": 87, "ebn0": 87, "log10": [87, 128], "25": [88, 90, 93, 122, 126, 128], "roughli": [88, 90, 122], "eras": 88, "randint": [88, 90, 93, 99, 115, 125, 127], "flip": 90, "h_b": 91, "cf": 92, "v_": [92, 104, 119], "en": [92, 101], "wikipedia": [92, 101], "org": [92, 101], "wiki": [92, 101], "pr": 93, "y_j": 93, "alphabet": 93, "size": [93, 122, 125, 126, 128], "ldot": 93, "6": [93, 95, 97, 98, 102, 106, 107, 108, 109, 111, 112, 114, 115, 117, 123, 124, 126, 127], "7": [93, 97, 98, 115], "9": [93, 97, 98, 118, 120, 125, 127, 128, 130], "log_": [95, 101], "distanc": 95, "meter": [95, 102], "transmitt": 95, "receiv": 95, "km": 95, "link": [95, 129], "ghz": [95, 102], "1e3": 95, "1e9": [95, 102], "92": 95, "44778322188337": 95, "so": [95, 96, 129], "doubl": [95, 102], "result": [95, 102], "increas": [95, 102, 124], "2e3": 95, "98": 95, "468383135163": 95, "also": [95, 96, 129], "2e9": 95, "puls": [96, 115, 118, 120, 129, 130], "shape": [96, 115, 118, 120, 129, 130], "product": [96, 128], "sym": [96, 128], "side": [96, 106, 107, 108, 110, 111, 112, 113, 123, 124, 125, 128], "thought": [96, 131], "smaller": [96, 128], "produc": [96, 128], "wider": 96, "even": [96, 118, 120], "nomin": 96, "passband": [96, 125], "ha": [96, 102, 126, 128], "exp": [96, 99, 106, 107, 108, 109, 111, 112, 114, 115, 117, 122, 124, 125, 126], "sqrt": [96, 119, 125, 126, 128], "ln": 96, "www": 96, "mathwork": 96, "help": 96, "ref": 96, "gaussdesign": 96, "html": 96, "onlinelibrari": 96, "wilei": 96, "doi": 96, "pdf": 96, "1002": 96, "9780470041956": 96, "app2": 96, "h_0p1": [96, 118, 120], "h_0p2": 96, "h_0p3": 96, "12": [97, 123, 127], "13": 97, "15": 97, "14": 97, "11": 97, "data": [98, 100, 121, 129], "displai": [98, 106, 107, 108, 110, 111, 112, 113], "each": [98, 110, 113], "consid": 98, "convert": 98, "line": 98, "string": [98, 110, 113], "print": [98, 122, 123, 124, 126], "quick": 98, "brown": 98, "fox": 98, "jump": 98, "over": 98, "lazi": 98, "dog": 98, "00000000": 98, "54": 98, "68": 98, "65": 98, "71": 98, "75": [98, 126, 127], "69": 98, "63": 98, "6b": 98, "62": 98, "72": 98, "6f": 98, "77": 98, "6e": 98, "00000010": 98, "66": 98, "78": 98, "6a": 98, "6d": 98, "70": [98, 128], "73": 98, "76": 98, "74": 98, "00000020": 98, "6c": 98, "61": 98, "7a": 98, "79": 98, "64": [98, 124], "67": 98, "he": 98, "01": [98, 124, 126], "02": [98, 124, 126], "03": [98, 124], "04": [98, 124], "00000004": 98, "05": [98, 122, 124, 126], "06": 98, "07": 98, "08": 98, "00000008": 98, "09": 98, "0a": 98, "posit": 99, "compon": 99, "larger": 99, "quadratur": 99, "degre": [99, 102], "lead": 99, "follow": [99, 116, 126], "g_i": 99, "180": 99, "g_q": 99, "x_q": 99, "horizont": 99, "stretch": 99, "constel": [99, 105], "while": [99, 128], "neg": 99, "vertic": 99, "45": 99, "1_000": 99, "y1": 99, "y2": 99, "subplot": [99, 126, 127], "befor": [99, 131], "after": 99, "legend": [99, 122, 125, 126, 128], "northwest": 99, "northeast": 99, "deg": 99, "dtype": [100, 115, 121, 126], "dtypelik": [100, 121], "have": [100, 121], "most": [100, 121], "signific": [100, 121], "first": [100, 121], "enough": 100, "fill": 100, "last": 100, "remain": 100, "type": [100, 107, 108, 110, 111, 112, 121, 130], "smallest": 100, "unsign": 100, "integ": 100, "hold": 100, "uint8": [100, 121], "diamet": 102, "effici": 102, "55": 102, "le": [102, 118, 120], "eta": 102, "dbi": 102, "half": 102, "arcsin": 102, "83": 102, "dish": 102, "17": 102, "21": 102, "810210290266568": 102, "437435887991374": 102, "23": 102, "sinc": 102, "antenna": 102, "we": [102, 129], "observ": 102, "830810203546193": 102, "529544741425365": 102, "max": [103, 104], "heatmap": [105, 127], "instead": 105, "scatter": 105, "keyword": [105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 123, 124], "argument": [105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 123, 124], "pyplot": [105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 123, 124, 125, 126, 127, 128], "hist2d": 105, "n_time": [106, 124], "n_freq": 106, "x_axi": [106, 107, 108, 110, 111, 112, 113, 123, 124, 125, 126], "two": [106, 107, 108, 110, 111, 112, 113, 122, 123, 124], "log": [106, 107, 108, 110, 111, 112, 123, 124, 126], "set": [106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 124], "n_t": 106, "n_f": 106, "scale": [106, 107, 108, 110, 111, 112, 113, 123, 124], "option": [106, 107, 108, 110, 111, 112, 113], "spectrum": [106, 107, 108, 110, 111, 112, 113], "h_srrc": [106, 107, 108, 109, 111, 112, 114, 115, 117], "1j": [106, 107, 108, 109, 111, 112, 114, 115, 117, 122, 124, 125, 126], "conj": [106, 107, 108, 109, 111, 112, 114, 117, 124, 126], "30": [106, 109, 114, 124], "ylim": [108, 123, 126, 128], "48": 108, "52": 108, "window": [110, 113], "hann": [110, 113], "overlap": [110, 113, 125], "fft": [110, 113], "median": 110, "segment": [110, 113], "256": [110, 113, 125], "point": [110, 113], "unwrap": [112, 126], "pcolormesh": 113, "By": 113, "color": [113, 122, 125, 126, 128], "bar": 113, "rang": [113, 126], "10th": 113, "100th": 113, "percentil": 113, "provid": [113, 129], "more": 113, "dynam": 113, "activ": 113, "chang": [113, 131], "vmin": 113, "vmax": 113, "bpsk": [115, 125], "1000": 115, "10e3": 115, "qpsk": 115, "complex64": [115, 126], "style": 116, "mai": [116, 124], "revert": 116, "rcdefault": 116, "_rc_param": 116, "rc_param": 116, "ax": [116, 122, 126], "autolayout": 116, "max_open_warn": 116, "titleweight": 116, "bold": 116, "linestyl": [116, 122, 126, 128], "excess": [118, 120, 128], "h_0p5": [118, 120], "h_0p9": [118, 120], "import": [122, 123, 124, 125, 126, 127, 128, 129], "config": [122, 123, 124, 125, 126, 127, 128], "inlinebackend": [122, 123, 124, 125, 126, 127, 128], "print_figure_kwarg": [122, 123, 124, 125, 126, 127, 128], "facecolor": [122, 123, 124, 125, 126, 127, 128], "widget": [122, 123, 124, 125, 126, 127, 128], "prop_cycl": [122, 126], "by_kei": [122, 126], "continu": 122, "tx": 122, "decai": [122, 124], "marker": [122, 123, 124], "o": 122, "fillstyl": 122, "imag": 122, "origin": 122, "both": [122, 126], "show": [122, 123, 124, 125, 126, 127, 128], "now": 122, "accomplish": 122, "librari": [122, 127, 129, 131], "def": [122, 127], "resample_sign": 122, "new_sample_r": 122, "ty": 122, "notic": [122, 128], "everi": 122, "200": 122, "four": 122, "400": 122, "other": [122, 131], "appear": 122, "50": [122, 125], "fourth": 122, "often": 122, "do": 122, "align": 122, "315": 122, "32": 122, "user": [123, 124], "below": [123, 124], "00095881": 123, "00175008": 123, "00423912": 123, "00588237": 123, "00615087": 123, "00474585": 123, "00170436": 123, "0025481": 123, "00721629": 123, "01123216": 123, "01342329": 123, "01273174": 123, "00845039": 123, "00043678": 123, "01073645": 123, "02372925": 123, "03650167": 123, "04650553": 123, "05098414": 123, "04734541": 123, "03355823": 123, "00851466": 123, "0276993": 123, "07367186": 123, "12670168": 123, "18306847": 123, "2381038": 123, "28726435": 123, "32607284": 123, "3509308": 123, "35948882": 123, "conveni": [123, 124], "evalu": [123, 124], "envelop": [123, 124], "easili": [123, 124], "here": [123, 124], "altern": 124, "conjug": 124, "0x000002214b040a88": 124, "47820725": 124, "00000000e": 124, "00": 124, "78207252e": 124, "58172329e": 124, "10862468e": 124, "86109590e": 124, "21565653e": 124, "01140214e": 124, "57286400e": 124, "67772160e": 124, "47338728e": 124, "10422993e": 124, "89312837e": 124, "12240078e": 124, "03953322e": 124, "69685122e": 124, "63882791e": 124, "81474977e": 124, "47193366e": 124, "85259041e": 124, "15647504e": 124, "23851924e": 124, "42176895e": 124, "84684395e": 124, "42721858e": 124, "72236648e": 124, "14721649e": 124, "10813095e": 124, "94024315e": 124, "78877688e": 124, "74077567e": 124, "87820725": 124, "53637958": 124, "94724205": 124, "13335164": 124, "1455082": 124, "04436799": 124, "88708159": 124, "71930943": 124, "5719707": 124, "46154771": 124, "39261642": 124, "36139242": 124, "35935288": 124, "3763214": 124, "40270968": 124, "43085717": 124, "45557651": 124, "47410241": 124, "48566716": 124, "49090568": 124, "49124786": 124, "48840102": 124, "4839738": 124, "47925143": 124, "47510421": 124, "47199608": 124, "47005584": 124, "46917696": 124, "46911955": 124, "denomin": 124, "73910363": 124, "30614675j": 124, "plane": 124, "endpoint": 124, "concaten": 124, "0x000002214dc574c8": 124, "lyon": 124, "understand": 124, "3rd": 124, "edit": 124, "section": [124, 126], "insid": 124, "circl": 124, "sinusoid": 124, "outsid": 124, "unstabl": 124, "n_symbol": 125, "500": [125, 126], "x_bb_rect": 125, "papr_bb_rect": 125, "x_pb_rect": 125, "papr_pb_rect": 125, "x_bb_0p9": 125, "papr_bb_0p9": 125, "x_bb_0p5": 125, "papr_bb_0p5": 125, "x_bb_0p1": 125, "papr_bb_0p1": 125, "2f": 125, "rf": [125, 126], "xlim": [125, 126, 128], "x_pb_0p9": 125, "papr_pb_0p9": 125, "x_pb_0p5": 125, "papr_pb_0p5": 125, "x_pb_0p1": 125, "papr_pb_0p1": 125, "configur": 126, "0x00000290f1ce3488": 126, "theta_0": 126, "phase_error": 126, "freq_estim": 126, "suptitl": [126, 127], "ones": 126, "angl": 126, "part": 126, "system": [126, 129], "avail": [126, 127], "001": 126, "005": 126, "b_nt": 126, "0005": 126, "00001": 126, "0125": 126, "015": 126, "0175": 126, "t_lock": 126, "analyze_psk": 127, "100_000": 127, "achiev": [127, 128], "n0": 127, "bin": 127, "18": 127, "rectangular": 128, "rect": 128, "rc_0p1": 128, "rc_0p5": 128, "rc_0p9": 128, "nyquist": 128, "adjac": 128, "specif": 128, "pm": 128, "roll": 128, "60": 128, "total": 128, "nearli": 128, "compar": 128, "null": 128, "small": 128, "lobe": 128, "much": 128, "higher": 128, "h_rect": 128, "freqz": 128, "worn": 128, "whole": 128, "h_rc_0p1": 128, "h_rc_0p5": 128, "h_rc_0p9": 128, "rel": 128, "main": 128, "p_rect": 128, "cumsum": 128, "ab": 128, "p_rc_0p1": 128, "p_rc_0p5": 128, "p_rc_0p9": 128, "One": 128, "within": 128, "variou": 128, "srrc_0p1": 128, "srrc_0p5": 128, "srrc_0p9": 128, "therefor": 128, "similar": 128, "significantli": 128, "due": 128, "being": 128, "h_srrc_0p1": 128, "h_srrc_0p5": 128, "h_srrc_0p9": 128, "p_srrc_0p1": 128, "p_srrc_0p5": 128, "p_srrc_0p9": 128, "gauss_0p1": 128, "gauss_0p2": 128, "gauss_0p3": 128, "python": 129, "packag": 129, "softwar": 129, "radio": 129, "goal": 129, "tool": 129, "design": 129, "build": 129, "analyz": 129, "reli": 129, "interoper": 129, "veri": 129, "possibl": 129, "numba": 129, "acceler": 129, "computation": 129, "intens": 129, "addition": 129, "aim": 129, "replic": 129, "relev": 129, "matlab": 129, "dsp": 129, "toolbox": 129, "progress": 129, "someth": 129, "you": 129, "like": 129, "includ": 129, "pleas": 129, "open": 129, "issu": 129, "github": 129, "impair": 129, "manipul": 129, "model": 129, "budget": 129, "util": 129, "releas": 130, "juli": 130, "2023": 130, "helper": 130, "improv": 130, "annot": 130, "matt": 130, "hostett": 130, "mhostett": 130, "semant": 131, "major": 131, "minor": 131, "patch": 131, "introduc": 131, "api": 131, "featur": 131, "backward": 131, "compat": 131, "make": 131, "bug": 131, "fix": 131, "There": 131, "guarante": 131, "them": 131, "thei": 131}, "objects": {"": [[0, 0, 0, 1, "sdr", ""]], "sdr": [[1, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [18, 1, 1, "", "DDS", "Implements a direct digital synthesizer (DDS)."], [24, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [36, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [43, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [59, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [68, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [76, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [83, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [84, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [85, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [86, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [87, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [88, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [89, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [90, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [91, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [92, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [93, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [94, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [95, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [96, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [97, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [98, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [99, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [100, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [101, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [102, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [103, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [104, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [118, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [119, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [120, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [121, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."]], "sdr.ClosedLoopPLL": [[2, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [3, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [4, 2, 1, "", "K0", "The NCO gain $K_0$."], [5, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [6, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [7, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [8, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [9, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [10, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [11, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [12, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [13, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [14, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [15, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [16, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [17, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[8, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [8, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [8, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [8, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [8, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[9, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[11, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[14, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.DDS": [[19, 3, 1, "", "__init__", "Creates a direct digital synthesizer (DDS)."], [20, 2, 1, "", "nco", "The numerically-controlled oscillator (NCO) used by the DDS."], [21, 3, 1, "", "process", "Steps the DDS with the variable phase increment signal $x[n]$."], [22, 3, 1, "", "reset", "Resets the DDS."], [23, 3, 1, "", "step", "Steps the DDS forward by $N$ samples."]], "sdr.DDS.__init__": [[19, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [19, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [19, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.DDS.process": [[21, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the DDS."]], "sdr.DDS.step": [[23, 4, 2, "p-N", "N", "The number of samples $N$ to step the DDS forward."]], "sdr.FIR": [[25, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [26, 2, 1, "", "delay", "The delay of the FIR filter in samples."], [27, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the FIR filter."], [28, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the FIR filter."], [29, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the FIR filter on a logarithmic frequency axis."], [30, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [31, 2, 1, "", "order", "The order of the FIR filter, $N$."], [32, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [33, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [34, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [35, 2, 1, "", "taps", "The feedforward taps $h_i$."]], "sdr.FIR.__init__": [[25, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$."], [25, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to filter()."]], "sdr.FIR.filter": [[27, 4, 2, "p-mode", "mode", "The convolution mode. See scipy.signal.convolve() for details."], [27, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.FIR.frequency_response": [[28, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [28, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.frequency_response_log": [[29, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [29, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [29, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[30, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.step_response": [[33, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FarrowResampler": [[37, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [38, 2, 1, "", "order", "The order of the filter."], [39, 3, 1, "", "resample", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [40, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [41, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [42, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__init__": [[37, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to resample()."]], "sdr.FarrowResampler.resample": [[39, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [39, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.reset": [[40, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[44, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [45, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [46, 2, 1, "", "a_taps", "The feedback taps $a_j$."], [47, 2, 1, "", "b_taps", "The feedforward taps $b_i$."], [48, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the IIR filter."], [49, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the IIR filter."], [50, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the IIR filter on a logarithmic frequency axis."], [51, 2, 1, "", "gain", "The gain of the IIR filter."], [52, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [53, 2, 1, "", "order", "The order of the IIR filter, $N$."], [54, 2, 1, "", "poles", "The poles of the IIR filter."], [55, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [56, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [57, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [58, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[44, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [44, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [44, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."], [44, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__init__": [[45, 4, 2, "p-a", "a", "The feedback coefficients $a_j$."], [45, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [45, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."]], "sdr.IIR.filter": [[48, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.IIR.frequency_response": [[49, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [49, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[50, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [50, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [50, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[52, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[56, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.LoopFilter": [[60, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [61, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [62, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [63, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [64, 3, 1, "", "filter", "Filters the input signal $x[n]$."], [65, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [66, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [67, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__init__": [[62, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [62, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [62, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [62, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.LoopFilter.filter": [[64, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.NCO": [[69, 2, 1, "", "K0", "The NCO gain $K_0$."], [70, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [71, 2, 1, "", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [72, 2, 1, "", "offset", "The absolute offset $theta$ of the NCO in units."], [73, 3, 1, "", "process", "Steps the NCO with the variable-increment signal $x[n]$."], [74, 3, 1, "", "reset", "Resets the NCO."], [75, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__init__": [[70, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [70, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [70, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in units."]], "sdr.NCO.process": [[73, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the NCO."]], "sdr.NCO.step": [[75, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.PSK": [[77, 3, 1, "", "__init__", "Creates a new PSK object."], [78, 3, 1, "", "demodulate", "Demodulates the complex symbols $hat{x}[k]$ to decimal symbols $hat{s}[k]$ using maximum-likelihood estimation."], [79, 3, 1, "", "modulate", "Modulates to decimal symbols $s[k]$ to complex symbols $x[k]$."], [80, 2, 1, "", "offset", "The phase offset $phi$ in radians."], [81, 2, 1, "", "order", "The modulation order $M$."], [82, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} -> mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[77, 4, 2, "p-offset", "offset", "The phase offset $phi$ in radians."], [77, 4, 2, "p-order", "order", "The modulation order $M$. Must be at least 2."]], "sdr.PSK.demodulate": [[78, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to demodulate."]], "sdr.PSK.modulate": [[79, 4, 2, "p-symbols", "symbols", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.Q": [[83, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[84, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.average_power": [[85, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[86, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [86, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [86, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [86, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[87, 4, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [87, 4, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.bec": [[88, 4, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [88, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[89, 4, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.bsc": [[90, 4, 2, "p-p", "p", "The probability $p$ of a bit flip."], [90, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[91, 4, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[92, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.dmc": [[93, 4, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [93, 4, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [93, 4, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [93, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.energy": [[94, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.fspl": [[95, 4, 2, "p-d", "d", "The distance $d$ in meters between the transmitter and receiver."], [95, 4, 2, "p-f", "f", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[96, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [96, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [96, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[97, 4, 2, "p-n", "n", "The length of the Gray code."]], "sdr.hexdump": [[98, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [98, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[99, 4, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [99, 4, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [99, 4, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.pack": [[100, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [100, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [100, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[101, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[102, 4, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [102, 4, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [102, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[103, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[104, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.plot": [[105, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [106, 5, 1, "", "filter", "Plots the frequency response $H(omega)$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [107, 5, 1, "", "frequency_response", "Plots the frequency response $H(omega)$ of the filter."], [108, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [109, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [110, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [111, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [112, 5, 1, "", "phase_response", "Plots the phase response $Theta(omega)$ of the filter."], [113, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [114, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [115, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [116, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [117, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.constellation": [[105, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [105, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.filter": [[106, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [106, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [106, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [106, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [106, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [106, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [106, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.frequency_response": [[107, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [107, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [107, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [107, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [107, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [107, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[108, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [108, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [108, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [108, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [108, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [108, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.impulse_response": [[109, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [109, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [109, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.plot.periodogram": [[110, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [110, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [110, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [110, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [110, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [110, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [110, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [110, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_delay": [[111, 4, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [111, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [111, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [111, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [111, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [111, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_response": [[112, 4, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [112, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [112, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [112, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [112, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [112, 4, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [112, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.spectrogram": [[113, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [113, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [113, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [113, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [113, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [113, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [113, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[114, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [114, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [114, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.plot.time_domain": [[115, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\"."], [115, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[117, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [117, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.raised_cosine": [[118, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [118, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [118, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[119, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[120, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [120, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [120, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.unpack": [[121, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [121, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [121, 4, 2, "p-x", "x", "The input array with bpe bits per element."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"filter": [0, 123, 124, 126], "puls": [0, 125, 128], "shape": [0, 125, 128], "resampl": [0, 122], "modul": 0, "phase": [0, 126, 127], "time": [0, 126], "lock": [0, 126], "loop": [0, 126], "impair": 0, "measur": 0, "data": 0, "manipul": 0, "channel": 0, "model": 0, "link": 0, "budget": 0, "probabl": 0, "plot": 0, "configur": 0, "domain": [0, 126], "frequenc": [0, 123, 124, 126], "analysi": 0, "note": 1, "constructor": [1, 18, 24, 36, 43, 59, 68, 76], "method": [1, 18, 24, 36, 43, 59, 68, 76], "properti": [1, 18, 24, 36, 43, 59, 68, 76], "see": [18, 28, 29, 30, 33, 49, 50, 52, 56, 68, 83, 84, 92, 101, 106, 107, 108, 109, 111, 112, 114, 117], "also": [18, 28, 29, 30, 33, 49, 50, 52, 56, 68, 83, 84, 92, 101, 106, 107, 108, 109, 111, 112, 114, 117], "farrow": 122, "arbitrari": 122, "construct": 122, "an": [122, 123, 124], "input": 122, "signal": 122, "x": 122, "n": [122, 123, 124], "t_": 122, "rate": 122, "r": 122, "y": 122, "frac": 122, "upsampl": 122, "integ": 122, "downsampl": 122, "irrat": 122, "fir": 123, "creat": [123, 124], "examin": [123, 124], "impuls": [123, 124], "respons": [123, 124, 126], "h": [123, 124], "step": [123, 124, 126], "": [123, 124], "omega": [123, 124], "group": [123, 124], "delai": [123, 124], "tau_g": [123, 124], "fulli": [123, 124], "analyz": [123, 124, 126], "iir": 124, "zero": 124, "pole": 124, "digit": 124, "stabil": 124, "peak": 125, "averag": 125, "power": 125, "rectangular": 125, "squar": [125, 128], "root": [125, 128], "rais": [125, 128], "cosin": [125, 128], "design": 126, "proport": 126, "plu": 126, "integr": 126, "ppi": 126, "implement": 126, "pll": 126, "close": 126, "perform": 126, "compar": 126, "across": 126, "zeta": 126, "b_n": 126, "t": 126, "shift": 127, "kei": 127, "constel": 127, "bpsk": 127, "qpsk": 127, "8": 127, "psk": 127, "16": 127, "gaussian": 128, "sdr": 129, "featur": 129, "v0": 130, "0": 130, "2": 130, "chang": 130, "contributor": 130, "1": 130, "version": 131, "alpha": 131, "releas": 131, "beta": 131}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Filtering": [[0, "filtering"]], "Pulse shaping": [[0, "pulse-shaping"]], "Resampling": [[0, "resampling"]], "Modulation": [[0, "modulation"]], "Phase/time-locked loops": [[0, "phase-time-locked-loops"]], "Impairments": [[0, "impairments"]], "Measurement": [[0, "measurement"]], "Data manipulation": [[0, "data-manipulation"]], "Channel models": [[0, "channel-models"]], "Link budgets": [[0, "link-budgets"]], "Probability": [[0, "probability"]], "Plotting": [[0, "plotting"]], "Configuration": [[0, "configuration"]], "Time-domain": [[0, "time-domain"]], "Frequency-domain": [[0, "frequency-domain"]], "Filter analysis": [[0, "filter-analysis"]], "Note": [[1, null]], "Constructors": [[1, "constructors"], [18, "constructors"], [24, "constructors"], [36, "constructors"], [43, "constructors"], [59, "constructors"], [68, "constructors"], [76, "constructors"]], "Methods": [[1, "methods"], [18, "methods"], [24, "methods"], [36, "methods"], [43, "methods"], [59, "methods"], [68, "methods"], [76, "methods"]], "Properties": [[1, "properties"], [18, "properties"], [24, "properties"], [36, "properties"], [43, "properties"], [59, "properties"], [68, "properties"], [76, "properties"]], "See also": [[18, null], [28, null], [29, null], [30, null], [33, null], [49, null], [50, null], [52, null], [56, null], [68, null], [83, null], [84, null], [92, null], [101, null], [106, null], [107, null], [108, null], [109, null], [111, null], [112, null], [114, null], [117, null]], "Farrow arbitrary resampler": [[122, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[122, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[122, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[122, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[122, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[122, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[122, "downsample-by-an-irrational-rate"]], "FIR filters": [[123, "fir-filters"]], "Create an FIR filter": [[123, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[123, "examine-the-impulse-response-h-n"], [124, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[123, "examine-the-step-response-s-n"], [124, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[123, "examine-the-frequency-response-h-omega"], [124, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[123, "examine-the-group-delay-tau-g-omega"], [124, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[123, "fully-analyze-a-fir-filter"]], "IIR filters": [[124, "iir-filters"]], "Create an IIR filter": [[124, "create-an-iir-filter"]], "Examine the zeros and poles": [[124, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[124, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[124, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[125, "peak-to-average-power"]], "Rectangular pulse shape": [[125, "rectangular-pulse-shape"]], "Square-root raised cosine pulse shape": [[125, "square-root-raised-cosine-pulse-shape"]], "Phase-locked loops": [[126, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[126, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[126, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[126, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[126, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[126, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[126, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[126, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[127, "phase-shift-keying"]], "Constellations": [[127, "constellations"]], "BPSK": [[127, "bpsk"]], "QPSK": [[127, "qpsk"]], "8-PSK": [[127, "id1"]], "16-PSK": [[127, "id2"]], "Pulse shapes": [[128, "pulse-shapes"]], "Raised cosine": [[128, "raised-cosine"]], "Square-root raised cosine": [[128, "square-root-raised-cosine"]], "Gaussian": [[128, "gaussian"]], "sdr": [[129, "sdr"]], "Features": [[129, "features"]], "v0.0": [[130, "v0-0"]], "v0.0.2": [[130, "v0-0-2"]], "Changes": [[130, "changes"], [130, "id1"]], "Contributors": [[130, "contributors"], [130, "id2"]], "v0.0.1": [[130, "v0-0-1"]], "Versioning": [[131, "versioning"]], "Alpha releases": [[131, "alpha-releases"]], "Beta releases": [[131, "beta-releases"]]}, "indexentries": {"module": [[0, "module-sdr"]], "sdr": [[0, "module-sdr"]]}, "docurls": ["api/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.DDS/", "api/sdr.DDS.__init__/", "api/sdr.DDS.nco/", "api/sdr.DDS.process/", "api/sdr.DDS.reset/", "api/sdr.DDS.step/", "api/sdr.FIR/", "api/sdr.FIR.__init__/", "api/sdr.FIR.delay/", "api/sdr.FIR.filter/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.frequency_response_log/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.reset/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.resample/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__init__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.filter/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.filter/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.process/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.demodulate/", "api/sdr.PSK.modulate/", "api/sdr.PSK.offset/", "api/sdr.PSK.order/", "api/sdr.PSK.symbol_map/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.dmc/", "api/sdr.energy/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.plot.constellation/", "api/sdr.plot.filter/", "api/sdr.plot.frequency_response/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.raised_cosine/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.unpack/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})