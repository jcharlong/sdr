Search.setIndex({"titles": ["Conversions", "Data manipulation", "Detection", "Digital signal processing", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.Decimator", "sdr.Decimator.__call__", "sdr.Decimator.__init__", "sdr.Decimator.delay", "sdr.Decimator.method", "sdr.Decimator.polyphase_taps", "sdr.Decimator.rate", "sdr.Decimator.reset", "sdr.Decimator.taps", "sdr.Differentiator", "sdr.Differentiator.__init__", "sdr.EnergyDetector", "sdr.EnergyDetector.p_d", "sdr.EnergyDetector.p_fa", "sdr.EnergyDetector.roc", "sdr.EnergyDetector.threshold", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__call__", "sdr.FIR.__init__", "sdr.FIR.__len__", "sdr.FIR.delay", "sdr.FIR.flush", "sdr.FIR.frequency_response", "sdr.FIR.group_delay", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.phase_delay", "sdr.FIR.reset", "sdr.FIR.state", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__call__", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__call__", "sdr.IIR.__init__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.frequency_response", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.state", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.Integrator", "sdr.Integrator.__init__", "sdr.Interpolator", "sdr.Interpolator.__call__", "sdr.Interpolator.__init__", "sdr.Interpolator.delay", "sdr.Interpolator.method", "sdr.Interpolator.polyphase_taps", "sdr.Interpolator.rate", "sdr.Interpolator.reset", "sdr.Interpolator.taps", "sdr.LeakyIntegrator", "sdr.LeakyIntegrator.__init__", "sdr.LinearModulation", "sdr.LinearModulation.__init__", "sdr.LinearModulation.ber", "sdr.LinearModulation.bps", "sdr.LinearModulation.decide_symbols", "sdr.LinearModulation.demodulate", "sdr.LinearModulation.map_symbols", "sdr.LinearModulation.modulate", "sdr.LinearModulation.order", "sdr.LinearModulation.phase_offset", "sdr.LinearModulation.pulse_shape", "sdr.LinearModulation.rx_filter", "sdr.LinearModulation.ser", "sdr.LinearModulation.sps", "sdr.LinearModulation.symbol_map", "sdr.LinearModulation.tx_filter", "sdr.LoopFilter", "sdr.LoopFilter.__call__", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.iir", "sdr.LoopFilter.integral_gain", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.proportional_gain", "sdr.LoopFilter.reset", "sdr.MLPED", "sdr.MLPED.A_received", "sdr.MLPED.A_reference", "sdr.MLPED.__call__", "sdr.MLPED.__init__", "sdr.MLPED.data_aided_error", "sdr.MLPED.decision_directed_error", "sdr.MLPED.gain", "sdr.MSK", "sdr.MSK.__init__", "sdr.MovingAverager", "sdr.MovingAverager.__init__", "sdr.NCO", "sdr.NCO.__call__", "sdr.NCO.__init__", "sdr.NCO.gain", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.reset", "sdr.NCO.step", "sdr.OQPSK", "sdr.OQPSK.__init__", "sdr.PED", "sdr.PED.__call__", "sdr.PED.__init__", "sdr.PED.data_aided_error", "sdr.PED.decision_directed_error", "sdr.PED.gain", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.ber", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.PiMPSK", "sdr.PiMPSK.__init__", "sdr.Q", "sdr.Qinv", "sdr.ReplicaCorrelator", "sdr.ReplicaCorrelator.p_d", "sdr.ReplicaCorrelator.p_fa", "sdr.ReplicaCorrelator.roc", "sdr.ReplicaCorrelator.threshold", "sdr.Resampler", "sdr.Resampler.__call__", "sdr.Resampler.__init__", "sdr.Resampler.delay", "sdr.Resampler.down", "sdr.Resampler.method", "sdr.Resampler.polyphase_taps", "sdr.Resampler.rate", "sdr.Resampler.reset", "sdr.Resampler.taps", "sdr.Resampler.up", "sdr.albersheim", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.barker", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.db", "sdr.design_bandpass_fir", "sdr.design_bandstop_fir", "sdr.design_frac_delay_fir", "sdr.design_highpass_fir", "sdr.design_lowpass_fir", "sdr.design_multirate_fir", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.downsample", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.euclidean", "sdr.evm", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.hadamard", "sdr.half_sine", "sdr.hamming", "sdr.hexdump", "sdr.iq_imbalance", "sdr.linear", "sdr.mix", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.percent", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.eye", "sdr.plot.filter", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.magnitude_response", "sdr.plot.p_d", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.phase_tree", "sdr.plot.raster", "sdr.plot.roc", "sdr.plot.ser", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.polyphase_decompose", "sdr.ppb", "sdr.ppm", "sdr.raised_cosine", "sdr.rectangular", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.to_complex_bb", "sdr.to_real_pb", "sdr.unpack", "sdr.upsample", "sdr.walsh", "sdr.wavelength", "sdr.zadoff_chu", "Sequences", "Simulation", "Synchronization", "Documentation", "Formatting", "Installation", "Unit Tests", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280], "db": [0, 4, 5, 9, 20, 22, 38, 40, 42, 44, 45, 46, 48, 88, 103, 113, 134, 146, 154, 156, 158, 160, 165, 167, 180, 181, 182, 183, 191, 192, 193, 194, 195, 196, 197, 202, 203, 204, 205, 206, 208, 210, 211, 217, 218, 221, 222, 223, 224, 226, 227, 233, 240, 252, 255, 256, 274, 276, 277, 279], "x": [0, 1, 3, 5, 6, 7, 8, 9, 26, 27, 35, 37, 42, 44, 49, 50, 65, 66, 72, 74, 88, 89, 90, 91, 99, 101, 106, 108, 117, 118, 134, 136, 146, 154, 160, 162, 163, 164, 169, 170, 181, 182, 185, 188, 190, 191, 198, 199, 200, 201, 204, 207, 208, 209, 215, 217, 218, 219, 220, 221, 223, 224, 225, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 241, 243, 244, 248, 249, 252, 254, 259, 260, 265, 269, 274, 275, 276, 279, 280], "arraylik": [0, 1, 2, 3, 4, 5, 6, 7, 8, 26, 27, 28, 35, 37, 38, 39, 40, 41, 42, 44, 49, 50, 51, 65, 69, 72, 73, 74, 75, 88, 90, 91, 92, 99, 101, 102, 103, 105, 106, 107, 108, 113, 126, 129, 134, 135, 136, 146, 147, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 180, 183, 185, 186, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 210, 216, 218, 220, 222, 225, 229, 230, 231, 232, 233, 234, 235, 236, 239, 241, 242, 246, 247, 248, 249, 255, 256, 259, 262, 265], "ndarrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 26, 27, 31, 34, 35, 37, 38, 39, 40, 41, 42, 47, 49, 50, 54, 55, 56, 57, 59, 61, 62, 64, 65, 66, 71, 72, 74, 76, 77, 78, 80, 82, 84, 85, 87, 88, 90, 91, 95, 98, 99, 101, 103, 105, 106, 107, 108, 111, 113, 115, 117, 118, 126, 129, 131, 132, 134, 136, 138, 139, 145, 146, 148, 149, 151, 152, 154, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 175, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 237, 238, 240, 243, 244, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265], "float_": [0, 2, 3, 4, 5, 6, 7, 8, 37, 38, 39, 40, 41, 42, 47, 101, 103, 111, 113, 126, 131, 132, 134, 146, 148, 149, 151, 152, 154, 156, 158, 160, 162, 163, 164, 165, 166, 167, 168, 180, 183, 186, 189, 191, 192, 193, 194, 195, 196, 197, 202, 203, 204, 205, 206, 210, 211, 214, 218, 222, 225, 226, 240, 248, 249, 250, 251, 253, 255, 256, 257, 258, 262], "convert": [0, 3, 101, 105, 107, 134, 146, 154, 160, 191, 202, 203, 205, 206, 216, 218, 225, 248, 249, 255, 256, 257, 258], "linear": [0, 35, 90, 92, 94, 101, 102, 131, 132, 134, 146, 151, 152, 154, 160, 169, 171, 174, 182, 191, 218, 232, 234, 239, 241, 243, 278, 279], "unit": [0, 26, 35, 49, 62, 72, 85, 88, 90, 99, 117, 135, 136, 138, 147, 155, 161, 169, 182, 183, 191, 198, 199, 218, 242, 244, 269, 272, 273, 275, 278, 279], "percent": [0, 225, 279], "percentag": [0, 225], "ppm": [0, 249, 254, 265, 279], "part": [0, 244, 248, 249, 254, 275], "per": [0, 1, 27, 50, 91, 101, 102, 104, 106, 108, 114, 134, 135, 139, 146, 147, 154, 155, 160, 161, 182, 183, 202, 203, 205, 206, 209, 211, 214, 216, 220, 227, 228, 237, 248, 249, 250, 251, 253, 254, 255, 256, 259, 268, 274, 277, 279], "million": [0, 249, 254], "ppb": [0, 248, 279], "billion": [0, 248], "ebn0_to_esn0": [0, 113, 158, 202, 276, 279], "ebn0": [0, 7, 101, 103, 134, 146, 154, 156, 160, 183, 202, 203, 226, 276], "bp": [0, 101, 104, 134, 146, 154, 160, 202, 203, 205, 255, 276], "int": [0, 1, 3, 6, 7, 26, 28, 29, 32, 35, 36, 42, 44, 45, 48, 49, 52, 53, 55, 56, 57, 58, 59, 62, 65, 68, 72, 78, 80, 81, 85, 88, 90, 92, 93, 96, 99, 101, 102, 104, 109, 114, 131, 132, 134, 135, 136, 137, 138, 145, 146, 147, 151, 152, 154, 155, 160, 161, 169, 171, 172, 173, 179, 181, 182, 184, 185, 187, 188, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 211, 212, 213, 214, 215, 216, 220, 221, 223, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 241, 242, 247, 250, 251, 253, 255, 256, 259, 260, 261, 263, 264, 276], "ebn0_to_snr": [0, 134, 146, 154, 160, 203, 279], "esn0_to_ebn0": [0, 103, 156, 205, 279], "esn0": [0, 7, 101, 113, 134, 146, 154, 158, 160, 205, 206, 240, 276], "esn0_to_snr": [0, 206, 276, 279], "sp": [0, 6, 7, 101, 102, 106, 108, 114, 134, 135, 146, 147, 154, 155, 160, 161, 203, 206, 211, 214, 228, 237, 244, 250, 251, 253, 255, 256, 257, 258, 274, 276, 277], "1": [0, 6, 8, 9, 16, 19, 23, 25, 26, 28, 31, 34, 35, 36, 37, 38, 40, 41, 42, 49, 52, 53, 55, 56, 59, 72, 73, 78, 88, 89, 90, 91, 92, 95, 98, 99, 100, 101, 102, 105, 106, 107, 108, 115, 117, 119, 120, 126, 130, 134, 135, 136, 138, 140, 146, 147, 148, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 175, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 280], "snr_to_ebn0": [0, 103, 156, 183, 255, 279], "snr": [0, 2, 4, 7, 37, 38, 40, 42, 44, 45, 46, 47, 48, 134, 146, 154, 160, 180, 182, 183, 233, 255, 256, 257, 258, 265, 276, 279], "snr_to_esn0": [0, 113, 158, 256, 279], "pack": [1, 42, 44, 134, 146, 154, 160, 216, 220, 278, 279], "bpe": [1, 220, 259], "int_": [1, 5, 6, 101, 105, 106, 134, 146, 154, 160, 185, 187, 188, 198, 199, 200, 212, 215, 220, 259, 265], "binari": [1, 4, 6, 135, 147, 155, 159, 161, 184, 185, 186, 187, 188, 189, 200, 213, 220, 243, 259, 261, 265, 276, 278, 279], "arrai": [1, 31, 34, 42, 55, 78, 92, 95, 98, 102, 134, 135, 138, 146, 147, 154, 155, 159, 160, 161, 171, 175, 178, 181, 184, 185, 187, 188, 198, 199, 200, 204, 207, 212, 213, 215, 220, 221, 223, 244, 247, 259, 261, 273], "an": [1, 2, 3, 4, 26, 35, 37, 49, 55, 57, 72, 73, 75, 78, 80, 88, 89, 90, 91, 99, 100, 102, 135, 136, 138, 147, 155, 156, 158, 161, 164, 169, 183, 194, 220, 226, 231, 240, 244, 259, 262, 269, 278, 279], "multipl": [1, 55, 78, 220, 259, 276, 279], "bit": [1, 5, 7, 42, 44, 47, 101, 103, 104, 134, 135, 146, 147, 154, 155, 156, 159, 160, 161, 183, 185, 186, 188, 189, 202, 203, 205, 216, 220, 226, 255, 259, 278, 279], "element": [1, 216, 220, 259], "unpack": [1, 42, 44, 216, 259, 276, 278, 279], "hexdump": [1, 42, 216, 278, 279], "byte": [1, 216], "width": [1, 194, 216], "16": [1, 156, 158, 159, 194, 202, 203, 205, 213, 216, 226, 240, 247, 250, 253, 255, 256, 261, 274, 279], "str": [1, 36, 216, 228, 234, 237, 238, 241], "return": [1, 6, 9, 17, 19, 22, 23, 26, 27, 35, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 52, 54, 55, 56, 57, 59, 62, 66, 72, 74, 78, 80, 85, 88, 90, 91, 99, 103, 105, 106, 107, 108, 113, 118, 129, 131, 132, 136, 139, 145, 149, 151, 152, 156, 158, 162, 163, 165, 166, 167, 168, 169, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 272, 273, 274, 276, 279], "specifi": [1, 42, 45, 46, 48, 126, 131, 132, 148, 151, 152, 182, 183, 200, 216, 267, 272, 273, 279], "class": [2, 3, 5, 6, 9, 26, 35, 37, 42, 44, 45, 46, 47, 48, 49, 65, 72, 88, 90, 99, 101, 117, 126, 134, 136, 138, 146, 148, 154, 160, 164, 169, 266, 272, 273, 276, 278, 279], "replicacorrel": [2, 164, 165, 166, 167, 168, 279], "implement": [2, 3, 6, 26, 35, 37, 49, 65, 72, 88, 90, 99, 101, 117, 121, 126, 134, 136, 138, 146, 148, 154, 160, 164, 169, 180, 266, 271], "clairvoy": [2, 164], "replica": [2, 164], "correl": [2, 164, 184, 213, 261, 263], "energydetector": [2, 37, 38, 39, 40, 41, 279], "energi": [2, 37, 103, 113, 156, 158, 164, 165, 166, 167, 168, 183, 202, 203, 204, 205, 206, 211, 214, 226, 240, 250, 251, 253, 255, 256, 278, 279], "albersheim": [2, 180, 279], "p_d": [2, 7, 37, 38, 40, 164, 165, 167, 180, 233, 239, 279], "p_fa": [2, 7, 37, 38, 39, 40, 41, 164, 165, 166, 167, 168, 180, 239], "estim": [2, 9, 101, 105, 106, 134, 146, 154, 160, 180, 234, 241, 275], "minimum": [2, 6, 134, 180, 279], "requir": [2, 27, 50, 91, 180, 267, 268, 269, 270, 279], "singl": [2, 40, 55, 78, 156, 158, 180], "sampl": [2, 3, 9, 16, 24, 26, 27, 29, 35, 38, 39, 40, 41, 49, 50, 53, 55, 56, 57, 59, 62, 65, 69, 78, 80, 85, 90, 91, 92, 93, 101, 102, 106, 108, 114, 117, 119, 123, 134, 135, 136, 138, 139, 140, 142, 144, 145, 146, 147, 154, 155, 160, 161, 169, 171, 172, 180, 182, 201, 203, 206, 209, 211, 214, 219, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 241, 242, 244, 250, 251, 253, 254, 255, 256, 257, 258, 260, 265, 271, 274, 275, 277, 278, 279], "given": [2, 37, 42, 44, 45, 46, 48, 65, 66, 164, 180, 208, 272, 273], "n_": [2, 38, 39, 40, 41, 180], "nc": [2, 38, 39, 40, 41, 180], "non": [2, 27, 38, 39, 40, 41, 50, 91, 180, 214, 244, 251], "coher": [2, 38, 39, 40, 41, 180], "combin": [2, 180], "achiev": [2, 180, 276, 277], "probabl": [2, 7, 37, 38, 39, 40, 41, 162, 163, 164, 165, 166, 167, 168, 180, 185, 186, 188, 189, 200, 233, 239, 265, 279], "fals": [2, 5, 26, 28, 36, 37, 38, 39, 40, 41, 49, 51, 55, 65, 67, 72, 73, 75, 78, 89, 90, 91, 92, 99, 100, 134, 136, 137, 146, 154, 156, 158, 160, 164, 165, 166, 167, 168, 169, 171, 180, 181, 185, 188, 200, 204, 219, 223, 224, 227, 234, 239, 241, 244, 252, 273, 277], "alarm": [2, 37, 38, 39, 40, 41, 164, 165, 166, 167, 168, 180, 239], "p_": [2, 7, 37, 38, 39, 40, 41, 156, 158, 164, 165, 166, 167, 168, 180, 181, 182, 191, 200, 208, 218, 221, 223, 226, 234, 239, 240], "fa": [2, 7, 37, 38, 39, 40, 41, 164, 165, 166, 167, 168, 180, 239], "thi": [2, 9, 26, 44, 45, 46, 48, 49, 72, 90, 92, 101, 102, 115, 126, 134, 139, 146, 147, 154, 155, 159, 160, 161, 169, 171, 180, 182, 183, 185, 188, 200, 201, 208, 210, 213, 228, 234, 238, 241, 244, 260, 261, 267, 269, 270, 271, 273, 275, 276, 277], "function": [2, 7, 8, 9, 18, 35, 49, 72, 73, 99, 117, 162, 163, 180, 183, 201, 211, 213, 226, 233, 234, 239, 240, 241, 260, 261, 272, 273, 275, 277, 278, 279], "": [2, 3, 7, 9, 17, 19, 20, 21, 23, 24, 26, 35, 37, 44, 45, 46, 47, 48, 49, 55, 56, 59, 62, 72, 78, 85, 88, 90, 99, 101, 102, 105, 106, 107, 108, 126, 134, 136, 146, 154, 160, 164, 166, 168, 169, 180, 182, 183, 203, 206, 208, 209, 217, 227, 228, 229, 230, 232, 234, 235, 236, 237, 238, 241, 242, 244, 245, 254, 255, 256, 257, 258, 270, 271, 274, 276, 278, 279], "equat": [2, 17, 19, 20, 21, 22, 23, 38, 39, 41, 72, 99, 146, 154, 160, 165, 166, 168, 180, 210], "finit": [3, 49, 278, 279], "impuls": [3, 7, 26, 35, 49, 57, 72, 80, 88, 90, 99, 136, 169, 192, 193, 194, 195, 196, 197, 211, 229, 231, 277, 278, 279], "respons": [3, 7, 26, 35, 49, 55, 57, 62, 72, 78, 80, 85, 88, 90, 99, 136, 169, 192, 193, 194, 195, 196, 197, 211, 229, 230, 231, 232, 236, 242, 277, 278, 279], "design_lowpass_fir": [3, 55, 196, 279], "order": [3, 9, 26, 27, 35, 36, 42, 47, 49, 50, 58, 65, 68, 72, 81, 88, 90, 91, 92, 99, 101, 102, 109, 117, 119, 134, 136, 146, 154, 155, 160, 161, 169, 171, 182, 192, 193, 195, 196, 202, 203, 205, 208, 209, 211, 227, 228, 237, 238, 250, 253, 254, 255, 266, 273, 274, 275, 276, 279], "design": [3, 26, 28, 30, 90, 92, 94, 102, 147, 155, 161, 169, 171, 174, 192, 193, 194, 195, 196, 197, 267, 278, 279], "lowpass": [3, 196], "h": [3, 7, 26, 35, 37, 49, 51, 55, 57, 72, 78, 80, 88, 90, 99, 101, 102, 111, 112, 116, 117, 134, 136, 146, 147, 154, 155, 160, 161, 164, 169, 192, 193, 194, 195, 196, 197, 211, 228, 229, 231, 232, 236, 247, 274, 275, 277], "n": [3, 5, 6, 7, 8, 9, 26, 27, 35, 36, 37, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 64, 65, 66, 72, 74, 75, 76, 80, 81, 85, 88, 89, 90, 91, 99, 101, 102, 106, 108, 111, 112, 116, 117, 118, 134, 136, 138, 139, 145, 146, 147, 154, 155, 160, 161, 162, 163, 164, 166, 168, 169, 170, 181, 182, 183, 184, 187, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 215, 217, 219, 221, 223, 224, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 241, 242, 244, 252, 254, 255, 256, 257, 258, 260, 261, 263, 264, 265, 275, 277, 278], "us": [3, 7, 26, 28, 30, 33, 35, 36, 49, 51, 54, 55, 60, 65, 67, 72, 73, 75, 78, 83, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 102, 105, 106, 117, 121, 126, 131, 132, 134, 136, 137, 146, 147, 148, 151, 152, 154, 155, 160, 161, 169, 171, 174, 177, 183, 186, 189, 192, 193, 194, 195, 196, 197, 208, 213, 216, 220, 227, 228, 229, 231, 233, 234, 241, 242, 259, 261, 267, 268, 269, 270, 272, 273, 275, 276, 277, 278, 280], "window": [3, 26, 35, 36, 55, 90, 169, 192, 193, 194, 195, 196, 197, 234, 241, 279], "method": [3, 7, 30, 89, 92, 94, 171, 174, 192, 193, 194, 195, 196, 197, 234, 241, 272, 273, 279], "design_highpass_fir": [3, 195, 279], "highpass": [3, 195], "design_bandpass_fir": [3, 192, 279], "bandpass": [3, 192], "design_bandstop_fir": [3, 193, 279], "bandstop": [3, 193], "infinit": [3, 72, 88, 278, 279], "movingaverag": [3, 99, 136, 137, 279], "move": [3, 99, 100, 136, 137, 279], "averag": [3, 5, 42, 99, 100, 126, 131, 132, 134, 136, 137, 146, 148, 151, 152, 160, 181, 182, 183, 208, 221, 234, 279], "differenti": [3, 6, 35, 36, 134, 156, 158, 198, 199, 244, 278, 279], "integr": [3, 9, 14, 38, 39, 40, 41, 88, 89, 99, 100, 117, 119, 122, 136, 180, 266, 270, 273, 278, 279], "leakyintegr": [3, 99, 100, 136, 279], "leaki": [3, 99, 100, 136, 279], "interpol": [3, 26, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 116, 134, 146, 154, 160, 169, 171, 179, 197, 228, 260, 274, 276, 278, 279], "polyphas": [3, 26, 27, 28, 31, 34, 90, 91, 92, 95, 98, 169, 170, 171, 175, 178, 197, 201, 247, 260, 278, 279], "decim": [3, 26, 27, 28, 29, 30, 31, 32, 33, 34, 101, 102, 105, 106, 107, 108, 112, 115, 134, 135, 146, 147, 154, 155, 159, 160, 161, 169, 171, 173, 197, 201, 276, 278, 279], "ration": [3, 169, 171, 197, 279], "design_multirate_fir": [3, 28, 92, 171, 197, 279], "up": [3, 169, 171, 179, 197, 210, 268], "kaiser": [3, 26, 28, 30, 90, 91, 92, 94, 169, 171, 174, 192, 193, 194, 195, 196, 197], "polyphase_decompos": [3, 247, 279], "tap": [3, 26, 28, 31, 34, 35, 49, 64, 65, 71, 72, 76, 77, 88, 90, 92, 95, 98, 99, 136, 169, 171, 175, 178, 247, 272, 273], "phase": [3, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 49, 59, 90, 101, 102, 110, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 169, 180, 209, 217, 219, 235, 236, 237, 247, 265, 278, 279], "decompos": [3, 26, 90, 169, 247], "h_i": [3, 26, 28, 31, 34, 35, 49, 51, 64, 90, 92, 95, 98, 136, 169, 171, 175, 178, 247, 272], "matrix": [3, 200, 247, 265], "h_": [3, 9, 26, 31, 34, 35, 90, 95, 98, 169, 175, 178, 247, 275], "i": [3, 9, 16, 25, 26, 27, 28, 31, 34, 35, 36, 37, 39, 40, 41, 42, 47, 49, 50, 51, 55, 57, 62, 63, 64, 65, 70, 72, 75, 77, 78, 80, 85, 86, 88, 90, 91, 92, 95, 98, 99, 100, 101, 102, 117, 119, 120, 123, 126, 134, 136, 139, 144, 146, 147, 148, 154, 155, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 175, 178, 180, 181, 182, 183, 185, 186, 188, 189, 191, 192, 193, 194, 195, 196, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 234, 235, 236, 238, 241, 242, 244, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280], "j": [3, 26, 31, 34, 55, 72, 75, 76, 78, 88, 90, 95, 98, 99, 134, 138, 146, 154, 160, 169, 175, 178, 182, 200, 217, 219, 247, 263, 272, 273], "b": [3, 72, 75, 180, 183, 211, 216, 229, 231, 242, 247, 267, 268, 277], "farrowresampl": [3, 65, 66, 67, 68, 69, 70, 71, 271, 279], "cubic": [3, 65], "farrow": [3, 65, 66, 67, 68, 69, 70, 71, 278, 279], "design_frac_delay_fir": [3, 194, 279], "length": [3, 6, 7, 26, 27, 35, 36, 40, 49, 50, 52, 57, 62, 74, 90, 91, 92, 100, 102, 106, 108, 135, 136, 137, 147, 155, 161, 169, 171, 184, 187, 192, 193, 194, 195, 196, 197, 211, 212, 213, 214, 229, 231, 234, 238, 241, 242, 250, 251, 253, 257, 261, 263, 264, 268, 271, 274, 277], "delai": [3, 7, 26, 27, 29, 35, 49, 50, 53, 56, 59, 65, 90, 91, 93, 117, 136, 138, 169, 172, 194, 198, 199, 214, 230, 235, 251, 275, 278, 279], "fraction": [3, 65, 69, 194, 211, 271, 278, 279], "mix": [3, 219, 278, 279], "freq": [3, 4, 26, 35, 49, 55, 72, 78, 88, 90, 99, 136, 138, 139, 169, 209, 210, 219, 222, 262, 265, 271, 275], "float": [3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 35, 36, 40, 42, 44, 45, 46, 48, 49, 55, 56, 59, 65, 66, 72, 73, 78, 79, 88, 90, 99, 100, 101, 102, 110, 117, 119, 120, 122, 123, 124, 126, 127, 128, 130, 133, 134, 135, 136, 138, 140, 141, 142, 143, 146, 147, 148, 153, 154, 155, 157, 160, 161, 167, 169, 176, 181, 182, 183, 185, 188, 190, 192, 193, 194, 195, 196, 197, 208, 209, 211, 217, 219, 221, 223, 224, 227, 228, 229, 230, 232, 234, 235, 236, 237, 238, 241, 243, 244, 250, 252, 253, 254, 265], "0": [3, 6, 8, 16, 26, 27, 31, 34, 35, 37, 40, 42, 49, 50, 51, 55, 56, 59, 64, 72, 73, 75, 76, 77, 78, 88, 90, 91, 92, 95, 98, 99, 101, 102, 105, 106, 107, 108, 115, 119, 134, 135, 136, 138, 140, 146, 147, 154, 155, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 175, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 215, 217, 218, 219, 220, 222, 225, 227, 228, 229, 230, 231, 232, 235, 236, 237, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 280], "time": [3, 5, 9, 16, 17, 19, 20, 21, 22, 23, 35, 49, 72, 88, 99, 117, 119, 126, 136, 146, 148, 154, 160, 181, 182, 190, 192, 193, 195, 196, 200, 201, 204, 206, 207, 209, 211, 213, 215, 217, 219, 221, 223, 224, 228, 229, 234, 238, 241, 244, 250, 252, 253, 254, 256, 257, 258, 260, 261, 265, 271, 272, 273, 277, 278, 279], "domain": [3, 5, 181, 182, 190, 192, 193, 195, 196, 201, 204, 207, 209, 215, 217, 219, 221, 223, 224, 229, 234, 238, 241, 244, 252, 254, 257, 258, 260, 265, 278, 279], "complex": [3, 5, 7, 26, 35, 37, 38, 39, 40, 41, 49, 55, 72, 78, 88, 90, 99, 101, 102, 105, 106, 107, 108, 115, 126, 129, 134, 135, 136, 138, 139, 145, 146, 147, 148, 149, 154, 155, 159, 160, 161, 164, 165, 166, 167, 168, 169, 182, 183, 201, 208, 217, 219, 227, 228, 230, 232, 235, 236, 238, 243, 244, 257, 258, 260, 265, 271, 272, 273, 275, 276, 278, 279], "exponenti": [3, 139, 201, 219, 257, 258, 260, 271, 272, 273, 279], "real": [3, 38, 39, 41, 134, 146, 162, 163, 165, 166, 168, 182, 219, 228, 230, 232, 235, 236, 238, 244, 257, 258, 271, 272, 273, 275, 278, 279], "sinusoid": [3, 154, 182, 219, 257, 258, 273, 279], "to_complex_bb": [3, 257, 279], "x_r": [3, 257, 258], "complex_": [3, 7, 101, 105, 106, 107, 108, 115, 134, 138, 145, 146, 148, 149, 154, 159, 160, 227, 243, 257, 258, 263, 264], "passband": [3, 192, 193, 194, 195, 196, 211, 214, 250, 251, 253, 257, 258, 274, 279], "center": [3, 192, 193, 194, 195, 196, 214, 244, 251, 257, 258, 279], "f_": [3, 9, 16, 24, 27, 55, 56, 59, 78, 91, 101, 102, 114, 134, 135, 146, 147, 154, 155, 160, 161, 192, 193, 195, 196, 201, 203, 206, 209, 211, 219, 228, 229, 230, 232, 234, 235, 236, 237, 238, 241, 244, 254, 255, 256, 257, 258, 260, 271, 272, 273, 275, 277], "r": [3, 26, 27, 28, 31, 32, 34, 65, 66, 90, 91, 92, 95, 96, 98, 183, 201, 202, 203, 205, 208, 211, 219, 250, 253, 255, 257, 258, 260, 267, 268, 269, 270, 273, 274, 275, 277], "4": [3, 7, 17, 19, 26, 31, 34, 35, 38, 40, 42, 55, 78, 88, 90, 91, 95, 98, 99, 126, 134, 135, 136, 138, 146, 147, 148, 154, 156, 157, 158, 159, 160, 164, 165, 166, 167, 168, 169, 175, 178, 180, 182, 183, 184, 186, 187, 189, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 240, 242, 243, 244, 245, 246, 247, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 269, 271, 273, 274, 275, 276], "rate": [3, 5, 7, 9, 16, 24, 26, 27, 28, 32, 42, 43, 44, 46, 47, 55, 56, 59, 65, 66, 78, 90, 91, 92, 96, 101, 103, 113, 134, 146, 154, 156, 158, 160, 169, 170, 171, 173, 176, 179, 197, 201, 202, 203, 205, 209, 219, 226, 228, 229, 230, 232, 234, 235, 236, 237, 238, 240, 241, 244, 254, 255, 257, 258, 260, 265, 278, 279], "baseband": [3, 7, 9, 134, 146, 154, 160, 219, 228, 237, 257, 258, 274, 275, 279], "x_c": [3, 257, 258], "c": [3, 9, 17, 19, 20, 21, 22, 23, 44, 45, 46, 47, 48, 101, 102, 115, 117, 134, 146, 154, 159, 160, 183, 186, 189, 210, 222, 243, 257, 258, 262, 275], "2": [3, 6, 7, 9, 17, 19, 22, 26, 31, 34, 35, 37, 38, 39, 40, 41, 42, 49, 53, 55, 56, 59, 78, 88, 90, 91, 95, 98, 99, 100, 101, 102, 109, 126, 134, 136, 138, 146, 147, 148, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 175, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 267, 270, 271, 272, 273, 274, 275, 276, 277], "to_real_pb": [3, 258, 274, 279], "2f_": [3, 258], "upsampl": [3, 90, 169, 260, 279], "factor": [3, 5, 9, 16, 25, 99, 100, 102, 117, 119, 120, 147, 155, 161, 190, 201, 260, 275], "downsampl": [3, 201, 279], "bsc_capac": [4, 189, 279], "p": [4, 8, 138, 139, 162, 163, 169, 171, 175, 176, 178, 179, 185, 186, 188, 189, 197, 200, 265], "calcul": [4, 5, 183, 186, 189, 208, 210, 222, 262, 279], "symmetr": [4, 188, 189, 200, 257, 258, 265, 278], "bsc": [4, 188, 189, 200, 265, 278, 279], "bec_capac": [4, 186, 279], "erasur": [4, 185, 186, 200, 265, 278], "bec": [4, 185, 186, 200, 265, 278, 279], "awgn_capac": [4, 183, 279], "addit": [4, 182, 183, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 260, 265, 278], "white": [4, 182, 183, 265, 278], "gaussian": [4, 6, 35, 88, 99, 136, 182, 183, 211, 265, 278, 279], "nois": [4, 9, 10, 11, 16, 22, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 103, 113, 117, 119, 123, 134, 146, 154, 156, 158, 160, 164, 165, 166, 167, 168, 182, 183, 202, 203, 205, 206, 226, 240, 255, 256, 265, 275, 278], "awgn": [4, 134, 146, 154, 156, 158, 160, 182, 183, 208, 226, 227, 240, 257, 258, 265, 276, 278, 279], "fspl": [4, 210], "distanc": [4, 207, 210, 215, 278, 279], "free": [4, 134, 146, 154, 160, 210, 278], "space": [4, 55, 78, 210, 278], "wavelength": [4, 262, 279], "lambda": [4, 210, 262], "electromagnet": [4, 262], "wave": [4, 134, 262], "frequenc": [4, 9, 17, 19, 21, 26, 35, 49, 55, 56, 59, 72, 78, 88, 90, 99, 117, 134, 136, 138, 139, 169, 192, 193, 194, 195, 196, 201, 209, 210, 219, 222, 229, 230, 232, 234, 235, 236, 241, 257, 258, 260, 262, 265, 277, 278, 279], "f": [4, 17, 19, 26, 35, 40, 55, 56, 59, 78, 88, 90, 138, 139, 169, 180, 182, 209, 210, 211, 219, 222, 254, 262, 263, 268, 271, 272, 273, 274, 275, 276, 277], "parabolic_antenna": [4, 222, 279], "tupl": [4, 26, 35, 36, 37, 40, 42, 44, 47, 49, 55, 56, 59, 72, 78, 88, 90, 99, 101, 105, 106, 126, 131, 132, 134, 136, 146, 148, 151, 152, 154, 160, 164, 167, 169, 181, 204, 207, 215, 221, 222, 223, 227, 229, 230, 231, 232, 235, 236, 242, 243, 246], "gain": [4, 9, 12, 13, 14, 15, 16, 72, 73, 79, 88, 99, 117, 119, 122, 124, 126, 133, 138, 140, 141, 148, 153, 180, 192, 193, 194, 195, 196, 210, 211, 214, 222, 250, 251, 253, 275, 278], "g": [4, 47, 222, 269], "beamwidth": [4, 222], "theta": [4, 138, 140, 143, 144, 222], "parabol": [4, 222], "reflector": [4, 222], "signal": [5, 7, 9, 17, 19, 22, 23, 26, 27, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 54, 65, 66, 72, 74, 88, 90, 91, 99, 101, 102, 111, 117, 118, 126, 127, 128, 130, 134, 136, 138, 139, 145, 146, 147, 154, 155, 160, 161, 164, 165, 166, 167, 168, 169, 170, 181, 182, 183, 190, 191, 192, 193, 195, 196, 197, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 215, 217, 218, 219, 221, 222, 223, 224, 228, 229, 230, 232, 234, 235, 236, 237, 238, 241, 244, 247, 252, 254, 255, 256, 257, 258, 260, 262, 272, 273, 275, 277, 278, 279], "peak_pow": [5, 221, 223, 279], "peak": [5, 134, 146, 160, 190, 208, 221, 223, 224], "average_pow": [5, 181, 221, 279], "papr": [5, 134, 146, 160, 221, 274, 279], "ratio": [5, 22, 38, 40, 42, 44, 45, 46, 47, 48, 103, 113, 134, 146, 156, 158, 160, 165, 167, 182, 183, 202, 203, 205, 206, 221, 225, 226, 240, 248, 249, 255, 256], "peak_voltag": [5, 190, 224, 279], "bool": [5, 26, 28, 35, 36, 38, 39, 40, 41, 49, 51, 55, 63, 65, 67, 70, 72, 73, 75, 78, 86, 88, 89, 90, 92, 99, 100, 134, 136, 137, 146, 154, 156, 158, 160, 165, 166, 167, 168, 169, 171, 181, 204, 219, 223, 224, 227, 236, 238, 243, 244, 252], "rms_voltag": [5, 190, 252, 279], "root": [5, 6, 102, 147, 155, 161, 208, 228, 244, 252, 253, 263, 264, 272, 278], "mean": [5, 208, 234, 241, 252, 277], "squar": [5, 6, 102, 147, 155, 161, 208, 210, 222, 244, 252, 253, 272], "rm": [5, 126, 127, 128, 130, 190, 208, 252], "crest_factor": [5, 190, 221, 279], "crest": [5, 190], "euclidean": [5, 207, 278, 279], "y": [5, 6, 26, 27, 35, 49, 50, 54, 66, 72, 74, 88, 90, 91, 99, 117, 118, 138, 139, 145, 169, 182, 185, 188, 198, 199, 200, 201, 207, 209, 215, 217, 219, 227, 232, 234, 241, 243, 254, 260, 275, 276], "between": [5, 26, 28, 36, 51, 63, 67, 70, 73, 75, 86, 89, 90, 92, 100, 137, 148, 169, 171, 207, 210, 215, 234, 238, 241, 275, 278], "two": [5, 99, 136, 192, 193, 207, 215, 228, 229, 230, 232, 234, 235, 236, 241, 263, 271, 272, 273], "ham": [5, 55, 192, 193, 195, 196, 215, 278, 279], "errorr": [5, 42, 43, 44, 45, 46, 47, 48, 276, 279], "A": [5, 9, 17, 19, 20, 21, 22, 23, 25, 27, 35, 42, 49, 50, 55, 78, 88, 91, 99, 102, 117, 126, 136, 147, 148, 155, 161, 180, 187, 192, 193, 195, 196, 212, 216, 217, 222, 250, 253, 266, 268, 275], "error": [5, 7, 9, 15, 16, 22, 42, 43, 44, 46, 47, 48, 101, 103, 113, 117, 119, 126, 129, 131, 132, 133, 134, 146, 148, 149, 151, 152, 153, 154, 156, 158, 160, 180, 189, 208, 226, 240, 275, 278, 279], "ber": [5, 7, 42, 101, 103, 134, 146, 154, 156, 160, 226, 276, 278, 279], "symbol": [5, 7, 42, 44, 47, 90, 101, 102, 104, 105, 106, 107, 108, 113, 114, 115, 126, 129, 134, 135, 146, 147, 148, 149, 154, 155, 156, 158, 159, 160, 161, 182, 202, 203, 205, 206, 208, 209, 211, 214, 227, 228, 237, 240, 243, 244, 250, 251, 253, 255, 256, 274, 275, 277, 278, 279], "ser": [5, 7, 42, 101, 113, 134, 146, 154, 158, 160, 240, 276, 278, 279], "evm": [5, 208, 278, 279], "x_hat": [5, 7, 42, 44, 208, 227, 276], "ref": [5, 126, 128, 130, 180, 192, 193, 194, 195, 196, 197, 208, 211, 213, 261], "vector": [5, 42, 55, 69, 78, 192, 193, 195, 196, 208, 234, 241, 278, 279], "magnitud": [5, 7, 35, 88, 99, 136, 184, 194, 208, 213, 229, 232, 261, 263, 278, 279], "hat": [5, 7, 44, 101, 105, 106, 126, 129, 134, 146, 148, 149, 154, 160, 208, 227, 243], "k": [5, 6, 7, 35, 44, 88, 101, 102, 104, 105, 106, 107, 108, 109, 126, 129, 134, 146, 148, 149, 154, 155, 160, 161, 198, 199, 202, 203, 205, 208, 227, 243, 244, 255, 274, 277], "linearmodul": [6, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 131, 132, 151, 152, 154, 243, 279], "amplitud": [6, 101, 102, 126, 127, 128, 130, 217, 265, 271, 275], "arbitrari": [6, 65, 66, 67, 68, 69, 70, 71, 101, 278, 279], "psk": [6, 126, 146, 148, 154, 155, 156, 157, 158, 159, 160, 161, 182, 208, 209, 217, 226, 227, 228, 240, 243, 244, 254, 274, 275, 278, 279], "shift": [6, 134, 146, 154, 156, 157, 158, 159, 160, 263, 272, 273, 278, 279], "kei": [6, 134, 146, 154, 156, 157, 158, 159, 160, 278, 279], "demodul": [6, 101, 106, 134, 146, 154, 160, 279], "pimpsk": [6, 160, 161, 279], "pi": [6, 26, 35, 78, 88, 90, 91, 126, 138, 146, 148, 154, 160, 161, 169, 182, 201, 210, 211, 217, 219, 222, 229, 230, 231, 232, 235, 236, 242, 246, 257, 258, 260, 263, 271, 272, 273, 275, 278, 279], "m": [6, 72, 75, 77, 88, 99, 101, 102, 104, 105, 106, 107, 108, 109, 115, 126, 134, 146, 148, 154, 155, 159, 160, 161, 200, 202, 203, 205, 210, 243, 255, 267, 268, 269, 270, 278, 279], "oqpsk": [6, 134, 146, 147, 279], "offset": [6, 17, 19, 26, 90, 91, 101, 102, 110, 134, 135, 138, 139, 140, 143, 146, 147, 154, 155, 157, 160, 161, 169, 209, 219, 244, 254, 265, 275, 278, 279], "quadratur": [6, 134, 146, 217], "msk": [6, 134, 135, 237, 279], "rectangular": [6, 89, 102, 147, 155, 161, 251, 274, 277, 278, 279], "span": [6, 7, 102, 147, 155, 161, 211, 214, 228, 237, 250, 251, 253, 274, 277], "half_sin": [6, 135, 214, 279], "half": [6, 134, 146, 197, 214, 222, 278, 279], "sine": [6, 134, 139, 214, 278, 279], "time_bandwidth": [6, 211], "raised_cosin": [6, 102, 147, 155, 161, 228, 250, 277, 279], "alpha": [6, 99, 100, 102, 147, 155, 161, 211, 245, 250, 253, 274, 277], "rais": [6, 35, 88, 102, 147, 155, 161, 228, 244, 250, 253, 272, 278], "cosin": [6, 35, 88, 102, 139, 147, 155, 161, 228, 244, 250, 253, 272, 278, 279], "rc": [6, 102, 147, 155, 161, 250], "root_raised_cosin": [6, 35, 88, 102, 147, 155, 161, 228, 229, 230, 231, 232, 235, 236, 242, 246, 253, 272, 274, 276, 277, 279], "srrc": [6, 102, 146, 147, 154, 155, 160, 161, 228, 244, 253, 274, 276], "binary_cod": [6, 187, 279], "gener": [6, 134, 146, 154, 160, 182, 185, 187, 188, 200, 212, 239, 267, 276, 279], "code": [6, 135, 147, 155, 159, 161, 184, 187, 202, 203, 205, 212, 213, 227, 243, 255, 261, 264, 269, 276, 279], "gray_cod": [6, 212, 279], "grai": [6, 134, 135, 146, 147, 154, 155, 159, 160, 161, 212, 227, 243, 276, 278], "diff_encod": [6, 134, 146, 154, 156, 158, 160, 198, 199, 279], "y_prev": [6, 198, 199], "input": [6, 9, 17, 19, 22, 23, 26, 27, 28, 29, 35, 36, 49, 50, 51, 57, 61, 62, 65, 66, 67, 69, 72, 73, 74, 75, 80, 85, 88, 89, 90, 91, 92, 93, 99, 100, 117, 118, 136, 137, 138, 139, 146, 154, 156, 158, 160, 162, 169, 170, 171, 172, 182, 183, 185, 186, 188, 189, 191, 198, 199, 200, 201, 218, 220, 225, 231, 242, 248, 249, 259, 260, 265, 272, 273, 275], "data": [6, 126, 131, 148, 151, 198, 199, 216, 220, 244, 259, 278], "diff_decod": [6, 198, 199, 279], "decod": [6, 198], "use_styl": [7, 245], "appli": [7, 26, 36, 90, 102, 169, 209, 217, 227, 228, 234, 241, 243, 244, 245, 254, 265], "default": [7, 57, 62, 135, 147, 155, 159, 161, 181, 204, 207, 215, 221, 223, 227, 230, 232, 235, 236, 238, 241, 243, 245, 276], "matplotlib": [7, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 271, 272, 273, 274, 275, 276, 277, 278], "rcparam": [7, 245], "time_domain": [7, 26, 35, 88, 90, 91, 99, 134, 136, 138, 146, 154, 160, 169, 182, 201, 213, 219, 244, 257, 258, 260, 261, 274, 275, 276, 277, 279], "ani": [7, 26, 35, 49, 55, 72, 78, 88, 90, 99, 136, 138, 139, 169, 184, 191, 201, 213, 218, 244, 260, 261, 264, 270], "dtype": [7, 26, 35, 49, 55, 72, 78, 88, 90, 99, 134, 136, 138, 139, 146, 154, 160, 169, 184, 213, 220, 244, 259, 261, 264, 275], "_scalartype_co": [7, 244], "t": [7, 9, 11, 16, 37, 117, 119, 123, 164, 211, 216, 244, 267, 271, 279], "raster": [7, 228, 237, 238, 278, 279], "none": [7, 26, 35, 36, 40, 49, 55, 57, 62, 65, 69, 78, 90, 102, 117, 125, 136, 139, 147, 155, 161, 167, 169, 181, 182, 183, 185, 188, 192, 193, 195, 196, 200, 204, 207, 215, 220, 221, 223, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 241, 242, 243, 244, 259, 265, 271, 274, 276], "periodogram": [7, 201, 234, 257, 258, 260, 274, 278, 279], "power": [7, 134, 146, 154, 160, 181, 182, 183, 191, 208, 211, 213, 214, 218, 221, 222, 223, 234, 250, 251, 253, 261, 277, 278], "densiti": [7, 22, 234, 274, 277], "xx": [7, 234], "welch": [7, 234, 241], "spectrogram": [7, 241, 278, 279], "constel": [7, 134, 146, 154, 157, 160, 182, 208, 209, 217, 227, 254, 263, 278, 279], "symbol_map": [7, 101, 102, 115, 134, 146, 154, 157, 159, 160, 208, 243, 276, 279], "map": [7, 101, 102, 107, 115, 134, 146, 154, 159, 160, 208, 243, 278, 279], "ey": [7, 134, 146, 154, 160, 228, 278, 279], "diagram": [7, 9, 26, 90, 99, 117, 138, 169, 198, 199, 228, 278, 279], "phase_tre": [7, 134, 237, 279], "tree": [7, 237, 279], "continu": [7, 88, 134, 237, 271, 279], "cpm": [7, 237, 279], "kwarg": [7, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246], "e_b": [7, 44, 45, 46, 47, 48, 101, 103, 134, 146, 154, 156, 160, 183, 202, 203, 205, 226, 255, 278], "n_0": [7, 22, 44, 45, 46, 47, 48, 101, 103, 113, 134, 146, 154, 156, 158, 160, 182, 183, 202, 203, 205, 206, 208, 226, 227, 240, 255, 256, 276, 278], "e_": [7, 44, 45, 46, 47, 48, 101, 113, 134, 146, 154, 158, 160, 182, 183, 202, 205, 206, 208, 227, 240, 256, 276, 278], "roc": [7, 37, 40, 164, 167, 239, 279], "receiv": [7, 37, 38, 40, 42, 44, 101, 105, 106, 112, 126, 127, 129, 130, 134, 146, 148, 149, 154, 156, 158, 160, 164, 165, 166, 167, 168, 208, 210, 228, 233, 239, 279], "oper": [7, 37, 40, 164, 167, 239, 279], "characterist": [7, 37, 40, 164, 167, 239, 279], "curv": [7, 37, 40, 156, 158, 164, 167, 226, 239, 240, 279], "enr": [7, 164, 165, 167, 233], "impulse_respons": [7, 26, 35, 49, 57, 72, 80, 88, 90, 99, 136, 169, 192, 193, 194, 195, 196, 197, 211, 214, 231, 250, 251, 253, 272, 273, 277, 279], "step_respons": [7, 26, 35, 49, 62, 72, 85, 88, 90, 99, 136, 169, 242, 272, 273, 275, 279], "step": [7, 26, 35, 49, 62, 72, 85, 88, 90, 99, 136, 138, 139, 145, 169, 229, 242, 278], "zeros_pol": [7, 246, 273, 279], "zero": [7, 26, 27, 35, 49, 54, 69, 72, 73, 78, 87, 88, 90, 91, 92, 99, 117, 136, 139, 169, 171, 194, 213, 214, 220, 229, 230, 231, 232, 235, 236, 242, 246, 251, 257, 261, 272, 274, 275, 277, 278, 279], "pole": [7, 72, 73, 78, 82, 88, 99, 229, 230, 231, 232, 235, 236, 242, 246, 272, 278], "magnitude_respons": [7, 35, 55, 78, 88, 99, 136, 192, 193, 194, 195, 196, 197, 214, 232, 250, 251, 253, 272, 273, 275, 277, 279], "omega": [7, 26, 35, 49, 55, 56, 59, 72, 78, 88, 90, 99, 136, 138, 140, 142, 144, 169, 229, 230, 232, 235, 236, 275], "phase_respons": [7, 55, 78, 236, 279], "angl": [7, 148, 236, 275], "phase_delai": [7, 26, 35, 49, 59, 90, 136, 169, 235, 279], "tau_": [7, 26, 35, 49, 59, 90, 136, 169, 235], "phi": [7, 26, 35, 49, 59, 90, 101, 102, 110, 134, 135, 136, 146, 147, 154, 155, 157, 160, 161, 169, 209, 217, 219, 235], "group_delai": [7, 26, 35, 49, 56, 90, 136, 169, 194, 230, 272, 273, 279], "group": [7, 26, 35, 49, 56, 90, 136, 169, 194, 230, 278], "tau_g": [7, 26, 35, 49, 56, 90, 136, 169, 230], "iir": [7, 9, 18, 57, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 99, 100, 117, 121, 136, 229, 230, 231, 232, 235, 236, 242, 246, 272, 275, 278, 279], "q": [8, 134, 146, 162, 163, 164, 165, 166, 168, 169, 171, 173, 176, 197, 263, 279], "comput": [8, 26, 37, 38, 39, 40, 41, 55, 78, 101, 103, 113, 126, 134, 146, 148, 154, 156, 158, 160, 162, 163, 164, 165, 166, 167, 168, 181, 182, 204, 207, 210, 215, 221, 223, 272, 273, 275, 277, 279], "complementari": [8, 162, 163], "cumul": [8, 162, 163], "distribut": [8, 162, 163], "standard": [8, 162, 163], "normal": [8, 9, 11, 16, 117, 119, 123, 162, 163, 192, 193, 195, 196, 208, 211, 214, 229, 230, 232, 234, 235, 236, 241, 250, 251, 253, 275, 277], "mathcal": [8, 37, 162, 163, 164, 165, 166, 167, 168, 182, 200], "qinv": [8, 162, 163, 279], "invers": [8, 163], "closedlooppl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 266, 275, 279], "defin": [9, 49, 72, 88, 182, 200, 211, 239, 263, 266, 273, 278], "perform": [9, 27, 50, 91, 156, 158, 194, 201, 260, 263, 266, 272, 273, 276, 278, 279], "close": [9, 16, 18, 266, 278, 279], "loop": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 117, 118, 119, 120, 121, 122, 123, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 266, 278, 279], "pll": [9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 266, 278, 279], "meant": 9, "analysi": [9, 16, 268, 275, 278, 279], "onli": [9, 27, 33, 50, 54, 55, 60, 65, 69, 78, 83, 91, 97, 102, 126, 135, 147, 155, 159, 161, 177, 182, 192, 193, 195, 196, 210, 213, 214, 238, 251, 261, 270, 275, 276], "block": [9, 26, 90, 99, 117, 138, 169, 198, 199], "bb": [9, 274, 275], "phase_err": [9, 275], "ped": [9, 15, 16, 119, 126, 130, 131, 132, 148, 149, 150, 151, 152, 153, 266, 275, 279], "lf": [9, 275], "phase_est": [9, 275], "lo": [9, 275], "nco": [9, 12, 16, 119, 138, 139, 140, 141, 142, 143, 144, 145, 266, 275, 278, 279], "local": [9, 267, 275], "oscil": [9, 138, 140, 266, 275, 278, 279], "detector": [9, 15, 16, 37, 119, 126, 133, 148, 153, 164, 275, 279], "filter": [9, 13, 14, 16, 18, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 106, 112, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 134, 136, 137, 146, 154, 160, 169, 170, 171, 172, 174, 175, 177, 178, 192, 193, 194, 195, 196, 197, 201, 211, 214, 228, 229, 230, 231, 232, 235, 236, 242, 246, 247, 250, 251, 253, 260, 266, 277, 278, 279], "numer": [9, 138, 140, 266, 273, 275, 278, 279], "control": [9, 126, 138, 140, 250, 253, 266, 275, 278, 279], "The": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 267, 268, 269, 270, 272, 273, 275, 276, 277, 278, 280], "transfer": [9, 18, 49, 72, 73, 99, 117, 211, 272, 273, 275], "2nd": [9, 117, 119, 266, 275, 279], "proport": [9, 13, 27, 91, 117, 119, 124, 210, 222, 266, 279], "plu": [9, 117, 119, 266, 279], "z": [9, 49, 72, 88, 99, 117, 138, 198, 199, 263, 272, 273, 275], "k_1": [9, 13, 117, 124, 275], "k_2": [9, 14, 117, 122, 275], "frac": [9, 17, 19, 22, 23, 35, 37, 38, 39, 41, 49, 53, 72, 88, 92, 99, 117, 136, 146, 154, 160, 164, 165, 166, 171, 180, 181, 182, 183, 190, 202, 203, 205, 206, 208, 210, 211, 217, 218, 219, 221, 222, 252, 255, 256, 262, 263, 275], "k_0": [9, 12, 16, 119, 138, 140, 141, 275], "k_p": [9, 15, 16, 119, 126, 133, 148, 153, 275], "refer": [9, 17, 19, 20, 21, 22, 23, 35, 37, 38, 39, 41, 42, 65, 117, 126, 128, 129, 130, 148, 149, 156, 158, 164, 165, 166, 168, 180, 182, 190, 192, 193, 194, 195, 196, 197, 208, 209, 211, 213, 221, 247, 250, 253, 254, 261, 263, 273, 277, 278], "michael": [9, 17, 19, 20, 21, 22, 23, 35, 117, 126, 148, 250, 253], "rice": [9, 17, 19, 20, 21, 22, 23, 35, 117, 126, 148, 250, 253], "digit": [9, 17, 19, 20, 21, 22, 23, 35, 117, 126, 148, 156, 158, 250, 253, 275, 278, 279], "commun": [9, 17, 19, 20, 21, 22, 23, 35, 117, 126, 148, 156, 158, 197, 247, 250, 253, 275, 278], "discret": [9, 17, 19, 20, 21, 22, 23, 35, 88, 99, 117, 126, 136, 148, 182, 200, 206, 250, 253, 256, 265, 271, 275, 278, 279], "approach": [9, 17, 19, 20, 21, 22, 23, 35, 117, 126, 148, 183, 186, 189, 250, 253, 275], "appendix": [9, 117, 250, 253], "lock": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 117, 118, 119, 120, 121, 122, 123, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145], "exampl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 33, 34, 35, 36, 38, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 97, 98, 99, 100, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 154, 156, 157, 158, 159, 160, 162, 163, 165, 167, 169, 175, 177, 178, 180, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 222, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 275, 279], "see": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 36, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 82, 83, 84, 86, 87, 89, 97, 100, 117, 118, 119, 120, 121, 122, 123, 124, 125, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 154, 157, 159, 160, 169, 177, 192, 193, 195, 196, 201, 211, 214, 229, 230, 231, 232, 235, 236, 242, 246, 250, 251, 253, 278], "noise_bandwidth": [9, 16, 117, 119, 123], "damping_factor": [9, 16, 117, 119, 120], "creat": [9, 16, 26, 28, 35, 36, 42, 43, 49, 51, 65, 67, 72, 73, 75, 88, 89, 90, 91, 92, 99, 100, 101, 102, 117, 119, 134, 135, 136, 137, 138, 140, 146, 147, 154, 155, 157, 160, 161, 169, 171, 182, 184, 208, 209, 213, 219, 254, 257, 258, 261, 263, 271, 275, 277], "object": [9, 16, 42, 43, 101, 102, 134, 135, 146, 147, 154, 155, 160, 161, 213, 229, 230, 231, 232, 235, 236, 242, 246, 261, 275, 279], "phase_lock_tim": [9, 23], "frequency_lock_tim": [9, 17], "freq_offset": [9, 17, 19], "lock_tim": [9, 19, 275], "phase_error_vari": [9, 22], "cn0": [9, 22], "varianc": [9, 22, 37, 39, 41, 166, 168, 182], "steadi": [9, 22], "state": [9, 22, 26, 27, 33, 35, 49, 50, 54, 60, 61, 63, 65, 69, 70, 72, 83, 84, 86, 88, 90, 91, 97, 99, 136, 169, 177, 279], "sample_r": [9, 16, 24, 26, 55, 56, 59, 78, 90, 91, 134, 146, 154, 160, 169, 201, 209, 219, 228, 229, 230, 232, 234, 235, 236, 237, 238, 241, 244, 257, 258, 260, 271, 275, 277], "bnt": [9, 11, 275], "bandwidth": [9, 10, 11, 16, 20, 36, 117, 119, 123, 183, 192, 193, 211, 250, 253, 275, 277, 279], "b_n": [9, 10, 11, 16, 17, 19, 22, 23, 117, 119, 123], "bn": [9, 10], "hz": [9, 10, 16, 17, 19, 22, 55, 56, 59, 78, 117, 119, 123, 183, 191, 201, 209, 210, 211, 218, 219, 222, 257, 258, 262, 271], "zeta": [9, 16, 25, 117, 119, 120], "damp": [9, 16, 25, 117, 119, 120, 275], "k0": [9, 12, 16, 119, 138, 275], "kp": [9, 15, 16, 119, 275], "k1": [9, 13, 117, 275], "k2": [9, 14, 117, 275], "repres": [9, 18, 185, 186], "omega_n": [9, 21, 275], "natur": [9, 21], "radian": [9, 20, 21, 22, 126, 129, 131, 132, 138, 139, 140, 142, 143, 144, 148, 149, 151, 152, 160, 275], "omega_3db": [9, 20], "3": [9, 17, 19, 20, 23, 26, 31, 34, 35, 37, 38, 42, 55, 78, 88, 90, 91, 95, 98, 99, 126, 134, 136, 138, 146, 148, 154, 156, 157, 158, 159, 160, 164, 165, 169, 175, 178, 180, 182, 183, 184, 185, 187, 188, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 222, 227, 228, 229, 230, 231, 232, 235, 236, 242, 244, 246, 247, 250, 251, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 267, 268, 273, 275, 277, 278], "omega_": [9, 20], "textrm": [9, 20], "properti": [10, 11, 12, 13, 14, 15, 18, 20, 21, 24, 25, 29, 30, 31, 32, 34, 53, 58, 61, 63, 64, 68, 70, 71, 76, 77, 79, 81, 82, 84, 86, 87, 93, 94, 95, 96, 98, 104, 109, 110, 111, 112, 114, 115, 116, 120, 121, 122, 123, 124, 127, 128, 133, 141, 142, 143, 153, 157, 159, 172, 173, 174, 175, 176, 178, 179, 279], "paramet": [16, 17, 19, 22, 27, 28, 36, 38, 39, 40, 41, 44, 45, 46, 48, 50, 51, 55, 56, 57, 59, 62, 66, 67, 69, 73, 74, 75, 78, 80, 85, 89, 91, 92, 100, 102, 103, 105, 106, 107, 108, 113, 118, 119, 129, 130, 131, 132, 135, 137, 139, 140, 145, 147, 149, 151, 152, 155, 156, 158, 161, 162, 163, 165, 166, 167, 168, 171, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "where": [16, 27, 50, 91, 102, 117, 119, 123, 155, 161, 164, 182, 183, 200, 202, 203, 205, 211, 255, 263, 272, 273, 278], "period": [16, 117, 119, 123, 134, 263], "second": [16, 17, 19, 23, 42, 117, 119, 123, 211], "critic": [16, 25, 117, 119, 120, 275], "underdamp": [16, 25, 117, 119, 120], "overdamp": [16, 25, 117, 119, 120], "ted": [16, 119], "t_": [17, 19, 23, 66, 211, 277], "fl": [17, 19], "delta": [17, 19, 26, 35, 49, 57, 72, 80, 88, 90, 99, 136, 169, 194, 231, 272, 273], "take": [17, 19, 23, 267], "onto": [17, 19, 23], "39": 17, "pl": [19, 23, 268], "38": 19, "34": [20, 244], "33": 21, "sigma_": [22, 37, 38, 40], "theta_": [22, 126, 129, 148, 149], "carrier": [22, 154], "43": 22, "40": [23, 35, 90, 169, 201], "less": [25, 180], "than": [25, 134, 135, 147, 155, 159, 161, 180, 214, 217, 227, 243, 251], "greater": [25, 250, 253], "fir": [26, 27, 28, 29, 31, 33, 34, 35, 36, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 90, 91, 92, 93, 95, 97, 98, 99, 100, 136, 137, 169, 170, 171, 172, 175, 177, 178, 192, 193, 194, 195, 196, 197, 228, 229, 230, 231, 232, 235, 236, 242, 246, 247, 274, 278, 279], "note": [26, 31, 34, 35, 37, 38, 39, 41, 49, 72, 88, 90, 95, 98, 99, 117, 126, 136, 138, 148, 164, 165, 166, 168, 169, 175, 178, 180, 182, 183, 186, 189, 194, 198, 199, 211, 217, 222, 228, 247, 263], "equival": [26, 90, 169, 182, 183, 192, 193, 194, 195, 196, 206, 213, 256, 261, 269, 271], "first": [26, 29, 42, 90, 92, 93, 134, 144, 146, 169, 171, 172, 220, 244, 259, 268, 270], "prototyp": [26, 31, 34, 90, 95, 98, 169, 175, 178], "feedforward": [26, 28, 31, 34, 35, 49, 51, 64, 72, 75, 77, 88, 90, 92, 95, 98, 99, 136, 169, 171, 175, 178, 229, 230, 231, 232, 235, 236, 242, 246, 272, 273], "coeffici": [26, 28, 49, 51, 72, 75, 90, 92, 101, 112, 116, 134, 146, 154, 160, 169, 171, 229, 230, 231, 232, 235, 236, 242, 246, 272, 273], "discard": [26, 169], "each": [26, 27, 50, 90, 91, 169, 208, 216, 234, 238, 241], "instead": [26, 90, 169, 227], "ar": [26, 27, 28, 31, 34, 36, 37, 42, 44, 45, 46, 48, 50, 51, 67, 73, 75, 89, 90, 91, 92, 95, 98, 100, 101, 102, 112, 116, 134, 135, 137, 139, 146, 147, 154, 155, 160, 161, 164, 169, 171, 175, 178, 183, 185, 186, 188, 189, 194, 210, 213, 214, 220, 227, 228, 229, 230, 232, 234, 235, 236, 237, 238, 241, 243, 244, 245, 247, 251, 257, 258, 261, 267, 269, 271, 273, 275, 277, 278, 280], "commut": [26, 90, 169], "parallel": [26, 90, 169], "output": [26, 27, 29, 35, 49, 50, 57, 62, 72, 73, 75, 80, 85, 88, 89, 90, 91, 92, 93, 99, 100, 106, 117, 118, 136, 138, 139, 144, 145, 169, 171, 172, 182, 183, 184, 185, 186, 188, 189, 199, 200, 208, 213, 218, 220, 231, 242, 259, 261, 264, 267, 271, 272, 273, 275, 279], "sum": [26, 37, 49, 72, 164, 277], "prevent": [26, 90, 146, 160, 169], "need": [26, 90, 169, 267, 268, 270], "done": [26, 267], "case": [26, 90, 160, 164, 169], "3x": [26, 90], "6": [26, 31, 34, 35, 42, 78, 88, 90, 91, 95, 98, 99, 126, 134, 136, 138, 146, 154, 159, 160, 165, 166, 168, 169, 175, 178, 180, 187, 191, 194, 200, 201, 202, 203, 208, 210, 212, 213, 216, 218, 222, 227, 228, 229, 230, 231, 232, 235, 236, 242, 243, 244, 246, 247, 250, 253, 257, 258, 260, 261, 263, 267, 270, 272, 273, 275, 276], "9": [26, 31, 34, 55, 78, 90, 91, 95, 98, 134, 146, 154, 160, 165, 169, 175, 178, 180, 187, 200, 208, 212, 213, 216, 247, 250, 253, 261, 267, 273, 274, 276, 277], "v": [26, 138, 191, 218, 267], "5": [26, 31, 34, 35, 37, 38, 39, 40, 41, 42, 55, 88, 90, 91, 95, 98, 99, 126, 134, 136, 138, 146, 154, 160, 165, 167, 169, 175, 178, 180, 182, 185, 187, 188, 189, 192, 193, 194, 195, 196, 200, 201, 202, 203, 205, 206, 208, 209, 210, 211, 212, 213, 216, 217, 222, 225, 228, 229, 230, 231, 232, 235, 236, 242, 244, 246, 247, 250, 253, 254, 255, 256, 257, 258, 260, 261, 263, 267, 271, 272, 273, 274, 275, 276, 277], "7": [26, 31, 34, 35, 90, 91, 95, 98, 126, 134, 146, 148, 154, 159, 160, 165, 169, 175, 178, 180, 187, 194, 195, 197, 200, 208, 212, 213, 216, 247, 261, 263, 267, 268, 269, 273, 275], "8": [26, 31, 34, 35, 38, 40, 55, 78, 88, 90, 91, 95, 98, 99, 102, 126, 134, 135, 136, 138, 146, 147, 148, 154, 155, 156, 157, 158, 159, 160, 161, 165, 167, 169, 175, 178, 180, 182, 183, 184, 186, 187, 189, 192, 193, 194, 195, 196, 197, 200, 201, 208, 210, 211, 212, 213, 214, 216, 219, 222, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 240, 242, 243, 244, 245, 246, 247, 250, 251, 253, 257, 258, 260, 261, 263, 272, 273, 274, 275, 277], "summat": 26, "bottom": [26, 90, 169], "top": [26, 90, 169], "adder": [26, 117, 138, 198, 199, 275], "relat": [26, 31, 34, 90, 95, 98, 169, 175, 178, 183, 211], "In": [26, 27, 28, 31, 34, 35, 36, 38, 40, 42, 50, 51, 55, 63, 67, 70, 73, 75, 78, 86, 88, 89, 90, 91, 92, 95, 98, 99, 100, 126, 134, 136, 137, 138, 146, 148, 154, 156, 157, 158, 159, 160, 162, 163, 165, 167, 169, 171, 175, 178, 180, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 222, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 271, 276], "np": [26, 31, 34, 35, 38, 40, 55, 78, 88, 90, 91, 95, 98, 99, 101, 111, 115, 134, 136, 138, 146, 154, 156, 158, 159, 160, 165, 167, 169, 175, 178, 180, 182, 183, 184, 185, 186, 188, 189, 200, 201, 208, 209, 210, 213, 217, 219, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 240, 242, 244, 246, 247, 254, 257, 258, 260, 261, 263, 271, 272, 273, 274, 275, 276, 277], "co": [26, 90, 91, 169, 219], "64": [26, 194, 216, 273], "arang": [26, 31, 34, 90, 91, 95, 98, 169, 175, 178, 182, 184, 201, 213, 219, 247, 257, 258, 260, 261, 263, 271, 275], "280": 26, "out": [26, 31, 34, 42, 55, 78, 90, 91, 95, 98, 126, 134, 146, 154, 157, 159, 160, 162, 163, 169, 175, 178, 184, 185, 187, 188, 191, 198, 199, 200, 202, 203, 205, 206, 208, 210, 212, 213, 218, 220, 222, 225, 245, 247, 248, 249, 255, 256, 259, 261, 262], "plt": [26, 35, 38, 40, 88, 90, 91, 99, 126, 134, 136, 138, 146, 148, 154, 156, 157, 158, 159, 160, 165, 167, 169, 180, 182, 183, 184, 186, 189, 192, 193, 194, 195, 196, 197, 201, 208, 209, 210, 211, 213, 214, 217, 219, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 240, 242, 243, 244, 246, 250, 251, 253, 254, 257, 258, 260, 261, 263, 271, 272, 273, 274, 275, 276, 277], "figur": [26, 35, 38, 40, 88, 90, 91, 99, 126, 134, 136, 138, 146, 148, 154, 156, 157, 158, 159, 160, 165, 167, 169, 180, 182, 183, 184, 186, 189, 192, 193, 194, 195, 196, 197, 201, 208, 209, 210, 211, 213, 214, 217, 219, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 240, 242, 243, 244, 245, 246, 250, 251, 253, 254, 257, 258, 260, 261, 263, 271, 272, 273, 274, 275, 276, 277], "figsiz": [26, 35, 38, 40, 88, 90, 91, 99, 126, 134, 136, 138, 146, 148, 154, 156, 157, 158, 159, 160, 165, 167, 169, 180, 182, 183, 184, 186, 189, 192, 193, 194, 195, 196, 197, 201, 208, 209, 210, 211, 213, 214, 217, 219, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 240, 242, 243, 244, 245, 246, 250, 251, 253, 254, 257, 258, 260, 261, 263, 271, 272, 273, 274, 275, 276, 277], "plot": [26, 35, 38, 40, 55, 56, 57, 59, 62, 78, 80, 85, 88, 90, 91, 99, 126, 134, 136, 138, 146, 148, 154, 156, 157, 158, 159, 160, 165, 167, 169, 182, 183, 184, 186, 189, 192, 193, 194, 195, 196, 197, 201, 208, 209, 210, 211, 213, 214, 217, 219, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 250, 251, 253, 254, 257, 258, 260, 261, 263, 271, 272, 273, 275, 276, 277, 278, 279], "marker": [26, 90, 91, 138, 169, 227, 243, 244, 271, 272, 273, 276], "label": [26, 35, 38, 40, 88, 90, 91, 99, 126, 135, 136, 147, 148, 155, 156, 158, 161, 165, 167, 169, 180, 182, 192, 193, 194, 195, 196, 208, 209, 211, 213, 217, 226, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 240, 241, 244, 250, 253, 254, 261, 271, 274, 275, 276, 277], "o": [26, 90, 91, 169, 271], "titl": [26, 35, 88, 90, 126, 134, 138, 146, 148, 156, 158, 169, 180, 182, 183, 184, 186, 189, 201, 208, 209, 213, 217, 219, 226, 240, 244, 254, 257, 258, 260, 261, 263, 271, 274, 275, 276, 277], "tight_layout": [26, 35, 88, 90, 126, 134, 138, 146, 148, 156, 158, 169, 180, 182, 183, 184, 186, 189, 201, 208, 209, 210, 213, 219, 226, 240, 244, 254, 257, 258, 260, 261, 263, 274, 275, 276, 277], "preserv": [26, 28, 36, 51, 63, 67, 70, 73, 75, 86, 89, 90, 92, 100, 137, 169, 171, 228, 238], "call": [26, 27, 28, 36, 50, 51, 63, 67, 70, 73, 75, 86, 89, 90, 91, 92, 100, 137, 169, 171], "true": [26, 38, 39, 40, 41, 55, 78, 90, 91, 126, 131, 132, 134, 146, 148, 151, 152, 154, 156, 158, 160, 165, 166, 167, 168, 169, 180, 181, 183, 185, 186, 188, 189, 200, 204, 210, 213, 219, 223, 224, 227, 236, 238, 243, 244, 245, 252, 261, 274, 275, 276], "y1": [26, 90, 91, 169, 217], "70": [26, 216], "y2": [26, 90, 91, 169, 217], "140": [26, 201], "y3": [26, 90, 91, 169], "210": 26, "y4": [26, 90, 169], "y5": [26, 90, 169], "flush": [26, 27, 35, 49, 50, 54, 90, 91, 136, 169, 279], "y_1": [26, 90, 169, 217], "y_2": [26, 90, 169, 217], "y_3": [26, 90, 169], "y_4": [26, 90, 169], "y_5": [26, 90, 169], "__call__": [26, 27, 28, 35, 36, 49, 50, 51, 63, 65, 66, 67, 70, 72, 73, 74, 75, 86, 88, 89, 90, 91, 92, 99, 100, 117, 118, 126, 129, 136, 137, 138, 139, 148, 149, 169, 170, 171, 279], "full": [26, 27, 50, 90, 91, 169, 170, 184, 213, 261], "__len__": [26, 35, 49, 52, 90, 136, 169], "reset": [26, 33, 35, 49, 60, 65, 69, 72, 83, 88, 90, 97, 99, 117, 125, 136, 138, 144, 169, 177], "when": [26, 33, 35, 49, 54, 57, 60, 62, 72, 80, 83, 85, 88, 90, 97, 99, 100, 136, 169, 177, 182, 183, 185, 186, 188, 189, 206, 213, 229, 230, 231, 232, 235, 236, 242, 256, 261, 263, 271, 272, 273], "pass": [26, 35, 49, 54, 90, 136, 169, 182, 185, 188, 200, 208, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 265, 267, 269, 272, 273, 279], "through": [26, 35, 49, 54, 90, 136, 146, 160, 169, 185, 188, 200, 265, 272, 273, 275], "indic": [26, 28, 29, 35, 36, 39, 40, 41, 49, 51, 63, 65, 67, 70, 72, 73, 75, 86, 88, 89, 90, 92, 93, 99, 100, 101, 102, 134, 135, 136, 137, 146, 147, 154, 155, 156, 158, 160, 161, 165, 166, 167, 168, 169, 171, 172, 181, 204, 211, 214, 217, 219, 223, 224, 228, 236, 237, 238, 244, 250, 251, 252, 253, 261], "whether": [26, 28, 35, 36, 39, 40, 41, 49, 51, 63, 65, 67, 70, 72, 73, 75, 86, 88, 89, 90, 92, 99, 100, 136, 137, 156, 158, 165, 166, 167, 168, 169, 171, 181, 204, 219, 223, 224, 236, 238, 244, 252], "consist": [26, 35, 44, 45, 46, 47, 48, 49, 61, 90, 136, 169], "previou": [26, 28, 35, 36, 49, 51, 61, 67, 69, 73, 75, 89, 90, 92, 99, 100, 136, 137, 169, 171, 198, 199], "u": [26, 35, 49, 62, 72, 85, 88, 90, 99, 136, 169, 180, 242, 263, 264, 272, 273], "frequency_respons": [26, 35, 49, 55, 72, 78, 88, 90, 99, 136, 169, 279], "numpi": [26, 35, 49, 55, 72, 78, 88, 90, 99, 136, 139, 169, 182, 185, 188, 200, 259, 268, 271, 272, 273, 274, 275, 276, 277, 278], "float64": [26, 35, 49, 55, 72, 78, 88, 90, 99, 136, 138, 139, 169, 184, 213, 261, 264], "complex128": [26, 35, 49, 55, 72, 78, 88, 90, 99, 136, 138, 139, 169], "custom": [26, 30, 90, 94, 102, 147, 155, 161, 169, 174, 192, 193, 195, 196, 279], "multir": [26, 27, 28, 30, 90, 91, 92, 94, 169, 171, 174, 197, 247, 279], "polyphase_tap": [26, 31, 34, 90, 91, 95, 98, 169, 175, 178], "index": [26, 29, 65, 69, 90, 93, 101, 134, 146, 154, 160, 169, 172, 213, 228, 237, 238, 243, 261, 264, 267], "correspond": [26, 29, 42, 47, 90, 93, 169, 172, 238], "mode": [27, 28, 33, 36, 50, 51, 54, 60, 63, 65, 67, 69, 70, 73, 75, 83, 86, 89, 91, 92, 97, 100, 137, 170, 171, 177, 184, 213, 261, 263], "l": [27, 50, 74, 91, 100, 136, 137, 194], "stream": [27, 28, 33, 36, 50, 51, 54, 60, 63, 65, 67, 69, 70, 73, 75, 83, 86, 89, 91, 92, 97, 100, 134, 137, 146, 154, 160, 171, 177, 273], "convolut": [27, 50, 90, 91], "ha": [27, 50, 88, 90, 91, 134, 146, 154, 182, 192, 193, 194, 195, 196, 201, 210, 211, 222, 260, 263, 275, 276, 277], "align": [27, 50, 91, 92, 146, 171, 213, 261, 271], "howev": [27, 44, 45, 46, 48, 50, 91, 117, 186, 189, 213, 261, 271], "produc": [27, 50, 90, 91, 169, 211, 277], "final": [27, 50, 91], "dictat": [27, 50, 91], "argument": [27, 28, 50, 91, 92, 171, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 268, 272, 273], "specif": [28, 47, 55, 78, 92, 171, 270, 277], "npt": [28, 55, 78, 92, 102, 135, 147, 155, 161, 171, 192, 193, 195, 196, 229, 230, 231, 232, 235, 236, 242, 246], "befor": [31, 34, 95, 98, 175, 178, 280], "decomposit": [31, 34, 95, 98, 175, 178, 279], "after": [31, 34, 95, 98, 175, 178], "10": [31, 34, 35, 38, 40, 42, 88, 90, 91, 95, 98, 102, 134, 146, 147, 154, 155, 156, 158, 160, 161, 165, 167, 169, 175, 178, 180, 181, 182, 187, 191, 192, 193, 195, 196, 200, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 235, 236, 240, 242, 244, 246, 247, 250, 251, 252, 253, 254, 255, 256, 261, 271, 272, 273, 274, 275, 276, 277], "cdot": [35, 99, 126, 148, 192, 193, 195, 196, 219], "win": 35, "quad": [35, 136], "le": [35, 136, 180, 194, 219, 222, 250, 253], "truncat": 35, "multipli": [35, 90, 169], "section": [35, 37, 44, 45, 46, 47, 48, 126, 148, 164, 273, 275], "puls": [35, 88, 101, 102, 106, 108, 111, 112, 116, 134, 146, 147, 154, 155, 160, 161, 211, 214, 228, 244, 250, 251, 253, 278, 279], "same": [35, 50, 91, 126, 148, 244, 272], "deriv": 35, "across": [35, 180, 207, 215], "fir_2": 35, "fir_6": 35, "fir_10": 35, "fir_20": 35, "20": [35, 36, 38, 40, 90, 91, 134, 138, 146, 154, 160, 165, 169, 180, 183, 185, 188, 191, 200, 208, 209, 216, 217, 218, 224, 247, 252, 260, 274, 276, 279], "fir_40": 35, "fir_80": 35, "80": [35, 197, 263], "y_axi": [35, 232, 234, 279], "linspac": [35, 38, 55, 78, 88, 156, 158, 165, 183, 186, 189, 210, 226, 240, 273, 274, 275, 276], "100": [35, 40, 55, 72, 78, 80, 85, 88, 99, 136, 138, 156, 158, 180, 182, 183, 186, 189, 191, 192, 193, 195, 196, 208, 218, 219, 226, 228, 229, 231, 237, 240, 242, 254, 257, 258, 260, 271, 275], "ab": [35, 88, 184, 213, 261, 263, 277], "color": [35, 88, 228, 237, 238, 244, 274, 277], "linestyl": [35, 88, 126, 134, 146, 148, 154, 160, 227, 238, 243, 245, 263, 271, 275, 276, 277], "theori": [35, 37, 38, 39, 41, 88, 164, 165, 166, 168], "legend": [35, 88, 126, 148, 180, 192, 193, 194, 195, 196, 217, 271, 274, 275, 277], "d": [35, 49, 53, 136, 207, 210, 215, 222, 267, 269, 278], "lfloor": [35, 49, 53, 136], "rfloor": [35, 49, 53, 136], "blackman": [36, 192, 193, 195, 196], "increas": [36, 210, 222, 273], "scipi": [36, 49, 72, 192, 193, 195, 196, 234, 241, 277, 278], "definit": [36, 229, 230, 231, 232, 235, 236, 242, 246], "get_window": 36, "detail": 36, "If": [36, 40, 69, 102, 139, 147, 155, 161, 167, 169, 181, 182, 183, 200, 204, 220, 223, 224, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 241, 242, 243, 244, 252, 257, 259, 278], "null": [37, 164, 277], "altern": [37, 164, 273], "hypothes": [37, 164], "follow": [37, 42, 101, 134, 146, 154, 160, 217, 227, 238, 241, 243, 245, 247, 275], "assum": [37, 164, 182, 200, 220, 244, 259], "valu": [37, 101, 102, 103, 113, 134, 135, 146, 147, 154, 155, 156, 158, 160, 161, 162, 163, 184, 191, 198, 199, 211, 213, 217, 218, 227, 230, 232, 235, 236, 243, 261, 268, 273, 279], "random": [37, 99, 134, 136, 146, 154, 160, 182, 185, 188, 200, 208, 209, 217, 227, 228, 237, 244, 254, 274, 275, 276], "process": [37, 38, 39, 41, 99, 136, 164, 165, 166, 168, 197, 247, 273, 275, 278], "w": [37, 164, 182, 271, 272, 273, 274, 275, 276, 277], "sigma": [37, 38, 39, 40, 41, 164, 165, 166, 167, 168, 182, 183], "_0": [37, 164], "_1": [37, 164], "test": [37, 164, 268, 269, 278], "statist": [37, 38, 39, 41, 164, 165, 166, 168], "limits_": [37, 49, 72, 164], "left": [37, 38, 39, 72, 146, 148, 154, 160, 164, 165, 166, 168, 180, 181, 182, 183, 204, 207, 208, 210, 211, 217, 219, 222, 223, 224, 252, 263], "right": [37, 38, 39, 72, 146, 148, 154, 160, 164, 165, 166, 168, 180, 181, 182, 183, 204, 207, 208, 210, 211, 217, 219, 222, 223, 224, 252, 263], "gamma": [37, 39, 41, 164, 166, 168, 180], "sim": [37, 164, 182, 268], "chi_": [37, 38, 39], "2n": [37, 38, 39], "text": [37, 160, 164, 180, 181, 182, 183, 186, 189, 190, 191, 197, 208, 209, 210, 218, 221, 223, 224, 252, 254], "under": [37, 164], "detect": [37, 38, 39, 40, 41, 126, 129, 131, 132, 148, 149, 151, 152, 164, 165, 166, 167, 168, 180, 233, 239, 279], "threshold": [37, 39, 41, 164, 166, 168], "q_": [37, 38, 39, 41], "chi_n": [37, 38, 39, 41], "steven": [37, 38, 39, 41, 164, 165, 166, 168], "kai": [37, 38, 39, 41, 164, 165, 166, 168], "fundament": [37, 38, 39, 41, 164, 165, 166, 168], "static": [37, 38, 39, 40, 41, 164, 165, 166, 167, 168, 268], "n_nc": [37, 38, 39, 40, 41, 180], "number": [38, 39, 40, 41, 42, 44, 45, 48, 55, 56, 57, 59, 62, 78, 80, 85, 101, 102, 104, 114, 131, 132, 134, 135, 145, 146, 147, 151, 152, 154, 155, 160, 161, 180, 182, 185, 188, 200, 202, 203, 205, 211, 214, 216, 220, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 241, 242, 247, 250, 251, 253, 255, 259], "For": [38, 39, 41, 165, 166, 168, 182, 201, 210, 260, 267, 272], "101": [38, 40, 165, 167, 192, 193, 195, 196], "25": [38, 185, 188, 194, 200, 225, 228, 248, 249, 271, 274, 275, 277], "1e": [38, 165, 209, 276], "sigma2": [39, 41, 166, 168], "logspac": [40, 55, 78, 167, 180], "theoret": [40, 156, 158, 226, 240, 276, 279], "variou": [40, 268, 277], "1_000": [40, 99, 136, 182, 209, 210, 217, 254, 274], "000": [40, 209], "5_000": 40, "measur": [42, 44, 181, 182, 190, 191, 204, 207, 208, 215, 218, 221, 223, 224, 252, 275, 278, 279], "new": [42, 43, 65, 67, 99, 101, 102, 134, 135, 146, 147, 154, 155, 160, 161, 254], "accumul": [42, 88, 138, 139, 140, 142, 144, 275, 279], "from": [42, 56, 59, 72, 73, 88, 92, 99, 101, 115, 134, 146, 154, 159, 160, 171, 191, 202, 203, 205, 206, 218, 225, 234, 241, 248, 249, 255, 256, 267, 272, 273, 275, 278], "contain": [42, 182, 216], "add": [42, 44, 47, 134, 146, 154, 160, 182, 209, 214, 238, 251, 254, 265, 276, 280], "total": [42, 211, 214, 250, 251, 253, 277], "count": [42, 45, 208], "error_r": [42, 46, 47, 276], "everi": [42, 271], "can": [42, 44, 45, 46, 48, 117, 134, 182, 208, 211, 213, 220, 228, 234, 241, 261, 269, 272, 273, 276, 278, 280], "obtain": 42, "tabul": [42, 43], "all": [42, 47, 139, 208, 228, 237, 238, 268, 270, 278], "ascend": [42, 47], "other": [44, 45, 46, 48, 271, 280], "quantiti": [44, 45, 46, 47, 48], "user": [44, 45, 46, 48, 272, 273], "caution": [44, 45, 46, 48], "instanc": [44, 45, 46, 48, 134], "transmit": [44, 101, 116, 126, 129, 134, 146, 148, 149, 154, 160, 208, 228], "e": [47, 126, 138, 148, 164, 165, 166, 167, 168, 181, 185, 186, 204, 263, 268, 269, 272, 273, 276], "whatev": 47, "wa": [47, 183], "provid": [47, 101, 103, 113, 134, 146, 154, 156, 158, 160, 238, 268, 278], "wrapper": [49, 72], "convolv": 49, "It": [49, 72, 90, 102, 117, 126, 147, 155, 161, 182, 228], "support": [49, 72, 279], "one": [49, 72, 135, 146, 147, 155, 159, 161, 211, 216, 228, 229, 230, 232, 234, 235, 236, 241, 257, 272, 273, 274, 277], "its": [49, 72, 73, 88, 99, 182, 272, 273, 277], "sum_": [49, 72, 166, 168, 181, 182, 183, 204, 207, 208, 215, 252], "valid": [50, 210, 228, 237, 238, 263], "remain": [54, 201, 220], "1024": [55, 56, 59, 78, 229, 230, 232, 235, 236, 274, 277], "whole": [55, 78, 277], "decad": [55, 78, 229, 230, 232, 235, 236, 272, 275], "point": [55, 78, 131, 132, 151, 152, 234, 241], "endpoint": [55, 78, 273], "includ": [55, 78, 268, 269, 270, 278], "integ": [55, 78, 220], "maximum": [55, 78, 101, 105, 106, 126, 134, 146, 154, 160, 211, 214, 227, 243, 250, 251, 253, 266, 275, 279], "max_f": [55, 78], "log10": [55, 78], "evenli": [55, 78], "00000000e": [55, 78, 159, 160, 273], "00": [55, 78, 159, 160, 273], "76562500e": [55, 78], "04": [55, 78, 216, 273], "95312500e": [55, 78], "03": [55, 78, 216, 273], "97070312e": [55, 78], "01": [55, 78, 159, 160, 216, 273, 275], "98046875e": [55, 78], "99023438e": [55, 78], "95337172": 55, "30202676j": 55, "8178049": 55, "5759632j": 55, "6058636": 55, "79630028j": 55, "rad": [55, 78], "0000000000000002": 55, "0j": [55, 78, 135, 147, 155, 161], "sever": [55, 78], "200": [55, 78, 201, 271, 276], "300": [55, 78, 257, 258], "400": [55, 78, 201, 271], "1000": [55, 78, 131, 132, 134, 146, 151, 152, 154, 160, 208, 210, 257, 258, 276], "00391660e": 55, "14686183e": 55, "17j": 55, "53081763e": 55, "88127210e": 55, "62720131e": 55, "03715849e": 55, "83622458e": 55, "27280811e": 55, "resampl": [65, 66, 67, 68, 69, 70, 71, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 197, 247, 278, 279], "http": [65, 180, 190, 192, 193, 194, 195, 196, 197, 211, 213, 221, 261, 263, 267, 268, 269], "wirelesspi": 65, "com": [65, 180, 192, 193, 194, 195, 196, 197, 211, 213, 261, 268, 269], "structur": 65, "should": [69, 126, 134, 228, 269], "equal": [69, 134], "three": [69, 271, 277], "lfilter": 72, "b_i": [72, 75, 77, 88, 99, 229, 230, 231, 232, 235, 236, 242, 246, 273], "feedback": [72, 75, 76, 88, 99, 229, 230, 231, 232, 235, 236, 242, 246, 273], "a_j": [72, 75, 76, 88, 99, 229, 230, 231, 232, 235, 236, 242, 246, 273], "These": [72, 146, 154, 160, 245, 269, 275], "differ": [72, 99, 135, 147, 155, 159, 161, 192, 193, 194, 195, 196, 213, 244, 261, 263, 277], "a_0": 72, "classmethod": [72, 73, 88, 99], "zerospol": [72, 73, 78, 88, 99, 229, 230, 231, 232, 235, 236, 242, 246, 273], "self": [72, 73, 88, 99], "b_tap": [72, 77, 88, 99, 273], "a_tap": [72, 76, 88, 99, 273], "exp": [78, 139, 146, 154, 160, 201, 211, 217, 219, 229, 230, 231, 232, 235, 236, 242, 246, 258, 260, 263, 271, 273, 275], "1j": [78, 201, 219, 229, 230, 231, 232, 235, 236, 242, 246, 258, 260, 271, 273, 275], "conj": [78, 229, 230, 231, 232, 235, 236, 242, 246, 273, 275], "4722987": 78, "47271105": 78, "0041658j": 78, "47394825": 78, "00830241j": 78, "47601067": 78, "01238051j": 78, "472298696877605": 78, "36961426": 78, "9678537j": 78, "57338213": 78, "77694738j": 78, "52496713": 78, "3885743j": 78, "51520024": 78, "1706839j": 78, "accordingli": 88, "dc": [88, 194], "backward": [88, 89, 279, 280], "trapezoid": [88, 89, 279], "forward": [88, 89, 138, 145, 279], "iir_back": 88, "iir_trap": 88, "iir_forw": 88, "y_back": 88, "y_trap": 88, "y_forw": 88, "height": 89, "insert": [90, 169], "hold": [90, 92, 169, 171, 220, 279], "30": [90, 99, 136, 169, 201, 229, 231, 242, 257, 258, 273, 279], "recommend": 90, "wai": [90, 269], "11": [90, 134, 146, 154, 160, 187, 197, 212, 213, 247, 261, 267], "zoh": [90, 92, 94, 169, 171, 174], "12": [90, 134, 146, 154, 160, 166, 168, 180, 187, 197, 212, 247, 272, 276, 279], "13": [90, 134, 146, 154, 160, 164, 165, 166, 168, 184, 187, 212, 244, 247, 279], "matlab": [90, 92, 94, 169, 171, 174, 278], "iter": 91, "shape": [91, 101, 102, 106, 108, 111, 112, 116, 134, 146, 147, 154, 155, 160, 161, 211, 214, 228, 244, 250, 251, 253, 273, 278, 279], "concaten": [91, 273], "linearli": [92, 171], "2r": 92, "ramp": [92, 117, 171], "advanc": [92, 171], "ones": [92, 171, 192, 193, 195, 196, 275], "approxim": [99, 100, 180, 279], "rememb": 99, "scale": [99, 126, 229, 230, 232, 234, 235, 236, 241, 272, 273], "compar": [99, 126, 136, 148, 156, 158, 192, 193, 194, 195, 196, 277], "ylim": [99, 136, 192, 193, 194, 195, 196, 263, 272, 275, 276, 277], "35": [99, 136], "randn": [99, 136, 244], "y_fir": [99, 136], "y_iir": [99, 136], "modul": [101, 102, 108, 109, 111, 126, 131, 132, 134, 138, 146, 147, 148, 151, 152, 154, 155, 156, 158, 160, 161, 202, 203, 205, 208, 226, 228, 237, 240, 243, 244, 255, 267, 270, 276, 278, 279], "nomenclatur": [101, 134, 146, 154, 160], "variabl": [101, 134, 138, 139, 146, 154, 160, 216, 275], "name": [101, 134, 146, 154, 160], "decis": [101, 105, 106, 126, 129, 132, 134, 146, 148, 149, 152, 154, 160, 228, 275], "tild": [101, 105, 106, 126, 129, 134, 146, 148, 149, 154, 160], "map_symbol": [101, 107, 134, 146, 154, 160, 182, 208, 209, 217, 227, 228, 254, 274, 275, 276, 279], "decide_symbol": [101, 105, 134, 146, 154, 160, 275, 276, 279], "a_tild": [101, 105, 134, 146, 154, 160, 275, 276], "likelihood": [101, 105, 106, 126, 134, 146, 154, 160, 266, 275, 279], "mle": [101, 105, 134, 146, 154, 160], "match": [101, 102, 106, 112, 134, 146, 147, 154, 155, 160, 161, 279], "abstract": [101, 103, 113], "log_2": [101, 104, 134, 146, 154, 160, 183, 202, 203, 205, 255], "phase_offset": [101, 102, 110, 134, 135, 146, 147, 154, 155, 157, 160, 161, 182, 208, 209, 217, 227, 228, 243, 244, 254, 274, 275, 276], "degre": [101, 102, 110, 134, 135, 146, 147, 154, 155, 157, 160, 161, 209, 217, 219, 222, 275], "dot": [101, 102, 115, 134, 146, 154, 159, 160, 243], "mapsto": [101, 102, 115, 134, 146, 154, 159, 160, 243], "mathbb": [101, 102, 115, 134, 146, 154, 159, 160, 183, 243, 263], "sym": [101, 102, 114, 134, 135, 146, 147, 154, 155, 160, 161, 203, 206, 211, 255, 256, 277], "pulse_shap": [101, 102, 106, 108, 111, 134, 146, 147, 154, 155, 160, 161, 244, 274, 276], "tx_filter": [101, 116, 134, 146, 154, 160], "rx_filter": [101, 112, 134, 146, 154, 160], "rect": [102, 147, 155, 161, 277], "whose": [102, 135, 147, 154, 155, 161], "import": [102, 126, 147, 155, 161, 269, 271, 272, 273, 274, 275, 276, 277, 278], "string": [102, 147, 155, 161, 216, 234, 241, 279], "roll": [102, 147, 155, 161, 263, 277], "off": [102, 147, 155, 161], "psd": [103, 113, 156, 158, 183, 202, 203, 205, 206, 226, 240, 255, 256], "p_b": 103, "x_tild": 106, "s_hat": [106, 275, 276], "size": [106, 108, 184, 200, 213, 244, 261, 271, 275, 276, 277], "p_e": 113, "loopfilt": [117, 118, 119, 120, 121, 122, 123, 124, 125, 266, 275, 279], "ppi": [117, 119, 266], "track": 117, "constant": [117, 134, 138, 140, 142, 234, 241, 273, 275], "cannot": 117, "chirp": 117, "proportional_gain": [117, 124], "integral_gain": [117, 122], "underli": [117, 121], "mlped": [126, 127, 128, 129, 130, 131, 132, 133, 266, 275, 279], "ml": [126, 130, 266, 275], "aid": [126, 131, 148, 151], "known": [126, 129, 148, 149, 182, 213, 261], "da": [126, 148], "im": 126, "re": [126, 164], "direct": [126, 132, 148, 152, 279], "qpsk": [126, 146, 148, 154, 156, 157, 158, 160, 182, 208, 209, 226, 227, 228, 240, 243, 244, 254, 275, 278, 279], "a_rx": 126, "a_ref": 126, "da_error": [126, 148], "data_aided_error": [126, 131, 148, 151], "dd_error": [126, 148], "decision_directed_error": [126, 132, 148, 152], "grid": [126, 148, 180, 183, 186, 189, 210, 245, 271, 274, 275, 277], "xlabel": [126, 148, 180, 183, 184, 186, 189, 208, 210, 213, 261, 263, 271, 274, 275, 277], "ylabel": [126, 148, 180, 183, 184, 186, 189, 208, 210, 213, 261, 263, 271, 274, 275, 277], "comparison": [126, 148, 268], "observ": [126, 148, 194, 222, 228], "slope": [126, 148], "a_": [126, 127, 128, 130, 197], "rx": [126, 127, 130], "both": [126, 148, 180, 183, 227, 243, 244, 271, 275], "veri": [126, 278], "becaus": [126, 213, 261], "automat": 126, "agc": 126, "15": [126, 134, 167, 187, 212, 213, 247, 260, 261], "also": [126, 134, 148, 194, 210, 211, 278], "unambigu": [126, 148], "rang": [126, 148, 227, 275, 276], "a_receiv": [126, 127, 130], "a_refer": [126, 128, 130], "initi": [126, 130, 148, 150, 275], "simul": [126, 131, 132, 148, 151, 152, 276, 278], "scheme": [126, 131, 132, 134, 146, 148, 151, 152, 154, 160, 279], "settabl": [126, 127, 128, 138, 141, 142, 143], "either": [129, 149, 208], "modem": [131, 132, 134, 146, 151, 152, 154, 160], "n_point": [131, 132, 151, 152], "similar": [134, 146, 160, 277], "One": [134, 146, 160, 277], "distinct": [134, 146, 160], "result": [134, 146, 160, 181, 204, 210, 222, 223, 224, 250, 252, 253, 276], "envelop": [134, 272, 273], "which": [134, 146, 160, 180, 181, 182, 183, 204, 207, 209, 215, 217, 221, 222, 223, 227, 230, 232, 235, 236, 243, 254, 271, 275, 277], "lower": [134, 146, 160, 250, 253], "consid": [134, 216], "cpfsk": 134, "separ": 134, "45": [134, 135, 146, 147, 154, 157, 182, 208, 209, 217, 219, 227, 228, 243, 244, 254, 274, 275, 276], "symbol_label": [134, 135, 146, 147, 154, 155, 159, 160, 161, 276], "randint": [134, 146, 154, 160, 182, 185, 188, 200, 208, 209, 217, 227, 228, 237, 244, 254, 274, 275, 276], "uint8": [134, 146, 154, 160, 220, 259], "complex_symbol": [134, 146, 154, 160], "70710678": [134, 146, 154], "70710678j": [134, 146, 154], "tx_sampl": [134, 146, 154, 160], "50": [134, 146, 154, 160, 191, 218, 225, 243, 244, 257, 258, 271, 274], "like": [134, 269, 278, 279], "channel": [134, 146, 156, 158, 183, 185, 186, 188, 189, 200, 226, 240, 278, 279], "subplot": [134, 146, 217, 275, 276], "imag": [134, 146, 271], "trajectori": 134, "although": 134, "boundari": 134, "lead": [134, 217, 276], "spectral": [134, 201, 234, 274, 277], "effici": [134, 201, 222, 260], "gmsk": 134, "rx_sampl": [134, 146, 154, 160], "last": [134, 146, 220, 267], "rx_symbol": [134, 146, 154, 160], "rx_complex_symbol": [134, 146, 154, 160], "_": [134, 146, 154, 160, 180, 208], "14": [134, 146, 154, 160, 165, 187, 212, 247, 279], "array_equ": [134, 146, 154, 160, 213, 261], "bin": [135, 147, 155, 159, 161, 208, 227, 243, 276], "absolut": [135, 138, 140, 143, 147, 161, 183], "consecut": [135, 147, 155, 161], "adjac": [135, 147, 155, 159, 161, 276, 277], "mai": [135, 147, 155, 159, 161, 208, 227, 238, 241, 243, 245, 273], "more": [135, 147, 155, 159, 161, 279], "start": [135, 147, 155, 161, 267], "go": [135, 147, 155, 161], "counter": [135, 147, 155, 161], "clockwis": [135, 147, 155, 161], "around": [135, 147, 155, 161], "circl": [135, 147, 155, 161, 273], "increment": [138, 139, 140, 142, 275], "Then": 138, "fsk": 138, "60": [138, 192, 193, 195, 196, 277], "repeat": 138, "cp": 138, "57": 138, "bpsk": [138, 156, 158, 226, 240, 274], "vari": 139, "format": [139, 184, 213, 261, 279], "option": [139, 229, 230, 232, 234, 235, 236, 241, 279], "intern": 144, "set": [144, 182, 210, 213, 227, 234, 238, 241, 243, 245, 261, 268, 270, 273], "convent": [146, 160], "transit": [146, 160, 188, 189, 200, 261, 265], "independ": 146, "apart": 146, "origin": [146, 160, 260, 271], "taken": [146, 154, 160], "jq": 146, "begin": [146, 160, 164], "end": [146, 160, 164, 257, 268], "heurist": [148, 266, 275, 279], "dd": [148, 275, 279], "encod": [154, 156, 158, 198, 199, 278], "inform": [154, 202, 203, 205, 213, 255, 261], "ge": [155, 161, 180], "were": [156, 158], "simon": [156, 158], "alouini": [156, 158], "over": [156, 158, 216], "fade": [156, 158], "chapter": [156, 158, 197, 247], "john": [156, 158], "proaki": [156, 158], "optimum": [156, 158], "psk8": [156, 158, 226, 240, 276], "psk16": [156, 158, 226, 240, 276], "de": [156, 158, 275, 279], "se": [158, 240], "00j": [159, 160], "07106781e": [159, 160], "01j": [159, 160], "12323400e": [159, 160], "17": [159, 160, 208, 222, 247, 267], "83697020e": 159, "22464680e": [159, 160], "16j": [159, 160], "annot": [159, 243, 279], "odd": [160, 194, 257], "rotat": [160, 219, 275], "rel": [160, 263, 277], "even": [160, 192, 193, 194, 195, 196, 211, 250, 253], "2m": 160, "displaystyl": 160, "pi4_qpsk": 160, "exceed": [162, 163], "15865525393145707": [162, 163], "158655": [162, 163], "0000010494310452": [162, 163], "perfect": 164, "knowledg": 164, "cn": [164, 182], "mathrm": 164, "sqrt": [164, 165, 166, 168, 180, 207, 208, 211, 252, 263, 274, 275, 277], "____": 169, "down": [169, 171, 173, 197, 247], "2p": 171, "desir": [180, 182, 276], "ln": [180, 211], "62": [180, 216], "log_": [180, 181, 191, 204, 210, 221, 223, 224, 252], "54": [180, 216], "44": 180, "12ab": 180, "7b": 180, "claim": 180, "leq": 180, "8096": 180, "radarsp": 180, "weebli": 180, "upload": 180, "21471216": 180, "albersheim_alternative_form": 180, "pdf": [180, 211], "bpb": 180, "w2": 180, "wpmucdn": 180, "site": [180, 267], "gatech": 180, "edu": 180, "dist": [180, 268], "462": 180, "file": [180, 268, 270], "2016": 180, "noncoher": 180, "www": [180, 192, 193, 194, 195, 196, 197, 211, 213, 261], "mathwork": [180, 192, 193, 194, 195, 196, 197, 211, 213, 261], "help": [180, 192, 193, 194, 195, 196, 197, 211, 213, 261], "html": [180, 192, 193, 194, 195, 196, 197, 211, 213, 261, 267], "semilogx": [180, 239], "nuse": 180, "axi": [181, 204, 207, 215, 221, 223, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 241, 243, 244, 271, 279], "avg": [181, 182, 221], "ax": [181, 204, 207, 215, 221, 223, 245, 279], "along": [181, 204, 207, 215, 221, 223, 279], "entir": [181, 204, 207, 215, 221, 223], "decibel": [181, 191, 204, 218, 223, 224, 252, 278, 279], "seed": [182, 185, 188, 200, 279], "ad": [182, 238, 268, 278, 279], "explicitli": 182, "must": [182, 192, 193, 195, 196, 211, 213, 219, 238, 250, 253, 261, 263], "default_rng": [182, 185, 188, 200], "noisi": 182, "sin": [182, 257], "zorder": [182, 209, 254], "infti": [182, 183], "nand": 182, "capac": [183, 186, 189, 278, 279], "2d": [183, 238], "x_i": [183, 185, 186, 188, 189, 200, 217], "y_i": [183, 185, 186, 188, 189, 200], "monoton": 183, "decreas": 183, "limit": [183, 227, 243, 276], "At": 183, "occur": 183, "view": [183, 268, 278], "59": 183, "shannon": 183, "semilogi": [183, 226, 239, 240], "barker": [184, 264, 278, 279], "int64": [184, 213, 261, 264], "bipolar": [184, 213, 261, 279], "sequenc": [184, 185, 188, 200, 213, 261, 263, 265, 278, 279], "seq": [184, 213, 261], "have": [184, 194, 201, 213, 220, 244, 259, 260, 261], "ideal": [184, 276], "minim": 184, "autocorrel": [184, 213, 261, 263], "sidelob": [184, 192, 193, 195, 196, 213, 250, 253, 261, 263], "corr": [184, 263], "lag": [184, 213, 261, 263], "roughli": [185, 188, 271], "eras": 185, "flip": 188, "h_b": 189, "cf": 190, "v_": [190, 191, 218, 224, 252], "en": [190, 221, 263], "wikipedia": [190, 221, 263], "org": [190, 221, 263], "wiki": [190, 221, 263], "type": [191, 208, 218, 220, 234, 239, 241, 259, 279], "voltag": [191, 218, 224, 252, 278], "x_": [191, 218], "mhz": [191, 218], "77": [191, 216, 218], "50e6": 191, "76": [191, 216], "98970004336019": 191, "mw": [191, 218], "dbm": [191, 218], "dbv": [191, 218], "020599913279624": 191, "center_freq": [192, 193], "hann": [192, 193, 195, 196, 234, 241], "harri": [192, 193, 195, 196, 197, 247], "chebyshev": [192, 193, 195, 196], "atten": [192, 193, 195, 196], "nyquist": [192, 193, 195, 196, 201, 228, 260, 277], "side": [192, 193, 211, 229, 230, 232, 234, 235, 236, 241, 272, 273, 274, 277], "about": [192, 193, 244, 270], "No": [192, 193, 195, 196], "blackmanharri": [192, 193, 195, 196], "chebwin": [192, 193, 195, 196], "attenu": [192, 193, 195, 196, 197, 250, 253], "dsp": [192, 193, 194, 195, 196, 197, 278], "designbandpassfir": 192, "h_ham": [192, 193, 195, 196], "h_hann": [192, 193, 195, 196], "h_blackman": [192, 193, 195, 196], "h_blackman_harri": [192, 193, 195, 196], "h_chebyshev": [192, 193, 195, 196], "h_kaiser": [192, 193, 195, 196], "larger": [193, 214, 217, 227, 243, 251], "designbandstopfir": 193, "75": [193, 216, 227, 275, 276], "best": 194, "append": [194, 257, 274], "tau": 194, "l_": 194, "designfracdelayfir": 194, "flat": 194, "h_8": [194, 250, 253], "h_16": [194, 250, 253], "h_32": 194, "32": [194, 271], "h_64": 194, "cutoff_freq": [195, 196], "cutoff": [195, 196], "f_c": [195, 196], "designhighpassfir": 195, "designlowpassfir": 196, "half_length": 197, "a_stop": 197, "stopband": [197, 250, 253], "stop": 197, "fred": [197, 247], "system": [197, 206, 213, 247, 256, 261, 268, 270, 275, 278], "designmultiratefir": 197, "oplu": [198, 199, 215], "uncod": 199, "dmc": [200, 265, 278, 279], "memoryless": [200, 265, 278], "pr": 200, "y_j": 200, "alphabet": 200, "ldot": 200, "doe": [201, 260], "anti": [201, 260, 279], "alias": [201, 260, 279], "x1": 201, "x2": 201, "130": 201, "x3": [201, 263], "spectrum": [201, 229, 230, 232, 234, 235, 236, 241, 257, 258, 260], "content": 201, "abov": [201, 260], "fold": 201, "cw": 201, "unalias": 201, "fft": [201, 234, 241, 257, 258, 260], "2048": [201, 257, 258, 260, 274], "xlim": [201, 260, 274, 275, 277], "qam": [202, 203, 205, 255], "249387366082999": [202, 203], "020599913279625": [202, 256], "7506126339170005": [205, 255], "979400086720376": [205, 206], "norm": [208, 211, 214, 250, 251, 253], "noiseless": 208, "sourc": 208, "max": [208, 223, 224], "instantan": 208, "percentil": [208, 241], "137185863600438": 208, "134066852635419": 208, "28282634034826": 208, "95th": 208, "95": 208, "24213942845563": 208, "inst_evm": 208, "hist": 208, "histogram": 208, "frequency_offset": [209, 265, 279], "freq_rat": 209, "cycl": [209, 244], "5e": 209, "deg": [209, 217, 275], "path": [210, 278], "loss": [210, 278], "meter": [210, 222, 262], "transmitt": 210, "far": 210, "field": 210, "neg": [210, 217], "impli": 210, "possibl": [210, 278], "so": [210, 211, 214, 250, 251, 253, 278], "km": 210, "link": [210, 278, 279], "ghz": [210, 222, 262], "1e3": [210, 219, 257], "1e9": [210, 222, 262], "92": 210, "44778322188337": 210, "doubl": [210, 222], "2e3": 210, "98": 210, "468383135163": 210, "2e9": 210, "product": [211, 277], "thought": [211, 280], "smaller": [211, 250, 253, 277], "wider": 211, "how": [211, 214, 228, 237, 238, 244, 250, 251, 253, 261, 270], "gaussdesign": 211, "onlinelibrari": 211, "wilei": 211, "doi": 211, "1002": 211, "9780470041956": 211, "app2": 211, "h_0p1": [211, 250, 253], "h_0p2": 211, "h_0p3": 211, "hadamard": [213, 261, 264, 279], "comm": [213, 261], "hadamardcod": 213, "walsh": [213, 261, 264, 279], "thei": [213, 261, 280], "cross": [213, 261, 263], "seq1": [213, 261], "seq2": [213, 261], "seq3": [213, 261], "quit": [213, 261], "larg": [213, 261, 268], "misalign": [213, 261], "spread": [213, 261], "precis": [213, 261], "xcorr12": [213, 261], "xcorr13": [213, 261], "xcorr23": [213, 261], "uniform": [213, 261], "fact": [213, 261], "high": [213, 261], "acorr1": [213, 261], "acorr2": [213, 261], "acorr3": [213, 261], "reason": [214, 251, 267], "h_half_sin": 214, "displai": [216, 227, 229, 230, 232, 234, 235, 236, 241, 243], "line": [216, 244, 268, 274], "print": [216, 271, 272, 273, 275], "quick": 216, "brown": 216, "fox": 216, "jump": 216, "lazi": 216, "dog": 216, "00000000": 216, "68": 216, "65": 216, "71": 216, "69": 216, "63": 216, "6b": 216, "72": 216, "6f": 216, "6e": 216, "00000010": 216, "66": 216, "78": 216, "6a": 216, "6d": 216, "73": 216, "74": 216, "00000020": 216, "6c": 216, "61": 216, "7a": 216, "79": 216, "67": 216, "he": 216, "02": [216, 273, 275], "00000004": 216, "05": [216, 271, 273, 275], "06": 216, "07": 216, "08": 216, "00000008": 216, "09": 216, "0a": 216, "iq_imbal": [217, 265, 279], "iq": [217, 265, 278], "imbal": [217, 265, 278], "posit": 217, "compon": [217, 257, 258, 260], "g_i": 217, "180": 217, "g_q": 217, "x_q": 217, "horizont": 217, "stretch": 217, "while": [217, 277], "vertic": 217, "northwest": 217, "northeast": 217, "50118723": 218, "36272725": 218, "9952623149688795": 218, "satisfi": 219, "remov": [219, 234, 241, 279], "dtypelik": [220, 259], "most": [220, 259], "signific": [220, 259], "enough": 220, "fill": 220, "smallest": 220, "unsign": 220, "diamet": 222, "55": [222, 244], "eta": 222, "dbi": 222, "arcsin": 222, "83": 222, "dish": 222, "21": [222, 244], "810210290266568": 222, "437435887991374": 222, "23": 222, "sinc": [222, 228, 267, 276], "antenna": [222, 278], "we": [222, 278], "830810203546193": 222, "529544741425365": 222, "keyword": [226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 272, 273], "pyplot": [226, 227, 230, 231, 232, 233, 234, 235, 236, 240, 241, 242, 243, 244, 245, 246, 271, 272, 273, 274, 275, 276, 277], "heatmap": [227, 276], "scatter": 227, "overwritten": [227, 238, 241, 243], "hist2d": 227, "10_000": 227, "imaginari": [228, 238, 244], "interleav": [228, 238], "base": [228, 237, 238, 244, 279], "examin": 228, "intersymbol": 228, "interfer": 228, "isi": 228, "cascad": 228, "why": 228, "often": [228, 271], "practic": 228, "n_time": [229, 273], "n_freq": 229, "x_axi": [229, 230, 232, 234, 235, 236, 241, 272, 273, 274, 275, 279], "log": [229, 230, 232, 234, 235, 236, 272, 273, 275], "n_t": 229, "n_f": 229, "logarithm": [229, 230, 232, 234, 235, 236, 272, 273], "h_srrc": [229, 230, 231, 232, 235, 236, 242, 246, 276], "auto": [230, 232, 235, 236, 279], "select": [230, 232, 235, 236, 268], "x_label": 233, "overlap": [234, 241, 274], "detrend": [234, 241], "median": 234, "segment": [234, 241], "256": [234, 241, 274], "trend": [234, 241], "unwrap": [236, 275], "stride": 238, "colorbar": 238, "1d": 238, "determin": 238, "row": 238, "collect": 238, "linecollect": 238, "linewidth": [238, 263], "solid": [238, 244], "cmap": 238, "rainbow": 238, "loglog": 239, "pcolormesh": 241, "vmin": 241, "10th": 241, "vmax": 241, "100th": 241, "shade": 241, "gouraud": 241, "represent": [243, 279], "markers": 243, "diff": [244, 274], "mutual": 244, "exclus": 244, "current": [244, 269], "dash": 244, "share": 244, "10e3": 244, "uniformli": 244, "style": 245, "revert": 245, "rcdefault": 245, "_rc_param": 245, "rc_param": 245, "autolayout": 245, "max_open_warn": 245, "titleweight": 245, "bold": 245, "arrang": 247, "column": 247, "notion": 247, "demonstr": 247, "matric": 247, "18": [247, 267, 276], "19": [247, 279], "000005": 248, "5000": [248, 249], "000000025": 248, "005": [249, 275], "000025": 249, "excess": [250, 253, 277], "narrow": [250, 253], "expens": [250, 253], "higher": [250, 253, 277], "h_0p5": [250, 253], "h_0p9": [250, 253], "affect": [250, 253], "longer": [250, 253, 257], "h_4": [250, 253], "h_rect": [251, 277], "sample_rate_offset": [254, 265, 279], "250": [257, 258, 275], "ksp": [257, 258], "notic": [257, 258, 271, 277], "conjug": [257, 258, 273], "500": [257, 258, 275], "now": [257, 258, 271, 279], "150": [257, 258], "asymmetr": 258, "copi": 260, "mani": [261, 268], "walshcod": 261, "299792458": 262, "zadoff_chu": [263, 264, 279], "zadoff": [263, 264, 278, 279], "chu": [263, 264, 278, 279], "prime": 263, "gcd": 263, "ne": 263, "cyclic": 263, "x_u": 263, "c_": 263, "2q": 263, "mod": 263, "e2": 263, "93chu_sequ": 263, "x_3": 263, "139": 263, "tile": 263, "x_5": 263, "x5": 263, "xcorr": 263, "sphinx": 267, "immateri": 267, "theme": 267, "depend": [267, 268, 270], "store": [267, 269, 270], "txt": [267, 268, 269, 270], "some": 267, "below": [267, 272, 273], "version": [267, 269, 278], "aren": 267, "resolut": 267, "minut": 267, "ci": 267, "myst": 267, "parser": 267, "updat": [267, 279], "git": [267, 269], "math": 267, "dollar": 267, "ipykernel": 267, "26": 267, "nb": 267, "pickleshar": 267, "switch": 267, "pip": [267, 268, 269, 270, 278], "python3": [267, 268, 269, 270, 278], "built": 267, "run": 267, "command": [267, 268], "dirhtml": 267, "locat": [267, 270], "home": 267, "page": 267, "directori": [267, 269], "get": 267, "necessari": 267, "webpag": 267, "webserv": 267, "easili": [267, 268, 270, 272, 273], "python": [267, 278], "server": 267, "8080": 267, "access": 267, "web": 267, "browser": 267, "localhost": 267, "librari": [268, 269, 270, 271, 276, 278, 280], "ruff": [268, 269, 279], "lint": [268, 269], "your": [268, 270], "develop": [268, 269, 270], "dev": [268, 270], "pyproject": [268, 270], "toml": [268, 269, 270], "tool": [268, 270, 278], "src": 268, "extend": 268, "ipynb": 268, "exclud": 268, "build": [268, 278], "_version": 268, "py": [268, 270], "120": 268, "doc": 268, "pycodestyl": 268, "pyflak": 268, "pyupgrad": 268, "flake8": 268, "bugbear": 268, "simplifi": 268, "isort": 268, "pylint": [268, 279], "npy": 268, "rule": 268, "ruf": 268, "ignor": 268, "e501": 268, "too": 268, "long": 268, "e713": 268, "e714": 268, "plr2004": 268, "magic": 268, "plr0913": 268, "plr5501": 268, "collaps": 268, "els": [268, 274], "plr0912": 268, "branch": [268, 269], "plr0915": 268, "statement": 268, "__init__": 268, "f401": 268, "f403": 268, "manual": [268, 270], "check": 268, "hook": 268, "config": [268, 271, 272, 273, 274, 275, 276, 277], "yaml": 268, "repo": [268, 269], "github": [268, 278], "rev": 268, "v2": 268, "id": 268, "fixer": 268, "trail": 268, "whitespac": 268, "astral": 268, "sh": 268, "v0": 268, "enabl": 268, "disabl": 268, "uninstal": 268, "extens": 268, "vscode": [268, 270], "json": [268, 270], "you": [268, 269, 270, 278], "edit": [268, 273], "latest": [269, 278], "releas": [269, 279], "main": [269, 277], "mhostett": [269, 279], "Or": [269, 270], "pre": 269, "To": 269, "activ": 269, "benefici": 269, "fashion": 269, "allow": [269, 270], "chang": [269, 280], "immedi": 269, "seen": 269, "upon": 269, "next": 269, "clone": 269, "wherev": 269, "flag": 269, "packag": [269, 278], "commit": 269, "pytest": [269, 270], "cov": 269, "xdist": 269, "benchmark": 269, "ini_opt": 270, "minvers": 270, "addopt": 270, "showloc": 270, "testpath": 270, "execut": 270, "test_psk": 270, "instruct": 270, "invok": 270, "infrastructur": 270, "debug": 270, "inlinebackend": [271, 272, 273, 274, 275, 276, 277], "print_figure_kwarg": [271, 272, 273, 274, 275, 276, 277], "facecolor": [271, 272, 273, 274, 275, 276, 277], "inlin": [271, 272, 273, 274, 275, 276, 277], "widget": [271, 272, 273, 274, 275, 276, 277], "tx": 271, "decai": [271, 273], "fillstyl": 271, "show": [271, 272, 273, 274, 275, 276, 277], "accomplish": [271, 276], "def": [271, 274, 276], "resample_sign": 271, "new_sample_r": 271, "ty": 271, "gca": [271, 276], "set_prop_cycl": [271, 276], "four": 271, "appear": 271, "fourth": 271, "do": 271, "315": 271, "00095883": 272, "00175012": 272, "00423921": 272, "0058825": 272, "006151": 272, "00474595": 272, "0017044": 272, "00254816": 272, "00721645": 272, "0112324": 272, "01342358": 272, "01273202": 272, "00845058": 272, "0004368": 272, "01073669": 272, "02372977": 272, "03650247": 272, "04650654": 272, "05098525": 272, "04734644": 272, "03355896": 272, "00851486": 272, "02769991": 272, "07367348": 272, "12670446": 272, "18301321": 272, "23810898": 272, "28727058": 272, "32607991": 272, "35093841": 272, "35949665": 272, "conveni": [272, 273], "evalu": [272, 273], "29": 272, "31": 272, "here": [272, 273], "478207252018059": 273, "6400000000000001": 273, "7391036260090295": 273, "3061467458920719j": 273, "47820725": 273, "78207252e": 273, "58172329e": 273, "10862468e": 273, "86109590e": 273, "21565653e": 273, "01140214e": 273, "57286400e": 273, "67772160e": 273, "47338728e": 273, "10422993e": 273, "89312837e": 273, "12240078e": 273, "03953322e": 273, "69685122e": 273, "63882791e": 273, "81474977e": 273, "47193366e": 273, "85259041e": 273, "15647504e": 273, "23851924e": 273, "42176895e": 273, "84684395e": 273, "42721858e": 273, "72236648e": 273, "14721649e": 273, "10813095e": 273, "94024315e": 273, "78877688e": 273, "74077567e": 273, "87820725": 273, "53637958": 273, "94724205": 273, "13335164": 273, "1455082": 273, "04436799": 273, "88708159": 273, "71930943": 273, "5719707": 273, "46154771": 273, "39261642": 273, "36139242": 273, "35935288": 273, "3763214": 273, "40270968": 273, "43085717": 273, "45557651": 273, "47410241": 273, "48566716": 273, "49090568": 273, "49124786": 273, "48840102": 273, "4839738": 273, "47925143": 273, "47510421": 273, "47199608": 273, "47005584": 273, "46917696": 273, "46911955": 273, "denomin": 273, "73910363": 273, "30614675j": 273, "plane": 273, "092337035029908": 273, "71104892744724": 273, "684365018955985": 273, "37868538208862": 273, "1263714068241546": 273, "9993519409971622": 273, "1909320767063554": 273, "016796159999999997": 273, "46380627201816593": 273, "3806359704987265j": 273, "4988817673791569": 273, "3333421398098428j": 273, "5543277195052645": 273, "22961005941814036j": 273, "5291527586123693": 273, "28283804209787544j": 273, "lyon": 273, "understand": 273, "3rd": 273, "insid": 273, "outsid": 273, "unstabl": 273, "n_symbol": 274, "pb": 274, "x_bb_rect": 274, "papr_bb_rect": 274, "x_pb_rect": 274, "papr_pb_rect": 274, "x_bb_0p1": 274, "papr_bb_0p1": 274, "x_pb_0p1": 274, "papr_pb_0p1": 274, "x_bb_0p5": 274, "papr_bb_0p5": 274, "x_pb_0p5": 274, "papr_pb_0p5": 274, "x_bb_0p9": 274, "papr_bb_0p9": 274, "x_pb_0p9": 274, "papr_pb_0p9": 274, "2f": 274, "rf": [274, 275], "512": 274, "sweep_alpha": 274, "bb_papr": 274, "pb_papr": 274, "bpsk_bb_papr": 274, "bpsk_pb_papr": 274, "qpsk_bb_papr": 274, "qpsk_pb_papr": 274, "psk8_bb_papr": 274, "psk8_pb_papr": 274, "psk16_bb_papr": 274, "psk16_pb_papr": 274, "configur": 275, "loop_filt": 275, "0x7f28f4d4ab90": 275, "theta_0": 275, "phase_error": 275, "freq_estim": 275, "suptitl": [275, 276], "make": [275, 280], "a_hat": [275, 276], "rad2deg": 275, "avail": [275, 276, 278], "001": 275, "b_nt": 275, "0005": 275, "0125": 275, "015": 275, "0175": 275, "t_lock": 275, "analyze_psk": 276, "100_000": 276, "n0": 276, "tx_mf": 276, "1e6": 276, "bpsk_ber": 276, "bpsk_ser": 276, "qpsk_ber": 276, "qpsk_ser": 276, "psk8_ber": 276, "psk8_ser": 276, "psk16_ber": 276, "psk16_ser": 276, "1e0": 276, "psk8_bin": 276, "psk8_grai": 276, "wors": 276, "rc_0p1": 277, "rc_0p5": 277, "rc_0p9": 277, "pm": 277, "nearli": 277, "small": 277, "lobe": 277, "much": 277, "freqz": 277, "worn": 277, "h_rc_0p1": 277, "h_rc_0p5": 277, "h_rc_0p9": 277, "p_rect": 277, "cumsum": 277, "p_rc_0p1": 277, "p_rc_0p5": 277, "p_rc_0p9": 277, "within": 277, "srrc_0p1": 277, "srrc_0p5": 277, "srrc_0p9": 277, "therefor": 277, "significantli": 277, "due": 277, "being": 277, "h_srrc_0p1": 277, "h_srrc_0p5": 277, "h_srrc_0p9": 277, "p_srrc_0p1": 277, "p_srrc_0p5": 277, "p_srrc_0p9": 277, "gauss_0p1": 277, "gauss_0p2": 277, "gauss_0p3": 277, "softwar": 278, "radio": 278, "goal": 278, "analyz": 278, "reli": 278, "interoper": 278, "numba": 278, "acceler": 278, "computation": 278, "intens": 278, "addition": 278, "aim": 278, "replic": 278, "relev": 278, "toolbox": 278, "progress": 278, "someth": 278, "pleas": 278, "open": 278, "issu": 278, "pypi": 278, "api": [278, 280], "convers": [278, 279], "synchron": 278, "budget": [278, 279], "manipul": 278, "decemb": 279, "2023": 279, "rework": 279, "frequency_response_log": 279, "explicit": 279, "improv": 279, "jupyt": 279, "notebook": 279, "matt": 279, "hostett": 279, "novemb": 279, "abil": 279, "renam": 279, "multirate_tap": 279, "polyphase_matrix": 279, "model": 279, "replac": 279, "black": 279, "septemb": 279, "sensibl": 279, "august": 279, "27": 279, "without": 279, "superflu": 279, "translat": 279, "fix": [279, 280], "juli": 279, "firinterpol": 279, "impair": 279, "fpsl": 279, "helper": 279, "synthes": 279, "semant": 280, "major": 280, "minor": 280, "patch": 280, "introduc": 280, "featur": 280, "compat": 280, "bug": 280, "There": 280, "guarante": 280, "them": 280}, "objects": {"": [[3, 0, 0, 1, "sdr", ""]], "sdr": [[9, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [26, 1, 1, "", "Decimator", "Implements a polyphase decimating FIR filter."], [35, 1, 1, "", "Differentiator", "Implements a differentiator FIR filter."], [37, 1, 1, "", "EnergyDetector", "Implements an energy detector."], [42, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [49, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [65, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [72, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [88, 1, 1, "", "Integrator", "Implements an integrator IIR filter."], [90, 1, 1, "", "Interpolator", "Implements a polyphase interpolating FIR filter."], [99, 1, 1, "", "LeakyIntegrator", "Implements a leaky integrator IIR filter."], [101, 1, 1, "", "LinearModulation", "Implements linear phase/amplitude modulation with arbitrary symbol mapping."], [117, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [126, 1, 1, "", "MLPED", "Implements a maximum-likelihood phase error detector (ML-PED)."], [134, 1, 1, "", "MSK", "Implements minimum-shift keying (MSK) modulation and demodulation."], [136, 1, 1, "", "MovingAverager", "Implements a moving average FIR filter."], [138, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [146, 1, 1, "", "OQPSK", "Implements offset quadrature phase-shift keying (OQPSK) modulation and demodulation."], [148, 1, 1, "", "PED", "Implements a heuristic phase error detector (PED)."], [154, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [160, 1, 1, "", "PiMPSK", "Implements $pi/M$ phase-shift keying ($pi/M$ PSK) modulation and demodulation."], [162, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [163, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [164, 1, 1, "", "ReplicaCorrelator", "Implements an clairvoyant replica-correlator detector."], [169, 1, 1, "", "Resampler", "Implements a polyphase rational resampling FIR filter."], [180, 5, 1, "", "albersheim", "Estimates the minimum required single-sample SNR, given $N_{NC}$ non-coherent combinations, to achieve a probability of detection $P_D$ and probability of false alarm $P_{FA}$. This function implements Albersheim's equation."], [181, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [182, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [183, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [184, 5, 1, "", "barker", "Returns the Barker code/sequence of length $N$."], [185, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [186, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [187, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [188, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [189, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [190, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [191, 5, 1, "", "db", "Converts from linear units to decibels."], [192, 5, 1, "", "design_bandpass_fir", "Designs a bandpass FIR filter impulse response $h[n]$ using the window method."], [193, 5, 1, "", "design_bandstop_fir", "Designs a bandstop FIR filter impulse response $h[n]$ using the window method."], [194, 5, 1, "", "design_frac_delay_fir", "Designs a fractional delay FIR filter impulse response $h[n]$ using the Kaiser window method."], [195, 5, 1, "", "design_highpass_fir", "Designs a highpass FIR filter impulse response $h[n]$ using the window method."], [196, 5, 1, "", "design_lowpass_fir", "Designs a lowpass FIR filter impulse response $h[n]$ using the window method."], [197, 5, 1, "", "design_multirate_fir", "Designs a multirate FIR filter impulse response $h[n]$ using the Kaiser window method."], [198, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [199, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [200, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [201, 5, 1, "", "downsample", "Downsamples the time-domain signal $x[n]$ by the factor $r$."], [202, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [203, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [204, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [205, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [206, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [207, 5, 1, "", "euclidean", "Measures the Euclidean distance between two signals $x[n]$ and $y[n]$."], [208, 5, 1, "", "evm", "Calculates the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [209, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [210, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [211, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [212, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [213, 5, 1, "", "hadamard", "Returns the Hadamard code/sequence of length $N$."], [214, 5, 1, "", "half_sine", "Returns a half-sine pulse shape."], [215, 5, 1, "", "hamming", "Measures the Hamming distance between two signals $x[n]$ and $y[n]$."], [216, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [217, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [218, 5, 1, "", "linear", "Converts from decibels to linear units."], [219, 5, 1, "", "mix", "Mixes the time-domain signal $x[n]$ with a complex exponential or real sinusoid."], [220, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [221, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [222, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [223, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [224, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [225, 5, 1, "", "percent", "Converts from a ratio to a percentage."], [247, 5, 1, "", "polyphase_decompose", "Decomposes the FIR filter taps $h_i$ into the polyphase matrix $H_{i, j}$ with $B$ phases."], [248, 5, 1, "", "ppb", "Converts from a ratio to parts per billion (ppb)."], [249, 5, 1, "", "ppm", "Converts from a ratio to parts per million (ppm)."], [250, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [251, 5, 1, "", "rectangular", "Returns a rectangular pulse shape."], [252, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [253, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [254, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [255, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [256, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [257, 5, 1, "", "to_complex_bb", "Converts the real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$ to a complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c} = f_{s,r}/2$."], [258, 5, 1, "", "to_real_pb", "Converts the complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$ to a real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r} = 2f_{s,c}$."], [259, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [260, 5, 1, "", "upsample", "Upsamples the time-domain signal $x[n]$ by the factor $r$."], [261, 5, 1, "", "walsh", "Returns the Walsh code/sequence of length $N$."], [262, 5, 1, "", "wavelength", "Calculates the wavelength $lambda$ of an electromagnetic wave with frequency $f$."], [263, 5, 1, "", "zadoff_chu", "Returns the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.ClosedLoopPLL": [[10, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [11, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [12, 2, 1, "", "K0", "The NCO gain $K_0$."], [13, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [14, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [15, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [16, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [17, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [18, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [19, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [20, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [21, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [22, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [23, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [24, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [25, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[16, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [16, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [16, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [16, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [16, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[17, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[19, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[22, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.Decimator": [[27, 3, 1, "", "__call__", "Filters and decimates the input signal $x[n]$ with the polyphase FIR filter."], [28, 3, 1, "", "__init__", "Creates a polyphase FIR decimating filter."], [29, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [30, 2, 1, "", "method", "The method used to design the multirate filter."], [31, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [32, 2, 1, "", "rate", "The decimation rate $r$."], [33, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [34, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Decimator.__call__": [[27, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [27, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Decimator.__init__": [[28, 4, 2, "p-rate", "rate", "The decimation rate $r$."], [28, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [28, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.Differentiator": [[36, 3, 1, "", "__init__", "Creates a differentiator FIR filter."]], "sdr.Differentiator.__init__": [[36, 4, 2, "p-order", "order", "The order of the FIR differentiator $N$. The filter length is $N + 1$. Increasing the filter order increases the bandwidth of the differentiator."], [36, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [36, 4, 2, "p-window", "window", "The SciPy window definition. See scipy.signal.windows.get_window() for details. If None, no window is applied."]], "sdr.EnergyDetector": [[38, 3, 1, "", "p_d", "Computes the probability of detection $P_D$."], [39, 3, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [40, 3, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [41, 3, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.EnergyDetector.p_d": [[38, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [38, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [38, 4, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.p_fa": [[39, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [39, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [39, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [39, 4, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.EnergyDetector.roc": [[40, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [40, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [40, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."], [40, 4, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.threshold": [[41, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [41, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [41, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [41, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.ErrorRate": [[43, 3, 1, "", "__init__", "Creates a new error rate tabulation object."], [44, 3, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [45, 3, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [46, 3, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [47, 3, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [48, 3, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[44, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [44, 4, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [44, 4, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[45, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[46, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[48, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[50, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the FIR filter."], [51, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [52, 3, 1, "", "__len__", "Returns the filter length $N + 1$."], [53, 2, 1, "", "delay", "The delay of the FIR filter $d = lfloor frac{N + 1}{2} rfloor$ in samples."], [54, 3, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [55, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the FIR filter."], [56, 3, 1, "", "group_delay", "Returns the group delay $tau_g(omega)$ of the FIR filter."], [57, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [58, 2, 1, "", "order", "The order of the FIR filter $N$."], [59, 3, 1, "", "phase_delay", "Returns the phase delay $tau_{phi}(omega)$ of the FIR filter."], [60, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [61, 2, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [62, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [63, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [64, 2, 1, "", "taps", "The feedforward taps $h_i$ for $i = 0,...,N$."]], "sdr.FIR.__call__": [[50, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [50, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.FIR.__init__": [[51, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$ for $i = 0,...N$."], [51, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FIR.frequency_response": [[55, 4, 2, "p-decades", "decades", "Only used if freqs is an integer."], [55, 4, 2, "p-freqs", "freqs", "The frequency specification."], [55, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [55, 4, 2, "p-whole", "whole", "Only used if freqs is an integer."]], "sdr.FIR.group_delay": [[56, 4, 2, "p-N", "N", "The number of samples in the group delay."], [56, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[57, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.phase_delay": [[59, 4, 2, "p-N", "N", "The number of samples in the phase delay."], [59, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.step_response": [[62, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FarrowResampler": [[66, 3, 1, "", "__call__", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [67, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [68, 2, 1, "", "order", "The order of the filter."], [69, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [70, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [71, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__call__": [[66, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [66, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.__init__": [[67, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FarrowResampler.reset": [[69, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[73, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [74, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the IIR filter."], [75, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [76, 2, 1, "", "a_taps", "The feedback taps $a_j$ for $j = 0,...,N$."], [77, 2, 1, "", "b_taps", "The feedforward taps $b_i$ for $i = 0,...,M$."], [78, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the IIR filter."], [79, 2, 1, "", "gain", "The gain of the IIR filter."], [80, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [81, 2, 1, "", "order", "The order of the IIR filter $N$."], [82, 2, 1, "", "poles", "The poles of the IIR filter."], [83, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [84, 2, 1, "", "state", "The filter state."], [85, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [86, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [87, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[73, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [73, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [73, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."], [73, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__call__": [[74, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.IIR.__init__": [[75, 4, 2, "p-a", "a", "The feedback coefficients $a_j$ for $j = 0,...,N$."], [75, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$ for $i = 0,...,M$."], [75, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.IIR.frequency_response": [[78, 4, 2, "p-decades", "decades", "Only used if freqs is an integer."], [78, 4, 2, "p-freqs", "freqs", "The frequency specification."], [78, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [78, 4, 2, "p-whole", "whole", "Only used if freqs is an integer."]], "sdr.IIR.impulse_response": [[80, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[85, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.Integrator": [[89, 3, 1, "", "__init__", "Creates an integrating IIR filter."]], "sdr.Integrator.__init__": [[89, 4, 2, "p-method", "method", "The integration method."], [89, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.Interpolator": [[91, 3, 1, "", "__call__", "Interpolates and filters the input signal $x[n]$ with the polyphase FIR filter."], [92, 3, 1, "", "__init__", "Creates a polyphase FIR interpolating filter."], [93, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [94, 2, 1, "", "method", "The method used to design the multirate filter."], [95, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [96, 2, 1, "", "rate", "The interpolation rate $r$."], [97, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [98, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Interpolator.__call__": [[91, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [91, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Interpolator.__init__": [[92, 4, 2, "p-rate", "rate", "The interpolation rate $r$."], [92, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [92, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.LeakyIntegrator": [[100, 3, 1, "", "__init__", "Creates a leaky integrator IIR filter."]], "sdr.LeakyIntegrator.__init__": [[100, 4, 2, "p-alpha", "alpha", "The leaky factor $alpha$. An FIR moving average with length $L$ is approximated when $alpha = 1 - 2/L$."], [100, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.LinearModulation": [[102, 3, 1, "", "__init__", "Creates a new linear phase/amplitude modulation object."], [103, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [104, 2, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [105, 3, 1, "", "decide_symbols", "Converts the received complex symbols $tilde{a}[k]$ into decimal symbol decisions $hat{s}[k]$ and complex symbol decisions $hat{a}[k]$ using maximum-likelihood estimation (MLE)."], [106, 3, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples $tilde{x}[n]$ into decimal symbol decisions $hat{s}[k]$ using matched filtering and maximum-likelihood estimation."], [107, 3, 1, "", "map_symbols", "Converts the decimal symbols $s[k]$ to complex symbols $a[k]$."], [108, 3, 1, "", "modulate", "Modulates the decimal symbols $s[k]$ into pulse-shaped complex samples $x[n]$."], [109, 2, 1, "", "order", "The modulation order $M = 2^k$."], [110, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [111, 2, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [112, 2, 1, "", "rx_filter", "The receive decimating matched filter. The filter coefficients are matched to the pulse shape $h[-n]^*$."], [113, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [114, 2, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [115, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."], [116, 2, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter. The filter coefficients are the pulse shape $h[n]$."]], "sdr.LinearModulation.__init__": [[102, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [102, 4, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees to apply to symbol_map."], [102, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [102, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [102, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [102, 4, 2, "p-symbol_map", "symbol_map", "The symbol mapping ${0, dots, M-1} mapsto mathbb{C}$. An $M$-length array whose indices are decimal symbols $s[k]$ and whose values are complex symbols $a[k]$, where $M$ is the modulation order."]], "sdr.LinearModulation.ber": [[103, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.LinearModulation.decide_symbols": [[105, 4, 2, "p-a_tilde", "a_tilde", "The received complex symbols $tilde{a}[k]$."]], "sdr.LinearModulation.demodulate": [[106, 4, 2, "p-x_tilde", "x_tilde", "The received pulse-shaped complex samples $tilde{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.LinearModulation.map_symbols": [[107, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to map, $0$ to $M-1$."]], "sdr.LinearModulation.modulate": [[108, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.LinearModulation.ser": [[113, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.LoopFilter": [[118, 3, 1, "", "__call__", "Filters the input signal $x[n]$."], [119, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [120, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [121, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [122, 2, 1, "", "integral_gain", "The integral gain $K_2$ of the loop filter."], [123, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [124, 2, 1, "", "proportional_gain", "The proportional gain $K_1$ of the loop filter."], [125, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__call__": [[118, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.LoopFilter.__init__": [[119, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [119, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [119, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [119, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.MLPED": [[127, 2, 1, "", "A_received", "(Settable) The received signal RMS amplitude $A_{rx,rms}$."], [128, 2, 1, "", "A_reference", "(Settable) The reference signal RMS amplitude $A_{ref,rms}$."], [129, 3, 1, "", "__call__", "Detects the phase error."], [130, 3, 1, "", "__init__", "Initializes the ML-PED."], [131, 3, 1, "", "data_aided_error", "Simulates the average phase error of the data-aided PED using the specified modulation scheme."], [132, 3, 1, "", "decision_directed_error", "Simulates the average phase error of the decision-directed PED using the specified modulation scheme."], [133, 2, 1, "", "gain", "The gain of the phase error detector $K_p$."]], "sdr.MLPED.__call__": [[129, 4, 2, "p-received", "received", "The received complex symbols $tilde{a}[k]$."], [129, 4, 2, "p-reference", "reference", "The reference complex symbols, either the known transmitted complex symbols $a[k]$ or the complex symbols decisions $hat{a}[k]$."]], "sdr.MLPED.__init__": [[130, 4, 2, "p-A_received", "A_received", "The received signal RMS amplitude $A_{rx,rms}$."], [130, 4, 2, "p-A_reference", "A_reference", "The reference signal RMS amplitude $A_{ref,rms}$."]], "sdr.MLPED.data_aided_error": [[131, 4, 2, "p-modem", "modem", "The linear modulation scheme."], [131, 4, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.MLPED.decision_directed_error": [[132, 4, 2, "p-modem", "modem", "The linear modulation scheme."], [132, 4, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.MSK": [[135, 3, 1, "", "__init__", "Creates a new MSK object."]], "sdr.MSK.__init__": [[135, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [135, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [135, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.MovingAverager": [[137, 3, 1, "", "__init__", "Creates a moving average FIR filter."]], "sdr.MovingAverager.__init__": [[137, 4, 2, "p-length", "length", "The length of the moving average filter $L$."], [137, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.NCO": [[139, 3, 1, "", "__call__", "Steps the NCO with variable frequency and/or phase signals."], [140, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [141, 2, 1, "", "gain", "(Settable) The NCO gain $K_0$."], [142, 2, 1, "", "increment", "(Settable) The constant phase accumulation $omega$ of the NCO in radians/sample."], [143, 2, 1, "", "offset", "(Settable) The absolute phase offset $theta$ of the NCO in radians."], [144, 3, 1, "", "reset", "Resets the NCO."], [145, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__call__": [[139, 4, 2, "p-freq", "freq", "The variable frequency signal $f[n]$ in radians/sample. This input signal varies the per-sample phase increment of the NCO. If None, the signal is all zeros."], [139, 4, 2, "p-output", "output", "The format of the output signal $y[n]$. Options are the accumulated phase, sine, cosine, or complex exponential."], [139, 4, 2, "p-phase", "phase", "The variable phase signal $p[n]$ in radians. This input signal varies the per-sample phase offset of the NCO. If None, the signal is all zeros."]], "sdr.NCO.__init__": [[140, 4, 2, "p-gain", "gain", "The NCO gain $K_0$."], [140, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [140, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.NCO.step": [[145, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.OQPSK": [[147, 3, 1, "", "__init__", "Creates a new OQPSK object."]], "sdr.OQPSK.__init__": [[147, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [147, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [147, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [147, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [147, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [147, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PED": [[149, 3, 1, "", "__call__", "Detects the phase error."], [150, 3, 1, "", "__init__", "Initializes the PED."], [151, 3, 1, "", "data_aided_error", "Simulates the average phase error of the data-aided PED using the specified modulation scheme."], [152, 3, 1, "", "decision_directed_error", "Simulates the average phase error of the decision-directed PED using the specified modulation scheme."], [153, 2, 1, "", "gain", "The gain of the phase error detector $K_p$."]], "sdr.PED.__call__": [[149, 4, 2, "p-received", "received", "The received complex symbols $tilde{a}[k]$."], [149, 4, 2, "p-reference", "reference", "The reference complex symbols, either the known transmitted complex symbols $a[k]$ or the complex symbols decisions $hat{a}[k]$."]], "sdr.PED.data_aided_error": [[151, 4, 2, "p-modem", "modem", "The linear modulation scheme."], [151, 4, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.PED.decision_directed_error": [[152, 4, 2, "p-modem", "modem", "The linear modulation scheme."], [152, 4, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.PSK": [[155, 3, 1, "", "__init__", "Creates a new PSK object."], [156, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [157, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [158, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [159, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[155, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [155, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [155, 4, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [155, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [155, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [155, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [155, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[156, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [156, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.ser": [[158, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [158, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.PiMPSK": [[161, 3, 1, "", "__init__", "Creates a new $pi/M$ PSK object."]], "sdr.PiMPSK.__init__": [[161, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [161, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [161, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [161, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [161, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [161, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [161, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.Q": [[162, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[163, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.ReplicaCorrelator": [[165, 3, 1, "", "p_d", "Computes the probability of detection $P_D$."], [166, 3, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [167, 3, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [168, 3, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.ReplicaCorrelator.p_d": [[165, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [165, 4, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [165, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."]], "sdr.ReplicaCorrelator.p_fa": [[166, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [166, 4, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [166, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [166, 4, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.ReplicaCorrelator.roc": [[167, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [167, 4, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [167, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."]], "sdr.ReplicaCorrelator.threshold": [[168, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [168, 4, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [168, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [168, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.Resampler": [[170, 3, 1, "", "__call__", "Resamples and filters the input signal $x[n]$ with the polyphase FIR filter."], [171, 3, 1, "", "__init__", "Creates a polyphase FIR rational resampling filter."], [172, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [173, 2, 1, "", "down", "The decimation rate $Q$."], [174, 2, 1, "", "method", "The method used to design the multirate filter."], [175, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [176, 2, 1, "", "rate", "The resampling rate $P/Q$."], [177, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [178, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."], [179, 2, 1, "", "up", "The interpolation rate $P$."]], "sdr.Resampler.__init__": [[171, 4, 2, "p-down", "down", "The decimation rate $Q$."], [171, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [171, 4, 2, "p-taps", "taps", "The multirate filter design specification."], [171, 4, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.albersheim": [[180, 4, 2, "p-N_nc", "N_nc", "The number of non-coherent combinations $N_{NC} ge 1$."], [180, 4, 2, "p-p_d", "p_d", "The desired probability of detection $P_D$ in $(0, 1)$."], [180, 4, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{FA}$ in $(0, 1)$."]], "sdr.average_power": [[181, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the average power. The default is None, which computes the average power of the entire array."], [181, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [181, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[182, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [182, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [182, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [182, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[183, 4, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [183, 4, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.barker": [[184, 4, 2, "p-length", "length", "The length $N$ of the Barker code/sequence."], [184, 4, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[185, 4, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [185, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [185, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[186, 4, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[187, 4, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[188, 4, 2, "p-p", "p", "The probability $p$ of a bit flip."], [188, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [188, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[189, 4, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[190, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.db": [[191, 4, 2, "p-type", "type", "The type of input value or signal."], [191, 4, 2, "p-x", "x", "The input value or signal."]], "sdr.design_bandpass_fir": [[192, 4, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [192, 4, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [192, 4, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [192, 4, 2, "p-order", "order", "The filter order $N$. Must be even."], [192, 4, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_bandstop_fir": [[193, 4, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [193, 4, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [193, 4, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [193, 4, 2, "p-order", "order", "The filter order $N$. Must be even."], [193, 4, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_frac_delay_fir": [[194, 4, 2, "p-delay", "delay", "The fractional delay $0 le Delta n le 1$."], [194, 4, 2, "p-length", "length", "The filter length $L$. Filters with even length have best performance. Filters with odd length are equivalent to an even-length filter with an appended zero."]], "sdr.design_highpass_fir": [[195, 4, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [195, 4, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [195, 4, 2, "p-order", "order", "The filter order $N$. Must be even."], [195, 4, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_lowpass_fir": [[196, 4, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [196, 4, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [196, 4, 2, "p-order", "order", "The filter order $N$. Must be even."], [196, 4, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_multirate_fir": [[197, 4, 2, "p-A_stop", "A_stop", "The stopband attenuation $A_{text{stop}}$ in dB."], [197, 4, 2, "p-down", "down", "The decimation rate $Q$."], [197, 4, 2, "p-half_length", "half_length", "The half-length of the polyphase filters."], [197, 4, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.diff_decode": [[198, 4, 2, "p-y", "y", "The input encoded data $y[k]$."], [198, 4, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[199, 4, 2, "p-x", "x", "The input uncoded data $x[k]$."], [199, 4, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[200, 4, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [200, 4, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [200, 4, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [200, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [200, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.downsample": [[201, 4, 2, "p-rate", "rate", "The downsampling factor $r$."], [201, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.ebn0_to_esn0": [[202, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [202, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [202, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[203, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [203, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [203, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [203, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[204, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the energy. The default is None, which computes the energy of the entire array."], [204, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [204, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[205, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [205, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [205, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[206, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [206, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.euclidean": [[207, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the distance. The default is None, which computes the distance across the entire array."], [207, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [207, 4, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.evm": [[208, 4, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [208, 4, 2, "p-output", "output", "The output type of the EVM calculation."], [208, 4, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [208, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.frequency_offset": [[209, 4, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [209, 4, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [209, 4, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [209, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [209, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[210, 4, 2, "p-distance", "distance", "The distance $d$ in meters between the transmitter and receiver."], [210, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[211, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [211, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [211, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [211, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[212, 4, 2, "p-n", "n", "The length of the Gray code."]], "sdr.hadamard": [[213, 4, 2, "p-index", "index", "The index $i$ of the Hadamard code."], [213, 4, 2, "p-length", "length", "The length $N$ of the Hadamard code/sequence. Must be a power of 2."], [213, 4, 2, "p-output", "output", "The output format of the Hadamard code/sequence."]], "sdr.half_sine": [[214, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [214, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [214, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.hamming": [[215, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the distance. The default is None, which computes the distance across the entire array."], [215, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [215, 4, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.hexdump": [[216, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [216, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[217, 4, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [217, 4, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [217, 4, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.linear": [[218, 4, 2, "p-type", "type", "The type of output value or signal."], [218, 4, 2, "p-x", "x", "The input value or signal in dB."]], "sdr.mix": [[219, 4, 2, "p-complex", "complex", "Indicates whether to mix by a complex exponential or real sinusoid."], [219, 4, 2, "p-freq", "freq", "The frequency $f$ of the sinusoid in Hz (or 1/samples if sample_rate=1). The frequency must satisfy $-f_s/2 le f le f_s/2$."], [219, 4, 2, "p-phase", "phase", "The phase $phi$ of the sinusoid in degrees."], [219, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal."], [219, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.pack": [[220, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [220, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [220, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[221, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the PAPR. The default is None, which computes the PAPR of the entire array."], [221, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[222, 4, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [222, 4, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [222, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[223, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the peak power. The default is None, which computes the peak power of the entire array."], [223, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [223, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[224, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [224, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.percent": [[225, 4, 2, "p-x", "x", "The input ratio."]], "sdr.plot": [[226, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [227, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [228, 5, 1, "", "eye", "Plots the eye diagram of the baseband modulated signal $x[n]$."], [229, 5, 1, "", "filter", "Plots the magnitude response $|H(omega)|^2$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [230, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [231, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [232, 5, 1, "", "magnitude_response", "Plots the magnitude response $|H(omega)|^2$ of the filter."], [233, 5, 1, "", "p_d", "Plots the probability of detection $P_D$ as a function of received SNR or ENR."], [234, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [235, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [236, 5, 1, "", "phase_response", "Plots the phase response $angle H(omega)$ of the filter."], [237, 5, 1, "", "phase_tree", "Plots the phase tree of a continuous-phase modulated (CPM) signal signal $x[n]$."], [238, 5, 1, "", "raster", "Plots a raster of the time-domain signal $x[n]$."], [239, 5, 1, "", "roc", "Plots the receiver operating characteristic (ROC) curve as a function of $P_{FA}$."], [240, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [241, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [242, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [243, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [244, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [245, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [246, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[226, 4, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [226, 4, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."], [226, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."]], "sdr.plot.constellation": [[227, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [227, 4, 2, "p-kwargs", "kwargs", "If heatmap=False, additional keyword arguments to pass to matplotlib.pyplot.scatter(). The following keyword arguments are set by default. The defaults may be overwritten."], [227, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [227, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.eye": [[228, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [228, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [228, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [228, 4, 2, "p-span", "span", "The number of symbols per raster."], [228, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [228, 4, 2, "p-x", "x", "The baseband modulated signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved."]], "sdr.plot.filter": [[229, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [229, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [229, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [229, 4, 2, "p-filter", "filter", "The filter definition."], [229, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [229, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[230, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [230, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [230, 4, 2, "p-filter", "filter", "The filter definition."], [230, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [230, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [230, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.impulse_response": [[231, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [231, 4, 2, "p-filter", "filter", "The filter definition."], [231, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.magnitude_response": [[232, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [232, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [232, 4, 2, "p-filter", "filter", "The filter definition."], [232, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [232, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [232, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."], [232, 4, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a linear or logarithmic magnitude response."]], "sdr.plot.p_d": [[233, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [233, 4, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [233, 4, 2, "p-x", "x", "The SNR or ENR in dB."], [233, 4, 2, "p-x_label", "x_label", "The x-axis label to use."]], "sdr.plot.periodogram": [[234, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [234, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [234, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [234, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [234, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [234, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [234, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [234, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [234, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [234, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."], [234, 4, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a linear or logarithmic power spectral density."]], "sdr.plot.phase_delay": [[235, 4, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [235, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [235, 4, 2, "p-filter", "filter", "The filter definition."], [235, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [235, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [235, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.phase_response": [[236, 4, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [236, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [236, 4, 2, "p-filter", "filter", "The filter definition."], [236, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [236, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [236, 4, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [236, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.phase_tree": [[237, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [237, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [237, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [237, 4, 2, "p-span", "span", "The number of symbols per raster."], [237, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [237, 4, 2, "p-x", "x", "The baseband CPM signal $x[n]$."]], "sdr.plot.raster": [[238, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [238, 4, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\"."], [238, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.collections.LineCollection. The following keyword arguments are set by default. The defaults may be overwritten."], [238, 4, 2, "p-length", "length", "The length of each raster in samples. This must be provided if x is 1D."], [238, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [238, 4, 2, "p-stride", "stride", "The stride between each raster in samples. If None, the stride is set to length."], [238, 4, 2, "p-x", "x", "The time-domain signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved. If x is 1D, the rastering is determined by length and stride. If x is 2D, the rows correspond to each raster."]], "sdr.plot.roc": [[239, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to the plotting function defined by type."], [239, 4, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [239, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [239, 4, 2, "p-type", "type", "The type of plot to generate."]], "sdr.plot.ser": [[240, 4, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [240, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."], [240, 4, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.spectrogram": [[241, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [241, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [241, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.pcolormesh(). The following keyword arguments are set by default. The defaults may be overwritten."], [241, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [241, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [241, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [241, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [241, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [241, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[242, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [242, 4, 2, "p-filter", "filter", "The filter definition."], [242, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.symbol_map": [[243, 4, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [243, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot(). The following keyword arguments are set by default. The defaults may be overwritten."], [243, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [243, 4, 2, "p-modulation", "modulation", "The linear modulation or symbol map ${0, dots, M-1} mapsto mathbb{C}$."]], "sdr.plot.time_domain": [[244, 4, 2, "p-centered", "centered", "Indicates whether to center the x-axis about 0. This argument is mutually exclusive with offset."], [244, 4, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal. If \"color\", the real and imaginary parts will have different colors based on the current Matplotlib color cycle. If \"line\", the real part will have a solid line and the imaginary part will have a dashed line, and both lines will share the same color."], [244, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [244, 4, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. The units of the offset are $1/f_s$. This argument is mutually exclusive with centered."], [244, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [244, 4, 2, "p-t", "t", "The time signal $t[n]$. The units are assumed to be $1/f_s$."], [244, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[246, 4, 2, "p-filter", "filter", "The filter definition."], [246, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.polyphase_decompose": [[247, 4, 2, "p-phases", "phases", "The number of phases $B$."], [247, 4, 2, "p-taps", "taps", "The multirate FIR filter taps $h_i$."]], "sdr.ppb": [[248, 4, 2, "p-x", "x", "The input ratio."]], "sdr.ppm": [[249, 4, 2, "p-x", "x", "The input ratio."]], "sdr.raised_cosine": [[250, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [250, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [250, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [250, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rectangular": [[251, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [251, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [251, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[252, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [252, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[253, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [253, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [253, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [253, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[254, 4, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [254, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.snr_to_ebn0": [[255, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [255, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [255, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [255, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[256, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [256, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.to_complex_bb": [[257, 4, 2, "p-x_r", "x_r", "The real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$. If the length is odd, one zero is appended to the end."]], "sdr.to_real_pb": [[258, 4, 2, "p-x_c", "x_c", "The complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$."]], "sdr.unpack": [[259, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [259, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [259, 4, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.upsample": [[260, 4, 2, "p-rate", "rate", "The upsampling factor $r$."], [260, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.walsh": [[261, 4, 2, "p-index", "index", "The index $i$ of the Walsh code. Indicates how many transitions there are in the code."], [261, 4, 2, "p-length", "length", "The length $N$ of the Walsh code/sequence. Must be a power of 2."], [261, 4, 2, "p-output", "output", "The output format of the Walsh code/sequence."]], "sdr.wavelength": [[262, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.zadoff_chu": [[263, 4, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [263, 4, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence. The root must be relatively prime to the length, i.e., $gcd(u, N) = 1$."], [263, 4, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence. When $q ne 0$, the returned sequence is a cyclic shift of the root-$u$ Zadoff-Chu sequence."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"convers": 0, "decibel": 0, "ratio": 0, "from": [0, 268, 269, 270], "e_b": 0, "n_0": 0, "e_": 0, "": [0, 272, 273], "n": [0, 271, 272, 273], "data": 1, "manipul": [1, 3], "detect": [2, 7], "detector": [2, 266], "theoret": 2, "limit": 2, "digit": [3, 273], "signal": [3, 265, 271, 274], "process": 3, "fir": [3, 272], "filter": [3, 7, 272, 273, 275], "iir": [3, 273], "applic": 3, "multir": 3, "arbitrari": [3, 271], "resampl": [3, 271], "correl": 3, "link": 4, "budget": 4, "channel": [4, 265], "capac": 4, "path": 4, "loss": 4, "antenna": 4, "measur": 5, "energi": 5, "power": [5, 274], "voltag": 5, "distanc": 5, "modul": [5, 6, 7], "linear": 6, "continu": 6, "phase": [6, 266, 275, 276], "orthogon": 6, "puls": [6, 274, 277], "shape": [6, 274, 277], "symbol": [6, 276], "map": [6, 276], "encod": 6, "plot": [7, 274], "configur": [7, 268, 270], "time": [7, 274, 275], "domain": [7, 274, 275], "frequenc": [7, 272, 273, 274, 275], "spectral": 7, "estim": 7, "analysi": 7, "probabl": 8, "note": [9, 101, 134, 146, 154, 160, 210, 234, 241], "constructor": [9, 26, 35, 42, 49, 65, 72, 88, 90, 99, 101, 117, 126, 134, 136, 138, 146, 148, 154, 160, 169], "method": [9, 26, 35, 37, 42, 49, 65, 72, 88, 90, 99, 101, 117, 126, 134, 136, 138, 146, 148, 154, 160, 164, 169], "properti": [9, 26, 35, 49, 65, 72, 88, 90, 99, 101, 117, 126, 134, 136, 138, 146, 148, 154, 160, 169], "special": [26, 35, 49, 65, 72, 88, 90, 99, 117, 126, 136, 138, 148, 169], "stream": [26, 35, 49, 72, 88, 90, 99, 136, 169], "mode": [26, 35, 49, 72, 88, 90, 99, 136, 169], "onli": [26, 35, 49, 72, 88, 90, 99, 136, 169], "see": [42, 44, 55, 56, 57, 59, 62, 78, 80, 85, 102, 103, 113, 135, 147, 155, 156, 158, 161, 162, 163, 190, 221, 260], "also": [42, 44, 55, 56, 57, 59, 62, 78, 80, 85, 102, 103, 113, 135, 147, 155, 156, 158, 161, 162, 163, 190, 221, 260], "warn": [201, 260], "sequenc": 264, "simul": 265, "model": 265, "impair": 265, "synchron": 266, "error": [266, 276], "document": 267, "instal": [267, 268, 269, 270, 278], "build": 267, "doc": 267, "serv": 267, "format": 268, "run": [268, 270], "linter": 268, "formatt": 268, "pre": 268, "commit": 268, "v": [268, 270], "code": [268, 270], "pypi": 269, "github": 269, "edit": 269, "local": 269, "folder": 269, "dev": 269, "depend": 269, "unit": 270, "test": 270, "command": 270, "line": 270, "farrow": 271, "construct": 271, "an": [271, 272, 273], "input": 271, "x": 271, "t_": 271, "rate": [271, 276], "r": 271, "y": 271, "frac": 271, "upsampl": 271, "integ": 271, "downsampl": 271, "irrat": 271, "creat": [272, 273], "examin": [272, 273, 274], "impuls": [272, 273], "respons": [272, 273, 275], "h": [272, 273], "step": [272, 273, 275], "omega": [272, 273], "group": [272, 273], "delai": [272, 273], "tau_g": [272, 273], "fulli": [272, 273], "analyz": [272, 273, 275], "zero": 273, "pole": 273, "stabil": 273, "peak": 274, "averag": 274, "qpsk": [274, 276], "variou": 274, "across": [274, 275], "excess": 274, "bandwidth": 274, "lock": 275, "loop": 275, "design": 275, "proport": 275, "plu": 275, "integr": 275, "ppi": 275, "implement": 275, "pll": 275, "close": 275, "perform": 275, "compar": 275, "zeta": 275, "b_n": 275, "t": 275, "shift": 276, "kei": 276, "constel": 276, "bpsk": 276, "8": [276, 279], "psk": 276, "16": 276, "curv": 276, "bit": 276, "rais": 277, "cosin": 277, "squar": 277, "root": 277, "gaussian": 277, "sdr": 278, "featur": 278, "v0": 279, "0": 279, "11": 279, "chang": 279, "contributor": 279, "10": 279, "9": 279, "7": 279, "6": 279, "5": 279, "4": 279, "3": 279, "2": 279, "1": 279, "version": 280, "alpha": 280, "releas": 280, "beta": 280}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Conversions": [[0, "conversions"]], "Decibels": [[0, "decibels"]], "Ratios": [[0, "ratios"]], "From E_b/N_0": [[0, "from-e-b-n-0"]], "From E_s/N_0": [[0, "from-e-s-n-0"]], "From S/N": [[0, "from-s-n"]], "Data manipulation": [[1, "data-manipulation"]], "Detection": [[2, "detection"], [7, "detection"]], "Detectors": [[2, "detectors"]], "Theoretical limits": [[2, "theoretical-limits"]], "Digital signal processing": [[3, "digital-signal-processing"]], "FIR filtering": [[3, "fir-filtering"]], "IIR filtering": [[3, "iir-filtering"]], "Filter applications": [[3, "filter-applications"]], "Multirate filtering": [[3, "multirate-filtering"]], "Arbitrary resampling": [[3, "arbitrary-resampling"]], "Correlation": [[3, "correlation"]], "Signal manipulation": [[3, "signal-manipulation"]], "Link budgets": [[4, "link-budgets"]], "Channel capacity": [[4, "channel-capacity"]], "Path losses": [[4, "path-losses"]], "Antennas": [[4, "antennas"]], "Measurement": [[5, "measurement"]], "Energy": [[5, "energy"]], "Power": [[5, "power"]], "Voltage": [[5, "voltage"]], "Distance": [[5, "distance"]], "Modulation": [[5, "modulation"], [6, "modulation"], [7, "modulation"]], "Linear modulations": [[6, "linear-modulations"]], "Continuous-phase modulations": [[6, "continuous-phase-modulations"]], "Orthogonal modulations": [[6, "orthogonal-modulations"]], "Pulse shaping": [[6, "pulse-shaping"]], "Symbol mapping": [[6, "symbol-mapping"], [276, "symbol-mapping"]], "Symbol encoding": [[6, "symbol-encoding"]], "Plotting": [[7, "plotting"]], "Configuration": [[7, "configuration"], [268, "configuration"], [270, "configuration"]], "Time-domain": [[7, "time-domain"]], "Frequency-domain": [[7, "frequency-domain"]], "Spectral estimation": [[7, "spectral-estimation"]], "Filter analysis": [[7, "filter-analysis"]], "Probability": [[8, "probability"]], "Note": [[9, null], [101, null], [134, null], [146, null], [154, null], [160, null], [210, null], [234, null], [241, null]], "Constructors": [[9, "constructors"], [26, "constructors"], [35, "constructors"], [42, "constructors"], [49, "constructors"], [65, "constructors"], [72, "constructors"], [88, "constructors"], [90, "constructors"], [99, "constructors"], [101, "constructors"], [117, "constructors"], [126, "constructors"], [134, "constructors"], [136, "constructors"], [138, "constructors"], [146, "constructors"], [148, "constructors"], [154, "constructors"], [160, "constructors"], [169, "constructors"]], "Methods": [[9, "methods"], [26, "methods"], [35, "methods"], [37, "methods"], [42, "methods"], [49, "methods"], [65, "methods"], [72, "methods"], [88, "methods"], [90, "methods"], [99, "methods"], [101, "methods"], [117, "methods"], [126, "methods"], [134, "methods"], [136, "methods"], [138, "methods"], [146, "methods"], [148, "methods"], [154, "methods"], [160, "methods"], [164, "methods"], [169, "methods"]], "Properties": [[9, "properties"], [26, "properties"], [35, "properties"], [49, "properties"], [65, "properties"], [72, "properties"], [88, "properties"], [90, "properties"], [99, "properties"], [101, "properties"], [117, "properties"], [126, "properties"], [134, "properties"], [136, "properties"], [138, "properties"], [146, "properties"], [148, "properties"], [154, "properties"], [160, "properties"], [169, "properties"]], "Special methods": [[26, "special-methods"], [35, "special-methods"], [49, "special-methods"], [65, "special-methods"], [72, "special-methods"], [88, "special-methods"], [90, "special-methods"], [99, "special-methods"], [117, "special-methods"], [126, "special-methods"], [136, "special-methods"], [138, "special-methods"], [148, "special-methods"], [169, "special-methods"]], "Streaming mode only": [[26, "streaming-mode-only"], [35, "streaming-mode-only"], [49, "streaming-mode-only"], [72, "streaming-mode-only"], [88, "streaming-mode-only"], [90, "streaming-mode-only"], [99, "streaming-mode-only"], [136, "streaming-mode-only"], [169, "streaming-mode-only"]], "See also": [[42, null], [44, null], [55, null], [56, null], [57, null], [59, null], [62, null], [78, null], [80, null], [85, null], [102, null], [103, null], [113, null], [135, null], [147, null], [155, null], [156, null], [158, null], [161, null], [162, null], [163, null], [190, null], [221, null], [260, null]], "Warning": [[201, null], [260, null]], "Sequences": [[264, "sequences"]], "Simulation": [[265, "simulation"]], "Channel models": [[265, "channel-models"]], "Signal impairments": [[265, "signal-impairments"]], "Synchronization": [[266, "synchronization"]], "Phase error detectors": [[266, "phase-error-detectors"]], "Documentation": [[267, "documentation"]], "Install": [[267, "install"], [268, "install"], [270, "install"]], "Build the docs": [[267, "build-the-docs"]], "Serve the docs": [[267, "serve-the-docs"]], "Formatting": [[268, "formatting"]], "Run the linter": [[268, "run-the-linter"]], "Run the formatter": [[268, "run-the-formatter"]], "Pre-commit": [[268, "pre-commit"]], "Run from VS Code": [[268, "run-from-vs-code"], [270, "run-from-vs-code"]], "Installation": [[269, "installation"], [278, "installation"]], "Install from PyPI": [[269, "install-from-pypi"]], "Install from GitHub": [[269, "install-from-github"]], "Editable install from local folder": [[269, "editable-install-from-local-folder"]], "Install the dev dependencies": [[269, "install-the-dev-dependencies"]], "Unit Tests": [[270, "unit-tests"]], "Run from the command line": [[270, "run-from-the-command-line"]], "Farrow arbitrary resampler": [[271, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[271, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[271, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[271, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[271, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[271, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[271, "downsample-by-an-irrational-rate"]], "FIR filters": [[272, "fir-filters"]], "Create an FIR filter": [[272, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[272, "examine-the-impulse-response-h-n"], [273, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[272, "examine-the-step-response-s-n"], [273, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[272, "examine-the-frequency-response-h-omega"], [273, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[272, "examine-the-group-delay-tau-g-omega"], [273, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[272, "fully-analyze-a-fir-filter"]], "IIR filters": [[273, "iir-filters"]], "Create an IIR filter": [[273, "create-an-iir-filter"]], "Examine the zeros and poles": [[273, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[273, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[273, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[274, "peak-to-average-power"]], "QPSK signal with various pulse shapes": [[274, "qpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[274, "examine-time-domain"]], "Examine frequency domain": [[274, "examine-frequency-domain"]], "Plot across excess bandwidth": [[274, "plot-across-excess-bandwidth"]], "Phase-locked loops": [[275, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[275, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[275, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[275, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[275, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[275, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[275, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[275, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[276, "phase-shift-keying"]], "Constellations": [[276, "constellations"]], "BPSK": [[276, "bpsk"]], "QPSK": [[276, "qpsk"]], "8-PSK": [[276, "id1"]], "16-PSK": [[276, "id2"]], "Error rate curves": [[276, "error-rate-curves"]], "Bit error rate curves": [[276, "bit-error-rate-curves"]], "Symbol error rate curves": [[276, "symbol-error-rate-curves"]], "Pulse shapes": [[277, "pulse-shapes"]], "Raised cosine": [[277, "raised-cosine"]], "Square-root raised cosine": [[277, "square-root-raised-cosine"]], "Gaussian": [[277, "gaussian"]], "sdr": [[278, "sdr"]], "Features": [[278, "features"]], "v0.0": [[279, "v0-0"]], "v0.0.11": [[279, "v0-0-11"]], "Changes": [[279, "changes"], [279, "id1"], [279, "id3"], [279, "id5"], [279, "id7"], [279, "id9"], [279, "id11"], [279, "id13"], [279, "id15"], [279, "id17"], [279, "id19"]], "Contributors": [[279, "contributors"], [279, "id2"], [279, "id4"], [279, "id6"], [279, "id8"], [279, "id10"], [279, "id12"], [279, "id14"], [279, "id16"], [279, "id18"], [279, "id20"]], "v0.0.10": [[279, "v0-0-10"]], "v0.0.9": [[279, "v0-0-9"]], "v0.0.8": [[279, "v0-0-8"]], "v0.0.7": [[279, "v0-0-7"]], "v0.0.6": [[279, "v0-0-6"]], "v0.0.5": [[279, "v0-0-5"]], "v0.0.4": [[279, "v0-0-4"]], "v0.0.3": [[279, "v0-0-3"]], "v0.0.2": [[279, "v0-0-2"]], "v0.0.1": [[279, "v0-0-1"]], "Versioning": [[280, "versioning"]], "Alpha releases": [[280, "alpha-releases"]], "Beta releases": [[280, "beta-releases"]]}, "indexentries": {"module": [[3, "module-sdr"]], "sdr": [[3, "module-sdr"]]}, "docurls": ["api/conversions/", "api/data-manipulation/", "api/detection/", "api/dsp/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.Decimator/", "api/sdr.Decimator.__call__/", "api/sdr.Decimator.__init__/", "api/sdr.Decimator.delay/", "api/sdr.Decimator.method/", "api/sdr.Decimator.polyphase_taps/", "api/sdr.Decimator.rate/", "api/sdr.Decimator.reset/", "api/sdr.Decimator.taps/", "api/sdr.Differentiator/", "api/sdr.Differentiator.__init__/", "api/sdr.EnergyDetector/", "api/sdr.EnergyDetector.p_d/", "api/sdr.EnergyDetector.p_fa/", "api/sdr.EnergyDetector.roc/", "api/sdr.EnergyDetector.threshold/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__call__/", "api/sdr.FIR.__init__/", "api/sdr.FIR.__len__/", "api/sdr.FIR.delay/", "api/sdr.FIR.flush/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.group_delay/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.phase_delay/", "api/sdr.FIR.reset/", "api/sdr.FIR.state/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__call__/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__call__/", "api/sdr.IIR.__init__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.state/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.Integrator/", "api/sdr.Integrator.__init__/", "api/sdr.Interpolator/", "api/sdr.Interpolator.__call__/", "api/sdr.Interpolator.__init__/", "api/sdr.Interpolator.delay/", "api/sdr.Interpolator.method/", "api/sdr.Interpolator.polyphase_taps/", "api/sdr.Interpolator.rate/", "api/sdr.Interpolator.reset/", "api/sdr.Interpolator.taps/", "api/sdr.LeakyIntegrator/", "api/sdr.LeakyIntegrator.__init__/", "api/sdr.LinearModulation/", "api/sdr.LinearModulation.__init__/", "api/sdr.LinearModulation.ber/", "api/sdr.LinearModulation.bps/", "api/sdr.LinearModulation.decide_symbols/", "api/sdr.LinearModulation.demodulate/", "api/sdr.LinearModulation.map_symbols/", "api/sdr.LinearModulation.modulate/", "api/sdr.LinearModulation.order/", "api/sdr.LinearModulation.phase_offset/", "api/sdr.LinearModulation.pulse_shape/", "api/sdr.LinearModulation.rx_filter/", "api/sdr.LinearModulation.ser/", "api/sdr.LinearModulation.sps/", "api/sdr.LinearModulation.symbol_map/", "api/sdr.LinearModulation.tx_filter/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.__call__/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.integral_gain/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.proportional_gain/", "api/sdr.LoopFilter.reset/", "api/sdr.MLPED/", "api/sdr.MLPED.A_received/", "api/sdr.MLPED.A_reference/", "api/sdr.MLPED.__call__/", "api/sdr.MLPED.__init__/", "api/sdr.MLPED.data_aided_error/", "api/sdr.MLPED.decision_directed_error/", "api/sdr.MLPED.gain/", "api/sdr.MSK/", "api/sdr.MSK.__init__/", "api/sdr.MovingAverager/", "api/sdr.MovingAverager.__init__/", "api/sdr.NCO/", "api/sdr.NCO.__call__/", "api/sdr.NCO.__init__/", "api/sdr.NCO.gain/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.OQPSK/", "api/sdr.OQPSK.__init__/", "api/sdr.PED/", "api/sdr.PED.__call__/", "api/sdr.PED.__init__/", "api/sdr.PED.data_aided_error/", "api/sdr.PED.decision_directed_error/", "api/sdr.PED.gain/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.ber/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.PiMPSK/", "api/sdr.PiMPSK.__init__/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.ReplicaCorrelator/", "api/sdr.ReplicaCorrelator.p_d/", "api/sdr.ReplicaCorrelator.p_fa/", "api/sdr.ReplicaCorrelator.roc/", "api/sdr.ReplicaCorrelator.threshold/", "api/sdr.Resampler/", "api/sdr.Resampler.__call__/", "api/sdr.Resampler.__init__/", "api/sdr.Resampler.delay/", "api/sdr.Resampler.down/", "api/sdr.Resampler.method/", "api/sdr.Resampler.polyphase_taps/", "api/sdr.Resampler.rate/", "api/sdr.Resampler.reset/", "api/sdr.Resampler.taps/", "api/sdr.Resampler.up/", "api/sdr.albersheim/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.barker/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.db/", "api/sdr.design_bandpass_fir/", "api/sdr.design_bandstop_fir/", "api/sdr.design_frac_delay_fir/", "api/sdr.design_highpass_fir/", "api/sdr.design_lowpass_fir/", "api/sdr.design_multirate_fir/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.downsample/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.euclidean/", "api/sdr.evm/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.hadamard/", "api/sdr.half_sine/", "api/sdr.hamming/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.linear/", "api/sdr.mix/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.percent/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.eye/", "api/sdr.plot.filter/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.magnitude_response/", "api/sdr.plot.p_d/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.phase_tree/", "api/sdr.plot.raster/", "api/sdr.plot.roc/", "api/sdr.plot.ser/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.polyphase_decompose/", "api/sdr.ppb/", "api/sdr.ppm/", "api/sdr.raised_cosine/", "api/sdr.rectangular/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.to_complex_bb/", "api/sdr.to_real_pb/", "api/sdr.unpack/", "api/sdr.upsample/", "api/sdr.walsh/", "api/sdr.wavelength/", "api/sdr.zadoff_chu/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/formatting/", "development/installation/", "development/unit-tests/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})