Search.setIndex({"titles": ["Conversions", "Data manipulation", "Digital signal processing", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.DDS", "sdr.DDS.__call__", "sdr.DDS.__init__", "sdr.DDS.nco", "sdr.DDS.reset", "sdr.DDS.step", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__call__", "sdr.FIR.__init__", "sdr.FIR.__len__", "sdr.FIR.delay", "sdr.FIR.frequency_response", "sdr.FIR.frequency_response_log", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.reset", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FIRInterpolator", "sdr.FIRInterpolator.__call__", "sdr.FIRInterpolator.__init__", "sdr.FIRInterpolator.polyphase_taps", "sdr.FIRInterpolator.rate", "sdr.FIRInterpolator.reset", "sdr.FIRInterpolator.streaming", "sdr.FIRInterpolator.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__call__", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__call__", "sdr.IIR.__init__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__call__", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__call__", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.reset", "sdr.NCO.step", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.ber", "sdr.PSK.bps", "sdr.PSK.demodulate", "sdr.PSK.modulate", "sdr.PSK.order", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.Q", "sdr.Qinv", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.barker", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.db", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.evm", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.hexdump", "sdr.iq_imbalance", "sdr.linear", "sdr.mix", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.filter", "sdr.plot.frequency_response", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.ser", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.raised_cosine", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.to_complex_bb", "sdr.to_real_pb", "sdr.unpack", "sdr.zadoff_chu", "Sequences", "Simulation", "Synchronization", "Documentation", "Installation", "Linter", "Unit Tests", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186], "db": [0, 3, 8, 19, 21, 31, 33, 34, 35, 37, 101, 107, 112, 113, 121, 125, 126, 128, 129, 130, 132, 133, 136, 137, 140, 141, 144, 145, 153, 164, 165, 180, 182, 183], "x": [0, 1, 2, 4, 5, 6, 7, 8, 25, 26, 31, 33, 38, 39, 51, 52, 59, 60, 66, 68, 82, 85, 91, 93, 99, 103, 104, 109, 110, 111, 112, 115, 118, 120, 121, 122, 123, 124, 127, 130, 131, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 156, 157, 161, 163, 168, 171, 174, 180, 181, 182, 186], "arraylik": [0, 1, 2, 3, 4, 5, 6, 7, 25, 26, 31, 33, 38, 39, 40, 51, 52, 53, 59, 60, 63, 66, 67, 68, 69, 82, 85, 91, 93, 99, 100, 101, 103, 104, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 163, 164, 165, 166, 167, 168, 171], "ndarrai": [0, 1, 2, 3, 5, 7, 25, 26, 30, 31, 36, 38, 39, 43, 44, 45, 48, 50, 51, 52, 54, 58, 59, 60, 65, 66, 68, 70, 71, 72, 73, 75, 77, 79, 81, 82, 85, 91, 93, 98, 99, 101, 103, 104, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171], "convert": [0, 2, 121, 125, 126, 128, 129, 135, 137, 164, 165, 166, 167], "linear": [0, 99, 112, 121, 137, 150, 154], "unit": [0, 25, 38, 48, 66, 79, 82, 91, 94, 95, 96, 100, 111, 112, 113, 121, 122, 123, 127, 137, 142, 143, 155, 160, 161, 162, 174, 178, 179, 181], "ebn0_to_esn0": [0, 107, 125, 182, 184, 185], "ebn0": [0, 6, 99, 101, 113, 125, 126, 144, 182], "bp": [0, 99, 102, 125, 126, 128, 164, 182], "int": [0, 1, 5, 25, 30, 31, 33, 34, 37, 38, 41, 42, 43, 44, 45, 46, 48, 51, 53, 55, 59, 62, 66, 72, 73, 75, 76, 79, 91, 98, 99, 100, 102, 105, 112, 114, 117, 122, 123, 125, 126, 128, 129, 133, 134, 135, 139, 146, 147, 148, 149, 150, 151, 152, 154, 155, 160, 162, 164, 165, 168, 169, 170, 182], "ebn0_to_snr": [0, 126, 184, 185], "esn0_to_ebn0": [0, 101, 128, 184, 185], "esn0": [0, 6, 99, 107, 128, 129, 153, 182], "esn0_to_snr": [0, 129, 182, 184, 185], "sp": [0, 5, 126, 129, 133, 160, 162, 164, 165, 166, 167, 180, 182, 183], "1": [0, 6, 7, 8, 15, 18, 22, 24, 25, 27, 31, 43, 44, 51, 54, 58, 66, 67, 72, 73, 82, 86, 87, 91, 94, 99, 100, 101, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 177, 178, 179, 180, 181, 182, 183, 186], "snr_to_ebn0": [0, 101, 113, 164, 184, 185], "snr": [0, 3, 31, 33, 34, 35, 36, 37, 112, 113, 164, 165, 166, 167, 171, 182, 185], "snr_to_esn0": [0, 107, 165, 184, 185], "hexdump": [1, 31, 135, 184, 185], "byte": [1, 135], "width": [1, 135], "16": [1, 101, 107, 108, 125, 126, 128, 135, 144, 153, 164, 165, 180, 185], "str": [1, 135, 150, 154], "return": [1, 5, 8, 16, 18, 21, 22, 26, 30, 31, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 48, 52, 60, 66, 68, 72, 73, 75, 79, 85, 93, 98, 101, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 182], "specifi": [1, 31, 34, 35, 37, 112, 113, 124, 135, 178, 179], "pack": [1, 31, 33, 135, 139, 184, 185], "bpe": [1, 139, 168], "binari": [1, 3, 5, 100, 108, 114, 115, 116, 117, 118, 119, 124, 139, 156, 168, 171, 182, 185], "arrai": [1, 31, 54, 58, 100, 108, 114, 115, 117, 118, 122, 123, 124, 134, 139, 157, 168, 179], "an": [1, 2, 3, 38, 45, 66, 67, 69, 75, 100, 101, 107, 113, 139, 144, 149, 153, 168, 174, 175, 184], "multipl": [1, 139, 168, 182], "bit": [1, 4, 6, 31, 33, 36, 99, 100, 101, 102, 108, 113, 115, 116, 118, 119, 125, 126, 128, 135, 139, 144, 164, 168, 185], "per": [1, 26, 93, 99, 100, 102, 112, 113, 125, 126, 128, 129, 131, 133, 135, 139, 145, 160, 162, 163, 164, 165, 168, 180, 183], "element": [1, 135, 139, 168], "unpack": [1, 31, 33, 135, 168, 182, 184, 185], "class": [2, 4, 8, 25, 31, 33, 34, 35, 36, 37, 38, 51, 59, 66, 82, 91, 99, 172, 178, 179, 182, 184], "fir": [2, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 146, 147, 148, 149, 151, 152, 155, 159, 180, 184, 185], "implement": [2, 5, 25, 38, 51, 59, 66, 82, 88, 91, 99, 172, 177], "finit": [2, 38, 51, 185], "impuls": [2, 6, 38, 45, 51, 66, 75, 133, 146, 149, 157, 183, 185], "respons": [2, 6, 38, 43, 44, 45, 48, 51, 66, 72, 73, 75, 79, 133, 146, 147, 148, 149, 152, 155, 183, 185], "firinterpol": [2, 51, 52, 53, 54, 55, 56, 57, 58, 180, 182, 184, 185], "polyphas": [2, 51, 53, 54, 58], "interpol": [2, 51, 52, 53, 55, 185], "iir": [2, 6, 8, 17, 44, 45, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 88, 146, 147, 148, 149, 151, 152, 155, 159, 178, 181, 184, 185], "infinit": [2, 66, 185], "farrowresampl": [2, 59, 60, 61, 62, 63, 64, 65, 177, 184, 185], "cubic": [2, 59], "farrow": [2, 59, 60, 61, 62, 63, 64, 65, 185], "arbitrari": [2, 59, 60, 61, 62, 63, 64, 65, 185], "mix": [2, 138, 184, 185], "freq": [2, 3, 131, 138, 141, 171, 177, 181], "float": [2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 31, 33, 34, 35, 37, 43, 44, 59, 60, 66, 67, 72, 73, 74, 82, 83, 84, 86, 87, 89, 91, 92, 94, 95, 96, 99, 100, 106, 111, 112, 113, 115, 118, 120, 127, 130, 131, 133, 136, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 156, 157, 160, 161, 162, 163, 171], "0": [2, 5, 6, 7, 15, 25, 27, 31, 38, 43, 44, 51, 54, 58, 66, 67, 72, 73, 86, 91, 94, 99, 100, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 126, 127, 129, 130, 131, 133, 134, 136, 137, 138, 139, 141, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 177, 178, 179, 180, 181, 182, 183, 186], "time": [2, 4, 8, 15, 16, 18, 19, 20, 21, 22, 38, 66, 82, 86, 99, 111, 112, 120, 124, 127, 129, 131, 133, 136, 138, 140, 142, 143, 146, 150, 154, 157, 160, 161, 162, 163, 165, 166, 167, 171, 177, 178, 179, 183, 184], "domain": [2, 4, 111, 112, 120, 127, 131, 136, 138, 140, 142, 143, 146, 150, 154, 157, 161, 163, 166, 167, 171, 184], "n": [2, 4, 5, 6, 7, 8, 25, 26, 30, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 46, 48, 51, 52, 59, 60, 66, 68, 72, 73, 75, 76, 79, 82, 85, 91, 93, 98, 109, 110, 111, 112, 113, 114, 117, 120, 124, 125, 126, 127, 128, 129, 130, 131, 134, 136, 138, 140, 142, 143, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 161, 163, 164, 165, 166, 167, 169, 170, 171, 181, 183, 184], "complex": [2, 4, 6, 25, 26, 30, 99, 100, 103, 104, 108, 112, 113, 130, 136, 138, 145, 156, 157, 166, 167, 171, 177, 178, 179, 182, 185], "exponenti": [2, 25, 26, 30, 138, 166, 167, 177, 178, 179], "to_complex_bb": [2, 166, 184, 185], "x_r": [2, 166, 167], "real": [2, 109, 110, 112, 157, 166, 167, 177, 178, 179, 181, 185], "passband": [2, 133, 166, 167, 180, 185], "center": [2, 166, 167], "f_": [2, 8, 15, 23, 43, 44, 52, 72, 73, 126, 129, 131, 133, 138, 146, 147, 148, 150, 151, 152, 154, 157, 163, 164, 165, 166, 167, 177, 178, 179, 181, 183], "": [2, 6, 8, 16, 18, 19, 20, 22, 23, 33, 34, 35, 36, 37, 38, 43, 44, 48, 66, 72, 73, 79, 99, 103, 104, 112, 113, 126, 129, 130, 131, 136, 145, 146, 147, 148, 150, 151, 152, 154, 155, 157, 158, 163, 164, 165, 166, 167, 176, 177, 180, 182, 184], "r": [2, 51, 52, 53, 54, 55, 58, 59, 60, 113, 125, 126, 128, 130, 133, 138, 160, 162, 164, 166, 167, 173, 174, 175, 176, 179, 180, 181, 183], "4": [2, 16, 18, 31, 44, 51, 54, 58, 73, 101, 106, 107, 108, 112, 113, 114, 116, 117, 119, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 141, 144, 145, 146, 147, 148, 149, 151, 152, 153, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 177, 179, 180, 182], "sampl": [2, 8, 15, 23, 25, 26, 27, 30, 38, 42, 43, 44, 45, 48, 51, 52, 59, 63, 72, 73, 75, 79, 82, 86, 89, 91, 93, 94, 95, 98, 112, 126, 129, 131, 133, 138, 146, 147, 148, 149, 150, 151, 152, 154, 155, 157, 160, 162, 163, 164, 165, 166, 167, 171, 177, 180, 181, 183], "rate": [2, 4, 6, 8, 15, 23, 31, 32, 33, 35, 36, 43, 44, 51, 52, 53, 55, 59, 60, 72, 73, 99, 101, 107, 125, 126, 128, 131, 138, 144, 146, 147, 148, 150, 151, 152, 153, 154, 157, 163, 164, 166, 167, 171, 185], "baseband": [2, 8, 138, 166, 167, 180, 181, 185], "x_c": [2, 166, 167], "c": [2, 8, 16, 18, 19, 20, 21, 22, 33, 34, 35, 36, 37, 82, 99, 108, 113, 116, 119, 132, 141, 166, 167, 181], "2": [2, 5, 8, 16, 18, 21, 31, 43, 44, 51, 54, 58, 72, 73, 99, 100, 101, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 174, 176, 177, 178, 179, 180, 181, 182, 183], "to_real_pb": [2, 167, 180, 184, 185], "2f_": [2, 167], "awgn_capac": [3, 113, 184, 185], "calcul": [3, 4, 113, 116, 119, 130, 132, 141], "addit": [3, 112, 113, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 171], "white": [3, 112, 113, 171], "gaussian": [3, 5, 112, 113, 133, 171, 184, 185], "nois": [3, 8, 9, 10, 15, 21, 31, 33, 34, 35, 36, 37, 82, 86, 89, 101, 107, 112, 113, 125, 126, 128, 129, 144, 153, 164, 165, 171, 181], "awgn": [3, 101, 107, 112, 113, 130, 144, 145, 153, 166, 167, 171, 182, 184, 185], "bec_capac": [3, 116, 184, 185], "p": [3, 7, 109, 110, 115, 116, 118, 119, 124, 171], "erasur": [3, 115, 116, 124, 171], "bec": [3, 115, 116, 124, 171, 184, 185], "bsc_capac": [3, 119, 184, 185], "symmetr": [3, 118, 119, 124, 166, 167, 171], "bsc": [3, 118, 119, 124, 171, 184, 185], "fspl": [3, 132, 184], "d": [3, 132, 141, 173, 174, 184], "f": [3, 16, 18, 38, 43, 44, 66, 72, 73, 112, 131, 132, 133, 138, 141, 163, 169, 177, 178, 179, 180, 181, 182, 183], "free": [3, 132], "space": [3, 44, 73, 132], "parabolic_antenna": [3, 141, 184, 185], "tupl": [3, 31, 33, 36, 38, 43, 44, 66, 72, 73, 141, 145, 146, 147, 148, 149, 151, 152, 155, 156, 159], "gain": [3, 8, 11, 12, 13, 14, 15, 25, 27, 66, 67, 74, 82, 83, 84, 86, 91, 92, 94, 133, 141, 181], "g": [3, 36, 141, 174], "beamwidth": [3, 141], "theta": [3, 6, 27, 91, 94, 96, 141, 152], "parabol": [3, 141], "reflector": [3, 141], "signal": [4, 6, 8, 16, 18, 21, 22, 25, 26, 31, 33, 34, 35, 36, 37, 38, 39, 51, 52, 59, 60, 66, 68, 82, 85, 91, 93, 98, 111, 112, 113, 120, 121, 125, 126, 127, 128, 129, 131, 132, 133, 136, 137, 138, 140, 141, 142, 143, 150, 154, 157, 161, 163, 164, 165, 166, 167, 178, 179, 181, 183, 184, 185], "average_pow": [4, 111, 140, 184, 185], "averag": [4, 31, 111, 112, 113, 130, 140, 150], "papr": [4, 140, 180, 184, 185], "peak": [4, 120, 130, 140, 142, 143], "ratio": [4, 21, 31, 33, 34, 35, 36, 37, 101, 107, 112, 113, 125, 126, 128, 129, 140, 144, 153, 164, 165], "peak_pow": [4, 140, 142, 184, 185], "crest_factor": [4, 120, 140, 184, 185], "crest": [4, 120], "factor": [4, 8, 15, 24, 82, 86, 87, 120, 181], "peak_voltag": [4, 120, 143, 184, 185], "rms_voltag": [4, 120, 161, 184, 185], "root": [4, 5, 130, 157, 161, 162, 169, 170, 178], "mean": [4, 130, 150, 154, 161, 183], "squar": [4, 5, 130, 132, 141, 157, 161, 162, 178], "rm": [4, 120, 130, 161], "errorr": [4, 31, 32, 33, 34, 35, 36, 37, 182, 184, 185], "A": [4, 8, 16, 18, 19, 20, 21, 22, 24, 31, 38, 82, 117, 134, 135, 136, 141, 160, 162, 172, 181], "error": [4, 6, 8, 14, 15, 21, 31, 32, 33, 35, 36, 37, 82, 86, 99, 101, 107, 119, 130, 144, 153, 181, 185], "ber": [4, 6, 31, 99, 101, 144, 182, 184, 185], "symbol": [4, 6, 31, 33, 36, 99, 100, 101, 102, 103, 104, 107, 108, 112, 125, 126, 128, 129, 130, 131, 133, 145, 153, 156, 160, 162, 164, 165, 180, 183, 184, 185], "ser": [4, 6, 31, 99, 107, 153, 182, 184, 185], "evm": [4, 130, 184, 185], "x_hat": [4, 6, 31, 33, 99, 103, 130, 145, 182], "ref": [4, 130, 133], "vector": [4, 31, 63, 130, 150, 154, 185], "magnitud": [4, 114, 130, 169, 185], "hat": [4, 6, 33, 99, 103, 130, 145, 156], "k": [4, 5, 6, 33, 99, 100, 102, 103, 104, 105, 122, 123, 125, 126, 128, 130, 145, 156, 164, 180, 183], "psk": [5, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 130, 131, 136, 144, 145, 153, 156, 163, 180, 184, 185], "phase": [5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107, 108, 131, 136, 138, 151, 152, 171], "shift": [5, 99, 101, 106, 107, 108, 169, 170, 178, 179], "kei": [5, 99, 101, 106, 107, 108], "demodul": [5, 99, 103, 182], "time_bandwidth": [5, 133], "span": [5, 133, 160, 162, 180, 183], "raised_cosin": [5, 160, 183, 184, 185], "alpha": [5, 133, 158, 160, 162, 180, 183], "rais": [5, 157, 160, 162, 178], "cosin": [5, 157, 160, 162, 178], "rc": [5, 160], "root_raised_cosin": [5, 146, 147, 148, 149, 151, 152, 155, 157, 159, 162, 178, 180, 182, 183, 184, 185], "srrc": [5, 157, 162, 180], "binary_cod": [5, 117, 184, 185], "gener": [5, 112, 117, 134, 173, 182], "code": [5, 100, 108, 114, 117, 125, 126, 128, 134, 145, 156, 164, 170, 174, 182, 185], "length": [5, 38, 41, 45, 48, 100, 114, 117, 133, 134, 146, 149, 150, 154, 155, 160, 162, 166, 169, 170, 175, 177, 180, 183], "gray_cod": [5, 134, 184, 185], "grai": [5, 100, 108, 134, 145, 156, 182], "diff_decod": [5, 122, 123, 184, 185], "y": [5, 25, 26, 30, 38, 39, 51, 52, 60, 66, 68, 82, 85, 91, 93, 98, 112, 115, 118, 122, 123, 124, 131, 136, 138, 145, 154, 156, 157, 163, 181, 182], "y_prev": [5, 122, 123], "differenti": [5, 101, 107, 122, 123, 157, 185], "decod": [5, 122], "input": [5, 8, 16, 18, 21, 22, 25, 26, 38, 39, 40, 45, 48, 51, 52, 53, 59, 60, 61, 63, 66, 67, 68, 69, 75, 79, 82, 85, 91, 93, 99, 101, 107, 109, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 137, 139, 149, 155, 168, 171, 178, 179, 181], "data": [5, 122, 123, 135, 139, 168, 184], "diff_encod": [5, 101, 107, 122, 123, 184, 185], "use_styl": [6, 158], "appli": [6, 51, 131, 136, 145, 150, 154, 156, 158, 163, 171], "default": [6, 45, 48, 100, 108, 145, 154, 156, 158, 182], "matplotlib": [6, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 177, 178, 179, 180, 181, 182, 183, 184], "rcparam": [6, 158], "time_domain": [6, 112, 138, 157, 166, 167, 180, 182, 183, 184, 185], "sample_r": [6, 8, 15, 23, 43, 44, 72, 73, 131, 138, 146, 147, 148, 150, 151, 152, 154, 157, 166, 167, 177, 181, 183], "periodogram": [6, 150, 166, 167, 180, 184, 185], "power": [6, 99, 111, 112, 113, 121, 130, 137, 140, 141, 142, 150, 183, 184], "densiti": [6, 21, 150, 180, 183], "p_": [6, 101, 107, 111, 112, 121, 124, 130, 137, 140, 142, 144, 150, 153], "xx": [6, 150], "us": [6, 25, 28, 40, 53, 59, 61, 67, 69, 82, 88, 99, 103, 113, 116, 119, 130, 135, 139, 145, 146, 149, 150, 154, 155, 168, 173, 174, 175, 176, 178, 179, 182, 183, 184, 186], "welch": [6, 150, 154], "method": [6, 150, 154, 175, 178, 179], "spectrogram": [6, 154, 184, 185], "kwarg": [6, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159], "function": [6, 7, 8, 17, 38, 66, 67, 82, 109, 110, 113, 133, 144, 150, 153, 154, 175, 178, 179, 181, 183, 184, 185], "e_b": [6, 33, 34, 35, 36, 37, 99, 101, 113, 125, 126, 128, 144, 164, 184], "n_0": [6, 21, 33, 34, 35, 36, 37, 99, 101, 107, 112, 113, 125, 126, 128, 129, 130, 144, 145, 153, 164, 165, 182, 184], "constel": [6, 106, 112, 130, 131, 136, 145, 163, 169, 184, 185], "heatmap": [6, 145, 182], "bool": [6, 38, 40, 49, 51, 53, 57, 59, 61, 64, 66, 67, 69, 80, 101, 107, 145, 152, 156], "fals": [6, 38, 40, 51, 53, 59, 61, 66, 67, 69, 101, 107, 115, 118, 124, 145, 150, 154, 179, 183], "e_": [6, 33, 34, 35, 36, 37, 99, 107, 112, 113, 125, 128, 129, 130, 145, 153, 165, 182, 184], "symbol_map": [6, 99, 106, 108, 130, 156, 157, 182, 184, 185], "map": [6, 99, 108, 130, 156, 184, 185], "h": [6, 38, 40, 43, 44, 45, 51, 66, 72, 73, 75, 82, 133, 146, 147, 149, 180, 181, 183], "omega": [6, 27, 91, 94, 95, 146, 147, 148, 151, 152, 181], "step": [6, 25, 26, 30, 38, 48, 66, 79, 91, 93, 98, 146, 155], "zero": [6, 51, 63, 66, 67, 81, 82, 139, 146, 147, 148, 149, 151, 152, 155, 157, 159, 166, 178, 180, 181, 183], "pole": [6, 66, 67, 77, 146, 147, 148, 149, 151, 152, 155, 159, 178], "frequency_respons": [6, 38, 43, 44, 66, 72, 73, 147, 178, 179, 181, 183, 184, 185], "group_delai": [6, 148, 178, 179, 184, 185], "group": [6, 148], "delai": [6, 25, 38, 42, 59, 82, 91, 122, 123, 148, 151, 181], "tau_g": [6, 148], "impulse_respons": [6, 38, 45, 66, 75, 133, 149, 160, 162, 178, 179, 183, 184, 185], "phase_delai": [6, 151, 184, 185], "tau_": [6, 151], "phi": [6, 99, 100, 106, 131, 136, 138, 151], "phase_respons": [6, 152, 184, 185], "step_respons": [6, 38, 48, 66, 79, 155, 178, 179, 181, 184, 185], "zeros_pol": [6, 159, 179, 184, 185], "q": [7, 109, 110, 169, 184, 185], "comput": [7, 99, 101, 107, 109, 110, 112, 132, 178, 179, 181, 183], "complementari": [7, 109, 110], "cumul": [7, 109, 110], "distribut": [7, 109, 110], "standard": [7, 109, 110], "normal": [7, 8, 10, 15, 82, 86, 89, 109, 110, 130, 133, 154, 181, 183], "mathcal": [7, 109, 110, 112, 124], "qinv": [7, 109, 110, 184, 185], "invers": [7, 110], "closedlooppl": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 172, 181, 184, 185], "defin": [8, 38, 66, 112, 124, 133, 169, 172, 179, 184], "perform": [8, 101, 107, 169, 172, 178, 179, 182, 184], "close": [8, 15, 17, 172, 185], "loop": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 172, 185], "pll": [8, 9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 172, 185], "thi": [8, 26, 33, 34, 35, 37, 38, 51, 66, 93, 99, 108, 112, 113, 130, 150, 154, 173, 174, 175, 176, 177, 179, 181, 182, 183], "i": [8, 15, 24, 31, 36, 38, 45, 48, 49, 51, 54, 57, 58, 59, 64, 66, 75, 79, 80, 82, 86, 87, 89, 99, 100, 109, 110, 112, 113, 116, 119, 121, 124, 125, 126, 128, 129, 131, 132, 133, 135, 136, 137, 139, 141, 145, 146, 149, 150, 154, 155, 157, 160, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186], "meant": 8, "analysi": [8, 15, 175, 181, 185], "onli": [8, 38, 47, 51, 56, 59, 63, 66, 78, 100, 108, 112, 176, 181, 182], "block": [8, 25, 51, 82, 91, 122, 123], "diagram": [8, 25, 51, 82, 91, 122, 123], "bb": [8, 180, 181], "ped": [8, 14, 15, 86, 181], "lf": [8, 181], "lo": [8, 181], "e": [8, 25, 36, 111, 115, 116, 127, 169, 174, 178, 179, 181, 182], "j": [8, 25, 51, 54, 58, 66, 99, 112, 124, 136, 138, 169, 178, 179, 181], "nco": [8, 11, 15, 25, 27, 28, 86, 91, 92, 93, 94, 95, 96, 97, 98, 172, 181, 184, 185], "local": [8, 173, 175, 181], "oscil": [8, 25, 28, 91, 94, 172, 181, 185], "detector": [8, 14, 15, 86, 181], "filter": [8, 12, 13, 15, 17, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 133, 146, 147, 148, 149, 151, 152, 155, 157, 159, 160, 162, 172, 183, 184, 185], "numer": [8, 25, 28, 91, 94, 172, 179, 181, 185], "control": [8, 25, 28, 91, 94, 172, 181, 185], "The": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 58, 59, 60, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 178, 179, 181, 182, 183, 184, 186], "transfer": [8, 17, 38, 66, 67, 82, 133, 178, 179, 181], "2nd": [8, 82, 86, 172, 181, 185], "order": [8, 31, 36, 38, 46, 59, 62, 66, 76, 82, 86, 99, 100, 105, 112, 125, 126, 128, 130, 131, 133, 145, 160, 162, 163, 164, 172, 180, 181, 182, 185], "proport": [8, 12, 82, 83, 86, 132, 141, 172, 185], "plu": [8, 82, 86, 172, 185], "integr": [8, 13, 82, 84, 86, 172, 176, 179, 185], "h_": [8, 51, 54, 58, 181], "z": [8, 25, 38, 66, 82, 91, 122, 123, 169, 178, 179, 181], "k_1": [8, 12, 82, 83, 181], "k_2": [8, 13, 82, 84, 181], "frac": [8, 16, 18, 21, 22, 66, 82, 99, 111, 112, 113, 120, 125, 126, 128, 129, 130, 132, 133, 136, 137, 138, 140, 141, 161, 164, 165, 169, 181], "k_0": [8, 11, 15, 27, 86, 91, 92, 94, 181], "k_p": [8, 14, 15, 86, 181], "refer": [8, 16, 18, 19, 20, 21, 22, 31, 59, 82, 101, 107, 112, 120, 130, 131, 133, 140, 160, 162, 163, 169, 179, 183], "michael": [8, 16, 18, 19, 20, 21, 22, 82, 160, 162], "rice": [8, 16, 18, 19, 20, 21, 22, 82, 160, 162], "digit": [8, 16, 18, 19, 20, 21, 22, 25, 27, 82, 101, 107, 160, 162, 172, 181, 184, 185], "commun": [8, 16, 18, 19, 20, 21, 22, 82, 101, 107, 160, 162, 181, 184], "discret": [8, 16, 18, 19, 20, 21, 22, 82, 112, 124, 129, 160, 162, 165, 171, 177, 181], "approach": [8, 16, 18, 19, 20, 21, 22, 82, 113, 116, 119, 160, 162, 181], "appendix": [8, 82, 160, 162], "lock": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "exampl": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 144, 145, 146, 147, 148, 149, 151, 152, 153, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 181], "see": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 49, 50, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 106, 108, 133, 160, 162, 184], "noise_bandwidth": [8, 15, 82, 86, 89], "damping_factor": [8, 15, 82, 86, 87], "creat": [8, 15, 25, 27, 31, 32, 38, 40, 51, 53, 59, 61, 66, 67, 69, 82, 86, 91, 94, 99, 100, 106, 112, 114, 130, 131, 138, 157, 163, 166, 167, 169, 177, 181, 183], "object": [8, 15, 31, 32, 99, 100, 146, 147, 148, 149, 151, 152, 155, 159, 179, 181], "frequency_lock_tim": [8, 16], "freq_offset": [8, 16, 18], "frequenc": [8, 16, 18, 20, 38, 43, 44, 66, 72, 73, 82, 131, 132, 138, 141, 146, 147, 148, 150, 151, 152, 154, 166, 167, 171, 183, 185], "lock_tim": [8, 18, 181], "phase_error_vari": [8, 21], "cn0": [8, 21], "varianc": [8, 21, 112], "steadi": [8, 21], "state": [8, 21, 38, 47, 49, 51, 56, 57, 59, 63, 64, 66, 78, 80], "phase_lock_tim": [8, 22], "bn": [8, 9], "bandwidth": [8, 9, 10, 15, 19, 82, 86, 89, 113, 133, 160, 162, 181, 183], "b_n": [8, 9, 10, 15, 16, 18, 21, 22, 82, 86, 89], "hz": [8, 9, 15, 16, 18, 21, 43, 44, 72, 73, 82, 86, 89, 113, 121, 131, 132, 133, 137, 138, 141, 166, 167, 177], "bnt": [8, 10, 181], "t": [8, 10, 15, 82, 86, 89, 133, 135, 175, 177], "repres": [8, 17, 115, 116], "k0": [8, 11, 15, 25, 27, 86, 91, 92, 94], "k1": [8, 12, 82, 83, 181], "k2": [8, 13, 82, 84, 181], "kp": [8, 14, 15, 86], "omega_3db": [8, 19], "3": [8, 16, 18, 19, 22, 31, 51, 54, 58, 101, 106, 107, 108, 112, 113, 114, 115, 117, 118, 121, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 145, 146, 147, 148, 149, 151, 152, 155, 157, 159, 163, 164, 166, 167, 168, 169, 179, 181, 183, 184], "omega_": [8, 19], "textrm": [8, 19], "radian": [8, 19, 20, 21, 25, 27, 181], "omega_n": [8, 20, 181], "natur": [8, 20], "zeta": [8, 15, 24, 82, 86, 87], "damp": [8, 15, 24, 82, 86, 87, 181], "properti": [9, 10, 11, 12, 13, 14, 17, 19, 20, 23, 24, 28, 42, 46, 49, 50, 54, 55, 57, 58, 62, 64, 65, 70, 71, 74, 76, 77, 80, 81, 83, 84, 87, 88, 89, 92, 95, 96, 102, 105, 106, 108, 175], "paramet": [15, 16, 18, 21, 26, 27, 30, 33, 34, 35, 37, 39, 40, 43, 44, 45, 48, 52, 53, 60, 61, 63, 67, 68, 69, 72, 73, 75, 79, 85, 86, 93, 94, 98, 100, 101, 103, 104, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169], "where": [15, 82, 86, 89, 100, 112, 113, 124, 125, 126, 128, 133, 164, 169, 178, 179, 184], "period": [15, 82, 86, 89, 169], "second": [15, 16, 18, 22, 31, 82, 86, 89, 133], "critic": [15, 24, 82, 86, 87, 181], "underdamp": [15, 24, 82, 86, 87], "overdamp": [15, 24, 82, 86, 87], "ted": [15, 86], "t_": [16, 18, 22, 60, 133, 183], "fl": [16, 18], "delta": [16, 18, 38, 45, 66, 75, 149, 178, 179], "offset": [16, 18, 25, 27, 91, 94, 96, 99, 100, 106, 131, 138, 163, 171, 181], "take": [16, 18, 22], "onto": [16, 18, 22], "equat": [16, 18, 19, 20, 21, 22, 66, 99], "39": 16, "pl": [18, 22], "38": 18, "34": 19, "33": 20, "sigma_": 21, "theta_": 21, "carrier": [21, 99], "43": 21, "40": 22, "less": 24, "than": [24, 100, 108, 136, 145, 156], "greater": 24, "dd": [25, 26, 27, 28, 29, 30, 91, 172, 181, 184, 185], "direct": [25, 27, 172, 181, 185], "synthes": [25, 27, 172, 181, 185], "note": [25, 38, 51, 54, 58, 66, 82, 91, 99, 112, 113, 116, 119, 122, 123, 133, 136, 141, 169], "increment": [25, 26, 27, 91, 93, 94, 95, 181], "v": [25, 91, 121, 137, 173], "output": [25, 26, 30, 38, 39, 45, 48, 51, 52, 66, 67, 69, 75, 79, 82, 85, 91, 93, 98, 112, 113, 114, 115, 116, 118, 119, 123, 124, 130, 137, 139, 149, 155, 168, 173, 177, 178, 179, 181], "constant": [25, 27, 82, 91, 94, 95, 150, 154, 179, 181], "accumul": [25, 27, 31, 91, 94, 95, 181], "absolut": [25, 27, 91, 94, 96, 113], "adder": [25, 82, 91, 122, 123, 181], "__call__": [25, 26, 38, 39, 40, 49, 51, 52, 53, 57, 59, 60, 61, 64, 66, 67, 68, 69, 80, 82, 85, 91, 93], "variabl": [25, 26, 91, 93, 135, 181], "reset": [25, 29, 38, 47, 51, 56, 59, 63, 66, 78, 82, 90, 91, 97], "forward": [25, 30, 91, 98], "vari": [26, 93], "number": [30, 31, 33, 34, 37, 43, 44, 45, 48, 72, 73, 75, 79, 98, 99, 102, 112, 125, 126, 128, 133, 135, 139, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 160, 162, 164, 168], "measur": [31, 33, 111, 112, 120, 121, 127, 130, 137, 140, 142, 143, 161, 181, 184, 185], "new": [31, 32, 59, 61, 99, 100, 163], "In": [31, 39, 40, 49, 52, 53, 54, 57, 58, 61, 64, 67, 69, 80, 101, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 144, 145, 146, 147, 148, 149, 151, 152, 153, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 177, 182], "from": [31, 43, 44, 66, 67, 72, 73, 99, 108, 121, 125, 126, 128, 129, 137, 150, 154, 164, 165, 173, 178, 179, 181, 184], "first": [31, 51, 139, 168, 175, 176], "receiv": [31, 33, 101, 107, 130, 132], "contain": [31, 112, 135], "10": [31, 54, 58, 101, 107, 112, 117, 121, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 144, 145, 146, 147, 148, 149, 151, 152, 153, 155, 157, 159, 160, 162, 163, 164, 165, 177, 178, 179, 180, 181, 182, 183], "add": [31, 33, 36, 112, 131, 163, 171, 182, 186], "out": [31, 54, 58, 106, 108, 109, 110, 114, 115, 117, 118, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 134, 137, 139, 141, 148, 158, 164, 165, 168], "5": [31, 51, 54, 58, 112, 115, 117, 118, 119, 124, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 141, 146, 147, 148, 149, 151, 152, 155, 157, 159, 160, 162, 163, 164, 165, 166, 167, 169, 173, 177, 178, 179, 180, 181, 182, 183, 185], "total": [31, 183], "ar": [31, 33, 34, 35, 37, 40, 44, 51, 53, 54, 58, 61, 67, 69, 73, 99, 100, 113, 115, 116, 118, 119, 139, 145, 146, 147, 148, 150, 151, 152, 154, 156, 158, 166, 167, 173, 174, 175, 177, 179, 181, 183, 184, 186], "count": [31, 34, 130], "error_r": [31, 35, 36, 182], "everi": [31, 177], "can": [31, 33, 34, 35, 37, 82, 112, 130, 133, 139, 150, 154, 174, 178, 179, 182, 184, 186], "obtain": 31, "follow": [31, 136, 145, 154, 156, 158, 181], "6": [31, 51, 54, 58, 108, 117, 121, 124, 125, 126, 130, 132, 134, 135, 137, 141, 145, 146, 147, 148, 149, 151, 152, 155, 156, 157, 159, 166, 167, 169, 176, 178, 179, 181, 182, 185], "tabul": [31, 32], "given": [31, 33, 34, 35, 37, 59, 60, 130, 178, 179], "none": [31, 35, 38, 45, 48, 59, 63, 82, 90, 99, 101, 107, 112, 113, 124, 139, 145, 146, 149, 150, 154, 155, 156, 168, 171, 177, 180, 182], "numpi": [31, 36, 38, 43, 44, 66, 72, 73, 112, 168, 177, 178, 179, 180, 181, 182, 183, 184], "all": [31, 36, 130, 176], "ascend": [31, 36], "correspond": [31, 36], "other": [33, 34, 35, 37, 177, 186], "quantiti": [33, 34, 35, 36, 37], "howev": [33, 34, 35, 37, 82, 116, 119, 177], "user": [33, 34, 35, 37, 178, 179], "caution": [33, 34, 35, 37], "consist": [33, 34, 35, 36, 37], "instanc": [33, 34, 35, 37, 175], "transmit": [33, 130], "section": [33, 34, 35, 36, 37, 179, 181], "specif": [36, 176, 183], "whatev": 36, "wa": [36, 113], "provid": [36, 99, 101, 107, 184], "wrapper": [38, 66], "scipi": [38, 39, 52, 66, 150, 154, 183, 184], "convolv": [38, 39, 52, 157], "It": [38, 66, 82, 112], "support": [38, 66], "one": [38, 66, 100, 108, 133, 135, 146, 147, 148, 150, 151, 152, 154, 166, 178, 179, 180, 183], "stream": [38, 39, 40, 47, 49, 51, 52, 53, 56, 57, 59, 61, 63, 64, 66, 67, 69, 78, 80, 99], "its": [38, 66, 67, 112, 178, 179, 183], "feedforward": [38, 40, 50, 51, 53, 54, 58, 66, 69, 71, 146, 147, 148, 149, 151, 152, 155, 159, 178, 179], "coeffici": [38, 40, 51, 53, 66, 69, 146, 147, 148, 149, 151, 152, 155, 159, 178, 179], "h_i": [38, 40, 50, 51, 53, 54, 58, 178], "sum_": [38, 66, 111, 112, 113, 127, 130, 161], "sum": [38, 66, 183], "limits_": [38, 66], "__len__": [38, 41], "frequency_response_log": [38, 44, 66, 73], "logarithm": [38, 44, 66, 73, 146, 147, 148, 150, 151, 152, 178, 179], "axi": [38, 44, 66, 73, 145, 146, 147, 148, 150, 151, 152, 154, 156, 157, 177], "when": [38, 45, 48, 66, 75, 79, 112, 113, 115, 116, 118, 119, 129, 146, 147, 148, 149, 151, 152, 155, 165, 169, 177, 178, 179], "mode": [38, 39, 40, 47, 49, 51, 52, 53, 56, 57, 59, 61, 63, 64, 66, 67, 69, 78, 80, 114, 169], "u": [38, 48, 66, 79, 155, 169, 170, 178, 179], "indic": [38, 40, 49, 51, 53, 57, 59, 61, 64, 66, 67, 69, 80, 99, 100, 101, 107, 136, 152, 157], "whether": [38, 40, 49, 51, 53, 57, 59, 61, 64, 66, 67, 69, 80, 101, 107, 152], "tap": [38, 50, 51, 53, 54, 58, 59, 65, 66, 70, 71, 178, 179], "full": [39, 52, 114], "valid": [39, 52, 169], "same": [39, 52, 157, 178], "non": [39, 52], "convolut": [39, 52], "detail": [39, 52], "alwai": [39, 52], "produc": [39, 51, 52, 133, 183], "previou": [40, 53, 61, 63, 67, 69, 122, 123], "preserv": [40, 49, 53, 57, 61, 64, 67, 69, 80], "between": [40, 49, 51, 53, 57, 61, 64, 67, 69, 80, 132, 150, 154, 181], "call": [40, 49, 53, 57, 61, 64, 67, 69, 80], "1024": [43, 44, 72, 73, 146, 147, 148, 151, 152, 180, 183], "plot": [43, 44, 45, 48, 72, 73, 75, 79, 101, 106, 107, 108, 112, 113, 114, 116, 119, 130, 131, 133, 136, 138, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 166, 167, 169, 177, 178, 179, 181, 182, 183, 184, 185], "decad": [44, 73, 146, 147, 148, 151, 152, 178, 181], "equival": [51, 112, 113, 129, 165, 174, 177], "upsampl": 51, "insert": 51, "each": [51, 130, 135, 150, 154], "prototyp": [51, 54, 58], "instead": [51, 145], "decompos": 51, "parallel": 51, "commut": 51, "prevent": 51, "need": [51, 175, 176], "multipli": 51, "case": 51, "2x": 51, "hold": [51, 139], "top": 51, "bottom": 51, "relat": [51, 54, 58, 113, 133], "polyphase_tap": [51, 54, 58], "befor": [54, 58, 186], "decomposit": [54, 58], "after": [54, 58], "np": [54, 58, 101, 107, 112, 113, 114, 115, 116, 118, 119, 124, 130, 131, 136, 138, 144, 145, 146, 147, 148, 149, 151, 152, 153, 155, 157, 159, 163, 166, 167, 169, 177, 178, 179, 180, 181, 182, 183], "arang": [54, 58, 112, 114, 138, 166, 167, 169, 177, 181], "7": [54, 58, 108, 117, 124, 130, 134, 135, 157, 169], "8": [54, 58, 101, 106, 107, 108, 112, 113, 114, 116, 117, 119, 124, 130, 133, 134, 135, 138, 141, 144, 145, 146, 147, 148, 149, 151, 152, 153, 155, 156, 157, 158, 159, 160, 162, 166, 167, 169, 174, 178, 179, 180, 181, 183], "9": [54, 58, 117, 124, 130, 134, 135, 160, 162, 180, 182, 183, 185], "resampl": [59, 60, 61, 62, 63, 64, 65, 184, 185], "http": [59, 120, 133, 140, 169, 173, 174], "wirelesspi": 59, "com": [59, 133, 174], "fraction": [59, 63, 133, 177], "structur": 59, "index": [59, 63, 156, 173], "should": [63, 174], "equal": 63, "three": [63, 177, 183], "If": [63, 112, 113, 124, 139, 145, 146, 149, 150, 154, 155, 156, 157, 166, 168, 184], "lfilter": 66, "b_i": [66, 69, 71, 146, 147, 148, 149, 151, 152, 155, 159, 179], "feedback": [66, 69, 70, 146, 147, 148, 149, 151, 152, 155, 159, 179], "a_j": [66, 69, 70, 146, 147, 148, 149, 151, 152, 155, 159, 179], "These": [66, 99, 158, 174, 181], "differ": [66, 100, 108, 157, 169, 183], "a_0": 66, "left": [66, 99, 111, 112, 113, 127, 130, 132, 133, 136, 138, 141, 142, 143, 161, 169], "m": [66, 99, 100, 102, 103, 104, 105, 108, 124, 125, 126, 128, 164, 173, 174, 175, 176, 184], "right": [66, 99, 111, 112, 113, 127, 130, 132, 133, 136, 138, 141, 142, 143, 161, 169], "b": [66, 69, 113, 133, 135, 146, 149, 155, 173, 183], "classmethod": [66, 67], "zerospol": [66, 67, 146, 147, 148, 149, 151, 152, 155, 159, 179], "self": [66, 67], "100": [66, 75, 79, 101, 107, 112, 113, 116, 119, 121, 130, 137, 138, 144, 146, 149, 153, 155, 157, 163, 166, 167, 175, 177, 181], "a_tap": [66, 70, 179], "b_tap": [66, 71, 179], "loopfilt": [82, 83, 84, 85, 86, 87, 88, 89, 90, 172, 181, 184, 185], "ppi": [82, 86, 172], "track": 82, "cannot": 82, "chirp": 82, "ramp": 82, "underli": [82, 88], "modul": [99, 100, 101, 104, 105, 107, 112, 125, 126, 128, 130, 131, 136, 144, 145, 153, 163, 164, 173, 176, 180, 182, 184, 185], "scheme": 99, "encod": [99, 101, 107, 122, 123, 184], "inform": [99, 125, 126, 128, 164], "sinusoid": [99, 112, 166, 167, 179], "taken": 99, "decim": [99, 100, 103, 104, 108, 182], "dot": [99, 108], "mathbb": [99, 108, 113, 169], "exp": [99, 133, 136, 138, 146, 147, 148, 149, 151, 152, 155, 157, 159, 167, 169, 177, 179, 181], "pi": [99, 112, 132, 133, 136, 138, 141, 146, 147, 148, 149, 151, 152, 155, 157, 159, 166, 167, 169, 177, 178, 179, 181], "phase_offset": [99, 100, 106, 112, 130, 131, 136, 145, 156, 163, 180, 182], "valu": [99, 100, 101, 107, 109, 110, 114, 121, 122, 123, 133, 136, 137, 145, 156, 179, 185], "maximum": [99, 103, 145, 156], "likelihood": [99, 103], "estim": [99, 103, 150, 154, 181, 184], "log_2": [99, 102, 113, 125, 126, 128, 164], "degre": [99, 100, 106, 131, 136, 138, 141], "mapsto": [99, 108], "symbol_label": [100, 108, 182], "bin": [100, 108, 130, 145, 156, 182], "ge": 100, "label": [100, 101, 107, 112, 130, 131, 133, 136, 144, 153, 154, 157, 160, 162, 163, 177, 180, 181, 182, 183], "consecut": 100, "adjac": [100, 108, 182, 183], "mai": [100, 108, 130, 145, 154, 156, 158, 179], "more": [100, 108, 185], "npt": [100, 146, 147, 148, 149, 151, 152, 155, 159], "whose": 100, "start": [100, 173], "0j": 100, "go": 100, "counter": 100, "clockwis": 100, "around": 100, "circl": [100, 179], "energi": [101, 107, 113, 125, 126, 127, 128, 129, 144, 153, 160, 162, 164, 165, 184, 185], "psd": [101, 107, 113, 125, 126, 128, 129, 144, 153, 164, 165], "were": [101, 107], "simon": [101, 107], "alouini": [101, 107], "over": [101, 107, 135], "fade": [101, 107], "channel": [101, 107, 113, 115, 116, 118, 119, 124, 144, 153, 184, 185], "chapter": [101, 107], "singl": [101, 107], "john": [101, 107], "proaki": [101, 107], "optimum": [101, 107], "theoret": [101, 107, 144, 153, 182, 185], "curv": [101, 107, 144, 153], "bpsk": [101, 107, 144, 153, 157, 180], "qpsk": [101, 106, 107, 112, 130, 131, 144, 145, 153, 156, 157, 163], "psk8": [101, 107, 144, 153, 182], "psk16": [101, 107, 144, 153, 182], "linspac": [101, 107, 113, 116, 119, 144, 153, 179, 180, 181, 182], "plt": [101, 106, 107, 108, 112, 113, 114, 116, 119, 130, 131, 133, 136, 138, 144, 145, 146, 147, 148, 149, 151, 152, 153, 155, 156, 157, 159, 160, 162, 163, 166, 167, 169, 177, 178, 179, 180, 181, 182, 183], "figur": [101, 106, 107, 108, 112, 113, 114, 116, 119, 130, 131, 133, 136, 138, 144, 145, 146, 147, 148, 149, 151, 152, 153, 155, 156, 157, 158, 159, 160, 162, 163, 166, 167, 169, 177, 178, 179, 180, 181, 182, 183], "figsiz": [101, 106, 107, 108, 112, 113, 114, 116, 119, 130, 131, 133, 136, 138, 144, 145, 146, 147, 148, 149, 151, 152, 153, 155, 156, 157, 158, 159, 160, 162, 163, 166, 167, 169, 177, 178, 179, 180, 181, 182, 183], "titl": [101, 107, 112, 113, 114, 116, 119, 130, 131, 136, 138, 144, 153, 157, 163, 166, 167, 169, 177, 180, 181, 182, 183], "tight_layout": [101, 107, 112, 113, 114, 116, 119, 130, 131, 138, 144, 153, 157, 163, 166, 167, 169, 180, 181, 182, 183], "compar": [101, 107, 183], "de": [101, 107, 185], "true": [101, 107, 113, 115, 116, 118, 119, 124, 145, 152, 156, 158, 180, 182], "45": [106, 112, 130, 131, 136, 138, 145, 156, 163, 180, 182], "se": [107, 153], "00000000e": [108, 179], "00": [108, 179], "00j": 108, "07106781e": 108, "01": [108, 135, 179, 181], "01j": 108, "12323400e": 108, "17": [108, 130, 141], "83697020e": 108, "22464680e": 108, "16j": 108, "annot": [108, 156, 185], "probabl": [109, 110, 115, 116, 118, 119, 124, 171, 184, 185], "exceed": [109, 110], "15865525393145707": [109, 110], "158655": [109, 110], "0000010494310452": [109, 110], "text": [111, 112, 113, 116, 119, 120, 121, 130, 131, 132, 137, 140, 142, 143, 161, 163], "avg": [111, 112, 140], "seed": 112, "which": [112, 113, 131, 136, 141, 145, 156, 163, 177, 181, 183], "ad": [112, 175, 184, 185], "desir": [112, 182], "explicitli": 112, "assum": [112, 124, 139, 168], "known": 112, "pass": [112, 115, 118, 124, 130, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 171, 173, 174, 178, 179], "must": [112, 133, 138, 160, 162, 169], "random": [112, 115, 118, 124, 130, 131, 136, 145, 157, 163, 180, 182], "default_rng": 112, "noisi": 112, "w": [112, 177, 178, 179, 180, 181, 182, 183], "sigma": [112, 113], "For": [112, 178], "sim": 112, "cn": 112, "set": [112, 145, 150, 154, 156, 158, 175, 176, 179], "sin": [112, 166], "ha": [112, 133, 141, 169, 181, 182, 183], "randint": [112, 115, 118, 124, 130, 131, 136, 145, 157, 163, 180, 182], "1_000": [112, 131, 136, 163, 180], "zorder": [112, 131, 163], "infti": [112, 113], "nand": 112, "capac": [113, 116, 119, 184, 185], "2d": 113, "x_i": [113, 115, 116, 118, 119, 124, 136], "y_i": [113, 115, 116, 118, 119, 124], "monoton": 113, "decreas": 113, "limit": [113, 145, 156, 182], "20": [113, 115, 118, 121, 124, 130, 131, 135, 136, 137, 180, 182, 183], "xlabel": [113, 114, 116, 119, 130, 169, 177, 180, 181, 183], "ylabel": [113, 114, 116, 119, 130, 169, 177, 180, 181, 183], "grid": [113, 116, 119, 158, 177, 180, 181, 183], "At": 113, "occur": 113, "view": [113, 175], "59": 113, "shannon": 113, "semilogi": [113, 144, 153], "both": [113, 145, 156, 157, 177, 181], "barker": [114, 170, 184, 185], "bipolar": [114, 185], "sequenc": [114, 115, 118, 124, 169, 171, 184, 185], "format": [114, 175], "13": [114, 117, 134], "seq": 114, "have": [114, 139, 157, 168], "ideal": [114, 182], "minim": 114, "autocorrel": [114, 169], "sidelob": [114, 169], "corr": [114, 169], "correl": [114, 169], "lag": [114, 169], "size": [114, 124, 177, 181, 182, 183], "ab": [114, 169, 183], "through": [115, 118, 124, 171, 178, 179, 181], "25": [115, 118, 124, 177, 180, 181, 183], "roughli": [115, 118, 177], "eras": 115, "11": [117, 134, 173], "12": [117, 134, 178, 182], "14": [117, 134, 174], "15": [117, 134], "transit": [118, 119, 124, 171], "flip": 118, "h_b": 119, "cf": 120, "v_": [120, 121, 137, 143, 161], "en": [120, 140, 169], "wikipedia": [120, 140, 169], "org": [120, 140, 169], "wiki": [120, 140, 169], "type": [121, 130, 137, 139, 150, 154, 168, 185], "voltag": [121, 137, 143, 161, 184], "decibel": [121, 137], "ani": [121, 137, 176], "x_": [121, 137], "log_": [121, 132, 140], "50": [121, 137, 156, 166, 167, 177, 180], "mhz": [121, 137], "77": [121, 135, 137], "50e6": 121, "76": [121, 135], "98970004336019": 121, "mw": [121, 137], "dbm": [121, 137], "dbv": [121, 137], "020599913279624": 121, "uncod": 123, "dmc": [124, 171, 184, 185], "memoryless": [124, 171], "matrix": [124, 171], "pr": 124, "y_j": 124, "alphabet": 124, "ldot": 124, "qam": [125, 126, 128, 164], "249387366082999": [125, 126], "020599913279625": [125, 165], "sym": [126, 129, 133, 164, 165, 183], "750612633917001": [128, 164], "979400086720376": [128, 129], "system": [129, 165, 175, 176, 181, 184], "norm": 130, "noiseless": 130, "sourc": 130, "max": [130, 142, 143, 175], "_": 130, "sqrt": [130, 133, 161, 169, 180, 181, 183], "instantan": 130, "percentil": [130, 154], "1000": [130, 157, 166, 167, 182], "either": 130, "018776651409473": 130, "975932782774793": 130, "173274470345234": 130, "95th": 130, "95": 130, "67228389544238": 130, "inst_evm": 130, "hist": 130, "histogram": 130, "frequency_offset": [131, 171, 184, 185], "freq_rat": 131, "cycl": [131, 157], "000": 131, "1e": [131, 182], "5e": 131, "deg": [131, 136], "path": [132, 175, 184], "loss": [132, 184], "distanc": 132, "meter": [132, 141], "transmitt": 132, "km": 132, "link": [132, 184, 185], "ghz": [132, 141], "1e3": [132, 138, 166], "1e9": [132, 141], "92": 132, "44778322188337": 132, "so": [132, 133, 184], "doubl": [132, 141], "result": [132, 141, 182], "increas": [132, 141, 179], "2e3": 132, "98": 132, "468383135163": 132, "also": [132, 133, 184], "2e9": 132, "puls": [133, 157, 160, 162, 184, 185], "shape": [133, 157, 160, 162, 184, 185], "product": [133, 183], "side": [133, 146, 147, 148, 150, 151, 152, 154, 178, 179, 180, 183], "thought": [133, 186], "smaller": [133, 183], "wider": 133, "even": [133, 160, 162], "amplitud": [133, 136, 171, 177, 181], "nomin": 133, "ln": 133, "www": 133, "mathwork": 133, "help": 133, "gaussdesign": 133, "html": [133, 173], "onlinelibrari": 133, "wilei": 133, "doi": 133, "pdf": 133, "1002": 133, "9780470041956": 133, "app2": 133, "h_0p1": [133, 160, 162], "h_0p2": 133, "h_0p3": 133, "displai": [135, 145, 146, 147, 148, 150, 151, 152, 154, 156], "consid": 135, "line": [135, 157, 180], "string": [135, 150, 154], "print": [135, 177, 178, 179, 181], "quick": 135, "brown": 135, "fox": 135, "jump": 135, "lazi": 135, "dog": 135, "00000000": 135, "54": 135, "68": 135, "65": 135, "71": 135, "75": [135, 145, 181, 182], "69": 135, "63": 135, "6b": 135, "62": 135, "72": 135, "6f": 135, "6e": 135, "00000010": 135, "66": 135, "78": 135, "6a": 135, "6d": 135, "70": [135, 183], "73": 135, "74": 135, "00000020": 135, "6c": 135, "61": 135, "7a": 135, "79": 135, "64": [135, 179], "67": 135, "he": 135, "02": [135, 179, 181], "03": [135, 179], "04": [135, 179], "00000004": 135, "05": [135, 177, 179, 181], "06": 135, "07": 135, "08": 135, "00000008": 135, "09": 135, "0a": 135, "iq_imbal": [136, 171, 184, 185], "iq": [136, 171], "imbal": [136, 171], "posit": 136, "compon": [136, 166, 167], "larger": [136, 145, 156], "quadratur": 136, "lead": [136, 182], "g_i": 136, "180": 136, "g_q": 136, "x_q": 136, "horizont": 136, "stretch": 136, "while": [136, 183], "neg": 136, "vertic": 136, "y1": 136, "y2": 136, "subplot": [136, 181, 182], "y_1": 136, "legend": [136, 177, 180, 181, 183], "y_2": 136, "northwest": 136, "northeast": 136, "50118723": 137, "36272725": 137, "9952623149688795": 137, "cdot": 138, "satisfi": 138, "le": [138, 141, 160, 162], "1j": [138, 146, 147, 148, 149, 151, 152, 155, 157, 159, 167, 177, 179, 181], "remov": [138, 150, 154], "rotat": 138, "dtype": [139, 157, 168, 181], "dtypelik": [139, 168], "most": [139, 168], "signific": [139, 168], "enough": 139, "fill": 139, "last": [139, 173], "remain": 139, "smallest": 139, "unsign": 139, "integ": 139, "uint8": [139, 168], "diamet": 141, "effici": 141, "55": 141, "eta": 141, "dbi": 141, "half": 141, "arcsin": 141, "83": 141, "dish": 141, "21": 141, "810210290266568": 141, "437435887991374": 141, "23": 141, "sinc": [141, 173, 182], "antenna": [141, 184], "we": [141, 184], "observ": 141, "830810203546193": 141, "529544741425365": 141, "keyword": [144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 178, 179], "argument": [144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 175, 178, 179], "pyplot": [144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 177, 178, 179, 180, 181, 182, 183], "scatter": 145, "overwritten": [145, 154, 156], "rang": [145, 181, 182], "hist2d": 145, "marker": [145, 156, 177, 178, 179, 182], "linestyl": [145, 156, 158, 169, 177, 181, 182, 183], "10_000": 145, "n_time": [146, 179], "n_freq": 146, "x_axi": [146, 147, 148, 150, 151, 152, 154, 178, 179, 180, 181], "two": [146, 147, 148, 150, 151, 152, 154, 169, 177, 178, 179], "log": [146, 147, 148, 150, 151, 152, 178, 179, 181], "definit": [146, 147, 148, 149, 151, 152, 155, 159], "n_t": 146, "n_f": 146, "scale": [146, 147, 148, 150, 151, 152, 154, 178, 179], "option": [146, 147, 148, 150, 151, 152, 154], "spectrum": [146, 147, 148, 150, 151, 152, 154, 166, 167], "h_srrc": [146, 147, 148, 149, 151, 152, 155, 157, 159, 182], "conj": [146, 147, 148, 149, 151, 152, 155, 159, 179, 181], "30": [146, 149, 155, 166, 167, 179, 185], "ylim": [148, 169, 178, 181, 182, 183], "48": 148, "52": 148, "window": [150, 154], "hann": [150, 154], "overlap": [150, 154, 180], "fft": [150, 154, 166, 167], "detrend": [150, 154], "median": 150, "spectral": [150, 180, 183, 184], "segment": [150, 154], "256": [150, 154, 180], "point": [150, 154], "trend": [150, 154], "unwrap": [152, 181], "pcolormesh": 154, "vmin": 154, "10th": 154, "vmax": 154, "100th": 154, "shade": 154, "gouraud": 154, "represent": 156, "markers": 156, "diff": [157, 180], "color": [157, 180, 183], "how": [157, 175, 176], "imaginari": 157, "part": [157, 163, 181], "base": 157, "current": [157, 174], "solid": 157, "dash": 157, "share": 157, "10e3": 157, "complex64": [157, 181], "style": 158, "revert": 158, "rcdefault": 158, "_rc_param": 158, "rc_param": 158, "ax": 158, "autolayout": 158, "max_open_warn": 158, "titleweight": 158, "bold": 158, "excess": [160, 162, 183], "h_0p5": [160, 162], "h_0p9": [160, 162], "sample_rate_offset": [163, 171, 184, 185], "ppm": [163, 171], "million": 163, "odd": 166, "append": [166, 180], "end": 166, "250": [166, 167], "300": [166, 167], "ksp": [166, 167], "notic": [166, 167, 177, 183], "conjug": [166, 167, 179], "2048": [166, 167, 180], "500": [166, 167, 181], "longer": 166, "now": [166, 167, 177], "150": [166, 167], "asymmetr": 167, "zadoff_chu": [169, 170, 184, 185], "zadoff": [169, 170, 185], "chu": [169, 170, 185], "rel": [169, 183], "prime": 169, "gcd": 169, "ne": 169, "cyclic": 169, "x_u": 169, "c_": 169, "2q": 169, "mod": 169, "e2": 169, "80": 169, "93chu_sequ": 169, "x_3": 169, "139": 169, "x3": 169, "linewidth": 169, "roll": [169, 183], "tile": 169, "x_5": 169, "x5": 169, "cross": 169, "xcorr": 169, "sphinx": 173, "immateri": 173, "theme": 173, "depend": [173, 175, 176], "store": [173, 174, 176], "requir": [173, 174, 175, 176], "txt": [173, 174, 175, 176], "myst": 173, "parser": 173, "design": [173, 184], "updat": 173, "git": [173, 174], "math": 173, "dollar": 173, "ipykernel": 173, "nb": 173, "switch": 173, "pip": [173, 174, 175, 176, 184], "python3": [173, 174, 175, 176, 184], "built": 173, "run": 173, "command": 173, "dirhtml": 173, "locat": [173, 176], "home": 173, "page": 173, "site": 173, "directori": [173, 174], "get": 173, "necessari": 173, "webpag": 173, "webserv": 173, "easili": [173, 175, 176, 178, 179], "done": 173, "python": [173, 184], "server": 173, "8080": 173, "access": [173, 175], "web": 173, "browser": 173, "localhost": 173, "latest": [174, 184], "releas": [174, 185], "version": [174, 184], "main": [174, 183], "wai": 174, "branch": [174, 175], "mhostett": [174, 185], "Or": [174, 176], "pre": 174, "To": 174, "activ": 174, "develop": [174, 175, 176], "librari": [174, 175, 176, 177, 182, 184, 186], "benefici": 174, "fashion": 174, "allow": [174, 176], "chang": [174, 186], "immedi": 174, "seen": 174, "upon": 174, "next": 174, "import": [174, 177, 178, 179, 180, 181, 182, 183, 184], "clone": 174, "repo": 174, "wherev": 174, "you": [174, 175, 176, 184], "like": [174, 184], "flag": 174, "includ": [174, 175, 176, 184], "packag": [174, 184], "lint": 174, "test": [174, 184], "pylint": [174, 175], "black": 174, "jupyt": 174, "22": 174, "pytest": [174, 176], "cov": 174, "toml": [174, 175, 176], "xdist": 174, "benchmark": 174, "static": 175, "your": [175, 176], "dev": [175, 176], "variou": [175, 183], "nuisanc": 175, "warn": 175, "ignor": 175, "list": 175, "pyproject": [175, 176], "tool": [175, 176, 184], "src": 175, "_version": 175, "py": [175, 176], "disabl": 175, "comparison": 175, "callabl": 175, "doesn": 175, "understand": [175, 179], "metaclass": 175, "fixm": 175, "global": 175, "statement": 175, "invalid": 175, "name": 175, "miss": 175, "docstr": 175, "protect": 175, "too": 175, "mani": 175, "ancestor": 175, "attribut": 175, "public": 175, "unneed": 175, "min": 175, "similar": [175, 183], "120": 175, "manual": [175, 176], "file": [175, 176], "vscode": [175, 176], "json": [175, 176], "instruct": [175, 176], "about": [175, 176], "invok": [175, 176], "edit": [175, 179], "ini_opt": 176, "minvers": 176, "addopt": 176, "showloc": 176, "testpath": 176, "execut": 176, "test_psk": 176, "infrastructur": 176, "debug": 176, "config": [177, 178, 179, 180, 181, 182, 183], "inlinebackend": [177, 178, 179, 180, 181, 182, 183], "print_figure_kwarg": [177, 178, 179, 180, 181, 182, 183], "facecolor": [177, 178, 179, 180, 181, 182, 183], "widget": [177, 178, 179, 180, 181, 182, 183], "continu": 177, "tx": 177, "decai": [177, 179], "o": 177, "fillstyl": 177, "imag": 177, "origin": 177, "show": [177, 178, 179, 180, 181, 182, 183], "accomplish": [177, 182], "def": [177, 180, 182], "resample_sign": 177, "new_sample_r": 177, "ty": 177, "gca": [177, 182], "set_prop_cycl": [177, 182], "200": [177, 182], "four": 177, "400": 177, "appear": 177, "fourth": 177, "often": 177, "do": 177, "align": 177, "315": 177, "32": 177, "below": [178, 179], "00095883": 178, "00175012": 178, "00423921": 178, "0058825": 178, "006151": 178, "00474595": 178, "0017044": 178, "00254816": 178, "00721645": 178, "0112324": 178, "01342358": 178, "01273202": 178, "00845058": 178, "0004368": 178, "01073669": 178, "02372977": 178, "03650247": 178, "04650654": 178, "05098525": 178, "04734644": 178, "03355896": 178, "00851486": 178, "02769991": 178, "07367348": 178, "12670447": 178, "1830132": 178, "23810898": 178, "28727058": 178, "3260799": 178, "3509384": 178, "35949665": 178, "conveni": [178, 179], "evalu": [178, 179], "envelop": [178, 179], "here": [178, 179], "altern": 179, "0x00000179ff644bc8": 179, "47820725": 179, "78207252e": 179, "58172329e": 179, "10862468e": 179, "86109590e": 179, "21565653e": 179, "01140214e": 179, "57286400e": 179, "67772160e": 179, "47338728e": 179, "10422993e": 179, "89312837e": 179, "12240078e": 179, "03953322e": 179, "69685122e": 179, "63882791e": 179, "81474977e": 179, "47193366e": 179, "85259041e": 179, "15647504e": 179, "23851924e": 179, "42176895e": 179, "84684395e": 179, "42721858e": 179, "72236648e": 179, "14721649e": 179, "10813095e": 179, "94024315e": 179, "78877688e": 179, "74077567e": 179, "87820725": 179, "53637958": 179, "94724205": 179, "13335164": 179, "1455082": 179, "04436799": 179, "88708159": 179, "71930943": 179, "5719707": 179, "46154771": 179, "39261642": 179, "36139242": 179, "35935288": 179, "3763214": 179, "40270968": 179, "43085717": 179, "45557651": 179, "47410241": 179, "48566716": 179, "49090568": 179, "49124786": 179, "48840102": 179, "4839738": 179, "47925143": 179, "47510421": 179, "47199608": 179, "47005584": 179, "46917696": 179, "46911955": 179, "denomin": 179, "73910363": 179, "30614675j": 179, "plane": 179, "endpoint": 179, "concaten": 179, "0x000001799a0f5188": 179, "lyon": 179, "process": [179, 181, 184], "3rd": 179, "insid": 179, "outsid": 179, "unstabl": 179, "n_symbol": 180, "pulse_shap": 180, "els": 180, "pb": 180, "x_bb_rect": 180, "papr_bb_rect": 180, "x_pb_rect": 180, "papr_pb_rect": 180, "x_bb_0p1": 180, "papr_bb_0p1": 180, "x_pb_0p1": 180, "papr_pb_0p1": 180, "x_bb_0p5": 180, "papr_bb_0p5": 180, "x_pb_0p5": 180, "papr_pb_0p5": 180, "x_bb_0p9": 180, "papr_bb_0p9": 180, "x_pb_0p9": 180, "papr_pb_0p9": 180, "rectangular": [180, 183], "2f": 180, "rf": [180, 181], "xlim": [180, 181, 183], "512": 180, "sweep_alpha": 180, "bb_papr": 180, "pb_papr": 180, "bpsk_bb_papr": 180, "bpsk_pb_papr": 180, "qpsk_bb_papr": 180, "qpsk_pb_papr": 180, "psk8_bb_papr": 180, "psk8_pb_papr": 180, "psk16_bb_papr": 180, "psk16_pb_papr": 180, "configur": 181, "loop_filt": 181, "0x00000244c97410c8": 181, "theta_0": 181, "phase_error": 181, "freq_estim": 181, "suptitl": [181, 182], "ones": 181, "angl": 181, "avail": [181, 182], "001": 181, "005": 181, "b_nt": 181, "0005": 181, "0125": 181, "015": 181, "0175": 181, "t_lock": 181, "analyze_psk": 182, "100_000": 182, "achiev": [182, 183], "n0": 182, "tx_mf": 182, "18": 182, "1e6": 182, "s_hat": 182, "bpsk_ber": 182, "bpsk_ser": 182, "qpsk_ber": 182, "qpsk_ser": 182, "psk8_ber": 182, "psk8_ser": 182, "psk16_ber": 182, "psk16_ser": 182, "simul": [182, 184], "1e0": 182, "psk8_bin": 182, "psk8_grai": 182, "wors": 182, "rect": 183, "rc_0p1": 183, "rc_0p5": 183, "rc_0p9": 183, "nyquist": 183, "pm": 183, "60": 183, "nearli": 183, "null": 183, "small": 183, "lobe": 183, "much": 183, "higher": 183, "h_rect": 183, "freqz": 183, "worn": 183, "whole": 183, "h_rc_0p1": 183, "h_rc_0p5": 183, "h_rc_0p9": 183, "p_rect": 183, "log10": 183, "cumsum": 183, "p_rc_0p1": 183, "p_rc_0p5": 183, "p_rc_0p9": 183, "One": 183, "within": 183, "srrc_0p1": 183, "srrc_0p5": 183, "srrc_0p9": 183, "therefor": 183, "significantli": 183, "due": 183, "being": 183, "h_srrc_0p1": 183, "h_srrc_0p5": 183, "h_srrc_0p9": 183, "p_srrc_0p1": 183, "p_srrc_0p5": 183, "p_srrc_0p9": 183, "gauss_0p1": 183, "gauss_0p2": 183, "gauss_0p3": 183, "softwar": 184, "radio": 184, "goal": 184, "analyz": 184, "build": 184, "reli": 184, "interoper": 184, "veri": 184, "possibl": 184, "numba": 184, "acceler": 184, "computation": 184, "intens": 184, "addition": 184, "aim": 184, "replic": 184, "relev": 184, "matlab": 184, "dsp": 184, "toolbox": 184, "progress": 184, "someth": 184, "pleas": 184, "open": 184, "issu": 184, "github": 184, "pypi": 184, "manipul": 184, "synchron": 184, "convers": [184, 185], "model": [184, 185], "impair": [184, 185], "budget": [184, 185], "august": 185, "2023": 185, "translat": 185, "fix": [185, 186], "matt": 185, "hostett": 185, "juli": 185, "fpsl": 185, "helper": 185, "improv": 185, "semant": 186, "major": 186, "minor": 186, "patch": 186, "introduc": 186, "api": 186, "featur": 186, "backward": 186, "compat": 186, "make": 186, "bug": 186, "There": 186, "guarante": 186, "them": 186, "thei": 186}, "objects": {"": [[2, 0, 0, 1, "sdr", ""]], "sdr": [[8, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [25, 1, 1, "", "DDS", "Implements a direct digital synthesizer (DDS)."], [31, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [38, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [51, 1, 1, "", "FIRInterpolator", "Implements a polyphase finite impulse response (FIR) interpolating filter."], [59, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [66, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [82, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [91, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [99, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [109, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [110, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [111, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [112, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [113, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [114, 5, 1, "", "barker", "Returns the Barker code/sequence of length $N$."], [115, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [116, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [117, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [118, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [119, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [120, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [121, 5, 1, "", "db", "Converts from linear units to decibels."], [122, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [123, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [124, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [125, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [126, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [127, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [128, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [129, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [130, 5, 1, "", "evm", "Calculates the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [131, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [132, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [133, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [134, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [135, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [136, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [137, 5, 1, "", "linear", "Converts from decibels to linear units."], [138, 5, 1, "", "mix", "Mixes the time-domain signal $x[n]$ with a complex exponential."], [139, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [140, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [141, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [142, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [143, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [160, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [161, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [162, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [163, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [164, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [165, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [166, 5, 1, "", "to_complex_bb", "Converts the real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$ to a complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c} = f_{s,r}/2$."], [167, 5, 1, "", "to_real_pb", "Converts the complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$ to a real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r} = 2f_{s,c}$."], [168, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [169, 5, 1, "", "zadoff_chu", "Returns the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.ClosedLoopPLL": [[9, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [10, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [11, 2, 1, "", "K0", "The NCO gain $K_0$."], [12, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [13, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [14, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [15, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [16, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [17, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [18, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [19, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [20, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [21, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [22, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [23, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [24, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[15, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [15, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [15, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [15, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [15, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[16, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[18, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[21, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.DDS": [[26, 3, 1, "", "__call__", "Steps the DDS with the variable phase increment signal $x[n]$."], [27, 3, 1, "", "__init__", "Creates a direct digital synthesizer (DDS)."], [28, 2, 1, "", "nco", "The numerically-controlled oscillator (NCO) used by the DDS."], [29, 3, 1, "", "reset", "Resets the DDS."], [30, 3, 1, "", "step", "Steps the DDS forward by $N$ samples."]], "sdr.DDS.__call__": [[26, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the DDS."]], "sdr.DDS.__init__": [[27, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [27, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [27, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.DDS.step": [[30, 4, 2, "p-N", "N", "The number of samples $N$ to step the DDS forward."]], "sdr.ErrorRate": [[32, 3, 1, "", "__init__", "Creates a new error rate tabulation object."], [33, 3, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [34, 3, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [35, 3, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [36, 3, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [37, 3, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[33, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [33, 4, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [33, 4, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[34, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[35, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[37, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[39, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the FIR filter."], [40, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [41, 3, 1, "", "__len__", "Returns the filter length $N$."], [42, 2, 1, "", "delay", "The delay of the FIR filter in samples."], [43, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the FIR filter."], [44, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the FIR filter on a logarithmic frequency axis."], [45, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [46, 2, 1, "", "order", "The order of the FIR filter, $N$."], [47, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [48, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [49, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [50, 2, 1, "", "taps", "The feedforward taps $h_i$."]], "sdr.FIR.__call__": [[39, 4, 2, "p-mode", "mode", "The non-streaming convolution mode. See scipy.signal.convolve() for details. In streaming mode, $N$ inputs always produce $N$ outputs."], [39, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.FIR.__init__": [[40, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$."], [40, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FIR.frequency_response": [[43, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [43, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.frequency_response_log": [[44, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [44, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [44, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[45, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.step_response": [[48, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIRInterpolator": [[52, 3, 1, "", "__call__", "Filters and interpolates the input signal $x[n]$ with the FIR filter."], [53, 3, 1, "", "__init__", "Creates a polyphase FIR interpolating filter with feedforward coefficients $h_i$."], [54, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [55, 2, 1, "", "rate", "The interpolation rate $r$."], [56, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [57, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [58, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.FIRInterpolator.__call__": [[52, 4, 2, "p-mode", "mode", "The non-streaming convolution mode. See scipy.signal.convolve() for details. In streaming mode, $N$ inputs always produce $N r$ outputs."], [52, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$."]], "sdr.FIRInterpolator.__init__": [[53, 4, 2, "p-rate", "rate", "The interpolation rate $r$."], [53, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [53, 4, 2, "p-taps", "taps", "The feedforward coefficients $h_i$."]], "sdr.FarrowResampler": [[60, 3, 1, "", "__call__", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [61, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [62, 2, 1, "", "order", "The order of the filter."], [63, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [64, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [65, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__call__": [[60, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [60, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.__init__": [[61, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FarrowResampler.reset": [[63, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[67, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [68, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the IIR filter."], [69, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [70, 2, 1, "", "a_taps", "The feedback taps $a_j$."], [71, 2, 1, "", "b_taps", "The feedforward taps $b_i$."], [72, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the IIR filter."], [73, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the IIR filter on a logarithmic frequency axis."], [74, 2, 1, "", "gain", "The gain of the IIR filter."], [75, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [76, 2, 1, "", "order", "The order of the IIR filter, $N$."], [77, 2, 1, "", "poles", "The poles of the IIR filter."], [78, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [79, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [80, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [81, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[67, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [67, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [67, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."], [67, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__call__": [[68, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.IIR.__init__": [[69, 4, 2, "p-a", "a", "The feedback coefficients $a_j$."], [69, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [69, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.IIR.frequency_response": [[72, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [72, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[73, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [73, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [73, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[75, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[79, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.LoopFilter": [[83, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [84, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [85, 3, 1, "", "__call__", "Filters the input signal $x[n]$."], [86, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [87, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [88, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [89, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [90, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__call__": [[85, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.LoopFilter.__init__": [[86, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [86, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [86, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [86, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.NCO": [[92, 2, 1, "", "K0", "The NCO gain $K_0$."], [93, 3, 1, "", "__call__", "Steps the NCO with the variable-increment signal $x[n]$."], [94, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [95, 2, 1, "", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [96, 2, 1, "", "offset", "The absolute offset $theta$ of the NCO in units."], [97, 3, 1, "", "reset", "Resets the NCO."], [98, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__call__": [[93, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the NCO."]], "sdr.NCO.__init__": [[94, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [94, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [94, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in units."]], "sdr.NCO.step": [[98, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.PSK": [[100, 3, 1, "", "__init__", "Creates a new PSK object."], [101, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [102, 2, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [103, 3, 1, "", "demodulate", "Demodulates the complex symbols $hat{x}[k]$ to decimal symbols $hat{s}[k]$ using maximum-likelihood estimation."], [104, 3, 1, "", "modulate", "Modulates to decimal symbols $s[k]$ to complex symbols $x[k]$."], [105, 2, 1, "", "order", "The modulation order $M = 2^k$."], [106, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [107, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [108, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[100, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [100, 4, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [100, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[101, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [101, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.demodulate": [[103, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to demodulate."]], "sdr.PSK.modulate": [[104, 4, 2, "p-symbols", "symbols", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.PSK.ser": [[107, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [107, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.Q": [[109, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[110, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.average_power": [[111, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[112, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [112, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [112, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [112, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[113, 4, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [113, 4, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.barker": [[114, 4, 2, "p-length", "length", "The length $N$ of the Barker code/sequence."], [114, 4, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[115, 4, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [115, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[116, 4, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[117, 4, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[118, 4, 2, "p-p", "p", "The probability $p$ of a bit flip."], [118, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[119, 4, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[120, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.db": [[121, 4, 2, "p-type", "type", "The type of input value or signal."], [121, 4, 2, "p-x", "x", "The input value or signal."]], "sdr.diff_decode": [[122, 4, 2, "p-y", "y", "The input encoded data $y[k]$."], [122, 4, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[123, 4, 2, "p-x", "x", "The input uncoded data $x[k]$."], [123, 4, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[124, 4, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [124, 4, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [124, 4, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [124, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.ebn0_to_esn0": [[125, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [125, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [125, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[126, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [126, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [126, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [126, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[127, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[128, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [128, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [128, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[129, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [129, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.evm": [[130, 4, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [130, 4, 2, "p-output", "output", "The output type of the EVM calculation."], [130, 4, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [130, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.frequency_offset": [[131, 4, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [131, 4, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [131, 4, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [131, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [131, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[132, 4, 2, "p-d", "d", "The distance $d$ in meters between the transmitter and receiver."], [132, 4, 2, "p-f", "f", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[133, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [133, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [133, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[134, 4, 2, "p-n", "n", "The length of the Gray code."]], "sdr.hexdump": [[135, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [135, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[136, 4, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [136, 4, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [136, 4, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.linear": [[137, 4, 2, "p-type", "type", "The type of output value or signal."], [137, 4, 2, "p-x", "x", "The input value or signal in dB."]], "sdr.mix": [[138, 4, 2, "p-freq", "freq", "The frequency $f$ of the complex exponential in Hz (or 1/samples if sample_rate=1). The frequency must satisfy $-f_s/2 le f le f_s/2$."], [138, 4, 2, "p-phase", "phase", "The phase $phi$ of the complex exponential in degrees."], [138, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal."], [138, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.pack": [[139, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [139, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [139, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[140, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[141, 4, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [141, 4, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [141, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[142, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[143, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.plot": [[144, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [145, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [146, 5, 1, "", "filter", "Plots the frequency response $H(omega)$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [147, 5, 1, "", "frequency_response", "Plots the frequency response $H(omega)$ of the filter."], [148, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [149, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [150, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [151, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [152, 5, 1, "", "phase_response", "Plots the phase response $Theta(omega)$ of the filter."], [153, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [154, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [155, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [156, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [157, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [158, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [159, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[144, 4, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [144, 4, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."], [144, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."]], "sdr.plot.constellation": [[145, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [145, 4, 2, "p-kwargs", "kwargs", "If heatmap=False, additional keyword arguments to pass to matplotlib.pyplot.scatter(). The following keyword arguments are set by default. The defaults may be overwritten."], [145, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [145, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.filter": [[146, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [146, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [146, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [146, 4, 2, "p-filter", "filter", "The filter definition."], [146, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [146, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.frequency_response": [[147, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [147, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [147, 4, 2, "p-filter", "filter", "The filter definition."], [147, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [147, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [147, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[148, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [148, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [148, 4, 2, "p-filter", "filter", "The filter definition."], [148, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [148, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [148, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.impulse_response": [[149, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [149, 4, 2, "p-filter", "filter", "The filter definition."], [149, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.periodogram": [[150, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [150, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [150, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [150, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [150, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [150, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [150, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [150, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [150, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [150, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_delay": [[151, 4, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [151, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [151, 4, 2, "p-filter", "filter", "The filter definition."], [151, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [151, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [151, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_response": [[152, 4, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [152, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [152, 4, 2, "p-filter", "filter", "The filter definition."], [152, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [152, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [152, 4, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [152, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.ser": [[153, 4, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [153, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."], [153, 4, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.spectrogram": [[154, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [154, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [154, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.pcolormesh(). The following keyword arguments are set by default. The defaults may be overwritten."], [154, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [154, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [154, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [154, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [154, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [154, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[155, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [155, 4, 2, "p-filter", "filter", "The filter definition."], [155, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.symbol_map": [[156, 4, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [156, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot(). The following keyword arguments are set by default. The defaults may be overwritten."], [156, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [156, 4, 2, "p-symbol_map", "symbol_map", "The complex symbols $hat{x}[k]$."]], "sdr.plot.time_domain": [[157, 4, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal. If \"color\", the real and imaginary parts will have different colors based on the current Matplotlib color cycle. If \"line\", the real part will have a solid line and the imaginary part will have a dashed line, and both lines will share the same color."], [157, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [157, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\"."], [157, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[159, 4, 2, "p-filter", "filter", "The filter definition."], [159, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.raised_cosine": [[160, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [160, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [160, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[161, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[162, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [162, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [162, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[163, 4, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [163, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.snr_to_ebn0": [[164, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [164, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [164, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [164, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[165, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [165, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.to_complex_bb": [[166, 4, 2, "p-x_r", "x_r", "The real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$. If the length is odd, one zero is appended to the end."]], "sdr.to_real_pb": [[167, 4, 2, "p-x_c", "x_c", "The complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$."]], "sdr.unpack": [[168, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [168, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [168, 4, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.zadoff_chu": [[169, 4, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [169, 4, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence. The root must be relatively prime to the length, i.e., $gcd(u, N) = 1$."], [169, 4, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence. When $q ne 0$, the returned sequence is a cyclic shift of the root-$u$ Zadoff-Chu sequence."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"convers": 0, "decibel": 0, "from": [0, 174, 175, 176], "e_b": 0, "n_0": 0, "e_": 0, "": [0, 178, 179], "n": [0, 177, 178, 179], "data": 1, "manipul": [1, 2], "digit": [2, 179], "signal": [2, 171, 177, 180], "process": 2, "filter": [2, 6, 178, 179, 181], "resampl": [2, 177], "correl": 2, "link": 3, "budget": 3, "channel": [3, 171], "capac": 3, "path": 3, "loss": 3, "antenna": 3, "measur": 4, "energi": 4, "power": [4, 180], "voltag": 4, "modul": [4, 5, 6], "class": 5, "puls": [5, 180, 183], "shape": [5, 180, 183], "symbol": [5, 182], "map": [5, 182], "encod": 5, "plot": [6, 180], "configur": [6, 175, 176], "time": [6, 180, 181], "domain": [6, 180, 181], "frequenc": [6, 178, 179, 180, 181], "spectral": 6, "estim": 6, "analysi": 6, "probabl": 7, "note": [8, 150, 154], "constructor": [8, 25, 31, 38, 51, 59, 66, 82, 91, 99], "method": [8, 25, 31, 38, 51, 59, 66, 82, 91, 99], "properti": [8, 25, 38, 51, 59, 66, 82, 91, 99], "see": [25, 31, 33, 43, 44, 45, 48, 72, 73, 75, 79, 91, 101, 107, 109, 110, 120, 140, 146, 147, 148, 149, 151, 152, 155, 159], "also": [25, 31, 33, 43, 44, 45, 48, 72, 73, 75, 79, 91, 101, 107, 109, 110, 120, 140, 146, 147, 148, 149, 151, 152, 155, 159], "special": [25, 38, 51, 59, 66, 82, 91], "sequenc": 170, "simul": 171, "model": 171, "impair": 171, "synchron": 172, "document": 173, "instal": [173, 174, 175, 176, 184], "build": 173, "doc": 173, "serv": 173, "pypi": 174, "github": 174, "edit": 174, "local": 174, "folder": 174, "dev": 174, "depend": 174, "linter": 175, "run": [175, 176], "command": [175, 176], "line": [175, 176], "v": [175, 176], "code": [175, 176], "unit": 176, "test": 176, "farrow": 177, "arbitrari": 177, "construct": 177, "an": [177, 178, 179], "input": 177, "x": 177, "t_": 177, "rate": [177, 182], "r": 177, "y": 177, "frac": 177, "upsampl": 177, "integ": 177, "downsampl": 177, "irrat": 177, "fir": 178, "creat": [178, 179], "examin": [178, 179, 180], "impuls": [178, 179], "respons": [178, 179, 181], "h": [178, 179], "step": [178, 179, 181], "omega": [178, 179], "group": [178, 179], "delai": [178, 179], "tau_g": [178, 179], "fulli": [178, 179], "analyz": [178, 179, 181], "iir": 179, "zero": 179, "pole": 179, "stabil": 179, "peak": 180, "averag": 180, "qpsk": [180, 182], "variou": 180, "across": [180, 181], "excess": 180, "bandwidth": 180, "phase": [181, 182], "lock": 181, "loop": 181, "design": 181, "proport": 181, "plu": 181, "integr": 181, "ppi": 181, "implement": 181, "pll": 181, "close": 181, "perform": 181, "compar": 181, "zeta": 181, "b_n": 181, "t": 181, "shift": 182, "kei": 182, "constel": 182, "bpsk": 182, "8": 182, "psk": 182, "16": 182, "error": 182, "curv": 182, "bit": 182, "rais": 183, "cosin": 183, "squar": 183, "root": 183, "gaussian": 183, "sdr": 184, "featur": 184, "v0": 185, "0": 185, "4": 185, "chang": 185, "contributor": 185, "3": 185, "2": 185, "1": 185, "version": 186, "alpha": 186, "releas": 186, "beta": 186}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Conversions": [[0, "conversions"]], "Decibels": [[0, "decibels"]], "From E_b/N_0": [[0, "from-e-b-n-0"]], "From E_s/N_0": [[0, "from-e-s-n-0"]], "From S/N": [[0, "from-s-n"]], "Data manipulation": [[1, "data-manipulation"]], "Digital signal processing": [[2, "digital-signal-processing"]], "Filtering": [[2, "filtering"]], "Resampling": [[2, "resampling"]], "Correlation": [[2, "correlation"]], "Signal manipulation": [[2, "signal-manipulation"]], "Link budgets": [[3, "link-budgets"]], "Channel capacity": [[3, "channel-capacity"]], "Path losses": [[3, "path-losses"]], "Antennas": [[3, "antennas"]], "Measurement": [[4, "measurement"]], "Energy": [[4, "energy"]], "Power": [[4, "power"]], "Voltage": [[4, "voltage"]], "Modulation": [[4, "modulation"], [5, "modulation"], [6, "modulation"]], "Classes": [[5, "classes"]], "Pulse shaping": [[5, "pulse-shaping"]], "Symbol mapping": [[5, "symbol-mapping"], [182, "symbol-mapping"]], "Symbol encoding": [[5, "symbol-encoding"]], "Plotting": [[6, "plotting"]], "Configuration": [[6, "configuration"], [175, "configuration"], [176, "configuration"]], "Time-domain": [[6, "time-domain"]], "Frequency-domain": [[6, "frequency-domain"]], "Spectral estimation": [[6, "spectral-estimation"]], "Filter analysis": [[6, "filter-analysis"]], "Probability": [[7, "probability"]], "Note": [[8, null], [150, null], [154, null]], "Constructors": [[8, "constructors"], [25, "constructors"], [31, "constructors"], [38, "constructors"], [51, "constructors"], [59, "constructors"], [66, "constructors"], [82, "constructors"], [91, "constructors"], [99, "constructors"]], "Methods": [[8, "methods"], [25, "methods"], [31, "methods"], [38, "methods"], [51, "methods"], [59, "methods"], [66, "methods"], [82, "methods"], [91, "methods"], [99, "methods"]], "Properties": [[8, "properties"], [25, "properties"], [38, "properties"], [51, "properties"], [59, "properties"], [66, "properties"], [82, "properties"], [91, "properties"], [99, "properties"]], "See also": [[25, null], [31, null], [33, null], [43, null], [44, null], [45, null], [48, null], [72, null], [73, null], [75, null], [79, null], [91, null], [101, null], [107, null], [109, null], [110, null], [120, null], [140, null], [146, null], [147, null], [148, null], [149, null], [151, null], [152, null], [155, null], [159, null]], "Special methods": [[25, "special-methods"], [38, "special-methods"], [51, "special-methods"], [59, "special-methods"], [66, "special-methods"], [82, "special-methods"], [91, "special-methods"]], "Sequences": [[170, "sequences"]], "Simulation": [[171, "simulation"]], "Channel models": [[171, "channel-models"]], "Signal impairments": [[171, "signal-impairments"]], "Synchronization": [[172, "synchronization"]], "Documentation": [[173, "documentation"]], "Install": [[173, "install"], [175, "install"], [176, "install"]], "Build the docs": [[173, "build-the-docs"]], "Serve the docs": [[173, "serve-the-docs"]], "Installation": [[174, "installation"], [184, "installation"]], "Install from PyPI": [[174, "install-from-pypi"]], "Install from GitHub": [[174, "install-from-github"]], "Editable install from local folder": [[174, "editable-install-from-local-folder"]], "Install the dev dependencies": [[174, "install-the-dev-dependencies"]], "Linter": [[175, "linter"]], "Run from the command line": [[175, "run-from-the-command-line"], [176, "run-from-the-command-line"]], "Run from VS Code": [[175, "run-from-vs-code"], [176, "run-from-vs-code"]], "Unit Tests": [[176, "unit-tests"]], "Farrow arbitrary resampler": [[177, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[177, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[177, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[177, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[177, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[177, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[177, "downsample-by-an-irrational-rate"]], "FIR filters": [[178, "fir-filters"]], "Create an FIR filter": [[178, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[178, "examine-the-impulse-response-h-n"], [179, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[178, "examine-the-step-response-s-n"], [179, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[178, "examine-the-frequency-response-h-omega"], [179, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[178, "examine-the-group-delay-tau-g-omega"], [179, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[178, "fully-analyze-a-fir-filter"]], "IIR filters": [[179, "iir-filters"]], "Create an IIR filter": [[179, "create-an-iir-filter"]], "Examine the zeros and poles": [[179, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[179, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[179, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[180, "peak-to-average-power"]], "QPSK signal with various pulse shapes": [[180, "qpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[180, "examine-time-domain"]], "Examine frequency domain": [[180, "examine-frequency-domain"]], "Plot across excess bandwidth": [[180, "plot-across-excess-bandwidth"]], "Phase-locked loops": [[181, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[181, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[181, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[181, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[181, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[181, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[181, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[181, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[182, "phase-shift-keying"]], "Constellations": [[182, "constellations"]], "BPSK": [[182, "bpsk"]], "QPSK": [[182, "qpsk"]], "8-PSK": [[182, "id1"]], "16-PSK": [[182, "id2"]], "Error rate curves": [[182, "error-rate-curves"]], "Bit error rate curves": [[182, "bit-error-rate-curves"]], "Symbol error rate curves": [[182, "symbol-error-rate-curves"]], "Pulse shapes": [[183, "pulse-shapes"]], "Raised cosine": [[183, "raised-cosine"]], "Square-root raised cosine": [[183, "square-root-raised-cosine"]], "Gaussian": [[183, "gaussian"]], "sdr": [[184, "sdr"]], "Features": [[184, "features"]], "v0.0": [[185, "v0-0"]], "v0.0.4": [[185, "v0-0-4"]], "Changes": [[185, "changes"], [185, "id1"], [185, "id3"], [185, "id5"]], "Contributors": [[185, "contributors"], [185, "id2"], [185, "id4"], [185, "id6"]], "v0.0.3": [[185, "v0-0-3"]], "v0.0.2": [[185, "v0-0-2"]], "v0.0.1": [[185, "v0-0-1"]], "Versioning": [[186, "versioning"]], "Alpha releases": [[186, "alpha-releases"]], "Beta releases": [[186, "beta-releases"]]}, "indexentries": {"module": [[2, "module-sdr"]], "sdr": [[2, "module-sdr"]]}, "docurls": ["api/conversions/", "api/data-manipulation/", "api/dsp/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.DDS/", "api/sdr.DDS.__call__/", "api/sdr.DDS.__init__/", "api/sdr.DDS.nco/", "api/sdr.DDS.reset/", "api/sdr.DDS.step/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__call__/", "api/sdr.FIR.__init__/", "api/sdr.FIR.__len__/", "api/sdr.FIR.delay/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.frequency_response_log/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.reset/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FIRInterpolator/", "api/sdr.FIRInterpolator.__call__/", "api/sdr.FIRInterpolator.__init__/", "api/sdr.FIRInterpolator.polyphase_taps/", "api/sdr.FIRInterpolator.rate/", "api/sdr.FIRInterpolator.reset/", "api/sdr.FIRInterpolator.streaming/", "api/sdr.FIRInterpolator.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__call__/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__call__/", "api/sdr.IIR.__init__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__call__/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__call__/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.ber/", "api/sdr.PSK.bps/", "api/sdr.PSK.demodulate/", "api/sdr.PSK.modulate/", "api/sdr.PSK.order/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.barker/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.db/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.evm/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.linear/", "api/sdr.mix/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.filter/", "api/sdr.plot.frequency_response/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.ser/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.raised_cosine/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.to_complex_bb/", "api/sdr.to_real_pb/", "api/sdr.unpack/", "api/sdr.zadoff_chu/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/installation/", "development/linter/", "development/unit-tests/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})