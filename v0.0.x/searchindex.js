Search.setIndex({"titles": ["Conversions", "Data manipulation", "Detection", "Digital signal processing", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.Decimator", "sdr.Decimator.__call__", "sdr.Decimator.__init__", "sdr.Decimator.__repr__", "sdr.Decimator.__str__", "sdr.Decimator.delay", "sdr.Decimator.method", "sdr.Decimator.polyphase_taps", "sdr.Decimator.rate", "sdr.Decimator.reset", "sdr.Decimator.taps", "sdr.Differentiator", "sdr.Differentiator.__init__", "sdr.EnergyDetector", "sdr.EnergyDetector.p_d", "sdr.EnergyDetector.p_fa", "sdr.EnergyDetector.roc", "sdr.EnergyDetector.threshold", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__call__", "sdr.FIR.__init__", "sdr.FIR.__len__", "sdr.FIR.__repr__", "sdr.FIR.__str__", "sdr.FIR.delay", "sdr.FIR.flush", "sdr.FIR.frequency_response", "sdr.FIR.frequency_response_log", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.reset", "sdr.FIR.state", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__call__", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__call__", "sdr.IIR.__init__", "sdr.IIR.__repr__", "sdr.IIR.__str__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.state", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.Interpolator", "sdr.Interpolator.__call__", "sdr.Interpolator.__init__", "sdr.Interpolator.__repr__", "sdr.Interpolator.__str__", "sdr.Interpolator.delay", "sdr.Interpolator.method", "sdr.Interpolator.polyphase_taps", "sdr.Interpolator.rate", "sdr.Interpolator.reset", "sdr.Interpolator.taps", "sdr.LinearModulation", "sdr.LinearModulation.__init__", "sdr.LinearModulation.__repr__", "sdr.LinearModulation.__str__", "sdr.LinearModulation.ber", "sdr.LinearModulation.bps", "sdr.LinearModulation.decide_symbols", "sdr.LinearModulation.demodulate", "sdr.LinearModulation.map_symbols", "sdr.LinearModulation.modulate", "sdr.LinearModulation.order", "sdr.LinearModulation.phase_offset", "sdr.LinearModulation.pulse_shape", "sdr.LinearModulation.rx_filter", "sdr.LinearModulation.ser", "sdr.LinearModulation.sps", "sdr.LinearModulation.symbol_map", "sdr.LinearModulation.tx_filter", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__call__", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.MSK", "sdr.MSK.__init__", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__call__", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.reset", "sdr.NCO.step", "sdr.OQPSK", "sdr.OQPSK.__init__", "sdr.OQPSK.__repr__", "sdr.OQPSK.__str__", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.__repr__", "sdr.PSK.__str__", "sdr.PSK.ber", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.PiMPSK", "sdr.PiMPSK.__init__", "sdr.Q", "sdr.Qinv", "sdr.ReplicaCorrelator", "sdr.ReplicaCorrelator.p_d", "sdr.ReplicaCorrelator.p_fa", "sdr.ReplicaCorrelator.roc", "sdr.ReplicaCorrelator.threshold", "sdr.Resampler", "sdr.Resampler.__call__", "sdr.Resampler.__init__", "sdr.Resampler.__repr__", "sdr.Resampler.__str__", "sdr.Resampler.delay", "sdr.Resampler.down", "sdr.Resampler.method", "sdr.Resampler.polyphase_taps", "sdr.Resampler.rate", "sdr.Resampler.reset", "sdr.Resampler.taps", "sdr.Resampler.up", "sdr.albersheim", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.barker", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.db", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.downsample", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.evm", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.half_sine", "sdr.hexdump", "sdr.iq_imbalance", "sdr.linear", "sdr.mix", "sdr.multirate_taps", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.percent", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.eye", "sdr.plot.filter", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.magnitude_response", "sdr.plot.p_d", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.phase_tree", "sdr.plot.raster", "sdr.plot.roc", "sdr.plot.ser", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.polyphase_matrix", "sdr.ppb", "sdr.ppm", "sdr.raised_cosine", "sdr.rectangular", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.to_complex_bb", "sdr.to_real_pb", "sdr.unpack", "sdr.upsample", "sdr.wavelength", "sdr.zadoff_chu", "Sequences", "Simulation", "Synchronization", "Documentation", "Formatting", "Installation", "Unit Tests", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267], "db": [0, 4, 5, 9, 20, 22, 40, 42, 44, 46, 47, 48, 50, 109, 119, 132, 142, 146, 150, 152, 154, 159, 161, 176, 177, 178, 179, 187, 192, 193, 194, 195, 196, 197, 199, 200, 204, 205, 207, 209, 210, 211, 212, 214, 215, 221, 228, 240, 243, 244, 261, 263, 264, 266], "x": [0, 1, 3, 5, 6, 7, 8, 9, 26, 27, 37, 39, 44, 46, 51, 52, 68, 69, 75, 77, 94, 95, 105, 112, 114, 123, 126, 132, 142, 146, 154, 156, 157, 158, 163, 164, 177, 178, 181, 184, 186, 187, 188, 189, 190, 191, 194, 197, 198, 204, 205, 206, 208, 209, 211, 212, 213, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 229, 231, 232, 236, 237, 240, 242, 247, 248, 252, 256, 261, 262, 263, 267], "arraylik": [0, 1, 2, 3, 4, 5, 6, 7, 8, 26, 27, 28, 37, 39, 40, 41, 42, 43, 44, 46, 51, 52, 53, 68, 72, 75, 76, 77, 78, 94, 95, 96, 105, 106, 109, 111, 112, 113, 114, 119, 132, 133, 142, 143, 146, 147, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 176, 179, 181, 182, 184, 185, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 203, 205, 208, 210, 213, 217, 218, 219, 220, 221, 222, 223, 224, 227, 229, 230, 234, 235, 236, 237, 243, 244, 247, 249, 252], "ndarrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 26, 27, 33, 36, 37, 39, 40, 41, 42, 43, 44, 49, 51, 52, 58, 59, 60, 61, 64, 65, 67, 68, 69, 74, 75, 77, 81, 82, 83, 84, 86, 88, 90, 91, 93, 94, 95, 101, 104, 105, 109, 111, 112, 113, 114, 117, 119, 121, 123, 126, 132, 134, 136, 141, 142, 146, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 171, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 225, 226, 228, 231, 232, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252], "float_": [0, 2, 3, 4, 5, 6, 7, 8, 39, 40, 41, 42, 43, 44, 49, 105, 109, 117, 119, 132, 136, 142, 146, 150, 152, 154, 156, 157, 158, 159, 160, 161, 162, 176, 179, 182, 185, 187, 192, 193, 194, 195, 196, 199, 200, 202, 205, 207, 210, 213, 214, 228, 236, 237, 238, 239, 241, 243, 244, 245, 246, 249], "convert": [0, 3, 105, 111, 113, 132, 142, 146, 154, 187, 192, 193, 195, 196, 203, 205, 213, 235, 236, 237, 243, 244, 245, 246], "linear": [0, 94, 96, 100, 105, 106, 132, 142, 146, 154, 163, 165, 170, 178, 187, 205, 222, 227, 229, 231, 265, 266], "unit": [0, 26, 37, 51, 65, 75, 91, 94, 123, 133, 134, 143, 147, 155, 163, 178, 179, 187, 188, 189, 205, 230, 232, 256, 259, 260, 262, 265, 266], "percent": [0, 213], "percentag": [0, 213], "ppm": [0, 237, 242, 252], "part": [0, 232, 236, 237, 242, 262], "per": [0, 1, 27, 52, 95, 105, 106, 110, 112, 114, 120, 132, 133, 136, 142, 143, 146, 147, 154, 155, 178, 179, 192, 193, 195, 196, 198, 200, 202, 203, 208, 215, 216, 225, 236, 237, 238, 239, 241, 242, 243, 244, 247, 255, 261, 264, 266], "million": [0, 237, 242], "ppb": [0, 236], "billion": [0, 236], "ebn0_to_esn0": [0, 119, 152, 192, 263, 266], "ebn0": [0, 7, 105, 109, 132, 142, 146, 150, 154, 179, 192, 193, 214, 263], "bp": [0, 105, 110, 132, 142, 146, 154, 192, 193, 195, 243, 263], "int": [0, 1, 3, 6, 7, 26, 28, 31, 34, 37, 44, 46, 47, 50, 51, 54, 57, 59, 60, 61, 62, 65, 68, 71, 75, 83, 84, 86, 87, 91, 94, 96, 99, 102, 105, 106, 110, 115, 120, 132, 133, 134, 141, 142, 143, 146, 147, 154, 155, 163, 165, 168, 169, 175, 177, 178, 180, 181, 183, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 207, 208, 209, 211, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 229, 230, 235, 238, 239, 241, 243, 244, 247, 248, 250, 251, 263], "ebn0_to_snr": [0, 132, 142, 146, 154, 193, 266], "esn0_to_ebn0": [0, 109, 150, 195, 266], "esn0": [0, 7, 105, 119, 132, 142, 146, 152, 154, 195, 196, 228, 263], "esn0_to_snr": [0, 196, 263, 266], "sp": [0, 6, 7, 105, 106, 112, 114, 120, 132, 133, 142, 143, 146, 147, 154, 155, 193, 196, 200, 202, 216, 225, 238, 239, 241, 243, 244, 245, 246, 261, 263, 264], "1": [0, 3, 6, 8, 9, 16, 19, 23, 25, 26, 28, 29, 30, 33, 36, 37, 39, 40, 42, 43, 44, 51, 54, 55, 56, 57, 59, 60, 75, 76, 79, 80, 83, 84, 94, 95, 96, 97, 98, 101, 104, 105, 106, 111, 112, 113, 114, 121, 123, 127, 128, 132, 133, 134, 137, 142, 143, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 171, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 267], "snr_to_ebn0": [0, 109, 150, 179, 243, 266], "snr": [0, 2, 4, 7, 39, 40, 42, 44, 46, 47, 48, 49, 50, 132, 142, 146, 154, 176, 178, 179, 221, 243, 244, 245, 246, 252, 263, 266], "snr_to_esn0": [0, 119, 152, 244, 266], "pack": [1, 44, 46, 132, 142, 146, 154, 203, 208, 265, 266], "bpe": [1, 208, 247], "int_": [1, 6, 105, 111, 112, 132, 142, 146, 154, 181, 183, 184, 188, 189, 190, 201, 208, 247, 252], "binari": [1, 4, 6, 133, 143, 147, 153, 155, 180, 181, 182, 183, 184, 185, 190, 208, 231, 247, 252, 263, 265, 266], "arrai": [1, 33, 36, 44, 96, 101, 104, 106, 132, 133, 134, 142, 143, 146, 147, 153, 154, 155, 165, 171, 174, 177, 180, 181, 183, 184, 188, 189, 190, 194, 201, 208, 209, 211, 232, 235, 247, 260], "an": [1, 2, 3, 4, 26, 37, 39, 51, 61, 75, 76, 78, 86, 94, 95, 106, 133, 134, 143, 147, 150, 152, 155, 158, 163, 179, 208, 214, 219, 228, 247, 249, 256, 265, 266], "multipl": [1, 208, 247, 263, 266], "bit": [1, 5, 7, 44, 46, 49, 105, 109, 110, 132, 133, 142, 143, 146, 147, 150, 153, 154, 155, 179, 181, 182, 184, 185, 192, 193, 195, 203, 208, 214, 243, 247, 265, 266], "element": [1, 203, 208, 247], "unpack": [1, 44, 46, 203, 247, 263, 265, 266], "hexdump": [1, 44, 203, 265, 266], "byte": [1, 203], "width": [1, 203], "16": [1, 150, 152, 153, 167, 192, 193, 195, 203, 214, 228, 235, 238, 241, 243, 244, 261, 266], "str": [1, 26, 29, 30, 37, 51, 55, 56, 75, 79, 80, 94, 97, 98, 105, 107, 108, 132, 142, 144, 145, 146, 148, 149, 154, 163, 166, 167, 203, 216, 222, 225, 226, 229], "return": [1, 6, 9, 17, 19, 22, 23, 26, 27, 29, 30, 37, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 65, 69, 75, 77, 79, 80, 83, 84, 86, 91, 94, 95, 97, 98, 105, 107, 108, 109, 111, 112, 113, 114, 119, 126, 132, 136, 141, 142, 144, 145, 146, 148, 149, 150, 152, 154, 156, 157, 159, 160, 161, 162, 163, 166, 167, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 259, 260, 261, 263, 266], "specifi": [1, 44, 47, 48, 50, 178, 179, 190, 203, 254, 259, 260], "class": [2, 3, 5, 6, 9, 26, 37, 39, 44, 46, 47, 48, 49, 50, 51, 68, 75, 94, 105, 123, 132, 134, 142, 146, 154, 158, 163, 253, 259, 260, 263, 265, 266], "replicacorrel": [2, 158, 159, 160, 161, 162, 266], "implement": [2, 3, 6, 26, 37, 39, 51, 68, 75, 94, 105, 123, 129, 132, 134, 142, 146, 154, 158, 163, 176, 253, 258], "clairvoy": [2, 158], "replica": [2, 158], "correl": [2, 158, 180, 250], "energydetector": [2, 39, 40, 41, 42, 43, 266], "energi": [2, 39, 109, 119, 150, 152, 158, 159, 160, 161, 162, 179, 192, 193, 194, 195, 196, 200, 202, 214, 228, 238, 239, 241, 243, 244, 265, 266], "albersheim": [2, 176, 266], "p_d": [2, 7, 39, 40, 42, 158, 159, 161, 176, 221, 227, 266], "p_fa": [2, 7, 39, 40, 41, 42, 43, 158, 159, 160, 161, 162, 176, 227], "estim": [2, 9, 105, 111, 112, 132, 142, 146, 154, 176, 222, 229, 262], "minimum": [2, 6, 132, 176, 266], "requir": [2, 27, 52, 95, 176, 254, 255, 256, 257, 266], "singl": [2, 42, 150, 152, 176], "sampl": [2, 3, 9, 16, 24, 26, 27, 31, 37, 40, 41, 42, 43, 51, 52, 57, 59, 60, 61, 65, 68, 72, 83, 84, 86, 91, 94, 95, 96, 99, 105, 106, 112, 114, 120, 123, 127, 130, 132, 133, 134, 136, 137, 138, 140, 141, 142, 143, 146, 147, 154, 155, 163, 165, 168, 176, 178, 191, 193, 196, 198, 200, 202, 206, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 229, 230, 232, 238, 239, 241, 242, 243, 244, 245, 246, 248, 252, 258, 261, 262, 264, 265, 266], "given": [2, 39, 44, 46, 47, 48, 50, 68, 69, 158, 176, 197, 259, 260], "n_": [2, 40, 41, 42, 43, 176], "nc": [2, 40, 41, 42, 43, 176], "non": [2, 27, 40, 41, 42, 43, 52, 95, 176, 202, 239], "coher": [2, 40, 41, 42, 43, 176], "combin": [2, 176], "achiev": [2, 3, 176, 207, 235, 263, 264], "probabl": [2, 7, 39, 40, 41, 42, 43, 156, 157, 158, 159, 160, 161, 162, 176, 181, 182, 184, 185, 190, 221, 227, 252, 266], "fals": [2, 5, 26, 28, 29, 30, 37, 38, 39, 40, 41, 42, 43, 51, 53, 55, 56, 68, 70, 75, 76, 78, 79, 80, 94, 95, 96, 97, 98, 132, 142, 146, 150, 152, 154, 158, 159, 160, 161, 162, 163, 165, 166, 167, 176, 177, 181, 184, 190, 194, 206, 211, 212, 215, 222, 227, 229, 232, 240, 260, 264], "alarm": [2, 39, 40, 41, 42, 43, 158, 159, 160, 161, 162, 176, 227], "p_": [2, 7, 39, 40, 41, 42, 43, 150, 152, 158, 159, 160, 161, 162, 176, 177, 178, 187, 190, 197, 205, 209, 211, 214, 222, 227, 228], "fa": [2, 7, 39, 40, 41, 42, 43, 158, 159, 160, 161, 162, 176, 227], "thi": [2, 9, 26, 46, 47, 48, 50, 51, 75, 94, 96, 105, 106, 121, 132, 136, 142, 143, 146, 147, 153, 154, 155, 163, 165, 176, 178, 179, 181, 184, 190, 191, 197, 199, 207, 216, 220, 222, 226, 229, 232, 248, 254, 256, 257, 258, 260, 262, 263, 264], "function": [2, 7, 8, 9, 18, 37, 51, 75, 76, 123, 156, 157, 176, 179, 191, 200, 214, 221, 222, 227, 228, 229, 248, 259, 260, 262, 264, 265, 266], "": [2, 3, 7, 9, 17, 19, 20, 21, 23, 24, 26, 37, 39, 46, 47, 48, 49, 50, 51, 59, 60, 65, 75, 83, 84, 91, 94, 105, 106, 111, 112, 113, 114, 132, 142, 146, 154, 158, 160, 162, 163, 176, 178, 179, 193, 196, 197, 198, 204, 215, 216, 217, 218, 220, 222, 223, 224, 225, 226, 229, 230, 232, 233, 242, 243, 244, 245, 246, 257, 258, 261, 263, 265, 266], "equat": [2, 17, 19, 20, 21, 22, 23, 40, 41, 43, 75, 142, 146, 154, 159, 160, 162, 176, 199], "fir": [3, 26, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 94, 95, 96, 97, 98, 99, 101, 103, 104, 163, 164, 165, 166, 167, 168, 171, 173, 174, 207, 216, 217, 218, 219, 220, 223, 224, 230, 234, 235, 261, 265, 266], "finit": [3, 26, 51, 94, 163, 265, 266], "impuls": [3, 7, 26, 37, 51, 61, 75, 86, 94, 163, 200, 217, 219, 232, 264, 265, 266], "respons": [3, 7, 26, 37, 51, 59, 60, 61, 65, 75, 83, 84, 86, 91, 94, 163, 200, 217, 218, 219, 220, 224, 230, 264, 265, 266], "iir": [3, 7, 9, 18, 60, 61, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 123, 129, 217, 218, 219, 220, 223, 224, 230, 234, 259, 262, 265, 266], "infinit": [3, 75, 265, 266], "interpol": [3, 26, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 122, 132, 142, 146, 154, 163, 165, 175, 207, 216, 235, 248, 261, 263, 265, 266], "polyphas": [3, 26, 27, 28, 33, 36, 94, 95, 96, 101, 104, 163, 164, 165, 171, 174, 191, 207, 235, 248, 265, 266], "decim": [3, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 105, 106, 111, 112, 113, 114, 118, 121, 132, 133, 142, 143, 146, 147, 153, 154, 155, 163, 165, 169, 191, 207, 235, 263, 265, 266], "ration": [3, 163, 165, 207, 235], "multirate_tap": [3, 28, 96, 165, 207, 266], "up": [3, 163, 165, 175, 199, 207, 235, 255], "down": [3, 163, 165, 169, 207, 235], "comput": [3, 8, 26, 39, 40, 41, 42, 43, 105, 109, 119, 132, 142, 146, 150, 152, 154, 156, 157, 158, 159, 160, 161, 162, 177, 178, 194, 199, 207, 209, 211, 259, 260, 262, 264], "p": [3, 4, 8, 134, 136, 156, 157, 163, 165, 171, 172, 174, 175, 181, 182, 184, 185, 190, 207, 235, 252], "q": [3, 8, 132, 142, 156, 157, 158, 159, 160, 162, 163, 165, 169, 172, 207, 235, 250, 266], "polyphase_matrix": [3, 235, 266], "tap": [3, 26, 28, 33, 36, 37, 51, 56, 67, 68, 74, 75, 81, 82, 94, 96, 101, 104, 163, 165, 171, 174, 235, 259, 260], "h_i": [3, 26, 28, 33, 36, 37, 51, 53, 67, 94, 96, 101, 104, 163, 165, 171, 174, 235, 259], "matrix": [3, 190, 235, 252], "h_": [3, 9, 26, 33, 36, 94, 101, 104, 163, 171, 174, 235, 262], "i": [3, 9, 16, 25, 26, 27, 28, 33, 36, 37, 39, 41, 42, 43, 44, 49, 51, 52, 53, 61, 65, 66, 67, 68, 73, 75, 78, 82, 86, 91, 92, 94, 95, 96, 101, 104, 106, 123, 127, 128, 130, 132, 136, 140, 142, 143, 146, 147, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 171, 174, 176, 177, 178, 179, 181, 182, 184, 185, 187, 190, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 204, 205, 208, 209, 210, 211, 212, 215, 216, 217, 219, 220, 222, 226, 229, 230, 232, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267], "j": [3, 26, 33, 36, 75, 78, 81, 94, 101, 104, 132, 134, 142, 146, 154, 163, 171, 174, 178, 190, 204, 206, 235, 250, 259, 260, 262], "farrowresampl": [3, 68, 69, 70, 71, 72, 73, 74, 258, 266], "cubic": [3, 68], "farrow": [3, 68, 69, 70, 71, 72, 73, 74, 265, 266], "differenti": [3, 6, 37, 38, 132, 150, 152, 188, 189, 232, 265, 266], "mix": [3, 206, 265, 266], "freq": [3, 4, 134, 136, 198, 199, 206, 210, 249, 252, 258, 262], "float": [3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 42, 44, 46, 47, 48, 50, 59, 60, 68, 69, 75, 76, 83, 84, 85, 105, 106, 116, 123, 124, 125, 127, 128, 130, 132, 133, 134, 135, 137, 138, 139, 142, 143, 146, 147, 151, 154, 155, 161, 163, 172, 177, 178, 179, 181, 184, 186, 197, 198, 200, 204, 206, 207, 209, 211, 212, 215, 216, 217, 218, 220, 222, 223, 224, 225, 226, 229, 231, 232, 238, 240, 241, 242, 252], "0": [3, 6, 8, 16, 26, 27, 33, 36, 37, 39, 42, 44, 51, 52, 53, 55, 56, 59, 60, 67, 75, 76, 78, 79, 80, 81, 82, 83, 84, 94, 95, 96, 101, 104, 105, 106, 111, 112, 113, 114, 121, 127, 132, 133, 134, 137, 142, 143, 146, 147, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 171, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 204, 205, 206, 208, 210, 213, 215, 216, 217, 218, 219, 220, 223, 224, 225, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 267], "time": [3, 5, 9, 16, 17, 19, 20, 21, 22, 23, 37, 51, 75, 123, 127, 142, 146, 154, 177, 178, 186, 190, 191, 194, 196, 198, 200, 204, 206, 209, 211, 212, 216, 217, 222, 226, 229, 232, 238, 240, 241, 242, 244, 245, 246, 248, 252, 258, 259, 260, 264, 265, 266], "domain": [3, 5, 177, 178, 186, 191, 194, 198, 204, 206, 209, 211, 212, 217, 222, 226, 229, 232, 240, 242, 245, 246, 248, 252, 265, 266], "n": [3, 5, 6, 7, 8, 9, 26, 27, 37, 38, 39, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 69, 75, 77, 78, 81, 83, 84, 86, 87, 91, 94, 95, 105, 106, 112, 114, 117, 118, 122, 123, 126, 132, 134, 136, 141, 142, 143, 146, 147, 154, 155, 156, 157, 158, 160, 162, 163, 164, 177, 178, 179, 180, 183, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 204, 206, 207, 209, 211, 212, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 229, 230, 232, 240, 242, 243, 244, 245, 246, 248, 250, 251, 252, 262, 264, 265], "complex": [3, 5, 7, 39, 40, 41, 42, 43, 105, 106, 111, 112, 113, 114, 121, 132, 133, 134, 136, 141, 142, 143, 146, 147, 153, 154, 155, 158, 159, 160, 161, 162, 178, 179, 191, 197, 204, 206, 215, 216, 226, 231, 232, 245, 246, 248, 252, 258, 259, 260, 262, 263, 265, 266], "exponenti": [3, 191, 206, 245, 246, 248, 258, 259, 260], "real": [3, 40, 41, 43, 132, 142, 156, 157, 159, 160, 162, 178, 206, 216, 226, 232, 245, 246, 258, 259, 260, 262, 265, 266], "sinusoid": [3, 146, 178, 206, 245, 246, 260, 266], "to_complex_bb": [3, 245, 266], "x_r": [3, 245, 246], "complex_": [3, 7, 105, 112, 113, 114, 121, 132, 134, 136, 141, 142, 146, 153, 154, 215, 231, 245, 246, 250, 251], "passband": [3, 200, 202, 238, 239, 241, 245, 246, 261, 266], "center": [3, 202, 232, 239, 245, 246, 266], "f_": [3, 9, 16, 24, 27, 59, 60, 83, 84, 95, 105, 106, 120, 132, 133, 142, 143, 146, 147, 154, 155, 191, 193, 196, 198, 200, 206, 216, 217, 218, 220, 222, 223, 224, 225, 226, 229, 232, 242, 243, 244, 245, 246, 248, 258, 259, 260, 262, 264], "r": [3, 26, 27, 28, 33, 34, 36, 68, 69, 94, 95, 96, 101, 102, 104, 179, 191, 192, 193, 195, 197, 200, 206, 238, 241, 243, 245, 246, 248, 254, 255, 256, 257, 260, 261, 262, 264], "4": [3, 7, 17, 19, 26, 33, 36, 37, 40, 42, 44, 60, 79, 80, 84, 94, 95, 101, 104, 132, 133, 134, 142, 143, 146, 150, 151, 152, 153, 154, 158, 159, 160, 161, 162, 163, 166, 167, 171, 174, 176, 178, 179, 180, 182, 183, 185, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 210, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 228, 230, 231, 232, 233, 234, 235, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 250, 255, 256, 258, 260, 261, 263], "rate": [3, 5, 7, 9, 16, 24, 26, 27, 28, 30, 34, 44, 45, 46, 48, 49, 59, 60, 68, 69, 83, 84, 94, 95, 96, 98, 102, 105, 109, 119, 132, 142, 146, 150, 152, 154, 163, 164, 165, 167, 169, 172, 175, 191, 192, 193, 195, 198, 206, 207, 214, 216, 217, 218, 220, 222, 223, 224, 225, 226, 228, 229, 232, 235, 242, 243, 245, 246, 248, 252, 265, 266], "baseband": [3, 7, 9, 132, 142, 146, 154, 206, 216, 225, 245, 246, 261, 262, 266], "x_c": [3, 245, 246], "c": [3, 9, 17, 19, 20, 21, 22, 23, 46, 47, 48, 49, 50, 105, 106, 121, 123, 132, 142, 146, 153, 154, 179, 182, 185, 199, 210, 231, 245, 246, 249, 262], "2": [3, 6, 7, 9, 17, 19, 22, 26, 29, 30, 33, 36, 37, 39, 40, 41, 42, 43, 44, 51, 55, 56, 57, 59, 60, 79, 80, 83, 84, 94, 95, 97, 98, 101, 104, 105, 106, 115, 132, 134, 142, 143, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 171, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 254, 257, 258, 259, 260, 261, 262, 263, 264], "to_real_pb": [3, 246, 261, 266], "2f_": [3, 246], "upsampl": [3, 94, 163, 248, 266], "factor": [3, 5, 9, 16, 25, 106, 123, 127, 128, 143, 147, 155, 186, 191, 248, 262], "downsampl": [3, 191, 266], "bsc_capac": [4, 185, 266], "calcul": [4, 5, 179, 182, 185, 197, 199, 210, 249, 266], "symmetr": [4, 184, 185, 190, 245, 246, 252, 265], "bsc": [4, 184, 185, 190, 252, 265, 266], "bec_capac": [4, 182, 266], "erasur": [4, 181, 182, 190, 252, 265], "bec": [4, 181, 182, 190, 252, 265, 266], "awgn_capac": [4, 179, 266], "addit": [4, 178, 179, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 248, 252, 265], "white": [4, 178, 179, 252, 265], "gaussian": [4, 6, 37, 178, 179, 200, 252, 265, 266], "nois": [4, 9, 10, 11, 16, 22, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 109, 119, 123, 127, 130, 132, 142, 146, 150, 152, 154, 158, 159, 160, 161, 162, 178, 179, 192, 193, 195, 196, 214, 228, 243, 244, 252, 262, 265], "awgn": [4, 132, 142, 146, 150, 152, 154, 178, 179, 197, 214, 215, 228, 245, 246, 252, 263, 265, 266], "fspl": [4, 199], "distanc": [4, 199], "free": [4, 132, 142, 146, 154, 199, 265], "space": [4, 60, 84, 199, 265], "wavelength": [4, 249, 266], "lambda": [4, 199, 249], "electromagnet": [4, 249], "wave": [4, 132, 249], "frequenc": [4, 9, 17, 19, 21, 26, 37, 51, 59, 60, 75, 83, 84, 94, 123, 132, 134, 136, 163, 191, 198, 199, 206, 210, 217, 218, 220, 222, 223, 224, 229, 245, 246, 248, 249, 252, 264, 265, 266], "f": [4, 17, 19, 26, 42, 59, 60, 83, 84, 94, 134, 136, 163, 176, 178, 198, 199, 200, 206, 210, 242, 249, 250, 255, 258, 259, 260, 261, 262, 263, 264], "parabolic_antenna": [4, 210, 266], "tupl": [4, 26, 37, 39, 42, 44, 46, 49, 51, 59, 60, 75, 83, 84, 94, 105, 112, 132, 142, 146, 154, 158, 161, 163, 177, 194, 209, 210, 211, 215, 217, 218, 219, 220, 223, 224, 230, 231, 234], "gain": [4, 9, 12, 13, 14, 15, 16, 75, 76, 85, 123, 124, 125, 127, 134, 135, 137, 176, 199, 200, 202, 210, 238, 239, 241, 262, 265], "g": [4, 49, 210, 256], "beamwidth": [4, 210], "theta": [4, 134, 137, 139, 140, 210], "parabol": [4, 210], "reflector": [4, 210], "signal": [5, 7, 9, 17, 19, 22, 23, 26, 27, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 58, 68, 69, 75, 77, 94, 95, 105, 106, 117, 123, 126, 132, 134, 136, 141, 142, 143, 146, 147, 154, 155, 158, 159, 160, 161, 162, 163, 164, 177, 178, 179, 186, 187, 191, 192, 193, 194, 195, 196, 198, 199, 200, 204, 205, 206, 207, 209, 210, 211, 212, 216, 217, 218, 220, 222, 223, 224, 225, 226, 229, 232, 235, 240, 242, 243, 244, 245, 246, 248, 249, 259, 260, 262, 264, 265, 266], "peak_pow": [5, 209, 211, 266], "peak": [5, 132, 142, 154, 186, 197, 209, 211, 212], "average_pow": [5, 177, 209, 266], "averag": [5, 44, 132, 142, 154, 177, 178, 179, 197, 209, 222], "papr": [5, 132, 142, 154, 209, 261, 266], "ratio": [5, 22, 40, 42, 44, 46, 47, 48, 49, 50, 109, 119, 132, 142, 150, 152, 154, 159, 161, 178, 179, 192, 193, 195, 196, 209, 213, 214, 228, 236, 237, 243, 244], "peak_voltag": [5, 186, 212, 266], "bool": [5, 26, 28, 37, 38, 40, 41, 42, 43, 51, 53, 66, 68, 70, 73, 75, 76, 78, 92, 94, 96, 132, 142, 146, 150, 152, 154, 159, 160, 161, 162, 163, 165, 177, 194, 206, 211, 212, 215, 224, 226, 231, 232, 240], "rms_voltag": [5, 186, 240, 266], "root": [5, 6, 106, 143, 147, 155, 197, 216, 232, 240, 241, 250, 251, 259, 265], "mean": [5, 197, 222, 229, 240, 264], "squar": [5, 6, 106, 143, 147, 155, 197, 199, 210, 232, 240, 241, 259], "rm": [5, 186, 197, 240], "crest_factor": [5, 186, 209, 266], "crest": [5, 186], "errorr": [5, 44, 45, 46, 47, 48, 49, 50, 263, 266], "A": [5, 9, 17, 19, 20, 21, 22, 23, 25, 27, 37, 44, 51, 52, 95, 106, 123, 143, 147, 155, 176, 183, 201, 203, 204, 210, 238, 241, 253, 255, 262], "error": [5, 7, 9, 15, 16, 22, 44, 45, 46, 48, 49, 50, 105, 109, 119, 123, 127, 132, 142, 146, 150, 152, 154, 176, 185, 197, 214, 228, 262, 265, 266], "ber": [5, 7, 44, 105, 109, 132, 142, 146, 150, 154, 214, 263, 265, 266], "symbol": [5, 7, 44, 46, 49, 94, 105, 106, 110, 111, 112, 113, 114, 119, 120, 121, 132, 133, 142, 143, 146, 147, 150, 152, 153, 154, 155, 178, 192, 193, 195, 196, 197, 198, 200, 202, 215, 216, 225, 228, 231, 238, 239, 241, 243, 244, 261, 264, 265, 266], "ser": [5, 7, 44, 105, 119, 132, 142, 146, 152, 154, 228, 263, 265, 266], "evm": [5, 197, 265, 266], "x_hat": [5, 7, 44, 46, 105, 112, 132, 142, 146, 154, 197, 215, 263], "ref": [5, 176, 197, 200, 207], "vector": [5, 44, 72, 197, 222, 229, 265, 266], "magnitud": [5, 7, 180, 197, 217, 220, 250, 265, 266], "hat": [5, 7, 46, 105, 111, 112, 132, 142, 146, 154, 197, 215, 231], "k": [5, 6, 7, 46, 105, 106, 110, 111, 112, 113, 114, 115, 132, 142, 146, 147, 154, 155, 188, 189, 192, 193, 195, 197, 215, 231, 243, 261, 264], "linearmodul": [6, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 146, 231, 266], "amplitud": [6, 105, 106, 204, 252, 258, 262], "arbitrari": [6, 68, 69, 70, 71, 72, 73, 74, 105, 265, 266], "psk": [6, 142, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 178, 197, 198, 204, 214, 215, 216, 228, 231, 242, 261, 265, 266], "shift": [6, 132, 142, 146, 150, 151, 152, 153, 154, 250, 259, 260, 265, 266], "kei": [6, 132, 142, 146, 150, 151, 152, 153, 154, 265, 266], "demodul": [6, 105, 112, 132, 142, 146, 154, 263, 266], "pimpsk": [6, 154, 155, 266], "pi": [6, 26, 79, 80, 94, 95, 134, 142, 146, 154, 155, 163, 178, 191, 199, 200, 204, 206, 210, 217, 218, 219, 220, 223, 224, 230, 232, 234, 245, 246, 248, 250, 258, 259, 260, 262, 265, 266], "m": [6, 75, 78, 82, 105, 106, 110, 111, 112, 113, 114, 115, 121, 132, 142, 146, 147, 153, 154, 155, 190, 192, 193, 195, 199, 231, 243, 254, 255, 256, 257, 265, 266], "oqpsk": [6, 132, 142, 143, 144, 145, 266], "offset": [6, 17, 19, 26, 37, 94, 95, 105, 106, 116, 132, 133, 134, 136, 137, 139, 142, 143, 146, 147, 151, 154, 155, 163, 198, 206, 232, 242, 252, 262, 265, 266], "quadratur": [6, 132, 142, 204], "msk": [6, 132, 133, 225, 266], "rectangular": [6, 106, 143, 147, 155, 239, 261, 264, 265, 266], "span": [6, 7, 106, 143, 147, 155, 200, 202, 216, 225, 238, 239, 241, 261, 264], "half_sin": [6, 133, 202, 266], "half": [6, 132, 142, 202, 207, 210, 265, 266], "sine": [6, 132, 202, 265, 266], "time_bandwidth": [6, 200], "raised_cosin": [6, 106, 143, 147, 155, 216, 238, 264, 266], "alpha": [6, 106, 143, 147, 155, 200, 233, 238, 241, 261, 264], "rais": [6, 37, 106, 143, 147, 155, 216, 232, 238, 241, 259, 265], "cosin": [6, 37, 106, 143, 147, 155, 216, 232, 238, 241, 259, 265], "rc": [6, 106, 143, 147, 155, 238], "root_raised_cosin": [6, 37, 55, 56, 106, 143, 147, 155, 216, 217, 218, 219, 220, 223, 224, 230, 232, 234, 241, 259, 261, 263, 264, 266], "srrc": [6, 106, 142, 143, 146, 147, 154, 155, 216, 232, 241, 261], "binary_cod": [6, 183, 266], "gener": [6, 132, 142, 146, 154, 178, 181, 183, 184, 190, 201, 227, 254, 263, 266], "code": [6, 26, 29, 37, 51, 55, 75, 79, 94, 97, 105, 107, 132, 133, 142, 143, 144, 146, 147, 148, 153, 154, 155, 163, 166, 180, 183, 192, 193, 195, 201, 215, 231, 243, 251, 256, 263, 266], "length": [6, 7, 26, 27, 37, 42, 51, 52, 54, 61, 65, 77, 94, 95, 96, 106, 112, 114, 133, 143, 147, 155, 163, 165, 180, 183, 200, 201, 202, 207, 217, 219, 222, 226, 229, 230, 238, 239, 241, 245, 250, 251, 255, 258, 261, 264], "gray_cod": [6, 201, 266], "grai": [6, 132, 133, 142, 143, 146, 147, 153, 154, 155, 201, 215, 231, 263, 265], "diff_encod": [6, 132, 142, 146, 150, 152, 154, 188, 189, 266], "y_prev": [6, 188, 189], "input": [6, 9, 17, 19, 22, 23, 26, 27, 28, 31, 37, 38, 51, 52, 53, 61, 64, 65, 68, 69, 70, 72, 75, 76, 77, 78, 86, 91, 94, 95, 96, 99, 123, 126, 134, 136, 142, 146, 150, 152, 154, 156, 163, 164, 165, 168, 178, 179, 181, 182, 184, 185, 187, 188, 189, 190, 191, 205, 208, 213, 219, 230, 236, 237, 247, 248, 252, 259, 260, 262], "data": [6, 188, 189, 203, 208, 247, 265], "diff_decod": [6, 188, 189, 266], "y": [6, 26, 27, 37, 51, 52, 58, 69, 75, 77, 94, 95, 123, 126, 134, 136, 141, 163, 178, 181, 184, 188, 189, 190, 191, 198, 204, 206, 215, 220, 222, 229, 231, 232, 242, 248, 262, 263], "decod": [6, 188], "use_styl": [7, 233], "appli": [7, 26, 94, 106, 163, 198, 204, 215, 216, 222, 229, 231, 232, 233, 242, 252], "default": [7, 61, 65, 133, 143, 147, 153, 155, 177, 194, 209, 211, 215, 220, 222, 226, 229, 231, 233, 263], "matplotlib": [7, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 258, 259, 260, 261, 262, 263, 264, 265], "rcparam": [7, 233], "time_domain": [7, 26, 37, 94, 95, 132, 134, 142, 146, 154, 163, 178, 191, 206, 232, 245, 246, 248, 261, 263, 264, 266], "raster": [7, 216, 225, 226, 265, 266], "none": [7, 26, 37, 42, 51, 61, 65, 68, 72, 94, 106, 123, 131, 136, 143, 147, 155, 161, 163, 177, 178, 179, 181, 184, 190, 194, 208, 209, 211, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 229, 230, 231, 232, 247, 252, 258, 261, 263], "periodogram": [7, 191, 222, 245, 246, 248, 261, 265, 266], "power": [7, 132, 142, 146, 154, 177, 178, 179, 187, 197, 200, 202, 205, 209, 210, 211, 222, 238, 239, 241, 264, 265], "densiti": [7, 22, 222, 261, 264], "xx": [7, 222], "us": [7, 26, 28, 32, 35, 37, 38, 51, 53, 58, 63, 68, 70, 75, 76, 78, 89, 94, 95, 96, 100, 103, 105, 106, 111, 112, 123, 129, 132, 142, 143, 146, 147, 154, 155, 163, 165, 170, 173, 179, 182, 185, 197, 203, 207, 208, 215, 216, 217, 219, 221, 222, 229, 230, 247, 254, 255, 256, 257, 259, 260, 263, 264, 265, 267], "welch": [7, 222, 229], "method": [7, 30, 32, 96, 98, 100, 165, 167, 170, 222, 229, 259, 260, 266], "spectrogram": [7, 229, 265, 266], "constel": [7, 132, 142, 146, 151, 154, 178, 197, 198, 204, 215, 242, 250, 265, 266], "symbol_map": [7, 105, 106, 121, 132, 142, 146, 151, 153, 154, 197, 231, 232, 263, 266], "map": [7, 105, 106, 113, 121, 132, 142, 146, 153, 154, 197, 231, 265, 266], "ey": [7, 132, 142, 146, 154, 216, 265, 266], "diagram": [7, 9, 26, 37, 94, 123, 134, 163, 188, 189, 216, 265, 266], "phase_tre": [7, 132, 225, 266], "phase": [7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 105, 106, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 150, 151, 152, 153, 154, 155, 176, 198, 204, 206, 223, 224, 225, 252, 265, 266], "tree": [7, 225, 266], "continu": [7, 132, 225, 258, 266], "cpm": [7, 225, 266], "kwarg": [7, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234], "e_b": [7, 46, 47, 48, 49, 50, 105, 109, 132, 142, 146, 150, 154, 179, 192, 193, 195, 214, 243, 265], "n_0": [7, 22, 46, 47, 48, 49, 50, 105, 109, 119, 132, 142, 146, 150, 152, 154, 178, 179, 192, 193, 195, 196, 197, 214, 215, 228, 243, 244, 263, 265], "e_": [7, 46, 47, 48, 49, 50, 105, 119, 132, 142, 146, 152, 154, 178, 179, 192, 195, 196, 197, 215, 228, 244, 263, 265], "roc": [7, 39, 42, 158, 161, 227, 266], "receiv": [7, 39, 40, 42, 44, 46, 105, 111, 112, 118, 132, 142, 146, 150, 152, 154, 158, 159, 160, 161, 162, 197, 199, 216, 221, 227, 266], "oper": [7, 39, 42, 158, 161, 227, 266], "characterist": [7, 39, 42, 158, 161, 227, 266], "curv": [7, 39, 42, 150, 152, 158, 161, 214, 227, 228, 266], "enr": [7, 158, 159, 161, 221], "impulse_respons": [7, 26, 37, 51, 61, 75, 86, 94, 163, 200, 202, 207, 219, 238, 239, 241, 259, 260, 264, 266], "h": [7, 26, 37, 39, 51, 53, 55, 56, 59, 60, 61, 75, 83, 84, 86, 94, 105, 106, 117, 118, 122, 123, 132, 142, 143, 146, 147, 154, 155, 158, 163, 200, 207, 216, 217, 219, 220, 224, 235, 261, 262, 264], "step_respons": [7, 26, 37, 51, 65, 75, 91, 94, 163, 230, 259, 260, 262, 266], "step": [7, 26, 37, 51, 65, 75, 91, 94, 134, 136, 141, 163, 217, 230, 265], "zeros_pol": [7, 234, 260, 266], "zero": [7, 26, 27, 37, 51, 58, 72, 75, 76, 79, 80, 93, 94, 95, 96, 123, 136, 163, 165, 202, 208, 217, 218, 219, 220, 223, 224, 230, 232, 234, 239, 245, 259, 261, 262, 264, 265, 266], "pole": [7, 75, 76, 79, 80, 88, 217, 218, 219, 220, 223, 224, 230, 234, 259, 265], "magnitude_respons": [7, 59, 60, 83, 84, 202, 207, 220, 238, 239, 241, 259, 260, 262, 264, 266], "omega": [7, 26, 37, 51, 59, 60, 75, 83, 84, 94, 134, 137, 138, 140, 163, 217, 218, 220, 223, 224, 262], "phase_respons": [7, 59, 60, 83, 84, 224, 266], "angl": [7, 224, 262], "phase_delai": [7, 223, 266], "delai": [7, 26, 27, 30, 31, 37, 51, 52, 56, 57, 68, 94, 95, 98, 99, 123, 134, 163, 167, 168, 188, 189, 202, 218, 223, 239, 262, 265], "tau_": [7, 223], "phi": [7, 105, 106, 116, 132, 133, 142, 143, 146, 147, 151, 154, 155, 198, 204, 206, 223], "group_delai": [7, 218, 259, 260, 266], "group": [7, 218, 265], "tau_g": [7, 218], "complementari": [8, 156, 157], "cumul": [8, 156, 157], "distribut": [8, 156, 157], "standard": [8, 156, 157], "normal": [8, 9, 11, 16, 123, 127, 130, 156, 157, 197, 200, 202, 217, 218, 220, 222, 223, 224, 229, 238, 239, 241, 262, 264], "mathcal": [8, 39, 156, 157, 158, 159, 160, 161, 162, 178, 190], "qinv": [8, 156, 157, 266], "invers": [8, 157], "closedlooppl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 253, 262, 266], "defin": [9, 37, 51, 75, 178, 190, 200, 227, 250, 253, 260, 265], "perform": [9, 27, 52, 95, 150, 152, 191, 248, 250, 253, 259, 260, 263, 265, 266], "close": [9, 16, 18, 253, 265, 266], "loop": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 253, 265, 266], "pll": [9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 253, 265, 266], "meant": 9, "analysi": [9, 16, 255, 262, 265, 266], "onli": [9, 27, 35, 52, 58, 63, 68, 72, 89, 95, 103, 106, 133, 143, 147, 153, 155, 173, 178, 199, 202, 226, 239, 257, 262, 263], "block": [9, 26, 37, 94, 123, 134, 163, 188, 189], "bb": [9, 261, 262], "phase_err": 9, "ped": [9, 15, 16, 127, 262], "lf": [9, 262], "phase_est": 9, "lo": [9, 262], "nco": [9, 12, 16, 127, 134, 135, 136, 137, 138, 139, 140, 141, 253, 262, 265, 266], "local": [9, 254, 262], "oscil": [9, 134, 137, 253, 262, 265, 266], "detector": [9, 15, 16, 39, 127, 158, 262, 266], "filter": [9, 13, 14, 16, 18, 26, 27, 28, 31, 32, 33, 35, 36, 37, 38, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 103, 104, 105, 112, 118, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 142, 146, 154, 163, 164, 165, 168, 170, 171, 173, 174, 191, 200, 202, 207, 216, 217, 218, 219, 220, 223, 224, 230, 232, 234, 235, 238, 239, 241, 248, 253, 264, 265, 266], "numer": [9, 134, 137, 253, 260, 262, 265, 266], "control": [9, 134, 137, 238, 241, 253, 262, 265, 266], "The": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 94, 95, 96, 99, 100, 101, 102, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 254, 255, 256, 257, 259, 260, 262, 263, 264, 265, 267], "transfer": [9, 18, 37, 51, 75, 76, 123, 200, 259, 260, 262], "2nd": [9, 123, 127, 253, 262, 266], "order": [9, 26, 27, 30, 37, 38, 44, 49, 51, 52, 56, 62, 68, 71, 75, 80, 87, 94, 95, 96, 98, 105, 106, 115, 123, 127, 132, 142, 146, 147, 154, 155, 163, 165, 167, 178, 192, 193, 195, 197, 198, 200, 215, 216, 225, 226, 238, 241, 242, 243, 253, 260, 261, 262, 263, 266], "proport": [9, 13, 27, 95, 123, 124, 127, 199, 210, 253, 266], "plu": [9, 123, 127, 253, 266], "integr": [9, 14, 40, 41, 42, 43, 123, 125, 127, 176, 253, 257, 260, 266], "z": [9, 37, 51, 75, 123, 134, 188, 189, 250, 259, 260, 262], "k_1": [9, 13, 123, 124, 262], "k_2": [9, 14, 123, 125, 262], "frac": [9, 17, 19, 22, 23, 37, 39, 40, 41, 43, 51, 57, 75, 96, 123, 142, 146, 154, 158, 159, 160, 165, 176, 177, 178, 179, 186, 192, 193, 195, 196, 197, 199, 200, 204, 205, 206, 209, 210, 240, 243, 244, 249, 250, 262], "k_0": [9, 12, 16, 127, 134, 135, 137, 262], "k_p": [9, 15, 16, 127, 262], "refer": [9, 17, 19, 20, 21, 22, 23, 39, 40, 41, 43, 44, 68, 123, 150, 152, 158, 159, 160, 162, 176, 178, 186, 197, 198, 200, 207, 209, 235, 238, 241, 242, 250, 260, 264, 265], "michael": [9, 17, 19, 20, 21, 22, 23, 123, 238, 241], "rice": [9, 17, 19, 20, 21, 22, 23, 123, 238, 241], "digit": [9, 17, 19, 20, 21, 22, 23, 123, 150, 152, 238, 241, 262, 265, 266], "commun": [9, 17, 19, 20, 21, 22, 23, 123, 150, 152, 207, 235, 238, 241, 262, 265], "discret": [9, 17, 19, 20, 21, 22, 23, 37, 123, 178, 190, 196, 238, 241, 244, 252, 258, 262, 265], "approach": [9, 17, 19, 20, 21, 22, 23, 123, 179, 182, 185, 238, 241, 262], "appendix": [9, 123, 238, 241], "lock": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141], "exampl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 33, 35, 36, 37, 38, 40, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 101, 103, 104, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 150, 151, 152, 153, 154, 156, 157, 159, 161, 163, 166, 167, 171, 173, 174, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 262], "see": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 35, 38, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 85, 87, 88, 89, 90, 92, 93, 103, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 151, 153, 154, 163, 173, 191, 200, 202, 217, 218, 219, 220, 223, 224, 230, 234, 238, 239, 241, 265], "noise_bandwidth": [9, 16, 123, 127, 130], "damping_factor": [9, 16, 123, 127, 128], "creat": [9, 16, 26, 28, 37, 38, 44, 45, 51, 53, 68, 70, 75, 76, 78, 94, 95, 96, 105, 106, 123, 127, 132, 133, 134, 137, 142, 143, 146, 147, 151, 154, 155, 163, 165, 178, 180, 197, 198, 206, 232, 242, 245, 246, 250, 258, 262, 264], "object": [9, 16, 26, 29, 30, 37, 44, 45, 51, 55, 56, 75, 79, 80, 94, 97, 98, 105, 106, 107, 108, 132, 133, 142, 143, 144, 145, 146, 147, 148, 149, 154, 155, 163, 166, 167, 217, 218, 219, 220, 223, 224, 230, 234, 262, 266], "phase_lock_tim": [9, 23], "frequency_lock_tim": [9, 17], "freq_offset": [9, 17, 19], "lock_tim": [9, 19, 262], "phase_error_vari": [9, 22], "cn0": [9, 22], "varianc": [9, 22, 39, 41, 43, 160, 162, 178], "steadi": [9, 22], "state": [9, 22, 26, 27, 35, 37, 51, 52, 58, 63, 64, 66, 68, 72, 73, 75, 89, 90, 92, 94, 95, 103, 163, 173, 266], "sample_r": [9, 16, 24, 26, 59, 60, 83, 84, 94, 95, 132, 142, 146, 154, 163, 191, 198, 206, 216, 217, 218, 220, 222, 223, 224, 225, 226, 229, 232, 245, 246, 248, 258, 262, 264], "bnt": [9, 11, 262], "bandwidth": [9, 10, 11, 16, 20, 123, 127, 130, 179, 200, 238, 241, 262, 264], "b_n": [9, 10, 11, 16, 17, 19, 22, 23, 123, 127, 130], "t": [9, 11, 16, 39, 123, 127, 130, 158, 200, 203, 254, 258], "bn": [9, 10], "hz": [9, 10, 16, 17, 19, 22, 59, 60, 83, 84, 123, 127, 130, 179, 187, 191, 198, 199, 200, 205, 206, 210, 245, 246, 249, 258], "zeta": [9, 16, 25, 123, 127, 128], "damp": [9, 16, 25, 123, 127, 128, 262], "k0": [9, 12, 16, 127, 134, 135, 137], "kp": [9, 15, 16, 127], "k1": [9, 13, 123, 124, 262], "k2": [9, 14, 123, 125, 262], "repres": [9, 18, 181, 182], "omega_n": [9, 21, 262], "natur": [9, 21], "radian": [9, 20, 21, 22, 134, 136, 137, 138, 139, 140, 154, 262], "omega_3db": [9, 20], "3": [9, 17, 19, 20, 23, 26, 33, 36, 37, 39, 40, 44, 55, 56, 79, 80, 94, 95, 101, 104, 132, 134, 142, 146, 150, 151, 152, 153, 154, 158, 159, 163, 166, 167, 171, 174, 176, 178, 179, 180, 181, 183, 184, 187, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 215, 216, 217, 218, 219, 220, 223, 224, 230, 232, 234, 235, 238, 239, 241, 242, 243, 245, 246, 247, 248, 249, 250, 254, 255, 260, 262, 264, 265], "omega_": [9, 20], "textrm": [9, 20], "properti": [10, 11, 12, 13, 14, 15, 18, 20, 21, 24, 25, 31, 32, 33, 34, 36, 57, 62, 64, 66, 67, 71, 73, 74, 81, 82, 85, 87, 88, 90, 92, 93, 99, 100, 101, 102, 104, 110, 115, 116, 117, 118, 120, 121, 122, 124, 125, 128, 129, 130, 135, 138, 139, 151, 153, 168, 169, 170, 171, 172, 174, 175, 266], "paramet": [16, 17, 19, 22, 27, 28, 38, 40, 41, 42, 43, 46, 47, 48, 50, 52, 53, 59, 60, 61, 65, 69, 70, 72, 76, 77, 78, 83, 84, 86, 91, 95, 96, 106, 109, 111, 112, 113, 114, 119, 126, 127, 133, 136, 137, 141, 143, 147, 150, 152, 155, 156, 157, 159, 160, 161, 162, 165, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250], "where": [16, 27, 52, 95, 106, 123, 127, 130, 147, 155, 158, 178, 179, 190, 192, 193, 195, 200, 243, 250, 259, 260, 265], "period": [16, 123, 127, 130, 132, 250], "second": [16, 17, 19, 23, 44, 123, 127, 130, 200], "critic": [16, 25, 123, 127, 128, 262], "underdamp": [16, 25, 123, 127, 128], "overdamp": [16, 25, 123, 127, 128], "ted": [16, 127], "t_": [17, 19, 23, 69, 200, 264], "fl": [17, 19], "delta": [17, 19, 26, 37, 51, 61, 75, 86, 94, 163, 219, 259, 260], "take": [17, 19, 23, 254], "onto": [17, 19, 23], "39": 17, "pl": [19, 23], "38": 19, "34": 20, "33": 21, "sigma_": [22, 39, 40, 42], "theta_": 22, "carrier": [22, 146], "43": 22, "40": [23, 94, 163, 191], "less": [25, 176], "than": [25, 132, 133, 143, 147, 153, 155, 176, 202, 204, 215, 231, 239], "greater": [25, 238, 241], "note": [26, 33, 36, 37, 39, 40, 41, 43, 51, 75, 94, 101, 104, 123, 132, 134, 142, 146, 154, 158, 159, 160, 162, 163, 171, 174, 176, 178, 179, 182, 185, 188, 189, 200, 204, 210, 216, 235, 250], "equival": [26, 94, 163, 178, 179, 196, 244, 256, 258], "first": [26, 31, 44, 94, 96, 99, 132, 140, 142, 163, 165, 168, 208, 232, 247, 255, 257], "prototyp": [26, 33, 36, 94, 101, 104, 163, 171, 174], "feedforward": [26, 28, 33, 36, 37, 51, 53, 67, 75, 78, 82, 94, 96, 101, 104, 163, 165, 171, 174, 217, 218, 219, 220, 223, 224, 230, 234, 259, 260], "coeffici": [26, 28, 37, 51, 53, 75, 78, 94, 96, 105, 118, 122, 132, 142, 146, 154, 163, 165, 217, 218, 219, 220, 223, 224, 230, 234, 259, 260], "discard": [26, 163], "between": [26, 28, 38, 53, 66, 70, 73, 76, 78, 92, 94, 96, 163, 165, 199, 222, 226, 229, 262, 265], "each": [26, 27, 52, 94, 95, 163, 197, 203, 222, 226, 229], "instead": [26, 94, 163, 215], "decompos": [26, 94, 163], "ar": [26, 27, 28, 33, 36, 37, 38, 39, 44, 46, 47, 48, 50, 52, 53, 60, 70, 76, 78, 84, 94, 95, 96, 101, 104, 105, 106, 118, 122, 132, 133, 142, 143, 146, 147, 154, 155, 158, 163, 165, 171, 174, 179, 181, 182, 184, 185, 199, 202, 208, 215, 216, 217, 218, 220, 222, 223, 224, 225, 226, 229, 231, 232, 233, 235, 239, 245, 246, 254, 256, 258, 260, 262, 264, 265, 267], "commut": [26, 94, 163], "parallel": [26, 94, 163], "output": [26, 27, 31, 37, 51, 52, 61, 65, 75, 76, 78, 86, 91, 94, 95, 96, 99, 112, 123, 126, 134, 136, 140, 141, 163, 165, 168, 178, 179, 180, 181, 182, 184, 185, 189, 190, 197, 205, 208, 219, 230, 247, 251, 254, 258, 259, 260, 262], "sum": [26, 39, 51, 75, 158, 264], "prevent": [26, 94, 142, 154, 163], "need": [26, 94, 163, 254, 255, 257], "done": [26, 254], "case": [26, 94, 154, 158, 163], "2x": [26, 94], "6": [26, 33, 36, 44, 55, 56, 79, 80, 94, 95, 101, 104, 132, 134, 142, 146, 153, 154, 159, 160, 162, 163, 171, 174, 176, 183, 187, 190, 191, 192, 193, 197, 199, 201, 203, 205, 210, 215, 216, 217, 218, 219, 220, 223, 224, 230, 231, 232, 234, 235, 238, 241, 245, 246, 248, 250, 254, 257, 259, 260, 262, 263], "5": [26, 33, 36, 37, 39, 40, 41, 42, 43, 44, 55, 56, 94, 95, 101, 104, 132, 134, 142, 146, 154, 159, 161, 163, 171, 174, 176, 178, 181, 183, 184, 185, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 203, 204, 210, 213, 216, 217, 218, 219, 220, 223, 224, 230, 232, 234, 235, 238, 241, 242, 243, 244, 245, 246, 248, 250, 254, 258, 259, 260, 261, 262, 263, 264], "summat": 26, "bottom": [26, 94, 163], "top": [26, 94, 163], "adder": [26, 123, 134, 188, 189, 262], "relat": [26, 33, 36, 94, 101, 104, 163, 171, 174, 179, 200], "In": [26, 27, 28, 29, 30, 33, 36, 37, 38, 40, 42, 44, 52, 53, 55, 56, 66, 70, 73, 76, 78, 79, 80, 92, 94, 95, 96, 97, 98, 101, 104, 132, 134, 142, 146, 150, 151, 152, 153, 154, 156, 157, 159, 161, 163, 165, 166, 167, 171, 174, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 258, 263], "np": [26, 33, 36, 40, 42, 79, 80, 94, 95, 101, 104, 105, 117, 121, 132, 134, 142, 146, 150, 152, 153, 154, 159, 161, 163, 171, 174, 176, 178, 179, 180, 181, 182, 184, 185, 190, 191, 197, 198, 199, 204, 206, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 228, 230, 232, 234, 235, 242, 245, 246, 248, 250, 258, 259, 260, 261, 262, 263, 264], "co": [26, 94, 95, 163, 206], "64": [26, 197, 203, 260], "arang": [26, 33, 36, 94, 95, 101, 104, 163, 171, 174, 178, 180, 191, 206, 235, 245, 246, 248, 250, 258, 262], "280": 26, "7": [26, 29, 30, 33, 36, 94, 95, 97, 98, 101, 104, 132, 142, 146, 153, 154, 159, 163, 171, 174, 176, 183, 190, 197, 201, 203, 207, 232, 235, 250, 254, 260], "kaiser": [26, 28, 29, 30, 32, 94, 95, 96, 97, 98, 100, 163, 165, 166, 167, 170], "window": [26, 94, 163, 222, 229], "out": [26, 29, 33, 36, 44, 55, 79, 94, 95, 97, 101, 104, 132, 142, 146, 151, 153, 154, 156, 157, 163, 166, 171, 174, 180, 181, 183, 184, 187, 188, 189, 190, 192, 193, 195, 196, 197, 199, 201, 205, 208, 210, 213, 218, 233, 235, 236, 237, 243, 244, 247, 249], "plt": [26, 37, 40, 42, 94, 95, 132, 134, 142, 146, 150, 151, 152, 153, 154, 159, 161, 163, 176, 178, 179, 180, 182, 185, 191, 197, 198, 199, 200, 202, 204, 206, 207, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 228, 230, 231, 232, 234, 238, 239, 241, 242, 245, 246, 248, 250, 258, 259, 260, 261, 262, 263, 264], "figur": [26, 37, 40, 42, 94, 95, 132, 134, 142, 146, 150, 151, 152, 153, 154, 159, 161, 163, 176, 178, 179, 180, 182, 185, 191, 197, 198, 199, 200, 202, 204, 206, 207, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 228, 230, 231, 232, 233, 234, 238, 239, 241, 242, 245, 246, 248, 250, 258, 259, 260, 261, 262, 263, 264], "figsiz": [26, 37, 40, 42, 94, 95, 132, 134, 142, 146, 150, 151, 152, 153, 154, 159, 161, 163, 176, 178, 179, 180, 182, 185, 191, 197, 198, 199, 200, 202, 204, 206, 207, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 228, 230, 231, 232, 233, 234, 238, 239, 241, 242, 245, 246, 248, 250, 258, 259, 260, 261, 262, 263, 264], "8": [26, 33, 36, 37, 40, 42, 79, 80, 94, 95, 101, 104, 106, 132, 133, 134, 142, 143, 146, 147, 150, 151, 152, 153, 154, 155, 159, 161, 163, 171, 174, 176, 178, 179, 180, 182, 183, 185, 190, 191, 197, 199, 200, 201, 202, 203, 206, 207, 210, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 228, 230, 231, 232, 233, 234, 235, 238, 239, 241, 245, 246, 248, 250, 254, 259, 260, 261, 262, 264], "plot": [26, 37, 40, 42, 59, 60, 61, 65, 83, 84, 86, 91, 94, 95, 132, 134, 142, 146, 150, 151, 152, 153, 154, 159, 161, 163, 178, 179, 180, 182, 185, 191, 197, 198, 199, 200, 202, 204, 206, 207, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 238, 239, 241, 242, 245, 246, 248, 250, 258, 259, 260, 262, 263, 264, 265, 266], "marker": [26, 37, 94, 95, 134, 163, 215, 231, 258, 259, 260, 263], "label": [26, 37, 40, 42, 94, 95, 133, 143, 147, 150, 152, 155, 159, 161, 163, 176, 178, 197, 198, 200, 204, 214, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 232, 238, 241, 242, 258, 261, 262, 263, 264], "o": [26, 94, 95, 163, 258], "titl": [26, 37, 94, 132, 134, 142, 150, 152, 163, 176, 178, 179, 180, 182, 185, 191, 197, 198, 204, 206, 214, 228, 232, 242, 245, 246, 248, 250, 258, 261, 262, 263, 264], "tight_layout": [26, 37, 94, 132, 134, 142, 150, 152, 163, 176, 178, 179, 180, 182, 185, 191, 197, 198, 199, 206, 214, 228, 232, 242, 245, 246, 248, 250, 261, 262, 263, 264], "preserv": [26, 28, 38, 53, 66, 70, 73, 76, 78, 92, 94, 96, 163, 165, 216, 226], "call": [26, 27, 28, 38, 52, 53, 66, 70, 73, 76, 78, 92, 94, 95, 96, 163, 165], "true": [26, 40, 41, 42, 43, 94, 95, 132, 142, 146, 150, 152, 154, 159, 160, 161, 162, 163, 176, 177, 179, 181, 182, 184, 185, 190, 194, 199, 206, 211, 212, 215, 224, 226, 231, 233, 240, 261, 263], "y1": [26, 94, 95, 163, 204], "70": [26, 203, 264], "y2": [26, 94, 95, 163, 204], "140": [26, 191], "y3": [26, 94, 95, 163], "210": 26, "y4": [26, 94, 163], "y5": [26, 94, 163], "flush": [26, 27, 37, 51, 52, 58, 94, 95, 163, 266], "y_1": [26, 94, 163, 204], "y_2": [26, 94, 163, 204], "y_3": [26, 94, 163], "y_4": [26, 94, 163], "y_5": [26, 94, 163], "__call__": [26, 27, 28, 37, 38, 51, 52, 53, 66, 68, 69, 70, 73, 75, 76, 77, 78, 92, 94, 95, 96, 123, 126, 134, 136, 163, 164, 165, 266], "full": [26, 27, 52, 94, 95, 163, 164, 180], "__len__": [26, 37, 51, 54, 94, 163], "__repr__": [26, 29, 37, 51, 55, 75, 79, 94, 97, 105, 107, 132, 142, 144, 146, 148, 154, 163, 166], "style": [26, 29, 37, 51, 55, 75, 79, 94, 97, 105, 107, 132, 142, 144, 146, 148, 154, 163, 166, 233], "__str__": [26, 30, 37, 51, 56, 75, 80, 94, 98, 105, 108, 132, 142, 145, 146, 149, 154, 163, 167], "human": [26, 30, 37, 51, 56, 75, 80, 94, 98, 105, 108, 132, 142, 145, 146, 149, 154, 163, 167], "readabl": [26, 30, 37, 51, 56, 75, 80, 94, 98, 105, 108, 132, 142, 145, 146, 149, 154, 163, 167], "reset": [26, 35, 37, 51, 63, 68, 72, 75, 89, 94, 103, 123, 131, 134, 140, 163, 173], "when": [26, 35, 37, 51, 58, 61, 63, 65, 75, 86, 89, 91, 94, 103, 163, 173, 178, 179, 181, 182, 184, 185, 196, 217, 218, 219, 220, 223, 224, 230, 244, 250, 258, 259, 260], "pass": [26, 37, 51, 58, 94, 163, 178, 181, 184, 190, 197, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 252, 254, 256, 259, 260, 266], "through": [26, 37, 51, 58, 94, 142, 154, 163, 181, 184, 190, 252, 259, 260, 262], "indic": [26, 28, 31, 37, 38, 41, 42, 43, 51, 53, 66, 68, 70, 73, 75, 76, 78, 92, 94, 96, 99, 106, 133, 142, 143, 146, 147, 150, 152, 154, 155, 159, 160, 161, 162, 163, 165, 168, 177, 194, 200, 202, 204, 206, 211, 212, 216, 224, 225, 226, 232, 238, 239, 240, 241], "whether": [26, 28, 37, 38, 41, 42, 43, 51, 53, 66, 68, 70, 73, 75, 76, 78, 92, 94, 96, 150, 152, 159, 160, 161, 162, 163, 165, 177, 194, 206, 211, 212, 224, 226, 232, 240], "consist": [26, 37, 46, 47, 48, 49, 50, 51, 64, 94, 163], "previou": [26, 28, 37, 38, 51, 53, 64, 70, 72, 76, 78, 94, 96, 163, 165, 188, 189], "u": [26, 37, 51, 65, 75, 91, 94, 163, 176, 230, 250, 251, 259, 260], "frequency_respons": [26, 37, 51, 59, 75, 83, 94, 163, 266], "frequency_response_log": [26, 37, 51, 60, 75, 84, 94, 163], "logarithm": [26, 37, 51, 60, 75, 84, 94, 163, 217, 218, 220, 222, 223, 224, 259, 260], "axi": [26, 37, 51, 60, 75, 84, 94, 163, 177, 194, 209, 211, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 229, 231, 232, 258], "custom": [26, 32, 94, 100, 106, 143, 147, 155, 163, 170, 266], "design": [26, 28, 32, 94, 96, 100, 106, 143, 147, 155, 163, 165, 170, 207, 254, 265, 266], "multir": [26, 27, 28, 32, 94, 95, 96, 100, 163, 165, 170, 207, 235, 266], "polyphase_tap": [26, 30, 33, 36, 94, 95, 98, 101, 104, 163, 167, 171, 174], "index": [26, 31, 68, 72, 94, 99, 163, 168, 216, 225, 226, 231, 254], "correspond": [26, 31, 44, 49, 94, 99, 163, 168, 226], "mode": [27, 28, 35, 38, 52, 53, 58, 63, 66, 68, 70, 72, 73, 76, 78, 89, 92, 95, 96, 103, 164, 165, 173, 180, 250], "l": [27, 52, 77, 95], "stream": [27, 28, 29, 30, 35, 38, 52, 53, 55, 56, 58, 63, 66, 68, 70, 72, 73, 76, 78, 79, 80, 89, 92, 95, 96, 97, 98, 103, 132, 142, 146, 154, 165, 166, 167, 173, 260], "convolut": [27, 52, 94, 95], "ha": [27, 52, 94, 95, 132, 142, 146, 178, 191, 199, 200, 210, 248, 250, 262, 263, 264], "align": [27, 52, 95, 96, 142, 165, 258], "howev": [27, 46, 47, 48, 50, 52, 95, 123, 182, 185, 258], "produc": [27, 52, 94, 95, 163, 200, 264], "final": [27, 52, 95], "dictat": [27, 52, 95], "argument": [27, 28, 52, 95, 96, 165, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 259, 260], "specif": [28, 49, 96, 165, 257, 264], "npt": [28, 96, 106, 133, 143, 147, 155, 165, 217, 218, 219, 220, 223, 224, 230, 234], "string": [29, 30, 55, 56, 79, 80, 97, 98, 106, 107, 108, 143, 144, 145, 147, 148, 149, 155, 166, 167, 203, 222, 229, 266], "represent": [29, 30, 55, 56, 79, 80, 97, 98, 107, 108, 144, 145, 148, 149, 166, 167, 231, 266], "print": [30, 56, 80, 98, 167, 203, 258, 259, 260, 262], "167": [30, 98], "24": [30, 98, 167], "shape": [30, 56, 80, 95, 98, 105, 106, 112, 114, 117, 118, 122, 132, 142, 143, 146, 147, 154, 155, 167, 200, 202, 216, 232, 238, 239, 241, 260, 265, 266], "12": [30, 94, 132, 142, 146, 154, 160, 162, 176, 183, 201, 207, 235, 259, 263], "befor": [33, 36, 101, 104, 171, 174, 267], "decomposit": [33, 36, 101, 104, 171, 174, 266], "after": [33, 36, 101, 104, 171, 174], "10": [33, 36, 37, 40, 42, 44, 94, 95, 101, 104, 106, 132, 142, 143, 146, 147, 150, 152, 154, 155, 159, 161, 163, 171, 174, 176, 177, 178, 183, 187, 190, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 214, 215, 217, 218, 219, 220, 223, 224, 228, 230, 232, 234, 235, 238, 239, 240, 241, 242, 243, 244, 258, 259, 260, 261, 262, 263, 264], "9": [33, 36, 94, 95, 101, 104, 132, 142, 146, 154, 159, 163, 171, 174, 176, 183, 190, 197, 201, 203, 235, 238, 241, 260, 261, 263, 264, 266], "its": [37, 51, 75, 76, 178, 259, 260, 264], "sum_": [37, 51, 75, 160, 162, 177, 178, 179, 194, 197, 240], "v": [37, 134, 187, 205, 254], "puls": [37, 105, 106, 112, 114, 117, 118, 122, 132, 142, 143, 146, 147, 154, 155, 200, 202, 216, 232, 238, 239, 241, 265, 266], "x_prime": 37, "deriv": 37, "d": [37, 51, 57, 199, 210, 254, 256, 265], "lfloor": [37, 51, 57], "rfloor": [37, 51, 57], "null": [39, 158, 220, 222, 264], "altern": [39, 158, 260], "hypothes": [39, 158], "follow": [39, 44, 204, 215, 226, 229, 231, 233, 235, 262], "assum": [39, 158, 178, 190, 208, 247], "valu": [39, 105, 106, 109, 119, 132, 133, 142, 143, 146, 147, 150, 152, 154, 155, 156, 157, 180, 187, 188, 189, 200, 204, 205, 215, 231, 260, 266], "random": [39, 132, 142, 146, 154, 178, 181, 184, 190, 197, 198, 204, 215, 216, 225, 232, 242, 261, 263], "process": [39, 40, 41, 43, 158, 159, 160, 162, 207, 235, 260, 262, 265], "w": [39, 158, 178, 258, 259, 260, 261, 262, 263, 264], "sigma": [39, 40, 41, 42, 43, 158, 159, 160, 161, 162, 178, 179], "_0": [39, 158], "_1": [39, 158], "test": [39, 158, 256, 265], "statist": [39, 40, 41, 43, 158, 159, 160, 162], "limits_": [39, 51, 75, 158], "left": [39, 40, 41, 75, 142, 146, 154, 158, 159, 160, 162, 176, 177, 178, 179, 194, 197, 199, 200, 204, 206, 210, 211, 212, 240, 250], "right": [39, 40, 41, 75, 142, 146, 154, 158, 159, 160, 162, 176, 177, 178, 179, 194, 197, 199, 200, 204, 206, 210, 211, 212, 240, 250], "gamma": [39, 41, 43, 158, 160, 162, 176], "sim": [39, 158, 178, 255], "chi_": [39, 40, 41], "2n": [39, 40, 41], "text": [39, 154, 158, 176, 177, 178, 179, 182, 185, 186, 187, 197, 198, 199, 205, 207, 209, 211, 212, 240, 242], "under": [39, 158], "detect": [39, 40, 41, 42, 43, 158, 159, 160, 161, 162, 176, 221, 227, 266], "threshold": [39, 41, 43, 158, 160, 162], "q_": [39, 40, 41, 43], "chi_n": [39, 40, 41, 43], "steven": [39, 40, 41, 43, 158, 159, 160, 162], "kai": [39, 40, 41, 43, 158, 159, 160, 162], "fundament": [39, 40, 41, 43, 158, 159, 160, 162], "theori": [39, 40, 41, 43, 158, 159, 160, 162], "section": [39, 46, 47, 48, 49, 50, 158, 260, 262], "static": [39, 40, 41, 42, 43, 158, 159, 160, 161, 162, 255], "n_nc": [39, 40, 41, 42, 43, 176], "number": [40, 41, 42, 43, 44, 46, 47, 50, 59, 60, 61, 65, 83, 84, 86, 91, 105, 106, 110, 120, 132, 133, 141, 142, 143, 146, 147, 154, 155, 176, 178, 181, 184, 190, 192, 193, 195, 200, 202, 203, 208, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 229, 230, 238, 239, 241, 243, 247], "For": [40, 41, 43, 159, 160, 162, 178, 191, 199, 248, 254, 259], "linspac": [40, 150, 152, 159, 179, 182, 185, 199, 214, 228, 260, 261, 262, 263], "20": [40, 42, 94, 95, 132, 134, 142, 146, 154, 159, 163, 176, 179, 181, 184, 187, 190, 197, 198, 203, 204, 205, 212, 235, 240, 248, 261, 263, 264, 266], "101": [40, 42, 159, 161], "25": [40, 181, 184, 190, 213, 216, 236, 237, 258, 261, 262, 264], "1e": [40, 159, 198, 263], "sigma2": [41, 43, 160, 162], "If": [42, 72, 106, 136, 143, 147, 155, 161, 163, 177, 178, 179, 190, 194, 208, 211, 212, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 229, 230, 231, 232, 240, 245, 247, 265], "logspac": [42, 161, 176], "theoret": [42, 150, 152, 214, 228, 263, 266], "variou": [42, 255, 264], "100": [42, 75, 86, 91, 134, 150, 152, 176, 178, 179, 182, 185, 187, 197, 205, 206, 214, 216, 217, 219, 225, 228, 230, 232, 242, 245, 246, 248, 258, 262], "1_000": [42, 178, 198, 199, 204, 242, 261], "000": [42, 198], "5_000": 42, "measur": [44, 46, 177, 178, 186, 187, 194, 197, 205, 209, 211, 212, 240, 262, 265, 266], "new": [44, 45, 68, 70, 105, 106, 132, 133, 142, 143, 146, 147, 154, 155, 242], "accumul": [44, 134, 137, 138, 140, 262], "from": [44, 59, 60, 75, 76, 83, 84, 96, 105, 121, 132, 142, 146, 153, 154, 165, 187, 192, 193, 195, 196, 205, 213, 222, 229, 236, 237, 243, 244, 254, 259, 260, 262, 265], "contain": [44, 178, 203], "add": [44, 46, 49, 132, 142, 146, 154, 178, 198, 202, 226, 239, 242, 252, 263, 267], "total": [44, 200, 202, 238, 239, 241, 264], "count": [44, 47, 197], "error_r": [44, 48, 49, 263], "everi": [44, 258], "can": [44, 46, 47, 48, 50, 123, 132, 178, 197, 200, 207, 208, 216, 222, 229, 256, 259, 260, 263, 265, 267], "obtain": 44, "tabul": [44, 45], "all": [44, 49, 136, 197, 216, 225, 226, 255, 257, 265], "ascend": [44, 49], "other": [46, 47, 48, 50, 258, 267], "quantiti": [46, 47, 48, 49, 50], "user": [46, 47, 48, 50, 259, 260], "caution": [46, 47, 48, 50], "instanc": [46, 47, 48, 50, 132], "transmit": [46, 105, 122, 132, 142, 146, 154, 197, 216], "e": [49, 134, 158, 159, 160, 161, 162, 177, 181, 182, 194, 250, 255, 256, 259, 260, 262, 263], "whatev": 49, "wa": [49, 179], "provid": [49, 105, 109, 119, 132, 142, 146, 150, 152, 154, 226, 255, 265], "wrapper": [51, 75], "scipi": [51, 75, 222, 229, 264, 265], "convolv": [51, 232], "It": [51, 75, 94, 106, 123, 143, 147, 155, 178, 216], "support": [51, 75, 266], "one": [51, 75, 133, 142, 143, 147, 153, 155, 200, 203, 216, 217, 218, 220, 222, 223, 224, 229, 245, 259, 260, 261, 264], "valid": [52, 199, 216, 225, 226, 250], "same": [52, 95, 232, 259], "0013559842808217807": [55, 56], "005995136544658217": [55, 56], "008698817681933214": [55, 56], "0024103767414047302": [55, 56], "010205586837665018": [55, 56], "018983779931504997": [55, 56], "011950905288150394": [55, 56], "01518393864077397": [55, 56], "051622191325047306": [55, 56], "07210389837804473": [55, 56], "04745944982876247": [55, 56], "039173517569276436": [55, 56], "17918683372907862": [55, 56], "3367363220550604": [55, 56], "4611457574513795": [55, 56], "5084040873607553": [55, 56], "30": [56, 94, 163, 191, 217, 219, 230, 245, 246, 260, 266], "31": 56, "15": [56, 132, 161, 183, 201, 235, 248], "remain": [58, 191, 208], "1024": [59, 60, 83, 84, 217, 218, 220, 223, 224, 261, 264], "decad": [60, 84, 217, 218, 220, 223, 224, 259, 262], "resampl": [68, 69, 70, 71, 72, 73, 74, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 207, 235, 265, 266], "http": [68, 176, 186, 200, 207, 209, 250, 254, 255, 256], "wirelesspi": 68, "com": [68, 176, 200, 207, 255, 256], "fraction": [68, 72, 200, 258], "structur": 68, "should": [72, 132, 216, 256], "equal": [72, 132], "three": [72, 258, 264], "lfilter": 75, "b_i": [75, 78, 82, 217, 218, 219, 220, 223, 224, 230, 234, 260], "feedback": [75, 78, 81, 217, 218, 219, 220, 223, 224, 230, 234, 260], "a_j": [75, 78, 81, 217, 218, 219, 220, 223, 224, 230, 234, 260], "These": [75, 142, 146, 154, 233, 256, 262], "differ": [75, 133, 143, 147, 153, 155, 232, 250, 264], "a_0": 75, "b": [75, 78, 176, 179, 200, 203, 217, 219, 230, 254, 255, 264], "classmethod": [75, 76], "zerospol": [75, 76, 79, 80, 217, 218, 219, 220, 223, 224, 230, 234, 260], "self": [75, 76], "b_tap": [75, 80, 82, 260], "a_tap": [75, 80, 81, 260], "exp": [79, 80, 142, 146, 154, 191, 200, 204, 206, 217, 218, 219, 220, 223, 224, 230, 232, 234, 246, 248, 250, 258, 260, 262], "1j": [79, 80, 191, 206, 217, 218, 219, 220, 223, 224, 230, 232, 234, 246, 248, 258, 260, 262], "conj": [79, 80, 217, 218, 219, 220, 223, 224, 230, 234, 260, 262], "478207252018059": [79, 80, 260], "6400000000000001": [79, 80, 260], "7391036260090295": [80, 260], "3061467458920719j": [80, 260], "insert": [94, 163], "multipli": [94, 163], "hold": [94, 96, 163, 165, 208, 266], "recommend": 94, "wai": [94, 256], "11": [94, 132, 142, 146, 154, 183, 201, 207, 235, 254], "zoh": [94, 96, 100, 163, 165, 170], "13": [94, 132, 142, 146, 154, 158, 159, 160, 162, 180, 183, 201, 235, 266], "matlab": [94, 96, 100, 163, 165, 170, 265], "iter": 95, "concaten": [95, 260], "linearli": [96, 165], "2r": 96, "ramp": [96, 123, 165], "advanc": [96, 165], "ones": [96, 165, 262], "84": 98, "modul": [105, 106, 114, 115, 117, 132, 134, 142, 143, 146, 147, 150, 152, 154, 155, 178, 192, 193, 195, 197, 198, 204, 214, 216, 225, 228, 231, 242, 243, 254, 257, 261, 263, 265, 266], "map_symbol": [105, 113, 132, 142, 146, 154, 215, 216, 266], "decide_symbol": [105, 111, 132, 142, 146, 154, 266], "a_hat": [105, 111, 132, 142, 146, 154], "decis": [105, 111, 112, 132, 142, 146, 154, 216], "maximum": [105, 111, 112, 132, 142, 146, 154, 200, 202, 215, 231, 238, 239, 241], "likelihood": [105, 111, 112, 132, 142, 146, 154], "mle": [105, 111, 132, 142, 146, 154], "match": [105, 106, 112, 118, 132, 142, 143, 146, 147, 154, 155, 266], "abstract": [105, 109, 119], "log_2": [105, 110, 132, 142, 146, 154, 179, 192, 193, 195, 243], "phase_offset": [105, 106, 116, 132, 133, 142, 143, 146, 147, 151, 154, 155, 178, 197, 198, 204, 215, 216, 231, 242, 261, 263], "degre": [105, 106, 116, 132, 133, 142, 143, 146, 147, 151, 154, 155, 198, 204, 206, 210], "dot": [105, 106, 121, 132, 142, 146, 153, 154, 231], "mapsto": [105, 106, 121, 132, 142, 146, 153, 154, 231], "mathbb": [105, 106, 121, 132, 142, 146, 153, 154, 179, 231, 250], "sym": [105, 106, 120, 132, 133, 142, 143, 146, 147, 154, 155, 193, 196, 200, 243, 244, 264], "pulse_shap": [105, 106, 112, 114, 117, 132, 142, 143, 146, 147, 154, 155, 261], "tx_filter": [105, 122, 132, 142, 146, 154], "rx_filter": [105, 118, 132, 142, 146, 154], "rect": [106, 143, 147, 155, 264], "whose": [106, 133, 143, 146, 147, 155], "import": [106, 143, 147, 155, 256, 258, 259, 260, 261, 262, 263, 264, 265], "roll": [106, 143, 147, 155, 250, 264], "off": [106, 143, 147, 155], "psd": [109, 119, 150, 152, 179, 192, 193, 195, 196, 214, 228, 243, 244], "p_b": 109, "s_hat": [112, 263], "size": [112, 114, 180, 190, 258, 262, 263, 264], "p_e": 119, "loopfilt": [123, 124, 125, 126, 127, 128, 129, 130, 131, 253, 262, 266], "ppi": [123, 127, 253], "track": 123, "constant": [123, 132, 134, 137, 138, 222, 229, 260, 262], "cannot": 123, "chirp": 123, "underli": [123, 129], "scheme": [132, 142, 146, 154, 266], "similar": [132, 142, 154, 264], "One": [132, 142, 154, 264], "distinct": [132, 142, 154], "result": [132, 142, 154, 177, 194, 199, 210, 211, 212, 238, 240, 241, 263], "envelop": [132, 259, 260], "which": [132, 142, 154, 176, 177, 178, 179, 194, 198, 204, 209, 210, 211, 215, 231, 242, 258, 262, 264], "lower": [132, 142, 154, 220, 222, 238, 241], "also": [132, 199, 200, 265], "consid": [132, 203], "cpfsk": 132, "separ": 132, "modem": [132, 142, 146, 154], "45": [132, 133, 142, 143, 146, 151, 178, 197, 198, 204, 206, 215, 216, 231, 242, 261, 263], "symbol_label": [132, 133, 142, 143, 146, 147, 153, 154, 155, 263], "randint": [132, 142, 146, 154, 178, 181, 184, 190, 197, 198, 204, 215, 216, 225, 232, 242, 261, 263], "1000": [132, 142, 146, 154, 197, 199, 232, 245, 246, 263], "dtype": [132, 142, 146, 154, 180, 208, 232, 247, 251, 262], "uint8": [132, 142, 146, 154, 208, 247], "complex_symbol": [132, 142, 146, 154], "70710678": [132, 142, 146], "70710678j": [132, 142, 146], "linestyl": [132, 142, 146, 154, 215, 226, 231, 233, 250, 258, 262, 263, 264], "tx_sampl": [132, 142, 146, 154], "50": [132, 142, 146, 154, 187, 205, 213, 231, 245, 246, 258, 261], "like": [132, 256, 265, 266], "channel": [132, 142, 150, 152, 179, 181, 182, 184, 185, 190, 214, 228, 265, 266], "subplot": [132, 142, 204, 262, 263], "imag": [132, 142, 258], "trajectori": 132, "although": 132, "boundari": 132, "lead": [132, 204, 263], "spectral": [132, 191, 222, 261, 264], "effici": [132, 191, 210, 248], "gmsk": 132, "rx_sampl": [132, 142, 146, 154], "last": [132, 142, 208, 254], "rx_symbol": [132, 142, 146, 154], "rx_complex_symbol": [132, 142, 146, 154], "14": [132, 142, 146, 154, 159, 183, 201, 235], "array_equ": [132, 142, 146, 154], "bin": [133, 143, 147, 153, 155, 197, 215, 231, 263], "absolut": [133, 134, 137, 139, 143, 155, 179], "consecut": [133, 143, 147, 155], "adjac": [133, 143, 147, 153, 155, 263, 264], "mai": [133, 143, 147, 153, 155, 197, 215, 226, 229, 231, 233, 260], "more": [133, 143, 147, 153, 155, 266], "start": [133, 143, 147, 155, 254], "0j": [133, 143, 147, 155], "go": [133, 143, 147, 155], "counter": [133, 143, 147, 155], "clockwis": [133, 143, 147, 155], "around": [133, 143, 147, 155], "circl": [133, 143, 147, 155, 260], "increment": [134, 136, 137, 138, 262], "Then": 134, "fsk": 134, "60": [134, 264], "repeat": 134, "cp": 134, "57": 134, "bpsk": [134, 150, 152, 214, 228, 232, 261], "variabl": [134, 136, 203, 262], "forward": [134, 141], "settabl": [134, 135, 138, 139], "vari": 136, "intern": 140, "set": [140, 178, 199, 215, 220, 222, 226, 229, 231, 233, 255, 257, 260], "qpsk": [142, 146, 150, 151, 152, 154, 178, 197, 198, 214, 215, 216, 228, 231, 232, 242, 265, 266], "convent": [142, 154], "transit": [142, 154, 184, 185, 190, 252], "independ": 142, "apart": 142, "origin": [142, 154, 248, 258], "taken": [142, 146, 154], "jq": 142, "begin": [142, 154, 158], "end": [142, 154, 158, 245, 255], "encod": [146, 150, 152, 188, 189, 265], "inform": [146, 192, 193, 195, 243], "ge": [147, 155, 176], "were": [150, 152], "simon": [150, 152], "alouini": [150, 152], "over": [150, 152, 203], "fade": [150, 152], "chapter": [150, 152, 207, 235], "john": [150, 152], "proaki": [150, 152], "optimum": [150, 152], "psk8": [150, 152, 214, 228, 263], "psk16": [150, 152, 214, 228, 263], "compar": [150, 152, 264], "de": [150, 152, 266], "se": [152, 228], "00000000e": [153, 154, 260], "00": [153, 154, 260], "00j": [153, 154], "07106781e": [153, 154], "01": [153, 154, 203, 260, 262], "01j": [153, 154], "12323400e": [153, 154], "17": [153, 154, 210, 235, 254], "83697020e": 153, "22464680e": [153, 154], "16j": [153, 154], "annot": [153, 231, 266], "odd": [154, 245], "rotat": [154, 206], "rel": [154, 250, 264], "even": [154, 200, 238, 241], "2m": 154, "displaystyl": 154, "pi4_qpsk": 154, "exceed": [156, 157], "15865525393145707": [156, 157], "158655": [156, 157], "0000010494310452": [156, 157], "perfect": 158, "knowledg": 158, "cn": [158, 178], "mathrm": 158, "re": 158, "sqrt": [158, 159, 160, 162, 176, 197, 200, 240, 250, 261, 262, 264], "____": 163, "2p": 165, "95": [167, 197], "desir": [176, 178, 263], "ln": [176, 200], "62": [176, 203], "_": [176, 197], "log_": [176, 177, 187, 194, 199, 209, 211, 212, 240], "54": [176, 203], "44": 176, "12ab": 176, "7b": 176, "claim": 176, "leq": 176, "le": [176, 206, 210, 238, 241], "8096": 176, "radarsp": 176, "weebli": 176, "upload": 176, "21471216": 176, "albersheim_alternative_form": 176, "pdf": [176, 200], "bpb": 176, "w2": 176, "wpmucdn": 176, "site": [176, 254], "gatech": 176, "edu": 176, "dist": [176, 255], "462": 176, "file": [176, 255, 257], "2016": 176, "noncoher": 176, "approxim": [176, 266], "www": [176, 200, 207], "mathwork": [176, 200, 207], "help": [176, 200, 207], "html": [176, 200, 207, 254], "semilogx": [176, 227], "legend": [176, 204, 258, 261, 262, 264], "grid": [176, 179, 182, 185, 199, 233, 258, 261, 262, 264], "both": [176, 179, 215, 231, 232, 258, 262], "xlabel": [176, 179, 180, 182, 185, 197, 199, 250, 258, 261, 262, 264], "ylabel": [176, 179, 180, 182, 185, 197, 199, 250, 258, 261, 262, 264], "across": 176, "nuse": 176, "avg": [177, 178, 209], "ax": [177, 194, 209, 211, 233], "along": [177, 194, 209, 211], "entir": [177, 194, 209, 211], "decibel": [177, 187, 194, 205, 211, 212, 240, 265, 266], "seed": [178, 181, 184, 190], "ad": [178, 226, 255, 265, 266], "explicitli": 178, "known": 178, "must": [178, 200, 206, 226, 238, 241, 250], "numpi": [178, 181, 184, 190, 247, 258, 259, 260, 261, 262, 263, 264, 265], "default_rng": [178, 181, 184, 190], "noisi": 178, "sin": [178, 245], "zorder": [178, 198, 242], "infti": [178, 179], "nand": 178, "capac": [179, 182, 185, 265, 266], "2d": [179, 226], "x_i": [179, 181, 182, 184, 185, 190, 204], "y_i": [179, 181, 182, 184, 185, 190], "monoton": 179, "decreas": 179, "limit": [179, 215, 220, 222, 231, 263], "At": 179, "occur": 179, "view": [179, 255, 265], "59": 179, "shannon": 179, "semilogi": [179, 214, 227, 228], "barker": [180, 251, 265, 266], "ani": [180, 187, 191, 205, 220, 222, 248, 251, 257], "int64": [180, 251], "bipolar": [180, 266], "float64": [180, 251], "sequenc": [180, 181, 184, 190, 250, 252, 265, 266], "format": 180, "seq": 180, "have": [180, 191, 208, 232, 247, 248], "ideal": [180, 263], "minim": 180, "autocorrel": [180, 250], "sidelob": [180, 238, 241, 250], "corr": [180, 250], "lag": [180, 250], "ab": [180, 250, 264], "roughli": [181, 184, 258], "eras": 181, "flip": 184, "h_b": 185, "cf": 186, "v_": [186, 187, 205, 212, 240], "en": [186, 209, 250], "wikipedia": [186, 209, 250], "org": [186, 209, 250], "wiki": [186, 209, 250], "type": [187, 197, 205, 208, 222, 227, 229, 247, 266], "voltag": [187, 205, 212, 240, 265], "x_": [187, 205], "mhz": [187, 205], "77": [187, 203, 205], "50e6": 187, "76": [187, 203], "98970004336019": 187, "mw": [187, 205], "dbm": [187, 205], "dbv": [187, 205], "020599913279624": 187, "uncod": 189, "dmc": [190, 252, 265, 266], "memoryless": [190, 252, 265], "pr": 190, "y_j": 190, "alphabet": 190, "ldot": 190, "doe": [191, 248], "anti": [191, 248, 266], "alias": [191, 248, 266], "400": [191, 258], "x1": 191, "200": [191, 258, 263], "x2": 191, "130": 191, "x3": [191, 250], "spectrum": [191, 217, 218, 220, 222, 223, 224, 229, 245, 246, 248], "content": 191, "abov": [191, 248], "nyquist": [191, 216, 248, 264], "fold": 191, "cw": 191, "unalias": 191, "fft": [191, 222, 229, 245, 246, 248], "2048": [191, 245, 246, 248, 261], "xlim": [191, 248, 261, 262, 264], "qam": [192, 193, 195, 243], "249387366082999": [192, 193], "020599913279625": [192, 244], "7506126339170005": [195, 243], "979400086720376": [195, 196], "system": [196, 207, 235, 244, 255, 257, 262, 265], "norm": [197, 200, 202, 238, 239, 241], "noiseless": 197, "sourc": 197, "max": [197, 211, 212], "instantan": 197, "percentil": [197, 220, 222, 229], "either": 197, "73190424950934": 197, "99667667967427": 197, "182": 197, "1339246070999": 197, "146": 197, "28856517506864": 197, "95th": 197, "68": [197, 203], "76412489410407": 197, "inst_evm": 197, "hist": 197, "histogram": 197, "frequency_offset": [198, 252, 266], "freq_rat": 198, "cycl": [198, 232], "5e": 198, "deg": [198, 204], "path": [199, 265], "loss": [199, 265], "meter": [199, 210, 249], "transmitt": 199, "far": 199, "field": 199, "neg": [199, 204], "impli": 199, "possibl": [199, 265], "so": [199, 200, 202, 238, 239, 241, 265], "km": 199, "link": [199, 265, 266], "ghz": [199, 210, 249], "1e3": [199, 206, 245], "1e9": [199, 210, 249], "92": 199, "44778322188337": 199, "doubl": [199, 210], "increas": [199, 210, 260], "2e3": 199, "98": 199, "468383135163": 199, "2e9": 199, "product": [200, 264], "side": [200, 217, 218, 220, 222, 223, 224, 229, 259, 260, 261, 264], "thought": [200, 267], "smaller": [200, 238, 241, 264], "wider": 200, "how": [200, 202, 216, 225, 226, 232, 238, 239, 241, 257], "gaussdesign": 200, "onlinelibrari": 200, "wilei": 200, "doi": 200, "1002": 200, "9780470041956": 200, "app2": 200, "h_0p1": [200, 238, 241], "h_0p2": 200, "h_0p3": 200, "reason": [202, 239, 254], "larger": [202, 204, 215, 231, 239], "h_half_sin": 202, "displai": [203, 215, 217, 218, 220, 222, 223, 224, 229, 231], "line": [203, 232, 255, 261], "quick": 203, "brown": 203, "fox": 203, "jump": 203, "lazi": 203, "dog": 203, "00000000": 203, "65": 203, "71": 203, "75": [203, 215, 262, 263], "69": 203, "63": 203, "6b": 203, "72": 203, "6f": 203, "6e": 203, "00000010": 203, "66": 203, "78": 203, "6a": 203, "6d": 203, "73": 203, "74": 203, "00000020": 203, "6c": 203, "61": 203, "7a": 203, "79": 203, "67": 203, "he": 203, "02": [203, 260, 262], "03": [203, 260], "04": [203, 260], "00000004": 203, "05": [203, 258, 260, 262], "06": 203, "07": 203, "08": 203, "00000008": 203, "09": 203, "0a": 203, "iq_imbal": [204, 252, 266], "iq": [204, 252, 265], "imbal": [204, 252, 265], "posit": 204, "compon": [204, 245, 246, 248], "g_i": 204, "180": 204, "g_q": 204, "x_q": 204, "horizont": 204, "stretch": 204, "while": [204, 264], "vertic": 204, "northwest": 204, "northeast": 204, "50118723": 205, "36272725": 205, "9952623149688795": 205, "satisfi": 206, "cdot": 206, "remov": [206, 222, 229, 266], "half_length": 207, "a_stop": 207, "80": [207, 250], "stopband": [207, 238, 241], "attenu": [207, 238, 241], "a_": 207, "stop": 207, "fred": [207, 235], "harri": [207, 235], "dsp": [207, 265], "designmultiratefir": 207, "dtypelik": [208, 247], "most": [208, 247], "signific": [208, 247], "enough": 208, "fill": 208, "smallest": 208, "unsign": 208, "integ": 208, "diamet": 210, "55": 210, "eta": 210, "dbi": 210, "arcsin": 210, "83": 210, "dish": 210, "21": 210, "810210290266568": 210, "437435887991374": 210, "23": 210, "sinc": [210, 216, 254, 263], "antenna": [210, 265], "we": [210, 265], "observ": [210, 216], "830810203546193": 210, "529544741425365": 210, "keyword": [214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 259, 260], "pyplot": [214, 215, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 232, 233, 234, 258, 259, 260, 261, 262, 263, 264], "heatmap": [215, 263], "scatter": 215, "overwritten": [215, 226, 229, 231], "rang": [215, 262, 263], "hist2d": 215, "10_000": 215, "color": [216, 225, 226, 232, 261, 264], "imaginari": [216, 226, 232], "interleav": [216, 226], "base": [216, 225, 226, 232], "examin": 216, "intersymbol": 216, "interfer": 216, "isi": 216, "two": [216, 217, 218, 220, 222, 223, 224, 229, 250, 258, 259, 260], "cascad": 216, "why": 216, "often": [216, 258], "practic": 216, "n_time": [217, 260], "n_freq": 217, "x_axi": [217, 218, 220, 222, 223, 224, 229, 259, 260, 261, 262], "log": [217, 218, 220, 222, 223, 224, 259, 260, 262], "definit": [217, 218, 219, 220, 223, 224, 230, 234], "n_t": 217, "n_f": 217, "scale": [217, 218, 220, 222, 223, 224, 229, 259, 260], "option": [217, 218, 220, 222, 223, 224, 229], "h_srrc": [217, 218, 219, 220, 223, 224, 230, 232, 234, 263], "ylim": [218, 250, 259, 262, 263, 264], "48": 218, "52": 218, "10th": [220, 222, 229], "crop": [220, 222], "deep": [220, 222], "x_label": 221, "hann": [222, 229], "overlap": [222, 229, 261], "detrend": [222, 229], "median": 222, "segment": [222, 229], "256": [222, 229, 261], "point": [222, 229], "trend": [222, 229], "unwrap": [224, 262], "stride": 226, "colorbar": 226, "1d": 226, "determin": 226, "row": 226, "collect": 226, "linecollect": 226, "linewidth": [226, 250], "solid": [226, 232], "cmap": 226, "rainbow": 226, "loglog": 227, "pcolormesh": 229, "vmin": 229, "vmax": 229, "100th": 229, "shade": 229, "gouraud": 229, "markers": 231, "diff": [232, 261], "about": [232, 257], "mutual": 232, "exclus": 232, "current": [232, 256], "dash": 232, "share": 232, "10e3": 232, "revert": 233, "rcdefault": 233, "_rc_param": 233, "rc_param": 233, "autolayout": 233, "max_open_warn": 233, "titleweight": 233, "bold": 233, "arrang": 235, "column": 235, "notion": 235, "demonstr": 235, "18": [235, 254, 263], "19": 235, "000005": 236, "5000": [236, 237], "000000025": 236, "005": [237, 262], "000025": 237, "excess": [238, 241, 264], "narrow": [238, 241], "expens": [238, 241], "higher": [238, 241, 264], "h_0p5": [238, 241], "h_0p9": [238, 241], "affect": [238, 241], "longer": [238, 241, 245], "h_4": [238, 241], "h_8": [238, 241], "h_16": [238, 241], "h_rect": [239, 264], "sample_rate_offset": [242, 252, 266], "append": [245, 261], "250": [245, 246], "300": [245, 246], "ksp": [245, 246], "notic": [245, 246, 258, 264], "conjug": [245, 246, 260], "500": [245, 246, 262], "now": [245, 246, 258, 266], "150": [245, 246], "asymmetr": 246, "copi": 248, "299792458": 249, "zadoff_chu": [250, 251, 266], "zadoff": [250, 251, 265, 266], "chu": [250, 251, 265, 266], "prime": 250, "gcd": 250, "ne": 250, "cyclic": 250, "x_u": 250, "c_": 250, "2q": 250, "mod": 250, "e2": 250, "93chu_sequ": 250, "x_3": 250, "139": 250, "tile": 250, "x_5": 250, "x5": 250, "cross": 250, "xcorr": 250, "sphinx": 254, "immateri": 254, "theme": 254, "depend": [254, 255, 257], "store": [254, 256, 257], "txt": [254, 255, 256, 257], "some": 254, "below": [254, 259, 260], "version": [254, 256, 265], "aren": 254, "resolut": 254, "minut": 254, "ci": 254, "myst": 254, "parser": 254, "updat": 254, "git": [254, 256], "math": 254, "dollar": 254, "ipykernel": 254, "26": 254, "nb": 254, "pickleshar": 254, "switch": 254, "pip": [254, 255, 256, 257, 265], "python3": [254, 255, 256, 257, 265], "built": 254, "run": 254, "command": [254, 255], "dirhtml": 254, "locat": [254, 257], "home": 254, "page": 254, "directori": [254, 256], "get": 254, "necessari": 254, "webpag": 254, "webserv": 254, "easili": [254, 255, 257, 259, 260], "python": [254, 265], "server": 254, "8080": 254, "access": 254, "web": 254, "browser": 254, "localhost": 254, "librari": [255, 256, 257, 258, 263, 265, 267], "ruff": [255, 256], "lint": [255, 256], "your": [255, 257], "develop": [255, 256, 257], "dev": [255, 257], "pyproject": [255, 257], "toml": [255, 256, 257], "tool": [255, 257, 265], "src": 255, "extend": 255, "includ": [255, 256, 257, 265], "ipynb": 255, "exclud": 255, "build": [255, 265], "doc": 255, "_version": 255, "py": [255, 257], "120": 255, "select": 255, "pycodestyl": 255, "pyflak": 255, "pyupgrad": 255, "flake8": 255, "bugbear": 255, "simplifi": 255, "isort": 255, "ignor": 255, "e501": 255, "e713": 255, "e714": 255, "__init__": 255, "f401": 255, "f403": 255, "manual": [255, 257], "check": 255, "hook": 255, "config": [255, 258, 259, 260, 261, 262, 263, 264], "yaml": 255, "repo": [255, 256], "github": [255, 265], "rev": 255, "v2": 255, "id": 255, "larg": 255, "fixer": 255, "trail": 255, "whitespac": 255, "astral": 255, "sh": 255, "v0": 255, "enabl": 255, "disabl": 255, "uninstal": 255, "extens": 255, "vscode": [255, 257], "json": [255, 257], "you": [255, 256, 257, 265], "edit": [255, 260], "latest": [256, 265], "releas": [256, 266], "main": [256, 264], "branch": 256, "mhostett": [256, 266], "Or": [256, 257], "pre": 256, "To": 256, "activ": 256, "benefici": 256, "fashion": 256, "allow": [256, 257], "chang": [256, 267], "immedi": 256, "seen": 256, "upon": 256, "next": 256, "clone": 256, "wherev": 256, "flag": 256, "packag": [256, 265], "commit": 256, "pytest": [256, 257], "cov": 256, "xdist": 256, "benchmark": 256, "ini_opt": 257, "minvers": 257, "addopt": 257, "showloc": 257, "testpath": 257, "execut": 257, "test_psk": 257, "instruct": 257, "invok": 257, "infrastructur": 257, "debug": 257, "inlinebackend": [258, 259, 260, 261, 262, 263, 264], "print_figure_kwarg": [258, 259, 260, 261, 262, 263, 264], "facecolor": [258, 259, 260, 261, 262, 263, 264], "widget": [258, 259, 260, 261, 262, 263, 264], "tx": 258, "decai": [258, 260], "fillstyl": 258, "show": [258, 259, 260, 261, 262, 263, 264], "accomplish": [258, 263], "def": [258, 261, 263], "resample_sign": 258, "new_sample_r": 258, "ty": 258, "gca": [258, 263], "set_prop_cycl": [258, 263], "four": 258, "appear": 258, "fourth": 258, "do": 258, "315": 258, "32": 258, "00095883": 259, "00175012": 259, "00423921": 259, "0058825": 259, "006151": 259, "00474595": 259, "0017044": 259, "00254816": 259, "00721645": 259, "0112324": 259, "01342358": 259, "01273202": 259, "00845058": 259, "0004368": 259, "01073669": 259, "02372977": 259, "03650247": 259, "04650654": 259, "05098525": 259, "04734644": 259, "03355896": 259, "00851486": 259, "02769991": 259, "07367348": 259, "12670447": 259, "1830132": 259, "23810898": 259, "28727058": 259, "3260799": 259, "3509384": 259, "35949665": 259, "conveni": [259, 260], "evalu": [259, 260], "here": [259, 260], "47820725": 260, "78207252e": 260, "58172329e": 260, "10862468e": 260, "86109590e": 260, "21565653e": 260, "01140214e": 260, "57286400e": 260, "67772160e": 260, "47338728e": 260, "10422993e": 260, "89312837e": 260, "12240078e": 260, "03953322e": 260, "69685122e": 260, "63882791e": 260, "81474977e": 260, "47193366e": 260, "85259041e": 260, "15647504e": 260, "23851924e": 260, "42176895e": 260, "84684395e": 260, "42721858e": 260, "72236648e": 260, "14721649e": 260, "10813095e": 260, "94024315e": 260, "78877688e": 260, "74077567e": 260, "87820725": 260, "53637958": 260, "94724205": 260, "13335164": 260, "1455082": 260, "04436799": 260, "88708159": 260, "71930943": 260, "5719707": 260, "46154771": 260, "39261642": 260, "36139242": 260, "35935288": 260, "3763214": 260, "40270968": 260, "43085717": 260, "45557651": 260, "47410241": 260, "48566716": 260, "49090568": 260, "49124786": 260, "48840102": 260, "4839738": 260, "47925143": 260, "47510421": 260, "47199608": 260, "47005584": 260, "46917696": 260, "46911955": 260, "denomin": 260, "73910363": 260, "30614675j": 260, "plane": 260, "endpoint": 260, "092337035029908": 260, "71104892744724": 260, "684365018955985": 260, "37868538208862": 260, "1263714068241546": 260, "9993519409971622": 260, "1909320767063554": 260, "016796159999999997": 260, "46380627201679264": 260, "3806359704987118j": 260, "4988817673846036": 260, "333342139809402j": 260, "5543277195082319": 260, "22961005941718524j": 260, "5291527586053246": 260, "2828380420991956j": 260, "lyon": 260, "understand": 260, "3rd": 260, "insid": 260, "outsid": 260, "unstabl": 260, "n_symbol": 261, "els": 261, "pb": 261, "x_bb_rect": 261, "papr_bb_rect": 261, "x_pb_rect": 261, "papr_pb_rect": 261, "x_bb_0p1": 261, "papr_bb_0p1": 261, "x_pb_0p1": 261, "papr_pb_0p1": 261, "x_bb_0p5": 261, "papr_bb_0p5": 261, "x_pb_0p5": 261, "papr_pb_0p5": 261, "x_bb_0p9": 261, "papr_bb_0p9": 261, "x_pb_0p9": 261, "papr_pb_0p9": 261, "2f": 261, "rf": [261, 262], "512": 261, "sweep_alpha": 261, "bb_papr": 261, "pb_papr": 261, "bpsk_bb_papr": 261, "bpsk_pb_papr": 261, "qpsk_bb_papr": 261, "qpsk_pb_papr": 261, "psk8_bb_papr": 261, "psk8_pb_papr": 261, "psk16_bb_papr": 261, "psk16_pb_papr": 261, "configur": 262, "loop_filt": 262, "0x000002276d2bcc08": 262, "theta_0": 262, "phase_error": 262, "freq_estim": 262, "suptitl": [262, 263], "direct": [262, 266], "synthes": [262, 266], "dd": [262, 266], "avail": [262, 263, 265], "001": 262, "b_nt": 262, "0005": 262, "0125": 262, "015": 262, "0175": 262, "t_lock": 262, "analyze_psk": 263, "100_000": 263, "n0": 263, "tx_mf": 263, "1e6": 263, "bpsk_ber": 263, "bpsk_ser": 263, "qpsk_ber": 263, "qpsk_ser": 263, "psk8_ber": 263, "psk8_ser": 263, "psk16_ber": 263, "psk16_ser": 263, "simul": [263, 265], "1e0": 263, "psk8_bin": 263, "psk8_grai": 263, "wors": 263, "rc_0p1": 264, "rc_0p5": 264, "rc_0p9": 264, "pm": 264, "nearli": 264, "small": 264, "lobe": 264, "much": 264, "freqz": 264, "worn": 264, "whole": 264, "h_rc_0p1": 264, "h_rc_0p5": 264, "h_rc_0p9": 264, "p_rect": 264, "cumsum": 264, "p_rc_0p1": 264, "p_rc_0p5": 264, "p_rc_0p9": 264, "within": 264, "srrc_0p1": 264, "srrc_0p5": 264, "srrc_0p9": 264, "therefor": 264, "significantli": 264, "due": 264, "being": 264, "h_srrc_0p1": 264, "h_srrc_0p5": 264, "h_srrc_0p9": 264, "p_srrc_0p1": 264, "p_srrc_0p5": 264, "p_srrc_0p9": 264, "gauss_0p1": 264, "gauss_0p2": 264, "gauss_0p3": 264, "softwar": 265, "radio": 265, "goal": 265, "analyz": 265, "reli": 265, "interoper": 265, "veri": 265, "numba": 265, "acceler": 265, "computation": 265, "intens": 265, "addition": 265, "aim": 265, "replic": 265, "relev": 265, "toolbox": 265, "progress": 265, "someth": 265, "pleas": 265, "open": 265, "issu": 265, "pypi": 265, "api": [265, 267], "convers": [265, 266], "synchron": 265, "budget": [265, 266], "manipul": 265, "septemb": 266, "2023": 266, "sensibl": 266, "matt": 266, "hostett": 266, "august": 266, "27": 266, "without": 266, "abil": 266, "improv": 266, "renam": 266, "superflu": 266, "replac": 266, "translat": 266, "fix": [266, 267], "juli": 266, "firinterpol": 266, "model": 266, "impair": 266, "fpsl": 266, "helper": 266, "semant": 267, "major": 267, "minor": 267, "patch": 267, "introduc": 267, "featur": 267, "backward": 267, "compat": 267, "make": 267, "bug": 267, "There": 267, "guarante": 267, "them": 267, "thei": 267}, "objects": {"": [[3, 0, 0, 1, "sdr", ""]], "sdr": [[9, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [26, 1, 1, "", "Decimator", "Implements a polyphase decimating finite impulse response (FIR) filter."], [37, 1, 1, "", "Differentiator", "Implements a differentiator FIR filter."], [39, 1, 1, "", "EnergyDetector", "Implements an energy detector."], [44, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [51, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [68, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [75, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [94, 1, 1, "", "Interpolator", "Implements a polyphase interpolating finite impulse response (FIR) filter."], [105, 1, 1, "", "LinearModulation", "Implements linear phase/amplitude modulation with arbitrary symbol mapping."], [123, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [132, 1, 1, "", "MSK", "Implements minimum-shift keying (MSK) modulation and demodulation."], [134, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [142, 1, 1, "", "OQPSK", "Implements offset quadrature phase-shift keying (OQPSK) modulation and demodulation."], [146, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [154, 1, 1, "", "PiMPSK", "Implements $pi/M$ phase-shift keying ($pi/M$ PSK) modulation and demodulation."], [156, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [157, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [158, 1, 1, "", "ReplicaCorrelator", "Implements an clairvoyant replica-correlator detector."], [163, 1, 1, "", "Resampler", "Implements a polyphase rational resampling finite impulse response (FIR) filter."], [176, 5, 1, "", "albersheim", "Estimates the minimum required single-sample SNR, given $N_{NC}$ non-coherent combinations, to achieve a probability of detection $P_D$ and probability of false alarm $P_{FA}$. This function implements Albersheim's equation."], [177, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [178, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [179, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [180, 5, 1, "", "barker", "Returns the Barker code/sequence of length $N$."], [181, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [182, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [183, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [184, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [185, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [186, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [187, 5, 1, "", "db", "Converts from linear units to decibels."], [188, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [189, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [190, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [191, 5, 1, "", "downsample", "Downsamples the time-domain signal $x[n]$ by the factor $r$."], [192, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [193, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [194, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [195, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [196, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [197, 5, 1, "", "evm", "Calculates the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [198, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [199, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [200, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [201, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [202, 5, 1, "", "half_sine", "Returns a half-sine pulse shape."], [203, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [204, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [205, 5, 1, "", "linear", "Converts from decibels to linear units."], [206, 5, 1, "", "mix", "Mixes the time-domain signal $x[n]$ with a complex exponential or real sinusoid."], [207, 5, 1, "", "multirate_taps", "Computes the multirate FIR filter that achieves rational resampling by $P/Q$."], [208, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [209, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [210, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [211, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [212, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [213, 5, 1, "", "percent", "Converts from a ratio to a percentage."], [235, 5, 1, "", "polyphase_matrix", "Converts the multirate FIR filter taps $h_i$ into the polyphase matrix $H_{i, j}$ that achieves rational resampling by $P/Q$."], [236, 5, 1, "", "ppb", "Converts from a ratio to parts per billion (ppb)."], [237, 5, 1, "", "ppm", "Converts from a ratio to parts per million (ppm)."], [238, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [239, 5, 1, "", "rectangular", "Returns a rectangular pulse shape."], [240, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [241, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [242, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [243, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [244, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [245, 5, 1, "", "to_complex_bb", "Converts the real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$ to a complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c} = f_{s,r}/2$."], [246, 5, 1, "", "to_real_pb", "Converts the complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$ to a real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r} = 2f_{s,c}$."], [247, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [248, 5, 1, "", "upsample", "Upsamples the time-domain signal $x[n]$ by the factor $r$."], [249, 5, 1, "", "wavelength", "Calculates the wavelength $lambda$ of an electromagnetic wave with frequency $f$."], [250, 5, 1, "", "zadoff_chu", "Returns the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.ClosedLoopPLL": [[10, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [11, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [12, 2, 1, "", "K0", "The NCO gain $K_0$."], [13, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [14, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [15, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [16, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [17, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [18, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [19, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [20, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [21, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [22, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [23, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [24, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [25, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[16, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [16, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [16, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [16, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [16, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[17, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[19, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[22, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.Decimator": [[27, 3, 1, "", "__call__", "Filters and decimates the input signal $x[n]$ with the polyphase FIR filter."], [28, 3, 1, "", "__init__", "Creates a polyphase FIR decimating filter."], [29, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [30, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [31, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [32, 2, 1, "", "method", "The method used to design the multirate filter."], [33, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [34, 2, 1, "", "rate", "The decimation rate $r$."], [35, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [36, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Decimator.__call__": [[27, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [27, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Decimator.__init__": [[28, 4, 2, "p-rate", "rate", "The decimation rate $r$."], [28, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [28, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.Differentiator": [[38, 3, 1, "", "__init__", "Creates a differentiator FIR filter with order $N$."]], "sdr.Differentiator.__init__": [[38, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.EnergyDetector": [[40, 3, 1, "", "p_d", "Computes the probability of detection $P_D$."], [41, 3, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [42, 3, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [43, 3, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.EnergyDetector.p_d": [[40, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [40, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [40, 4, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.p_fa": [[41, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [41, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [41, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [41, 4, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.EnergyDetector.roc": [[42, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [42, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [42, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."], [42, 4, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.threshold": [[43, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [43, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [43, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [43, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.ErrorRate": [[45, 3, 1, "", "__init__", "Creates a new error rate tabulation object."], [46, 3, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [47, 3, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [48, 3, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [49, 3, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [50, 3, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[46, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [46, 4, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [46, 4, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[47, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[48, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[50, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[52, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the FIR filter."], [53, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [54, 3, 1, "", "__len__", "Returns the filter length $N + 1$."], [55, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [56, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [57, 2, 1, "", "delay", "The delay of the FIR filter $d = lfloor frac{N + 1}{2} rfloor$ in samples."], [58, 3, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [59, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the FIR filter."], [60, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(omega)$ of the FIR filter on a logarithmic frequency axis."], [61, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [62, 2, 1, "", "order", "The order of the FIR filter $N$."], [63, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [64, 2, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [65, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [66, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [67, 2, 1, "", "taps", "The feedforward taps $h_i$ for $i = 0,...,N$."]], "sdr.FIR.__call__": [[52, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [52, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.FIR.__init__": [[53, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$ for $i = 0,...N$."], [53, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FIR.frequency_response": [[59, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [59, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.frequency_response_log": [[60, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [60, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [60, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[61, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.step_response": [[65, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FarrowResampler": [[69, 3, 1, "", "__call__", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [70, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [71, 2, 1, "", "order", "The order of the filter."], [72, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [73, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [74, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__call__": [[69, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [69, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.__init__": [[70, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FarrowResampler.reset": [[72, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[76, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [77, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the IIR filter."], [78, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [79, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [80, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [81, 2, 1, "", "a_taps", "The feedback taps $a_j$ for $j = 0,...,N$."], [82, 2, 1, "", "b_taps", "The feedforward taps $b_i$ for $i = 0,...,M$."], [83, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the IIR filter."], [84, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(omega)$ of the IIR filter on a logarithmic frequency axis."], [85, 2, 1, "", "gain", "The gain of the IIR filter."], [86, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [87, 2, 1, "", "order", "The order of the IIR filter $N$."], [88, 2, 1, "", "poles", "The poles of the IIR filter."], [89, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [90, 2, 1, "", "state", "The filter state."], [91, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [92, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [93, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[76, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [76, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [76, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."], [76, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__call__": [[77, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.IIR.__init__": [[78, 4, 2, "p-a", "a", "The feedback coefficients $a_j$ for $j = 0,...,N$."], [78, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$ for $i = 0,...,M$."], [78, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.IIR.frequency_response": [[83, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [83, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[84, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [84, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [84, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[86, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[91, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.Interpolator": [[95, 3, 1, "", "__call__", "Interpolates and filters the input signal $x[n]$ with the polyphase FIR filter."], [96, 3, 1, "", "__init__", "Creates a polyphase FIR interpolating filter."], [97, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [98, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [99, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [100, 2, 1, "", "method", "The method used to design the multirate filter."], [101, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [102, 2, 1, "", "rate", "The interpolation rate $r$."], [103, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [104, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Interpolator.__call__": [[95, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [95, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Interpolator.__init__": [[96, 4, 2, "p-rate", "rate", "The interpolation rate $r$."], [96, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [96, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.LinearModulation": [[106, 3, 1, "", "__init__", "Creates a new linear phase/amplitude modulation object."], [107, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [108, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [109, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [110, 2, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [111, 3, 1, "", "decide_symbols", "Converts the received complex symbols $hat{a}[k]$ into decimal symbol decisions $hat{s}[k]$ using maximum-likelihood estimation (MLE)."], [112, 3, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples $hat{x}[n]$ into decimal symbol decisions $hat{s}[k]$ using matched filtering and maximum-likelihood estimation."], [113, 3, 1, "", "map_symbols", "Converts the decimal symbols $s[k]$ to complex symbols $a[k]$."], [114, 3, 1, "", "modulate", "Modulates the decimal symbols $s[k]$ into pulse-shaped complex samples $x[n]$."], [115, 2, 1, "", "order", "The modulation order $M = 2^k$."], [116, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [117, 2, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [118, 2, 1, "", "rx_filter", "The receive decimating matched filter. The filter coefficients are matched to the pulse shape $h[-n]^*$."], [119, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [120, 2, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [121, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."], [122, 2, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter. The filter coefficients are the pulse shape $h[n]$."]], "sdr.LinearModulation.__init__": [[106, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [106, 4, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees to apply to symbol_map."], [106, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [106, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [106, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [106, 4, 2, "p-symbol_map", "symbol_map", "The symbol mapping ${0, dots, M-1} mapsto mathbb{C}$. An $M$-length array whose indices are decimal symbols $s[k]$ and whose values are complex symbols $a[k]$, where $M$ is the modulation order."]], "sdr.LinearModulation.ber": [[109, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.LinearModulation.decide_symbols": [[111, 4, 2, "p-a_hat", "a_hat", "The received complex symbols $hat{a}[k]$."]], "sdr.LinearModulation.demodulate": [[112, 4, 2, "p-x_hat", "x_hat", "The received pulse-shaped complex samples $hat{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.LinearModulation.map_symbols": [[113, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to map, $0$ to $M-1$."]], "sdr.LinearModulation.modulate": [[114, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.LinearModulation.ser": [[119, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.LoopFilter": [[124, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [125, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [126, 3, 1, "", "__call__", "Filters the input signal $x[n]$."], [127, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [128, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [129, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [130, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [131, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__call__": [[126, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.LoopFilter.__init__": [[127, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [127, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [127, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [127, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.MSK": [[133, 3, 1, "", "__init__", "Creates a new MSK object."]], "sdr.MSK.__init__": [[133, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [133, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [133, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.NCO": [[135, 2, 1, "", "K0", "(Settable) The NCO gain $K_0$."], [136, 3, 1, "", "__call__", "Steps the NCO with variable frequency and/or phase signals."], [137, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [138, 2, 1, "", "increment", "(Settable) The constant phase accumulation $omega$ of the NCO in radians/sample."], [139, 2, 1, "", "offset", "(Settable) The absolute phase offset $theta$ of the NCO in radians."], [140, 3, 1, "", "reset", "Resets the NCO."], [141, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__call__": [[136, 4, 2, "p-freq", "freq", "The variable frequency signal $f[n]$ in radians/sample. This input signal varies the per-sample phase increment of the NCO. If None, the signal is all zeros."], [136, 4, 2, "p-phase", "phase", "The variable phase signal $p[n]$ in radians. This input signal varies the per-sample phase offset of the NCO. If None, the signal is all zeros."]], "sdr.NCO.__init__": [[137, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [137, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [137, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.NCO.step": [[141, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.OQPSK": [[143, 3, 1, "", "__init__", "Creates a new OQPSK object."], [144, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [145, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."]], "sdr.OQPSK.__init__": [[143, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [143, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [143, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [143, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [143, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [143, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK": [[147, 3, 1, "", "__init__", "Creates a new PSK object."], [148, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [149, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [150, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [151, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [152, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [153, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[147, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [147, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [147, 4, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [147, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [147, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [147, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [147, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[150, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [150, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.ser": [[152, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [152, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.PiMPSK": [[155, 3, 1, "", "__init__", "Creates a new $pi/M$ PSK object."]], "sdr.PiMPSK.__init__": [[155, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [155, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [155, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [155, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [155, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [155, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [155, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.Q": [[156, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[157, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.ReplicaCorrelator": [[159, 3, 1, "", "p_d", "Computes the probability of detection $P_D$."], [160, 3, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [161, 3, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [162, 3, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.ReplicaCorrelator.p_d": [[159, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [159, 4, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [159, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."]], "sdr.ReplicaCorrelator.p_fa": [[160, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [160, 4, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [160, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [160, 4, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.ReplicaCorrelator.roc": [[161, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [161, 4, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [161, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."]], "sdr.ReplicaCorrelator.threshold": [[162, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [162, 4, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [162, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [162, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.Resampler": [[164, 3, 1, "", "__call__", "Resamples and filters the input signal $x[n]$ with the polyphase FIR filter."], [165, 3, 1, "", "__init__", "Creates a polyphase FIR rational resampling filter."], [166, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [167, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [168, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [169, 2, 1, "", "down", "The decimation rate $Q$."], [170, 2, 1, "", "method", "The method used to design the multirate filter."], [171, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [172, 2, 1, "", "rate", "The resampling rate $P/Q$."], [173, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [174, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."], [175, 2, 1, "", "up", "The interpolation rate $P$."]], "sdr.Resampler.__init__": [[165, 4, 2, "p-down", "down", "The decimation rate $Q$."], [165, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [165, 4, 2, "p-taps", "taps", "The multirate filter design specification."], [165, 4, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.albersheim": [[176, 4, 2, "p-N_nc", "N_nc", "The number of non-coherent combinations $N_{NC} ge 1$."], [176, 4, 2, "p-p_d", "p_d", "The desired probability of detection $P_D$ in $(0, 1)$."], [176, 4, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{FA}$ in $(0, 1)$."]], "sdr.average_power": [[177, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the average power. The default is None, which computes the average power of the entire array."], [177, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [177, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[178, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [178, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [178, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [178, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[179, 4, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [179, 4, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.barker": [[180, 4, 2, "p-length", "length", "The length $N$ of the Barker code/sequence."], [180, 4, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[181, 4, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [181, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [181, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[182, 4, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[183, 4, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[184, 4, 2, "p-p", "p", "The probability $p$ of a bit flip."], [184, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [184, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[185, 4, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[186, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.db": [[187, 4, 2, "p-type", "type", "The type of input value or signal."], [187, 4, 2, "p-x", "x", "The input value or signal."]], "sdr.diff_decode": [[188, 4, 2, "p-y", "y", "The input encoded data $y[k]$."], [188, 4, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[189, 4, 2, "p-x", "x", "The input uncoded data $x[k]$."], [189, 4, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[190, 4, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [190, 4, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [190, 4, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [190, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [190, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.downsample": [[191, 4, 2, "p-rate", "rate", "The downsampling factor $r$."], [191, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.ebn0_to_esn0": [[192, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [192, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [192, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[193, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [193, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [193, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [193, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[194, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the energy. The default is None, which computes the energy of the entire array."], [194, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [194, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[195, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [195, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [195, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[196, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [196, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.evm": [[197, 4, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [197, 4, 2, "p-output", "output", "The output type of the EVM calculation."], [197, 4, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [197, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.frequency_offset": [[198, 4, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [198, 4, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [198, 4, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [198, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [198, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[199, 4, 2, "p-distance", "distance", "The distance $d$ in meters between the transmitter and receiver."], [199, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[200, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [200, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [200, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [200, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[201, 4, 2, "p-n", "n", "The length of the Gray code."]], "sdr.half_sine": [[202, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [202, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [202, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.hexdump": [[203, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [203, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[204, 4, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [204, 4, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [204, 4, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.linear": [[205, 4, 2, "p-type", "type", "The type of output value or signal."], [205, 4, 2, "p-x", "x", "The input value or signal in dB."]], "sdr.mix": [[206, 4, 2, "p-complex", "complex", "Indicates whether to mix by a complex exponential or real sinusoid."], [206, 4, 2, "p-freq", "freq", "The frequency $f$ of the sinusoid in Hz (or 1/samples if sample_rate=1). The frequency must satisfy $-f_s/2 le f le f_s/2$."], [206, 4, 2, "p-phase", "phase", "The phase $phi$ of the sinusoid in degrees."], [206, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal."], [206, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.multirate_taps": [[207, 4, 2, "p-A_stop", "A_stop", "The stopband attenuation $A_{text{stop}}$ in dB."], [207, 4, 2, "p-down", "down", "The decimation rate $Q$."], [207, 4, 2, "p-half_length", "half_length", "The half-length of the polyphase filters."], [207, 4, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.pack": [[208, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [208, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [208, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[209, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the PAPR. The default is None, which computes the PAPR of the entire array."], [209, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[210, 4, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [210, 4, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [210, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[211, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the peak power. The default is None, which computes the peak power of the entire array."], [211, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [211, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[212, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [212, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.percent": [[213, 4, 2, "p-x", "x", "The input ratio."]], "sdr.plot": [[214, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [215, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [216, 5, 1, "", "eye", "Plots the eye diagram of the baseband modulated signal $x[n]$."], [217, 5, 1, "", "filter", "Plots the magnitude response $|H(omega)|^2$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [218, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [219, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [220, 5, 1, "", "magnitude_response", "Plots the magnitude response $|H(omega)|^2$ of the filter."], [221, 5, 1, "", "p_d", "Plots the probability of detection $P_D$ as a function of received SNR or ENR."], [222, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [223, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [224, 5, 1, "", "phase_response", "Plots the phase response $angle H(omega)$ of the filter."], [225, 5, 1, "", "phase_tree", "Plots the phase tree of a continuous-phase modulated (CPM) signal signal $x[n]$."], [226, 5, 1, "", "raster", "Plots a raster of the time-domain signal $x[n]$."], [227, 5, 1, "", "roc", "Plots the receiver operating characteristic (ROC) curve as a function of $P_{FA}$."], [228, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [229, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [230, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [231, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [232, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [233, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [234, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[214, 4, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [214, 4, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."], [214, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."]], "sdr.plot.constellation": [[215, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [215, 4, 2, "p-kwargs", "kwargs", "If heatmap=False, additional keyword arguments to pass to matplotlib.pyplot.scatter(). The following keyword arguments are set by default. The defaults may be overwritten."], [215, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [215, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.eye": [[216, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [216, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [216, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [216, 4, 2, "p-span", "span", "The number of symbols per raster."], [216, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [216, 4, 2, "p-x", "x", "The baseband modulated signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved."]], "sdr.plot.filter": [[217, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [217, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [217, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [217, 4, 2, "p-filter", "filter", "The filter definition."], [217, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [217, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[218, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [218, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [218, 4, 2, "p-filter", "filter", "The filter definition."], [218, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [218, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [218, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.impulse_response": [[219, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [219, 4, 2, "p-filter", "filter", "The filter definition."], [219, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.magnitude_response": [[220, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [220, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [220, 4, 2, "p-filter", "filter", "The filter definition."], [220, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [220, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [220, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.p_d": [[221, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [221, 4, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [221, 4, 2, "p-x", "x", "The SNR or ENR in dB."], [221, 4, 2, "p-x_label", "x_label", "The x-axis label to use."]], "sdr.plot.periodogram": [[222, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [222, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [222, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [222, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [222, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [222, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [222, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [222, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [222, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [222, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_delay": [[223, 4, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [223, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [223, 4, 2, "p-filter", "filter", "The filter definition."], [223, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [223, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [223, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_response": [[224, 4, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [224, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [224, 4, 2, "p-filter", "filter", "The filter definition."], [224, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [224, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [224, 4, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [224, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_tree": [[225, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [225, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [225, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [225, 4, 2, "p-span", "span", "The number of symbols per raster."], [225, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [225, 4, 2, "p-x", "x", "The baseband CPM signal $x[n]$."]], "sdr.plot.raster": [[226, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [226, 4, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\"."], [226, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.collections.LineCollection. The following keyword arguments are set by default. The defaults may be overwritten."], [226, 4, 2, "p-length", "length", "The length of each raster in samples. This must be provided if x is 1D."], [226, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [226, 4, 2, "p-stride", "stride", "The stride between each raster in samples. If None, the stride is set to length."], [226, 4, 2, "p-x", "x", "The time-domain signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved. If x is 1D, the rastering is determined by length and stride. If x is 2D, the rows correspond to each raster."]], "sdr.plot.roc": [[227, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to the plotting function defined by type."], [227, 4, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [227, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [227, 4, 2, "p-type", "type", "The type of plot to generate."]], "sdr.plot.ser": [[228, 4, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [228, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."], [228, 4, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.spectrogram": [[229, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [229, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [229, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.pcolormesh(). The following keyword arguments are set by default. The defaults may be overwritten."], [229, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [229, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [229, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [229, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [229, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [229, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[230, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [230, 4, 2, "p-filter", "filter", "The filter definition."], [230, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.symbol_map": [[231, 4, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [231, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot(). The following keyword arguments are set by default. The defaults may be overwritten."], [231, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [231, 4, 2, "p-modulation", "modulation", "The linear modulation or symbol map ${0, dots, M-1} mapsto mathbb{C}$."]], "sdr.plot.time_domain": [[232, 4, 2, "p-centered", "centered", "Indicates whether to center the x-axis about 0. This argument is mutually exclusive with offset."], [232, 4, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal. If \"color\", the real and imaginary parts will have different colors based on the current Matplotlib color cycle. If \"line\", the real part will have a solid line and the imaginary part will have a dashed line, and both lines will share the same color."], [232, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [232, 4, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. The units of the offset are $1/f_s$. This argument is mutually exclusive with centered."], [232, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [232, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[234, 4, 2, "p-filter", "filter", "The filter definition."], [234, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.polyphase_matrix": [[235, 4, 2, "p-down", "down", "The decimation rate $Q$."], [235, 4, 2, "p-taps", "taps", "The multirate FIR filter taps $h_i$."], [235, 4, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.ppb": [[236, 4, 2, "p-x", "x", "The input ratio."]], "sdr.ppm": [[237, 4, 2, "p-x", "x", "The input ratio."]], "sdr.raised_cosine": [[238, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [238, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [238, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [238, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rectangular": [[239, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [239, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [239, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[240, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [240, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[241, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [241, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [241, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [241, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[242, 4, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [242, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.snr_to_ebn0": [[243, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [243, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [243, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [243, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[244, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [244, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.to_complex_bb": [[245, 4, 2, "p-x_r", "x_r", "The real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$. If the length is odd, one zero is appended to the end."]], "sdr.to_real_pb": [[246, 4, 2, "p-x_c", "x_c", "The complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$."]], "sdr.unpack": [[247, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [247, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [247, 4, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.upsample": [[248, 4, 2, "p-rate", "rate", "The upsampling factor $r$."], [248, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.wavelength": [[249, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.zadoff_chu": [[250, 4, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [250, 4, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence. The root must be relatively prime to the length, i.e., $gcd(u, N) = 1$."], [250, 4, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence. When $q ne 0$, the returned sequence is a cyclic shift of the root-$u$ Zadoff-Chu sequence."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"convers": 0, "decibel": 0, "ratio": 0, "from": [0, 255, 256, 257], "e_b": 0, "n_0": 0, "e_": 0, "": [0, 259, 260], "n": [0, 258, 259, 260], "data": 1, "manipul": [1, 3], "detect": [2, 7], "detector": 2, "theoret": 2, "limit": 2, "digit": [3, 260], "signal": [3, 252, 258, 261], "process": 3, "filter": [3, 7, 259, 260, 262], "multir": 3, "arbitrari": [3, 258], "resampl": [3, 258], "applic": 3, "correl": 3, "link": 4, "budget": 4, "channel": [4, 252], "capac": 4, "path": 4, "loss": 4, "antenna": 4, "measur": 5, "energi": 5, "power": [5, 261], "voltag": 5, "modul": [5, 6, 7], "linear": 6, "continu": 6, "phase": [6, 262, 263], "orthogon": 6, "puls": [6, 261, 264], "shape": [6, 261, 264], "symbol": [6, 263], "map": [6, 263], "encod": 6, "plot": [7, 261], "configur": [7, 255, 257], "time": [7, 261, 262], "domain": [7, 261, 262], "frequenc": [7, 259, 260, 261, 262], "spectral": 7, "estim": 7, "analysi": 7, "probabl": 8, "note": [9, 199, 207, 220, 222, 229], "constructor": [9, 26, 37, 44, 51, 68, 75, 94, 105, 123, 132, 134, 142, 146, 154, 163], "method": [9, 26, 37, 39, 44, 51, 68, 75, 94, 105, 123, 132, 134, 142, 146, 154, 158, 163], "properti": [9, 26, 37, 51, 68, 75, 94, 105, 123, 132, 134, 142, 146, 154, 163], "special": [26, 37, 51, 68, 75, 94, 123, 134, 163], "string": [26, 37, 51, 75, 94, 105, 132, 142, 146, 154, 163], "represent": [26, 37, 51, 75, 94, 105, 132, 142, 146, 154, 163], "stream": [26, 37, 51, 75, 94, 163], "mode": [26, 37, 51, 75, 94, 163], "onli": [26, 37, 51, 75, 94, 163], "see": [44, 46, 59, 60, 61, 65, 83, 84, 86, 91, 106, 109, 119, 133, 143, 147, 150, 152, 155, 156, 157, 186, 209, 248], "also": [44, 46, 59, 60, 61, 65, 83, 84, 86, 91, 106, 109, 119, 133, 143, 147, 150, 152, 155, 156, 157, 186, 209, 248], "warn": [191, 248], "sequenc": 251, "simul": 252, "model": 252, "impair": 252, "synchron": 253, "document": 254, "instal": [254, 255, 256, 257, 265], "build": 254, "doc": 254, "serv": 254, "format": 255, "run": [255, 257], "linter": 255, "formatt": 255, "pre": 255, "commit": 255, "v": [255, 257], "code": [255, 257], "pypi": 256, "github": 256, "edit": 256, "local": 256, "folder": 256, "dev": 256, "depend": 256, "unit": 257, "test": 257, "command": 257, "line": 257, "farrow": 258, "construct": 258, "an": [258, 259, 260], "input": 258, "x": 258, "t_": 258, "rate": [258, 263], "r": 258, "y": 258, "frac": 258, "upsampl": 258, "integ": 258, "downsampl": 258, "irrat": 258, "fir": 259, "creat": [259, 260], "examin": [259, 260, 261], "impuls": [259, 260], "respons": [259, 260, 262], "h": [259, 260], "step": [259, 260, 262], "omega": [259, 260], "group": [259, 260], "delai": [259, 260], "tau_g": [259, 260], "fulli": [259, 260], "analyz": [259, 260, 262], "iir": 260, "zero": 260, "pole": 260, "stabil": 260, "peak": 261, "averag": 261, "qpsk": [261, 263], "variou": 261, "across": [261, 262], "excess": 261, "bandwidth": 261, "lock": 262, "loop": 262, "design": 262, "proport": 262, "plu": 262, "integr": 262, "ppi": 262, "implement": 262, "pll": 262, "close": 262, "perform": 262, "compar": 262, "zeta": 262, "b_n": 262, "t": 262, "shift": 263, "kei": 263, "constel": 263, "bpsk": 263, "8": [263, 266], "psk": 263, "16": 263, "error": 263, "curv": 263, "bit": 263, "rais": 264, "cosin": 264, "squar": 264, "root": 264, "gaussian": 264, "sdr": 265, "featur": 265, "v0": 266, "0": 266, "chang": 266, "contributor": 266, "7": 266, "6": 266, "5": 266, "4": 266, "3": 266, "2": 266, "1": 266, "version": 267, "alpha": 267, "releas": 267, "beta": 267}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Conversions": [[0, "conversions"]], "Decibels": [[0, "decibels"]], "Ratios": [[0, "ratios"]], "From E_b/N_0": [[0, "from-e-b-n-0"]], "From E_s/N_0": [[0, "from-e-s-n-0"]], "From S/N": [[0, "from-s-n"]], "Data manipulation": [[1, "data-manipulation"]], "Detection": [[2, "detection"], [7, "detection"]], "Detectors": [[2, "detectors"]], "Theoretical limits": [[2, "theoretical-limits"]], "Digital signal processing": [[3, "digital-signal-processing"]], "Filtering": [[3, "filtering"]], "Multirate filtering": [[3, "multirate-filtering"]], "Arbitrary resampling": [[3, "arbitrary-resampling"]], "Filtering applications": [[3, "filtering-applications"]], "Correlation": [[3, "correlation"]], "Signal manipulation": [[3, "signal-manipulation"]], "Link budgets": [[4, "link-budgets"]], "Channel capacity": [[4, "channel-capacity"]], "Path losses": [[4, "path-losses"]], "Antennas": [[4, "antennas"]], "Measurement": [[5, "measurement"]], "Energy": [[5, "energy"]], "Power": [[5, "power"]], "Voltage": [[5, "voltage"]], "Modulation": [[5, "modulation"], [6, "modulation"], [7, "modulation"]], "Linear modulations": [[6, "linear-modulations"]], "Continuous-phase modulations": [[6, "continuous-phase-modulations"]], "Orthogonal modulations": [[6, "orthogonal-modulations"]], "Pulse shaping": [[6, "pulse-shaping"]], "Symbol mapping": [[6, "symbol-mapping"], [263, "symbol-mapping"]], "Symbol encoding": [[6, "symbol-encoding"]], "Plotting": [[7, "plotting"]], "Configuration": [[7, "configuration"], [255, "configuration"], [257, "configuration"]], "Time-domain": [[7, "time-domain"]], "Frequency-domain": [[7, "frequency-domain"]], "Spectral estimation": [[7, "spectral-estimation"]], "Filter analysis": [[7, "filter-analysis"]], "Probability": [[8, "probability"]], "Note": [[9, null], [199, null], [207, null], [220, null], [222, null], [222, null], [229, null]], "Constructors": [[9, "constructors"], [26, "constructors"], [37, "constructors"], [44, "constructors"], [51, "constructors"], [68, "constructors"], [75, "constructors"], [94, "constructors"], [105, "constructors"], [123, "constructors"], [132, "constructors"], [134, "constructors"], [142, "constructors"], [146, "constructors"], [154, "constructors"], [163, "constructors"]], "Methods": [[9, "methods"], [26, "methods"], [37, "methods"], [39, "methods"], [44, "methods"], [51, "methods"], [68, "methods"], [75, "methods"], [94, "methods"], [105, "methods"], [123, "methods"], [132, "methods"], [134, "methods"], [142, "methods"], [146, "methods"], [154, "methods"], [158, "methods"], [163, "methods"]], "Properties": [[9, "properties"], [26, "properties"], [37, "properties"], [51, "properties"], [68, "properties"], [75, "properties"], [94, "properties"], [105, "properties"], [123, "properties"], [132, "properties"], [134, "properties"], [142, "properties"], [146, "properties"], [154, "properties"], [163, "properties"]], "Special methods": [[26, "special-methods"], [37, "special-methods"], [51, "special-methods"], [68, "special-methods"], [75, "special-methods"], [94, "special-methods"], [123, "special-methods"], [134, "special-methods"], [163, "special-methods"]], "String representation": [[26, "string-representation"], [37, "string-representation"], [51, "string-representation"], [75, "string-representation"], [94, "string-representation"], [105, "string-representation"], [132, "string-representation"], [142, "string-representation"], [146, "string-representation"], [154, "string-representation"], [163, "string-representation"]], "Streaming mode only": [[26, "streaming-mode-only"], [37, "streaming-mode-only"], [51, "streaming-mode-only"], [75, "streaming-mode-only"], [94, "streaming-mode-only"], [163, "streaming-mode-only"]], "See also": [[44, null], [46, null], [59, null], [60, null], [61, null], [65, null], [83, null], [84, null], [86, null], [91, null], [106, null], [109, null], [119, null], [133, null], [143, null], [147, null], [150, null], [152, null], [155, null], [156, null], [157, null], [186, null], [209, null], [248, null]], "Warning": [[191, null], [248, null]], "Sequences": [[251, "sequences"]], "Simulation": [[252, "simulation"]], "Channel models": [[252, "channel-models"]], "Signal impairments": [[252, "signal-impairments"]], "Synchronization": [[253, "synchronization"]], "Documentation": [[254, "documentation"]], "Install": [[254, "install"], [255, "install"], [257, "install"]], "Build the docs": [[254, "build-the-docs"]], "Serve the docs": [[254, "serve-the-docs"]], "Formatting": [[255, "formatting"]], "Run the linter": [[255, "run-the-linter"]], "Run the formatter": [[255, "run-the-formatter"]], "Pre-commit": [[255, "pre-commit"]], "Run from VS Code": [[255, "run-from-vs-code"], [257, "run-from-vs-code"]], "Installation": [[256, "installation"], [265, "installation"]], "Install from PyPI": [[256, "install-from-pypi"]], "Install from GitHub": [[256, "install-from-github"]], "Editable install from local folder": [[256, "editable-install-from-local-folder"]], "Install the dev dependencies": [[256, "install-the-dev-dependencies"]], "Unit Tests": [[257, "unit-tests"]], "Run from the command line": [[257, "run-from-the-command-line"]], "Farrow arbitrary resampler": [[258, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[258, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[258, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[258, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[258, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[258, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[258, "downsample-by-an-irrational-rate"]], "FIR filters": [[259, "fir-filters"]], "Create an FIR filter": [[259, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[259, "examine-the-impulse-response-h-n"], [260, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[259, "examine-the-step-response-s-n"], [260, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[259, "examine-the-frequency-response-h-omega"], [260, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[259, "examine-the-group-delay-tau-g-omega"], [260, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[259, "fully-analyze-a-fir-filter"]], "IIR filters": [[260, "iir-filters"]], "Create an IIR filter": [[260, "create-an-iir-filter"]], "Examine the zeros and poles": [[260, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[260, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[260, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[261, "peak-to-average-power"]], "QPSK signal with various pulse shapes": [[261, "qpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[261, "examine-time-domain"]], "Examine frequency domain": [[261, "examine-frequency-domain"]], "Plot across excess bandwidth": [[261, "plot-across-excess-bandwidth"]], "Phase-locked loops": [[262, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[262, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[262, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[262, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[262, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[262, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[262, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[262, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[263, "phase-shift-keying"]], "Constellations": [[263, "constellations"]], "BPSK": [[263, "bpsk"]], "QPSK": [[263, "qpsk"]], "8-PSK": [[263, "id1"]], "16-PSK": [[263, "id2"]], "Error rate curves": [[263, "error-rate-curves"]], "Bit error rate curves": [[263, "bit-error-rate-curves"]], "Symbol error rate curves": [[263, "symbol-error-rate-curves"]], "Pulse shapes": [[264, "pulse-shapes"]], "Raised cosine": [[264, "raised-cosine"]], "Square-root raised cosine": [[264, "square-root-raised-cosine"]], "Gaussian": [[264, "gaussian"]], "sdr": [[265, "sdr"]], "Features": [[265, "features"]], "v0.0": [[266, "v0-0"]], "v0.0.8": [[266, "v0-0-8"]], "Changes": [[266, "changes"], [266, "id1"], [266, "id3"], [266, "id5"], [266, "id7"], [266, "id9"], [266, "id11"], [266, "id13"]], "Contributors": [[266, "contributors"], [266, "id2"], [266, "id4"], [266, "id6"], [266, "id8"], [266, "id10"], [266, "id12"], [266, "id14"]], "v0.0.7": [[266, "v0-0-7"]], "v0.0.6": [[266, "v0-0-6"]], "v0.0.5": [[266, "v0-0-5"]], "v0.0.4": [[266, "v0-0-4"]], "v0.0.3": [[266, "v0-0-3"]], "v0.0.2": [[266, "v0-0-2"]], "v0.0.1": [[266, "v0-0-1"]], "Versioning": [[267, "versioning"]], "Alpha releases": [[267, "alpha-releases"]], "Beta releases": [[267, "beta-releases"]]}, "indexentries": {"module": [[3, "module-sdr"]], "sdr": [[3, "module-sdr"]]}, "docurls": ["api/conversions/", "api/data-manipulation/", "api/detection/", "api/dsp/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.Decimator/", "api/sdr.Decimator.__call__/", "api/sdr.Decimator.__init__/", "api/sdr.Decimator.__repr__/", "api/sdr.Decimator.__str__/", "api/sdr.Decimator.delay/", "api/sdr.Decimator.method/", "api/sdr.Decimator.polyphase_taps/", "api/sdr.Decimator.rate/", "api/sdr.Decimator.reset/", "api/sdr.Decimator.taps/", "api/sdr.Differentiator/", "api/sdr.Differentiator.__init__/", "api/sdr.EnergyDetector/", "api/sdr.EnergyDetector.p_d/", "api/sdr.EnergyDetector.p_fa/", "api/sdr.EnergyDetector.roc/", "api/sdr.EnergyDetector.threshold/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__call__/", "api/sdr.FIR.__init__/", "api/sdr.FIR.__len__/", "api/sdr.FIR.__repr__/", "api/sdr.FIR.__str__/", "api/sdr.FIR.delay/", "api/sdr.FIR.flush/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.frequency_response_log/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.reset/", "api/sdr.FIR.state/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__call__/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__call__/", "api/sdr.IIR.__init__/", "api/sdr.IIR.__repr__/", "api/sdr.IIR.__str__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.state/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.Interpolator/", "api/sdr.Interpolator.__call__/", "api/sdr.Interpolator.__init__/", "api/sdr.Interpolator.__repr__/", "api/sdr.Interpolator.__str__/", "api/sdr.Interpolator.delay/", "api/sdr.Interpolator.method/", "api/sdr.Interpolator.polyphase_taps/", "api/sdr.Interpolator.rate/", "api/sdr.Interpolator.reset/", "api/sdr.Interpolator.taps/", "api/sdr.LinearModulation/", "api/sdr.LinearModulation.__init__/", "api/sdr.LinearModulation.__repr__/", "api/sdr.LinearModulation.__str__/", "api/sdr.LinearModulation.ber/", "api/sdr.LinearModulation.bps/", "api/sdr.LinearModulation.decide_symbols/", "api/sdr.LinearModulation.demodulate/", "api/sdr.LinearModulation.map_symbols/", "api/sdr.LinearModulation.modulate/", "api/sdr.LinearModulation.order/", "api/sdr.LinearModulation.phase_offset/", "api/sdr.LinearModulation.pulse_shape/", "api/sdr.LinearModulation.rx_filter/", "api/sdr.LinearModulation.ser/", "api/sdr.LinearModulation.sps/", "api/sdr.LinearModulation.symbol_map/", "api/sdr.LinearModulation.tx_filter/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__call__/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.MSK/", "api/sdr.MSK.__init__/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__call__/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.OQPSK/", "api/sdr.OQPSK.__init__/", "api/sdr.OQPSK.__repr__/", "api/sdr.OQPSK.__str__/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.__repr__/", "api/sdr.PSK.__str__/", "api/sdr.PSK.ber/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.PiMPSK/", "api/sdr.PiMPSK.__init__/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.ReplicaCorrelator/", "api/sdr.ReplicaCorrelator.p_d/", "api/sdr.ReplicaCorrelator.p_fa/", "api/sdr.ReplicaCorrelator.roc/", "api/sdr.ReplicaCorrelator.threshold/", "api/sdr.Resampler/", "api/sdr.Resampler.__call__/", "api/sdr.Resampler.__init__/", "api/sdr.Resampler.__repr__/", "api/sdr.Resampler.__str__/", "api/sdr.Resampler.delay/", "api/sdr.Resampler.down/", "api/sdr.Resampler.method/", "api/sdr.Resampler.polyphase_taps/", "api/sdr.Resampler.rate/", "api/sdr.Resampler.reset/", "api/sdr.Resampler.taps/", "api/sdr.Resampler.up/", "api/sdr.albersheim/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.barker/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.db/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.downsample/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.evm/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.half_sine/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.linear/", "api/sdr.mix/", "api/sdr.multirate_taps/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.percent/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.eye/", "api/sdr.plot.filter/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.magnitude_response/", "api/sdr.plot.p_d/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.phase_tree/", "api/sdr.plot.raster/", "api/sdr.plot.roc/", "api/sdr.plot.ser/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.polyphase_matrix/", "api/sdr.ppb/", "api/sdr.ppm/", "api/sdr.raised_cosine/", "api/sdr.rectangular/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.to_complex_bb/", "api/sdr.to_real_pb/", "api/sdr.unpack/", "api/sdr.upsample/", "api/sdr.wavelength/", "api/sdr.zadoff_chu/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/formatting/", "development/installation/", "development/unit-tests/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})