Search.setIndex({"titles": ["Conversions", "Data manipulation", "Detection", "Digital signal processing", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.Decimator", "sdr.Decimator.__call__", "sdr.Decimator.__init__", "sdr.Decimator.__repr__", "sdr.Decimator.__str__", "sdr.Decimator.delay", "sdr.Decimator.method", "sdr.Decimator.polyphase_taps", "sdr.Decimator.rate", "sdr.Decimator.reset", "sdr.Decimator.taps", "sdr.Differentiator", "sdr.Differentiator.__init__", "sdr.EnergyDetector", "sdr.EnergyDetector.p_d", "sdr.EnergyDetector.p_fa", "sdr.EnergyDetector.roc", "sdr.EnergyDetector.threshold", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__call__", "sdr.FIR.__init__", "sdr.FIR.__len__", "sdr.FIR.__repr__", "sdr.FIR.__str__", "sdr.FIR.delay", "sdr.FIR.flush", "sdr.FIR.frequency_response", "sdr.FIR.group_delay", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.phase_delay", "sdr.FIR.reset", "sdr.FIR.state", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__call__", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__call__", "sdr.IIR.__init__", "sdr.IIR.__repr__", "sdr.IIR.__str__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.frequency_response", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.state", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.Integrator", "sdr.Integrator.__init__", "sdr.Interpolator", "sdr.Interpolator.__call__", "sdr.Interpolator.__init__", "sdr.Interpolator.__repr__", "sdr.Interpolator.__str__", "sdr.Interpolator.delay", "sdr.Interpolator.method", "sdr.Interpolator.polyphase_taps", "sdr.Interpolator.rate", "sdr.Interpolator.reset", "sdr.Interpolator.taps", "sdr.LinearModulation", "sdr.LinearModulation.__init__", "sdr.LinearModulation.__repr__", "sdr.LinearModulation.__str__", "sdr.LinearModulation.ber", "sdr.LinearModulation.bps", "sdr.LinearModulation.decide_symbols", "sdr.LinearModulation.demodulate", "sdr.LinearModulation.map_symbols", "sdr.LinearModulation.modulate", "sdr.LinearModulation.order", "sdr.LinearModulation.phase_offset", "sdr.LinearModulation.pulse_shape", "sdr.LinearModulation.rx_filter", "sdr.LinearModulation.ser", "sdr.LinearModulation.sps", "sdr.LinearModulation.symbol_map", "sdr.LinearModulation.tx_filter", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__call__", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.MLPED", "sdr.MLPED.A_received", "sdr.MLPED.A_reference", "sdr.MLPED.__call__", "sdr.MLPED.__init__", "sdr.MLPED.data_aided_error", "sdr.MLPED.decision_directed_error", "sdr.MLPED.gain", "sdr.MSK", "sdr.MSK.__init__", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__call__", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.reset", "sdr.NCO.step", "sdr.OQPSK", "sdr.OQPSK.__init__", "sdr.OQPSK.__repr__", "sdr.OQPSK.__str__", "sdr.PED", "sdr.PED.__call__", "sdr.PED.__init__", "sdr.PED.data_aided_error", "sdr.PED.decision_directed_error", "sdr.PED.gain", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.__repr__", "sdr.PSK.__str__", "sdr.PSK.ber", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.PiMPSK", "sdr.PiMPSK.__init__", "sdr.Q", "sdr.Qinv", "sdr.ReplicaCorrelator", "sdr.ReplicaCorrelator.p_d", "sdr.ReplicaCorrelator.p_fa", "sdr.ReplicaCorrelator.roc", "sdr.ReplicaCorrelator.threshold", "sdr.Resampler", "sdr.Resampler.__call__", "sdr.Resampler.__init__", "sdr.Resampler.__repr__", "sdr.Resampler.__str__", "sdr.Resampler.delay", "sdr.Resampler.down", "sdr.Resampler.method", "sdr.Resampler.polyphase_taps", "sdr.Resampler.rate", "sdr.Resampler.reset", "sdr.Resampler.taps", "sdr.Resampler.up", "sdr.albersheim", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.barker", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.db", "sdr.design_bandpass_fir", "sdr.design_bandstop_fir", "sdr.design_frac_delay_fir", "sdr.design_highpass_fir", "sdr.design_lowpass_fir", "sdr.design_multirate_fir", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.downsample", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.euclidean", "sdr.evm", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.hadamard", "sdr.half_sine", "sdr.hamming", "sdr.hexdump", "sdr.iq_imbalance", "sdr.linear", "sdr.mix", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.percent", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.eye", "sdr.plot.filter", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.magnitude_response", "sdr.plot.p_d", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.phase_tree", "sdr.plot.raster", "sdr.plot.roc", "sdr.plot.ser", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.polyphase_decompose", "sdr.ppb", "sdr.ppm", "sdr.raised_cosine", "sdr.rectangular", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.to_complex_bb", "sdr.to_real_pb", "sdr.unpack", "sdr.upsample", "sdr.walsh", "sdr.wavelength", "sdr.zadoff_chu", "Sequences", "Simulation", "Synchronization", "Documentation", "Formatting", "Installation", "Unit Tests", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292], "db": [0, 4, 5, 9, 20, 22, 40, 42, 44, 46, 47, 48, 50, 111, 121, 142, 152, 162, 166, 168, 170, 175, 177, 192, 193, 194, 195, 203, 204, 205, 206, 207, 208, 209, 214, 215, 216, 217, 218, 220, 222, 223, 229, 230, 233, 234, 235, 236, 238, 239, 245, 252, 264, 267, 268, 286, 288, 289, 291], "x": [0, 1, 3, 5, 6, 7, 8, 9, 26, 27, 37, 39, 44, 46, 51, 52, 69, 70, 76, 78, 94, 96, 97, 107, 114, 116, 125, 128, 142, 152, 162, 170, 172, 173, 174, 179, 180, 193, 194, 197, 200, 202, 203, 210, 211, 212, 213, 216, 219, 220, 221, 227, 229, 230, 231, 232, 233, 235, 236, 237, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 253, 255, 256, 260, 261, 264, 266, 271, 272, 277, 281, 286, 287, 288, 292], "arraylik": [0, 1, 2, 3, 4, 5, 6, 7, 8, 26, 27, 28, 37, 39, 40, 41, 42, 43, 44, 46, 51, 52, 53, 69, 73, 76, 77, 78, 79, 94, 96, 97, 98, 107, 108, 111, 113, 114, 115, 116, 121, 134, 137, 142, 143, 152, 153, 162, 163, 166, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 192, 195, 197, 198, 200, 201, 203, 204, 205, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 220, 221, 222, 228, 230, 232, 234, 237, 241, 242, 243, 244, 245, 246, 247, 248, 251, 253, 254, 258, 259, 260, 261, 267, 268, 271, 274, 277], "ndarrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 26, 27, 33, 36, 37, 39, 40, 41, 42, 43, 44, 49, 51, 52, 58, 59, 60, 61, 63, 65, 66, 68, 69, 70, 75, 76, 78, 82, 83, 84, 86, 88, 90, 91, 93, 94, 96, 97, 103, 106, 107, 111, 113, 114, 115, 116, 119, 121, 123, 125, 128, 134, 137, 139, 140, 142, 144, 146, 151, 152, 156, 157, 159, 160, 162, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 187, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 249, 250, 252, 255, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277], "float_": [0, 2, 3, 4, 5, 6, 7, 8, 39, 40, 41, 42, 43, 44, 49, 107, 111, 119, 121, 134, 139, 140, 142, 152, 156, 157, 159, 160, 162, 166, 168, 170, 172, 173, 174, 175, 176, 177, 178, 192, 195, 198, 201, 203, 204, 205, 206, 207, 208, 209, 214, 215, 216, 217, 218, 222, 223, 226, 230, 234, 237, 238, 252, 260, 261, 262, 263, 265, 267, 268, 269, 270, 274], "convert": [0, 3, 107, 113, 115, 142, 152, 162, 170, 203, 214, 215, 217, 218, 228, 230, 237, 260, 261, 267, 268, 269, 270], "linear": [0, 96, 98, 102, 107, 108, 139, 140, 142, 152, 159, 160, 162, 170, 179, 181, 186, 194, 203, 230, 244, 246, 251, 253, 255, 290, 291], "unit": [0, 26, 37, 51, 66, 76, 91, 94, 96, 125, 143, 144, 153, 163, 171, 179, 194, 195, 203, 210, 211, 230, 254, 256, 281, 284, 285, 287, 290, 291], "percent": [0, 237, 291], "percentag": [0, 237], "ppm": [0, 261, 266, 277, 291], "part": [0, 256, 260, 261, 266, 287], "per": [0, 1, 27, 52, 97, 107, 108, 112, 114, 116, 122, 142, 143, 146, 152, 153, 162, 163, 170, 171, 194, 195, 214, 215, 217, 218, 221, 223, 226, 228, 232, 239, 240, 249, 260, 261, 262, 263, 265, 266, 267, 268, 271, 280, 286, 289, 291], "million": [0, 261, 266], "ppb": [0, 260, 291], "billion": [0, 260], "ebn0_to_esn0": [0, 121, 168, 214, 288, 291], "ebn0": [0, 7, 107, 111, 142, 152, 162, 166, 170, 195, 214, 215, 238, 288], "bp": [0, 107, 112, 142, 152, 162, 170, 214, 215, 217, 267, 288], "int": [0, 1, 3, 6, 7, 26, 28, 31, 34, 37, 44, 46, 47, 50, 51, 54, 57, 59, 60, 61, 62, 63, 66, 69, 72, 76, 84, 86, 87, 91, 94, 96, 98, 101, 104, 107, 108, 112, 117, 122, 139, 140, 142, 143, 144, 151, 152, 153, 159, 160, 162, 163, 170, 171, 179, 181, 184, 185, 191, 193, 194, 196, 197, 199, 200, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 226, 227, 228, 232, 233, 235, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 253, 254, 259, 262, 263, 265, 267, 268, 271, 272, 273, 275, 276, 288], "ebn0_to_snr": [0, 142, 152, 162, 170, 215, 291], "esn0_to_ebn0": [0, 111, 166, 217, 291], "esn0": [0, 7, 107, 121, 142, 152, 162, 168, 170, 217, 218, 252, 288], "esn0_to_snr": [0, 218, 288, 291], "sp": [0, 6, 7, 107, 108, 114, 116, 122, 142, 143, 152, 153, 162, 163, 170, 171, 215, 218, 223, 226, 240, 249, 256, 262, 263, 265, 267, 268, 269, 270, 286, 288, 289], "1": [0, 6, 8, 9, 16, 19, 23, 25, 26, 28, 29, 30, 33, 36, 37, 39, 40, 42, 43, 44, 51, 54, 55, 56, 57, 59, 60, 63, 76, 77, 80, 81, 84, 94, 96, 97, 98, 99, 100, 103, 106, 107, 108, 113, 114, 115, 116, 123, 125, 129, 130, 134, 138, 142, 143, 144, 147, 152, 153, 156, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 187, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 292], "snr_to_ebn0": [0, 111, 166, 195, 267, 291], "snr": [0, 2, 4, 7, 39, 40, 42, 44, 46, 47, 48, 49, 50, 142, 152, 162, 170, 192, 194, 195, 245, 267, 268, 269, 270, 277, 288, 291], "snr_to_esn0": [0, 121, 168, 268, 291], "pack": [1, 44, 46, 142, 152, 162, 170, 228, 232, 290, 291], "bpe": [1, 232, 271], "int_": [1, 5, 6, 107, 113, 114, 142, 152, 162, 170, 197, 199, 200, 210, 211, 212, 224, 227, 232, 271, 277], "binari": [1, 4, 6, 143, 153, 163, 169, 171, 196, 197, 198, 199, 200, 201, 212, 225, 232, 255, 271, 273, 277, 288, 290, 291], "arrai": [1, 33, 36, 44, 59, 84, 98, 103, 106, 108, 142, 143, 144, 152, 153, 162, 163, 169, 170, 171, 181, 187, 190, 193, 196, 197, 199, 200, 210, 211, 212, 216, 219, 224, 225, 227, 232, 233, 235, 256, 259, 271, 273, 285], "an": [1, 2, 3, 4, 26, 37, 39, 51, 59, 61, 76, 77, 79, 84, 86, 94, 95, 96, 97, 108, 143, 144, 153, 163, 166, 168, 171, 174, 179, 195, 206, 232, 238, 243, 252, 256, 271, 274, 281, 290, 291], "multipl": [1, 59, 84, 232, 271, 288, 291], "bit": [1, 5, 7, 44, 46, 49, 107, 111, 112, 142, 143, 152, 153, 162, 163, 166, 169, 170, 171, 195, 197, 198, 200, 201, 214, 215, 217, 228, 232, 238, 267, 271, 290, 291], "element": [1, 228, 232, 271], "unpack": [1, 44, 46, 228, 271, 288, 290, 291], "hexdump": [1, 44, 228, 290, 291], "byte": [1, 228], "width": [1, 206, 228], "16": [1, 166, 168, 169, 183, 206, 214, 215, 217, 220, 225, 228, 238, 252, 259, 262, 265, 267, 268, 273, 286, 291], "str": [1, 26, 29, 30, 37, 51, 55, 56, 76, 80, 81, 94, 96, 99, 100, 107, 109, 110, 142, 152, 154, 155, 162, 164, 165, 170, 179, 182, 183, 228, 240, 246, 249, 250, 253], "return": [1, 6, 9, 17, 19, 22, 23, 26, 27, 29, 30, 37, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 63, 66, 70, 76, 78, 80, 81, 84, 86, 91, 94, 96, 97, 99, 100, 107, 109, 110, 111, 113, 114, 115, 116, 121, 128, 137, 139, 140, 142, 146, 151, 152, 154, 155, 157, 159, 160, 162, 164, 165, 166, 168, 170, 172, 173, 175, 176, 177, 178, 179, 182, 183, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 284, 285, 286, 288, 291], "specifi": [1, 44, 47, 48, 50, 134, 139, 140, 156, 159, 160, 194, 195, 212, 228, 279, 284, 285, 291], "class": [2, 3, 5, 6, 9, 26, 37, 39, 44, 46, 47, 48, 49, 50, 51, 69, 76, 94, 96, 107, 125, 134, 142, 144, 152, 156, 162, 170, 174, 179, 278, 284, 285, 288, 290, 291], "replicacorrel": [2, 174, 175, 176, 177, 178, 291], "implement": [2, 3, 6, 26, 37, 39, 51, 69, 76, 94, 96, 107, 125, 131, 134, 142, 144, 152, 156, 162, 170, 174, 179, 192, 278, 283], "clairvoy": [2, 174], "replica": [2, 174], "correl": [2, 174, 196, 225, 273, 275], "energydetector": [2, 39, 40, 41, 42, 43, 291], "energi": [2, 39, 111, 121, 166, 168, 174, 175, 176, 177, 178, 195, 214, 215, 216, 217, 218, 223, 226, 238, 252, 262, 263, 265, 267, 268, 290, 291], "albersheim": [2, 192, 291], "p_d": [2, 7, 39, 40, 42, 174, 175, 177, 192, 245, 251, 291], "p_fa": [2, 7, 39, 40, 41, 42, 43, 174, 175, 176, 177, 178, 192, 251], "estim": [2, 9, 107, 113, 114, 142, 152, 162, 170, 192, 246, 253, 287], "minimum": [2, 6, 142, 192, 291], "requir": [2, 27, 52, 97, 192, 279, 280, 281, 282, 291], "singl": [2, 42, 59, 84, 166, 168, 192], "sampl": [2, 3, 9, 16, 24, 26, 27, 31, 37, 40, 41, 42, 43, 51, 52, 57, 59, 60, 61, 63, 66, 69, 73, 84, 86, 91, 96, 97, 98, 101, 107, 108, 114, 116, 122, 125, 129, 132, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 162, 163, 170, 171, 179, 181, 184, 192, 194, 213, 215, 218, 221, 223, 226, 231, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 253, 254, 256, 262, 263, 265, 266, 267, 268, 269, 270, 272, 277, 283, 286, 287, 289, 290, 291], "given": [2, 39, 44, 46, 47, 48, 50, 69, 70, 174, 192, 220, 284, 285], "n_": [2, 40, 41, 42, 43, 192], "nc": [2, 40, 41, 42, 43, 192], "non": [2, 27, 40, 41, 42, 43, 52, 97, 192, 226, 256, 263], "coher": [2, 40, 41, 42, 43, 192], "combin": [2, 192], "achiev": [2, 192, 288, 289], "probabl": [2, 7, 39, 40, 41, 42, 43, 172, 173, 174, 175, 176, 177, 178, 192, 197, 198, 200, 201, 212, 245, 251, 277, 291], "fals": [2, 5, 26, 28, 29, 30, 37, 38, 39, 40, 41, 42, 43, 51, 53, 55, 56, 59, 69, 71, 76, 77, 79, 80, 81, 84, 94, 95, 96, 97, 98, 99, 100, 142, 152, 162, 166, 168, 170, 174, 175, 176, 177, 178, 179, 181, 182, 183, 192, 193, 197, 200, 212, 216, 231, 235, 236, 239, 246, 251, 253, 256, 264, 285, 289], "alarm": [2, 39, 40, 41, 42, 43, 174, 175, 176, 177, 178, 192, 251], "p_": [2, 7, 39, 40, 41, 42, 43, 166, 168, 174, 175, 176, 177, 178, 192, 193, 194, 203, 212, 220, 230, 233, 235, 238, 246, 251, 252], "fa": [2, 7, 39, 40, 41, 42, 43, 174, 175, 176, 177, 178, 192, 251], "thi": [2, 9, 26, 46, 47, 48, 50, 51, 76, 96, 98, 107, 108, 123, 134, 142, 146, 152, 153, 162, 163, 169, 170, 171, 179, 181, 192, 194, 195, 197, 200, 212, 213, 220, 222, 225, 240, 246, 250, 253, 256, 272, 273, 279, 281, 282, 283, 285, 287, 288, 289], "function": [2, 7, 8, 9, 18, 37, 51, 76, 77, 94, 125, 172, 173, 192, 195, 213, 223, 225, 238, 245, 246, 251, 252, 253, 272, 273, 284, 285, 287, 289, 290, 291], "": [2, 3, 7, 9, 17, 19, 20, 21, 23, 24, 26, 37, 39, 46, 47, 48, 49, 50, 51, 59, 60, 63, 66, 76, 84, 91, 94, 96, 107, 108, 113, 114, 115, 116, 134, 142, 152, 162, 170, 174, 176, 178, 179, 192, 194, 195, 215, 218, 220, 221, 229, 239, 240, 241, 242, 244, 246, 247, 248, 249, 250, 253, 254, 256, 257, 266, 267, 268, 269, 270, 282, 283, 286, 288, 290, 291], "equat": [2, 17, 19, 20, 21, 22, 23, 40, 41, 43, 76, 152, 162, 170, 175, 176, 178, 192, 222], "finit": [3, 51, 290, 291], "impuls": [3, 7, 26, 37, 51, 61, 76, 86, 94, 96, 179, 204, 205, 206, 207, 208, 209, 223, 241, 243, 289, 290, 291], "respons": [3, 7, 26, 37, 51, 59, 61, 66, 76, 84, 86, 91, 94, 96, 179, 204, 205, 206, 207, 208, 209, 223, 241, 242, 243, 244, 248, 254, 289, 290, 291], "differenti": [3, 6, 37, 38, 142, 166, 168, 210, 211, 256, 290, 291], "design_lowpass_fir": [3, 59, 208, 291], "order": [3, 9, 26, 27, 30, 37, 44, 49, 51, 52, 56, 62, 69, 72, 76, 81, 87, 94, 96, 97, 98, 100, 107, 108, 117, 125, 129, 142, 152, 162, 163, 170, 171, 179, 181, 183, 194, 204, 205, 207, 208, 214, 215, 217, 220, 221, 223, 239, 240, 249, 250, 262, 265, 266, 267, 278, 285, 286, 287, 288, 291], "design": [3, 26, 28, 32, 96, 98, 102, 108, 153, 163, 171, 179, 181, 186, 204, 205, 206, 207, 208, 209, 279, 290, 291], "lowpass": [3, 208], "h": [3, 7, 26, 37, 39, 51, 53, 55, 56, 59, 61, 76, 84, 86, 94, 96, 107, 108, 119, 120, 124, 125, 142, 152, 153, 162, 163, 170, 171, 174, 179, 204, 205, 206, 207, 208, 209, 223, 240, 241, 243, 244, 248, 259, 286, 287, 289], "n": [3, 5, 6, 7, 8, 9, 26, 27, 37, 39, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 60, 61, 62, 63, 65, 66, 68, 69, 70, 76, 78, 79, 82, 86, 87, 91, 94, 96, 97, 107, 108, 114, 116, 119, 120, 124, 125, 128, 142, 144, 146, 151, 152, 153, 162, 163, 170, 171, 172, 173, 174, 176, 178, 179, 180, 193, 194, 195, 196, 199, 202, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 227, 229, 231, 233, 235, 236, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 253, 254, 256, 264, 266, 267, 268, 269, 270, 272, 273, 275, 276, 277, 287, 289, 290], "us": [3, 7, 26, 28, 32, 35, 37, 38, 51, 53, 58, 59, 64, 69, 71, 76, 77, 79, 84, 89, 94, 95, 96, 97, 98, 102, 105, 107, 108, 113, 114, 125, 131, 134, 139, 140, 142, 152, 153, 156, 159, 160, 162, 163, 170, 171, 179, 181, 186, 189, 195, 198, 201, 204, 205, 206, 207, 208, 209, 220, 225, 228, 232, 239, 240, 241, 243, 245, 246, 253, 254, 271, 273, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 292], "window": [3, 26, 59, 96, 179, 204, 205, 206, 207, 208, 209, 246, 253, 291], "method": [3, 7, 30, 32, 98, 100, 102, 181, 183, 186, 204, 205, 206, 207, 208, 209, 246, 253, 284, 285, 291], "design_highpass_fir": [3, 207, 291], "highpass": [3, 207], "design_bandpass_fir": [3, 204, 291], "bandpass": [3, 204], "design_bandstop_fir": [3, 205, 291], "bandstop": [3, 205], "infinit": [3, 76, 290, 291], "integr": [3, 9, 14, 40, 41, 42, 43, 94, 95, 125, 127, 129, 192, 278, 282, 285, 290, 291], "interpol": [3, 26, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 124, 142, 152, 162, 170, 179, 181, 191, 209, 240, 272, 286, 288, 290, 291], "polyphas": [3, 26, 27, 28, 33, 36, 96, 97, 98, 103, 106, 179, 180, 181, 187, 190, 209, 213, 259, 272, 290, 291], "decim": [3, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 107, 108, 113, 114, 115, 116, 120, 123, 142, 143, 152, 153, 162, 163, 169, 170, 171, 179, 181, 185, 209, 213, 288, 290, 291], "ration": [3, 179, 181, 209, 291], "design_multirate_fir": [3, 28, 98, 181, 209, 291], "up": [3, 179, 181, 191, 209, 222, 280], "kaiser": [3, 26, 28, 29, 30, 32, 96, 97, 98, 99, 100, 102, 179, 181, 182, 183, 186, 204, 205, 206, 207, 208, 209], "polyphase_decompos": [3, 259, 291], "tap": [3, 26, 28, 33, 36, 37, 51, 56, 68, 69, 75, 76, 82, 83, 94, 96, 98, 103, 106, 179, 181, 187, 190, 259, 284, 285], "phase": [3, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 37, 51, 63, 96, 107, 108, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 179, 192, 221, 229, 231, 247, 248, 249, 259, 277, 290, 291], "decompos": [3, 26, 96, 179, 259], "h_i": [3, 26, 28, 33, 36, 37, 51, 53, 68, 96, 98, 103, 106, 179, 181, 187, 190, 259, 284], "matrix": [3, 212, 259, 277], "h_": [3, 9, 26, 33, 36, 96, 103, 106, 179, 187, 190, 259, 287], "i": [3, 9, 16, 25, 26, 27, 28, 33, 36, 37, 39, 41, 42, 43, 44, 49, 51, 52, 53, 59, 61, 66, 67, 68, 69, 74, 76, 79, 83, 84, 86, 91, 92, 94, 96, 97, 98, 103, 106, 107, 108, 125, 129, 130, 132, 134, 142, 146, 150, 152, 153, 156, 162, 163, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 187, 190, 192, 193, 194, 195, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 212, 214, 215, 216, 217, 218, 219, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 253, 254, 256, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292], "j": [3, 26, 33, 36, 59, 76, 79, 82, 84, 94, 96, 103, 106, 142, 144, 152, 162, 170, 179, 187, 190, 194, 212, 229, 231, 259, 275, 284, 285], "b": [3, 76, 79, 192, 195, 223, 228, 241, 243, 254, 259, 279, 280, 289], "farrowresampl": [3, 69, 70, 71, 72, 73, 74, 75, 283, 291], "cubic": [3, 69], "farrow": [3, 69, 70, 71, 72, 73, 74, 75, 290, 291], "design_frac_delay_fir": [3, 206, 291], "length": [3, 6, 7, 26, 27, 37, 42, 51, 52, 54, 61, 66, 78, 96, 97, 98, 108, 114, 116, 143, 153, 163, 171, 179, 181, 196, 199, 204, 205, 206, 207, 208, 209, 223, 224, 225, 226, 241, 243, 246, 250, 253, 254, 262, 263, 265, 269, 273, 275, 276, 280, 283, 286, 289], "delai": [3, 7, 26, 27, 30, 31, 37, 51, 52, 56, 57, 60, 63, 69, 96, 97, 100, 101, 125, 144, 179, 183, 184, 206, 210, 211, 226, 242, 247, 263, 287, 290, 291], "fraction": [3, 69, 73, 206, 223, 283, 290, 291], "mix": [3, 231, 290, 291], "freq": [3, 4, 26, 37, 51, 59, 76, 84, 94, 96, 144, 146, 179, 221, 222, 231, 234, 274, 277, 283, 287], "float": [3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 37, 42, 44, 46, 47, 48, 50, 51, 59, 60, 63, 69, 70, 76, 77, 84, 85, 94, 96, 107, 108, 118, 125, 126, 127, 129, 130, 132, 134, 135, 136, 138, 141, 142, 143, 144, 145, 147, 148, 149, 152, 153, 156, 161, 162, 163, 167, 170, 171, 177, 179, 188, 193, 194, 195, 197, 200, 202, 204, 205, 206, 207, 208, 209, 220, 221, 223, 229, 231, 233, 235, 236, 239, 240, 241, 242, 244, 246, 247, 248, 249, 250, 253, 255, 256, 262, 264, 265, 266, 277], "0": [3, 6, 8, 16, 26, 27, 33, 36, 37, 39, 42, 44, 51, 52, 53, 55, 56, 59, 60, 63, 68, 76, 77, 79, 80, 81, 82, 83, 84, 94, 96, 97, 98, 103, 106, 107, 108, 113, 114, 115, 116, 123, 129, 142, 143, 144, 147, 152, 153, 162, 163, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 187, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 227, 229, 230, 231, 232, 234, 237, 239, 240, 241, 242, 243, 244, 247, 248, 249, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 292], "time": [3, 5, 9, 16, 17, 19, 20, 21, 22, 23, 37, 51, 76, 94, 125, 129, 134, 152, 156, 162, 170, 193, 194, 202, 204, 205, 207, 208, 212, 213, 216, 218, 219, 221, 223, 225, 227, 229, 231, 233, 235, 236, 240, 241, 246, 250, 253, 256, 262, 264, 265, 266, 268, 269, 270, 272, 273, 277, 283, 284, 285, 289, 290, 291], "domain": [3, 5, 193, 194, 202, 204, 205, 207, 208, 213, 216, 219, 221, 227, 229, 231, 233, 235, 236, 241, 246, 250, 253, 256, 264, 266, 269, 270, 272, 277, 290, 291], "complex": [3, 5, 7, 26, 37, 39, 40, 41, 42, 43, 51, 59, 76, 84, 94, 96, 107, 108, 113, 114, 115, 116, 123, 134, 137, 142, 143, 144, 146, 151, 152, 153, 156, 157, 162, 163, 169, 170, 171, 174, 175, 176, 177, 178, 179, 194, 195, 213, 220, 229, 231, 239, 240, 242, 244, 247, 248, 250, 255, 256, 269, 270, 272, 277, 283, 284, 285, 287, 288, 290, 291], "exponenti": [3, 146, 213, 231, 269, 270, 272, 283, 284, 285], "real": [3, 40, 41, 43, 142, 152, 172, 173, 175, 176, 178, 194, 231, 240, 242, 244, 247, 248, 250, 256, 269, 270, 283, 284, 285, 287, 290, 291], "sinusoid": [3, 162, 194, 231, 269, 270, 285, 291], "to_complex_bb": [3, 269, 291], "x_r": [3, 269, 270], "complex_": [3, 7, 107, 113, 114, 115, 116, 123, 142, 144, 151, 152, 156, 157, 162, 169, 170, 239, 255, 269, 270, 275, 276], "passband": [3, 204, 205, 206, 207, 208, 223, 226, 262, 263, 265, 269, 270, 286, 291], "center": [3, 204, 205, 206, 207, 208, 226, 256, 263, 269, 270, 291], "f_": [3, 9, 16, 24, 27, 59, 60, 63, 84, 97, 107, 108, 122, 142, 143, 152, 153, 162, 163, 170, 171, 204, 205, 207, 208, 213, 215, 218, 221, 223, 231, 240, 241, 242, 244, 246, 247, 248, 249, 250, 253, 256, 266, 267, 268, 269, 270, 272, 283, 284, 285, 287, 289], "r": [3, 26, 27, 28, 33, 34, 36, 69, 70, 96, 97, 98, 103, 104, 106, 195, 213, 214, 215, 217, 220, 223, 231, 262, 265, 267, 269, 270, 272, 279, 280, 281, 282, 285, 286, 287, 289], "4": [3, 7, 17, 19, 26, 33, 36, 37, 40, 42, 44, 59, 80, 81, 84, 94, 96, 97, 103, 106, 134, 142, 143, 144, 152, 153, 156, 162, 166, 167, 168, 169, 170, 174, 175, 176, 177, 178, 179, 182, 183, 187, 190, 192, 194, 195, 196, 198, 199, 201, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 234, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 252, 254, 255, 256, 257, 258, 259, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 281, 283, 285, 286, 287, 288], "rate": [3, 5, 7, 9, 16, 24, 26, 27, 28, 30, 34, 44, 45, 46, 48, 49, 59, 60, 63, 69, 70, 84, 96, 97, 98, 100, 104, 107, 111, 121, 142, 152, 162, 166, 168, 170, 179, 180, 181, 183, 185, 188, 191, 209, 213, 214, 215, 217, 221, 231, 238, 240, 241, 242, 244, 246, 247, 248, 249, 250, 252, 253, 256, 266, 267, 269, 270, 272, 277, 290, 291], "baseband": [3, 7, 9, 142, 152, 162, 170, 231, 240, 249, 269, 270, 286, 287, 291], "x_c": [3, 269, 270], "c": [3, 9, 17, 19, 20, 21, 22, 23, 46, 47, 48, 49, 50, 107, 108, 123, 125, 142, 152, 162, 169, 170, 195, 198, 201, 222, 234, 255, 269, 270, 274, 287], "2": [3, 6, 7, 9, 17, 19, 22, 26, 29, 30, 33, 36, 37, 39, 40, 41, 42, 43, 44, 51, 55, 56, 57, 59, 60, 63, 80, 81, 84, 94, 96, 97, 99, 100, 103, 106, 107, 108, 117, 134, 142, 144, 152, 153, 156, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 187, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 279, 282, 283, 284, 285, 286, 287, 288, 289], "to_real_pb": [3, 270, 286, 291], "2f_": [3, 270], "upsampl": [3, 96, 179, 272, 291], "factor": [3, 5, 9, 16, 25, 108, 125, 129, 130, 153, 163, 171, 202, 213, 272, 287], "downsampl": [3, 213, 291], "bsc_capac": [4, 201, 291], "p": [4, 8, 144, 146, 172, 173, 179, 181, 187, 188, 190, 191, 197, 198, 200, 201, 209, 212, 277], "calcul": [4, 5, 195, 198, 201, 220, 222, 234, 274, 291], "symmetr": [4, 200, 201, 212, 269, 270, 277, 290], "bsc": [4, 200, 201, 212, 277, 290, 291], "bec_capac": [4, 198, 291], "erasur": [4, 197, 198, 212, 277, 290], "bec": [4, 197, 198, 212, 277, 290, 291], "awgn_capac": [4, 195, 291], "addit": [4, 194, 195, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 272, 277, 290], "white": [4, 194, 195, 277, 290], "gaussian": [4, 6, 37, 94, 194, 195, 223, 277, 290, 291], "nois": [4, 9, 10, 11, 16, 22, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 111, 121, 125, 129, 132, 142, 152, 162, 166, 168, 170, 174, 175, 176, 177, 178, 194, 195, 214, 215, 217, 218, 238, 252, 267, 268, 277, 287, 290], "awgn": [4, 142, 152, 162, 166, 168, 170, 194, 195, 220, 238, 239, 252, 269, 270, 277, 288, 290, 291], "fspl": [4, 222], "distanc": [4, 219, 222, 227, 290, 291], "free": [4, 142, 152, 162, 170, 222, 290], "space": [4, 59, 84, 222, 290], "wavelength": [4, 274, 291], "lambda": [4, 222, 274], "electromagnet": [4, 274], "wave": [4, 142, 274], "frequenc": [4, 9, 17, 19, 21, 26, 37, 51, 59, 60, 63, 76, 84, 94, 96, 125, 142, 144, 146, 179, 204, 205, 206, 207, 208, 213, 221, 222, 231, 234, 241, 242, 244, 246, 247, 248, 253, 269, 270, 272, 274, 277, 289, 290, 291], "f": [4, 17, 19, 26, 42, 59, 60, 63, 84, 96, 144, 146, 179, 192, 194, 221, 222, 223, 231, 234, 266, 274, 275, 280, 283, 284, 285, 286, 287, 288, 289], "parabolic_antenna": [4, 234, 291], "tupl": [4, 26, 37, 39, 42, 44, 46, 49, 51, 59, 60, 63, 76, 84, 94, 96, 107, 113, 114, 134, 139, 140, 142, 152, 156, 159, 160, 162, 170, 174, 177, 179, 193, 216, 219, 227, 233, 234, 235, 239, 241, 242, 243, 244, 247, 248, 254, 255, 258], "gain": [4, 9, 12, 13, 14, 15, 16, 76, 77, 85, 94, 125, 126, 127, 129, 134, 141, 144, 145, 147, 156, 161, 192, 204, 205, 206, 207, 208, 222, 223, 226, 234, 262, 263, 265, 287, 290], "g": [4, 49, 234, 281], "beamwidth": [4, 234], "theta": [4, 144, 147, 149, 150, 234], "parabol": [4, 234], "reflector": [4, 234], "signal": [5, 7, 9, 17, 19, 22, 23, 26, 27, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 58, 69, 70, 76, 78, 94, 96, 97, 107, 108, 119, 125, 128, 134, 135, 136, 138, 142, 144, 146, 151, 152, 153, 162, 163, 170, 171, 174, 175, 176, 177, 178, 179, 180, 193, 194, 195, 202, 203, 204, 205, 207, 208, 209, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 227, 229, 230, 231, 233, 234, 235, 236, 240, 241, 242, 244, 246, 247, 248, 249, 250, 253, 256, 259, 264, 266, 267, 268, 269, 270, 272, 274, 284, 285, 287, 289, 290, 291], "peak_pow": [5, 233, 235, 291], "peak": [5, 142, 152, 170, 202, 220, 233, 235, 236], "average_pow": [5, 193, 233, 291], "averag": [5, 44, 134, 139, 140, 142, 152, 156, 159, 160, 170, 193, 194, 195, 220, 233, 246], "papr": [5, 142, 152, 170, 233, 286, 291], "ratio": [5, 22, 40, 42, 44, 46, 47, 48, 49, 50, 111, 121, 142, 152, 166, 168, 170, 175, 177, 194, 195, 214, 215, 217, 218, 233, 237, 238, 252, 260, 261, 267, 268], "peak_voltag": [5, 202, 236, 291], "bool": [5, 26, 28, 37, 38, 40, 41, 42, 43, 51, 53, 59, 67, 69, 71, 74, 76, 77, 79, 84, 92, 94, 95, 96, 98, 142, 152, 162, 166, 168, 170, 175, 176, 177, 178, 179, 181, 193, 216, 231, 235, 236, 239, 248, 250, 255, 256, 264], "rms_voltag": [5, 202, 264, 291], "root": [5, 6, 108, 153, 163, 171, 220, 240, 256, 264, 265, 275, 276, 284, 290], "mean": [5, 220, 246, 253, 264, 289], "squar": [5, 6, 108, 153, 163, 171, 220, 222, 234, 256, 264, 265, 284], "rm": [5, 134, 135, 136, 138, 202, 220, 264], "crest_factor": [5, 202, 233, 291], "crest": [5, 202], "euclidean": [5, 219, 290, 291], "y": [5, 6, 26, 27, 37, 51, 52, 58, 70, 76, 78, 94, 96, 97, 125, 128, 144, 146, 151, 179, 194, 197, 200, 210, 211, 212, 213, 219, 221, 227, 229, 231, 239, 244, 246, 253, 255, 266, 272, 287, 288], "between": [5, 26, 28, 38, 53, 67, 71, 74, 77, 79, 92, 95, 96, 98, 156, 179, 181, 219, 222, 227, 246, 250, 253, 287, 290], "two": [5, 204, 205, 219, 227, 240, 241, 242, 244, 246, 247, 248, 253, 275, 283, 284, 285], "ham": [5, 59, 204, 205, 207, 208, 227, 290, 291], "errorr": [5, 44, 45, 46, 47, 48, 49, 50, 288, 291], "A": [5, 9, 17, 19, 20, 21, 22, 23, 25, 27, 37, 44, 51, 52, 59, 84, 94, 97, 108, 125, 134, 153, 156, 163, 171, 192, 199, 204, 205, 207, 208, 224, 228, 229, 234, 262, 265, 278, 280, 287], "error": [5, 7, 9, 15, 16, 22, 44, 45, 46, 48, 49, 50, 107, 111, 121, 125, 129, 134, 137, 139, 140, 141, 142, 152, 156, 157, 159, 160, 161, 162, 166, 168, 170, 192, 201, 220, 238, 252, 287, 290, 291], "ber": [5, 7, 44, 107, 111, 142, 152, 162, 166, 170, 238, 288, 290, 291], "symbol": [5, 7, 44, 46, 49, 96, 107, 108, 112, 113, 114, 115, 116, 121, 122, 123, 134, 137, 142, 143, 152, 153, 156, 157, 162, 163, 166, 168, 169, 170, 171, 194, 214, 215, 217, 218, 220, 221, 223, 226, 239, 240, 249, 252, 255, 256, 262, 263, 265, 267, 268, 286, 287, 289, 290, 291], "ser": [5, 7, 44, 107, 121, 142, 152, 162, 168, 170, 252, 288, 290, 291], "evm": [5, 220, 290, 291], "x_hat": [5, 7, 44, 46, 220, 239, 288], "ref": [5, 134, 136, 138, 192, 204, 205, 206, 207, 208, 209, 220, 223, 225, 273], "vector": [5, 44, 59, 73, 84, 204, 205, 207, 208, 220, 246, 253, 290, 291], "magnitud": [5, 7, 196, 206, 220, 225, 241, 244, 273, 275, 290, 291], "hat": [5, 7, 46, 107, 113, 114, 134, 137, 142, 152, 156, 157, 162, 170, 220, 239, 255], "k": [5, 6, 7, 46, 107, 108, 112, 113, 114, 115, 116, 117, 134, 137, 142, 152, 156, 157, 162, 163, 170, 171, 210, 211, 214, 215, 217, 220, 239, 255, 256, 267, 286, 289], "linearmodul": [6, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 139, 140, 159, 160, 162, 255, 291], "amplitud": [6, 107, 108, 134, 135, 136, 138, 229, 277, 283, 287], "arbitrari": [6, 69, 70, 71, 72, 73, 74, 75, 107, 290, 291], "psk": [6, 134, 152, 156, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 194, 220, 221, 229, 238, 239, 240, 252, 255, 256, 266, 286, 287, 290, 291], "shift": [6, 142, 152, 162, 166, 167, 168, 169, 170, 275, 284, 285, 290, 291], "kei": [6, 142, 152, 162, 166, 167, 168, 169, 170, 290, 291], "demodul": [6, 107, 114, 142, 152, 162, 170, 291], "pimpsk": [6, 170, 171, 291], "pi": [6, 26, 80, 81, 84, 96, 97, 134, 144, 152, 156, 162, 170, 171, 179, 194, 213, 222, 223, 229, 231, 234, 241, 242, 243, 244, 247, 248, 254, 258, 269, 270, 272, 275, 283, 284, 285, 287, 290, 291], "m": [6, 76, 79, 83, 94, 107, 108, 112, 113, 114, 115, 116, 117, 123, 134, 142, 152, 156, 162, 163, 169, 170, 171, 212, 214, 215, 217, 222, 255, 267, 279, 280, 281, 282, 290, 291], "oqpsk": [6, 142, 152, 153, 154, 155, 291], "offset": [6, 17, 19, 26, 37, 96, 97, 107, 108, 118, 142, 143, 144, 146, 147, 149, 152, 153, 162, 163, 167, 170, 171, 179, 221, 231, 256, 266, 277, 287, 290, 291], "quadratur": [6, 142, 152, 229], "msk": [6, 142, 143, 249, 291], "rectangular": [6, 108, 153, 163, 171, 263, 286, 289, 290, 291], "span": [6, 7, 108, 153, 163, 171, 223, 226, 240, 249, 262, 263, 265, 286, 289], "half_sin": [6, 143, 226, 291], "half": [6, 142, 152, 209, 226, 234, 290, 291], "sine": [6, 142, 146, 226, 290, 291], "time_bandwidth": [6, 223], "raised_cosin": [6, 108, 153, 163, 171, 240, 262, 289, 291], "alpha": [6, 108, 153, 163, 171, 223, 257, 262, 265, 286, 289], "rais": [6, 37, 94, 108, 153, 163, 171, 240, 256, 262, 265, 284, 290], "cosin": [6, 37, 94, 108, 146, 153, 163, 171, 240, 256, 262, 265, 284, 290], "rc": [6, 108, 153, 163, 171, 262], "root_raised_cosin": [6, 37, 55, 56, 94, 108, 153, 163, 171, 240, 241, 242, 243, 244, 247, 248, 254, 258, 265, 284, 286, 288, 289, 291], "srrc": [6, 108, 152, 153, 162, 163, 170, 171, 240, 256, 265, 286, 288], "binary_cod": [6, 199, 291], "gener": [6, 142, 152, 162, 170, 194, 197, 199, 200, 212, 224, 251, 279, 288, 291], "code": [6, 26, 29, 37, 51, 55, 76, 80, 94, 96, 99, 107, 109, 142, 143, 152, 153, 154, 162, 163, 164, 169, 170, 171, 179, 182, 196, 199, 214, 215, 217, 224, 225, 239, 255, 267, 273, 276, 281, 288, 291], "gray_cod": [6, 224, 291], "grai": [6, 142, 143, 152, 153, 162, 163, 169, 170, 171, 224, 239, 255, 288, 290], "diff_encod": [6, 142, 152, 162, 166, 168, 170, 210, 211, 291], "y_prev": [6, 210, 211], "input": [6, 9, 17, 19, 22, 23, 26, 27, 28, 31, 37, 38, 51, 52, 53, 61, 65, 66, 69, 70, 71, 73, 76, 77, 78, 79, 86, 91, 94, 95, 96, 97, 98, 101, 125, 128, 144, 146, 152, 162, 166, 168, 170, 172, 179, 180, 181, 184, 194, 195, 197, 198, 200, 201, 203, 210, 211, 212, 213, 230, 232, 237, 243, 254, 260, 261, 271, 272, 277, 284, 285, 287], "data": [6, 134, 139, 156, 159, 210, 211, 228, 232, 256, 271, 290], "diff_decod": [6, 210, 211, 291], "decod": [6, 210], "use_styl": [7, 257], "appli": [7, 26, 96, 108, 179, 221, 229, 239, 240, 246, 253, 255, 256, 257, 266, 277], "default": [7, 61, 66, 143, 153, 163, 169, 171, 193, 216, 219, 227, 233, 235, 239, 242, 244, 247, 248, 250, 253, 255, 257, 288], "matplotlib": [7, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 283, 284, 285, 286, 287, 288, 289, 290], "rcparam": [7, 257], "time_domain": [7, 26, 37, 94, 96, 97, 142, 144, 152, 162, 170, 179, 194, 213, 225, 231, 256, 269, 270, 272, 273, 286, 287, 288, 289, 291], "ani": [7, 26, 37, 51, 59, 76, 84, 94, 96, 144, 146, 179, 196, 203, 213, 225, 230, 256, 272, 273, 276, 282], "dtype": [7, 26, 37, 51, 59, 76, 84, 94, 96, 142, 144, 146, 152, 162, 170, 179, 196, 225, 232, 256, 271, 273, 276, 287], "_scalartype_co": [7, 256], "t": [7, 9, 11, 16, 39, 125, 129, 132, 174, 223, 228, 256, 279, 283], "raster": [7, 240, 249, 250, 290, 291], "none": [7, 26, 37, 42, 51, 59, 61, 66, 69, 73, 84, 96, 108, 125, 133, 146, 153, 163, 171, 177, 179, 193, 194, 195, 197, 200, 204, 205, 207, 208, 212, 216, 219, 227, 232, 233, 235, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 253, 254, 255, 256, 271, 277, 283, 286, 288], "periodogram": [7, 213, 246, 269, 270, 272, 286, 290, 291], "power": [7, 142, 152, 162, 170, 193, 194, 195, 203, 220, 223, 225, 226, 230, 233, 234, 235, 246, 262, 263, 265, 273, 289, 290], "densiti": [7, 22, 246, 286, 289], "xx": [7, 246], "welch": [7, 246, 253], "spectrogram": [7, 253, 290, 291], "constel": [7, 142, 152, 162, 167, 170, 194, 220, 221, 229, 239, 266, 275, 290, 291], "symbol_map": [7, 107, 108, 123, 142, 152, 162, 167, 169, 170, 220, 255, 288, 291], "map": [7, 107, 108, 115, 123, 142, 152, 162, 169, 170, 220, 255, 290, 291], "ey": [7, 142, 152, 162, 170, 240, 290, 291], "diagram": [7, 9, 26, 37, 94, 96, 125, 144, 179, 210, 211, 240, 290, 291], "phase_tre": [7, 142, 249, 291], "tree": [7, 249, 291], "continu": [7, 142, 249, 283, 291], "cpm": [7, 249, 291], "kwarg": [7, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258], "e_b": [7, 46, 47, 48, 49, 50, 107, 111, 142, 152, 162, 166, 170, 195, 214, 215, 217, 238, 267, 290], "n_0": [7, 22, 46, 47, 48, 49, 50, 107, 111, 121, 142, 152, 162, 166, 168, 170, 194, 195, 214, 215, 217, 218, 220, 238, 239, 252, 267, 268, 288, 290], "e_": [7, 46, 47, 48, 49, 50, 107, 121, 142, 152, 162, 168, 170, 194, 195, 214, 217, 218, 220, 239, 252, 268, 288, 290], "roc": [7, 39, 42, 174, 177, 251, 291], "receiv": [7, 39, 40, 42, 44, 46, 107, 113, 114, 120, 134, 135, 137, 138, 142, 152, 156, 157, 162, 166, 168, 170, 174, 175, 176, 177, 178, 220, 222, 240, 245, 251, 291], "oper": [7, 39, 42, 174, 177, 251, 291], "characterist": [7, 39, 42, 174, 177, 251, 291], "curv": [7, 39, 42, 166, 168, 174, 177, 238, 251, 252, 291], "enr": [7, 174, 175, 177, 245], "impulse_respons": [7, 26, 37, 51, 61, 76, 86, 94, 96, 179, 204, 205, 206, 207, 208, 209, 223, 226, 243, 262, 263, 265, 284, 285, 289, 291], "step_respons": [7, 26, 37, 51, 66, 76, 91, 94, 96, 179, 254, 284, 285, 287, 291], "step": [7, 26, 37, 51, 66, 76, 91, 94, 96, 144, 146, 151, 179, 241, 254, 290], "zeros_pol": [7, 258, 285, 291], "zero": [7, 26, 27, 37, 51, 58, 73, 76, 77, 80, 81, 84, 93, 94, 96, 97, 98, 125, 146, 179, 181, 206, 225, 226, 232, 241, 242, 243, 244, 247, 248, 254, 258, 263, 269, 273, 284, 286, 287, 289, 290, 291], "pole": [7, 76, 77, 80, 81, 84, 88, 94, 241, 242, 243, 244, 247, 248, 254, 258, 284, 290], "magnitude_respons": [7, 37, 59, 84, 94, 204, 205, 206, 207, 208, 209, 226, 244, 262, 263, 265, 284, 285, 287, 289, 291], "omega": [7, 26, 37, 51, 59, 60, 63, 76, 84, 94, 96, 144, 147, 148, 150, 179, 241, 242, 244, 247, 248, 287], "phase_respons": [7, 59, 84, 248, 291], "angl": [7, 156, 248, 287], "phase_delai": [7, 26, 37, 51, 63, 96, 179, 247, 291], "tau_": [7, 26, 37, 51, 63, 96, 179, 247], "phi": [7, 26, 37, 51, 63, 96, 107, 108, 118, 142, 143, 152, 153, 162, 163, 167, 170, 171, 179, 221, 229, 231, 247], "group_delai": [7, 26, 37, 51, 60, 96, 179, 206, 242, 284, 285, 291], "group": [7, 26, 37, 51, 60, 96, 179, 206, 242, 290], "tau_g": [7, 26, 37, 51, 60, 96, 179, 242], "iir": [7, 9, 18, 61, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 125, 131, 241, 242, 243, 244, 247, 248, 254, 258, 284, 287, 290, 291], "q": [8, 142, 152, 172, 173, 174, 175, 176, 178, 179, 181, 185, 188, 209, 275, 291], "comput": [8, 26, 39, 40, 41, 42, 43, 59, 84, 107, 111, 121, 134, 142, 152, 156, 162, 166, 168, 170, 172, 173, 174, 175, 176, 177, 178, 193, 194, 216, 219, 222, 227, 233, 235, 284, 285, 287, 289, 291], "complementari": [8, 172, 173], "cumul": [8, 172, 173], "distribut": [8, 172, 173], "standard": [8, 172, 173], "normal": [8, 9, 11, 16, 125, 129, 132, 172, 173, 204, 205, 207, 208, 220, 223, 226, 241, 242, 244, 246, 247, 248, 253, 262, 263, 265, 287, 289], "mathcal": [8, 39, 172, 173, 174, 175, 176, 177, 178, 194, 212], "qinv": [8, 172, 173, 291], "invers": [8, 173], "closedlooppl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 278, 287, 291], "defin": [9, 51, 76, 194, 212, 223, 251, 275, 278, 285, 290], "perform": [9, 27, 52, 97, 166, 168, 206, 213, 272, 275, 278, 284, 285, 288, 290, 291], "close": [9, 16, 18, 278, 290, 291], "loop": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 145, 146, 147, 148, 149, 150, 151, 278, 290, 291], "pll": [9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 278, 290, 291], "meant": 9, "analysi": [9, 16, 280, 287, 290, 291], "onli": [9, 27, 35, 52, 58, 59, 64, 69, 73, 84, 89, 97, 105, 108, 134, 143, 153, 163, 169, 171, 189, 194, 204, 205, 207, 208, 222, 225, 226, 250, 263, 273, 282, 287, 288], "block": [9, 26, 37, 94, 96, 125, 144, 179, 210, 211], "bb": [9, 286, 287], "phase_err": [9, 287], "ped": [9, 15, 16, 129, 134, 138, 139, 140, 156, 157, 158, 159, 160, 161, 278, 287], "lf": [9, 287], "phase_est": [9, 287], "lo": [9, 287], "nco": [9, 12, 16, 129, 144, 145, 146, 147, 148, 149, 150, 151, 278, 287, 290, 291], "local": [9, 279, 287], "oscil": [9, 144, 147, 278, 287, 290, 291], "detector": [9, 15, 16, 39, 129, 134, 141, 156, 161, 174, 287, 291], "filter": [9, 13, 14, 16, 18, 26, 27, 28, 31, 32, 33, 35, 36, 37, 38, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 105, 106, 107, 114, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 142, 152, 162, 170, 179, 180, 181, 184, 186, 187, 189, 190, 204, 205, 206, 207, 208, 209, 213, 223, 226, 240, 241, 242, 243, 244, 247, 248, 254, 258, 259, 262, 263, 265, 272, 278, 289, 290, 291], "numer": [9, 144, 147, 278, 285, 287, 290, 291], "control": [9, 134, 144, 147, 262, 265, 278, 287, 290, 291], "The": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 72, 73, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 94, 96, 97, 98, 101, 102, 103, 104, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 292], "transfer": [9, 18, 37, 51, 76, 77, 94, 125, 223, 284, 285, 287], "2nd": [9, 125, 129, 278, 287, 291], "proport": [9, 13, 27, 97, 125, 126, 129, 222, 234, 278, 291], "plu": [9, 125, 129, 278, 291], "z": [9, 37, 51, 76, 94, 125, 144, 210, 211, 275, 284, 285, 287], "k_1": [9, 13, 125, 126, 287], "k_2": [9, 14, 125, 127, 287], "frac": [9, 17, 19, 22, 23, 37, 39, 40, 41, 43, 51, 57, 76, 94, 98, 125, 152, 162, 170, 174, 175, 176, 181, 192, 193, 194, 195, 202, 214, 215, 217, 218, 220, 222, 223, 229, 230, 231, 233, 234, 264, 267, 268, 274, 275, 287], "k_0": [9, 12, 16, 129, 144, 145, 147, 287], "k_p": [9, 15, 16, 129, 134, 141, 156, 161, 287], "refer": [9, 17, 19, 20, 21, 22, 23, 39, 40, 41, 43, 44, 69, 125, 134, 136, 137, 138, 156, 157, 166, 168, 174, 175, 176, 178, 192, 194, 202, 204, 205, 206, 207, 208, 209, 220, 221, 223, 225, 233, 259, 262, 265, 266, 273, 275, 285, 289, 290], "michael": [9, 17, 19, 20, 21, 22, 23, 125, 134, 156, 262, 265], "rice": [9, 17, 19, 20, 21, 22, 23, 125, 134, 156, 262, 265], "digit": [9, 17, 19, 20, 21, 22, 23, 125, 134, 156, 166, 168, 262, 265, 287, 290, 291], "commun": [9, 17, 19, 20, 21, 22, 23, 125, 134, 156, 166, 168, 209, 259, 262, 265, 287, 290], "discret": [9, 17, 19, 20, 21, 22, 23, 37, 94, 125, 134, 156, 194, 212, 218, 262, 265, 268, 277, 283, 287, 290, 291], "approach": [9, 17, 19, 20, 21, 22, 23, 125, 134, 156, 195, 198, 201, 262, 265, 287], "appendix": [9, 125, 262, 265], "lock": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 145, 146, 147, 148, 149, 150, 151], "exampl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 33, 35, 36, 37, 38, 40, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 103, 105, 106, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 162, 166, 167, 168, 169, 170, 172, 173, 175, 177, 179, 182, 183, 187, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 287], "see": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 35, 38, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 85, 87, 88, 89, 90, 92, 93, 95, 105, 125, 126, 127, 128, 129, 130, 131, 132, 133, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 162, 167, 169, 170, 179, 189, 204, 205, 207, 208, 213, 223, 226, 241, 242, 243, 244, 247, 248, 254, 258, 262, 263, 265, 290], "noise_bandwidth": [9, 16, 125, 129, 132], "damping_factor": [9, 16, 125, 129, 130], "creat": [9, 16, 26, 28, 37, 38, 44, 45, 51, 53, 69, 71, 76, 77, 79, 94, 95, 96, 97, 98, 107, 108, 125, 129, 142, 143, 144, 147, 152, 153, 162, 163, 167, 170, 171, 179, 181, 194, 196, 220, 221, 225, 231, 266, 269, 270, 273, 275, 283, 287, 289], "object": [9, 16, 26, 29, 30, 37, 44, 45, 51, 55, 56, 76, 80, 81, 94, 96, 99, 100, 107, 108, 109, 110, 142, 143, 152, 153, 154, 155, 162, 163, 164, 165, 170, 171, 179, 182, 183, 225, 241, 242, 243, 244, 247, 248, 254, 258, 273, 287, 291], "phase_lock_tim": [9, 23], "frequency_lock_tim": [9, 17], "freq_offset": [9, 17, 19], "lock_tim": [9, 19, 287], "phase_error_vari": [9, 22], "cn0": [9, 22], "varianc": [9, 22, 39, 41, 43, 176, 178, 194], "steadi": [9, 22], "state": [9, 22, 26, 27, 35, 37, 51, 52, 58, 64, 65, 67, 69, 73, 74, 76, 89, 90, 92, 94, 96, 97, 105, 179, 189, 291], "sample_r": [9, 16, 24, 26, 59, 60, 63, 84, 96, 97, 142, 152, 162, 170, 179, 213, 221, 231, 240, 241, 242, 244, 246, 247, 248, 249, 250, 253, 256, 269, 270, 272, 283, 287, 289], "bnt": [9, 11, 287], "bandwidth": [9, 10, 11, 16, 20, 125, 129, 132, 195, 204, 205, 223, 262, 265, 287, 289], "b_n": [9, 10, 11, 16, 17, 19, 22, 23, 125, 129, 132], "bn": [9, 10], "hz": [9, 10, 16, 17, 19, 22, 59, 60, 63, 84, 125, 129, 132, 195, 203, 213, 221, 222, 223, 230, 231, 234, 269, 270, 274, 283], "zeta": [9, 16, 25, 125, 129, 130], "damp": [9, 16, 25, 125, 129, 130, 287], "k0": [9, 12, 16, 129, 144, 145, 147, 287], "kp": [9, 15, 16, 129, 287], "k1": [9, 13, 125, 126, 287], "k2": [9, 14, 125, 127, 287], "repres": [9, 18, 197, 198], "omega_n": [9, 21, 287], "natur": [9, 21], "radian": [9, 20, 21, 22, 134, 137, 139, 140, 144, 146, 147, 148, 149, 150, 156, 157, 159, 160, 170, 287], "omega_3db": [9, 20], "3": [9, 17, 19, 20, 23, 26, 33, 36, 37, 39, 40, 44, 55, 56, 59, 80, 81, 84, 94, 96, 97, 103, 106, 134, 142, 144, 152, 156, 162, 166, 167, 168, 169, 170, 174, 175, 179, 182, 183, 187, 190, 192, 194, 195, 196, 197, 199, 200, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 239, 240, 241, 242, 243, 244, 247, 248, 254, 256, 258, 259, 262, 263, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 279, 280, 285, 287, 289, 290], "omega_": [9, 20], "textrm": [9, 20], "properti": [10, 11, 12, 13, 14, 15, 18, 20, 21, 24, 25, 31, 32, 33, 34, 36, 57, 62, 65, 67, 68, 72, 74, 75, 82, 83, 85, 87, 88, 90, 92, 93, 101, 102, 103, 104, 106, 112, 117, 118, 119, 120, 122, 123, 124, 126, 127, 130, 131, 132, 135, 136, 141, 145, 148, 149, 161, 167, 169, 184, 185, 186, 187, 188, 190, 191, 291], "paramet": [16, 17, 19, 22, 27, 28, 38, 40, 41, 42, 43, 46, 47, 48, 50, 52, 53, 59, 60, 61, 63, 66, 70, 71, 73, 77, 78, 79, 84, 86, 91, 95, 97, 98, 108, 111, 113, 114, 115, 116, 121, 128, 129, 137, 138, 139, 140, 143, 146, 147, 151, 153, 157, 159, 160, 163, 166, 168, 171, 172, 173, 175, 176, 177, 178, 181, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275], "where": [16, 27, 52, 97, 108, 125, 129, 132, 163, 171, 174, 194, 195, 212, 214, 215, 217, 223, 267, 275, 284, 285, 290], "period": [16, 125, 129, 132, 142, 275], "second": [16, 17, 19, 23, 44, 125, 129, 132, 223], "critic": [16, 25, 125, 129, 130, 287], "underdamp": [16, 25, 125, 129, 130], "overdamp": [16, 25, 125, 129, 130], "ted": [16, 129], "t_": [17, 19, 23, 70, 223, 289], "fl": [17, 19], "delta": [17, 19, 26, 37, 51, 61, 76, 86, 94, 96, 179, 206, 243, 284, 285], "take": [17, 19, 23, 279], "onto": [17, 19, 23], "39": 17, "pl": [19, 23, 280], "38": 19, "34": [20, 256], "33": 21, "sigma_": [22, 39, 40, 42], "theta_": [22, 134, 137, 156, 157], "carrier": [22, 162], "43": 22, "40": [23, 96, 179, 213], "less": [25, 192], "than": [25, 142, 143, 153, 163, 169, 171, 192, 226, 229, 239, 255, 263], "greater": [25, 262, 265], "fir": [26, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 96, 97, 98, 99, 100, 101, 103, 105, 106, 179, 180, 181, 182, 183, 184, 187, 189, 190, 204, 205, 206, 207, 208, 209, 240, 241, 242, 243, 244, 247, 248, 254, 258, 259, 286, 290, 291], "note": [26, 33, 36, 37, 39, 40, 41, 43, 51, 76, 94, 96, 103, 106, 125, 134, 144, 156, 174, 175, 176, 178, 179, 187, 190, 192, 194, 195, 198, 201, 206, 210, 211, 223, 229, 234, 240, 259, 275], "equival": [26, 96, 179, 194, 195, 204, 205, 206, 207, 208, 218, 225, 268, 273, 281, 283], "first": [26, 31, 44, 96, 98, 101, 142, 150, 152, 179, 181, 184, 232, 256, 271, 280, 282], "prototyp": [26, 33, 36, 96, 103, 106, 179, 187, 190], "feedforward": [26, 28, 33, 36, 37, 51, 53, 68, 76, 79, 83, 94, 96, 98, 103, 106, 179, 181, 187, 190, 241, 242, 243, 244, 247, 248, 254, 258, 284, 285], "coeffici": [26, 28, 51, 53, 76, 79, 96, 98, 107, 120, 124, 142, 152, 162, 170, 179, 181, 241, 242, 243, 244, 247, 248, 254, 258, 284, 285], "discard": [26, 179], "each": [26, 27, 52, 96, 97, 179, 220, 228, 246, 250, 253], "instead": [26, 96, 179, 239], "ar": [26, 27, 28, 33, 36, 38, 39, 44, 46, 47, 48, 50, 52, 53, 71, 77, 79, 95, 96, 97, 98, 103, 106, 107, 108, 120, 124, 142, 143, 146, 152, 153, 162, 163, 170, 171, 174, 179, 181, 187, 190, 195, 197, 198, 200, 201, 206, 222, 225, 226, 232, 239, 240, 241, 242, 244, 246, 247, 248, 249, 250, 253, 255, 256, 257, 259, 263, 269, 270, 273, 279, 281, 283, 285, 287, 289, 290, 292], "commut": [26, 96, 179], "parallel": [26, 96, 179], "output": [26, 27, 31, 37, 51, 52, 61, 66, 76, 77, 79, 86, 91, 94, 95, 96, 97, 98, 101, 114, 125, 128, 144, 146, 150, 151, 179, 181, 184, 194, 195, 196, 197, 198, 200, 201, 211, 212, 220, 225, 230, 232, 243, 254, 271, 273, 276, 279, 283, 284, 285, 287], "sum": [26, 39, 51, 76, 174, 289], "prevent": [26, 96, 152, 170, 179], "need": [26, 96, 179, 279, 280, 282], "done": [26, 279], "case": [26, 96, 170, 174, 179], "3x": [26, 96], "6": [26, 33, 36, 37, 44, 55, 56, 80, 81, 84, 94, 96, 97, 103, 106, 134, 142, 144, 152, 162, 169, 170, 175, 176, 178, 179, 187, 190, 192, 199, 203, 206, 212, 213, 214, 215, 220, 222, 224, 225, 228, 230, 234, 239, 240, 241, 242, 243, 244, 247, 248, 254, 255, 256, 258, 259, 262, 265, 269, 270, 272, 273, 275, 279, 282, 284, 285, 287, 288], "9": [26, 33, 36, 59, 84, 96, 97, 103, 106, 142, 152, 162, 170, 175, 179, 187, 190, 192, 199, 212, 220, 224, 225, 228, 259, 262, 265, 273, 279, 285, 286, 288, 289], "v": [26, 144, 203, 230, 279], "5": [26, 33, 36, 37, 39, 40, 41, 42, 43, 44, 55, 56, 59, 94, 96, 97, 103, 106, 134, 142, 144, 152, 162, 170, 175, 177, 179, 187, 190, 192, 194, 197, 199, 200, 201, 204, 205, 206, 207, 208, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 228, 229, 234, 237, 240, 241, 242, 243, 244, 247, 248, 254, 256, 258, 259, 262, 265, 266, 267, 268, 269, 270, 272, 273, 275, 279, 283, 284, 285, 286, 287, 288, 289], "7": [26, 29, 30, 33, 36, 96, 97, 99, 100, 103, 106, 134, 142, 152, 156, 162, 169, 170, 175, 179, 187, 190, 192, 199, 206, 207, 209, 212, 220, 224, 225, 228, 259, 273, 275, 279, 280, 281, 285, 287], "8": [26, 33, 36, 37, 40, 42, 59, 80, 81, 84, 94, 96, 97, 103, 106, 108, 134, 142, 143, 144, 152, 153, 156, 162, 163, 166, 167, 168, 169, 170, 171, 175, 177, 179, 187, 190, 192, 194, 195, 196, 198, 199, 201, 204, 205, 206, 207, 208, 209, 212, 213, 220, 222, 223, 224, 225, 226, 228, 231, 234, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 252, 254, 255, 256, 257, 258, 259, 262, 263, 265, 269, 270, 272, 273, 275, 284, 285, 286, 287, 289], "summat": 26, "bottom": [26, 96, 179], "top": [26, 96, 179], "adder": [26, 125, 144, 210, 211, 287], "relat": [26, 33, 36, 96, 103, 106, 179, 187, 190, 195, 223], "In": [26, 27, 28, 29, 30, 33, 36, 37, 38, 40, 42, 44, 52, 53, 55, 56, 59, 67, 71, 74, 77, 79, 80, 81, 84, 92, 94, 95, 96, 97, 98, 99, 100, 103, 106, 134, 142, 144, 152, 156, 162, 166, 167, 168, 169, 170, 172, 173, 175, 177, 179, 181, 182, 183, 187, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 283, 288], "np": [26, 33, 36, 40, 42, 59, 80, 81, 84, 96, 97, 103, 106, 107, 119, 123, 142, 144, 152, 162, 166, 168, 169, 170, 175, 177, 179, 187, 190, 192, 194, 195, 196, 197, 198, 200, 201, 212, 213, 220, 221, 222, 225, 229, 231, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 252, 254, 256, 258, 259, 266, 269, 270, 272, 273, 275, 283, 284, 285, 286, 287, 288, 289], "co": [26, 96, 97, 179, 231], "64": [26, 206, 228, 285], "arang": [26, 33, 36, 96, 97, 103, 106, 179, 187, 190, 194, 196, 213, 225, 231, 259, 269, 270, 272, 273, 275, 283, 287], "280": 26, "out": [26, 29, 33, 36, 44, 55, 59, 80, 84, 96, 97, 99, 103, 106, 134, 142, 152, 162, 167, 169, 170, 172, 173, 179, 182, 187, 190, 196, 197, 199, 200, 203, 210, 211, 212, 214, 215, 217, 218, 220, 222, 224, 225, 230, 232, 234, 237, 257, 259, 260, 261, 267, 268, 271, 273, 274], "plt": [26, 37, 40, 42, 94, 96, 97, 134, 142, 144, 152, 156, 162, 166, 167, 168, 169, 170, 175, 177, 179, 192, 194, 195, 196, 198, 201, 204, 205, 206, 207, 208, 209, 213, 220, 221, 222, 223, 225, 226, 229, 231, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 252, 254, 255, 256, 258, 262, 263, 265, 266, 269, 270, 272, 273, 275, 283, 284, 285, 286, 287, 288, 289], "figur": [26, 37, 40, 42, 94, 96, 97, 134, 142, 144, 152, 156, 162, 166, 167, 168, 169, 170, 175, 177, 179, 192, 194, 195, 196, 198, 201, 204, 205, 206, 207, 208, 209, 213, 220, 221, 222, 223, 225, 226, 229, 231, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 252, 254, 255, 256, 257, 258, 262, 263, 265, 266, 269, 270, 272, 273, 275, 283, 284, 285, 286, 287, 288, 289], "figsiz": [26, 37, 40, 42, 94, 96, 97, 134, 142, 144, 152, 156, 162, 166, 167, 168, 169, 170, 175, 177, 179, 192, 194, 195, 196, 198, 201, 204, 205, 206, 207, 208, 209, 213, 220, 221, 222, 223, 225, 226, 229, 231, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 252, 254, 255, 256, 257, 258, 262, 263, 265, 266, 269, 270, 272, 273, 275, 283, 284, 285, 286, 287, 288, 289], "plot": [26, 37, 40, 42, 59, 60, 61, 63, 66, 84, 86, 91, 94, 96, 97, 134, 142, 144, 152, 156, 162, 166, 167, 168, 169, 170, 175, 177, 179, 194, 195, 196, 198, 201, 204, 205, 206, 207, 208, 209, 213, 220, 221, 222, 223, 225, 226, 229, 231, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 262, 263, 265, 266, 269, 270, 272, 273, 275, 283, 284, 285, 287, 288, 289, 290, 291], "marker": [26, 96, 97, 144, 179, 239, 255, 256, 283, 284, 285, 288], "label": [26, 37, 40, 42, 94, 96, 97, 134, 143, 153, 156, 163, 166, 168, 171, 175, 177, 179, 192, 194, 204, 205, 206, 207, 208, 220, 221, 223, 225, 229, 238, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 252, 253, 256, 262, 265, 266, 273, 283, 286, 287, 288, 289], "o": [26, 96, 97, 179, 283], "titl": [26, 37, 94, 96, 134, 142, 144, 152, 156, 166, 168, 179, 192, 194, 195, 196, 198, 201, 213, 220, 221, 225, 229, 231, 238, 252, 256, 266, 269, 270, 272, 273, 275, 283, 286, 287, 288, 289], "tight_layout": [26, 37, 94, 96, 134, 142, 144, 152, 156, 166, 168, 179, 192, 194, 195, 196, 198, 201, 213, 220, 221, 222, 225, 231, 238, 252, 256, 266, 269, 270, 272, 273, 275, 286, 287, 288, 289], "preserv": [26, 28, 38, 53, 67, 71, 74, 77, 79, 92, 95, 96, 98, 179, 181, 240, 250], "call": [26, 27, 28, 38, 52, 53, 67, 71, 74, 77, 79, 92, 95, 96, 97, 98, 179, 181], "true": [26, 40, 41, 42, 43, 59, 84, 96, 97, 134, 139, 140, 142, 152, 156, 159, 160, 162, 166, 168, 170, 175, 176, 177, 178, 179, 192, 193, 195, 197, 198, 200, 201, 212, 216, 222, 225, 231, 235, 236, 239, 248, 250, 255, 256, 257, 264, 273, 286, 287, 288], "y1": [26, 96, 97, 179, 229], "70": [26, 228], "y2": [26, 96, 97, 179, 229], "140": [26, 213], "y3": [26, 96, 97, 179], "210": 26, "y4": [26, 96, 179], "y5": [26, 96, 179], "flush": [26, 27, 37, 51, 52, 58, 96, 97, 179, 291], "y_1": [26, 96, 179, 229], "y_2": [26, 96, 179, 229], "y_3": [26, 96, 179], "y_4": [26, 96, 179], "y_5": [26, 96, 179], "__call__": [26, 27, 28, 37, 38, 51, 52, 53, 67, 69, 70, 71, 74, 76, 77, 78, 79, 92, 94, 95, 96, 97, 98, 125, 128, 134, 137, 144, 146, 156, 157, 179, 180, 181, 291], "full": [26, 27, 52, 96, 97, 179, 180, 196, 225, 273], "__len__": [26, 37, 51, 54, 96, 179], "__repr__": [26, 29, 37, 51, 55, 76, 80, 94, 96, 99, 107, 109, 142, 152, 154, 162, 164, 170, 179, 182], "style": [26, 29, 37, 51, 55, 76, 80, 94, 96, 99, 107, 109, 142, 152, 154, 162, 164, 170, 179, 182, 257], "__str__": [26, 30, 37, 51, 56, 76, 81, 94, 96, 100, 107, 110, 142, 152, 155, 162, 165, 170, 179, 183], "human": [26, 30, 37, 51, 56, 76, 81, 94, 96, 100, 107, 110, 142, 152, 155, 162, 165, 170, 179, 183], "readabl": [26, 30, 37, 51, 56, 76, 81, 94, 96, 100, 107, 110, 142, 152, 155, 162, 165, 170, 179, 183], "reset": [26, 35, 37, 51, 64, 69, 73, 76, 89, 94, 96, 105, 125, 133, 144, 150, 179, 189], "when": [26, 35, 37, 51, 58, 61, 64, 66, 76, 86, 89, 91, 94, 96, 105, 179, 189, 194, 195, 197, 198, 200, 201, 218, 225, 241, 242, 243, 244, 247, 248, 254, 268, 273, 275, 283, 284, 285], "pass": [26, 37, 51, 58, 96, 179, 194, 197, 200, 212, 220, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 277, 279, 281, 284, 285, 291], "through": [26, 37, 51, 58, 96, 152, 170, 179, 197, 200, 212, 277, 284, 285, 287], "indic": [26, 28, 31, 37, 38, 41, 42, 43, 51, 53, 67, 69, 71, 74, 76, 77, 79, 92, 94, 95, 96, 98, 101, 107, 108, 142, 143, 152, 153, 162, 163, 166, 168, 170, 171, 175, 176, 177, 178, 179, 181, 184, 193, 216, 223, 226, 229, 231, 235, 236, 240, 248, 249, 250, 256, 262, 263, 264, 265, 273], "whether": [26, 28, 37, 38, 41, 42, 43, 51, 53, 67, 69, 71, 74, 76, 77, 79, 92, 94, 95, 96, 98, 166, 168, 175, 176, 177, 178, 179, 181, 193, 216, 231, 235, 236, 248, 250, 256, 264], "consist": [26, 37, 46, 47, 48, 49, 50, 51, 65, 96, 179], "previou": [26, 28, 37, 38, 51, 53, 65, 71, 73, 77, 79, 95, 96, 98, 179, 181, 210, 211], "u": [26, 37, 51, 66, 76, 91, 94, 96, 179, 192, 254, 275, 276, 284, 285], "frequency_respons": [26, 37, 51, 59, 76, 84, 94, 96, 179, 291], "numpi": [26, 37, 51, 59, 76, 84, 94, 96, 146, 179, 194, 197, 200, 212, 271, 280, 283, 284, 285, 286, 287, 288, 289, 290], "float64": [26, 37, 51, 59, 76, 84, 94, 96, 144, 146, 179, 196, 225, 273, 276], "complex128": [26, 37, 51, 59, 76, 84, 94, 96, 144, 146, 179], "custom": [26, 32, 96, 102, 108, 153, 163, 171, 179, 186, 204, 205, 207, 208, 291], "multir": [26, 27, 28, 32, 96, 97, 98, 102, 179, 181, 186, 209, 259, 291], "polyphase_tap": [26, 30, 33, 36, 96, 97, 100, 103, 106, 179, 183, 187, 190], "index": [26, 31, 69, 73, 96, 101, 107, 142, 152, 162, 170, 179, 184, 225, 240, 249, 250, 255, 273, 276, 279], "correspond": [26, 31, 44, 49, 96, 101, 179, 184, 250], "mode": [27, 28, 35, 38, 52, 53, 58, 64, 67, 69, 71, 73, 74, 77, 79, 89, 92, 95, 97, 98, 105, 180, 181, 189, 196, 225, 273, 275], "l": [27, 52, 78, 97, 206], "stream": [27, 28, 29, 30, 35, 38, 52, 53, 55, 56, 58, 64, 67, 69, 71, 73, 74, 77, 79, 80, 81, 89, 92, 95, 97, 98, 99, 100, 105, 142, 152, 162, 170, 181, 182, 183, 189, 285], "convolut": [27, 52, 96, 97], "ha": [27, 52, 96, 97, 142, 152, 162, 194, 204, 205, 206, 207, 208, 213, 222, 223, 234, 272, 275, 287, 288, 289], "align": [27, 52, 97, 98, 152, 181, 225, 273, 283], "howev": [27, 46, 47, 48, 50, 52, 97, 125, 198, 201, 225, 273, 283], "produc": [27, 52, 96, 97, 179, 223, 289], "final": [27, 52, 97], "dictat": [27, 52, 97], "argument": [27, 28, 52, 97, 98, 181, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 280, 284, 285], "specif": [28, 49, 59, 84, 98, 181, 282, 289], "npt": [28, 59, 84, 98, 108, 143, 153, 163, 171, 181, 204, 205, 207, 208, 241, 242, 243, 244, 247, 248, 254, 258], "string": [29, 30, 55, 56, 80, 81, 99, 100, 108, 109, 110, 153, 154, 155, 163, 164, 165, 171, 182, 183, 228, 246, 253, 291], "represent": [29, 30, 55, 56, 80, 81, 99, 100, 109, 110, 154, 155, 164, 165, 182, 183, 255, 291], "print": [30, 56, 81, 100, 183, 228, 283, 284, 285, 287], "167": [30, 100], "24": [30, 100, 183], "shape": [30, 56, 81, 97, 100, 107, 108, 114, 116, 119, 120, 124, 142, 152, 153, 162, 163, 170, 171, 183, 223, 226, 240, 256, 262, 263, 265, 285, 290, 291], "12": [30, 96, 142, 152, 162, 170, 176, 178, 192, 199, 209, 224, 259, 284, 288, 291], "befor": [33, 36, 103, 106, 187, 190, 292], "decomposit": [33, 36, 103, 106, 187, 190, 291], "after": [33, 36, 103, 106, 187, 190], "10": [33, 36, 37, 40, 42, 44, 94, 96, 97, 103, 106, 108, 142, 152, 153, 162, 163, 166, 168, 170, 171, 175, 177, 179, 187, 190, 192, 193, 194, 199, 203, 204, 205, 207, 208, 212, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 247, 248, 252, 254, 256, 258, 259, 262, 263, 264, 265, 266, 267, 268, 273, 283, 284, 285, 286, 287, 288, 289], "puls": [37, 94, 107, 108, 114, 116, 119, 120, 124, 142, 152, 153, 162, 163, 170, 171, 223, 226, 240, 256, 262, 263, 265, 290, 291], "deriv": 37, "d": [37, 51, 57, 219, 222, 227, 234, 279, 281, 290], "lfloor": [37, 51, 57], "rfloor": [37, 51, 57], "null": [39, 174, 289], "altern": [39, 174, 285], "hypothes": [39, 174], "follow": [39, 44, 107, 142, 152, 162, 170, 229, 239, 250, 253, 255, 257, 259, 287], "assum": [39, 174, 194, 212, 232, 256, 271], "valu": [39, 107, 108, 111, 121, 142, 143, 152, 153, 162, 163, 166, 168, 170, 171, 172, 173, 196, 203, 210, 211, 223, 225, 229, 230, 239, 242, 244, 247, 248, 255, 273, 280, 285, 291], "random": [39, 142, 152, 162, 170, 194, 197, 200, 212, 220, 221, 229, 239, 240, 249, 256, 266, 286, 287, 288], "process": [39, 40, 41, 43, 174, 175, 176, 178, 209, 259, 285, 287, 290], "w": [39, 174, 194, 283, 284, 285, 286, 287, 288, 289], "sigma": [39, 40, 41, 42, 43, 174, 175, 176, 177, 178, 194, 195], "_0": [39, 174], "_1": [39, 174], "test": [39, 174, 280, 281, 290], "statist": [39, 40, 41, 43, 174, 175, 176, 178], "limits_": [39, 51, 76, 174], "left": [39, 40, 41, 76, 152, 156, 162, 170, 174, 175, 176, 178, 192, 193, 194, 195, 216, 219, 220, 222, 223, 229, 231, 234, 235, 236, 264, 275], "right": [39, 40, 41, 76, 152, 156, 162, 170, 174, 175, 176, 178, 192, 193, 194, 195, 216, 219, 220, 222, 223, 229, 231, 234, 235, 236, 264, 275], "gamma": [39, 41, 43, 174, 176, 178, 192], "sim": [39, 174, 194, 280], "chi_": [39, 40, 41], "2n": [39, 40, 41], "text": [39, 170, 174, 192, 193, 194, 195, 198, 201, 202, 203, 209, 220, 221, 222, 230, 233, 235, 236, 264, 266], "under": [39, 174], "detect": [39, 40, 41, 42, 43, 134, 137, 139, 140, 156, 157, 159, 160, 174, 175, 176, 177, 178, 192, 245, 251, 291], "threshold": [39, 41, 43, 174, 176, 178], "q_": [39, 40, 41, 43], "chi_n": [39, 40, 41, 43], "steven": [39, 40, 41, 43, 174, 175, 176, 178], "kai": [39, 40, 41, 43, 174, 175, 176, 178], "fundament": [39, 40, 41, 43, 174, 175, 176, 178], "theori": [39, 40, 41, 43, 174, 175, 176, 178], "section": [39, 46, 47, 48, 49, 50, 134, 156, 174, 285, 287], "static": [39, 40, 41, 42, 43, 174, 175, 176, 177, 178, 280], "n_nc": [39, 40, 41, 42, 43, 192], "number": [40, 41, 42, 43, 44, 46, 47, 50, 59, 60, 61, 63, 66, 84, 86, 91, 107, 108, 112, 122, 139, 140, 142, 143, 151, 152, 153, 159, 160, 162, 163, 170, 171, 192, 194, 197, 200, 212, 214, 215, 217, 223, 226, 228, 232, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 253, 254, 259, 262, 263, 265, 267, 271], "For": [40, 41, 43, 175, 176, 178, 194, 213, 222, 272, 279, 284], "linspac": [40, 59, 84, 166, 168, 175, 195, 198, 201, 222, 238, 252, 285, 286, 287, 288], "20": [40, 42, 96, 97, 142, 144, 152, 162, 170, 175, 179, 192, 195, 197, 200, 203, 212, 220, 221, 228, 229, 230, 236, 259, 264, 272, 286, 288, 291], "101": [40, 42, 175, 177, 204, 205, 207, 208], "25": [40, 197, 200, 206, 212, 237, 240, 260, 261, 283, 286, 287, 289], "1e": [40, 175, 221, 288], "sigma2": [41, 43, 176, 178], "If": [42, 73, 108, 146, 153, 163, 171, 177, 179, 193, 194, 195, 212, 216, 232, 235, 236, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 253, 254, 255, 256, 264, 269, 271, 290], "logspac": [42, 59, 84, 177, 192], "theoret": [42, 166, 168, 238, 252, 288, 291], "variou": [42, 280, 289], "100": [42, 59, 76, 84, 86, 91, 94, 144, 166, 168, 192, 194, 195, 198, 201, 203, 204, 205, 207, 208, 220, 230, 231, 238, 240, 241, 243, 249, 252, 254, 266, 269, 270, 272, 283, 287], "1_000": [42, 194, 221, 222, 229, 266, 286], "000": [42, 221], "5_000": 42, "measur": [44, 46, 134, 139, 140, 156, 159, 160, 193, 194, 202, 203, 216, 219, 220, 227, 230, 233, 235, 236, 264, 287, 290, 291], "new": [44, 45, 69, 71, 107, 108, 142, 143, 152, 153, 162, 163, 170, 171, 266], "accumul": [44, 144, 146, 147, 148, 150, 287], "from": [44, 60, 63, 76, 77, 94, 98, 107, 123, 142, 152, 162, 169, 170, 181, 203, 214, 215, 217, 218, 230, 237, 246, 253, 260, 261, 267, 268, 279, 284, 285, 287, 290], "contain": [44, 194, 228], "add": [44, 46, 49, 142, 152, 162, 170, 194, 221, 226, 250, 263, 266, 277, 288, 292], "total": [44, 223, 226, 262, 263, 265, 289], "count": [44, 47, 220], "error_r": [44, 48, 49, 288], "everi": [44, 283], "can": [44, 46, 47, 48, 50, 125, 142, 194, 220, 223, 225, 232, 240, 246, 253, 273, 281, 284, 285, 288, 290, 292], "obtain": 44, "tabul": [44, 45], "all": [44, 49, 146, 220, 240, 249, 250, 280, 282, 290], "ascend": [44, 49], "other": [46, 47, 48, 50, 283, 292], "quantiti": [46, 47, 48, 49, 50], "user": [46, 47, 48, 50, 284, 285], "caution": [46, 47, 48, 50], "instanc": [46, 47, 48, 50, 142], "transmit": [46, 107, 124, 134, 137, 142, 152, 156, 157, 162, 170, 220, 240], "e": [49, 134, 144, 156, 174, 175, 176, 177, 178, 193, 197, 198, 216, 275, 280, 281, 284, 285, 288], "whatev": 49, "wa": [49, 195], "provid": [49, 107, 111, 121, 142, 152, 162, 166, 168, 170, 250, 280, 290], "wrapper": [51, 76], "scipi": [51, 76, 204, 205, 207, 208, 246, 253, 289, 290], "convolv": 51, "It": [51, 76, 96, 108, 125, 134, 153, 163, 171, 194, 240], "support": [51, 76, 291], "one": [51, 76, 143, 152, 153, 163, 169, 171, 223, 228, 240, 241, 242, 244, 246, 247, 248, 253, 269, 284, 285, 286, 289], "its": [51, 76, 77, 94, 194, 284, 285, 289], "sum_": [51, 76, 176, 178, 193, 194, 195, 216, 219, 220, 227, 264], "valid": [52, 222, 240, 249, 250, 275], "same": [52, 97, 134, 156, 256, 284], "0013559842808217807": [55, 56], "005995136544658217": [55, 56], "008698817681933214": [55, 56], "0024103767414047302": [55, 56], "010205586837665018": [55, 56], "018983779931504997": [55, 56], "011950905288150394": [55, 56], "01518393864077397": [55, 56], "051622191325047306": [55, 56], "07210389837804473": [55, 56], "04745944982876247": [55, 56], "039173517569276436": [55, 56], "17918683372907862": [55, 56], "3367363220550604": [55, 56], "4611457574513795": [55, 56], "5084040873607553": [55, 56], "30": [56, 96, 179, 213, 241, 243, 254, 269, 270, 285, 291], "31": [56, 284], "15": [56, 134, 142, 177, 199, 224, 225, 259, 272, 273], "remain": [58, 213, 232], "1024": [59, 60, 63, 84, 241, 242, 244, 247, 248, 286, 289], "whole": [59, 84, 289], "decad": [59, 84, 241, 242, 244, 247, 248, 284, 287], "point": [59, 84, 139, 140, 159, 160, 246, 253], "endpoint": [59, 84, 285], "includ": [59, 84, 280, 281, 282, 290], "integ": [59, 84, 232], "maximum": [59, 84, 107, 113, 114, 134, 142, 152, 162, 170, 223, 226, 239, 255, 262, 263, 265, 278, 287], "max_f": [59, 84], "log10": [59, 84], "evenli": [59, 84], "00000000e": [59, 84, 169, 170, 285], "00": [59, 84, 169, 170, 285], "76562500e": [59, 84], "04": [59, 84, 228, 285], "95312500e": [59, 84], "03": [59, 84, 228, 285], "97070312e": [59, 84], "01": [59, 84, 169, 170, 228, 285, 287], "98046875e": [59, 84], "99023438e": [59, 84], "95337172": 59, "30202676j": 59, "8178049": 59, "5759632j": 59, "6058636": 59, "79630028j": 59, "rad": [59, 84], "0000000000000002": 59, "0j": [59, 84, 143, 153, 163, 171], "sever": [59, 84], "200": [59, 84, 213, 283, 288], "300": [59, 84, 269, 270], "400": [59, 84, 213, 283], "1000": [59, 84, 139, 140, 142, 152, 159, 160, 162, 170, 220, 222, 269, 270, 288], "00391660e": 59, "14686183e": 59, "17j": 59, "53081763e": 59, "88127210e": 59, "62720131e": 59, "03715849e": 59, "83622458e": 59, "27280811e": 59, "resampl": [69, 70, 71, 72, 73, 74, 75, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 209, 259, 290, 291], "http": [69, 192, 202, 204, 205, 206, 207, 208, 209, 223, 225, 233, 273, 275, 279, 280, 281], "wirelesspi": 69, "com": [69, 192, 204, 205, 206, 207, 208, 209, 223, 225, 273, 280, 281], "structur": 69, "should": [73, 134, 142, 240, 281], "equal": [73, 142], "three": [73, 283, 289], "lfilter": 76, "b_i": [76, 79, 83, 94, 241, 242, 243, 244, 247, 248, 254, 258, 285], "feedback": [76, 79, 82, 94, 241, 242, 243, 244, 247, 248, 254, 258, 285], "a_j": [76, 79, 82, 94, 241, 242, 243, 244, 247, 248, 254, 258, 285], "These": [76, 152, 162, 170, 257, 281, 287], "differ": [76, 143, 153, 163, 169, 171, 204, 205, 206, 207, 208, 225, 256, 273, 275, 289], "a_0": 76, "classmethod": [76, 77, 94], "zerospol": [76, 77, 80, 81, 84, 94, 241, 242, 243, 244, 247, 248, 254, 258, 285], "self": [76, 77, 94], "b_tap": [76, 81, 83, 94, 285], "a_tap": [76, 81, 82, 94, 285], "exp": [80, 81, 84, 146, 152, 162, 170, 213, 223, 229, 231, 241, 242, 243, 244, 247, 248, 254, 258, 270, 272, 275, 283, 285, 287], "1j": [80, 81, 84, 213, 231, 241, 242, 243, 244, 247, 248, 254, 258, 270, 272, 283, 285, 287], "conj": [80, 81, 84, 241, 242, 243, 244, 247, 248, 254, 258, 285, 287], "478207252018059": [80, 81, 285], "6400000000000001": [80, 81, 285], "7391036260090295": [81, 285], "3061467458920719j": [81, 285], "4722987": 84, "47271105": 84, "0041658j": 84, "47394825": 84, "00830241j": 84, "47601067": 84, "01238051j": 84, "472298696877605": 84, "36961426": 84, "9678537j": 84, "57338213": 84, "77694738j": 84, "52496713": 84, "3885743j": 84, "51520024": 84, "1706839j": 84, "insert": [96, 179], "multipli": [96, 179], "hold": [96, 98, 179, 181, 232, 291], "recommend": 96, "wai": [96, 281], "11": [96, 142, 152, 162, 170, 199, 209, 224, 225, 259, 273, 279], "zoh": [96, 98, 102, 179, 181, 186], "13": [96, 142, 152, 162, 170, 174, 175, 176, 178, 196, 199, 224, 256, 259, 291], "matlab": [96, 98, 102, 179, 181, 186, 290], "iter": 97, "concaten": [97, 285], "linearli": [98, 181], "2r": 98, "ramp": [98, 125, 181], "advanc": [98, 181], "ones": [98, 181, 204, 205, 207, 208, 287], "84": 100, "modul": [107, 108, 116, 117, 119, 134, 139, 140, 142, 144, 152, 153, 156, 159, 160, 162, 163, 166, 168, 170, 171, 214, 215, 217, 220, 238, 240, 249, 252, 255, 256, 267, 279, 282, 288, 290, 291], "nomenclatur": [107, 142, 152, 162, 170], "variabl": [107, 142, 144, 146, 152, 162, 170, 228, 287], "name": [107, 142, 152, 162, 170], "decis": [107, 113, 114, 134, 137, 140, 142, 152, 156, 157, 160, 162, 170, 240, 287], "tild": [107, 113, 114, 134, 137, 142, 152, 156, 157, 162, 170], "map_symbol": [107, 115, 142, 152, 162, 170, 194, 220, 221, 229, 239, 240, 266, 286, 287, 288, 291], "decide_symbol": [107, 113, 142, 152, 162, 170, 287, 288, 291], "a_tild": [107, 113, 142, 152, 162, 170, 287, 288], "likelihood": [107, 113, 114, 134, 142, 152, 162, 170, 278, 287], "mle": [107, 113, 142, 152, 162, 170], "match": [107, 108, 114, 120, 142, 152, 153, 162, 163, 170, 171, 291], "abstract": [107, 111, 121], "log_2": [107, 112, 142, 152, 162, 170, 195, 214, 215, 217, 267], "phase_offset": [107, 108, 118, 142, 143, 152, 153, 162, 163, 167, 170, 171, 194, 220, 221, 229, 239, 240, 255, 256, 266, 286, 287, 288], "degre": [107, 108, 118, 142, 143, 152, 153, 162, 163, 167, 170, 171, 221, 229, 231, 234, 287], "dot": [107, 108, 123, 142, 152, 162, 169, 170, 255], "mapsto": [107, 108, 123, 142, 152, 162, 169, 170, 255], "mathbb": [107, 108, 123, 142, 152, 162, 169, 170, 195, 255, 275], "sym": [107, 108, 122, 142, 143, 152, 153, 162, 163, 170, 171, 215, 218, 223, 267, 268, 289], "pulse_shap": [107, 108, 114, 116, 119, 142, 152, 153, 162, 163, 170, 171, 256, 286, 288], "tx_filter": [107, 124, 142, 152, 162, 170], "rx_filter": [107, 120, 142, 152, 162, 170], "rect": [108, 153, 163, 171, 289], "whose": [108, 143, 153, 162, 163, 171], "import": [108, 134, 153, 163, 171, 281, 283, 284, 285, 286, 287, 288, 289, 290], "roll": [108, 153, 163, 171, 275, 289], "off": [108, 153, 163, 171], "psd": [111, 121, 166, 168, 195, 214, 215, 217, 218, 238, 252, 267, 268], "p_b": 111, "x_tild": 114, "s_hat": [114, 287, 288], "size": [114, 116, 196, 212, 225, 256, 273, 283, 287, 288, 289], "p_e": 121, "loopfilt": [125, 126, 127, 128, 129, 130, 131, 132, 133, 278, 287, 291], "ppi": [125, 129, 278], "track": 125, "constant": [125, 142, 144, 147, 148, 246, 253, 285, 287], "cannot": 125, "chirp": 125, "underli": [125, 131], "mlped": [134, 135, 136, 137, 138, 139, 140, 141, 278, 287], "ml": [134, 138, 278, 287], "aid": [134, 139, 156, 159], "known": [134, 137, 156, 157, 194, 225, 273], "da": [134, 156], "im": 134, "cdot": [134, 156, 204, 205, 207, 208, 231], "re": [134, 174], "compar": [134, 156, 166, 168, 204, 205, 206, 207, 208, 289], "direct": [134, 140, 156, 160, 291], "qpsk": [134, 152, 156, 162, 166, 167, 168, 170, 194, 220, 221, 238, 239, 240, 252, 255, 256, 266, 287, 290, 291], "a_rx": 134, "a_ref": 134, "da_error": [134, 156], "data_aided_error": [134, 139, 156, 159], "dd_error": [134, 156], "decision_directed_error": [134, 140, 156, 160], "grid": [134, 156, 192, 195, 198, 201, 222, 257, 283, 286, 287, 289], "legend": [134, 156, 192, 204, 205, 206, 207, 208, 229, 283, 286, 287, 289], "xlabel": [134, 156, 192, 195, 196, 198, 201, 220, 222, 225, 273, 275, 283, 286, 287, 289], "ylabel": [134, 156, 192, 195, 196, 198, 201, 220, 222, 225, 273, 275, 283, 286, 287, 289], "comparison": [134, 156, 280], "observ": [134, 156, 206, 234, 240], "slope": [134, 156], "a_": [134, 135, 136, 138, 209], "rx": [134, 135, 138], "both": [134, 156, 192, 195, 239, 255, 256, 283, 287], "veri": [134, 290], "scale": [134, 241, 242, 244, 246, 247, 248, 253, 284, 285], "becaus": [134, 225, 273], "automat": 134, "agc": 134, "also": [134, 142, 156, 206, 222, 223, 290], "unambigu": [134, 156], "rang": [134, 156, 239, 287, 288], "a_receiv": [134, 135, 138], "a_refer": [134, 136, 138], "initi": [134, 138, 156, 158, 287], "scheme": [134, 139, 140, 142, 152, 156, 159, 160, 162, 170, 291], "settabl": [134, 135, 136, 144, 145, 148, 149], "either": [137, 157, 220], "modem": [139, 140, 142, 152, 159, 160, 162, 170], "n_point": [139, 140, 159, 160], "similar": [142, 152, 170, 289], "One": [142, 152, 170, 289], "distinct": [142, 152, 170], "result": [142, 152, 170, 193, 216, 222, 234, 235, 236, 262, 264, 265, 288], "envelop": [142, 284, 285], "which": [142, 152, 170, 192, 193, 194, 195, 216, 219, 221, 227, 229, 233, 234, 235, 239, 242, 244, 247, 248, 255, 266, 283, 287, 289], "lower": [142, 152, 170, 262, 265], "consid": [142, 228], "cpfsk": 142, "separ": 142, "45": [142, 143, 152, 153, 162, 167, 194, 220, 221, 229, 231, 239, 240, 255, 256, 266, 286, 287, 288], "symbol_label": [142, 143, 152, 153, 162, 163, 169, 170, 171, 288], "randint": [142, 152, 162, 170, 194, 197, 200, 212, 220, 221, 229, 239, 240, 249, 256, 266, 286, 287, 288], "uint8": [142, 152, 162, 170, 232, 271], "complex_symbol": [142, 152, 162, 170], "70710678": [142, 152, 162], "70710678j": [142, 152, 162], "linestyl": [142, 152, 162, 170, 239, 250, 255, 257, 275, 283, 287, 288, 289], "tx_sampl": [142, 152, 162, 170], "50": [142, 152, 162, 170, 203, 230, 237, 255, 256, 269, 270, 283, 286], "like": [142, 281, 290, 291], "channel": [142, 152, 166, 168, 195, 197, 198, 200, 201, 212, 238, 252, 290, 291], "subplot": [142, 152, 229, 287, 288], "imag": [142, 152, 283], "trajectori": 142, "although": 142, "boundari": 142, "lead": [142, 229, 288], "spectral": [142, 213, 246, 286, 289], "effici": [142, 213, 234, 272], "gmsk": 142, "rx_sampl": [142, 152, 162, 170], "last": [142, 152, 232, 279], "rx_symbol": [142, 152, 162, 170], "rx_complex_symbol": [142, 152, 162, 170], "_": [142, 152, 162, 170, 192, 220], "14": [142, 152, 162, 170, 175, 199, 224, 259], "array_equ": [142, 152, 162, 170, 225, 273], "bin": [143, 153, 163, 169, 171, 220, 239, 255, 288], "absolut": [143, 144, 147, 149, 153, 171, 195], "consecut": [143, 153, 163, 171], "adjac": [143, 153, 163, 169, 171, 288, 289], "mai": [143, 153, 163, 169, 171, 220, 239, 250, 253, 255, 257, 285], "more": [143, 153, 163, 169, 171, 291], "start": [143, 153, 163, 171, 279], "go": [143, 153, 163, 171], "counter": [143, 153, 163, 171], "clockwis": [143, 153, 163, 171], "around": [143, 153, 163, 171], "circl": [143, 153, 163, 171, 285], "increment": [144, 146, 147, 148, 287], "Then": 144, "fsk": 144, "60": [144, 204, 205, 207, 208, 289], "repeat": 144, "cp": 144, "57": 144, "bpsk": [144, 166, 168, 238, 252, 286], "forward": [144, 151], "vari": 146, "format": [146, 196, 225, 273], "option": [146, 241, 242, 244, 246, 247, 248, 253, 291], "intern": 150, "set": [150, 194, 222, 225, 239, 246, 250, 253, 255, 257, 273, 280, 282, 285], "convent": [152, 170], "transit": [152, 170, 200, 201, 212, 273, 277], "independ": 152, "apart": 152, "origin": [152, 170, 272, 283], "taken": [152, 162, 170], "jq": 152, "begin": [152, 170, 174], "end": [152, 170, 174, 269, 280], "heurist": [156, 278, 287], "dd": [156, 287, 291], "encod": [162, 166, 168, 210, 211, 290], "inform": [162, 214, 215, 217, 225, 267, 273], "ge": [163, 171, 192], "were": [166, 168], "simon": [166, 168], "alouini": [166, 168], "over": [166, 168, 228], "fade": [166, 168], "chapter": [166, 168, 209, 259], "john": [166, 168], "proaki": [166, 168], "optimum": [166, 168], "psk8": [166, 168, 238, 252, 288], "psk16": [166, 168, 238, 252, 288], "de": [166, 168, 287, 291], "se": [168, 252], "00j": [169, 170], "07106781e": [169, 170], "01j": [169, 170], "12323400e": [169, 170], "17": [169, 170, 234, 259, 279], "83697020e": 169, "22464680e": [169, 170], "16j": [169, 170], "annot": [169, 255, 291], "odd": [170, 206, 269], "rotat": [170, 231, 287], "rel": [170, 275, 289], "even": [170, 204, 205, 206, 207, 208, 223, 262, 265], "2m": 170, "displaystyl": 170, "pi4_qpsk": 170, "exceed": [172, 173], "15865525393145707": [172, 173], "158655": [172, 173], "0000010494310452": [172, 173], "perfect": 174, "knowledg": 174, "cn": [174, 194], "mathrm": 174, "sqrt": [174, 175, 176, 178, 192, 219, 220, 223, 264, 275, 286, 287, 289], "____": 179, "down": [179, 181, 185, 209, 259], "2p": 181, "95": [183, 220], "desir": [192, 194, 288], "ln": [192, 223], "62": [192, 228], "log_": [192, 193, 203, 216, 222, 233, 235, 236, 264], "54": [192, 228], "44": 192, "12ab": 192, "7b": 192, "claim": 192, "leq": 192, "le": [192, 206, 231, 234, 262, 265], "8096": 192, "radarsp": 192, "weebli": 192, "upload": 192, "21471216": 192, "albersheim_alternative_form": 192, "pdf": [192, 223], "bpb": 192, "w2": 192, "wpmucdn": 192, "site": [192, 279], "gatech": 192, "edu": 192, "dist": [192, 280], "462": 192, "file": [192, 280, 282], "2016": 192, "noncoher": 192, "approxim": [192, 291], "www": [192, 204, 205, 206, 207, 208, 209, 223, 225, 273], "mathwork": [192, 204, 205, 206, 207, 208, 209, 223, 225, 273], "help": [192, 204, 205, 206, 207, 208, 209, 223, 225, 273], "html": [192, 204, 205, 206, 207, 208, 209, 223, 225, 273, 279], "semilogx": [192, 251], "across": [192, 219, 227], "nuse": 192, "axi": [193, 216, 219, 227, 233, 235, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 253, 255, 256, 283, 291], "avg": [193, 194, 233], "ax": [193, 216, 219, 227, 233, 235, 257], "along": [193, 216, 219, 227, 233, 235, 291], "entir": [193, 216, 219, 227, 233, 235], "decibel": [193, 203, 216, 230, 235, 236, 264, 290, 291], "seed": [194, 197, 200, 212, 291], "ad": [194, 250, 280, 290, 291], "explicitli": 194, "must": [194, 204, 205, 207, 208, 223, 225, 231, 250, 262, 265, 273, 275], "default_rng": [194, 197, 200, 212], "noisi": 194, "sin": [194, 269], "zorder": [194, 221, 266], "infti": [194, 195], "nand": 194, "capac": [195, 198, 201, 290, 291], "2d": [195, 250], "x_i": [195, 197, 198, 200, 201, 212, 229], "y_i": [195, 197, 198, 200, 201, 212], "monoton": 195, "decreas": 195, "limit": [195, 239, 255, 288], "At": 195, "occur": 195, "view": [195, 280, 290], "59": 195, "shannon": 195, "semilogi": [195, 238, 251, 252], "barker": [196, 276, 290, 291], "int64": [196, 225, 273, 276], "bipolar": [196, 225, 273, 291], "sequenc": [196, 197, 200, 212, 225, 273, 275, 277, 290, 291], "seq": [196, 225, 273], "have": [196, 206, 213, 225, 232, 256, 271, 272, 273], "ideal": [196, 288], "minim": 196, "autocorrel": [196, 225, 273, 275], "sidelob": [196, 204, 205, 207, 208, 225, 262, 265, 273, 275], "corr": [196, 275], "lag": [196, 225, 273, 275], "ab": [196, 225, 273, 275, 289], "roughli": [197, 200, 283], "eras": 197, "flip": 200, "h_b": 201, "cf": 202, "v_": [202, 203, 230, 236, 264], "en": [202, 233, 275], "wikipedia": [202, 233, 275], "org": [202, 233, 275], "wiki": [202, 233, 275], "type": [203, 220, 230, 232, 246, 251, 253, 271, 291], "voltag": [203, 230, 236, 264, 290], "x_": [203, 230], "mhz": [203, 230], "77": [203, 228, 230], "50e6": 203, "76": [203, 228], "98970004336019": 203, "mw": [203, 230], "dbm": [203, 230], "dbv": [203, 230], "020599913279624": 203, "center_freq": [204, 205], "hann": [204, 205, 207, 208, 246, 253], "blackman": [204, 205, 207, 208], "harri": [204, 205, 207, 208, 209, 259], "chebyshev": [204, 205, 207, 208], "atten": [204, 205, 207, 208], "nyquist": [204, 205, 207, 208, 213, 240, 272, 289], "side": [204, 205, 223, 241, 242, 244, 246, 247, 248, 253, 284, 285, 286, 289], "about": [204, 205, 256, 282], "No": [204, 205, 207, 208], "blackmanharri": [204, 205, 207, 208], "chebwin": [204, 205, 207, 208], "attenu": [204, 205, 207, 208, 209, 262, 265], "dsp": [204, 205, 206, 207, 208, 209, 290], "designbandpassfir": 204, "h_ham": [204, 205, 207, 208], "h_hann": [204, 205, 207, 208], "h_blackman": [204, 205, 207, 208], "h_blackman_harri": [204, 205, 207, 208], "h_chebyshev": [204, 205, 207, 208], "h_kaiser": [204, 205, 207, 208], "ylim": [204, 205, 206, 207, 208, 275, 284, 287, 288, 289], "larger": [205, 226, 229, 239, 255, 263], "designbandstopfir": 205, "75": [205, 228, 239, 287, 288], "best": 206, "append": [206, 269, 286], "tau": 206, "l_": 206, "dc": 206, "designfracdelayfir": 206, "flat": 206, "h_8": [206, 262, 265], "h_16": [206, 262, 265], "h_32": 206, "32": [206, 283], "h_64": 206, "cutoff_freq": [207, 208], "cutoff": [207, 208], "f_c": [207, 208], "designhighpassfir": 207, "designlowpassfir": 208, "half_length": 209, "a_stop": 209, "80": [209, 275], "stopband": [209, 262, 265], "stop": 209, "fred": [209, 259], "system": [209, 218, 225, 259, 268, 273, 280, 282, 287, 290], "designmultiratefir": 209, "oplu": [210, 211, 227], "uncod": 211, "dmc": [212, 277, 290, 291], "memoryless": [212, 277, 290], "pr": 212, "y_j": 212, "alphabet": 212, "ldot": 212, "doe": [213, 272], "anti": [213, 272, 291], "alias": [213, 272, 291], "x1": 213, "x2": 213, "130": 213, "x3": [213, 275], "spectrum": [213, 241, 242, 244, 246, 247, 248, 253, 269, 270, 272], "content": 213, "abov": [213, 272], "fold": 213, "cw": 213, "unalias": 213, "fft": [213, 246, 253, 269, 270, 272], "2048": [213, 269, 270, 272, 286], "xlim": [213, 272, 286, 287, 289], "qam": [214, 215, 217, 267], "249387366082999": [214, 215], "020599913279625": [214, 268], "7506126339170005": [217, 267], "979400086720376": [217, 218], "norm": [220, 223, 226, 262, 263, 265], "noiseless": 220, "sourc": 220, "max": [220, 235, 236], "instantan": 220, "percentil": [220, 253], "861592490387": 220, "820548137116997": 220, "031179558382743": 220, "95th": 220, "749528770470125": 220, "inst_evm": 220, "hist": 220, "histogram": 220, "frequency_offset": [221, 277, 291], "freq_rat": 221, "cycl": [221, 256], "5e": 221, "deg": [221, 229, 287], "path": [222, 290], "loss": [222, 290], "meter": [222, 234, 274], "transmitt": 222, "far": 222, "field": 222, "neg": [222, 229], "impli": 222, "possibl": [222, 290], "so": [222, 223, 226, 262, 263, 265, 290], "km": 222, "link": [222, 290, 291], "ghz": [222, 234, 274], "1e3": [222, 231, 269], "1e9": [222, 234, 274], "92": 222, "44778322188337": 222, "doubl": [222, 234], "increas": [222, 234, 285], "2e3": 222, "98": 222, "468383135163": 222, "2e9": 222, "product": [223, 289], "thought": [223, 292], "smaller": [223, 262, 265, 289], "wider": 223, "how": [223, 226, 240, 249, 250, 256, 262, 263, 265, 273, 282], "gaussdesign": 223, "onlinelibrari": 223, "wilei": 223, "doi": 223, "1002": 223, "9780470041956": 223, "app2": 223, "h_0p1": [223, 262, 265], "h_0p2": 223, "h_0p3": 223, "hadamard": [225, 273, 276], "comm": [225, 273], "hadamardcod": 225, "walsh": [225, 273, 276], "thei": [225, 273, 292], "cross": [225, 273, 275], "seq1": [225, 273], "seq2": [225, 273], "seq3": [225, 273], "quit": [225, 273], "larg": [225, 273, 280], "misalign": [225, 273], "spread": [225, 273], "precis": [225, 273], "xcorr12": [225, 273], "xcorr13": [225, 273], "xcorr23": [225, 273], "uniform": [225, 273], "fact": [225, 273], "high": [225, 273], "acorr1": [225, 273], "acorr2": [225, 273], "acorr3": [225, 273], "reason": [226, 263, 279], "h_half_sin": 226, "displai": [228, 239, 241, 242, 244, 246, 247, 248, 253, 255], "line": [228, 256, 280, 286], "quick": 228, "brown": 228, "fox": 228, "jump": 228, "lazi": 228, "dog": 228, "00000000": 228, "68": 228, "65": 228, "71": 228, "69": 228, "63": 228, "6b": 228, "72": 228, "6f": 228, "6e": 228, "00000010": 228, "66": 228, "78": 228, "6a": 228, "6d": 228, "73": 228, "74": 228, "00000020": 228, "6c": 228, "61": 228, "7a": 228, "79": 228, "67": 228, "he": 228, "02": [228, 285, 287], "00000004": 228, "05": [228, 283, 285, 287], "06": 228, "07": 228, "08": 228, "00000008": 228, "09": 228, "0a": 228, "iq_imbal": [229, 277, 291], "iq": [229, 277, 290], "imbal": [229, 277, 290], "posit": 229, "compon": [229, 269, 270, 272], "g_i": 229, "180": 229, "g_q": 229, "x_q": 229, "horizont": 229, "stretch": 229, "while": [229, 289], "vertic": 229, "northwest": 229, "northeast": 229, "50118723": 230, "36272725": 230, "9952623149688795": 230, "satisfi": 231, "remov": [231, 246, 253, 291], "dtypelik": [232, 271], "most": [232, 271], "signific": [232, 271], "enough": 232, "fill": 232, "smallest": 232, "unsign": 232, "diamet": 234, "55": [234, 256], "eta": 234, "dbi": 234, "arcsin": 234, "83": 234, "dish": 234, "21": [234, 256], "810210290266568": 234, "437435887991374": 234, "23": 234, "sinc": [234, 240, 279, 288], "antenna": [234, 290], "we": [234, 290], "830810203546193": 234, "529544741425365": 234, "keyword": [238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 284, 285], "pyplot": [238, 239, 242, 243, 244, 245, 246, 247, 248, 252, 253, 254, 255, 256, 257, 258, 283, 284, 285, 286, 287, 288, 289], "heatmap": [239, 288], "scatter": 239, "overwritten": [239, 250, 253, 255], "hist2d": 239, "10_000": 239, "color": [240, 249, 250, 256, 286, 289], "imaginari": [240, 250, 256], "interleav": [240, 250], "base": [240, 249, 250, 256, 291], "examin": 240, "intersymbol": 240, "interfer": 240, "isi": 240, "cascad": 240, "why": 240, "often": [240, 283], "practic": 240, "n_time": [241, 285], "n_freq": 241, "x_axi": [241, 242, 244, 246, 247, 248, 253, 284, 285, 286, 287], "log": [241, 242, 244, 246, 247, 248, 284, 285, 287], "definit": [241, 242, 243, 244, 247, 248, 254, 258], "n_t": 241, "n_f": 241, "logarithm": [241, 242, 244, 246, 247, 248, 284, 285], "h_srrc": [241, 242, 243, 244, 247, 248, 254, 258, 288], "auto": [242, 244, 247, 248], "select": [242, 244, 247, 248, 280], "y_axi": [244, 246], "x_label": 245, "overlap": [246, 253, 286], "detrend": [246, 253], "median": 246, "segment": [246, 253], "256": [246, 253, 286], "trend": [246, 253], "unwrap": [248, 287], "stride": 250, "colorbar": 250, "1d": 250, "determin": 250, "row": 250, "collect": 250, "linecollect": 250, "linewidth": [250, 275], "solid": [250, 256], "cmap": 250, "rainbow": 250, "loglog": 251, "pcolormesh": 253, "vmin": 253, "10th": 253, "vmax": 253, "100th": 253, "shade": 253, "gouraud": 253, "markers": 255, "diff": [256, 286], "mutual": 256, "exclus": 256, "current": [256, 281], "dash": 256, "share": 256, "10e3": 256, "uniformli": 256, "randn": 256, "revert": 257, "rcdefault": 257, "_rc_param": 257, "rc_param": 257, "autolayout": 257, "max_open_warn": 257, "titleweight": 257, "bold": 257, "arrang": 259, "column": 259, "notion": 259, "demonstr": 259, "matric": 259, "18": [259, 279, 288], "19": [259, 291], "000005": 260, "5000": [260, 261], "000000025": 260, "005": [261, 287], "000025": 261, "excess": [262, 265, 289], "narrow": [262, 265], "expens": [262, 265], "higher": [262, 265, 289], "h_0p5": [262, 265], "h_0p9": [262, 265], "affect": [262, 265], "longer": [262, 265, 269], "h_4": [262, 265], "h_rect": [263, 289], "sample_rate_offset": [266, 277, 291], "250": [269, 270, 287], "ksp": [269, 270], "notic": [269, 270, 283, 289], "conjug": [269, 270, 285], "500": [269, 270, 287], "now": [269, 270, 283, 291], "150": [269, 270], "asymmetr": 270, "copi": 272, "mani": [273, 280], "walshcod": 273, "299792458": 274, "zadoff_chu": [275, 276, 291], "zadoff": [275, 276, 290, 291], "chu": [275, 276, 290, 291], "prime": 275, "gcd": 275, "ne": 275, "cyclic": 275, "x_u": 275, "c_": 275, "2q": 275, "mod": 275, "e2": 275, "93chu_sequ": 275, "x_3": 275, "139": 275, "tile": 275, "x_5": 275, "x5": 275, "xcorr": 275, "sphinx": 279, "immateri": 279, "theme": 279, "depend": [279, 280, 282], "store": [279, 281, 282], "txt": [279, 280, 281, 282], "some": 279, "below": [279, 284, 285], "version": [279, 281, 290], "aren": 279, "resolut": 279, "minut": 279, "ci": 279, "myst": 279, "parser": 279, "updat": 279, "git": [279, 281], "math": 279, "dollar": 279, "ipykernel": 279, "26": 279, "nb": 279, "pickleshar": 279, "switch": 279, "pip": [279, 280, 281, 282, 290], "python3": [279, 280, 281, 282, 290], "built": 279, "run": 279, "command": [279, 280], "dirhtml": 279, "locat": [279, 282], "home": 279, "page": 279, "directori": [279, 281], "get": 279, "necessari": 279, "webpag": 279, "webserv": 279, "easili": [279, 280, 282, 284, 285], "python": [279, 290], "server": 279, "8080": 279, "access": 279, "web": 279, "browser": 279, "localhost": 279, "librari": [280, 281, 282, 283, 288, 290, 292], "ruff": [280, 281, 291], "lint": [280, 281], "your": [280, 282], "develop": [280, 281, 282], "dev": [280, 282], "pyproject": [280, 282], "toml": [280, 281, 282], "tool": [280, 282, 290], "src": 280, "extend": 280, "ipynb": 280, "exclud": 280, "build": [280, 290], "_version": 280, "py": [280, 282], "120": 280, "doc": 280, "pycodestyl": 280, "pyflak": 280, "pyupgrad": 280, "flake8": 280, "bugbear": 280, "simplifi": 280, "isort": 280, "pylint": [280, 291], "npy": 280, "rule": 280, "ruf": 280, "ignor": 280, "e501": 280, "too": 280, "long": 280, "e713": 280, "e714": 280, "plr2004": 280, "magic": 280, "plr0913": 280, "plr5501": 280, "collaps": 280, "els": [280, 286], "plr0912": 280, "branch": [280, 281], "plr0915": 280, "statement": 280, "__init__": 280, "f401": 280, "f403": 280, "manual": [280, 282], "check": 280, "hook": 280, "config": [280, 283, 284, 285, 286, 287, 288, 289], "yaml": 280, "repo": [280, 281], "github": [280, 290], "rev": 280, "v2": 280, "id": 280, "fixer": 280, "trail": 280, "whitespac": 280, "astral": 280, "sh": 280, "v0": 280, "enabl": 280, "disabl": 280, "uninstal": 280, "extens": 280, "vscode": [280, 282], "json": [280, 282], "you": [280, 281, 282, 290], "edit": [280, 285], "latest": [281, 290], "releas": [281, 291], "main": [281, 289], "mhostett": [281, 291], "Or": [281, 282], "pre": 281, "To": 281, "activ": 281, "benefici": 281, "fashion": 281, "allow": [281, 282], "chang": [281, 292], "immedi": 281, "seen": 281, "upon": 281, "next": 281, "clone": 281, "wherev": 281, "flag": 281, "packag": [281, 290], "commit": 281, "pytest": [281, 282], "cov": 281, "xdist": 281, "benchmark": 281, "ini_opt": 282, "minvers": 282, "addopt": 282, "showloc": 282, "testpath": 282, "execut": 282, "test_psk": 282, "instruct": 282, "invok": 282, "infrastructur": 282, "debug": 282, "inlinebackend": [283, 284, 285, 286, 287, 288, 289], "print_figure_kwarg": [283, 284, 285, 286, 287, 288, 289], "facecolor": [283, 284, 285, 286, 287, 288, 289], "inlin": [283, 284, 285, 286, 287, 288, 289], "widget": [283, 284, 285, 286, 287, 288, 289], "tx": 283, "decai": [283, 285], "fillstyl": 283, "show": [283, 284, 285, 286, 287, 288, 289], "accomplish": [283, 288], "def": [283, 286, 288], "resample_sign": 283, "new_sample_r": 283, "ty": 283, "gca": [283, 288], "set_prop_cycl": [283, 288], "four": 283, "appear": 283, "fourth": 283, "do": 283, "315": 283, "00095883": 284, "00175012": 284, "00423921": 284, "0058825": 284, "006151": 284, "00474595": 284, "0017044": 284, "00254816": 284, "00721645": 284, "0112324": 284, "01342358": 284, "01273202": 284, "00845058": 284, "0004368": 284, "01073669": 284, "02372977": 284, "03650247": 284, "04650654": 284, "05098525": 284, "04734644": 284, "03355896": 284, "00851486": 284, "02769991": 284, "07367348": 284, "12670446": 284, "18301321": 284, "23810898": 284, "28727058": 284, "32607991": 284, "35093841": 284, "35949665": 284, "conveni": [284, 285], "evalu": [284, 285], "29": 284, "here": [284, 285], "47820725": 285, "78207252e": 285, "58172329e": 285, "10862468e": 285, "86109590e": 285, "21565653e": 285, "01140214e": 285, "57286400e": 285, "67772160e": 285, "47338728e": 285, "10422993e": 285, "89312837e": 285, "12240078e": 285, "03953322e": 285, "69685122e": 285, "63882791e": 285, "81474977e": 285, "47193366e": 285, "85259041e": 285, "15647504e": 285, "23851924e": 285, "42176895e": 285, "84684395e": 285, "42721858e": 285, "72236648e": 285, "14721649e": 285, "10813095e": 285, "94024315e": 285, "78877688e": 285, "74077567e": 285, "87820725": 285, "53637958": 285, "94724205": 285, "13335164": 285, "1455082": 285, "04436799": 285, "88708159": 285, "71930943": 285, "5719707": 285, "46154771": 285, "39261642": 285, "36139242": 285, "35935288": 285, "3763214": 285, "40270968": 285, "43085717": 285, "45557651": 285, "47410241": 285, "48566716": 285, "49090568": 285, "49124786": 285, "48840102": 285, "4839738": 285, "47925143": 285, "47510421": 285, "47199608": 285, "47005584": 285, "46917696": 285, "46911955": 285, "denomin": 285, "73910363": 285, "30614675j": 285, "plane": 285, "092337035029908": 285, "71104892744724": 285, "684365018955985": 285, "37868538208862": 285, "1263714068241546": 285, "9993519409971622": 285, "1909320767063554": 285, "016796159999999997": 285, "46380627201816593": 285, "3806359704987265j": 285, "4988817673791569": 285, "3333421398098428j": 285, "5543277195052645": 285, "22961005941814036j": 285, "5291527586123693": 285, "28283804209787544j": 285, "lyon": 285, "understand": 285, "3rd": 285, "insid": 285, "outsid": 285, "unstabl": 285, "n_symbol": 286, "pb": 286, "x_bb_rect": 286, "papr_bb_rect": 286, "x_pb_rect": 286, "papr_pb_rect": 286, "x_bb_0p1": 286, "papr_bb_0p1": 286, "x_pb_0p1": 286, "papr_pb_0p1": 286, "x_bb_0p5": 286, "papr_bb_0p5": 286, "x_pb_0p5": 286, "papr_pb_0p5": 286, "x_bb_0p9": 286, "papr_bb_0p9": 286, "x_pb_0p9": 286, "papr_pb_0p9": 286, "2f": 286, "rf": [286, 287], "512": 286, "sweep_alpha": 286, "bb_papr": 286, "pb_papr": 286, "bpsk_bb_papr": 286, "bpsk_pb_papr": 286, "qpsk_bb_papr": 286, "qpsk_pb_papr": 286, "psk8_bb_papr": 286, "psk8_pb_papr": 286, "psk16_bb_papr": 286, "psk16_pb_papr": 286, "configur": 287, "loop_filt": 287, "0x7f5982f38210": 287, "theta_0": 287, "phase_error": 287, "freq_estim": 287, "suptitl": [287, 288], "make": [287, 292], "a_hat": [287, 288], "rad2deg": 287, "avail": [287, 288, 290], "001": 287, "b_nt": 287, "0005": 287, "0125": 287, "015": 287, "0175": 287, "t_lock": 287, "analyze_psk": 288, "100_000": 288, "n0": 288, "tx_mf": 288, "1e6": 288, "bpsk_ber": 288, "bpsk_ser": 288, "qpsk_ber": 288, "qpsk_ser": 288, "psk8_ber": 288, "psk8_ser": 288, "psk16_ber": 288, "psk16_ser": 288, "simul": [288, 290], "1e0": 288, "psk8_bin": 288, "psk8_grai": 288, "wors": 288, "rc_0p1": 289, "rc_0p5": 289, "rc_0p9": 289, "pm": 289, "nearli": 289, "small": 289, "lobe": 289, "much": 289, "freqz": 289, "worn": 289, "h_rc_0p1": 289, "h_rc_0p5": 289, "h_rc_0p9": 289, "p_rect": 289, "cumsum": 289, "p_rc_0p1": 289, "p_rc_0p5": 289, "p_rc_0p9": 289, "within": 289, "srrc_0p1": 289, "srrc_0p5": 289, "srrc_0p9": 289, "therefor": 289, "significantli": 289, "due": 289, "being": 289, "h_srrc_0p1": 289, "h_srrc_0p5": 289, "h_srrc_0p9": 289, "p_srrc_0p1": 289, "p_srrc_0p5": 289, "p_srrc_0p9": 289, "gauss_0p1": 289, "gauss_0p2": 289, "gauss_0p3": 289, "softwar": 290, "radio": 290, "goal": 290, "analyz": 290, "reli": 290, "interoper": 290, "numba": 290, "acceler": 290, "computation": 290, "intens": 290, "addition": 290, "aim": 290, "replic": 290, "relev": 290, "toolbox": 290, "progress": 290, "someth": 290, "pleas": 290, "open": 290, "issu": 290, "pypi": 290, "api": [290, 292], "convers": [290, 291], "synchron": 290, "budget": [290, 291], "manipul": 290, "novemb": 291, "2023": 291, "abil": 291, "renam": 291, "multirate_tap": 291, "polyphase_matrix": 291, "matt": 291, "hostett": 291, "move": 291, "model": 291, "replac": 291, "black": 291, "improv": 291, "septemb": 291, "sensibl": 291, "august": 291, "27": 291, "without": 291, "superflu": 291, "translat": 291, "fix": [291, 292], "juli": 291, "firinterpol": 291, "impair": 291, "fpsl": 291, "helper": 291, "synthes": 291, "semant": 292, "major": 292, "minor": 292, "patch": 292, "introduc": 292, "featur": 292, "backward": 292, "compat": 292, "bug": 292, "There": 292, "guarante": 292, "them": 292}, "objects": {"": [[3, 0, 0, 1, "sdr", ""]], "sdr": [[9, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [26, 1, 1, "", "Decimator", "Implements a polyphase decimating FIR filter."], [37, 1, 1, "", "Differentiator", "Implements a differentiator FIR filter."], [39, 1, 1, "", "EnergyDetector", "Implements an energy detector."], [44, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [51, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [69, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [76, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [94, 1, 1, "", "Integrator", "Implements an integrator IIR filter."], [96, 1, 1, "", "Interpolator", "Implements a polyphase interpolating FIR filter."], [107, 1, 1, "", "LinearModulation", "Implements linear phase/amplitude modulation with arbitrary symbol mapping."], [125, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [134, 1, 1, "", "MLPED", "Implements a maximum-likelihood phase error detector (ML-PED)."], [142, 1, 1, "", "MSK", "Implements minimum-shift keying (MSK) modulation and demodulation."], [144, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [152, 1, 1, "", "OQPSK", "Implements offset quadrature phase-shift keying (OQPSK) modulation and demodulation."], [156, 1, 1, "", "PED", "Implements a heuristic phase error detector (PED)."], [162, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [170, 1, 1, "", "PiMPSK", "Implements $pi/M$ phase-shift keying ($pi/M$ PSK) modulation and demodulation."], [172, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [173, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [174, 1, 1, "", "ReplicaCorrelator", "Implements an clairvoyant replica-correlator detector."], [179, 1, 1, "", "Resampler", "Implements a polyphase rational resampling FIR filter."], [192, 5, 1, "", "albersheim", "Estimates the minimum required single-sample SNR, given $N_{NC}$ non-coherent combinations, to achieve a probability of detection $P_D$ and probability of false alarm $P_{FA}$. This function implements Albersheim's equation."], [193, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [194, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [195, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [196, 5, 1, "", "barker", "Returns the Barker code/sequence of length $N$."], [197, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [198, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [199, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [200, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [201, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [202, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [203, 5, 1, "", "db", "Converts from linear units to decibels."], [204, 5, 1, "", "design_bandpass_fir", "Designs a bandpass FIR filter impulse response $h[n]$ using the window method."], [205, 5, 1, "", "design_bandstop_fir", "Designs a bandstop FIR filter impulse response $h[n]$ using the window method."], [206, 5, 1, "", "design_frac_delay_fir", "Designs a fractional delay FIR filter impulse response $h[n]$ using the Kaiser window method."], [207, 5, 1, "", "design_highpass_fir", "Designs a highpass FIR filter impulse response $h[n]$ using the window method."], [208, 5, 1, "", "design_lowpass_fir", "Designs a lowpass FIR filter impulse response $h[n]$ using the window method."], [209, 5, 1, "", "design_multirate_fir", "Designs a multirate FIR filter impulse response $h[n]$ using the Kaiser window method."], [210, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [211, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [212, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [213, 5, 1, "", "downsample", "Downsamples the time-domain signal $x[n]$ by the factor $r$."], [214, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [215, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [216, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [217, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [218, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [219, 5, 1, "", "euclidean", "Measures the Euclidean distance between two signals $x[n]$ and $y[n]$."], [220, 5, 1, "", "evm", "Calculates the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [221, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [222, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [223, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [224, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [225, 5, 1, "", "hadamard", "Returns the Hadamard code/sequence of length $N$."], [226, 5, 1, "", "half_sine", "Returns a half-sine pulse shape."], [227, 5, 1, "", "hamming", "Measures the Hamming distance between two signals $x[n]$ and $y[n]$."], [228, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [229, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [230, 5, 1, "", "linear", "Converts from decibels to linear units."], [231, 5, 1, "", "mix", "Mixes the time-domain signal $x[n]$ with a complex exponential or real sinusoid."], [232, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [233, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [234, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [235, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [236, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [237, 5, 1, "", "percent", "Converts from a ratio to a percentage."], [259, 5, 1, "", "polyphase_decompose", "Decomposes the FIR filter taps $h_i$ into the polyphase matrix $H_{i, j}$ with $B$ phases."], [260, 5, 1, "", "ppb", "Converts from a ratio to parts per billion (ppb)."], [261, 5, 1, "", "ppm", "Converts from a ratio to parts per million (ppm)."], [262, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [263, 5, 1, "", "rectangular", "Returns a rectangular pulse shape."], [264, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [265, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [266, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [267, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [268, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [269, 5, 1, "", "to_complex_bb", "Converts the real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$ to a complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c} = f_{s,r}/2$."], [270, 5, 1, "", "to_real_pb", "Converts the complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$ to a real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r} = 2f_{s,c}$."], [271, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [272, 5, 1, "", "upsample", "Upsamples the time-domain signal $x[n]$ by the factor $r$."], [273, 5, 1, "", "walsh", "Returns the Walsh code/sequence of length $N$."], [274, 5, 1, "", "wavelength", "Calculates the wavelength $lambda$ of an electromagnetic wave with frequency $f$."], [275, 5, 1, "", "zadoff_chu", "Returns the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.ClosedLoopPLL": [[10, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [11, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [12, 2, 1, "", "K0", "The NCO gain $K_0$."], [13, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [14, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [15, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [16, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [17, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [18, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [19, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [20, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [21, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [22, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [23, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [24, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [25, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[16, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [16, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [16, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [16, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [16, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[17, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[19, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[22, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.Decimator": [[27, 3, 1, "", "__call__", "Filters and decimates the input signal $x[n]$ with the polyphase FIR filter."], [28, 3, 1, "", "__init__", "Creates a polyphase FIR decimating filter."], [29, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [30, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [31, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [32, 2, 1, "", "method", "The method used to design the multirate filter."], [33, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [34, 2, 1, "", "rate", "The decimation rate $r$."], [35, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [36, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Decimator.__call__": [[27, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [27, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Decimator.__init__": [[28, 4, 2, "p-rate", "rate", "The decimation rate $r$."], [28, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [28, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.Differentiator": [[38, 3, 1, "", "__init__", "Creates a differentiator FIR filter."]], "sdr.Differentiator.__init__": [[38, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.EnergyDetector": [[40, 3, 1, "", "p_d", "Computes the probability of detection $P_D$."], [41, 3, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [42, 3, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [43, 3, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.EnergyDetector.p_d": [[40, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [40, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [40, 4, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.p_fa": [[41, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [41, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [41, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [41, 4, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.EnergyDetector.roc": [[42, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [42, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [42, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."], [42, 4, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.threshold": [[43, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [43, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [43, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [43, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.ErrorRate": [[45, 3, 1, "", "__init__", "Creates a new error rate tabulation object."], [46, 3, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [47, 3, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [48, 3, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [49, 3, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [50, 3, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[46, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [46, 4, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [46, 4, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[47, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[48, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[50, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[52, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the FIR filter."], [53, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [54, 3, 1, "", "__len__", "Returns the filter length $N + 1$."], [55, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [56, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [57, 2, 1, "", "delay", "The delay of the FIR filter $d = lfloor frac{N + 1}{2} rfloor$ in samples."], [58, 3, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [59, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the FIR filter."], [60, 3, 1, "", "group_delay", "Returns the group delay $tau_g(omega)$ of the FIR filter."], [61, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [62, 2, 1, "", "order", "The order of the FIR filter $N$."], [63, 3, 1, "", "phase_delay", "Returns the phase delay $tau_{phi}(omega)$ of the FIR filter."], [64, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [65, 2, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [66, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [67, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [68, 2, 1, "", "taps", "The feedforward taps $h_i$ for $i = 0,...,N$."]], "sdr.FIR.__call__": [[52, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [52, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.FIR.__init__": [[53, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$ for $i = 0,...N$."], [53, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FIR.frequency_response": [[59, 4, 2, "p-decades", "decades", "Only used if freqs is an integer."], [59, 4, 2, "p-freqs", "freqs", "The frequency specification."], [59, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [59, 4, 2, "p-whole", "whole", "Only used if freqs is an integer."]], "sdr.FIR.group_delay": [[60, 4, 2, "p-N", "N", "The number of samples in the group delay."], [60, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[61, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.phase_delay": [[63, 4, 2, "p-N", "N", "The number of samples in the phase delay."], [63, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.step_response": [[66, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FarrowResampler": [[70, 3, 1, "", "__call__", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [71, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [72, 2, 1, "", "order", "The order of the filter."], [73, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [74, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [75, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__call__": [[70, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [70, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.__init__": [[71, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FarrowResampler.reset": [[73, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[77, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [78, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the IIR filter."], [79, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [80, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [81, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [82, 2, 1, "", "a_taps", "The feedback taps $a_j$ for $j = 0,...,N$."], [83, 2, 1, "", "b_taps", "The feedforward taps $b_i$ for $i = 0,...,M$."], [84, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the IIR filter."], [85, 2, 1, "", "gain", "The gain of the IIR filter."], [86, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [87, 2, 1, "", "order", "The order of the IIR filter $N$."], [88, 2, 1, "", "poles", "The poles of the IIR filter."], [89, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [90, 2, 1, "", "state", "The filter state."], [91, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [92, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [93, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[77, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [77, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [77, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."], [77, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__call__": [[78, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.IIR.__init__": [[79, 4, 2, "p-a", "a", "The feedback coefficients $a_j$ for $j = 0,...,N$."], [79, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$ for $i = 0,...,M$."], [79, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.IIR.frequency_response": [[84, 4, 2, "p-decades", "decades", "Only used if freqs is an integer."], [84, 4, 2, "p-freqs", "freqs", "The frequency specification."], [84, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [84, 4, 2, "p-whole", "whole", "Only used if freqs is an integer."]], "sdr.IIR.impulse_response": [[86, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[91, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.Integrator": [[95, 3, 1, "", "__init__", "Creates an integrating IIR filter."]], "sdr.Integrator.__init__": [[95, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.Interpolator": [[97, 3, 1, "", "__call__", "Interpolates and filters the input signal $x[n]$ with the polyphase FIR filter."], [98, 3, 1, "", "__init__", "Creates a polyphase FIR interpolating filter."], [99, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [100, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [101, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [102, 2, 1, "", "method", "The method used to design the multirate filter."], [103, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [104, 2, 1, "", "rate", "The interpolation rate $r$."], [105, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [106, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Interpolator.__call__": [[97, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [97, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Interpolator.__init__": [[98, 4, 2, "p-rate", "rate", "The interpolation rate $r$."], [98, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [98, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.LinearModulation": [[108, 3, 1, "", "__init__", "Creates a new linear phase/amplitude modulation object."], [109, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [110, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [111, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [112, 2, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [113, 3, 1, "", "decide_symbols", "Converts the received complex symbols $tilde{a}[k]$ into decimal symbol decisions $hat{s}[k]$ and complex symbol decisions $hat{a}[k]$ using maximum-likelihood estimation (MLE)."], [114, 3, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples $tilde{x}[n]$ into decimal symbol decisions $hat{s}[k]$ using matched filtering and maximum-likelihood estimation."], [115, 3, 1, "", "map_symbols", "Converts the decimal symbols $s[k]$ to complex symbols $a[k]$."], [116, 3, 1, "", "modulate", "Modulates the decimal symbols $s[k]$ into pulse-shaped complex samples $x[n]$."], [117, 2, 1, "", "order", "The modulation order $M = 2^k$."], [118, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [119, 2, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [120, 2, 1, "", "rx_filter", "The receive decimating matched filter. The filter coefficients are matched to the pulse shape $h[-n]^*$."], [121, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [122, 2, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [123, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."], [124, 2, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter. The filter coefficients are the pulse shape $h[n]$."]], "sdr.LinearModulation.__init__": [[108, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [108, 4, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees to apply to symbol_map."], [108, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [108, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [108, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [108, 4, 2, "p-symbol_map", "symbol_map", "The symbol mapping ${0, dots, M-1} mapsto mathbb{C}$. An $M$-length array whose indices are decimal symbols $s[k]$ and whose values are complex symbols $a[k]$, where $M$ is the modulation order."]], "sdr.LinearModulation.ber": [[111, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.LinearModulation.decide_symbols": [[113, 4, 2, "p-a_tilde", "a_tilde", "The received complex symbols $tilde{a}[k]$."]], "sdr.LinearModulation.demodulate": [[114, 4, 2, "p-x_tilde", "x_tilde", "The received pulse-shaped complex samples $tilde{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.LinearModulation.map_symbols": [[115, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to map, $0$ to $M-1$."]], "sdr.LinearModulation.modulate": [[116, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.LinearModulation.ser": [[121, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.LoopFilter": [[126, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [127, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [128, 3, 1, "", "__call__", "Filters the input signal $x[n]$."], [129, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [130, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [131, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [132, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [133, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__call__": [[128, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.LoopFilter.__init__": [[129, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [129, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [129, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [129, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.MLPED": [[135, 2, 1, "", "A_received", "(Settable) The received signal RMS amplitude $A_{rx,rms}$."], [136, 2, 1, "", "A_reference", "(Settable) The reference signal RMS amplitude $A_{ref,rms}$."], [137, 3, 1, "", "__call__", "Detects the phase error."], [138, 3, 1, "", "__init__", "Initializes the ML-PED."], [139, 3, 1, "", "data_aided_error", "Measures the average phase error of the data-aided PED using the specified modulation scheme."], [140, 3, 1, "", "decision_directed_error", "Measures the average phase error of the decision-directed PED using the specified modulation scheme."], [141, 2, 1, "", "gain", "The gain of the phase error detector $K_p$."]], "sdr.MLPED.__call__": [[137, 4, 2, "p-received", "received", "The received complex symbols $tilde{a}[k]$."], [137, 4, 2, "p-reference", "reference", "The reference complex symbols, either the known transmitted complex symbols $a[k]$ or the complex symbols decisions $hat{a}[k]$."]], "sdr.MLPED.__init__": [[138, 4, 2, "p-A_received", "A_received", "The received signal RMS amplitude $A_{rx,rms}$."], [138, 4, 2, "p-A_reference", "A_reference", "The reference signal RMS amplitude $A_{ref,rms}$."]], "sdr.MLPED.data_aided_error": [[139, 4, 2, "p-modem", "modem", "The linear modulation scheme."], [139, 4, 2, "p-n_points", "n_points", "The number of points to use to measure the phase error."]], "sdr.MLPED.decision_directed_error": [[140, 4, 2, "p-modem", "modem", "The linear modulation scheme."], [140, 4, 2, "p-n_points", "n_points", "The number of points to use to measure the phase error."]], "sdr.MSK": [[143, 3, 1, "", "__init__", "Creates a new MSK object."]], "sdr.MSK.__init__": [[143, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [143, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [143, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.NCO": [[145, 2, 1, "", "K0", "(Settable) The NCO gain $K_0$."], [146, 3, 1, "", "__call__", "Steps the NCO with variable frequency and/or phase signals."], [147, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [148, 2, 1, "", "increment", "(Settable) The constant phase accumulation $omega$ of the NCO in radians/sample."], [149, 2, 1, "", "offset", "(Settable) The absolute phase offset $theta$ of the NCO in radians."], [150, 3, 1, "", "reset", "Resets the NCO."], [151, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__call__": [[146, 4, 2, "p-freq", "freq", "The variable frequency signal $f[n]$ in radians/sample. This input signal varies the per-sample phase increment of the NCO. If None, the signal is all zeros."], [146, 4, 2, "p-output", "output", "The format of the output signal $y[n]$. Options are the accumulated phase, sine, cosine, or complex exponential."], [146, 4, 2, "p-phase", "phase", "The variable phase signal $p[n]$ in radians. This input signal varies the per-sample phase offset of the NCO. If None, the signal is all zeros."]], "sdr.NCO.__init__": [[147, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [147, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [147, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.NCO.step": [[151, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.OQPSK": [[153, 3, 1, "", "__init__", "Creates a new OQPSK object."], [154, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [155, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."]], "sdr.OQPSK.__init__": [[153, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [153, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [153, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [153, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [153, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [153, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PED": [[157, 3, 1, "", "__call__", "Detects the phase error."], [158, 3, 1, "", "__init__", "Initializes the PED."], [159, 3, 1, "", "data_aided_error", "Measures the average phase error of the data-aided PED using the specified modulation scheme."], [160, 3, 1, "", "decision_directed_error", "Measures the average phase error of the decision-directed PED using the specified modulation scheme."], [161, 2, 1, "", "gain", "The gain of the phase error detector $K_p$."]], "sdr.PED.__call__": [[157, 4, 2, "p-received", "received", "The received complex symbols $tilde{a}[k]$."], [157, 4, 2, "p-reference", "reference", "The reference complex symbols, either the known transmitted complex symbols $a[k]$ or the complex symbols decisions $hat{a}[k]$."]], "sdr.PED.data_aided_error": [[159, 4, 2, "p-modem", "modem", "The linear modulation scheme."], [159, 4, 2, "p-n_points", "n_points", "The number of points to use to measure the phase error."]], "sdr.PED.decision_directed_error": [[160, 4, 2, "p-modem", "modem", "The linear modulation scheme."], [160, 4, 2, "p-n_points", "n_points", "The number of points to use to measure the phase error."]], "sdr.PSK": [[163, 3, 1, "", "__init__", "Creates a new PSK object."], [164, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [165, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [166, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [167, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [168, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [169, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[163, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [163, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [163, 4, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [163, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [163, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [163, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [163, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[166, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [166, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.ser": [[168, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [168, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.PiMPSK": [[171, 3, 1, "", "__init__", "Creates a new $pi/M$ PSK object."]], "sdr.PiMPSK.__init__": [[171, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [171, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [171, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [171, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [171, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [171, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [171, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.Q": [[172, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[173, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.ReplicaCorrelator": [[175, 3, 1, "", "p_d", "Computes the probability of detection $P_D$."], [176, 3, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [177, 3, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [178, 3, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.ReplicaCorrelator.p_d": [[175, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [175, 4, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [175, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."]], "sdr.ReplicaCorrelator.p_fa": [[176, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [176, 4, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [176, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [176, 4, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.ReplicaCorrelator.roc": [[177, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [177, 4, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [177, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."]], "sdr.ReplicaCorrelator.threshold": [[178, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [178, 4, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [178, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [178, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.Resampler": [[180, 3, 1, "", "__call__", "Resamples and filters the input signal $x[n]$ with the polyphase FIR filter."], [181, 3, 1, "", "__init__", "Creates a polyphase FIR rational resampling filter."], [182, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [183, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [184, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [185, 2, 1, "", "down", "The decimation rate $Q$."], [186, 2, 1, "", "method", "The method used to design the multirate filter."], [187, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [188, 2, 1, "", "rate", "The resampling rate $P/Q$."], [189, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [190, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."], [191, 2, 1, "", "up", "The interpolation rate $P$."]], "sdr.Resampler.__init__": [[181, 4, 2, "p-down", "down", "The decimation rate $Q$."], [181, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [181, 4, 2, "p-taps", "taps", "The multirate filter design specification."], [181, 4, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.albersheim": [[192, 4, 2, "p-N_nc", "N_nc", "The number of non-coherent combinations $N_{NC} ge 1$."], [192, 4, 2, "p-p_d", "p_d", "The desired probability of detection $P_D$ in $(0, 1)$."], [192, 4, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{FA}$ in $(0, 1)$."]], "sdr.average_power": [[193, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the average power. The default is None, which computes the average power of the entire array."], [193, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [193, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[194, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [194, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [194, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [194, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[195, 4, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [195, 4, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.barker": [[196, 4, 2, "p-length", "length", "The length $N$ of the Barker code/sequence."], [196, 4, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[197, 4, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [197, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [197, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[198, 4, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[199, 4, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[200, 4, 2, "p-p", "p", "The probability $p$ of a bit flip."], [200, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [200, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[201, 4, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[202, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.db": [[203, 4, 2, "p-type", "type", "The type of input value or signal."], [203, 4, 2, "p-x", "x", "The input value or signal."]], "sdr.design_bandpass_fir": [[204, 4, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [204, 4, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [204, 4, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [204, 4, 2, "p-order", "order", "The filter order $N$. Must be even."], [204, 4, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_bandstop_fir": [[205, 4, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [205, 4, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [205, 4, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [205, 4, 2, "p-order", "order", "The filter order $N$. Must be even."], [205, 4, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_frac_delay_fir": [[206, 4, 2, "p-delay", "delay", "The fractional delay $0 le Delta n le 1$."], [206, 4, 2, "p-length", "length", "The filter length $L$. Filters with even length have best performance. Filters with odd length are equivalent to an even-length filter with an appended zero."]], "sdr.design_highpass_fir": [[207, 4, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [207, 4, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [207, 4, 2, "p-order", "order", "The filter order $N$. Must be even."], [207, 4, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_lowpass_fir": [[208, 4, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [208, 4, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [208, 4, 2, "p-order", "order", "The filter order $N$. Must be even."], [208, 4, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_multirate_fir": [[209, 4, 2, "p-A_stop", "A_stop", "The stopband attenuation $A_{text{stop}}$ in dB."], [209, 4, 2, "p-down", "down", "The decimation rate $Q$."], [209, 4, 2, "p-half_length", "half_length", "The half-length of the polyphase filters."], [209, 4, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.diff_decode": [[210, 4, 2, "p-y", "y", "The input encoded data $y[k]$."], [210, 4, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[211, 4, 2, "p-x", "x", "The input uncoded data $x[k]$."], [211, 4, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[212, 4, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [212, 4, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [212, 4, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [212, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [212, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.downsample": [[213, 4, 2, "p-rate", "rate", "The downsampling factor $r$."], [213, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.ebn0_to_esn0": [[214, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [214, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [214, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[215, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [215, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [215, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [215, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[216, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the energy. The default is None, which computes the energy of the entire array."], [216, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [216, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[217, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [217, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [217, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[218, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [218, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.euclidean": [[219, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the distance. The default is None, which computes the distance across the entire array."], [219, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [219, 4, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.evm": [[220, 4, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [220, 4, 2, "p-output", "output", "The output type of the EVM calculation."], [220, 4, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [220, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.frequency_offset": [[221, 4, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [221, 4, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [221, 4, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [221, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [221, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[222, 4, 2, "p-distance", "distance", "The distance $d$ in meters between the transmitter and receiver."], [222, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[223, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [223, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [223, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [223, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[224, 4, 2, "p-n", "n", "The length of the Gray code."]], "sdr.hadamard": [[225, 4, 2, "p-index", "index", "The index $i$ of the Hadamard code."], [225, 4, 2, "p-length", "length", "The length $N$ of the Hadamard code/sequence. Must be a power of 2."], [225, 4, 2, "p-output", "output", "The output format of the Hadamard code/sequence."]], "sdr.half_sine": [[226, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [226, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [226, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.hamming": [[227, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the distance. The default is None, which computes the distance across the entire array."], [227, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [227, 4, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.hexdump": [[228, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [228, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[229, 4, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [229, 4, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [229, 4, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.linear": [[230, 4, 2, "p-type", "type", "The type of output value or signal."], [230, 4, 2, "p-x", "x", "The input value or signal in dB."]], "sdr.mix": [[231, 4, 2, "p-complex", "complex", "Indicates whether to mix by a complex exponential or real sinusoid."], [231, 4, 2, "p-freq", "freq", "The frequency $f$ of the sinusoid in Hz (or 1/samples if sample_rate=1). The frequency must satisfy $-f_s/2 le f le f_s/2$."], [231, 4, 2, "p-phase", "phase", "The phase $phi$ of the sinusoid in degrees."], [231, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal."], [231, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.pack": [[232, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [232, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [232, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[233, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the PAPR. The default is None, which computes the PAPR of the entire array."], [233, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[234, 4, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [234, 4, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [234, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[235, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the peak power. The default is None, which computes the peak power of the entire array."], [235, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [235, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[236, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [236, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.percent": [[237, 4, 2, "p-x", "x", "The input ratio."]], "sdr.plot": [[238, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [239, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [240, 5, 1, "", "eye", "Plots the eye diagram of the baseband modulated signal $x[n]$."], [241, 5, 1, "", "filter", "Plots the magnitude response $|H(omega)|^2$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [242, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [243, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [244, 5, 1, "", "magnitude_response", "Plots the magnitude response $|H(omega)|^2$ of the filter."], [245, 5, 1, "", "p_d", "Plots the probability of detection $P_D$ as a function of received SNR or ENR."], [246, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [247, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [248, 5, 1, "", "phase_response", "Plots the phase response $angle H(omega)$ of the filter."], [249, 5, 1, "", "phase_tree", "Plots the phase tree of a continuous-phase modulated (CPM) signal signal $x[n]$."], [250, 5, 1, "", "raster", "Plots a raster of the time-domain signal $x[n]$."], [251, 5, 1, "", "roc", "Plots the receiver operating characteristic (ROC) curve as a function of $P_{FA}$."], [252, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [253, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [254, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [255, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [256, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [257, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [258, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[238, 4, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [238, 4, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."], [238, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."]], "sdr.plot.constellation": [[239, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [239, 4, 2, "p-kwargs", "kwargs", "If heatmap=False, additional keyword arguments to pass to matplotlib.pyplot.scatter(). The following keyword arguments are set by default. The defaults may be overwritten."], [239, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [239, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.eye": [[240, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [240, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [240, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [240, 4, 2, "p-span", "span", "The number of symbols per raster."], [240, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [240, 4, 2, "p-x", "x", "The baseband modulated signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved."]], "sdr.plot.filter": [[241, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [241, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [241, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [241, 4, 2, "p-filter", "filter", "The filter definition."], [241, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [241, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[242, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [242, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [242, 4, 2, "p-filter", "filter", "The filter definition."], [242, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [242, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [242, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.impulse_response": [[243, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [243, 4, 2, "p-filter", "filter", "The filter definition."], [243, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.magnitude_response": [[244, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [244, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [244, 4, 2, "p-filter", "filter", "The filter definition."], [244, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [244, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [244, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."], [244, 4, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a linear or logarithmic magnitude response."]], "sdr.plot.p_d": [[245, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [245, 4, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [245, 4, 2, "p-x", "x", "The SNR or ENR in dB."], [245, 4, 2, "p-x_label", "x_label", "The x-axis label to use."]], "sdr.plot.periodogram": [[246, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [246, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [246, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [246, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [246, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [246, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [246, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [246, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [246, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [246, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."], [246, 4, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a linear or logarithmic power spectral density."]], "sdr.plot.phase_delay": [[247, 4, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [247, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [247, 4, 2, "p-filter", "filter", "The filter definition."], [247, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [247, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [247, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.phase_response": [[248, 4, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [248, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [248, 4, 2, "p-filter", "filter", "The filter definition."], [248, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [248, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [248, 4, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [248, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.phase_tree": [[249, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [249, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [249, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [249, 4, 2, "p-span", "span", "The number of symbols per raster."], [249, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [249, 4, 2, "p-x", "x", "The baseband CPM signal $x[n]$."]], "sdr.plot.raster": [[250, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [250, 4, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\"."], [250, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.collections.LineCollection. The following keyword arguments are set by default. The defaults may be overwritten."], [250, 4, 2, "p-length", "length", "The length of each raster in samples. This must be provided if x is 1D."], [250, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [250, 4, 2, "p-stride", "stride", "The stride between each raster in samples. If None, the stride is set to length."], [250, 4, 2, "p-x", "x", "The time-domain signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved. If x is 1D, the rastering is determined by length and stride. If x is 2D, the rows correspond to each raster."]], "sdr.plot.roc": [[251, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to the plotting function defined by type."], [251, 4, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [251, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [251, 4, 2, "p-type", "type", "The type of plot to generate."]], "sdr.plot.ser": [[252, 4, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [252, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."], [252, 4, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.spectrogram": [[253, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [253, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [253, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.pcolormesh(). The following keyword arguments are set by default. The defaults may be overwritten."], [253, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [253, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [253, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [253, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [253, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [253, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[254, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [254, 4, 2, "p-filter", "filter", "The filter definition."], [254, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.symbol_map": [[255, 4, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [255, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot(). The following keyword arguments are set by default. The defaults may be overwritten."], [255, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [255, 4, 2, "p-modulation", "modulation", "The linear modulation or symbol map ${0, dots, M-1} mapsto mathbb{C}$."]], "sdr.plot.time_domain": [[256, 4, 2, "p-centered", "centered", "Indicates whether to center the x-axis about 0. This argument is mutually exclusive with offset."], [256, 4, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal. If \"color\", the real and imaginary parts will have different colors based on the current Matplotlib color cycle. If \"line\", the real part will have a solid line and the imaginary part will have a dashed line, and both lines will share the same color."], [256, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [256, 4, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. The units of the offset are $1/f_s$. This argument is mutually exclusive with centered."], [256, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [256, 4, 2, "p-t", "t", "The time signal $t[n]$. The units are assumed to be $1/f_s$."], [256, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[258, 4, 2, "p-filter", "filter", "The filter definition."], [258, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.polyphase_decompose": [[259, 4, 2, "p-phases", "phases", "The number of phases $B$."], [259, 4, 2, "p-taps", "taps", "The multirate FIR filter taps $h_i$."]], "sdr.ppb": [[260, 4, 2, "p-x", "x", "The input ratio."]], "sdr.ppm": [[261, 4, 2, "p-x", "x", "The input ratio."]], "sdr.raised_cosine": [[262, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [262, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [262, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [262, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rectangular": [[263, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [263, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [263, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[264, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [264, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[265, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [265, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [265, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [265, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[266, 4, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [266, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.snr_to_ebn0": [[267, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [267, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [267, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [267, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[268, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [268, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.to_complex_bb": [[269, 4, 2, "p-x_r", "x_r", "The real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$. If the length is odd, one zero is appended to the end."]], "sdr.to_real_pb": [[270, 4, 2, "p-x_c", "x_c", "The complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$."]], "sdr.unpack": [[271, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [271, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [271, 4, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.upsample": [[272, 4, 2, "p-rate", "rate", "The upsampling factor $r$."], [272, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.walsh": [[273, 4, 2, "p-index", "index", "The index $i$ of the Walsh code. Indicates how many transitions there are in the code."], [273, 4, 2, "p-length", "length", "The length $N$ of the Walsh code/sequence. Must be a power of 2."], [273, 4, 2, "p-output", "output", "The output format of the Walsh code/sequence."]], "sdr.wavelength": [[274, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.zadoff_chu": [[275, 4, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [275, 4, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence. The root must be relatively prime to the length, i.e., $gcd(u, N) = 1$."], [275, 4, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence. When $q ne 0$, the returned sequence is a cyclic shift of the root-$u$ Zadoff-Chu sequence."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"convers": 0, "decibel": 0, "ratio": 0, "from": [0, 280, 281, 282], "e_b": 0, "n_0": 0, "e_": 0, "": [0, 284, 285], "n": [0, 283, 284, 285], "data": 1, "manipul": [1, 3], "detect": [2, 7], "detector": [2, 278], "theoret": 2, "limit": 2, "digit": [3, 285], "signal": [3, 277, 283, 286], "process": 3, "fir": [3, 284], "filter": [3, 7, 284, 285, 287], "iir": [3, 285], "multir": 3, "arbitrari": [3, 283], "resampl": [3, 283], "correl": 3, "link": 4, "budget": 4, "channel": [4, 277], "capac": 4, "path": 4, "loss": 4, "antenna": 4, "measur": 5, "energi": 5, "power": [5, 286], "voltag": 5, "distanc": 5, "modul": [5, 6, 7], "linear": 6, "continu": 6, "phase": [6, 278, 287, 288], "orthogon": 6, "puls": [6, 286, 289], "shape": [6, 286, 289], "symbol": [6, 288], "map": [6, 288], "encod": 6, "plot": [7, 286], "configur": [7, 280, 282], "time": [7, 286, 287], "domain": [7, 286, 287], "frequenc": [7, 284, 285, 286, 287], "spectral": 7, "estim": 7, "analysi": 7, "probabl": 8, "note": [9, 107, 142, 152, 162, 170, 222, 246, 253], "constructor": [9, 26, 37, 44, 51, 69, 76, 94, 96, 107, 125, 134, 142, 144, 152, 156, 162, 170, 179], "method": [9, 26, 37, 39, 44, 51, 69, 76, 94, 96, 107, 125, 134, 142, 144, 152, 156, 162, 170, 174, 179], "properti": [9, 26, 37, 51, 69, 76, 94, 96, 107, 125, 134, 142, 144, 152, 156, 162, 170, 179], "special": [26, 37, 51, 69, 76, 94, 96, 125, 134, 144, 156, 179], "string": [26, 37, 51, 76, 94, 96, 107, 142, 152, 162, 170, 179], "represent": [26, 37, 51, 76, 94, 96, 107, 142, 152, 162, 170, 179], "stream": [26, 37, 51, 76, 94, 96, 179], "mode": [26, 37, 51, 76, 94, 96, 179], "onli": [26, 37, 51, 76, 94, 96, 179], "see": [44, 46, 59, 60, 61, 63, 66, 84, 86, 91, 108, 111, 121, 143, 153, 163, 166, 168, 171, 172, 173, 202, 233, 272], "also": [44, 46, 59, 60, 61, 63, 66, 84, 86, 91, 108, 111, 121, 143, 153, 163, 166, 168, 171, 172, 173, 202, 233, 272], "warn": [213, 272], "sequenc": 276, "simul": 277, "model": 277, "impair": 277, "synchron": 278, "error": [278, 288], "document": 279, "instal": [279, 280, 281, 282, 290], "build": 279, "doc": 279, "serv": 279, "format": 280, "run": [280, 282], "linter": 280, "formatt": 280, "pre": 280, "commit": 280, "v": [280, 282], "code": [280, 282], "pypi": 281, "github": 281, "edit": 281, "local": 281, "folder": 281, "dev": 281, "depend": 281, "unit": 282, "test": 282, "command": 282, "line": 282, "farrow": 283, "construct": 283, "an": [283, 284, 285], "input": 283, "x": 283, "t_": 283, "rate": [283, 288], "r": 283, "y": 283, "frac": 283, "upsampl": 283, "integ": 283, "downsampl": 283, "irrat": 283, "creat": [284, 285], "examin": [284, 285, 286], "impuls": [284, 285], "respons": [284, 285, 287], "h": [284, 285], "step": [284, 285, 287], "omega": [284, 285], "group": [284, 285], "delai": [284, 285], "tau_g": [284, 285], "fulli": [284, 285], "analyz": [284, 285, 287], "zero": 285, "pole": 285, "stabil": 285, "peak": 286, "averag": 286, "qpsk": [286, 288], "variou": 286, "across": [286, 287], "excess": 286, "bandwidth": 286, "lock": 287, "loop": 287, "design": 287, "proport": 287, "plu": 287, "integr": 287, "ppi": 287, "implement": 287, "pll": 287, "close": 287, "perform": 287, "compar": 287, "zeta": 287, "b_n": 287, "t": 287, "shift": 288, "kei": 288, "constel": 288, "bpsk": 288, "8": [288, 291], "psk": 288, "16": 288, "curv": 288, "bit": 288, "rais": 289, "cosin": 289, "squar": 289, "root": 289, "gaussian": 289, "sdr": 290, "featur": 290, "v0": 291, "0": 291, "10": 291, "chang": 291, "contributor": 291, "9": 291, "7": 291, "6": 291, "5": 291, "4": 291, "3": 291, "2": 291, "1": 291, "version": 292, "alpha": 292, "releas": 292, "beta": 292}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Conversions": [[0, "conversions"]], "Decibels": [[0, "decibels"]], "Ratios": [[0, "ratios"]], "From E_b/N_0": [[0, "from-e-b-n-0"]], "From E_s/N_0": [[0, "from-e-s-n-0"]], "From S/N": [[0, "from-s-n"]], "Data manipulation": [[1, "data-manipulation"]], "Detection": [[2, "detection"], [7, "detection"]], "Detectors": [[2, "detectors"]], "Theoretical limits": [[2, "theoretical-limits"]], "Digital signal processing": [[3, "digital-signal-processing"]], "FIR filtering": [[3, "fir-filtering"]], "IIR filtering": [[3, "iir-filtering"]], "Multirate filtering": [[3, "multirate-filtering"]], "Arbitrary resampling": [[3, "arbitrary-resampling"]], "Correlation": [[3, "correlation"]], "Signal manipulation": [[3, "signal-manipulation"]], "Link budgets": [[4, "link-budgets"]], "Channel capacity": [[4, "channel-capacity"]], "Path losses": [[4, "path-losses"]], "Antennas": [[4, "antennas"]], "Measurement": [[5, "measurement"]], "Energy": [[5, "energy"]], "Power": [[5, "power"]], "Voltage": [[5, "voltage"]], "Distance": [[5, "distance"]], "Modulation": [[5, "modulation"], [6, "modulation"], [7, "modulation"]], "Linear modulations": [[6, "linear-modulations"]], "Continuous-phase modulations": [[6, "continuous-phase-modulations"]], "Orthogonal modulations": [[6, "orthogonal-modulations"]], "Pulse shaping": [[6, "pulse-shaping"]], "Symbol mapping": [[6, "symbol-mapping"], [288, "symbol-mapping"]], "Symbol encoding": [[6, "symbol-encoding"]], "Plotting": [[7, "plotting"]], "Configuration": [[7, "configuration"], [280, "configuration"], [282, "configuration"]], "Time-domain": [[7, "time-domain"]], "Frequency-domain": [[7, "frequency-domain"]], "Spectral estimation": [[7, "spectral-estimation"]], "Filter analysis": [[7, "filter-analysis"]], "Probability": [[8, "probability"]], "Note": [[9, null], [107, null], [142, null], [152, null], [162, null], [170, null], [222, null], [246, null], [253, null]], "Constructors": [[9, "constructors"], [26, "constructors"], [37, "constructors"], [44, "constructors"], [51, "constructors"], [69, "constructors"], [76, "constructors"], [94, "constructors"], [96, "constructors"], [107, "constructors"], [125, "constructors"], [134, "constructors"], [142, "constructors"], [144, "constructors"], [152, "constructors"], [156, "constructors"], [162, "constructors"], [170, "constructors"], [179, "constructors"]], "Methods": [[9, "methods"], [26, "methods"], [37, "methods"], [39, "methods"], [44, "methods"], [51, "methods"], [69, "methods"], [76, "methods"], [94, "methods"], [96, "methods"], [107, "methods"], [125, "methods"], [134, "methods"], [142, "methods"], [144, "methods"], [152, "methods"], [156, "methods"], [162, "methods"], [170, "methods"], [174, "methods"], [179, "methods"]], "Properties": [[9, "properties"], [26, "properties"], [37, "properties"], [51, "properties"], [69, "properties"], [76, "properties"], [94, "properties"], [96, "properties"], [107, "properties"], [125, "properties"], [134, "properties"], [142, "properties"], [144, "properties"], [152, "properties"], [156, "properties"], [162, "properties"], [170, "properties"], [179, "properties"]], "Special methods": [[26, "special-methods"], [37, "special-methods"], [51, "special-methods"], [69, "special-methods"], [76, "special-methods"], [94, "special-methods"], [96, "special-methods"], [125, "special-methods"], [134, "special-methods"], [144, "special-methods"], [156, "special-methods"], [179, "special-methods"]], "String representation": [[26, "string-representation"], [37, "string-representation"], [51, "string-representation"], [76, "string-representation"], [94, "string-representation"], [96, "string-representation"], [107, "string-representation"], [142, "string-representation"], [152, "string-representation"], [162, "string-representation"], [170, "string-representation"], [179, "string-representation"]], "Streaming mode only": [[26, "streaming-mode-only"], [37, "streaming-mode-only"], [51, "streaming-mode-only"], [76, "streaming-mode-only"], [94, "streaming-mode-only"], [96, "streaming-mode-only"], [179, "streaming-mode-only"]], "See also": [[44, null], [46, null], [59, null], [60, null], [61, null], [63, null], [66, null], [84, null], [86, null], [91, null], [108, null], [111, null], [121, null], [143, null], [153, null], [163, null], [166, null], [168, null], [171, null], [172, null], [173, null], [202, null], [233, null], [272, null]], "Warning": [[213, null], [272, null]], "Sequences": [[276, "sequences"]], "Simulation": [[277, "simulation"]], "Channel models": [[277, "channel-models"]], "Signal impairments": [[277, "signal-impairments"]], "Synchronization": [[278, "synchronization"]], "Phase error detectors": [[278, "phase-error-detectors"]], "Documentation": [[279, "documentation"]], "Install": [[279, "install"], [280, "install"], [282, "install"]], "Build the docs": [[279, "build-the-docs"]], "Serve the docs": [[279, "serve-the-docs"]], "Formatting": [[280, "formatting"]], "Run the linter": [[280, "run-the-linter"]], "Run the formatter": [[280, "run-the-formatter"]], "Pre-commit": [[280, "pre-commit"]], "Run from VS Code": [[280, "run-from-vs-code"], [282, "run-from-vs-code"]], "Installation": [[281, "installation"], [290, "installation"]], "Install from PyPI": [[281, "install-from-pypi"]], "Install from GitHub": [[281, "install-from-github"]], "Editable install from local folder": [[281, "editable-install-from-local-folder"]], "Install the dev dependencies": [[281, "install-the-dev-dependencies"]], "Unit Tests": [[282, "unit-tests"]], "Run from the command line": [[282, "run-from-the-command-line"]], "Farrow arbitrary resampler": [[283, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[283, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[283, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[283, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[283, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[283, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[283, "downsample-by-an-irrational-rate"]], "FIR filters": [[284, "fir-filters"]], "Create an FIR filter": [[284, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[284, "examine-the-impulse-response-h-n"], [285, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[284, "examine-the-step-response-s-n"], [285, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[284, "examine-the-frequency-response-h-omega"], [285, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[284, "examine-the-group-delay-tau-g-omega"], [285, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[284, "fully-analyze-a-fir-filter"]], "IIR filters": [[285, "iir-filters"]], "Create an IIR filter": [[285, "create-an-iir-filter"]], "Examine the zeros and poles": [[285, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[285, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[285, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[286, "peak-to-average-power"]], "QPSK signal with various pulse shapes": [[286, "qpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[286, "examine-time-domain"]], "Examine frequency domain": [[286, "examine-frequency-domain"]], "Plot across excess bandwidth": [[286, "plot-across-excess-bandwidth"]], "Phase-locked loops": [[287, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[287, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[287, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[287, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[287, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[287, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[287, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[287, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[288, "phase-shift-keying"]], "Constellations": [[288, "constellations"]], "BPSK": [[288, "bpsk"]], "QPSK": [[288, "qpsk"]], "8-PSK": [[288, "id1"]], "16-PSK": [[288, "id2"]], "Error rate curves": [[288, "error-rate-curves"]], "Bit error rate curves": [[288, "bit-error-rate-curves"]], "Symbol error rate curves": [[288, "symbol-error-rate-curves"]], "Pulse shapes": [[289, "pulse-shapes"]], "Raised cosine": [[289, "raised-cosine"]], "Square-root raised cosine": [[289, "square-root-raised-cosine"]], "Gaussian": [[289, "gaussian"]], "sdr": [[290, "sdr"]], "Features": [[290, "features"]], "v0.0": [[291, "v0-0"]], "v0.0.10": [[291, "v0-0-10"]], "Changes": [[291, "changes"], [291, "id1"], [291, "id3"], [291, "id5"], [291, "id7"], [291, "id9"], [291, "id11"], [291, "id13"], [291, "id15"], [291, "id17"]], "Contributors": [[291, "contributors"], [291, "id2"], [291, "id4"], [291, "id6"], [291, "id8"], [291, "id10"], [291, "id12"], [291, "id14"], [291, "id16"], [291, "id18"]], "v0.0.9": [[291, "v0-0-9"]], "v0.0.8": [[291, "v0-0-8"]], "v0.0.7": [[291, "v0-0-7"]], "v0.0.6": [[291, "v0-0-6"]], "v0.0.5": [[291, "v0-0-5"]], "v0.0.4": [[291, "v0-0-4"]], "v0.0.3": [[291, "v0-0-3"]], "v0.0.2": [[291, "v0-0-2"]], "v0.0.1": [[291, "v0-0-1"]], "Versioning": [[292, "versioning"]], "Alpha releases": [[292, "alpha-releases"]], "Beta releases": [[292, "beta-releases"]]}, "indexentries": {"module": [[3, "module-sdr"]], "sdr": [[3, "module-sdr"]]}, "docurls": ["api/conversions/", "api/data-manipulation/", "api/detection/", "api/dsp/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.Decimator/", "api/sdr.Decimator.__call__/", "api/sdr.Decimator.__init__/", "api/sdr.Decimator.__repr__/", "api/sdr.Decimator.__str__/", "api/sdr.Decimator.delay/", "api/sdr.Decimator.method/", "api/sdr.Decimator.polyphase_taps/", "api/sdr.Decimator.rate/", "api/sdr.Decimator.reset/", "api/sdr.Decimator.taps/", "api/sdr.Differentiator/", "api/sdr.Differentiator.__init__/", "api/sdr.EnergyDetector/", "api/sdr.EnergyDetector.p_d/", "api/sdr.EnergyDetector.p_fa/", "api/sdr.EnergyDetector.roc/", "api/sdr.EnergyDetector.threshold/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__call__/", "api/sdr.FIR.__init__/", "api/sdr.FIR.__len__/", "api/sdr.FIR.__repr__/", "api/sdr.FIR.__str__/", "api/sdr.FIR.delay/", "api/sdr.FIR.flush/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.group_delay/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.phase_delay/", "api/sdr.FIR.reset/", "api/sdr.FIR.state/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__call__/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__call__/", "api/sdr.IIR.__init__/", "api/sdr.IIR.__repr__/", "api/sdr.IIR.__str__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.state/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.Integrator/", "api/sdr.Integrator.__init__/", "api/sdr.Interpolator/", "api/sdr.Interpolator.__call__/", "api/sdr.Interpolator.__init__/", "api/sdr.Interpolator.__repr__/", "api/sdr.Interpolator.__str__/", "api/sdr.Interpolator.delay/", "api/sdr.Interpolator.method/", "api/sdr.Interpolator.polyphase_taps/", "api/sdr.Interpolator.rate/", "api/sdr.Interpolator.reset/", "api/sdr.Interpolator.taps/", "api/sdr.LinearModulation/", "api/sdr.LinearModulation.__init__/", "api/sdr.LinearModulation.__repr__/", "api/sdr.LinearModulation.__str__/", "api/sdr.LinearModulation.ber/", "api/sdr.LinearModulation.bps/", "api/sdr.LinearModulation.decide_symbols/", "api/sdr.LinearModulation.demodulate/", "api/sdr.LinearModulation.map_symbols/", "api/sdr.LinearModulation.modulate/", "api/sdr.LinearModulation.order/", "api/sdr.LinearModulation.phase_offset/", "api/sdr.LinearModulation.pulse_shape/", "api/sdr.LinearModulation.rx_filter/", "api/sdr.LinearModulation.ser/", "api/sdr.LinearModulation.sps/", "api/sdr.LinearModulation.symbol_map/", "api/sdr.LinearModulation.tx_filter/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__call__/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.MLPED/", "api/sdr.MLPED.A_received/", "api/sdr.MLPED.A_reference/", "api/sdr.MLPED.__call__/", "api/sdr.MLPED.__init__/", "api/sdr.MLPED.data_aided_error/", "api/sdr.MLPED.decision_directed_error/", "api/sdr.MLPED.gain/", "api/sdr.MSK/", "api/sdr.MSK.__init__/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__call__/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.OQPSK/", "api/sdr.OQPSK.__init__/", "api/sdr.OQPSK.__repr__/", "api/sdr.OQPSK.__str__/", "api/sdr.PED/", "api/sdr.PED.__call__/", "api/sdr.PED.__init__/", "api/sdr.PED.data_aided_error/", "api/sdr.PED.decision_directed_error/", "api/sdr.PED.gain/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.__repr__/", "api/sdr.PSK.__str__/", "api/sdr.PSK.ber/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.PiMPSK/", "api/sdr.PiMPSK.__init__/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.ReplicaCorrelator/", "api/sdr.ReplicaCorrelator.p_d/", "api/sdr.ReplicaCorrelator.p_fa/", "api/sdr.ReplicaCorrelator.roc/", "api/sdr.ReplicaCorrelator.threshold/", "api/sdr.Resampler/", "api/sdr.Resampler.__call__/", "api/sdr.Resampler.__init__/", "api/sdr.Resampler.__repr__/", "api/sdr.Resampler.__str__/", "api/sdr.Resampler.delay/", "api/sdr.Resampler.down/", "api/sdr.Resampler.method/", "api/sdr.Resampler.polyphase_taps/", "api/sdr.Resampler.rate/", "api/sdr.Resampler.reset/", "api/sdr.Resampler.taps/", "api/sdr.Resampler.up/", "api/sdr.albersheim/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.barker/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.db/", "api/sdr.design_bandpass_fir/", "api/sdr.design_bandstop_fir/", "api/sdr.design_frac_delay_fir/", "api/sdr.design_highpass_fir/", "api/sdr.design_lowpass_fir/", "api/sdr.design_multirate_fir/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.downsample/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.euclidean/", "api/sdr.evm/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.hadamard/", "api/sdr.half_sine/", "api/sdr.hamming/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.linear/", "api/sdr.mix/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.percent/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.eye/", "api/sdr.plot.filter/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.magnitude_response/", "api/sdr.plot.p_d/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.phase_tree/", "api/sdr.plot.raster/", "api/sdr.plot.roc/", "api/sdr.plot.ser/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.polyphase_decompose/", "api/sdr.ppb/", "api/sdr.ppm/", "api/sdr.raised_cosine/", "api/sdr.rectangular/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.to_complex_bb/", "api/sdr.to_real_pb/", "api/sdr.unpack/", "api/sdr.upsample/", "api/sdr.walsh/", "api/sdr.wavelength/", "api/sdr.zadoff_chu/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/formatting/", "development/installation/", "development/unit-tests/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})