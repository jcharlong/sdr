Search.setIndex({"titles": ["sdr", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.DDS", "sdr.DDS.__init__", "sdr.DDS.nco", "sdr.DDS.process", "sdr.DDS.reset", "sdr.DDS.step", "sdr.FIR", "sdr.FIR.__init__", "sdr.FIR.delay", "sdr.FIR.filter", "sdr.FIR.frequency_response", "sdr.FIR.frequency_response_log", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.reset", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.resample", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__init__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.filter", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.filter", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.process", "sdr.NCO.reset", "sdr.NCO.step", "sdr.gaussian", "sdr.hexdump", "sdr.pack", "sdr.plot.filter", "sdr.plot.frequency_response", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.step_response", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.raised_cosine", "sdr.root_raised_cosine", "sdr.unpack", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Phase-locked loops", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"class": [0, 1, 18, 24, 36, 43, 59, 68, 91, 92], "fir": [0, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 79, 80, 81, 82, 83, 86, 95], "implement": [0, 18, 24, 36, 43, 59, 65, 68, 90], "finit": [0, 24], "impuls": [0, 24, 30, 43, 52, 76, 79, 82, 84, 94, 96], "respons": [0, 24, 28, 29, 30, 33, 43, 49, 50, 52, 56, 76, 79, 80, 81, 82, 83, 94, 96], "iir": [0, 1, 10, 29, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 65, 79, 80, 81, 82, 83, 86, 91, 93, 95, 96], "an": [0, 24, 30, 43, 44, 45, 52, 78, 82, 89, 95], "infinit": [0, 43, 96], "gaussian": [0, 76, 95], "time_bandwidth": [0, 76], "float": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 36, 39, 43, 44, 49, 50, 51, 59, 60, 61, 62, 63, 66, 68, 69, 70, 71, 72, 76, 79, 80, 81, 84, 87, 88], "span": [0, 76, 87, 88, 94], "int": [0, 18, 23, 24, 26, 28, 29, 30, 31, 33, 36, 38, 43, 49, 50, 52, 53, 56, 68, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 89], "sp": [0, 76, 87, 88, 94], "ndarrai": [0, 18, 21, 23, 24, 27, 28, 29, 30, 33, 35, 36, 39, 42, 43, 46, 47, 48, 49, 50, 52, 54, 56, 58, 59, 64, 68, 73, 75, 76, 78, 87, 88, 89], "return": [0, 1, 9, 11, 14, 15, 21, 23, 24, 27, 28, 29, 30, 33, 39, 43, 48, 49, 50, 52, 56, 64, 73, 75, 76, 77, 78, 87, 88, 89, 91, 92], "raised_cosin": [0, 87, 94, 95], "alpha": [0, 76, 85, 87, 88, 94], "rais": [0, 84, 87, 88, 91], "cosin": [0, 84, 87, 88, 91], "rc": [0, 87], "root_raised_cosin": [0, 79, 80, 81, 82, 83, 84, 86, 88, 91, 94, 95], "squar": [0, 84, 88, 91], "root": [0, 84, 88, 91], "srrc": [0, 84, 88], "farrowresampl": [0, 36, 37, 38, 39, 40, 41, 42, 90, 95, 96], "cubic": [0, 36], "farrow": [0, 36, 37, 38, 39, 40, 41, 42, 96], "arbitrari": [0, 36, 37, 38, 39, 40, 41, 42, 95, 96], "closedlooppl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 93, 95, 96], "A": [0, 1, 9, 11, 12, 13, 14, 15, 17, 24, 59, 77, 87, 88, 93], "defin": [0, 1, 24, 43, 76, 92, 95], "perform": [0, 1, 91, 92, 95], "close": [0, 1, 8, 10, 96], "pll": [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 96], "dd": [0, 18, 19, 20, 21, 22, 23, 68, 93, 95, 96], "direct": [0, 18, 19, 93, 96], "digit": [0, 1, 9, 11, 12, 13, 14, 15, 18, 19, 59, 87, 88, 93, 95, 96], "synthes": [0, 18, 19, 93, 96], "loopfilt": [0, 59, 60, 61, 62, 63, 64, 65, 66, 67, 93, 95, 96], "2nd": [0, 1, 59, 62, 93, 96], "order": [0, 1, 24, 31, 36, 38, 43, 53, 59, 62, 76, 87, 88, 93, 96], "proport": [0, 1, 5, 59, 60, 62, 96], "plu": [0, 1, 59, 62, 96], "integr": [0, 1, 6, 59, 61, 62, 92, 96], "ppi": [0, 59, 62], "nco": [0, 1, 4, 8, 18, 19, 20, 62, 68, 69, 70, 71, 72, 73, 74, 75, 93, 95, 96], "numer": [0, 1, 18, 20, 68, 70, 92, 93, 96], "control": [0, 1, 18, 20, 68, 70, 93, 96], "oscil": [0, 1, 18, 20, 68, 70, 93, 96], "hexdump": [0, 77, 95], "arraylik": [0, 18, 21, 24, 25, 27, 36, 39, 40, 43, 44, 45, 48, 59, 64, 68, 73, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89], "byte": [0, 77], "width": [0, 77], "16": [0, 77], "str": [0, 77], "specifi": [0, 77, 91, 92], "pack": [0, 77, 78, 95], "x": [0, 1, 18, 21, 24, 27, 36, 39, 43, 48, 59, 64, 68, 73, 78, 79, 80, 81, 84, 89, 93, 97], "bpe": [0, 78, 89], "binari": [0, 78, 89], "arrai": [0, 78, 84, 89, 92], "multipl": [0, 78, 89], "bit": [0, 77, 78, 89], "per": [0, 21, 73, 76, 77, 78, 87, 88, 89, 94], "element": [0, 77, 78, 89], "unpack": [0, 77, 89, 95], "use_styl": [0, 85], "appli": [0, 85], "": [0, 1, 9, 11, 12, 13, 15, 16, 24, 28, 29, 33, 43, 49, 50, 56, 79, 80, 81, 83, 84, 85, 90, 95], "default": [0, 30, 33, 85], "matplotlib": [0, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95], "rcparam": [0, 85, 90, 93], "time_domain": [0, 84, 94, 95], "sample_r": [0, 1, 8, 16, 28, 29, 49, 50, 79, 80, 81, 84, 90, 93, 94], "1": [0, 1, 8, 11, 15, 17, 18, 19, 28, 29, 43, 44, 49, 50, 59, 62, 63, 68, 70, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97], "0": [0, 8, 18, 19, 24, 28, 29, 43, 44, 49, 50, 62, 68, 70, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97], "signal": [0, 1, 9, 11, 14, 15, 18, 21, 24, 27, 36, 39, 43, 48, 59, 64, 68, 73, 75, 76, 84, 91, 92, 93, 94], "n": [0, 1, 18, 21, 23, 24, 27, 28, 29, 30, 31, 33, 36, 39, 43, 48, 49, 50, 52, 53, 56, 59, 64, 68, 73, 75, 79, 80, 81, 82, 83, 84, 93, 94], "b": [0, 43, 45, 76, 77, 79, 80, 81, 82, 83, 86, 94], "h": [0, 24, 25, 28, 29, 30, 43, 49, 50, 52, 59, 76, 79, 80, 82, 93, 94], "e": [0, 1, 18, 79, 80, 91, 92, 93], "j": [0, 1, 18, 43, 79, 80, 91, 92, 93], "omega": [0, 19, 68, 70, 71, 79, 80, 81, 93], "step": [0, 18, 21, 23, 24, 33, 43, 56, 68, 73, 75, 79, 83], "zero": [0, 40, 43, 44, 58, 59, 78, 79, 80, 81, 82, 83, 84, 86, 91, 93, 94], "pole": [0, 43, 44, 54, 79, 80, 81, 82, 83, 86, 91], "frequency_respons": [0, 24, 28, 29, 43, 49, 50, 80, 91, 92, 93, 94, 95], "group_delai": [0, 81, 91, 92, 95], "group": [0, 81], "delai": [0, 18, 24, 26, 36, 59, 68, 81, 93], "tau_g": [0, 81], "impulse_respons": [0, 24, 30, 43, 52, 76, 82, 87, 88, 91, 92, 94, 95], "step_respons": [0, 24, 33, 43, 56, 83, 91, 92, 93, 95], "zeros_pol": [0, 86, 92, 95], "kwarg": [0, 80, 81, 82, 83, 84, 86], "sdr": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97], "loop": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 95, 96], "thi": [1, 21, 24, 43, 73, 79, 80, 81, 82, 83, 86, 90, 92, 93, 94], "i": [1, 8, 17, 24, 30, 33, 34, 36, 41, 43, 52, 56, 57, 59, 62, 63, 66, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97], "meant": 1, "analysi": [1, 8, 93, 96], "onli": [1, 24, 32, 36, 40, 43, 55, 93], "block": [1, 18, 59, 68], "diagram": [1, 18, 59, 68], "bb": [1, 93], "ped": [1, 7, 8, 62, 93], "lf": [1, 93], "lo": [1, 93], "input": [1, 9, 11, 14, 15, 18, 21, 24, 25, 27, 30, 33, 36, 37, 39, 40, 43, 44, 45, 48, 52, 56, 59, 64, 68, 73, 78, 82, 83, 89, 91, 92, 93], "local": [1, 93], "baseband": [1, 93], "phase": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 95], "error": [1, 7, 8, 14, 59, 62, 93], "detector": [1, 7, 8, 62, 93], "filter": [1, 5, 6, 8, 10, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 76, 79, 80, 81, 82, 83, 84, 86, 87, 88, 94, 95, 96], "The": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97], "transfer": [1, 10, 24, 43, 44, 59, 76, 91, 92, 93], "function": [1, 10, 24, 43, 44, 59, 76, 91, 92, 93, 94, 95], "h_": [1, 93], "z": [1, 18, 24, 43, 59, 68, 91, 92, 93], "k_1": [1, 5, 59, 60, 93], "k_2": [1, 6, 59, 61, 93], "frac": [1, 9, 11, 14, 15, 43, 59, 76, 93], "k_0": [1, 4, 8, 19, 62, 68, 69, 70, 93], "k_p": [1, 7, 8, 62, 93], "2": [1, 9, 11, 14, 28, 29, 49, 50, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94], "refer": [1, 9, 11, 12, 13, 14, 15, 36, 59, 76, 87, 88, 92, 94], "michael": [1, 9, 11, 12, 13, 14, 15, 59, 87, 88], "rice": [1, 9, 11, 12, 13, 14, 15, 59, 87, 88], "commun": [1, 9, 11, 12, 13, 14, 15, 59, 87, 88, 93, 95], "discret": [1, 9, 11, 12, 13, 14, 15, 59, 87, 88, 90, 93], "time": [1, 8, 9, 11, 12, 13, 14, 15, 24, 43, 59, 62, 76, 79, 84, 87, 88, 90, 91, 92, 94], "approach": [1, 9, 11, 12, 13, 14, 15, 59, 87, 88, 93], "appendix": [1, 59, 87, 88], "c": [1, 9, 11, 12, 13, 14, 15, 59, 93], "lock": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 95], "exampl": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93], "see": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 87, 88, 95], "noise_bandwidth": [1, 8, 59, 62, 66], "damping_factor": [1, 8, 59, 62, 63], "creat": [1, 8, 18, 19, 24, 25, 36, 37, 43, 44, 45, 59, 62, 68, 70, 84, 90, 93, 94], "object": [1, 8, 92, 93], "frequency_lock_tim": [1, 9], "freq_offset": [1, 9, 11], "frequenc": [1, 9, 11, 13, 24, 28, 29, 43, 49, 50, 59, 79, 80, 81, 94], "lock_tim": [1, 11, 93], "phase_error_vari": [1, 14], "cn0": [1, 14], "varianc": [1, 14], "steadi": [1, 14], "state": [1, 14, 24, 32, 34, 36, 40, 41, 43, 55, 57], "phase_lock_tim": [1, 15], "bn": [1, 2], "nois": [1, 2, 3, 8, 14, 59, 62, 66, 93], "bandwidth": [1, 2, 3, 8, 12, 59, 62, 66, 76, 87, 88, 93, 94], "b_n": [1, 2, 3, 8, 9, 11, 14, 15, 59, 62, 66], "hz": [1, 2, 8, 9, 11, 14, 28, 29, 49, 50, 59, 62, 66, 76, 90], "bnt": [1, 3, 93], "normal": [1, 3, 8, 59, 62, 66, 76, 93, 94], "t": [1, 3, 8, 59, 62, 66, 76, 77, 90], "repres": [1, 10], "k0": [1, 4, 8, 18, 19, 62, 68, 69, 70], "gain": [1, 4, 5, 6, 7, 8, 18, 19, 43, 44, 51, 59, 60, 61, 62, 68, 69, 70, 76, 93], "k1": [1, 5, 59, 60, 93], "k2": [1, 6, 59, 61, 93], "kp": [1, 7, 8, 62], "omega_3db": [1, 12], "3": [1, 9, 11, 12, 15, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 92, 93, 94, 95, 96], "db": [1, 12, 14, 76, 94], "omega_": [1, 12], "textrm": [1, 12], "radian": [1, 12, 13, 14, 18, 19, 93], "omega_n": [1, 13, 93], "natur": [1, 13], "sampl": [1, 8, 16, 18, 19, 21, 23, 24, 26, 28, 29, 30, 33, 36, 40, 49, 50, 52, 56, 59, 62, 66, 68, 70, 71, 73, 75, 76, 79, 80, 81, 82, 83, 84, 87, 88, 90, 93, 94], "rate": [1, 8, 16, 28, 29, 36, 39, 49, 50, 79, 80, 81, 84], "f_": [1, 8, 16, 28, 29, 49, 50, 76, 79, 80, 81, 84, 90, 91, 92, 93, 94], "zeta": [1, 8, 17, 59, 62, 63], "damp": [1, 8, 17, 59, 62, 63, 93], "factor": [1, 8, 17, 59, 62, 63, 93], "properti": [2, 3, 4, 5, 6, 7, 10, 12, 13, 16, 17, 20, 26, 31, 34, 35, 38, 41, 42, 46, 47, 51, 53, 54, 57, 58, 60, 61, 63, 65, 66, 69, 71, 72], "paramet": [8, 9, 11, 14, 19, 21, 23, 25, 27, 28, 29, 30, 33, 37, 39, 40, 44, 45, 48, 49, 50, 52, 56, 62, 64, 70, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89], "where": [8, 59, 62, 66, 76, 91, 92, 95], "period": [8, 59, 62, 66], "second": [8, 9, 11, 15, 59, 62, 66, 76], "critic": [8, 17, 59, 62, 63, 93], "underdamp": [8, 17, 59, 62, 63], "overdamp": [8, 17, 59, 62, 63], "ted": [8, 62], "t_": [9, 11, 15, 39, 76, 94], "fl": [9, 11], "4": [9, 11, 29, 50, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 96], "delta": [9, 11, 24, 30, 43, 52, 82, 91, 92], "f": [9, 11, 24, 28, 29, 43, 49, 50, 76, 90, 91, 92, 93, 94], "offset": [9, 11, 18, 19, 68, 70, 72, 93], "take": [9, 11, 15], "onto": [9, 11, 15], "equat": [9, 11, 12, 13, 14, 15, 43], "39": 9, "pl": [11, 15], "38": 11, "34": 12, "33": 13, "sigma_": 14, "theta_": 14, "n_0": 14, "carrier": 14, "densiti": [14, 94], "ratio": 14, "43": 14, "40": 15, "less": 17, "than": 17, "greater": 17, "note": [18, 24, 43, 59, 68, 76], "increment": [18, 19, 21, 68, 70, 71, 73, 93], "v": [18, 68], "y": [18, 21, 23, 24, 27, 39, 43, 48, 59, 64, 68, 73, 75, 84, 93], "output": [18, 21, 23, 24, 30, 33, 43, 44, 45, 52, 56, 59, 64, 68, 73, 75, 78, 82, 83, 89, 90, 91, 92, 93], "complex": [18, 21, 23, 90, 91, 92], "exponenti": [18, 21, 23, 90, 91, 92], "constant": [18, 19, 59, 68, 70, 71, 92, 93], "accumul": [18, 19, 68, 70, 71, 93], "absolut": [18, 19, 68, 70, 72], "unit": [18, 24, 33, 43, 56, 59, 68, 70, 71, 72, 83, 87, 88, 91, 92, 93], "adder": [18, 59, 68, 93], "process": [18, 21, 68, 73, 92, 93], "variabl": [18, 21, 68, 73, 77, 93], "reset": [18, 22, 24, 32, 36, 40, 43, 55, 59, 67, 68, 74], "forward": [18, 23, 68, 75], "us": [18, 20, 25, 36, 37, 44, 45, 59, 65, 77, 78, 79, 82, 83, 89, 91, 92, 94, 95, 97], "theta": [19, 68, 70, 72], "vari": [21, 73], "number": [23, 28, 29, 30, 33, 49, 50, 52, 56, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 89], "wrapper": [24, 43], "scipi": [24, 27, 43, 94, 95], "convolv": [24, 27, 84], "It": [24, 43, 59], "support": [24, 43], "one": [24, 43, 76, 77, 79, 80, 81, 91, 92, 94], "stream": [24, 25, 32, 34, 36, 37, 40, 41, 43, 44, 45, 55, 57], "its": [24, 43, 44, 91, 92, 94], "feedforward": [24, 25, 35, 43, 45, 47, 79, 80, 81, 82, 83, 86, 91, 92], "coeffici": [24, 25, 43, 45, 79, 80, 81, 82, 83, 86, 91, 92], "h_i": [24, 25, 35, 91], "sum_": [24, 43], "sum": [24, 43, 94], "limits_": [24, 43], "bool": [24, 25, 34, 36, 37, 41, 43, 44, 45, 57], "fals": [24, 25, 36, 37, 43, 44, 45, 92, 94], "tupl": [24, 28, 29, 43, 49, 50], "frequency_response_log": [24, 29, 43, 50], "logarithm": [24, 29, 43, 50, 79, 80, 81, 91, 92], "axi": [24, 29, 43, 50, 79, 80, 81, 84, 90], "none": [24, 30, 33, 36, 40, 59, 67, 78, 79, 82, 83, 89, 90], "when": [24, 30, 33, 43, 52, 56, 79, 80, 81, 82, 83, 90, 91, 92], "mode": [24, 25, 27, 32, 34, 36, 37, 40, 41, 43, 44, 45, 55, 57], "u": [24, 33, 43, 56, 83, 91, 92], "indic": [24, 25, 34, 36, 37, 41, 43, 44, 45, 57], "whether": [24, 25, 34, 36, 37, 41, 43, 44, 45, 57], "tap": [24, 35, 36, 42, 43, 46, 47, 91, 92], "In": [25, 34, 37, 41, 44, 45, 57, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], "previou": [25, 37, 40, 44, 45], "ar": [25, 29, 37, 44, 45, 50, 78, 79, 80, 81, 85, 90, 92, 93, 94, 95, 97], "preserv": [25, 34, 37, 41, 44, 45, 57], "between": [25, 34, 37, 41, 44, 45, 57, 93], "call": [25, 34, 37, 41, 44, 45, 57], "liter": [27, 80, 81], "full": 27, "valid": 27, "same": [27, 91], "convolut": 27, "detail": 27, "1024": [28, 29, 49, 50, 79, 80, 81, 94], "from": [28, 29, 43, 44, 49, 50, 91, 92, 93, 95], "plot": [28, 29, 30, 33, 49, 50, 52, 56, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95], "decad": [29, 50, 79, 80, 81, 91, 93], "space": [29, 50], "length": [30, 33, 76, 79, 82, 83, 87, 88, 90, 94], "resampl": [36, 37, 38, 39, 40, 41, 42, 95, 96], "http": [36, 76], "wirelesspi": 36, "com": [36, 76], "fraction": [36, 40, 76, 90], "structur": 36, "new": [36, 37], "given": [36, 39, 91, 92], "r": [36, 39, 76, 87, 88, 92, 93, 94], "index": [36, 40], "vector": 40, "should": 40, "equal": 40, "three": [40, 90, 94], "If": [40, 78, 79, 82, 83, 84, 89, 95], "lfilter": 43, "b_i": [43, 45, 47, 79, 80, 81, 82, 83, 86, 92], "feedback": [43, 45, 46, 79, 80, 81, 82, 83, 86, 92], "a_j": [43, 45, 46, 79, 80, 81, 82, 83, 86, 92], "These": [43, 85, 93], "differ": [43, 94], "a_0": 43, "left": [43, 76], "m": 43, "right": [43, 76], "classmethod": [43, 44], "zerospol": [43, 44, 79, 80, 81, 82, 83, 86, 92], "self": [43, 44], "100": [43, 52, 56, 79, 82, 83, 84, 90], "a_tap": [43, 46, 79, 80, 81, 82, 83, 86, 92, 93], "b_tap": [43, 47, 79, 80, 81, 82, 83, 86, 92, 93], "can": [59, 76, 78, 91, 92, 97], "track": 59, "cannot": 59, "howev": [59, 90], "chirp": 59, "ramp": 59, "underli": [59, 65], "puls": [76, 84, 87, 88, 95], "shape": [76, 84, 87, 88, 95], "product": [76, 94], "sym": [76, 94], "side": [76, 79, 80, 81, 91, 92, 94], "symbol": [76, 87, 88, 94], "also": [76, 95], "thought": [76, 97], "smaller": [76, 94], "valu": [76, 92], "produc": [76, 94], "wider": 76, "must": [76, 87, 88], "even": [76, 87, 88], "amplitud": [76, 90, 93], "so": [76, 95], "nomin": 76, "passband": 76, "ha": [76, 93, 94], "exp": [76, 79, 80, 81, 82, 83, 84, 86, 90, 92, 93], "relat": 76, "sqrt": [76, 93, 94], "ln": 76, "pi": [76, 79, 80, 81, 82, 83, 84, 86, 90, 91, 92, 93], "www": 76, "mathwork": 76, "help": 76, "ref": 76, "gaussdesign": 76, "html": 76, "onlinelibrari": 76, "wilei": 76, "doi": 76, "pdf": 76, "10": [76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94], "1002": 76, "9780470041956": 76, "app2": 76, "h_0p1": [76, 87, 88], "5": [76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 96], "h_0p2": 76, "h_0p3": 76, "plt": [76, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94], "figur": [76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94], "figsiz": [76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94], "8": [76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94], "label": [76, 84, 87, 88, 90, 93, 94], "show": [76, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94], "data": [77, 78, 89, 95], "displai": [77, 79, 80, 81], "each": 77, "consid": 77, "convert": 77, "line": 77, "string": 77, "contain": 77, "print": [77, 90, 91, 92, 93], "quick": 77, "brown": 77, "fox": 77, "jump": 77, "over": 77, "lazi": 77, "dog": 77, "00000000": 77, "54": 77, "68": 77, "65": 77, "20": [77, 94], "71": 77, "75": [77, 93], "69": 77, "63": 77, "6b": 77, "62": 77, "72": 77, "6f": 77, "77": 77, "6e": 77, "00000010": 77, "66": 77, "78": 77, "6a": 77, "6d": 77, "70": [77, 94], "73": 77, "76": 77, "74": 77, "00000020": 77, "6c": 77, "61": 77, "7a": 77, "79": 77, "64": [77, 92], "67": 77, "he": 77, "6": [77, 79, 80, 81, 82, 83, 84, 86, 91, 92, 93], "7": 77, "9": [77, 87, 88, 94, 96], "01": [77, 92, 93], "02": [77, 92, 93], "03": [77, 92], "04": [77, 92], "00000004": 77, "05": [77, 90, 92, 93], "06": 77, "07": 77, "08": 77, "00000008": 77, "09": 77, "0a": 77, "dtype": [78, 84, 89, 93], "dtypelik": [78, 89], "assum": [78, 89], "have": [78, 89], "most": [78, 89], "signific": [78, 89], "first": [78, 89], "enough": 78, "fill": 78, "last": 78, "remain": 78, "type": [78, 80, 81, 89], "smallest": 78, "unsign": 78, "integ": 78, "hold": 78, "out": [78, 85, 89], "uint8": [78, 89], "n_time": [79, 92], "n_freq": 79, "x_axi": [79, 80, 81, 91, 92, 93], "two": [79, 80, 81, 90, 91, 92], "log": [79, 80, 81, 91, 92, 93], "For": [79, 80, 81, 82, 83, 86, 91], "set": [79, 80, 81, 82, 83, 85, 86, 92], "n_t": 79, "domain": [79, 84], "n_f": 79, "scale": [79, 80, 81, 91, 92], "option": [79, 80, 81], "spectrum": [79, 80, 81], "h_srrc": [79, 80, 81, 82, 83, 84, 86], "np": [79, 80, 81, 82, 83, 84, 86, 90, 91, 92, 93, 94], "1j": [79, 80, 81, 82, 83, 84, 86, 90, 92, 93], "conj": [79, 80, 81, 82, 83, 86, 92, 93], "30": [79, 82, 83, 92], "addit": [80, 81, 82, 83, 84, 86], "keyword": [80, 81, 82, 83, 84, 86, 91, 92], "argument": [80, 81, 82, 83, 84, 86, 91, 92], "pass": [80, 81, 82, 83, 84, 86, 91, 92], "pyplot": [80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94], "ylim": [81, 91, 93, 94], "48": 81, "52": 81, "bpsk": 84, "1000": 84, "symbol_map": 84, "random": 84, "randint": 84, "10e3": 84, "titl": [84, 90, 93, 94], "tight_layout": [84, 93, 94], "qpsk": 84, "complex64": [84, 93], "style": 85, "mai": [85, 92], "revert": 85, "rcdefault": 85, "follow": [85, 93], "_rc_param": 85, "rc_param": 85, "ax": [85, 90, 93], "grid": [85, 90, 93, 94], "true": 85, "autolayout": 85, "max_open_warn": 85, "titleweight": 85, "bold": 85, "linestyl": [85, 90, 93, 94], "excess": [87, 88, 94], "le": [87, 88], "energi": [87, 88], "h_0p5": [87, 88], "h_0p9": [87, 88], "numpi": [89, 90, 91, 92, 93, 94, 95], "import": [90, 91, 92, 93, 94, 95], "config": [90, 91, 92, 93, 94], "inlinebackend": [90, 91, 92, 93, 94], "print_figure_kwarg": [90, 91, 92, 93, 94], "facecolor": [90, 91, 92, 93, 94], "w": [90, 91, 92, 93, 94], "widget": [90, 91, 92, 93, 94], "color": [90, 93, 94], "prop_cycl": [90, 93], "by_kei": [90, 93], "continu": 90, "freq": [90, 93], "tx": 90, "arang": [90, 93], "decai": [90, 92], "real": [90, 91, 92, 93], "marker": [90, 91, 92], "o": 90, "fillstyl": 90, "imag": 90, "xlabel": [90, 93, 94], "ylabel": [90, 93, 94], "origin": 90, "legend": [90, 93, 94], "which": [90, 93, 94], "both": [90, 93], "now": 90, "equival": 90, "accomplish": 90, "librari": [90, 95, 97], "def": 90, "resample_sign": 90, "new_sample_r": 90, "ty": 90, "size": [90, 93, 94], "notic": [90, 94], "everi": 90, "200": 90, "four": 90, "400": 90, "other": [90, 97], "appear": 90, "50": 90, "fourth": 90, "25": [90, 93, 94], "roughli": 90, "often": 90, "do": 90, "align": 90, "315": 90, "32": 90, "user": [91, 92], "below": [91, 92], "comput": [91, 92, 93, 94], "method": [91, 92], "00095881": 91, "00175008": 91, "00423912": 91, "00588237": 91, "00615087": 91, "00474585": 91, "00170436": 91, "0025481": 91, "00721629": 91, "01123216": 91, "01342329": 91, "01273174": 91, "00845039": 91, "00043678": 91, "01073645": 91, "02372925": 91, "03650167": 91, "04650553": 91, "05098414": 91, "04734541": 91, "03355823": 91, "00851466": 91, "0276993": 91, "07367186": 91, "12670168": 91, "18306847": 91, "2381038": 91, "28726435": 91, "32607284": 91, "3509308": 91, "35948882": 91, "conveni": [91, 92], "evalu": [91, 92], "shift": [91, 92], "envelop": [91, 92], "through": [91, 92, 93], "easili": [91, 92], "here": [91, 92], "12": 91, "altern": 92, "conjug": 92, "0x000002214b040a88": 92, "47820725": 92, "00000000e": 92, "00": 92, "78207252e": 92, "58172329e": 92, "10862468e": 92, "86109590e": 92, "21565653e": 92, "01140214e": 92, "57286400e": 92, "67772160e": 92, "47338728e": 92, "10422993e": 92, "89312837e": 92, "12240078e": 92, "03953322e": 92, "69685122e": 92, "63882791e": 92, "81474977e": 92, "47193366e": 92, "85259041e": 92, "15647504e": 92, "23851924e": 92, "42176895e": 92, "84684395e": 92, "42721858e": 92, "72236648e": 92, "14721649e": 92, "10813095e": 92, "94024315e": 92, "78877688e": 92, "74077567e": 92, "87820725": 92, "53637958": 92, "94724205": 92, "13335164": 92, "1455082": 92, "04436799": 92, "88708159": 92, "71930943": 92, "5719707": 92, "46154771": 92, "39261642": 92, "36139242": 92, "35935288": 92, "3763214": 92, "40270968": 92, "43085717": 92, "45557651": 92, "47410241": 92, "48566716": 92, "49090568": 92, "49124786": 92, "48840102": 92, "4839738": 92, "47925143": 92, "47510421": 92, "47199608": 92, "47005584": 92, "46917696": 92, "46911955": 92, "denomin": 92, "73910363": 92, "30614675j": 92, "plane": 92, "linspac": 92, "endpoint": 92, "concaten": 92, "0x000002214dc574c8": 92, "lyon": 92, "understand": 92, "3rd": 92, "edit": 92, "section": [92, 93], "insid": 92, "circl": 92, "sinusoid": 92, "outsid": 92, "unstabl": 92, "increas": 92, "configur": 93, "0x00000290f1ce3488": 93, "theta_0": 93, "phase_error": 93, "measur": 93, "freq_estim": 93, "estim": 93, "rang": 93, "subplot": 93, "suptitl": 93, "ones": 93, "angl": 93, "part": 93, "unwrap": 93, "system": [93, 95], "avail": 93, "500": 93, "rf": 93, "xlim": [93, 94], "001": 93, "005": 93, "b_nt": 93, "0005": 93, "00001": 93, "0125": 93, "015": 93, "0175": 93, "t_lock": 93, "rectangular": 94, "rect": 94, "achiev": 94, "rc_0p1": 94, "rc_0p5": 94, "rc_0p9": 94, "k": 94, "nyquist": 94, "mean": 94, "adjac": 94, "specif": 94, "pm": 94, "roll": 94, "60": 94, "total": 94, "nearli": 94, "compar": 94, "null": 94, "while": 94, "small": 94, "lobe": 94, "much": 94, "higher": 94, "power": 94, "spectral": 94, "h_rect": 94, "freqz": 94, "worn": 94, "whole": 94, "h_rc_0p1": 94, "h_rc_0p5": 94, "h_rc_0p9": 94, "rel": 94, "main": 94, "p_rect": 94, "log10": 94, "cumsum": 94, "ab": 94, "p_rc_0p1": 94, "p_rc_0p5": 94, "p_rc_0p9": 94, "One": 94, "within": 94, "variou": 94, "srrc_0p1": 94, "srrc_0p5": 94, "srrc_0p9": 94, "therefor": 94, "similar": 94, "significantli": 94, "due": 94, "being": 94, "h_srrc_0p1": 94, "h_srrc_0p5": 94, "h_srrc_0p9": 94, "p_srrc_0p1": 94, "p_srrc_0p5": 94, "p_srrc_0p9": 94, "gauss_0p1": 94, "gauss_0p2": 94, "gauss_0p3": 94, "python": 95, "packag": 95, "softwar": 95, "radio": 95, "goal": 95, "provid": 95, "tool": 95, "design": 95, "build": 95, "analyz": 95, "reli": 95, "interoper": 95, "veri": 95, "possibl": 95, "numba": 95, "acceler": 95, "computation": 95, "intens": 95, "addition": 95, "aim": 95, "replic": 95, "relev": 95, "matlab": 95, "dsp": 95, "toolbox": 95, "we": 95, "progress": 95, "ad": [95, 96], "someth": 95, "you": 95, "d": 95, "like": 95, "includ": 95, "pleas": 95, "open": 95, "issu": 95, "github": 95, "manipul": 95, "util": 95, "releas": 96, "juli": 96, "2023": 96, "matt": 96, "hostett": 96, "mhostett": 96, "semant": 97, "major": 97, "minor": 97, "patch": 97, "introduc": 97, "api": 97, "chang": 97, "featur": 97, "add": 97, "backward": 97, "compat": 97, "make": 97, "bug": 97, "fix": 97, "befor": 97, "There": 97, "guarante": 97, "them": 97, "thei": 97}, "objects": {"": [[0, 0, 0, 1, "sdr", ""]], "sdr": [[1, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [18, 1, 1, "", "DDS", "Implements a direct digital synthesizer (DDS)."], [24, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [36, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [43, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [59, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [68, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [76, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [77, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [78, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [87, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [88, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [89, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."]], "sdr.ClosedLoopPLL": [[2, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [3, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [4, 2, 1, "", "K0", "The NCO gain $K_0$."], [5, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [6, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [7, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [8, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [9, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [10, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [11, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [12, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [13, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [14, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [15, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [16, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [17, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[8, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [8, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [8, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [8, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [8, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[9, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[11, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[14, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.DDS": [[19, 3, 1, "", "__init__", "Creates a direct digital synthesizer (DDS)."], [20, 2, 1, "", "nco", "The numerically-controlled oscillator (NCO) used by the DDS."], [21, 3, 1, "", "process", "Steps the DDS with the variable phase increment signal $x[n]$."], [22, 3, 1, "", "reset", "Resets the DDS."], [23, 3, 1, "", "step", "Steps the DDS forward by $N$ samples."]], "sdr.DDS.__init__": [[19, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [19, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [19, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.DDS.process": [[21, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the DDS."]], "sdr.DDS.step": [[23, 4, 2, "p-N", "N", "The number of samples $N$ to step the DDS forward."]], "sdr.FIR": [[25, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [26, 2, 1, "", "delay", "The delay of the FIR filter in samples."], [27, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the FIR filter."], [28, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the FIR filter."], [29, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the FIR filter on a logarithmic frequency axis."], [30, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [31, 2, 1, "", "order", "The order of the FIR filter, $N$."], [32, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [33, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [34, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [35, 2, 1, "", "taps", "The feedforward taps $h_i$."]], "sdr.FIR.__init__": [[25, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$."], [25, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to filter()."]], "sdr.FIR.filter": [[27, 4, 2, "p-mode", "mode", "The convolution mode. See scipy.signal.convolve() for details."], [27, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.FIR.frequency_response": [[28, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [28, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.frequency_response_log": [[29, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [29, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [29, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[30, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.step_response": [[33, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FarrowResampler": [[37, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [38, 2, 1, "", "order", "The order of the filter."], [39, 3, 1, "", "resample", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [40, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [41, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [42, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__init__": [[37, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to resample()."]], "sdr.FarrowResampler.resample": [[39, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [39, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.reset": [[40, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[44, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [45, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [46, 2, 1, "", "a_taps", "The feedback taps $a_j$."], [47, 2, 1, "", "b_taps", "The feedforward taps $b_i$."], [48, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the IIR filter."], [49, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the IIR filter."], [50, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the IIR filter on a logarithmic frequency axis."], [51, 2, 1, "", "gain", "The gain of the IIR filter."], [52, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [53, 2, 1, "", "order", "The order of the IIR filter, $N$."], [54, 2, 1, "", "poles", "The poles of the IIR filter."], [55, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [56, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [57, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [58, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[44, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [44, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [44, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."], [44, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__init__": [[45, 4, 2, "p-a", "a", "The feedback coefficients $a_j$."], [45, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [45, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."]], "sdr.IIR.filter": [[48, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.IIR.frequency_response": [[49, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [49, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[50, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [50, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [50, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[52, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[56, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.LoopFilter": [[60, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [61, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [62, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [63, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [64, 3, 1, "", "filter", "Filters the input signal $x[n]$."], [65, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [66, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [67, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__init__": [[62, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [62, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [62, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [62, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.LoopFilter.filter": [[64, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.NCO": [[69, 2, 1, "", "K0", "The NCO gain $K_0$."], [70, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [71, 2, 1, "", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [72, 2, 1, "", "offset", "The absolute offset $theta$ of the NCO in units."], [73, 3, 1, "", "process", "Steps the NCO with the variable-increment signal $x[n]$."], [74, 3, 1, "", "reset", "Resets the NCO."], [75, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__init__": [[70, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [70, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [70, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in units."]], "sdr.NCO.process": [[73, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the NCO."]], "sdr.NCO.step": [[75, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.gaussian": [[76, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [76, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [76, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.hexdump": [[77, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [77, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.pack": [[78, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [78, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [78, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.plot": [[79, 5, 1, "", "filter", "Plots the frequency response $H(e^{jomega})$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [80, 5, 1, "", "frequency_response", "Plots the frequency response $H(e^{jomega})$ of the filter."], [81, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [82, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [83, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [84, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [85, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [86, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.filter": [[79, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [79, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [79, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [79, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [79, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [79, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [79, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.frequency_response": [[80, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [80, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [80, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [80, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [80, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [80, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[81, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [81, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [81, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [81, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [81, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [81, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.impulse_response": [[82, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [82, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [82, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.plot.step_response": [[83, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [83, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [83, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.plot.time_domain": [[84, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\"."], [84, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[86, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [86, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.raised_cosine": [[87, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [87, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [87, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.root_raised_cosine": [[88, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [88, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [88, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.unpack": [[89, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [89, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [89, 4, 2, "p-x", "x", "The input array with bpe bits per element."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"sdr": [0, 95], "filter": [0, 91, 92, 93], "puls": [0, 94], "shape": [0, 94], "resampl": [0, 90], "phase": [0, 93], "time": [0, 93], "lock": [0, 93], "loop": [0, 93], "data": 0, "manipul": 0, "plot": 0, "configur": 0, "domain": [0, 93], "frequenc": [0, 91, 92, 93], "analysi": 0, "note": 1, "constructor": [1, 18, 24, 36, 43, 59, 68], "method": [1, 18, 24, 36, 43, 59, 68], "properti": [1, 18, 24, 36, 43, 59, 68], "see": [18, 28, 29, 30, 33, 49, 50, 52, 56, 68, 79, 80, 81, 82, 83, 86], "also": [18, 28, 29, 30, 33, 49, 50, 52, 56, 68, 79, 80, 81, 82, 83, 86], "farrow": 90, "arbitrari": 90, "construct": 90, "an": [90, 91, 92], "input": 90, "signal": 90, "x": 90, "n": [90, 91, 92], "t_": 90, "rate": 90, "r": 90, "y": 90, "frac": 90, "upsampl": 90, "integ": 90, "downsampl": 90, "irrat": 90, "fir": 91, "creat": [91, 92], "examin": [91, 92], "impuls": [91, 92], "respons": [91, 92, 93], "h": [91, 92], "step": [91, 92, 93], "": [91, 92], "omega": [91, 92], "group": [91, 92], "delai": [91, 92], "tau_g": [91, 92], "fulli": [91, 92], "analyz": [91, 92, 93], "iir": 92, "zero": 92, "pole": 92, "digit": 92, "stabil": 92, "design": 93, "proport": 93, "plu": 93, "integr": 93, "ppi": 93, "implement": 93, "pll": 93, "close": 93, "perform": 93, "compar": 93, "across": 93, "zeta": 93, "b_n": 93, "t": 93, "rais": 94, "cosin": 94, "squar": 94, "root": 94, "gaussian": 94, "featur": 95, "v0": 96, "0": 96, "1": 96, "chang": 96, "contributor": 96, "version": 97, "alpha": 97, "releas": 97, "beta": 97}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"sdr": [[0, "sdr"], [95, "sdr"]], "Filtering": [[0, "filtering"]], "Pulse shaping": [[0, "pulse-shaping"]], "Resampling": [[0, "resampling"]], "Phase/time-locked loops": [[0, "phase-time-locked-loops"]], "Data manipulation": [[0, "data-manipulation"]], "Plotting": [[0, "plotting"]], "Configuration": [[0, "configuration"]], "Time-domain": [[0, "time-domain"]], "Frequency-domain": [[0, "frequency-domain"]], "Filter analysis": [[0, "filter-analysis"]], "Note": [[1, null]], "Constructors": [[1, "constructors"], [18, "constructors"], [24, "constructors"], [36, "constructors"], [43, "constructors"], [59, "constructors"], [68, "constructors"]], "Methods": [[1, "methods"], [18, "methods"], [24, "methods"], [36, "methods"], [43, "methods"], [59, "methods"], [68, "methods"]], "Properties": [[1, "properties"], [18, "properties"], [24, "properties"], [36, "properties"], [43, "properties"], [59, "properties"], [68, "properties"]], "See also": [[18, null], [28, null], [29, null], [30, null], [33, null], [49, null], [50, null], [52, null], [56, null], [68, null], [79, null], [80, null], [81, null], [82, null], [83, null], [86, null]], "Farrow arbitrary resampler": [[90, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[90, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[90, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[90, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[90, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[90, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[90, "downsample-by-an-irrational-rate"]], "FIR filters": [[91, "fir-filters"]], "Create an FIR filter": [[91, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[91, "examine-the-impulse-response-h-n"], [92, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[91, "examine-the-step-response-s-n"], [92, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[91, "examine-the-frequency-response-h-omega"], [92, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[91, "examine-the-group-delay-tau-g-omega"], [92, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[91, "fully-analyze-a-fir-filter"]], "IIR filters": [[92, "iir-filters"]], "Create an IIR filter": [[92, "create-an-iir-filter"]], "Examine the zeros and poles": [[92, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[92, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[92, "poles-and-digital-filter-stability"]], "Phase-locked loops": [[93, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[93, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[93, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[93, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[93, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[93, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[93, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[93, "compare-lock-time-across-b-n-t"]], "Pulse shapes": [[94, "pulse-shapes"]], "Raised cosine": [[94, "raised-cosine"]], "Square-root raised cosine": [[94, "square-root-raised-cosine"]], "Gaussian": [[94, "gaussian"]], "Features": [[95, "features"]], "v0.0": [[96, "v0-0"]], "v0.0.1": [[96, "v0-0-1"]], "Changes": [[96, "changes"]], "Contributors": [[96, "contributors"]], "Versioning": [[97, "versioning"]], "Alpha releases": [[97, "alpha-releases"]], "Beta releases": [[97, "beta-releases"]]}, "indexentries": {"module": [[0, "module-sdr"]], "sdr": [[0, "module-sdr"]]}, "docurls": ["api/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.DDS/", "api/sdr.DDS.__init__/", "api/sdr.DDS.nco/", "api/sdr.DDS.process/", "api/sdr.DDS.reset/", "api/sdr.DDS.step/", "api/sdr.FIR/", "api/sdr.FIR.__init__/", "api/sdr.FIR.delay/", "api/sdr.FIR.filter/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.frequency_response_log/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.reset/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.resample/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__init__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.filter/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.filter/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.process/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.gaussian/", "api/sdr.hexdump/", "api/sdr.pack/", "api/sdr.plot.filter/", "api/sdr.plot.frequency_response/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.step_response/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.raised_cosine/", "api/sdr.root_raised_cosine/", "api/sdr.unpack/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/phase-locked-loop/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})