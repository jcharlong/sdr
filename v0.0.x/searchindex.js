Search.setIndex({"titles": ["Conversions", "Data manipulation", "Detection", "Digital signal processing", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "sdr.AGC", "sdr.AGC.__call__", "sdr.AGC.__init__", "sdr.AGC.attack", "sdr.AGC.decay", "sdr.AGC.gain", "sdr.AGC.reference", "sdr.AGC.reset", "sdr.AGC.streaming", "sdr.Channelizer", "sdr.Channelizer.__call__", "sdr.Channelizer.__init__", "sdr.Channelizer.channels", "sdr.Channelizer.delay", "sdr.Channelizer.method", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.Decimator", "sdr.Decimator.__call__", "sdr.Decimator.__init__", "sdr.Decimator.delay", "sdr.Decimator.method", "sdr.Decimator.rate", "sdr.Decimator.reset", "sdr.Differentiator", "sdr.Differentiator.__init__", "sdr.EnergyDetector", "sdr.EnergyDetector.p_d", "sdr.EnergyDetector.p_fa", "sdr.EnergyDetector.roc", "sdr.EnergyDetector.threshold", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__call__", "sdr.FIR.__init__", "sdr.FIR.__len__", "sdr.FIR.delay", "sdr.FIR.flush", "sdr.FIR.frequency_response", "sdr.FIR.group_delay", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.phase_delay", "sdr.FIR.reset", "sdr.FIR.state", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__call__", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.delay", "sdr.FarrowResampler.flush", "sdr.FarrowResampler.order", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.state", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.FractionalDelay", "sdr.FractionalDelay.__init__", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__call__", "sdr.IIR.__init__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.frequency_response", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.state", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.Integrator", "sdr.Integrator.__init__", "sdr.Interpolator", "sdr.Interpolator.__call__", "sdr.Interpolator.__init__", "sdr.Interpolator.delay", "sdr.Interpolator.method", "sdr.Interpolator.rate", "sdr.LeakyIntegrator", "sdr.LeakyIntegrator.__init__", "sdr.LinearModulation", "sdr.LinearModulation.__init__", "sdr.LinearModulation.ber", "sdr.LinearModulation.bps", "sdr.LinearModulation.decide_symbols", "sdr.LinearModulation.demodulate", "sdr.LinearModulation.map_symbols", "sdr.LinearModulation.modulate", "sdr.LinearModulation.order", "sdr.LinearModulation.phase_offset", "sdr.LinearModulation.pulse_shape", "sdr.LinearModulation.rx_filter", "sdr.LinearModulation.ser", "sdr.LinearModulation.sps", "sdr.LinearModulation.symbol_map", "sdr.LinearModulation.tx_filter", "sdr.LoopFilter", "sdr.LoopFilter.__call__", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.iir", "sdr.LoopFilter.integral_gain", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.proportional_gain", "sdr.LoopFilter.reset", "sdr.MLPED", "sdr.MLPED.A_received", "sdr.MLPED.A_reference", "sdr.MLPED.__call__", "sdr.MLPED.__init__", "sdr.MLPED.data_aided_error", "sdr.MLPED.decision_directed_error", "sdr.MLPED.gain", "sdr.MSK", "sdr.MSK.__init__", "sdr.MovingAverager", "sdr.MovingAverager.__init__", "sdr.NCO", "sdr.NCO.__call__", "sdr.NCO.__init__", "sdr.NCO.gain", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.reset", "sdr.NCO.step", "sdr.OQPSK", "sdr.OQPSK.__init__", "sdr.PED", "sdr.PED.__call__", "sdr.PED.__init__", "sdr.PED.data_aided_error", "sdr.PED.decision_directed_error", "sdr.PED.gain", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.ber", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.PiMPSK", "sdr.PiMPSK.__init__", "sdr.PolyphaseFIR", "sdr.PolyphaseFIR.__call__", "sdr.PolyphaseFIR.__init__", "sdr.PolyphaseFIR.branches", "sdr.PolyphaseFIR.delay", "sdr.PolyphaseFIR.input", "sdr.PolyphaseFIR.order", "sdr.PolyphaseFIR.output", "sdr.PolyphaseFIR.polyphase_order", "sdr.PolyphaseFIR.polyphase_taps", "sdr.PolyphaseFIR.reset", "sdr.PolyphaseFIR.taps", "sdr.Q", "sdr.Qinv", "sdr.ReplicaCorrelator", "sdr.ReplicaCorrelator.p_d", "sdr.ReplicaCorrelator.p_fa", "sdr.ReplicaCorrelator.roc", "sdr.ReplicaCorrelator.threshold", "sdr.Resampler", "sdr.Resampler.__call__", "sdr.Resampler.__init__", "sdr.Resampler.delay", "sdr.Resampler.down", "sdr.Resampler.method", "sdr.Resampler.rate", "sdr.Resampler.up", "sdr.albersheim", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.barker", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.db", "sdr.design_bandpass_fir", "sdr.design_bandstop_fir", "sdr.design_frac_delay_fir", "sdr.design_highpass_fir", "sdr.design_lowpass_fir", "sdr.design_multirate_fir", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.downsample", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.euclidean", "sdr.evm", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.hadamard", "sdr.half_sine", "sdr.hamming", "sdr.hexdump", "sdr.iq_imbalance", "sdr.linear", "sdr.mix", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.percent", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.eye", "sdr.plot.filter", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.magnitude_response", "sdr.plot.p_d", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.phase_tree", "sdr.plot.raster", "sdr.plot.roc", "sdr.plot.ser", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.polyphase_decompose", "sdr.ppb", "sdr.ppm", "sdr.raised_cosine", "sdr.rectangular", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.to_complex_bb", "sdr.to_real_pb", "sdr.unpack", "sdr.upsample", "sdr.walsh", "sdr.wavelength", "sdr.zadoff_chu", "Sequences", "Simulation", "Synchronization", "Documentation", "Formatting", "Installation", "Unit Tests", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304], "db": [0, 4, 5, 18, 20, 24, 35, 37, 43, 51, 53, 55, 57, 58, 59, 61, 106, 110, 118, 128, 149, 161, 169, 171, 173, 175, 192, 194, 198, 204, 205, 206, 207, 215, 216, 217, 218, 219, 220, 221, 226, 227, 228, 229, 230, 232, 234, 235, 241, 242, 245, 246, 247, 248, 250, 251, 257, 264, 276, 279, 280, 298, 300, 301, 303], "x": [0, 1, 3, 5, 6, 7, 8, 9, 10, 18, 19, 24, 41, 42, 48, 50, 55, 57, 62, 63, 78, 79, 88, 90, 92, 106, 107, 108, 109, 114, 116, 121, 123, 132, 133, 149, 151, 161, 169, 175, 177, 178, 179, 182, 189, 190, 191, 196, 197, 205, 206, 209, 212, 214, 215, 222, 223, 224, 225, 228, 231, 232, 233, 239, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 265, 267, 268, 272, 273, 276, 278, 283, 284, 289, 293, 298, 299, 300, 303, 304], "arraylik": [0, 1, 2, 3, 4, 5, 6, 7, 8, 18, 19, 20, 41, 42, 43, 48, 50, 51, 52, 53, 54, 55, 57, 62, 63, 64, 78, 84, 88, 90, 91, 92, 93, 106, 108, 109, 110, 114, 116, 117, 118, 120, 121, 122, 123, 128, 141, 144, 149, 150, 151, 161, 162, 169, 170, 171, 173, 175, 176, 177, 178, 179, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 207, 209, 210, 212, 213, 215, 216, 217, 219, 220, 222, 223, 224, 226, 227, 228, 229, 230, 232, 233, 234, 240, 242, 244, 246, 249, 253, 254, 255, 256, 257, 258, 259, 260, 263, 265, 266, 270, 271, 272, 273, 279, 280, 283, 286, 289], "ndarrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 18, 19, 41, 42, 48, 50, 51, 52, 53, 54, 55, 60, 62, 63, 67, 68, 69, 70, 72, 74, 75, 77, 78, 79, 82, 85, 87, 88, 90, 92, 94, 95, 96, 98, 100, 102, 103, 105, 106, 108, 109, 114, 116, 118, 120, 121, 122, 123, 126, 128, 130, 132, 133, 141, 144, 146, 147, 149, 151, 153, 154, 160, 161, 163, 164, 166, 167, 169, 171, 173, 174, 175, 177, 178, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 261, 262, 264, 267, 268, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289], "float_": [0, 2, 3, 4, 5, 6, 7, 8, 50, 51, 52, 53, 54, 55, 60, 116, 118, 126, 128, 141, 146, 147, 149, 161, 163, 164, 166, 167, 169, 171, 173, 175, 189, 190, 191, 192, 193, 194, 195, 204, 207, 210, 213, 215, 216, 217, 218, 219, 220, 221, 226, 227, 228, 229, 230, 234, 235, 238, 242, 246, 249, 250, 264, 272, 273, 274, 275, 277, 279, 280, 281, 282, 286], "convert": [0, 3, 116, 120, 122, 149, 161, 169, 175, 215, 226, 227, 229, 230, 240, 242, 249, 272, 273, 279, 280, 281, 282], "linear": [0, 9, 14, 16, 18, 48, 78, 108, 110, 112, 116, 117, 146, 147, 149, 161, 166, 167, 169, 175, 196, 198, 201, 206, 215, 242, 256, 258, 263, 265, 267, 302, 303], "unit": [0, 18, 41, 48, 62, 75, 88, 90, 103, 106, 108, 114, 132, 150, 151, 153, 162, 170, 176, 177, 196, 206, 207, 215, 222, 223, 242, 266, 268, 293, 296, 297, 299, 302, 303], "percent": [0, 249, 303], "percentag": [0, 249], "ppm": [0, 273, 278, 289, 303], "part": [0, 268, 272, 273, 278, 299], "per": [0, 1, 19, 42, 63, 109, 116, 117, 119, 121, 123, 129, 149, 150, 154, 161, 162, 169, 170, 175, 176, 197, 206, 207, 226, 227, 229, 230, 233, 235, 238, 240, 244, 251, 252, 261, 272, 273, 274, 275, 277, 278, 279, 280, 283, 292, 298, 301, 303], "million": [0, 273, 278], "ppb": [0, 272, 303], "billion": [0, 272], "ebn0_to_esn0": [0, 128, 173, 226, 300, 303], "ebn0": [0, 7, 116, 118, 149, 161, 169, 171, 175, 207, 226, 227, 250, 300], "bp": [0, 116, 119, 149, 161, 169, 175, 226, 227, 229, 279, 300], "int": [0, 1, 3, 6, 7, 18, 20, 22, 41, 43, 44, 46, 48, 49, 55, 57, 58, 61, 62, 65, 66, 68, 69, 70, 71, 72, 75, 78, 80, 81, 83, 88, 89, 90, 96, 98, 99, 103, 106, 108, 110, 111, 113, 114, 116, 117, 119, 124, 129, 146, 147, 149, 150, 151, 152, 153, 160, 161, 162, 166, 167, 169, 170, 175, 176, 177, 179, 180, 181, 183, 185, 196, 198, 199, 200, 203, 205, 206, 208, 209, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 235, 236, 237, 238, 239, 240, 244, 245, 247, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 265, 266, 271, 274, 275, 277, 279, 280, 283, 284, 285, 287, 288, 300], "ebn0_to_snr": [0, 149, 161, 169, 175, 227, 303], "esn0_to_ebn0": [0, 118, 171, 229, 303], "esn0": [0, 7, 116, 128, 149, 161, 169, 173, 175, 229, 230, 264, 300], "esn0_to_snr": [0, 230, 300, 303], "sp": [0, 6, 7, 116, 117, 121, 123, 129, 149, 150, 161, 162, 169, 170, 175, 176, 227, 230, 235, 238, 252, 261, 268, 274, 275, 277, 279, 280, 281, 282, 298, 300, 301], "1": [0, 6, 8, 9, 11, 12, 13, 16, 18, 20, 24, 31, 34, 38, 40, 41, 43, 48, 49, 50, 51, 53, 54, 55, 62, 65, 66, 68, 69, 72, 78, 80, 81, 88, 89, 90, 91, 96, 106, 107, 108, 110, 114, 115, 116, 117, 120, 121, 122, 123, 130, 132, 134, 135, 141, 145, 149, 150, 151, 153, 155, 161, 162, 163, 169, 170, 171, 172, 173, 174, 175, 176, 177, 183, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 249, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 304], "snr_to_ebn0": [0, 118, 171, 207, 279, 303], "snr": [0, 2, 4, 7, 50, 51, 53, 55, 57, 58, 59, 60, 61, 149, 161, 169, 175, 204, 206, 207, 257, 279, 280, 281, 282, 289, 300, 303], "snr_to_esn0": [0, 128, 173, 280, 303], "pack": [1, 55, 57, 149, 161, 169, 175, 240, 244, 302, 303], "bpe": [1, 244, 283], "int_": [1, 5, 6, 116, 120, 121, 149, 161, 169, 175, 209, 211, 212, 222, 223, 224, 236, 239, 244, 283, 289], "binari": [1, 4, 6, 150, 162, 170, 174, 176, 208, 209, 210, 211, 212, 213, 224, 237, 244, 267, 283, 285, 289, 300, 302, 303], "arrai": [1, 19, 55, 68, 96, 110, 117, 149, 150, 153, 161, 162, 169, 170, 174, 175, 176, 183, 185, 186, 188, 198, 205, 208, 209, 211, 212, 222, 223, 224, 228, 231, 236, 237, 239, 244, 245, 247, 268, 271, 283, 285, 297], "an": [1, 2, 3, 4, 9, 11, 18, 41, 48, 50, 62, 64, 68, 70, 88, 89, 90, 91, 93, 96, 98, 106, 107, 108, 114, 115, 117, 150, 151, 153, 162, 170, 171, 173, 176, 177, 191, 196, 207, 218, 244, 250, 255, 264, 268, 283, 286, 290, 293, 302, 303], "multipl": [1, 68, 96, 244, 283, 300, 303], "bit": [1, 5, 7, 55, 57, 60, 116, 118, 119, 149, 150, 161, 162, 169, 170, 171, 174, 175, 176, 207, 209, 210, 212, 213, 226, 227, 229, 240, 244, 250, 279, 283, 302, 303], "element": [1, 240, 244, 283], "unpack": [1, 55, 57, 240, 283, 300, 302, 303], "hexdump": [1, 55, 240, 302, 303], "byte": [1, 240], "width": [1, 88, 218, 240], "16": [1, 78, 88, 171, 173, 174, 218, 226, 227, 229, 237, 240, 250, 264, 271, 274, 277, 279, 280, 285, 298, 303], "str": [1, 49, 240, 252, 258, 261, 262, 265], "return": [1, 6, 10, 18, 19, 24, 32, 34, 37, 38, 41, 42, 48, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 72, 75, 79, 82, 88, 90, 92, 96, 98, 103, 106, 108, 109, 114, 118, 120, 121, 122, 123, 128, 133, 144, 146, 147, 151, 154, 160, 164, 166, 167, 171, 173, 177, 178, 189, 190, 192, 193, 194, 195, 196, 197, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 296, 297, 298, 300, 303], "specifi": [1, 55, 58, 59, 61, 141, 146, 147, 163, 166, 167, 206, 207, 224, 240, 291, 296, 297, 303], "class": [2, 3, 5, 6, 9, 18, 24, 41, 48, 50, 55, 57, 58, 59, 60, 61, 62, 78, 88, 90, 106, 108, 114, 116, 132, 141, 149, 151, 153, 161, 163, 169, 175, 177, 191, 196, 290, 296, 297, 300, 302, 303], "replicacorrel": [2, 191, 192, 193, 194, 195, 303], "implement": [2, 3, 6, 9, 18, 41, 48, 50, 62, 78, 88, 90, 106, 108, 114, 116, 132, 136, 141, 149, 151, 153, 161, 163, 169, 175, 177, 191, 196, 204, 290, 295], "clairvoy": [2, 191], "replica": [2, 191], "correl": [2, 191, 208, 237, 285, 287], "energydetector": [2, 50, 51, 52, 53, 54, 303], "energi": [2, 50, 118, 128, 171, 173, 191, 192, 193, 194, 195, 207, 226, 227, 228, 229, 230, 235, 238, 250, 264, 274, 275, 277, 279, 280, 302, 303], "albersheim": [2, 204, 303], "p_d": [2, 7, 50, 51, 53, 191, 192, 194, 204, 257, 263, 303], "p_fa": [2, 7, 50, 51, 52, 53, 54, 191, 192, 193, 194, 195, 204, 263], "estim": [2, 24, 116, 120, 121, 149, 161, 169, 175, 204, 258, 265, 299], "minimum": [2, 6, 149, 204, 303], "requir": [2, 19, 42, 63, 109, 197, 204, 291, 292, 293, 294, 303], "singl": [2, 53, 68, 96, 171, 173, 204], "sampl": [2, 3, 11, 12, 13, 18, 19, 22, 24, 31, 39, 41, 42, 44, 48, 51, 52, 53, 54, 62, 63, 66, 68, 69, 70, 72, 75, 78, 81, 84, 88, 96, 98, 103, 108, 109, 110, 111, 116, 117, 121, 123, 129, 132, 134, 138, 149, 150, 151, 153, 154, 155, 157, 159, 160, 161, 162, 169, 170, 175, 176, 177, 181, 196, 197, 198, 199, 204, 206, 225, 227, 230, 233, 235, 238, 243, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 265, 266, 268, 274, 275, 277, 278, 279, 280, 281, 282, 284, 289, 295, 298, 299, 301, 302, 303], "given": [2, 50, 55, 57, 58, 59, 61, 78, 79, 177, 186, 188, 191, 204, 232, 296, 297], "n_": [2, 51, 52, 53, 54, 204], "nc": [2, 51, 52, 53, 54, 204], "non": [2, 19, 42, 51, 52, 53, 54, 63, 109, 197, 204, 238, 268, 275], "coher": [2, 51, 52, 53, 54, 204], "combin": [2, 204], "achiev": [2, 204, 300, 301], "probabl": [2, 7, 50, 51, 52, 53, 54, 189, 190, 191, 192, 193, 194, 195, 204, 209, 210, 212, 213, 224, 257, 263, 289, 303], "fals": [2, 5, 11, 18, 20, 41, 43, 49, 50, 51, 52, 53, 54, 62, 64, 68, 78, 80, 90, 91, 93, 96, 107, 108, 110, 114, 115, 149, 151, 152, 161, 169, 171, 173, 175, 179, 191, 192, 193, 194, 195, 196, 198, 204, 205, 209, 212, 224, 228, 243, 247, 248, 251, 258, 263, 265, 268, 276, 297, 301], "alarm": [2, 50, 51, 52, 53, 54, 191, 192, 193, 194, 195, 204, 263], "p_": [2, 7, 50, 51, 52, 53, 54, 171, 173, 191, 192, 193, 194, 195, 204, 205, 206, 215, 224, 232, 242, 245, 247, 250, 258, 263, 264], "fa": [2, 7, 50, 51, 52, 53, 54, 191, 192, 193, 194, 195, 204, 263], "thi": [2, 24, 41, 57, 58, 59, 61, 62, 90, 108, 110, 116, 117, 130, 141, 149, 154, 161, 162, 169, 170, 174, 175, 176, 196, 198, 204, 206, 207, 209, 212, 224, 225, 232, 234, 237, 252, 258, 262, 265, 268, 284, 285, 291, 293, 294, 295, 297, 299, 300, 301], "function": [2, 7, 8, 24, 33, 48, 62, 88, 90, 91, 114, 132, 189, 190, 204, 207, 225, 235, 237, 250, 257, 258, 263, 264, 265, 284, 285, 296, 297, 299, 301, 302, 303], "": [2, 3, 7, 18, 24, 32, 34, 35, 36, 38, 39, 41, 48, 50, 57, 58, 59, 60, 61, 62, 68, 69, 72, 75, 88, 90, 96, 103, 106, 108, 114, 116, 117, 120, 121, 122, 123, 141, 149, 151, 161, 169, 175, 177, 191, 193, 195, 196, 204, 206, 207, 227, 230, 232, 233, 241, 251, 252, 253, 254, 256, 258, 259, 260, 261, 262, 265, 266, 268, 269, 278, 279, 280, 281, 282, 294, 295, 298, 300, 302, 303], "equat": [2, 32, 34, 35, 36, 37, 38, 51, 52, 54, 90, 114, 161, 169, 175, 192, 193, 195, 204, 234], "finit": [3, 62, 302, 303], "impuls": [3, 7, 18, 41, 48, 62, 70, 88, 90, 98, 106, 108, 114, 151, 177, 196, 216, 217, 218, 219, 220, 221, 235, 253, 255, 301, 302, 303], "respons": [3, 7, 18, 41, 48, 62, 68, 70, 75, 88, 90, 96, 98, 103, 106, 108, 114, 151, 177, 196, 216, 217, 218, 219, 220, 221, 235, 253, 254, 255, 256, 260, 266, 301, 302, 303], "design_lowpass_fir": [3, 68, 220, 303], "order": [3, 18, 19, 20, 24, 41, 42, 43, 48, 49, 55, 60, 62, 63, 71, 78, 80, 83, 88, 90, 99, 106, 108, 109, 110, 114, 116, 117, 124, 132, 134, 149, 151, 161, 169, 170, 175, 176, 177, 183, 185, 196, 197, 198, 206, 216, 217, 219, 220, 221, 226, 227, 229, 232, 233, 235, 251, 252, 261, 262, 274, 277, 278, 279, 290, 297, 298, 299, 300, 303], "design": [3, 18, 20, 23, 41, 43, 45, 88, 108, 110, 112, 117, 162, 170, 176, 196, 198, 201, 216, 217, 218, 219, 220, 221, 291, 302, 303], "lowpass": [3, 220], "h": [3, 7, 18, 20, 41, 43, 48, 50, 62, 64, 68, 70, 88, 90, 96, 98, 106, 108, 110, 114, 116, 117, 126, 127, 131, 132, 149, 151, 161, 162, 169, 170, 175, 176, 177, 179, 183, 186, 188, 191, 196, 198, 216, 217, 218, 219, 220, 221, 235, 252, 253, 255, 256, 260, 271, 298, 299, 301], "n": [3, 5, 6, 7, 8, 9, 10, 18, 19, 20, 24, 41, 42, 43, 48, 49, 50, 53, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 74, 75, 77, 78, 79, 81, 82, 85, 88, 89, 90, 92, 93, 94, 98, 99, 103, 106, 107, 108, 109, 110, 114, 116, 117, 121, 123, 126, 127, 131, 132, 133, 149, 151, 153, 154, 160, 161, 162, 169, 170, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 188, 189, 190, 191, 193, 195, 196, 197, 198, 205, 206, 207, 208, 211, 214, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 239, 241, 243, 245, 247, 248, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 265, 266, 268, 271, 276, 278, 279, 280, 281, 282, 284, 285, 287, 288, 289, 299, 301, 302], "us": [3, 7, 9, 16, 18, 20, 23, 41, 43, 45, 47, 48, 49, 62, 64, 67, 68, 73, 78, 80, 82, 88, 90, 91, 93, 96, 101, 106, 107, 108, 110, 112, 114, 115, 116, 117, 120, 121, 132, 136, 141, 146, 147, 149, 151, 152, 161, 162, 163, 166, 167, 169, 170, 175, 176, 177, 179, 182, 184, 187, 196, 198, 201, 207, 210, 213, 216, 217, 218, 219, 220, 221, 232, 237, 240, 244, 251, 252, 253, 255, 257, 258, 265, 266, 283, 285, 291, 292, 293, 294, 296, 297, 299, 300, 301, 302, 304], "window": [3, 41, 48, 49, 68, 108, 196, 216, 217, 218, 219, 220, 221, 258, 265, 303], "method": [3, 7, 23, 45, 107, 110, 112, 179, 182, 184, 198, 201, 216, 217, 218, 219, 220, 221, 258, 265, 296, 297, 303], "design_highpass_fir": [3, 219, 303], "highpass": [3, 219], "design_bandpass_fir": [3, 216, 303], "bandpass": [3, 216], "design_bandstop_fir": [3, 217, 303], "bandstop": [3, 217], "infinit": [3, 90, 106, 302, 303], "polyphasefir": [3, 18, 41, 108, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 196], "gener": [3, 6, 149, 161, 169, 175, 177, 206, 209, 211, 212, 224, 236, 263, 291, 300, 303], "interpol": [3, 41, 78, 108, 109, 110, 111, 112, 113, 116, 131, 149, 161, 169, 175, 177, 179, 182, 184, 196, 198, 203, 221, 252, 284, 298, 300, 302, 303], "decim": [3, 18, 41, 42, 43, 44, 45, 46, 47, 116, 117, 120, 121, 122, 123, 127, 130, 149, 150, 161, 162, 169, 170, 174, 175, 176, 177, 179, 182, 184, 196, 198, 200, 221, 225, 300, 302, 303], "ration": [3, 196, 198, 221, 303], "channel": [3, 18, 19, 20, 21, 22, 23, 149, 161, 171, 173, 177, 179, 184, 207, 209, 210, 212, 213, 224, 250, 264, 302, 303], "design_multirate_fir": [3, 20, 43, 110, 198, 221, 303], "up": [3, 196, 198, 203, 221, 234, 292], "multir": [3, 18, 19, 23, 41, 42, 45, 108, 109, 112, 196, 197, 201, 221, 271, 303], "kaiser": [3, 18, 20, 23, 41, 43, 45, 108, 110, 112, 196, 198, 201, 216, 217, 218, 219, 220, 221], "polyphase_decompos": [3, 271, 303], "branch": [3, 18, 41, 108, 177, 179, 180, 186, 188, 196, 271, 292, 293], "tap": [3, 18, 20, 41, 43, 48, 62, 77, 78, 87, 88, 90, 94, 95, 106, 108, 110, 114, 151, 177, 179, 183, 185, 186, 188, 196, 198, 271, 296, 297], "decompos": [3, 18, 41, 108, 196, 271], "prototyp": [3, 18, 20, 41, 43, 108, 110, 177, 179, 183, 186, 188, 196, 198, 271], "matrix": [3, 224, 271, 289], "h_i": [3, 18, 41, 48, 62, 64, 77, 88, 108, 151, 177, 185, 186, 188, 196, 271, 296], "b": [3, 18, 41, 90, 93, 108, 177, 179, 180, 183, 185, 186, 188, 196, 204, 207, 235, 240, 253, 255, 266, 271, 291, 292, 301], "phase": [3, 7, 18, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 48, 62, 72, 88, 108, 116, 117, 125, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 196, 204, 233, 241, 243, 259, 260, 261, 271, 289, 302, 303], "movingaverag": [3, 114, 151, 152, 303], "move": [3, 114, 115, 151, 152, 302, 303], "averag": [3, 5, 55, 114, 115, 141, 146, 147, 149, 151, 152, 161, 163, 166, 167, 175, 205, 206, 207, 232, 245, 258, 302, 303], "differenti": [3, 6, 48, 49, 149, 171, 173, 222, 223, 268, 302, 303], "integr": [3, 24, 29, 51, 52, 53, 54, 106, 107, 114, 115, 132, 134, 137, 151, 204, 290, 294, 297, 302, 303], "leakyintegr": [3, 114, 115, 151, 303], "leaki": [3, 114, 115, 151, 302, 303], "farrowresampl": [3, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 295, 303], "piecewis": [3, 78, 80, 83], "polynomi": [3, 78, 80, 83], "farrow": [3, 78, 79, 80, 82, 83, 84, 85, 86, 87, 302, 303], "fractionaldelai": [3, 88, 89], "fraction": [3, 78, 84, 88, 89, 218, 235, 295, 302, 303], "delai": [3, 7, 18, 19, 22, 41, 42, 44, 48, 62, 63, 66, 69, 72, 78, 81, 88, 89, 108, 109, 111, 132, 151, 153, 177, 181, 196, 197, 199, 218, 222, 223, 238, 254, 259, 275, 299, 302, 303], "design_frac_delay_fir": [3, 218, 303], "length": [3, 6, 7, 18, 19, 20, 41, 42, 43, 48, 49, 53, 62, 63, 65, 70, 75, 88, 89, 92, 108, 109, 110, 115, 117, 121, 123, 150, 151, 152, 162, 170, 176, 177, 196, 197, 198, 208, 211, 216, 217, 218, 219, 220, 221, 235, 236, 237, 238, 253, 255, 258, 262, 265, 266, 274, 275, 277, 281, 285, 287, 288, 292, 295, 298, 301], "mix": [3, 18, 243, 302, 303], "freq": [3, 4, 18, 41, 48, 62, 68, 88, 90, 96, 106, 108, 114, 151, 153, 154, 177, 196, 233, 234, 243, 246, 286, 289, 295, 299], "float": [3, 5, 6, 9, 11, 12, 13, 14, 15, 16, 18, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 48, 49, 53, 55, 57, 58, 59, 61, 62, 68, 69, 72, 78, 79, 82, 88, 89, 90, 91, 96, 97, 106, 108, 110, 114, 115, 116, 117, 125, 132, 134, 135, 137, 138, 139, 141, 142, 143, 145, 148, 149, 150, 151, 153, 155, 156, 157, 158, 161, 162, 163, 168, 169, 170, 172, 175, 176, 177, 194, 196, 198, 202, 205, 206, 207, 209, 212, 214, 216, 217, 218, 219, 220, 221, 232, 233, 235, 241, 243, 245, 247, 248, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 265, 267, 268, 274, 276, 277, 278, 289], "0": [3, 6, 8, 9, 11, 16, 18, 19, 31, 41, 42, 48, 50, 53, 55, 62, 63, 64, 68, 69, 72, 77, 78, 88, 89, 90, 91, 93, 94, 95, 96, 106, 108, 109, 110, 114, 116, 117, 120, 121, 122, 123, 130, 134, 149, 150, 151, 153, 155, 161, 162, 169, 170, 172, 174, 175, 176, 177, 183, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 239, 241, 242, 243, 244, 246, 249, 251, 252, 253, 254, 255, 256, 259, 260, 261, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 304], "time": [3, 5, 9, 24, 31, 32, 34, 35, 36, 37, 38, 48, 62, 78, 90, 106, 114, 132, 134, 141, 151, 161, 163, 169, 175, 205, 206, 214, 216, 217, 219, 220, 224, 225, 228, 230, 231, 233, 235, 237, 239, 241, 243, 245, 247, 248, 252, 253, 258, 262, 265, 268, 274, 276, 277, 278, 280, 281, 282, 284, 285, 289, 295, 296, 297, 301, 302, 303], "domain": [3, 5, 205, 206, 214, 216, 217, 219, 220, 225, 228, 231, 233, 239, 241, 243, 245, 247, 248, 253, 258, 262, 265, 268, 276, 278, 281, 282, 284, 289, 302, 303], "complex": [3, 5, 7, 18, 24, 41, 48, 50, 51, 52, 53, 54, 62, 68, 88, 90, 96, 106, 108, 114, 116, 117, 120, 121, 122, 123, 130, 141, 144, 149, 150, 151, 153, 154, 160, 161, 162, 163, 164, 169, 170, 174, 175, 176, 177, 191, 192, 193, 194, 195, 196, 206, 207, 225, 232, 241, 243, 251, 252, 254, 256, 259, 260, 262, 267, 268, 281, 282, 284, 289, 295, 296, 297, 299, 300, 302, 303], "exponenti": [3, 18, 154, 225, 243, 281, 282, 284, 295, 296, 297, 303], "real": [3, 51, 52, 54, 149, 161, 189, 190, 192, 193, 195, 206, 243, 252, 254, 256, 259, 260, 262, 268, 281, 282, 295, 296, 297, 299, 302, 303], "sinusoid": [3, 169, 206, 243, 281, 282, 297, 303], "to_complex_bb": [3, 281, 303], "x_r": [3, 281, 282], "complex_": [3, 7, 9, 10, 116, 120, 121, 122, 123, 130, 149, 153, 160, 161, 163, 164, 169, 174, 175, 251, 267, 281, 282, 287, 288], "passband": [3, 88, 216, 217, 218, 219, 220, 235, 238, 274, 275, 277, 281, 282, 298, 303], "center": [3, 18, 216, 217, 218, 219, 220, 238, 268, 275, 281, 282, 303], "f_": [3, 18, 19, 24, 31, 39, 42, 68, 69, 72, 96, 109, 116, 117, 129, 149, 150, 161, 162, 169, 170, 175, 176, 197, 216, 217, 219, 220, 225, 227, 230, 233, 235, 243, 252, 253, 254, 256, 258, 259, 260, 261, 262, 265, 268, 278, 279, 280, 281, 282, 284, 295, 296, 297, 299, 301], "r": [3, 9, 41, 42, 43, 46, 78, 79, 82, 108, 109, 110, 113, 207, 225, 226, 227, 229, 232, 235, 243, 274, 277, 279, 281, 282, 284, 291, 292, 293, 294, 297, 298, 299, 301], "4": [3, 7, 9, 18, 32, 34, 41, 48, 51, 53, 55, 68, 78, 80, 88, 96, 106, 108, 114, 141, 149, 150, 151, 153, 161, 162, 163, 169, 171, 172, 173, 174, 175, 177, 183, 185, 186, 188, 191, 192, 193, 194, 195, 196, 204, 206, 207, 208, 210, 211, 213, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 240, 241, 243, 244, 246, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 264, 266, 267, 268, 269, 270, 271, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 293, 295, 297, 298, 299, 300], "rate": [3, 5, 7, 9, 11, 12, 13, 18, 19, 20, 24, 31, 39, 41, 42, 43, 46, 55, 56, 57, 59, 60, 68, 69, 72, 78, 79, 82, 96, 108, 109, 110, 113, 116, 118, 128, 149, 161, 169, 171, 173, 175, 177, 178, 196, 197, 198, 200, 202, 203, 221, 225, 226, 227, 229, 233, 243, 250, 252, 253, 254, 256, 258, 259, 260, 261, 262, 264, 265, 268, 278, 279, 281, 282, 284, 289, 302, 303], "baseband": [3, 7, 24, 149, 161, 169, 175, 243, 252, 261, 281, 282, 298, 299, 303], "x_c": [3, 281, 282], "c": [3, 18, 19, 20, 21, 24, 32, 34, 35, 36, 37, 38, 57, 58, 59, 60, 61, 116, 117, 130, 132, 149, 161, 169, 174, 175, 207, 210, 213, 234, 246, 267, 281, 282, 286, 299], "2": [3, 6, 7, 9, 18, 19, 24, 32, 34, 37, 41, 48, 50, 51, 52, 53, 54, 55, 62, 66, 68, 69, 72, 78, 81, 88, 96, 106, 108, 114, 115, 116, 117, 124, 141, 149, 151, 153, 161, 162, 163, 169, 170, 171, 172, 173, 174, 175, 176, 177, 183, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 291, 294, 295, 296, 297, 298, 299, 300, 301], "to_real_pb": [3, 282, 298, 303], "2f_": [3, 282], "upsampl": [3, 108, 196, 284, 303], "factor": [3, 5, 24, 31, 40, 114, 115, 117, 132, 134, 135, 162, 170, 176, 214, 225, 284, 299], "downsampl": [3, 225, 303], "bsc_capac": [4, 213, 303], "p": [4, 8, 153, 154, 189, 190, 196, 197, 198, 202, 203, 209, 210, 212, 213, 221, 224, 289], "calcul": [4, 5, 207, 210, 213, 232, 234, 246, 286, 303], "symmetr": [4, 212, 213, 224, 281, 282, 289, 302], "bsc": [4, 212, 213, 224, 289, 302, 303], "bec_capac": [4, 210, 303], "erasur": [4, 209, 210, 224, 289, 302], "bec": [4, 209, 210, 224, 289, 302, 303], "awgn_capac": [4, 207, 303], "addit": [4, 206, 207, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 284, 289, 302], "white": [4, 206, 207, 289, 302], "gaussian": [4, 6, 48, 106, 114, 151, 206, 207, 235, 289, 302, 303], "nois": [4, 9, 24, 25, 26, 31, 37, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 118, 128, 132, 134, 138, 149, 161, 169, 171, 173, 175, 191, 192, 193, 194, 195, 206, 207, 226, 227, 229, 230, 250, 264, 279, 280, 289, 299, 302], "awgn": [4, 149, 161, 169, 171, 173, 175, 206, 207, 232, 250, 251, 264, 281, 282, 289, 300, 302, 303], "fspl": [4, 234], "distanc": [4, 231, 234, 239, 302, 303], "free": [4, 149, 161, 169, 175, 234, 302], "space": [4, 18, 68, 96, 234, 302], "wavelength": [4, 286, 303], "lambda": [4, 234, 286], "electromagnet": [4, 286], "wave": [4, 78, 149, 286], "frequenc": [4, 18, 24, 32, 34, 36, 41, 48, 62, 68, 69, 72, 78, 88, 90, 96, 106, 108, 114, 132, 149, 151, 153, 154, 177, 196, 216, 217, 218, 219, 220, 225, 233, 234, 243, 246, 253, 254, 256, 258, 259, 260, 265, 281, 282, 284, 286, 289, 301, 302, 303], "f": [4, 18, 32, 34, 41, 48, 53, 68, 69, 72, 88, 96, 106, 108, 153, 154, 196, 204, 206, 233, 234, 235, 243, 246, 278, 286, 287, 292, 295, 296, 297, 298, 299, 300, 301], "parabolic_antenna": [4, 246, 303], "tupl": [4, 18, 41, 48, 49, 50, 53, 55, 57, 60, 62, 68, 69, 72, 88, 90, 96, 106, 108, 114, 116, 120, 121, 141, 146, 147, 149, 151, 161, 163, 166, 167, 169, 175, 177, 191, 194, 196, 205, 228, 231, 239, 245, 246, 247, 251, 253, 254, 255, 256, 259, 260, 266, 267, 270], "gain": [4, 9, 10, 11, 14, 16, 17, 24, 27, 28, 29, 30, 31, 90, 91, 97, 106, 114, 132, 134, 137, 139, 141, 148, 153, 155, 156, 163, 168, 204, 216, 217, 218, 219, 220, 234, 235, 238, 246, 274, 275, 277, 290, 299, 302], "g": [4, 60, 246, 293], "beamwidth": [4, 246], "theta": [4, 153, 155, 158, 159, 246], "parabol": [4, 246], "reflector": [4, 246], "signal": [5, 7, 9, 10, 11, 12, 13, 18, 19, 24, 32, 34, 37, 38, 41, 42, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 67, 78, 79, 82, 88, 90, 92, 106, 108, 109, 114, 116, 117, 126, 132, 133, 141, 142, 143, 145, 149, 151, 153, 154, 160, 161, 162, 169, 170, 175, 176, 177, 178, 179, 182, 184, 191, 192, 193, 194, 195, 196, 197, 205, 206, 207, 214, 215, 216, 217, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 239, 241, 242, 243, 245, 246, 247, 248, 252, 253, 254, 256, 258, 259, 260, 261, 262, 265, 268, 271, 276, 278, 279, 280, 281, 282, 284, 286, 296, 297, 299, 301, 302, 303], "peak_pow": [5, 245, 247, 303], "peak": [5, 149, 161, 175, 214, 232, 245, 247, 248], "average_pow": [5, 205, 245, 303], "papr": [5, 149, 161, 175, 245, 298, 303], "ratio": [5, 37, 51, 53, 55, 57, 58, 59, 60, 61, 118, 128, 149, 161, 171, 173, 175, 192, 194, 206, 207, 226, 227, 229, 230, 245, 249, 250, 264, 272, 273, 279, 280], "peak_voltag": [5, 214, 248, 303], "bool": [5, 9, 11, 17, 18, 20, 41, 43, 48, 49, 51, 52, 53, 54, 62, 64, 68, 76, 78, 80, 86, 88, 90, 91, 93, 96, 104, 106, 107, 108, 110, 114, 115, 149, 151, 152, 161, 169, 171, 173, 175, 177, 179, 192, 193, 194, 195, 196, 198, 205, 228, 243, 247, 248, 251, 260, 262, 267, 268, 276], "rms_voltag": [5, 214, 276, 303], "root": [5, 6, 117, 162, 170, 176, 232, 252, 268, 276, 277, 287, 288, 296, 302], "mean": [5, 232, 258, 265, 276, 301], "squar": [5, 6, 117, 162, 170, 176, 232, 234, 246, 268, 276, 277, 296], "rm": [5, 141, 142, 143, 145, 214, 232, 276], "crest_factor": [5, 214, 245, 303], "crest": [5, 214], "euclidean": [5, 231, 302, 303], "y": [5, 6, 9, 10, 18, 41, 42, 48, 62, 63, 67, 78, 79, 82, 90, 92, 106, 108, 109, 114, 132, 133, 153, 154, 160, 177, 178, 179, 184, 196, 197, 206, 209, 212, 222, 223, 224, 225, 231, 233, 239, 241, 243, 251, 256, 258, 265, 267, 278, 284, 299, 300], "between": [5, 11, 17, 18, 20, 41, 43, 49, 64, 76, 80, 86, 91, 93, 104, 107, 108, 110, 115, 152, 163, 179, 196, 198, 231, 234, 239, 258, 262, 265, 299, 302], "two": [5, 9, 114, 151, 216, 217, 231, 239, 252, 253, 254, 256, 258, 259, 260, 265, 287, 295, 296, 297], "ham": [5, 68, 216, 217, 219, 220, 239, 302, 303], "errorr": [5, 55, 56, 57, 58, 59, 60, 61, 300, 303], "A": [5, 9, 19, 24, 32, 34, 35, 36, 37, 38, 40, 42, 48, 55, 62, 63, 68, 78, 96, 106, 109, 114, 117, 132, 141, 151, 162, 163, 170, 176, 197, 204, 211, 216, 217, 219, 220, 236, 240, 241, 246, 274, 277, 290, 292, 299], "error": [5, 7, 11, 12, 13, 24, 30, 31, 37, 55, 56, 57, 59, 60, 61, 116, 118, 128, 132, 134, 141, 144, 146, 147, 148, 149, 161, 163, 164, 166, 167, 168, 169, 171, 173, 175, 204, 213, 232, 250, 264, 299, 302, 303], "ber": [5, 7, 55, 116, 118, 149, 161, 169, 171, 175, 250, 300, 302, 303], "symbol": [5, 7, 55, 57, 60, 108, 116, 117, 119, 120, 121, 122, 123, 128, 129, 130, 141, 144, 149, 150, 161, 162, 163, 164, 169, 170, 171, 173, 174, 175, 176, 206, 226, 227, 229, 230, 232, 233, 235, 238, 251, 252, 261, 264, 267, 268, 274, 275, 277, 279, 280, 298, 299, 301, 302, 303], "ser": [5, 7, 55, 116, 128, 149, 161, 169, 173, 175, 264, 300, 302, 303], "evm": [5, 232, 302, 303], "x_hat": [5, 7, 55, 57, 232, 251, 300], "ref": [5, 141, 143, 145, 204, 216, 217, 218, 219, 220, 221, 232, 235, 237, 285], "vector": [5, 55, 68, 84, 96, 216, 217, 219, 220, 232, 258, 265, 302, 303], "magnitud": [5, 7, 9, 11, 15, 48, 88, 106, 114, 151, 208, 218, 232, 237, 253, 256, 285, 287, 302, 303], "hat": [5, 7, 57, 116, 120, 121, 141, 144, 149, 161, 163, 164, 169, 175, 232, 251, 267], "k": [5, 6, 7, 18, 48, 57, 106, 116, 117, 119, 120, 121, 122, 123, 124, 141, 144, 149, 161, 163, 164, 169, 170, 175, 176, 222, 223, 226, 227, 229, 232, 251, 267, 268, 279, 298, 301], "linearmodul": [6, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 146, 147, 166, 167, 169, 267, 303], "amplitud": [6, 18, 116, 117, 141, 142, 143, 145, 241, 289, 295, 299], "arbitrari": [6, 78, 79, 80, 82, 83, 84, 85, 86, 87, 116, 302, 303], "psk": [6, 141, 161, 163, 169, 170, 171, 172, 173, 174, 175, 176, 206, 232, 233, 241, 250, 251, 252, 264, 267, 268, 278, 298, 299, 302, 303], "shift": [6, 149, 161, 169, 171, 172, 173, 174, 175, 287, 296, 297, 302, 303], "kei": [6, 149, 161, 169, 171, 172, 173, 174, 175, 302, 303], "demodul": [6, 116, 121, 149, 161, 169, 175, 303], "pimpsk": [6, 175, 176, 303], "pi": [6, 9, 18, 41, 48, 78, 96, 106, 108, 141, 153, 161, 163, 169, 175, 176, 196, 206, 225, 234, 235, 241, 243, 246, 253, 254, 255, 256, 259, 260, 266, 270, 281, 282, 284, 287, 295, 296, 297, 299, 302, 303], "m": [6, 18, 41, 90, 93, 95, 106, 108, 114, 116, 117, 119, 120, 121, 122, 123, 124, 130, 141, 149, 161, 163, 169, 170, 174, 175, 176, 177, 183, 185, 196, 224, 226, 227, 229, 234, 267, 279, 291, 292, 293, 294, 302, 303], "oqpsk": [6, 149, 161, 162, 303], "offset": [6, 32, 34, 41, 78, 108, 116, 117, 125, 149, 150, 153, 154, 155, 158, 161, 162, 169, 170, 172, 175, 176, 196, 233, 243, 255, 268, 278, 289, 299, 302, 303], "quadratur": [6, 149, 161, 241], "msk": [6, 149, 150, 261, 303], "rectangular": [6, 107, 117, 162, 170, 176, 275, 298, 301, 302, 303], "span": [6, 7, 117, 162, 170, 176, 235, 238, 252, 261, 274, 275, 277, 298, 301], "half_sin": [6, 150, 238, 303], "half": [6, 149, 161, 238, 246, 302, 303], "sine": [6, 78, 149, 154, 238, 302, 303], "time_bandwidth": [6, 235], "raised_cosin": [6, 117, 162, 170, 176, 252, 274, 301, 303], "alpha": [6, 9, 11, 12, 18, 114, 115, 117, 162, 170, 176, 235, 269, 274, 277, 298, 301], "rais": [6, 48, 106, 117, 162, 170, 176, 252, 268, 274, 277, 296, 302], "cosin": [6, 48, 106, 117, 154, 162, 170, 176, 252, 268, 274, 277, 296, 302, 303], "rc": [6, 117, 162, 170, 176, 274], "root_raised_cosin": [6, 48, 106, 117, 162, 170, 176, 252, 253, 254, 255, 256, 259, 260, 266, 270, 277, 296, 298, 300, 301, 303], "srrc": [6, 117, 161, 162, 169, 170, 175, 176, 252, 268, 277, 298, 300], "binary_cod": [6, 211, 303], "code": [6, 150, 162, 170, 174, 176, 208, 211, 226, 227, 229, 236, 237, 251, 267, 279, 285, 288, 293, 300, 303], "gray_cod": [6, 236, 303], "grai": [6, 149, 150, 161, 162, 169, 170, 174, 175, 176, 236, 251, 267, 300, 302], "diff_encod": [6, 149, 161, 169, 171, 173, 175, 222, 223, 303], "y_prev": [6, 222, 223], "input": [6, 9, 10, 18, 19, 20, 22, 24, 32, 34, 37, 38, 41, 42, 43, 44, 48, 49, 62, 63, 64, 70, 74, 75, 78, 79, 80, 84, 85, 88, 90, 91, 92, 93, 98, 103, 106, 107, 108, 109, 110, 111, 114, 115, 132, 133, 151, 152, 153, 154, 161, 169, 171, 173, 175, 177, 178, 179, 181, 182, 189, 196, 197, 198, 199, 206, 207, 209, 210, 212, 213, 215, 222, 223, 224, 225, 242, 244, 249, 255, 266, 272, 273, 283, 284, 289, 296, 297, 299], "data": [6, 141, 146, 163, 166, 222, 223, 240, 244, 268, 283, 302], "diff_decod": [6, 222, 223, 303], "decod": [6, 222], "use_styl": [7, 269], "appli": [7, 18, 41, 49, 108, 117, 196, 233, 241, 251, 252, 255, 258, 265, 267, 268, 269, 278, 289], "default": [7, 70, 75, 150, 162, 170, 174, 176, 205, 228, 231, 239, 245, 247, 251, 254, 256, 259, 260, 262, 265, 267, 269, 300], "matplotlib": [7, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 295, 296, 297, 298, 299, 300, 301, 302], "rcparam": [7, 269], "time_domain": [7, 9, 41, 48, 78, 106, 108, 114, 149, 151, 153, 161, 169, 175, 196, 206, 225, 237, 243, 268, 281, 282, 284, 285, 298, 299, 300, 301, 303], "ani": [7, 18, 41, 48, 62, 68, 88, 90, 96, 106, 108, 114, 151, 153, 154, 177, 196, 208, 215, 225, 237, 242, 268, 284, 285, 288, 294], "dtype": [7, 18, 41, 48, 62, 68, 88, 90, 96, 106, 108, 114, 149, 151, 153, 154, 161, 169, 175, 177, 196, 208, 237, 244, 268, 283, 285, 288, 299], "scalartyp": [7, 268], "t": [7, 24, 26, 31, 50, 132, 134, 138, 191, 235, 240, 268, 291, 295, 303], "raster": [7, 252, 261, 262, 302, 303], "none": [7, 18, 41, 48, 49, 53, 62, 68, 70, 75, 78, 84, 88, 96, 108, 117, 132, 140, 151, 154, 162, 170, 176, 177, 194, 196, 205, 206, 207, 209, 212, 216, 217, 219, 220, 224, 228, 231, 239, 244, 245, 247, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 265, 266, 267, 268, 283, 289, 295, 298, 300], "periodogram": [7, 18, 225, 258, 281, 282, 284, 298, 302, 303], "power": [7, 149, 161, 169, 175, 205, 206, 207, 215, 232, 235, 237, 238, 242, 245, 246, 247, 258, 274, 275, 277, 285, 301, 302], "densiti": [7, 37, 258, 298, 301], "xx": [7, 258], "welch": [7, 258, 265], "spectrogram": [7, 265, 302, 303], "constel": [7, 149, 161, 169, 172, 175, 206, 232, 233, 241, 251, 278, 287, 302, 303], "symbol_map": [7, 116, 117, 130, 149, 161, 169, 172, 174, 175, 232, 267, 300, 303], "map": [7, 116, 117, 122, 130, 149, 161, 169, 174, 175, 232, 267, 302, 303], "ey": [7, 149, 161, 169, 175, 252, 302, 303], "diagram": [7, 9, 18, 24, 41, 62, 108, 114, 132, 153, 196, 222, 223, 252, 302, 303], "phase_tre": [7, 149, 261, 303], "tree": [7, 261, 303], "continu": [7, 106, 149, 261, 295, 303], "cpm": [7, 261, 303], "kwarg": [7, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270], "e_b": [7, 57, 58, 59, 60, 61, 116, 118, 149, 161, 169, 171, 175, 207, 226, 227, 229, 250, 279, 302], "n_0": [7, 11, 12, 13, 37, 57, 58, 59, 60, 61, 116, 118, 128, 149, 161, 169, 171, 173, 175, 206, 207, 226, 227, 229, 230, 232, 250, 251, 264, 279, 280, 300, 302], "e_": [7, 57, 58, 59, 60, 61, 116, 128, 149, 161, 169, 173, 175, 206, 207, 226, 229, 230, 232, 251, 264, 280, 300, 302], "roc": [7, 50, 53, 191, 194, 263, 303], "receiv": [7, 9, 50, 51, 53, 55, 57, 116, 120, 121, 127, 141, 142, 144, 145, 149, 161, 163, 164, 169, 171, 173, 175, 191, 192, 193, 194, 195, 232, 234, 252, 257, 263, 303], "oper": [7, 11, 50, 53, 191, 194, 263, 303], "characterist": [7, 50, 53, 191, 194, 263, 303], "curv": [7, 50, 53, 171, 173, 191, 194, 250, 263, 264, 303], "enr": [7, 191, 192, 194, 257], "impulse_respons": [7, 18, 41, 48, 62, 70, 88, 90, 98, 106, 108, 114, 151, 177, 196, 216, 217, 218, 219, 220, 221, 235, 238, 255, 274, 275, 277, 296, 297, 301, 303], "step_respons": [7, 18, 41, 48, 62, 75, 88, 90, 103, 106, 108, 114, 151, 177, 196, 266, 296, 297, 299, 303], "step": [7, 18, 41, 48, 62, 75, 88, 90, 103, 106, 108, 114, 151, 153, 154, 160, 177, 196, 253, 266, 302], "zeros_pol": [7, 270, 297, 303], "zero": [7, 18, 41, 48, 62, 67, 78, 82, 84, 88, 89, 90, 91, 96, 105, 106, 108, 110, 114, 132, 151, 154, 177, 196, 198, 218, 237, 238, 244, 253, 254, 255, 256, 259, 260, 266, 270, 275, 281, 285, 296, 298, 299, 301, 302, 303], "pole": [7, 90, 91, 96, 100, 106, 114, 253, 254, 255, 256, 259, 260, 266, 270, 296, 302], "magnitude_respons": [7, 48, 68, 88, 96, 106, 114, 151, 216, 217, 218, 219, 220, 221, 238, 256, 274, 275, 277, 296, 297, 299, 301, 303], "omega": [7, 18, 41, 48, 62, 68, 69, 72, 78, 88, 90, 96, 106, 108, 114, 151, 153, 155, 157, 159, 177, 196, 253, 254, 256, 259, 260, 299], "phase_respons": [7, 68, 96, 260, 303], "angl": [7, 163, 260, 299], "phase_delai": [7, 18, 41, 48, 62, 72, 88, 108, 151, 177, 196, 259, 303], "tau_": [7, 18, 41, 48, 62, 72, 88, 108, 151, 177, 196, 259], "phi": [7, 18, 41, 48, 62, 72, 88, 108, 116, 117, 125, 149, 150, 151, 161, 162, 169, 170, 172, 175, 176, 177, 196, 233, 241, 243, 259], "group_delai": [7, 18, 41, 48, 62, 69, 88, 108, 151, 177, 196, 218, 254, 296, 297, 303], "group": [7, 18, 41, 48, 62, 69, 88, 108, 151, 177, 196, 218, 254, 302], "tau_g": [7, 18, 41, 48, 62, 69, 88, 108, 151, 177, 196, 254], "iir": [7, 24, 33, 70, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 114, 115, 132, 136, 151, 253, 254, 255, 256, 259, 260, 266, 270, 296, 299, 302, 303], "q": [8, 149, 161, 189, 190, 191, 192, 193, 195, 196, 197, 198, 200, 202, 221, 287, 303], "comput": [8, 41, 50, 51, 52, 53, 54, 68, 96, 116, 118, 128, 141, 149, 161, 163, 169, 171, 173, 175, 189, 190, 191, 192, 193, 194, 195, 205, 206, 228, 231, 234, 239, 245, 247, 296, 297, 299, 301, 303], "complementari": [8, 189, 190], "cumul": [8, 189, 190], "distribut": [8, 189, 190], "standard": [8, 189, 190], "normal": [8, 24, 26, 31, 132, 134, 138, 189, 190, 216, 217, 219, 220, 232, 235, 238, 253, 254, 256, 258, 259, 260, 265, 274, 275, 277, 299, 301], "mathcal": [8, 50, 189, 190, 191, 192, 193, 194, 195, 206, 224], "qinv": [8, 189, 190, 303], "invers": [8, 18, 190], "agc": [9, 10, 11, 12, 13, 14, 15, 16, 17, 141, 290, 302], "automat": [9, 10, 11, 141, 290, 302], "control": [9, 10, 11, 24, 141, 153, 155, 274, 277, 299, 302, 303], "note": [9, 18, 41, 48, 50, 51, 52, 54, 62, 88, 90, 106, 108, 114, 132, 141, 151, 153, 163, 177, 182, 184, 186, 188, 191, 192, 193, 195, 196, 204, 206, 207, 210, 213, 218, 222, 223, 235, 241, 246, 252, 271, 287], "block": [9, 18, 24, 41, 62, 108, 114, 132, 153, 196, 222, 223], "exp": [9, 18, 96, 154, 161, 169, 175, 225, 235, 241, 243, 253, 254, 255, 256, 259, 260, 266, 270, 282, 284, 287, 295, 297, 299], "z": [9, 24, 62, 90, 106, 114, 132, 153, 222, 223, 287, 296, 297, 299], "log": [9, 253, 254, 256, 258, 259, 260, 296, 297, 299], "beta": [9, 11, 13], "output": [9, 10, 11, 15, 18, 19, 22, 41, 42, 44, 48, 62, 63, 70, 75, 78, 88, 90, 91, 93, 98, 103, 106, 107, 108, 109, 110, 111, 114, 115, 121, 132, 133, 151, 153, 154, 159, 160, 177, 179, 181, 184, 196, 197, 198, 199, 206, 207, 208, 209, 210, 212, 213, 223, 224, 232, 237, 242, 244, 255, 266, 283, 285, 288, 291, 295, 296, 297, 299, 303], "attack": [9, 11, 12], "decai": [9, 11, 13, 295, 297], "refer": [9, 11, 15, 18, 24, 32, 34, 35, 36, 37, 38, 41, 48, 50, 51, 52, 54, 55, 78, 108, 132, 141, 143, 144, 145, 163, 164, 171, 173, 191, 192, 193, 195, 196, 204, 206, 214, 216, 217, 218, 219, 220, 221, 232, 233, 235, 237, 245, 271, 274, 277, 278, 285, 287, 297, 301, 302], "adder": [9, 41, 132, 153, 222, 223, 299], "multipli": [9, 24, 48, 108, 196], "michael": [9, 24, 32, 34, 35, 36, 37, 38, 48, 78, 132, 141, 163, 274, 277], "rice": [9, 24, 32, 34, 35, 36, 37, 38, 48, 78, 132, 141, 163, 274, 277], "digit": [9, 24, 32, 34, 35, 36, 37, 38, 48, 78, 132, 141, 163, 171, 173, 274, 277, 299, 302, 303], "commun": [9, 18, 24, 32, 34, 35, 36, 37, 38, 41, 48, 78, 108, 132, 141, 163, 171, 173, 196, 221, 271, 274, 277, 299, 302], "discret": [9, 18, 24, 32, 34, 35, 36, 37, 38, 48, 78, 106, 114, 132, 141, 151, 163, 206, 224, 230, 274, 277, 280, 289, 295, 299, 302, 303], "approach": [9, 24, 32, 34, 35, 36, 37, 38, 48, 78, 132, 141, 163, 207, 210, 213, 274, 277, 299], "section": [9, 48, 50, 57, 58, 59, 60, 61, 78, 141, 163, 191, 297, 299], "9": [9, 18, 41, 68, 78, 88, 96, 108, 149, 161, 169, 175, 177, 183, 185, 186, 188, 192, 196, 204, 211, 224, 232, 236, 237, 240, 271, 274, 277, 285, 291, 297, 298, 300, 301], "5": [9, 18, 41, 48, 50, 51, 52, 53, 54, 55, 68, 78, 88, 106, 108, 114, 141, 149, 151, 153, 161, 169, 175, 177, 183, 185, 186, 188, 192, 194, 196, 204, 206, 209, 211, 212, 213, 216, 217, 218, 219, 220, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 240, 241, 246, 249, 252, 253, 254, 255, 256, 259, 260, 266, 268, 270, 271, 274, 277, 278, 279, 280, 281, 282, 284, 285, 287, 291, 295, 296, 297, 298, 299, 300, 301], "http": [9, 78, 204, 214, 216, 217, 218, 219, 220, 221, 235, 237, 245, 285, 287, 291, 292, 293], "wirelesspi": [9, 78], "com": [9, 78, 204, 216, 217, 218, 219, 220, 221, 235, 237, 285, 292, 293], "how": [9, 235, 238, 252, 261, 262, 268, 274, 275, 277, 285, 294], "work": 9, "exampl": [9, 18, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 51, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 114, 115, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 169, 171, 172, 173, 174, 175, 183, 185, 186, 187, 188, 189, 190, 192, 194, 196, 204, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 246, 249, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 299, 303], "creat": [9, 11, 18, 20, 24, 31, 41, 43, 48, 49, 55, 56, 62, 64, 78, 80, 88, 89, 90, 91, 93, 106, 107, 108, 110, 114, 115, 116, 117, 132, 134, 149, 150, 151, 152, 153, 155, 161, 162, 169, 170, 172, 175, 176, 177, 179, 196, 198, 206, 208, 232, 233, 237, 243, 278, 281, 282, 285, 287, 295, 299, 301], "bursti": 9, "surround": 9, "In": [9, 11, 17, 18, 19, 20, 41, 42, 43, 48, 49, 51, 53, 55, 63, 64, 68, 76, 78, 80, 86, 88, 91, 93, 96, 104, 106, 107, 108, 109, 110, 114, 115, 141, 149, 151, 152, 153, 161, 163, 169, 171, 172, 173, 174, 175, 179, 183, 185, 186, 188, 189, 190, 192, 194, 196, 197, 198, 204, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 246, 249, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 295, 300], "np": [9, 18, 41, 48, 51, 53, 68, 78, 88, 96, 106, 108, 114, 116, 126, 130, 149, 151, 153, 161, 169, 171, 173, 174, 175, 183, 185, 186, 188, 192, 194, 196, 204, 206, 207, 208, 209, 210, 212, 213, 224, 225, 232, 233, 234, 237, 241, 243, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 264, 266, 268, 270, 271, 278, 281, 282, 284, 285, 287, 295, 296, 297, 298, 299, 300, 301], "1j": [9, 18, 96, 225, 243, 253, 254, 255, 256, 259, 260, 266, 270, 282, 284, 295, 297, 299], "arang": [9, 18, 41, 78, 88, 108, 183, 185, 186, 188, 196, 206, 208, 225, 237, 243, 271, 281, 282, 284, 285, 287, 295, 299], "5000": [9, 272, 273], "100": [9, 48, 53, 68, 90, 96, 98, 103, 106, 114, 151, 153, 171, 173, 204, 206, 207, 210, 213, 215, 216, 217, 219, 220, 232, 242, 243, 250, 252, 253, 255, 261, 264, 266, 278, 281, 282, 284, 295, 299], "1000": [9, 68, 96, 146, 147, 149, 161, 166, 167, 169, 175, 232, 234, 281, 282, 300], "2000": 9, "10": [9, 18, 48, 51, 53, 55, 78, 88, 106, 108, 117, 149, 161, 162, 169, 170, 171, 173, 175, 176, 183, 185, 186, 188, 192, 194, 196, 204, 205, 206, 211, 215, 216, 217, 219, 220, 224, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 245, 246, 247, 248, 250, 251, 253, 254, 255, 256, 259, 260, 264, 266, 268, 270, 271, 274, 275, 276, 277, 278, 279, 280, 285, 295, 296, 297, 298, 299, 300, 301], "3000": 9, "4000": 9, "001": [9, 299], "random": [9, 18, 50, 114, 149, 151, 161, 169, 175, 206, 209, 212, 224, 232, 233, 241, 251, 252, 261, 268, 278, 298, 299, 300], "randn": [9, 18, 114, 151, 268], "size": [9, 121, 123, 208, 224, 237, 268, 285, 295, 299, 300, 301], "3": [9, 18, 24, 32, 34, 35, 38, 41, 48, 50, 51, 55, 68, 78, 80, 88, 96, 106, 108, 114, 141, 149, 151, 153, 161, 163, 169, 171, 172, 173, 174, 175, 177, 183, 185, 186, 188, 191, 192, 196, 204, 206, 207, 208, 209, 211, 212, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 246, 251, 252, 253, 254, 255, 256, 259, 260, 266, 268, 270, 271, 274, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 291, 292, 297, 299, 301, 302], "plt": [9, 18, 41, 48, 51, 53, 78, 88, 106, 108, 114, 141, 149, 151, 153, 161, 163, 169, 171, 172, 173, 174, 175, 192, 194, 196, 204, 206, 207, 208, 210, 213, 216, 217, 218, 219, 220, 221, 225, 232, 233, 234, 235, 237, 238, 241, 243, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 264, 266, 267, 268, 270, 274, 275, 277, 278, 281, 282, 284, 285, 287, 295, 296, 297, 298, 299, 300, 301], "figur": [9, 18, 41, 48, 51, 53, 78, 88, 106, 108, 114, 141, 149, 151, 153, 161, 163, 169, 171, 172, 173, 174, 175, 192, 194, 196, 204, 206, 207, 208, 210, 213, 216, 217, 218, 219, 220, 221, 225, 232, 233, 234, 235, 237, 238, 241, 243, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 264, 266, 267, 268, 269, 270, 274, 275, 277, 278, 281, 282, 284, 285, 287, 295, 296, 297, 298, 299, 300, 301], "figsiz": [9, 18, 41, 48, 51, 53, 78, 88, 106, 108, 114, 141, 149, 151, 153, 161, 163, 169, 171, 172, 173, 174, 175, 192, 194, 196, 204, 206, 207, 208, 210, 213, 216, 217, 218, 219, 220, 221, 225, 232, 233, 234, 235, 237, 238, 241, 243, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 264, 266, 267, 268, 269, 270, 274, 275, 277, 278, 281, 282, 284, 285, 287, 295, 296, 297, 298, 299, 300, 301], "8": [9, 18, 41, 48, 51, 53, 78, 88, 96, 106, 108, 114, 117, 141, 149, 150, 151, 153, 161, 162, 163, 169, 170, 171, 172, 173, 174, 175, 176, 177, 183, 185, 186, 188, 192, 194, 196, 204, 206, 207, 208, 210, 211, 213, 216, 217, 218, 219, 220, 221, 224, 225, 232, 234, 235, 236, 237, 238, 240, 243, 246, 250, 251, 252, 253, 254, 255, 256, 259, 260, 261, 264, 266, 267, 268, 269, 270, 271, 274, 275, 277, 281, 282, 284, 285, 287, 292, 293, 296, 297, 298, 299, 301], "plot": [9, 18, 41, 48, 51, 53, 68, 69, 70, 72, 75, 78, 88, 96, 98, 103, 106, 108, 114, 141, 149, 151, 153, 161, 163, 169, 171, 172, 173, 174, 175, 192, 194, 196, 206, 207, 208, 210, 213, 216, 217, 218, 219, 220, 221, 225, 232, 233, 234, 235, 237, 238, 241, 243, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 277, 278, 281, 282, 284, 285, 287, 295, 296, 297, 299, 300, 301, 302, 303], "titl": [9, 18, 41, 48, 78, 106, 108, 141, 149, 153, 161, 163, 171, 173, 196, 204, 206, 207, 208, 210, 213, 225, 232, 233, 237, 241, 243, 250, 264, 268, 278, 281, 282, 284, 285, 287, 295, 298, 299, 300, 301], "tight_layout": [9, 41, 48, 78, 106, 108, 141, 149, 153, 161, 163, 171, 173, 196, 204, 206, 207, 208, 210, 213, 225, 232, 233, 234, 237, 243, 250, 264, 268, 278, 281, 282, 284, 285, 287, 298, 299, 300, 301], "01": [9, 68, 96, 174, 175, 240, 297, 299], "notic": [9, 281, 282, 295, 301], "over": [9, 171, 173, 240], "i": [9, 11, 12, 13, 17, 18, 19, 20, 24, 31, 40, 41, 42, 43, 48, 49, 50, 52, 53, 54, 55, 60, 62, 63, 64, 68, 70, 75, 76, 77, 78, 86, 88, 90, 93, 95, 96, 98, 103, 104, 106, 108, 109, 110, 114, 115, 116, 117, 132, 134, 135, 138, 141, 149, 151, 154, 159, 161, 162, 163, 169, 170, 175, 176, 177, 179, 182, 184, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 209, 210, 212, 213, 215, 216, 217, 218, 219, 220, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 258, 259, 260, 262, 265, 266, 268, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304], "amplifi": [9, 11, 13], "accord": 9, "also": [9, 18, 141, 149, 163, 218, 234, 235, 302], "when": [9, 16, 18, 20, 41, 43, 47, 48, 62, 67, 70, 73, 75, 78, 82, 88, 90, 98, 101, 103, 106, 108, 110, 114, 115, 151, 177, 187, 196, 198, 206, 207, 209, 210, 212, 213, 230, 237, 253, 254, 255, 256, 259, 260, 266, 280, 285, 287, 295, 296, 297], "interest": 9, "appear": [9, 295], "quickli": 9, "decreas": [9, 207], "6": [9, 18, 41, 48, 55, 78, 88, 96, 106, 108, 114, 141, 149, 151, 153, 161, 169, 174, 175, 177, 183, 185, 186, 188, 192, 193, 195, 196, 204, 211, 215, 218, 224, 225, 226, 227, 232, 234, 236, 237, 240, 242, 246, 251, 252, 253, 254, 255, 256, 259, 260, 266, 267, 268, 270, 271, 274, 277, 281, 282, 284, 285, 287, 291, 294, 296, 297, 299, 300], "ylim": [9, 88, 114, 151, 216, 217, 218, 219, 220, 287, 296, 299, 300, 301], "__call__": [9, 10, 11, 17, 18, 19, 20, 41, 42, 43, 48, 49, 62, 63, 64, 76, 78, 79, 80, 86, 88, 90, 91, 92, 93, 104, 106, 107, 108, 109, 110, 114, 115, 132, 133, 141, 144, 151, 152, 153, 154, 163, 164, 177, 178, 179, 196, 197, 198, 303], "perform": [9, 10, 19, 24, 42, 63, 89, 109, 171, 173, 197, 218, 225, 284, 287, 290, 296, 297, 300, 302, 303], "reset": [9, 16, 18, 41, 47, 48, 62, 73, 78, 84, 88, 90, 101, 106, 108, 114, 132, 140, 151, 153, 159, 177, 187, 196], "indic": [9, 11, 17, 18, 20, 22, 41, 43, 44, 48, 49, 52, 53, 54, 62, 64, 76, 78, 80, 86, 88, 90, 91, 93, 104, 106, 107, 108, 110, 111, 114, 115, 116, 117, 149, 150, 151, 152, 161, 162, 169, 170, 171, 173, 175, 176, 177, 179, 181, 192, 193, 194, 195, 196, 198, 199, 205, 228, 235, 238, 241, 243, 247, 248, 252, 260, 261, 262, 268, 274, 275, 276, 277, 285], "whether": [9, 11, 17, 18, 20, 41, 43, 48, 49, 52, 53, 54, 62, 64, 76, 78, 80, 86, 88, 90, 91, 93, 104, 106, 107, 108, 110, 114, 115, 151, 152, 171, 173, 177, 179, 192, 193, 194, 195, 196, 198, 205, 228, 243, 247, 248, 260, 262, 268, 276], "The": [9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 291, 292, 293, 294, 296, 297, 299, 300, 301, 302, 304], "current": [9, 14, 268, 293], "settabl": [9, 12, 13, 15, 141, 142, 143, 153, 156, 157, 158], "desir": [9, 11, 15, 204, 206, 300], "paramet": [10, 11, 16, 19, 20, 31, 32, 34, 37, 42, 43, 49, 51, 52, 53, 54, 57, 58, 59, 61, 63, 64, 68, 69, 70, 72, 75, 79, 80, 82, 84, 89, 91, 92, 93, 96, 98, 103, 107, 109, 110, 115, 117, 118, 120, 121, 122, 123, 128, 133, 134, 144, 145, 146, 147, 150, 152, 154, 155, 160, 162, 164, 166, 167, 170, 171, 173, 176, 178, 179, 189, 190, 192, 193, 194, 195, 197, 198, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "stream": [11, 16, 17, 19, 20, 42, 43, 47, 49, 63, 64, 67, 73, 76, 80, 82, 86, 91, 93, 101, 104, 107, 109, 110, 115, 149, 152, 161, 169, 175, 179, 187, 197, 198, 297], "meant": [11, 12, 13, 24], "attenu": [11, 12, 20, 43, 110, 198, 216, 217, 219, 220, 221, 274, 277], "strong": [11, 12], "after": [11, 12, 13, 186, 188], "approx": [11, 12, 13, 88], "reduc": [11, 12, 13], "e": [11, 12, 13, 60, 141, 153, 163, 191, 192, 193, 194, 195, 205, 209, 210, 228, 287, 292, 293, 296, 297, 300], "its": [11, 12, 13, 62, 90, 91, 106, 114, 206, 296, 297, 301], "origin": [11, 12, 13, 161, 175, 284, 295], "valu": [11, 12, 13, 50, 116, 117, 118, 128, 149, 150, 161, 162, 169, 170, 171, 173, 175, 176, 189, 190, 208, 215, 222, 223, 235, 237, 241, 242, 251, 254, 256, 259, 260, 267, 285, 292, 297, 303], "weak": [11, 13], "mode": [11, 16, 17, 19, 20, 42, 43, 47, 49, 63, 64, 67, 73, 76, 80, 82, 86, 91, 93, 101, 104, 107, 109, 110, 115, 152, 178, 179, 187, 197, 198, 208, 237, 285, 287], "preserv": [11, 17, 20, 41, 43, 49, 64, 76, 80, 86, 91, 93, 104, 107, 108, 110, 115, 152, 179, 196, 198, 252, 262], "call": [11, 17, 19, 20, 41, 42, 43, 49, 63, 64, 76, 80, 86, 91, 93, 104, 107, 108, 109, 110, 115, 152, 179, 196, 197, 198], "properti": [12, 13, 14, 15, 17, 21, 22, 23, 25, 26, 27, 28, 29, 30, 33, 35, 36, 39, 40, 44, 45, 46, 66, 71, 74, 76, 77, 81, 83, 85, 86, 87, 94, 95, 97, 99, 100, 102, 104, 105, 111, 112, 113, 119, 124, 125, 126, 127, 129, 130, 131, 135, 136, 137, 138, 139, 142, 143, 148, 156, 157, 158, 168, 172, 174, 180, 181, 182, 183, 184, 185, 186, 188, 199, 200, 201, 202, 203, 303], "onli": [16, 19, 20, 24, 42, 43, 47, 63, 67, 68, 73, 82, 96, 101, 109, 110, 117, 141, 150, 162, 170, 174, 176, 187, 197, 198, 206, 216, 217, 219, 220, 234, 237, 238, 262, 275, 285, 294, 299, 300], "initi": [16, 141, 145, 163, 165, 299], "polyphas": [18, 19, 20, 41, 42, 43, 108, 109, 110, 177, 178, 179, 180, 182, 184, 185, 186, 188, 196, 197, 198, 221, 225, 271, 284, 302, 303], "fir": [18, 19, 20, 22, 41, 42, 43, 44, 47, 48, 49, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 88, 89, 108, 109, 110, 111, 114, 115, 151, 152, 177, 178, 179, 181, 183, 185, 186, 187, 188, 196, 197, 198, 199, 216, 217, 218, 219, 220, 221, 252, 253, 254, 255, 256, 259, 260, 266, 270, 271, 298, 302, 303], "filter": [18, 19, 20, 22, 23, 24, 28, 29, 31, 33, 41, 42, 43, 44, 45, 47, 48, 49, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 121, 127, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 149, 151, 152, 161, 169, 175, 177, 178, 179, 181, 183, 185, 186, 187, 188, 196, 197, 198, 199, 201, 216, 217, 218, 219, 220, 221, 225, 235, 238, 252, 253, 254, 255, 256, 259, 260, 266, 270, 271, 274, 275, 277, 284, 290, 301, 302, 303], "effici": [18, 149, 225, 246, 284], "split": 18, "equal": [18, 84, 149], "each": [18, 19, 20, 41, 42, 43, 63, 108, 109, 110, 177, 179, 182, 184, 185, 196, 197, 198, 221, 232, 240, 258, 262, 265], "ha": [18, 42, 63, 106, 108, 109, 149, 161, 169, 197, 206, 216, 217, 218, 219, 220, 225, 234, 235, 246, 284, 287, 299, 300, 301], "bandwidth": [18, 24, 25, 26, 31, 35, 49, 132, 134, 138, 207, 216, 217, 235, 274, 277, 299, 301, 303], "equival": [18, 41, 89, 108, 196, 206, 207, 216, 217, 218, 219, 220, 230, 237, 280, 285, 293, 295], "first": [18, 22, 41, 44, 55, 108, 110, 111, 149, 159, 161, 177, 181, 196, 198, 199, 244, 255, 268, 283, 292, 294], "f_i": 18, "cdot": [18, 48, 109, 114, 141, 163, 197, 216, 217, 219, 220, 243], "feedforward": [18, 20, 41, 43, 48, 62, 64, 77, 88, 90, 93, 95, 106, 108, 110, 114, 151, 177, 179, 186, 188, 196, 198, 253, 254, 255, 256, 259, 260, 266, 270, 271, 296, 297], "coeffici": [18, 20, 41, 43, 62, 64, 90, 93, 108, 110, 116, 127, 131, 149, 161, 169, 175, 179, 196, 198, 253, 254, 255, 256, 259, 260, 266, 270, 271, 296, 297], "discard": [18, 41, 196], "instead": [18, 41, 108, 196, 251], "ar": [18, 19, 20, 41, 42, 43, 49, 50, 55, 57, 58, 59, 61, 63, 64, 80, 89, 91, 93, 107, 108, 109, 110, 115, 116, 117, 127, 131, 149, 150, 152, 154, 161, 162, 169, 170, 175, 176, 177, 179, 184, 186, 188, 191, 196, 197, 198, 207, 209, 210, 212, 213, 218, 221, 234, 237, 238, 244, 251, 252, 253, 254, 256, 258, 259, 260, 261, 262, 265, 267, 268, 269, 271, 275, 281, 282, 285, 291, 293, 295, 297, 299, 301, 302, 304], "commut": [18, 41, 108, 177, 179, 182, 184, 196], "parallel": [18, 41, 108, 177, 179, 184, 196], "fourier": 18, "transform": 18, "idft": 18, "produc": [18, 19, 42, 63, 108, 109, 177, 179, 184, 196, 197, 235, 301], "y_i": [18, 19, 177, 207, 209, 210, 212, 213, 224], "7": [18, 41, 48, 78, 88, 108, 141, 149, 161, 163, 169, 174, 175, 177, 183, 185, 186, 188, 192, 196, 204, 211, 218, 219, 221, 224, 232, 236, 237, 240, 271, 285, 287, 291, 297, 299], "bottom": [18, 41, 108, 177, 179, 182, 184, 196], "top": [18, 41, 108, 177, 179, 182, 184, 196], "relat": [18, 41, 108, 177, 186, 188, 196, 207, 235], "j": [18, 41, 68, 90, 93, 94, 96, 106, 108, 114, 149, 153, 161, 169, 175, 177, 186, 188, 196, 206, 224, 241, 243, 287, 296, 297], "fred": [18, 41, 108, 196, 221, 271], "harri": [18, 41, 108, 196, 216, 217, 219, 220, 221, 271], "process": [18, 41, 50, 51, 52, 54, 108, 114, 151, 191, 192, 193, 195, 196, 221, 271, 297, 299, 302], "system": [18, 41, 108, 196, 221, 230, 237, 271, 280, 285, 292, 294, 299, 302], "chapter": [18, 41, 108, 171, 173, 196, 221, 271], "out": [18, 41, 55, 68, 88, 96, 108, 141, 149, 161, 169, 172, 174, 175, 183, 185, 186, 188, 189, 190, 196, 208, 209, 211, 212, 215, 222, 223, 224, 226, 227, 229, 230, 232, 234, 236, 237, 242, 244, 246, 249, 269, 271, 272, 273, 279, 280, 283, 285, 286], "tone": 18, "increas": [18, 49, 234, 246, 297], "10_000": [18, 251], "rang": [18, 141, 163, 251, 299, 300], "25": [18, 51, 209, 212, 218, 224, 249, 252, 272, 273, 295, 298, 299, 301], "overlai": 18, "boundari": [18, 149], "so": [18, 234, 235, 238, 274, 275, 277, 302], "wrap": 18, "from": [18, 55, 69, 72, 90, 91, 106, 110, 114, 116, 130, 149, 161, 169, 174, 175, 177, 179, 182, 184, 198, 215, 226, 227, 229, 230, 242, 249, 258, 265, 272, 273, 279, 280, 291, 296, 297, 299, 302], "posit": [18, 241], "neg": [18, 234, 241], "fft": [18, 225, 258, 265, 281, 282, 284], "1024": [18, 68, 69, 72, 96, 253, 254, 256, 259, 260, 298, 301], "color": [18, 48, 106, 252, 261, 262, 268, 298, 301], "label": [18, 41, 48, 51, 53, 78, 88, 106, 108, 114, 141, 150, 151, 162, 163, 170, 171, 173, 176, 192, 194, 196, 204, 206, 216, 217, 218, 219, 220, 232, 233, 235, 237, 241, 250, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 268, 274, 277, 278, 285, 295, 298, 299, 300, 301], "f_start": 18, "f_stop": 18, "fill_betweenx": 18, "80": [18, 20, 43, 48, 110, 198, 221, 287], "xtick": 18, "legend": [18, 48, 88, 106, 141, 163, 204, 216, 217, 218, 219, 220, 241, 295, 298, 299, 301], "spread": [18, 237, 285], "across": [18, 48, 179, 204, 231, 239], "shape": [18, 116, 117, 121, 123, 126, 127, 131, 149, 161, 162, 169, 170, 175, 176, 235, 238, 252, 268, 274, 275, 277, 297, 302, 303], "10000": 18, "1001": 18, "11": [18, 78, 108, 149, 161, 169, 175, 211, 221, 236, 237, 271, 285, 291], "12": [18, 78, 108, 149, 161, 169, 175, 193, 195, 204, 211, 236, 271, 296, 300, 303], "full": [18, 19, 41, 42, 63, 108, 109, 177, 178, 196, 197, 208, 237, 285], "__len__": [18, 41, 48, 62, 65, 88, 108, 151, 177, 196], "state": [18, 19, 24, 37, 41, 42, 47, 48, 62, 63, 67, 73, 74, 76, 78, 82, 84, 85, 86, 88, 90, 101, 102, 104, 106, 108, 109, 114, 151, 177, 187, 196, 197, 303], "flush": [18, 19, 41, 42, 48, 62, 63, 67, 78, 82, 88, 108, 109, 151, 177, 196, 197, 303], "pass": [18, 41, 48, 62, 67, 78, 82, 88, 108, 151, 177, 179, 182, 196, 206, 209, 212, 224, 232, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 289, 291, 293, 296, 297, 303], "through": [18, 41, 48, 62, 67, 78, 82, 88, 108, 151, 161, 175, 177, 196, 209, 212, 224, 289, 296, 297, 299], "consist": [18, 41, 48, 57, 58, 59, 60, 61, 62, 74, 78, 85, 88, 108, 151, 177, 196], "previou": [18, 20, 41, 43, 48, 49, 62, 64, 74, 78, 80, 84, 85, 88, 91, 93, 107, 108, 110, 114, 115, 151, 152, 177, 179, 196, 198, 222, 223], "delta": [18, 32, 34, 41, 48, 62, 70, 88, 89, 90, 98, 106, 108, 114, 151, 177, 196, 218, 255, 296, 297], "u": [18, 41, 48, 62, 75, 88, 90, 103, 106, 108, 114, 151, 177, 196, 204, 266, 287, 288, 296, 297], "frequency_respons": [18, 41, 48, 62, 68, 88, 90, 96, 106, 108, 114, 151, 177, 196, 303], "numpi": [18, 41, 48, 62, 68, 88, 90, 96, 106, 108, 114, 151, 154, 177, 196, 206, 209, 212, 224, 283, 292, 295, 296, 297, 298, 299, 300, 301, 302], "float64": [18, 41, 48, 62, 68, 88, 90, 96, 106, 108, 114, 151, 153, 154, 177, 196, 208, 237, 285, 288], "complex128": [18, 41, 48, 62, 68, 88, 90, 96, 106, 108, 114, 151, 153, 154, 177, 196], "number": [18, 19, 20, 21, 41, 51, 52, 53, 54, 55, 57, 58, 61, 68, 69, 70, 72, 75, 96, 98, 103, 108, 116, 117, 119, 129, 146, 147, 149, 150, 160, 161, 162, 166, 167, 169, 170, 175, 176, 177, 179, 180, 186, 188, 196, 204, 206, 209, 212, 224, 226, 227, 229, 235, 238, 240, 244, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 265, 266, 271, 274, 275, 277, 279, 283], "custom": [18, 23, 41, 45, 108, 112, 117, 162, 170, 176, 196, 201, 216, 217, 219, 220, 303], "index": [18, 22, 41, 44, 78, 84, 108, 111, 116, 149, 161, 169, 175, 177, 181, 196, 199, 237, 252, 261, 262, 267, 285, 288, 291], "correspond": [18, 22, 41, 44, 55, 60, 108, 111, 177, 181, 196, 199, 262], "polyphase_tap": [18, 41, 108, 177, 183, 185, 186, 188, 196], "polyphase_ord": [18, 20, 41, 43, 108, 110, 177, 183, 185, 196, 198, 221], "hold": [18, 41, 108, 110, 177, 179, 182, 196, 198, 244, 303], "connect": [18, 41, 108, 177, 179, 182, 184, 196], "sum": [18, 41, 50, 62, 90, 108, 177, 179, 184, 191, 196, 301], "all": [18, 41, 55, 60, 108, 154, 177, 179, 184, 196, 232, 252, 261, 262, 292, 294, 302], "l": [19, 42, 63, 88, 89, 92, 109, 115, 151, 152, 197, 218], "convolut": [19, 42, 63, 108, 109, 197], "have": [19, 89, 208, 218, 225, 237, 244, 268, 283, 284, 285], "proport": [19, 24, 28, 42, 109, 132, 134, 139, 197, 234, 246, 290, 303], "align": [19, 42, 63, 109, 110, 161, 197, 198, 237, 285, 295], "where": [19, 31, 42, 63, 109, 117, 132, 134, 138, 170, 176, 191, 197, 206, 207, 224, 226, 227, 229, 235, 279, 287, 296, 297, 302], "howev": [19, 42, 57, 58, 59, 61, 63, 88, 109, 132, 197, 210, 213, 237, 285, 295], "final": [19, 42, 63, 109, 197], "d": [19, 48, 62, 66, 78, 81, 88, 151, 231, 234, 239, 246, 291, 293, 302], "dictat": [19, 42, 63, 109, 197], "argument": [19, 20, 42, 43, 63, 109, 110, 197, 198, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 292, 296, 297], "23": [20, 43, 110, 198, 221, 246], "atten": [20, 43, 110, 198, 216, 217, 219, 220, 221], "specif": [20, 43, 60, 68, 96, 110, 198, 294, 301], "npt": [20, 43, 68, 96, 110, 117, 150, 162, 170, 176, 198, 216, 217, 219, 220, 253, 254, 255, 256, 259, 260, 266, 270], "must": [20, 43, 80, 110, 198, 206, 216, 217, 219, 220, 221, 235, 237, 243, 262, 274, 277, 285, 287], "odd": [20, 43, 89, 110, 175, 198, 218, 221, 281], "even": [20, 43, 89, 110, 175, 198, 216, 217, 218, 219, 220, 221, 235, 274, 277], "stopband": [20, 43, 110, 198, 221, 274, 277], "a_": [20, 43, 110, 141, 142, 143, 145, 198, 221], "text": [20, 43, 50, 110, 175, 191, 198, 204, 205, 206, 207, 210, 213, 214, 215, 221, 232, 233, 234, 242, 245, 247, 248, 276, 278], "stop": [20, 43, 110, 198, 221], "closedlooppl": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 290, 299, 303], "defin": [24, 62, 90, 106, 206, 224, 235, 263, 287, 290, 297, 302], "close": [24, 31, 33, 290, 302, 303], "loop": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 132, 133, 134, 135, 136, 137, 138, 139, 140, 153, 154, 155, 156, 157, 158, 159, 160, 302, 303], "pll": [24, 25, 26, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 290, 302, 303], "analysi": [24, 31, 292, 299, 302, 303], "bb": [24, 298, 299], "phase_err": [24, 299], "ped": [24, 30, 31, 134, 141, 145, 146, 147, 163, 164, 165, 166, 167, 168, 290, 299, 302, 303], "lf": [24, 299], "phase_est": [24, 299], "lo": [24, 299], "nco": [24, 27, 31, 134, 153, 154, 155, 156, 157, 158, 159, 160, 290, 299, 302, 303], "local": [24, 291, 299], "oscil": [24, 153, 155, 290, 299, 302, 303], "detector": [24, 30, 31, 50, 134, 141, 148, 163, 168, 191, 299, 302, 303], "numer": [24, 153, 155, 290, 297, 299, 302, 303], "transfer": [24, 33, 62, 90, 91, 114, 132, 235, 296, 297, 299], "2nd": [24, 132, 134, 290, 299, 303], "plu": [24, 132, 134, 290, 303], "h_": [24, 48, 299], "k_1": [24, 28, 132, 139, 299], "k_2": [24, 29, 132, 137, 299], "frac": [24, 32, 34, 37, 38, 48, 50, 51, 52, 54, 62, 66, 78, 81, 88, 90, 106, 110, 114, 132, 151, 161, 169, 175, 191, 192, 193, 198, 204, 205, 206, 207, 214, 226, 227, 229, 230, 232, 234, 235, 241, 242, 243, 245, 246, 276, 279, 280, 286, 287, 299], "k_0": [24, 27, 31, 134, 153, 155, 156, 299], "k_p": [24, 30, 31, 134, 141, 148, 163, 168, 299], "appendix": [24, 132, 274, 277], "lock": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 132, 133, 134, 135, 136, 137, 138, 139, 140, 153, 154, 155, 156, 157, 158, 159, 160, 302], "see": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 47, 49, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 104, 105, 107, 115, 132, 133, 134, 135, 136, 137, 138, 139, 140, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 169, 172, 174, 175, 187, 196, 216, 217, 219, 220, 225, 235, 238, 253, 254, 255, 256, 259, 260, 266, 270, 274, 275, 277, 302], "noise_bandwidth": [24, 31, 132, 134, 138], "damping_factor": [24, 31, 132, 134, 135], "object": [24, 31, 55, 56, 116, 117, 149, 150, 161, 162, 169, 170, 175, 176, 237, 253, 254, 255, 256, 259, 260, 266, 270, 285, 299, 303], "phase_lock_tim": [24, 38], "frequency_lock_tim": [24, 32], "freq_offset": [24, 32, 34], "lock_tim": [24, 34, 299], "phase_error_vari": [24, 37], "cn0": [24, 37], "varianc": [24, 37, 50, 52, 54, 193, 195, 206], "steadi": [24, 37], "sample_r": [24, 31, 39, 41, 68, 69, 72, 78, 96, 108, 149, 161, 169, 175, 196, 225, 233, 243, 252, 253, 254, 256, 258, 259, 260, 261, 262, 265, 268, 281, 282, 284, 295, 299, 301], "bnt": [24, 26, 299], "b_n": [24, 25, 26, 31, 32, 34, 37, 38, 132, 134, 138], "bn": [24, 25], "hz": [24, 25, 31, 32, 34, 37, 68, 69, 72, 96, 132, 134, 138, 207, 215, 225, 233, 234, 235, 242, 243, 246, 281, 282, 286, 295], "zeta": [24, 31, 40, 132, 134, 135], "damp": [24, 31, 40, 132, 134, 135, 299], "k0": [24, 27, 31, 134, 153, 299], "kp": [24, 30, 31, 134, 299], "k1": [24, 28, 132, 299], "k2": [24, 29, 132, 299], "repres": [24, 33, 209, 210], "omega_n": [24, 36, 299], "natur": [24, 36], "radian": [24, 35, 36, 37, 141, 144, 146, 147, 153, 154, 155, 157, 158, 159, 163, 164, 166, 167, 175, 299], "omega_3db": [24, 35], "omega_": [24, 35], "textrm": [24, 35], "period": [31, 132, 134, 138, 149, 287], "second": [31, 32, 34, 38, 55, 132, 134, 138, 235], "critic": [31, 40, 132, 134, 135, 299], "underdamp": [31, 40, 132, 134, 135], "overdamp": [31, 40, 132, 134, 135], "ted": [31, 134], "t_": [32, 34, 38, 79, 235, 301], "fl": [32, 34], "take": [32, 34, 38, 291], "onto": [32, 34, 38], "39": 32, "pl": [34, 38, 292], "38": 34, "34": [35, 268], "33": 36, "sigma_": [37, 50, 51, 53], "theta_": [37, 141, 144, 163, 164], "carrier": [37, 169], "43": 37, "40": [38, 48, 78, 108, 196, 225], "less": [40, 204], "than": [40, 149, 150, 162, 170, 174, 176, 204, 238, 241, 251, 267, 275], "greater": [40, 274, 277], "prevent": [41, 108, 161, 175, 196], "need": [41, 108, 196, 291, 292, 294], "done": [41, 291], "case": [41, 108, 175, 191, 196], "3x": [41, 108], "v": [41, 153, 177, 215, 242, 291], "summat": [41, 177], "resampl": [41, 78, 79, 80, 82, 83, 84, 85, 86, 87, 108, 196, 197, 198, 199, 200, 201, 202, 203, 221, 271, 302, 303], "co": [41, 78, 108, 196, 243], "64": [41, 88, 218, 240, 297], "280": 41, "marker": [41, 78, 108, 153, 196, 251, 267, 268, 295, 296, 297, 300], "o": [41, 78, 108, 196, 295], "true": [41, 51, 52, 53, 54, 68, 78, 96, 108, 141, 146, 147, 149, 161, 163, 166, 167, 169, 171, 173, 175, 192, 193, 194, 195, 196, 204, 205, 207, 209, 210, 212, 213, 224, 228, 234, 237, 243, 247, 248, 251, 260, 262, 267, 268, 269, 276, 285, 298, 299, 300], "y1": [41, 78, 108, 196, 241], "70": [41, 240], "y2": [41, 78, 108, 196, 241], "140": [41, 225], "y3": [41, 78, 108, 196], "210": 41, "y4": [41, 78, 108, 196], "y5": [41, 78, 108, 196], "y_1": [41, 108, 196, 241], "y_2": [41, 108, 196, 241], "y_3": [41, 108, 196], "y_4": [41, 108, 196], "y_5": [41, 108, 196], "win": 48, "quad": [48, 151], "le": [48, 89, 151, 204, 218, 243, 246, 274, 277], "truncat": 48, "puls": [48, 106, 116, 117, 121, 123, 126, 127, 131, 149, 161, 162, 169, 170, 175, 176, 235, 238, 252, 268, 274, 275, 277, 302, 303], "same": [48, 63, 141, 163, 268, 296], "deriv": 48, "fir_2": 48, "fir_6": 48, "fir_10": 48, "fir_20": 48, "20": [48, 49, 51, 53, 78, 108, 149, 153, 161, 169, 175, 192, 196, 204, 207, 209, 212, 215, 224, 232, 233, 240, 241, 242, 248, 271, 276, 284, 298, 300, 303], "fir_40": 48, "fir_80": 48, "y_axi": [48, 256, 258, 303], "linspac": [48, 51, 68, 96, 106, 171, 173, 192, 207, 210, 213, 234, 250, 264, 297, 298, 299, 300], "ab": [48, 106, 208, 237, 285, 287, 301], "linestyl": [48, 106, 141, 149, 161, 163, 169, 175, 251, 262, 267, 269, 287, 295, 299, 300, 301], "theori": [48, 50, 51, 52, 54, 106, 191, 192, 193, 195], "lfloor": [48, 62, 66, 78, 81, 88, 151], "rfloor": [48, 62, 66, 78, 81, 88, 151], "blackman": [49, 216, 217, 219, 220], "scipi": [49, 62, 90, 216, 217, 219, 220, 258, 265, 301, 302], "definit": [49, 253, 254, 255, 256, 259, 260, 266, 270], "get_window": 49, "detail": 49, "If": [49, 53, 84, 117, 154, 162, 170, 176, 194, 196, 205, 206, 207, 224, 228, 244, 247, 248, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 265, 266, 267, 268, 276, 281, 283, 302], "null": [50, 191, 301], "altern": [50, 191, 297], "hypothes": [50, 191], "follow": [50, 55, 116, 149, 161, 169, 175, 241, 251, 262, 265, 267, 269, 271, 299], "assum": [50, 191, 206, 224, 244, 268, 283], "w": [50, 191, 206, 295, 296, 297, 298, 299, 300, 301], "sigma": [50, 51, 52, 53, 54, 191, 192, 193, 194, 195, 206, 207], "_0": [50, 191], "_1": [50, 191], "test": [50, 191, 292, 293, 302], "statist": [50, 51, 52, 54, 191, 192, 193, 195], "limits_": [50, 62, 90, 191], "left": [50, 51, 52, 88, 90, 161, 163, 169, 175, 191, 192, 193, 195, 204, 205, 206, 207, 228, 231, 232, 234, 235, 241, 243, 246, 247, 248, 276, 287], "right": [50, 51, 52, 90, 161, 163, 169, 175, 191, 192, 193, 195, 204, 205, 206, 207, 228, 231, 232, 234, 235, 241, 243, 246, 247, 248, 276, 287], "gamma": [50, 52, 54, 191, 193, 195, 204], "sim": [50, 191, 206, 292], "chi_": [50, 51, 52], "2n": [50, 51, 52], "under": [50, 191], "detect": [50, 51, 52, 53, 54, 141, 144, 146, 147, 163, 164, 166, 167, 191, 192, 193, 194, 195, 204, 257, 263, 303], "threshold": [50, 52, 54, 191, 193, 195], "q_": [50, 51, 52, 54], "chi_n": [50, 51, 52, 54], "steven": [50, 51, 52, 54, 191, 192, 193, 195], "kai": [50, 51, 52, 54, 191, 192, 193, 195], "fundament": [50, 51, 52, 54, 191, 192, 193, 195], "static": [50, 51, 52, 53, 54, 191, 192, 193, 194, 195, 292], "n_nc": [50, 51, 52, 53, 54, 204], "For": [51, 52, 54, 192, 193, 195, 206, 225, 234, 284, 291, 296], "101": [51, 53, 192, 194, 216, 217, 219, 220], "1e": [51, 192, 233, 300], "sigma2": [52, 54, 193, 195], "logspac": [53, 68, 96, 194, 204], "theoret": [53, 171, 173, 250, 264, 300, 303], "variou": [53, 88, 292, 301], "1_000": [53, 114, 151, 206, 233, 234, 241, 278, 298], "000": [53, 233], "5_000": 53, "measur": [55, 57, 205, 206, 214, 215, 228, 231, 232, 239, 242, 245, 247, 248, 276, 299, 302, 303], "new": [55, 56, 78, 80, 114, 116, 117, 149, 150, 161, 162, 169, 170, 175, 176, 278], "accumul": [55, 106, 153, 154, 155, 157, 159, 299, 303], "contain": [55, 206, 240], "add": [55, 57, 60, 149, 161, 169, 175, 206, 233, 238, 262, 275, 278, 289, 300, 304], "total": [55, 235, 238, 274, 275, 277, 301], "count": [55, 58, 232], "error_r": [55, 59, 60, 300], "everi": [55, 295], "can": [55, 57, 58, 59, 61, 132, 149, 177, 206, 232, 235, 237, 244, 252, 255, 258, 265, 285, 293, 296, 297, 300, 302, 304], "obtain": 55, "tabul": [55, 56], "ascend": [55, 60], "other": [57, 58, 59, 61, 295, 304], "quantiti": [57, 58, 59, 60, 61], "user": [57, 58, 59, 61, 296, 297], "caution": [57, 58, 59, 61], "instanc": [57, 58, 59, 61, 149], "transmit": [57, 116, 131, 141, 144, 149, 161, 163, 164, 169, 175, 232, 252], "whatev": 60, "wa": [60, 207], "provid": [60, 116, 118, 128, 149, 161, 169, 171, 173, 175, 262, 292, 302], "wrapper": [62, 90], "convolv": 62, "It": [62, 90, 108, 117, 132, 141, 162, 170, 176, 206, 252], "support": [62, 90, 303], "one": [62, 90, 150, 161, 162, 170, 174, 176, 235, 240, 252, 253, 254, 256, 258, 259, 260, 265, 281, 296, 297, 298, 301], "sum_": [62, 90, 193, 195, 205, 206, 207, 228, 231, 232, 239, 276], "valid": [63, 234, 252, 261, 262, 287], "remain": [67, 82, 225, 244], "whole": [68, 96, 301], "decad": [68, 96, 253, 254, 256, 259, 260, 296, 299], "point": [68, 96, 146, 147, 166, 167, 258, 265], "endpoint": [68, 96, 297], "includ": [68, 96, 292, 293, 294, 302], "integ": [68, 96, 244], "maximum": [68, 96, 116, 120, 121, 141, 149, 161, 169, 175, 235, 238, 251, 267, 274, 275, 277, 290, 299, 303], "max_f": [68, 96], "log10": [68, 96], "evenli": [68, 96], "00000000e": [68, 96, 174, 175, 297], "00": [68, 96, 174, 175, 297], "76562500e": [68, 96], "04": [68, 96, 240, 297], "95312500e": [68, 96], "03": [68, 96, 240, 297], "97070312e": [68, 96], "98046875e": [68, 96], "99023438e": [68, 96], "95337172": 68, "30202676j": 68, "8178049": 68, "5759632j": 68, "6058636": 68, "79630028j": 68, "rad": [68, 96], "0000000000000002": 68, "0j": [68, 96, 150, 162, 170, 176], "sever": [68, 96], "200": [68, 96, 225, 295, 300], "300": [68, 96, 281, 282], "400": [68, 96, 225, 295], "00391660e": 68, "11022302e": 68, "16j": [68, 174, 175], "53081763e": 68, "79453110e": 68, "17j": 68, "62720131e": 68, "99104274e": 68, "83622458e": 68, "17093835e": 68, "structur": 78, "angular": 78, "179": 78, "1415926": 78, "farrow1": 78, "quadrat": 78, "farrow2": 78, "cubic": 78, "farrow3": 78, "quartic": 78, "farrow4": 78, "13": [78, 108, 149, 161, 169, 175, 191, 192, 193, 195, 208, 211, 236, 268, 271, 303], "14": [78, 149, 161, 169, 175, 192, 211, 236, 271, 303], "compar": [78, 114, 141, 151, 163, 171, 173, 216, 217, 218, 219, 220, 255, 301], "vari": [78, 154], "15": [78, 141, 149, 194, 211, 236, 237, 271, 284, 285], "xlim": [78, 225, 284, 298, 299, 301], "comparison": [78, 141, 163, 292], "run": [78, 291], "17": [78, 174, 175, 232, 246, 271, 291], "18": [78, 271, 291, 300], "30": [78, 108, 114, 151, 196, 225, 253, 255, 266, 281, 282, 297, 303], "concaten": [78, 297], "19": [78, 271, 303], "_delai": 78, "should": [84, 141, 149, 252, 293], "three": [84, 295, 301], "21719": 88, "examin": [88, 252], "flat": [88, 218], "32": [88, 218, 295], "128": 88, "loc": 88, "lower": [88, 149, 161, 175, 274, 277], "effect": 88, "outsid": [88, 297], "symmetri": 88, "about": [88, 216, 217, 268, 294], "band": 88, "worst": 88, "1f": 88, "around": [88, 150, 162, 170, 176], "perfectli": 88, "exactli": 88, "best": [89, 218], "append": [89, 218, 281, 298], "lfilter": 90, "b_i": [90, 93, 95, 106, 114, 253, 254, 255, 256, 259, 260, 266, 270, 297], "feedback": [90, 93, 94, 106, 114, 253, 254, 255, 256, 259, 260, 266, 270, 297], "a_j": [90, 93, 94, 106, 114, 253, 254, 255, 256, 259, 260, 266, 270, 297], "These": [90, 161, 169, 175, 269, 293, 299], "differ": [90, 114, 150, 162, 170, 174, 176, 216, 217, 218, 219, 220, 237, 255, 268, 285, 287, 301], "a_0": 90, "classmethod": [90, 91, 106, 114], "zerospol": [90, 91, 96, 106, 114, 253, 254, 255, 256, 259, 260, 266, 270, 297], "self": [90, 91, 106, 114], "b_tap": [90, 95, 106, 114, 297], "a_tap": [90, 94, 106, 114, 297], "conj": [96, 253, 254, 255, 256, 259, 260, 266, 270, 297, 299], "4722987": 96, "47271105": 96, "0041658j": 96, "47394825": 96, "00830241j": 96, "47601067": 96, "01238051j": 96, "472298696877605": 96, "36961426": 96, "9678537j": 96, "57338213": 96, "77694738j": 96, "52496713": 96, "3885743j": 96, "51520024": 96, "1706839j": 96, "accordingli": 106, "dc": [106, 218], "backward": [106, 107, 303, 304], "trapezoid": [106, 107, 303], "forward": [106, 107, 153, 160, 303], "iir_back": 106, "iir_trap": 106, "iir_forw": 106, "y_back": 106, "y_trap": 106, "y_forw": 106, "height": 107, "insert": [108, 196], "recommend": 108, "wai": [108, 293], "zoh": [108, 110, 112, 196, 198, 201], "matlab": [108, 110, 112, 196, 198, 201, 302], "linearli": [110, 198], "2r": 110, "ramp": [110, 132, 198], "advanc": [110, 198], "ones": [110, 198, 216, 217, 219, 220, 299], "approxim": [114, 115, 204, 303], "rememb": 114, "scale": [114, 141, 253, 254, 256, 258, 259, 260, 265, 296, 297], "\u03b1": 114, "35": [114, 151], "y_fir": [114, 151], "y_iir": [114, 151], "modul": [116, 117, 123, 124, 126, 141, 146, 147, 149, 153, 161, 162, 163, 166, 167, 169, 170, 171, 173, 175, 176, 226, 227, 229, 232, 250, 252, 261, 264, 267, 268, 279, 291, 294, 300, 302, 303], "nomenclatur": [116, 149, 161, 169, 175], "variabl": [116, 149, 153, 154, 161, 169, 175, 240, 299], "name": [116, 149, 161, 169, 175], "decis": [116, 120, 121, 141, 144, 147, 149, 161, 163, 164, 167, 169, 175, 252, 299], "tild": [116, 120, 121, 141, 144, 149, 161, 163, 164, 169, 175], "map_symbol": [116, 122, 149, 161, 169, 175, 206, 232, 233, 241, 251, 252, 278, 298, 299, 300, 303], "decide_symbol": [116, 120, 149, 161, 169, 175, 299, 300, 303], "a_tild": [116, 120, 149, 161, 169, 175, 299, 300], "likelihood": [116, 120, 121, 141, 149, 161, 169, 175, 290, 299, 303], "mle": [116, 120, 149, 161, 169, 175], "match": [116, 117, 121, 127, 149, 161, 162, 169, 170, 175, 176, 303], "abstract": [116, 118, 128], "log_2": [116, 119, 149, 161, 169, 175, 207, 226, 227, 229, 279], "phase_offset": [116, 117, 125, 149, 150, 161, 162, 169, 170, 172, 175, 176, 206, 232, 233, 241, 251, 252, 267, 268, 278, 298, 299, 300], "degre": [116, 117, 125, 149, 150, 161, 162, 169, 170, 172, 175, 176, 233, 241, 243, 246, 299], "dot": [116, 117, 130, 149, 161, 169, 174, 175, 267], "mapsto": [116, 117, 130, 149, 161, 169, 174, 175, 267], "mathbb": [116, 117, 130, 149, 161, 169, 174, 175, 207, 267, 287], "sym": [116, 117, 129, 149, 150, 161, 162, 169, 170, 175, 176, 227, 230, 235, 279, 280, 301], "pulse_shap": [116, 117, 121, 123, 126, 149, 161, 162, 169, 170, 175, 176, 268, 298, 300], "tx_filter": [116, 131, 149, 161, 169, 175], "rx_filter": [116, 127, 149, 161, 169, 175], "rect": [117, 162, 170, 176, 301], "whose": [117, 150, 162, 169, 170, 176], "import": [117, 141, 162, 170, 176, 293, 295, 296, 297, 298, 299, 300, 301, 302], "string": [117, 162, 170, 176, 240, 258, 265, 303], "roll": [117, 162, 170, 176, 287, 301], "off": [117, 162, 170, 176], "psd": [118, 128, 171, 173, 207, 226, 227, 229, 230, 250, 264, 279, 280], "p_b": 118, "x_tild": 121, "s_hat": [121, 299, 300], "p_e": 128, "loopfilt": [132, 133, 134, 135, 136, 137, 138, 139, 140, 290, 299, 303], "ppi": [132, 134, 290], "track": 132, "constant": [132, 149, 153, 155, 157, 258, 265, 297, 299], "cannot": 132, "chirp": 132, "proportional_gain": [132, 139], "integral_gain": [132, 137], "underli": [132, 136], "mlped": [141, 142, 143, 144, 145, 146, 147, 148, 290, 299, 303], "ml": [141, 145, 290, 299], "aid": [141, 146, 163, 166], "known": [141, 144, 163, 164, 206, 237, 285], "da": [141, 163], "im": 141, "re": [141, 191], "direct": [141, 147, 163, 167, 303], "qpsk": [141, 161, 163, 169, 171, 172, 173, 175, 206, 232, 233, 250, 251, 252, 264, 267, 268, 278, 299, 302, 303], "a_rx": 141, "a_ref": 141, "da_error": [141, 163], "data_aided_error": [141, 146, 163, 166], "dd_error": [141, 163], "decision_directed_error": [141, 147, 163, 167], "grid": [141, 163, 204, 207, 210, 213, 234, 269, 295, 298, 299, 301], "xlabel": [141, 163, 204, 207, 208, 210, 213, 232, 234, 237, 285, 287, 295, 298, 299, 301], "ylabel": [141, 163, 204, 207, 208, 210, 213, 232, 234, 237, 285, 287, 295, 298, 299, 301], "observ": [141, 163, 218, 246, 252], "slope": [141, 163], "rx": [141, 142, 145], "both": [141, 163, 204, 207, 251, 267, 268, 295, 299], "veri": [141, 302], "becaus": [141, 237, 285], "unambigu": [141, 163], "a_receiv": [141, 142, 145], "a_refer": [141, 143, 145], "simul": [141, 146, 147, 163, 166, 167, 300, 302], "scheme": [141, 146, 147, 149, 161, 163, 166, 167, 169, 175, 303], "either": [144, 164, 232], "modem": [146, 147, 149, 161, 166, 167, 169, 175], "n_point": [146, 147, 166, 167], "similar": [149, 161, 175, 301], "One": [149, 161, 175, 301], "distinct": [149, 161, 175], "result": [149, 161, 175, 205, 228, 234, 246, 247, 248, 274, 276, 277, 300], "envelop": [149, 296, 297], "which": [149, 161, 175, 204, 205, 206, 207, 228, 231, 233, 239, 241, 245, 246, 247, 251, 254, 256, 259, 260, 267, 278, 295, 299, 301], "consid": [149, 240], "cpfsk": 149, "separ": 149, "45": [149, 150, 161, 162, 169, 172, 206, 232, 233, 241, 243, 251, 252, 267, 268, 278, 298, 299, 300], "symbol_label": [149, 150, 161, 162, 169, 170, 174, 175, 176, 300], "randint": [149, 161, 169, 175, 206, 209, 212, 224, 232, 233, 241, 251, 252, 261, 268, 278, 298, 299, 300], "uint8": [149, 161, 169, 175, 244, 283], "complex_symbol": [149, 161, 169, 175], "70710678": [149, 161, 169], "70710678j": [149, 161, 169], "tx_sampl": [149, 161, 169, 175], "50": [149, 161, 169, 175, 215, 242, 249, 267, 268, 281, 282, 295, 298], "like": [149, 293, 302, 303], "subplot": [149, 161, 241, 299, 300], "imag": [149, 161, 295], "trajectori": 149, "although": 149, "lead": [149, 241, 300], "spectral": [149, 225, 258, 298, 301], "gmsk": 149, "rx_sampl": [149, 161, 169, 175], "last": [149, 161, 244, 291], "rx_symbol": [149, 161, 169, 175], "rx_complex_symbol": [149, 161, 169, 175], "_": [149, 161, 169, 175, 204, 232], "array_equ": [149, 161, 169, 175, 237, 285], "bin": [150, 162, 170, 174, 176, 232, 251, 267, 300], "absolut": [150, 153, 155, 158, 162, 176, 207], "consecut": [150, 162, 170, 176], "adjac": [150, 162, 170, 174, 176, 300, 301], "mai": [150, 162, 170, 174, 176, 232, 251, 262, 265, 267, 269, 297], "more": [150, 162, 170, 174, 176, 303], "start": [150, 162, 170, 176, 291], "go": [150, 162, 170, 176], "counter": [150, 162, 170, 176], "clockwis": [150, 162, 170, 176], "circl": [150, 162, 170, 176, 297], "increment": [153, 154, 155, 157, 299], "Then": 153, "fsk": 153, "60": [153, 216, 217, 219, 220, 301], "repeat": 153, "cp": 153, "57": 153, "bpsk": [153, 171, 173, 250, 264, 298], "format": [154, 208, 237, 285, 303], "option": [154, 253, 254, 256, 258, 259, 260, 265, 303], "intern": 159, "set": [159, 206, 234, 237, 251, 258, 262, 265, 267, 269, 285, 292, 294, 297], "convent": [161, 175], "transit": [161, 175, 212, 213, 224, 285, 289], "independ": 161, "apart": 161, "taken": [161, 169, 175, 177], "jq": 161, "begin": [161, 175, 191], "end": [161, 175, 191, 281, 292], "heurist": [163, 290, 299, 303], "dd": [163, 299, 303], "encod": [169, 171, 173, 222, 223, 302], "inform": [169, 226, 227, 229, 237, 279, 285], "ge": [170, 176, 204], "were": [171, 173], "simon": [171, 173], "alouini": [171, 173], "fade": [171, 173], "john": [171, 173], "proaki": [171, 173], "optimum": [171, 173], "psk8": [171, 173, 250, 264, 300], "psk16": [171, 173, 250, 264, 300], "de": [171, 173, 299, 303], "se": [173, 264], "00j": [174, 175], "07106781e": [174, 175], "01j": [174, 175], "12323400e": [174, 175], "83697020e": 174, "22464680e": [174, 175], "annot": [174, 267, 303], "rotat": [175, 243, 299], "rel": [175, 287, 301], "2m": 175, "displaystyl": 175, "pi4_qpsk": 175, "partit": [177, 179, 182, 184], "befor": [186, 188, 304], "decomposit": [186, 188, 303], "exceed": [189, 190], "15865525393145707": [189, 190], "158655": [189, 190], "0000010494310452": [189, 190], "perfect": 191, "knowledg": 191, "cn": [191, 206], "mathrm": 191, "sqrt": [191, 192, 193, 195, 204, 231, 232, 235, 276, 287, 298, 299, 301], "____": 196, "down": [196, 198, 200, 221, 271], "2p": 198, "ln": [204, 235], "62": [204, 240], "log_": [204, 205, 215, 228, 234, 245, 247, 248, 276], "54": [204, 240], "44": 204, "12ab": 204, "7b": 204, "claim": 204, "leq": 204, "8096": 204, "radarsp": 204, "weebli": 204, "upload": 204, "21471216": 204, "albersheim_alternative_form": 204, "pdf": [204, 235], "bpb": 204, "w2": 204, "wpmucdn": 204, "site": [204, 291], "gatech": 204, "edu": 204, "dist": [204, 292], "462": 204, "file": [204, 292, 294], "2016": 204, "noncoher": 204, "www": [204, 216, 217, 218, 219, 220, 221, 235, 237, 285], "mathwork": [204, 216, 217, 218, 219, 220, 221, 235, 237, 285], "help": [204, 216, 217, 218, 219, 220, 221, 235, 237, 285], "html": [204, 216, 217, 218, 219, 220, 221, 235, 237, 285, 291], "semilogx": [204, 263], "nuse": 204, "axi": [205, 228, 231, 239, 245, 247, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 265, 267, 268, 295, 303], "avg": [205, 206, 245], "ax": [205, 228, 231, 239, 245, 247, 269, 303], "along": [205, 228, 231, 239, 245, 247, 303], "entir": [205, 228, 231, 239, 245, 247], "decibel": [205, 215, 228, 242, 247, 248, 276, 302, 303], "seed": [206, 209, 212, 224, 303], "ad": [206, 262, 292, 302, 303], "explicitli": 206, "default_rng": [206, 209, 212, 224], "noisi": 206, "sin": [206, 281], "zorder": [206, 233, 278], "infti": [206, 207], "nand": 206, "capac": [207, 210, 213, 302, 303], "2d": [207, 262], "x_i": [207, 209, 210, 212, 213, 224, 241], "monoton": 207, "limit": [207, 251, 267, 300], "At": 207, "occur": 207, "view": [207, 292, 302], "59": 207, "shannon": 207, "semilogi": [207, 250, 263, 264], "barker": [208, 288, 302, 303], "int64": [208, 237, 285, 288], "bipolar": [208, 237, 285, 303], "sequenc": [208, 209, 212, 224, 237, 285, 287, 289, 302, 303], "seq": [208, 237, 285], "ideal": [208, 300], "minim": 208, "autocorrel": [208, 237, 285, 287], "sidelob": [208, 216, 217, 219, 220, 237, 274, 277, 285, 287], "corr": [208, 287], "lag": [208, 237, 285, 287], "roughli": [209, 212, 295], "eras": 209, "flip": 212, "h_b": 213, "cf": 214, "v_": [214, 215, 242, 248, 276], "en": [214, 245, 287], "wikipedia": [214, 245, 287], "org": [214, 245, 287], "wiki": [214, 245, 287], "type": [215, 232, 242, 244, 258, 263, 265, 283, 303], "voltag": [215, 242, 248, 276, 302], "x_": [215, 242], "mhz": [215, 242], "77": [215, 240, 242], "50e6": 215, "76": [215, 240], "98970004336019": 215, "mw": [215, 242], "dbm": [215, 242], "dbv": [215, 242], "020599913279624": 215, "center_freq": [216, 217], "hann": [216, 217, 219, 220, 258, 265], "chebyshev": [216, 217, 219, 220], "nyquist": [216, 217, 219, 220, 225, 252, 284, 301], "side": [216, 217, 235, 253, 254, 256, 258, 259, 260, 265, 296, 297, 298, 301], "No": [216, 217, 219, 220], "blackmanharri": [216, 217, 219, 220], "chebwin": [216, 217, 219, 220], "dsp": [216, 217, 218, 219, 220, 221, 302], "designbandpassfir": 216, "h_ham": [216, 217, 219, 220], "h_hann": [216, 217, 219, 220], "h_blackman": [216, 217, 219, 220], "h_blackman_harri": [216, 217, 219, 220], "h_chebyshev": [216, 217, 219, 220], "h_kaiser": [216, 217, 219, 220], "larger": [217, 238, 241, 251, 267, 275], "designbandstopfir": 217, "75": [217, 240, 251, 299, 300], "tau": 218, "l_": 218, "designfracdelayfir": 218, "h_8": [218, 274, 277], "h_16": [218, 274, 277], "h_32": 218, "h_64": 218, "cutoff_freq": [219, 220], "cutoff": [219, 220], "f_c": [219, 220], "designhighpassfir": 219, "designlowpassfir": 220, "designmultiratefir": 221, "oplu": [222, 223, 239], "uncod": 223, "dmc": [224, 289, 302, 303], "memoryless": [224, 289, 302], "pr": 224, "y_j": 224, "alphabet": 224, "ldot": 224, "doe": [225, 284], "anti": [225, 284, 303], "alias": [225, 284, 303], "x1": 225, "x2": 225, "130": 225, "x3": [225, 287], "spectrum": [225, 253, 254, 256, 258, 259, 260, 265, 281, 282, 284], "content": 225, "abov": [225, 284], "fold": 225, "cw": 225, "unalias": 225, "2048": [225, 281, 282, 284, 298], "qam": [226, 227, 229, 279], "249387366082999": [226, 227], "020599913279625": [226, 280], "7506126339170005": [229, 279], "979400086720376": [229, 230], "norm": [232, 235, 238, 274, 275, 277], "noiseless": 232, "sourc": 232, "max": [232, 247, 248], "instantan": 232, "percentil": [232, 265], "883858074357722": 232, "827913469212346": 232, "093799330973773": 232, "95th": 232, "95": 232, "15961815099308": 232, "inst_evm": 232, "hist": 232, "histogram": 232, "frequency_offset": [233, 289, 303], "freq_rat": 233, "cycl": [233, 268], "5e": 233, "deg": [233, 241, 299], "path": [234, 302], "loss": [234, 302], "meter": [234, 246, 286], "transmitt": 234, "far": 234, "field": 234, "impli": 234, "possibl": [234, 302], "km": 234, "link": [234, 302, 303], "ghz": [234, 246, 286], "1e3": [234, 243, 281], "1e9": [234, 246, 286], "92": 234, "44778322188337": 234, "doubl": [234, 246], "2e3": 234, "98": 234, "468383135163": 234, "2e9": 234, "product": [235, 301], "thought": [235, 304], "smaller": [235, 274, 277, 301], "wider": 235, "gaussdesign": 235, "onlinelibrari": 235, "wilei": 235, "doi": 235, "1002": 235, "9780470041956": 235, "app2": 235, "h_0p1": [235, 274, 277], "h_0p2": 235, "h_0p3": 235, "hadamard": [237, 285, 288, 302, 303], "comm": [237, 285], "hadamardcod": 237, "walsh": [237, 285, 288, 302, 303], "thei": [237, 285, 304], "cross": [237, 285, 287], "seq1": [237, 285], "seq2": [237, 285], "seq3": [237, 285], "quit": [237, 285], "larg": [237, 285, 292], "misalign": [237, 285], "precis": [237, 285], "xcorr12": [237, 285], "xcorr13": [237, 285], "xcorr23": [237, 285], "uniform": [237, 285], "fact": [237, 285], "high": [237, 285], "acorr1": [237, 285], "acorr2": [237, 285], "acorr3": [237, 285], "reason": [238, 275, 291], "h_half_sin": 238, "displai": [240, 251, 253, 254, 256, 258, 259, 260, 265, 267], "line": [240, 268, 292, 298], "print": [240, 295, 296, 297, 299], "quick": 240, "brown": 240, "fox": 240, "jump": 240, "lazi": 240, "dog": 240, "00000000": 240, "68": 240, "65": 240, "71": 240, "69": 240, "63": 240, "6b": 240, "72": 240, "6f": 240, "6e": 240, "00000010": 240, "66": 240, "78": 240, "6a": 240, "6d": 240, "73": 240, "74": 240, "00000020": 240, "6c": 240, "61": 240, "7a": 240, "79": 240, "67": 240, "he": 240, "02": [240, 297, 299], "00000004": 240, "05": [240, 295, 297, 299], "06": 240, "07": 240, "08": 240, "00000008": 240, "09": 240, "0a": 240, "iq_imbal": [241, 289, 303], "iq": [241, 289, 302], "imbal": [241, 289, 302], "compon": [241, 281, 282, 284], "g_i": 241, "180": 241, "g_q": 241, "x_q": 241, "horizont": 241, "stretch": 241, "while": [241, 301], "vertic": 241, "northwest": 241, "northeast": 241, "50118723": 242, "36272725": 242, "9952623149688795": 242, "satisfi": 243, "remov": [243, 258, 265, 303], "dtypelik": [244, 283], "most": [244, 283], "signific": [244, 283], "enough": 244, "fill": 244, "smallest": 244, "unsign": 244, "diamet": 246, "55": [246, 268], "eta": 246, "dbi": 246, "arcsin": 246, "83": 246, "dish": 246, "21": [246, 268], "810210290266568": 246, "437435887991374": 246, "sinc": [246, 252, 291, 300], "antenna": [246, 302], "we": [246, 302], "830810203546193": 246, "529544741425365": 246, "keyword": [250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 296, 297], "pyplot": [250, 251, 254, 255, 256, 257, 258, 259, 260, 264, 265, 266, 267, 268, 269, 270, 295, 296, 297, 298, 299, 300, 301], "heatmap": [251, 300], "scatter": 251, "overwritten": [251, 262, 265, 267], "hist2d": 251, "imaginari": [252, 262, 268], "interleav": [252, 262], "base": [252, 261, 262, 268, 303], "intersymbol": 252, "interfer": 252, "isi": 252, "cascad": 252, "why": 252, "often": [252, 295], "practic": 252, "n_time": [253, 297], "n_freq": 253, "x_axi": [253, 254, 256, 258, 259, 260, 265, 296, 297, 298, 299, 303], "n_t": 253, "n_f": 253, "logarithm": [253, 254, 256, 258, 259, 260, 296, 297], "h_srrc": [253, 254, 255, 256, 259, 260, 266, 270, 300], "auto": [254, 256, 259, 260, 303], "select": [254, 256, 259, 260, 292], "x_label": 257, "overlap": [258, 265, 298], "detrend": [258, 265], "median": 258, "segment": [258, 265], "256": [258, 265, 298], "trend": [258, 265], "unwrap": [260, 299], "stride": 262, "colorbar": 262, "1d": 262, "determin": 262, "row": 262, "collect": 262, "linecollect": 262, "linewidth": [262, 287], "solid": [262, 268], "cmap": 262, "rainbow": 262, "loglog": 263, "pcolormesh": 265, "vmin": 265, "10th": 265, "vmax": 265, "100th": 265, "shade": 265, "gouraud": 265, "represent": [267, 303], "markers": 267, "diff": [268, 298], "mutual": 268, "exclus": 268, "dash": 268, "share": 268, "10e3": 268, "uniformli": 268, "style": 269, "revert": 269, "rcdefault": 269, "_rc_param": 269, "rc_param": 269, "autolayout": 269, "max_open_warn": 269, "titleweight": 269, "bold": 269, "arrang": 271, "column": 271, "notion": 271, "demonstr": 271, "matric": 271, "000005": 272, "000000025": 272, "005": [273, 299], "000025": 273, "excess": [274, 277, 301], "narrow": [274, 277], "expens": [274, 277], "higher": [274, 277, 301], "h_0p5": [274, 277], "h_0p9": [274, 277], "affect": [274, 277], "longer": [274, 277, 281], "h_4": [274, 277], "h_rect": [275, 301], "sample_rate_offset": [278, 289, 303], "250": [281, 282, 299], "ksp": [281, 282], "conjug": [281, 282, 297], "500": [281, 282, 299], "now": [281, 282, 295, 303], "150": [281, 282], "asymmetr": 282, "copi": 284, "mani": [285, 292], "walshcod": 285, "299792458": 286, "zadoff_chu": [287, 288, 303], "zadoff": [287, 288, 302, 303], "chu": [287, 288, 302, 303], "prime": 287, "gcd": 287, "ne": 287, "cyclic": 287, "x_u": 287, "c_": 287, "2q": 287, "mod": 287, "e2": 287, "93chu_sequ": 287, "x_3": 287, "139": 287, "tile": 287, "x_5": 287, "x5": 287, "xcorr": 287, "sphinx": 291, "immateri": 291, "theme": 291, "depend": [291, 292, 294], "store": [291, 293, 294], "txt": [291, 292, 293, 294], "some": 291, "below": [291, 296, 297], "version": [291, 293, 302], "aren": 291, "resolut": 291, "minut": 291, "ci": 291, "myst": 291, "parser": 291, "updat": [291, 303], "git": [291, 293], "math": 291, "dollar": 291, "ipykernel": 291, "26": 291, "nb": 291, "pickleshar": 291, "switch": 291, "pip": [291, 292, 293, 294, 302], "python3": [291, 292, 293, 294, 302], "built": 291, "command": [291, 292], "dirhtml": 291, "locat": [291, 294], "home": 291, "page": 291, "directori": [291, 293], "get": 291, "necessari": 291, "webpag": 291, "webserv": 291, "easili": [291, 292, 294, 296, 297], "python": [291, 302], "server": 291, "8080": 291, "access": 291, "web": 291, "browser": 291, "localhost": 291, "librari": [292, 293, 294, 295, 300, 302, 304], "ruff": [292, 293, 303], "lint": [292, 293], "your": [292, 294], "develop": [292, 293, 294], "dev": [292, 294], "pyproject": [292, 294], "toml": [292, 293, 294], "tool": [292, 294, 302], "src": 292, "extend": 292, "ipynb": 292, "exclud": 292, "build": [292, 302], "_version": 292, "py": [292, 294], "120": 292, "doc": 292, "pycodestyl": 292, "pyflak": 292, "pyupgrad": 292, "flake8": 292, "bugbear": 292, "simplifi": 292, "isort": 292, "pylint": [292, 303], "npy": 292, "rule": 292, "ruf": 292, "ignor": 292, "e501": 292, "too": 292, "long": 292, "e713": 292, "e714": 292, "plr2004": 292, "magic": 292, "plr0913": 292, "plr5501": 292, "collaps": 292, "els": [292, 298], "plr0912": 292, "plr0915": 292, "statement": 292, "__init__": 292, "f401": 292, "f403": 292, "manual": [292, 294], "check": 292, "hook": 292, "config": [292, 295, 296, 297, 298, 299, 300, 301], "yaml": 292, "repo": [292, 293], "github": [292, 302], "rev": 292, "v2": 292, "id": 292, "fixer": 292, "trail": 292, "whitespac": 292, "astral": 292, "sh": 292, "v0": 292, "enabl": 292, "disabl": 292, "uninstal": 292, "extens": 292, "vscode": [292, 294], "json": [292, 294], "you": [292, 293, 294, 302], "edit": [292, 297], "latest": [293, 302], "releas": [293, 303], "main": [293, 301], "mhostett": [293, 303], "Or": [293, 294], "pre": 293, "To": 293, "activ": 293, "benefici": 293, "fashion": 293, "allow": [293, 294], "chang": [293, 304], "immedi": 293, "seen": 293, "upon": 293, "next": 293, "clone": 293, "wherev": 293, "flag": 293, "packag": [293, 302], "commit": 293, "pytest": [293, 294], "cov": 293, "xdist": 293, "benchmark": 293, "ini_opt": 294, "minvers": 294, "addopt": 294, "showloc": 294, "testpath": 294, "execut": 294, "test_psk": 294, "instruct": 294, "invok": 294, "infrastructur": 294, "debug": 294, "inlinebackend": [295, 296, 297, 298, 299, 300, 301], "print_figure_kwarg": [295, 296, 297, 298, 299, 300, 301], "facecolor": [295, 296, 297, 298, 299, 300, 301], "inlin": [295, 296, 297, 298, 299, 300, 301], "widget": [295, 296, 297, 298, 299, 300, 301], "tx": 295, "fillstyl": 295, "show": [295, 296, 297, 298, 299, 300, 301], "accomplish": [295, 300], "def": [295, 298, 300], "resample_sign": 295, "new_sample_r": 295, "ty": 295, "gca": [295, 300], "set_prop_cycl": [295, 300], "four": 295, "fourth": 295, "do": 295, "315": 295, "00095883": 296, "00175012": 296, "00423921": 296, "0058825": 296, "006151": 296, "00474595": 296, "0017044": 296, "00254816": 296, "00721645": 296, "0112324": 296, "01342358": 296, "01273202": 296, "00845058": 296, "0004368": 296, "01073669": 296, "02372977": 296, "03650247": 296, "04650654": 296, "05098525": 296, "04734644": 296, "03355896": 296, "00851486": 296, "02769991": 296, "07367348": 296, "12670446": 296, "18301321": 296, "23810898": 296, "28727058": 296, "32607991": 296, "35093841": 296, "35949665": 296, "conveni": [296, 297], "evalu": [296, 297], "29": 296, "31": 296, "here": [296, 297], "478207252018059": 297, "6400000000000001": 297, "7391036260090295": 297, "3061467458920719j": 297, "47820725": 297, "78207252e": 297, "58172329e": 297, "10862468e": 297, "86109590e": 297, "21565653e": 297, "01140214e": 297, "57286400e": 297, "67772160e": 297, "47338728e": 297, "10422993e": 297, "89312837e": 297, "12240078e": 297, "03953322e": 297, "69685122e": 297, "63882791e": 297, "81474977e": 297, "47193366e": 297, "85259041e": 297, "15647504e": 297, "23851924e": 297, "42176895e": 297, "84684395e": 297, "42721858e": 297, "72236648e": 297, "14721649e": 297, "10813095e": 297, "94024315e": 297, "78877688e": 297, "74077567e": 297, "87820725": 297, "53637958": 297, "94724205": 297, "13335164": 297, "1455082": 297, "04436799": 297, "88708159": 297, "71930943": 297, "5719707": 297, "46154771": 297, "39261642": 297, "36139242": 297, "35935288": 297, "3763214": 297, "40270968": 297, "43085717": 297, "45557651": 297, "47410241": 297, "48566716": 297, "49090568": 297, "49124786": 297, "48840102": 297, "4839738": 297, "47925143": 297, "47510421": 297, "47199608": 297, "47005584": 297, "46917696": 297, "46911955": 297, "denomin": 297, "73910363": 297, "30614675j": 297, "plane": 297, "092337035029908": 297, "71104892744724": 297, "684365018955985": 297, "37868538208862": 297, "1263714068241546": 297, "9993519409971622": 297, "1909320767063554": 297, "016796159999999997": 297, "46380627201816593": 297, "3806359704987265j": 297, "4988817673791569": 297, "3333421398098428j": 297, "5543277195052645": 297, "22961005941814036j": 297, "5291527586123693": 297, "28283804209787544j": 297, "lyon": 297, "understand": 297, "3rd": 297, "insid": 297, "unstabl": 297, "n_symbol": 298, "pb": 298, "x_bb_rect": 298, "papr_bb_rect": 298, "x_pb_rect": 298, "papr_pb_rect": 298, "x_bb_0p1": 298, "papr_bb_0p1": 298, "x_pb_0p1": 298, "papr_pb_0p1": 298, "x_bb_0p5": 298, "papr_bb_0p5": 298, "x_pb_0p5": 298, "papr_pb_0p5": 298, "x_bb_0p9": 298, "papr_bb_0p9": 298, "x_pb_0p9": 298, "papr_pb_0p9": 298, "2f": 298, "rf": [298, 299], "512": 298, "sweep_alpha": 298, "bb_papr": 298, "pb_papr": 298, "bpsk_bb_papr": 298, "bpsk_pb_papr": 298, "qpsk_bb_papr": 298, "qpsk_pb_papr": 298, "psk8_bb_papr": 298, "psk8_pb_papr": 298, "psk16_bb_papr": 298, "psk16_pb_papr": 298, "configur": 299, "loop_filt": 299, "0x7f28f4d4ab90": 299, "theta_0": 299, "phase_error": 299, "freq_estim": 299, "suptitl": [299, 300], "make": [299, 304], "a_hat": [299, 300], "rad2deg": 299, "avail": [299, 300, 302], "b_nt": 299, "0005": 299, "0125": 299, "015": 299, "0175": 299, "t_lock": 299, "analyze_psk": 300, "100_000": 300, "n0": 300, "tx_mf": 300, "1e6": 300, "bpsk_ber": 300, "bpsk_ser": 300, "qpsk_ber": 300, "qpsk_ser": 300, "psk8_ber": 300, "psk8_ser": 300, "psk16_ber": 300, "psk16_ser": 300, "1e0": 300, "psk8_bin": 300, "psk8_grai": 300, "wors": 300, "rc_0p1": 301, "rc_0p5": 301, "rc_0p9": 301, "pm": 301, "nearli": 301, "small": 301, "lobe": 301, "much": 301, "freqz": 301, "worn": 301, "h_rc_0p1": 301, "h_rc_0p5": 301, "h_rc_0p9": 301, "p_rect": 301, "cumsum": 301, "p_rc_0p1": 301, "p_rc_0p5": 301, "p_rc_0p9": 301, "within": 301, "srrc_0p1": 301, "srrc_0p5": 301, "srrc_0p9": 301, "therefor": 301, "significantli": 301, "due": 301, "being": 301, "h_srrc_0p1": 301, "h_srrc_0p5": 301, "h_srrc_0p9": 301, "p_srrc_0p1": 301, "p_srrc_0p5": 301, "p_srrc_0p9": 301, "gauss_0p1": 301, "gauss_0p2": 301, "gauss_0p3": 301, "softwar": 302, "radio": 302, "goal": 302, "analyz": 302, "reli": 302, "interoper": 302, "numba": 302, "acceler": 302, "computation": 302, "intens": 302, "addition": 302, "aim": 302, "replic": 302, "relev": 302, "toolbox": 302, "progress": 302, "someth": 302, "pleas": 302, "open": 302, "issu": 302, "pypi": 302, "api": [302, 304], "convers": [302, 303], "synchron": 302, "budget": [302, 303], "manipul": 302, "decemb": 303, "2023": 303, "rework": 303, "frequency_response_log": 303, "explicit": 303, "improv": 303, "jupyt": 303, "notebook": 303, "matt": 303, "hostett": 303, "novemb": 303, "abil": 303, "renam": 303, "multirate_tap": 303, "polyphase_matrix": 303, "model": 303, "replac": 303, "black": 303, "septemb": 303, "sensibl": 303, "august": 303, "27": 303, "without": 303, "superflu": 303, "translat": 303, "fix": [303, 304], "juli": 303, "firinterpol": 303, "impair": 303, "fpsl": 303, "helper": 303, "synthes": 303, "semant": 304, "major": 304, "minor": 304, "patch": 304, "introduc": 304, "featur": 304, "compat": 304, "bug": 304, "There": 304, "guarante": 304, "them": 304}, "objects": {"": [[3, 0, 0, 1, "sdr", ""]], "sdr": [[9, 1, 1, "", "AGC", "Implements an automatic gain controller (AGC)."], [18, 1, 1, "", "Channelizer", "Implements a polyphase channelizer FIR filter."], [24, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [41, 1, 1, "", "Decimator", "Implements a polyphase decimating FIR filter."], [48, 1, 1, "", "Differentiator", "Implements a differentiator FIR filter."], [50, 1, 1, "", "EnergyDetector", "Implements an energy detector."], [55, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [62, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [78, 1, 1, "", "FarrowResampler", "Implements a piecewise polynomial Farrow arbitrary resampler."], [88, 1, 1, "", "FractionalDelay", "Implements a fractional delay FIR filter."], [90, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [106, 1, 1, "", "Integrator", "Implements an integrator IIR filter."], [108, 1, 1, "", "Interpolator", "Implements a polyphase interpolating FIR filter."], [114, 1, 1, "", "LeakyIntegrator", "Implements a leaky integrator IIR filter."], [116, 1, 1, "", "LinearModulation", "Implements linear phase/amplitude modulation with arbitrary symbol mapping."], [132, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [141, 1, 1, "", "MLPED", "Implements a maximum-likelihood phase error detector (ML-PED)."], [149, 1, 1, "", "MSK", "Implements minimum-shift keying (MSK) modulation and demodulation."], [151, 1, 1, "", "MovingAverager", "Implements a moving average FIR filter."], [153, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [161, 1, 1, "", "OQPSK", "Implements offset quadrature phase-shift keying (OQPSK) modulation and demodulation."], [163, 1, 1, "", "PED", "Implements a heuristic phase error detector (PED)."], [169, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [175, 1, 1, "", "PiMPSK", "Implements $pi/M$ phase-shift keying ($pi/M$ PSK) modulation and demodulation."], [177, 1, 1, "", "PolyphaseFIR", "Implements a generic polyphase FIR filter."], [189, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [190, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [191, 1, 1, "", "ReplicaCorrelator", "Implements an clairvoyant replica-correlator detector."], [196, 1, 1, "", "Resampler", "Implements a polyphase rational resampling FIR filter."], [204, 5, 1, "", "albersheim", "Estimates the minimum required single-sample SNR, given $N_{NC}$ non-coherent combinations, to achieve a probability of detection $P_D$ and probability of false alarm $P_{FA}$. This function implements Albersheim's equation."], [205, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [206, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [207, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [208, 5, 1, "", "barker", "Returns the Barker code/sequence of length $N$."], [209, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [210, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [211, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [212, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [213, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [214, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [215, 5, 1, "", "db", "Converts from linear units to decibels."], [216, 5, 1, "", "design_bandpass_fir", "Designs a bandpass FIR filter impulse response $h[n]$ using the window method."], [217, 5, 1, "", "design_bandstop_fir", "Designs a bandstop FIR filter impulse response $h[n]$ using the window method."], [218, 5, 1, "", "design_frac_delay_fir", "Designs a fractional delay FIR filter impulse response $h[n]$ using the Kaiser window method."], [219, 5, 1, "", "design_highpass_fir", "Designs a highpass FIR filter impulse response $h[n]$ using the window method."], [220, 5, 1, "", "design_lowpass_fir", "Designs a lowpass FIR filter impulse response $h[n]$ using the window method."], [221, 5, 1, "", "design_multirate_fir", "Designs a multirate FIR filter impulse response $h[n]$ using the Kaiser window method."], [222, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [223, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [224, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [225, 5, 1, "", "downsample", "Downsamples the time-domain signal $x[n]$ by the factor $r$."], [226, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [227, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [228, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [229, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [230, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [231, 5, 1, "", "euclidean", "Measures the Euclidean distance between two signals $x[n]$ and $y[n]$."], [232, 5, 1, "", "evm", "Calculates the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [233, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [234, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [235, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [236, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [237, 5, 1, "", "hadamard", "Returns the Hadamard code/sequence of length $N$."], [238, 5, 1, "", "half_sine", "Returns a half-sine pulse shape."], [239, 5, 1, "", "hamming", "Measures the Hamming distance between two signals $x[n]$ and $y[n]$."], [240, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [241, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [242, 5, 1, "", "linear", "Converts from decibels to linear units."], [243, 5, 1, "", "mix", "Mixes the time-domain signal $x[n]$ with a complex exponential or real sinusoid."], [244, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [245, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [246, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [247, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [248, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [249, 5, 1, "", "percent", "Converts from a ratio to a percentage."], [271, 5, 1, "", "polyphase_decompose", "Decomposes the prototype filter taps $h[n]$ into the polyphase matrix $h_i[n]$ with $B$ phases."], [272, 5, 1, "", "ppb", "Converts from a ratio to parts per billion (ppb)."], [273, 5, 1, "", "ppm", "Converts from a ratio to parts per million (ppm)."], [274, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [275, 5, 1, "", "rectangular", "Returns a rectangular pulse shape."], [276, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [277, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [278, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [279, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [280, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [281, 5, 1, "", "to_complex_bb", "Converts the real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$ to a complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c} = f_{s,r}/2$."], [282, 5, 1, "", "to_real_pb", "Converts the complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$ to a real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r} = 2f_{s,c}$."], [283, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [284, 5, 1, "", "upsample", "Upsamples the time-domain signal $x[n]$ by the factor $r$."], [285, 5, 1, "", "walsh", "Returns the Walsh code/sequence of length $N$."], [286, 5, 1, "", "wavelength", "Calculates the wavelength $lambda$ of an electromagnetic wave with frequency $f$."], [287, 5, 1, "", "zadoff_chu", "Returns the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.AGC": [[10, 2, 1, "", "__call__", "Performs automatic gain control on the input signal."], [11, 2, 1, "", "__init__", "Creates an automatic gain controller (AGC)."], [12, 4, 1, "", "attack", "(Settable) The attack rate $alpha$."], [13, 4, 1, "", "decay", "(Settable) The decay rate $beta$."], [14, 4, 1, "", "gain", "The current linear gain."], [15, 4, 1, "", "reference", "(Settable) The desired output magnitude."], [16, 2, 1, "", "reset", "Resets the AGC gain. Only useful when using streaming mode."], [17, 4, 1, "", "streaming", "Indicates whether the AGC is in streaming mode."]], "sdr.AGC.__call__": [[10, 3, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.AGC.__init__": [[11, 3, 2, "p-attack", "attack", "The attack rate $alpha$. The attack rate is meant to attenuate strong signals. After $n_0 approx 1 / alpha$ samples the error will reduce to $1 / e$ of its original value."], [11, 3, 2, "p-decay", "decay", "The decay rate $beta$. The decay rate is meant to amplify weak signals. After $n_0 approx 1 / beta$ samples the error will reduce to $1 / e$ of its original value."], [11, 3, 2, "p-reference", "reference", "The desired output magnitude."], [11, 3, 2, "p-streaming", "streaming", "Indicates whether the AGC operates in streaming mode. In streaming mode, the gain is preserved between calls to __call__()."]], "sdr.AGC.reset": [[16, 3, 2, "p-gain", "gain", "The initial linear gain of the AGC."]], "sdr.Channelizer": [[19, 2, 1, "", "__call__", "Channelizes the input signal $x[n]$ with the polyphase FIR filter."], [20, 2, 1, "", "__init__", "Creates a polyphase FIR channelizing filter."], [21, 4, 1, "", "channels", "The number of channels $C$."], [22, 4, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [23, 4, 1, "", "method", "The method used to design the multirate filter."]], "sdr.Channelizer.__call__": [[19, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [19, 3, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Channelizer.__init__": [[20, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB. Only used when taps=\"kaiser\"."], [20, 3, 2, "p-channels", "channels", "The number of channels $C$."], [20, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even. Only used when taps=\"kaiser\"."], [20, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [20, 3, 2, "p-taps", "taps", "The prototype filter design specification."]], "sdr.ClosedLoopPLL": [[25, 4, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [26, 4, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [27, 4, 1, "", "K0", "The NCO gain $K_0$."], [28, 4, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [29, 4, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [30, 4, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [31, 2, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [32, 2, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [33, 4, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [34, 2, 1, "", "lock_time", "Returns the lock time of the PLL."], [35, 4, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [36, 4, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [37, 2, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [38, 2, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [39, 4, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [40, 4, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[31, 3, 2, "p-K0", "K0", "The NCO gain $K_0$."], [31, 3, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [31, 3, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [31, 3, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [31, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[32, 3, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[34, 3, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[37, 3, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.Decimator": [[42, 2, 1, "", "__call__", "Filters and decimates the input signal $x[n]$ with the polyphase FIR filter."], [43, 2, 1, "", "__init__", "Creates a polyphase FIR decimating filter."], [44, 4, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [45, 4, 1, "", "method", "The method used to design the multirate filter."], [46, 4, 1, "", "rate", "The decimation rate $r$."], [47, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."]], "sdr.Decimator.__call__": [[42, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [42, 3, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Decimator.__init__": [[43, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB. Only used when taps=\"kaiser\"."], [43, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even. Only used when taps=\"kaiser\"."], [43, 3, 2, "p-rate", "rate", "The decimation rate $r$."], [43, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [43, 3, 2, "p-taps", "taps", "The prototype filter design specification."]], "sdr.Differentiator": [[49, 2, 1, "", "__init__", "Creates a differentiator FIR filter."]], "sdr.Differentiator.__init__": [[49, 3, 2, "p-order", "order", "The order of the FIR differentiator $N$. The filter length is $N + 1$. Increasing the filter order increases the bandwidth of the differentiator."], [49, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [49, 3, 2, "p-window", "window", "The SciPy window definition. See scipy.signal.windows.get_window() for details. If None, no window is applied."]], "sdr.EnergyDetector": [[51, 2, 1, "", "p_d", "Computes the probability of detection $P_D$."], [52, 2, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [53, 2, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [54, 2, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.EnergyDetector.p_d": [[51, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [51, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [51, 3, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.p_fa": [[52, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [52, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [52, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [52, 3, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.EnergyDetector.roc": [[53, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [53, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [53, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."], [53, 3, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.threshold": [[54, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [54, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [54, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [54, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.ErrorRate": [[56, 2, 1, "", "__init__", "Creates a new error rate tabulation object."], [57, 2, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [58, 2, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [59, 2, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [60, 2, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [61, 2, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[57, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [57, 3, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [57, 3, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[58, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[59, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[61, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[63, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the FIR filter."], [64, 2, 1, "", "__init__", "Creates an FIR filter with feedforward coefficients $h_i$."], [65, 2, 1, "", "__len__", "Returns the filter length $N + 1$."], [66, 4, 1, "", "delay", "The delay of the FIR filter $d = lfloor frac{N + 1}{2} rfloor$ in samples."], [67, 2, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [68, 2, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the FIR filter."], [69, 2, 1, "", "group_delay", "Returns the group delay $tau_g(omega)$ of the FIR filter."], [70, 2, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [71, 4, 1, "", "order", "The order of the FIR filter $N$."], [72, 2, 1, "", "phase_delay", "Returns the phase delay $tau_{phi}(omega)$ of the FIR filter."], [73, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [74, 4, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [75, 2, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [76, 4, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [77, 4, 1, "", "taps", "The feedforward taps $h_i$ for $i = 0,...,N$."]], "sdr.FIR.__call__": [[63, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [63, 3, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.FIR.__init__": [[64, 3, 2, "p-h", "h", "The feedforward coefficients $h_i$ for $i = 0,...N$."], [64, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FIR.frequency_response": [[68, 3, 2, "p-decades", "decades", "Only used if freqs is an integer."], [68, 3, 2, "p-freqs", "freqs", "The frequency specification."], [68, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [68, 3, 2, "p-whole", "whole", "Only used if freqs is an integer."]], "sdr.FIR.group_delay": [[69, 3, 2, "p-N", "N", "The number of samples in the group delay."], [69, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[70, 3, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.phase_delay": [[72, 3, 2, "p-N", "N", "The number of samples in the phase delay."], [72, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.step_response": [[75, 3, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FarrowResampler": [[79, 2, 1, "", "__call__", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [80, 2, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [81, 4, 1, "", "delay", "The delay of the FIR filter $d = lfloor frac{N + 1}{2} rfloor$ in samples."], [82, 2, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [83, 4, 1, "", "order", "The order of the piecewise polynomial."], [84, 2, 1, "", "reset", "Resets the filter state and fractional sample index."], [85, 4, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [86, 4, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [87, 4, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__call__": [[79, 3, 2, "p-rate", "rate", "The resampling rate $r$."], [79, 3, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.__init__": [[80, 3, 2, "p-order", "order", "The order of the piecewise polynomial. Must be between 1 and 4."], [80, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FarrowResampler.flush": [[82, 3, 2, "p-rate", "rate", "The resampling rate $r$."]], "sdr.FarrowResampler.reset": [[84, 3, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.FractionalDelay": [[89, 2, 1, "", "__init__", "Creates a fractional delay FIR filter."]], "sdr.FractionalDelay.__init__": [[89, 3, 2, "p-delay", "delay", "The fractional delay $0 le Delta n le 1$."], [89, 3, 2, "p-length", "length", "The filter length $L$. Filters with even length have best performance. Filters with odd length are equivalent to an even-length filter with an appended zero."]], "sdr.IIR": [[91, 2, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [92, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the IIR filter."], [93, 2, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [94, 4, 1, "", "a_taps", "The feedback taps $a_j$ for $j = 0,...,N$."], [95, 4, 1, "", "b_taps", "The feedforward taps $b_i$ for $i = 0,...,M$."], [96, 2, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the IIR filter."], [97, 4, 1, "", "gain", "The gain of the IIR filter."], [98, 2, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [99, 4, 1, "", "order", "The order of the IIR filter $N$."], [100, 4, 1, "", "poles", "The poles of the IIR filter."], [101, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [102, 4, 1, "", "state", "The filter state."], [103, 2, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [104, 4, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [105, 4, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[91, 3, 2, "p-gain", "gain", "The gain of the transfer function."], [91, 3, 2, "p-poles", "poles", "The poles of the transfer function."], [91, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."], [91, 3, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__call__": [[92, 3, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.IIR.__init__": [[93, 3, 2, "p-a", "a", "The feedback coefficients $a_j$ for $j = 0,...,N$."], [93, 3, 2, "p-b", "b", "The feedforward coefficients $b_i$ for $i = 0,...,M$."], [93, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.IIR.frequency_response": [[96, 3, 2, "p-decades", "decades", "Only used if freqs is an integer."], [96, 3, 2, "p-freqs", "freqs", "The frequency specification."], [96, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [96, 3, 2, "p-whole", "whole", "Only used if freqs is an integer."]], "sdr.IIR.impulse_response": [[98, 3, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[103, 3, 2, "p-N", "N", "The number of samples to return."]], "sdr.Integrator": [[107, 2, 1, "", "__init__", "Creates an integrating IIR filter."]], "sdr.Integrator.__init__": [[107, 3, 2, "p-method", "method", "The integration method."], [107, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.Interpolator": [[109, 2, 1, "", "__call__", "Interpolates and filters the input signal $x[n]$ with the polyphase FIR filter."], [110, 2, 1, "", "__init__", "Creates a polyphase FIR interpolating filter."], [111, 4, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [112, 4, 1, "", "method", "The method used to design the multirate filter."], [113, 4, 1, "", "rate", "The interpolation rate $r$."]], "sdr.Interpolator.__call__": [[109, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [109, 3, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Interpolator.__init__": [[110, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB. Only used when taps=\"kaiser\"."], [110, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even. Only used when taps=\"kaiser\"."], [110, 3, 2, "p-rate", "rate", "The interpolation rate $r$."], [110, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [110, 3, 2, "p-taps", "taps", "The prototype filter design specification."]], "sdr.LeakyIntegrator": [[115, 2, 1, "", "__init__", "Creates a leaky integrator IIR filter."]], "sdr.LeakyIntegrator.__init__": [[115, 3, 2, "p-alpha", "alpha", "The leaky factor $alpha$. An FIR moving average with length $L$ is approximated when $alpha = 1 - 2/L$."], [115, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.LinearModulation": [[117, 2, 1, "", "__init__", "Creates a new linear phase/amplitude modulation object."], [118, 2, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [119, 4, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [120, 2, 1, "", "decide_symbols", "Converts the received complex symbols $tilde{a}[k]$ into decimal symbol decisions $hat{s}[k]$ and complex symbol decisions $hat{a}[k]$ using maximum-likelihood estimation (MLE)."], [121, 2, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples $tilde{x}[n]$ into decimal symbol decisions $hat{s}[k]$ using matched filtering and maximum-likelihood estimation."], [122, 2, 1, "", "map_symbols", "Converts the decimal symbols $s[k]$ to complex symbols $a[k]$."], [123, 2, 1, "", "modulate", "Modulates the decimal symbols $s[k]$ into pulse-shaped complex samples $x[n]$."], [124, 4, 1, "", "order", "The modulation order $M = 2^k$."], [125, 4, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [126, 4, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [127, 4, 1, "", "rx_filter", "The receive decimating matched filter. The filter coefficients are matched to the pulse shape $h[-n]^*$."], [128, 2, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [129, 4, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [130, 4, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."], [131, 4, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter. The filter coefficients are the pulse shape $h[n]$."]], "sdr.LinearModulation.__init__": [[117, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [117, 3, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees to apply to symbol_map."], [117, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [117, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [117, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [117, 3, 2, "p-symbol_map", "symbol_map", "The symbol mapping ${0, dots, M-1} mapsto mathbb{C}$. An $M$-length array whose indices are decimal symbols $s[k]$ and whose values are complex symbols $a[k]$, where $M$ is the modulation order."]], "sdr.LinearModulation.ber": [[118, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.LinearModulation.decide_symbols": [[120, 3, 2, "p-a_tilde", "a_tilde", "The received complex symbols $tilde{a}[k]$."]], "sdr.LinearModulation.demodulate": [[121, 3, 2, "p-x_tilde", "x_tilde", "The received pulse-shaped complex samples $tilde{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.LinearModulation.map_symbols": [[122, 3, 2, "p-s", "s", "The decimal symbols $s[k]$ to map, $0$ to $M-1$."]], "sdr.LinearModulation.modulate": [[123, 3, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.LinearModulation.ser": [[128, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.LoopFilter": [[133, 2, 1, "", "__call__", "Filters the input signal $x[n]$."], [134, 2, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [135, 4, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [136, 4, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [137, 4, 1, "", "integral_gain", "The integral gain $K_2$ of the loop filter."], [138, 4, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [139, 4, 1, "", "proportional_gain", "The proportional gain $K_1$ of the loop filter."], [140, 2, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__call__": [[133, 3, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.LoopFilter.__init__": [[134, 3, 2, "p-K0", "K0", "The NCO gain $K_0$."], [134, 3, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [134, 3, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [134, 3, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.MLPED": [[142, 4, 1, "", "A_received", "(Settable) The received signal RMS amplitude $A_{rx,rms}$."], [143, 4, 1, "", "A_reference", "(Settable) The reference signal RMS amplitude $A_{ref,rms}$."], [144, 2, 1, "", "__call__", "Detects the phase error."], [145, 2, 1, "", "__init__", "Initializes the ML-PED."], [146, 2, 1, "", "data_aided_error", "Simulates the average phase error of the data-aided PED using the specified modulation scheme."], [147, 2, 1, "", "decision_directed_error", "Simulates the average phase error of the decision-directed PED using the specified modulation scheme."], [148, 4, 1, "", "gain", "The gain of the phase error detector $K_p$."]], "sdr.MLPED.__call__": [[144, 3, 2, "p-received", "received", "The received complex symbols $tilde{a}[k]$."], [144, 3, 2, "p-reference", "reference", "The reference complex symbols, either the known transmitted complex symbols $a[k]$ or the complex symbols decisions $hat{a}[k]$."]], "sdr.MLPED.__init__": [[145, 3, 2, "p-A_received", "A_received", "The received signal RMS amplitude $A_{rx,rms}$."], [145, 3, 2, "p-A_reference", "A_reference", "The reference signal RMS amplitude $A_{ref,rms}$."]], "sdr.MLPED.data_aided_error": [[146, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [146, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.MLPED.decision_directed_error": [[147, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [147, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.MSK": [[150, 2, 1, "", "__init__", "Creates a new MSK object."]], "sdr.MSK.__init__": [[150, 3, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [150, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [150, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.MovingAverager": [[152, 2, 1, "", "__init__", "Creates a moving average FIR filter."]], "sdr.MovingAverager.__init__": [[152, 3, 2, "p-length", "length", "The length of the moving average filter $L$."], [152, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.NCO": [[154, 2, 1, "", "__call__", "Steps the NCO with variable frequency and/or phase signals."], [155, 2, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [156, 4, 1, "", "gain", "(Settable) The NCO gain $K_0$."], [157, 4, 1, "", "increment", "(Settable) The constant phase accumulation $omega$ of the NCO in radians/sample."], [158, 4, 1, "", "offset", "(Settable) The absolute phase offset $theta$ of the NCO in radians."], [159, 2, 1, "", "reset", "Resets the NCO."], [160, 2, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__call__": [[154, 3, 2, "p-freq", "freq", "The variable frequency signal $f[n]$ in radians/sample. This input signal varies the per-sample phase increment of the NCO. If None, the signal is all zeros."], [154, 3, 2, "p-output", "output", "The format of the output signal $y[n]$. Options are the accumulated phase, sine, cosine, or complex exponential."], [154, 3, 2, "p-phase", "phase", "The variable phase signal $p[n]$ in radians. This input signal varies the per-sample phase offset of the NCO. If None, the signal is all zeros."]], "sdr.NCO.__init__": [[155, 3, 2, "p-gain", "gain", "The NCO gain $K_0$."], [155, 3, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [155, 3, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.NCO.step": [[160, 3, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.OQPSK": [[162, 2, 1, "", "__init__", "Creates a new OQPSK object."]], "sdr.OQPSK.__init__": [[162, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [162, 3, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [162, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [162, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [162, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [162, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PED": [[164, 2, 1, "", "__call__", "Detects the phase error."], [165, 2, 1, "", "__init__", "Initializes the PED."], [166, 2, 1, "", "data_aided_error", "Simulates the average phase error of the data-aided PED using the specified modulation scheme."], [167, 2, 1, "", "decision_directed_error", "Simulates the average phase error of the decision-directed PED using the specified modulation scheme."], [168, 4, 1, "", "gain", "The gain of the phase error detector $K_p$."]], "sdr.PED.__call__": [[164, 3, 2, "p-received", "received", "The received complex symbols $tilde{a}[k]$."], [164, 3, 2, "p-reference", "reference", "The reference complex symbols, either the known transmitted complex symbols $a[k]$ or the complex symbols decisions $hat{a}[k]$."]], "sdr.PED.data_aided_error": [[166, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [166, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.PED.decision_directed_error": [[167, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [167, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.PSK": [[170, 2, 1, "", "__init__", "Creates a new PSK object."], [171, 2, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [172, 4, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [173, 2, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [174, 4, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[170, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [170, 3, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [170, 3, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [170, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [170, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [170, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [170, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[171, 3, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [171, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.ser": [[173, 3, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [173, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.PiMPSK": [[176, 2, 1, "", "__init__", "Creates a new $pi/M$ PSK object."]], "sdr.PiMPSK.__init__": [[176, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [176, 3, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [176, 3, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [176, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [176, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [176, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [176, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PolyphaseFIR": [[178, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the polyphase FIR filter."], [179, 2, 1, "", "__init__", "Creates a polyphase FIR filter."], [180, 4, 1, "", "branches", "The number of polyphase branches $B$."], [181, 4, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [182, 4, 1, "", "input", "The input connection method."], [183, 4, 1, "", "order", "The order $N = (M + 1)B - 1$ of the FIR prototype filter $h[n]$."], [184, 4, 1, "", "output", "The output connection method."], [185, 4, 1, "", "polyphase_order", "The order $M = (N + 1)/B - 1$ of each FIR polyphase filter $h_i[n]$."], [186, 4, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_i[n]$."], [187, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [188, 4, 1, "", "taps", "The prototype feedforward taps $h[n]$."]], "sdr.PolyphaseFIR.__call__": [[178, 3, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.PolyphaseFIR.__init__": [[179, 3, 2, "p-branches", "branches", "The number of polyphase branches $B$."], [179, 3, 2, "p-input", "input", "The input connection method."], [179, 3, 2, "p-output", "output", "The output connection method."], [179, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [179, 3, 2, "p-taps", "taps", "The prototype filter feedforward coefficients $h[n]$."]], "sdr.Q": [[189, 3, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[190, 3, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.ReplicaCorrelator": [[192, 2, 1, "", "p_d", "Computes the probability of detection $P_D$."], [193, 2, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [194, 2, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [195, 2, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.ReplicaCorrelator.p_d": [[192, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [192, 3, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [192, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."]], "sdr.ReplicaCorrelator.p_fa": [[193, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [193, 3, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [193, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [193, 3, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.ReplicaCorrelator.roc": [[194, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [194, 3, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [194, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."]], "sdr.ReplicaCorrelator.threshold": [[195, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [195, 3, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [195, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [195, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.Resampler": [[197, 2, 1, "", "__call__", "Resamples and filters the input signal $x[n]$ with the polyphase FIR filter."], [198, 2, 1, "", "__init__", "Creates a polyphase FIR rational resampling filter."], [199, 4, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [200, 4, 1, "", "down", "The decimation rate $Q$."], [201, 4, 1, "", "method", "The method used to design the multirate filter."], [202, 4, 1, "", "rate", "The resampling rate $P/Q$."], [203, 4, 1, "", "up", "The interpolation rate $P$."]], "sdr.Resampler.__call__": [[197, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [197, 3, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Resampler.__init__": [[198, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB. Only used when taps=\"kaiser\"."], [198, 3, 2, "p-down", "down", "The decimation rate $Q$."], [198, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even. Only used when taps=\"kaiser\"."], [198, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [198, 3, 2, "p-taps", "taps", "The prototype filter design specification."], [198, 3, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.albersheim": [[204, 3, 2, "p-N_nc", "N_nc", "The number of non-coherent combinations $N_{NC} ge 1$."], [204, 3, 2, "p-p_d", "p_d", "The desired probability of detection $P_D$ in $(0, 1)$."], [204, 3, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{FA}$ in $(0, 1)$."]], "sdr.average_power": [[205, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the average power. The default is None, which computes the average power of the entire array."], [205, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [205, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[206, 3, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [206, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [206, 3, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [206, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[207, 3, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [207, 3, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.barker": [[208, 3, 2, "p-length", "length", "The length $N$ of the Barker code/sequence."], [208, 3, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[209, 3, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [209, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [209, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[210, 3, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[211, 3, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[212, 3, 2, "p-p", "p", "The probability $p$ of a bit flip."], [212, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [212, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[213, 3, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[214, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.db": [[215, 3, 2, "p-type", "type", "The type of input value or signal."], [215, 3, 2, "p-x", "x", "The input value or signal."]], "sdr.design_bandpass_fir": [[216, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [216, 3, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [216, 3, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [216, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [216, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_bandstop_fir": [[217, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [217, 3, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [217, 3, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [217, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [217, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_frac_delay_fir": [[218, 3, 2, "p-delay", "delay", "The fractional delay $0 le Delta n le 1$."], [218, 3, 2, "p-length", "length", "The filter length $L$. Filters with even length have best performance. Filters with odd length are equivalent to an even-length filter with an appended zero."]], "sdr.design_highpass_fir": [[219, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [219, 3, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [219, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [219, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_lowpass_fir": [[220, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [220, 3, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [220, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [220, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_multirate_fir": [[221, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB."], [221, 3, 2, "p-down", "down", "The decimation rate $Q$."], [221, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even."], [221, 3, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.diff_decode": [[222, 3, 2, "p-y", "y", "The input encoded data $y[k]$."], [222, 3, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[223, 3, 2, "p-x", "x", "The input uncoded data $x[k]$."], [223, 3, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[224, 3, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [224, 3, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [224, 3, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [224, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [224, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.downsample": [[225, 3, 2, "p-rate", "rate", "The downsampling factor $r$."], [225, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.ebn0_to_esn0": [[226, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [226, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [226, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[227, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [227, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [227, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [227, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[228, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the energy. The default is None, which computes the energy of the entire array."], [228, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [228, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[229, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [229, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [229, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[230, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [230, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.euclidean": [[231, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the distance. The default is None, which computes the distance across the entire array."], [231, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [231, 3, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.evm": [[232, 3, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [232, 3, 2, "p-output", "output", "The output type of the EVM calculation."], [232, 3, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [232, 3, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.frequency_offset": [[233, 3, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [233, 3, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [233, 3, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [233, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [233, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[234, 3, 2, "p-distance", "distance", "The distance $d$ in meters between the transmitter and receiver."], [234, 3, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[235, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [235, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [235, 3, 2, "p-sps", "sps", "The number of samples per symbol."], [235, 3, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[236, 3, 2, "p-n", "n", "The length of the Gray code."]], "sdr.hadamard": [[237, 3, 2, "p-index", "index", "The index $i$ of the Hadamard code."], [237, 3, 2, "p-length", "length", "The length $N$ of the Hadamard code/sequence. Must be a power of 2."], [237, 3, 2, "p-output", "output", "The output format of the Hadamard code/sequence."]], "sdr.half_sine": [[238, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [238, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [238, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.hamming": [[239, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the distance. The default is None, which computes the distance across the entire array."], [239, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [239, 3, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.hexdump": [[240, 3, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [240, 3, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[241, 3, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [241, 3, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [241, 3, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.linear": [[242, 3, 2, "p-type", "type", "The type of output value or signal."], [242, 3, 2, "p-x", "x", "The input value or signal in dB."]], "sdr.mix": [[243, 3, 2, "p-complex", "complex", "Indicates whether to mix by a complex exponential or real sinusoid."], [243, 3, 2, "p-freq", "freq", "The frequency $f$ of the sinusoid in Hz (or 1/samples if sample_rate=1). The frequency must satisfy $-f_s/2 le f le f_s/2$."], [243, 3, 2, "p-phase", "phase", "The phase $phi$ of the sinusoid in degrees."], [243, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal."], [243, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.pack": [[244, 3, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [244, 3, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [244, 3, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[245, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the PAPR. The default is None, which computes the PAPR of the entire array."], [245, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[246, 3, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [246, 3, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [246, 3, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[247, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the peak power. The default is None, which computes the peak power of the entire array."], [247, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [247, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[248, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [248, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.percent": [[249, 3, 2, "p-x", "x", "The input ratio."]], "sdr.plot": [[250, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [251, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [252, 5, 1, "", "eye", "Plots the eye diagram of the baseband modulated signal $x[n]$."], [253, 5, 1, "", "filter", "Plots the magnitude response $|H(omega)|^2$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [254, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [255, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [256, 5, 1, "", "magnitude_response", "Plots the magnitude response $|H(omega)|^2$ of the filter."], [257, 5, 1, "", "p_d", "Plots the probability of detection $P_D$ as a function of received SNR or ENR."], [258, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [259, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [260, 5, 1, "", "phase_response", "Plots the phase response $angle H(omega)$ of the filter."], [261, 5, 1, "", "phase_tree", "Plots the phase tree of a continuous-phase modulated (CPM) signal signal $x[n]$."], [262, 5, 1, "", "raster", "Plots a raster of the time-domain signal $x[n]$."], [263, 5, 1, "", "roc", "Plots the receiver operating characteristic (ROC) curve as a function of $P_{FA}$."], [264, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [265, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [266, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [267, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [268, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [269, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [270, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[250, 3, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [250, 3, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."], [250, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."]], "sdr.plot.constellation": [[251, 3, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [251, 3, 2, "p-kwargs", "kwargs", "If heatmap=False, additional keyword arguments to pass to matplotlib.pyplot.scatter(). The following keyword arguments are set by default. The defaults may be overwritten."], [251, 3, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [251, 3, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.eye": [[252, 3, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [252, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [252, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [252, 3, 2, "p-span", "span", "The number of symbols per raster."], [252, 3, 2, "p-sps", "sps", "The number of samples per symbol."], [252, 3, 2, "p-x", "x", "The baseband modulated signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved."]], "sdr.plot.filter": [[253, 3, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [253, 3, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [253, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [253, 3, 2, "p-filter", "filter", "The filter definition."], [253, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [253, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[254, 3, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [254, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [254, 3, 2, "p-filter", "filter", "The filter definition."], [254, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [254, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [254, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.impulse_response": [[255, 3, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [255, 3, 2, "p-filter", "filter", "The filter definition."], [255, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [255, 3, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. Can be useful for comparing the impulse response of filters with different lengths."]], "sdr.plot.magnitude_response": [[256, 3, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [256, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [256, 3, 2, "p-filter", "filter", "The filter definition."], [256, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [256, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [256, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."], [256, 3, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a linear or logarithmic magnitude response."]], "sdr.plot.p_d": [[257, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [257, 3, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [257, 3, 2, "p-x", "x", "The SNR or ENR in dB."], [257, 3, 2, "p-x_label", "x_label", "The x-axis label to use."]], "sdr.plot.periodogram": [[258, 3, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [258, 3, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [258, 3, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [258, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [258, 3, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [258, 3, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [258, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [258, 3, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [258, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [258, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."], [258, 3, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a linear or logarithmic power spectral density."]], "sdr.plot.phase_delay": [[259, 3, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [259, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [259, 3, 2, "p-filter", "filter", "The filter definition."], [259, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [259, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [259, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.phase_response": [[260, 3, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [260, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [260, 3, 2, "p-filter", "filter", "The filter definition."], [260, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [260, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [260, 3, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [260, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.phase_tree": [[261, 3, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [261, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [261, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [261, 3, 2, "p-span", "span", "The number of symbols per raster."], [261, 3, 2, "p-sps", "sps", "The number of samples per symbol."], [261, 3, 2, "p-x", "x", "The baseband CPM signal $x[n]$."]], "sdr.plot.raster": [[262, 3, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [262, 3, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\"."], [262, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.collections.LineCollection. The following keyword arguments are set by default. The defaults may be overwritten."], [262, 3, 2, "p-length", "length", "The length of each raster in samples. This must be provided if x is 1D."], [262, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [262, 3, 2, "p-stride", "stride", "The stride between each raster in samples. If None, the stride is set to length."], [262, 3, 2, "p-x", "x", "The time-domain signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved. If x is 1D, the rastering is determined by length and stride. If x is 2D, the rows correspond to each raster."]], "sdr.plot.roc": [[263, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to the plotting function defined by type."], [263, 3, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [263, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [263, 3, 2, "p-type", "type", "The type of plot to generate."]], "sdr.plot.ser": [[264, 3, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [264, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."], [264, 3, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.spectrogram": [[265, 3, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [265, 3, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [265, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.pcolormesh(). The following keyword arguments are set by default. The defaults may be overwritten."], [265, 3, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [265, 3, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [265, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [265, 3, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [265, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [265, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[266, 3, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [266, 3, 2, "p-filter", "filter", "The filter definition."], [266, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.symbol_map": [[267, 3, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [267, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot(). The following keyword arguments are set by default. The defaults may be overwritten."], [267, 3, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [267, 3, 2, "p-modulation", "modulation", "The linear modulation or symbol map ${0, dots, M-1} mapsto mathbb{C}$."]], "sdr.plot.time_domain": [[268, 3, 2, "p-centered", "centered", "Indicates whether to center the x-axis about 0. This argument is mutually exclusive with offset."], [268, 3, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal. If \"color\", the real and imaginary parts will have different colors based on the current Matplotlib color cycle. If \"line\", the real part will have a solid line and the imaginary part will have a dashed line, and both lines will share the same color."], [268, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [268, 3, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. The units of the offset are $1/f_s$. This argument is mutually exclusive with centered."], [268, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [268, 3, 2, "p-t", "t", "The time signal $t[n]$. The units are assumed to be $1/f_s$."], [268, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[270, 3, 2, "p-filter", "filter", "The filter definition."], [270, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.polyphase_decompose": [[271, 3, 2, "p-branches", "branches", "The number of polyphase branches $B$."], [271, 3, 2, "p-taps", "taps", "The prototype filter feedforward coefficients $h[n]$."]], "sdr.ppb": [[272, 3, 2, "p-x", "x", "The input ratio."]], "sdr.ppm": [[273, 3, 2, "p-x", "x", "The input ratio."]], "sdr.raised_cosine": [[274, 3, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [274, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [274, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [274, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rectangular": [[275, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [275, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [275, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[276, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [276, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[277, 3, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [277, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [277, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [277, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[278, 3, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [278, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.snr_to_ebn0": [[279, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [279, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [279, 3, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [279, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[280, 3, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [280, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.to_complex_bb": [[281, 3, 2, "p-x_r", "x_r", "The real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$. If the length is odd, one zero is appended to the end."]], "sdr.to_real_pb": [[282, 3, 2, "p-x_c", "x_c", "The complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$."]], "sdr.unpack": [[283, 3, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [283, 3, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [283, 3, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.upsample": [[284, 3, 2, "p-rate", "rate", "The upsampling factor $r$."], [284, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.walsh": [[285, 3, 2, "p-index", "index", "The index $i$ of the Walsh code. Indicates how many transitions there are in the code."], [285, 3, 2, "p-length", "length", "The length $N$ of the Walsh code/sequence. Must be a power of 2."], [285, 3, 2, "p-output", "output", "The output format of the Walsh code/sequence."]], "sdr.wavelength": [[286, 3, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.zadoff_chu": [[287, 3, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [287, 3, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence. The root must be relatively prime to the length, i.e., $gcd(u, N) = 1$."], [287, 3, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence. When $q ne 0$, the returned sequence is a cyclic shift of the root-$u$ Zadoff-Chu sequence."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:parameter", "4": "py:property", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "parameter", "Python parameter"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"]}, "titleterms": {"convers": 0, "decibel": 0, "ratio": 0, "from": [0, 292, 293, 294], "e_b": 0, "n_0": 0, "e_": 0, "": [0, 296, 297], "n": [0, 295, 296, 297], "data": 1, "manipul": [1, 3], "detect": [2, 7], "detector": [2, 290], "theoret": 2, "limit": 2, "digit": [3, 297], "signal": [3, 289, 295, 298], "process": 3, "fir": [3, 296], "filter": [3, 7, 296, 297, 299], "iir": [3, 297], "polyphas": 3, "applic": 3, "arbitrari": [3, 295], "resampl": [3, 295], "correl": 3, "link": 4, "budget": 4, "channel": [4, 289], "capac": 4, "path": 4, "loss": 4, "antenna": 4, "measur": 5, "energi": 5, "power": [5, 298], "voltag": 5, "distanc": 5, "modul": [5, 6, 7], "linear": 6, "continu": 6, "phase": [6, 290, 299, 300], "orthogon": 6, "puls": [6, 298, 301], "shape": [6, 298, 301], "symbol": [6, 300], "map": [6, 300], "encod": 6, "plot": [7, 298], "configur": [7, 292, 294], "time": [7, 298, 299], "domain": [7, 298, 299], "frequenc": [7, 296, 297, 298, 299], "spectral": 7, "estim": 7, "analysi": 7, "probabl": 8, "constructor": [9, 18, 24, 41, 48, 55, 62, 78, 88, 90, 106, 108, 114, 116, 132, 141, 149, 151, 153, 161, 163, 169, 175, 177, 196], "special": [9, 18, 41, 48, 62, 78, 88, 90, 106, 108, 114, 132, 141, 151, 153, 163, 177, 196], "method": [9, 18, 24, 41, 48, 50, 55, 62, 78, 88, 90, 106, 108, 114, 116, 132, 141, 149, 151, 153, 161, 163, 169, 175, 177, 191, 196], "stream": [9, 18, 41, 48, 62, 78, 88, 90, 106, 108, 114, 151, 177, 196], "mode": [9, 18, 41, 48, 62, 78, 88, 90, 106, 108, 114, 151, 177, 196], "onli": [9, 18, 41, 48, 62, 78, 88, 90, 106, 108, 114, 151, 177, 196], "properti": [9, 18, 24, 41, 48, 62, 78, 88, 90, 106, 108, 114, 116, 132, 141, 149, 151, 153, 161, 163, 169, 175, 177, 196], "note": [24, 116, 149, 161, 169, 175, 234, 258, 265], "see": [55, 57, 68, 69, 70, 72, 75, 96, 98, 103, 117, 118, 128, 150, 162, 170, 171, 173, 176, 189, 190, 214, 245, 284], "also": [55, 57, 68, 69, 70, 72, 75, 96, 98, 103, 117, 118, 128, 150, 162, 170, 171, 173, 176, 189, 190, 214, 245, 284], "warn": [225, 284], "sequenc": 288, "simul": 289, "model": 289, "impair": 289, "synchron": 290, "lock": [290, 299], "loop": [290, 299], "error": [290, 300], "amplitud": 290, "control": 290, "document": 291, "instal": [291, 292, 293, 294, 302], "build": 291, "doc": 291, "serv": 291, "format": 292, "run": [292, 294], "linter": 292, "formatt": 292, "pre": 292, "commit": 292, "v": [292, 294], "code": [292, 294], "pypi": 293, "github": 293, "edit": 293, "local": 293, "folder": 293, "dev": 293, "depend": 293, "unit": 294, "test": 294, "command": 294, "line": 294, "farrow": 295, "construct": 295, "an": [295, 296, 297], "input": 295, "x": 295, "t_": 295, "rate": [295, 300], "r": 295, "y": 295, "frac": 295, "upsampl": 295, "integ": 295, "downsampl": 295, "irrat": 295, "creat": [296, 297], "examin": [296, 297, 298], "impuls": [296, 297], "respons": [296, 297, 299], "h": [296, 297], "step": [296, 297, 299], "omega": [296, 297], "group": [296, 297], "delai": [296, 297], "tau_g": [296, 297], "fulli": [296, 297], "analyz": [296, 297, 299], "zero": 297, "pole": 297, "stabil": 297, "peak": 298, "averag": 298, "qpsk": [298, 300], "variou": 298, "across": [298, 299], "excess": 298, "bandwidth": 298, "design": 299, "proport": 299, "plu": 299, "integr": 299, "ppi": 299, "implement": 299, "pll": 299, "close": 299, "perform": 299, "compar": 299, "zeta": 299, "b_n": 299, "t": 299, "shift": 300, "kei": 300, "constel": 300, "bpsk": 300, "8": [300, 303], "psk": 300, "16": 300, "curv": 300, "bit": 300, "rais": 301, "cosin": 301, "squar": 301, "root": 301, "gaussian": 301, "sdr": 302, "featur": 302, "v0": 303, "0": 303, "11": 303, "chang": 303, "contributor": 303, "10": 303, "9": 303, "7": 303, "6": 303, "5": 303, "4": 303, "3": 303, "2": 303, "1": 303, "version": 304, "alpha": 304, "releas": 304, "beta": 304}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Conversions": [[0, "conversions"]], "Decibels": [[0, "decibels"]], "Ratios": [[0, "ratios"]], "From E_b/N_0": [[0, "from-e-b-n-0"]], "From E_s/N_0": [[0, "from-e-s-n-0"]], "From S/N": [[0, "from-s-n"]], "Data manipulation": [[1, "data-manipulation"]], "Detection": [[2, "detection"], [7, "detection"]], "Detectors": [[2, "detectors"]], "Theoretical limits": [[2, "theoretical-limits"]], "Digital signal processing": [[3, "digital-signal-processing"]], "FIR filtering": [[3, "fir-filtering"]], "IIR filtering": [[3, "iir-filtering"]], "Polyphase FIR filtering": [[3, "polyphase-fir-filtering"]], "Filter applications": [[3, "filter-applications"]], "Arbitrary resampling": [[3, "arbitrary-resampling"]], "Correlation": [[3, "correlation"]], "Signal manipulation": [[3, "signal-manipulation"]], "Link budgets": [[4, "link-budgets"]], "Channel capacity": [[4, "channel-capacity"]], "Path losses": [[4, "path-losses"]], "Antennas": [[4, "antennas"]], "Measurement": [[5, "measurement"]], "Energy": [[5, "energy"]], "Power": [[5, "power"]], "Voltage": [[5, "voltage"]], "Distance": [[5, "distance"]], "Modulation": [[5, "modulation"], [6, "modulation"], [7, "modulation"]], "Linear modulations": [[6, "linear-modulations"]], "Continuous-phase modulations": [[6, "continuous-phase-modulations"]], "Orthogonal modulations": [[6, "orthogonal-modulations"]], "Pulse shaping": [[6, "pulse-shaping"]], "Symbol mapping": [[6, "symbol-mapping"], [300, "symbol-mapping"]], "Symbol encoding": [[6, "symbol-encoding"]], "Plotting": [[7, "plotting"]], "Configuration": [[7, "configuration"], [292, "configuration"], [294, "configuration"]], "Time-domain": [[7, "time-domain"]], "Frequency-domain": [[7, "frequency-domain"]], "Spectral estimation": [[7, "spectral-estimation"]], "Filter analysis": [[7, "filter-analysis"]], "Probability": [[8, "probability"]], "Constructors": [[9, "constructors"], [18, "constructors"], [24, "constructors"], [41, "constructors"], [48, "constructors"], [55, "constructors"], [62, "constructors"], [78, "constructors"], [88, "constructors"], [90, "constructors"], [106, "constructors"], [108, "constructors"], [114, "constructors"], [116, "constructors"], [132, "constructors"], [141, "constructors"], [149, "constructors"], [151, "constructors"], [153, "constructors"], [161, "constructors"], [163, "constructors"], [169, "constructors"], [175, "constructors"], [177, "constructors"], [196, "constructors"]], "Special methods": [[9, "special-methods"], [18, "special-methods"], [41, "special-methods"], [48, "special-methods"], [62, "special-methods"], [78, "special-methods"], [88, "special-methods"], [90, "special-methods"], [106, "special-methods"], [108, "special-methods"], [114, "special-methods"], [132, "special-methods"], [141, "special-methods"], [151, "special-methods"], [153, "special-methods"], [163, "special-methods"], [177, "special-methods"], [196, "special-methods"]], "Streaming mode only": [[9, "streaming-mode-only"], [18, "streaming-mode-only"], [41, "streaming-mode-only"], [48, "streaming-mode-only"], [62, "streaming-mode-only"], [78, "streaming-mode-only"], [88, "streaming-mode-only"], [90, "streaming-mode-only"], [106, "streaming-mode-only"], [108, "streaming-mode-only"], [114, "streaming-mode-only"], [151, "streaming-mode-only"], [177, "streaming-mode-only"], [196, "streaming-mode-only"]], "Properties": [[9, "properties"], [18, "properties"], [24, "properties"], [41, "properties"], [48, "properties"], [62, "properties"], [78, "properties"], [88, "properties"], [90, "properties"], [106, "properties"], [108, "properties"], [114, "properties"], [116, "properties"], [132, "properties"], [141, "properties"], [149, "properties"], [151, "properties"], [153, "properties"], [161, "properties"], [163, "properties"], [169, "properties"], [175, "properties"], [177, "properties"], [196, "properties"]], "Methods": [[18, "methods"], [24, "methods"], [41, "methods"], [48, "methods"], [50, "methods"], [55, "methods"], [62, "methods"], [88, "methods"], [90, "methods"], [106, "methods"], [108, "methods"], [114, "methods"], [116, "methods"], [132, "methods"], [141, "methods"], [149, "methods"], [151, "methods"], [153, "methods"], [161, "methods"], [163, "methods"], [169, "methods"], [175, "methods"], [177, "methods"], [191, "methods"], [196, "methods"]], "Note": [[24, null], [116, null], [149, null], [161, null], [169, null], [175, null], [234, null], [258, null], [265, null]], "See also": [[55, null], [57, null], [68, null], [69, null], [70, null], [72, null], [75, null], [96, null], [98, null], [103, null], [117, null], [118, null], [128, null], [150, null], [162, null], [170, null], [171, null], [173, null], [176, null], [189, null], [190, null], [214, null], [245, null], [284, null]], "Warning": [[225, null], [284, null]], "Sequences": [[288, "sequences"]], "Simulation": [[289, "simulation"]], "Channel models": [[289, "channel-models"]], "Signal impairments": [[289, "signal-impairments"]], "Synchronization": [[290, "synchronization"]], "Phase-locked loops": [[290, "phase-locked-loops"], [299, "phase-locked-loops"]], "Phase error detectors": [[290, "phase-error-detectors"]], "Amplitude control loops": [[290, "amplitude-control-loops"]], "Documentation": [[291, "documentation"]], "Install": [[291, "install"], [292, "install"], [294, "install"]], "Build the docs": [[291, "build-the-docs"]], "Serve the docs": [[291, "serve-the-docs"]], "Formatting": [[292, "formatting"]], "Run the linter": [[292, "run-the-linter"]], "Run the formatter": [[292, "run-the-formatter"]], "Pre-commit": [[292, "pre-commit"]], "Run from VS Code": [[292, "run-from-vs-code"], [294, "run-from-vs-code"]], "Installation": [[293, "installation"], [302, "installation"]], "Install from PyPI": [[293, "install-from-pypi"]], "Install from GitHub": [[293, "install-from-github"]], "Editable install from local folder": [[293, "editable-install-from-local-folder"]], "Install the dev dependencies": [[293, "install-the-dev-dependencies"]], "Unit Tests": [[294, "unit-tests"]], "Run from the command line": [[294, "run-from-the-command-line"]], "Farrow arbitrary resampler": [[295, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[295, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[295, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[295, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[295, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[295, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[295, "downsample-by-an-irrational-rate"]], "FIR filters": [[296, "fir-filters"]], "Create an FIR filter": [[296, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[296, "examine-the-impulse-response-h-n"], [297, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[296, "examine-the-step-response-s-n"], [297, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[296, "examine-the-frequency-response-h-omega"], [297, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[296, "examine-the-group-delay-tau-g-omega"], [297, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[296, "fully-analyze-a-fir-filter"]], "IIR filters": [[297, "iir-filters"]], "Create an IIR filter": [[297, "create-an-iir-filter"]], "Examine the zeros and poles": [[297, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[297, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[297, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[298, "peak-to-average-power"]], "QPSK signal with various pulse shapes": [[298, "qpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[298, "examine-time-domain"]], "Examine frequency domain": [[298, "examine-frequency-domain"]], "Plot across excess bandwidth": [[298, "plot-across-excess-bandwidth"]], "Design a proportional-plus-integrator (PPI) loop filter": [[299, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[299, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[299, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[299, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[299, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[299, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[299, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[300, "phase-shift-keying"]], "Constellations": [[300, "constellations"]], "BPSK": [[300, "bpsk"]], "QPSK": [[300, "qpsk"]], "8-PSK": [[300, "id1"]], "16-PSK": [[300, "id2"]], "Error rate curves": [[300, "error-rate-curves"]], "Bit error rate curves": [[300, "bit-error-rate-curves"]], "Symbol error rate curves": [[300, "symbol-error-rate-curves"]], "Pulse shapes": [[301, "pulse-shapes"]], "Raised cosine": [[301, "raised-cosine"]], "Square-root raised cosine": [[301, "square-root-raised-cosine"]], "Gaussian": [[301, "gaussian"]], "sdr": [[302, "sdr"]], "Features": [[302, "features"]], "v0.0": [[303, "v0-0"]], "v0.0.11": [[303, "v0-0-11"]], "Changes": [[303, "changes"], [303, "id1"], [303, "id3"], [303, "id5"], [303, "id7"], [303, "id9"], [303, "id11"], [303, "id13"], [303, "id15"], [303, "id17"], [303, "id19"]], "Contributors": [[303, "contributors"], [303, "id2"], [303, "id4"], [303, "id6"], [303, "id8"], [303, "id10"], [303, "id12"], [303, "id14"], [303, "id16"], [303, "id18"], [303, "id20"]], "v0.0.10": [[303, "v0-0-10"]], "v0.0.9": [[303, "v0-0-9"]], "v0.0.8": [[303, "v0-0-8"]], "v0.0.7": [[303, "v0-0-7"]], "v0.0.6": [[303, "v0-0-6"]], "v0.0.5": [[303, "v0-0-5"]], "v0.0.4": [[303, "v0-0-4"]], "v0.0.3": [[303, "v0-0-3"]], "v0.0.2": [[303, "v0-0-2"]], "v0.0.1": [[303, "v0-0-1"]], "Versioning": [[304, "versioning"]], "Alpha releases": [[304, "alpha-releases"]], "Beta releases": [[304, "beta-releases"]]}, "indexentries": {"module": [[3, "module-sdr"]], "sdr": [[3, "module-sdr"]]}, "docurls": ["api/conversions/", "api/data-manipulation/", "api/detection/", "api/dsp/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/sdr.AGC/", "api/sdr.AGC.__call__/", "api/sdr.AGC.__init__/", "api/sdr.AGC.attack/", "api/sdr.AGC.decay/", "api/sdr.AGC.gain/", "api/sdr.AGC.reference/", "api/sdr.AGC.reset/", "api/sdr.AGC.streaming/", "api/sdr.Channelizer/", "api/sdr.Channelizer.__call__/", "api/sdr.Channelizer.__init__/", "api/sdr.Channelizer.channels/", "api/sdr.Channelizer.delay/", "api/sdr.Channelizer.method/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.Decimator/", "api/sdr.Decimator.__call__/", "api/sdr.Decimator.__init__/", "api/sdr.Decimator.delay/", "api/sdr.Decimator.method/", "api/sdr.Decimator.rate/", "api/sdr.Decimator.reset/", "api/sdr.Differentiator/", "api/sdr.Differentiator.__init__/", "api/sdr.EnergyDetector/", "api/sdr.EnergyDetector.p_d/", "api/sdr.EnergyDetector.p_fa/", "api/sdr.EnergyDetector.roc/", "api/sdr.EnergyDetector.threshold/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__call__/", "api/sdr.FIR.__init__/", "api/sdr.FIR.__len__/", "api/sdr.FIR.delay/", "api/sdr.FIR.flush/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.group_delay/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.phase_delay/", "api/sdr.FIR.reset/", "api/sdr.FIR.state/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__call__/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.delay/", "api/sdr.FarrowResampler.flush/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.state/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.FractionalDelay/", "api/sdr.FractionalDelay.__init__/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__call__/", "api/sdr.IIR.__init__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.state/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.Integrator/", "api/sdr.Integrator.__init__/", "api/sdr.Interpolator/", "api/sdr.Interpolator.__call__/", "api/sdr.Interpolator.__init__/", "api/sdr.Interpolator.delay/", "api/sdr.Interpolator.method/", "api/sdr.Interpolator.rate/", "api/sdr.LeakyIntegrator/", "api/sdr.LeakyIntegrator.__init__/", "api/sdr.LinearModulation/", "api/sdr.LinearModulation.__init__/", "api/sdr.LinearModulation.ber/", "api/sdr.LinearModulation.bps/", "api/sdr.LinearModulation.decide_symbols/", "api/sdr.LinearModulation.demodulate/", "api/sdr.LinearModulation.map_symbols/", "api/sdr.LinearModulation.modulate/", "api/sdr.LinearModulation.order/", "api/sdr.LinearModulation.phase_offset/", "api/sdr.LinearModulation.pulse_shape/", "api/sdr.LinearModulation.rx_filter/", "api/sdr.LinearModulation.ser/", "api/sdr.LinearModulation.sps/", "api/sdr.LinearModulation.symbol_map/", "api/sdr.LinearModulation.tx_filter/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.__call__/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.integral_gain/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.proportional_gain/", "api/sdr.LoopFilter.reset/", "api/sdr.MLPED/", "api/sdr.MLPED.A_received/", "api/sdr.MLPED.A_reference/", "api/sdr.MLPED.__call__/", "api/sdr.MLPED.__init__/", "api/sdr.MLPED.data_aided_error/", "api/sdr.MLPED.decision_directed_error/", "api/sdr.MLPED.gain/", "api/sdr.MSK/", "api/sdr.MSK.__init__/", "api/sdr.MovingAverager/", "api/sdr.MovingAverager.__init__/", "api/sdr.NCO/", "api/sdr.NCO.__call__/", "api/sdr.NCO.__init__/", "api/sdr.NCO.gain/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.OQPSK/", "api/sdr.OQPSK.__init__/", "api/sdr.PED/", "api/sdr.PED.__call__/", "api/sdr.PED.__init__/", "api/sdr.PED.data_aided_error/", "api/sdr.PED.decision_directed_error/", "api/sdr.PED.gain/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.ber/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.PiMPSK/", "api/sdr.PiMPSK.__init__/", "api/sdr.PolyphaseFIR/", "api/sdr.PolyphaseFIR.__call__/", "api/sdr.PolyphaseFIR.__init__/", "api/sdr.PolyphaseFIR.branches/", "api/sdr.PolyphaseFIR.delay/", "api/sdr.PolyphaseFIR.input/", "api/sdr.PolyphaseFIR.order/", "api/sdr.PolyphaseFIR.output/", "api/sdr.PolyphaseFIR.polyphase_order/", "api/sdr.PolyphaseFIR.polyphase_taps/", "api/sdr.PolyphaseFIR.reset/", "api/sdr.PolyphaseFIR.taps/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.ReplicaCorrelator/", "api/sdr.ReplicaCorrelator.p_d/", "api/sdr.ReplicaCorrelator.p_fa/", "api/sdr.ReplicaCorrelator.roc/", "api/sdr.ReplicaCorrelator.threshold/", "api/sdr.Resampler/", "api/sdr.Resampler.__call__/", "api/sdr.Resampler.__init__/", "api/sdr.Resampler.delay/", "api/sdr.Resampler.down/", "api/sdr.Resampler.method/", "api/sdr.Resampler.rate/", "api/sdr.Resampler.up/", "api/sdr.albersheim/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.barker/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.db/", "api/sdr.design_bandpass_fir/", "api/sdr.design_bandstop_fir/", "api/sdr.design_frac_delay_fir/", "api/sdr.design_highpass_fir/", "api/sdr.design_lowpass_fir/", "api/sdr.design_multirate_fir/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.downsample/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.euclidean/", "api/sdr.evm/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.hadamard/", "api/sdr.half_sine/", "api/sdr.hamming/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.linear/", "api/sdr.mix/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.percent/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.eye/", "api/sdr.plot.filter/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.magnitude_response/", "api/sdr.plot.p_d/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.phase_tree/", "api/sdr.plot.raster/", "api/sdr.plot.roc/", "api/sdr.plot.ser/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.polyphase_decompose/", "api/sdr.ppb/", "api/sdr.ppm/", "api/sdr.raised_cosine/", "api/sdr.rectangular/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.to_complex_bb/", "api/sdr.to_real_pb/", "api/sdr.unpack/", "api/sdr.upsample/", "api/sdr.walsh/", "api/sdr.wavelength/", "api/sdr.zadoff_chu/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/formatting/", "development/installation/", "development/unit-tests/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})