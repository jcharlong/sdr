Search.setIndex({"titles": ["sdr", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.DDS", "sdr.DDS.__init__", "sdr.DDS.nco", "sdr.DDS.process", "sdr.DDS.reset", "sdr.DDS.step", "sdr.FarrowResampler", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.resample", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__init__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.filter", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.plot_all", "sdr.IIR.plot_frequency_response", "sdr.IIR.plot_frequency_response_log", "sdr.IIR.plot_group_delay", "sdr.IIR.plot_impulse_response", "sdr.IIR.plot_step_response", "sdr.IIR.plot_zeros_poles", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.filter", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.process", "sdr.NCO.reset", "sdr.NCO.step", "Farrow arbitrary resampler", "IIR filters", "Phase-locked loops", "sdr", "Versioning"], "terms": {"class": [0, 1, 18, 24, 31, 54, 63, 72], "iir": [0, 1, 10, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 60, 73, 74], "implement": [0, 18, 31, 54, 60, 63, 71], "an": [0, 31, 32, 33, 40, 54], "infinit": [0, 31, 74], "impuls": [0, 31, 40, 42, 46, 74], "respons": [0, 31, 37, 38, 40, 42, 43, 44, 45, 46, 47, 51, 74], "farrowresampl": [0, 24, 25, 26, 27, 28, 29, 30, 71, 74], "A": [0, 1, 8, 9, 11, 12, 13, 14, 15, 17, 24, 54, 57, 58, 73], "cubic": [0, 24], "farrow": [0, 24, 25, 26, 27, 28, 29, 30, 74], "arbitrari": [0, 24, 25, 26, 27, 28, 29, 30, 74], "closedlooppl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 73, 74], "defin": [0, 1, 31, 72, 74], "perform": [0, 1, 72], "close": [0, 1, 8, 10, 74], "pll": [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 74], "dd": [0, 18, 19, 20, 21, 22, 23, 63, 73, 74], "direct": [0, 18, 19, 73, 74], "digit": [0, 1, 9, 11, 12, 13, 14, 15, 18, 19, 54, 73, 74], "synthes": [0, 18, 19, 73, 74], "loopfilt": [0, 54, 55, 56, 57, 58, 59, 60, 61, 62, 73, 74], "2nd": [0, 1, 54, 57, 73], "order": [0, 1, 24, 26, 31, 41, 54, 57, 73], "proport": [0, 1, 5, 54, 55, 57], "plu": [0, 1, 54, 57], "integr": [0, 1, 6, 54, 56, 57, 72], "ppi": [0, 54, 57], "nco": [0, 1, 4, 8, 18, 19, 20, 57, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74], "numer": [0, 1, 18, 20, 63, 65, 72, 73, 74], "control": [0, 1, 18, 20, 63, 65, 73, 74], "oscil": [0, 1, 18, 20, 63, 65, 73, 74], "sdr": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75], "loop": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 74], "thi": [1, 31, 71, 72, 73], "i": [1, 8, 17, 24, 29, 31, 40, 51, 52, 54, 57, 58, 61, 71, 72, 73, 74, 75], "meant": 1, "analysi": [1, 8, 73, 74], "onli": [1, 24, 28, 31, 50, 73], "block": [1, 18, 54, 63], "diagram": [1, 18, 54, 63], "bb": [1, 73], "n": [1, 18, 21, 23, 27, 31, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, 51, 54, 59, 63, 68, 70, 73], "x": [1, 18, 21, 24, 27, 31, 36, 54, 59, 63, 68, 73, 75], "ped": [1, 7, 8, 57, 73], "lf": [1, 73], "lo": [1, 73], "e": [1, 18, 31, 37, 38, 72, 73], "j": [1, 18, 31, 72, 73], "input": [1, 9, 11, 14, 15, 18, 21, 24, 25, 27, 28, 31, 32, 33, 36, 40, 51, 54, 59, 63, 68, 72, 73], "signal": [1, 9, 11, 14, 15, 18, 21, 24, 27, 31, 36, 54, 59, 63, 68, 70, 72, 73, 74], "local": [1, 72, 73], "baseband": [1, 73], "phase": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 43, 44, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 74], "error": [1, 7, 8, 14, 54, 57, 73], "detector": [1, 7, 8, 57, 73], "filter": [1, 5, 6, 8, 10, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 74], "The": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 27, 28, 31, 32, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 51, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75], "transfer": [1, 10, 31, 32, 54, 72, 73], "function": [1, 10, 31, 32, 54, 72, 73], "h_": [1, 73], "z": [1, 18, 31, 54, 63, 72, 73], "k_1": [1, 54, 73], "k_2": [1, 54, 73], "frac": [1, 31, 54, 73], "1": [1, 8, 17, 18, 19, 31, 32, 37, 38, 41, 42, 43, 44, 45, 54, 57, 58, 63, 65, 71, 72, 73, 75], "k_0": [1, 73], "k_p": [1, 73], "2": [1, 14, 71, 72, 73], "refer": [1, 9, 11, 12, 13, 14, 15, 24, 54, 72], "rice": [1, 9, 11, 12, 13, 14, 15, 54], "commun": [1, 9, 11, 12, 13, 14, 15, 54, 73], "discret": [1, 9, 11, 12, 13, 14, 15, 54, 71, 73], "time": [1, 8, 9, 11, 12, 13, 14, 15, 31, 54, 57, 71, 72], "approach": [1, 9, 11, 12, 13, 14, 15, 54, 73], "appendix": [1, 54], "c": [1, 9, 11, 12, 13, 14, 15, 54, 72, 73], "lock": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 74], "exampl": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73], "see": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70], "noise_bandwidth": [1, 8, 54, 57, 61], "float": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 27, 31, 32, 37, 38, 39, 42, 43, 44, 45, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67], "damping_factor": [1, 8, 54, 57, 58], "creat": [1, 8, 18, 19, 24, 25, 31, 32, 33, 54, 57, 63, 65, 71, 73], "object": [1, 8, 72, 73], "frequency_lock_tim": [1, 9], "freq_offset": [1, 9, 11], "return": [1, 9, 11, 14, 15, 21, 23, 24, 26, 27, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 49, 51, 52, 53, 59, 68, 70, 72], "frequenc": [1, 9, 11, 13, 31, 37, 38, 42, 43, 44, 45, 54], "lock_tim": [1, 11, 73], "phase_error_vari": [1, 14], "cn0": [1, 14], "varianc": [1, 14], "steadi": [1, 14], "state": [1, 14, 24, 28, 29, 31, 50, 52], "phase_lock_tim": [1, 15], "bn": [1, 2], "nois": [1, 2, 3, 8, 14, 54, 57, 61, 73], "bandwidth": [1, 2, 3, 8, 12, 54, 57, 61, 73], "hz": [1, 2, 8, 9, 11, 14, 37, 38, 54, 57, 61, 71], "bnt": [1, 3, 73], "normal": [1, 3, 8, 54, 57, 61, 73], "repres": [1, 10], "k0": [1, 4, 8, 18, 19, 57, 63, 64, 65], "gain": [1, 4, 5, 6, 7, 8, 18, 19, 31, 32, 39, 54, 55, 56, 57, 63, 64, 65, 73], "k1": [1, 5, 54, 55, 73], "k2": [1, 6, 54, 56, 73], "kp": [1, 7, 8, 57], "omega_3db": [1, 12], "3": [1, 12, 72, 73, 74], "db": [1, 12, 14, 73], "radian": [1, 12, 13, 14, 18, 19, 73], "": [1, 9, 11, 12, 13, 15, 16, 31, 37, 38, 42, 43, 44, 45, 47, 51, 71], "omega_n": [1, 13, 73], "natur": [1, 13], "sample_r": [1, 8, 16, 31, 37, 38, 42, 43, 44, 45, 71, 73], "sampl": [1, 8, 16, 18, 19, 21, 23, 24, 28, 37, 38, 40, 42, 43, 44, 45, 46, 47, 51, 54, 57, 61, 63, 65, 66, 68, 70, 71, 73], "rate": [1, 8, 16, 24, 27, 37, 38, 42, 43, 44, 45], "zeta": [1, 17], "damp": [1, 8, 17, 54, 57, 58, 73], "factor": [1, 8, 17, 54, 57, 58, 73], "properti": [2, 3, 4, 5, 6, 7, 10, 12, 13, 16, 17, 20, 26, 29, 30, 34, 35, 39, 41, 49, 52, 53, 55, 56, 58, 60, 61, 64, 66, 67], "0": [8, 18, 19, 31, 32, 37, 38, 42, 43, 44, 45, 57, 63, 65, 71, 72, 73, 75], "paramet": [8, 9, 11, 14, 19, 21, 23, 25, 27, 28, 32, 33, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 51, 57, 59, 65, 68, 70], "b_n": [8, 54, 57, 61], "t": [8, 54, 57, 61, 71], "where": [8, 54, 57, 61, 72], "period": [8, 54, 57, 61], "second": [8, 9, 11, 15, 54, 57, 61], "critic": [8, 17, 54, 57, 58, 73], "less": [8, 17, 54, 57, 58], "than": [8, 17, 54, 57, 58], "underdamp": [8, 17, 54, 57, 58], "greater": [8, 17, 54, 57, 58], "overdamp": [8, 17, 54, 57, 58], "ted": [8, 57], "offset": [9, 11, 18, 19, 63, 65, 67, 73], "take": [9, 11, 15], "onto": [9, 11, 15], "equat": [9, 11, 12, 13, 14, 15, 31], "39": 9, "38": 11, "34": 12, "33": 13, "carrier": 14, "densiti": 14, "ratio": 14, "43": 14, "40": 15, "note": [18, 31, 54, 63], "increment": [18, 19, 21, 63, 65, 66, 68, 73], "v": [18, 63], "y": [18, 21, 23, 27, 31, 36, 54, 59, 63, 68, 70, 73], "output": [18, 21, 23, 40, 51, 54, 63, 68, 70, 71, 72, 73], "constant": [18, 19, 54, 63, 65, 66, 72, 73], "accumul": [18, 19, 63, 65, 66, 73], "absolut": [18, 19, 63, 65, 67], "unit": [18, 51, 54, 63, 65, 66, 67, 72, 73], "delai": [18, 24, 31, 45, 54, 63, 73], "adder": [18, 54, 63, 73], "process": [18, 21, 63, 68, 72, 73], "ndarrai": [18, 21, 23, 24, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 49, 51, 53, 54, 59, 63, 68, 70], "step": [18, 21, 23, 31, 42, 47, 51, 63, 68, 70], "variabl": [18, 21, 63, 68, 73], "reset": [18, 22, 24, 28, 31, 50, 54, 62, 63, 69], "int": [18, 23, 24, 26, 31, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 51, 63, 70], "forward": [18, 23, 63, 70], "us": [18, 20, 24, 25, 32, 33, 54, 60, 72, 75], "vari": [21, 68], "per": [21, 68], "complex": [21, 23, 71, 72], "exponenti": [21, 23, 71, 72], "number": [23, 37, 38, 40, 42, 43, 44, 45, 46, 47, 51, 70], "resampl": [24, 25, 26, 27, 28, 29, 30, 74], "http": 24, "wirelesspi": 24, "com": 24, "fraction": [24, 28, 71], "structur": 24, "stream": [24, 25, 28, 29, 31, 32, 33, 50, 52], "bool": [24, 25, 29, 31, 32, 33, 43, 44, 52], "fals": [24, 25, 31, 32, 33, 72], "new": [24, 25], "given": [24, 27, 72], "np": [24, 28, 71, 72, 73], "none": [24, 28, 54, 62, 71], "mode": [24, 25, 28, 29, 31, 32, 33, 50, 52], "index": [24, 28], "whether": [24, 25, 29, 31, 32, 33, 43, 44, 52], "tap": [24, 30, 31, 34, 35, 72], "indic": [25, 32, 33, 43, 44], "In": [25, 29, 32, 33, 52, 71], "previou": [25, 28, 32, 33], "ar": [25, 32, 33, 38, 71, 72, 73, 75], "preserv": [25, 29, 32, 33, 52], "between": [25, 29, 32, 33, 52, 73], "call": [25, 29, 32, 33, 52], "t_": 27, "r": [27, 72, 73], "vector": 28, "should": 28, "equal": 28, "three": [28, 71], "If": 28, "zero": [28, 31, 32, 42, 48, 53, 54, 73], "wrapper": 31, "scipi": [31, 72, 73], "lfilter": 31, "It": [31, 54], "support": 31, "one": [31, 72], "its": [31, 32, 72], "feedforward": [31, 33, 35, 72], "coeffici": [31, 33, 72, 73], "b_i": [31, 33, 35, 72], "feedback": [31, 33, 34, 72], "a_j": [31, 33, 34, 72], "These": [31, 73], "differ": 31, "a_0": 31, "left": 31, "sum_": 31, "m": 31, "right": 31, "h": [31, 37, 38, 40, 43, 44, 46, 54, 73], "b": [31, 33], "classmethod": [31, 32], "zerospol": [31, 32, 72], "pole": [31, 32, 42, 48, 49], "self": [31, 32], "from": [31, 32, 37, 38, 72, 73], "frequency_respons": [31, 37], "tupl": [31, 37, 38], "j2": [31, 37, 38], "pi": [31, 37, 38, 71, 72, 73], "f": [31, 37, 38, 71, 72, 73], "frequency_response_log": [31, 38, 73], "logarithm": [31, 38, 44, 72], "axi": [31, 38, 44, 71], "impulse_respons": [31, 40, 72], "100": [31, 40, 42, 46, 47, 51, 71], "step_respons": [31, 51, 72, 73], "plot_al": [31, 42, 72], "n_time": [31, 42, 72], "singl": [31, 42], "figur": [31, 42, 71, 72, 73], "plot_frequency_respons": [31, 43, 72], "omega": [31, 43, 44, 45, 73], "plot_frequency_response_log": [31, 44, 72, 73], "plot_group_delai": [31, 45, 72], "1024": [31, 37, 38, 42, 43, 44, 45], "group": [31, 45], "tau_g": [31, 45], "plot_impulse_respons": [31, 46, 72], "plot_step_respons": [31, 47, 72], "plot_zeros_pol": [31, 48, 72], "a_tap": [31, 34, 72], "b_tap": [31, 35, 72], "f_": [37, 38, 71, 72, 73], "decad": [38, 44, 73], "4": [38, 44, 71, 72], "plot": [38, 42, 43, 44, 45, 46, 47, 48, 71, 72, 73], "space": 38, "when": [40, 51, 71, 72], "delta": [40, 72], "n_freq": 42, "true": [43, 44], "u": [51, 72], "can": [54, 72, 75], "track": 54, "cannot": 54, "howev": [54, 71], "chirp": 54, "ramp": 54, "underli": [54, 60], "import": [71, 72, 73], "numpi": [71, 72, 73], "matplotlib": [71, 72, 73], "pyplot": [71, 72, 73], "plt": [71, 72, 73], "config": [71, 72, 73], "inlinebackend": [71, 72, 73], "print_figure_kwarg": [71, 72, 73], "facecolor": [71, 72, 73], "w": [71, 72, 73], "widget": [71, 72, 73], "color": [71, 72, 73], "rcparam": [71, 72, 73], "ax": [71, 72, 73], "prop_cycl": [71, 72, 73], "by_kei": [71, 72, 73], "continu": 71, "freq": [71, 73], "05": [71, 72, 73], "tx": 71, "arang": [71, 73], "exp": [71, 72, 73], "1j": [71, 72, 73], "decai": [71, 72], "figsiz": [71, 72, 73], "10": [71, 72, 73], "5": [71, 72, 73], "real": [71, 72, 73], "marker": 71, "o": 71, "fillstyl": 71, "label": [71, 73], "imag": 71, "xlabel": [71, 73], "ylabel": [71, 73], "amplitud": [71, 73], "titl": [71, 73], "origin": 71, "legend": [71, 73], "grid": [71, 73], "which": [71, 73], "both": [71, 73], "linestyl": [71, 73], "show": [71, 72, 73], "now": 71, "equival": 71, "accomplish": 71, "librari": [71, 74, 75], "def": 71, "resample_sign": 71, "new_sample_r": 71, "ty": 71, "size": [71, 73], "print": [71, 72, 73], "length": 71, "notic": 71, "two": [71, 72], "everi": 71, "200": 71, "four": 71, "400": 71, "other": [71, 75], "appear": 71, "50": 71, "fourth": 71, "25": [71, 73], "roughli": 71, "often": 71, "do": 71, "align": 71, "315": 71, "32": 71, "user": [72, 73], "specifi": 72, "altern": 72, "mai": [72, 73], "below": 72, "conjug": 72, "6": [72, 73], "8": 72, "conj": [72, 73], "_iir_filt": 72, "0x0000028cbda77348": 72, "47820725": 72, "64": 72, "comput": [72, 73], "method": 72, "30": 72, "00000000e": 72, "00": 72, "78207252e": 72, "01": [72, 73], "58172329e": 72, "10862468e": 72, "86109590e": 72, "21565653e": 72, "02": [72, 73], "01140214e": 72, "57286400e": 72, "67772160e": 72, "47338728e": 72, "10422993e": 72, "89312837e": 72, "12240078e": 72, "03953322e": 72, "03": 72, "69685122e": 72, "63882791e": 72, "81474977e": 72, "47193366e": 72, "85259041e": 72, "15647504e": 72, "23851924e": 72, "42176895e": 72, "04": 72, "84684395e": 72, "42721858e": 72, "72236648e": 72, "14721649e": 72, "10813095e": 72, "94024315e": 72, "78877688e": 72, "74077567e": 72, "conveni": 72, "87820725": 72, "53637958": 72, "94724205": 72, "13335164": 72, "1455082": 72, "04436799": 72, "88708159": 72, "71930943": 72, "5719707": 72, "46154771": 72, "39261642": 72, "36139242": 72, "35935288": 72, "3763214": 72, "40270968": 72, "43085717": 72, "45557651": 72, "47410241": 72, "48566716": 72, "49090568": 72, "49124786": 72, "48840102": 72, "4839738": 72, "47925143": 72, "47510421": 72, "47199608": 72, "47005584": 72, "46917696": 72, "46911955": 72, "valu": 72, "set": 72, "denomin": 72, "73910363": 72, "30614675j": 72, "plane": 72, "evalu": 72, "also": 72, "scale": 72, "shift": 72, "envelop": 72, "pass": 72, "through": [72, 73], "easili": 72, "here": 72, "arrai": 72, "linspac": 72, "endpoint": 72, "concaten": 72, "0x0000028cc010fd48": 72, "lyon": 72, "understand": 72, "3rd": 72, "edit": 72, "section": [72, 73], "insid": 72, "circl": 72, "sinusoid": 72, "matth": [72, 73], "appdata": [72, 73], "packag": [72, 73, 74], "pythonsoftwarefound": [72, 73], "python": [72, 73, 74], "7_qbz5n2kfra8p0": [72, 73], "localcach": [72, 73], "python37": [72, 73], "site": [72, 73], "filter_design": [72, 73], "py": [72, 73], "476": 72, "runtimewarn": 72, "divid": 72, "encount": 72, "true_divid": 72, "npp_polyv": 72, "zm1": 72, "tensor": 72, "invalid": 72, "outsid": 72, "unstabl": 72, "increas": 72, "ha": 73, "follow": 73, "configur": 73, "_loop_filt": 73, "0x0000022490aed188": 73, "75": 73, "theta_0": 73, "phase_error": 73, "measur": 73, "freq_estim": 73, "estim": 73, "rang": 73, "subplot": 73, "suptitl": 73, "tight_layout": 73, "ones": 73, "dtype": 73, "complex64": 73, "angl": 73, "part": 73, "unwrap": 73, "system": 73, "avail": 73, "sqrt": 73, "500": 73, "rf": 73, "1632": 73, "badcoeffici": 73, "badli": 73, "condit": 73, "result": 73, "meaningless": 73, "semilogx": 73, "20": 73, "log10": 73, "ab": 73, "xlim": 73, "ylim": 73, "power": 73, "001": 73, "005": 73, "b_nt": 73, "0005": 73, "00001": 73, "0125": 73, "015": 73, "0175": 73, "t_lock": 73, "softwar": 74, "radio": 74, "applic": 74, "gener": 74, "semant": 75, "major": 75, "minor": 75, "patch": 75, "introduc": 75, "api": 75, "chang": 75, "featur": 75, "add": 75, "backward": 75, "compat": 75, "make": 75, "bug": 75, "fix": 75, "befor": 75, "There": 75, "guarante": 75, "them": 75, "thei": 75, "thought": 75}, "objects": {"": [[0, 0, 0, 1, "sdr", ""]], "sdr": [[1, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [18, 1, 1, "", "DDS", "Implements a direct digital synthesizer (DDS)."], [24, 1, 1, "", "FarrowResampler", "A cubic Farrow arbitrary resampler."], [31, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [54, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [63, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."]], "sdr.ClosedLoopPLL": [[2, 2, 1, "", "Bn", "The noise bandwidth of the PLL in Hz."], [3, 2, 1, "", "BnT", "The normalized noise bandwidth of the PLL."], [4, 2, 1, "", "K0", "The NCO gain."], [5, 2, 1, "", "K1", "The proportional gain of the loop filter."], [6, 2, 1, "", "K2", "The integral gain of the loop filter."], [7, 2, 1, "", "Kp", "The phase error detector (PED) gain."], [8, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [9, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [10, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [11, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [12, 2, 1, "", "omega_3dB", "The 3-dB bandwidth of the PLL in radians/s."], [13, 2, 1, "", "omega_n", "The natural frequency of the PLL in radians/s."], [14, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [15, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [16, 2, 1, "", "sample_rate", "The sample rate of the PLL in samples/s."], [17, 2, 1, "", "zeta", "The damping factor of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[8, 4, 2, "p-K0", "K0", "The NCO gain."], [8, 4, 2, "p-Kp", "Kp", "The gain of the phase error detector (PED) or time error detector (TED)."], [8, 4, 2, "p-damping_factor", "damping_factor", "The damping factor of the loop filter. A damping factor of 1 is critically damped, less than 1 is underdamped, and greater than 1 is overdamped."], [8, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [8, 4, 2, "p-sample_rate", "sample_rate", "The sample rate of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[9, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[11, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[14, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio of the input signal in dB-Hz."]], "sdr.DDS": [[19, 3, 1, "", "__init__", "Creates a direct digital synthesizer (DDS)."], [20, 2, 1, "", "nco", "The numerically-controlled oscillator (NCO) used by the DDS."], [21, 3, 1, "", "process", "Steps the DDS with the variable phase increment signal $x[n]$."], [22, 3, 1, "", "reset", "Resets the DDS."], [23, 3, 1, "", "step", "Steps the DDS forward by $N$ samples."]], "sdr.DDS.__init__": [[19, 4, 2, "p-K0", "K0", "The NCO gain."], [19, 4, 2, "p-increment", "increment", "The constant accumulation of the NCO in radians/sample."], [19, 4, 2, "p-offset", "offset", "The absolute offset of the NCO in radians."]], "sdr.DDS.process": [[21, 4, 2, "p-x", "x", "The input signal, $x[n]$. The input signal varies the per-sample phase increment of the DDS."]], "sdr.DDS.step": [[23, 4, 2, "p-N", "N", "The number of samples to step the DDS forward."]], "sdr.FarrowResampler": [[25, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [26, 2, 1, "", "order", "Returns the order of the filter."], [27, 3, 1, "", "resample", "Resamples the input signal by the given arbitrary rate."], [28, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [29, 2, 1, "", "streaming", "Returns whether the filter is in streaming mode."], [30, 2, 1, "", "taps", "Returns the Farrow filter taps."]], "sdr.FarrowResampler.__init__": [[25, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to resample()."]], "sdr.FarrowResampler.resample": [[27, 4, 2, "p-rate", "rate", "The resampling rate, $r$."], [27, 4, 2, "p-x", "x", "The input signal, $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.reset": [[28, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[32, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [33, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [34, 2, 1, "", "a_taps", "Returns the feedback filter taps, $a_j$."], [35, 2, 1, "", "b_taps", "Returns the feedforward filter taps, $b_i$."], [36, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the IIR filter."], [37, 3, 1, "", "frequency_response", "Returns the frequency response $H(e^{j2 pi f})$ of the IIR filter."], [38, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(e^{j2 pi f})$ of the IIR filter on a logarithmic frequency axis"], [39, 2, 1, "", "gain", "Returns the gain of the IIR filter."], [40, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter."], [41, 2, 1, "", "order", "Returns the order of the IIR filter, $N - 1$."], [42, 3, 1, "", "plot_all", "Plots the zeros and poles, impulse response, step response, and frequency response of the IIR filter in a single figure."], [43, 3, 1, "", "plot_frequency_response", "Plots the frequency response $H(omega)$ of the IIR filter."], [44, 3, 1, "", "plot_frequency_response_log", "Plots the frequency response $H(omega)$ of the IIR filter on a logarithmic frequency axis."], [45, 3, 1, "", "plot_group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [46, 3, 1, "", "plot_impulse_response", "Plots the impulse response $h[n]$ of the IIR filter."], [47, 3, 1, "", "plot_step_response", "Plots the step response $s[n]$ of the IIR filter."], [48, 3, 1, "", "plot_zeros_poles", "Plots the zeros and poles of the IIR filter."], [49, 2, 1, "", "poles", "Returns the poles of the IIR filter."], [50, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [51, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter."], [52, 2, 1, "", "streaming", "Returns whether the filter is in streaming mode."], [53, 2, 1, "", "zeros", "Returns the zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[32, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [32, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [32, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to filter()."], [32, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__init__": [[33, 4, 2, "p-a", "a", "Feedback coefficients, $a_j$."], [33, 4, 2, "p-b", "b", "Feedforward coefficients, $b_i$."], [33, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to filter()."]], "sdr.IIR.filter": [[36, 4, 2, "p-x", "x", "The input signal, $x[n]$."]], "sdr.IIR.frequency_response": [[37, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [37, 4, 2, "p-sample_rate", "sample_rate", "The sample rate of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[38, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [38, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [38, 4, 2, "p-sample_rate", "sample_rate", "The sample rate of the filter in samples/s."]], "sdr.IIR.impulse_response": [[40, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.plot_all": [[42, 4, 2, "p-N_freq", "N_freq", "The number of samples in the frequency response."], [42, 4, 2, "p-N_time", "N_time", "The number of samples in the impulse and step responses."], [42, 4, 2, "p-sample_rate", "sample_rate", "The sample rate of the filter in samples/s."]], "sdr.IIR.plot_frequency_response": [[43, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [43, 4, 2, "p-phase", "phase", "Indicates whether to plot the phase of $H(omega)$."], [43, 4, 2, "p-sample_rate", "sample_rate", "The sample rate of the filter in samples/s."]], "sdr.IIR.plot_frequency_response_log": [[44, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [44, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [44, 4, 2, "p-phase", "phase", "Indicates whether to plot the phase of $H(omega)$."], [44, 4, 2, "p-sample_rate", "sample_rate", "The sample rate of the filter in samples/s."]], "sdr.IIR.plot_group_delay": [[45, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [45, 4, 2, "p-sample_rate", "sample_rate", "The sample rate of the filter in samples/s."]], "sdr.IIR.plot_impulse_response": [[46, 4, 2, "p-N", "N", "The number of samples in the impulse response."]], "sdr.IIR.plot_step_response": [[47, 4, 2, "p-N", "N", "The number of samples in the step response."]], "sdr.IIR.step_response": [[51, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.LoopFilter": [[55, 2, 1, "", "K1", "The proportional gain of the loop filter."], [56, 2, 1, "", "K2", "The integral gain of the loop filter."], [57, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [58, 2, 1, "", "damping_factor", "The damping factor of the loop filter. A damping factor of 1 is critically damped, less than 1 is underdamped, and greater than 1 is overdamped."], [59, 3, 1, "", "filter", "Filters the input signal $x[n]$."], [60, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [61, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [62, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__init__": [[57, 4, 2, "p-K0", "K0", "The NCO gain."], [57, 4, 2, "p-Kp", "Kp", "The gain of the phase error detector (PED) or time error detector (TED)."], [57, 4, 2, "p-damping_factor", "damping_factor", "The damping factor of the loop filter. A damping factor of 1 is critically damped, less than 1 is underdamped, and greater than 1 is overdamped."], [57, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.LoopFilter.filter": [[59, 4, 2, "p-x", "x", "The input signal, $x[n]$."]], "sdr.NCO": [[64, 2, 1, "", "K0", "The NCO gain."], [65, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [66, 2, 1, "", "increment", "The constant accumulation of the NCO in units/sample."], [67, 2, 1, "", "offset", "The absolute offset of the NCO in units."], [68, 3, 1, "", "process", "Steps the NCO with the variable-increment signal $x[n]$."], [69, 3, 1, "", "reset", "Resets the NCO."], [70, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__init__": [[65, 4, 2, "p-K0", "K0", "The NCO gain."], [65, 4, 2, "p-increment", "increment", "The constant accumulation of the NCO in units/sample."], [65, 4, 2, "p-offset", "offset", "The absolute offset of the NCO in units."]], "sdr.NCO.process": [[68, 4, 2, "p-x", "x", "The input signal, $x[n]$. The input signal varies the per-sample increment of the NCO."]], "sdr.NCO.step": [[70, 4, 2, "p-N", "N", "The number of samples to step the NCO forward."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"]}, "titleterms": {"sdr": [0, 74], "filter": [0, 72, 73], "resampl": [0, 71], "phase": [0, 73], "time": [0, 73], "lock": [0, 73], "loop": [0, 73], "note": 1, "constructor": [1, 18, 24, 31, 54, 63], "method": [1, 18, 24, 31, 54, 63], "properti": [1, 18, 24, 31, 54, 63], "see": [18, 63], "also": [18, 63], "plot": 31, "farrow": 71, "arbitrari": 71, "construct": 71, "an": [71, 72], "input": 71, "signal": 71, "x": 71, "n": [71, 72], "t_": 71, "rate": 71, "r": 71, "y": 71, "frac": 71, "upsampl": 71, "integ": 71, "downsampl": 71, "irrat": 71, "iir": 72, "creat": 72, "examin": 72, "impuls": 72, "respons": [72, 73], "h": 72, "step": [72, 73], "": 72, "zero": 72, "pole": 72, "frequenc": [72, 73], "omega": 72, "group": 72, "delai": 72, "tau_g": 72, "fulli": 72, "analyz": [72, 73], "digit": 72, "stabil": 72, "design": 73, "proport": 73, "plu": 73, "integr": 73, "ppi": 73, "implement": 73, "pll": 73, "domain": 73, "close": 73, "perform": 73, "compar": 73, "across": 73, "zeta": 73, "b_n": 73, "t": 73, "featur": 74, "version": 75, "alpha": 75, "releas": 75, "beta": 75}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"sdr": [[0, "sdr"], [74, "sdr"]], "Filtering": [[0, "filtering"]], "Resampling": [[0, "resampling"]], "Phase/time-locked loops": [[0, "phase-time-locked-loops"]], "Note": [[1, null]], "Constructors": [[1, "constructors"], [18, "constructors"], [24, "constructors"], [31, "constructors"], [54, "constructors"], [63, "constructors"]], "Methods": [[1, "methods"], [18, "methods"], [24, "methods"], [31, "methods"], [54, "methods"], [63, "methods"]], "Properties": [[1, "properties"], [18, "properties"], [24, "properties"], [31, "properties"], [54, "properties"], [63, "properties"]], "See also": [[18, null], [63, null]], "Plotting": [[31, "plotting"]], "Farrow arbitrary resampler": [[71, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[71, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[71, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[71, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[71, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[71, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[71, "downsample-by-an-irrational-rate"]], "IIR filters": [[72, "iir-filters"]], "Create an IIR filter": [[72, "create-an-iir-filter"]], "Examine the impulse response, h[n]": [[72, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[72, "examine-the-step-response-s-n"]], "Examine the zeros and poles": [[72, "examine-the-zeros-and-poles"]], "Examine the frequency response, H(\\omega)": [[72, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[72, "examine-the-group-delay-tau-g-omega"]], "Fully analyze an IIR filter": [[72, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[72, "poles-and-digital-filter-stability"]], "Phase-locked loops": [[73, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[73, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[73, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[73, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[73, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[73, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[73, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[73, "compare-lock-time-across-b-n-t"]], "Features": [[74, "features"]], "Versioning": [[75, "versioning"]], "Alpha releases": [[75, "alpha-releases"]], "Beta releases": [[75, "beta-releases"]]}, "indexentries": {"module": [[0, "module-sdr"]], "sdr": [[0, "module-sdr"]]}, "docurls": ["api/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.DDS/", "api/sdr.DDS.__init__/", "api/sdr.DDS.nco/", "api/sdr.DDS.process/", "api/sdr.DDS.reset/", "api/sdr.DDS.step/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.resample/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__init__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.filter/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.plot_all/", "api/sdr.IIR.plot_frequency_response/", "api/sdr.IIR.plot_frequency_response_log/", "api/sdr.IIR.plot_group_delay/", "api/sdr.IIR.plot_impulse_response/", "api/sdr.IIR.plot_step_response/", "api/sdr.IIR.plot_zeros_poles/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.filter/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.process/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "examples/farrow-resampler/", "examples/iir-filter/", "examples/phase-locked-loop/", "", "release-notes/versioning/"]})