Search.setIndex({"titles": ["Conversions", "Data manipulation", "Detection", "Digital signal processing", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.Decimator", "sdr.Decimator.__call__", "sdr.Decimator.__init__", "sdr.Decimator.__repr__", "sdr.Decimator.__str__", "sdr.Decimator.delay", "sdr.Decimator.method", "sdr.Decimator.polyphase_taps", "sdr.Decimator.rate", "sdr.Decimator.reset", "sdr.Decimator.taps", "sdr.Differentiator", "sdr.Differentiator.__init__", "sdr.EnergyDetector", "sdr.EnergyDetector.p_d", "sdr.EnergyDetector.p_fa", "sdr.EnergyDetector.roc", "sdr.EnergyDetector.threshold", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__call__", "sdr.FIR.__init__", "sdr.FIR.__len__", "sdr.FIR.__repr__", "sdr.FIR.__str__", "sdr.FIR.delay", "sdr.FIR.flush", "sdr.FIR.frequency_response", "sdr.FIR.frequency_response_log", "sdr.FIR.group_delay", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.reset", "sdr.FIR.state", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__call__", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__call__", "sdr.IIR.__init__", "sdr.IIR.__repr__", "sdr.IIR.__str__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.state", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.Integrator", "sdr.Integrator.__init__", "sdr.Interpolator", "sdr.Interpolator.__call__", "sdr.Interpolator.__init__", "sdr.Interpolator.__repr__", "sdr.Interpolator.__str__", "sdr.Interpolator.delay", "sdr.Interpolator.method", "sdr.Interpolator.polyphase_taps", "sdr.Interpolator.rate", "sdr.Interpolator.reset", "sdr.Interpolator.taps", "sdr.LinearModulation", "sdr.LinearModulation.__init__", "sdr.LinearModulation.__repr__", "sdr.LinearModulation.__str__", "sdr.LinearModulation.ber", "sdr.LinearModulation.bps", "sdr.LinearModulation.decide_symbols", "sdr.LinearModulation.demodulate", "sdr.LinearModulation.map_symbols", "sdr.LinearModulation.modulate", "sdr.LinearModulation.order", "sdr.LinearModulation.phase_offset", "sdr.LinearModulation.pulse_shape", "sdr.LinearModulation.rx_filter", "sdr.LinearModulation.ser", "sdr.LinearModulation.sps", "sdr.LinearModulation.symbol_map", "sdr.LinearModulation.tx_filter", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__call__", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.MSK", "sdr.MSK.__init__", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__call__", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.reset", "sdr.NCO.step", "sdr.OQPSK", "sdr.OQPSK.__init__", "sdr.OQPSK.__repr__", "sdr.OQPSK.__str__", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.__repr__", "sdr.PSK.__str__", "sdr.PSK.ber", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.PiMPSK", "sdr.PiMPSK.__init__", "sdr.Q", "sdr.Qinv", "sdr.ReplicaCorrelator", "sdr.ReplicaCorrelator.p_d", "sdr.ReplicaCorrelator.p_fa", "sdr.ReplicaCorrelator.roc", "sdr.ReplicaCorrelator.threshold", "sdr.Resampler", "sdr.Resampler.__call__", "sdr.Resampler.__init__", "sdr.Resampler.__repr__", "sdr.Resampler.__str__", "sdr.Resampler.delay", "sdr.Resampler.down", "sdr.Resampler.method", "sdr.Resampler.polyphase_taps", "sdr.Resampler.rate", "sdr.Resampler.reset", "sdr.Resampler.taps", "sdr.Resampler.up", "sdr.albersheim", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.barker", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.db", "sdr.design_bandpass_fir", "sdr.design_bandstop_fir", "sdr.design_frac_delay_fir", "sdr.design_highpass_fir", "sdr.design_lowpass_fir", "sdr.design_multirate_fir", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.downsample", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.euclidean", "sdr.evm", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.half_sine", "sdr.hamming", "sdr.hexdump", "sdr.iq_imbalance", "sdr.linear", "sdr.mix", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.percent", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.eye", "sdr.plot.filter", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.magnitude_response", "sdr.plot.p_d", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.phase_tree", "sdr.plot.raster", "sdr.plot.roc", "sdr.plot.ser", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.polyphase_decompose", "sdr.ppb", "sdr.ppm", "sdr.raised_cosine", "sdr.rectangular", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.to_complex_bb", "sdr.to_real_pb", "sdr.unpack", "sdr.upsample", "sdr.wavelength", "sdr.zadoff_chu", "Sequences", "Simulation", "Synchronization", "Documentation", "Formatting", "Installation", "Unit Tests", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277], "db": [0, 4, 5, 9, 20, 22, 40, 42, 44, 46, 47, 48, 50, 112, 122, 135, 145, 149, 153, 155, 157, 162, 164, 179, 180, 181, 182, 190, 191, 192, 193, 194, 195, 196, 201, 202, 203, 204, 205, 207, 209, 210, 215, 216, 219, 220, 221, 222, 224, 225, 231, 238, 250, 253, 254, 271, 273, 274, 276], "x": [0, 1, 3, 5, 6, 7, 8, 9, 26, 27, 37, 39, 44, 46, 51, 52, 69, 70, 76, 78, 95, 97, 98, 108, 115, 117, 126, 129, 135, 145, 149, 157, 159, 160, 161, 166, 167, 180, 181, 184, 187, 189, 190, 197, 198, 199, 200, 203, 206, 207, 208, 213, 215, 216, 217, 218, 219, 221, 222, 223, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 239, 241, 242, 246, 247, 250, 252, 257, 258, 262, 266, 271, 272, 273, 277], "arraylik": [0, 1, 2, 3, 4, 5, 6, 7, 8, 26, 27, 28, 37, 39, 40, 41, 42, 43, 44, 46, 51, 52, 53, 69, 73, 76, 77, 78, 79, 95, 97, 98, 99, 108, 109, 112, 114, 115, 116, 117, 122, 135, 136, 145, 146, 149, 150, 153, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 179, 182, 184, 185, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 207, 208, 209, 214, 216, 218, 220, 223, 227, 228, 229, 230, 231, 232, 233, 234, 237, 239, 240, 244, 245, 246, 247, 253, 254, 257, 259, 262], "ndarrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 26, 27, 33, 36, 37, 39, 40, 41, 42, 43, 44, 49, 51, 52, 58, 59, 60, 61, 62, 65, 66, 68, 69, 70, 75, 76, 78, 82, 83, 84, 85, 87, 89, 91, 92, 94, 95, 97, 98, 104, 107, 108, 112, 114, 115, 116, 117, 120, 122, 124, 126, 129, 135, 137, 139, 144, 145, 149, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 174, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 235, 236, 238, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "float_": [0, 2, 3, 4, 5, 6, 7, 8, 39, 40, 41, 42, 43, 44, 49, 108, 112, 120, 122, 135, 139, 145, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165, 179, 182, 185, 188, 190, 191, 192, 193, 194, 195, 196, 201, 202, 203, 204, 205, 209, 210, 212, 216, 220, 223, 224, 238, 246, 247, 248, 249, 251, 253, 254, 255, 256, 259], "convert": [0, 3, 108, 114, 116, 135, 145, 149, 157, 190, 201, 202, 204, 205, 214, 216, 223, 246, 247, 253, 254, 255, 256], "linear": [0, 97, 99, 103, 108, 109, 135, 145, 149, 157, 166, 168, 173, 181, 190, 216, 230, 232, 237, 239, 241, 275, 276], "unit": [0, 26, 37, 51, 66, 76, 92, 95, 97, 126, 136, 137, 146, 150, 158, 166, 181, 182, 190, 197, 198, 216, 240, 242, 266, 269, 270, 272, 275, 276], "percent": [0, 223, 276], "percentag": [0, 223], "ppm": [0, 247, 252, 262, 276], "part": [0, 242, 246, 247, 252, 272], "per": [0, 1, 27, 52, 98, 108, 109, 113, 115, 117, 123, 135, 136, 139, 145, 146, 149, 150, 157, 158, 181, 182, 201, 202, 204, 205, 208, 210, 212, 214, 218, 225, 226, 235, 246, 247, 248, 249, 251, 252, 253, 254, 257, 265, 271, 274, 276], "million": [0, 247, 252], "ppb": [0, 246, 276], "billion": [0, 246], "ebn0_to_esn0": [0, 122, 155, 201, 273, 276], "ebn0": [0, 7, 108, 112, 135, 145, 149, 153, 157, 182, 201, 202, 224, 273], "bp": [0, 108, 113, 135, 145, 149, 157, 201, 202, 204, 253, 273], "int": [0, 1, 3, 6, 7, 26, 28, 31, 34, 37, 44, 46, 47, 50, 51, 54, 57, 59, 60, 61, 62, 63, 66, 69, 72, 76, 84, 85, 87, 88, 92, 95, 97, 99, 102, 105, 108, 109, 113, 118, 123, 135, 136, 137, 144, 145, 146, 149, 150, 157, 158, 166, 168, 171, 172, 178, 180, 181, 183, 184, 186, 187, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 210, 211, 212, 213, 214, 218, 219, 221, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 239, 240, 245, 248, 249, 251, 253, 254, 257, 258, 260, 261, 273], "ebn0_to_snr": [0, 135, 145, 149, 157, 202, 276], "esn0_to_ebn0": [0, 112, 153, 204, 276], "esn0": [0, 7, 108, 122, 135, 145, 149, 155, 157, 204, 205, 238, 273], "esn0_to_snr": [0, 205, 273, 276], "sp": [0, 6, 7, 108, 109, 115, 117, 123, 135, 136, 145, 146, 149, 150, 157, 158, 202, 205, 210, 212, 226, 235, 248, 249, 251, 253, 254, 255, 256, 271, 273, 274], "1": [0, 6, 8, 9, 16, 19, 23, 25, 26, 28, 29, 30, 33, 36, 37, 39, 40, 42, 43, 44, 51, 54, 55, 56, 57, 59, 60, 61, 76, 77, 80, 81, 84, 85, 95, 97, 98, 99, 100, 101, 104, 107, 108, 109, 114, 115, 116, 117, 124, 126, 130, 131, 135, 136, 137, 140, 145, 146, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 174, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 223, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 277], "snr_to_ebn0": [0, 112, 153, 182, 253, 276], "snr": [0, 2, 4, 7, 39, 40, 42, 44, 46, 47, 48, 49, 50, 135, 145, 149, 157, 179, 181, 182, 231, 253, 254, 255, 256, 262, 273, 276], "snr_to_esn0": [0, 122, 155, 254, 276], "pack": [1, 44, 46, 135, 145, 149, 157, 214, 218, 275, 276], "bpe": [1, 218, 257], "int_": [1, 5, 6, 108, 114, 115, 135, 145, 149, 157, 184, 186, 187, 197, 198, 199, 211, 213, 218, 257, 262], "binari": [1, 4, 6, 136, 146, 150, 156, 158, 183, 184, 185, 186, 187, 188, 199, 218, 241, 257, 262, 273, 275, 276], "arrai": [1, 33, 36, 44, 99, 104, 107, 109, 135, 136, 137, 145, 146, 149, 150, 156, 157, 158, 168, 174, 177, 180, 183, 184, 186, 187, 197, 198, 199, 203, 206, 211, 213, 218, 219, 221, 242, 245, 257, 270], "an": [1, 2, 3, 4, 26, 37, 39, 51, 62, 76, 77, 79, 87, 95, 96, 97, 98, 109, 136, 137, 146, 150, 153, 155, 158, 161, 166, 182, 193, 218, 224, 229, 238, 257, 259, 266, 275, 276], "multipl": [1, 218, 257, 273, 276], "bit": [1, 5, 7, 44, 46, 49, 108, 112, 113, 135, 136, 145, 146, 149, 150, 153, 156, 157, 158, 182, 184, 185, 187, 188, 201, 202, 204, 214, 218, 224, 253, 257, 275, 276], "element": [1, 214, 218, 257], "unpack": [1, 44, 46, 214, 257, 273, 275, 276], "hexdump": [1, 44, 214, 275, 276], "byte": [1, 214], "width": [1, 193, 214], "16": [1, 153, 155, 156, 170, 193, 201, 202, 204, 207, 214, 224, 238, 245, 248, 251, 253, 254, 271, 276], "str": [1, 26, 29, 30, 37, 51, 55, 56, 76, 80, 81, 95, 97, 100, 101, 108, 110, 111, 135, 145, 147, 148, 149, 151, 152, 157, 166, 169, 170, 214, 226, 232, 235, 236, 239], "return": [1, 6, 9, 17, 19, 22, 23, 26, 27, 29, 30, 37, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 66, 70, 76, 78, 80, 81, 84, 85, 87, 92, 95, 97, 98, 100, 101, 108, 110, 111, 112, 114, 115, 116, 117, 122, 129, 135, 139, 144, 145, 147, 148, 149, 151, 152, 153, 155, 157, 159, 160, 162, 163, 164, 165, 166, 169, 170, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 269, 270, 271, 273, 276], "specifi": [1, 44, 47, 48, 50, 181, 182, 199, 214, 264, 269, 270, 276], "class": [2, 3, 5, 6, 9, 26, 37, 39, 44, 46, 47, 48, 49, 50, 51, 69, 76, 95, 97, 108, 126, 135, 137, 145, 149, 157, 161, 166, 263, 269, 270, 273, 275, 276], "replicacorrel": [2, 161, 162, 163, 164, 165, 276], "implement": [2, 3, 6, 26, 37, 39, 51, 69, 76, 95, 97, 108, 126, 132, 135, 137, 145, 149, 157, 161, 166, 179, 263, 268], "clairvoy": [2, 161], "replica": [2, 161], "correl": [2, 161, 183, 260], "energydetector": [2, 39, 40, 41, 42, 43, 276], "energi": [2, 39, 112, 122, 153, 155, 161, 162, 163, 164, 165, 182, 201, 202, 203, 204, 205, 210, 212, 224, 238, 248, 249, 251, 253, 254, 275, 276], "albersheim": [2, 179, 276], "p_d": [2, 7, 39, 40, 42, 161, 162, 164, 179, 231, 237, 276], "p_fa": [2, 7, 39, 40, 41, 42, 43, 161, 162, 163, 164, 165, 179, 237], "estim": [2, 9, 108, 114, 115, 135, 145, 149, 157, 179, 232, 239, 272], "minimum": [2, 6, 135, 179, 276], "requir": [2, 27, 52, 98, 179, 264, 265, 266, 267, 276], "singl": [2, 42, 153, 155, 179], "sampl": [2, 3, 9, 16, 24, 26, 27, 31, 37, 40, 41, 42, 43, 51, 52, 57, 59, 60, 61, 62, 66, 69, 73, 84, 85, 87, 92, 97, 98, 99, 102, 108, 109, 115, 117, 123, 126, 130, 133, 135, 136, 137, 139, 140, 141, 143, 144, 145, 146, 149, 150, 157, 158, 166, 168, 171, 179, 181, 200, 202, 205, 208, 210, 212, 217, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 239, 240, 242, 248, 249, 251, 252, 253, 254, 255, 256, 258, 262, 268, 271, 272, 274, 275, 276], "given": [2, 39, 44, 46, 47, 48, 50, 69, 70, 161, 179, 207, 269, 270], "n_": [2, 40, 41, 42, 43, 179], "nc": [2, 40, 41, 42, 43, 179], "non": [2, 27, 40, 41, 42, 43, 52, 98, 179, 212, 249], "coher": [2, 40, 41, 42, 43, 179], "combin": [2, 179], "achiev": [2, 179, 273, 274], "probabl": [2, 7, 39, 40, 41, 42, 43, 159, 160, 161, 162, 163, 164, 165, 179, 184, 185, 187, 188, 199, 231, 237, 262, 276], "fals": [2, 5, 26, 28, 29, 30, 37, 38, 39, 40, 41, 42, 43, 51, 53, 55, 56, 69, 71, 76, 77, 79, 80, 81, 95, 96, 97, 98, 99, 100, 101, 135, 145, 149, 153, 155, 157, 161, 162, 163, 164, 165, 166, 168, 169, 170, 179, 180, 184, 187, 199, 203, 217, 221, 222, 225, 232, 237, 239, 242, 250, 270, 274], "alarm": [2, 39, 40, 41, 42, 43, 161, 162, 163, 164, 165, 179, 237], "p_": [2, 7, 39, 40, 41, 42, 43, 153, 155, 161, 162, 163, 164, 165, 179, 180, 181, 190, 199, 207, 216, 219, 221, 224, 232, 237, 238], "fa": [2, 7, 39, 40, 41, 42, 43, 161, 162, 163, 164, 165, 179, 237], "thi": [2, 9, 26, 46, 47, 48, 50, 51, 76, 97, 99, 108, 109, 124, 135, 139, 145, 146, 149, 150, 156, 157, 158, 166, 168, 179, 181, 182, 184, 187, 199, 200, 207, 209, 226, 230, 232, 236, 239, 242, 258, 264, 266, 267, 268, 270, 272, 273, 274], "function": [2, 7, 8, 9, 18, 37, 51, 76, 77, 95, 126, 159, 160, 179, 182, 200, 210, 224, 231, 232, 237, 238, 239, 258, 269, 270, 272, 274, 275, 276], "": [2, 3, 7, 9, 17, 19, 20, 21, 23, 24, 26, 37, 39, 46, 47, 48, 49, 50, 51, 59, 60, 61, 66, 76, 84, 85, 92, 95, 97, 108, 109, 114, 115, 116, 117, 135, 145, 149, 157, 161, 163, 165, 166, 179, 181, 182, 202, 205, 207, 208, 215, 225, 226, 227, 228, 230, 232, 233, 234, 235, 236, 239, 240, 242, 243, 252, 253, 254, 255, 256, 267, 268, 271, 273, 275, 276], "equat": [2, 17, 19, 20, 21, 22, 23, 40, 41, 43, 76, 145, 149, 157, 162, 163, 165, 179, 209], "finit": [3, 51, 275, 276], "impuls": [3, 7, 26, 37, 51, 62, 76, 87, 95, 97, 166, 191, 192, 193, 194, 195, 196, 210, 227, 229, 242, 274, 275, 276], "respons": [3, 7, 26, 37, 51, 59, 60, 62, 66, 76, 84, 85, 87, 92, 95, 97, 166, 191, 192, 193, 194, 195, 196, 210, 227, 228, 229, 230, 234, 240, 274, 275, 276], "differenti": [3, 6, 37, 38, 135, 153, 155, 197, 198, 242, 275, 276], "design_lowpass_fir": [3, 195, 276], "order": [3, 9, 26, 27, 30, 37, 44, 49, 51, 52, 56, 63, 69, 72, 76, 81, 88, 95, 97, 98, 99, 101, 108, 109, 118, 126, 130, 135, 145, 149, 150, 157, 158, 166, 168, 170, 181, 191, 192, 194, 195, 201, 202, 204, 207, 208, 210, 225, 226, 235, 236, 248, 251, 252, 253, 263, 270, 271, 272, 273, 276], "design": [3, 26, 28, 32, 97, 99, 103, 109, 146, 150, 158, 166, 168, 173, 191, 192, 193, 194, 195, 196, 264, 275, 276], "lowpass": [3, 195], "h": [3, 7, 26, 37, 39, 51, 53, 55, 56, 59, 60, 62, 76, 84, 85, 87, 95, 97, 108, 109, 120, 121, 125, 126, 135, 145, 146, 149, 150, 157, 158, 161, 166, 191, 192, 193, 194, 195, 196, 210, 226, 227, 229, 230, 234, 245, 271, 272, 274], "n": [3, 5, 6, 7, 8, 9, 26, 27, 37, 39, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 76, 78, 79, 82, 84, 85, 87, 88, 92, 95, 97, 98, 108, 109, 115, 117, 120, 121, 125, 126, 129, 135, 137, 139, 144, 145, 146, 149, 150, 157, 158, 159, 160, 161, 163, 165, 166, 167, 180, 181, 182, 183, 186, 189, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 213, 215, 217, 219, 221, 222, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 239, 240, 242, 250, 252, 253, 254, 255, 256, 258, 260, 261, 262, 272, 274, 275], "us": [3, 7, 26, 28, 32, 35, 37, 38, 51, 53, 58, 64, 69, 71, 76, 77, 79, 90, 95, 96, 97, 98, 99, 103, 106, 108, 109, 114, 115, 126, 132, 135, 145, 146, 149, 150, 157, 158, 166, 168, 173, 176, 182, 185, 188, 191, 192, 193, 194, 195, 196, 207, 214, 218, 225, 226, 227, 229, 231, 232, 239, 240, 257, 264, 265, 266, 267, 269, 270, 273, 274, 275, 277], "window": [3, 26, 97, 166, 191, 192, 193, 194, 195, 196, 232, 239, 276], "method": [3, 7, 30, 32, 99, 101, 103, 168, 170, 173, 191, 192, 193, 194, 195, 196, 232, 239, 269, 270, 276], "design_highpass_fir": [3, 194, 276], "highpass": [3, 194], "design_bandpass_fir": [3, 191, 276], "bandpass": [3, 191], "design_bandstop_fir": [3, 192, 276], "bandstop": [3, 192], "infinit": [3, 76, 275, 276], "integr": [3, 9, 14, 40, 41, 42, 43, 95, 96, 126, 128, 130, 179, 263, 267, 270, 275, 276], "interpol": [3, 26, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 125, 135, 145, 149, 157, 166, 168, 178, 196, 226, 258, 271, 273, 275, 276], "polyphas": [3, 26, 27, 28, 33, 36, 97, 98, 99, 104, 107, 166, 167, 168, 174, 177, 196, 200, 245, 258, 275, 276], "decim": [3, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 108, 109, 114, 115, 116, 117, 121, 124, 135, 136, 145, 146, 149, 150, 156, 157, 158, 166, 168, 172, 196, 200, 273, 275, 276], "ration": [3, 166, 168, 196, 276], "design_multirate_fir": [3, 28, 99, 168, 196, 276], "up": [3, 166, 168, 178, 196, 209, 265], "kaiser": [3, 26, 28, 29, 30, 32, 97, 98, 99, 100, 101, 103, 166, 168, 169, 170, 173, 191, 192, 193, 194, 195, 196], "polyphase_decompos": [3, 245, 276], "tap": [3, 26, 28, 33, 36, 37, 51, 56, 68, 69, 75, 76, 82, 83, 95, 97, 99, 104, 107, 166, 168, 174, 177, 245, 269, 270], "phase": [3, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 108, 109, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 153, 154, 155, 156, 157, 158, 179, 208, 215, 217, 233, 234, 235, 245, 262, 275, 276], "decompos": [3, 26, 97, 166, 245], "h_i": [3, 26, 28, 33, 36, 37, 51, 53, 68, 97, 99, 104, 107, 166, 168, 174, 177, 245, 269], "matrix": [3, 199, 245, 262], "h_": [3, 9, 26, 33, 36, 97, 104, 107, 166, 174, 177, 245, 272], "i": [3, 9, 16, 25, 26, 27, 28, 33, 36, 37, 39, 41, 42, 43, 44, 49, 51, 52, 53, 62, 66, 67, 68, 69, 74, 76, 79, 83, 87, 92, 93, 95, 97, 98, 99, 104, 107, 109, 126, 130, 131, 133, 135, 139, 143, 145, 146, 149, 150, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 174, 177, 179, 180, 181, 182, 184, 185, 187, 188, 190, 191, 192, 193, 194, 195, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 232, 233, 234, 236, 239, 240, 242, 245, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277], "j": [3, 26, 33, 36, 76, 79, 82, 95, 97, 104, 107, 135, 137, 145, 149, 157, 166, 174, 177, 181, 199, 215, 217, 245, 260, 269, 270, 272], "b": [3, 76, 79, 179, 182, 210, 214, 227, 229, 240, 245, 264, 265, 274], "farrowresampl": [3, 69, 70, 71, 72, 73, 74, 75, 268, 276], "cubic": [3, 69], "farrow": [3, 69, 70, 71, 72, 73, 74, 75, 275, 276], "design_frac_delay_fir": [3, 193, 276], "length": [3, 6, 7, 26, 27, 37, 42, 51, 52, 54, 62, 66, 78, 97, 98, 99, 109, 115, 117, 136, 146, 150, 158, 166, 168, 183, 186, 191, 192, 193, 194, 195, 196, 210, 211, 212, 227, 229, 232, 236, 239, 240, 248, 249, 251, 255, 260, 261, 265, 268, 271, 274], "delai": [3, 7, 26, 27, 30, 31, 37, 51, 52, 56, 57, 61, 69, 97, 98, 101, 102, 126, 137, 166, 170, 171, 193, 197, 198, 212, 228, 233, 249, 272, 275, 276], "fraction": [3, 69, 73, 193, 210, 268, 275, 276], "mix": [3, 217, 275, 276], "freq": [3, 4, 137, 139, 208, 209, 217, 220, 259, 262, 268, 272], "float": [3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 42, 44, 46, 47, 48, 50, 59, 60, 61, 69, 70, 76, 77, 84, 85, 86, 95, 108, 109, 119, 126, 127, 128, 130, 131, 133, 135, 136, 137, 138, 140, 141, 142, 145, 146, 149, 150, 154, 157, 158, 164, 166, 175, 180, 181, 182, 184, 187, 189, 191, 192, 193, 194, 195, 196, 207, 208, 210, 215, 217, 219, 221, 222, 225, 226, 227, 228, 230, 232, 233, 234, 235, 236, 239, 241, 242, 248, 250, 251, 252, 262], "0": [3, 6, 8, 16, 26, 27, 33, 36, 37, 39, 42, 44, 51, 52, 53, 55, 56, 59, 60, 61, 68, 76, 77, 79, 80, 81, 82, 83, 84, 85, 95, 97, 98, 99, 104, 107, 108, 109, 114, 115, 116, 117, 124, 130, 135, 136, 137, 140, 145, 146, 149, 150, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 174, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 202, 203, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 220, 223, 225, 226, 227, 228, 229, 230, 233, 234, 235, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 277], "time": [3, 5, 9, 16, 17, 19, 20, 21, 22, 23, 37, 51, 76, 95, 126, 130, 145, 149, 157, 180, 181, 189, 191, 192, 194, 195, 199, 200, 203, 205, 206, 208, 210, 213, 215, 217, 219, 221, 222, 226, 227, 232, 236, 239, 242, 248, 250, 251, 252, 254, 255, 256, 258, 262, 268, 269, 270, 274, 275, 276], "domain": [3, 5, 180, 181, 189, 191, 192, 194, 195, 200, 203, 206, 208, 213, 215, 217, 219, 221, 222, 227, 232, 236, 239, 242, 250, 252, 255, 256, 258, 262, 275, 276], "complex": [3, 5, 7, 39, 40, 41, 42, 43, 108, 109, 114, 115, 116, 117, 124, 135, 136, 137, 139, 144, 145, 146, 149, 150, 156, 157, 158, 161, 162, 163, 164, 165, 181, 182, 200, 207, 215, 217, 225, 226, 228, 230, 233, 234, 236, 241, 242, 255, 256, 258, 262, 268, 269, 270, 272, 273, 275, 276], "exponenti": [3, 200, 217, 255, 256, 258, 268, 269, 270], "real": [3, 40, 41, 43, 135, 145, 159, 160, 162, 163, 165, 181, 217, 226, 228, 230, 233, 234, 236, 242, 255, 256, 268, 269, 270, 272, 275, 276], "sinusoid": [3, 149, 181, 217, 255, 256, 270, 276], "to_complex_bb": [3, 255, 276], "x_r": [3, 255, 256], "complex_": [3, 7, 108, 115, 116, 117, 124, 135, 137, 139, 144, 145, 149, 156, 157, 225, 241, 255, 256, 260, 261], "passband": [3, 191, 192, 193, 194, 195, 210, 212, 248, 249, 251, 255, 256, 271, 276], "center": [3, 191, 192, 193, 194, 195, 212, 242, 249, 255, 256, 276], "f_": [3, 9, 16, 24, 27, 59, 60, 61, 84, 85, 98, 108, 109, 123, 135, 136, 145, 146, 149, 150, 157, 158, 191, 192, 194, 195, 200, 202, 205, 208, 210, 217, 226, 227, 228, 230, 232, 233, 234, 235, 236, 239, 242, 252, 253, 254, 255, 256, 258, 268, 269, 270, 272, 274], "r": [3, 26, 27, 28, 33, 34, 36, 69, 70, 97, 98, 99, 104, 105, 107, 182, 200, 201, 202, 204, 207, 210, 217, 248, 251, 253, 255, 256, 258, 264, 265, 266, 267, 270, 271, 272, 274], "4": [3, 7, 17, 19, 26, 33, 36, 37, 40, 42, 44, 60, 80, 81, 85, 95, 97, 98, 104, 107, 135, 136, 137, 145, 146, 149, 153, 154, 155, 156, 157, 161, 162, 163, 164, 165, 166, 169, 170, 174, 177, 179, 181, 182, 183, 185, 186, 188, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 217, 218, 220, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 238, 240, 241, 242, 243, 244, 245, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 260, 266, 268, 270, 271, 273], "rate": [3, 5, 7, 9, 16, 24, 26, 27, 28, 30, 34, 44, 45, 46, 48, 49, 59, 60, 61, 69, 70, 84, 85, 97, 98, 99, 101, 105, 108, 112, 122, 135, 145, 149, 153, 155, 157, 166, 167, 168, 170, 172, 175, 178, 196, 200, 201, 202, 204, 208, 217, 224, 226, 227, 228, 230, 232, 233, 234, 235, 236, 238, 239, 242, 252, 253, 255, 256, 258, 262, 275, 276], "baseband": [3, 7, 9, 135, 145, 149, 157, 217, 226, 235, 255, 256, 271, 272, 276], "x_c": [3, 255, 256], "c": [3, 9, 17, 19, 20, 21, 22, 23, 46, 47, 48, 49, 50, 108, 109, 124, 126, 135, 145, 149, 156, 157, 182, 185, 188, 209, 220, 241, 255, 256, 259, 272], "2": [3, 6, 7, 9, 17, 19, 22, 26, 29, 30, 33, 36, 37, 39, 40, 41, 42, 43, 44, 51, 55, 56, 57, 59, 60, 61, 80, 81, 84, 85, 95, 97, 98, 100, 101, 104, 107, 108, 109, 118, 135, 137, 145, 146, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 174, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 264, 267, 268, 269, 270, 271, 272, 273, 274], "to_real_pb": [3, 256, 271, 276], "2f_": [3, 256], "upsampl": [3, 97, 166, 258, 276], "factor": [3, 5, 9, 16, 25, 109, 126, 130, 131, 146, 150, 158, 189, 200, 258, 272], "downsampl": [3, 200, 276], "bsc_capac": [4, 188, 276], "p": [4, 8, 137, 139, 159, 160, 166, 168, 174, 175, 177, 178, 184, 185, 187, 188, 196, 199, 262], "calcul": [4, 5, 182, 185, 188, 207, 209, 220, 259, 276], "symmetr": [4, 187, 188, 199, 255, 256, 262, 275], "bsc": [4, 187, 188, 199, 262, 275, 276], "bec_capac": [4, 185, 276], "erasur": [4, 184, 185, 199, 262, 275], "bec": [4, 184, 185, 199, 262, 275, 276], "awgn_capac": [4, 182, 276], "addit": [4, 181, 182, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 258, 262, 275], "white": [4, 181, 182, 262, 275], "gaussian": [4, 6, 37, 95, 181, 182, 210, 262, 275, 276], "nois": [4, 9, 10, 11, 16, 22, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 112, 122, 126, 130, 133, 135, 145, 149, 153, 155, 157, 161, 162, 163, 164, 165, 181, 182, 201, 202, 204, 205, 224, 238, 253, 254, 262, 272, 275], "awgn": [4, 135, 145, 149, 153, 155, 157, 181, 182, 207, 224, 225, 238, 255, 256, 262, 273, 275, 276], "fspl": [4, 209], "distanc": [4, 206, 209, 213, 275, 276], "free": [4, 135, 145, 149, 157, 209, 275], "space": [4, 60, 85, 209, 275], "wavelength": [4, 259, 276], "lambda": [4, 209, 259], "electromagnet": [4, 259], "wave": [4, 135, 259], "frequenc": [4, 9, 17, 19, 21, 26, 37, 51, 59, 60, 61, 76, 84, 85, 95, 97, 126, 135, 137, 139, 166, 191, 192, 193, 194, 195, 200, 208, 209, 217, 220, 227, 228, 230, 232, 233, 234, 239, 255, 256, 258, 259, 262, 274, 275, 276], "f": [4, 17, 19, 26, 42, 59, 60, 61, 84, 85, 97, 137, 139, 166, 179, 181, 208, 209, 210, 217, 220, 252, 259, 260, 265, 268, 269, 270, 271, 272, 273, 274], "parabolic_antenna": [4, 220, 276], "tupl": [4, 26, 37, 39, 42, 44, 46, 49, 51, 59, 60, 61, 76, 84, 85, 95, 97, 108, 115, 135, 145, 149, 157, 161, 164, 166, 180, 203, 206, 213, 219, 220, 221, 225, 227, 228, 229, 230, 233, 234, 240, 241, 244], "gain": [4, 9, 12, 13, 14, 15, 16, 76, 77, 86, 95, 126, 127, 128, 130, 137, 138, 140, 179, 191, 192, 193, 194, 195, 209, 210, 212, 220, 248, 249, 251, 272, 275], "g": [4, 49, 220, 266], "beamwidth": [4, 220], "theta": [4, 137, 140, 142, 143, 220], "parabol": [4, 220], "reflector": [4, 220], "signal": [5, 7, 9, 17, 19, 22, 23, 26, 27, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 58, 69, 70, 76, 78, 95, 97, 98, 108, 109, 120, 126, 129, 135, 137, 139, 144, 145, 146, 149, 150, 157, 158, 161, 162, 163, 164, 165, 166, 167, 180, 181, 182, 189, 190, 191, 192, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 213, 215, 216, 217, 219, 220, 221, 222, 226, 227, 228, 230, 232, 233, 234, 235, 236, 239, 242, 245, 250, 252, 253, 254, 255, 256, 258, 259, 269, 270, 272, 274, 275, 276], "peak_pow": [5, 219, 221, 276], "peak": [5, 135, 145, 157, 189, 207, 219, 221, 222], "average_pow": [5, 180, 219, 276], "averag": [5, 44, 135, 145, 157, 180, 181, 182, 207, 219, 232], "papr": [5, 135, 145, 157, 219, 271, 276], "ratio": [5, 22, 40, 42, 44, 46, 47, 48, 49, 50, 112, 122, 135, 145, 153, 155, 157, 162, 164, 181, 182, 201, 202, 204, 205, 219, 223, 224, 238, 246, 247, 253, 254], "peak_voltag": [5, 189, 222, 276], "bool": [5, 26, 28, 37, 38, 40, 41, 42, 43, 51, 53, 67, 69, 71, 74, 76, 77, 79, 93, 95, 96, 97, 99, 135, 145, 149, 153, 155, 157, 162, 163, 164, 165, 166, 168, 180, 203, 217, 221, 222, 225, 234, 236, 241, 242, 250], "rms_voltag": [5, 189, 250, 276], "root": [5, 6, 109, 146, 150, 158, 207, 226, 242, 250, 251, 260, 261, 269, 275], "mean": [5, 207, 232, 239, 250, 274], "squar": [5, 6, 109, 146, 150, 158, 207, 209, 220, 242, 250, 251, 269], "rm": [5, 189, 207, 250], "crest_factor": [5, 189, 219, 276], "crest": [5, 189], "euclidean": [5, 206, 275, 276], "y": [5, 6, 26, 27, 37, 51, 52, 58, 70, 76, 78, 95, 97, 98, 126, 129, 137, 139, 144, 166, 181, 184, 187, 197, 198, 199, 200, 206, 208, 213, 215, 217, 225, 230, 232, 239, 241, 242, 252, 258, 272, 273], "between": [5, 26, 28, 38, 53, 67, 71, 74, 77, 79, 93, 96, 97, 99, 166, 168, 206, 209, 213, 232, 236, 239, 272, 275], "two": [5, 191, 192, 206, 213, 226, 227, 228, 230, 232, 233, 234, 239, 260, 268, 269, 270], "ham": [5, 191, 192, 194, 195, 213, 275, 276], "errorr": [5, 44, 45, 46, 47, 48, 49, 50, 273, 276], "A": [5, 9, 17, 19, 20, 21, 22, 23, 25, 27, 37, 44, 51, 52, 95, 98, 109, 126, 146, 150, 158, 179, 186, 191, 192, 194, 195, 211, 214, 215, 220, 248, 251, 263, 265, 272], "error": [5, 7, 9, 15, 16, 22, 44, 45, 46, 48, 49, 50, 108, 112, 122, 126, 130, 135, 145, 149, 153, 155, 157, 179, 188, 207, 224, 238, 272, 275, 276], "ber": [5, 7, 44, 108, 112, 135, 145, 149, 153, 157, 224, 273, 275, 276], "symbol": [5, 7, 44, 46, 49, 97, 108, 109, 113, 114, 115, 116, 117, 122, 123, 124, 135, 136, 145, 146, 149, 150, 153, 155, 156, 157, 158, 181, 201, 202, 204, 205, 207, 208, 210, 212, 225, 226, 235, 238, 241, 248, 249, 251, 253, 254, 271, 274, 275, 276], "ser": [5, 7, 44, 108, 122, 135, 145, 149, 155, 157, 238, 273, 275, 276], "evm": [5, 207, 275, 276], "x_hat": [5, 7, 44, 46, 108, 115, 135, 145, 149, 157, 207, 225, 273], "ref": [5, 179, 191, 192, 193, 194, 195, 196, 207, 210], "vector": [5, 44, 73, 191, 192, 194, 195, 207, 232, 239, 275, 276], "magnitud": [5, 7, 183, 193, 207, 227, 230, 260, 275, 276], "hat": [5, 7, 46, 108, 114, 115, 135, 145, 149, 157, 207, 225, 241], "k": [5, 6, 7, 46, 108, 109, 113, 114, 115, 116, 117, 118, 135, 145, 149, 150, 157, 158, 197, 198, 201, 202, 204, 207, 225, 241, 253, 271, 274], "linearmodul": [6, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 149, 241, 276], "amplitud": [6, 108, 109, 215, 262, 268, 272], "arbitrari": [6, 69, 70, 71, 72, 73, 74, 75, 108, 275, 276], "psk": [6, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 181, 207, 208, 215, 224, 225, 226, 238, 241, 252, 271, 275, 276], "shift": [6, 135, 145, 149, 153, 154, 155, 156, 157, 260, 269, 270, 275, 276], "kei": [6, 135, 145, 149, 153, 154, 155, 156, 157, 275, 276], "demodul": [6, 108, 115, 135, 145, 149, 157, 273, 276], "pimpsk": [6, 157, 158, 276], "pi": [6, 26, 80, 81, 97, 98, 137, 145, 149, 157, 158, 166, 181, 200, 209, 210, 215, 217, 220, 227, 228, 229, 230, 233, 234, 240, 242, 244, 255, 256, 258, 260, 268, 269, 270, 272, 275, 276], "m": [6, 76, 79, 83, 95, 108, 109, 113, 114, 115, 116, 117, 118, 124, 135, 145, 149, 150, 156, 157, 158, 199, 201, 202, 204, 209, 241, 253, 264, 265, 266, 267, 275, 276], "oqpsk": [6, 135, 145, 146, 147, 148, 276], "offset": [6, 17, 19, 26, 37, 97, 98, 108, 109, 119, 135, 136, 137, 139, 140, 142, 145, 146, 149, 150, 154, 157, 158, 166, 208, 217, 242, 252, 262, 272, 275, 276], "quadratur": [6, 135, 145, 215], "msk": [6, 135, 136, 235, 276], "rectangular": [6, 109, 146, 150, 158, 249, 271, 274, 275, 276], "span": [6, 7, 109, 146, 150, 158, 210, 212, 226, 235, 248, 249, 251, 271, 274], "half_sin": [6, 136, 212, 276], "half": [6, 135, 145, 196, 212, 220, 275, 276], "sine": [6, 135, 212, 275, 276], "time_bandwidth": [6, 210], "raised_cosin": [6, 109, 146, 150, 158, 226, 248, 274, 276], "alpha": [6, 109, 146, 150, 158, 210, 243, 248, 251, 271, 274], "rais": [6, 37, 95, 109, 146, 150, 158, 226, 242, 248, 251, 269, 275], "cosin": [6, 37, 95, 109, 146, 150, 158, 226, 242, 248, 251, 269, 275], "rc": [6, 109, 146, 150, 158, 248], "root_raised_cosin": [6, 37, 55, 56, 95, 109, 146, 150, 158, 226, 227, 228, 229, 230, 233, 234, 240, 242, 244, 251, 269, 271, 273, 274, 276], "srrc": [6, 109, 145, 146, 149, 150, 157, 158, 226, 242, 251, 271], "binary_cod": [6, 186, 276], "gener": [6, 135, 145, 149, 157, 181, 184, 186, 187, 199, 211, 237, 264, 273, 276], "code": [6, 26, 29, 37, 51, 55, 76, 80, 95, 97, 100, 108, 110, 135, 136, 145, 146, 147, 149, 150, 151, 156, 157, 158, 166, 169, 183, 186, 201, 202, 204, 211, 225, 241, 253, 261, 266, 273, 276], "gray_cod": [6, 211, 276], "grai": [6, 135, 136, 145, 146, 149, 150, 156, 157, 158, 211, 225, 241, 273, 275], "diff_encod": [6, 135, 145, 149, 153, 155, 157, 197, 198, 276], "y_prev": [6, 197, 198], "input": [6, 9, 17, 19, 22, 23, 26, 27, 28, 31, 37, 38, 51, 52, 53, 62, 65, 66, 69, 70, 71, 73, 76, 77, 78, 79, 87, 92, 95, 96, 97, 98, 99, 102, 126, 129, 137, 139, 145, 149, 153, 155, 157, 159, 166, 167, 168, 171, 181, 182, 184, 185, 187, 188, 190, 197, 198, 199, 200, 216, 218, 223, 229, 240, 246, 247, 257, 258, 262, 269, 270, 272], "data": [6, 197, 198, 214, 218, 257, 275], "diff_decod": [6, 197, 198, 276], "decod": [6, 197], "use_styl": [7, 243], "appli": [7, 26, 97, 109, 166, 208, 215, 225, 226, 232, 239, 241, 242, 243, 252, 262], "default": [7, 62, 66, 136, 146, 150, 156, 158, 180, 203, 206, 213, 219, 221, 225, 228, 230, 232, 233, 234, 236, 239, 241, 243, 273], "matplotlib": [7, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 268, 269, 270, 271, 272, 273, 274, 275], "rcparam": [7, 243], "time_domain": [7, 26, 37, 95, 97, 98, 135, 137, 145, 149, 157, 166, 181, 200, 217, 242, 255, 256, 258, 271, 273, 274, 276], "raster": [7, 226, 235, 236, 275, 276], "none": [7, 26, 37, 42, 51, 62, 66, 69, 73, 97, 109, 126, 134, 139, 146, 150, 158, 164, 166, 180, 181, 182, 184, 187, 191, 192, 194, 195, 199, 203, 206, 213, 218, 219, 221, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 239, 240, 241, 242, 257, 262, 268, 271, 273], "periodogram": [7, 200, 232, 255, 256, 258, 271, 275, 276], "power": [7, 135, 145, 149, 157, 180, 181, 182, 190, 207, 210, 212, 216, 219, 220, 221, 232, 248, 249, 251, 274, 275], "densiti": [7, 22, 232, 271, 274], "xx": [7, 232], "welch": [7, 232, 239], "spectrogram": [7, 239, 275, 276], "constel": [7, 135, 145, 149, 154, 157, 181, 207, 208, 215, 225, 252, 260, 275, 276], "symbol_map": [7, 108, 109, 124, 135, 145, 149, 154, 156, 157, 207, 241, 242, 273, 276], "map": [7, 108, 109, 116, 124, 135, 145, 149, 156, 157, 207, 241, 275, 276], "ey": [7, 135, 145, 149, 157, 226, 275, 276], "diagram": [7, 9, 26, 37, 95, 97, 126, 137, 166, 197, 198, 226, 275, 276], "phase_tre": [7, 135, 235, 276], "tree": [7, 235, 276], "continu": [7, 135, 235, 268, 276], "cpm": [7, 235, 276], "kwarg": [7, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244], "e_b": [7, 46, 47, 48, 49, 50, 108, 112, 135, 145, 149, 153, 157, 182, 201, 202, 204, 224, 253, 275], "n_0": [7, 22, 46, 47, 48, 49, 50, 108, 112, 122, 135, 145, 149, 153, 155, 157, 181, 182, 201, 202, 204, 205, 207, 224, 225, 238, 253, 254, 273, 275], "e_": [7, 46, 47, 48, 49, 50, 108, 122, 135, 145, 149, 155, 157, 181, 182, 201, 204, 205, 207, 225, 238, 254, 273, 275], "roc": [7, 39, 42, 161, 164, 237, 276], "receiv": [7, 39, 40, 42, 44, 46, 108, 114, 115, 121, 135, 145, 149, 153, 155, 157, 161, 162, 163, 164, 165, 207, 209, 226, 231, 237, 276], "oper": [7, 39, 42, 161, 164, 237, 276], "characterist": [7, 39, 42, 161, 164, 237, 276], "curv": [7, 39, 42, 153, 155, 161, 164, 224, 237, 238, 276], "enr": [7, 161, 162, 164, 231], "impulse_respons": [7, 26, 37, 51, 62, 76, 87, 95, 97, 166, 191, 192, 193, 194, 195, 196, 210, 212, 229, 248, 249, 251, 269, 270, 274, 276], "step_respons": [7, 26, 37, 51, 66, 76, 92, 95, 97, 166, 240, 269, 270, 272, 276], "step": [7, 26, 37, 51, 66, 76, 92, 95, 97, 137, 139, 144, 166, 227, 240, 275], "zeros_pol": [7, 244, 270, 276], "zero": [7, 26, 27, 37, 51, 58, 73, 76, 77, 80, 81, 94, 95, 97, 98, 99, 126, 139, 166, 168, 193, 212, 218, 227, 228, 229, 230, 233, 234, 240, 242, 244, 249, 255, 269, 271, 272, 274, 275, 276], "pole": [7, 76, 77, 80, 81, 89, 95, 227, 228, 229, 230, 233, 234, 240, 244, 269, 275], "magnitude_respons": [7, 37, 59, 60, 84, 85, 95, 191, 192, 193, 194, 195, 196, 212, 230, 248, 249, 251, 269, 270, 272, 274, 276], "omega": [7, 26, 37, 51, 59, 60, 61, 76, 84, 85, 95, 97, 137, 140, 141, 143, 166, 227, 228, 230, 233, 234, 272], "phase_respons": [7, 59, 60, 84, 85, 234, 276], "angl": [7, 234, 272], "phase_delai": [7, 233, 276], "tau_": [7, 233], "phi": [7, 108, 109, 119, 135, 136, 145, 146, 149, 150, 154, 157, 158, 208, 215, 217, 233], "group_delai": [7, 26, 37, 51, 61, 97, 166, 193, 228, 269, 270, 276], "group": [7, 26, 37, 51, 61, 97, 166, 193, 228, 275], "tau_g": [7, 26, 37, 51, 61, 97, 166, 228], "iir": [7, 9, 18, 60, 62, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 126, 132, 227, 228, 229, 230, 233, 234, 240, 244, 269, 272, 275, 276], "q": [8, 135, 145, 159, 160, 161, 162, 163, 165, 166, 168, 172, 175, 196, 260, 276], "comput": [8, 26, 39, 40, 41, 42, 43, 108, 112, 122, 135, 145, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165, 180, 181, 203, 206, 209, 213, 219, 221, 269, 270, 272, 274, 276], "complementari": [8, 159, 160], "cumul": [8, 159, 160], "distribut": [8, 159, 160], "standard": [8, 159, 160], "normal": [8, 9, 11, 16, 126, 130, 133, 159, 160, 191, 192, 194, 195, 207, 210, 212, 227, 228, 230, 232, 233, 234, 239, 248, 249, 251, 272, 274], "mathcal": [8, 39, 159, 160, 161, 162, 163, 164, 165, 181, 199], "qinv": [8, 159, 160, 276], "invers": [8, 160], "closedlooppl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 263, 272, 276], "defin": [9, 51, 76, 181, 199, 210, 237, 260, 263, 270, 275], "perform": [9, 27, 52, 98, 153, 155, 193, 200, 258, 260, 263, 269, 270, 273, 275, 276], "close": [9, 16, 18, 263, 275, 276], "loop": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 263, 275, 276], "pll": [9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 263, 275, 276], "meant": 9, "analysi": [9, 16, 265, 272, 275, 276], "onli": [9, 27, 35, 52, 58, 64, 69, 73, 90, 98, 106, 109, 136, 146, 150, 156, 158, 176, 181, 191, 192, 194, 195, 209, 212, 236, 249, 267, 272, 273], "block": [9, 26, 37, 95, 97, 126, 137, 166, 197, 198], "bb": [9, 271, 272], "phase_err": 9, "ped": [9, 15, 16, 130, 272], "lf": [9, 272], "phase_est": 9, "lo": [9, 272], "nco": [9, 12, 16, 130, 137, 138, 139, 140, 141, 142, 143, 144, 263, 272, 275, 276], "local": [9, 264, 272], "oscil": [9, 137, 140, 263, 272, 275, 276], "detector": [9, 15, 16, 39, 130, 161, 272, 276], "filter": [9, 13, 14, 16, 18, 26, 27, 28, 31, 32, 33, 35, 36, 37, 38, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 106, 107, 108, 115, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 145, 149, 157, 166, 167, 168, 171, 173, 174, 176, 177, 191, 192, 193, 194, 195, 196, 200, 210, 212, 226, 227, 228, 229, 230, 233, 234, 240, 242, 244, 245, 248, 249, 251, 258, 263, 274, 275, 276], "numer": [9, 137, 140, 263, 270, 272, 275, 276], "control": [9, 137, 140, 248, 251, 263, 272, 275, 276], "The": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 72, 73, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 97, 98, 99, 102, 103, 104, 105, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 264, 265, 266, 267, 269, 270, 272, 273, 274, 275, 277], "transfer": [9, 18, 37, 51, 76, 77, 95, 126, 210, 269, 270, 272], "2nd": [9, 126, 130, 263, 272, 276], "proport": [9, 13, 27, 98, 126, 127, 130, 209, 220, 263, 276], "plu": [9, 126, 130, 263, 276], "z": [9, 37, 51, 76, 95, 126, 137, 197, 198, 260, 269, 270, 272], "k_1": [9, 13, 126, 127, 272], "k_2": [9, 14, 126, 128, 272], "frac": [9, 17, 19, 22, 23, 37, 39, 40, 41, 43, 51, 57, 76, 95, 99, 126, 145, 149, 157, 161, 162, 163, 168, 179, 180, 181, 182, 189, 201, 202, 204, 205, 207, 209, 210, 215, 216, 217, 219, 220, 250, 253, 254, 259, 260, 272], "k_0": [9, 12, 16, 130, 137, 138, 140, 272], "k_p": [9, 15, 16, 130, 272], "refer": [9, 17, 19, 20, 21, 22, 23, 39, 40, 41, 43, 44, 69, 126, 153, 155, 161, 162, 163, 165, 179, 181, 189, 191, 192, 193, 194, 195, 196, 207, 208, 210, 219, 245, 248, 251, 252, 260, 270, 274, 275], "michael": [9, 17, 19, 20, 21, 22, 23, 126, 248, 251], "rice": [9, 17, 19, 20, 21, 22, 23, 126, 248, 251], "digit": [9, 17, 19, 20, 21, 22, 23, 126, 153, 155, 248, 251, 272, 275, 276], "commun": [9, 17, 19, 20, 21, 22, 23, 126, 153, 155, 196, 245, 248, 251, 272, 275], "discret": [9, 17, 19, 20, 21, 22, 23, 37, 95, 126, 181, 199, 205, 248, 251, 254, 262, 268, 272, 275, 276], "approach": [9, 17, 19, 20, 21, 22, 23, 126, 182, 185, 188, 248, 251, 272], "appendix": [9, 126, 248, 251], "lock": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144], "exampl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 33, 35, 36, 37, 38, 40, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 104, 106, 107, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 149, 153, 154, 155, 156, 157, 159, 160, 162, 164, 166, 169, 170, 174, 176, 177, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 220, 223, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 272], "see": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 35, 38, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 86, 88, 89, 90, 91, 93, 94, 96, 106, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 149, 154, 156, 157, 166, 176, 191, 192, 194, 195, 200, 210, 212, 227, 228, 229, 230, 233, 234, 240, 244, 248, 249, 251, 275], "noise_bandwidth": [9, 16, 126, 130, 133], "damping_factor": [9, 16, 126, 130, 131], "creat": [9, 16, 26, 28, 37, 38, 44, 45, 51, 53, 69, 71, 76, 77, 79, 95, 96, 97, 98, 99, 108, 109, 126, 130, 135, 136, 137, 140, 145, 146, 149, 150, 154, 157, 158, 166, 168, 181, 183, 207, 208, 217, 242, 252, 255, 256, 260, 268, 272, 274], "object": [9, 16, 26, 29, 30, 37, 44, 45, 51, 55, 56, 76, 80, 81, 95, 97, 100, 101, 108, 109, 110, 111, 135, 136, 145, 146, 147, 148, 149, 150, 151, 152, 157, 158, 166, 169, 170, 227, 228, 229, 230, 233, 234, 240, 244, 272, 276], "phase_lock_tim": [9, 23], "frequency_lock_tim": [9, 17], "freq_offset": [9, 17, 19], "lock_tim": [9, 19, 272], "phase_error_vari": [9, 22], "cn0": [9, 22], "varianc": [9, 22, 39, 41, 43, 163, 165, 181], "steadi": [9, 22], "state": [9, 22, 26, 27, 35, 37, 51, 52, 58, 64, 65, 67, 69, 73, 74, 76, 90, 91, 93, 95, 97, 98, 106, 166, 176, 276], "sample_r": [9, 16, 24, 26, 59, 60, 61, 84, 85, 97, 98, 135, 145, 149, 157, 166, 200, 208, 217, 226, 227, 228, 230, 232, 233, 234, 235, 236, 239, 242, 255, 256, 258, 268, 272, 274], "bnt": [9, 11, 272], "bandwidth": [9, 10, 11, 16, 20, 126, 130, 133, 182, 191, 192, 210, 248, 251, 272, 274], "b_n": [9, 10, 11, 16, 17, 19, 22, 23, 126, 130, 133], "t": [9, 11, 16, 39, 126, 130, 133, 161, 210, 214, 264, 268], "bn": [9, 10], "hz": [9, 10, 16, 17, 19, 22, 59, 60, 61, 84, 85, 126, 130, 133, 182, 190, 200, 208, 209, 210, 216, 217, 220, 255, 256, 259, 268], "zeta": [9, 16, 25, 126, 130, 131], "damp": [9, 16, 25, 126, 130, 131, 272], "k0": [9, 12, 16, 130, 137, 138, 140], "kp": [9, 15, 16, 130], "k1": [9, 13, 126, 127, 272], "k2": [9, 14, 126, 128, 272], "repres": [9, 18, 184, 185], "omega_n": [9, 21, 272], "natur": [9, 21], "radian": [9, 20, 21, 22, 137, 139, 140, 141, 142, 143, 157, 272], "omega_3db": [9, 20], "3": [9, 17, 19, 20, 23, 26, 33, 36, 37, 39, 40, 44, 55, 56, 80, 81, 95, 97, 98, 104, 107, 135, 137, 145, 149, 153, 154, 155, 156, 157, 161, 162, 166, 169, 170, 174, 177, 179, 181, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 220, 225, 226, 227, 228, 229, 230, 233, 234, 240, 242, 244, 245, 248, 249, 251, 252, 253, 255, 256, 257, 258, 259, 260, 264, 265, 270, 272, 274, 275], "omega_": [9, 20], "textrm": [9, 20], "properti": [10, 11, 12, 13, 14, 15, 18, 20, 21, 24, 25, 31, 32, 33, 34, 36, 57, 63, 65, 67, 68, 72, 74, 75, 82, 83, 86, 88, 89, 91, 93, 94, 102, 103, 104, 105, 107, 113, 118, 119, 120, 121, 123, 124, 125, 127, 128, 131, 132, 133, 138, 141, 142, 154, 156, 171, 172, 173, 174, 175, 177, 178, 276], "paramet": [16, 17, 19, 22, 27, 28, 38, 40, 41, 42, 43, 46, 47, 48, 50, 52, 53, 59, 60, 61, 62, 66, 70, 71, 73, 77, 78, 79, 84, 85, 87, 92, 96, 98, 99, 109, 112, 114, 115, 116, 117, 122, 129, 130, 136, 139, 140, 144, 146, 150, 153, 155, 158, 159, 160, 162, 163, 164, 165, 168, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "where": [16, 27, 52, 98, 109, 126, 130, 133, 150, 158, 161, 181, 182, 199, 201, 202, 204, 210, 253, 260, 269, 270, 275], "period": [16, 126, 130, 133, 135, 260], "second": [16, 17, 19, 23, 44, 126, 130, 133, 210], "critic": [16, 25, 126, 130, 131, 272], "underdamp": [16, 25, 126, 130, 131], "overdamp": [16, 25, 126, 130, 131], "ted": [16, 130], "t_": [17, 19, 23, 70, 210, 274], "fl": [17, 19], "delta": [17, 19, 26, 37, 51, 62, 76, 87, 95, 97, 166, 193, 229, 269, 270], "take": [17, 19, 23, 264], "onto": [17, 19, 23], "39": 17, "pl": [19, 23], "38": 19, "34": 20, "33": 21, "sigma_": [22, 39, 40, 42], "theta_": 22, "carrier": [22, 149], "43": 22, "40": [23, 97, 166, 200], "less": [25, 179], "than": [25, 135, 136, 146, 150, 156, 158, 179, 212, 215, 225, 241, 249], "greater": [25, 248, 251], "fir": [26, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 97, 98, 99, 100, 101, 102, 104, 106, 107, 166, 167, 168, 169, 170, 171, 174, 176, 177, 191, 192, 193, 194, 195, 196, 226, 227, 228, 229, 230, 233, 234, 240, 244, 245, 271, 275, 276], "note": [26, 33, 36, 37, 39, 40, 41, 43, 51, 76, 95, 97, 104, 107, 126, 135, 137, 145, 149, 157, 161, 162, 163, 165, 166, 174, 177, 179, 181, 182, 185, 188, 193, 197, 198, 210, 215, 220, 226, 245, 260], "equival": [26, 97, 166, 181, 182, 191, 192, 193, 194, 195, 205, 254, 266, 268], "first": [26, 31, 44, 97, 99, 102, 135, 143, 145, 166, 168, 171, 218, 242, 257, 265, 267], "prototyp": [26, 33, 36, 97, 104, 107, 166, 174, 177], "feedforward": [26, 28, 33, 36, 37, 51, 53, 68, 76, 79, 83, 95, 97, 99, 104, 107, 166, 168, 174, 177, 227, 228, 229, 230, 233, 234, 240, 244, 269, 270], "coeffici": [26, 28, 51, 53, 76, 79, 97, 99, 108, 121, 125, 135, 145, 149, 157, 166, 168, 227, 228, 229, 230, 233, 234, 240, 244, 269, 270], "discard": [26, 166], "each": [26, 27, 52, 97, 98, 166, 207, 214, 232, 236, 239], "instead": [26, 97, 166, 225], "ar": [26, 27, 28, 33, 36, 38, 39, 44, 46, 47, 48, 50, 52, 53, 60, 71, 77, 79, 85, 96, 97, 98, 99, 104, 107, 108, 109, 121, 125, 135, 136, 145, 146, 149, 150, 157, 158, 161, 166, 168, 174, 177, 182, 184, 185, 187, 188, 193, 209, 212, 218, 225, 226, 227, 228, 230, 232, 233, 234, 235, 236, 239, 241, 242, 243, 245, 249, 255, 256, 264, 266, 268, 270, 272, 274, 275, 277], "commut": [26, 97, 166], "parallel": [26, 97, 166], "output": [26, 27, 31, 37, 51, 52, 62, 66, 76, 77, 79, 87, 92, 95, 96, 97, 98, 99, 102, 115, 126, 129, 137, 139, 143, 144, 166, 168, 171, 181, 182, 183, 184, 185, 187, 188, 198, 199, 207, 216, 218, 229, 240, 257, 261, 264, 268, 269, 270, 272], "sum": [26, 39, 51, 76, 161, 274], "prevent": [26, 97, 145, 157, 166], "need": [26, 97, 166, 264, 265, 267], "done": [26, 264], "case": [26, 97, 157, 161, 166], "3x": [26, 97], "6": [26, 33, 36, 37, 44, 55, 56, 80, 81, 95, 97, 98, 104, 107, 135, 137, 145, 149, 156, 157, 162, 163, 165, 166, 174, 177, 179, 186, 190, 193, 199, 200, 201, 202, 207, 209, 211, 214, 216, 220, 225, 226, 227, 228, 229, 230, 233, 234, 240, 241, 242, 244, 245, 248, 251, 255, 256, 258, 260, 264, 265, 266, 267, 269, 270, 272, 273], "9": [26, 33, 36, 97, 98, 104, 107, 135, 145, 149, 157, 162, 166, 174, 177, 179, 186, 199, 207, 211, 214, 245, 248, 251, 264, 270, 271, 273, 274], "v": [26, 137, 190, 216, 264], "5": [26, 33, 36, 37, 39, 40, 41, 42, 43, 44, 55, 56, 95, 97, 98, 104, 107, 135, 137, 145, 149, 157, 162, 164, 166, 174, 177, 179, 181, 184, 186, 187, 188, 191, 192, 193, 194, 195, 199, 200, 201, 202, 204, 205, 207, 208, 209, 210, 211, 214, 215, 220, 223, 226, 227, 228, 229, 230, 233, 234, 240, 242, 244, 245, 248, 251, 252, 253, 254, 255, 256, 258, 260, 264, 268, 269, 270, 271, 272, 273, 274], "7": [26, 29, 30, 33, 36, 97, 98, 100, 101, 104, 107, 135, 145, 149, 156, 157, 162, 166, 174, 177, 179, 186, 193, 194, 196, 199, 207, 211, 214, 242, 245, 260, 264, 270], "8": [26, 33, 36, 37, 40, 42, 80, 81, 95, 97, 98, 104, 107, 109, 135, 136, 137, 145, 146, 149, 150, 153, 154, 155, 156, 157, 158, 162, 164, 166, 174, 177, 179, 181, 182, 183, 185, 186, 188, 191, 192, 193, 194, 195, 196, 199, 200, 207, 209, 210, 211, 212, 214, 217, 220, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 238, 240, 241, 242, 243, 244, 245, 248, 249, 251, 255, 256, 258, 260, 269, 270, 271, 272, 274], "summat": 26, "bottom": [26, 97, 166], "top": [26, 97, 166], "adder": [26, 126, 137, 197, 198, 272], "relat": [26, 33, 36, 97, 104, 107, 166, 174, 177, 182, 210], "In": [26, 27, 28, 29, 30, 33, 36, 37, 38, 40, 42, 44, 52, 53, 55, 56, 67, 71, 74, 77, 79, 80, 81, 93, 95, 96, 97, 98, 99, 100, 101, 104, 107, 135, 137, 145, 149, 153, 154, 155, 156, 157, 159, 160, 162, 164, 166, 168, 169, 170, 174, 177, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 220, 223, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 268, 273], "np": [26, 33, 36, 40, 42, 80, 81, 97, 98, 104, 107, 108, 120, 124, 135, 137, 145, 149, 153, 155, 156, 157, 162, 164, 166, 174, 177, 179, 181, 182, 183, 184, 185, 187, 188, 199, 200, 207, 208, 209, 215, 217, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 238, 240, 242, 244, 245, 252, 255, 256, 258, 260, 268, 269, 270, 271, 272, 273, 274], "co": [26, 97, 98, 166, 217], "64": [26, 193, 214, 270], "arang": [26, 33, 36, 97, 98, 104, 107, 166, 174, 177, 181, 183, 200, 217, 245, 255, 256, 258, 260, 268, 272], "280": 26, "out": [26, 29, 33, 36, 44, 55, 80, 97, 98, 100, 104, 107, 135, 145, 149, 154, 156, 157, 159, 160, 166, 169, 174, 177, 183, 184, 186, 187, 190, 197, 198, 199, 201, 202, 204, 205, 207, 209, 211, 216, 218, 220, 223, 228, 243, 245, 246, 247, 253, 254, 257, 259], "plt": [26, 37, 40, 42, 95, 97, 98, 135, 137, 145, 149, 153, 154, 155, 156, 157, 162, 164, 166, 179, 181, 182, 183, 185, 188, 191, 192, 193, 194, 195, 196, 200, 207, 208, 209, 210, 212, 215, 217, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 238, 240, 241, 242, 244, 248, 249, 251, 252, 255, 256, 258, 260, 268, 269, 270, 271, 272, 273, 274], "figur": [26, 37, 40, 42, 95, 97, 98, 135, 137, 145, 149, 153, 154, 155, 156, 157, 162, 164, 166, 179, 181, 182, 183, 185, 188, 191, 192, 193, 194, 195, 196, 200, 207, 208, 209, 210, 212, 215, 217, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 238, 240, 241, 242, 243, 244, 248, 249, 251, 252, 255, 256, 258, 260, 268, 269, 270, 271, 272, 273, 274], "figsiz": [26, 37, 40, 42, 95, 97, 98, 135, 137, 145, 149, 153, 154, 155, 156, 157, 162, 164, 166, 179, 181, 182, 183, 185, 188, 191, 192, 193, 194, 195, 196, 200, 207, 208, 209, 210, 212, 215, 217, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 238, 240, 241, 242, 243, 244, 248, 249, 251, 252, 255, 256, 258, 260, 268, 269, 270, 271, 272, 273, 274], "plot": [26, 37, 40, 42, 59, 60, 61, 62, 66, 84, 85, 87, 92, 95, 97, 98, 135, 137, 145, 149, 153, 154, 155, 156, 157, 162, 164, 166, 181, 182, 183, 185, 188, 191, 192, 193, 194, 195, 196, 200, 207, 208, 209, 210, 212, 215, 217, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 251, 252, 255, 256, 258, 260, 268, 269, 270, 272, 273, 274, 275, 276], "marker": [26, 97, 98, 137, 166, 225, 241, 268, 269, 270, 273], "label": [26, 37, 40, 42, 95, 97, 98, 136, 146, 150, 153, 155, 158, 162, 164, 166, 179, 181, 191, 192, 193, 194, 195, 207, 208, 210, 215, 224, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 238, 239, 242, 248, 251, 252, 268, 271, 272, 273, 274], "o": [26, 97, 98, 166, 268], "titl": [26, 37, 95, 97, 135, 137, 145, 153, 155, 166, 179, 181, 182, 183, 185, 188, 200, 207, 208, 215, 217, 224, 238, 242, 252, 255, 256, 258, 260, 268, 271, 272, 273, 274], "tight_layout": [26, 37, 95, 97, 135, 137, 145, 153, 155, 166, 179, 181, 182, 183, 185, 188, 200, 207, 208, 209, 217, 224, 238, 242, 252, 255, 256, 258, 260, 271, 272, 273, 274], "preserv": [26, 28, 38, 53, 67, 71, 74, 77, 79, 93, 96, 97, 99, 166, 168, 226, 236], "call": [26, 27, 28, 38, 52, 53, 67, 71, 74, 77, 79, 93, 96, 97, 98, 99, 166, 168], "true": [26, 40, 41, 42, 43, 97, 98, 135, 145, 149, 153, 155, 157, 162, 163, 164, 165, 166, 179, 180, 182, 184, 185, 187, 188, 199, 203, 209, 217, 221, 222, 225, 234, 236, 241, 243, 250, 271, 273], "y1": [26, 97, 98, 166, 215], "70": [26, 214, 274], "y2": [26, 97, 98, 166, 215], "140": [26, 200], "y3": [26, 97, 98, 166], "210": 26, "y4": [26, 97, 166], "y5": [26, 97, 166], "flush": [26, 27, 37, 51, 52, 58, 97, 98, 166, 276], "y_1": [26, 97, 166, 215], "y_2": [26, 97, 166, 215], "y_3": [26, 97, 166], "y_4": [26, 97, 166], "y_5": [26, 97, 166], "__call__": [26, 27, 28, 37, 38, 51, 52, 53, 67, 69, 70, 71, 74, 76, 77, 78, 79, 93, 95, 96, 97, 98, 99, 126, 129, 137, 139, 166, 167, 168, 276], "full": [26, 27, 52, 97, 98, 166, 167, 183], "__len__": [26, 37, 51, 54, 97, 166], "__repr__": [26, 29, 37, 51, 55, 76, 80, 95, 97, 100, 108, 110, 135, 145, 147, 149, 151, 157, 166, 169], "style": [26, 29, 37, 51, 55, 76, 80, 95, 97, 100, 108, 110, 135, 145, 147, 149, 151, 157, 166, 169, 243], "__str__": [26, 30, 37, 51, 56, 76, 81, 95, 97, 101, 108, 111, 135, 145, 148, 149, 152, 157, 166, 170], "human": [26, 30, 37, 51, 56, 76, 81, 95, 97, 101, 108, 111, 135, 145, 148, 149, 152, 157, 166, 170], "readabl": [26, 30, 37, 51, 56, 76, 81, 95, 97, 101, 108, 111, 135, 145, 148, 149, 152, 157, 166, 170], "reset": [26, 35, 37, 51, 64, 69, 73, 76, 90, 95, 97, 106, 126, 134, 137, 143, 166, 176], "when": [26, 35, 37, 51, 58, 62, 64, 66, 76, 87, 90, 92, 95, 97, 106, 166, 176, 181, 182, 184, 185, 187, 188, 205, 227, 228, 229, 230, 233, 234, 240, 254, 260, 268, 269, 270], "pass": [26, 37, 51, 58, 97, 166, 181, 184, 187, 199, 207, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 262, 264, 266, 269, 270, 276], "through": [26, 37, 51, 58, 97, 145, 157, 166, 184, 187, 199, 262, 269, 270, 272], "indic": [26, 28, 31, 37, 38, 41, 42, 43, 51, 53, 67, 69, 71, 74, 76, 77, 79, 93, 95, 96, 97, 99, 102, 109, 136, 145, 146, 149, 150, 153, 155, 157, 158, 162, 163, 164, 165, 166, 168, 171, 180, 203, 210, 212, 215, 217, 221, 222, 226, 234, 235, 236, 242, 248, 249, 250, 251], "whether": [26, 28, 37, 38, 41, 42, 43, 51, 53, 67, 69, 71, 74, 76, 77, 79, 93, 95, 96, 97, 99, 153, 155, 162, 163, 164, 165, 166, 168, 180, 203, 217, 221, 222, 234, 236, 242, 250], "consist": [26, 37, 46, 47, 48, 49, 50, 51, 65, 97, 166], "previou": [26, 28, 37, 38, 51, 53, 65, 71, 73, 77, 79, 96, 97, 99, 166, 168, 197, 198], "u": [26, 37, 51, 66, 76, 92, 95, 97, 166, 179, 240, 260, 261, 269, 270], "frequency_respons": [26, 37, 51, 59, 76, 84, 95, 97, 166, 276], "frequency_response_log": [26, 37, 51, 60, 76, 85, 95, 97, 166], "logarithm": [26, 37, 51, 60, 76, 85, 95, 97, 166, 227, 228, 230, 232, 233, 234, 269, 270], "axi": [26, 37, 51, 60, 76, 85, 95, 97, 166, 180, 203, 206, 213, 219, 221, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 239, 241, 242, 268, 276], "custom": [26, 32, 97, 103, 109, 146, 150, 158, 166, 173, 191, 192, 194, 195, 276], "multir": [26, 27, 28, 32, 97, 98, 99, 103, 166, 168, 173, 196, 245, 276], "polyphase_tap": [26, 30, 33, 36, 97, 98, 101, 104, 107, 166, 170, 174, 177], "index": [26, 31, 69, 73, 97, 102, 166, 171, 226, 235, 236, 241, 264], "correspond": [26, 31, 44, 49, 97, 102, 166, 171, 236], "mode": [27, 28, 35, 38, 52, 53, 58, 64, 67, 69, 71, 73, 74, 77, 79, 90, 93, 96, 98, 99, 106, 167, 168, 176, 183, 260], "l": [27, 52, 78, 98, 193], "stream": [27, 28, 29, 30, 35, 38, 52, 53, 55, 56, 58, 64, 67, 69, 71, 73, 74, 77, 79, 80, 81, 90, 93, 96, 98, 99, 100, 101, 106, 135, 145, 149, 157, 168, 169, 170, 176, 270], "convolut": [27, 52, 97, 98], "ha": [27, 52, 97, 98, 135, 145, 149, 181, 191, 192, 193, 194, 195, 200, 209, 210, 220, 258, 260, 272, 273, 274], "align": [27, 52, 98, 99, 145, 168, 268], "howev": [27, 46, 47, 48, 50, 52, 98, 126, 185, 188, 268], "produc": [27, 52, 97, 98, 166, 210, 274], "final": [27, 52, 98], "dictat": [27, 52, 98], "argument": [27, 28, 52, 98, 99, 168, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 269, 270], "specif": [28, 49, 99, 168, 267, 274], "npt": [28, 99, 109, 136, 146, 150, 158, 168, 191, 192, 194, 195, 227, 228, 229, 230, 233, 234, 240, 244], "string": [29, 30, 55, 56, 80, 81, 100, 101, 109, 110, 111, 146, 147, 148, 150, 151, 152, 158, 169, 170, 214, 232, 239, 276], "represent": [29, 30, 55, 56, 80, 81, 100, 101, 110, 111, 147, 148, 151, 152, 169, 170, 241, 276], "print": [30, 56, 81, 101, 170, 214, 268, 269, 270, 272], "167": [30, 101], "24": [30, 101, 170], "shape": [30, 56, 81, 98, 101, 108, 109, 115, 117, 120, 121, 125, 135, 145, 146, 149, 150, 157, 158, 170, 210, 212, 226, 242, 248, 249, 251, 270, 275, 276], "12": [30, 97, 135, 145, 149, 157, 163, 165, 179, 186, 196, 211, 245, 269, 273, 276], "befor": [33, 36, 104, 107, 174, 177, 277], "decomposit": [33, 36, 104, 107, 174, 177, 276], "after": [33, 36, 104, 107, 174, 177], "10": [33, 36, 37, 40, 42, 44, 95, 97, 98, 104, 107, 109, 135, 145, 146, 149, 150, 153, 155, 157, 158, 162, 164, 166, 174, 177, 179, 180, 181, 186, 190, 191, 192, 194, 195, 199, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 224, 225, 227, 228, 229, 230, 233, 234, 238, 240, 242, 244, 245, 248, 249, 250, 251, 252, 253, 254, 268, 269, 270, 271, 272, 273, 274], "puls": [37, 95, 108, 109, 115, 117, 120, 121, 125, 135, 145, 146, 149, 150, 157, 158, 210, 212, 226, 242, 248, 249, 251, 275, 276], "deriv": 37, "d": [37, 51, 57, 206, 209, 213, 220, 264, 266, 275], "lfloor": [37, 51, 57], "rfloor": [37, 51, 57], "null": [39, 161, 230, 232, 274], "altern": [39, 161, 270], "hypothes": [39, 161], "follow": [39, 44, 215, 225, 236, 239, 241, 243, 245, 272], "assum": [39, 161, 181, 199, 218, 257], "valu": [39, 108, 109, 112, 122, 135, 136, 145, 146, 149, 150, 153, 155, 157, 158, 159, 160, 183, 190, 197, 198, 210, 215, 216, 225, 228, 230, 233, 234, 241, 270, 276], "random": [39, 135, 145, 149, 157, 181, 184, 187, 199, 207, 208, 215, 225, 226, 235, 242, 252, 271, 273], "process": [39, 40, 41, 43, 161, 162, 163, 165, 196, 245, 270, 272, 275], "w": [39, 161, 181, 268, 269, 270, 271, 272, 273, 274], "sigma": [39, 40, 41, 42, 43, 161, 162, 163, 164, 165, 181, 182], "_0": [39, 161], "_1": [39, 161], "test": [39, 161, 266, 275], "statist": [39, 40, 41, 43, 161, 162, 163, 165], "limits_": [39, 51, 76, 161], "left": [39, 40, 41, 76, 145, 149, 157, 161, 162, 163, 165, 179, 180, 181, 182, 203, 206, 207, 209, 210, 215, 217, 220, 221, 222, 250, 260], "right": [39, 40, 41, 76, 145, 149, 157, 161, 162, 163, 165, 179, 180, 181, 182, 203, 206, 207, 209, 210, 215, 217, 220, 221, 222, 250, 260], "gamma": [39, 41, 43, 161, 163, 165, 179], "sim": [39, 161, 181, 265], "chi_": [39, 40, 41], "2n": [39, 40, 41], "text": [39, 157, 161, 179, 180, 181, 182, 185, 188, 189, 190, 196, 207, 208, 209, 216, 219, 221, 222, 250, 252], "under": [39, 161], "detect": [39, 40, 41, 42, 43, 161, 162, 163, 164, 165, 179, 231, 237, 276], "threshold": [39, 41, 43, 161, 163, 165], "q_": [39, 40, 41, 43], "chi_n": [39, 40, 41, 43], "steven": [39, 40, 41, 43, 161, 162, 163, 165], "kai": [39, 40, 41, 43, 161, 162, 163, 165], "fundament": [39, 40, 41, 43, 161, 162, 163, 165], "theori": [39, 40, 41, 43, 161, 162, 163, 165], "section": [39, 46, 47, 48, 49, 50, 161, 270, 272], "static": [39, 40, 41, 42, 43, 161, 162, 163, 164, 165, 265], "n_nc": [39, 40, 41, 42, 43, 179], "number": [40, 41, 42, 43, 44, 46, 47, 50, 59, 60, 61, 62, 66, 84, 85, 87, 92, 108, 109, 113, 123, 135, 136, 144, 145, 146, 149, 150, 157, 158, 179, 181, 184, 187, 199, 201, 202, 204, 210, 212, 214, 218, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 239, 240, 245, 248, 249, 251, 253, 257], "For": [40, 41, 43, 162, 163, 165, 181, 200, 209, 258, 264, 269], "linspac": [40, 153, 155, 162, 182, 185, 188, 209, 224, 238, 270, 271, 272, 273], "20": [40, 42, 97, 98, 135, 137, 145, 149, 157, 162, 166, 179, 182, 184, 187, 190, 199, 207, 208, 214, 215, 216, 222, 245, 250, 258, 271, 273, 274, 276], "101": [40, 42, 162, 164, 191, 192, 194, 195], "25": [40, 184, 187, 193, 199, 223, 226, 246, 247, 268, 271, 272, 274], "1e": [40, 162, 208, 273], "sigma2": [41, 43, 163, 165], "If": [42, 73, 109, 139, 146, 150, 158, 164, 166, 180, 181, 182, 199, 203, 218, 221, 222, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 239, 240, 241, 242, 250, 255, 257, 275], "logspac": [42, 164, 179], "theoret": [42, 153, 155, 224, 238, 273, 276], "variou": [42, 265, 274], "100": [42, 76, 87, 92, 95, 137, 153, 155, 179, 181, 182, 185, 188, 190, 191, 192, 194, 195, 207, 216, 217, 224, 226, 227, 229, 235, 238, 240, 242, 252, 255, 256, 258, 268, 272], "1_000": [42, 181, 208, 209, 215, 252, 271], "000": [42, 208], "5_000": 42, "measur": [44, 46, 180, 181, 189, 190, 203, 206, 207, 213, 216, 219, 221, 222, 250, 272, 275, 276], "new": [44, 45, 69, 71, 108, 109, 135, 136, 145, 146, 149, 150, 157, 158, 252], "accumul": [44, 137, 140, 141, 143, 272], "from": [44, 59, 60, 61, 76, 77, 84, 85, 95, 99, 108, 124, 135, 145, 149, 156, 157, 168, 190, 201, 202, 204, 205, 216, 223, 232, 239, 246, 247, 253, 254, 264, 269, 270, 272, 275], "contain": [44, 181, 214], "add": [44, 46, 49, 135, 145, 149, 157, 181, 208, 212, 236, 249, 252, 262, 273, 277], "total": [44, 210, 212, 248, 249, 251, 274], "count": [44, 47, 207], "error_r": [44, 48, 49, 273], "everi": [44, 268], "can": [44, 46, 47, 48, 50, 126, 135, 181, 207, 210, 218, 226, 232, 239, 266, 269, 270, 273, 275, 277], "obtain": 44, "tabul": [44, 45], "all": [44, 49, 139, 207, 226, 235, 236, 265, 267, 275], "ascend": [44, 49], "other": [46, 47, 48, 50, 268, 277], "quantiti": [46, 47, 48, 49, 50], "user": [46, 47, 48, 50, 269, 270], "caution": [46, 47, 48, 50], "instanc": [46, 47, 48, 50, 135], "transmit": [46, 108, 125, 135, 145, 149, 157, 207, 226], "e": [49, 137, 161, 162, 163, 164, 165, 180, 184, 185, 203, 260, 265, 266, 269, 270, 272, 273], "whatev": 49, "wa": [49, 182], "provid": [49, 108, 112, 122, 135, 145, 149, 153, 155, 157, 236, 265, 275], "wrapper": [51, 76], "scipi": [51, 76, 191, 192, 194, 195, 232, 239, 274, 275], "convolv": [51, 242], "It": [51, 76, 97, 109, 126, 146, 150, 158, 181, 226], "support": [51, 76, 276], "one": [51, 76, 136, 145, 146, 150, 156, 158, 210, 214, 226, 227, 228, 230, 232, 233, 234, 239, 255, 269, 270, 271, 274], "its": [51, 76, 77, 95, 181, 269, 270, 274], "sum_": [51, 76, 163, 165, 180, 181, 182, 203, 206, 207, 213, 250], "valid": [52, 209, 226, 235, 236, 260], "same": [52, 98, 242, 269], "0013559842808217807": [55, 56], "005995136544658217": [55, 56], "008698817681933214": [55, 56], "0024103767414047302": [55, 56], "010205586837665018": [55, 56], "018983779931504997": [55, 56], "011950905288150394": [55, 56], "01518393864077397": [55, 56], "051622191325047306": [55, 56], "07210389837804473": [55, 56], "04745944982876247": [55, 56], "039173517569276436": [55, 56], "17918683372907862": [55, 56], "3367363220550604": [55, 56], "4611457574513795": [55, 56], "5084040873607553": [55, 56], "30": [56, 97, 166, 200, 227, 229, 240, 255, 256, 270, 276], "31": 56, "15": [56, 135, 164, 186, 211, 245, 258], "remain": [58, 200, 218], "1024": [59, 60, 61, 84, 85, 227, 228, 230, 233, 234, 271, 274], "decad": [60, 85, 227, 228, 230, 233, 234, 269, 272], "resampl": [69, 70, 71, 72, 73, 74, 75, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 196, 245, 275, 276], "http": [69, 179, 189, 191, 192, 193, 194, 195, 196, 210, 219, 260, 264, 265, 266], "wirelesspi": 69, "com": [69, 179, 191, 192, 193, 194, 195, 196, 210, 265, 266], "structur": 69, "should": [73, 135, 226, 266], "equal": [73, 135], "three": [73, 268, 274], "lfilter": 76, "b_i": [76, 79, 83, 95, 227, 228, 229, 230, 233, 234, 240, 244, 270], "feedback": [76, 79, 82, 95, 227, 228, 229, 230, 233, 234, 240, 244, 270], "a_j": [76, 79, 82, 95, 227, 228, 229, 230, 233, 234, 240, 244, 270], "These": [76, 145, 149, 157, 243, 266, 272], "differ": [76, 136, 146, 150, 156, 158, 191, 192, 193, 194, 195, 242, 260, 274], "a_0": 76, "classmethod": [76, 77, 95], "zerospol": [76, 77, 80, 81, 95, 227, 228, 229, 230, 233, 234, 240, 244, 270], "self": [76, 77, 95], "b_tap": [76, 81, 83, 95, 270], "a_tap": [76, 81, 82, 95, 270], "exp": [80, 81, 145, 149, 157, 200, 210, 215, 217, 227, 228, 229, 230, 233, 234, 240, 242, 244, 256, 258, 260, 268, 270, 272], "1j": [80, 81, 200, 217, 227, 228, 229, 230, 233, 234, 240, 242, 244, 256, 258, 268, 270, 272], "conj": [80, 81, 227, 228, 229, 230, 233, 234, 240, 244, 270, 272], "478207252018059": [80, 81, 270], "6400000000000001": [80, 81, 270], "7391036260090295": [81, 270], "3061467458920719j": [81, 270], "insert": [97, 166], "multipli": [97, 166], "hold": [97, 99, 166, 168, 218, 276], "recommend": 97, "wai": [97, 266], "11": [97, 135, 145, 149, 157, 186, 196, 211, 245, 264], "zoh": [97, 99, 103, 166, 168, 173], "13": [97, 135, 145, 149, 157, 161, 162, 163, 165, 183, 186, 211, 245, 276], "matlab": [97, 99, 103, 166, 168, 173, 275], "iter": 98, "concaten": [98, 270], "linearli": [99, 168], "2r": 99, "ramp": [99, 126, 168], "advanc": [99, 168], "ones": [99, 168, 191, 192, 194, 195, 272], "84": 101, "modul": [108, 109, 117, 118, 120, 135, 137, 145, 146, 149, 150, 153, 155, 157, 158, 201, 202, 204, 207, 224, 226, 235, 238, 241, 253, 264, 267, 271, 273, 275, 276], "map_symbol": [108, 116, 135, 145, 149, 157, 181, 207, 208, 215, 225, 226, 252, 276], "decide_symbol": [108, 114, 135, 145, 149, 157, 276], "a_hat": [108, 114, 135, 145, 149, 157], "decis": [108, 114, 115, 135, 145, 149, 157, 226], "maximum": [108, 114, 115, 135, 145, 149, 157, 210, 212, 225, 241, 248, 249, 251], "likelihood": [108, 114, 115, 135, 145, 149, 157], "mle": [108, 114, 135, 145, 149, 157], "match": [108, 109, 115, 121, 135, 145, 146, 149, 150, 157, 158, 276], "abstract": [108, 112, 122], "log_2": [108, 113, 135, 145, 149, 157, 182, 201, 202, 204, 253], "phase_offset": [108, 109, 119, 135, 136, 145, 146, 149, 150, 154, 157, 158, 181, 207, 208, 215, 225, 226, 241, 252, 271, 273], "degre": [108, 109, 119, 135, 136, 145, 146, 149, 150, 154, 157, 158, 208, 215, 217, 220], "dot": [108, 109, 124, 135, 145, 149, 156, 157, 241], "mapsto": [108, 109, 124, 135, 145, 149, 156, 157, 241], "mathbb": [108, 109, 124, 135, 145, 149, 156, 157, 182, 241, 260], "sym": [108, 109, 123, 135, 136, 145, 146, 149, 150, 157, 158, 202, 205, 210, 253, 254, 274], "pulse_shap": [108, 109, 115, 117, 120, 135, 145, 146, 149, 150, 157, 158, 271], "tx_filter": [108, 125, 135, 145, 149, 157], "rx_filter": [108, 121, 135, 145, 149, 157], "rect": [109, 146, 150, 158, 274], "whose": [109, 136, 146, 149, 150, 158], "import": [109, 146, 150, 158, 266, 268, 269, 270, 271, 272, 273, 274, 275], "roll": [109, 146, 150, 158, 260, 274], "off": [109, 146, 150, 158], "psd": [112, 122, 153, 155, 182, 201, 202, 204, 205, 224, 238, 253, 254], "p_b": 112, "s_hat": [115, 273], "size": [115, 117, 183, 199, 268, 272, 273, 274], "p_e": 122, "loopfilt": [126, 127, 128, 129, 130, 131, 132, 133, 134, 263, 272, 276], "ppi": [126, 130, 263], "track": 126, "constant": [126, 135, 137, 140, 141, 232, 239, 270, 272], "cannot": 126, "chirp": 126, "underli": [126, 132], "scheme": [135, 145, 149, 157, 276], "similar": [135, 145, 157, 274], "One": [135, 145, 157, 274], "distinct": [135, 145, 157], "result": [135, 145, 157, 180, 203, 209, 220, 221, 222, 248, 250, 251, 273], "envelop": [135, 269, 270], "which": [135, 145, 157, 179, 180, 181, 182, 203, 206, 208, 213, 215, 219, 220, 221, 225, 228, 230, 233, 234, 241, 252, 268, 272, 274], "lower": [135, 145, 157, 230, 232, 248, 251], "also": [135, 193, 209, 210, 275], "consid": [135, 214], "cpfsk": 135, "separ": 135, "modem": [135, 145, 149, 157], "45": [135, 136, 145, 146, 149, 154, 181, 207, 208, 215, 217, 225, 226, 241, 252, 271, 273], "symbol_label": [135, 136, 145, 146, 149, 150, 156, 157, 158, 273], "randint": [135, 145, 149, 157, 181, 184, 187, 199, 207, 208, 215, 225, 226, 235, 242, 252, 271, 273], "1000": [135, 145, 149, 157, 207, 209, 242, 255, 256, 273], "dtype": [135, 145, 149, 157, 183, 218, 242, 257, 261, 272], "uint8": [135, 145, 149, 157, 218, 257], "complex_symbol": [135, 145, 149, 157], "70710678": [135, 145, 149], "70710678j": [135, 145, 149], "linestyl": [135, 145, 149, 157, 225, 236, 241, 243, 260, 268, 272, 273, 274], "tx_sampl": [135, 145, 149, 157], "50": [135, 145, 149, 157, 190, 216, 223, 241, 255, 256, 268, 271], "like": [135, 266, 275, 276], "channel": [135, 145, 153, 155, 182, 184, 185, 187, 188, 199, 224, 238, 275, 276], "subplot": [135, 145, 215, 272, 273], "imag": [135, 145, 268], "trajectori": 135, "although": 135, "boundari": 135, "lead": [135, 215, 273], "spectral": [135, 200, 232, 271, 274], "effici": [135, 200, 220, 258], "gmsk": 135, "rx_sampl": [135, 145, 149, 157], "last": [135, 145, 218, 264], "rx_symbol": [135, 145, 149, 157], "rx_complex_symbol": [135, 145, 149, 157], "14": [135, 145, 149, 157, 162, 186, 211, 245], "array_equ": [135, 145, 149, 157], "bin": [136, 146, 150, 156, 158, 207, 225, 241, 273], "absolut": [136, 137, 140, 142, 146, 158, 182], "consecut": [136, 146, 150, 158], "adjac": [136, 146, 150, 156, 158, 273, 274], "mai": [136, 146, 150, 156, 158, 207, 225, 236, 239, 241, 243, 270], "more": [136, 146, 150, 156, 158, 276], "start": [136, 146, 150, 158, 264], "0j": [136, 146, 150, 158], "go": [136, 146, 150, 158], "counter": [136, 146, 150, 158], "clockwis": [136, 146, 150, 158], "around": [136, 146, 150, 158], "circl": [136, 146, 150, 158, 270], "increment": [137, 139, 140, 141, 272], "Then": 137, "fsk": 137, "60": [137, 191, 192, 194, 195, 274], "repeat": 137, "cp": 137, "57": 137, "bpsk": [137, 153, 155, 224, 238, 242, 271], "variabl": [137, 139, 214, 272], "forward": [137, 144], "settabl": [137, 138, 141, 142], "vari": 139, "intern": 143, "set": [143, 181, 209, 225, 230, 232, 236, 239, 241, 243, 265, 267, 270], "qpsk": [145, 149, 153, 154, 155, 157, 181, 207, 208, 224, 225, 226, 238, 241, 242, 252, 275, 276], "convent": [145, 157], "transit": [145, 157, 187, 188, 199, 262], "independ": 145, "apart": 145, "origin": [145, 157, 258, 268], "taken": [145, 149, 157], "jq": 145, "begin": [145, 157, 161], "end": [145, 157, 161, 255, 265], "encod": [149, 153, 155, 197, 198, 275], "inform": [149, 201, 202, 204, 253], "ge": [150, 158, 179], "were": [153, 155], "simon": [153, 155], "alouini": [153, 155], "over": [153, 155, 214], "fade": [153, 155], "chapter": [153, 155, 196, 245], "john": [153, 155], "proaki": [153, 155], "optimum": [153, 155], "psk8": [153, 155, 224, 238, 273], "psk16": [153, 155, 224, 238, 273], "compar": [153, 155, 191, 192, 193, 194, 195, 274], "de": [153, 155, 276], "se": [155, 238], "00000000e": [156, 157, 270], "00": [156, 157, 270], "00j": [156, 157], "07106781e": [156, 157], "01": [156, 157, 214, 270, 272], "01j": [156, 157], "12323400e": [156, 157], "17": [156, 157, 220, 245, 264], "83697020e": 156, "22464680e": [156, 157], "16j": [156, 157], "annot": [156, 241, 276], "odd": [157, 193, 255], "rotat": [157, 217], "rel": [157, 260, 274], "even": [157, 191, 192, 193, 194, 195, 210, 248, 251], "2m": 157, "displaystyl": 157, "pi4_qpsk": 157, "exceed": [159, 160], "15865525393145707": [159, 160], "158655": [159, 160], "0000010494310452": [159, 160], "perfect": 161, "knowledg": 161, "cn": [161, 181], "mathrm": 161, "re": 161, "sqrt": [161, 162, 163, 165, 179, 206, 207, 210, 250, 260, 271, 272, 274], "____": 166, "down": [166, 168, 172, 196, 245], "2p": 168, "95": [170, 207], "desir": [179, 181, 273], "ln": [179, 210], "62": [179, 214], "_": [179, 207], "log_": [179, 180, 190, 203, 209, 219, 221, 222, 250], "54": [179, 214], "44": 179, "12ab": 179, "7b": 179, "claim": 179, "leq": 179, "le": [179, 193, 217, 220, 248, 251], "8096": 179, "radarsp": 179, "weebli": 179, "upload": 179, "21471216": 179, "albersheim_alternative_form": 179, "pdf": [179, 210], "bpb": 179, "w2": 179, "wpmucdn": 179, "site": [179, 264], "gatech": 179, "edu": 179, "dist": [179, 265], "462": 179, "file": [179, 265, 267], "2016": 179, "noncoher": 179, "approxim": [179, 276], "www": [179, 191, 192, 193, 194, 195, 196, 210], "mathwork": [179, 191, 192, 193, 194, 195, 196, 210], "help": [179, 191, 192, 193, 194, 195, 196, 210], "html": [179, 191, 192, 193, 194, 195, 196, 210, 264], "semilogx": [179, 237], "legend": [179, 191, 192, 193, 194, 195, 215, 268, 271, 272, 274], "grid": [179, 182, 185, 188, 209, 243, 268, 271, 272, 274], "both": [179, 182, 225, 241, 242, 268, 272], "xlabel": [179, 182, 183, 185, 188, 207, 209, 260, 268, 271, 272, 274], "ylabel": [179, 182, 183, 185, 188, 207, 209, 260, 268, 271, 272, 274], "across": [179, 206, 213], "nuse": 179, "avg": [180, 181, 219], "ax": [180, 203, 206, 213, 219, 221, 243], "along": [180, 203, 206, 213, 219, 221, 276], "entir": [180, 203, 206, 213, 219, 221], "decibel": [180, 190, 203, 216, 221, 222, 250, 275, 276], "seed": [181, 184, 187, 199, 276], "ad": [181, 236, 265, 275, 276], "explicitli": 181, "known": 181, "must": [181, 191, 192, 194, 195, 210, 217, 236, 248, 251, 260], "numpi": [181, 184, 187, 199, 257, 268, 269, 270, 271, 272, 273, 274, 275], "default_rng": [181, 184, 187, 199], "noisi": 181, "sin": [181, 255], "zorder": [181, 208, 252], "infti": [181, 182], "nand": 181, "capac": [182, 185, 188, 275, 276], "2d": [182, 236], "x_i": [182, 184, 185, 187, 188, 199, 215], "y_i": [182, 184, 185, 187, 188, 199], "monoton": 182, "decreas": 182, "limit": [182, 225, 230, 232, 241, 273], "At": 182, "occur": 182, "view": [182, 265, 275], "59": 182, "shannon": 182, "semilogi": [182, 224, 237, 238], "barker": [183, 261, 275, 276], "ani": [183, 190, 200, 216, 230, 232, 258, 261, 267], "int64": [183, 261], "bipolar": [183, 276], "float64": [183, 261], "sequenc": [183, 184, 187, 199, 260, 262, 275, 276], "format": 183, "seq": 183, "have": [183, 193, 200, 218, 242, 257, 258], "ideal": [183, 273], "minim": 183, "autocorrel": [183, 260], "sidelob": [183, 191, 192, 194, 195, 248, 251, 260], "corr": [183, 260], "lag": [183, 260], "ab": [183, 260, 274], "roughli": [184, 187, 268], "eras": 184, "flip": 187, "h_b": 188, "cf": 189, "v_": [189, 190, 216, 222, 250], "en": [189, 219, 260], "wikipedia": [189, 219, 260], "org": [189, 219, 260], "wiki": [189, 219, 260], "type": [190, 207, 216, 218, 232, 237, 239, 257, 276], "voltag": [190, 216, 222, 250, 275], "x_": [190, 216], "mhz": [190, 216], "77": [190, 214, 216], "50e6": 190, "76": [190, 214], "98970004336019": 190, "mw": [190, 216], "dbm": [190, 216], "dbv": [190, 216], "020599913279624": 190, "center_freq": [191, 192], "hann": [191, 192, 194, 195, 232, 239], "blackman": [191, 192, 194, 195], "harri": [191, 192, 194, 195, 196, 245], "chebyshev": [191, 192, 194, 195], "atten": [191, 192, 194, 195], "nyquist": [191, 192, 194, 195, 200, 226, 258, 274], "side": [191, 192, 210, 227, 228, 230, 232, 233, 234, 239, 269, 270, 271, 274], "about": [191, 192, 242, 267], "No": [191, 192, 194, 195], "blackmanharri": [191, 192, 194, 195], "chebwin": [191, 192, 194, 195], "attenu": [191, 192, 194, 195, 196, 248, 251], "dsp": [191, 192, 193, 194, 195, 196, 275], "designbandpassfir": 191, "cdot": [191, 192, 194, 195, 217], "h_ham": [191, 192, 194, 195], "h_hann": [191, 192, 194, 195], "h_blackman": [191, 192, 194, 195], "h_blackman_harri": [191, 192, 194, 195], "h_chebyshev": [191, 192, 194, 195], "h_kaiser": [191, 192, 194, 195], "ylim": [191, 192, 193, 194, 195, 228, 260, 269, 272, 273, 274], "larger": [192, 212, 215, 225, 241, 249], "designbandstopfir": 192, "75": [192, 214, 225, 272, 273], "best": 193, "append": [193, 255, 271], "tau": 193, "l_": 193, "dc": 193, "designfracdelayfir": 193, "observ": [193, 220, 226], "flat": 193, "h_8": [193, 248, 251], "h_16": [193, 248, 251], "h_32": 193, "32": [193, 268], "h_64": 193, "cutoff_freq": [194, 195], "cutoff": [194, 195], "f_c": [194, 195], "designhighpassfir": 194, "designlowpassfir": 195, "half_length": 196, "a_stop": 196, "80": [196, 260], "stopband": [196, 248, 251], "a_": 196, "stop": 196, "fred": [196, 245], "system": [196, 205, 245, 254, 265, 267, 272, 275], "designmultiratefir": 196, "oplu": [197, 198, 213], "uncod": 198, "dmc": [199, 262, 275, 276], "memoryless": [199, 262, 275], "pr": 199, "y_j": 199, "alphabet": 199, "ldot": 199, "doe": [200, 258], "anti": [200, 258, 276], "alias": [200, 258, 276], "400": [200, 268], "x1": 200, "200": [200, 268, 273], "x2": 200, "130": 200, "x3": [200, 260], "spectrum": [200, 227, 228, 230, 232, 233, 234, 239, 255, 256, 258], "content": 200, "abov": [200, 258], "fold": 200, "cw": 200, "unalias": 200, "fft": [200, 232, 239, 255, 256, 258], "2048": [200, 255, 256, 258, 271], "xlim": [200, 258, 271, 272, 274], "qam": [201, 202, 204, 253], "249387366082999": [201, 202], "020599913279625": [201, 254], "7506126339170005": [204, 253], "979400086720376": [204, 205], "norm": [207, 210, 212, 248, 249, 251], "noiseless": 207, "sourc": 207, "max": [207, 221, 222], "instantan": 207, "percentil": [207, 230, 232, 239], "either": 207, "716098663100023": 207, "691245137337086": 207, "507472040407576": 207, "95th": 207, "303567994909226": 207, "inst_evm": 207, "hist": 207, "histogram": 207, "frequency_offset": [208, 262, 276], "freq_rat": 208, "cycl": [208, 242], "5e": 208, "deg": [208, 215], "path": [209, 275], "loss": [209, 275], "meter": [209, 220, 259], "transmitt": 209, "far": 209, "field": 209, "neg": [209, 215], "impli": 209, "possibl": [209, 275], "so": [209, 210, 212, 248, 249, 251, 275], "km": 209, "link": [209, 275, 276], "ghz": [209, 220, 259], "1e3": [209, 217, 255], "1e9": [209, 220, 259], "92": 209, "44778322188337": 209, "doubl": [209, 220], "increas": [209, 220, 270], "2e3": 209, "98": 209, "468383135163": 209, "2e9": 209, "product": [210, 274], "thought": [210, 277], "smaller": [210, 248, 251, 274], "wider": 210, "how": [210, 212, 226, 235, 236, 242, 248, 249, 251, 267], "gaussdesign": 210, "onlinelibrari": 210, "wilei": 210, "doi": 210, "1002": 210, "9780470041956": 210, "app2": 210, "h_0p1": [210, 248, 251], "h_0p2": 210, "h_0p3": 210, "reason": [212, 249, 264], "h_half_sin": 212, "displai": [214, 225, 227, 228, 230, 232, 233, 234, 239, 241], "line": [214, 242, 265, 271], "quick": 214, "brown": 214, "fox": 214, "jump": 214, "lazi": 214, "dog": 214, "00000000": 214, "68": 214, "65": 214, "71": 214, "69": 214, "63": 214, "6b": 214, "72": 214, "6f": 214, "6e": 214, "00000010": 214, "66": 214, "78": 214, "6a": 214, "6d": 214, "73": 214, "74": 214, "00000020": 214, "6c": 214, "61": 214, "7a": 214, "79": 214, "67": 214, "he": 214, "02": [214, 270, 272], "03": [214, 270], "04": [214, 270], "00000004": 214, "05": [214, 268, 270, 272], "06": 214, "07": 214, "08": 214, "00000008": 214, "09": 214, "0a": 214, "iq_imbal": [215, 262, 276], "iq": [215, 262, 275], "imbal": [215, 262, 275], "posit": 215, "compon": [215, 255, 256, 258], "g_i": 215, "180": 215, "g_q": 215, "x_q": 215, "horizont": 215, "stretch": 215, "while": [215, 274], "vertic": 215, "northwest": 215, "northeast": 215, "50118723": 216, "36272725": 216, "9952623149688795": 216, "satisfi": 217, "remov": [217, 232, 239, 276], "dtypelik": [218, 257], "most": [218, 257], "signific": [218, 257], "enough": 218, "fill": 218, "smallest": 218, "unsign": 218, "integ": 218, "diamet": 220, "55": 220, "eta": 220, "dbi": 220, "arcsin": 220, "83": 220, "dish": 220, "21": 220, "810210290266568": 220, "437435887991374": 220, "23": 220, "sinc": [220, 226, 264, 273], "antenna": [220, 275], "we": [220, 275], "830810203546193": 220, "529544741425365": 220, "keyword": [224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 269, 270], "pyplot": [224, 225, 228, 229, 230, 231, 232, 233, 234, 238, 239, 240, 241, 242, 243, 244, 268, 269, 270, 271, 272, 273, 274], "heatmap": [225, 273], "scatter": 225, "overwritten": [225, 236, 239, 241], "rang": [225, 272, 273], "hist2d": 225, "10_000": 225, "color": [226, 235, 236, 242, 271, 274], "imaginari": [226, 236, 242], "interleav": [226, 236], "base": [226, 235, 236, 242, 276], "examin": 226, "intersymbol": 226, "interfer": 226, "isi": 226, "cascad": 226, "why": 226, "often": [226, 268], "practic": 226, "n_time": [227, 270], "n_freq": 227, "x_axi": [227, 228, 230, 232, 233, 234, 239, 269, 270, 271, 272], "log": [227, 228, 230, 232, 233, 234, 269, 270, 272], "definit": [227, 228, 229, 230, 233, 234, 240, 244], "n_t": 227, "n_f": 227, "scale": [227, 228, 230, 232, 233, 234, 239, 269, 270], "option": [227, 228, 230, 232, 233, 234, 239, 276], "h_srrc": [227, 228, 229, 230, 233, 234, 240, 242, 244, 273], "auto": [228, 230, 233, 234], "select": [228, 230, 233, 234, 265], "48": 228, "52": 228, "y_axi": [230, 232], "10th": [230, 232, 239], "crop": [230, 232], "deep": [230, 232], "x_label": 231, "overlap": [232, 239, 271], "detrend": [232, 239], "median": 232, "segment": [232, 239], "256": [232, 239, 271], "point": [232, 239], "trend": [232, 239], "unwrap": [234, 272], "stride": 236, "colorbar": 236, "1d": 236, "determin": 236, "row": 236, "collect": 236, "linecollect": 236, "linewidth": [236, 260], "solid": [236, 242], "cmap": 236, "rainbow": 236, "loglog": 237, "pcolormesh": 239, "vmin": 239, "vmax": 239, "100th": 239, "shade": 239, "gouraud": 239, "markers": 241, "diff": [242, 271], "mutual": 242, "exclus": 242, "current": [242, 266], "dash": 242, "share": 242, "10e3": 242, "revert": 243, "rcdefault": 243, "_rc_param": 243, "rc_param": 243, "autolayout": 243, "max_open_warn": 243, "titleweight": 243, "bold": 243, "arrang": 245, "column": 245, "notion": 245, "demonstr": 245, "matric": 245, "18": [245, 264, 273], "19": [245, 276], "000005": 246, "5000": [246, 247], "000000025": 246, "005": [247, 272], "000025": 247, "excess": [248, 251, 274], "narrow": [248, 251], "expens": [248, 251], "higher": [248, 251, 274], "h_0p5": [248, 251], "h_0p9": [248, 251], "affect": [248, 251], "longer": [248, 251, 255], "h_4": [248, 251], "h_rect": [249, 274], "sample_rate_offset": [252, 262, 276], "250": [255, 256], "300": [255, 256], "ksp": [255, 256], "notic": [255, 256, 268, 274], "conjug": [255, 256, 270], "500": [255, 256, 272], "now": [255, 256, 268, 276], "150": [255, 256], "asymmetr": 256, "copi": 258, "299792458": 259, "zadoff_chu": [260, 261, 276], "zadoff": [260, 261, 275, 276], "chu": [260, 261, 275, 276], "prime": 260, "gcd": 260, "ne": 260, "cyclic": 260, "x_u": 260, "c_": 260, "2q": 260, "mod": 260, "e2": 260, "93chu_sequ": 260, "x_3": 260, "139": 260, "tile": 260, "x_5": 260, "x5": 260, "cross": 260, "xcorr": 260, "sphinx": 264, "immateri": 264, "theme": 264, "depend": [264, 265, 267], "store": [264, 266, 267], "txt": [264, 265, 266, 267], "some": 264, "below": [264, 269, 270], "version": [264, 266, 275], "aren": 264, "resolut": 264, "minut": 264, "ci": 264, "myst": 264, "parser": 264, "updat": 264, "git": [264, 266], "math": 264, "dollar": 264, "ipykernel": 264, "26": 264, "nb": 264, "pickleshar": 264, "switch": 264, "pip": [264, 265, 266, 267, 275], "python3": [264, 265, 266, 267, 275], "built": 264, "run": 264, "command": [264, 265], "dirhtml": 264, "locat": [264, 267], "home": 264, "page": 264, "directori": [264, 266], "get": 264, "necessari": 264, "webpag": 264, "webserv": 264, "easili": [264, 265, 267, 269, 270], "python": [264, 275], "server": 264, "8080": 264, "access": 264, "web": 264, "browser": 264, "localhost": 264, "librari": [265, 266, 267, 268, 273, 275, 277], "ruff": [265, 266, 276], "lint": [265, 266], "your": [265, 267], "develop": [265, 266, 267], "dev": [265, 267], "pyproject": [265, 267], "toml": [265, 266, 267], "tool": [265, 267, 275], "src": 265, "extend": 265, "includ": [265, 266, 267, 275], "ipynb": 265, "exclud": 265, "build": [265, 275], "doc": 265, "_version": 265, "py": [265, 267], "120": 265, "pycodestyl": 265, "pyflak": 265, "pyupgrad": 265, "flake8": 265, "bugbear": 265, "simplifi": 265, "isort": 265, "ignor": 265, "e501": 265, "e713": 265, "e714": 265, "__init__": 265, "f401": 265, "f403": 265, "manual": [265, 267], "check": 265, "hook": 265, "config": [265, 268, 269, 270, 271, 272, 273, 274], "yaml": 265, "repo": [265, 266], "github": [265, 275], "rev": 265, "v2": 265, "id": 265, "larg": 265, "fixer": 265, "trail": 265, "whitespac": 265, "astral": 265, "sh": 265, "v0": 265, "enabl": 265, "disabl": 265, "uninstal": 265, "extens": 265, "vscode": [265, 267], "json": [265, 267], "you": [265, 266, 267, 275], "edit": [265, 270], "latest": [266, 275], "releas": [266, 276], "main": [266, 274], "branch": 266, "mhostett": [266, 276], "Or": [266, 267], "pre": 266, "To": 266, "activ": 266, "benefici": 266, "fashion": 266, "allow": [266, 267], "chang": [266, 277], "immedi": 266, "seen": 266, "upon": 266, "next": 266, "clone": 266, "wherev": 266, "flag": 266, "packag": [266, 275], "commit": 266, "pytest": [266, 267], "cov": 266, "xdist": 266, "benchmark": 266, "ini_opt": 267, "minvers": 267, "addopt": 267, "showloc": 267, "testpath": 267, "execut": 267, "test_psk": 267, "instruct": 267, "invok": 267, "infrastructur": 267, "debug": 267, "inlinebackend": [268, 269, 270, 271, 272, 273, 274], "print_figure_kwarg": [268, 269, 270, 271, 272, 273, 274], "facecolor": [268, 269, 270, 271, 272, 273, 274], "widget": [268, 269, 270, 271, 272, 273, 274], "tx": 268, "decai": [268, 270], "fillstyl": 268, "show": [268, 269, 270, 271, 272, 273, 274], "accomplish": [268, 273], "def": [268, 271, 273], "resample_sign": 268, "new_sample_r": 268, "ty": 268, "gca": [268, 273], "set_prop_cycl": [268, 273], "four": 268, "appear": 268, "fourth": 268, "do": 268, "315": 268, "00095883": 269, "00175012": 269, "00423921": 269, "0058825": 269, "006151": 269, "00474595": 269, "0017044": 269, "00254816": 269, "00721645": 269, "0112324": 269, "01342358": 269, "01273202": 269, "00845058": 269, "0004368": 269, "01073669": 269, "02372977": 269, "03650247": 269, "04650654": 269, "05098525": 269, "04734644": 269, "03355896": 269, "00851486": 269, "02769991": 269, "07367348": 269, "12670447": 269, "1830132": 269, "23810898": 269, "28727058": 269, "3260799": 269, "3509384": 269, "35949665": 269, "conveni": [269, 270], "evalu": [269, 270], "here": [269, 270], "47820725": 270, "78207252e": 270, "58172329e": 270, "10862468e": 270, "86109590e": 270, "21565653e": 270, "01140214e": 270, "57286400e": 270, "67772160e": 270, "47338728e": 270, "10422993e": 270, "89312837e": 270, "12240078e": 270, "03953322e": 270, "69685122e": 270, "63882791e": 270, "81474977e": 270, "47193366e": 270, "85259041e": 270, "15647504e": 270, "23851924e": 270, "42176895e": 270, "84684395e": 270, "42721858e": 270, "72236648e": 270, "14721649e": 270, "10813095e": 270, "94024315e": 270, "78877688e": 270, "74077567e": 270, "87820725": 270, "53637958": 270, "94724205": 270, "13335164": 270, "1455082": 270, "04436799": 270, "88708159": 270, "71930943": 270, "5719707": 270, "46154771": 270, "39261642": 270, "36139242": 270, "35935288": 270, "3763214": 270, "40270968": 270, "43085717": 270, "45557651": 270, "47410241": 270, "48566716": 270, "49090568": 270, "49124786": 270, "48840102": 270, "4839738": 270, "47925143": 270, "47510421": 270, "47199608": 270, "47005584": 270, "46917696": 270, "46911955": 270, "denomin": 270, "73910363": 270, "30614675j": 270, "plane": 270, "endpoint": 270, "092337035029908": 270, "71104892744724": 270, "684365018955985": 270, "37868538208862": 270, "1263714068241546": 270, "9993519409971622": 270, "1909320767063554": 270, "016796159999999997": 270, "46380627201679264": 270, "3806359704987118j": 270, "4988817673846036": 270, "333342139809402j": 270, "5543277195082319": 270, "22961005941718524j": 270, "5291527586053246": 270, "2828380420991956j": 270, "lyon": 270, "understand": 270, "3rd": 270, "insid": 270, "outsid": 270, "unstabl": 270, "n_symbol": 271, "els": 271, "pb": 271, "x_bb_rect": 271, "papr_bb_rect": 271, "x_pb_rect": 271, "papr_pb_rect": 271, "x_bb_0p1": 271, "papr_bb_0p1": 271, "x_pb_0p1": 271, "papr_pb_0p1": 271, "x_bb_0p5": 271, "papr_bb_0p5": 271, "x_pb_0p5": 271, "papr_pb_0p5": 271, "x_bb_0p9": 271, "papr_bb_0p9": 271, "x_pb_0p9": 271, "papr_pb_0p9": 271, "2f": 271, "rf": [271, 272], "512": 271, "sweep_alpha": 271, "bb_papr": 271, "pb_papr": 271, "bpsk_bb_papr": 271, "bpsk_pb_papr": 271, "qpsk_bb_papr": 271, "qpsk_pb_papr": 271, "psk8_bb_papr": 271, "psk8_pb_papr": 271, "psk16_bb_papr": 271, "psk16_pb_papr": 271, "configur": 272, "loop_filt": 272, "0x000002276d2bcc08": 272, "theta_0": 272, "phase_error": 272, "freq_estim": 272, "suptitl": [272, 273], "direct": [272, 276], "synthes": [272, 276], "dd": [272, 276], "avail": [272, 273, 275], "001": 272, "b_nt": 272, "0005": 272, "0125": 272, "015": 272, "0175": 272, "t_lock": 272, "analyze_psk": 273, "100_000": 273, "n0": 273, "tx_mf": 273, "1e6": 273, "bpsk_ber": 273, "bpsk_ser": 273, "qpsk_ber": 273, "qpsk_ser": 273, "psk8_ber": 273, "psk8_ser": 273, "psk16_ber": 273, "psk16_ser": 273, "simul": [273, 275], "1e0": 273, "psk8_bin": 273, "psk8_grai": 273, "wors": 273, "rc_0p1": 274, "rc_0p5": 274, "rc_0p9": 274, "pm": 274, "nearli": 274, "small": 274, "lobe": 274, "much": 274, "freqz": 274, "worn": 274, "whole": 274, "h_rc_0p1": 274, "h_rc_0p5": 274, "h_rc_0p9": 274, "p_rect": 274, "cumsum": 274, "p_rc_0p1": 274, "p_rc_0p5": 274, "p_rc_0p9": 274, "within": 274, "srrc_0p1": 274, "srrc_0p5": 274, "srrc_0p9": 274, "therefor": 274, "significantli": 274, "due": 274, "being": 274, "h_srrc_0p1": 274, "h_srrc_0p5": 274, "h_srrc_0p9": 274, "p_srrc_0p1": 274, "p_srrc_0p5": 274, "p_srrc_0p9": 274, "gauss_0p1": 274, "gauss_0p2": 274, "gauss_0p3": 274, "softwar": 275, "radio": 275, "goal": 275, "analyz": 275, "reli": 275, "interoper": 275, "veri": 275, "numba": 275, "acceler": 275, "computation": 275, "intens": 275, "addition": 275, "aim": 275, "replic": 275, "relev": 275, "toolbox": 275, "progress": 275, "someth": 275, "pleas": 275, "open": 275, "issu": 275, "pypi": 275, "api": [275, 277], "convers": [275, 276], "synchron": 275, "budget": [275, 276], "manipul": 275, "novemb": 276, "2023": 276, "abil": 276, "renam": 276, "multirate_tap": 276, "polyphase_matrix": 276, "matt": 276, "hostett": 276, "move": 276, "model": 276, "replac": 276, "pylint": 276, "black": 276, "improv": 276, "septemb": 276, "sensibl": 276, "august": 276, "27": 276, "without": 276, "superflu": 276, "translat": 276, "fix": [276, 277], "juli": 276, "firinterpol": 276, "impair": 276, "fpsl": 276, "helper": 276, "semant": 277, "major": 277, "minor": 277, "patch": 277, "introduc": 277, "featur": 277, "backward": 277, "compat": 277, "make": 277, "bug": 277, "There": 277, "guarante": 277, "them": 277, "thei": 277}, "objects": {"": [[3, 0, 0, 1, "sdr", ""]], "sdr": [[9, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [26, 1, 1, "", "Decimator", "Implements a polyphase decimating FIR filter."], [37, 1, 1, "", "Differentiator", "Implements a differentiator FIR filter."], [39, 1, 1, "", "EnergyDetector", "Implements an energy detector."], [44, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [51, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [69, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [76, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [95, 1, 1, "", "Integrator", "Implements an integrator IIR filter."], [97, 1, 1, "", "Interpolator", "Implements a polyphase interpolating FIR filter."], [108, 1, 1, "", "LinearModulation", "Implements linear phase/amplitude modulation with arbitrary symbol mapping."], [126, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [135, 1, 1, "", "MSK", "Implements minimum-shift keying (MSK) modulation and demodulation."], [137, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [145, 1, 1, "", "OQPSK", "Implements offset quadrature phase-shift keying (OQPSK) modulation and demodulation."], [149, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [157, 1, 1, "", "PiMPSK", "Implements $pi/M$ phase-shift keying ($pi/M$ PSK) modulation and demodulation."], [159, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [160, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [161, 1, 1, "", "ReplicaCorrelator", "Implements an clairvoyant replica-correlator detector."], [166, 1, 1, "", "Resampler", "Implements a polyphase rational resampling FIR filter."], [179, 5, 1, "", "albersheim", "Estimates the minimum required single-sample SNR, given $N_{NC}$ non-coherent combinations, to achieve a probability of detection $P_D$ and probability of false alarm $P_{FA}$. This function implements Albersheim's equation."], [180, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [181, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [182, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [183, 5, 1, "", "barker", "Returns the Barker code/sequence of length $N$."], [184, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [185, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [186, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [187, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [188, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [189, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [190, 5, 1, "", "db", "Converts from linear units to decibels."], [191, 5, 1, "", "design_bandpass_fir", "Designs a bandpass FIR filter impulse response $h[n]$ using the window method."], [192, 5, 1, "", "design_bandstop_fir", "Designs a bandstop FIR filter impulse response $h[n]$ using the window method."], [193, 5, 1, "", "design_frac_delay_fir", "Designs a fractional delay FIR filter impulse response $h[n]$ using the Kaiser window method."], [194, 5, 1, "", "design_highpass_fir", "Designs a highpass FIR filter impulse response $h[n]$ using the window method."], [195, 5, 1, "", "design_lowpass_fir", "Designs a lowpass FIR filter impulse response $h[n]$ using the window method."], [196, 5, 1, "", "design_multirate_fir", "Designs a multirate FIR filter impulse response $h[n]$ using the Kaiser window method."], [197, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [198, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [199, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [200, 5, 1, "", "downsample", "Downsamples the time-domain signal $x[n]$ by the factor $r$."], [201, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [202, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [203, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [204, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [205, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [206, 5, 1, "", "euclidean", "Measures the Euclidean distance between two signals $x[n]$ and $y[n]$."], [207, 5, 1, "", "evm", "Calculates the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [208, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [209, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [210, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [211, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [212, 5, 1, "", "half_sine", "Returns a half-sine pulse shape."], [213, 5, 1, "", "hamming", "Measures the Hamming distance between two signals $x[n]$ and $y[n]$."], [214, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [215, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [216, 5, 1, "", "linear", "Converts from decibels to linear units."], [217, 5, 1, "", "mix", "Mixes the time-domain signal $x[n]$ with a complex exponential or real sinusoid."], [218, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [219, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [220, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [221, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [222, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [223, 5, 1, "", "percent", "Converts from a ratio to a percentage."], [245, 5, 1, "", "polyphase_decompose", "Decomposes the FIR filter taps $h_i$ into the polyphase matrix $H_{i, j}$ with $B$ phases."], [246, 5, 1, "", "ppb", "Converts from a ratio to parts per billion (ppb)."], [247, 5, 1, "", "ppm", "Converts from a ratio to parts per million (ppm)."], [248, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [249, 5, 1, "", "rectangular", "Returns a rectangular pulse shape."], [250, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [251, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [252, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [253, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [254, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [255, 5, 1, "", "to_complex_bb", "Converts the real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$ to a complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c} = f_{s,r}/2$."], [256, 5, 1, "", "to_real_pb", "Converts the complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$ to a real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r} = 2f_{s,c}$."], [257, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [258, 5, 1, "", "upsample", "Upsamples the time-domain signal $x[n]$ by the factor $r$."], [259, 5, 1, "", "wavelength", "Calculates the wavelength $lambda$ of an electromagnetic wave with frequency $f$."], [260, 5, 1, "", "zadoff_chu", "Returns the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.ClosedLoopPLL": [[10, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [11, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [12, 2, 1, "", "K0", "The NCO gain $K_0$."], [13, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [14, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [15, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [16, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [17, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [18, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [19, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [20, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [21, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [22, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [23, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [24, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [25, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[16, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [16, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [16, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [16, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [16, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[17, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[19, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[22, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.Decimator": [[27, 3, 1, "", "__call__", "Filters and decimates the input signal $x[n]$ with the polyphase FIR filter."], [28, 3, 1, "", "__init__", "Creates a polyphase FIR decimating filter."], [29, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [30, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [31, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [32, 2, 1, "", "method", "The method used to design the multirate filter."], [33, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [34, 2, 1, "", "rate", "The decimation rate $r$."], [35, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [36, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Decimator.__call__": [[27, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [27, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Decimator.__init__": [[28, 4, 2, "p-rate", "rate", "The decimation rate $r$."], [28, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [28, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.Differentiator": [[38, 3, 1, "", "__init__", "Creates a differentiator FIR filter."]], "sdr.Differentiator.__init__": [[38, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.EnergyDetector": [[40, 3, 1, "", "p_d", "Computes the probability of detection $P_D$."], [41, 3, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [42, 3, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [43, 3, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.EnergyDetector.p_d": [[40, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [40, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [40, 4, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.p_fa": [[41, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [41, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [41, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [41, 4, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.EnergyDetector.roc": [[42, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [42, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [42, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."], [42, 4, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.threshold": [[43, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [43, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [43, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [43, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.ErrorRate": [[45, 3, 1, "", "__init__", "Creates a new error rate tabulation object."], [46, 3, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [47, 3, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [48, 3, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [49, 3, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [50, 3, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[46, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [46, 4, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [46, 4, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[47, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[48, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[50, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[52, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the FIR filter."], [53, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [54, 3, 1, "", "__len__", "Returns the filter length $N + 1$."], [55, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [56, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [57, 2, 1, "", "delay", "The delay of the FIR filter $d = lfloor frac{N + 1}{2} rfloor$ in samples."], [58, 3, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [59, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the FIR filter."], [60, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(omega)$ of the FIR filter on a logarithmic frequency axis."], [61, 3, 1, "", "group_delay", "Returns the group delay $tau_g(omega)$ of the FIR filter."], [62, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [63, 2, 1, "", "order", "The order of the FIR filter $N$."], [64, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [65, 2, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [66, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [67, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [68, 2, 1, "", "taps", "The feedforward taps $h_i$ for $i = 0,...,N$."]], "sdr.FIR.__call__": [[52, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [52, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.FIR.__init__": [[53, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$ for $i = 0,...N$."], [53, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FIR.frequency_response": [[59, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [59, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.frequency_response_log": [[60, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [60, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [60, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.group_delay": [[61, 4, 2, "p-N", "N", "The number of samples in the group delay."], [61, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[62, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.step_response": [[66, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FarrowResampler": [[70, 3, 1, "", "__call__", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [71, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [72, 2, 1, "", "order", "The order of the filter."], [73, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [74, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [75, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__call__": [[70, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [70, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.__init__": [[71, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FarrowResampler.reset": [[73, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[77, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [78, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the IIR filter."], [79, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [80, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [81, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [82, 2, 1, "", "a_taps", "The feedback taps $a_j$ for $j = 0,...,N$."], [83, 2, 1, "", "b_taps", "The feedforward taps $b_i$ for $i = 0,...,M$."], [84, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the IIR filter."], [85, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(omega)$ of the IIR filter on a logarithmic frequency axis."], [86, 2, 1, "", "gain", "The gain of the IIR filter."], [87, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [88, 2, 1, "", "order", "The order of the IIR filter $N$."], [89, 2, 1, "", "poles", "The poles of the IIR filter."], [90, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [91, 2, 1, "", "state", "The filter state."], [92, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [93, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [94, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[77, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [77, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [77, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."], [77, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__call__": [[78, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.IIR.__init__": [[79, 4, 2, "p-a", "a", "The feedback coefficients $a_j$ for $j = 0,...,N$."], [79, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$ for $i = 0,...,M$."], [79, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.IIR.frequency_response": [[84, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [84, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[85, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [85, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [85, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[87, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[92, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.Integrator": [[96, 3, 1, "", "__init__", "Creates an integrating IIR filter."]], "sdr.Integrator.__init__": [[96, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.Interpolator": [[98, 3, 1, "", "__call__", "Interpolates and filters the input signal $x[n]$ with the polyphase FIR filter."], [99, 3, 1, "", "__init__", "Creates a polyphase FIR interpolating filter."], [100, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [101, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [102, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [103, 2, 1, "", "method", "The method used to design the multirate filter."], [104, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [105, 2, 1, "", "rate", "The interpolation rate $r$."], [106, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [107, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Interpolator.__call__": [[98, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [98, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Interpolator.__init__": [[99, 4, 2, "p-rate", "rate", "The interpolation rate $r$."], [99, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [99, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.LinearModulation": [[109, 3, 1, "", "__init__", "Creates a new linear phase/amplitude modulation object."], [110, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [111, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [112, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [113, 2, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [114, 3, 1, "", "decide_symbols", "Converts the received complex symbols $hat{a}[k]$ into decimal symbol decisions $hat{s}[k]$ using maximum-likelihood estimation (MLE)."], [115, 3, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples $hat{x}[n]$ into decimal symbol decisions $hat{s}[k]$ using matched filtering and maximum-likelihood estimation."], [116, 3, 1, "", "map_symbols", "Converts the decimal symbols $s[k]$ to complex symbols $a[k]$."], [117, 3, 1, "", "modulate", "Modulates the decimal symbols $s[k]$ into pulse-shaped complex samples $x[n]$."], [118, 2, 1, "", "order", "The modulation order $M = 2^k$."], [119, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [120, 2, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [121, 2, 1, "", "rx_filter", "The receive decimating matched filter. The filter coefficients are matched to the pulse shape $h[-n]^*$."], [122, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [123, 2, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [124, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."], [125, 2, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter. The filter coefficients are the pulse shape $h[n]$."]], "sdr.LinearModulation.__init__": [[109, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [109, 4, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees to apply to symbol_map."], [109, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [109, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [109, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [109, 4, 2, "p-symbol_map", "symbol_map", "The symbol mapping ${0, dots, M-1} mapsto mathbb{C}$. An $M$-length array whose indices are decimal symbols $s[k]$ and whose values are complex symbols $a[k]$, where $M$ is the modulation order."]], "sdr.LinearModulation.ber": [[112, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.LinearModulation.decide_symbols": [[114, 4, 2, "p-a_hat", "a_hat", "The received complex symbols $hat{a}[k]$."]], "sdr.LinearModulation.demodulate": [[115, 4, 2, "p-x_hat", "x_hat", "The received pulse-shaped complex samples $hat{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.LinearModulation.map_symbols": [[116, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to map, $0$ to $M-1$."]], "sdr.LinearModulation.modulate": [[117, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.LinearModulation.ser": [[122, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.LoopFilter": [[127, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [128, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [129, 3, 1, "", "__call__", "Filters the input signal $x[n]$."], [130, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [131, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [132, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [133, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [134, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__call__": [[129, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.LoopFilter.__init__": [[130, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [130, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [130, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [130, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.MSK": [[136, 3, 1, "", "__init__", "Creates a new MSK object."]], "sdr.MSK.__init__": [[136, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [136, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [136, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.NCO": [[138, 2, 1, "", "K0", "(Settable) The NCO gain $K_0$."], [139, 3, 1, "", "__call__", "Steps the NCO with variable frequency and/or phase signals."], [140, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [141, 2, 1, "", "increment", "(Settable) The constant phase accumulation $omega$ of the NCO in radians/sample."], [142, 2, 1, "", "offset", "(Settable) The absolute phase offset $theta$ of the NCO in radians."], [143, 3, 1, "", "reset", "Resets the NCO."], [144, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__call__": [[139, 4, 2, "p-freq", "freq", "The variable frequency signal $f[n]$ in radians/sample. This input signal varies the per-sample phase increment of the NCO. If None, the signal is all zeros."], [139, 4, 2, "p-phase", "phase", "The variable phase signal $p[n]$ in radians. This input signal varies the per-sample phase offset of the NCO. If None, the signal is all zeros."]], "sdr.NCO.__init__": [[140, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [140, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [140, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.NCO.step": [[144, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.OQPSK": [[146, 3, 1, "", "__init__", "Creates a new OQPSK object."], [147, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [148, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."]], "sdr.OQPSK.__init__": [[146, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [146, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [146, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [146, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [146, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [146, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK": [[150, 3, 1, "", "__init__", "Creates a new PSK object."], [151, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [152, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [153, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [154, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [155, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [156, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[150, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [150, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [150, 4, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [150, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [150, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [150, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [150, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[153, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [153, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.ser": [[155, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [155, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.PiMPSK": [[158, 3, 1, "", "__init__", "Creates a new $pi/M$ PSK object."]], "sdr.PiMPSK.__init__": [[158, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [158, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [158, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [158, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [158, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [158, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [158, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.Q": [[159, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[160, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.ReplicaCorrelator": [[162, 3, 1, "", "p_d", "Computes the probability of detection $P_D$."], [163, 3, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [164, 3, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [165, 3, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.ReplicaCorrelator.p_d": [[162, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [162, 4, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [162, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."]], "sdr.ReplicaCorrelator.p_fa": [[163, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [163, 4, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [163, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [163, 4, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.ReplicaCorrelator.roc": [[164, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [164, 4, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [164, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."]], "sdr.ReplicaCorrelator.threshold": [[165, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [165, 4, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [165, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [165, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.Resampler": [[167, 3, 1, "", "__call__", "Resamples and filters the input signal $x[n]$ with the polyphase FIR filter."], [168, 3, 1, "", "__init__", "Creates a polyphase FIR rational resampling filter."], [169, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [170, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [171, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [172, 2, 1, "", "down", "The decimation rate $Q$."], [173, 2, 1, "", "method", "The method used to design the multirate filter."], [174, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [175, 2, 1, "", "rate", "The resampling rate $P/Q$."], [176, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [177, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."], [178, 2, 1, "", "up", "The interpolation rate $P$."]], "sdr.Resampler.__init__": [[168, 4, 2, "p-down", "down", "The decimation rate $Q$."], [168, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [168, 4, 2, "p-taps", "taps", "The multirate filter design specification."], [168, 4, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.albersheim": [[179, 4, 2, "p-N_nc", "N_nc", "The number of non-coherent combinations $N_{NC} ge 1$."], [179, 4, 2, "p-p_d", "p_d", "The desired probability of detection $P_D$ in $(0, 1)$."], [179, 4, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{FA}$ in $(0, 1)$."]], "sdr.average_power": [[180, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the average power. The default is None, which computes the average power of the entire array."], [180, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [180, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[181, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [181, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [181, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [181, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[182, 4, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [182, 4, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.barker": [[183, 4, 2, "p-length", "length", "The length $N$ of the Barker code/sequence."], [183, 4, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[184, 4, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [184, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [184, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[185, 4, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[186, 4, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[187, 4, 2, "p-p", "p", "The probability $p$ of a bit flip."], [187, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [187, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[188, 4, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[189, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.db": [[190, 4, 2, "p-type", "type", "The type of input value or signal."], [190, 4, 2, "p-x", "x", "The input value or signal."]], "sdr.design_bandpass_fir": [[191, 4, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [191, 4, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [191, 4, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [191, 4, 2, "p-order", "order", "The filter order $N$. Must be even."], [191, 4, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_bandstop_fir": [[192, 4, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [192, 4, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [192, 4, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [192, 4, 2, "p-order", "order", "The filter order $N$. Must be even."], [192, 4, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_frac_delay_fir": [[193, 4, 2, "p-delay", "delay", "The fractional delay $0 le Delta n le 1$."], [193, 4, 2, "p-length", "length", "The filter length $L$. Filters with even length have best performance. Filters with odd length are equivalent to an even-length filter with an appended zero."]], "sdr.design_highpass_fir": [[194, 4, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [194, 4, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [194, 4, 2, "p-order", "order", "The filter order $N$. Must be even."], [194, 4, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_lowpass_fir": [[195, 4, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [195, 4, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [195, 4, 2, "p-order", "order", "The filter order $N$. Must be even."], [195, 4, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_multirate_fir": [[196, 4, 2, "p-A_stop", "A_stop", "The stopband attenuation $A_{text{stop}}$ in dB."], [196, 4, 2, "p-down", "down", "The decimation rate $Q$."], [196, 4, 2, "p-half_length", "half_length", "The half-length of the polyphase filters."], [196, 4, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.diff_decode": [[197, 4, 2, "p-y", "y", "The input encoded data $y[k]$."], [197, 4, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[198, 4, 2, "p-x", "x", "The input uncoded data $x[k]$."], [198, 4, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[199, 4, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [199, 4, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [199, 4, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [199, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [199, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.downsample": [[200, 4, 2, "p-rate", "rate", "The downsampling factor $r$."], [200, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.ebn0_to_esn0": [[201, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [201, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [201, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[202, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [202, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [202, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [202, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[203, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the energy. The default is None, which computes the energy of the entire array."], [203, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [203, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[204, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [204, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [204, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[205, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [205, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.euclidean": [[206, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the distance. The default is None, which computes the distance across the entire array."], [206, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [206, 4, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.evm": [[207, 4, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [207, 4, 2, "p-output", "output", "The output type of the EVM calculation."], [207, 4, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [207, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.frequency_offset": [[208, 4, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [208, 4, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [208, 4, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [208, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [208, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[209, 4, 2, "p-distance", "distance", "The distance $d$ in meters between the transmitter and receiver."], [209, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[210, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [210, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [210, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [210, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[211, 4, 2, "p-n", "n", "The length of the Gray code."]], "sdr.half_sine": [[212, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [212, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [212, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.hamming": [[213, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the distance. The default is None, which computes the distance across the entire array."], [213, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [213, 4, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.hexdump": [[214, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [214, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[215, 4, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [215, 4, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [215, 4, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.linear": [[216, 4, 2, "p-type", "type", "The type of output value or signal."], [216, 4, 2, "p-x", "x", "The input value or signal in dB."]], "sdr.mix": [[217, 4, 2, "p-complex", "complex", "Indicates whether to mix by a complex exponential or real sinusoid."], [217, 4, 2, "p-freq", "freq", "The frequency $f$ of the sinusoid in Hz (or 1/samples if sample_rate=1). The frequency must satisfy $-f_s/2 le f le f_s/2$."], [217, 4, 2, "p-phase", "phase", "The phase $phi$ of the sinusoid in degrees."], [217, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal."], [217, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.pack": [[218, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [218, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [218, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[219, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the PAPR. The default is None, which computes the PAPR of the entire array."], [219, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[220, 4, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [220, 4, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [220, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[221, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the peak power. The default is None, which computes the peak power of the entire array."], [221, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [221, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[222, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [222, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.percent": [[223, 4, 2, "p-x", "x", "The input ratio."]], "sdr.plot": [[224, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [225, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [226, 5, 1, "", "eye", "Plots the eye diagram of the baseband modulated signal $x[n]$."], [227, 5, 1, "", "filter", "Plots the magnitude response $|H(omega)|^2$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [228, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [229, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [230, 5, 1, "", "magnitude_response", "Plots the magnitude response $|H(omega)|^2$ of the filter."], [231, 5, 1, "", "p_d", "Plots the probability of detection $P_D$ as a function of received SNR or ENR."], [232, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [233, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [234, 5, 1, "", "phase_response", "Plots the phase response $angle H(omega)$ of the filter."], [235, 5, 1, "", "phase_tree", "Plots the phase tree of a continuous-phase modulated (CPM) signal signal $x[n]$."], [236, 5, 1, "", "raster", "Plots a raster of the time-domain signal $x[n]$."], [237, 5, 1, "", "roc", "Plots the receiver operating characteristic (ROC) curve as a function of $P_{FA}$."], [238, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [239, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [240, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [241, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [242, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [243, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [244, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[224, 4, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [224, 4, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."], [224, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."]], "sdr.plot.constellation": [[225, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [225, 4, 2, "p-kwargs", "kwargs", "If heatmap=False, additional keyword arguments to pass to matplotlib.pyplot.scatter(). The following keyword arguments are set by default. The defaults may be overwritten."], [225, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [225, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.eye": [[226, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [226, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [226, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [226, 4, 2, "p-span", "span", "The number of symbols per raster."], [226, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [226, 4, 2, "p-x", "x", "The baseband modulated signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved."]], "sdr.plot.filter": [[227, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [227, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [227, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [227, 4, 2, "p-filter", "filter", "The filter definition."], [227, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [227, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[228, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [228, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [228, 4, 2, "p-filter", "filter", "The filter definition."], [228, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [228, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [228, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.impulse_response": [[229, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [229, 4, 2, "p-filter", "filter", "The filter definition."], [229, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.magnitude_response": [[230, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [230, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [230, 4, 2, "p-filter", "filter", "The filter definition."], [230, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [230, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [230, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."], [230, 4, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a linear or logarithmic magnitude response."]], "sdr.plot.p_d": [[231, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [231, 4, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [231, 4, 2, "p-x", "x", "The SNR or ENR in dB."], [231, 4, 2, "p-x_label", "x_label", "The x-axis label to use."]], "sdr.plot.periodogram": [[232, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [232, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [232, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [232, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [232, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [232, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [232, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [232, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [232, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [232, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."], [232, 4, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a linear or logarithmic power spectral density."]], "sdr.plot.phase_delay": [[233, 4, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [233, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [233, 4, 2, "p-filter", "filter", "The filter definition."], [233, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [233, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [233, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.phase_response": [[234, 4, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [234, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [234, 4, 2, "p-filter", "filter", "The filter definition."], [234, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [234, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [234, 4, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [234, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.phase_tree": [[235, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [235, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [235, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [235, 4, 2, "p-span", "span", "The number of symbols per raster."], [235, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [235, 4, 2, "p-x", "x", "The baseband CPM signal $x[n]$."]], "sdr.plot.raster": [[236, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [236, 4, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\"."], [236, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.collections.LineCollection. The following keyword arguments are set by default. The defaults may be overwritten."], [236, 4, 2, "p-length", "length", "The length of each raster in samples. This must be provided if x is 1D."], [236, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [236, 4, 2, "p-stride", "stride", "The stride between each raster in samples. If None, the stride is set to length."], [236, 4, 2, "p-x", "x", "The time-domain signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved. If x is 1D, the rastering is determined by length and stride. If x is 2D, the rows correspond to each raster."]], "sdr.plot.roc": [[237, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to the plotting function defined by type."], [237, 4, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [237, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [237, 4, 2, "p-type", "type", "The type of plot to generate."]], "sdr.plot.ser": [[238, 4, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [238, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."], [238, 4, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.spectrogram": [[239, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [239, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [239, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.pcolormesh(). The following keyword arguments are set by default. The defaults may be overwritten."], [239, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [239, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [239, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [239, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [239, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [239, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[240, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [240, 4, 2, "p-filter", "filter", "The filter definition."], [240, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.symbol_map": [[241, 4, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [241, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot(). The following keyword arguments are set by default. The defaults may be overwritten."], [241, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [241, 4, 2, "p-modulation", "modulation", "The linear modulation or symbol map ${0, dots, M-1} mapsto mathbb{C}$."]], "sdr.plot.time_domain": [[242, 4, 2, "p-centered", "centered", "Indicates whether to center the x-axis about 0. This argument is mutually exclusive with offset."], [242, 4, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal. If \"color\", the real and imaginary parts will have different colors based on the current Matplotlib color cycle. If \"line\", the real part will have a solid line and the imaginary part will have a dashed line, and both lines will share the same color."], [242, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [242, 4, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. The units of the offset are $1/f_s$. This argument is mutually exclusive with centered."], [242, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [242, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[244, 4, 2, "p-filter", "filter", "The filter definition."], [244, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.polyphase_decompose": [[245, 4, 2, "p-phases", "phases", "The number of phases $B$."], [245, 4, 2, "p-taps", "taps", "The multirate FIR filter taps $h_i$."]], "sdr.ppb": [[246, 4, 2, "p-x", "x", "The input ratio."]], "sdr.ppm": [[247, 4, 2, "p-x", "x", "The input ratio."]], "sdr.raised_cosine": [[248, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [248, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [248, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [248, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rectangular": [[249, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [249, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [249, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[250, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [250, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[251, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [251, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [251, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [251, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[252, 4, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [252, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.snr_to_ebn0": [[253, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [253, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [253, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [253, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[254, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [254, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.to_complex_bb": [[255, 4, 2, "p-x_r", "x_r", "The real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$. If the length is odd, one zero is appended to the end."]], "sdr.to_real_pb": [[256, 4, 2, "p-x_c", "x_c", "The complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$."]], "sdr.unpack": [[257, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [257, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [257, 4, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.upsample": [[258, 4, 2, "p-rate", "rate", "The upsampling factor $r$."], [258, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.wavelength": [[259, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.zadoff_chu": [[260, 4, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [260, 4, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence. The root must be relatively prime to the length, i.e., $gcd(u, N) = 1$."], [260, 4, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence. When $q ne 0$, the returned sequence is a cyclic shift of the root-$u$ Zadoff-Chu sequence."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"convers": 0, "decibel": 0, "ratio": 0, "from": [0, 265, 266, 267], "e_b": 0, "n_0": 0, "e_": 0, "": [0, 269, 270], "n": [0, 268, 269, 270], "data": 1, "manipul": [1, 3], "detect": [2, 7], "detector": 2, "theoret": 2, "limit": 2, "digit": [3, 270], "signal": [3, 262, 268, 271], "process": 3, "fir": [3, 269], "filter": [3, 7, 269, 270, 272], "iir": [3, 270], "multir": 3, "arbitrari": [3, 268], "resampl": [3, 268], "correl": 3, "link": 4, "budget": 4, "channel": [4, 262], "capac": 4, "path": 4, "loss": 4, "antenna": 4, "measur": 5, "energi": 5, "power": [5, 271], "voltag": 5, "distanc": 5, "modul": [5, 6, 7], "linear": 6, "continu": 6, "phase": [6, 272, 273], "orthogon": 6, "puls": [6, 271, 274], "shape": [6, 271, 274], "symbol": [6, 273], "map": [6, 273], "encod": 6, "plot": [7, 271], "configur": [7, 265, 267], "time": [7, 271, 272], "domain": [7, 271, 272], "frequenc": [7, 269, 270, 271, 272], "spectral": 7, "estim": 7, "analysi": 7, "probabl": 8, "note": [9, 209, 230, 232, 239], "constructor": [9, 26, 37, 44, 51, 69, 76, 95, 97, 108, 126, 135, 137, 145, 149, 157, 166], "method": [9, 26, 37, 39, 44, 51, 69, 76, 95, 97, 108, 126, 135, 137, 145, 149, 157, 161, 166], "properti": [9, 26, 37, 51, 69, 76, 95, 97, 108, 126, 135, 137, 145, 149, 157, 166], "special": [26, 37, 51, 69, 76, 95, 97, 126, 137, 166], "string": [26, 37, 51, 76, 95, 97, 108, 135, 145, 149, 157, 166], "represent": [26, 37, 51, 76, 95, 97, 108, 135, 145, 149, 157, 166], "stream": [26, 37, 51, 76, 95, 97, 166], "mode": [26, 37, 51, 76, 95, 97, 166], "onli": [26, 37, 51, 76, 95, 97, 166], "see": [44, 46, 59, 60, 61, 62, 66, 84, 85, 87, 92, 109, 112, 122, 136, 146, 150, 153, 155, 158, 159, 160, 189, 219, 258], "also": [44, 46, 59, 60, 61, 62, 66, 84, 85, 87, 92, 109, 112, 122, 136, 146, 150, 153, 155, 158, 159, 160, 189, 219, 258], "warn": [200, 258], "sequenc": 261, "simul": 262, "model": 262, "impair": 262, "synchron": 263, "document": 264, "instal": [264, 265, 266, 267, 275], "build": 264, "doc": 264, "serv": 264, "format": 265, "run": [265, 267], "linter": 265, "formatt": 265, "pre": 265, "commit": 265, "v": [265, 267], "code": [265, 267], "pypi": 266, "github": 266, "edit": 266, "local": 266, "folder": 266, "dev": 266, "depend": 266, "unit": 267, "test": 267, "command": 267, "line": 267, "farrow": 268, "construct": 268, "an": [268, 269, 270], "input": 268, "x": 268, "t_": 268, "rate": [268, 273], "r": 268, "y": 268, "frac": 268, "upsampl": 268, "integ": 268, "downsampl": 268, "irrat": 268, "creat": [269, 270], "examin": [269, 270, 271], "impuls": [269, 270], "respons": [269, 270, 272], "h": [269, 270], "step": [269, 270, 272], "omega": [269, 270], "group": [269, 270], "delai": [269, 270], "tau_g": [269, 270], "fulli": [269, 270], "analyz": [269, 270, 272], "zero": 270, "pole": 270, "stabil": 270, "peak": 271, "averag": 271, "qpsk": [271, 273], "variou": 271, "across": [271, 272], "excess": 271, "bandwidth": 271, "lock": 272, "loop": 272, "design": 272, "proport": 272, "plu": 272, "integr": 272, "ppi": 272, "implement": 272, "pll": 272, "close": 272, "perform": 272, "compar": 272, "zeta": 272, "b_n": 272, "t": 272, "shift": 273, "kei": 273, "constel": 273, "bpsk": 273, "8": [273, 276], "psk": 273, "16": 273, "error": 273, "curv": 273, "bit": 273, "rais": 274, "cosin": 274, "squar": 274, "root": 274, "gaussian": 274, "sdr": 275, "featur": 275, "v0": 276, "0": 276, "10": 276, "chang": 276, "contributor": 276, "9": 276, "7": 276, "6": 276, "5": 276, "4": 276, "3": 276, "2": 276, "1": 276, "version": 277, "alpha": 277, "releas": 277, "beta": 277}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Conversions": [[0, "conversions"]], "Decibels": [[0, "decibels"]], "Ratios": [[0, "ratios"]], "From E_b/N_0": [[0, "from-e-b-n-0"]], "From E_s/N_0": [[0, "from-e-s-n-0"]], "From S/N": [[0, "from-s-n"]], "Data manipulation": [[1, "data-manipulation"]], "Detection": [[2, "detection"], [7, "detection"]], "Detectors": [[2, "detectors"]], "Theoretical limits": [[2, "theoretical-limits"]], "Digital signal processing": [[3, "digital-signal-processing"]], "FIR filtering": [[3, "fir-filtering"]], "IIR filtering": [[3, "iir-filtering"]], "Multirate filtering": [[3, "multirate-filtering"]], "Arbitrary resampling": [[3, "arbitrary-resampling"]], "Correlation": [[3, "correlation"]], "Signal manipulation": [[3, "signal-manipulation"]], "Link budgets": [[4, "link-budgets"]], "Channel capacity": [[4, "channel-capacity"]], "Path losses": [[4, "path-losses"]], "Antennas": [[4, "antennas"]], "Measurement": [[5, "measurement"]], "Energy": [[5, "energy"]], "Power": [[5, "power"]], "Voltage": [[5, "voltage"]], "Distance": [[5, "distance"]], "Modulation": [[5, "modulation"], [6, "modulation"], [7, "modulation"]], "Linear modulations": [[6, "linear-modulations"]], "Continuous-phase modulations": [[6, "continuous-phase-modulations"]], "Orthogonal modulations": [[6, "orthogonal-modulations"]], "Pulse shaping": [[6, "pulse-shaping"]], "Symbol mapping": [[6, "symbol-mapping"], [273, "symbol-mapping"]], "Symbol encoding": [[6, "symbol-encoding"]], "Plotting": [[7, "plotting"]], "Configuration": [[7, "configuration"], [265, "configuration"], [267, "configuration"]], "Time-domain": [[7, "time-domain"]], "Frequency-domain": [[7, "frequency-domain"]], "Spectral estimation": [[7, "spectral-estimation"]], "Filter analysis": [[7, "filter-analysis"]], "Probability": [[8, "probability"]], "Note": [[9, null], [209, null], [230, null], [232, null], [232, null], [239, null]], "Constructors": [[9, "constructors"], [26, "constructors"], [37, "constructors"], [44, "constructors"], [51, "constructors"], [69, "constructors"], [76, "constructors"], [95, "constructors"], [97, "constructors"], [108, "constructors"], [126, "constructors"], [135, "constructors"], [137, "constructors"], [145, "constructors"], [149, "constructors"], [157, "constructors"], [166, "constructors"]], "Methods": [[9, "methods"], [26, "methods"], [37, "methods"], [39, "methods"], [44, "methods"], [51, "methods"], [69, "methods"], [76, "methods"], [95, "methods"], [97, "methods"], [108, "methods"], [126, "methods"], [135, "methods"], [137, "methods"], [145, "methods"], [149, "methods"], [157, "methods"], [161, "methods"], [166, "methods"]], "Properties": [[9, "properties"], [26, "properties"], [37, "properties"], [51, "properties"], [69, "properties"], [76, "properties"], [95, "properties"], [97, "properties"], [108, "properties"], [126, "properties"], [135, "properties"], [137, "properties"], [145, "properties"], [149, "properties"], [157, "properties"], [166, "properties"]], "Special methods": [[26, "special-methods"], [37, "special-methods"], [51, "special-methods"], [69, "special-methods"], [76, "special-methods"], [95, "special-methods"], [97, "special-methods"], [126, "special-methods"], [137, "special-methods"], [166, "special-methods"]], "String representation": [[26, "string-representation"], [37, "string-representation"], [51, "string-representation"], [76, "string-representation"], [95, "string-representation"], [97, "string-representation"], [108, "string-representation"], [135, "string-representation"], [145, "string-representation"], [149, "string-representation"], [157, "string-representation"], [166, "string-representation"]], "Streaming mode only": [[26, "streaming-mode-only"], [37, "streaming-mode-only"], [51, "streaming-mode-only"], [76, "streaming-mode-only"], [95, "streaming-mode-only"], [97, "streaming-mode-only"], [166, "streaming-mode-only"]], "See also": [[44, null], [46, null], [59, null], [60, null], [61, null], [62, null], [66, null], [84, null], [85, null], [87, null], [92, null], [109, null], [112, null], [122, null], [136, null], [146, null], [150, null], [153, null], [155, null], [158, null], [159, null], [160, null], [189, null], [219, null], [258, null]], "Warning": [[200, null], [258, null]], "Sequences": [[261, "sequences"]], "Simulation": [[262, "simulation"]], "Channel models": [[262, "channel-models"]], "Signal impairments": [[262, "signal-impairments"]], "Synchronization": [[263, "synchronization"]], "Documentation": [[264, "documentation"]], "Install": [[264, "install"], [265, "install"], [267, "install"]], "Build the docs": [[264, "build-the-docs"]], "Serve the docs": [[264, "serve-the-docs"]], "Formatting": [[265, "formatting"]], "Run the linter": [[265, "run-the-linter"]], "Run the formatter": [[265, "run-the-formatter"]], "Pre-commit": [[265, "pre-commit"]], "Run from VS Code": [[265, "run-from-vs-code"], [267, "run-from-vs-code"]], "Installation": [[266, "installation"], [275, "installation"]], "Install from PyPI": [[266, "install-from-pypi"]], "Install from GitHub": [[266, "install-from-github"]], "Editable install from local folder": [[266, "editable-install-from-local-folder"]], "Install the dev dependencies": [[266, "install-the-dev-dependencies"]], "Unit Tests": [[267, "unit-tests"]], "Run from the command line": [[267, "run-from-the-command-line"]], "Farrow arbitrary resampler": [[268, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[268, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[268, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[268, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[268, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[268, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[268, "downsample-by-an-irrational-rate"]], "FIR filters": [[269, "fir-filters"]], "Create an FIR filter": [[269, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[269, "examine-the-impulse-response-h-n"], [270, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[269, "examine-the-step-response-s-n"], [270, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[269, "examine-the-frequency-response-h-omega"], [270, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[269, "examine-the-group-delay-tau-g-omega"], [270, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[269, "fully-analyze-a-fir-filter"]], "IIR filters": [[270, "iir-filters"]], "Create an IIR filter": [[270, "create-an-iir-filter"]], "Examine the zeros and poles": [[270, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[270, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[270, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[271, "peak-to-average-power"]], "QPSK signal with various pulse shapes": [[271, "qpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[271, "examine-time-domain"]], "Examine frequency domain": [[271, "examine-frequency-domain"]], "Plot across excess bandwidth": [[271, "plot-across-excess-bandwidth"]], "Phase-locked loops": [[272, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[272, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[272, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[272, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[272, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[272, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[272, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[272, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[273, "phase-shift-keying"]], "Constellations": [[273, "constellations"]], "BPSK": [[273, "bpsk"]], "QPSK": [[273, "qpsk"]], "8-PSK": [[273, "id1"]], "16-PSK": [[273, "id2"]], "Error rate curves": [[273, "error-rate-curves"]], "Bit error rate curves": [[273, "bit-error-rate-curves"]], "Symbol error rate curves": [[273, "symbol-error-rate-curves"]], "Pulse shapes": [[274, "pulse-shapes"]], "Raised cosine": [[274, "raised-cosine"]], "Square-root raised cosine": [[274, "square-root-raised-cosine"]], "Gaussian": [[274, "gaussian"]], "sdr": [[275, "sdr"]], "Features": [[275, "features"]], "v0.0": [[276, "v0-0"]], "v0.0.10": [[276, "v0-0-10"]], "Changes": [[276, "changes"], [276, "id1"], [276, "id3"], [276, "id5"], [276, "id7"], [276, "id9"], [276, "id11"], [276, "id13"], [276, "id15"], [276, "id17"]], "Contributors": [[276, "contributors"], [276, "id2"], [276, "id4"], [276, "id6"], [276, "id8"], [276, "id10"], [276, "id12"], [276, "id14"], [276, "id16"], [276, "id18"]], "v0.0.9": [[276, "v0-0-9"]], "v0.0.8": [[276, "v0-0-8"]], "v0.0.7": [[276, "v0-0-7"]], "v0.0.6": [[276, "v0-0-6"]], "v0.0.5": [[276, "v0-0-5"]], "v0.0.4": [[276, "v0-0-4"]], "v0.0.3": [[276, "v0-0-3"]], "v0.0.2": [[276, "v0-0-2"]], "v0.0.1": [[276, "v0-0-1"]], "Versioning": [[277, "versioning"]], "Alpha releases": [[277, "alpha-releases"]], "Beta releases": [[277, "beta-releases"]]}, "indexentries": {"module": [[3, "module-sdr"]], "sdr": [[3, "module-sdr"]]}, "docurls": ["api/conversions/", "api/data-manipulation/", "api/detection/", "api/dsp/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.Decimator/", "api/sdr.Decimator.__call__/", "api/sdr.Decimator.__init__/", "api/sdr.Decimator.__repr__/", "api/sdr.Decimator.__str__/", "api/sdr.Decimator.delay/", "api/sdr.Decimator.method/", "api/sdr.Decimator.polyphase_taps/", "api/sdr.Decimator.rate/", "api/sdr.Decimator.reset/", "api/sdr.Decimator.taps/", "api/sdr.Differentiator/", "api/sdr.Differentiator.__init__/", "api/sdr.EnergyDetector/", "api/sdr.EnergyDetector.p_d/", "api/sdr.EnergyDetector.p_fa/", "api/sdr.EnergyDetector.roc/", "api/sdr.EnergyDetector.threshold/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__call__/", "api/sdr.FIR.__init__/", "api/sdr.FIR.__len__/", "api/sdr.FIR.__repr__/", "api/sdr.FIR.__str__/", "api/sdr.FIR.delay/", "api/sdr.FIR.flush/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.frequency_response_log/", "api/sdr.FIR.group_delay/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.reset/", "api/sdr.FIR.state/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__call__/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__call__/", "api/sdr.IIR.__init__/", "api/sdr.IIR.__repr__/", "api/sdr.IIR.__str__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.state/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.Integrator/", "api/sdr.Integrator.__init__/", "api/sdr.Interpolator/", "api/sdr.Interpolator.__call__/", "api/sdr.Interpolator.__init__/", "api/sdr.Interpolator.__repr__/", "api/sdr.Interpolator.__str__/", "api/sdr.Interpolator.delay/", "api/sdr.Interpolator.method/", "api/sdr.Interpolator.polyphase_taps/", "api/sdr.Interpolator.rate/", "api/sdr.Interpolator.reset/", "api/sdr.Interpolator.taps/", "api/sdr.LinearModulation/", "api/sdr.LinearModulation.__init__/", "api/sdr.LinearModulation.__repr__/", "api/sdr.LinearModulation.__str__/", "api/sdr.LinearModulation.ber/", "api/sdr.LinearModulation.bps/", "api/sdr.LinearModulation.decide_symbols/", "api/sdr.LinearModulation.demodulate/", "api/sdr.LinearModulation.map_symbols/", "api/sdr.LinearModulation.modulate/", "api/sdr.LinearModulation.order/", "api/sdr.LinearModulation.phase_offset/", "api/sdr.LinearModulation.pulse_shape/", "api/sdr.LinearModulation.rx_filter/", "api/sdr.LinearModulation.ser/", "api/sdr.LinearModulation.sps/", "api/sdr.LinearModulation.symbol_map/", "api/sdr.LinearModulation.tx_filter/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__call__/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.MSK/", "api/sdr.MSK.__init__/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__call__/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.OQPSK/", "api/sdr.OQPSK.__init__/", "api/sdr.OQPSK.__repr__/", "api/sdr.OQPSK.__str__/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.__repr__/", "api/sdr.PSK.__str__/", "api/sdr.PSK.ber/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.PiMPSK/", "api/sdr.PiMPSK.__init__/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.ReplicaCorrelator/", "api/sdr.ReplicaCorrelator.p_d/", "api/sdr.ReplicaCorrelator.p_fa/", "api/sdr.ReplicaCorrelator.roc/", "api/sdr.ReplicaCorrelator.threshold/", "api/sdr.Resampler/", "api/sdr.Resampler.__call__/", "api/sdr.Resampler.__init__/", "api/sdr.Resampler.__repr__/", "api/sdr.Resampler.__str__/", "api/sdr.Resampler.delay/", "api/sdr.Resampler.down/", "api/sdr.Resampler.method/", "api/sdr.Resampler.polyphase_taps/", "api/sdr.Resampler.rate/", "api/sdr.Resampler.reset/", "api/sdr.Resampler.taps/", "api/sdr.Resampler.up/", "api/sdr.albersheim/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.barker/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.db/", "api/sdr.design_bandpass_fir/", "api/sdr.design_bandstop_fir/", "api/sdr.design_frac_delay_fir/", "api/sdr.design_highpass_fir/", "api/sdr.design_lowpass_fir/", "api/sdr.design_multirate_fir/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.downsample/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.euclidean/", "api/sdr.evm/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.half_sine/", "api/sdr.hamming/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.linear/", "api/sdr.mix/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.percent/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.eye/", "api/sdr.plot.filter/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.magnitude_response/", "api/sdr.plot.p_d/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.phase_tree/", "api/sdr.plot.raster/", "api/sdr.plot.roc/", "api/sdr.plot.ser/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.polyphase_decompose/", "api/sdr.ppb/", "api/sdr.ppm/", "api/sdr.raised_cosine/", "api/sdr.rectangular/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.to_complex_bb/", "api/sdr.to_real_pb/", "api/sdr.unpack/", "api/sdr.upsample/", "api/sdr.wavelength/", "api/sdr.zadoff_chu/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/formatting/", "development/installation/", "development/unit-tests/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})