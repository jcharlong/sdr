Search.setIndex({"titles": ["Conversions", "Data manipulation", "Detection", "Digital signal processing", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.Decimator", "sdr.Decimator.__call__", "sdr.Decimator.__init__", "sdr.Decimator.__repr__", "sdr.Decimator.__str__", "sdr.Decimator.delay", "sdr.Decimator.method", "sdr.Decimator.polyphase_taps", "sdr.Decimator.rate", "sdr.Decimator.reset", "sdr.Decimator.taps", "sdr.Differentiator", "sdr.Differentiator.__init__", "sdr.EnergyDetector", "sdr.EnergyDetector.p_d", "sdr.EnergyDetector.p_fa", "sdr.EnergyDetector.roc", "sdr.EnergyDetector.threshold", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__call__", "sdr.FIR.__init__", "sdr.FIR.__len__", "sdr.FIR.__repr__", "sdr.FIR.__str__", "sdr.FIR.delay", "sdr.FIR.flush", "sdr.FIR.frequency_response", "sdr.FIR.group_delay", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.phase_delay", "sdr.FIR.reset", "sdr.FIR.state", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__call__", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__call__", "sdr.IIR.__init__", "sdr.IIR.__repr__", "sdr.IIR.__str__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.frequency_response", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.state", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.Integrator", "sdr.Integrator.__init__", "sdr.Interpolator", "sdr.Interpolator.__call__", "sdr.Interpolator.__init__", "sdr.Interpolator.__repr__", "sdr.Interpolator.__str__", "sdr.Interpolator.delay", "sdr.Interpolator.method", "sdr.Interpolator.polyphase_taps", "sdr.Interpolator.rate", "sdr.Interpolator.reset", "sdr.Interpolator.taps", "sdr.LinearModulation", "sdr.LinearModulation.__init__", "sdr.LinearModulation.__repr__", "sdr.LinearModulation.__str__", "sdr.LinearModulation.ber", "sdr.LinearModulation.bps", "sdr.LinearModulation.decide_symbols", "sdr.LinearModulation.demodulate", "sdr.LinearModulation.map_symbols", "sdr.LinearModulation.modulate", "sdr.LinearModulation.order", "sdr.LinearModulation.phase_offset", "sdr.LinearModulation.pulse_shape", "sdr.LinearModulation.rx_filter", "sdr.LinearModulation.ser", "sdr.LinearModulation.sps", "sdr.LinearModulation.symbol_map", "sdr.LinearModulation.tx_filter", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__call__", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.MSK", "sdr.MSK.__init__", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__call__", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.reset", "sdr.NCO.step", "sdr.OQPSK", "sdr.OQPSK.__init__", "sdr.OQPSK.__repr__", "sdr.OQPSK.__str__", "sdr.PED", "sdr.PED.__call__", "sdr.PED.__init__", "sdr.PED.data_aided_error", "sdr.PED.decision_directed_error", "sdr.PED.gain", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.__repr__", "sdr.PSK.__str__", "sdr.PSK.ber", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.PiMPSK", "sdr.PiMPSK.__init__", "sdr.Q", "sdr.Qinv", "sdr.ReplicaCorrelator", "sdr.ReplicaCorrelator.p_d", "sdr.ReplicaCorrelator.p_fa", "sdr.ReplicaCorrelator.roc", "sdr.ReplicaCorrelator.threshold", "sdr.Resampler", "sdr.Resampler.__call__", "sdr.Resampler.__init__", "sdr.Resampler.__repr__", "sdr.Resampler.__str__", "sdr.Resampler.delay", "sdr.Resampler.down", "sdr.Resampler.method", "sdr.Resampler.polyphase_taps", "sdr.Resampler.rate", "sdr.Resampler.reset", "sdr.Resampler.taps", "sdr.Resampler.up", "sdr.albersheim", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.barker", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.db", "sdr.design_bandpass_fir", "sdr.design_bandstop_fir", "sdr.design_frac_delay_fir", "sdr.design_highpass_fir", "sdr.design_lowpass_fir", "sdr.design_multirate_fir", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.downsample", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.euclidean", "sdr.evm", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.hadamard", "sdr.half_sine", "sdr.hamming", "sdr.hexdump", "sdr.iq_imbalance", "sdr.linear", "sdr.mix", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.percent", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.eye", "sdr.plot.filter", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.magnitude_response", "sdr.plot.p_d", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.phase_tree", "sdr.plot.raster", "sdr.plot.roc", "sdr.plot.ser", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.polyphase_decompose", "sdr.ppb", "sdr.ppm", "sdr.raised_cosine", "sdr.rectangular", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.to_complex_bb", "sdr.to_real_pb", "sdr.unpack", "sdr.upsample", "sdr.walsh", "sdr.wavelength", "sdr.zadoff_chu", "Sequences", "Simulation", "Synchronization", "Documentation", "Formatting", "Installation", "Unit Tests", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284], "db": [0, 4, 5, 9, 20, 22, 40, 42, 44, 46, 47, 48, 50, 111, 121, 134, 144, 154, 158, 160, 162, 167, 169, 184, 185, 186, 187, 195, 196, 197, 198, 199, 200, 201, 206, 207, 208, 209, 210, 212, 214, 215, 221, 222, 225, 226, 227, 228, 230, 231, 237, 244, 256, 259, 260, 278, 280, 281, 283], "x": [0, 1, 3, 5, 6, 7, 8, 9, 26, 27, 37, 39, 44, 46, 51, 52, 69, 70, 76, 78, 94, 96, 97, 107, 114, 116, 125, 128, 134, 144, 154, 162, 164, 165, 166, 171, 172, 185, 186, 189, 192, 194, 195, 202, 203, 204, 205, 208, 211, 212, 213, 219, 221, 222, 223, 224, 225, 227, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 245, 247, 248, 252, 253, 256, 258, 263, 264, 269, 273, 278, 279, 280, 284], "arraylik": [0, 1, 2, 3, 4, 5, 6, 7, 8, 26, 27, 28, 37, 39, 40, 41, 42, 43, 44, 46, 51, 52, 53, 69, 73, 76, 77, 78, 79, 94, 96, 97, 98, 107, 108, 111, 113, 114, 115, 116, 121, 134, 135, 144, 145, 154, 155, 158, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 184, 187, 189, 190, 192, 193, 195, 196, 197, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 220, 222, 224, 226, 229, 233, 234, 235, 236, 237, 238, 239, 240, 243, 245, 246, 250, 251, 252, 253, 259, 260, 263, 266, 269], "ndarrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 26, 27, 33, 36, 37, 39, 40, 41, 42, 43, 44, 49, 51, 52, 58, 59, 60, 61, 63, 65, 66, 68, 69, 70, 75, 76, 78, 82, 83, 84, 86, 88, 90, 91, 93, 94, 96, 97, 103, 106, 107, 111, 113, 114, 115, 116, 119, 121, 123, 125, 128, 134, 136, 138, 143, 144, 148, 149, 151, 152, 154, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 179, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 241, 242, 244, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269], "float_": [0, 2, 3, 4, 5, 6, 7, 8, 39, 40, 41, 42, 43, 44, 49, 107, 111, 119, 121, 134, 144, 148, 149, 151, 152, 154, 158, 160, 162, 164, 165, 166, 167, 168, 169, 170, 184, 187, 190, 193, 195, 196, 197, 198, 199, 200, 201, 206, 207, 208, 209, 210, 214, 215, 218, 222, 226, 229, 230, 244, 252, 253, 254, 255, 257, 259, 260, 261, 262, 266], "convert": [0, 3, 107, 113, 115, 134, 144, 154, 162, 195, 206, 207, 209, 210, 220, 222, 229, 252, 253, 259, 260, 261, 262], "linear": [0, 96, 98, 102, 107, 108, 134, 144, 151, 152, 154, 162, 171, 173, 178, 186, 195, 222, 236, 238, 243, 245, 247, 282, 283], "unit": [0, 26, 37, 51, 66, 76, 91, 94, 96, 125, 135, 136, 145, 155, 163, 171, 186, 187, 195, 202, 203, 222, 246, 248, 273, 276, 277, 279, 282, 283], "percent": [0, 229, 283], "percentag": [0, 229], "ppm": [0, 253, 258, 269, 283], "part": [0, 248, 252, 253, 258, 279], "per": [0, 1, 27, 52, 97, 107, 108, 112, 114, 116, 122, 134, 135, 138, 144, 145, 154, 155, 162, 163, 186, 187, 206, 207, 209, 210, 213, 215, 218, 220, 224, 231, 232, 241, 252, 253, 254, 255, 257, 258, 259, 260, 263, 272, 278, 281, 283], "million": [0, 253, 258], "ppb": [0, 252, 283], "billion": [0, 252], "ebn0_to_esn0": [0, 121, 160, 206, 280, 283], "ebn0": [0, 7, 107, 111, 134, 144, 154, 158, 162, 187, 206, 207, 230, 280], "bp": [0, 107, 112, 134, 144, 154, 162, 206, 207, 209, 259, 280], "int": [0, 1, 3, 6, 7, 26, 28, 31, 34, 37, 44, 46, 47, 50, 51, 54, 57, 59, 60, 61, 62, 63, 66, 69, 72, 76, 84, 86, 87, 91, 94, 96, 98, 101, 104, 107, 108, 112, 117, 122, 134, 135, 136, 143, 144, 145, 151, 152, 154, 155, 162, 163, 171, 173, 176, 177, 183, 185, 186, 188, 189, 191, 192, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 224, 225, 227, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 245, 246, 251, 254, 255, 257, 259, 260, 263, 264, 265, 267, 268, 280], "ebn0_to_snr": [0, 134, 144, 154, 162, 207, 283], "esn0_to_ebn0": [0, 111, 158, 209, 283], "esn0": [0, 7, 107, 121, 134, 144, 154, 160, 162, 209, 210, 244, 280], "esn0_to_snr": [0, 210, 280, 283], "sp": [0, 6, 7, 107, 108, 114, 116, 122, 134, 135, 144, 145, 154, 155, 162, 163, 207, 210, 215, 218, 232, 241, 248, 254, 255, 257, 259, 260, 261, 262, 278, 280, 281], "1": [0, 6, 8, 9, 16, 19, 23, 25, 26, 28, 29, 30, 33, 36, 37, 39, 40, 42, 43, 44, 51, 54, 55, 56, 57, 59, 60, 63, 76, 77, 80, 81, 84, 94, 96, 97, 98, 99, 100, 103, 106, 107, 108, 113, 114, 115, 116, 123, 125, 129, 130, 134, 135, 136, 139, 144, 145, 148, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 179, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 284], "snr_to_ebn0": [0, 111, 158, 187, 259, 283], "snr": [0, 2, 4, 7, 39, 40, 42, 44, 46, 47, 48, 49, 50, 134, 144, 154, 162, 184, 186, 187, 237, 259, 260, 261, 262, 269, 280, 283], "snr_to_esn0": [0, 121, 160, 260, 283], "pack": [1, 44, 46, 134, 144, 154, 162, 220, 224, 282, 283], "bpe": [1, 224, 263], "int_": [1, 5, 6, 107, 113, 114, 134, 144, 154, 162, 189, 191, 192, 202, 203, 204, 216, 219, 224, 263, 269], "binari": [1, 4, 6, 135, 145, 155, 161, 163, 188, 189, 190, 191, 192, 193, 204, 217, 224, 247, 263, 265, 269, 280, 282, 283], "arrai": [1, 33, 36, 44, 59, 84, 98, 103, 106, 108, 134, 135, 136, 144, 145, 154, 155, 161, 162, 163, 173, 179, 182, 185, 188, 189, 191, 192, 202, 203, 204, 208, 211, 216, 217, 219, 224, 225, 227, 248, 251, 263, 265, 277], "an": [1, 2, 3, 4, 26, 37, 39, 51, 59, 61, 76, 77, 79, 84, 86, 94, 95, 96, 97, 108, 135, 136, 145, 155, 158, 160, 163, 166, 171, 187, 198, 224, 230, 235, 244, 248, 263, 266, 273, 282, 283], "multipl": [1, 59, 84, 224, 263, 280, 283], "bit": [1, 5, 7, 44, 46, 49, 107, 111, 112, 134, 135, 144, 145, 154, 155, 158, 161, 162, 163, 187, 189, 190, 192, 193, 206, 207, 209, 220, 224, 230, 259, 263, 282, 283], "element": [1, 220, 224, 263], "unpack": [1, 44, 46, 220, 263, 280, 282, 283], "hexdump": [1, 44, 220, 282, 283], "byte": [1, 220], "width": [1, 198, 220], "16": [1, 158, 160, 161, 175, 198, 206, 207, 209, 212, 217, 220, 230, 244, 251, 254, 257, 259, 260, 265, 278, 283], "str": [1, 26, 29, 30, 37, 51, 55, 56, 76, 80, 81, 94, 96, 99, 100, 107, 109, 110, 134, 144, 146, 147, 154, 156, 157, 162, 171, 174, 175, 220, 232, 238, 241, 242, 245], "return": [1, 6, 9, 17, 19, 22, 23, 26, 27, 29, 30, 37, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 63, 66, 70, 76, 78, 80, 81, 84, 86, 91, 94, 96, 97, 99, 100, 107, 109, 110, 111, 113, 114, 115, 116, 121, 128, 134, 138, 143, 144, 146, 147, 149, 151, 152, 154, 156, 157, 158, 160, 162, 164, 165, 167, 168, 169, 170, 171, 174, 175, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 276, 277, 278, 280, 283], "specifi": [1, 44, 47, 48, 50, 148, 151, 152, 186, 187, 204, 220, 271, 276, 277, 283], "class": [2, 3, 5, 6, 9, 26, 37, 39, 44, 46, 47, 48, 49, 50, 51, 69, 76, 94, 96, 107, 125, 134, 136, 144, 148, 154, 162, 166, 171, 270, 276, 277, 280, 282, 283], "replicacorrel": [2, 166, 167, 168, 169, 170, 283], "implement": [2, 3, 6, 26, 37, 39, 51, 69, 76, 94, 96, 107, 125, 131, 134, 136, 144, 148, 154, 162, 166, 171, 184, 270, 275], "clairvoy": [2, 166], "replica": [2, 166], "correl": [2, 166, 188, 217, 265, 267], "energydetector": [2, 39, 40, 41, 42, 43, 283], "energi": [2, 39, 111, 121, 158, 160, 166, 167, 168, 169, 170, 187, 206, 207, 208, 209, 210, 215, 218, 230, 244, 254, 255, 257, 259, 260, 282, 283], "albersheim": [2, 184, 283], "p_d": [2, 7, 39, 40, 42, 166, 167, 169, 184, 237, 243, 283], "p_fa": [2, 7, 39, 40, 41, 42, 43, 166, 167, 168, 169, 170, 184, 243], "estim": [2, 9, 107, 113, 114, 134, 144, 154, 162, 184, 238, 245, 279], "minimum": [2, 6, 134, 184, 283], "requir": [2, 27, 52, 97, 184, 271, 272, 273, 274, 283], "singl": [2, 42, 59, 84, 158, 160, 184], "sampl": [2, 3, 9, 16, 24, 26, 27, 31, 37, 40, 41, 42, 43, 51, 52, 57, 59, 60, 61, 63, 66, 69, 73, 84, 86, 91, 96, 97, 98, 101, 107, 108, 114, 116, 122, 125, 129, 132, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 154, 155, 162, 163, 171, 173, 176, 184, 186, 205, 207, 210, 213, 215, 218, 223, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 245, 246, 248, 254, 255, 257, 258, 259, 260, 261, 262, 264, 269, 275, 278, 279, 281, 282, 283], "given": [2, 39, 44, 46, 47, 48, 50, 69, 70, 166, 184, 212, 276, 277], "n_": [2, 40, 41, 42, 43, 184], "nc": [2, 40, 41, 42, 43, 184], "non": [2, 27, 40, 41, 42, 43, 52, 97, 184, 218, 248, 255], "coher": [2, 40, 41, 42, 43, 184], "combin": [2, 184], "achiev": [2, 184, 280, 281], "probabl": [2, 7, 39, 40, 41, 42, 43, 164, 165, 166, 167, 168, 169, 170, 184, 189, 190, 192, 193, 204, 237, 243, 269, 283], "fals": [2, 5, 26, 28, 29, 30, 37, 38, 39, 40, 41, 42, 43, 51, 53, 55, 56, 59, 69, 71, 76, 77, 79, 80, 81, 84, 94, 95, 96, 97, 98, 99, 100, 134, 144, 154, 158, 160, 162, 166, 167, 168, 169, 170, 171, 173, 174, 175, 184, 185, 189, 192, 204, 208, 223, 227, 228, 231, 238, 243, 245, 248, 256, 277, 281], "alarm": [2, 39, 40, 41, 42, 43, 166, 167, 168, 169, 170, 184, 243], "p_": [2, 7, 39, 40, 41, 42, 43, 158, 160, 166, 167, 168, 169, 170, 184, 185, 186, 195, 204, 212, 222, 225, 227, 230, 238, 243, 244], "fa": [2, 7, 39, 40, 41, 42, 43, 166, 167, 168, 169, 170, 184, 243], "thi": [2, 9, 26, 46, 47, 48, 50, 51, 76, 96, 98, 107, 108, 123, 134, 138, 144, 145, 154, 155, 161, 162, 163, 171, 173, 184, 186, 187, 189, 192, 204, 205, 212, 214, 217, 232, 238, 242, 245, 248, 264, 265, 271, 273, 274, 275, 277, 279, 280, 281], "function": [2, 7, 8, 9, 18, 37, 51, 76, 77, 94, 125, 164, 165, 184, 187, 205, 215, 217, 230, 237, 238, 243, 244, 245, 264, 265, 276, 277, 279, 281, 282, 283], "": [2, 3, 7, 9, 17, 19, 20, 21, 23, 24, 26, 37, 39, 46, 47, 48, 49, 50, 51, 59, 60, 63, 66, 76, 84, 91, 94, 96, 107, 108, 113, 114, 115, 116, 134, 144, 154, 162, 166, 168, 170, 171, 184, 186, 187, 207, 210, 212, 213, 221, 231, 232, 233, 234, 236, 238, 239, 240, 241, 242, 245, 246, 248, 249, 258, 259, 260, 261, 262, 274, 275, 278, 280, 282, 283], "equat": [2, 17, 19, 20, 21, 22, 23, 40, 41, 43, 76, 144, 154, 162, 167, 168, 170, 184, 214], "finit": [3, 51, 282, 283], "impuls": [3, 7, 26, 37, 51, 61, 76, 86, 94, 96, 171, 196, 197, 198, 199, 200, 201, 215, 233, 235, 281, 282, 283], "respons": [3, 7, 26, 37, 51, 59, 61, 66, 76, 84, 86, 91, 94, 96, 171, 196, 197, 198, 199, 200, 201, 215, 233, 234, 235, 236, 240, 246, 281, 282, 283], "differenti": [3, 6, 37, 38, 134, 158, 160, 202, 203, 248, 282, 283], "design_lowpass_fir": [3, 59, 200, 283], "order": [3, 9, 26, 27, 30, 37, 44, 49, 51, 52, 56, 62, 69, 72, 76, 81, 87, 94, 96, 97, 98, 100, 107, 108, 117, 125, 129, 134, 144, 154, 155, 162, 163, 171, 173, 175, 186, 196, 197, 199, 200, 206, 207, 209, 212, 213, 215, 231, 232, 241, 242, 254, 257, 258, 259, 270, 277, 278, 279, 280, 283], "design": [3, 26, 28, 32, 96, 98, 102, 108, 145, 155, 163, 171, 173, 178, 196, 197, 198, 199, 200, 201, 271, 282, 283], "lowpass": [3, 200], "h": [3, 7, 26, 37, 39, 51, 53, 55, 56, 59, 61, 76, 84, 86, 94, 96, 107, 108, 119, 120, 124, 125, 134, 144, 145, 154, 155, 162, 163, 166, 171, 196, 197, 198, 199, 200, 201, 215, 232, 233, 235, 236, 240, 251, 278, 279, 281], "n": [3, 5, 6, 7, 8, 9, 26, 27, 37, 39, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 60, 61, 62, 63, 65, 66, 68, 69, 70, 76, 78, 79, 82, 86, 87, 91, 94, 96, 97, 107, 108, 114, 116, 119, 120, 124, 125, 128, 134, 136, 138, 143, 144, 145, 154, 155, 162, 163, 164, 165, 166, 168, 170, 171, 172, 185, 186, 187, 188, 191, 194, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 216, 217, 219, 221, 223, 225, 227, 228, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 245, 246, 248, 256, 258, 259, 260, 261, 262, 264, 265, 267, 268, 269, 279, 281, 282], "us": [3, 7, 26, 28, 32, 35, 37, 38, 51, 53, 58, 59, 64, 69, 71, 76, 77, 79, 84, 89, 94, 95, 96, 97, 98, 102, 105, 107, 108, 113, 114, 125, 131, 134, 144, 145, 148, 151, 152, 154, 155, 162, 163, 171, 173, 178, 181, 187, 190, 193, 196, 197, 198, 199, 200, 201, 212, 217, 220, 224, 231, 232, 233, 235, 237, 238, 245, 246, 263, 265, 271, 272, 273, 274, 276, 277, 279, 280, 281, 282, 284], "window": [3, 26, 59, 96, 171, 196, 197, 198, 199, 200, 201, 238, 245, 283], "method": [3, 7, 30, 32, 98, 100, 102, 173, 175, 178, 196, 197, 198, 199, 200, 201, 238, 245, 276, 277, 283], "design_highpass_fir": [3, 199, 283], "highpass": [3, 199], "design_bandpass_fir": [3, 196, 283], "bandpass": [3, 196], "design_bandstop_fir": [3, 197, 283], "bandstop": [3, 197], "infinit": [3, 76, 282, 283], "integr": [3, 9, 14, 40, 41, 42, 43, 94, 95, 125, 127, 129, 184, 270, 274, 277, 282, 283], "interpol": [3, 26, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 124, 134, 144, 154, 162, 171, 173, 183, 201, 232, 264, 278, 280, 282, 283], "polyphas": [3, 26, 27, 28, 33, 36, 96, 97, 98, 103, 106, 171, 172, 173, 179, 182, 201, 205, 251, 264, 282, 283], "decim": [3, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 107, 108, 113, 114, 115, 116, 120, 123, 134, 135, 144, 145, 154, 155, 161, 162, 163, 171, 173, 177, 201, 205, 280, 282, 283], "ration": [3, 171, 173, 201, 283], "design_multirate_fir": [3, 28, 98, 173, 201, 283], "up": [3, 171, 173, 183, 201, 214, 272], "kaiser": [3, 26, 28, 29, 30, 32, 96, 97, 98, 99, 100, 102, 171, 173, 174, 175, 178, 196, 197, 198, 199, 200, 201], "polyphase_decompos": [3, 251, 283], "tap": [3, 26, 28, 33, 36, 37, 51, 56, 68, 69, 75, 76, 82, 83, 94, 96, 98, 103, 106, 171, 173, 179, 182, 251, 276, 277], "phase": [3, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 37, 51, 63, 96, 107, 108, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 171, 184, 213, 221, 223, 239, 240, 241, 251, 269, 282, 283], "decompos": [3, 26, 96, 171, 251], "h_i": [3, 26, 28, 33, 36, 37, 51, 53, 68, 96, 98, 103, 106, 171, 173, 179, 182, 251, 276], "matrix": [3, 204, 251, 269], "h_": [3, 9, 26, 33, 36, 96, 103, 106, 171, 179, 182, 251, 279], "i": [3, 9, 16, 25, 26, 27, 28, 33, 36, 37, 39, 41, 42, 43, 44, 49, 51, 52, 53, 59, 61, 66, 67, 68, 69, 74, 76, 79, 83, 84, 86, 91, 92, 94, 96, 97, 98, 103, 106, 107, 108, 125, 129, 130, 132, 134, 138, 142, 144, 145, 148, 154, 155, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 179, 182, 184, 185, 186, 187, 189, 190, 192, 193, 195, 196, 197, 198, 199, 200, 204, 206, 207, 208, 209, 210, 211, 213, 214, 215, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 238, 239, 240, 242, 245, 246, 248, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284], "j": [3, 26, 33, 36, 59, 76, 79, 82, 84, 94, 96, 103, 106, 134, 136, 144, 154, 162, 171, 179, 182, 186, 204, 221, 223, 251, 267, 276, 277], "b": [3, 76, 79, 184, 187, 215, 220, 233, 235, 246, 251, 271, 272, 281], "farrowresampl": [3, 69, 70, 71, 72, 73, 74, 75, 275, 283], "cubic": [3, 69], "farrow": [3, 69, 70, 71, 72, 73, 74, 75, 282, 283], "design_frac_delay_fir": [3, 198, 283], "length": [3, 6, 7, 26, 27, 37, 42, 51, 52, 54, 61, 66, 78, 96, 97, 98, 108, 114, 116, 135, 145, 155, 163, 171, 173, 188, 191, 196, 197, 198, 199, 200, 201, 215, 216, 217, 218, 233, 235, 238, 242, 245, 246, 254, 255, 257, 261, 265, 267, 268, 272, 275, 278, 281], "delai": [3, 7, 26, 27, 30, 31, 37, 51, 52, 56, 57, 60, 63, 69, 96, 97, 100, 101, 125, 136, 171, 175, 176, 198, 202, 203, 218, 234, 239, 255, 279, 282, 283], "fraction": [3, 69, 73, 198, 215, 275, 282, 283], "mix": [3, 223, 282, 283], "freq": [3, 4, 26, 37, 51, 59, 76, 84, 94, 96, 136, 138, 171, 213, 214, 223, 226, 266, 269, 275, 279], "float": [3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 37, 42, 44, 46, 47, 48, 50, 51, 59, 60, 63, 69, 70, 76, 77, 84, 85, 94, 96, 107, 108, 118, 125, 126, 127, 129, 130, 132, 134, 135, 136, 137, 139, 140, 141, 144, 145, 148, 153, 154, 155, 159, 162, 163, 169, 171, 180, 185, 186, 187, 189, 192, 194, 196, 197, 198, 199, 200, 201, 212, 213, 215, 221, 223, 225, 227, 228, 231, 232, 233, 234, 236, 238, 239, 240, 241, 242, 245, 247, 248, 254, 256, 257, 258, 269], "0": [3, 6, 8, 16, 26, 27, 33, 36, 37, 39, 42, 44, 51, 52, 53, 55, 56, 59, 60, 63, 68, 76, 77, 79, 80, 81, 82, 83, 84, 94, 96, 97, 98, 103, 106, 107, 108, 113, 114, 115, 116, 123, 129, 134, 135, 136, 139, 144, 145, 154, 155, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 179, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 226, 229, 231, 232, 233, 234, 235, 236, 239, 240, 241, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 284], "time": [3, 5, 9, 16, 17, 19, 20, 21, 22, 23, 37, 51, 76, 94, 125, 129, 144, 148, 154, 162, 185, 186, 194, 196, 197, 199, 200, 204, 205, 208, 210, 211, 213, 215, 217, 219, 221, 223, 225, 227, 228, 232, 233, 238, 242, 245, 248, 254, 256, 257, 258, 260, 261, 262, 264, 265, 269, 275, 276, 277, 281, 282, 283], "domain": [3, 5, 185, 186, 194, 196, 197, 199, 200, 205, 208, 211, 213, 219, 221, 223, 225, 227, 228, 233, 238, 242, 245, 248, 256, 258, 261, 262, 264, 269, 282, 283], "complex": [3, 5, 7, 26, 37, 39, 40, 41, 42, 43, 51, 59, 76, 84, 94, 96, 107, 108, 113, 114, 115, 116, 123, 134, 135, 136, 138, 143, 144, 145, 148, 149, 154, 155, 161, 162, 163, 166, 167, 168, 169, 170, 171, 186, 187, 205, 212, 221, 223, 231, 232, 234, 236, 239, 240, 242, 247, 248, 261, 262, 264, 269, 275, 276, 277, 279, 280, 282, 283], "exponenti": [3, 138, 205, 223, 261, 262, 264, 275, 276, 277], "real": [3, 40, 41, 43, 134, 144, 164, 165, 167, 168, 170, 186, 223, 232, 234, 236, 239, 240, 242, 248, 261, 262, 275, 276, 277, 279, 282, 283], "sinusoid": [3, 154, 186, 223, 261, 262, 277, 283], "to_complex_bb": [3, 261, 283], "x_r": [3, 261, 262], "complex_": [3, 7, 107, 113, 114, 115, 116, 123, 134, 136, 143, 144, 148, 149, 154, 161, 162, 231, 247, 261, 262, 267, 268], "passband": [3, 196, 197, 198, 199, 200, 215, 218, 254, 255, 257, 261, 262, 278, 283], "center": [3, 196, 197, 198, 199, 200, 218, 248, 255, 261, 262, 283], "f_": [3, 9, 16, 24, 27, 59, 60, 63, 84, 97, 107, 108, 122, 134, 135, 144, 145, 154, 155, 162, 163, 196, 197, 199, 200, 205, 207, 210, 213, 215, 223, 232, 233, 234, 236, 238, 239, 240, 241, 242, 245, 248, 258, 259, 260, 261, 262, 264, 275, 276, 277, 279, 281], "r": [3, 26, 27, 28, 33, 34, 36, 69, 70, 96, 97, 98, 103, 104, 106, 187, 205, 206, 207, 209, 212, 215, 223, 254, 257, 259, 261, 262, 264, 271, 272, 273, 274, 277, 278, 279, 281], "4": [3, 7, 17, 19, 26, 33, 36, 37, 40, 42, 44, 59, 80, 81, 84, 94, 96, 97, 103, 106, 134, 135, 136, 144, 145, 148, 154, 158, 159, 160, 161, 162, 166, 167, 168, 169, 170, 171, 174, 175, 179, 182, 184, 186, 187, 188, 190, 191, 193, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 244, 246, 247, 248, 249, 250, 251, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 273, 275, 277, 278, 279, 280], "rate": [3, 5, 7, 9, 16, 24, 26, 27, 28, 30, 34, 44, 45, 46, 48, 49, 59, 60, 63, 69, 70, 84, 96, 97, 98, 100, 104, 107, 111, 121, 134, 144, 154, 158, 160, 162, 171, 172, 173, 175, 177, 180, 183, 201, 205, 206, 207, 209, 213, 223, 230, 232, 233, 234, 236, 238, 239, 240, 241, 242, 244, 245, 248, 258, 259, 261, 262, 264, 269, 282, 283], "baseband": [3, 7, 9, 134, 144, 154, 162, 223, 232, 241, 261, 262, 278, 279, 283], "x_c": [3, 261, 262], "c": [3, 9, 17, 19, 20, 21, 22, 23, 46, 47, 48, 49, 50, 107, 108, 123, 125, 134, 144, 154, 161, 162, 187, 190, 193, 214, 226, 247, 261, 262, 266, 279], "2": [3, 6, 7, 9, 17, 19, 22, 26, 29, 30, 33, 36, 37, 39, 40, 41, 42, 43, 44, 51, 55, 56, 57, 59, 60, 63, 80, 81, 84, 94, 96, 97, 99, 100, 103, 106, 107, 108, 117, 134, 136, 144, 145, 148, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 179, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 271, 274, 275, 276, 277, 278, 279, 280, 281], "to_real_pb": [3, 262, 278, 283], "2f_": [3, 262], "upsampl": [3, 96, 171, 264, 283], "factor": [3, 5, 9, 16, 25, 108, 125, 129, 130, 145, 155, 163, 194, 205, 264, 279], "downsampl": [3, 205, 283], "bsc_capac": [4, 193, 283], "p": [4, 8, 136, 138, 164, 165, 171, 173, 179, 180, 182, 183, 189, 190, 192, 193, 201, 204, 269], "calcul": [4, 5, 187, 190, 193, 212, 214, 226, 266, 283], "symmetr": [4, 192, 193, 204, 261, 262, 269, 282], "bsc": [4, 192, 193, 204, 269, 282, 283], "bec_capac": [4, 190, 283], "erasur": [4, 189, 190, 204, 269, 282], "bec": [4, 189, 190, 204, 269, 282, 283], "awgn_capac": [4, 187, 283], "addit": [4, 186, 187, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 264, 269, 282], "white": [4, 186, 187, 269, 282], "gaussian": [4, 6, 37, 94, 186, 187, 215, 269, 282, 283], "nois": [4, 9, 10, 11, 16, 22, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 111, 121, 125, 129, 132, 134, 144, 154, 158, 160, 162, 166, 167, 168, 169, 170, 186, 187, 206, 207, 209, 210, 230, 244, 259, 260, 269, 279, 282], "awgn": [4, 134, 144, 154, 158, 160, 162, 186, 187, 212, 230, 231, 244, 261, 262, 269, 280, 282, 283], "fspl": [4, 214], "distanc": [4, 211, 214, 219, 282, 283], "free": [4, 134, 144, 154, 162, 214, 282], "space": [4, 59, 84, 214, 282], "wavelength": [4, 266, 283], "lambda": [4, 214, 266], "electromagnet": [4, 266], "wave": [4, 134, 266], "frequenc": [4, 9, 17, 19, 21, 26, 37, 51, 59, 60, 63, 76, 84, 94, 96, 125, 134, 136, 138, 171, 196, 197, 198, 199, 200, 205, 213, 214, 223, 226, 233, 234, 236, 238, 239, 240, 245, 261, 262, 264, 266, 269, 281, 282, 283], "f": [4, 17, 19, 26, 42, 59, 60, 63, 84, 96, 136, 138, 171, 184, 186, 213, 214, 215, 223, 226, 258, 266, 267, 272, 275, 276, 277, 278, 279, 280, 281], "parabolic_antenna": [4, 226, 283], "tupl": [4, 26, 37, 39, 42, 44, 46, 49, 51, 59, 60, 63, 76, 84, 94, 96, 107, 113, 114, 134, 144, 148, 151, 152, 154, 162, 166, 169, 171, 185, 208, 211, 219, 225, 226, 227, 231, 233, 234, 235, 236, 239, 240, 246, 247, 250], "gain": [4, 9, 12, 13, 14, 15, 16, 76, 77, 85, 94, 125, 126, 127, 129, 136, 137, 139, 148, 153, 184, 196, 197, 198, 199, 200, 214, 215, 218, 226, 254, 255, 257, 279, 282], "g": [4, 49, 226, 273], "beamwidth": [4, 226], "theta": [4, 136, 139, 141, 142, 226], "parabol": [4, 226], "reflector": [4, 226], "signal": [5, 7, 9, 17, 19, 22, 23, 26, 27, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 58, 69, 70, 76, 78, 94, 96, 97, 107, 108, 119, 125, 128, 134, 136, 138, 143, 144, 145, 154, 155, 162, 163, 166, 167, 168, 169, 170, 171, 172, 185, 186, 187, 194, 195, 196, 197, 199, 200, 201, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 219, 221, 222, 223, 225, 226, 227, 228, 232, 233, 234, 236, 238, 239, 240, 241, 242, 245, 248, 251, 256, 258, 259, 260, 261, 262, 264, 266, 276, 277, 279, 281, 282, 283], "peak_pow": [5, 225, 227, 283], "peak": [5, 134, 144, 162, 194, 212, 225, 227, 228], "average_pow": [5, 185, 225, 283], "averag": [5, 44, 134, 144, 148, 151, 152, 162, 185, 186, 187, 212, 225, 238], "papr": [5, 134, 144, 162, 225, 278, 283], "ratio": [5, 22, 40, 42, 44, 46, 47, 48, 49, 50, 111, 121, 134, 144, 158, 160, 162, 167, 169, 186, 187, 206, 207, 209, 210, 225, 229, 230, 244, 252, 253, 259, 260], "peak_voltag": [5, 194, 228, 283], "bool": [5, 26, 28, 37, 38, 40, 41, 42, 43, 51, 53, 59, 67, 69, 71, 74, 76, 77, 79, 84, 92, 94, 95, 96, 98, 134, 144, 154, 158, 160, 162, 167, 168, 169, 170, 171, 173, 185, 208, 223, 227, 228, 231, 240, 242, 247, 248, 256], "rms_voltag": [5, 194, 256, 283], "root": [5, 6, 108, 145, 155, 163, 212, 232, 248, 256, 257, 267, 268, 276, 282], "mean": [5, 212, 238, 245, 256, 281], "squar": [5, 6, 108, 145, 155, 163, 212, 214, 226, 248, 256, 257, 276], "rm": [5, 194, 212, 256], "crest_factor": [5, 194, 225, 283], "crest": [5, 194], "euclidean": [5, 211, 282, 283], "y": [5, 6, 26, 27, 37, 51, 52, 58, 70, 76, 78, 94, 96, 97, 125, 128, 136, 138, 143, 171, 186, 189, 192, 202, 203, 204, 205, 211, 213, 219, 221, 223, 231, 236, 238, 245, 247, 258, 264, 279, 280], "between": [5, 26, 28, 38, 53, 67, 71, 74, 77, 79, 92, 95, 96, 98, 148, 171, 173, 211, 214, 219, 238, 242, 245, 279, 282], "two": [5, 196, 197, 211, 219, 232, 233, 234, 236, 238, 239, 240, 245, 267, 275, 276, 277], "ham": [5, 59, 196, 197, 199, 200, 219, 282, 283], "errorr": [5, 44, 45, 46, 47, 48, 49, 50, 280, 283], "A": [5, 9, 17, 19, 20, 21, 22, 23, 25, 27, 37, 44, 51, 52, 59, 84, 94, 97, 108, 125, 145, 148, 155, 163, 184, 191, 196, 197, 199, 200, 216, 220, 221, 226, 254, 257, 270, 272, 279], "error": [5, 7, 9, 15, 16, 22, 44, 45, 46, 48, 49, 50, 107, 111, 121, 125, 129, 134, 144, 148, 149, 151, 152, 153, 154, 158, 160, 162, 184, 193, 212, 230, 244, 279, 282, 283], "ber": [5, 7, 44, 107, 111, 134, 144, 154, 158, 162, 230, 280, 282, 283], "symbol": [5, 7, 44, 46, 49, 96, 107, 108, 112, 113, 114, 115, 116, 121, 122, 123, 134, 135, 144, 145, 148, 149, 154, 155, 158, 160, 161, 162, 163, 186, 206, 207, 209, 210, 212, 213, 215, 218, 231, 232, 241, 244, 247, 248, 254, 255, 257, 259, 260, 278, 279, 281, 282, 283], "ser": [5, 7, 44, 107, 121, 134, 144, 154, 160, 162, 244, 280, 282, 283], "evm": [5, 212, 282, 283], "x_hat": [5, 7, 44, 46, 212, 231, 280], "ref": [5, 184, 196, 197, 198, 199, 200, 201, 212, 215, 217, 265], "vector": [5, 44, 59, 73, 84, 196, 197, 199, 200, 212, 238, 245, 282, 283], "magnitud": [5, 7, 188, 198, 212, 217, 233, 236, 265, 267, 282, 283], "hat": [5, 7, 46, 107, 113, 114, 134, 144, 148, 149, 154, 162, 212, 231, 247], "k": [5, 6, 7, 46, 107, 108, 112, 113, 114, 115, 116, 117, 134, 144, 148, 149, 154, 155, 162, 163, 202, 203, 206, 207, 209, 212, 231, 247, 248, 259, 278, 281], "linearmodul": [6, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 151, 152, 154, 247, 283], "amplitud": [6, 107, 108, 221, 269, 275, 279], "arbitrari": [6, 69, 70, 71, 72, 73, 74, 75, 107, 282, 283], "psk": [6, 144, 148, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 186, 212, 213, 221, 230, 231, 232, 244, 247, 248, 258, 278, 279, 282, 283], "shift": [6, 134, 144, 154, 158, 159, 160, 161, 162, 267, 276, 277, 282, 283], "kei": [6, 134, 144, 154, 158, 159, 160, 161, 162, 282, 283], "demodul": [6, 107, 114, 134, 144, 154, 162, 283], "pimpsk": [6, 162, 163, 283], "pi": [6, 26, 80, 81, 84, 96, 97, 136, 144, 148, 154, 162, 163, 171, 186, 205, 214, 215, 221, 223, 226, 233, 234, 235, 236, 239, 240, 246, 250, 261, 262, 264, 267, 275, 276, 277, 279, 282, 283], "m": [6, 76, 79, 83, 94, 107, 108, 112, 113, 114, 115, 116, 117, 123, 134, 144, 148, 154, 155, 161, 162, 163, 204, 206, 207, 209, 214, 247, 259, 271, 272, 273, 274, 282, 283], "oqpsk": [6, 134, 144, 145, 146, 147, 283], "offset": [6, 17, 19, 26, 37, 96, 97, 107, 108, 118, 134, 135, 136, 138, 139, 141, 144, 145, 154, 155, 159, 162, 163, 171, 213, 223, 248, 258, 269, 279, 282, 283], "quadratur": [6, 134, 144, 221], "msk": [6, 134, 135, 241, 283], "rectangular": [6, 108, 145, 155, 163, 255, 278, 281, 282, 283], "span": [6, 7, 108, 145, 155, 163, 215, 218, 232, 241, 254, 255, 257, 278, 281], "half_sin": [6, 135, 218, 283], "half": [6, 134, 144, 201, 218, 226, 282, 283], "sine": [6, 134, 138, 218, 282, 283], "time_bandwidth": [6, 215], "raised_cosin": [6, 108, 145, 155, 163, 232, 254, 281, 283], "alpha": [6, 108, 145, 155, 163, 215, 249, 254, 257, 278, 281], "rais": [6, 37, 94, 108, 145, 155, 163, 232, 248, 254, 257, 276, 282], "cosin": [6, 37, 94, 108, 138, 145, 155, 163, 232, 248, 254, 257, 276, 282], "rc": [6, 108, 145, 155, 163, 254], "root_raised_cosin": [6, 37, 55, 56, 94, 108, 145, 155, 163, 232, 233, 234, 235, 236, 239, 240, 246, 250, 257, 276, 278, 280, 281, 283], "srrc": [6, 108, 144, 145, 154, 155, 162, 163, 232, 248, 257, 278, 280], "binary_cod": [6, 191, 283], "gener": [6, 134, 144, 154, 162, 186, 189, 191, 192, 204, 216, 243, 271, 280, 283], "code": [6, 26, 29, 37, 51, 55, 76, 80, 94, 96, 99, 107, 109, 134, 135, 144, 145, 146, 154, 155, 156, 161, 162, 163, 171, 174, 188, 191, 206, 207, 209, 216, 217, 231, 247, 259, 265, 268, 273, 280, 283], "gray_cod": [6, 216, 283], "grai": [6, 134, 135, 144, 145, 154, 155, 161, 162, 163, 216, 231, 247, 280, 282], "diff_encod": [6, 134, 144, 154, 158, 160, 162, 202, 203, 283], "y_prev": [6, 202, 203], "input": [6, 9, 17, 19, 22, 23, 26, 27, 28, 31, 37, 38, 51, 52, 53, 61, 65, 66, 69, 70, 71, 73, 76, 77, 78, 79, 86, 91, 94, 95, 96, 97, 98, 101, 125, 128, 136, 138, 144, 154, 158, 160, 162, 164, 171, 172, 173, 176, 186, 187, 189, 190, 192, 193, 195, 202, 203, 204, 205, 222, 224, 229, 235, 246, 252, 253, 263, 264, 269, 276, 277, 279], "data": [6, 148, 151, 202, 203, 220, 224, 248, 263, 282], "diff_decod": [6, 202, 203, 283], "decod": [6, 202], "use_styl": [7, 249], "appli": [7, 26, 96, 108, 171, 213, 221, 231, 232, 238, 245, 247, 248, 249, 258, 269], "default": [7, 61, 66, 135, 145, 155, 161, 163, 185, 208, 211, 219, 225, 227, 231, 234, 236, 239, 240, 242, 245, 247, 249, 280], "matplotlib": [7, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 275, 276, 277, 278, 279, 280, 281, 282], "rcparam": [7, 249], "time_domain": [7, 26, 37, 94, 96, 97, 134, 136, 144, 154, 162, 171, 186, 205, 217, 223, 248, 261, 262, 264, 265, 278, 279, 280, 281, 283], "ani": [7, 26, 37, 51, 59, 76, 84, 94, 96, 136, 138, 171, 188, 195, 205, 217, 222, 248, 264, 265, 268, 274], "dtype": [7, 26, 37, 51, 59, 76, 84, 94, 96, 134, 136, 138, 144, 154, 162, 171, 188, 217, 224, 248, 263, 265, 268, 279], "_scalartype_co": [7, 248], "t": [7, 9, 11, 16, 39, 125, 129, 132, 166, 215, 220, 248, 271, 275], "raster": [7, 232, 241, 242, 282, 283], "none": [7, 26, 37, 42, 51, 59, 61, 66, 69, 73, 84, 96, 108, 125, 133, 138, 145, 155, 163, 169, 171, 185, 186, 187, 189, 192, 196, 197, 199, 200, 204, 208, 211, 219, 224, 225, 227, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 245, 246, 247, 248, 263, 269, 275, 278, 280], "periodogram": [7, 205, 238, 261, 262, 264, 278, 282, 283], "power": [7, 134, 144, 154, 162, 185, 186, 187, 195, 212, 215, 217, 218, 222, 225, 226, 227, 238, 254, 255, 257, 265, 281, 282], "densiti": [7, 22, 238, 278, 281], "xx": [7, 238], "welch": [7, 238, 245], "spectrogram": [7, 245, 282, 283], "constel": [7, 134, 144, 154, 159, 162, 186, 212, 213, 221, 231, 258, 267, 282, 283], "symbol_map": [7, 107, 108, 123, 134, 144, 154, 159, 161, 162, 212, 247, 280, 283], "map": [7, 107, 108, 115, 123, 134, 144, 154, 161, 162, 212, 247, 282, 283], "ey": [7, 134, 144, 154, 162, 232, 282, 283], "diagram": [7, 9, 26, 37, 94, 96, 125, 136, 171, 202, 203, 232, 282, 283], "phase_tre": [7, 134, 241, 283], "tree": [7, 241, 283], "continu": [7, 134, 241, 275, 283], "cpm": [7, 241, 283], "kwarg": [7, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250], "e_b": [7, 46, 47, 48, 49, 50, 107, 111, 134, 144, 154, 158, 162, 187, 206, 207, 209, 230, 259, 282], "n_0": [7, 22, 46, 47, 48, 49, 50, 107, 111, 121, 134, 144, 154, 158, 160, 162, 186, 187, 206, 207, 209, 210, 212, 230, 231, 244, 259, 260, 280, 282], "e_": [7, 46, 47, 48, 49, 50, 107, 121, 134, 144, 154, 160, 162, 186, 187, 206, 209, 210, 212, 231, 244, 260, 280, 282], "roc": [7, 39, 42, 166, 169, 243, 283], "receiv": [7, 39, 40, 42, 44, 46, 107, 113, 114, 120, 134, 144, 148, 149, 154, 158, 160, 162, 166, 167, 168, 169, 170, 212, 214, 232, 237, 243, 283], "oper": [7, 39, 42, 166, 169, 243, 283], "characterist": [7, 39, 42, 166, 169, 243, 283], "curv": [7, 39, 42, 158, 160, 166, 169, 230, 243, 244, 283], "enr": [7, 166, 167, 169, 237], "impulse_respons": [7, 26, 37, 51, 61, 76, 86, 94, 96, 171, 196, 197, 198, 199, 200, 201, 215, 218, 235, 254, 255, 257, 276, 277, 281, 283], "step_respons": [7, 26, 37, 51, 66, 76, 91, 94, 96, 171, 246, 276, 277, 279, 283], "step": [7, 26, 37, 51, 66, 76, 91, 94, 96, 136, 138, 143, 171, 233, 246, 282], "zeros_pol": [7, 250, 277, 283], "zero": [7, 26, 27, 37, 51, 58, 73, 76, 77, 80, 81, 84, 93, 94, 96, 97, 98, 125, 138, 171, 173, 198, 217, 218, 224, 233, 234, 235, 236, 239, 240, 246, 250, 255, 261, 265, 276, 278, 279, 281, 282, 283], "pole": [7, 76, 77, 80, 81, 84, 88, 94, 233, 234, 235, 236, 239, 240, 246, 250, 276, 282], "magnitude_respons": [7, 37, 59, 84, 94, 196, 197, 198, 199, 200, 201, 218, 236, 254, 255, 257, 276, 277, 279, 281, 283], "omega": [7, 26, 37, 51, 59, 60, 63, 76, 84, 94, 96, 136, 139, 140, 142, 171, 233, 234, 236, 239, 240, 279], "phase_respons": [7, 59, 84, 240, 283], "angl": [7, 148, 240, 279], "phase_delai": [7, 26, 37, 51, 63, 96, 171, 239, 283], "tau_": [7, 26, 37, 51, 63, 96, 171, 239], "phi": [7, 26, 37, 51, 63, 96, 107, 108, 118, 134, 135, 144, 145, 154, 155, 159, 162, 163, 171, 213, 221, 223, 239], "group_delai": [7, 26, 37, 51, 60, 96, 171, 198, 234, 276, 277, 283], "group": [7, 26, 37, 51, 60, 96, 171, 198, 234, 282], "tau_g": [7, 26, 37, 51, 60, 96, 171, 234], "iir": [7, 9, 18, 61, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 125, 131, 233, 234, 235, 236, 239, 240, 246, 250, 276, 279, 282, 283], "q": [8, 134, 144, 164, 165, 166, 167, 168, 170, 171, 173, 177, 180, 201, 267, 283], "comput": [8, 26, 39, 40, 41, 42, 43, 59, 84, 107, 111, 121, 134, 144, 148, 154, 158, 160, 162, 164, 165, 166, 167, 168, 169, 170, 185, 186, 208, 211, 214, 219, 225, 227, 276, 277, 279, 281, 283], "complementari": [8, 164, 165], "cumul": [8, 164, 165], "distribut": [8, 164, 165], "standard": [8, 164, 165], "normal": [8, 9, 11, 16, 125, 129, 132, 164, 165, 196, 197, 199, 200, 212, 215, 218, 233, 234, 236, 238, 239, 240, 245, 254, 255, 257, 279, 281], "mathcal": [8, 39, 164, 165, 166, 167, 168, 169, 170, 186, 204], "qinv": [8, 164, 165, 283], "invers": [8, 165], "closedlooppl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 270, 279, 283], "defin": [9, 51, 76, 186, 204, 215, 243, 267, 270, 277, 282], "perform": [9, 27, 52, 97, 158, 160, 198, 205, 264, 267, 270, 276, 277, 280, 282, 283], "close": [9, 16, 18, 270, 282, 283], "loop": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 270, 282, 283], "pll": [9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 270, 282, 283], "meant": 9, "analysi": [9, 16, 272, 279, 282, 283], "onli": [9, 27, 35, 52, 58, 59, 64, 69, 73, 84, 89, 97, 105, 108, 135, 145, 155, 161, 163, 181, 186, 196, 197, 199, 200, 214, 217, 218, 242, 255, 265, 274, 279, 280], "block": [9, 26, 37, 94, 96, 125, 136, 171, 202, 203], "bb": [9, 278, 279], "phase_err": [9, 279], "ped": [9, 15, 16, 129, 148, 149, 150, 151, 152, 153, 270, 279], "lf": [9, 279], "phase_est": [9, 279], "lo": [9, 279], "nco": [9, 12, 16, 129, 136, 137, 138, 139, 140, 141, 142, 143, 270, 279, 282, 283], "local": [9, 271, 279], "oscil": [9, 136, 139, 270, 279, 282, 283], "detector": [9, 15, 16, 39, 129, 148, 153, 166, 279, 283], "filter": [9, 13, 14, 16, 18, 26, 27, 28, 31, 32, 33, 35, 36, 37, 38, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 105, 106, 107, 114, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 144, 154, 162, 171, 172, 173, 176, 178, 179, 181, 182, 196, 197, 198, 199, 200, 201, 205, 215, 218, 232, 233, 234, 235, 236, 239, 240, 246, 250, 251, 254, 255, 257, 264, 270, 281, 282, 283], "numer": [9, 136, 139, 270, 277, 279, 282, 283], "control": [9, 136, 139, 254, 257, 270, 279, 282, 283], "The": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 72, 73, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 94, 96, 97, 98, 101, 102, 103, 104, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 271, 272, 273, 274, 276, 277, 279, 280, 281, 282, 284], "transfer": [9, 18, 37, 51, 76, 77, 94, 125, 215, 276, 277, 279], "2nd": [9, 125, 129, 270, 279, 283], "proport": [9, 13, 27, 97, 125, 126, 129, 214, 226, 270, 283], "plu": [9, 125, 129, 270, 283], "z": [9, 37, 51, 76, 94, 125, 136, 202, 203, 267, 276, 277, 279], "k_1": [9, 13, 125, 126, 279], "k_2": [9, 14, 125, 127, 279], "frac": [9, 17, 19, 22, 23, 37, 39, 40, 41, 43, 51, 57, 76, 94, 98, 125, 144, 154, 162, 166, 167, 168, 173, 184, 185, 186, 187, 194, 206, 207, 209, 210, 212, 214, 215, 221, 222, 223, 225, 226, 256, 259, 260, 266, 267, 279], "k_0": [9, 12, 16, 129, 136, 137, 139, 279], "k_p": [9, 15, 16, 129, 148, 153, 279], "refer": [9, 17, 19, 20, 21, 22, 23, 39, 40, 41, 43, 44, 69, 125, 148, 149, 158, 160, 166, 167, 168, 170, 184, 186, 194, 196, 197, 198, 199, 200, 201, 212, 213, 215, 217, 225, 251, 254, 257, 258, 265, 267, 277, 281, 282], "michael": [9, 17, 19, 20, 21, 22, 23, 125, 148, 254, 257], "rice": [9, 17, 19, 20, 21, 22, 23, 125, 148, 254, 257], "digit": [9, 17, 19, 20, 21, 22, 23, 125, 148, 158, 160, 254, 257, 279, 282, 283], "commun": [9, 17, 19, 20, 21, 22, 23, 125, 148, 158, 160, 201, 251, 254, 257, 279, 282], "discret": [9, 17, 19, 20, 21, 22, 23, 37, 94, 125, 148, 186, 204, 210, 254, 257, 260, 269, 275, 279, 282, 283], "approach": [9, 17, 19, 20, 21, 22, 23, 125, 148, 187, 190, 193, 254, 257, 279], "appendix": [9, 125, 254, 257], "lock": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143], "exampl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 33, 35, 36, 37, 38, 40, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 103, 105, 106, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 154, 158, 159, 160, 161, 162, 164, 165, 167, 169, 171, 174, 175, 179, 181, 182, 184, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 226, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 279], "see": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 35, 38, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 85, 87, 88, 89, 90, 92, 93, 95, 105, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 154, 159, 161, 162, 171, 181, 196, 197, 199, 200, 205, 215, 218, 233, 234, 235, 236, 239, 240, 246, 250, 254, 255, 257, 282], "noise_bandwidth": [9, 16, 125, 129, 132], "damping_factor": [9, 16, 125, 129, 130], "creat": [9, 16, 26, 28, 37, 38, 44, 45, 51, 53, 69, 71, 76, 77, 79, 94, 95, 96, 97, 98, 107, 108, 125, 129, 134, 135, 136, 139, 144, 145, 154, 155, 159, 162, 163, 171, 173, 186, 188, 212, 213, 217, 223, 258, 261, 262, 265, 267, 275, 279, 281], "object": [9, 16, 26, 29, 30, 37, 44, 45, 51, 55, 56, 76, 80, 81, 94, 96, 99, 100, 107, 108, 109, 110, 134, 135, 144, 145, 146, 147, 154, 155, 156, 157, 162, 163, 171, 174, 175, 217, 233, 234, 235, 236, 239, 240, 246, 250, 265, 279, 283], "phase_lock_tim": [9, 23], "frequency_lock_tim": [9, 17], "freq_offset": [9, 17, 19], "lock_tim": [9, 19, 279], "phase_error_vari": [9, 22], "cn0": [9, 22], "varianc": [9, 22, 39, 41, 43, 168, 170, 186], "steadi": [9, 22], "state": [9, 22, 26, 27, 35, 37, 51, 52, 58, 64, 65, 67, 69, 73, 74, 76, 89, 90, 92, 94, 96, 97, 105, 171, 181, 283], "sample_r": [9, 16, 24, 26, 59, 60, 63, 84, 96, 97, 134, 144, 154, 162, 171, 205, 213, 223, 232, 233, 234, 236, 238, 239, 240, 241, 242, 245, 248, 261, 262, 264, 275, 279, 281], "bnt": [9, 11, 279], "bandwidth": [9, 10, 11, 16, 20, 125, 129, 132, 187, 196, 197, 215, 254, 257, 279, 281], "b_n": [9, 10, 11, 16, 17, 19, 22, 23, 125, 129, 132], "bn": [9, 10], "hz": [9, 10, 16, 17, 19, 22, 59, 60, 63, 84, 125, 129, 132, 187, 195, 205, 213, 214, 215, 222, 223, 226, 261, 262, 266, 275], "zeta": [9, 16, 25, 125, 129, 130], "damp": [9, 16, 25, 125, 129, 130, 279], "k0": [9, 12, 16, 129, 136, 137, 139], "kp": [9, 15, 16, 129, 279], "k1": [9, 13, 125, 126, 279], "k2": [9, 14, 125, 127, 279], "repres": [9, 18, 189, 190], "omega_n": [9, 21, 279], "natur": [9, 21], "radian": [9, 20, 21, 22, 136, 138, 139, 140, 141, 142, 148, 149, 151, 152, 162, 279], "omega_3db": [9, 20], "3": [9, 17, 19, 20, 23, 26, 33, 36, 37, 39, 40, 44, 55, 56, 59, 80, 81, 84, 94, 96, 97, 103, 106, 134, 136, 144, 154, 158, 159, 160, 161, 162, 166, 167, 171, 174, 175, 179, 182, 184, 186, 187, 188, 189, 191, 192, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 226, 231, 232, 233, 234, 235, 236, 239, 240, 246, 248, 250, 251, 254, 255, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 271, 272, 277, 279, 281, 282], "omega_": [9, 20], "textrm": [9, 20], "properti": [10, 11, 12, 13, 14, 15, 18, 20, 21, 24, 25, 31, 32, 33, 34, 36, 57, 62, 65, 67, 68, 72, 74, 75, 82, 83, 85, 87, 88, 90, 92, 93, 101, 102, 103, 104, 106, 112, 117, 118, 119, 120, 122, 123, 124, 126, 127, 130, 131, 132, 137, 140, 141, 153, 159, 161, 176, 177, 178, 179, 180, 182, 183, 283], "paramet": [16, 17, 19, 22, 27, 28, 38, 40, 41, 42, 43, 46, 47, 48, 50, 52, 53, 59, 60, 61, 63, 66, 70, 71, 73, 77, 78, 79, 84, 86, 91, 95, 97, 98, 108, 111, 113, 114, 115, 116, 121, 128, 129, 135, 138, 139, 143, 145, 149, 151, 152, 155, 158, 160, 163, 164, 165, 167, 168, 169, 170, 173, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267], "where": [16, 27, 52, 97, 108, 125, 129, 132, 155, 163, 166, 186, 187, 204, 206, 207, 209, 215, 259, 267, 276, 277, 282], "period": [16, 125, 129, 132, 134, 267], "second": [16, 17, 19, 23, 44, 125, 129, 132, 215], "critic": [16, 25, 125, 129, 130, 279], "underdamp": [16, 25, 125, 129, 130], "overdamp": [16, 25, 125, 129, 130], "ted": [16, 129], "t_": [17, 19, 23, 70, 215, 281], "fl": [17, 19], "delta": [17, 19, 26, 37, 51, 61, 76, 86, 94, 96, 171, 198, 235, 276, 277], "take": [17, 19, 23, 271], "onto": [17, 19, 23], "39": 17, "pl": [19, 23], "38": 19, "34": [20, 248], "33": 21, "sigma_": [22, 39, 40, 42], "theta_": [22, 148, 149], "carrier": [22, 154], "43": 22, "40": [23, 96, 171, 205], "less": [25, 184], "than": [25, 134, 135, 145, 155, 161, 163, 184, 218, 221, 231, 247, 255], "greater": [25, 254, 257], "fir": [26, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 96, 97, 98, 99, 100, 101, 103, 105, 106, 171, 172, 173, 174, 175, 176, 179, 181, 182, 196, 197, 198, 199, 200, 201, 232, 233, 234, 235, 236, 239, 240, 246, 250, 251, 278, 282, 283], "note": [26, 33, 36, 37, 39, 40, 41, 43, 51, 76, 94, 96, 103, 106, 125, 136, 148, 166, 167, 168, 170, 171, 179, 182, 184, 186, 187, 190, 193, 198, 202, 203, 215, 221, 226, 232, 251, 267], "equival": [26, 96, 171, 186, 187, 196, 197, 198, 199, 200, 210, 217, 260, 265, 273, 275], "first": [26, 31, 44, 96, 98, 101, 134, 142, 144, 171, 173, 176, 224, 248, 263, 272, 274], "prototyp": [26, 33, 36, 96, 103, 106, 171, 179, 182], "feedforward": [26, 28, 33, 36, 37, 51, 53, 68, 76, 79, 83, 94, 96, 98, 103, 106, 171, 173, 179, 182, 233, 234, 235, 236, 239, 240, 246, 250, 276, 277], "coeffici": [26, 28, 51, 53, 76, 79, 96, 98, 107, 120, 124, 134, 144, 154, 162, 171, 173, 233, 234, 235, 236, 239, 240, 246, 250, 276, 277], "discard": [26, 171], "each": [26, 27, 52, 96, 97, 171, 212, 220, 238, 242, 245], "instead": [26, 96, 171, 231], "ar": [26, 27, 28, 33, 36, 38, 39, 44, 46, 47, 48, 50, 52, 53, 71, 77, 79, 95, 96, 97, 98, 103, 106, 107, 108, 120, 124, 134, 135, 138, 144, 145, 154, 155, 162, 163, 166, 171, 173, 179, 182, 187, 189, 190, 192, 193, 198, 214, 217, 218, 224, 231, 232, 233, 234, 236, 238, 239, 240, 241, 242, 245, 247, 248, 249, 251, 255, 261, 262, 265, 271, 273, 275, 277, 279, 281, 282, 284], "commut": [26, 96, 171], "parallel": [26, 96, 171], "output": [26, 27, 31, 37, 51, 52, 61, 66, 76, 77, 79, 86, 91, 94, 95, 96, 97, 98, 101, 114, 125, 128, 136, 138, 142, 143, 171, 173, 176, 186, 187, 188, 189, 190, 192, 193, 203, 204, 212, 217, 222, 224, 235, 246, 263, 265, 268, 271, 275, 276, 277, 279], "sum": [26, 39, 51, 76, 166, 281], "prevent": [26, 96, 144, 162, 171], "need": [26, 96, 171, 271, 272, 274], "done": [26, 271], "case": [26, 96, 162, 166, 171], "3x": [26, 96], "6": [26, 33, 36, 37, 44, 55, 56, 80, 81, 84, 94, 96, 97, 103, 106, 134, 136, 144, 154, 161, 162, 167, 168, 170, 171, 179, 182, 184, 191, 195, 198, 204, 205, 206, 207, 212, 214, 216, 217, 220, 222, 226, 231, 232, 233, 234, 235, 236, 239, 240, 246, 247, 248, 250, 251, 254, 257, 261, 262, 264, 265, 267, 271, 272, 273, 274, 276, 277, 279, 280], "9": [26, 33, 36, 59, 84, 96, 97, 103, 106, 134, 144, 154, 162, 167, 171, 179, 182, 184, 191, 204, 212, 216, 217, 220, 251, 254, 257, 265, 271, 277, 278, 280, 281], "v": [26, 136, 195, 222, 271], "5": [26, 33, 36, 37, 39, 40, 41, 42, 43, 44, 55, 56, 59, 94, 96, 97, 103, 106, 134, 136, 144, 154, 162, 167, 169, 171, 179, 182, 184, 186, 189, 191, 192, 193, 196, 197, 198, 199, 200, 204, 205, 206, 207, 209, 210, 212, 213, 214, 215, 216, 217, 220, 221, 226, 229, 232, 233, 234, 235, 236, 239, 240, 246, 248, 250, 251, 254, 257, 258, 259, 260, 261, 262, 264, 265, 267, 271, 275, 276, 277, 278, 279, 280, 281], "7": [26, 29, 30, 33, 36, 96, 97, 99, 100, 103, 106, 134, 144, 148, 154, 161, 162, 167, 171, 179, 182, 184, 191, 198, 199, 201, 204, 212, 216, 217, 220, 251, 265, 267, 271, 277, 279], "8": [26, 33, 36, 37, 40, 42, 59, 80, 81, 84, 94, 96, 97, 103, 106, 108, 134, 135, 136, 144, 145, 148, 154, 155, 158, 159, 160, 161, 162, 163, 167, 169, 171, 179, 182, 184, 186, 187, 188, 190, 191, 193, 196, 197, 198, 199, 200, 201, 204, 205, 212, 214, 215, 216, 217, 218, 220, 223, 226, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 244, 246, 247, 248, 249, 250, 251, 254, 255, 257, 261, 262, 264, 265, 267, 276, 277, 278, 279, 281], "summat": 26, "bottom": [26, 96, 171], "top": [26, 96, 171], "adder": [26, 125, 136, 202, 203, 279], "relat": [26, 33, 36, 96, 103, 106, 171, 179, 182, 187, 215], "In": [26, 27, 28, 29, 30, 33, 36, 37, 38, 40, 42, 44, 52, 53, 55, 56, 59, 67, 71, 74, 77, 79, 80, 81, 84, 92, 94, 95, 96, 97, 98, 99, 100, 103, 106, 134, 136, 144, 148, 154, 158, 159, 160, 161, 162, 164, 165, 167, 169, 171, 173, 174, 175, 179, 182, 184, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 226, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 275, 280], "np": [26, 33, 36, 40, 42, 59, 80, 81, 84, 96, 97, 103, 106, 107, 119, 123, 134, 136, 144, 154, 158, 160, 161, 162, 167, 169, 171, 179, 182, 184, 186, 187, 188, 189, 190, 192, 193, 204, 205, 212, 213, 214, 217, 221, 223, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 244, 246, 248, 250, 251, 258, 261, 262, 264, 265, 267, 275, 276, 277, 278, 279, 280, 281], "co": [26, 96, 97, 171, 223], "64": [26, 198, 220, 277], "arang": [26, 33, 36, 96, 97, 103, 106, 171, 179, 182, 186, 188, 205, 217, 223, 251, 261, 262, 264, 265, 267, 275, 279], "280": 26, "out": [26, 29, 33, 36, 44, 55, 59, 80, 84, 96, 97, 99, 103, 106, 134, 144, 154, 159, 161, 162, 164, 165, 171, 174, 179, 182, 188, 189, 191, 192, 195, 202, 203, 204, 206, 207, 209, 210, 212, 214, 216, 217, 222, 224, 226, 229, 249, 251, 252, 253, 259, 260, 263, 265, 266], "plt": [26, 37, 40, 42, 94, 96, 97, 134, 136, 144, 148, 154, 158, 159, 160, 161, 162, 167, 169, 171, 184, 186, 187, 188, 190, 193, 196, 197, 198, 199, 200, 201, 205, 212, 213, 214, 215, 217, 218, 221, 223, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 244, 246, 247, 248, 250, 254, 255, 257, 258, 261, 262, 264, 265, 267, 275, 276, 277, 278, 279, 280, 281], "figur": [26, 37, 40, 42, 94, 96, 97, 134, 136, 144, 148, 154, 158, 159, 160, 161, 162, 167, 169, 171, 184, 186, 187, 188, 190, 193, 196, 197, 198, 199, 200, 201, 205, 212, 213, 214, 215, 217, 218, 221, 223, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 244, 246, 247, 248, 249, 250, 254, 255, 257, 258, 261, 262, 264, 265, 267, 275, 276, 277, 278, 279, 280, 281], "figsiz": [26, 37, 40, 42, 94, 96, 97, 134, 136, 144, 148, 154, 158, 159, 160, 161, 162, 167, 169, 171, 184, 186, 187, 188, 190, 193, 196, 197, 198, 199, 200, 201, 205, 212, 213, 214, 215, 217, 218, 221, 223, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 244, 246, 247, 248, 249, 250, 254, 255, 257, 258, 261, 262, 264, 265, 267, 275, 276, 277, 278, 279, 280, 281], "plot": [26, 37, 40, 42, 59, 60, 61, 63, 66, 84, 86, 91, 94, 96, 97, 134, 136, 144, 148, 154, 158, 159, 160, 161, 162, 167, 169, 171, 186, 187, 188, 190, 193, 196, 197, 198, 199, 200, 201, 205, 212, 213, 214, 215, 217, 218, 221, 223, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 254, 255, 257, 258, 261, 262, 264, 265, 267, 275, 276, 277, 279, 280, 281, 282, 283], "marker": [26, 96, 97, 136, 171, 231, 247, 248, 275, 276, 277, 280], "label": [26, 37, 40, 42, 94, 96, 97, 135, 145, 148, 155, 158, 160, 163, 167, 169, 171, 184, 186, 196, 197, 198, 199, 200, 212, 213, 215, 217, 221, 230, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 244, 245, 248, 254, 257, 258, 265, 275, 278, 279, 280, 281], "o": [26, 96, 97, 171, 275], "titl": [26, 37, 94, 96, 134, 136, 144, 148, 158, 160, 171, 184, 186, 187, 188, 190, 193, 205, 212, 213, 217, 221, 223, 230, 244, 248, 258, 261, 262, 264, 265, 267, 275, 278, 279, 280, 281], "tight_layout": [26, 37, 94, 96, 134, 136, 144, 148, 158, 160, 171, 184, 186, 187, 188, 190, 193, 205, 212, 213, 214, 217, 223, 230, 244, 248, 258, 261, 262, 264, 265, 267, 278, 279, 280, 281], "preserv": [26, 28, 38, 53, 67, 71, 74, 77, 79, 92, 95, 96, 98, 171, 173, 232, 242], "call": [26, 27, 28, 38, 52, 53, 67, 71, 74, 77, 79, 92, 95, 96, 97, 98, 171, 173], "true": [26, 40, 41, 42, 43, 59, 84, 96, 97, 134, 144, 148, 151, 152, 154, 158, 160, 162, 167, 168, 169, 170, 171, 184, 185, 187, 189, 190, 192, 193, 204, 208, 214, 217, 223, 227, 228, 231, 240, 242, 247, 248, 249, 256, 265, 278, 279, 280], "y1": [26, 96, 97, 171, 221], "70": [26, 220], "y2": [26, 96, 97, 171, 221], "140": [26, 205], "y3": [26, 96, 97, 171], "210": 26, "y4": [26, 96, 171], "y5": [26, 96, 171], "flush": [26, 27, 37, 51, 52, 58, 96, 97, 171, 283], "y_1": [26, 96, 171, 221], "y_2": [26, 96, 171, 221], "y_3": [26, 96, 171], "y_4": [26, 96, 171], "y_5": [26, 96, 171], "__call__": [26, 27, 28, 37, 38, 51, 52, 53, 67, 69, 70, 71, 74, 76, 77, 78, 79, 92, 94, 95, 96, 97, 98, 125, 128, 136, 138, 148, 149, 171, 172, 173, 283], "full": [26, 27, 52, 96, 97, 171, 172, 188, 217, 265], "__len__": [26, 37, 51, 54, 96, 171], "__repr__": [26, 29, 37, 51, 55, 76, 80, 94, 96, 99, 107, 109, 134, 144, 146, 154, 156, 162, 171, 174], "style": [26, 29, 37, 51, 55, 76, 80, 94, 96, 99, 107, 109, 134, 144, 146, 154, 156, 162, 171, 174, 249], "__str__": [26, 30, 37, 51, 56, 76, 81, 94, 96, 100, 107, 110, 134, 144, 147, 154, 157, 162, 171, 175], "human": [26, 30, 37, 51, 56, 76, 81, 94, 96, 100, 107, 110, 134, 144, 147, 154, 157, 162, 171, 175], "readabl": [26, 30, 37, 51, 56, 76, 81, 94, 96, 100, 107, 110, 134, 144, 147, 154, 157, 162, 171, 175], "reset": [26, 35, 37, 51, 64, 69, 73, 76, 89, 94, 96, 105, 125, 133, 136, 142, 171, 181], "when": [26, 35, 37, 51, 58, 61, 64, 66, 76, 86, 89, 91, 94, 96, 105, 171, 181, 186, 187, 189, 190, 192, 193, 210, 217, 233, 234, 235, 236, 239, 240, 246, 260, 265, 267, 275, 276, 277], "pass": [26, 37, 51, 58, 96, 171, 186, 189, 192, 204, 212, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 269, 271, 273, 276, 277, 283], "through": [26, 37, 51, 58, 96, 144, 162, 171, 189, 192, 204, 269, 276, 277, 279], "indic": [26, 28, 31, 37, 38, 41, 42, 43, 51, 53, 67, 69, 71, 74, 76, 77, 79, 92, 94, 95, 96, 98, 101, 107, 108, 134, 135, 144, 145, 154, 155, 158, 160, 162, 163, 167, 168, 169, 170, 171, 173, 176, 185, 208, 215, 218, 221, 223, 227, 228, 232, 240, 241, 242, 248, 254, 255, 256, 257, 265], "whether": [26, 28, 37, 38, 41, 42, 43, 51, 53, 67, 69, 71, 74, 76, 77, 79, 92, 94, 95, 96, 98, 158, 160, 167, 168, 169, 170, 171, 173, 185, 208, 223, 227, 228, 240, 242, 248, 256], "consist": [26, 37, 46, 47, 48, 49, 50, 51, 65, 96, 171], "previou": [26, 28, 37, 38, 51, 53, 65, 71, 73, 77, 79, 95, 96, 98, 171, 173, 202, 203], "u": [26, 37, 51, 66, 76, 91, 94, 96, 171, 184, 246, 267, 268, 276, 277], "frequency_respons": [26, 37, 51, 59, 76, 84, 94, 96, 171, 283], "numpi": [26, 37, 51, 59, 76, 84, 94, 96, 138, 171, 186, 189, 192, 204, 263, 275, 276, 277, 278, 279, 280, 281, 282], "float64": [26, 37, 51, 59, 76, 84, 94, 96, 136, 138, 171, 188, 217, 265, 268], "complex128": [26, 37, 51, 59, 76, 84, 94, 96, 136, 138, 171], "custom": [26, 32, 96, 102, 108, 145, 155, 163, 171, 178, 196, 197, 199, 200, 283], "multir": [26, 27, 28, 32, 96, 97, 98, 102, 171, 173, 178, 201, 251, 283], "polyphase_tap": [26, 30, 33, 36, 96, 97, 100, 103, 106, 171, 175, 179, 182], "index": [26, 31, 69, 73, 96, 101, 107, 134, 144, 154, 162, 171, 176, 217, 232, 241, 242, 247, 265, 268, 271], "correspond": [26, 31, 44, 49, 96, 101, 171, 176, 242], "mode": [27, 28, 35, 38, 52, 53, 58, 64, 67, 69, 71, 73, 74, 77, 79, 89, 92, 95, 97, 98, 105, 172, 173, 181, 188, 217, 265, 267], "l": [27, 52, 78, 97, 198], "stream": [27, 28, 29, 30, 35, 38, 52, 53, 55, 56, 58, 64, 67, 69, 71, 73, 74, 77, 79, 80, 81, 89, 92, 95, 97, 98, 99, 100, 105, 134, 144, 154, 162, 173, 174, 175, 181, 277], "convolut": [27, 52, 96, 97], "ha": [27, 52, 96, 97, 134, 144, 154, 186, 196, 197, 198, 199, 200, 205, 214, 215, 226, 264, 267, 279, 280, 281], "align": [27, 52, 97, 98, 144, 173, 217, 265, 275], "howev": [27, 46, 47, 48, 50, 52, 97, 125, 190, 193, 217, 265, 275], "produc": [27, 52, 96, 97, 171, 215, 281], "final": [27, 52, 97], "dictat": [27, 52, 97], "argument": [27, 28, 52, 97, 98, 173, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 276, 277], "specif": [28, 49, 59, 84, 98, 173, 274, 281], "npt": [28, 59, 84, 98, 108, 135, 145, 155, 163, 173, 196, 197, 199, 200, 233, 234, 235, 236, 239, 240, 246, 250], "string": [29, 30, 55, 56, 80, 81, 99, 100, 108, 109, 110, 145, 146, 147, 155, 156, 157, 163, 174, 175, 220, 238, 245, 283], "represent": [29, 30, 55, 56, 80, 81, 99, 100, 109, 110, 146, 147, 156, 157, 174, 175, 247, 283], "print": [30, 56, 81, 100, 175, 220, 275, 276, 277, 279], "167": [30, 100], "24": [30, 100, 175], "shape": [30, 56, 81, 97, 100, 107, 108, 114, 116, 119, 120, 124, 134, 144, 145, 154, 155, 162, 163, 175, 215, 218, 232, 248, 254, 255, 257, 277, 282, 283], "12": [30, 96, 134, 144, 154, 162, 168, 170, 184, 191, 201, 216, 251, 276, 280, 283], "befor": [33, 36, 103, 106, 179, 182, 284], "decomposit": [33, 36, 103, 106, 179, 182, 283], "after": [33, 36, 103, 106, 179, 182], "10": [33, 36, 37, 40, 42, 44, 94, 96, 97, 103, 106, 108, 134, 144, 145, 154, 155, 158, 160, 162, 163, 167, 169, 171, 179, 182, 184, 185, 186, 191, 195, 196, 197, 199, 200, 204, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 239, 240, 244, 246, 248, 250, 251, 254, 255, 256, 257, 258, 259, 260, 265, 275, 276, 277, 278, 279, 280, 281], "puls": [37, 94, 107, 108, 114, 116, 119, 120, 124, 134, 144, 145, 154, 155, 162, 163, 215, 218, 232, 248, 254, 255, 257, 282, 283], "deriv": 37, "d": [37, 51, 57, 211, 214, 219, 226, 271, 273, 282], "lfloor": [37, 51, 57], "rfloor": [37, 51, 57], "null": [39, 166, 281], "altern": [39, 166, 277], "hypothes": [39, 166], "follow": [39, 44, 107, 134, 144, 154, 162, 221, 231, 242, 245, 247, 249, 251, 279], "assum": [39, 166, 186, 204, 224, 248, 263], "valu": [39, 107, 108, 111, 121, 134, 135, 144, 145, 154, 155, 158, 160, 162, 163, 164, 165, 188, 195, 202, 203, 215, 217, 221, 222, 231, 234, 236, 239, 240, 247, 265, 277, 283], "random": [39, 134, 144, 154, 162, 186, 189, 192, 204, 212, 213, 221, 231, 232, 241, 248, 258, 278, 279, 280], "process": [39, 40, 41, 43, 166, 167, 168, 170, 201, 251, 277, 279, 282], "w": [39, 166, 186, 275, 276, 277, 278, 279, 280, 281], "sigma": [39, 40, 41, 42, 43, 166, 167, 168, 169, 170, 186, 187], "_0": [39, 166], "_1": [39, 166], "test": [39, 166, 273, 282], "statist": [39, 40, 41, 43, 166, 167, 168, 170], "limits_": [39, 51, 76, 166], "left": [39, 40, 41, 76, 144, 148, 154, 162, 166, 167, 168, 170, 184, 185, 186, 187, 208, 211, 212, 214, 215, 221, 223, 226, 227, 228, 256, 267], "right": [39, 40, 41, 76, 144, 148, 154, 162, 166, 167, 168, 170, 184, 185, 186, 187, 208, 211, 212, 214, 215, 221, 223, 226, 227, 228, 256, 267], "gamma": [39, 41, 43, 166, 168, 170, 184], "sim": [39, 166, 186, 272], "chi_": [39, 40, 41], "2n": [39, 40, 41], "text": [39, 162, 166, 184, 185, 186, 187, 190, 193, 194, 195, 201, 212, 213, 214, 222, 225, 227, 228, 256, 258], "under": [39, 166], "detect": [39, 40, 41, 42, 43, 148, 149, 151, 152, 166, 167, 168, 169, 170, 184, 237, 243, 283], "threshold": [39, 41, 43, 166, 168, 170], "q_": [39, 40, 41, 43], "chi_n": [39, 40, 41, 43], "steven": [39, 40, 41, 43, 166, 167, 168, 170], "kai": [39, 40, 41, 43, 166, 167, 168, 170], "fundament": [39, 40, 41, 43, 166, 167, 168, 170], "theori": [39, 40, 41, 43, 166, 167, 168, 170], "section": [39, 46, 47, 48, 49, 50, 148, 166, 277, 279], "static": [39, 40, 41, 42, 43, 166, 167, 168, 169, 170, 272], "n_nc": [39, 40, 41, 42, 43, 184], "number": [40, 41, 42, 43, 44, 46, 47, 50, 59, 60, 61, 63, 66, 84, 86, 91, 107, 108, 112, 122, 134, 135, 143, 144, 145, 151, 152, 154, 155, 162, 163, 184, 186, 189, 192, 204, 206, 207, 209, 215, 218, 220, 224, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 245, 246, 251, 254, 255, 257, 259, 263], "For": [40, 41, 43, 167, 168, 170, 186, 205, 214, 264, 271, 276], "linspac": [40, 59, 84, 158, 160, 167, 187, 190, 193, 214, 230, 244, 277, 278, 279, 280], "20": [40, 42, 96, 97, 134, 136, 144, 154, 162, 167, 171, 184, 187, 189, 192, 195, 204, 212, 213, 220, 221, 222, 228, 251, 256, 264, 278, 280, 283], "101": [40, 42, 167, 169, 196, 197, 199, 200], "25": [40, 189, 192, 198, 204, 229, 232, 252, 253, 275, 278, 279, 281], "1e": [40, 167, 213, 280], "sigma2": [41, 43, 168, 170], "If": [42, 73, 108, 138, 145, 155, 163, 169, 171, 185, 186, 187, 204, 208, 224, 227, 228, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 245, 246, 247, 248, 256, 261, 263, 282], "logspac": [42, 59, 84, 169, 184], "theoret": [42, 158, 160, 230, 244, 280, 283], "variou": [42, 272, 281], "100": [42, 59, 76, 84, 86, 91, 94, 136, 158, 160, 184, 186, 187, 190, 193, 195, 196, 197, 199, 200, 212, 222, 223, 230, 232, 233, 235, 241, 244, 246, 258, 261, 262, 264, 275, 279], "1_000": [42, 186, 213, 214, 221, 258, 278], "000": [42, 213], "5_000": 42, "measur": [44, 46, 148, 151, 152, 185, 186, 194, 195, 208, 211, 212, 219, 222, 225, 227, 228, 256, 279, 282, 283], "new": [44, 45, 69, 71, 107, 108, 134, 135, 144, 145, 154, 155, 162, 163, 258], "accumul": [44, 136, 138, 139, 140, 142, 279], "from": [44, 60, 63, 76, 77, 94, 98, 107, 123, 134, 144, 154, 161, 162, 173, 195, 206, 207, 209, 210, 222, 229, 238, 245, 252, 253, 259, 260, 271, 276, 277, 279, 282], "contain": [44, 186, 220], "add": [44, 46, 49, 134, 144, 154, 162, 186, 213, 218, 242, 255, 258, 269, 280, 284], "total": [44, 215, 218, 254, 255, 257, 281], "count": [44, 47, 212], "error_r": [44, 48, 49, 280], "everi": [44, 275], "can": [44, 46, 47, 48, 50, 125, 134, 186, 212, 215, 217, 224, 232, 238, 245, 265, 273, 276, 277, 280, 282, 284], "obtain": 44, "tabul": [44, 45], "all": [44, 49, 138, 212, 232, 241, 242, 272, 274, 282], "ascend": [44, 49], "other": [46, 47, 48, 50, 275, 284], "quantiti": [46, 47, 48, 49, 50], "user": [46, 47, 48, 50, 276, 277], "caution": [46, 47, 48, 50], "instanc": [46, 47, 48, 50, 134], "transmit": [46, 107, 124, 134, 144, 148, 149, 154, 162, 212, 232], "e": [49, 136, 148, 166, 167, 168, 169, 170, 185, 189, 190, 208, 267, 272, 273, 276, 277, 280], "whatev": 49, "wa": [49, 187], "provid": [49, 107, 111, 121, 134, 144, 154, 158, 160, 162, 242, 272, 282], "wrapper": [51, 76], "scipi": [51, 76, 196, 197, 199, 200, 238, 245, 281, 282], "convolv": 51, "It": [51, 76, 96, 108, 125, 145, 155, 163, 186, 232], "support": [51, 76, 283], "one": [51, 76, 135, 144, 145, 155, 161, 163, 215, 220, 232, 233, 234, 236, 238, 239, 240, 245, 261, 276, 277, 278, 281], "its": [51, 76, 77, 94, 186, 276, 277, 281], "sum_": [51, 76, 168, 170, 185, 186, 187, 208, 211, 212, 219, 256], "valid": [52, 214, 232, 241, 242, 267], "same": [52, 97, 148, 248, 276], "0013559842808217807": [55, 56], "005995136544658217": [55, 56], "008698817681933214": [55, 56], "0024103767414047302": [55, 56], "010205586837665018": [55, 56], "018983779931504997": [55, 56], "011950905288150394": [55, 56], "01518393864077397": [55, 56], "051622191325047306": [55, 56], "07210389837804473": [55, 56], "04745944982876247": [55, 56], "039173517569276436": [55, 56], "17918683372907862": [55, 56], "3367363220550604": [55, 56], "4611457574513795": [55, 56], "5084040873607553": [55, 56], "30": [56, 96, 171, 205, 233, 235, 246, 261, 262, 277, 283], "31": [56, 276], "15": [56, 134, 169, 191, 216, 217, 251, 264, 265], "remain": [58, 205, 224], "1024": [59, 60, 63, 84, 233, 234, 236, 239, 240, 278, 281], "whole": [59, 84, 281], "decad": [59, 84, 233, 234, 236, 239, 240, 276, 279], "point": [59, 84, 151, 152, 238, 245], "endpoint": [59, 84, 277], "includ": [59, 84, 272, 273, 274, 282], "integ": [59, 84, 224], "maximum": [59, 84, 107, 113, 114, 134, 144, 154, 162, 215, 218, 231, 247, 254, 255, 257], "max_f": [59, 84], "log10": [59, 84], "evenli": [59, 84], "00000000e": [59, 84, 161, 162, 277], "00": [59, 84, 161, 162, 277], "76562500e": [59, 84], "04": [59, 84, 220, 277], "95312500e": [59, 84], "03": [59, 84, 220, 277], "97070312e": [59, 84], "01": [59, 84, 161, 162, 220, 277, 279], "98046875e": [59, 84], "99023438e": [59, 84], "95337172": 59, "30202676j": 59, "8178049": 59, "5759632j": 59, "6058636": 59, "79630028j": 59, "rad": [59, 84], "0000000000000002": 59, "0j": [59, 84, 135, 145, 155, 163], "sever": [59, 84], "200": [59, 84, 205, 275, 280], "300": [59, 84, 261, 262], "400": [59, 84, 205, 275], "1000": [59, 84, 134, 144, 151, 152, 154, 162, 212, 214, 261, 262, 280], "00391660e": 59, "14686183e": 59, "17j": 59, "53081763e": 59, "88127210e": 59, "62720131e": 59, "03715849e": 59, "83622458e": 59, "27280811e": 59, "resampl": [69, 70, 71, 72, 73, 74, 75, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 201, 251, 282, 283], "http": [69, 184, 194, 196, 197, 198, 199, 200, 201, 215, 217, 225, 265, 267, 271, 272, 273], "wirelesspi": 69, "com": [69, 184, 196, 197, 198, 199, 200, 201, 215, 217, 265, 272, 273], "structur": 69, "should": [73, 134, 232, 273], "equal": [73, 134], "three": [73, 275, 281], "lfilter": 76, "b_i": [76, 79, 83, 94, 233, 234, 235, 236, 239, 240, 246, 250, 277], "feedback": [76, 79, 82, 94, 233, 234, 235, 236, 239, 240, 246, 250, 277], "a_j": [76, 79, 82, 94, 233, 234, 235, 236, 239, 240, 246, 250, 277], "These": [76, 144, 154, 162, 249, 273, 279], "differ": [76, 135, 145, 155, 161, 163, 196, 197, 198, 199, 200, 217, 248, 265, 267, 281], "a_0": 76, "classmethod": [76, 77, 94], "zerospol": [76, 77, 80, 81, 84, 94, 233, 234, 235, 236, 239, 240, 246, 250, 277], "self": [76, 77, 94], "b_tap": [76, 81, 83, 94, 277], "a_tap": [76, 81, 82, 94, 277], "exp": [80, 81, 84, 138, 144, 154, 162, 205, 215, 221, 223, 233, 234, 235, 236, 239, 240, 246, 250, 262, 264, 267, 275, 277, 279], "1j": [80, 81, 84, 205, 223, 233, 234, 235, 236, 239, 240, 246, 250, 262, 264, 275, 277, 279], "conj": [80, 81, 84, 233, 234, 235, 236, 239, 240, 246, 250, 277, 279], "478207252018059": [80, 81, 277], "6400000000000001": [80, 81, 277], "7391036260090295": [81, 277], "3061467458920719j": [81, 277], "4722987": 84, "47271105": 84, "0041658j": 84, "47394825": 84, "00830241j": 84, "47601067": 84, "01238051j": 84, "472298696877605": 84, "36961426": 84, "9678537j": 84, "57338213": 84, "77694738j": 84, "52496713": 84, "3885743j": 84, "51520024": 84, "1706839j": 84, "insert": [96, 171], "multipli": [96, 171], "hold": [96, 98, 171, 173, 224, 283], "recommend": 96, "wai": [96, 273], "11": [96, 134, 144, 154, 162, 191, 201, 216, 217, 251, 265, 271], "zoh": [96, 98, 102, 171, 173, 178], "13": [96, 134, 144, 154, 162, 166, 167, 168, 170, 188, 191, 216, 248, 251, 283], "matlab": [96, 98, 102, 171, 173, 178, 282], "iter": 97, "concaten": [97, 277], "linearli": [98, 173], "2r": 98, "ramp": [98, 125, 173], "advanc": [98, 173], "ones": [98, 173, 196, 197, 199, 200, 279], "84": 100, "modul": [107, 108, 116, 117, 119, 134, 136, 144, 145, 148, 151, 152, 154, 155, 158, 160, 162, 163, 206, 207, 209, 212, 230, 232, 241, 244, 247, 248, 259, 271, 274, 280, 282, 283], "nomenclatur": [107, 134, 144, 154, 162], "variabl": [107, 134, 136, 138, 144, 154, 162, 220, 279], "name": [107, 134, 144, 154, 162], "decis": [107, 113, 114, 134, 144, 148, 149, 152, 154, 162, 232, 279], "tild": [107, 113, 114, 134, 144, 148, 149, 154, 162], "map_symbol": [107, 115, 134, 144, 154, 162, 186, 212, 213, 221, 231, 232, 258, 278, 279, 280, 283], "decide_symbol": [107, 113, 134, 144, 154, 162, 279, 280, 283], "a_tild": [107, 113, 134, 144, 154, 162, 279, 280], "likelihood": [107, 113, 114, 134, 144, 154, 162], "mle": [107, 113, 134, 144, 154, 162], "match": [107, 108, 114, 120, 134, 144, 145, 154, 155, 162, 163, 283], "abstract": [107, 111, 121], "log_2": [107, 112, 134, 144, 154, 162, 187, 206, 207, 209, 259], "phase_offset": [107, 108, 118, 134, 135, 144, 145, 154, 155, 159, 162, 163, 186, 212, 213, 221, 231, 232, 247, 248, 258, 278, 279, 280], "degre": [107, 108, 118, 134, 135, 144, 145, 154, 155, 159, 162, 163, 213, 221, 223, 226, 279], "dot": [107, 108, 123, 134, 144, 154, 161, 162, 247], "mapsto": [107, 108, 123, 134, 144, 154, 161, 162, 247], "mathbb": [107, 108, 123, 134, 144, 154, 161, 162, 187, 247, 267], "sym": [107, 108, 122, 134, 135, 144, 145, 154, 155, 162, 163, 207, 210, 215, 259, 260, 281], "pulse_shap": [107, 108, 114, 116, 119, 134, 144, 145, 154, 155, 162, 163, 248, 278, 280], "tx_filter": [107, 124, 134, 144, 154, 162], "rx_filter": [107, 120, 134, 144, 154, 162], "rect": [108, 145, 155, 163, 281], "whose": [108, 135, 145, 154, 155, 163], "import": [108, 145, 155, 163, 273, 275, 276, 277, 278, 279, 280, 281, 282], "roll": [108, 145, 155, 163, 267, 281], "off": [108, 145, 155, 163], "psd": [111, 121, 158, 160, 187, 206, 207, 209, 210, 230, 244, 259, 260], "p_b": 111, "x_tild": 114, "s_hat": [114, 279, 280], "size": [114, 116, 188, 204, 217, 248, 265, 275, 279, 280, 281], "p_e": 121, "loopfilt": [125, 126, 127, 128, 129, 130, 131, 132, 133, 270, 279, 283], "ppi": [125, 129, 270], "track": 125, "constant": [125, 134, 136, 139, 140, 238, 245, 277, 279], "cannot": 125, "chirp": 125, "underli": [125, 131], "scheme": [134, 144, 148, 151, 152, 154, 162, 283], "similar": [134, 144, 162, 281], "One": [134, 144, 162, 281], "distinct": [134, 144, 162], "result": [134, 144, 162, 185, 208, 214, 226, 227, 228, 254, 256, 257, 280], "envelop": [134, 276, 277], "which": [134, 144, 162, 184, 185, 186, 187, 208, 211, 213, 219, 221, 225, 226, 227, 231, 234, 236, 239, 240, 247, 258, 275, 279, 281], "lower": [134, 144, 162, 254, 257], "also": [134, 148, 198, 214, 215, 282], "consid": [134, 220], "cpfsk": 134, "separ": 134, "modem": [134, 144, 151, 152, 154, 162], "45": [134, 135, 144, 145, 154, 159, 186, 212, 213, 221, 223, 231, 232, 247, 248, 258, 278, 279, 280], "symbol_label": [134, 135, 144, 145, 154, 155, 161, 162, 163, 280], "randint": [134, 144, 154, 162, 186, 189, 192, 204, 212, 213, 221, 231, 232, 241, 248, 258, 278, 279, 280], "uint8": [134, 144, 154, 162, 224, 263], "complex_symbol": [134, 144, 154, 162], "70710678": [134, 144, 154], "70710678j": [134, 144, 154], "linestyl": [134, 144, 154, 162, 231, 242, 247, 249, 267, 275, 279, 280, 281], "tx_sampl": [134, 144, 154, 162], "50": [134, 144, 154, 162, 195, 222, 229, 247, 248, 261, 262, 275, 278], "like": [134, 273, 282, 283], "channel": [134, 144, 158, 160, 187, 189, 190, 192, 193, 204, 230, 244, 282, 283], "subplot": [134, 144, 221, 279, 280], "imag": [134, 144, 275], "trajectori": 134, "although": 134, "boundari": 134, "lead": [134, 221, 280], "spectral": [134, 205, 238, 278, 281], "effici": [134, 205, 226, 264], "gmsk": 134, "rx_sampl": [134, 144, 154, 162], "last": [134, 144, 224, 271], "rx_symbol": [134, 144, 154, 162], "rx_complex_symbol": [134, 144, 154, 162], "_": [134, 144, 154, 162, 184, 212], "14": [134, 144, 154, 162, 167, 191, 216, 251], "array_equ": [134, 144, 154, 162, 217, 265], "bin": [135, 145, 155, 161, 163, 212, 231, 247, 280], "absolut": [135, 136, 139, 141, 145, 163, 187], "consecut": [135, 145, 155, 163], "adjac": [135, 145, 155, 161, 163, 280, 281], "mai": [135, 145, 155, 161, 163, 212, 231, 242, 245, 247, 249, 277], "more": [135, 145, 155, 161, 163, 283], "start": [135, 145, 155, 163, 271], "go": [135, 145, 155, 163], "counter": [135, 145, 155, 163], "clockwis": [135, 145, 155, 163], "around": [135, 145, 155, 163], "circl": [135, 145, 155, 163, 277], "increment": [136, 138, 139, 140, 279], "Then": 136, "fsk": 136, "60": [136, 196, 197, 199, 200, 281], "repeat": 136, "cp": 136, "57": 136, "bpsk": [136, 158, 160, 230, 244, 278], "forward": [136, 143], "settabl": [136, 137, 140, 141], "vari": 138, "format": [138, 188, 217, 265], "option": [138, 233, 234, 236, 238, 239, 240, 245, 283], "intern": 142, "set": [142, 186, 214, 217, 231, 238, 242, 245, 247, 249, 265, 272, 274, 277], "qpsk": [144, 148, 154, 158, 159, 160, 162, 186, 212, 213, 230, 231, 232, 244, 247, 248, 258, 279, 282, 283], "convent": [144, 162], "transit": [144, 162, 192, 193, 204, 265, 269], "independ": 144, "apart": 144, "origin": [144, 162, 264, 275], "taken": [144, 154, 162], "jq": 144, "begin": [144, 162, 166], "end": [144, 162, 166, 261, 272], "heurist": [148, 270], "aid": [148, 151], "known": [148, 149, 186, 217, 265], "da": 148, "cdot": [148, 196, 197, 199, 200, 223], "direct": [148, 152, 283], "dd": [148, 279, 283], "compar": [148, 158, 160, 196, 197, 198, 199, 200, 281], "da_error": 148, "data_aided_error": [148, 151], "dd_error": 148, "decision_directed_error": [148, 152], "grid": [148, 184, 187, 190, 193, 214, 249, 275, 278, 279, 281], "legend": [148, 184, 196, 197, 198, 199, 200, 221, 275, 278, 279, 281], "xlabel": [148, 184, 187, 188, 190, 193, 212, 214, 217, 265, 267, 275, 278, 279, 281], "ylabel": [148, 184, 187, 188, 190, 193, 212, 214, 217, 265, 267, 275, 278, 279, 281], "comparison": 148, "observ": [148, 198, 226, 232], "slope": 148, "both": [148, 184, 187, 231, 247, 248, 275, 279], "unambigu": 148, "rang": [148, 231, 279, 280], "initi": [148, 150, 279], "either": [149, 212], "n_point": [151, 152], "encod": [154, 158, 160, 202, 203, 282], "inform": [154, 206, 207, 209, 217, 259, 265], "ge": [155, 163, 184], "were": [158, 160], "simon": [158, 160], "alouini": [158, 160], "over": [158, 160, 220], "fade": [158, 160], "chapter": [158, 160, 201, 251], "john": [158, 160], "proaki": [158, 160], "optimum": [158, 160], "psk8": [158, 160, 230, 244, 280], "psk16": [158, 160, 230, 244, 280], "de": [158, 160, 279, 283], "se": [160, 244], "00j": [161, 162], "07106781e": [161, 162], "01j": [161, 162], "12323400e": [161, 162], "17": [161, 162, 226, 251, 271], "83697020e": 161, "22464680e": [161, 162], "16j": [161, 162], "annot": [161, 247, 283], "odd": [162, 198, 261], "rotat": [162, 223, 279], "rel": [162, 267, 281], "even": [162, 196, 197, 198, 199, 200, 215, 254, 257], "2m": 162, "displaystyl": 162, "pi4_qpsk": 162, "exceed": [164, 165], "15865525393145707": [164, 165], "158655": [164, 165], "0000010494310452": [164, 165], "perfect": 166, "knowledg": 166, "cn": [166, 186], "mathrm": 166, "re": 166, "sqrt": [166, 167, 168, 170, 184, 211, 212, 215, 256, 267, 278, 279, 281], "____": 171, "down": [171, 173, 177, 201, 251], "2p": 173, "95": [175, 212], "desir": [184, 186, 280], "ln": [184, 215], "62": [184, 220], "log_": [184, 185, 195, 208, 214, 225, 227, 228, 256], "54": [184, 220], "44": 184, "12ab": 184, "7b": 184, "claim": 184, "leq": 184, "le": [184, 198, 223, 226, 254, 257], "8096": 184, "radarsp": 184, "weebli": 184, "upload": 184, "21471216": 184, "albersheim_alternative_form": 184, "pdf": [184, 215], "bpb": 184, "w2": 184, "wpmucdn": 184, "site": [184, 271], "gatech": 184, "edu": 184, "dist": [184, 272], "462": 184, "file": [184, 272, 274], "2016": 184, "noncoher": 184, "approxim": [184, 283], "www": [184, 196, 197, 198, 199, 200, 201, 215, 217, 265], "mathwork": [184, 196, 197, 198, 199, 200, 201, 215, 217, 265], "help": [184, 196, 197, 198, 199, 200, 201, 215, 217, 265], "html": [184, 196, 197, 198, 199, 200, 201, 215, 217, 265, 271], "semilogx": [184, 243], "across": [184, 211, 219], "nuse": 184, "axi": [185, 208, 211, 219, 225, 227, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 245, 247, 248, 275, 283], "avg": [185, 186, 225], "ax": [185, 208, 211, 219, 225, 227, 249], "along": [185, 208, 211, 219, 225, 227, 283], "entir": [185, 208, 211, 219, 225, 227], "decibel": [185, 195, 208, 222, 227, 228, 256, 282, 283], "seed": [186, 189, 192, 204, 283], "ad": [186, 242, 272, 282, 283], "explicitli": 186, "must": [186, 196, 197, 199, 200, 215, 217, 223, 242, 254, 257, 265, 267], "default_rng": [186, 189, 192, 204], "noisi": 186, "sin": [186, 261], "zorder": [186, 213, 258], "infti": [186, 187], "nand": 186, "capac": [187, 190, 193, 282, 283], "2d": [187, 242], "x_i": [187, 189, 190, 192, 193, 204, 221], "y_i": [187, 189, 190, 192, 193, 204], "monoton": 187, "decreas": 187, "limit": [187, 231, 247, 280], "At": 187, "occur": 187, "view": [187, 272, 282], "59": 187, "shannon": 187, "semilogi": [187, 230, 243, 244], "barker": [188, 268, 282, 283], "int64": [188, 217, 265, 268], "bipolar": [188, 217, 265, 283], "sequenc": [188, 189, 192, 204, 217, 265, 267, 269, 282, 283], "seq": [188, 217, 265], "have": [188, 198, 205, 217, 224, 248, 263, 264, 265], "ideal": [188, 280], "minim": 188, "autocorrel": [188, 217, 265, 267], "sidelob": [188, 196, 197, 199, 200, 217, 254, 257, 265, 267], "corr": [188, 267], "lag": [188, 217, 265, 267], "ab": [188, 217, 265, 267, 281], "roughli": [189, 192, 275], "eras": 189, "flip": 192, "h_b": 193, "cf": 194, "v_": [194, 195, 222, 228, 256], "en": [194, 225, 267], "wikipedia": [194, 225, 267], "org": [194, 225, 267], "wiki": [194, 225, 267], "type": [195, 212, 222, 224, 238, 243, 245, 263, 283], "voltag": [195, 222, 228, 256, 282], "x_": [195, 222], "mhz": [195, 222], "77": [195, 220, 222], "50e6": 195, "76": [195, 220], "98970004336019": 195, "mw": [195, 222], "dbm": [195, 222], "dbv": [195, 222], "020599913279624": 195, "center_freq": [196, 197], "hann": [196, 197, 199, 200, 238, 245], "blackman": [196, 197, 199, 200], "harri": [196, 197, 199, 200, 201, 251], "chebyshev": [196, 197, 199, 200], "atten": [196, 197, 199, 200], "nyquist": [196, 197, 199, 200, 205, 232, 264, 281], "side": [196, 197, 215, 233, 234, 236, 238, 239, 240, 245, 276, 277, 278, 281], "about": [196, 197, 248, 274], "No": [196, 197, 199, 200], "blackmanharri": [196, 197, 199, 200], "chebwin": [196, 197, 199, 200], "attenu": [196, 197, 199, 200, 201, 254, 257], "dsp": [196, 197, 198, 199, 200, 201, 282], "designbandpassfir": 196, "h_ham": [196, 197, 199, 200], "h_hann": [196, 197, 199, 200], "h_blackman": [196, 197, 199, 200], "h_blackman_harri": [196, 197, 199, 200], "h_chebyshev": [196, 197, 199, 200], "h_kaiser": [196, 197, 199, 200], "ylim": [196, 197, 198, 199, 200, 267, 276, 279, 280, 281], "larger": [197, 218, 221, 231, 247, 255], "designbandstopfir": 197, "75": [197, 220, 231, 279, 280], "best": 198, "append": [198, 261, 278], "tau": 198, "l_": 198, "dc": 198, "designfracdelayfir": 198, "flat": 198, "h_8": [198, 254, 257], "h_16": [198, 254, 257], "h_32": 198, "32": [198, 275], "h_64": 198, "cutoff_freq": [199, 200], "cutoff": [199, 200], "f_c": [199, 200], "designhighpassfir": 199, "designlowpassfir": 200, "half_length": 201, "a_stop": 201, "80": [201, 267], "stopband": [201, 254, 257], "a_": 201, "stop": 201, "fred": [201, 251], "system": [201, 210, 217, 251, 260, 265, 272, 274, 279, 282], "designmultiratefir": 201, "oplu": [202, 203, 219], "uncod": 203, "dmc": [204, 269, 282, 283], "memoryless": [204, 269, 282], "pr": 204, "y_j": 204, "alphabet": 204, "ldot": 204, "doe": [205, 264], "anti": [205, 264, 283], "alias": [205, 264, 283], "x1": 205, "x2": 205, "130": 205, "x3": [205, 267], "spectrum": [205, 233, 234, 236, 238, 239, 240, 245, 261, 262, 264], "content": 205, "abov": [205, 264], "fold": 205, "cw": 205, "unalias": 205, "fft": [205, 238, 245, 261, 262, 264], "2048": [205, 261, 262, 264, 278], "xlim": [205, 264, 278, 279, 281], "qam": [206, 207, 209, 259], "249387366082999": [206, 207], "020599913279625": [206, 260], "7506126339170005": [209, 259], "979400086720376": [209, 210], "norm": [212, 215, 218, 254, 255, 257], "noiseless": 212, "sourc": 212, "max": [212, 227, 228], "instantan": 212, "percentil": [212, 245], "915481162490009": 212, "863809254031926": 212, "10833271837992": 212, "95th": 212, "73336373672585": 212, "inst_evm": 212, "hist": 212, "histogram": 212, "frequency_offset": [213, 269, 283], "freq_rat": 213, "cycl": [213, 248], "5e": 213, "deg": [213, 221, 279], "path": [214, 282], "loss": [214, 282], "meter": [214, 226, 266], "transmitt": 214, "far": 214, "field": 214, "neg": [214, 221], "impli": 214, "possibl": [214, 282], "so": [214, 215, 218, 254, 255, 257, 282], "km": 214, "link": [214, 282, 283], "ghz": [214, 226, 266], "1e3": [214, 223, 261], "1e9": [214, 226, 266], "92": 214, "44778322188337": 214, "doubl": [214, 226], "increas": [214, 226, 277], "2e3": 214, "98": 214, "468383135163": 214, "2e9": 214, "product": [215, 281], "thought": [215, 284], "smaller": [215, 254, 257, 281], "wider": 215, "how": [215, 218, 232, 241, 242, 248, 254, 255, 257, 265, 274], "gaussdesign": 215, "onlinelibrari": 215, "wilei": 215, "doi": 215, "1002": 215, "9780470041956": 215, "app2": 215, "h_0p1": [215, 254, 257], "h_0p2": 215, "h_0p3": 215, "hadamard": [217, 265, 268], "comm": [217, 265], "hadamardcod": 217, "walsh": [217, 265, 268], "thei": [217, 265, 284], "cross": [217, 265, 267], "seq1": [217, 265], "seq2": [217, 265], "seq3": [217, 265], "quit": [217, 265], "larg": [217, 265, 272], "misalign": [217, 265], "becaus": [217, 265], "spread": [217, 265], "precis": [217, 265], "xcorr12": [217, 265], "xcorr13": [217, 265], "xcorr23": [217, 265], "uniform": [217, 265], "fact": [217, 265], "high": [217, 265], "acorr1": [217, 265], "acorr2": [217, 265], "acorr3": [217, 265], "reason": [218, 255, 271], "h_half_sin": 218, "displai": [220, 231, 233, 234, 236, 238, 239, 240, 245, 247], "line": [220, 248, 272, 278], "quick": 220, "brown": 220, "fox": 220, "jump": 220, "lazi": 220, "dog": 220, "00000000": 220, "68": 220, "65": 220, "71": 220, "69": 220, "63": 220, "6b": 220, "72": 220, "6f": 220, "6e": 220, "00000010": 220, "66": 220, "78": 220, "6a": 220, "6d": 220, "73": 220, "74": 220, "00000020": 220, "6c": 220, "61": 220, "7a": 220, "79": 220, "67": 220, "he": 220, "02": [220, 277, 279], "00000004": 220, "05": [220, 275, 277, 279], "06": 220, "07": 220, "08": 220, "00000008": 220, "09": 220, "0a": 220, "iq_imbal": [221, 269, 283], "iq": [221, 269, 282], "imbal": [221, 269, 282], "posit": 221, "compon": [221, 261, 262, 264], "g_i": 221, "180": 221, "g_q": 221, "x_q": 221, "horizont": 221, "stretch": 221, "while": [221, 281], "vertic": 221, "northwest": 221, "northeast": 221, "50118723": 222, "36272725": 222, "9952623149688795": 222, "satisfi": 223, "remov": [223, 238, 245, 283], "dtypelik": [224, 263], "most": [224, 263], "signific": [224, 263], "enough": 224, "fill": 224, "smallest": 224, "unsign": 224, "diamet": 226, "55": [226, 248], "eta": 226, "dbi": 226, "arcsin": 226, "83": 226, "dish": 226, "21": [226, 248], "810210290266568": 226, "437435887991374": 226, "23": 226, "sinc": [226, 232, 271, 280], "antenna": [226, 282], "we": [226, 282], "830810203546193": 226, "529544741425365": 226, "keyword": [230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 276, 277], "pyplot": [230, 231, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247, 248, 249, 250, 275, 276, 277, 278, 279, 280, 281], "heatmap": [231, 280], "scatter": 231, "overwritten": [231, 242, 245, 247], "hist2d": 231, "10_000": 231, "color": [232, 241, 242, 248, 278, 281], "imaginari": [232, 242, 248], "interleav": [232, 242], "base": [232, 241, 242, 248, 283], "examin": 232, "intersymbol": 232, "interfer": 232, "isi": 232, "cascad": 232, "why": 232, "often": [232, 275], "practic": 232, "n_time": [233, 277], "n_freq": 233, "x_axi": [233, 234, 236, 238, 239, 240, 245, 276, 277, 278, 279], "log": [233, 234, 236, 238, 239, 240, 276, 277, 279], "definit": [233, 234, 235, 236, 239, 240, 246, 250], "n_t": 233, "n_f": 233, "scale": [233, 234, 236, 238, 239, 240, 245, 276, 277], "logarithm": [233, 234, 236, 238, 239, 240, 276, 277], "h_srrc": [233, 234, 235, 236, 239, 240, 246, 250, 280], "auto": [234, 236, 239, 240], "select": [234, 236, 239, 240, 272], "y_axi": [236, 238], "x_label": 237, "overlap": [238, 245, 278], "detrend": [238, 245], "median": 238, "segment": [238, 245], "256": [238, 245, 278], "trend": [238, 245], "unwrap": [240, 279], "stride": 242, "colorbar": 242, "1d": 242, "determin": 242, "row": 242, "collect": 242, "linecollect": 242, "linewidth": [242, 267], "solid": [242, 248], "cmap": 242, "rainbow": 242, "loglog": 243, "pcolormesh": 245, "vmin": 245, "10th": 245, "vmax": 245, "100th": 245, "shade": 245, "gouraud": 245, "markers": 247, "diff": [248, 278], "mutual": 248, "exclus": 248, "current": [248, 273], "dash": 248, "share": 248, "10e3": 248, "uniformli": 248, "randn": 248, "revert": 249, "rcdefault": 249, "_rc_param": 249, "rc_param": 249, "autolayout": 249, "max_open_warn": 249, "titleweight": 249, "bold": 249, "arrang": 251, "column": 251, "notion": 251, "demonstr": 251, "matric": 251, "18": [251, 271, 280], "19": [251, 283], "000005": 252, "5000": [252, 253], "000000025": 252, "005": [253, 279], "000025": 253, "excess": [254, 257, 281], "narrow": [254, 257], "expens": [254, 257], "higher": [254, 257, 281], "h_0p5": [254, 257], "h_0p9": [254, 257], "affect": [254, 257], "longer": [254, 257, 261], "h_4": [254, 257], "h_rect": [255, 281], "sample_rate_offset": [258, 269, 283], "250": [261, 262, 279], "ksp": [261, 262], "notic": [261, 262, 275, 281], "conjug": [261, 262, 277], "500": [261, 262, 279], "now": [261, 262, 275, 283], "150": [261, 262], "asymmetr": 262, "copi": 264, "mani": 265, "walshcod": 265, "299792458": 266, "zadoff_chu": [267, 268, 283], "zadoff": [267, 268, 282, 283], "chu": [267, 268, 282, 283], "prime": 267, "gcd": 267, "ne": 267, "cyclic": 267, "x_u": 267, "c_": 267, "2q": 267, "mod": 267, "e2": 267, "93chu_sequ": 267, "x_3": 267, "139": 267, "tile": 267, "x_5": 267, "x5": 267, "xcorr": 267, "sphinx": 271, "immateri": 271, "theme": 271, "depend": [271, 272, 274], "store": [271, 273, 274], "txt": [271, 272, 273, 274], "some": 271, "below": [271, 276, 277], "version": [271, 273, 282], "aren": 271, "resolut": 271, "minut": 271, "ci": 271, "myst": 271, "parser": 271, "updat": 271, "git": [271, 273], "math": 271, "dollar": 271, "ipykernel": 271, "26": 271, "nb": 271, "pickleshar": 271, "switch": 271, "pip": [271, 272, 273, 274, 282], "python3": [271, 272, 273, 274, 282], "built": 271, "run": 271, "command": [271, 272], "dirhtml": 271, "locat": [271, 274], "home": 271, "page": 271, "directori": [271, 273], "get": 271, "necessari": 271, "webpag": 271, "webserv": 271, "easili": [271, 272, 274, 276, 277], "python": [271, 282], "server": 271, "8080": 271, "access": 271, "web": 271, "browser": 271, "localhost": 271, "librari": [272, 273, 274, 275, 280, 282, 284], "ruff": [272, 273, 283], "lint": [272, 273], "your": [272, 274], "develop": [272, 273, 274], "dev": [272, 274], "pyproject": [272, 274], "toml": [272, 273, 274], "tool": [272, 274, 282], "src": 272, "extend": 272, "ipynb": 272, "exclud": 272, "build": [272, 282], "_version": 272, "py": [272, 274], "120": 272, "doc": 272, "pycodestyl": 272, "pyflak": 272, "pyupgrad": 272, "flake8": 272, "bugbear": 272, "simplifi": 272, "isort": 272, "ignor": 272, "e501": 272, "e713": 272, "e714": 272, "__init__": 272, "f401": 272, "f403": 272, "manual": [272, 274], "check": 272, "hook": 272, "config": [272, 275, 276, 277, 278, 279, 280, 281], "yaml": 272, "repo": [272, 273], "github": [272, 282], "rev": 272, "v2": 272, "id": 272, "fixer": 272, "trail": 272, "whitespac": 272, "astral": 272, "sh": 272, "v0": 272, "enabl": 272, "disabl": 272, "uninstal": 272, "extens": 272, "vscode": [272, 274], "json": [272, 274], "you": [272, 273, 274, 282], "edit": [272, 277], "latest": [273, 282], "releas": [273, 283], "main": [273, 281], "branch": 273, "mhostett": [273, 283], "Or": [273, 274], "pre": 273, "To": 273, "activ": 273, "benefici": 273, "fashion": 273, "allow": [273, 274], "chang": [273, 284], "immedi": 273, "seen": 273, "upon": 273, "next": 273, "clone": 273, "wherev": 273, "flag": 273, "packag": [273, 282], "commit": 273, "pytest": [273, 274], "cov": 273, "xdist": 273, "benchmark": 273, "ini_opt": 274, "minvers": 274, "addopt": 274, "showloc": 274, "testpath": 274, "execut": 274, "test_psk": 274, "instruct": 274, "invok": 274, "infrastructur": 274, "debug": 274, "inlinebackend": [275, 276, 277, 278, 279, 280, 281], "print_figure_kwarg": [275, 276, 277, 278, 279, 280, 281], "facecolor": [275, 276, 277, 278, 279, 280, 281], "inlin": [275, 276, 277, 278, 279, 280, 281], "widget": [275, 276, 277, 278, 279, 280, 281], "tx": 275, "decai": [275, 277], "fillstyl": 275, "show": [275, 276, 277, 278, 279, 280, 281], "accomplish": [275, 280], "def": [275, 278, 280], "resample_sign": 275, "new_sample_r": 275, "ty": 275, "gca": [275, 280], "set_prop_cycl": [275, 280], "four": 275, "appear": 275, "fourth": 275, "do": 275, "315": 275, "00095883": 276, "00175012": 276, "00423921": 276, "0058825": 276, "006151": 276, "00474595": 276, "0017044": 276, "00254816": 276, "00721645": 276, "0112324": 276, "01342358": 276, "01273202": 276, "00845058": 276, "0004368": 276, "01073669": 276, "02372977": 276, "03650247": 276, "04650654": 276, "05098525": 276, "04734644": 276, "03355896": 276, "00851486": 276, "02769991": 276, "07367348": 276, "12670446": 276, "18301321": 276, "23810898": 276, "28727058": 276, "32607991": 276, "35093841": 276, "35949665": 276, "conveni": [276, 277], "evalu": [276, 277], "29": 276, "here": [276, 277], "47820725": 277, "78207252e": 277, "58172329e": 277, "10862468e": 277, "86109590e": 277, "21565653e": 277, "01140214e": 277, "57286400e": 277, "67772160e": 277, "47338728e": 277, "10422993e": 277, "89312837e": 277, "12240078e": 277, "03953322e": 277, "69685122e": 277, "63882791e": 277, "81474977e": 277, "47193366e": 277, "85259041e": 277, "15647504e": 277, "23851924e": 277, "42176895e": 277, "84684395e": 277, "42721858e": 277, "72236648e": 277, "14721649e": 277, "10813095e": 277, "94024315e": 277, "78877688e": 277, "74077567e": 277, "87820725": 277, "53637958": 277, "94724205": 277, "13335164": 277, "1455082": 277, "04436799": 277, "88708159": 277, "71930943": 277, "5719707": 277, "46154771": 277, "39261642": 277, "36139242": 277, "35935288": 277, "3763214": 277, "40270968": 277, "43085717": 277, "45557651": 277, "47410241": 277, "48566716": 277, "49090568": 277, "49124786": 277, "48840102": 277, "4839738": 277, "47925143": 277, "47510421": 277, "47199608": 277, "47005584": 277, "46917696": 277, "46911955": 277, "denomin": 277, "73910363": 277, "30614675j": 277, "plane": 277, "092337035029908": 277, "71104892744724": 277, "684365018955985": 277, "37868538208862": 277, "1263714068241546": 277, "9993519409971622": 277, "1909320767063554": 277, "016796159999999997": 277, "46380627201816593": 277, "3806359704987265j": 277, "4988817673791569": 277, "3333421398098428j": 277, "5543277195052645": 277, "22961005941814036j": 277, "5291527586123693": 277, "28283804209787544j": 277, "lyon": 277, "understand": 277, "3rd": 277, "insid": 277, "outsid": 277, "unstabl": 277, "n_symbol": 278, "els": 278, "pb": 278, "x_bb_rect": 278, "papr_bb_rect": 278, "x_pb_rect": 278, "papr_pb_rect": 278, "x_bb_0p1": 278, "papr_bb_0p1": 278, "x_pb_0p1": 278, "papr_pb_0p1": 278, "x_bb_0p5": 278, "papr_bb_0p5": 278, "x_pb_0p5": 278, "papr_pb_0p5": 278, "x_bb_0p9": 278, "papr_bb_0p9": 278, "x_pb_0p9": 278, "papr_pb_0p9": 278, "2f": 278, "rf": [278, 279], "512": 278, "sweep_alpha": 278, "bb_papr": 278, "pb_papr": 278, "bpsk_bb_papr": 278, "bpsk_pb_papr": 278, "qpsk_bb_papr": 278, "qpsk_pb_papr": 278, "psk8_bb_papr": 278, "psk8_pb_papr": 278, "psk16_bb_papr": 278, "psk16_pb_papr": 278, "configur": 279, "loop_filt": 279, "0x7f3e6865fa50": 279, "theta_0": 279, "phase_error": 279, "freq_estim": 279, "suptitl": [279, 280], "make": [279, 284], "a_hat": [279, 280], "02596503375454388": 279, "0006924009001211702": 279, "rad2deg": 279, "avail": [279, 280, 282], "001": 279, "b_nt": 279, "0005": 279, "0125": 279, "015": 279, "0175": 279, "t_lock": 279, "analyze_psk": 280, "100_000": 280, "n0": 280, "tx_mf": 280, "1e6": 280, "bpsk_ber": 280, "bpsk_ser": 280, "qpsk_ber": 280, "qpsk_ser": 280, "psk8_ber": 280, "psk8_ser": 280, "psk16_ber": 280, "psk16_ser": 280, "simul": [280, 282], "1e0": 280, "psk8_bin": 280, "psk8_grai": 280, "wors": 280, "rc_0p1": 281, "rc_0p5": 281, "rc_0p9": 281, "pm": 281, "nearli": 281, "small": 281, "lobe": 281, "much": 281, "freqz": 281, "worn": 281, "h_rc_0p1": 281, "h_rc_0p5": 281, "h_rc_0p9": 281, "p_rect": 281, "cumsum": 281, "p_rc_0p1": 281, "p_rc_0p5": 281, "p_rc_0p9": 281, "within": 281, "srrc_0p1": 281, "srrc_0p5": 281, "srrc_0p9": 281, "therefor": 281, "significantli": 281, "due": 281, "being": 281, "h_srrc_0p1": 281, "h_srrc_0p5": 281, "h_srrc_0p9": 281, "p_srrc_0p1": 281, "p_srrc_0p5": 281, "p_srrc_0p9": 281, "gauss_0p1": 281, "gauss_0p2": 281, "gauss_0p3": 281, "softwar": 282, "radio": 282, "goal": 282, "analyz": 282, "reli": 282, "interoper": 282, "veri": 282, "numba": 282, "acceler": 282, "computation": 282, "intens": 282, "addition": 282, "aim": 282, "replic": 282, "relev": 282, "toolbox": 282, "progress": 282, "someth": 282, "pleas": 282, "open": 282, "issu": 282, "pypi": 282, "api": [282, 284], "convers": [282, 283], "synchron": 282, "budget": [282, 283], "manipul": 282, "novemb": 283, "2023": 283, "abil": 283, "renam": 283, "multirate_tap": 283, "polyphase_matrix": 283, "matt": 283, "hostett": 283, "move": 283, "model": 283, "replac": 283, "pylint": 283, "black": 283, "improv": 283, "septemb": 283, "sensibl": 283, "august": 283, "27": 283, "without": 283, "superflu": 283, "translat": 283, "fix": [283, 284], "juli": 283, "firinterpol": 283, "impair": 283, "fpsl": 283, "helper": 283, "synthes": 283, "semant": 284, "major": 284, "minor": 284, "patch": 284, "introduc": 284, "featur": 284, "backward": 284, "compat": 284, "bug": 284, "There": 284, "guarante": 284, "them": 284}, "objects": {"": [[3, 0, 0, 1, "sdr", ""]], "sdr": [[9, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [26, 1, 1, "", "Decimator", "Implements a polyphase decimating FIR filter."], [37, 1, 1, "", "Differentiator", "Implements a differentiator FIR filter."], [39, 1, 1, "", "EnergyDetector", "Implements an energy detector."], [44, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [51, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [69, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [76, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [94, 1, 1, "", "Integrator", "Implements an integrator IIR filter."], [96, 1, 1, "", "Interpolator", "Implements a polyphase interpolating FIR filter."], [107, 1, 1, "", "LinearModulation", "Implements linear phase/amplitude modulation with arbitrary symbol mapping."], [125, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [134, 1, 1, "", "MSK", "Implements minimum-shift keying (MSK) modulation and demodulation."], [136, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [144, 1, 1, "", "OQPSK", "Implements offset quadrature phase-shift keying (OQPSK) modulation and demodulation."], [148, 1, 1, "", "PED", "Implements a heuristic phase error detector (PED)."], [154, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [162, 1, 1, "", "PiMPSK", "Implements $pi/M$ phase-shift keying ($pi/M$ PSK) modulation and demodulation."], [164, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [165, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [166, 1, 1, "", "ReplicaCorrelator", "Implements an clairvoyant replica-correlator detector."], [171, 1, 1, "", "Resampler", "Implements a polyphase rational resampling FIR filter."], [184, 5, 1, "", "albersheim", "Estimates the minimum required single-sample SNR, given $N_{NC}$ non-coherent combinations, to achieve a probability of detection $P_D$ and probability of false alarm $P_{FA}$. This function implements Albersheim's equation."], [185, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [186, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [187, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [188, 5, 1, "", "barker", "Returns the Barker code/sequence of length $N$."], [189, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [190, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [191, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [192, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [193, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [194, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [195, 5, 1, "", "db", "Converts from linear units to decibels."], [196, 5, 1, "", "design_bandpass_fir", "Designs a bandpass FIR filter impulse response $h[n]$ using the window method."], [197, 5, 1, "", "design_bandstop_fir", "Designs a bandstop FIR filter impulse response $h[n]$ using the window method."], [198, 5, 1, "", "design_frac_delay_fir", "Designs a fractional delay FIR filter impulse response $h[n]$ using the Kaiser window method."], [199, 5, 1, "", "design_highpass_fir", "Designs a highpass FIR filter impulse response $h[n]$ using the window method."], [200, 5, 1, "", "design_lowpass_fir", "Designs a lowpass FIR filter impulse response $h[n]$ using the window method."], [201, 5, 1, "", "design_multirate_fir", "Designs a multirate FIR filter impulse response $h[n]$ using the Kaiser window method."], [202, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [203, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [204, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [205, 5, 1, "", "downsample", "Downsamples the time-domain signal $x[n]$ by the factor $r$."], [206, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [207, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [208, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [209, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [210, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [211, 5, 1, "", "euclidean", "Measures the Euclidean distance between two signals $x[n]$ and $y[n]$."], [212, 5, 1, "", "evm", "Calculates the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [213, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [214, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [215, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [216, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [217, 5, 1, "", "hadamard", "Returns the Hadamard code/sequence of length $N$."], [218, 5, 1, "", "half_sine", "Returns a half-sine pulse shape."], [219, 5, 1, "", "hamming", "Measures the Hamming distance between two signals $x[n]$ and $y[n]$."], [220, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [221, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [222, 5, 1, "", "linear", "Converts from decibels to linear units."], [223, 5, 1, "", "mix", "Mixes the time-domain signal $x[n]$ with a complex exponential or real sinusoid."], [224, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [225, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [226, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [227, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [228, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [229, 5, 1, "", "percent", "Converts from a ratio to a percentage."], [251, 5, 1, "", "polyphase_decompose", "Decomposes the FIR filter taps $h_i$ into the polyphase matrix $H_{i, j}$ with $B$ phases."], [252, 5, 1, "", "ppb", "Converts from a ratio to parts per billion (ppb)."], [253, 5, 1, "", "ppm", "Converts from a ratio to parts per million (ppm)."], [254, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [255, 5, 1, "", "rectangular", "Returns a rectangular pulse shape."], [256, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [257, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [258, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [259, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [260, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [261, 5, 1, "", "to_complex_bb", "Converts the real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$ to a complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c} = f_{s,r}/2$."], [262, 5, 1, "", "to_real_pb", "Converts the complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$ to a real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r} = 2f_{s,c}$."], [263, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [264, 5, 1, "", "upsample", "Upsamples the time-domain signal $x[n]$ by the factor $r$."], [265, 5, 1, "", "walsh", "Returns the Walsh code/sequence of length $N$."], [266, 5, 1, "", "wavelength", "Calculates the wavelength $lambda$ of an electromagnetic wave with frequency $f$."], [267, 5, 1, "", "zadoff_chu", "Returns the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.ClosedLoopPLL": [[10, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [11, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [12, 2, 1, "", "K0", "The NCO gain $K_0$."], [13, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [14, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [15, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [16, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [17, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [18, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [19, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [20, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [21, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [22, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [23, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [24, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [25, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[16, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [16, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [16, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [16, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [16, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[17, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[19, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[22, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.Decimator": [[27, 3, 1, "", "__call__", "Filters and decimates the input signal $x[n]$ with the polyphase FIR filter."], [28, 3, 1, "", "__init__", "Creates a polyphase FIR decimating filter."], [29, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [30, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [31, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [32, 2, 1, "", "method", "The method used to design the multirate filter."], [33, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [34, 2, 1, "", "rate", "The decimation rate $r$."], [35, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [36, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Decimator.__call__": [[27, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [27, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Decimator.__init__": [[28, 4, 2, "p-rate", "rate", "The decimation rate $r$."], [28, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [28, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.Differentiator": [[38, 3, 1, "", "__init__", "Creates a differentiator FIR filter."]], "sdr.Differentiator.__init__": [[38, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.EnergyDetector": [[40, 3, 1, "", "p_d", "Computes the probability of detection $P_D$."], [41, 3, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [42, 3, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [43, 3, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.EnergyDetector.p_d": [[40, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [40, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [40, 4, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.p_fa": [[41, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [41, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [41, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [41, 4, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.EnergyDetector.roc": [[42, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [42, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [42, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."], [42, 4, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.threshold": [[43, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [43, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [43, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [43, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.ErrorRate": [[45, 3, 1, "", "__init__", "Creates a new error rate tabulation object."], [46, 3, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [47, 3, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [48, 3, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [49, 3, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [50, 3, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[46, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [46, 4, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [46, 4, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[47, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[48, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[50, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[52, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the FIR filter."], [53, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [54, 3, 1, "", "__len__", "Returns the filter length $N + 1$."], [55, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [56, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [57, 2, 1, "", "delay", "The delay of the FIR filter $d = lfloor frac{N + 1}{2} rfloor$ in samples."], [58, 3, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [59, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the FIR filter."], [60, 3, 1, "", "group_delay", "Returns the group delay $tau_g(omega)$ of the FIR filter."], [61, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [62, 2, 1, "", "order", "The order of the FIR filter $N$."], [63, 3, 1, "", "phase_delay", "Returns the phase delay $tau_{phi}(omega)$ of the FIR filter."], [64, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [65, 2, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [66, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [67, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [68, 2, 1, "", "taps", "The feedforward taps $h_i$ for $i = 0,...,N$."]], "sdr.FIR.__call__": [[52, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [52, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.FIR.__init__": [[53, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$ for $i = 0,...N$."], [53, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FIR.frequency_response": [[59, 4, 2, "p-decades", "decades", "Only used if freqs is an integer."], [59, 4, 2, "p-freqs", "freqs", "The frequency specification."], [59, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [59, 4, 2, "p-whole", "whole", "Only used if freqs is an integer."]], "sdr.FIR.group_delay": [[60, 4, 2, "p-N", "N", "The number of samples in the group delay."], [60, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[61, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.phase_delay": [[63, 4, 2, "p-N", "N", "The number of samples in the phase delay."], [63, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.step_response": [[66, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FarrowResampler": [[70, 3, 1, "", "__call__", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [71, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [72, 2, 1, "", "order", "The order of the filter."], [73, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [74, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [75, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__call__": [[70, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [70, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.__init__": [[71, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FarrowResampler.reset": [[73, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[77, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [78, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the IIR filter."], [79, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [80, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [81, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [82, 2, 1, "", "a_taps", "The feedback taps $a_j$ for $j = 0,...,N$."], [83, 2, 1, "", "b_taps", "The feedforward taps $b_i$ for $i = 0,...,M$."], [84, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the IIR filter."], [85, 2, 1, "", "gain", "The gain of the IIR filter."], [86, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [87, 2, 1, "", "order", "The order of the IIR filter $N$."], [88, 2, 1, "", "poles", "The poles of the IIR filter."], [89, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [90, 2, 1, "", "state", "The filter state."], [91, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [92, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [93, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[77, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [77, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [77, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."], [77, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__call__": [[78, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.IIR.__init__": [[79, 4, 2, "p-a", "a", "The feedback coefficients $a_j$ for $j = 0,...,N$."], [79, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$ for $i = 0,...,M$."], [79, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.IIR.frequency_response": [[84, 4, 2, "p-decades", "decades", "Only used if freqs is an integer."], [84, 4, 2, "p-freqs", "freqs", "The frequency specification."], [84, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [84, 4, 2, "p-whole", "whole", "Only used if freqs is an integer."]], "sdr.IIR.impulse_response": [[86, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[91, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.Integrator": [[95, 3, 1, "", "__init__", "Creates an integrating IIR filter."]], "sdr.Integrator.__init__": [[95, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.Interpolator": [[97, 3, 1, "", "__call__", "Interpolates and filters the input signal $x[n]$ with the polyphase FIR filter."], [98, 3, 1, "", "__init__", "Creates a polyphase FIR interpolating filter."], [99, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [100, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [101, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [102, 2, 1, "", "method", "The method used to design the multirate filter."], [103, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [104, 2, 1, "", "rate", "The interpolation rate $r$."], [105, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [106, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Interpolator.__call__": [[97, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [97, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Interpolator.__init__": [[98, 4, 2, "p-rate", "rate", "The interpolation rate $r$."], [98, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [98, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.LinearModulation": [[108, 3, 1, "", "__init__", "Creates a new linear phase/amplitude modulation object."], [109, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [110, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [111, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [112, 2, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [113, 3, 1, "", "decide_symbols", "Converts the received complex symbols $tilde{a}[k]$ into decimal symbol decisions $hat{s}[k]$ and complex symbol decisions $hat{a}[k]$ using maximum-likelihood estimation (MLE)."], [114, 3, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples $tilde{x}[n]$ into decimal symbol decisions $hat{s}[k]$ using matched filtering and maximum-likelihood estimation."], [115, 3, 1, "", "map_symbols", "Converts the decimal symbols $s[k]$ to complex symbols $a[k]$."], [116, 3, 1, "", "modulate", "Modulates the decimal symbols $s[k]$ into pulse-shaped complex samples $x[n]$."], [117, 2, 1, "", "order", "The modulation order $M = 2^k$."], [118, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [119, 2, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [120, 2, 1, "", "rx_filter", "The receive decimating matched filter. The filter coefficients are matched to the pulse shape $h[-n]^*$."], [121, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [122, 2, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [123, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."], [124, 2, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter. The filter coefficients are the pulse shape $h[n]$."]], "sdr.LinearModulation.__init__": [[108, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [108, 4, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees to apply to symbol_map."], [108, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [108, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [108, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [108, 4, 2, "p-symbol_map", "symbol_map", "The symbol mapping ${0, dots, M-1} mapsto mathbb{C}$. An $M$-length array whose indices are decimal symbols $s[k]$ and whose values are complex symbols $a[k]$, where $M$ is the modulation order."]], "sdr.LinearModulation.ber": [[111, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.LinearModulation.decide_symbols": [[113, 4, 2, "p-a_tilde", "a_tilde", "The received complex symbols $tilde{a}[k]$."]], "sdr.LinearModulation.demodulate": [[114, 4, 2, "p-x_tilde", "x_tilde", "The received pulse-shaped complex samples $tilde{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.LinearModulation.map_symbols": [[115, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to map, $0$ to $M-1$."]], "sdr.LinearModulation.modulate": [[116, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.LinearModulation.ser": [[121, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.LoopFilter": [[126, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [127, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [128, 3, 1, "", "__call__", "Filters the input signal $x[n]$."], [129, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [130, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [131, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [132, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [133, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__call__": [[128, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.LoopFilter.__init__": [[129, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [129, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [129, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [129, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.MSK": [[135, 3, 1, "", "__init__", "Creates a new MSK object."]], "sdr.MSK.__init__": [[135, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [135, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [135, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.NCO": [[137, 2, 1, "", "K0", "(Settable) The NCO gain $K_0$."], [138, 3, 1, "", "__call__", "Steps the NCO with variable frequency and/or phase signals."], [139, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [140, 2, 1, "", "increment", "(Settable) The constant phase accumulation $omega$ of the NCO in radians/sample."], [141, 2, 1, "", "offset", "(Settable) The absolute phase offset $theta$ of the NCO in radians."], [142, 3, 1, "", "reset", "Resets the NCO."], [143, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__call__": [[138, 4, 2, "p-freq", "freq", "The variable frequency signal $f[n]$ in radians/sample. This input signal varies the per-sample phase increment of the NCO. If None, the signal is all zeros."], [138, 4, 2, "p-output", "output", "The format of the output signal $y[n]$. Options are the accumulated phase, sine, cosine, or complex exponential."], [138, 4, 2, "p-phase", "phase", "The variable phase signal $p[n]$ in radians. This input signal varies the per-sample phase offset of the NCO. If None, the signal is all zeros."]], "sdr.NCO.__init__": [[139, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [139, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [139, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.NCO.step": [[143, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.OQPSK": [[145, 3, 1, "", "__init__", "Creates a new OQPSK object."], [146, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [147, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."]], "sdr.OQPSK.__init__": [[145, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [145, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [145, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [145, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [145, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [145, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PED": [[149, 3, 1, "", "__call__", "Detects the phase error."], [150, 3, 1, "", "__init__", "Initializes the PED."], [151, 3, 1, "", "data_aided_error", "Measures the average phase error of the data-aided PED using the specified modulation scheme."], [152, 3, 1, "", "decision_directed_error", "Measures the average phase error of the decision-directed PED using the specified modulation scheme."], [153, 2, 1, "", "gain", "The gain of the phase error detector $K_p$."]], "sdr.PED.__call__": [[149, 4, 2, "p-received", "received", "The received complex symbols $tilde{a}[k]$."], [149, 4, 2, "p-reference", "reference", "The reference complex symbols, either the known transmitted complex symbols $a[k]$ or the complex symbols decisions $hat{a}[k]$."]], "sdr.PED.data_aided_error": [[151, 4, 2, "p-modem", "modem", "The linear modulation scheme."], [151, 4, 2, "p-n_points", "n_points", "The number of points to use to measure the phase error."]], "sdr.PED.decision_directed_error": [[152, 4, 2, "p-modem", "modem", "The linear modulation scheme."], [152, 4, 2, "p-n_points", "n_points", "The number of points to use to measure the phase error."]], "sdr.PSK": [[155, 3, 1, "", "__init__", "Creates a new PSK object."], [156, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [157, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [158, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [159, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [160, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [161, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[155, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [155, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [155, 4, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [155, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [155, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [155, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [155, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[158, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [158, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.ser": [[160, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [160, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.PiMPSK": [[163, 3, 1, "", "__init__", "Creates a new $pi/M$ PSK object."]], "sdr.PiMPSK.__init__": [[163, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [163, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [163, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [163, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [163, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [163, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [163, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.Q": [[164, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[165, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.ReplicaCorrelator": [[167, 3, 1, "", "p_d", "Computes the probability of detection $P_D$."], [168, 3, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [169, 3, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [170, 3, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.ReplicaCorrelator.p_d": [[167, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [167, 4, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [167, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."]], "sdr.ReplicaCorrelator.p_fa": [[168, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [168, 4, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [168, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [168, 4, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.ReplicaCorrelator.roc": [[169, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [169, 4, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [169, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."]], "sdr.ReplicaCorrelator.threshold": [[170, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [170, 4, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [170, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [170, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.Resampler": [[172, 3, 1, "", "__call__", "Resamples and filters the input signal $x[n]$ with the polyphase FIR filter."], [173, 3, 1, "", "__init__", "Creates a polyphase FIR rational resampling filter."], [174, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [175, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [176, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [177, 2, 1, "", "down", "The decimation rate $Q$."], [178, 2, 1, "", "method", "The method used to design the multirate filter."], [179, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [180, 2, 1, "", "rate", "The resampling rate $P/Q$."], [181, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [182, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."], [183, 2, 1, "", "up", "The interpolation rate $P$."]], "sdr.Resampler.__init__": [[173, 4, 2, "p-down", "down", "The decimation rate $Q$."], [173, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [173, 4, 2, "p-taps", "taps", "The multirate filter design specification."], [173, 4, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.albersheim": [[184, 4, 2, "p-N_nc", "N_nc", "The number of non-coherent combinations $N_{NC} ge 1$."], [184, 4, 2, "p-p_d", "p_d", "The desired probability of detection $P_D$ in $(0, 1)$."], [184, 4, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{FA}$ in $(0, 1)$."]], "sdr.average_power": [[185, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the average power. The default is None, which computes the average power of the entire array."], [185, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [185, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[186, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [186, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [186, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [186, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[187, 4, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [187, 4, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.barker": [[188, 4, 2, "p-length", "length", "The length $N$ of the Barker code/sequence."], [188, 4, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[189, 4, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [189, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [189, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[190, 4, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[191, 4, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[192, 4, 2, "p-p", "p", "The probability $p$ of a bit flip."], [192, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [192, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[193, 4, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[194, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.db": [[195, 4, 2, "p-type", "type", "The type of input value or signal."], [195, 4, 2, "p-x", "x", "The input value or signal."]], "sdr.design_bandpass_fir": [[196, 4, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [196, 4, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [196, 4, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [196, 4, 2, "p-order", "order", "The filter order $N$. Must be even."], [196, 4, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_bandstop_fir": [[197, 4, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [197, 4, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [197, 4, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [197, 4, 2, "p-order", "order", "The filter order $N$. Must be even."], [197, 4, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_frac_delay_fir": [[198, 4, 2, "p-delay", "delay", "The fractional delay $0 le Delta n le 1$."], [198, 4, 2, "p-length", "length", "The filter length $L$. Filters with even length have best performance. Filters with odd length are equivalent to an even-length filter with an appended zero."]], "sdr.design_highpass_fir": [[199, 4, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [199, 4, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [199, 4, 2, "p-order", "order", "The filter order $N$. Must be even."], [199, 4, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_lowpass_fir": [[200, 4, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [200, 4, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [200, 4, 2, "p-order", "order", "The filter order $N$. Must be even."], [200, 4, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_multirate_fir": [[201, 4, 2, "p-A_stop", "A_stop", "The stopband attenuation $A_{text{stop}}$ in dB."], [201, 4, 2, "p-down", "down", "The decimation rate $Q$."], [201, 4, 2, "p-half_length", "half_length", "The half-length of the polyphase filters."], [201, 4, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.diff_decode": [[202, 4, 2, "p-y", "y", "The input encoded data $y[k]$."], [202, 4, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[203, 4, 2, "p-x", "x", "The input uncoded data $x[k]$."], [203, 4, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[204, 4, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [204, 4, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [204, 4, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [204, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [204, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.downsample": [[205, 4, 2, "p-rate", "rate", "The downsampling factor $r$."], [205, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.ebn0_to_esn0": [[206, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [206, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [206, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[207, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [207, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [207, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [207, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[208, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the energy. The default is None, which computes the energy of the entire array."], [208, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [208, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[209, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [209, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [209, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[210, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [210, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.euclidean": [[211, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the distance. The default is None, which computes the distance across the entire array."], [211, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [211, 4, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.evm": [[212, 4, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [212, 4, 2, "p-output", "output", "The output type of the EVM calculation."], [212, 4, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [212, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.frequency_offset": [[213, 4, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [213, 4, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [213, 4, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [213, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [213, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[214, 4, 2, "p-distance", "distance", "The distance $d$ in meters between the transmitter and receiver."], [214, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[215, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [215, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [215, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [215, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[216, 4, 2, "p-n", "n", "The length of the Gray code."]], "sdr.hadamard": [[217, 4, 2, "p-index", "index", "The index $i$ of the Hadamard code."], [217, 4, 2, "p-length", "length", "The length $N$ of the Hadamard code/sequence. Must be a power of 2."], [217, 4, 2, "p-output", "output", "The output format of the Hadamard code/sequence."]], "sdr.half_sine": [[218, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [218, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [218, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.hamming": [[219, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the distance. The default is None, which computes the distance across the entire array."], [219, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [219, 4, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.hexdump": [[220, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [220, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[221, 4, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [221, 4, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [221, 4, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.linear": [[222, 4, 2, "p-type", "type", "The type of output value or signal."], [222, 4, 2, "p-x", "x", "The input value or signal in dB."]], "sdr.mix": [[223, 4, 2, "p-complex", "complex", "Indicates whether to mix by a complex exponential or real sinusoid."], [223, 4, 2, "p-freq", "freq", "The frequency $f$ of the sinusoid in Hz (or 1/samples if sample_rate=1). The frequency must satisfy $-f_s/2 le f le f_s/2$."], [223, 4, 2, "p-phase", "phase", "The phase $phi$ of the sinusoid in degrees."], [223, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal."], [223, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.pack": [[224, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [224, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [224, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[225, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the PAPR. The default is None, which computes the PAPR of the entire array."], [225, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[226, 4, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [226, 4, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [226, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[227, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the peak power. The default is None, which computes the peak power of the entire array."], [227, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [227, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[228, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [228, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.percent": [[229, 4, 2, "p-x", "x", "The input ratio."]], "sdr.plot": [[230, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [231, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [232, 5, 1, "", "eye", "Plots the eye diagram of the baseband modulated signal $x[n]$."], [233, 5, 1, "", "filter", "Plots the magnitude response $|H(omega)|^2$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [234, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [235, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [236, 5, 1, "", "magnitude_response", "Plots the magnitude response $|H(omega)|^2$ of the filter."], [237, 5, 1, "", "p_d", "Plots the probability of detection $P_D$ as a function of received SNR or ENR."], [238, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [239, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [240, 5, 1, "", "phase_response", "Plots the phase response $angle H(omega)$ of the filter."], [241, 5, 1, "", "phase_tree", "Plots the phase tree of a continuous-phase modulated (CPM) signal signal $x[n]$."], [242, 5, 1, "", "raster", "Plots a raster of the time-domain signal $x[n]$."], [243, 5, 1, "", "roc", "Plots the receiver operating characteristic (ROC) curve as a function of $P_{FA}$."], [244, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [245, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [246, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [247, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [248, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [249, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [250, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[230, 4, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [230, 4, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."], [230, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."]], "sdr.plot.constellation": [[231, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [231, 4, 2, "p-kwargs", "kwargs", "If heatmap=False, additional keyword arguments to pass to matplotlib.pyplot.scatter(). The following keyword arguments are set by default. The defaults may be overwritten."], [231, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [231, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.eye": [[232, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [232, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [232, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [232, 4, 2, "p-span", "span", "The number of symbols per raster."], [232, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [232, 4, 2, "p-x", "x", "The baseband modulated signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved."]], "sdr.plot.filter": [[233, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [233, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [233, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [233, 4, 2, "p-filter", "filter", "The filter definition."], [233, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [233, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[234, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [234, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [234, 4, 2, "p-filter", "filter", "The filter definition."], [234, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [234, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [234, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.impulse_response": [[235, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [235, 4, 2, "p-filter", "filter", "The filter definition."], [235, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.magnitude_response": [[236, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [236, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [236, 4, 2, "p-filter", "filter", "The filter definition."], [236, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [236, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [236, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."], [236, 4, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a linear or logarithmic magnitude response."]], "sdr.plot.p_d": [[237, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [237, 4, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [237, 4, 2, "p-x", "x", "The SNR or ENR in dB."], [237, 4, 2, "p-x_label", "x_label", "The x-axis label to use."]], "sdr.plot.periodogram": [[238, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [238, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [238, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [238, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [238, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [238, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [238, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [238, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [238, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [238, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."], [238, 4, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a linear or logarithmic power spectral density."]], "sdr.plot.phase_delay": [[239, 4, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [239, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [239, 4, 2, "p-filter", "filter", "The filter definition."], [239, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [239, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [239, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.phase_response": [[240, 4, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [240, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [240, 4, 2, "p-filter", "filter", "The filter definition."], [240, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [240, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [240, 4, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [240, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.phase_tree": [[241, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [241, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [241, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [241, 4, 2, "p-span", "span", "The number of symbols per raster."], [241, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [241, 4, 2, "p-x", "x", "The baseband CPM signal $x[n]$."]], "sdr.plot.raster": [[242, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [242, 4, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\"."], [242, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.collections.LineCollection. The following keyword arguments are set by default. The defaults may be overwritten."], [242, 4, 2, "p-length", "length", "The length of each raster in samples. This must be provided if x is 1D."], [242, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [242, 4, 2, "p-stride", "stride", "The stride between each raster in samples. If None, the stride is set to length."], [242, 4, 2, "p-x", "x", "The time-domain signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved. If x is 1D, the rastering is determined by length and stride. If x is 2D, the rows correspond to each raster."]], "sdr.plot.roc": [[243, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to the plotting function defined by type."], [243, 4, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [243, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [243, 4, 2, "p-type", "type", "The type of plot to generate."]], "sdr.plot.ser": [[244, 4, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [244, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."], [244, 4, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.spectrogram": [[245, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [245, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [245, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.pcolormesh(). The following keyword arguments are set by default. The defaults may be overwritten."], [245, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [245, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [245, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [245, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [245, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [245, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[246, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [246, 4, 2, "p-filter", "filter", "The filter definition."], [246, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.symbol_map": [[247, 4, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [247, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot(). The following keyword arguments are set by default. The defaults may be overwritten."], [247, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [247, 4, 2, "p-modulation", "modulation", "The linear modulation or symbol map ${0, dots, M-1} mapsto mathbb{C}$."]], "sdr.plot.time_domain": [[248, 4, 2, "p-centered", "centered", "Indicates whether to center the x-axis about 0. This argument is mutually exclusive with offset."], [248, 4, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal. If \"color\", the real and imaginary parts will have different colors based on the current Matplotlib color cycle. If \"line\", the real part will have a solid line and the imaginary part will have a dashed line, and both lines will share the same color."], [248, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [248, 4, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. The units of the offset are $1/f_s$. This argument is mutually exclusive with centered."], [248, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [248, 4, 2, "p-t", "t", "The time signal $t[n]$. The units are assumed to be $1/f_s$."], [248, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[250, 4, 2, "p-filter", "filter", "The filter definition."], [250, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.polyphase_decompose": [[251, 4, 2, "p-phases", "phases", "The number of phases $B$."], [251, 4, 2, "p-taps", "taps", "The multirate FIR filter taps $h_i$."]], "sdr.ppb": [[252, 4, 2, "p-x", "x", "The input ratio."]], "sdr.ppm": [[253, 4, 2, "p-x", "x", "The input ratio."]], "sdr.raised_cosine": [[254, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [254, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [254, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [254, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rectangular": [[255, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [255, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [255, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[256, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [256, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[257, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [257, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [257, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [257, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[258, 4, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [258, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.snr_to_ebn0": [[259, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [259, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [259, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [259, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[260, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [260, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.to_complex_bb": [[261, 4, 2, "p-x_r", "x_r", "The real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$. If the length is odd, one zero is appended to the end."]], "sdr.to_real_pb": [[262, 4, 2, "p-x_c", "x_c", "The complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$."]], "sdr.unpack": [[263, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [263, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [263, 4, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.upsample": [[264, 4, 2, "p-rate", "rate", "The upsampling factor $r$."], [264, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.walsh": [[265, 4, 2, "p-index", "index", "The index $i$ of the Walsh code. Indicates how many transitions there are in the code."], [265, 4, 2, "p-length", "length", "The length $N$ of the Walsh code/sequence. Must be a power of 2."], [265, 4, 2, "p-output", "output", "The output format of the Walsh code/sequence."]], "sdr.wavelength": [[266, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.zadoff_chu": [[267, 4, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [267, 4, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence. The root must be relatively prime to the length, i.e., $gcd(u, N) = 1$."], [267, 4, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence. When $q ne 0$, the returned sequence is a cyclic shift of the root-$u$ Zadoff-Chu sequence."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"convers": 0, "decibel": 0, "ratio": 0, "from": [0, 272, 273, 274], "e_b": 0, "n_0": 0, "e_": 0, "": [0, 276, 277], "n": [0, 275, 276, 277], "data": 1, "manipul": [1, 3], "detect": [2, 7], "detector": [2, 270], "theoret": 2, "limit": 2, "digit": [3, 277], "signal": [3, 269, 275, 278], "process": 3, "fir": [3, 276], "filter": [3, 7, 276, 277, 279], "iir": [3, 277], "multir": 3, "arbitrari": [3, 275], "resampl": [3, 275], "correl": 3, "link": 4, "budget": 4, "channel": [4, 269], "capac": 4, "path": 4, "loss": 4, "antenna": 4, "measur": 5, "energi": 5, "power": [5, 278], "voltag": 5, "distanc": 5, "modul": [5, 6, 7], "linear": 6, "continu": 6, "phase": [6, 270, 279, 280], "orthogon": 6, "puls": [6, 278, 281], "shape": [6, 278, 281], "symbol": [6, 280], "map": [6, 280], "encod": 6, "plot": [7, 278], "configur": [7, 272, 274], "time": [7, 278, 279], "domain": [7, 278, 279], "frequenc": [7, 276, 277, 278, 279], "spectral": 7, "estim": 7, "analysi": 7, "probabl": 8, "note": [9, 107, 134, 144, 154, 162, 214, 238, 245], "constructor": [9, 26, 37, 44, 51, 69, 76, 94, 96, 107, 125, 134, 136, 144, 148, 154, 162, 171], "method": [9, 26, 37, 39, 44, 51, 69, 76, 94, 96, 107, 125, 134, 136, 144, 148, 154, 162, 166, 171], "properti": [9, 26, 37, 51, 69, 76, 94, 96, 107, 125, 134, 136, 144, 148, 154, 162, 171], "special": [26, 37, 51, 69, 76, 94, 96, 125, 136, 148, 171], "string": [26, 37, 51, 76, 94, 96, 107, 134, 144, 154, 162, 171], "represent": [26, 37, 51, 76, 94, 96, 107, 134, 144, 154, 162, 171], "stream": [26, 37, 51, 76, 94, 96, 171], "mode": [26, 37, 51, 76, 94, 96, 171], "onli": [26, 37, 51, 76, 94, 96, 171], "see": [44, 46, 59, 60, 61, 63, 66, 84, 86, 91, 108, 111, 121, 135, 145, 155, 158, 160, 163, 164, 165, 194, 225, 264], "also": [44, 46, 59, 60, 61, 63, 66, 84, 86, 91, 108, 111, 121, 135, 145, 155, 158, 160, 163, 164, 165, 194, 225, 264], "warn": [205, 264], "sequenc": 268, "simul": 269, "model": 269, "impair": 269, "synchron": 270, "error": [270, 280], "document": 271, "instal": [271, 272, 273, 274, 282], "build": 271, "doc": 271, "serv": 271, "format": 272, "run": [272, 274], "linter": 272, "formatt": 272, "pre": 272, "commit": 272, "v": [272, 274], "code": [272, 274], "pypi": 273, "github": 273, "edit": 273, "local": 273, "folder": 273, "dev": 273, "depend": 273, "unit": 274, "test": 274, "command": 274, "line": 274, "farrow": 275, "construct": 275, "an": [275, 276, 277], "input": 275, "x": 275, "t_": 275, "rate": [275, 280], "r": 275, "y": 275, "frac": 275, "upsampl": 275, "integ": 275, "downsampl": 275, "irrat": 275, "creat": [276, 277], "examin": [276, 277, 278], "impuls": [276, 277], "respons": [276, 277, 279], "h": [276, 277], "step": [276, 277, 279], "omega": [276, 277], "group": [276, 277], "delai": [276, 277], "tau_g": [276, 277], "fulli": [276, 277], "analyz": [276, 277, 279], "zero": 277, "pole": 277, "stabil": 277, "peak": 278, "averag": 278, "qpsk": [278, 280], "variou": 278, "across": [278, 279], "excess": 278, "bandwidth": 278, "lock": 279, "loop": 279, "design": 279, "proport": 279, "plu": 279, "integr": 279, "ppi": 279, "implement": 279, "pll": 279, "close": 279, "perform": 279, "compar": 279, "zeta": 279, "b_n": 279, "t": 279, "shift": 280, "kei": 280, "constel": 280, "bpsk": 280, "8": [280, 283], "psk": 280, "16": 280, "curv": 280, "bit": 280, "rais": 281, "cosin": 281, "squar": 281, "root": 281, "gaussian": 281, "sdr": 282, "featur": 282, "v0": 283, "0": 283, "10": 283, "chang": 283, "contributor": 283, "9": 283, "7": 283, "6": 283, "5": 283, "4": 283, "3": 283, "2": 283, "1": 283, "version": 284, "alpha": 284, "releas": 284, "beta": 284}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Conversions": [[0, "conversions"]], "Decibels": [[0, "decibels"]], "Ratios": [[0, "ratios"]], "From E_b/N_0": [[0, "from-e-b-n-0"]], "From E_s/N_0": [[0, "from-e-s-n-0"]], "From S/N": [[0, "from-s-n"]], "Data manipulation": [[1, "data-manipulation"]], "Detection": [[2, "detection"], [7, "detection"]], "Detectors": [[2, "detectors"]], "Theoretical limits": [[2, "theoretical-limits"]], "Digital signal processing": [[3, "digital-signal-processing"]], "FIR filtering": [[3, "fir-filtering"]], "IIR filtering": [[3, "iir-filtering"]], "Multirate filtering": [[3, "multirate-filtering"]], "Arbitrary resampling": [[3, "arbitrary-resampling"]], "Correlation": [[3, "correlation"]], "Signal manipulation": [[3, "signal-manipulation"]], "Link budgets": [[4, "link-budgets"]], "Channel capacity": [[4, "channel-capacity"]], "Path losses": [[4, "path-losses"]], "Antennas": [[4, "antennas"]], "Measurement": [[5, "measurement"]], "Energy": [[5, "energy"]], "Power": [[5, "power"]], "Voltage": [[5, "voltage"]], "Distance": [[5, "distance"]], "Modulation": [[5, "modulation"], [6, "modulation"], [7, "modulation"]], "Linear modulations": [[6, "linear-modulations"]], "Continuous-phase modulations": [[6, "continuous-phase-modulations"]], "Orthogonal modulations": [[6, "orthogonal-modulations"]], "Pulse shaping": [[6, "pulse-shaping"]], "Symbol mapping": [[6, "symbol-mapping"], [280, "symbol-mapping"]], "Symbol encoding": [[6, "symbol-encoding"]], "Plotting": [[7, "plotting"]], "Configuration": [[7, "configuration"], [272, "configuration"], [274, "configuration"]], "Time-domain": [[7, "time-domain"]], "Frequency-domain": [[7, "frequency-domain"]], "Spectral estimation": [[7, "spectral-estimation"]], "Filter analysis": [[7, "filter-analysis"]], "Probability": [[8, "probability"]], "Note": [[9, null], [107, null], [134, null], [144, null], [154, null], [162, null], [214, null], [238, null], [245, null]], "Constructors": [[9, "constructors"], [26, "constructors"], [37, "constructors"], [44, "constructors"], [51, "constructors"], [69, "constructors"], [76, "constructors"], [94, "constructors"], [96, "constructors"], [107, "constructors"], [125, "constructors"], [134, "constructors"], [136, "constructors"], [144, "constructors"], [148, "constructors"], [154, "constructors"], [162, "constructors"], [171, "constructors"]], "Methods": [[9, "methods"], [26, "methods"], [37, "methods"], [39, "methods"], [44, "methods"], [51, "methods"], [69, "methods"], [76, "methods"], [94, "methods"], [96, "methods"], [107, "methods"], [125, "methods"], [134, "methods"], [136, "methods"], [144, "methods"], [148, "methods"], [154, "methods"], [162, "methods"], [166, "methods"], [171, "methods"]], "Properties": [[9, "properties"], [26, "properties"], [37, "properties"], [51, "properties"], [69, "properties"], [76, "properties"], [94, "properties"], [96, "properties"], [107, "properties"], [125, "properties"], [134, "properties"], [136, "properties"], [144, "properties"], [148, "properties"], [154, "properties"], [162, "properties"], [171, "properties"]], "Special methods": [[26, "special-methods"], [37, "special-methods"], [51, "special-methods"], [69, "special-methods"], [76, "special-methods"], [94, "special-methods"], [96, "special-methods"], [125, "special-methods"], [136, "special-methods"], [148, "special-methods"], [171, "special-methods"]], "String representation": [[26, "string-representation"], [37, "string-representation"], [51, "string-representation"], [76, "string-representation"], [94, "string-representation"], [96, "string-representation"], [107, "string-representation"], [134, "string-representation"], [144, "string-representation"], [154, "string-representation"], [162, "string-representation"], [171, "string-representation"]], "Streaming mode only": [[26, "streaming-mode-only"], [37, "streaming-mode-only"], [51, "streaming-mode-only"], [76, "streaming-mode-only"], [94, "streaming-mode-only"], [96, "streaming-mode-only"], [171, "streaming-mode-only"]], "See also": [[44, null], [46, null], [59, null], [60, null], [61, null], [63, null], [66, null], [84, null], [86, null], [91, null], [108, null], [111, null], [121, null], [135, null], [145, null], [155, null], [158, null], [160, null], [163, null], [164, null], [165, null], [194, null], [225, null], [264, null]], "Warning": [[205, null], [264, null]], "Sequences": [[268, "sequences"]], "Simulation": [[269, "simulation"]], "Channel models": [[269, "channel-models"]], "Signal impairments": [[269, "signal-impairments"]], "Synchronization": [[270, "synchronization"]], "Phase error detectors": [[270, "phase-error-detectors"]], "Documentation": [[271, "documentation"]], "Install": [[271, "install"], [272, "install"], [274, "install"]], "Build the docs": [[271, "build-the-docs"]], "Serve the docs": [[271, "serve-the-docs"]], "Formatting": [[272, "formatting"]], "Run the linter": [[272, "run-the-linter"]], "Run the formatter": [[272, "run-the-formatter"]], "Pre-commit": [[272, "pre-commit"]], "Run from VS Code": [[272, "run-from-vs-code"], [274, "run-from-vs-code"]], "Installation": [[273, "installation"], [282, "installation"]], "Install from PyPI": [[273, "install-from-pypi"]], "Install from GitHub": [[273, "install-from-github"]], "Editable install from local folder": [[273, "editable-install-from-local-folder"]], "Install the dev dependencies": [[273, "install-the-dev-dependencies"]], "Unit Tests": [[274, "unit-tests"]], "Run from the command line": [[274, "run-from-the-command-line"]], "Farrow arbitrary resampler": [[275, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[275, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[275, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[275, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[275, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[275, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[275, "downsample-by-an-irrational-rate"]], "FIR filters": [[276, "fir-filters"]], "Create an FIR filter": [[276, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[276, "examine-the-impulse-response-h-n"], [277, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[276, "examine-the-step-response-s-n"], [277, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[276, "examine-the-frequency-response-h-omega"], [277, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[276, "examine-the-group-delay-tau-g-omega"], [277, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[276, "fully-analyze-a-fir-filter"]], "IIR filters": [[277, "iir-filters"]], "Create an IIR filter": [[277, "create-an-iir-filter"]], "Examine the zeros and poles": [[277, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[277, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[277, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[278, "peak-to-average-power"]], "QPSK signal with various pulse shapes": [[278, "qpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[278, "examine-time-domain"]], "Examine frequency domain": [[278, "examine-frequency-domain"]], "Plot across excess bandwidth": [[278, "plot-across-excess-bandwidth"]], "Phase-locked loops": [[279, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[279, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[279, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[279, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[279, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[279, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[279, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[279, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[280, "phase-shift-keying"]], "Constellations": [[280, "constellations"]], "BPSK": [[280, "bpsk"]], "QPSK": [[280, "qpsk"]], "8-PSK": [[280, "id1"]], "16-PSK": [[280, "id2"]], "Error rate curves": [[280, "error-rate-curves"]], "Bit error rate curves": [[280, "bit-error-rate-curves"]], "Symbol error rate curves": [[280, "symbol-error-rate-curves"]], "Pulse shapes": [[281, "pulse-shapes"]], "Raised cosine": [[281, "raised-cosine"]], "Square-root raised cosine": [[281, "square-root-raised-cosine"]], "Gaussian": [[281, "gaussian"]], "sdr": [[282, "sdr"]], "Features": [[282, "features"]], "v0.0": [[283, "v0-0"]], "v0.0.10": [[283, "v0-0-10"]], "Changes": [[283, "changes"], [283, "id1"], [283, "id3"], [283, "id5"], [283, "id7"], [283, "id9"], [283, "id11"], [283, "id13"], [283, "id15"], [283, "id17"]], "Contributors": [[283, "contributors"], [283, "id2"], [283, "id4"], [283, "id6"], [283, "id8"], [283, "id10"], [283, "id12"], [283, "id14"], [283, "id16"], [283, "id18"]], "v0.0.9": [[283, "v0-0-9"]], "v0.0.8": [[283, "v0-0-8"]], "v0.0.7": [[283, "v0-0-7"]], "v0.0.6": [[283, "v0-0-6"]], "v0.0.5": [[283, "v0-0-5"]], "v0.0.4": [[283, "v0-0-4"]], "v0.0.3": [[283, "v0-0-3"]], "v0.0.2": [[283, "v0-0-2"]], "v0.0.1": [[283, "v0-0-1"]], "Versioning": [[284, "versioning"]], "Alpha releases": [[284, "alpha-releases"]], "Beta releases": [[284, "beta-releases"]]}, "indexentries": {"module": [[3, "module-sdr"]], "sdr": [[3, "module-sdr"]]}, "docurls": ["api/conversions/", "api/data-manipulation/", "api/detection/", "api/dsp/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.Decimator/", "api/sdr.Decimator.__call__/", "api/sdr.Decimator.__init__/", "api/sdr.Decimator.__repr__/", "api/sdr.Decimator.__str__/", "api/sdr.Decimator.delay/", "api/sdr.Decimator.method/", "api/sdr.Decimator.polyphase_taps/", "api/sdr.Decimator.rate/", "api/sdr.Decimator.reset/", "api/sdr.Decimator.taps/", "api/sdr.Differentiator/", "api/sdr.Differentiator.__init__/", "api/sdr.EnergyDetector/", "api/sdr.EnergyDetector.p_d/", "api/sdr.EnergyDetector.p_fa/", "api/sdr.EnergyDetector.roc/", "api/sdr.EnergyDetector.threshold/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__call__/", "api/sdr.FIR.__init__/", "api/sdr.FIR.__len__/", "api/sdr.FIR.__repr__/", "api/sdr.FIR.__str__/", "api/sdr.FIR.delay/", "api/sdr.FIR.flush/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.group_delay/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.phase_delay/", "api/sdr.FIR.reset/", "api/sdr.FIR.state/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__call__/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__call__/", "api/sdr.IIR.__init__/", "api/sdr.IIR.__repr__/", "api/sdr.IIR.__str__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.state/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.Integrator/", "api/sdr.Integrator.__init__/", "api/sdr.Interpolator/", "api/sdr.Interpolator.__call__/", "api/sdr.Interpolator.__init__/", "api/sdr.Interpolator.__repr__/", "api/sdr.Interpolator.__str__/", "api/sdr.Interpolator.delay/", "api/sdr.Interpolator.method/", "api/sdr.Interpolator.polyphase_taps/", "api/sdr.Interpolator.rate/", "api/sdr.Interpolator.reset/", "api/sdr.Interpolator.taps/", "api/sdr.LinearModulation/", "api/sdr.LinearModulation.__init__/", "api/sdr.LinearModulation.__repr__/", "api/sdr.LinearModulation.__str__/", "api/sdr.LinearModulation.ber/", "api/sdr.LinearModulation.bps/", "api/sdr.LinearModulation.decide_symbols/", "api/sdr.LinearModulation.demodulate/", "api/sdr.LinearModulation.map_symbols/", "api/sdr.LinearModulation.modulate/", "api/sdr.LinearModulation.order/", "api/sdr.LinearModulation.phase_offset/", "api/sdr.LinearModulation.pulse_shape/", "api/sdr.LinearModulation.rx_filter/", "api/sdr.LinearModulation.ser/", "api/sdr.LinearModulation.sps/", "api/sdr.LinearModulation.symbol_map/", "api/sdr.LinearModulation.tx_filter/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__call__/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.MSK/", "api/sdr.MSK.__init__/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__call__/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.OQPSK/", "api/sdr.OQPSK.__init__/", "api/sdr.OQPSK.__repr__/", "api/sdr.OQPSK.__str__/", "api/sdr.PED/", "api/sdr.PED.__call__/", "api/sdr.PED.__init__/", "api/sdr.PED.data_aided_error/", "api/sdr.PED.decision_directed_error/", "api/sdr.PED.gain/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.__repr__/", "api/sdr.PSK.__str__/", "api/sdr.PSK.ber/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.PiMPSK/", "api/sdr.PiMPSK.__init__/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.ReplicaCorrelator/", "api/sdr.ReplicaCorrelator.p_d/", "api/sdr.ReplicaCorrelator.p_fa/", "api/sdr.ReplicaCorrelator.roc/", "api/sdr.ReplicaCorrelator.threshold/", "api/sdr.Resampler/", "api/sdr.Resampler.__call__/", "api/sdr.Resampler.__init__/", "api/sdr.Resampler.__repr__/", "api/sdr.Resampler.__str__/", "api/sdr.Resampler.delay/", "api/sdr.Resampler.down/", "api/sdr.Resampler.method/", "api/sdr.Resampler.polyphase_taps/", "api/sdr.Resampler.rate/", "api/sdr.Resampler.reset/", "api/sdr.Resampler.taps/", "api/sdr.Resampler.up/", "api/sdr.albersheim/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.barker/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.db/", "api/sdr.design_bandpass_fir/", "api/sdr.design_bandstop_fir/", "api/sdr.design_frac_delay_fir/", "api/sdr.design_highpass_fir/", "api/sdr.design_lowpass_fir/", "api/sdr.design_multirate_fir/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.downsample/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.euclidean/", "api/sdr.evm/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.hadamard/", "api/sdr.half_sine/", "api/sdr.hamming/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.linear/", "api/sdr.mix/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.percent/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.eye/", "api/sdr.plot.filter/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.magnitude_response/", "api/sdr.plot.p_d/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.phase_tree/", "api/sdr.plot.raster/", "api/sdr.plot.roc/", "api/sdr.plot.ser/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.polyphase_decompose/", "api/sdr.ppb/", "api/sdr.ppm/", "api/sdr.raised_cosine/", "api/sdr.rectangular/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.to_complex_bb/", "api/sdr.to_real_pb/", "api/sdr.unpack/", "api/sdr.upsample/", "api/sdr.walsh/", "api/sdr.wavelength/", "api/sdr.zadoff_chu/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/formatting/", "development/installation/", "development/unit-tests/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})