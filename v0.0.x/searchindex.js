Search.setIndex({"titles": ["Filtering", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.DDS", "sdr.DDS.__init__", "sdr.DDS.nco", "sdr.DDS.process", "sdr.DDS.reset", "sdr.DDS.step", "sdr.FIR", "sdr.FIR.__init__", "sdr.FIR.delay", "sdr.FIR.filter", "sdr.FIR.frequency_response", "sdr.FIR.frequency_response_log", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.reset", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.resample", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__init__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.filter", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.filter", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.process", "sdr.NCO.reset", "sdr.NCO.step", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.demodulate", "sdr.PSK.modulate", "sdr.PSK.offset", "sdr.PSK.order", "sdr.PSK.symbol_map", "sdr.Q", "sdr.Qinv", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.bec", "sdr.bec_capacity", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.energy", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.hexdump", "sdr.iq_imbalance", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.plot.constellation", "sdr.plot.filter", "sdr.plot.frequency_response", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.raised_cosine", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.unpack", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"class": [0, 1, 18, 24, 36, 43, 59, 68, 76, 125, 126, 129], "sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133], "fir": [0, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 108, 109, 110, 111, 113, 114, 116, 119, 131, 132], "implement": [0, 18, 24, 36, 43, 59, 65, 68, 76, 124], "finit": [0, 24, 132], "impuls": [0, 24, 30, 43, 52, 98, 108, 111, 117, 127, 130, 132], "respons": [0, 24, 28, 29, 30, 33, 43, 49, 50, 52, 56, 98, 108, 109, 110, 111, 114, 116, 130, 132], "iir": [0, 1, 10, 29, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 65, 108, 109, 110, 111, 113, 114, 116, 119, 125, 128, 131, 132], "an": [0, 24, 30, 43, 44, 45, 52, 87, 102, 111, 123, 131], "infinit": [0, 43, 132], "gaussian": [0, 86, 87, 98, 131, 132], "time_bandwidth": [0, 98], "float": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 36, 39, 43, 44, 49, 50, 51, 59, 60, 61, 62, 63, 66, 68, 69, 70, 71, 72, 76, 77, 80, 85, 86, 87, 88, 90, 92, 96, 98, 101, 103, 104, 105, 106, 108, 109, 110, 112, 113, 114, 115, 117, 120, 121, 122], "span": [0, 98, 120, 122, 127, 130], "int": [0, 18, 23, 24, 26, 28, 29, 30, 31, 33, 36, 38, 43, 49, 50, 52, 53, 56, 68, 75, 76, 77, 81, 86, 93, 94, 98, 99, 100, 102, 108, 109, 110, 111, 112, 113, 114, 115, 116, 120, 122, 123], "sp": [0, 98, 120, 122, 127, 130], "ndarrai": [0, 18, 21, 23, 24, 27, 28, 29, 30, 33, 35, 36, 39, 42, 43, 46, 47, 48, 49, 50, 52, 54, 56, 58, 59, 64, 68, 73, 75, 76, 78, 79, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 98, 99, 101, 102, 120, 122, 123], "return": [0, 1, 9, 11, 14, 15, 21, 23, 24, 27, 28, 29, 30, 33, 39, 43, 48, 49, 50, 52, 56, 64, 73, 75, 78, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 120, 121, 122, 123, 125, 126], "raised_cosin": [0, 120, 130, 131, 132], "alpha": [0, 98, 118, 120, 122, 127, 130], "rais": [0, 117, 120, 122, 125], "cosin": [0, 117, 120, 122, 125], "rc": [0, 120], "root_raised_cosin": [0, 108, 109, 110, 111, 113, 114, 116, 117, 119, 122, 125, 127, 130, 131, 132], "squar": [0, 97, 104, 117, 121, 122, 125], "root": [0, 117, 121, 122, 125], "srrc": [0, 117, 122, 127], "farrowresampl": [0, 36, 37, 38, 39, 40, 41, 42, 124, 131, 132], "cubic": [0, 36], "farrow": [0, 36, 37, 38, 39, 40, 41, 42, 132], "arbitrari": [0, 36, 37, 38, 39, 40, 41, 42, 131, 132], "psk": [0, 76, 77, 78, 79, 80, 81, 82, 101, 131], "shift": [0, 76, 78, 79, 80, 81, 82, 125, 126], "kei": [0, 76, 78, 79, 80, 81, 82], "demodul": [0, 76, 78], "diff_decod": [0, 93, 94, 131], "y": [0, 18, 21, 23, 24, 27, 39, 43, 48, 59, 64, 68, 73, 75, 86, 88, 90, 93, 94, 95, 101, 115, 117, 128], "arraylik": [0, 18, 21, 24, 25, 27, 36, 39, 40, 43, 44, 45, 48, 59, 64, 68, 73, 76, 78, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 121, 123], "y_prev": [0, 93, 94], "0": [0, 8, 18, 19, 24, 28, 29, 43, 44, 49, 50, 62, 68, 70, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 101, 102, 104, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133], "differenti": [0, 93, 94], "decod": [0, 93], "input": [0, 1, 9, 11, 14, 15, 18, 21, 24, 25, 27, 30, 33, 36, 37, 39, 40, 43, 44, 45, 48, 52, 56, 59, 64, 68, 73, 83, 86, 87, 88, 89, 90, 91, 93, 94, 95, 102, 111, 116, 123, 125, 126, 128], "k": [0, 76, 78, 79, 93, 94, 107, 127, 130], "diff_encod": [0, 93, 94, 131], "x": [0, 1, 18, 21, 24, 27, 36, 39, 43, 48, 59, 64, 68, 73, 76, 78, 79, 83, 84, 85, 86, 88, 90, 92, 93, 94, 95, 96, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 121, 123, 127, 128, 129, 133], "encod": [0, 93, 94], "gray_cod": [0, 99, 131], "n": [0, 1, 18, 21, 23, 24, 27, 28, 29, 30, 31, 33, 36, 39, 43, 48, 49, 50, 52, 53, 56, 59, 64, 68, 73, 75, 83, 84, 85, 86, 87, 92, 95, 96, 99, 101, 103, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 121, 128, 130], "gener": [0, 86, 99, 129], "grai": [0, 99], "code": [0, 99], "length": [0, 30, 33, 98, 99, 108, 111, 112, 115, 116, 120, 122, 124, 127, 130], "2": [0, 1, 9, 11, 14, 28, 29, 49, 50, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130], "closedlooppl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 128, 131, 132], "A": [0, 1, 9, 11, 12, 13, 14, 15, 17, 24, 59, 99, 100, 101, 104, 120, 122, 128], "defin": [0, 1, 24, 43, 86, 95, 98, 126, 131], "perform": [0, 1, 125, 126, 131], "close": [0, 1, 8, 10, 132], "pll": [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 132], "dd": [0, 18, 19, 20, 21, 22, 23, 68, 128, 131, 132], "direct": [0, 18, 19, 128, 132], "digit": [0, 1, 9, 11, 12, 13, 14, 15, 18, 19, 59, 120, 122, 128, 131, 132], "synthes": [0, 18, 19, 128, 132], "loopfilt": [0, 59, 60, 61, 62, 63, 64, 65, 66, 67, 128, 131, 132], "2nd": [0, 1, 59, 62, 128, 132], "order": [0, 1, 24, 31, 36, 38, 43, 53, 59, 62, 76, 77, 81, 98, 120, 122, 128, 129, 132], "proport": [0, 1, 5, 59, 60, 62, 97, 104, 132], "plu": [0, 1, 59, 62, 132], "integr": [0, 1, 6, 59, 61, 62, 126, 132], "ppi": [0, 59, 62], "nco": [0, 1, 4, 8, 18, 19, 20, 62, 68, 69, 70, 71, 72, 73, 74, 75, 128, 131, 132], "numer": [0, 1, 18, 20, 68, 70, 126, 128, 132], "control": [0, 1, 18, 20, 68, 70, 128, 132], "oscil": [0, 1, 18, 20, 68, 70, 128, 132], "awgn": [0, 86, 87, 129, 131], "snr": [0, 86, 87], "none": [0, 24, 30, 33, 36, 40, 59, 67, 86, 87, 95, 102, 108, 111, 112, 115, 116, 123, 124], "add": [0, 86, 129, 133], "addit": [0, 86, 87, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119], "white": [0, 86, 87], "nois": [0, 1, 2, 3, 8, 14, 59, 62, 66, 86, 87, 115, 128], "signal": [0, 1, 9, 11, 14, 15, 18, 21, 24, 27, 36, 39, 43, 48, 59, 64, 68, 73, 75, 85, 86, 87, 92, 96, 97, 98, 101, 103, 104, 105, 106, 112, 115, 117, 121, 125, 126, 127, 128, 130], "iq_imbal": [0, 101, 131], "amplitud": [0, 98, 101, 124, 128], "appli": [0, 101, 118], "iq": [0, 101], "imbal": [0, 101], "complex": [0, 18, 21, 23, 76, 78, 79, 82, 86, 87, 101, 107, 124, 125, 126, 129], "average_pow": [0, 85, 103, 131], "averag": [0, 85, 86, 87, 103, 112], "power": [0, 85, 86, 87, 103, 104, 105, 112, 130], "crest_factor": [0, 92, 103, 131, 132], "crest": [0, 92], "factor": [0, 1, 8, 17, 59, 62, 63, 92, 128], "energi": [0, 87, 96, 120, 122, 131], "papr": [0, 103, 127, 131, 132], "peak": [0, 92, 103, 105, 106], "ratio": [0, 14, 86, 87, 103], "peak_pow": [0, 103, 105, 131], "peak_voltag": [0, 92, 106, 131], "voltag": [0, 106, 121], "rms_voltag": [0, 92, 121, 131], "mean": [0, 112, 121, 130], "rm": [0, 92, 121], "hexdump": [0, 100, 131, 132], "byte": [0, 100], "width": [0, 100], "16": [0, 100, 132], "str": [0, 100, 112, 115], "specifi": [0, 86, 87, 95, 100, 125, 126], "pack": [0, 100, 102, 131, 132], "bpe": [0, 102, 123], "binari": [0, 88, 89, 90, 91, 95, 102, 123], "arrai": [0, 88, 90, 93, 94, 95, 99, 102, 117, 123, 126, 127], "multipl": [0, 102, 123], "bit": [0, 87, 88, 89, 90, 91, 100, 102, 123, 132], "per": [0, 21, 73, 87, 98, 100, 102, 120, 122, 123, 127, 130], "element": [0, 100, 102, 123], "unpack": [0, 100, 123, 131, 132], "bec": [0, 88, 89, 95, 131], "p": [0, 83, 84, 88, 89, 90, 91, 95], "pass": [0, 86, 88, 90, 95, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 125, 126], "sequenc": [0, 88, 90, 95], "through": [0, 88, 90, 95, 125, 126, 128], "erasur": [0, 88, 89, 95], "bsc": [0, 90, 91, 95, 131], "symmetr": [0, 90, 91, 95], "transit": [0, 90, 91, 95], "dmc": [0, 95, 131], "discret": [0, 1, 9, 11, 12, 13, 14, 15, 59, 95, 120, 122, 124, 128], "memoryless": [0, 95], "matrix": [0, 95], "awgn_capac": [0, 87, 131], "calcul": [0, 87, 89, 91, 97, 104], "capac": [0, 87, 89, 91], "bec_capac": [0, 89, 131], "bsc_capac": [0, 91, 131], "fspl": [0, 97, 131], "d": [0, 97, 104, 131], "f": [0, 9, 11, 24, 28, 29, 43, 49, 50, 97, 98, 104, 124, 125, 126, 127, 128, 129, 130], "free": [0, 97], "space": [0, 29, 50, 97], "path": [0, 97], "loss": [0, 97], "db": [0, 1, 12, 14, 86, 87, 97, 98, 101, 103, 104, 127, 129, 130], "parabolic_antenna": [0, 104, 131], "freq": [0, 104, 124, 128], "tupl": [0, 24, 28, 29, 43, 49, 50, 104], "gain": [0, 1, 4, 5, 6, 7, 8, 18, 19, 43, 44, 51, 59, 60, 61, 62, 68, 69, 70, 98, 104, 128], "g": [0, 104], "beamwidth": [0, 104], "theta": [0, 19, 68, 70, 72, 104, 114], "parabol": [0, 104], "reflector": [0, 104], "q": [0, 83, 84, 131], "comput": [0, 83, 84, 86, 97, 125, 126, 128, 130], "complementari": [0, 83, 84], "cumul": [0, 83, 84], "distribut": [0, 83, 84], "function": [0, 1, 10, 24, 43, 44, 59, 83, 84, 87, 98, 112, 115, 125, 126, 128, 130, 131, 132], "standard": [0, 83, 84], "normal": [0, 1, 3, 8, 59, 62, 66, 83, 84, 98, 115, 128, 130], "mathcal": [0, 83, 84, 86, 95], "1": [0, 1, 8, 11, 15, 17, 18, 19, 28, 29, 43, 44, 49, 50, 59, 62, 63, 68, 70, 76, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133], "qinv": [0, 83, 84, 131], "invers": [0, 84], "use_styl": [0, 118], "": [0, 1, 9, 11, 12, 13, 15, 16, 24, 28, 29, 33, 43, 49, 50, 56, 76, 78, 79, 87, 101, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 124, 129, 131], "default": [0, 30, 33, 115, 118], "matplotlib": [0, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 124, 125, 126, 127, 128, 129, 130, 131], "rcparam": [0, 118, 124, 128], "time_domain": [0, 86, 117, 127, 130, 131, 132], "sample_r": [0, 1, 8, 16, 28, 29, 49, 50, 108, 109, 110, 112, 113, 114, 115, 117, 124, 128, 130], "periodogram": [0, 112, 127, 131, 132], "estim": [0, 76, 78, 112, 115, 128], "spectral": [0, 112, 127, 130], "densiti": [0, 14, 112, 127, 130], "p_": [0, 85, 86, 95, 103, 105, 112], "xx": [0, 112], "us": [0, 18, 20, 25, 36, 37, 44, 45, 59, 65, 76, 78, 87, 89, 91, 100, 102, 108, 111, 112, 115, 116, 123, 125, 126, 130, 131, 133], "welch": [0, 112, 115], "method": [0, 112, 115, 125, 126], "spectrogram": [0, 115, 131, 132], "b": [0, 43, 45, 87, 98, 100, 108, 109, 110, 111, 113, 114, 116, 119, 130], "h": [0, 24, 25, 28, 29, 30, 43, 49, 50, 52, 59, 98, 108, 109, 111, 127, 128, 130], "omega": [0, 19, 68, 70, 71, 108, 109, 110, 113, 114, 128], "step": [0, 18, 21, 23, 24, 33, 43, 56, 68, 73, 75, 108, 116], "zero": [0, 40, 43, 44, 58, 59, 102, 108, 109, 110, 111, 113, 114, 116, 117, 119, 125, 127, 128, 130], "pole": [0, 43, 44, 54, 108, 109, 110, 111, 113, 114, 116, 119, 125], "frequency_respons": [0, 24, 28, 29, 43, 49, 50, 109, 125, 126, 128, 130, 131, 132], "group_delai": [0, 110, 125, 126, 131, 132], "group": [0, 110], "delai": [0, 18, 24, 26, 36, 59, 68, 93, 94, 110, 113, 128], "tau_g": [0, 110], "impulse_respons": [0, 24, 30, 43, 52, 98, 111, 120, 122, 125, 126, 130, 131, 132], "phase_delai": [0, 113, 131], "tau_": [0, 113], "phi": [0, 76, 77, 80, 101, 113], "phase_respons": [0, 114, 131], "step_respons": [0, 24, 33, 43, 56, 116, 125, 126, 128, 131, 132], "zeros_pol": [0, 119, 126, 131, 132], "kwarg": [0, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119], "loop": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 131, 132], "thi": [1, 21, 24, 43, 73, 76, 82, 86, 87, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 124, 126, 128, 130], "i": [1, 8, 17, 24, 30, 33, 34, 36, 41, 43, 52, 56, 57, 59, 62, 63, 66, 83, 84, 86, 87, 89, 91, 95, 97, 98, 100, 101, 102, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 133], "meant": 1, "analysi": [1, 8, 128, 132], "onli": [1, 24, 32, 36, 40, 43, 55, 86, 128], "block": [1, 18, 59, 68, 93, 94], "diagram": [1, 18, 59, 68, 93, 94], "bb": [1, 128], "ped": [1, 7, 8, 62, 128], "lf": [1, 128], "lo": [1, 128], "e": [1, 18, 85, 88, 89, 96, 125, 126, 128, 129], "j": [1, 18, 43, 86, 95, 101, 125, 126, 128], "local": [1, 128], "baseband": [1, 127, 128], "phase": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 101, 113, 114, 131], "error": [1, 7, 8, 14, 59, 62, 91, 128], "detector": [1, 7, 8, 62, 128], "filter": [1, 5, 6, 8, 10, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 98, 108, 109, 110, 111, 113, 114, 116, 117, 119, 120, 122, 127, 130, 131, 132], "The": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 130, 131, 133], "transfer": [1, 10, 24, 43, 44, 59, 98, 125, 126, 128], "h_": [1, 128], "z": [1, 18, 24, 43, 59, 68, 93, 94, 125, 126, 128], "k_1": [1, 5, 59, 60, 128], "k_2": [1, 6, 59, 61, 128], "frac": [1, 9, 11, 14, 15, 43, 59, 85, 86, 87, 92, 97, 98, 101, 103, 104, 121, 128], "k_0": [1, 4, 8, 19, 62, 68, 69, 70, 128], "k_p": [1, 7, 8, 62, 128], "refer": [1, 9, 11, 12, 13, 14, 15, 36, 59, 92, 98, 103, 120, 122, 126, 130], "michael": [1, 9, 11, 12, 13, 14, 15, 59, 120, 122], "rice": [1, 9, 11, 12, 13, 14, 15, 59, 120, 122], "commun": [1, 9, 11, 12, 13, 14, 15, 59, 120, 122, 128, 131], "time": [1, 8, 9, 11, 12, 13, 14, 15, 24, 43, 59, 62, 85, 86, 92, 95, 96, 98, 101, 103, 105, 106, 108, 112, 115, 117, 120, 121, 122, 124, 125, 126, 130], "approach": [1, 9, 11, 12, 13, 14, 15, 59, 87, 89, 91, 120, 122, 128], "appendix": [1, 59, 120, 122], "c": [1, 9, 11, 12, 13, 14, 15, 59, 76, 82, 87, 89, 91, 97, 104, 128], "lock": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 131], "exampl": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 100, 101, 102, 104, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 120, 122, 123, 128], "see": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 98, 120, 122, 131], "noise_bandwidth": [1, 8, 59, 62, 66], "damping_factor": [1, 8, 59, 62, 63], "creat": [1, 8, 18, 19, 24, 25, 36, 37, 43, 44, 45, 59, 62, 68, 70, 76, 77, 117, 124, 127, 128, 129, 130], "object": [1, 8, 76, 77, 126, 128, 129], "frequency_lock_tim": [1, 9], "freq_offset": [1, 9, 11], "frequenc": [1, 9, 11, 13, 24, 28, 29, 43, 49, 50, 59, 97, 104, 108, 109, 110, 112, 113, 114, 115, 130], "lock_tim": [1, 11, 128], "phase_error_vari": [1, 14], "cn0": [1, 14], "varianc": [1, 14, 86], "steadi": [1, 14], "state": [1, 14, 24, 32, 34, 36, 40, 41, 43, 55, 57], "phase_lock_tim": [1, 15], "bn": [1, 2], "bandwidth": [1, 2, 3, 8, 12, 59, 62, 66, 87, 98, 120, 122, 128, 130], "b_n": [1, 2, 3, 8, 9, 11, 14, 15, 59, 62, 66], "hz": [1, 2, 8, 9, 11, 14, 28, 29, 49, 50, 59, 62, 66, 87, 97, 98, 104, 124], "bnt": [1, 3, 128], "t": [1, 3, 8, 59, 62, 66, 98, 100, 124], "repres": [1, 10, 88, 89], "k0": [1, 4, 8, 18, 19, 62, 68, 69, 70], "k1": [1, 5, 59, 60, 128], "k2": [1, 6, 59, 61, 128], "kp": [1, 7, 8, 62], "omega_3db": [1, 12], "3": [1, 9, 11, 12, 15, 87, 88, 90, 95, 97, 98, 99, 100, 101, 102, 104, 108, 109, 110, 111, 113, 114, 116, 117, 119, 123, 126, 128, 130, 131, 132], "omega_": [1, 12], "textrm": [1, 12], "radian": [1, 12, 13, 14, 18, 19, 76, 77, 80, 128], "omega_n": [1, 13, 128], "natur": [1, 13], "sampl": [1, 8, 16, 18, 19, 21, 23, 24, 26, 28, 29, 30, 33, 36, 40, 49, 50, 52, 56, 59, 62, 66, 68, 70, 71, 73, 75, 98, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 122, 124, 127, 128, 130], "rate": [1, 8, 16, 28, 29, 36, 39, 49, 50, 108, 109, 110, 112, 113, 114, 115, 117], "f_": [1, 8, 16, 28, 29, 49, 50, 98, 108, 109, 110, 112, 113, 114, 115, 117, 124, 125, 126, 128, 130], "zeta": [1, 8, 17, 59, 62, 63], "damp": [1, 8, 17, 59, 62, 63, 128], "properti": [2, 3, 4, 5, 6, 7, 10, 12, 13, 16, 17, 20, 26, 31, 34, 35, 38, 41, 42, 46, 47, 51, 53, 54, 57, 58, 60, 61, 63, 65, 66, 69, 71, 72, 80, 81, 82], "paramet": [8, 9, 11, 14, 19, 21, 23, 25, 27, 28, 29, 30, 33, 37, 39, 40, 44, 45, 48, 49, 50, 52, 56, 62, 64, 70, 73, 75, 77, 78, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123], "where": [8, 59, 62, 66, 86, 87, 95, 98, 125, 126, 131], "period": [8, 59, 62, 66], "second": [8, 9, 11, 15, 59, 62, 66, 98], "critic": [8, 17, 59, 62, 63, 128], "underdamp": [8, 17, 59, 62, 63], "overdamp": [8, 17, 59, 62, 63], "ted": [8, 62], "t_": [9, 11, 15, 39, 98, 130], "fl": [9, 11], "4": [9, 11, 29, 50, 86, 87, 89, 91, 95, 97, 98, 99, 100, 101, 102, 104, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 120, 122, 123, 124, 126, 129, 132], "delta": [9, 11, 24, 30, 43, 52, 111, 125, 126], "offset": [9, 11, 18, 19, 68, 70, 72, 76, 77, 80, 101, 128], "take": [9, 11, 15], "onto": [9, 11, 15], "equat": [9, 11, 12, 13, 14, 15, 43], "39": 9, "pl": [11, 15], "38": 11, "34": 12, "33": 13, "sigma_": 14, "theta_": 14, "n_0": [14, 87, 129], "carrier": 14, "43": 14, "40": 15, "less": 17, "than": [17, 101], "greater": 17, "note": [18, 24, 43, 59, 68, 86, 87, 89, 91, 93, 94, 98, 101, 104, 115], "increment": [18, 19, 21, 68, 70, 71, 73, 128], "v": [18, 68], "output": [18, 21, 23, 24, 30, 33, 43, 44, 45, 52, 56, 59, 64, 68, 73, 75, 86, 87, 88, 89, 90, 91, 94, 95, 102, 111, 116, 123, 124, 125, 126, 128], "exponenti": [18, 21, 23, 124, 125, 126], "constant": [18, 19, 59, 68, 70, 71, 126, 128], "accumul": [18, 19, 68, 70, 71, 128], "absolut": [18, 19, 68, 70, 72, 87], "unit": [18, 24, 33, 43, 56, 59, 68, 70, 71, 72, 85, 86, 87, 93, 94, 96, 105, 106, 116, 120, 121, 122, 125, 126, 128], "adder": [18, 59, 68, 93, 94, 128], "process": [18, 21, 68, 73, 126, 128], "variabl": [18, 21, 68, 73, 100, 128], "reset": [18, 22, 24, 32, 36, 40, 43, 55, 59, 67, 68, 74], "forward": [18, 23, 68, 75], "vari": [21, 73], "number": [23, 28, 29, 30, 33, 49, 50, 52, 56, 75, 86, 98, 100, 102, 108, 109, 110, 111, 112, 113, 114, 115, 116, 120, 122, 123], "wrapper": [24, 43], "scipi": [24, 27, 43, 112, 115, 130, 131], "convolv": [24, 27, 117, 127], "It": [24, 43, 59, 86], "support": [24, 43], "one": [24, 43, 98, 100, 108, 109, 110, 112, 113, 114, 115, 125, 126, 127, 130], "stream": [24, 25, 32, 34, 36, 37, 40, 41, 43, 44, 45, 55, 57], "its": [24, 43, 44, 125, 126, 130], "feedforward": [24, 25, 35, 43, 45, 47, 108, 109, 110, 111, 113, 114, 116, 119, 125, 126], "coeffici": [24, 25, 43, 45, 108, 109, 110, 111, 113, 114, 116, 119, 125, 126], "h_i": [24, 25, 35, 125], "sum_": [24, 43, 85, 86, 87, 96, 121], "sum": [24, 43, 130], "limits_": [24, 43], "bool": [24, 25, 34, 36, 37, 41, 43, 44, 45, 57, 107, 114], "fals": [24, 25, 36, 37, 43, 44, 45, 88, 90, 95, 107, 126, 130], "frequency_response_log": [24, 29, 43, 50], "logarithm": [24, 29, 43, 50, 108, 109, 110, 112, 113, 114, 125, 126], "axi": [24, 29, 43, 50, 108, 109, 110, 112, 113, 114, 115, 117, 124], "when": [24, 30, 33, 43, 52, 56, 87, 88, 89, 90, 91, 108, 109, 110, 111, 113, 114, 116, 124, 125, 126], "mode": [24, 25, 27, 32, 34, 36, 37, 40, 41, 43, 44, 45, 55, 57, 127], "u": [24, 33, 43, 56, 116, 125, 126], "indic": [24, 25, 34, 36, 37, 41, 43, 44, 45, 57, 101, 114], "whether": [24, 25, 34, 36, 37, 41, 43, 44, 45, 57, 114], "tap": [24, 35, 36, 42, 43, 46, 47, 125, 126], "In": [25, 34, 37, 41, 44, 45, 57, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 100, 101, 102, 104, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 120, 122, 123, 124, 129], "previou": [25, 37, 40, 44, 45, 93, 94], "ar": [25, 29, 37, 44, 45, 50, 87, 88, 89, 90, 91, 102, 108, 109, 110, 112, 113, 114, 115, 118, 124, 126, 128, 130, 131, 133], "preserv": [25, 34, 37, 41, 44, 45, 57], "between": [25, 34, 37, 41, 44, 45, 57, 97, 112, 115, 128], "call": [25, 34, 37, 41, 44, 45, 57], "liter": [27, 109, 110, 113, 114], "full": 27, "valid": [27, 127], "same": [27, 125], "convolut": 27, "detail": 27, "1024": [28, 29, 49, 50, 108, 109, 110, 113, 114, 127, 130], "from": [28, 29, 43, 44, 49, 50, 76, 82, 115, 125, 126, 128, 131], "plot": [28, 29, 30, 33, 49, 50, 52, 56, 86, 87, 89, 91, 98, 101, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132], "decad": [29, 50, 108, 109, 110, 113, 114, 125, 128], "resampl": [36, 37, 38, 39, 40, 41, 42, 131, 132], "http": [36, 92, 98, 103], "wirelesspi": 36, "com": [36, 98], "fraction": [36, 40, 98, 124], "structur": 36, "new": [36, 37, 76, 77], "given": [36, 39, 125, 126], "r": [36, 39, 87, 98, 120, 122, 126, 128, 130], "index": [36, 40], "vector": [40, 112, 115], "should": 40, "equal": 40, "three": [40, 124, 130], "If": [40, 86, 87, 95, 102, 107, 108, 111, 112, 115, 116, 117, 123, 131], "lfilter": 43, "b_i": [43, 45, 47, 108, 109, 110, 111, 113, 114, 116, 119, 126], "feedback": [43, 45, 46, 108, 109, 110, 111, 113, 114, 116, 119, 126], "a_j": [43, 45, 46, 108, 109, 110, 111, 113, 114, 116, 119, 126], "These": [43, 118, 128], "differ": [43, 130], "a_0": 43, "left": [43, 85, 86, 87, 96, 97, 98, 101, 104, 105, 106, 121], "m": [43, 76, 77, 78, 79, 81, 82, 95], "right": [43, 85, 86, 87, 96, 97, 98, 101, 104, 105, 106, 121], "classmethod": [43, 44], "zerospol": [43, 44, 108, 109, 110, 111, 113, 114, 116, 119, 126], "self": [43, 44], "100": [43, 52, 56, 86, 87, 89, 91, 108, 111, 116, 117, 124], "a_tap": [43, 46, 108, 109, 110, 111, 113, 114, 116, 119, 126, 128], "b_tap": [43, 47, 108, 109, 110, 111, 113, 114, 116, 119, 126, 128], "can": [59, 86, 98, 102, 112, 115, 125, 126, 133], "track": 59, "cannot": 59, "howev": [59, 89, 91, 124], "chirp": 59, "ramp": 59, "underli": [59, 65], "modul": [76, 77, 79, 81, 101, 129, 131], "x_hat": [76, 78, 107, 129], "symbol": [76, 78, 79, 82, 87, 98, 107, 120, 122, 127, 129, 130], "hat": [76, 78, 107], "decim": [76, 78, 79, 82, 129], "maximum": [76, 78], "likelihood": [76, 78], "symbol_map": [76, 82, 117, 127], "map": [76, 82], "dot": [76, 82], "mathbb": [76, 82, 87], "must": [77, 86, 98, 120, 122], "least": 77, "real": [83, 84, 86, 124, 125, 126, 127, 128], "valu": [83, 84, 93, 94, 98, 101, 115, 126], "probabl": [83, 84, 88, 89, 90, 91, 95, 131], "exceed": [83, 84], "out": [83, 84, 88, 90, 93, 94, 95, 97, 99, 102, 104, 110, 118, 123], "15865525393145707": [83, 84], "158655": [83, 84], "0000010494310452": [83, 84], "measur": [85, 86, 92, 96, 103, 105, 106, 121, 128, 131, 132], "domain": [85, 86, 92, 96, 101, 103, 105, 106, 108, 112, 115, 117, 121], "text": [85, 86, 87, 89, 91, 92, 97, 103, 105, 106, 121], "avg": [85, 86, 103], "seed": 86, "which": [86, 87, 101, 104, 124, 128, 130], "ad": [86, 131, 132], "desir": [86, 129], "explicitli": 86, "assum": [86, 95, 102, 123], "contain": [86, 100], "known": 86, "linear": 86, "random": [86, 88, 90, 95, 101, 117, 127, 129], "numpi": [86, 123, 124, 125, 126, 127, 128, 129, 130, 131], "default_rng": 86, "noisi": 86, "w": [86, 124, 125, 126, 127, 128, 129, 130], "sigma": [86, 87], "For": [86, 108, 109, 110, 111, 113, 114, 116, 119, 125], "sim": 86, "cn": 86, "np": [86, 87, 88, 89, 90, 91, 95, 101, 108, 109, 110, 111, 113, 114, 116, 117, 119, 124, 125, 126, 127, 128, 129, 130], "sin": 86, "pi": [86, 97, 98, 101, 104, 108, 109, 110, 111, 113, 114, 116, 117, 119, 124, 125, 126, 127, 128], "5": [86, 88, 90, 91, 95, 98, 99, 100, 101, 104, 108, 109, 110, 111, 113, 114, 116, 117, 119, 120, 122, 124, 125, 126, 127, 128, 129, 130, 132], "arang": [86, 124, 127, 128], "10": [86, 87, 95, 97, 98, 99, 100, 101, 103, 104, 108, 109, 110, 111, 113, 114, 116, 117, 119, 120, 122, 124, 125, 126, 127, 128, 129, 130], "plt": [86, 87, 89, 91, 98, 101, 108, 109, 110, 111, 113, 114, 116, 117, 119, 120, 122, 124, 125, 126, 127, 128, 129, 130], "figur": [86, 87, 89, 91, 98, 101, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 120, 122, 124, 125, 126, 127, 128, 129, 130], "figsiz": [86, 87, 89, 91, 98, 101, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 120, 122, 124, 125, 126, 127, 128, 129, 130], "8": [86, 87, 89, 91, 95, 98, 99, 100, 104, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 120, 122, 125, 126, 127, 128, 130], "label": [86, 98, 101, 115, 117, 120, 122, 124, 127, 128, 130], "titl": [86, 87, 89, 91, 101, 117, 124, 127, 128, 130], "tight_layout": [86, 87, 89, 91, 117, 127, 128, 129, 130], "channel": [87, 88, 89, 90, 91, 95, 131], "2d": 87, "wa": 87, "x_i": [87, 88, 89, 90, 91, 95, 101], "y_i": [87, 88, 89, 90, 91, 95], "log_2": 87, "equival": [87, 124], "monoton": 87, "decreas": 87, "limit": 87, "infti": 87, "esn0": [87, 129], "linspac": [87, 89, 91, 126], "20": [87, 88, 90, 95, 100, 101, 127, 130], "xlabel": [87, 89, 91, 124, 128, 130], "psd": 87, "e_": [87, 129], "ylabel": [87, 89, 91, 124, 128, 130], "grid": [87, 89, 91, 118, 124, 128, 130], "true": [87, 88, 89, 90, 91, 95, 107, 114, 118, 129], "At": 87, "occur": 87, "e_b": 87, "relat": [87, 98], "view": 87, "59": 87, "shannon": 87, "ebn0": 87, "log10": [87, 130], "25": [88, 90, 95, 124, 128, 130], "roughli": [88, 90, 124], "eras": 88, "randint": [88, 90, 95, 101, 117, 127, 129], "flip": 90, "h_b": 91, "cf": 92, "v_": [92, 106, 121], "en": [92, 103], "wikipedia": [92, 103], "org": [92, 103], "wiki": [92, 103], "data": [93, 94, 100, 102, 123, 131], "uncod": 94, "pr": 95, "y_j": 95, "alphabet": 95, "size": [95, 124, 127, 128, 130], "ldot": 95, "6": [95, 97, 99, 100, 104, 108, 109, 110, 111, 113, 114, 116, 117, 119, 125, 126, 128, 129], "7": [95, 99, 100, 117], "9": [95, 99, 100, 120, 122, 127, 129, 130, 132], "log_": [97, 103], "distanc": 97, "meter": [97, 104], "transmitt": 97, "receiv": 97, "km": 97, "link": [97, 131], "ghz": [97, 104], "1e3": 97, "1e9": [97, 104], "92": 97, "44778322188337": 97, "so": [97, 98, 131], "doubl": [97, 104], "result": [97, 104], "increas": [97, 104, 126], "2e3": 97, "98": 97, "468383135163": 97, "also": [97, 98, 131], "2e9": 97, "puls": [98, 117, 120, 122, 131, 132], "shape": [98, 117, 120, 122, 131, 132], "product": [98, 130], "sym": [98, 130], "side": [98, 108, 109, 110, 112, 113, 114, 115, 125, 126, 127, 130], "thought": [98, 133], "smaller": [98, 130], "produc": [98, 130], "wider": 98, "even": [98, 120, 122], "nomin": 98, "passband": [98, 127], "ha": [98, 104, 128, 130], "exp": [98, 101, 108, 109, 110, 111, 113, 114, 116, 117, 119, 124, 126, 127, 128], "sqrt": [98, 121, 127, 128, 130], "ln": 98, "www": 98, "mathwork": 98, "help": 98, "ref": 98, "gaussdesign": 98, "html": 98, "onlinelibrari": 98, "wilei": 98, "doi": 98, "pdf": 98, "1002": 98, "9780470041956": 98, "app2": 98, "h_0p1": [98, 120, 122], "h_0p2": 98, "h_0p3": 98, "12": [99, 125, 129], "13": 99, "15": 99, "14": 99, "11": 99, "displai": [100, 108, 109, 110, 112, 113, 114, 115], "each": [100, 112, 115], "consid": 100, "convert": 100, "line": 100, "string": [100, 112, 115], "print": [100, 124, 125, 126, 128], "quick": 100, "brown": 100, "fox": 100, "jump": 100, "over": 100, "lazi": 100, "dog": 100, "00000000": 100, "54": 100, "68": 100, "65": 100, "71": 100, "75": [100, 128, 129], "69": 100, "63": 100, "6b": 100, "62": 100, "72": 100, "6f": 100, "77": 100, "6e": 100, "00000010": 100, "66": 100, "78": 100, "6a": 100, "6d": 100, "70": [100, 130], "73": 100, "76": 100, "74": 100, "00000020": 100, "6c": 100, "61": 100, "7a": 100, "79": 100, "64": [100, 126], "67": 100, "he": 100, "01": [100, 126, 128], "02": [100, 126, 128], "03": [100, 126], "04": [100, 126], "00000004": 100, "05": [100, 124, 126, 128], "06": 100, "07": 100, "08": 100, "00000008": 100, "09": 100, "0a": 100, "posit": 101, "compon": 101, "larger": 101, "quadratur": 101, "degre": [101, 104], "lead": 101, "follow": [101, 118, 128], "g_i": 101, "180": 101, "g_q": 101, "x_q": 101, "horizont": 101, "stretch": 101, "constel": [101, 107], "while": [101, 130], "neg": 101, "vertic": 101, "45": 101, "1_000": 101, "y1": 101, "y2": 101, "subplot": [101, 128, 129], "befor": [101, 133], "after": 101, "legend": [101, 124, 127, 128, 130], "northwest": 101, "northeast": 101, "deg": 101, "dtype": [102, 117, 123, 128], "dtypelik": [102, 123], "have": [102, 123], "most": [102, 123], "signific": [102, 123], "first": [102, 123], "enough": 102, "fill": 102, "last": 102, "remain": 102, "type": [102, 109, 110, 112, 113, 114, 123, 132], "smallest": 102, "unsign": 102, "integ": 102, "hold": 102, "uint8": [102, 123], "diamet": 104, "effici": 104, "55": 104, "le": [104, 120, 122], "eta": 104, "dbi": 104, "half": 104, "arcsin": 104, "83": 104, "dish": 104, "17": 104, "21": 104, "810210290266568": 104, "437435887991374": 104, "23": 104, "sinc": 104, "antenna": 104, "we": [104, 131], "observ": 104, "830810203546193": 104, "529544741425365": 104, "max": [105, 106], "heatmap": [107, 129], "instead": 107, "scatter": 107, "keyword": [107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 125, 126], "argument": [107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 125, 126], "pyplot": [107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 124, 125, 126, 127, 128, 129, 130], "hist2d": 107, "n_time": [108, 126], "n_freq": 108, "x_axi": [108, 109, 110, 112, 113, 114, 115, 125, 126, 127, 128], "two": [108, 109, 110, 112, 113, 114, 115, 124, 125, 126], "log": [108, 109, 110, 112, 113, 114, 125, 126, 128], "set": [108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 126], "n_t": 108, "n_f": 108, "scale": [108, 109, 110, 112, 113, 114, 115, 125, 126], "option": [108, 109, 110, 112, 113, 114, 115], "spectrum": [108, 109, 110, 112, 113, 114, 115], "h_srrc": [108, 109, 110, 111, 113, 114, 116, 117, 119], "1j": [108, 109, 110, 111, 113, 114, 116, 117, 119, 124, 126, 127, 128], "conj": [108, 109, 110, 111, 113, 114, 116, 119, 126, 128], "30": [108, 111, 116, 126], "ylim": [110, 125, 128, 130], "48": 110, "52": 110, "window": [112, 115], "hann": [112, 115], "overlap": [112, 115, 127], "fft": [112, 115], "median": 112, "segment": [112, 115], "256": [112, 115, 127], "point": [112, 115], "unwrap": [114, 128], "pcolormesh": 115, "By": 115, "color": [115, 124, 127, 128, 130], "bar": 115, "rang": [115, 128], "10th": 115, "100th": 115, "percentil": 115, "provid": [115, 131], "more": 115, "dynam": 115, "activ": 115, "chang": [115, 133], "vmin": 115, "vmax": 115, "bpsk": [117, 127], "1000": 117, "10e3": 117, "qpsk": 117, "complex64": [117, 128], "style": 118, "mai": [118, 126], "revert": 118, "rcdefault": 118, "_rc_param": 118, "rc_param": 118, "ax": [118, 124, 128], "autolayout": 118, "max_open_warn": 118, "titleweight": 118, "bold": 118, "linestyl": [118, 124, 128, 130], "excess": [120, 122, 130], "h_0p5": [120, 122], "h_0p9": [120, 122], "import": [124, 125, 126, 127, 128, 129, 130, 131], "config": [124, 125, 126, 127, 128, 129, 130], "inlinebackend": [124, 125, 126, 127, 128, 129, 130], "print_figure_kwarg": [124, 125, 126, 127, 128, 129, 130], "facecolor": [124, 125, 126, 127, 128, 129, 130], "widget": [124, 125, 126, 127, 128, 129, 130], "prop_cycl": [124, 128], "by_kei": [124, 128], "continu": 124, "tx": 124, "decai": [124, 126], "marker": [124, 125, 126], "o": 124, "fillstyl": 124, "imag": 124, "origin": 124, "both": [124, 128], "show": [124, 125, 126, 127, 128, 129, 130], "now": 124, "accomplish": 124, "librari": [124, 129, 131, 133], "def": [124, 129], "resample_sign": 124, "new_sample_r": 124, "ty": 124, "notic": [124, 130], "everi": 124, "200": 124, "four": 124, "400": 124, "other": [124, 133], "appear": 124, "50": [124, 127], "fourth": 124, "often": 124, "do": 124, "align": 124, "315": 124, "32": 124, "user": [125, 126], "below": [125, 126], "00095881": 125, "00175008": 125, "00423912": 125, "00588237": 125, "00615087": 125, "00474585": 125, "00170436": 125, "0025481": 125, "00721629": 125, "01123216": 125, "01342329": 125, "01273174": 125, "00845039": 125, "00043678": 125, "01073645": 125, "02372925": 125, "03650167": 125, "04650553": 125, "05098414": 125, "04734541": 125, "03355823": 125, "00851466": 125, "0276993": 125, "07367186": 125, "12670168": 125, "18306847": 125, "2381038": 125, "28726435": 125, "32607284": 125, "3509308": 125, "35948882": 125, "conveni": [125, 126], "evalu": [125, 126], "envelop": [125, 126], "easili": [125, 126], "here": [125, 126], "altern": 126, "conjug": 126, "0x000002214b040a88": 126, "47820725": 126, "00000000e": 126, "00": 126, "78207252e": 126, "58172329e": 126, "10862468e": 126, "86109590e": 126, "21565653e": 126, "01140214e": 126, "57286400e": 126, "67772160e": 126, "47338728e": 126, "10422993e": 126, "89312837e": 126, "12240078e": 126, "03953322e": 126, "69685122e": 126, "63882791e": 126, "81474977e": 126, "47193366e": 126, "85259041e": 126, "15647504e": 126, "23851924e": 126, "42176895e": 126, "84684395e": 126, "42721858e": 126, "72236648e": 126, "14721649e": 126, "10813095e": 126, "94024315e": 126, "78877688e": 126, "74077567e": 126, "87820725": 126, "53637958": 126, "94724205": 126, "13335164": 126, "1455082": 126, "04436799": 126, "88708159": 126, "71930943": 126, "5719707": 126, "46154771": 126, "39261642": 126, "36139242": 126, "35935288": 126, "3763214": 126, "40270968": 126, "43085717": 126, "45557651": 126, "47410241": 126, "48566716": 126, "49090568": 126, "49124786": 126, "48840102": 126, "4839738": 126, "47925143": 126, "47510421": 126, "47199608": 126, "47005584": 126, "46917696": 126, "46911955": 126, "denomin": 126, "73910363": 126, "30614675j": 126, "plane": 126, "endpoint": 126, "concaten": 126, "0x000002214dc574c8": 126, "lyon": 126, "understand": 126, "3rd": 126, "edit": 126, "section": [126, 128], "insid": 126, "circl": 126, "sinusoid": 126, "outsid": 126, "unstabl": 126, "n_symbol": 127, "500": [127, 128], "x_bb_rect": 127, "papr_bb_rect": 127, "x_pb_rect": 127, "papr_pb_rect": 127, "x_bb_0p9": 127, "papr_bb_0p9": 127, "x_bb_0p5": 127, "papr_bb_0p5": 127, "x_bb_0p1": 127, "papr_bb_0p1": 127, "2f": 127, "rf": [127, 128], "xlim": [127, 128, 130], "x_pb_0p9": 127, "papr_pb_0p9": 127, "x_pb_0p5": 127, "papr_pb_0p5": 127, "x_pb_0p1": 127, "papr_pb_0p1": 127, "configur": 128, "0x00000290f1ce3488": 128, "theta_0": 128, "phase_error": 128, "freq_estim": 128, "suptitl": [128, 129], "ones": 128, "angl": 128, "part": 128, "system": [128, 131], "avail": [128, 129], "001": 128, "005": 128, "b_nt": 128, "0005": 128, "00001": 128, "0125": 128, "015": 128, "0175": 128, "t_lock": 128, "analyze_psk": 129, "100_000": 129, "achiev": [129, 130], "n0": 129, "bin": 129, "18": 129, "rectangular": 130, "rect": 130, "rc_0p1": 130, "rc_0p5": 130, "rc_0p9": 130, "nyquist": 130, "adjac": 130, "specif": 130, "pm": 130, "roll": 130, "60": 130, "total": 130, "nearli": 130, "compar": 130, "null": 130, "small": 130, "lobe": 130, "much": 130, "higher": 130, "h_rect": 130, "freqz": 130, "worn": 130, "whole": 130, "h_rc_0p1": 130, "h_rc_0p5": 130, "h_rc_0p9": 130, "rel": 130, "main": 130, "p_rect": 130, "cumsum": 130, "ab": 130, "p_rc_0p1": 130, "p_rc_0p5": 130, "p_rc_0p9": 130, "One": 130, "within": 130, "variou": 130, "srrc_0p1": 130, "srrc_0p5": 130, "srrc_0p9": 130, "therefor": 130, "similar": 130, "significantli": 130, "due": 130, "being": 130, "h_srrc_0p1": 130, "h_srrc_0p5": 130, "h_srrc_0p9": 130, "p_srrc_0p1": 130, "p_srrc_0p5": 130, "p_srrc_0p9": 130, "gauss_0p1": 130, "gauss_0p2": 130, "gauss_0p3": 130, "python": 131, "packag": 131, "softwar": 131, "radio": 131, "goal": 131, "tool": 131, "design": 131, "build": 131, "analyz": 131, "reli": 131, "interoper": 131, "veri": 131, "possibl": 131, "numba": 131, "acceler": 131, "computation": 131, "intens": 131, "addition": 131, "aim": 131, "replic": 131, "relev": 131, "matlab": 131, "dsp": 131, "toolbox": 131, "progress": 131, "someth": 131, "you": 131, "like": 131, "includ": 131, "pleas": 131, "open": 131, "issu": 131, "github": 131, "impair": 131, "manipul": 131, "model": 131, "budget": 131, "util": 131, "releas": 132, "juli": 132, "2023": 132, "helper": 132, "improv": 132, "annot": 132, "matt": 132, "hostett": 132, "mhostett": 132, "semant": 133, "major": 133, "minor": 133, "patch": 133, "introduc": 133, "api": 133, "featur": 133, "backward": 133, "compat": 133, "make": 133, "bug": 133, "fix": 133, "There": 133, "guarante": 133, "them": 133, "thei": 133}, "objects": {"": [[0, 0, 0, 1, "sdr", ""]], "sdr": [[1, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [18, 1, 1, "", "DDS", "Implements a direct digital synthesizer (DDS)."], [24, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [36, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [43, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [59, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [68, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [76, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [83, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [84, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [85, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [86, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [87, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [88, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [89, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [90, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [91, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [92, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [93, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [94, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [95, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [96, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [97, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [98, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [99, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [100, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [101, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [102, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [103, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [104, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [105, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [106, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [120, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [121, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [122, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [123, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."]], "sdr.ClosedLoopPLL": [[2, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [3, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [4, 2, 1, "", "K0", "The NCO gain $K_0$."], [5, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [6, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [7, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [8, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [9, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [10, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [11, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [12, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [13, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [14, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [15, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [16, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [17, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[8, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [8, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [8, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [8, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [8, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[9, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[11, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[14, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.DDS": [[19, 3, 1, "", "__init__", "Creates a direct digital synthesizer (DDS)."], [20, 2, 1, "", "nco", "The numerically-controlled oscillator (NCO) used by the DDS."], [21, 3, 1, "", "process", "Steps the DDS with the variable phase increment signal $x[n]$."], [22, 3, 1, "", "reset", "Resets the DDS."], [23, 3, 1, "", "step", "Steps the DDS forward by $N$ samples."]], "sdr.DDS.__init__": [[19, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [19, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [19, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.DDS.process": [[21, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the DDS."]], "sdr.DDS.step": [[23, 4, 2, "p-N", "N", "The number of samples $N$ to step the DDS forward."]], "sdr.FIR": [[25, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [26, 2, 1, "", "delay", "The delay of the FIR filter in samples."], [27, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the FIR filter."], [28, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the FIR filter."], [29, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the FIR filter on a logarithmic frequency axis."], [30, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [31, 2, 1, "", "order", "The order of the FIR filter, $N$."], [32, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [33, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [34, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [35, 2, 1, "", "taps", "The feedforward taps $h_i$."]], "sdr.FIR.__init__": [[25, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$."], [25, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to filter()."]], "sdr.FIR.filter": [[27, 4, 2, "p-mode", "mode", "The convolution mode. See scipy.signal.convolve() for details."], [27, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.FIR.frequency_response": [[28, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [28, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.frequency_response_log": [[29, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [29, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [29, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[30, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.step_response": [[33, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FarrowResampler": [[37, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [38, 2, 1, "", "order", "The order of the filter."], [39, 3, 1, "", "resample", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [40, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [41, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [42, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__init__": [[37, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to resample()."]], "sdr.FarrowResampler.resample": [[39, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [39, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.reset": [[40, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[44, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [45, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [46, 2, 1, "", "a_taps", "The feedback taps $a_j$."], [47, 2, 1, "", "b_taps", "The feedforward taps $b_i$."], [48, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the IIR filter."], [49, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the IIR filter."], [50, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the IIR filter on a logarithmic frequency axis."], [51, 2, 1, "", "gain", "The gain of the IIR filter."], [52, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [53, 2, 1, "", "order", "The order of the IIR filter, $N$."], [54, 2, 1, "", "poles", "The poles of the IIR filter."], [55, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [56, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [57, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [58, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[44, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [44, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [44, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."], [44, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__init__": [[45, 4, 2, "p-a", "a", "The feedback coefficients $a_j$."], [45, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [45, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."]], "sdr.IIR.filter": [[48, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.IIR.frequency_response": [[49, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [49, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[50, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [50, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [50, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[52, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[56, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.LoopFilter": [[60, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [61, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [62, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [63, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [64, 3, 1, "", "filter", "Filters the input signal $x[n]$."], [65, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [66, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [67, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__init__": [[62, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [62, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [62, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [62, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.LoopFilter.filter": [[64, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.NCO": [[69, 2, 1, "", "K0", "The NCO gain $K_0$."], [70, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [71, 2, 1, "", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [72, 2, 1, "", "offset", "The absolute offset $theta$ of the NCO in units."], [73, 3, 1, "", "process", "Steps the NCO with the variable-increment signal $x[n]$."], [74, 3, 1, "", "reset", "Resets the NCO."], [75, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__init__": [[70, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [70, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [70, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in units."]], "sdr.NCO.process": [[73, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the NCO."]], "sdr.NCO.step": [[75, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.PSK": [[77, 3, 1, "", "__init__", "Creates a new PSK object."], [78, 3, 1, "", "demodulate", "Demodulates the complex symbols $hat{x}[k]$ to decimal symbols $hat{s}[k]$ using maximum-likelihood estimation."], [79, 3, 1, "", "modulate", "Modulates to decimal symbols $s[k]$ to complex symbols $x[k]$."], [80, 2, 1, "", "offset", "The phase offset $phi$ in radians."], [81, 2, 1, "", "order", "The modulation order $M$."], [82, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} -> mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[77, 4, 2, "p-offset", "offset", "The phase offset $phi$ in radians."], [77, 4, 2, "p-order", "order", "The modulation order $M$. Must be at least 2."]], "sdr.PSK.demodulate": [[78, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to demodulate."]], "sdr.PSK.modulate": [[79, 4, 2, "p-symbols", "symbols", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.Q": [[83, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[84, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.average_power": [[85, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[86, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [86, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [86, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [86, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[87, 4, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [87, 4, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.bec": [[88, 4, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [88, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[89, 4, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.bsc": [[90, 4, 2, "p-p", "p", "The probability $p$ of a bit flip."], [90, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[91, 4, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[92, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.diff_decode": [[93, 4, 2, "p-y", "y", "The input encoded data $y[k]$."], [93, 4, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[94, 4, 2, "p-x", "x", "The input uncoded data $x[k]$."], [94, 4, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[95, 4, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [95, 4, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [95, 4, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [95, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.energy": [[96, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.fspl": [[97, 4, 2, "p-d", "d", "The distance $d$ in meters between the transmitter and receiver."], [97, 4, 2, "p-f", "f", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[98, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [98, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [98, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[99, 4, 2, "p-n", "n", "The length of the Gray code."]], "sdr.hexdump": [[100, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [100, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[101, 4, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [101, 4, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [101, 4, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.pack": [[102, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [102, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [102, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[103, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[104, 4, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [104, 4, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [104, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[105, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[106, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.plot": [[107, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [108, 5, 1, "", "filter", "Plots the frequency response $H(omega)$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [109, 5, 1, "", "frequency_response", "Plots the frequency response $H(omega)$ of the filter."], [110, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [111, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [112, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [113, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [114, 5, 1, "", "phase_response", "Plots the phase response $Theta(omega)$ of the filter."], [115, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [116, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [117, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [118, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [119, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.constellation": [[107, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [107, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.filter": [[108, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [108, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [108, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [108, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [108, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [108, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [108, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.frequency_response": [[109, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [109, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [109, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [109, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [109, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [109, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[110, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [110, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [110, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [110, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [110, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [110, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.impulse_response": [[111, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [111, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [111, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.plot.periodogram": [[112, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [112, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [112, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [112, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [112, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [112, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [112, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [112, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_delay": [[113, 4, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [113, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [113, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [113, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [113, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [113, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_response": [[114, 4, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [114, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [114, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [114, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [114, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [114, 4, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [114, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.spectrogram": [[115, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [115, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [115, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [115, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [115, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [115, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [115, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[116, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [116, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [116, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.plot.time_domain": [[117, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\"."], [117, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[119, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [119, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.raised_cosine": [[120, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [120, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [120, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[121, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[122, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [122, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [122, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.unpack": [[123, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [123, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [123, 4, 2, "p-x", "x", "The input array with bpe bits per element."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"filter": [0, 125, 126, 128], "puls": [0, 127, 130], "shape": [0, 127, 130], "resampl": [0, 124], "modul": 0, "phase": [0, 128, 129], "time": [0, 128], "lock": [0, 128], "loop": [0, 128], "impair": 0, "measur": 0, "data": 0, "manipul": 0, "channel": 0, "model": 0, "link": 0, "budget": 0, "probabl": 0, "plot": 0, "configur": 0, "domain": [0, 128], "frequenc": [0, 125, 126, 128], "analysi": 0, "note": 1, "constructor": [1, 18, 24, 36, 43, 59, 68, 76], "method": [1, 18, 24, 36, 43, 59, 68, 76], "properti": [1, 18, 24, 36, 43, 59, 68, 76], "see": [18, 28, 29, 30, 33, 49, 50, 52, 56, 68, 83, 84, 92, 103, 108, 109, 110, 111, 113, 114, 116, 119], "also": [18, 28, 29, 30, 33, 49, 50, 52, 56, 68, 83, 84, 92, 103, 108, 109, 110, 111, 113, 114, 116, 119], "farrow": 124, "arbitrari": 124, "construct": 124, "an": [124, 125, 126], "input": 124, "signal": 124, "x": 124, "n": [124, 125, 126], "t_": 124, "rate": 124, "r": 124, "y": 124, "frac": 124, "upsampl": 124, "integ": 124, "downsampl": 124, "irrat": 124, "fir": 125, "creat": [125, 126], "examin": [125, 126], "impuls": [125, 126], "respons": [125, 126, 128], "h": [125, 126], "step": [125, 126, 128], "": [125, 126], "omega": [125, 126], "group": [125, 126], "delai": [125, 126], "tau_g": [125, 126], "fulli": [125, 126], "analyz": [125, 126, 128], "iir": 126, "zero": 126, "pole": 126, "digit": 126, "stabil": 126, "peak": 127, "averag": 127, "power": 127, "rectangular": 127, "squar": [127, 130], "root": [127, 130], "rais": [127, 130], "cosin": [127, 130], "design": 128, "proport": 128, "plu": 128, "integr": 128, "ppi": 128, "implement": 128, "pll": 128, "close": 128, "perform": 128, "compar": 128, "across": 128, "zeta": 128, "b_n": 128, "t": 128, "shift": 129, "kei": 129, "constel": 129, "bpsk": 129, "qpsk": 129, "8": 129, "psk": 129, "16": 129, "gaussian": 130, "sdr": 131, "featur": 131, "v0": 132, "0": 132, "2": 132, "chang": 132, "contributor": 132, "1": 132, "version": 133, "alpha": 133, "releas": 133, "beta": 133}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Filtering": [[0, "filtering"]], "Pulse shaping": [[0, "pulse-shaping"]], "Resampling": [[0, "resampling"]], "Modulation": [[0, "modulation"]], "Phase/time-locked loops": [[0, "phase-time-locked-loops"]], "Impairments": [[0, "impairments"]], "Measurement": [[0, "measurement"]], "Data manipulation": [[0, "data-manipulation"]], "Channel models": [[0, "channel-models"]], "Link budgets": [[0, "link-budgets"]], "Probability": [[0, "probability"]], "Plotting": [[0, "plotting"]], "Configuration": [[0, "configuration"]], "Time-domain": [[0, "time-domain"]], "Frequency-domain": [[0, "frequency-domain"]], "Filter analysis": [[0, "filter-analysis"]], "Note": [[1, null]], "Constructors": [[1, "constructors"], [18, "constructors"], [24, "constructors"], [36, "constructors"], [43, "constructors"], [59, "constructors"], [68, "constructors"], [76, "constructors"]], "Methods": [[1, "methods"], [18, "methods"], [24, "methods"], [36, "methods"], [43, "methods"], [59, "methods"], [68, "methods"], [76, "methods"]], "Properties": [[1, "properties"], [18, "properties"], [24, "properties"], [36, "properties"], [43, "properties"], [59, "properties"], [68, "properties"], [76, "properties"]], "See also": [[18, null], [28, null], [29, null], [30, null], [33, null], [49, null], [50, null], [52, null], [56, null], [68, null], [83, null], [84, null], [92, null], [103, null], [108, null], [109, null], [110, null], [111, null], [113, null], [114, null], [116, null], [119, null]], "Farrow arbitrary resampler": [[124, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[124, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[124, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[124, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[124, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[124, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[124, "downsample-by-an-irrational-rate"]], "FIR filters": [[125, "fir-filters"]], "Create an FIR filter": [[125, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[125, "examine-the-impulse-response-h-n"], [126, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[125, "examine-the-step-response-s-n"], [126, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[125, "examine-the-frequency-response-h-omega"], [126, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[125, "examine-the-group-delay-tau-g-omega"], [126, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[125, "fully-analyze-a-fir-filter"]], "IIR filters": [[126, "iir-filters"]], "Create an IIR filter": [[126, "create-an-iir-filter"]], "Examine the zeros and poles": [[126, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[126, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[126, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[127, "peak-to-average-power"]], "Rectangular pulse shape": [[127, "rectangular-pulse-shape"]], "Square-root raised cosine pulse shape": [[127, "square-root-raised-cosine-pulse-shape"]], "Phase-locked loops": [[128, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[128, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[128, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[128, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[128, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[128, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[128, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[128, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[129, "phase-shift-keying"]], "Constellations": [[129, "constellations"]], "BPSK": [[129, "bpsk"]], "QPSK": [[129, "qpsk"]], "8-PSK": [[129, "id1"]], "16-PSK": [[129, "id2"]], "Pulse shapes": [[130, "pulse-shapes"]], "Raised cosine": [[130, "raised-cosine"]], "Square-root raised cosine": [[130, "square-root-raised-cosine"]], "Gaussian": [[130, "gaussian"]], "sdr": [[131, "sdr"]], "Features": [[131, "features"]], "v0.0": [[132, "v0-0"]], "v0.0.2": [[132, "v0-0-2"]], "Changes": [[132, "changes"], [132, "id1"]], "Contributors": [[132, "contributors"], [132, "id2"]], "v0.0.1": [[132, "v0-0-1"]], "Versioning": [[133, "versioning"]], "Alpha releases": [[133, "alpha-releases"]], "Beta releases": [[133, "beta-releases"]]}, "indexentries": {"module": [[0, "module-sdr"]], "sdr": [[0, "module-sdr"]]}, "docurls": ["api/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.DDS/", "api/sdr.DDS.__init__/", "api/sdr.DDS.nco/", "api/sdr.DDS.process/", "api/sdr.DDS.reset/", "api/sdr.DDS.step/", "api/sdr.FIR/", "api/sdr.FIR.__init__/", "api/sdr.FIR.delay/", "api/sdr.FIR.filter/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.frequency_response_log/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.reset/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.resample/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__init__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.filter/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.filter/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.process/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.demodulate/", "api/sdr.PSK.modulate/", "api/sdr.PSK.offset/", "api/sdr.PSK.order/", "api/sdr.PSK.symbol_map/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.energy/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.plot.constellation/", "api/sdr.plot.filter/", "api/sdr.plot.frequency_response/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.raised_cosine/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.unpack/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})