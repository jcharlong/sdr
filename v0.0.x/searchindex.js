Search.setIndex({"titles": ["Conversions", "Data manipulation", "Detection", "Digital signal processing", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.Decimator", "sdr.Decimator.__call__", "sdr.Decimator.__init__", "sdr.Decimator.__repr__", "sdr.Decimator.__str__", "sdr.Decimator.delay", "sdr.Decimator.method", "sdr.Decimator.polyphase_taps", "sdr.Decimator.rate", "sdr.Decimator.reset", "sdr.Decimator.taps", "sdr.Differentiator", "sdr.Differentiator.__init__", "sdr.EnergyDetector", "sdr.EnergyDetector.p_d", "sdr.EnergyDetector.p_fa", "sdr.EnergyDetector.roc", "sdr.EnergyDetector.threshold", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__call__", "sdr.FIR.__init__", "sdr.FIR.__len__", "sdr.FIR.__repr__", "sdr.FIR.__str__", "sdr.FIR.delay", "sdr.FIR.flush", "sdr.FIR.frequency_response", "sdr.FIR.frequency_response_log", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.reset", "sdr.FIR.state", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__call__", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__call__", "sdr.IIR.__init__", "sdr.IIR.__repr__", "sdr.IIR.__str__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.state", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.Integrator", "sdr.Integrator.__init__", "sdr.Interpolator", "sdr.Interpolator.__call__", "sdr.Interpolator.__init__", "sdr.Interpolator.__repr__", "sdr.Interpolator.__str__", "sdr.Interpolator.delay", "sdr.Interpolator.method", "sdr.Interpolator.polyphase_taps", "sdr.Interpolator.rate", "sdr.Interpolator.reset", "sdr.Interpolator.taps", "sdr.LinearModulation", "sdr.LinearModulation.__init__", "sdr.LinearModulation.__repr__", "sdr.LinearModulation.__str__", "sdr.LinearModulation.ber", "sdr.LinearModulation.bps", "sdr.LinearModulation.decide_symbols", "sdr.LinearModulation.demodulate", "sdr.LinearModulation.map_symbols", "sdr.LinearModulation.modulate", "sdr.LinearModulation.order", "sdr.LinearModulation.phase_offset", "sdr.LinearModulation.pulse_shape", "sdr.LinearModulation.rx_filter", "sdr.LinearModulation.ser", "sdr.LinearModulation.sps", "sdr.LinearModulation.symbol_map", "sdr.LinearModulation.tx_filter", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__call__", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.MSK", "sdr.MSK.__init__", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__call__", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.reset", "sdr.NCO.step", "sdr.OQPSK", "sdr.OQPSK.__init__", "sdr.OQPSK.__repr__", "sdr.OQPSK.__str__", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.__repr__", "sdr.PSK.__str__", "sdr.PSK.ber", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.PiMPSK", "sdr.PiMPSK.__init__", "sdr.Q", "sdr.Qinv", "sdr.ReplicaCorrelator", "sdr.ReplicaCorrelator.p_d", "sdr.ReplicaCorrelator.p_fa", "sdr.ReplicaCorrelator.roc", "sdr.ReplicaCorrelator.threshold", "sdr.Resampler", "sdr.Resampler.__call__", "sdr.Resampler.__init__", "sdr.Resampler.__repr__", "sdr.Resampler.__str__", "sdr.Resampler.delay", "sdr.Resampler.down", "sdr.Resampler.method", "sdr.Resampler.polyphase_taps", "sdr.Resampler.rate", "sdr.Resampler.reset", "sdr.Resampler.taps", "sdr.Resampler.up", "sdr.albersheim", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.barker", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.db", "sdr.design_bandpass_fir", "sdr.design_bandstop_fir", "sdr.design_frac_delay_fir", "sdr.design_highpass_fir", "sdr.design_lowpass_fir", "sdr.design_multirate_fir", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.downsample", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.euclidean", "sdr.evm", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.half_sine", "sdr.hamming", "sdr.hexdump", "sdr.iq_imbalance", "sdr.linear", "sdr.mix", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.percent", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.eye", "sdr.plot.filter", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.magnitude_response", "sdr.plot.p_d", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.phase_tree", "sdr.plot.raster", "sdr.plot.roc", "sdr.plot.ser", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.polyphase_decompose", "sdr.ppb", "sdr.ppm", "sdr.raised_cosine", "sdr.rectangular", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.to_complex_bb", "sdr.to_real_pb", "sdr.unpack", "sdr.upsample", "sdr.wavelength", "sdr.zadoff_chu", "Sequences", "Simulation", "Synchronization", "Documentation", "Formatting", "Installation", "Unit Tests", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276], "db": [0, 4, 5, 9, 20, 22, 40, 42, 44, 46, 47, 48, 50, 111, 121, 134, 144, 148, 152, 154, 156, 161, 163, 178, 179, 180, 181, 189, 190, 191, 192, 193, 194, 195, 200, 201, 202, 203, 204, 206, 208, 209, 214, 215, 218, 219, 220, 221, 223, 224, 230, 237, 249, 252, 253, 270, 272, 273, 275], "x": [0, 1, 3, 5, 6, 7, 8, 9, 26, 27, 37, 39, 44, 46, 51, 52, 68, 69, 75, 77, 94, 96, 97, 107, 114, 116, 125, 128, 134, 144, 148, 156, 158, 159, 160, 165, 166, 179, 180, 183, 186, 188, 189, 196, 197, 198, 199, 202, 205, 206, 207, 212, 214, 215, 216, 217, 218, 220, 221, 222, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 238, 240, 241, 245, 246, 249, 251, 256, 257, 261, 265, 270, 271, 272, 276], "arraylik": [0, 1, 2, 3, 4, 5, 6, 7, 8, 26, 27, 28, 37, 39, 40, 41, 42, 43, 44, 46, 51, 52, 53, 68, 72, 75, 76, 77, 78, 94, 96, 97, 98, 107, 108, 111, 113, 114, 115, 116, 121, 134, 135, 144, 145, 148, 149, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 178, 181, 183, 184, 186, 187, 189, 190, 191, 193, 194, 196, 197, 198, 200, 201, 202, 203, 204, 206, 207, 208, 213, 215, 217, 219, 222, 226, 227, 228, 229, 230, 231, 232, 233, 236, 238, 239, 243, 244, 245, 246, 252, 253, 256, 258, 261], "ndarrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 26, 27, 33, 36, 37, 39, 40, 41, 42, 43, 44, 49, 51, 52, 58, 59, 60, 61, 64, 65, 67, 68, 69, 74, 75, 77, 81, 82, 83, 84, 86, 88, 90, 91, 93, 94, 96, 97, 103, 106, 107, 111, 113, 114, 115, 116, 119, 121, 123, 125, 128, 134, 136, 138, 143, 144, 148, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 234, 235, 237, 240, 241, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261], "float_": [0, 2, 3, 4, 5, 6, 7, 8, 39, 40, 41, 42, 43, 44, 49, 107, 111, 119, 121, 134, 138, 144, 148, 152, 154, 156, 158, 159, 160, 161, 162, 163, 164, 178, 181, 184, 187, 189, 190, 191, 192, 193, 194, 195, 200, 201, 202, 203, 204, 208, 209, 211, 215, 219, 222, 223, 237, 245, 246, 247, 248, 250, 252, 253, 254, 255, 258], "convert": [0, 3, 107, 113, 115, 134, 144, 148, 156, 189, 200, 201, 203, 204, 213, 215, 222, 245, 246, 252, 253, 254, 255], "linear": [0, 96, 98, 102, 107, 108, 134, 144, 148, 156, 165, 167, 172, 180, 189, 215, 231, 236, 238, 240, 274, 275], "unit": [0, 26, 37, 51, 65, 75, 91, 94, 96, 125, 135, 136, 145, 149, 157, 165, 180, 181, 189, 196, 197, 215, 239, 241, 265, 268, 269, 271, 274, 275], "percent": [0, 222, 275], "percentag": [0, 222], "ppm": [0, 246, 251, 261, 275], "part": [0, 241, 245, 246, 251, 271], "per": [0, 1, 27, 52, 97, 107, 108, 112, 114, 116, 122, 134, 135, 138, 144, 145, 148, 149, 156, 157, 180, 181, 200, 201, 203, 204, 207, 209, 211, 213, 217, 224, 225, 234, 245, 246, 247, 248, 250, 251, 252, 253, 256, 264, 270, 273, 275], "million": [0, 246, 251], "ppb": [0, 245, 275], "billion": [0, 245], "ebn0_to_esn0": [0, 121, 154, 200, 272, 275], "ebn0": [0, 7, 107, 111, 134, 144, 148, 152, 156, 181, 200, 201, 223, 272], "bp": [0, 107, 112, 134, 144, 148, 156, 200, 201, 203, 252, 272], "int": [0, 1, 3, 6, 7, 26, 28, 31, 34, 37, 44, 46, 47, 50, 51, 54, 57, 59, 60, 61, 62, 65, 68, 71, 75, 83, 84, 86, 87, 91, 94, 96, 98, 101, 104, 107, 108, 112, 117, 122, 134, 135, 136, 143, 144, 145, 148, 149, 156, 157, 165, 167, 170, 171, 177, 179, 180, 182, 183, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 211, 212, 213, 217, 218, 220, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 238, 239, 244, 247, 248, 250, 252, 253, 256, 257, 259, 260, 272], "ebn0_to_snr": [0, 134, 144, 148, 156, 201, 275], "esn0_to_ebn0": [0, 111, 152, 203, 275], "esn0": [0, 7, 107, 121, 134, 144, 148, 154, 156, 203, 204, 237, 272], "esn0_to_snr": [0, 204, 272, 275], "sp": [0, 6, 7, 107, 108, 114, 116, 122, 134, 135, 144, 145, 148, 149, 156, 157, 201, 204, 209, 211, 225, 234, 247, 248, 250, 252, 253, 254, 255, 270, 272, 273], "1": [0, 6, 8, 9, 16, 19, 23, 25, 26, 28, 29, 30, 33, 36, 37, 39, 40, 42, 43, 44, 51, 54, 55, 56, 57, 59, 60, 75, 76, 79, 80, 83, 84, 94, 96, 97, 98, 99, 100, 103, 106, 107, 108, 113, 114, 115, 116, 123, 125, 129, 130, 134, 135, 136, 139, 144, 145, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 276], "snr_to_ebn0": [0, 111, 152, 181, 252, 275], "snr": [0, 2, 4, 7, 39, 40, 42, 44, 46, 47, 48, 49, 50, 134, 144, 148, 156, 178, 180, 181, 230, 252, 253, 254, 255, 261, 272, 275], "snr_to_esn0": [0, 121, 154, 253, 275], "pack": [1, 44, 46, 134, 144, 148, 156, 213, 217, 274, 275], "bpe": [1, 217, 256], "int_": [1, 5, 6, 107, 113, 114, 134, 144, 148, 156, 183, 185, 186, 196, 197, 198, 210, 212, 217, 256, 261], "binari": [1, 4, 6, 135, 145, 149, 155, 157, 182, 183, 184, 185, 186, 187, 198, 217, 240, 256, 261, 272, 274, 275], "arrai": [1, 33, 36, 44, 98, 103, 106, 108, 134, 135, 136, 144, 145, 148, 149, 155, 156, 157, 167, 173, 176, 179, 182, 183, 185, 186, 196, 197, 198, 202, 205, 210, 212, 217, 218, 220, 241, 244, 256, 269], "an": [1, 2, 3, 4, 26, 37, 39, 51, 61, 75, 76, 78, 86, 94, 95, 96, 97, 108, 135, 136, 145, 149, 152, 154, 157, 160, 165, 181, 192, 217, 223, 228, 237, 256, 258, 265, 274, 275], "multipl": [1, 217, 256, 272, 275], "bit": [1, 5, 7, 44, 46, 49, 107, 111, 112, 134, 135, 144, 145, 148, 149, 152, 155, 156, 157, 181, 183, 184, 186, 187, 200, 201, 203, 213, 217, 223, 252, 256, 274, 275], "element": [1, 213, 217, 256], "unpack": [1, 44, 46, 213, 256, 272, 274, 275], "hexdump": [1, 44, 213, 274, 275], "byte": [1, 213], "width": [1, 192, 213], "16": [1, 152, 154, 155, 169, 192, 200, 201, 203, 213, 223, 237, 244, 247, 250, 252, 253, 270, 275], "str": [1, 26, 29, 30, 37, 51, 55, 56, 75, 79, 80, 94, 96, 99, 100, 107, 109, 110, 134, 144, 146, 147, 148, 150, 151, 156, 165, 168, 169, 213, 225, 231, 234, 235, 238], "return": [1, 6, 9, 17, 19, 22, 23, 26, 27, 29, 30, 37, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 65, 69, 75, 77, 79, 80, 83, 84, 86, 91, 94, 96, 97, 99, 100, 107, 109, 110, 111, 113, 114, 115, 116, 121, 128, 134, 138, 143, 144, 146, 147, 148, 150, 151, 152, 154, 156, 158, 159, 161, 162, 163, 164, 165, 168, 169, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 268, 269, 270, 272, 275], "specifi": [1, 44, 47, 48, 50, 180, 181, 198, 213, 263, 268, 269, 275], "class": [2, 3, 5, 6, 9, 26, 37, 39, 44, 46, 47, 48, 49, 50, 51, 68, 75, 94, 96, 107, 125, 134, 136, 144, 148, 156, 160, 165, 262, 268, 269, 272, 274, 275], "replicacorrel": [2, 160, 161, 162, 163, 164, 275], "implement": [2, 3, 6, 26, 37, 39, 51, 68, 75, 94, 96, 107, 125, 131, 134, 136, 144, 148, 156, 160, 165, 178, 262, 267], "clairvoy": [2, 160], "replica": [2, 160], "correl": [2, 160, 182, 259], "energydetector": [2, 39, 40, 41, 42, 43, 275], "energi": [2, 39, 111, 121, 152, 154, 160, 161, 162, 163, 164, 181, 200, 201, 202, 203, 204, 209, 211, 223, 237, 247, 248, 250, 252, 253, 274, 275], "albersheim": [2, 178, 275], "p_d": [2, 7, 39, 40, 42, 160, 161, 163, 178, 230, 236, 275], "p_fa": [2, 7, 39, 40, 41, 42, 43, 160, 161, 162, 163, 164, 178, 236], "estim": [2, 9, 107, 113, 114, 134, 144, 148, 156, 178, 231, 238, 271], "minimum": [2, 6, 134, 178, 275], "requir": [2, 27, 52, 97, 178, 263, 264, 265, 266, 275], "singl": [2, 42, 152, 154, 178], "sampl": [2, 3, 9, 16, 24, 26, 27, 31, 37, 40, 41, 42, 43, 51, 52, 57, 59, 60, 61, 65, 68, 72, 83, 84, 86, 91, 96, 97, 98, 101, 107, 108, 114, 116, 122, 125, 129, 132, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 148, 149, 156, 157, 165, 167, 170, 178, 180, 199, 201, 204, 207, 209, 211, 216, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 238, 239, 241, 247, 248, 250, 251, 252, 253, 254, 255, 257, 261, 267, 270, 271, 273, 274, 275], "given": [2, 39, 44, 46, 47, 48, 50, 68, 69, 160, 178, 206, 268, 269], "n_": [2, 40, 41, 42, 43, 178], "nc": [2, 40, 41, 42, 43, 178], "non": [2, 27, 40, 41, 42, 43, 52, 97, 178, 211, 248], "coher": [2, 40, 41, 42, 43, 178], "combin": [2, 178], "achiev": [2, 178, 272, 273], "probabl": [2, 7, 39, 40, 41, 42, 43, 158, 159, 160, 161, 162, 163, 164, 178, 183, 184, 186, 187, 198, 230, 236, 261, 275], "fals": [2, 5, 26, 28, 29, 30, 37, 38, 39, 40, 41, 42, 43, 51, 53, 55, 56, 68, 70, 75, 76, 78, 79, 80, 94, 95, 96, 97, 98, 99, 100, 134, 144, 148, 152, 154, 156, 160, 161, 162, 163, 164, 165, 167, 168, 169, 178, 179, 183, 186, 198, 202, 216, 220, 221, 224, 231, 236, 238, 241, 249, 269, 273], "alarm": [2, 39, 40, 41, 42, 43, 160, 161, 162, 163, 164, 178, 236], "p_": [2, 7, 39, 40, 41, 42, 43, 152, 154, 160, 161, 162, 163, 164, 178, 179, 180, 189, 198, 206, 215, 218, 220, 223, 231, 236, 237], "fa": [2, 7, 39, 40, 41, 42, 43, 160, 161, 162, 163, 164, 178, 236], "thi": [2, 9, 26, 46, 47, 48, 50, 51, 75, 96, 98, 107, 108, 123, 134, 138, 144, 145, 148, 149, 155, 156, 157, 165, 167, 178, 180, 181, 183, 186, 198, 199, 206, 208, 225, 229, 231, 235, 238, 241, 257, 263, 265, 266, 267, 269, 271, 272, 273], "function": [2, 7, 8, 9, 18, 37, 51, 75, 76, 94, 125, 158, 159, 178, 181, 199, 209, 223, 230, 231, 236, 237, 238, 257, 268, 269, 271, 273, 274, 275], "": [2, 3, 7, 9, 17, 19, 20, 21, 23, 24, 26, 37, 39, 46, 47, 48, 49, 50, 51, 59, 60, 65, 75, 83, 84, 91, 94, 96, 107, 108, 113, 114, 115, 116, 134, 144, 148, 156, 160, 162, 164, 165, 178, 180, 181, 201, 204, 206, 207, 214, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 238, 239, 241, 242, 251, 252, 253, 254, 255, 266, 267, 270, 272, 274, 275], "equat": [2, 17, 19, 20, 21, 22, 23, 40, 41, 43, 75, 144, 148, 156, 161, 162, 164, 178, 208], "finit": [3, 51, 274, 275], "impuls": [3, 7, 26, 37, 51, 61, 75, 86, 94, 96, 165, 190, 191, 192, 193, 194, 195, 209, 226, 228, 241, 273, 274, 275], "respons": [3, 7, 26, 37, 51, 59, 60, 61, 65, 75, 83, 84, 86, 91, 94, 96, 165, 190, 191, 192, 193, 194, 195, 209, 226, 227, 228, 229, 233, 239, 273, 274, 275], "differenti": [3, 6, 37, 38, 134, 152, 154, 196, 197, 241, 274, 275], "design_lowpass_fir": [3, 194, 275], "order": [3, 9, 26, 27, 30, 37, 44, 49, 51, 52, 56, 62, 68, 71, 75, 80, 87, 94, 96, 97, 98, 100, 107, 108, 117, 125, 129, 134, 144, 148, 149, 156, 157, 165, 167, 169, 180, 190, 191, 193, 194, 200, 201, 203, 206, 207, 209, 224, 225, 234, 235, 247, 250, 251, 252, 262, 269, 270, 271, 272, 275], "design": [3, 26, 28, 32, 96, 98, 102, 108, 145, 149, 157, 165, 167, 172, 190, 191, 192, 193, 194, 195, 263, 274, 275], "lowpass": [3, 194], "h": [3, 7, 26, 37, 39, 51, 53, 55, 56, 59, 60, 61, 75, 83, 84, 86, 94, 96, 107, 108, 119, 120, 124, 125, 134, 144, 145, 148, 149, 156, 157, 160, 165, 190, 191, 192, 193, 194, 195, 209, 225, 226, 228, 229, 233, 244, 270, 271, 273], "n": [3, 5, 6, 7, 8, 9, 26, 27, 37, 39, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 69, 75, 77, 78, 81, 83, 84, 86, 87, 91, 94, 96, 97, 107, 108, 114, 116, 119, 120, 124, 125, 128, 134, 136, 138, 143, 144, 145, 148, 149, 156, 157, 158, 159, 160, 162, 164, 165, 166, 179, 180, 181, 182, 185, 188, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 212, 214, 216, 218, 220, 221, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 238, 239, 241, 249, 251, 252, 253, 254, 255, 257, 259, 260, 261, 271, 273, 274], "us": [3, 7, 26, 28, 32, 35, 37, 38, 51, 53, 58, 63, 68, 70, 75, 76, 78, 89, 94, 95, 96, 97, 98, 102, 105, 107, 108, 113, 114, 125, 131, 134, 144, 145, 148, 149, 156, 157, 165, 167, 172, 175, 181, 184, 187, 190, 191, 192, 193, 194, 195, 206, 213, 217, 224, 225, 226, 228, 230, 231, 238, 239, 256, 263, 264, 265, 266, 268, 269, 272, 273, 274, 276], "window": [3, 26, 96, 165, 190, 191, 192, 193, 194, 195, 231, 238, 275], "method": [3, 7, 30, 32, 98, 100, 102, 167, 169, 172, 190, 191, 192, 193, 194, 195, 231, 238, 268, 269, 275], "design_highpass_fir": [3, 193, 275], "highpass": [3, 193], "design_bandpass_fir": [3, 190, 275], "bandpass": [3, 190], "design_bandstop_fir": [3, 191, 275], "bandstop": [3, 191], "infinit": [3, 75, 274, 275], "integr": [3, 9, 14, 40, 41, 42, 43, 94, 95, 125, 127, 129, 178, 262, 266, 269, 274, 275], "interpol": [3, 26, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 124, 134, 144, 148, 156, 165, 167, 177, 195, 225, 257, 270, 272, 274, 275], "polyphas": [3, 26, 27, 28, 33, 36, 96, 97, 98, 103, 106, 165, 166, 167, 173, 176, 195, 199, 244, 257, 274, 275], "decim": [3, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 107, 108, 113, 114, 115, 116, 120, 123, 134, 135, 144, 145, 148, 149, 155, 156, 157, 165, 167, 171, 195, 199, 272, 274, 275], "ration": [3, 165, 167, 195, 275], "design_multirate_fir": [3, 28, 98, 167, 195, 275], "up": [3, 165, 167, 177, 195, 208, 264], "kaiser": [3, 26, 28, 29, 30, 32, 96, 97, 98, 99, 100, 102, 165, 167, 168, 169, 172, 190, 191, 192, 193, 194, 195], "polyphase_decompos": [3, 244, 275], "tap": [3, 26, 28, 33, 36, 37, 51, 56, 67, 68, 74, 75, 81, 82, 94, 96, 98, 103, 106, 165, 167, 173, 176, 244, 268, 269], "phase": [3, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 107, 108, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 152, 153, 154, 155, 156, 157, 178, 207, 214, 216, 232, 233, 234, 244, 261, 274, 275], "decompos": [3, 26, 96, 165, 244], "h_i": [3, 26, 28, 33, 36, 37, 51, 53, 67, 96, 98, 103, 106, 165, 167, 173, 176, 244, 268], "matrix": [3, 198, 244, 261], "h_": [3, 9, 26, 33, 36, 96, 103, 106, 165, 173, 176, 244, 271], "i": [3, 9, 16, 25, 26, 27, 28, 33, 36, 37, 39, 41, 42, 43, 44, 49, 51, 52, 53, 61, 65, 66, 67, 68, 73, 75, 78, 82, 86, 91, 92, 94, 96, 97, 98, 103, 106, 108, 125, 129, 130, 132, 134, 138, 142, 144, 145, 148, 149, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 173, 176, 178, 179, 180, 181, 183, 184, 186, 187, 189, 190, 191, 192, 193, 194, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 224, 225, 226, 228, 229, 231, 235, 238, 239, 241, 244, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276], "j": [3, 26, 33, 36, 75, 78, 81, 94, 96, 103, 106, 134, 136, 144, 148, 156, 165, 173, 176, 180, 198, 214, 216, 244, 259, 268, 269, 271], "b": [3, 75, 78, 178, 181, 209, 213, 226, 228, 239, 244, 263, 264, 273], "farrowresampl": [3, 68, 69, 70, 71, 72, 73, 74, 267, 275], "cubic": [3, 68], "farrow": [3, 68, 69, 70, 71, 72, 73, 74, 274, 275], "design_frac_delay_fir": [3, 192, 275], "length": [3, 6, 7, 26, 27, 37, 42, 51, 52, 54, 61, 65, 77, 96, 97, 98, 108, 114, 116, 135, 145, 149, 157, 165, 167, 182, 185, 190, 191, 192, 193, 194, 195, 209, 210, 211, 226, 228, 231, 235, 238, 239, 247, 248, 250, 254, 259, 260, 264, 267, 270, 273], "delai": [3, 7, 26, 27, 30, 31, 37, 51, 52, 56, 57, 68, 96, 97, 100, 101, 125, 136, 165, 169, 170, 192, 196, 197, 211, 227, 232, 248, 271, 274, 275], "fraction": [3, 68, 72, 192, 209, 267, 274, 275], "mix": [3, 216, 274, 275], "freq": [3, 4, 136, 138, 207, 208, 216, 219, 258, 261, 267, 271], "float": [3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 42, 44, 46, 47, 48, 50, 59, 60, 68, 69, 75, 76, 83, 84, 85, 94, 107, 108, 118, 125, 126, 127, 129, 130, 132, 134, 135, 136, 137, 139, 140, 141, 144, 145, 148, 149, 153, 156, 157, 163, 165, 174, 179, 180, 181, 183, 186, 188, 190, 191, 192, 193, 194, 195, 206, 207, 209, 214, 216, 218, 220, 221, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 238, 240, 241, 247, 249, 250, 251, 261], "0": [3, 6, 8, 16, 26, 27, 33, 36, 37, 39, 42, 44, 51, 52, 53, 55, 56, 59, 60, 67, 75, 76, 78, 79, 80, 81, 82, 83, 84, 94, 96, 97, 98, 103, 106, 107, 108, 113, 114, 115, 116, 123, 129, 134, 135, 136, 139, 144, 145, 148, 149, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 201, 202, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 216, 217, 219, 222, 224, 225, 226, 227, 228, 229, 232, 233, 234, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 276], "time": [3, 5, 9, 16, 17, 19, 20, 21, 22, 23, 37, 51, 75, 94, 125, 129, 144, 148, 156, 179, 180, 188, 190, 191, 193, 194, 198, 199, 202, 204, 205, 207, 209, 212, 214, 216, 218, 220, 221, 225, 226, 231, 235, 238, 241, 247, 249, 250, 251, 253, 254, 255, 257, 261, 267, 268, 269, 273, 274, 275], "domain": [3, 5, 179, 180, 188, 190, 191, 193, 194, 199, 202, 205, 207, 212, 214, 216, 218, 220, 221, 226, 231, 235, 238, 241, 249, 251, 254, 255, 257, 261, 274, 275], "complex": [3, 5, 7, 39, 40, 41, 42, 43, 107, 108, 113, 114, 115, 116, 123, 134, 135, 136, 138, 143, 144, 145, 148, 149, 155, 156, 157, 160, 161, 162, 163, 164, 180, 181, 199, 206, 214, 216, 224, 225, 235, 240, 241, 254, 255, 257, 261, 267, 268, 269, 271, 272, 274, 275], "exponenti": [3, 199, 216, 254, 255, 257, 267, 268, 269], "real": [3, 40, 41, 43, 134, 144, 158, 159, 161, 162, 164, 180, 216, 225, 235, 241, 254, 255, 267, 268, 269, 271, 274, 275], "sinusoid": [3, 148, 180, 216, 254, 255, 269, 275], "to_complex_bb": [3, 254, 275], "x_r": [3, 254, 255], "complex_": [3, 7, 107, 114, 115, 116, 123, 134, 136, 138, 143, 144, 148, 155, 156, 224, 240, 254, 255, 259, 260], "passband": [3, 190, 191, 192, 193, 194, 209, 211, 247, 248, 250, 254, 255, 270, 275], "center": [3, 190, 191, 192, 193, 194, 211, 241, 248, 254, 255, 275], "f_": [3, 9, 16, 24, 27, 59, 60, 83, 84, 97, 107, 108, 122, 134, 135, 144, 145, 148, 149, 156, 157, 190, 191, 193, 194, 199, 201, 204, 207, 209, 216, 225, 226, 227, 229, 231, 232, 233, 234, 235, 238, 241, 251, 252, 253, 254, 255, 257, 267, 268, 269, 271, 273], "r": [3, 26, 27, 28, 33, 34, 36, 68, 69, 96, 97, 98, 103, 104, 106, 181, 199, 200, 201, 203, 206, 209, 216, 247, 250, 252, 254, 255, 257, 263, 264, 265, 266, 269, 270, 271, 273], "4": [3, 7, 17, 19, 26, 33, 36, 37, 40, 42, 44, 60, 79, 80, 84, 94, 96, 97, 103, 106, 134, 135, 136, 144, 145, 148, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 168, 169, 173, 176, 178, 180, 181, 182, 184, 185, 187, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 203, 204, 206, 207, 208, 209, 210, 211, 213, 214, 216, 217, 219, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 237, 239, 240, 241, 242, 243, 244, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 259, 265, 267, 269, 270, 272], "rate": [3, 5, 7, 9, 16, 24, 26, 27, 28, 30, 34, 44, 45, 46, 48, 49, 59, 60, 68, 69, 83, 84, 96, 97, 98, 100, 104, 107, 111, 121, 134, 144, 148, 152, 154, 156, 165, 166, 167, 169, 171, 174, 177, 195, 199, 200, 201, 203, 207, 216, 223, 225, 226, 227, 229, 231, 232, 233, 234, 235, 237, 238, 241, 251, 252, 254, 255, 257, 261, 274, 275], "baseband": [3, 7, 9, 134, 144, 148, 156, 216, 225, 234, 254, 255, 270, 271, 275], "x_c": [3, 254, 255], "c": [3, 9, 17, 19, 20, 21, 22, 23, 46, 47, 48, 49, 50, 107, 108, 123, 125, 134, 144, 148, 155, 156, 181, 184, 187, 208, 219, 240, 254, 255, 258, 271], "2": [3, 6, 7, 9, 17, 19, 22, 26, 29, 30, 33, 36, 37, 39, 40, 41, 42, 43, 44, 51, 55, 56, 57, 59, 60, 79, 80, 83, 84, 94, 96, 97, 99, 100, 103, 106, 107, 108, 117, 134, 136, 144, 145, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 263, 266, 267, 268, 269, 270, 271, 272, 273], "to_real_pb": [3, 255, 270, 275], "2f_": [3, 255], "upsampl": [3, 96, 165, 257, 275], "factor": [3, 5, 9, 16, 25, 108, 125, 129, 130, 145, 149, 157, 188, 199, 257, 271], "downsampl": [3, 199, 275], "bsc_capac": [4, 187, 275], "p": [4, 8, 136, 138, 158, 159, 165, 167, 173, 174, 176, 177, 183, 184, 186, 187, 195, 198, 261], "calcul": [4, 5, 181, 184, 187, 206, 208, 219, 258, 275], "symmetr": [4, 186, 187, 198, 254, 255, 261, 274], "bsc": [4, 186, 187, 198, 261, 274, 275], "bec_capac": [4, 184, 275], "erasur": [4, 183, 184, 198, 261, 274], "bec": [4, 183, 184, 198, 261, 274, 275], "awgn_capac": [4, 181, 275], "addit": [4, 180, 181, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 257, 261, 274], "white": [4, 180, 181, 261, 274], "gaussian": [4, 6, 37, 94, 180, 181, 209, 261, 274, 275], "nois": [4, 9, 10, 11, 16, 22, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 111, 121, 125, 129, 132, 134, 144, 148, 152, 154, 156, 160, 161, 162, 163, 164, 180, 181, 200, 201, 203, 204, 223, 237, 252, 253, 261, 271, 274], "awgn": [4, 134, 144, 148, 152, 154, 156, 180, 181, 206, 223, 224, 237, 254, 255, 261, 272, 274, 275], "fspl": [4, 208], "distanc": [4, 205, 208, 212, 274, 275], "free": [4, 134, 144, 148, 156, 208, 274], "space": [4, 60, 84, 208, 274], "wavelength": [4, 258, 275], "lambda": [4, 208, 258], "electromagnet": [4, 258], "wave": [4, 134, 258], "frequenc": [4, 9, 17, 19, 21, 26, 37, 51, 59, 60, 75, 83, 84, 94, 96, 125, 134, 136, 138, 165, 190, 191, 192, 193, 194, 199, 207, 208, 216, 219, 226, 227, 229, 231, 232, 233, 238, 254, 255, 257, 258, 261, 273, 274, 275], "f": [4, 17, 19, 26, 42, 59, 60, 83, 84, 96, 136, 138, 165, 178, 180, 207, 208, 209, 216, 219, 251, 258, 259, 264, 267, 268, 269, 270, 271, 272, 273], "parabolic_antenna": [4, 219, 275], "tupl": [4, 26, 37, 39, 42, 44, 46, 49, 51, 59, 60, 75, 83, 84, 94, 96, 107, 114, 134, 144, 148, 156, 160, 163, 165, 179, 202, 205, 212, 218, 219, 220, 224, 226, 227, 228, 229, 232, 233, 239, 240, 243], "gain": [4, 9, 12, 13, 14, 15, 16, 75, 76, 85, 94, 125, 126, 127, 129, 136, 137, 139, 178, 190, 191, 192, 193, 194, 208, 209, 211, 219, 247, 248, 250, 271, 274], "g": [4, 49, 219, 265], "beamwidth": [4, 219], "theta": [4, 136, 139, 141, 142, 219], "parabol": [4, 219], "reflector": [4, 219], "signal": [5, 7, 9, 17, 19, 22, 23, 26, 27, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 58, 68, 69, 75, 77, 94, 96, 97, 107, 108, 119, 125, 128, 134, 136, 138, 143, 144, 145, 148, 149, 156, 157, 160, 161, 162, 163, 164, 165, 166, 179, 180, 181, 188, 189, 190, 191, 193, 194, 195, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 212, 214, 215, 216, 218, 219, 220, 221, 225, 226, 227, 229, 231, 232, 233, 234, 235, 238, 241, 244, 249, 251, 252, 253, 254, 255, 257, 258, 268, 269, 271, 273, 274, 275], "peak_pow": [5, 218, 220, 275], "peak": [5, 134, 144, 156, 188, 206, 218, 220, 221], "average_pow": [5, 179, 218, 275], "averag": [5, 44, 134, 144, 156, 179, 180, 181, 206, 218, 231], "papr": [5, 134, 144, 156, 218, 270, 275], "ratio": [5, 22, 40, 42, 44, 46, 47, 48, 49, 50, 111, 121, 134, 144, 152, 154, 156, 161, 163, 180, 181, 200, 201, 203, 204, 218, 222, 223, 237, 245, 246, 252, 253], "peak_voltag": [5, 188, 221, 275], "bool": [5, 26, 28, 37, 38, 40, 41, 42, 43, 51, 53, 66, 68, 70, 73, 75, 76, 78, 92, 94, 95, 96, 98, 134, 144, 148, 152, 154, 156, 161, 162, 163, 164, 165, 167, 179, 202, 216, 220, 221, 224, 233, 235, 240, 241, 249], "rms_voltag": [5, 188, 249, 275], "root": [5, 6, 108, 145, 149, 157, 206, 225, 241, 249, 250, 259, 260, 268, 274], "mean": [5, 206, 231, 238, 249, 273], "squar": [5, 6, 108, 145, 149, 157, 206, 208, 219, 241, 249, 250, 268], "rm": [5, 188, 206, 249], "crest_factor": [5, 188, 218, 275], "crest": [5, 188], "euclidean": [5, 205, 274, 275], "y": [5, 6, 26, 27, 37, 51, 52, 58, 69, 75, 77, 94, 96, 97, 125, 128, 136, 138, 143, 165, 180, 183, 186, 196, 197, 198, 199, 205, 207, 212, 214, 216, 224, 229, 231, 238, 240, 241, 251, 257, 271, 272], "between": [5, 26, 28, 38, 53, 66, 70, 73, 76, 78, 92, 95, 96, 98, 165, 167, 205, 208, 212, 231, 235, 238, 271, 274], "two": [5, 190, 191, 205, 212, 225, 226, 227, 229, 231, 232, 233, 238, 259, 267, 268, 269], "ham": [5, 190, 191, 193, 194, 212, 274, 275], "errorr": [5, 44, 45, 46, 47, 48, 49, 50, 272, 275], "A": [5, 9, 17, 19, 20, 21, 22, 23, 25, 27, 37, 44, 51, 52, 94, 97, 108, 125, 145, 149, 157, 178, 185, 190, 191, 193, 194, 210, 213, 214, 219, 247, 250, 262, 264, 271], "error": [5, 7, 9, 15, 16, 22, 44, 45, 46, 48, 49, 50, 107, 111, 121, 125, 129, 134, 144, 148, 152, 154, 156, 178, 187, 206, 223, 237, 271, 274, 275], "ber": [5, 7, 44, 107, 111, 134, 144, 148, 152, 156, 223, 272, 274, 275], "symbol": [5, 7, 44, 46, 49, 96, 107, 108, 112, 113, 114, 115, 116, 121, 122, 123, 134, 135, 144, 145, 148, 149, 152, 154, 155, 156, 157, 180, 200, 201, 203, 204, 206, 207, 209, 211, 224, 225, 234, 237, 240, 247, 248, 250, 252, 253, 270, 273, 274, 275], "ser": [5, 7, 44, 107, 121, 134, 144, 148, 154, 156, 237, 272, 274, 275], "evm": [5, 206, 274, 275], "x_hat": [5, 7, 44, 46, 107, 114, 134, 144, 148, 156, 206, 224, 272], "ref": [5, 178, 190, 191, 192, 193, 194, 195, 206, 209], "vector": [5, 44, 72, 190, 191, 193, 194, 206, 231, 238, 274, 275], "magnitud": [5, 7, 182, 192, 206, 226, 229, 259, 274, 275], "hat": [5, 7, 46, 107, 113, 114, 134, 144, 148, 156, 206, 224, 240], "k": [5, 6, 7, 46, 107, 108, 112, 113, 114, 115, 116, 117, 134, 144, 148, 149, 156, 157, 196, 197, 200, 201, 203, 206, 224, 240, 252, 270, 273], "linearmodul": [6, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 148, 240, 275], "amplitud": [6, 107, 108, 214, 261, 267, 271], "arbitrari": [6, 68, 69, 70, 71, 72, 73, 74, 107, 274, 275], "psk": [6, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 180, 206, 207, 214, 223, 224, 225, 237, 240, 251, 270, 274, 275], "shift": [6, 134, 144, 148, 152, 153, 154, 155, 156, 259, 268, 269, 274, 275], "kei": [6, 134, 144, 148, 152, 153, 154, 155, 156, 274, 275], "demodul": [6, 107, 114, 134, 144, 148, 156, 272, 275], "pimpsk": [6, 156, 157, 275], "pi": [6, 26, 79, 80, 96, 97, 136, 144, 148, 156, 157, 165, 180, 199, 208, 209, 214, 216, 219, 226, 227, 228, 229, 232, 233, 239, 241, 243, 254, 255, 257, 259, 267, 268, 269, 271, 274, 275], "m": [6, 75, 78, 82, 94, 107, 108, 112, 113, 114, 115, 116, 117, 123, 134, 144, 148, 149, 155, 156, 157, 198, 200, 201, 203, 208, 240, 252, 263, 264, 265, 266, 274, 275], "oqpsk": [6, 134, 144, 145, 146, 147, 275], "offset": [6, 17, 19, 26, 37, 96, 97, 107, 108, 118, 134, 135, 136, 138, 139, 141, 144, 145, 148, 149, 153, 156, 157, 165, 207, 216, 241, 251, 261, 271, 274, 275], "quadratur": [6, 134, 144, 214], "msk": [6, 134, 135, 234, 275], "rectangular": [6, 108, 145, 149, 157, 248, 270, 273, 274, 275], "span": [6, 7, 108, 145, 149, 157, 209, 211, 225, 234, 247, 248, 250, 270, 273], "half_sin": [6, 135, 211, 275], "half": [6, 134, 144, 195, 211, 219, 274, 275], "sine": [6, 134, 211, 274, 275], "time_bandwidth": [6, 209], "raised_cosin": [6, 108, 145, 149, 157, 225, 247, 273, 275], "alpha": [6, 108, 145, 149, 157, 209, 242, 247, 250, 270, 273], "rais": [6, 37, 94, 108, 145, 149, 157, 225, 241, 247, 250, 268, 274], "cosin": [6, 37, 94, 108, 145, 149, 157, 225, 241, 247, 250, 268, 274], "rc": [6, 108, 145, 149, 157, 247], "root_raised_cosin": [6, 37, 55, 56, 94, 108, 145, 149, 157, 225, 226, 227, 228, 229, 232, 233, 239, 241, 243, 250, 268, 270, 272, 273, 275], "srrc": [6, 108, 144, 145, 148, 149, 156, 157, 225, 241, 250, 270], "binary_cod": [6, 185, 275], "gener": [6, 134, 144, 148, 156, 180, 183, 185, 186, 198, 210, 236, 263, 272, 275], "code": [6, 26, 29, 37, 51, 55, 75, 79, 94, 96, 99, 107, 109, 134, 135, 144, 145, 146, 148, 149, 150, 155, 156, 157, 165, 168, 182, 185, 200, 201, 203, 210, 224, 240, 252, 260, 265, 272, 275], "gray_cod": [6, 210, 275], "grai": [6, 134, 135, 144, 145, 148, 149, 155, 156, 157, 210, 224, 240, 272, 274], "diff_encod": [6, 134, 144, 148, 152, 154, 156, 196, 197, 275], "y_prev": [6, 196, 197], "input": [6, 9, 17, 19, 22, 23, 26, 27, 28, 31, 37, 38, 51, 52, 53, 61, 64, 65, 68, 69, 70, 72, 75, 76, 77, 78, 86, 91, 94, 95, 96, 97, 98, 101, 125, 128, 136, 138, 144, 148, 152, 154, 156, 158, 165, 166, 167, 170, 180, 181, 183, 184, 186, 187, 189, 196, 197, 198, 199, 215, 217, 222, 228, 239, 245, 246, 256, 257, 261, 268, 269, 271], "data": [6, 196, 197, 213, 217, 256, 274], "diff_decod": [6, 196, 197, 275], "decod": [6, 196], "use_styl": [7, 242], "appli": [7, 26, 96, 108, 165, 207, 214, 224, 225, 231, 238, 240, 241, 242, 251, 261], "default": [7, 61, 65, 135, 145, 149, 155, 157, 179, 202, 205, 212, 218, 220, 224, 229, 231, 235, 238, 240, 242, 272], "matplotlib": [7, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 267, 268, 269, 270, 271, 272, 273, 274], "rcparam": [7, 242], "time_domain": [7, 26, 37, 94, 96, 97, 134, 136, 144, 148, 156, 165, 180, 199, 216, 241, 254, 255, 257, 270, 272, 273, 275], "raster": [7, 225, 234, 235, 274, 275], "none": [7, 26, 37, 42, 51, 61, 65, 68, 72, 96, 108, 125, 133, 138, 145, 149, 157, 163, 165, 179, 180, 181, 183, 186, 190, 191, 193, 194, 198, 202, 205, 212, 217, 218, 220, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 238, 239, 240, 241, 256, 261, 267, 270, 272], "periodogram": [7, 199, 231, 254, 255, 257, 270, 274, 275], "power": [7, 134, 144, 148, 156, 179, 180, 181, 189, 206, 209, 211, 215, 218, 219, 220, 231, 247, 248, 250, 273, 274], "densiti": [7, 22, 231, 270, 273], "xx": [7, 231], "welch": [7, 231, 238], "spectrogram": [7, 238, 274, 275], "constel": [7, 134, 144, 148, 153, 156, 180, 206, 207, 214, 224, 251, 259, 274, 275], "symbol_map": [7, 107, 108, 123, 134, 144, 148, 153, 155, 156, 206, 240, 241, 272, 275], "map": [7, 107, 108, 115, 123, 134, 144, 148, 155, 156, 206, 240, 274, 275], "ey": [7, 134, 144, 148, 156, 225, 274, 275], "diagram": [7, 9, 26, 37, 94, 96, 125, 136, 165, 196, 197, 225, 274, 275], "phase_tre": [7, 134, 234, 275], "tree": [7, 234, 275], "continu": [7, 134, 234, 267, 275], "cpm": [7, 234, 275], "kwarg": [7, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243], "e_b": [7, 46, 47, 48, 49, 50, 107, 111, 134, 144, 148, 152, 156, 181, 200, 201, 203, 223, 252, 274], "n_0": [7, 22, 46, 47, 48, 49, 50, 107, 111, 121, 134, 144, 148, 152, 154, 156, 180, 181, 200, 201, 203, 204, 206, 223, 224, 237, 252, 253, 272, 274], "e_": [7, 46, 47, 48, 49, 50, 107, 121, 134, 144, 148, 154, 156, 180, 181, 200, 203, 204, 206, 224, 237, 253, 272, 274], "roc": [7, 39, 42, 160, 163, 236, 275], "receiv": [7, 39, 40, 42, 44, 46, 107, 113, 114, 120, 134, 144, 148, 152, 154, 156, 160, 161, 162, 163, 164, 206, 208, 225, 230, 236, 275], "oper": [7, 39, 42, 160, 163, 236, 275], "characterist": [7, 39, 42, 160, 163, 236, 275], "curv": [7, 39, 42, 152, 154, 160, 163, 223, 236, 237, 275], "enr": [7, 160, 161, 163, 230], "impulse_respons": [7, 26, 37, 51, 61, 75, 86, 94, 96, 165, 190, 191, 192, 193, 194, 195, 209, 211, 228, 247, 248, 250, 268, 269, 273, 275], "step_respons": [7, 26, 37, 51, 65, 75, 91, 94, 96, 165, 239, 268, 269, 271, 275], "step": [7, 26, 37, 51, 65, 75, 91, 94, 96, 136, 138, 143, 165, 226, 239, 274], "zeros_pol": [7, 243, 269, 275], "zero": [7, 26, 27, 37, 51, 58, 72, 75, 76, 79, 80, 93, 94, 96, 97, 98, 125, 138, 165, 167, 192, 211, 217, 226, 227, 228, 229, 232, 233, 239, 241, 243, 248, 254, 268, 270, 271, 273, 274, 275], "pole": [7, 75, 76, 79, 80, 88, 94, 226, 227, 228, 229, 232, 233, 239, 243, 268, 274], "magnitude_respons": [7, 37, 59, 60, 83, 84, 94, 190, 191, 192, 193, 194, 195, 211, 229, 247, 248, 250, 268, 269, 271, 273, 275], "omega": [7, 26, 37, 51, 59, 60, 75, 83, 84, 94, 96, 136, 139, 140, 142, 165, 226, 227, 229, 232, 233, 271], "phase_respons": [7, 59, 60, 83, 84, 233, 275], "angl": [7, 233, 271], "phase_delai": [7, 232, 275], "tau_": [7, 232], "phi": [7, 107, 108, 118, 134, 135, 144, 145, 148, 149, 153, 156, 157, 207, 214, 216, 232], "group_delai": [7, 192, 227, 268, 269, 275], "group": [7, 192, 227, 274], "tau_g": [7, 227], "iir": [7, 9, 18, 60, 61, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 125, 131, 226, 227, 228, 229, 232, 233, 239, 243, 268, 271, 274, 275], "q": [8, 134, 144, 158, 159, 160, 161, 162, 164, 165, 167, 171, 174, 195, 259, 275], "comput": [8, 26, 39, 40, 41, 42, 43, 107, 111, 121, 134, 144, 148, 152, 154, 156, 158, 159, 160, 161, 162, 163, 164, 179, 180, 202, 205, 208, 212, 218, 220, 268, 269, 271, 273, 275], "complementari": [8, 158, 159], "cumul": [8, 158, 159], "distribut": [8, 158, 159], "standard": [8, 158, 159], "normal": [8, 9, 11, 16, 125, 129, 132, 158, 159, 190, 191, 193, 194, 206, 209, 211, 226, 227, 229, 231, 232, 233, 238, 247, 248, 250, 271, 273], "mathcal": [8, 39, 158, 159, 160, 161, 162, 163, 164, 180, 198], "qinv": [8, 158, 159, 275], "invers": [8, 159], "closedlooppl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 262, 271, 275], "defin": [9, 51, 75, 180, 198, 209, 236, 259, 262, 269, 274], "perform": [9, 27, 52, 97, 152, 154, 192, 199, 257, 259, 262, 268, 269, 272, 274, 275], "close": [9, 16, 18, 262, 274, 275], "loop": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 262, 274, 275], "pll": [9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 262, 274, 275], "meant": 9, "analysi": [9, 16, 264, 271, 274, 275], "onli": [9, 27, 35, 52, 58, 63, 68, 72, 89, 97, 105, 108, 135, 145, 149, 155, 157, 175, 180, 190, 191, 193, 194, 208, 211, 235, 248, 266, 271, 272], "block": [9, 26, 37, 94, 96, 125, 136, 165, 196, 197], "bb": [9, 270, 271], "phase_err": 9, "ped": [9, 15, 16, 129, 271], "lf": [9, 271], "phase_est": 9, "lo": [9, 271], "nco": [9, 12, 16, 129, 136, 137, 138, 139, 140, 141, 142, 143, 262, 271, 274, 275], "local": [9, 263, 271], "oscil": [9, 136, 139, 262, 271, 274, 275], "detector": [9, 15, 16, 39, 129, 160, 271, 275], "filter": [9, 13, 14, 16, 18, 26, 27, 28, 31, 32, 33, 35, 36, 37, 38, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 105, 106, 107, 114, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 144, 148, 156, 165, 166, 167, 170, 172, 173, 175, 176, 190, 191, 192, 193, 194, 195, 199, 209, 211, 225, 226, 227, 228, 229, 232, 233, 239, 241, 243, 244, 247, 248, 250, 257, 262, 273, 274, 275], "numer": [9, 136, 139, 262, 269, 271, 274, 275], "control": [9, 136, 139, 247, 250, 262, 271, 274, 275], "The": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 94, 96, 97, 98, 101, 102, 103, 104, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263, 264, 265, 266, 268, 269, 271, 272, 273, 274, 276], "transfer": [9, 18, 37, 51, 75, 76, 94, 125, 209, 268, 269, 271], "2nd": [9, 125, 129, 262, 271, 275], "proport": [9, 13, 27, 97, 125, 126, 129, 208, 219, 262, 275], "plu": [9, 125, 129, 262, 275], "z": [9, 37, 51, 75, 94, 125, 136, 196, 197, 259, 268, 269, 271], "k_1": [9, 13, 125, 126, 271], "k_2": [9, 14, 125, 127, 271], "frac": [9, 17, 19, 22, 23, 37, 39, 40, 41, 43, 51, 57, 75, 94, 98, 125, 144, 148, 156, 160, 161, 162, 167, 178, 179, 180, 181, 188, 200, 201, 203, 204, 206, 208, 209, 214, 215, 216, 218, 219, 249, 252, 253, 258, 259, 271], "k_0": [9, 12, 16, 129, 136, 137, 139, 271], "k_p": [9, 15, 16, 129, 271], "refer": [9, 17, 19, 20, 21, 22, 23, 39, 40, 41, 43, 44, 68, 125, 152, 154, 160, 161, 162, 164, 178, 180, 188, 190, 191, 192, 193, 194, 195, 206, 207, 209, 218, 244, 247, 250, 251, 259, 269, 273, 274], "michael": [9, 17, 19, 20, 21, 22, 23, 125, 247, 250], "rice": [9, 17, 19, 20, 21, 22, 23, 125, 247, 250], "digit": [9, 17, 19, 20, 21, 22, 23, 125, 152, 154, 247, 250, 271, 274, 275], "commun": [9, 17, 19, 20, 21, 22, 23, 125, 152, 154, 195, 244, 247, 250, 271, 274], "discret": [9, 17, 19, 20, 21, 22, 23, 37, 94, 125, 180, 198, 204, 247, 250, 253, 261, 267, 271, 274, 275], "approach": [9, 17, 19, 20, 21, 22, 23, 125, 181, 184, 187, 247, 250, 271], "appendix": [9, 125, 247, 250], "lock": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143], "exampl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 33, 35, 36, 37, 38, 40, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 103, 105, 106, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 152, 153, 154, 155, 156, 158, 159, 161, 163, 165, 168, 169, 173, 175, 176, 178, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 271], "see": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 35, 38, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 85, 87, 88, 89, 90, 92, 93, 95, 105, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 153, 155, 156, 165, 175, 190, 191, 193, 194, 199, 209, 211, 226, 227, 228, 229, 232, 233, 239, 243, 247, 248, 250, 274], "noise_bandwidth": [9, 16, 125, 129, 132], "damping_factor": [9, 16, 125, 129, 130], "creat": [9, 16, 26, 28, 37, 38, 44, 45, 51, 53, 68, 70, 75, 76, 78, 94, 95, 96, 97, 98, 107, 108, 125, 129, 134, 135, 136, 139, 144, 145, 148, 149, 153, 156, 157, 165, 167, 180, 182, 206, 207, 216, 241, 251, 254, 255, 259, 267, 271, 273], "object": [9, 16, 26, 29, 30, 37, 44, 45, 51, 55, 56, 75, 79, 80, 94, 96, 99, 100, 107, 108, 109, 110, 134, 135, 144, 145, 146, 147, 148, 149, 150, 151, 156, 157, 165, 168, 169, 226, 227, 228, 229, 232, 233, 239, 243, 271, 275], "phase_lock_tim": [9, 23], "frequency_lock_tim": [9, 17], "freq_offset": [9, 17, 19], "lock_tim": [9, 19, 271], "phase_error_vari": [9, 22], "cn0": [9, 22], "varianc": [9, 22, 39, 41, 43, 162, 164, 180], "steadi": [9, 22], "state": [9, 22, 26, 27, 35, 37, 51, 52, 58, 63, 64, 66, 68, 72, 73, 75, 89, 90, 92, 94, 96, 97, 105, 165, 175, 275], "sample_r": [9, 16, 24, 26, 59, 60, 83, 84, 96, 97, 134, 144, 148, 156, 165, 199, 207, 216, 225, 226, 227, 229, 231, 232, 233, 234, 235, 238, 241, 254, 255, 257, 267, 271, 273], "bnt": [9, 11, 271], "bandwidth": [9, 10, 11, 16, 20, 125, 129, 132, 181, 190, 191, 209, 247, 250, 271, 273], "b_n": [9, 10, 11, 16, 17, 19, 22, 23, 125, 129, 132], "t": [9, 11, 16, 39, 125, 129, 132, 160, 209, 213, 263, 267], "bn": [9, 10], "hz": [9, 10, 16, 17, 19, 22, 59, 60, 83, 84, 125, 129, 132, 181, 189, 199, 207, 208, 209, 215, 216, 219, 254, 255, 258, 267], "zeta": [9, 16, 25, 125, 129, 130], "damp": [9, 16, 25, 125, 129, 130, 271], "k0": [9, 12, 16, 129, 136, 137, 139], "kp": [9, 15, 16, 129], "k1": [9, 13, 125, 126, 271], "k2": [9, 14, 125, 127, 271], "repres": [9, 18, 183, 184], "omega_n": [9, 21, 271], "natur": [9, 21], "radian": [9, 20, 21, 22, 136, 138, 139, 140, 141, 142, 156, 271], "omega_3db": [9, 20], "3": [9, 17, 19, 20, 23, 26, 33, 36, 37, 39, 40, 44, 55, 56, 79, 80, 94, 96, 97, 103, 106, 134, 136, 144, 148, 152, 153, 154, 155, 156, 160, 161, 165, 168, 169, 173, 176, 178, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 203, 204, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 224, 225, 226, 227, 228, 229, 232, 233, 239, 241, 243, 244, 247, 248, 250, 251, 252, 254, 255, 256, 257, 258, 259, 263, 264, 269, 271, 273, 274], "omega_": [9, 20], "textrm": [9, 20], "properti": [10, 11, 12, 13, 14, 15, 18, 20, 21, 24, 25, 31, 32, 33, 34, 36, 57, 62, 64, 66, 67, 71, 73, 74, 81, 82, 85, 87, 88, 90, 92, 93, 101, 102, 103, 104, 106, 112, 117, 118, 119, 120, 122, 123, 124, 126, 127, 130, 131, 132, 137, 140, 141, 153, 155, 170, 171, 172, 173, 174, 176, 177, 275], "paramet": [16, 17, 19, 22, 27, 28, 38, 40, 41, 42, 43, 46, 47, 48, 50, 52, 53, 59, 60, 61, 65, 69, 70, 72, 76, 77, 78, 83, 84, 86, 91, 95, 97, 98, 108, 111, 113, 114, 115, 116, 121, 128, 129, 135, 138, 139, 143, 145, 149, 152, 154, 157, 158, 159, 161, 162, 163, 164, 167, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "where": [16, 27, 52, 97, 108, 125, 129, 132, 149, 157, 160, 180, 181, 198, 200, 201, 203, 209, 252, 259, 268, 269, 274], "period": [16, 125, 129, 132, 134, 259], "second": [16, 17, 19, 23, 44, 125, 129, 132, 209], "critic": [16, 25, 125, 129, 130, 271], "underdamp": [16, 25, 125, 129, 130], "overdamp": [16, 25, 125, 129, 130], "ted": [16, 129], "t_": [17, 19, 23, 69, 209, 273], "fl": [17, 19], "delta": [17, 19, 26, 37, 51, 61, 75, 86, 94, 96, 165, 192, 228, 268, 269], "take": [17, 19, 23, 263], "onto": [17, 19, 23], "39": 17, "pl": [19, 23], "38": 19, "34": 20, "33": 21, "sigma_": [22, 39, 40, 42], "theta_": 22, "carrier": [22, 148], "43": 22, "40": [23, 96, 165, 199], "less": [25, 178], "than": [25, 134, 135, 145, 149, 155, 157, 178, 211, 214, 224, 240, 248], "greater": [25, 247, 250], "fir": [26, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 96, 97, 98, 99, 100, 101, 103, 105, 106, 165, 166, 167, 168, 169, 170, 173, 175, 176, 190, 191, 192, 193, 194, 195, 225, 226, 227, 228, 229, 232, 233, 239, 243, 244, 270, 274, 275], "note": [26, 33, 36, 37, 39, 40, 41, 43, 51, 75, 94, 96, 103, 106, 125, 134, 136, 144, 148, 156, 160, 161, 162, 164, 165, 173, 176, 178, 180, 181, 184, 187, 192, 196, 197, 209, 214, 219, 225, 244, 259], "equival": [26, 96, 165, 180, 181, 190, 191, 192, 193, 194, 204, 253, 265, 267], "first": [26, 31, 44, 96, 98, 101, 134, 142, 144, 165, 167, 170, 217, 241, 256, 264, 266], "prototyp": [26, 33, 36, 96, 103, 106, 165, 173, 176], "feedforward": [26, 28, 33, 36, 37, 51, 53, 67, 75, 78, 82, 94, 96, 98, 103, 106, 165, 167, 173, 176, 226, 227, 228, 229, 232, 233, 239, 243, 268, 269], "coeffici": [26, 28, 51, 53, 75, 78, 96, 98, 107, 120, 124, 134, 144, 148, 156, 165, 167, 226, 227, 228, 229, 232, 233, 239, 243, 268, 269], "discard": [26, 165], "each": [26, 27, 52, 96, 97, 165, 206, 213, 231, 235, 238], "instead": [26, 96, 165, 224], "ar": [26, 27, 28, 33, 36, 38, 39, 44, 46, 47, 48, 50, 52, 53, 60, 70, 76, 78, 84, 95, 96, 97, 98, 103, 106, 107, 108, 120, 124, 134, 135, 144, 145, 148, 149, 156, 157, 160, 165, 167, 173, 176, 181, 183, 184, 186, 187, 192, 208, 211, 217, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 238, 240, 241, 242, 244, 248, 254, 255, 263, 265, 267, 269, 271, 273, 274, 276], "commut": [26, 96, 165], "parallel": [26, 96, 165], "output": [26, 27, 31, 37, 51, 52, 61, 65, 75, 76, 78, 86, 91, 94, 95, 96, 97, 98, 101, 114, 125, 128, 136, 138, 142, 143, 165, 167, 170, 180, 181, 182, 183, 184, 186, 187, 197, 198, 206, 215, 217, 228, 239, 256, 260, 263, 267, 268, 269, 271], "sum": [26, 39, 51, 75, 160, 273], "prevent": [26, 96, 144, 156, 165], "need": [26, 96, 165, 263, 264, 266], "done": [26, 263], "case": [26, 96, 156, 160, 165], "3x": [26, 96], "6": [26, 33, 36, 37, 44, 55, 56, 79, 80, 94, 96, 97, 103, 106, 134, 136, 144, 148, 155, 156, 161, 162, 164, 165, 173, 176, 178, 185, 189, 192, 198, 199, 200, 201, 206, 208, 210, 213, 215, 219, 224, 225, 226, 227, 228, 229, 232, 233, 239, 240, 241, 243, 244, 247, 250, 254, 255, 257, 259, 263, 264, 265, 266, 268, 269, 271, 272], "9": [26, 33, 36, 96, 97, 103, 106, 134, 144, 148, 156, 161, 165, 173, 176, 178, 185, 198, 206, 210, 213, 244, 247, 250, 263, 269, 270, 272, 273], "v": [26, 136, 189, 215, 263], "5": [26, 33, 36, 37, 39, 40, 41, 42, 43, 44, 55, 56, 94, 96, 97, 103, 106, 134, 136, 144, 148, 156, 161, 163, 165, 173, 176, 178, 180, 183, 185, 186, 187, 190, 191, 192, 193, 194, 198, 199, 200, 201, 203, 204, 206, 207, 208, 209, 210, 213, 214, 219, 222, 225, 226, 227, 228, 229, 232, 233, 239, 241, 243, 244, 247, 250, 251, 252, 253, 254, 255, 257, 259, 263, 267, 268, 269, 270, 271, 272, 273], "7": [26, 29, 30, 33, 36, 96, 97, 99, 100, 103, 106, 134, 144, 148, 155, 156, 161, 165, 173, 176, 178, 185, 192, 193, 195, 198, 206, 210, 213, 241, 244, 259, 263, 269], "8": [26, 33, 36, 37, 40, 42, 79, 80, 94, 96, 97, 103, 106, 108, 134, 135, 136, 144, 145, 148, 149, 152, 153, 154, 155, 156, 157, 161, 163, 165, 173, 176, 178, 180, 181, 182, 184, 185, 187, 190, 191, 192, 193, 194, 195, 198, 199, 206, 208, 209, 210, 211, 213, 216, 219, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 237, 239, 240, 241, 242, 243, 244, 247, 248, 250, 254, 255, 257, 259, 268, 269, 270, 271, 273], "summat": 26, "bottom": [26, 96, 165], "top": [26, 96, 165], "adder": [26, 125, 136, 196, 197, 271], "relat": [26, 33, 36, 96, 103, 106, 165, 173, 176, 181, 209], "In": [26, 27, 28, 29, 30, 33, 36, 37, 38, 40, 42, 44, 52, 53, 55, 56, 66, 70, 73, 76, 78, 79, 80, 92, 94, 95, 96, 97, 98, 99, 100, 103, 106, 134, 136, 144, 148, 152, 153, 154, 155, 156, 158, 159, 161, 163, 165, 167, 168, 169, 173, 176, 178, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 267, 272], "np": [26, 33, 36, 40, 42, 79, 80, 96, 97, 103, 106, 107, 119, 123, 134, 136, 144, 148, 152, 154, 155, 156, 161, 163, 165, 173, 176, 178, 180, 181, 182, 183, 184, 186, 187, 198, 199, 206, 207, 208, 214, 216, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 237, 239, 241, 243, 244, 251, 254, 255, 257, 259, 267, 268, 269, 270, 271, 272, 273], "co": [26, 96, 97, 165, 216], "64": [26, 192, 213, 269], "arang": [26, 33, 36, 96, 97, 103, 106, 165, 173, 176, 180, 182, 199, 216, 244, 254, 255, 257, 259, 267, 271], "280": 26, "out": [26, 29, 33, 36, 44, 55, 79, 96, 97, 99, 103, 106, 134, 144, 148, 153, 155, 156, 158, 159, 165, 168, 173, 176, 182, 183, 185, 186, 189, 196, 197, 198, 200, 201, 203, 204, 206, 208, 210, 215, 217, 219, 222, 227, 242, 244, 245, 246, 252, 253, 256, 258], "plt": [26, 37, 40, 42, 94, 96, 97, 134, 136, 144, 148, 152, 153, 154, 155, 156, 161, 163, 165, 178, 180, 181, 182, 184, 187, 190, 191, 192, 193, 194, 195, 199, 206, 207, 208, 209, 211, 214, 216, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 237, 239, 240, 241, 243, 247, 248, 250, 251, 254, 255, 257, 259, 267, 268, 269, 270, 271, 272, 273], "figur": [26, 37, 40, 42, 94, 96, 97, 134, 136, 144, 148, 152, 153, 154, 155, 156, 161, 163, 165, 178, 180, 181, 182, 184, 187, 190, 191, 192, 193, 194, 195, 199, 206, 207, 208, 209, 211, 214, 216, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 237, 239, 240, 241, 242, 243, 247, 248, 250, 251, 254, 255, 257, 259, 267, 268, 269, 270, 271, 272, 273], "figsiz": [26, 37, 40, 42, 94, 96, 97, 134, 136, 144, 148, 152, 153, 154, 155, 156, 161, 163, 165, 178, 180, 181, 182, 184, 187, 190, 191, 192, 193, 194, 195, 199, 206, 207, 208, 209, 211, 214, 216, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 237, 239, 240, 241, 242, 243, 247, 248, 250, 251, 254, 255, 257, 259, 267, 268, 269, 270, 271, 272, 273], "plot": [26, 37, 40, 42, 59, 60, 61, 65, 83, 84, 86, 91, 94, 96, 97, 134, 136, 144, 148, 152, 153, 154, 155, 156, 161, 163, 165, 180, 181, 182, 184, 187, 190, 191, 192, 193, 194, 195, 199, 206, 207, 208, 209, 211, 214, 216, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 247, 248, 250, 251, 254, 255, 257, 259, 267, 268, 269, 271, 272, 273, 274, 275], "marker": [26, 96, 97, 136, 165, 224, 240, 267, 268, 269, 272], "label": [26, 37, 40, 42, 94, 96, 97, 135, 145, 149, 152, 154, 157, 161, 163, 165, 178, 180, 190, 191, 192, 193, 194, 206, 207, 209, 214, 223, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 237, 238, 241, 247, 250, 251, 267, 270, 271, 272, 273], "o": [26, 96, 97, 165, 267], "titl": [26, 37, 94, 96, 134, 136, 144, 152, 154, 165, 178, 180, 181, 182, 184, 187, 199, 206, 207, 214, 216, 223, 237, 241, 251, 254, 255, 257, 259, 267, 270, 271, 272, 273], "tight_layout": [26, 37, 94, 96, 134, 136, 144, 152, 154, 165, 178, 180, 181, 182, 184, 187, 199, 206, 207, 208, 216, 223, 237, 241, 251, 254, 255, 257, 259, 270, 271, 272, 273], "preserv": [26, 28, 38, 53, 66, 70, 73, 76, 78, 92, 95, 96, 98, 165, 167, 225, 235], "call": [26, 27, 28, 38, 52, 53, 66, 70, 73, 76, 78, 92, 95, 96, 97, 98, 165, 167], "true": [26, 40, 41, 42, 43, 96, 97, 134, 144, 148, 152, 154, 156, 161, 162, 163, 164, 165, 178, 179, 181, 183, 184, 186, 187, 198, 202, 208, 216, 220, 221, 224, 233, 235, 240, 242, 249, 270, 272], "y1": [26, 96, 97, 165, 214], "70": [26, 213, 273], "y2": [26, 96, 97, 165, 214], "140": [26, 199], "y3": [26, 96, 97, 165], "210": 26, "y4": [26, 96, 165], "y5": [26, 96, 165], "flush": [26, 27, 37, 51, 52, 58, 96, 97, 165, 275], "y_1": [26, 96, 165, 214], "y_2": [26, 96, 165, 214], "y_3": [26, 96, 165], "y_4": [26, 96, 165], "y_5": [26, 96, 165], "__call__": [26, 27, 28, 37, 38, 51, 52, 53, 66, 68, 69, 70, 73, 75, 76, 77, 78, 92, 94, 95, 96, 97, 98, 125, 128, 136, 138, 165, 166, 167, 275], "full": [26, 27, 52, 96, 97, 165, 166, 182], "__len__": [26, 37, 51, 54, 96, 165], "__repr__": [26, 29, 37, 51, 55, 75, 79, 94, 96, 99, 107, 109, 134, 144, 146, 148, 150, 156, 165, 168], "style": [26, 29, 37, 51, 55, 75, 79, 94, 96, 99, 107, 109, 134, 144, 146, 148, 150, 156, 165, 168, 242], "__str__": [26, 30, 37, 51, 56, 75, 80, 94, 96, 100, 107, 110, 134, 144, 147, 148, 151, 156, 165, 169], "human": [26, 30, 37, 51, 56, 75, 80, 94, 96, 100, 107, 110, 134, 144, 147, 148, 151, 156, 165, 169], "readabl": [26, 30, 37, 51, 56, 75, 80, 94, 96, 100, 107, 110, 134, 144, 147, 148, 151, 156, 165, 169], "reset": [26, 35, 37, 51, 63, 68, 72, 75, 89, 94, 96, 105, 125, 133, 136, 142, 165, 175], "when": [26, 35, 37, 51, 58, 61, 63, 65, 75, 86, 89, 91, 94, 96, 105, 165, 175, 180, 181, 183, 184, 186, 187, 204, 226, 227, 228, 229, 232, 233, 239, 253, 259, 267, 268, 269], "pass": [26, 37, 51, 58, 96, 165, 180, 183, 186, 198, 206, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 261, 263, 265, 268, 269, 275], "through": [26, 37, 51, 58, 96, 144, 156, 165, 183, 186, 198, 261, 268, 269, 271], "indic": [26, 28, 31, 37, 38, 41, 42, 43, 51, 53, 66, 68, 70, 73, 75, 76, 78, 92, 94, 95, 96, 98, 101, 108, 135, 144, 145, 148, 149, 152, 154, 156, 157, 161, 162, 163, 164, 165, 167, 170, 179, 202, 209, 211, 214, 216, 220, 221, 225, 233, 234, 235, 241, 247, 248, 249, 250], "whether": [26, 28, 37, 38, 41, 42, 43, 51, 53, 66, 68, 70, 73, 75, 76, 78, 92, 94, 95, 96, 98, 152, 154, 161, 162, 163, 164, 165, 167, 179, 202, 216, 220, 221, 233, 235, 241, 249], "consist": [26, 37, 46, 47, 48, 49, 50, 51, 64, 96, 165], "previou": [26, 28, 37, 38, 51, 53, 64, 70, 72, 76, 78, 95, 96, 98, 165, 167, 196, 197], "u": [26, 37, 51, 65, 75, 91, 94, 96, 165, 178, 239, 259, 260, 268, 269], "frequency_respons": [26, 37, 51, 59, 75, 83, 94, 96, 165, 275], "frequency_response_log": [26, 37, 51, 60, 75, 84, 94, 96, 165], "logarithm": [26, 37, 51, 60, 75, 84, 94, 96, 165, 226, 227, 229, 231, 232, 233, 268, 269], "axi": [26, 37, 51, 60, 75, 84, 94, 96, 165, 179, 202, 205, 212, 218, 220, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 238, 240, 241, 267, 275], "custom": [26, 32, 96, 102, 108, 145, 149, 157, 165, 172, 190, 191, 193, 194, 275], "multir": [26, 27, 28, 32, 96, 97, 98, 102, 165, 167, 172, 195, 244, 275], "polyphase_tap": [26, 30, 33, 36, 96, 97, 100, 103, 106, 165, 169, 173, 176], "index": [26, 31, 68, 72, 96, 101, 165, 170, 225, 234, 235, 240, 263], "correspond": [26, 31, 44, 49, 96, 101, 165, 170, 235], "mode": [27, 28, 35, 38, 52, 53, 58, 63, 66, 68, 70, 72, 73, 76, 78, 89, 92, 95, 97, 98, 105, 166, 167, 175, 182, 259], "l": [27, 52, 77, 97, 192], "stream": [27, 28, 29, 30, 35, 38, 52, 53, 55, 56, 58, 63, 66, 68, 70, 72, 73, 76, 78, 79, 80, 89, 92, 95, 97, 98, 99, 100, 105, 134, 144, 148, 156, 167, 168, 169, 175, 269], "convolut": [27, 52, 96, 97], "ha": [27, 52, 96, 97, 134, 144, 148, 180, 190, 191, 192, 193, 194, 199, 208, 209, 219, 257, 259, 271, 272, 273], "align": [27, 52, 97, 98, 144, 167, 267], "howev": [27, 46, 47, 48, 50, 52, 97, 125, 184, 187, 267], "produc": [27, 52, 96, 97, 165, 209, 273], "final": [27, 52, 97], "dictat": [27, 52, 97], "argument": [27, 28, 52, 97, 98, 167, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 268, 269], "specif": [28, 49, 98, 167, 266, 273], "npt": [28, 98, 108, 135, 145, 149, 157, 167, 190, 191, 193, 194, 226, 227, 228, 229, 232, 233, 239, 243], "string": [29, 30, 55, 56, 79, 80, 99, 100, 108, 109, 110, 145, 146, 147, 149, 150, 151, 157, 168, 169, 213, 231, 238, 275], "represent": [29, 30, 55, 56, 79, 80, 99, 100, 109, 110, 146, 147, 150, 151, 168, 169, 240, 275], "print": [30, 56, 80, 100, 169, 213, 267, 268, 269, 271], "167": [30, 100], "24": [30, 100, 169], "shape": [30, 56, 80, 97, 100, 107, 108, 114, 116, 119, 120, 124, 134, 144, 145, 148, 149, 156, 157, 169, 209, 211, 225, 241, 247, 248, 250, 269, 274, 275], "12": [30, 96, 134, 144, 148, 156, 162, 164, 178, 185, 195, 210, 244, 268, 272, 275], "befor": [33, 36, 103, 106, 173, 176, 276], "decomposit": [33, 36, 103, 106, 173, 176, 275], "after": [33, 36, 103, 106, 173, 176], "10": [33, 36, 37, 40, 42, 44, 94, 96, 97, 103, 106, 108, 134, 144, 145, 148, 149, 152, 154, 156, 157, 161, 163, 165, 173, 176, 178, 179, 180, 185, 189, 190, 191, 193, 194, 198, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 232, 233, 237, 239, 241, 243, 244, 247, 248, 249, 250, 251, 252, 253, 267, 268, 269, 270, 271, 272, 273], "puls": [37, 94, 107, 108, 114, 116, 119, 120, 124, 134, 144, 145, 148, 149, 156, 157, 209, 211, 225, 241, 247, 248, 250, 274, 275], "deriv": 37, "d": [37, 51, 57, 205, 208, 212, 219, 263, 265, 274], "lfloor": [37, 51, 57], "rfloor": [37, 51, 57], "null": [39, 160, 229, 231, 273], "altern": [39, 160, 269], "hypothes": [39, 160], "follow": [39, 44, 214, 224, 235, 238, 240, 242, 244, 271], "assum": [39, 160, 180, 198, 217, 256], "valu": [39, 107, 108, 111, 121, 134, 135, 144, 145, 148, 149, 152, 154, 156, 157, 158, 159, 182, 189, 196, 197, 209, 214, 215, 224, 240, 269, 275], "random": [39, 134, 144, 148, 156, 180, 183, 186, 198, 206, 207, 214, 224, 225, 234, 241, 251, 270, 272], "process": [39, 40, 41, 43, 160, 161, 162, 164, 195, 244, 269, 271, 274], "w": [39, 160, 180, 267, 268, 269, 270, 271, 272, 273], "sigma": [39, 40, 41, 42, 43, 160, 161, 162, 163, 164, 180, 181], "_0": [39, 160], "_1": [39, 160], "test": [39, 160, 265, 274], "statist": [39, 40, 41, 43, 160, 161, 162, 164], "limits_": [39, 51, 75, 160], "left": [39, 40, 41, 75, 144, 148, 156, 160, 161, 162, 164, 178, 179, 180, 181, 202, 205, 206, 208, 209, 214, 216, 219, 220, 221, 249, 259], "right": [39, 40, 41, 75, 144, 148, 156, 160, 161, 162, 164, 178, 179, 180, 181, 202, 205, 206, 208, 209, 214, 216, 219, 220, 221, 249, 259], "gamma": [39, 41, 43, 160, 162, 164, 178], "sim": [39, 160, 180, 264], "chi_": [39, 40, 41], "2n": [39, 40, 41], "text": [39, 156, 160, 178, 179, 180, 181, 184, 187, 188, 189, 195, 206, 207, 208, 215, 218, 220, 221, 249, 251], "under": [39, 160], "detect": [39, 40, 41, 42, 43, 160, 161, 162, 163, 164, 178, 230, 236, 275], "threshold": [39, 41, 43, 160, 162, 164], "q_": [39, 40, 41, 43], "chi_n": [39, 40, 41, 43], "steven": [39, 40, 41, 43, 160, 161, 162, 164], "kai": [39, 40, 41, 43, 160, 161, 162, 164], "fundament": [39, 40, 41, 43, 160, 161, 162, 164], "theori": [39, 40, 41, 43, 160, 161, 162, 164], "section": [39, 46, 47, 48, 49, 50, 160, 269, 271], "static": [39, 40, 41, 42, 43, 160, 161, 162, 163, 164, 264], "n_nc": [39, 40, 41, 42, 43, 178], "number": [40, 41, 42, 43, 44, 46, 47, 50, 59, 60, 61, 65, 83, 84, 86, 91, 107, 108, 112, 122, 134, 135, 143, 144, 145, 148, 149, 156, 157, 178, 180, 183, 186, 198, 200, 201, 203, 209, 211, 213, 217, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 238, 239, 244, 247, 248, 250, 252, 256], "For": [40, 41, 43, 161, 162, 164, 180, 199, 208, 257, 263, 268], "linspac": [40, 152, 154, 161, 181, 184, 187, 208, 223, 237, 269, 270, 271, 272], "20": [40, 42, 96, 97, 134, 136, 144, 148, 156, 161, 165, 178, 181, 183, 186, 189, 198, 206, 207, 213, 214, 215, 221, 244, 249, 257, 270, 272, 273, 275], "101": [40, 42, 161, 163, 190, 191, 193, 194], "25": [40, 183, 186, 192, 198, 222, 225, 245, 246, 267, 270, 271, 273], "1e": [40, 161, 207, 272], "sigma2": [41, 43, 162, 164], "If": [42, 72, 108, 138, 145, 149, 157, 163, 165, 179, 180, 181, 198, 202, 217, 220, 221, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 238, 239, 240, 241, 249, 254, 256, 274], "logspac": [42, 163, 178], "theoret": [42, 152, 154, 223, 237, 272, 275], "variou": [42, 264, 273], "100": [42, 75, 86, 91, 94, 136, 152, 154, 178, 180, 181, 184, 187, 189, 190, 191, 193, 194, 206, 215, 216, 223, 225, 226, 228, 234, 237, 239, 241, 251, 254, 255, 257, 267, 271], "1_000": [42, 180, 207, 208, 214, 251, 270], "000": [42, 207], "5_000": 42, "measur": [44, 46, 179, 180, 188, 189, 202, 205, 206, 212, 215, 218, 220, 221, 249, 271, 274, 275], "new": [44, 45, 68, 70, 107, 108, 134, 135, 144, 145, 148, 149, 156, 157, 251], "accumul": [44, 136, 139, 140, 142, 271], "from": [44, 59, 60, 75, 76, 83, 84, 94, 98, 107, 123, 134, 144, 148, 155, 156, 167, 189, 200, 201, 203, 204, 215, 222, 231, 238, 245, 246, 252, 253, 263, 268, 269, 271, 274], "contain": [44, 180, 213], "add": [44, 46, 49, 134, 144, 148, 156, 180, 207, 211, 235, 248, 251, 261, 272, 276], "total": [44, 209, 211, 247, 248, 250, 273], "count": [44, 47, 206], "error_r": [44, 48, 49, 272], "everi": [44, 267], "can": [44, 46, 47, 48, 50, 125, 134, 180, 206, 209, 217, 225, 231, 238, 265, 268, 269, 272, 274, 276], "obtain": 44, "tabul": [44, 45], "all": [44, 49, 138, 206, 225, 234, 235, 264, 266, 274], "ascend": [44, 49], "other": [46, 47, 48, 50, 267, 276], "quantiti": [46, 47, 48, 49, 50], "user": [46, 47, 48, 50, 268, 269], "caution": [46, 47, 48, 50], "instanc": [46, 47, 48, 50, 134], "transmit": [46, 107, 124, 134, 144, 148, 156, 206, 225], "e": [49, 136, 160, 161, 162, 163, 164, 179, 183, 184, 202, 259, 264, 265, 268, 269, 271, 272], "whatev": 49, "wa": [49, 181], "provid": [49, 107, 111, 121, 134, 144, 148, 152, 154, 156, 235, 264, 274], "wrapper": [51, 75], "scipi": [51, 75, 190, 191, 193, 194, 231, 238, 273, 274], "convolv": [51, 241], "It": [51, 75, 96, 108, 125, 145, 149, 157, 180, 225], "support": [51, 75, 275], "one": [51, 75, 135, 144, 145, 149, 155, 157, 190, 191, 192, 193, 194, 209, 213, 225, 226, 227, 229, 231, 232, 233, 238, 254, 268, 269, 270, 273], "its": [51, 75, 76, 94, 180, 268, 269, 273], "sum_": [51, 75, 162, 164, 179, 180, 181, 202, 205, 206, 212, 249], "valid": [52, 208, 225, 234, 235, 259], "same": [52, 97, 241, 268], "0013559842808217807": [55, 56], "005995136544658217": [55, 56], "008698817681933214": [55, 56], "0024103767414047302": [55, 56], "010205586837665018": [55, 56], "018983779931504997": [55, 56], "011950905288150394": [55, 56], "01518393864077397": [55, 56], "051622191325047306": [55, 56], "07210389837804473": [55, 56], "04745944982876247": [55, 56], "039173517569276436": [55, 56], "17918683372907862": [55, 56], "3367363220550604": [55, 56], "4611457574513795": [55, 56], "5084040873607553": [55, 56], "30": [56, 96, 165, 199, 226, 228, 239, 254, 255, 269, 275], "31": 56, "15": [56, 134, 163, 185, 210, 244, 257], "remain": [58, 199, 217], "1024": [59, 60, 83, 84, 226, 227, 229, 232, 233, 270, 273], "decad": [60, 84, 226, 227, 229, 232, 233, 268, 271], "resampl": [68, 69, 70, 71, 72, 73, 74, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 195, 244, 274, 275], "http": [68, 178, 188, 190, 191, 192, 193, 194, 195, 209, 218, 259, 263, 264, 265], "wirelesspi": 68, "com": [68, 178, 190, 191, 192, 193, 194, 195, 209, 264, 265], "structur": 68, "should": [72, 134, 225, 265], "equal": [72, 134], "three": [72, 267, 273], "lfilter": 75, "b_i": [75, 78, 82, 94, 226, 227, 228, 229, 232, 233, 239, 243, 269], "feedback": [75, 78, 81, 94, 226, 227, 228, 229, 232, 233, 239, 243, 269], "a_j": [75, 78, 81, 94, 226, 227, 228, 229, 232, 233, 239, 243, 269], "These": [75, 144, 148, 156, 242, 265, 271], "differ": [75, 135, 145, 149, 155, 157, 190, 191, 192, 193, 194, 241, 259, 273], "a_0": 75, "classmethod": [75, 76, 94], "zerospol": [75, 76, 79, 80, 94, 226, 227, 228, 229, 232, 233, 239, 243, 269], "self": [75, 76, 94], "b_tap": [75, 80, 82, 94, 269], "a_tap": [75, 80, 81, 94, 269], "exp": [79, 80, 144, 148, 156, 199, 209, 214, 216, 226, 227, 228, 229, 232, 233, 239, 241, 243, 255, 257, 259, 267, 269, 271], "1j": [79, 80, 199, 216, 226, 227, 228, 229, 232, 233, 239, 241, 243, 255, 257, 267, 269, 271], "conj": [79, 80, 226, 227, 228, 229, 232, 233, 239, 243, 269, 271], "478207252018059": [79, 80, 269], "6400000000000001": [79, 80, 269], "7391036260090295": [80, 269], "3061467458920719j": [80, 269], "insert": [96, 165], "multipli": [96, 165], "hold": [96, 98, 165, 167, 217, 275], "recommend": 96, "wai": [96, 265], "11": [96, 134, 144, 148, 156, 185, 195, 210, 244, 263], "zoh": [96, 98, 102, 165, 167, 172], "13": [96, 134, 144, 148, 156, 160, 161, 162, 164, 182, 185, 210, 244, 275], "matlab": [96, 98, 102, 165, 167, 172, 274], "iter": 97, "concaten": [97, 269], "linearli": [98, 167], "2r": 98, "ramp": [98, 125, 167], "advanc": [98, 167], "ones": [98, 167, 190, 191, 193, 194, 271], "84": 100, "modul": [107, 108, 116, 117, 119, 134, 136, 144, 145, 148, 149, 152, 154, 156, 157, 200, 201, 203, 206, 223, 225, 234, 237, 240, 252, 263, 266, 270, 272, 274, 275], "map_symbol": [107, 115, 134, 144, 148, 156, 180, 206, 207, 214, 224, 225, 251, 275], "decide_symbol": [107, 113, 134, 144, 148, 156, 275], "a_hat": [107, 113, 134, 144, 148, 156], "decis": [107, 113, 114, 134, 144, 148, 156, 225], "maximum": [107, 113, 114, 134, 144, 148, 156, 209, 211, 224, 240, 247, 248, 250], "likelihood": [107, 113, 114, 134, 144, 148, 156], "mle": [107, 113, 134, 144, 148, 156], "match": [107, 108, 114, 120, 134, 144, 145, 148, 149, 156, 157, 275], "abstract": [107, 111, 121], "log_2": [107, 112, 134, 144, 148, 156, 181, 200, 201, 203, 252], "phase_offset": [107, 108, 118, 134, 135, 144, 145, 148, 149, 153, 156, 157, 180, 206, 207, 214, 224, 225, 240, 251, 270, 272], "degre": [107, 108, 118, 134, 135, 144, 145, 148, 149, 153, 156, 157, 207, 214, 216, 219], "dot": [107, 108, 123, 134, 144, 148, 155, 156, 240], "mapsto": [107, 108, 123, 134, 144, 148, 155, 156, 240], "mathbb": [107, 108, 123, 134, 144, 148, 155, 156, 181, 240, 259], "sym": [107, 108, 122, 134, 135, 144, 145, 148, 149, 156, 157, 201, 204, 209, 252, 253, 273], "pulse_shap": [107, 108, 114, 116, 119, 134, 144, 145, 148, 149, 156, 157, 270], "tx_filter": [107, 124, 134, 144, 148, 156], "rx_filter": [107, 120, 134, 144, 148, 156], "rect": [108, 145, 149, 157, 273], "whose": [108, 135, 145, 148, 149, 157], "import": [108, 145, 149, 157, 265, 267, 268, 269, 270, 271, 272, 273, 274], "roll": [108, 145, 149, 157, 259, 273], "off": [108, 145, 149, 157], "psd": [111, 121, 152, 154, 181, 200, 201, 203, 204, 223, 237, 252, 253], "p_b": 111, "s_hat": [114, 272], "size": [114, 116, 182, 198, 267, 271, 272, 273], "p_e": 121, "loopfilt": [125, 126, 127, 128, 129, 130, 131, 132, 133, 262, 271, 275], "ppi": [125, 129, 262], "track": 125, "constant": [125, 134, 136, 139, 140, 231, 238, 269, 271], "cannot": 125, "chirp": 125, "underli": [125, 131], "scheme": [134, 144, 148, 156, 275], "similar": [134, 144, 156, 273], "One": [134, 144, 156, 273], "distinct": [134, 144, 156], "result": [134, 144, 156, 179, 202, 208, 219, 220, 221, 247, 249, 250, 272], "envelop": [134, 268, 269], "which": [134, 144, 156, 178, 179, 180, 181, 202, 205, 207, 212, 214, 218, 219, 220, 224, 240, 251, 267, 271, 273], "lower": [134, 144, 156, 229, 231, 247, 250], "also": [134, 192, 208, 209, 274], "consid": [134, 213], "cpfsk": 134, "separ": 134, "modem": [134, 144, 148, 156], "45": [134, 135, 144, 145, 148, 153, 180, 206, 207, 214, 216, 224, 225, 240, 251, 270, 272], "symbol_label": [134, 135, 144, 145, 148, 149, 155, 156, 157, 272], "randint": [134, 144, 148, 156, 180, 183, 186, 198, 206, 207, 214, 224, 225, 234, 241, 251, 270, 272], "1000": [134, 144, 148, 156, 206, 208, 241, 254, 255, 272], "dtype": [134, 144, 148, 156, 182, 217, 241, 256, 260, 271], "uint8": [134, 144, 148, 156, 217, 256], "complex_symbol": [134, 144, 148, 156], "70710678": [134, 144, 148], "70710678j": [134, 144, 148], "linestyl": [134, 144, 148, 156, 224, 235, 240, 242, 259, 267, 271, 272, 273], "tx_sampl": [134, 144, 148, 156], "50": [134, 144, 148, 156, 189, 215, 222, 240, 254, 255, 267, 270], "like": [134, 265, 274, 275], "channel": [134, 144, 152, 154, 181, 183, 184, 186, 187, 198, 223, 237, 274, 275], "subplot": [134, 144, 214, 271, 272], "imag": [134, 144, 267], "trajectori": 134, "although": 134, "boundari": 134, "lead": [134, 214, 272], "spectral": [134, 199, 231, 270, 273], "effici": [134, 199, 219, 257], "gmsk": 134, "rx_sampl": [134, 144, 148, 156], "last": [134, 144, 217, 263], "rx_symbol": [134, 144, 148, 156], "rx_complex_symbol": [134, 144, 148, 156], "14": [134, 144, 148, 156, 161, 185, 210, 244], "array_equ": [134, 144, 148, 156], "bin": [135, 145, 149, 155, 157, 206, 224, 240, 272], "absolut": [135, 136, 139, 141, 145, 157, 181], "consecut": [135, 145, 149, 157], "adjac": [135, 145, 149, 155, 157, 272, 273], "mai": [135, 145, 149, 155, 157, 206, 224, 235, 238, 240, 242, 269], "more": [135, 145, 149, 155, 157, 275], "start": [135, 145, 149, 157, 263], "0j": [135, 145, 149, 157], "go": [135, 145, 149, 157], "counter": [135, 145, 149, 157], "clockwis": [135, 145, 149, 157], "around": [135, 145, 149, 157], "circl": [135, 145, 149, 157, 269], "increment": [136, 138, 139, 140, 271], "Then": 136, "fsk": 136, "60": [136, 190, 191, 193, 194, 273], "repeat": 136, "cp": 136, "57": 136, "bpsk": [136, 152, 154, 223, 237, 241, 270], "variabl": [136, 138, 213, 271], "forward": [136, 143], "settabl": [136, 137, 140, 141], "vari": 138, "intern": 142, "set": [142, 180, 208, 224, 229, 231, 235, 238, 240, 242, 264, 266, 269], "qpsk": [144, 148, 152, 153, 154, 156, 180, 206, 207, 223, 224, 225, 237, 240, 241, 251, 274, 275], "convent": [144, 156], "transit": [144, 156, 186, 187, 198, 261], "independ": 144, "apart": 144, "origin": [144, 156, 257, 267], "taken": [144, 148, 156], "jq": 144, "begin": [144, 156, 160], "end": [144, 156, 160, 254, 264], "encod": [148, 152, 154, 196, 197, 274], "inform": [148, 200, 201, 203, 252], "ge": [149, 157, 178], "were": [152, 154], "simon": [152, 154], "alouini": [152, 154], "over": [152, 154, 213], "fade": [152, 154], "chapter": [152, 154, 195, 244], "john": [152, 154], "proaki": [152, 154], "optimum": [152, 154], "psk8": [152, 154, 223, 237, 272], "psk16": [152, 154, 223, 237, 272], "compar": [152, 154, 190, 191, 192, 193, 194, 273], "de": [152, 154, 275], "se": [154, 237], "00000000e": [155, 156, 269], "00": [155, 156, 269], "00j": [155, 156], "07106781e": [155, 156], "01": [155, 156, 213, 269, 271], "01j": [155, 156], "12323400e": [155, 156], "17": [155, 156, 206, 219, 244, 263], "83697020e": 155, "22464680e": [155, 156], "16j": [155, 156], "annot": [155, 240, 275], "odd": [156, 192, 254], "rotat": [156, 216], "rel": [156, 259, 273], "even": [156, 190, 191, 192, 193, 194, 209, 247, 250], "2m": 156, "displaystyl": 156, "pi4_qpsk": 156, "exceed": [158, 159], "15865525393145707": [158, 159], "158655": [158, 159], "0000010494310452": [158, 159], "perfect": 160, "knowledg": 160, "cn": [160, 180], "mathrm": 160, "re": 160, "sqrt": [160, 161, 162, 164, 178, 205, 206, 209, 249, 259, 270, 271, 273], "____": 165, "down": [165, 167, 171, 195, 244], "2p": 167, "95": [169, 206], "desir": [178, 180, 272], "ln": [178, 209], "62": [178, 213], "_": [178, 206], "log_": [178, 179, 189, 202, 208, 218, 220, 221, 249], "54": [178, 213], "44": 178, "12ab": 178, "7b": 178, "claim": 178, "leq": 178, "le": [178, 192, 216, 219, 247, 250], "8096": 178, "radarsp": 178, "weebli": 178, "upload": 178, "21471216": 178, "albersheim_alternative_form": 178, "pdf": [178, 209], "bpb": 178, "w2": 178, "wpmucdn": 178, "site": [178, 263], "gatech": 178, "edu": 178, "dist": [178, 264], "462": 178, "file": [178, 264, 266], "2016": 178, "noncoher": 178, "approxim": [178, 275], "www": [178, 190, 191, 192, 193, 194, 195, 209], "mathwork": [178, 190, 191, 192, 193, 194, 195, 209], "help": [178, 190, 191, 192, 193, 194, 195, 209], "html": [178, 190, 191, 192, 193, 194, 195, 209, 263], "semilogx": [178, 236], "legend": [178, 190, 191, 192, 193, 194, 214, 267, 270, 271, 273], "grid": [178, 181, 184, 187, 208, 242, 267, 270, 271, 273], "both": [178, 181, 224, 240, 241, 267, 271], "xlabel": [178, 181, 182, 184, 187, 206, 208, 259, 267, 270, 271, 273], "ylabel": [178, 181, 182, 184, 187, 206, 208, 259, 267, 270, 271, 273], "across": [178, 205, 212], "nuse": 178, "avg": [179, 180, 218], "ax": [179, 202, 205, 212, 218, 220, 242], "along": [179, 202, 205, 212, 218, 220, 275], "entir": [179, 202, 205, 212, 218, 220], "decibel": [179, 189, 202, 215, 220, 221, 249, 274, 275], "seed": [180, 183, 186, 198, 275], "ad": [180, 235, 264, 274, 275], "explicitli": 180, "known": 180, "must": [180, 190, 191, 193, 194, 209, 216, 235, 247, 250, 259], "numpi": [180, 183, 186, 198, 256, 267, 268, 269, 270, 271, 272, 273, 274], "default_rng": [180, 183, 186, 198], "noisi": 180, "sin": [180, 254], "zorder": [180, 207, 251], "infti": [180, 181], "nand": 180, "capac": [181, 184, 187, 274, 275], "2d": [181, 235], "x_i": [181, 183, 184, 186, 187, 198, 214], "y_i": [181, 183, 184, 186, 187, 198], "monoton": 181, "decreas": 181, "limit": [181, 224, 229, 231, 240, 272], "At": 181, "occur": 181, "view": [181, 264, 274], "59": 181, "shannon": 181, "semilogi": [181, 223, 236, 237], "barker": [182, 260, 274, 275], "ani": [182, 189, 199, 215, 229, 231, 257, 260, 266], "int64": [182, 260], "bipolar": [182, 275], "float64": [182, 260], "sequenc": [182, 183, 186, 198, 259, 261, 274, 275], "format": 182, "seq": 182, "have": [182, 192, 199, 217, 241, 256, 257], "ideal": [182, 272], "minim": 182, "autocorrel": [182, 259], "sidelob": [182, 190, 191, 193, 194, 247, 250, 259], "corr": [182, 259], "lag": [182, 259], "ab": [182, 259, 273], "roughli": [183, 186, 267], "eras": 183, "flip": 186, "h_b": 187, "cf": 188, "v_": [188, 189, 215, 221, 249], "en": [188, 218, 259], "wikipedia": [188, 218, 259], "org": [188, 218, 259], "wiki": [188, 218, 259], "type": [189, 206, 215, 217, 231, 236, 238, 256, 275], "voltag": [189, 215, 221, 249, 274], "x_": [189, 215], "mhz": [189, 215], "77": [189, 213, 215], "50e6": 189, "76": [189, 213], "98970004336019": 189, "mw": [189, 215], "dbm": [189, 215], "dbv": [189, 215], "020599913279624": 189, "center_freq": [190, 191], "hann": [190, 191, 193, 194, 231, 238], "blackman": [190, 191, 193, 194], "harri": [190, 191, 193, 194, 195, 244], "chebyshev": [190, 191, 193, 194], "atten": [190, 191, 193, 194], "nyquist": [190, 191, 193, 194, 199, 225, 257, 273], "side": [190, 191, 192, 193, 194, 209, 226, 227, 229, 231, 232, 233, 238, 268, 269, 270, 273], "about": [190, 191, 241, 266], "No": [190, 191, 193, 194], "blackmanharri": [190, 191, 193, 194], "chebwin": [190, 191, 193, 194], "attenu": [190, 191, 193, 194, 195, 247, 250], "dsp": [190, 191, 192, 193, 194, 195, 274], "designbandpassfir": 190, "cdot": [190, 191, 193, 194, 216], "h_ham": [190, 191, 193, 194], "x_axi": [190, 191, 192, 193, 194, 226, 227, 229, 231, 232, 233, 238, 268, 269, 270, 271], "h_hann": [190, 191, 193, 194], "h_blackman": [190, 191, 193, 194], "h_blackman_harri": [190, 191, 193, 194], "h_chebyshev": [190, 191, 193, 194], "h_kaiser": [190, 191, 193, 194], "ylim": [190, 191, 192, 193, 194, 227, 259, 268, 271, 272, 273], "larger": [191, 211, 214, 224, 240, 248], "designbandstopfir": 191, "75": [191, 213, 224, 271, 272], "best": 192, "append": [192, 254, 270], "tau": 192, "l_": 192, "dc": 192, "designfracdelayfir": 192, "observ": [192, 219, 225], "flat": 192, "h_8": [192, 247, 250], "h_16": [192, 247, 250], "h_32": 192, "32": [192, 267], "h_64": 192, "cutoff_freq": [193, 194], "cutoff": [193, 194], "f_c": [193, 194], "designhighpassfir": 193, "designlowpassfir": 194, "half_length": 195, "a_stop": 195, "80": [195, 259], "stopband": [195, 247, 250], "a_": 195, "stop": 195, "fred": [195, 244], "system": [195, 204, 244, 253, 264, 266, 271, 274], "designmultiratefir": 195, "oplu": [196, 197, 212], "uncod": 197, "dmc": [198, 261, 274, 275], "memoryless": [198, 261, 274], "pr": 198, "y_j": 198, "alphabet": 198, "ldot": 198, "doe": [199, 257], "anti": [199, 257, 275], "alias": [199, 257, 275], "400": [199, 267], "x1": 199, "200": [199, 267, 272], "x2": 199, "130": 199, "x3": [199, 259], "spectrum": [199, 226, 227, 229, 231, 232, 233, 238, 254, 255, 257], "content": 199, "abov": [199, 257], "fold": 199, "cw": 199, "unalias": 199, "fft": [199, 231, 238, 254, 255, 257], "2048": [199, 254, 255, 257, 270], "xlim": [199, 257, 270, 271, 273], "qam": [200, 201, 203, 252], "249387366082999": [200, 201], "020599913279625": [200, 253], "7506126339170005": [203, 252], "979400086720376": [203, 204], "norm": [206, 209, 211, 247, 248, 250], "noiseless": 206, "sourc": 206, "max": [206, 220, 221], "instantan": 206, "percentil": [206, 229, 231, 238], "either": 206, "037387343360372": 206, "002340382828345": 206, "224969284153923": 206, "95th": 206, "324677236306645": 206, "inst_evm": 206, "hist": 206, "histogram": 206, "frequency_offset": [207, 261, 275], "freq_rat": 207, "cycl": [207, 241], "5e": 207, "deg": [207, 214], "path": [208, 274], "loss": [208, 274], "meter": [208, 219, 258], "transmitt": 208, "far": 208, "field": 208, "neg": [208, 214], "impli": 208, "possibl": [208, 274], "so": [208, 209, 211, 247, 248, 250, 274], "km": 208, "link": [208, 274, 275], "ghz": [208, 219, 258], "1e3": [208, 216, 254], "1e9": [208, 219, 258], "92": 208, "44778322188337": 208, "doubl": [208, 219], "increas": [208, 219, 269], "2e3": 208, "98": 208, "468383135163": 208, "2e9": 208, "product": [209, 273], "thought": [209, 276], "smaller": [209, 247, 250, 273], "wider": 209, "how": [209, 211, 225, 234, 235, 241, 247, 248, 250, 266], "gaussdesign": 209, "onlinelibrari": 209, "wilei": 209, "doi": 209, "1002": 209, "9780470041956": 209, "app2": 209, "h_0p1": [209, 247, 250], "h_0p2": 209, "h_0p3": 209, "reason": [211, 248, 263], "h_half_sin": 211, "displai": [213, 224, 226, 227, 229, 231, 232, 233, 238, 240], "line": [213, 241, 264, 270], "quick": 213, "brown": 213, "fox": 213, "jump": 213, "lazi": 213, "dog": 213, "00000000": 213, "68": 213, "65": 213, "71": 213, "69": 213, "63": 213, "6b": 213, "72": 213, "6f": 213, "6e": 213, "00000010": 213, "66": 213, "78": 213, "6a": 213, "6d": 213, "73": 213, "74": 213, "00000020": 213, "6c": 213, "61": 213, "7a": 213, "79": 213, "67": 213, "he": 213, "02": [213, 269, 271], "03": [213, 269], "04": [213, 269], "00000004": 213, "05": [213, 267, 269, 271], "06": 213, "07": 213, "08": 213, "00000008": 213, "09": 213, "0a": 213, "iq_imbal": [214, 261, 275], "iq": [214, 261, 274], "imbal": [214, 261, 274], "posit": 214, "compon": [214, 254, 255, 257], "g_i": 214, "180": 214, "g_q": 214, "x_q": 214, "horizont": 214, "stretch": 214, "while": [214, 273], "vertic": 214, "northwest": 214, "northeast": 214, "50118723": 215, "36272725": 215, "9952623149688795": 215, "satisfi": 216, "remov": [216, 231, 238, 275], "dtypelik": [217, 256], "most": [217, 256], "signific": [217, 256], "enough": 217, "fill": 217, "smallest": 217, "unsign": 217, "integ": 217, "diamet": 219, "55": 219, "eta": 219, "dbi": 219, "arcsin": 219, "83": 219, "dish": 219, "21": 219, "810210290266568": 219, "437435887991374": 219, "23": 219, "sinc": [219, 225, 263, 272], "antenna": [219, 274], "we": [219, 274], "830810203546193": 219, "529544741425365": 219, "keyword": [223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 268, 269], "pyplot": [223, 224, 227, 228, 229, 230, 231, 232, 233, 237, 238, 239, 240, 241, 242, 243, 267, 268, 269, 270, 271, 272, 273], "heatmap": [224, 272], "scatter": 224, "overwritten": [224, 235, 238, 240], "rang": [224, 271, 272], "hist2d": 224, "10_000": 224, "color": [225, 234, 235, 241, 270, 273], "imaginari": [225, 235, 241], "interleav": [225, 235], "base": [225, 234, 235, 241, 275], "examin": 225, "intersymbol": 225, "interfer": 225, "isi": 225, "cascad": 225, "why": 225, "often": [225, 267], "practic": 225, "n_time": [226, 269], "n_freq": 226, "log": [226, 227, 229, 231, 232, 233, 268, 269, 271], "definit": [226, 227, 228, 229, 232, 233, 239, 243], "n_t": 226, "n_f": 226, "scale": [226, 227, 229, 231, 232, 233, 238, 268, 269], "option": [226, 227, 229, 231, 232, 233, 238, 275], "h_srrc": [226, 227, 228, 229, 232, 233, 239, 241, 243, 272], "48": 227, "52": 227, "10th": [229, 231, 238], "crop": [229, 231], "deep": [229, 231], "x_label": 230, "overlap": [231, 238, 270], "detrend": [231, 238], "median": 231, "segment": [231, 238], "256": [231, 238, 270], "point": [231, 238], "trend": [231, 238], "unwrap": [233, 271], "stride": 235, "colorbar": 235, "1d": 235, "determin": 235, "row": 235, "collect": 235, "linecollect": 235, "linewidth": [235, 259], "solid": [235, 241], "cmap": 235, "rainbow": 235, "loglog": 236, "pcolormesh": 238, "vmin": 238, "vmax": 238, "100th": 238, "shade": 238, "gouraud": 238, "markers": 240, "diff": [241, 270], "mutual": 241, "exclus": 241, "current": [241, 265], "dash": 241, "share": 241, "10e3": 241, "revert": 242, "rcdefault": 242, "_rc_param": 242, "rc_param": 242, "autolayout": 242, "max_open_warn": 242, "titleweight": 242, "bold": 242, "arrang": 244, "column": 244, "notion": 244, "demonstr": 244, "matric": 244, "18": [244, 263, 272], "19": [244, 275], "000005": 245, "5000": [245, 246], "000000025": 245, "005": [246, 271], "000025": 246, "excess": [247, 250, 273], "narrow": [247, 250], "expens": [247, 250], "higher": [247, 250, 273], "h_0p5": [247, 250], "h_0p9": [247, 250], "affect": [247, 250], "longer": [247, 250, 254], "h_4": [247, 250], "h_rect": [248, 273], "sample_rate_offset": [251, 261, 275], "250": [254, 255], "300": [254, 255], "ksp": [254, 255], "notic": [254, 255, 267, 273], "conjug": [254, 255, 269], "500": [254, 255, 271], "now": [254, 255, 267, 275], "150": [254, 255], "asymmetr": 255, "copi": 257, "299792458": 258, "zadoff_chu": [259, 260, 275], "zadoff": [259, 260, 274, 275], "chu": [259, 260, 274, 275], "prime": 259, "gcd": 259, "ne": 259, "cyclic": 259, "x_u": 259, "c_": 259, "2q": 259, "mod": 259, "e2": 259, "93chu_sequ": 259, "x_3": 259, "139": 259, "tile": 259, "x_5": 259, "x5": 259, "cross": 259, "xcorr": 259, "sphinx": 263, "immateri": 263, "theme": 263, "depend": [263, 264, 266], "store": [263, 265, 266], "txt": [263, 264, 265, 266], "some": 263, "below": [263, 268, 269], "version": [263, 265, 274], "aren": 263, "resolut": 263, "minut": 263, "ci": 263, "myst": 263, "parser": 263, "updat": 263, "git": [263, 265], "math": 263, "dollar": 263, "ipykernel": 263, "26": 263, "nb": 263, "pickleshar": 263, "switch": 263, "pip": [263, 264, 265, 266, 274], "python3": [263, 264, 265, 266, 274], "built": 263, "run": 263, "command": [263, 264], "dirhtml": 263, "locat": [263, 266], "home": 263, "page": 263, "directori": [263, 265], "get": 263, "necessari": 263, "webpag": 263, "webserv": 263, "easili": [263, 264, 266, 268, 269], "python": [263, 274], "server": 263, "8080": 263, "access": 263, "web": 263, "browser": 263, "localhost": 263, "librari": [264, 265, 266, 267, 272, 274, 276], "ruff": [264, 265, 275], "lint": [264, 265], "your": [264, 266], "develop": [264, 265, 266], "dev": [264, 266], "pyproject": [264, 266], "toml": [264, 265, 266], "tool": [264, 266, 274], "src": 264, "extend": 264, "includ": [264, 265, 266, 274], "ipynb": 264, "exclud": 264, "build": [264, 274], "doc": 264, "_version": 264, "py": [264, 266], "120": 264, "select": 264, "pycodestyl": 264, "pyflak": 264, "pyupgrad": 264, "flake8": 264, "bugbear": 264, "simplifi": 264, "isort": 264, "ignor": 264, "e501": 264, "e713": 264, "e714": 264, "__init__": 264, "f401": 264, "f403": 264, "manual": [264, 266], "check": 264, "hook": 264, "config": [264, 267, 268, 269, 270, 271, 272, 273], "yaml": 264, "repo": [264, 265], "github": [264, 274], "rev": 264, "v2": 264, "id": 264, "larg": 264, "fixer": 264, "trail": 264, "whitespac": 264, "astral": 264, "sh": 264, "v0": 264, "enabl": 264, "disabl": 264, "uninstal": 264, "extens": 264, "vscode": [264, 266], "json": [264, 266], "you": [264, 265, 266, 274], "edit": [264, 269], "latest": [265, 274], "releas": [265, 275], "main": [265, 273], "branch": 265, "mhostett": [265, 275], "Or": [265, 266], "pre": 265, "To": 265, "activ": 265, "benefici": 265, "fashion": 265, "allow": [265, 266], "chang": [265, 276], "immedi": 265, "seen": 265, "upon": 265, "next": 265, "clone": 265, "wherev": 265, "flag": 265, "packag": [265, 274], "commit": 265, "pytest": [265, 266], "cov": 265, "xdist": 265, "benchmark": 265, "ini_opt": 266, "minvers": 266, "addopt": 266, "showloc": 266, "testpath": 266, "execut": 266, "test_psk": 266, "instruct": 266, "invok": 266, "infrastructur": 266, "debug": 266, "inlinebackend": [267, 268, 269, 270, 271, 272, 273], "print_figure_kwarg": [267, 268, 269, 270, 271, 272, 273], "facecolor": [267, 268, 269, 270, 271, 272, 273], "widget": [267, 268, 269, 270, 271, 272, 273], "tx": 267, "decai": [267, 269], "fillstyl": 267, "show": [267, 268, 269, 270, 271, 272, 273], "accomplish": [267, 272], "def": [267, 270, 272], "resample_sign": 267, "new_sample_r": 267, "ty": 267, "gca": [267, 272], "set_prop_cycl": [267, 272], "four": 267, "appear": 267, "fourth": 267, "do": 267, "315": 267, "00095883": 268, "00175012": 268, "00423921": 268, "0058825": 268, "006151": 268, "00474595": 268, "0017044": 268, "00254816": 268, "00721645": 268, "0112324": 268, "01342358": 268, "01273202": 268, "00845058": 268, "0004368": 268, "01073669": 268, "02372977": 268, "03650247": 268, "04650654": 268, "05098525": 268, "04734644": 268, "03355896": 268, "00851486": 268, "02769991": 268, "07367348": 268, "12670447": 268, "1830132": 268, "23810898": 268, "28727058": 268, "3260799": 268, "3509384": 268, "35949665": 268, "conveni": [268, 269], "evalu": [268, 269], "here": [268, 269], "47820725": 269, "78207252e": 269, "58172329e": 269, "10862468e": 269, "86109590e": 269, "21565653e": 269, "01140214e": 269, "57286400e": 269, "67772160e": 269, "47338728e": 269, "10422993e": 269, "89312837e": 269, "12240078e": 269, "03953322e": 269, "69685122e": 269, "63882791e": 269, "81474977e": 269, "47193366e": 269, "85259041e": 269, "15647504e": 269, "23851924e": 269, "42176895e": 269, "84684395e": 269, "42721858e": 269, "72236648e": 269, "14721649e": 269, "10813095e": 269, "94024315e": 269, "78877688e": 269, "74077567e": 269, "87820725": 269, "53637958": 269, "94724205": 269, "13335164": 269, "1455082": 269, "04436799": 269, "88708159": 269, "71930943": 269, "5719707": 269, "46154771": 269, "39261642": 269, "36139242": 269, "35935288": 269, "3763214": 269, "40270968": 269, "43085717": 269, "45557651": 269, "47410241": 269, "48566716": 269, "49090568": 269, "49124786": 269, "48840102": 269, "4839738": 269, "47925143": 269, "47510421": 269, "47199608": 269, "47005584": 269, "46917696": 269, "46911955": 269, "denomin": 269, "73910363": 269, "30614675j": 269, "plane": 269, "endpoint": 269, "092337035029908": 269, "71104892744724": 269, "684365018955985": 269, "37868538208862": 269, "1263714068241546": 269, "9993519409971622": 269, "1909320767063554": 269, "016796159999999997": 269, "46380627201679264": 269, "3806359704987118j": 269, "4988817673846036": 269, "333342139809402j": 269, "5543277195082319": 269, "22961005941718524j": 269, "5291527586053246": 269, "2828380420991956j": 269, "lyon": 269, "understand": 269, "3rd": 269, "insid": 269, "outsid": 269, "unstabl": 269, "n_symbol": 270, "els": 270, "pb": 270, "x_bb_rect": 270, "papr_bb_rect": 270, "x_pb_rect": 270, "papr_pb_rect": 270, "x_bb_0p1": 270, "papr_bb_0p1": 270, "x_pb_0p1": 270, "papr_pb_0p1": 270, "x_bb_0p5": 270, "papr_bb_0p5": 270, "x_pb_0p5": 270, "papr_pb_0p5": 270, "x_bb_0p9": 270, "papr_bb_0p9": 270, "x_pb_0p9": 270, "papr_pb_0p9": 270, "2f": 270, "rf": [270, 271], "512": 270, "sweep_alpha": 270, "bb_papr": 270, "pb_papr": 270, "bpsk_bb_papr": 270, "bpsk_pb_papr": 270, "qpsk_bb_papr": 270, "qpsk_pb_papr": 270, "psk8_bb_papr": 270, "psk8_pb_papr": 270, "psk16_bb_papr": 270, "psk16_pb_papr": 270, "configur": 271, "loop_filt": 271, "0x000002276d2bcc08": 271, "theta_0": 271, "phase_error": 271, "freq_estim": 271, "suptitl": [271, 272], "direct": [271, 275], "synthes": [271, 275], "dd": [271, 275], "avail": [271, 272, 274], "001": 271, "b_nt": 271, "0005": 271, "0125": 271, "015": 271, "0175": 271, "t_lock": 271, "analyze_psk": 272, "100_000": 272, "n0": 272, "tx_mf": 272, "1e6": 272, "bpsk_ber": 272, "bpsk_ser": 272, "qpsk_ber": 272, "qpsk_ser": 272, "psk8_ber": 272, "psk8_ser": 272, "psk16_ber": 272, "psk16_ser": 272, "simul": [272, 274], "1e0": 272, "psk8_bin": 272, "psk8_grai": 272, "wors": 272, "rc_0p1": 273, "rc_0p5": 273, "rc_0p9": 273, "pm": 273, "nearli": 273, "small": 273, "lobe": 273, "much": 273, "freqz": 273, "worn": 273, "whole": 273, "h_rc_0p1": 273, "h_rc_0p5": 273, "h_rc_0p9": 273, "p_rect": 273, "cumsum": 273, "p_rc_0p1": 273, "p_rc_0p5": 273, "p_rc_0p9": 273, "within": 273, "srrc_0p1": 273, "srrc_0p5": 273, "srrc_0p9": 273, "therefor": 273, "significantli": 273, "due": 273, "being": 273, "h_srrc_0p1": 273, "h_srrc_0p5": 273, "h_srrc_0p9": 273, "p_srrc_0p1": 273, "p_srrc_0p5": 273, "p_srrc_0p9": 273, "gauss_0p1": 273, "gauss_0p2": 273, "gauss_0p3": 273, "softwar": 274, "radio": 274, "goal": 274, "analyz": 274, "reli": 274, "interoper": 274, "veri": 274, "numba": 274, "acceler": 274, "computation": 274, "intens": 274, "addition": 274, "aim": 274, "replic": 274, "relev": 274, "toolbox": 274, "progress": 274, "someth": 274, "pleas": 274, "open": 274, "issu": 274, "pypi": 274, "api": [274, 276], "convers": [274, 275], "synchron": 274, "budget": [274, 275], "manipul": 274, "novemb": 275, "2023": 275, "abil": 275, "renam": 275, "multirate_tap": 275, "polyphase_matrix": 275, "matt": 275, "hostett": 275, "move": 275, "model": 275, "replac": 275, "pylint": 275, "black": 275, "improv": 275, "septemb": 275, "sensibl": 275, "august": 275, "27": 275, "without": 275, "superflu": 275, "translat": 275, "fix": [275, 276], "juli": 275, "firinterpol": 275, "impair": 275, "fpsl": 275, "helper": 275, "semant": 276, "major": 276, "minor": 276, "patch": 276, "introduc": 276, "featur": 276, "backward": 276, "compat": 276, "make": 276, "bug": 276, "There": 276, "guarante": 276, "them": 276, "thei": 276}, "objects": {"": [[3, 0, 0, 1, "sdr", ""]], "sdr": [[9, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [26, 1, 1, "", "Decimator", "Implements a polyphase decimating FIR filter."], [37, 1, 1, "", "Differentiator", "Implements a differentiator FIR filter."], [39, 1, 1, "", "EnergyDetector", "Implements an energy detector."], [44, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [51, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [68, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [75, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [94, 1, 1, "", "Integrator", "Implements an integrator IIR filter."], [96, 1, 1, "", "Interpolator", "Implements a polyphase interpolating FIR filter."], [107, 1, 1, "", "LinearModulation", "Implements linear phase/amplitude modulation with arbitrary symbol mapping."], [125, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [134, 1, 1, "", "MSK", "Implements minimum-shift keying (MSK) modulation and demodulation."], [136, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [144, 1, 1, "", "OQPSK", "Implements offset quadrature phase-shift keying (OQPSK) modulation and demodulation."], [148, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [156, 1, 1, "", "PiMPSK", "Implements $pi/M$ phase-shift keying ($pi/M$ PSK) modulation and demodulation."], [158, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [159, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [160, 1, 1, "", "ReplicaCorrelator", "Implements an clairvoyant replica-correlator detector."], [165, 1, 1, "", "Resampler", "Implements a polyphase rational resampling FIR filter."], [178, 5, 1, "", "albersheim", "Estimates the minimum required single-sample SNR, given $N_{NC}$ non-coherent combinations, to achieve a probability of detection $P_D$ and probability of false alarm $P_{FA}$. This function implements Albersheim's equation."], [179, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [180, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [181, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [182, 5, 1, "", "barker", "Returns the Barker code/sequence of length $N$."], [183, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [184, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [185, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [186, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [187, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [188, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [189, 5, 1, "", "db", "Converts from linear units to decibels."], [190, 5, 1, "", "design_bandpass_fir", "Designs a bandpass FIR filter impulse response $h[n]$ using the window method."], [191, 5, 1, "", "design_bandstop_fir", "Designs a bandstop FIR filter impulse response $h[n]$ using the window method."], [192, 5, 1, "", "design_frac_delay_fir", "Designs a fractional delay FIR filter impulse response $h[n]$ using the Kaiser window method."], [193, 5, 1, "", "design_highpass_fir", "Designs a highpass FIR filter impulse response $h[n]$ using the window method."], [194, 5, 1, "", "design_lowpass_fir", "Designs a lowpass FIR filter impulse response $h[n]$ using the window method."], [195, 5, 1, "", "design_multirate_fir", "Designs a multirate FIR filter impulse response $h[n]$ using the Kaiser window method."], [196, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [197, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [198, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [199, 5, 1, "", "downsample", "Downsamples the time-domain signal $x[n]$ by the factor $r$."], [200, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [201, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [202, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [203, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [204, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [205, 5, 1, "", "euclidean", "Measures the Euclidean distance between two signals $x[n]$ and $y[n]$."], [206, 5, 1, "", "evm", "Calculates the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [207, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [208, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [209, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [210, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [211, 5, 1, "", "half_sine", "Returns a half-sine pulse shape."], [212, 5, 1, "", "hamming", "Measures the Hamming distance between two signals $x[n]$ and $y[n]$."], [213, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [214, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [215, 5, 1, "", "linear", "Converts from decibels to linear units."], [216, 5, 1, "", "mix", "Mixes the time-domain signal $x[n]$ with a complex exponential or real sinusoid."], [217, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [218, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [219, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [220, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [221, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [222, 5, 1, "", "percent", "Converts from a ratio to a percentage."], [244, 5, 1, "", "polyphase_decompose", "Decomposes the FIR filter taps $h_i$ into the polyphase matrix $H_{i, j}$ with $B$ phases."], [245, 5, 1, "", "ppb", "Converts from a ratio to parts per billion (ppb)."], [246, 5, 1, "", "ppm", "Converts from a ratio to parts per million (ppm)."], [247, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [248, 5, 1, "", "rectangular", "Returns a rectangular pulse shape."], [249, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [250, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [251, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [252, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [253, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [254, 5, 1, "", "to_complex_bb", "Converts the real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$ to a complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c} = f_{s,r}/2$."], [255, 5, 1, "", "to_real_pb", "Converts the complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$ to a real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r} = 2f_{s,c}$."], [256, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [257, 5, 1, "", "upsample", "Upsamples the time-domain signal $x[n]$ by the factor $r$."], [258, 5, 1, "", "wavelength", "Calculates the wavelength $lambda$ of an electromagnetic wave with frequency $f$."], [259, 5, 1, "", "zadoff_chu", "Returns the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.ClosedLoopPLL": [[10, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [11, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [12, 2, 1, "", "K0", "The NCO gain $K_0$."], [13, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [14, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [15, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [16, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [17, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [18, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [19, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [20, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [21, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [22, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [23, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [24, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [25, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[16, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [16, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [16, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [16, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [16, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[17, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[19, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[22, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.Decimator": [[27, 3, 1, "", "__call__", "Filters and decimates the input signal $x[n]$ with the polyphase FIR filter."], [28, 3, 1, "", "__init__", "Creates a polyphase FIR decimating filter."], [29, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [30, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [31, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [32, 2, 1, "", "method", "The method used to design the multirate filter."], [33, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [34, 2, 1, "", "rate", "The decimation rate $r$."], [35, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [36, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Decimator.__call__": [[27, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [27, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Decimator.__init__": [[28, 4, 2, "p-rate", "rate", "The decimation rate $r$."], [28, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [28, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.Differentiator": [[38, 3, 1, "", "__init__", "Creates a differentiator FIR filter."]], "sdr.Differentiator.__init__": [[38, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.EnergyDetector": [[40, 3, 1, "", "p_d", "Computes the probability of detection $P_D$."], [41, 3, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [42, 3, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [43, 3, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.EnergyDetector.p_d": [[40, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [40, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [40, 4, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.p_fa": [[41, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [41, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [41, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [41, 4, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.EnergyDetector.roc": [[42, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [42, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [42, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."], [42, 4, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.threshold": [[43, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [43, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [43, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [43, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.ErrorRate": [[45, 3, 1, "", "__init__", "Creates a new error rate tabulation object."], [46, 3, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [47, 3, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [48, 3, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [49, 3, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [50, 3, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[46, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [46, 4, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [46, 4, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[47, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[48, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[50, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[52, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the FIR filter."], [53, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [54, 3, 1, "", "__len__", "Returns the filter length $N + 1$."], [55, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [56, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [57, 2, 1, "", "delay", "The delay of the FIR filter $d = lfloor frac{N + 1}{2} rfloor$ in samples."], [58, 3, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [59, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the FIR filter."], [60, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(omega)$ of the FIR filter on a logarithmic frequency axis."], [61, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [62, 2, 1, "", "order", "The order of the FIR filter $N$."], [63, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [64, 2, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [65, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [66, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [67, 2, 1, "", "taps", "The feedforward taps $h_i$ for $i = 0,...,N$."]], "sdr.FIR.__call__": [[52, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [52, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.FIR.__init__": [[53, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$ for $i = 0,...N$."], [53, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FIR.frequency_response": [[59, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [59, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.frequency_response_log": [[60, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [60, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [60, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[61, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.step_response": [[65, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FarrowResampler": [[69, 3, 1, "", "__call__", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [70, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [71, 2, 1, "", "order", "The order of the filter."], [72, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [73, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [74, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__call__": [[69, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [69, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.__init__": [[70, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FarrowResampler.reset": [[72, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[76, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [77, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the IIR filter."], [78, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [79, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [80, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [81, 2, 1, "", "a_taps", "The feedback taps $a_j$ for $j = 0,...,N$."], [82, 2, 1, "", "b_taps", "The feedforward taps $b_i$ for $i = 0,...,M$."], [83, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the IIR filter."], [84, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(omega)$ of the IIR filter on a logarithmic frequency axis."], [85, 2, 1, "", "gain", "The gain of the IIR filter."], [86, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [87, 2, 1, "", "order", "The order of the IIR filter $N$."], [88, 2, 1, "", "poles", "The poles of the IIR filter."], [89, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [90, 2, 1, "", "state", "The filter state."], [91, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [92, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [93, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[76, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [76, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [76, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."], [76, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__call__": [[77, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.IIR.__init__": [[78, 4, 2, "p-a", "a", "The feedback coefficients $a_j$ for $j = 0,...,N$."], [78, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$ for $i = 0,...,M$."], [78, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.IIR.frequency_response": [[83, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [83, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[84, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [84, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [84, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[86, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[91, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.Integrator": [[95, 3, 1, "", "__init__", "Creates an integrating IIR filter."]], "sdr.Integrator.__init__": [[95, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.Interpolator": [[97, 3, 1, "", "__call__", "Interpolates and filters the input signal $x[n]$ with the polyphase FIR filter."], [98, 3, 1, "", "__init__", "Creates a polyphase FIR interpolating filter."], [99, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [100, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [101, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [102, 2, 1, "", "method", "The method used to design the multirate filter."], [103, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [104, 2, 1, "", "rate", "The interpolation rate $r$."], [105, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [106, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Interpolator.__call__": [[97, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [97, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Interpolator.__init__": [[98, 4, 2, "p-rate", "rate", "The interpolation rate $r$."], [98, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [98, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.LinearModulation": [[108, 3, 1, "", "__init__", "Creates a new linear phase/amplitude modulation object."], [109, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [110, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [111, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [112, 2, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [113, 3, 1, "", "decide_symbols", "Converts the received complex symbols $hat{a}[k]$ into decimal symbol decisions $hat{s}[k]$ using maximum-likelihood estimation (MLE)."], [114, 3, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples $hat{x}[n]$ into decimal symbol decisions $hat{s}[k]$ using matched filtering and maximum-likelihood estimation."], [115, 3, 1, "", "map_symbols", "Converts the decimal symbols $s[k]$ to complex symbols $a[k]$."], [116, 3, 1, "", "modulate", "Modulates the decimal symbols $s[k]$ into pulse-shaped complex samples $x[n]$."], [117, 2, 1, "", "order", "The modulation order $M = 2^k$."], [118, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [119, 2, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [120, 2, 1, "", "rx_filter", "The receive decimating matched filter. The filter coefficients are matched to the pulse shape $h[-n]^*$."], [121, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [122, 2, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [123, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."], [124, 2, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter. The filter coefficients are the pulse shape $h[n]$."]], "sdr.LinearModulation.__init__": [[108, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [108, 4, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees to apply to symbol_map."], [108, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [108, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [108, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [108, 4, 2, "p-symbol_map", "symbol_map", "The symbol mapping ${0, dots, M-1} mapsto mathbb{C}$. An $M$-length array whose indices are decimal symbols $s[k]$ and whose values are complex symbols $a[k]$, where $M$ is the modulation order."]], "sdr.LinearModulation.ber": [[111, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.LinearModulation.decide_symbols": [[113, 4, 2, "p-a_hat", "a_hat", "The received complex symbols $hat{a}[k]$."]], "sdr.LinearModulation.demodulate": [[114, 4, 2, "p-x_hat", "x_hat", "The received pulse-shaped complex samples $hat{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.LinearModulation.map_symbols": [[115, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to map, $0$ to $M-1$."]], "sdr.LinearModulation.modulate": [[116, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.LinearModulation.ser": [[121, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.LoopFilter": [[126, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [127, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [128, 3, 1, "", "__call__", "Filters the input signal $x[n]$."], [129, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [130, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [131, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [132, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [133, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__call__": [[128, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.LoopFilter.__init__": [[129, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [129, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [129, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [129, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.MSK": [[135, 3, 1, "", "__init__", "Creates a new MSK object."]], "sdr.MSK.__init__": [[135, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [135, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [135, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.NCO": [[137, 2, 1, "", "K0", "(Settable) The NCO gain $K_0$."], [138, 3, 1, "", "__call__", "Steps the NCO with variable frequency and/or phase signals."], [139, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [140, 2, 1, "", "increment", "(Settable) The constant phase accumulation $omega$ of the NCO in radians/sample."], [141, 2, 1, "", "offset", "(Settable) The absolute phase offset $theta$ of the NCO in radians."], [142, 3, 1, "", "reset", "Resets the NCO."], [143, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__call__": [[138, 4, 2, "p-freq", "freq", "The variable frequency signal $f[n]$ in radians/sample. This input signal varies the per-sample phase increment of the NCO. If None, the signal is all zeros."], [138, 4, 2, "p-phase", "phase", "The variable phase signal $p[n]$ in radians. This input signal varies the per-sample phase offset of the NCO. If None, the signal is all zeros."]], "sdr.NCO.__init__": [[139, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [139, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [139, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.NCO.step": [[143, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.OQPSK": [[145, 3, 1, "", "__init__", "Creates a new OQPSK object."], [146, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [147, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."]], "sdr.OQPSK.__init__": [[145, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [145, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [145, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [145, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [145, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [145, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK": [[149, 3, 1, "", "__init__", "Creates a new PSK object."], [150, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [151, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [152, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [153, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [154, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [155, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[149, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [149, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [149, 4, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [149, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [149, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [149, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [149, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[152, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [152, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.ser": [[154, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [154, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.PiMPSK": [[157, 3, 1, "", "__init__", "Creates a new $pi/M$ PSK object."]], "sdr.PiMPSK.__init__": [[157, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [157, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [157, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [157, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [157, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [157, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [157, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.Q": [[158, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[159, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.ReplicaCorrelator": [[161, 3, 1, "", "p_d", "Computes the probability of detection $P_D$."], [162, 3, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [163, 3, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [164, 3, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.ReplicaCorrelator.p_d": [[161, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [161, 4, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [161, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."]], "sdr.ReplicaCorrelator.p_fa": [[162, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [162, 4, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [162, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [162, 4, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.ReplicaCorrelator.roc": [[163, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [163, 4, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [163, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."]], "sdr.ReplicaCorrelator.threshold": [[164, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [164, 4, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [164, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [164, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.Resampler": [[166, 3, 1, "", "__call__", "Resamples and filters the input signal $x[n]$ with the polyphase FIR filter."], [167, 3, 1, "", "__init__", "Creates a polyphase FIR rational resampling filter."], [168, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [169, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [170, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [171, 2, 1, "", "down", "The decimation rate $Q$."], [172, 2, 1, "", "method", "The method used to design the multirate filter."], [173, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [174, 2, 1, "", "rate", "The resampling rate $P/Q$."], [175, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [176, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."], [177, 2, 1, "", "up", "The interpolation rate $P$."]], "sdr.Resampler.__init__": [[167, 4, 2, "p-down", "down", "The decimation rate $Q$."], [167, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [167, 4, 2, "p-taps", "taps", "The multirate filter design specification."], [167, 4, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.albersheim": [[178, 4, 2, "p-N_nc", "N_nc", "The number of non-coherent combinations $N_{NC} ge 1$."], [178, 4, 2, "p-p_d", "p_d", "The desired probability of detection $P_D$ in $(0, 1)$."], [178, 4, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{FA}$ in $(0, 1)$."]], "sdr.average_power": [[179, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the average power. The default is None, which computes the average power of the entire array."], [179, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [179, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[180, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [180, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [180, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [180, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[181, 4, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [181, 4, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.barker": [[182, 4, 2, "p-length", "length", "The length $N$ of the Barker code/sequence."], [182, 4, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[183, 4, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [183, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [183, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[184, 4, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[185, 4, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[186, 4, 2, "p-p", "p", "The probability $p$ of a bit flip."], [186, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [186, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[187, 4, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[188, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.db": [[189, 4, 2, "p-type", "type", "The type of input value or signal."], [189, 4, 2, "p-x", "x", "The input value or signal."]], "sdr.design_bandpass_fir": [[190, 4, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [190, 4, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [190, 4, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [190, 4, 2, "p-order", "order", "The filter order $N$. Must be even."], [190, 4, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_bandstop_fir": [[191, 4, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [191, 4, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [191, 4, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [191, 4, 2, "p-order", "order", "The filter order $N$. Must be even."], [191, 4, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_frac_delay_fir": [[192, 4, 2, "p-delay", "delay", "The fractional delay $0 le Delta n le 1$."], [192, 4, 2, "p-length", "length", "The filter length $L$. Filters with even length have best performance. Filters with odd length are equivalent to an even-length filter with an appended zero."]], "sdr.design_highpass_fir": [[193, 4, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [193, 4, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [193, 4, 2, "p-order", "order", "The filter order $N$. Must be even."], [193, 4, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_lowpass_fir": [[194, 4, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [194, 4, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [194, 4, 2, "p-order", "order", "The filter order $N$. Must be even."], [194, 4, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_multirate_fir": [[195, 4, 2, "p-A_stop", "A_stop", "The stopband attenuation $A_{text{stop}}$ in dB."], [195, 4, 2, "p-down", "down", "The decimation rate $Q$."], [195, 4, 2, "p-half_length", "half_length", "The half-length of the polyphase filters."], [195, 4, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.diff_decode": [[196, 4, 2, "p-y", "y", "The input encoded data $y[k]$."], [196, 4, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[197, 4, 2, "p-x", "x", "The input uncoded data $x[k]$."], [197, 4, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[198, 4, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [198, 4, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [198, 4, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [198, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [198, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.downsample": [[199, 4, 2, "p-rate", "rate", "The downsampling factor $r$."], [199, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.ebn0_to_esn0": [[200, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [200, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [200, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[201, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [201, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [201, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [201, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[202, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the energy. The default is None, which computes the energy of the entire array."], [202, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [202, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[203, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [203, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [203, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[204, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [204, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.euclidean": [[205, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the distance. The default is None, which computes the distance across the entire array."], [205, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [205, 4, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.evm": [[206, 4, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [206, 4, 2, "p-output", "output", "The output type of the EVM calculation."], [206, 4, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [206, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.frequency_offset": [[207, 4, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [207, 4, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [207, 4, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [207, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [207, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[208, 4, 2, "p-distance", "distance", "The distance $d$ in meters between the transmitter and receiver."], [208, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[209, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [209, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [209, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [209, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[210, 4, 2, "p-n", "n", "The length of the Gray code."]], "sdr.half_sine": [[211, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [211, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [211, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.hamming": [[212, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the distance. The default is None, which computes the distance across the entire array."], [212, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [212, 4, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.hexdump": [[213, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [213, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[214, 4, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [214, 4, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [214, 4, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.linear": [[215, 4, 2, "p-type", "type", "The type of output value or signal."], [215, 4, 2, "p-x", "x", "The input value or signal in dB."]], "sdr.mix": [[216, 4, 2, "p-complex", "complex", "Indicates whether to mix by a complex exponential or real sinusoid."], [216, 4, 2, "p-freq", "freq", "The frequency $f$ of the sinusoid in Hz (or 1/samples if sample_rate=1). The frequency must satisfy $-f_s/2 le f le f_s/2$."], [216, 4, 2, "p-phase", "phase", "The phase $phi$ of the sinusoid in degrees."], [216, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal."], [216, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.pack": [[217, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [217, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [217, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[218, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the PAPR. The default is None, which computes the PAPR of the entire array."], [218, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[219, 4, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [219, 4, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [219, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[220, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the peak power. The default is None, which computes the peak power of the entire array."], [220, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [220, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[221, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [221, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.percent": [[222, 4, 2, "p-x", "x", "The input ratio."]], "sdr.plot": [[223, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [224, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [225, 5, 1, "", "eye", "Plots the eye diagram of the baseband modulated signal $x[n]$."], [226, 5, 1, "", "filter", "Plots the magnitude response $|H(omega)|^2$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [227, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [228, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [229, 5, 1, "", "magnitude_response", "Plots the magnitude response $|H(omega)|^2$ of the filter."], [230, 5, 1, "", "p_d", "Plots the probability of detection $P_D$ as a function of received SNR or ENR."], [231, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [232, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [233, 5, 1, "", "phase_response", "Plots the phase response $angle H(omega)$ of the filter."], [234, 5, 1, "", "phase_tree", "Plots the phase tree of a continuous-phase modulated (CPM) signal signal $x[n]$."], [235, 5, 1, "", "raster", "Plots a raster of the time-domain signal $x[n]$."], [236, 5, 1, "", "roc", "Plots the receiver operating characteristic (ROC) curve as a function of $P_{FA}$."], [237, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [238, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [239, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [240, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [241, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [242, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [243, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[223, 4, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [223, 4, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."], [223, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."]], "sdr.plot.constellation": [[224, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [224, 4, 2, "p-kwargs", "kwargs", "If heatmap=False, additional keyword arguments to pass to matplotlib.pyplot.scatter(). The following keyword arguments are set by default. The defaults may be overwritten."], [224, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [224, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.eye": [[225, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [225, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [225, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [225, 4, 2, "p-span", "span", "The number of symbols per raster."], [225, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [225, 4, 2, "p-x", "x", "The baseband modulated signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved."]], "sdr.plot.filter": [[226, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [226, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [226, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [226, 4, 2, "p-filter", "filter", "The filter definition."], [226, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [226, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[227, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [227, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [227, 4, 2, "p-filter", "filter", "The filter definition."], [227, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [227, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [227, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.impulse_response": [[228, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [228, 4, 2, "p-filter", "filter", "The filter definition."], [228, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.magnitude_response": [[229, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [229, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [229, 4, 2, "p-filter", "filter", "The filter definition."], [229, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [229, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [229, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.p_d": [[230, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [230, 4, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [230, 4, 2, "p-x", "x", "The SNR or ENR in dB."], [230, 4, 2, "p-x_label", "x_label", "The x-axis label to use."]], "sdr.plot.periodogram": [[231, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [231, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [231, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [231, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [231, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [231, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [231, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [231, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [231, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [231, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_delay": [[232, 4, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [232, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [232, 4, 2, "p-filter", "filter", "The filter definition."], [232, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [232, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [232, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_response": [[233, 4, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [233, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [233, 4, 2, "p-filter", "filter", "The filter definition."], [233, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [233, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [233, 4, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [233, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_tree": [[234, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [234, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [234, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [234, 4, 2, "p-span", "span", "The number of symbols per raster."], [234, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [234, 4, 2, "p-x", "x", "The baseband CPM signal $x[n]$."]], "sdr.plot.raster": [[235, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [235, 4, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\"."], [235, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.collections.LineCollection. The following keyword arguments are set by default. The defaults may be overwritten."], [235, 4, 2, "p-length", "length", "The length of each raster in samples. This must be provided if x is 1D."], [235, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [235, 4, 2, "p-stride", "stride", "The stride between each raster in samples. If None, the stride is set to length."], [235, 4, 2, "p-x", "x", "The time-domain signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved. If x is 1D, the rastering is determined by length and stride. If x is 2D, the rows correspond to each raster."]], "sdr.plot.roc": [[236, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to the plotting function defined by type."], [236, 4, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [236, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [236, 4, 2, "p-type", "type", "The type of plot to generate."]], "sdr.plot.ser": [[237, 4, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [237, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."], [237, 4, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.spectrogram": [[238, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [238, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [238, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.pcolormesh(). The following keyword arguments are set by default. The defaults may be overwritten."], [238, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [238, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [238, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [238, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [238, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [238, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[239, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [239, 4, 2, "p-filter", "filter", "The filter definition."], [239, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.symbol_map": [[240, 4, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [240, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot(). The following keyword arguments are set by default. The defaults may be overwritten."], [240, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [240, 4, 2, "p-modulation", "modulation", "The linear modulation or symbol map ${0, dots, M-1} mapsto mathbb{C}$."]], "sdr.plot.time_domain": [[241, 4, 2, "p-centered", "centered", "Indicates whether to center the x-axis about 0. This argument is mutually exclusive with offset."], [241, 4, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal. If \"color\", the real and imaginary parts will have different colors based on the current Matplotlib color cycle. If \"line\", the real part will have a solid line and the imaginary part will have a dashed line, and both lines will share the same color."], [241, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [241, 4, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. The units of the offset are $1/f_s$. This argument is mutually exclusive with centered."], [241, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [241, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[243, 4, 2, "p-filter", "filter", "The filter definition."], [243, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.polyphase_decompose": [[244, 4, 2, "p-phases", "phases", "The number of phases $B$."], [244, 4, 2, "p-taps", "taps", "The multirate FIR filter taps $h_i$."]], "sdr.ppb": [[245, 4, 2, "p-x", "x", "The input ratio."]], "sdr.ppm": [[246, 4, 2, "p-x", "x", "The input ratio."]], "sdr.raised_cosine": [[247, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [247, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [247, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [247, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rectangular": [[248, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [248, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [248, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[249, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [249, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[250, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [250, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [250, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [250, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[251, 4, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [251, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.snr_to_ebn0": [[252, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [252, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [252, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [252, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[253, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [253, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.to_complex_bb": [[254, 4, 2, "p-x_r", "x_r", "The real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$. If the length is odd, one zero is appended to the end."]], "sdr.to_real_pb": [[255, 4, 2, "p-x_c", "x_c", "The complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$."]], "sdr.unpack": [[256, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [256, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [256, 4, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.upsample": [[257, 4, 2, "p-rate", "rate", "The upsampling factor $r$."], [257, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.wavelength": [[258, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.zadoff_chu": [[259, 4, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [259, 4, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence. The root must be relatively prime to the length, i.e., $gcd(u, N) = 1$."], [259, 4, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence. When $q ne 0$, the returned sequence is a cyclic shift of the root-$u$ Zadoff-Chu sequence."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"convers": 0, "decibel": 0, "ratio": 0, "from": [0, 264, 265, 266], "e_b": 0, "n_0": 0, "e_": 0, "": [0, 268, 269], "n": [0, 267, 268, 269], "data": 1, "manipul": [1, 3], "detect": [2, 7], "detector": 2, "theoret": 2, "limit": 2, "digit": [3, 269], "signal": [3, 261, 267, 270], "process": 3, "fir": [3, 268], "filter": [3, 7, 268, 269, 271], "iir": [3, 269], "multir": 3, "arbitrari": [3, 267], "resampl": [3, 267], "correl": 3, "link": 4, "budget": 4, "channel": [4, 261], "capac": 4, "path": 4, "loss": 4, "antenna": 4, "measur": 5, "energi": 5, "power": [5, 270], "voltag": 5, "distanc": 5, "modul": [5, 6, 7], "linear": 6, "continu": 6, "phase": [6, 271, 272], "orthogon": 6, "puls": [6, 270, 273], "shape": [6, 270, 273], "symbol": [6, 272], "map": [6, 272], "encod": 6, "plot": [7, 270], "configur": [7, 264, 266], "time": [7, 270, 271], "domain": [7, 270, 271], "frequenc": [7, 268, 269, 270, 271], "spectral": 7, "estim": 7, "analysi": 7, "probabl": 8, "note": [9, 208, 229, 231, 238], "constructor": [9, 26, 37, 44, 51, 68, 75, 94, 96, 107, 125, 134, 136, 144, 148, 156, 165], "method": [9, 26, 37, 39, 44, 51, 68, 75, 94, 96, 107, 125, 134, 136, 144, 148, 156, 160, 165], "properti": [9, 26, 37, 51, 68, 75, 94, 96, 107, 125, 134, 136, 144, 148, 156, 165], "special": [26, 37, 51, 68, 75, 94, 96, 125, 136, 165], "string": [26, 37, 51, 75, 94, 96, 107, 134, 144, 148, 156, 165], "represent": [26, 37, 51, 75, 94, 96, 107, 134, 144, 148, 156, 165], "stream": [26, 37, 51, 75, 94, 96, 165], "mode": [26, 37, 51, 75, 94, 96, 165], "onli": [26, 37, 51, 75, 94, 96, 165], "see": [44, 46, 59, 60, 61, 65, 83, 84, 86, 91, 108, 111, 121, 135, 145, 149, 152, 154, 157, 158, 159, 188, 218, 257], "also": [44, 46, 59, 60, 61, 65, 83, 84, 86, 91, 108, 111, 121, 135, 145, 149, 152, 154, 157, 158, 159, 188, 218, 257], "warn": [199, 257], "sequenc": 260, "simul": 261, "model": 261, "impair": 261, "synchron": 262, "document": 263, "instal": [263, 264, 265, 266, 274], "build": 263, "doc": 263, "serv": 263, "format": 264, "run": [264, 266], "linter": 264, "formatt": 264, "pre": 264, "commit": 264, "v": [264, 266], "code": [264, 266], "pypi": 265, "github": 265, "edit": 265, "local": 265, "folder": 265, "dev": 265, "depend": 265, "unit": 266, "test": 266, "command": 266, "line": 266, "farrow": 267, "construct": 267, "an": [267, 268, 269], "input": 267, "x": 267, "t_": 267, "rate": [267, 272], "r": 267, "y": 267, "frac": 267, "upsampl": 267, "integ": 267, "downsampl": 267, "irrat": 267, "creat": [268, 269], "examin": [268, 269, 270], "impuls": [268, 269], "respons": [268, 269, 271], "h": [268, 269], "step": [268, 269, 271], "omega": [268, 269], "group": [268, 269], "delai": [268, 269], "tau_g": [268, 269], "fulli": [268, 269], "analyz": [268, 269, 271], "zero": 269, "pole": 269, "stabil": 269, "peak": 270, "averag": 270, "qpsk": [270, 272], "variou": 270, "across": [270, 271], "excess": 270, "bandwidth": 270, "lock": 271, "loop": 271, "design": 271, "proport": 271, "plu": 271, "integr": 271, "ppi": 271, "implement": 271, "pll": 271, "close": 271, "perform": 271, "compar": 271, "zeta": 271, "b_n": 271, "t": 271, "shift": 272, "kei": 272, "constel": 272, "bpsk": 272, "8": [272, 275], "psk": 272, "16": 272, "error": 272, "curv": 272, "bit": 272, "rais": 273, "cosin": 273, "squar": 273, "root": 273, "gaussian": 273, "sdr": 274, "featur": 274, "v0": 275, "0": 275, "10": 275, "chang": 275, "contributor": 275, "9": 275, "7": 275, "6": 275, "5": 275, "4": 275, "3": 275, "2": 275, "1": 275, "version": 276, "alpha": 276, "releas": 276, "beta": 276}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Conversions": [[0, "conversions"]], "Decibels": [[0, "decibels"]], "Ratios": [[0, "ratios"]], "From E_b/N_0": [[0, "from-e-b-n-0"]], "From E_s/N_0": [[0, "from-e-s-n-0"]], "From S/N": [[0, "from-s-n"]], "Data manipulation": [[1, "data-manipulation"]], "Detection": [[2, "detection"], [7, "detection"]], "Detectors": [[2, "detectors"]], "Theoretical limits": [[2, "theoretical-limits"]], "Digital signal processing": [[3, "digital-signal-processing"]], "FIR filtering": [[3, "fir-filtering"]], "IIR filtering": [[3, "iir-filtering"]], "Multirate filtering": [[3, "multirate-filtering"]], "Arbitrary resampling": [[3, "arbitrary-resampling"]], "Correlation": [[3, "correlation"]], "Signal manipulation": [[3, "signal-manipulation"]], "Link budgets": [[4, "link-budgets"]], "Channel capacity": [[4, "channel-capacity"]], "Path losses": [[4, "path-losses"]], "Antennas": [[4, "antennas"]], "Measurement": [[5, "measurement"]], "Energy": [[5, "energy"]], "Power": [[5, "power"]], "Voltage": [[5, "voltage"]], "Distance": [[5, "distance"]], "Modulation": [[5, "modulation"], [6, "modulation"], [7, "modulation"]], "Linear modulations": [[6, "linear-modulations"]], "Continuous-phase modulations": [[6, "continuous-phase-modulations"]], "Orthogonal modulations": [[6, "orthogonal-modulations"]], "Pulse shaping": [[6, "pulse-shaping"]], "Symbol mapping": [[6, "symbol-mapping"], [272, "symbol-mapping"]], "Symbol encoding": [[6, "symbol-encoding"]], "Plotting": [[7, "plotting"]], "Configuration": [[7, "configuration"], [264, "configuration"], [266, "configuration"]], "Time-domain": [[7, "time-domain"]], "Frequency-domain": [[7, "frequency-domain"]], "Spectral estimation": [[7, "spectral-estimation"]], "Filter analysis": [[7, "filter-analysis"]], "Probability": [[8, "probability"]], "Note": [[9, null], [208, null], [229, null], [231, null], [231, null], [238, null]], "Constructors": [[9, "constructors"], [26, "constructors"], [37, "constructors"], [44, "constructors"], [51, "constructors"], [68, "constructors"], [75, "constructors"], [94, "constructors"], [96, "constructors"], [107, "constructors"], [125, "constructors"], [134, "constructors"], [136, "constructors"], [144, "constructors"], [148, "constructors"], [156, "constructors"], [165, "constructors"]], "Methods": [[9, "methods"], [26, "methods"], [37, "methods"], [39, "methods"], [44, "methods"], [51, "methods"], [68, "methods"], [75, "methods"], [94, "methods"], [96, "methods"], [107, "methods"], [125, "methods"], [134, "methods"], [136, "methods"], [144, "methods"], [148, "methods"], [156, "methods"], [160, "methods"], [165, "methods"]], "Properties": [[9, "properties"], [26, "properties"], [37, "properties"], [51, "properties"], [68, "properties"], [75, "properties"], [94, "properties"], [96, "properties"], [107, "properties"], [125, "properties"], [134, "properties"], [136, "properties"], [144, "properties"], [148, "properties"], [156, "properties"], [165, "properties"]], "Special methods": [[26, "special-methods"], [37, "special-methods"], [51, "special-methods"], [68, "special-methods"], [75, "special-methods"], [94, "special-methods"], [96, "special-methods"], [125, "special-methods"], [136, "special-methods"], [165, "special-methods"]], "String representation": [[26, "string-representation"], [37, "string-representation"], [51, "string-representation"], [75, "string-representation"], [94, "string-representation"], [96, "string-representation"], [107, "string-representation"], [134, "string-representation"], [144, "string-representation"], [148, "string-representation"], [156, "string-representation"], [165, "string-representation"]], "Streaming mode only": [[26, "streaming-mode-only"], [37, "streaming-mode-only"], [51, "streaming-mode-only"], [75, "streaming-mode-only"], [94, "streaming-mode-only"], [96, "streaming-mode-only"], [165, "streaming-mode-only"]], "See also": [[44, null], [46, null], [59, null], [60, null], [61, null], [65, null], [83, null], [84, null], [86, null], [91, null], [108, null], [111, null], [121, null], [135, null], [145, null], [149, null], [152, null], [154, null], [157, null], [158, null], [159, null], [188, null], [218, null], [257, null]], "Warning": [[199, null], [257, null]], "Sequences": [[260, "sequences"]], "Simulation": [[261, "simulation"]], "Channel models": [[261, "channel-models"]], "Signal impairments": [[261, "signal-impairments"]], "Synchronization": [[262, "synchronization"]], "Documentation": [[263, "documentation"]], "Install": [[263, "install"], [264, "install"], [266, "install"]], "Build the docs": [[263, "build-the-docs"]], "Serve the docs": [[263, "serve-the-docs"]], "Formatting": [[264, "formatting"]], "Run the linter": [[264, "run-the-linter"]], "Run the formatter": [[264, "run-the-formatter"]], "Pre-commit": [[264, "pre-commit"]], "Run from VS Code": [[264, "run-from-vs-code"], [266, "run-from-vs-code"]], "Installation": [[265, "installation"], [274, "installation"]], "Install from PyPI": [[265, "install-from-pypi"]], "Install from GitHub": [[265, "install-from-github"]], "Editable install from local folder": [[265, "editable-install-from-local-folder"]], "Install the dev dependencies": [[265, "install-the-dev-dependencies"]], "Unit Tests": [[266, "unit-tests"]], "Run from the command line": [[266, "run-from-the-command-line"]], "Farrow arbitrary resampler": [[267, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[267, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[267, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[267, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[267, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[267, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[267, "downsample-by-an-irrational-rate"]], "FIR filters": [[268, "fir-filters"]], "Create an FIR filter": [[268, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[268, "examine-the-impulse-response-h-n"], [269, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[268, "examine-the-step-response-s-n"], [269, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[268, "examine-the-frequency-response-h-omega"], [269, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[268, "examine-the-group-delay-tau-g-omega"], [269, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[268, "fully-analyze-a-fir-filter"]], "IIR filters": [[269, "iir-filters"]], "Create an IIR filter": [[269, "create-an-iir-filter"]], "Examine the zeros and poles": [[269, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[269, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[269, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[270, "peak-to-average-power"]], "QPSK signal with various pulse shapes": [[270, "qpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[270, "examine-time-domain"]], "Examine frequency domain": [[270, "examine-frequency-domain"]], "Plot across excess bandwidth": [[270, "plot-across-excess-bandwidth"]], "Phase-locked loops": [[271, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[271, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[271, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[271, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[271, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[271, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[271, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[271, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[272, "phase-shift-keying"]], "Constellations": [[272, "constellations"]], "BPSK": [[272, "bpsk"]], "QPSK": [[272, "qpsk"]], "8-PSK": [[272, "id1"]], "16-PSK": [[272, "id2"]], "Error rate curves": [[272, "error-rate-curves"]], "Bit error rate curves": [[272, "bit-error-rate-curves"]], "Symbol error rate curves": [[272, "symbol-error-rate-curves"]], "Pulse shapes": [[273, "pulse-shapes"]], "Raised cosine": [[273, "raised-cosine"]], "Square-root raised cosine": [[273, "square-root-raised-cosine"]], "Gaussian": [[273, "gaussian"]], "sdr": [[274, "sdr"]], "Features": [[274, "features"]], "v0.0": [[275, "v0-0"]], "v0.0.10": [[275, "v0-0-10"]], "Changes": [[275, "changes"], [275, "id1"], [275, "id3"], [275, "id5"], [275, "id7"], [275, "id9"], [275, "id11"], [275, "id13"], [275, "id15"], [275, "id17"]], "Contributors": [[275, "contributors"], [275, "id2"], [275, "id4"], [275, "id6"], [275, "id8"], [275, "id10"], [275, "id12"], [275, "id14"], [275, "id16"], [275, "id18"]], "v0.0.9": [[275, "v0-0-9"]], "v0.0.8": [[275, "v0-0-8"]], "v0.0.7": [[275, "v0-0-7"]], "v0.0.6": [[275, "v0-0-6"]], "v0.0.5": [[275, "v0-0-5"]], "v0.0.4": [[275, "v0-0-4"]], "v0.0.3": [[275, "v0-0-3"]], "v0.0.2": [[275, "v0-0-2"]], "v0.0.1": [[275, "v0-0-1"]], "Versioning": [[276, "versioning"]], "Alpha releases": [[276, "alpha-releases"]], "Beta releases": [[276, "beta-releases"]]}, "indexentries": {"module": [[3, "module-sdr"]], "sdr": [[3, "module-sdr"]]}, "docurls": ["api/conversions/", "api/data-manipulation/", "api/detection/", "api/dsp/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.Decimator/", "api/sdr.Decimator.__call__/", "api/sdr.Decimator.__init__/", "api/sdr.Decimator.__repr__/", "api/sdr.Decimator.__str__/", "api/sdr.Decimator.delay/", "api/sdr.Decimator.method/", "api/sdr.Decimator.polyphase_taps/", "api/sdr.Decimator.rate/", "api/sdr.Decimator.reset/", "api/sdr.Decimator.taps/", "api/sdr.Differentiator/", "api/sdr.Differentiator.__init__/", "api/sdr.EnergyDetector/", "api/sdr.EnergyDetector.p_d/", "api/sdr.EnergyDetector.p_fa/", "api/sdr.EnergyDetector.roc/", "api/sdr.EnergyDetector.threshold/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__call__/", "api/sdr.FIR.__init__/", "api/sdr.FIR.__len__/", "api/sdr.FIR.__repr__/", "api/sdr.FIR.__str__/", "api/sdr.FIR.delay/", "api/sdr.FIR.flush/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.frequency_response_log/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.reset/", "api/sdr.FIR.state/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__call__/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__call__/", "api/sdr.IIR.__init__/", "api/sdr.IIR.__repr__/", "api/sdr.IIR.__str__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.state/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.Integrator/", "api/sdr.Integrator.__init__/", "api/sdr.Interpolator/", "api/sdr.Interpolator.__call__/", "api/sdr.Interpolator.__init__/", "api/sdr.Interpolator.__repr__/", "api/sdr.Interpolator.__str__/", "api/sdr.Interpolator.delay/", "api/sdr.Interpolator.method/", "api/sdr.Interpolator.polyphase_taps/", "api/sdr.Interpolator.rate/", "api/sdr.Interpolator.reset/", "api/sdr.Interpolator.taps/", "api/sdr.LinearModulation/", "api/sdr.LinearModulation.__init__/", "api/sdr.LinearModulation.__repr__/", "api/sdr.LinearModulation.__str__/", "api/sdr.LinearModulation.ber/", "api/sdr.LinearModulation.bps/", "api/sdr.LinearModulation.decide_symbols/", "api/sdr.LinearModulation.demodulate/", "api/sdr.LinearModulation.map_symbols/", "api/sdr.LinearModulation.modulate/", "api/sdr.LinearModulation.order/", "api/sdr.LinearModulation.phase_offset/", "api/sdr.LinearModulation.pulse_shape/", "api/sdr.LinearModulation.rx_filter/", "api/sdr.LinearModulation.ser/", "api/sdr.LinearModulation.sps/", "api/sdr.LinearModulation.symbol_map/", "api/sdr.LinearModulation.tx_filter/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__call__/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.MSK/", "api/sdr.MSK.__init__/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__call__/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.OQPSK/", "api/sdr.OQPSK.__init__/", "api/sdr.OQPSK.__repr__/", "api/sdr.OQPSK.__str__/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.__repr__/", "api/sdr.PSK.__str__/", "api/sdr.PSK.ber/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.PiMPSK/", "api/sdr.PiMPSK.__init__/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.ReplicaCorrelator/", "api/sdr.ReplicaCorrelator.p_d/", "api/sdr.ReplicaCorrelator.p_fa/", "api/sdr.ReplicaCorrelator.roc/", "api/sdr.ReplicaCorrelator.threshold/", "api/sdr.Resampler/", "api/sdr.Resampler.__call__/", "api/sdr.Resampler.__init__/", "api/sdr.Resampler.__repr__/", "api/sdr.Resampler.__str__/", "api/sdr.Resampler.delay/", "api/sdr.Resampler.down/", "api/sdr.Resampler.method/", "api/sdr.Resampler.polyphase_taps/", "api/sdr.Resampler.rate/", "api/sdr.Resampler.reset/", "api/sdr.Resampler.taps/", "api/sdr.Resampler.up/", "api/sdr.albersheim/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.barker/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.db/", "api/sdr.design_bandpass_fir/", "api/sdr.design_bandstop_fir/", "api/sdr.design_frac_delay_fir/", "api/sdr.design_highpass_fir/", "api/sdr.design_lowpass_fir/", "api/sdr.design_multirate_fir/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.downsample/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.euclidean/", "api/sdr.evm/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.half_sine/", "api/sdr.hamming/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.linear/", "api/sdr.mix/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.percent/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.eye/", "api/sdr.plot.filter/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.magnitude_response/", "api/sdr.plot.p_d/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.phase_tree/", "api/sdr.plot.raster/", "api/sdr.plot.roc/", "api/sdr.plot.ser/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.polyphase_decompose/", "api/sdr.ppb/", "api/sdr.ppm/", "api/sdr.raised_cosine/", "api/sdr.rectangular/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.to_complex_bb/", "api/sdr.to_real_pb/", "api/sdr.unpack/", "api/sdr.upsample/", "api/sdr.wavelength/", "api/sdr.zadoff_chu/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/formatting/", "development/installation/", "development/unit-tests/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})