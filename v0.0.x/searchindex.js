Search.setIndex({"titles": ["Conversions", "Data manipulation", "Detection", "Digital signal processing", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "sdr.AGC", "sdr.AGC.__call__", "sdr.AGC.__init__", "sdr.AGC.attack", "sdr.AGC.decay", "sdr.AGC.gain", "sdr.AGC.reference", "sdr.AGC.reset", "sdr.AGC.streaming", "sdr.BinaryErasureChannel", "sdr.BinaryErasureChannel.X", "sdr.BinaryErasureChannel.Y", "sdr.BinaryErasureChannel.__call__", "sdr.BinaryErasureChannel.__init__", "sdr.BinaryErasureChannel.capacities", "sdr.BinaryErasureChannel.capacity", "sdr.BinaryErasureChannel.p", "sdr.BinarySymmetricChannel", "sdr.BinarySymmetricChannel.X", "sdr.BinarySymmetricChannel.Y", "sdr.BinarySymmetricChannel.__call__", "sdr.BinarySymmetricChannel.__init__", "sdr.BinarySymmetricChannel.capacities", "sdr.BinarySymmetricChannel.capacity", "sdr.BinarySymmetricChannel.p", "sdr.CPM", "sdr.CPM.__init__", "sdr.CPM.ber", "sdr.CPM.bps", "sdr.CPM.demodulate", "sdr.CPM.index", "sdr.CPM.modulate", "sdr.CPM.order", "sdr.CPM.phase_offset", "sdr.CPM.pulse_shape", "sdr.CPM.rx_filter", "sdr.CPM.ser", "sdr.CPM.sps", "sdr.CPM.tx_filter", "sdr.Channel", "sdr.Channel.__call__", "sdr.Channel.__init__", "sdr.Channel.capacities", "sdr.Channel.capacity", "sdr.Channel.reset", "sdr.Channelizer", "sdr.Channelizer.__call__", "sdr.Channelizer.__init__", "sdr.Channelizer.channels", "sdr.Channelizer.method", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.Decimator", "sdr.Decimator.__init__", "sdr.Decimator.method", "sdr.Decimator.reset", "sdr.Differentiator", "sdr.Differentiator.__init__", "sdr.DiscreteMemorylessChannel", "sdr.DiscreteMemorylessChannel.P", "sdr.DiscreteMemorylessChannel.X", "sdr.DiscreteMemorylessChannel.Y", "sdr.DiscreteMemorylessChannel.__call__", "sdr.DiscreteMemorylessChannel.__init__", "sdr.EnergyDetector", "sdr.EnergyDetector.p_d", "sdr.EnergyDetector.p_fa", "sdr.EnergyDetector.roc", "sdr.EnergyDetector.threshold", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__call__", "sdr.FIR.__init__", "sdr.FIR.__len__", "sdr.FIR.delay", "sdr.FIR.flush", "sdr.FIR.frequency_response", "sdr.FIR.group_delay", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.phase_delay", "sdr.FIR.reset", "sdr.FIR.state", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FLFSR", "sdr.FLFSR.Taps", "sdr.FLFSR.__init__", "sdr.FLFSR.characteristic_poly", "sdr.FLFSR.feedback_poly", "sdr.FLFSR.field", "sdr.FLFSR.initial_state", "sdr.FLFSR.order", "sdr.FLFSR.reset", "sdr.FLFSR.state", "sdr.FLFSR.step", "sdr.FLFSR.taps", "sdr.FLFSR.to_galois_lfsr", "sdr.FarrowResampler", "sdr.FarrowResampler.__call__", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.delay", "sdr.FarrowResampler.flush", "sdr.FarrowResampler.order", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.state", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.FractionalDelay", "sdr.FractionalDelay.__init__", "sdr.GLFSR", "sdr.GLFSR.Taps", "sdr.GLFSR.__init__", "sdr.GLFSR.characteristic_poly", "sdr.GLFSR.feedback_poly", "sdr.GLFSR.field", "sdr.GLFSR.initial_state", "sdr.GLFSR.order", "sdr.GLFSR.reset", "sdr.GLFSR.state", "sdr.GLFSR.step", "sdr.GLFSR.taps", "sdr.GLFSR.to_fibonacci_lfsr", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__call__", "sdr.IIR.__init__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.frequency_response", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.state", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.Integrator", "sdr.Integrator.__init__", "sdr.Interpolator", "sdr.Interpolator.__init__", "sdr.Interpolator.method", "sdr.LeakyIntegrator", "sdr.LeakyIntegrator.__init__", "sdr.LinearModulation", "sdr.LinearModulation.__init__", "sdr.LinearModulation.ber", "sdr.LinearModulation.bps", "sdr.LinearModulation.decide_symbols", "sdr.LinearModulation.demodulate", "sdr.LinearModulation.map_symbols", "sdr.LinearModulation.modulate", "sdr.LinearModulation.order", "sdr.LinearModulation.phase_offset", "sdr.LinearModulation.pulse_shape", "sdr.LinearModulation.rx_filter", "sdr.LinearModulation.ser", "sdr.LinearModulation.sps", "sdr.LinearModulation.symbol_map", "sdr.LinearModulation.tx_filter", "sdr.LoopFilter", "sdr.LoopFilter.__call__", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.iir", "sdr.LoopFilter.integral_gain", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.proportional_gain", "sdr.LoopFilter.reset", "sdr.MLPED", "sdr.MLPED.A_received", "sdr.MLPED.A_reference", "sdr.MLPED.__call__", "sdr.MLPED.__init__", "sdr.MLPED.data_aided_error", "sdr.MLPED.decision_directed_error", "sdr.MLPED.gain", "sdr.MSK", "sdr.MSK.__init__", "sdr.MovingAverager", "sdr.MovingAverager.__init__", "sdr.NCO", "sdr.NCO.__call__", "sdr.NCO.__init__", "sdr.NCO.gain", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.reset", "sdr.NCO.step", "sdr.OQPSK", "sdr.OQPSK.__init__", "sdr.PED", "sdr.PED.__call__", "sdr.PED.__init__", "sdr.PED.data_aided_error", "sdr.PED.decision_directed_error", "sdr.PED.gain", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.ber", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.PiMPSK", "sdr.PiMPSK.__init__", "sdr.PolyphaseFIR", "sdr.PolyphaseFIR.__call__", "sdr.PolyphaseFIR.__init__", "sdr.PolyphaseFIR.branches", "sdr.PolyphaseFIR.decimation", "sdr.PolyphaseFIR.delay", "sdr.PolyphaseFIR.input", "sdr.PolyphaseFIR.interpolation", "sdr.PolyphaseFIR.order", "sdr.PolyphaseFIR.output", "sdr.PolyphaseFIR.polyphase_order", "sdr.PolyphaseFIR.polyphase_taps", "sdr.PolyphaseFIR.rate", "sdr.PolyphaseFIR.reset", "sdr.PolyphaseFIR.taps", "sdr.Q", "sdr.Qinv", "sdr.ReplicaCorrelator", "sdr.ReplicaCorrelator.p_d", "sdr.ReplicaCorrelator.p_fa", "sdr.ReplicaCorrelator.roc", "sdr.ReplicaCorrelator.threshold", "sdr.Resampler", "sdr.Resampler.__call__", "sdr.Resampler.__init__", "sdr.Resampler.method", "sdr.albersheim", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.barker_code", "sdr.bec", "sdr.bec_capacity", "sdr.berlekamp_massey", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.db", "sdr.design_bandpass_fir", "sdr.design_bandstop_fir", "sdr.design_frac_delay_fir", "sdr.design_highpass_fir", "sdr.design_lowpass_fir", "sdr.design_multirate_fir", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.downsample", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.euclidean", "sdr.evm", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.hadamard_code", "sdr.half_sine", "sdr.hamming", "sdr.hexdump", "sdr.iq_imbalance", "sdr.linear", "sdr.m_sequence", "sdr.mix", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.percent", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.eye", "sdr.plot.filter", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.magnitude_response", "sdr.plot.p_d", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.phase_tree", "sdr.plot.raster", "sdr.plot.roc", "sdr.plot.ser", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.polyphase_decompose", "sdr.ppb", "sdr.ppm", "sdr.raised_cosine", "sdr.rectangular", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.to_complex_bb", "sdr.to_real_pb", "sdr.unpack", "sdr.upsample", "sdr.walsh_code", "sdr.wavelength", "sdr.zadoff_chu_sequence", "Sequences", "Simulation", "Synchronization", "Documentation", "Formatting", "Installation", "Unit Tests", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366], "db": [0, 4, 5, 36, 45, 54, 56, 59, 70, 72, 77, 89, 91, 93, 95, 96, 97, 99, 170, 173, 179, 189, 210, 222, 230, 232, 234, 236, 256, 258, 262, 264, 265, 266, 267, 276, 277, 278, 279, 280, 281, 282, 287, 288, 289, 290, 291, 293, 295, 296, 302, 303, 307, 308, 309, 310, 312, 313, 319, 326, 338, 341, 342, 360, 362, 363, 365], "x": [0, 1, 3, 5, 6, 7, 8, 9, 10, 18, 19, 21, 26, 27, 29, 34, 38, 40, 48, 49, 54, 55, 59, 76, 80, 82, 84, 86, 87, 88, 93, 95, 100, 101, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 170, 171, 172, 175, 177, 182, 184, 193, 194, 210, 212, 222, 230, 236, 238, 239, 240, 244, 253, 254, 255, 260, 261, 265, 266, 269, 271, 273, 275, 276, 283, 284, 285, 286, 289, 292, 293, 294, 300, 302, 303, 304, 305, 306, 307, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 327, 329, 330, 334, 335, 338, 340, 345, 346, 350, 351, 355, 360, 361, 362, 365, 366], "arraylik": [0, 1, 2, 3, 4, 5, 6, 7, 8, 18, 23, 26, 31, 34, 35, 36, 38, 40, 45, 54, 55, 56, 76, 77, 80, 82, 87, 88, 89, 90, 91, 92, 93, 95, 100, 101, 102, 116, 117, 118, 124, 129, 135, 139, 141, 142, 143, 149, 154, 155, 156, 157, 170, 172, 173, 175, 177, 178, 179, 181, 182, 183, 184, 189, 202, 205, 210, 211, 212, 222, 223, 230, 231, 232, 234, 236, 237, 238, 239, 240, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 267, 269, 270, 273, 274, 276, 277, 278, 280, 281, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 301, 303, 306, 308, 311, 315, 316, 317, 318, 319, 320, 321, 322, 325, 327, 328, 332, 333, 334, 335, 341, 342, 345, 348, 351], "ndarrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 18, 19, 20, 21, 23, 26, 27, 28, 29, 31, 34, 36, 38, 40, 43, 45, 48, 49, 51, 54, 55, 76, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 98, 100, 101, 105, 106, 107, 108, 110, 112, 113, 115, 129, 130, 133, 136, 138, 139, 154, 156, 158, 159, 160, 162, 164, 166, 167, 169, 170, 172, 175, 177, 179, 181, 182, 183, 184, 187, 189, 191, 193, 194, 202, 205, 207, 208, 210, 212, 214, 215, 221, 222, 224, 225, 227, 228, 230, 232, 234, 235, 236, 238, 239, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 323, 324, 326, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351], "float_": [0, 2, 3, 4, 5, 6, 7, 8, 18, 23, 26, 31, 82, 83, 88, 89, 90, 91, 92, 93, 98, 177, 179, 187, 189, 202, 207, 208, 210, 222, 224, 225, 227, 228, 230, 232, 234, 236, 253, 254, 255, 256, 257, 258, 259, 264, 267, 270, 274, 276, 277, 278, 279, 280, 281, 282, 287, 288, 289, 290, 291, 295, 296, 299, 303, 308, 311, 312, 326, 334, 335, 336, 337, 339, 341, 342, 343, 344, 348], "convert": [0, 3, 116, 128, 141, 153, 177, 181, 183, 210, 222, 230, 236, 276, 287, 288, 290, 291, 301, 303, 311, 334, 335, 341, 342, 343, 344], "linear": [0, 9, 14, 16, 54, 80, 116, 119, 121, 123, 127, 129, 141, 144, 146, 148, 152, 172, 173, 174, 177, 178, 207, 208, 210, 222, 227, 228, 230, 236, 260, 262, 263, 266, 271, 276, 303, 304, 318, 320, 325, 327, 329, 364, 365], "unit": [0, 54, 76, 80, 100, 113, 139, 154, 167, 170, 172, 175, 193, 211, 212, 214, 223, 231, 237, 238, 260, 266, 267, 276, 283, 284, 303, 328, 330, 355, 358, 359, 361, 364, 365], "percent": [0, 311, 365], "percentag": [0, 311], "ppm": [0, 335, 340, 351, 365], "part": [0, 271, 330, 334, 335, 340, 361], "per": [0, 1, 34, 35, 37, 38, 39, 40, 46, 55, 101, 177, 178, 180, 182, 184, 190, 210, 211, 215, 222, 223, 230, 231, 236, 237, 239, 261, 266, 267, 287, 288, 290, 291, 294, 296, 299, 301, 306, 313, 314, 323, 334, 335, 336, 337, 339, 340, 341, 342, 345, 354, 360, 363, 365], "million": [0, 335, 340], "ppb": [0, 334, 365], "billion": [0, 334], "ebn0_to_esn0": [0, 45, 189, 234, 287, 362, 365], "ebn0": [0, 7, 34, 36, 177, 179, 210, 222, 230, 232, 236, 267, 287, 288, 312, 362], "bp": [0, 34, 37, 177, 180, 210, 222, 230, 236, 287, 288, 290, 341, 362], "int": [0, 1, 3, 6, 7, 18, 21, 22, 26, 29, 30, 34, 35, 37, 41, 46, 48, 50, 53, 54, 56, 76, 77, 80, 81, 82, 86, 87, 93, 95, 96, 99, 100, 103, 104, 106, 107, 108, 109, 110, 113, 116, 123, 126, 129, 131, 132, 134, 139, 140, 141, 148, 151, 154, 160, 162, 163, 167, 170, 172, 173, 175, 177, 178, 180, 185, 190, 207, 208, 210, 211, 212, 213, 214, 221, 222, 223, 227, 228, 230, 231, 236, 237, 238, 240, 241, 242, 243, 245, 246, 248, 260, 262, 265, 266, 268, 269, 272, 273, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 296, 297, 298, 299, 300, 301, 304, 306, 307, 309, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 327, 328, 333, 336, 337, 339, 341, 342, 345, 346, 347, 349, 350, 362], "ebn0_to_snr": [0, 210, 222, 230, 236, 288, 365], "esn0_to_ebn0": [0, 36, 179, 232, 290, 365], "esn0": [0, 7, 34, 45, 177, 189, 210, 222, 230, 234, 236, 290, 291, 326, 362], "esn0_to_snr": [0, 291, 362, 365], "sp": [0, 6, 7, 34, 35, 38, 40, 46, 177, 178, 182, 184, 190, 210, 211, 222, 223, 230, 231, 236, 237, 288, 291, 296, 299, 314, 323, 330, 336, 337, 339, 341, 342, 343, 344, 360, 362, 363], "1": [0, 3, 6, 8, 9, 11, 12, 13, 16, 18, 19, 20, 21, 26, 27, 28, 29, 35, 38, 40, 54, 56, 59, 66, 69, 73, 75, 76, 77, 80, 81, 82, 87, 88, 89, 91, 92, 93, 100, 103, 104, 106, 107, 110, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 131, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 160, 170, 171, 172, 173, 175, 176, 177, 178, 181, 182, 183, 184, 191, 193, 195, 196, 202, 206, 210, 211, 212, 214, 216, 222, 223, 224, 230, 231, 232, 233, 234, 235, 236, 237, 238, 246, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 366], "snr_to_ebn0": [0, 36, 179, 232, 267, 341, 365], "snr": [0, 2, 4, 7, 88, 89, 91, 93, 95, 96, 97, 98, 99, 210, 222, 230, 236, 264, 266, 267, 319, 341, 342, 343, 344, 351, 362, 365], "snr_to_esn0": [0, 45, 189, 234, 342, 365], "pack": [1, 93, 95, 210, 222, 230, 236, 301, 306, 364, 365], "bpe": [1, 306, 345], "int_": [1, 5, 6, 18, 19, 20, 26, 27, 28, 34, 38, 82, 84, 85, 177, 181, 182, 210, 222, 230, 236, 269, 272, 273, 283, 284, 285, 297, 300, 306, 345, 350, 351], "binari": [1, 4, 18, 21, 22, 26, 29, 30, 82, 211, 223, 231, 235, 237, 268, 269, 270, 272, 273, 274, 285, 298, 306, 329, 345, 347, 350, 351, 362, 364, 365], "arrai": [1, 18, 26, 55, 82, 93, 106, 126, 151, 160, 173, 178, 210, 211, 214, 222, 223, 230, 231, 235, 236, 237, 246, 248, 249, 252, 262, 265, 268, 269, 272, 273, 283, 284, 285, 289, 292, 297, 298, 300, 304, 306, 307, 309, 330, 333, 345, 347, 359, 361], "an": [1, 2, 3, 4, 9, 11, 26, 54, 76, 80, 88, 100, 102, 106, 108, 124, 126, 128, 139, 140, 149, 151, 153, 154, 155, 157, 160, 162, 170, 171, 172, 175, 176, 178, 211, 212, 214, 223, 231, 232, 234, 237, 238, 255, 260, 267, 279, 306, 312, 317, 326, 330, 345, 348, 352, 355, 361, 364, 365], "multipl": [1, 106, 160, 306, 345, 362, 365], "bit": [1, 5, 7, 18, 23, 24, 26, 31, 32, 34, 36, 37, 48, 51, 52, 82, 93, 95, 98, 177, 179, 180, 210, 211, 222, 223, 230, 231, 232, 235, 236, 237, 267, 269, 270, 273, 274, 287, 288, 290, 301, 306, 312, 341, 345, 364, 365], "element": [1, 301, 306, 345, 361], "unpack": [1, 93, 95, 301, 345, 362, 364, 365], "hexdump": [1, 93, 301, 364, 365], "byte": [1, 301], "width": [1, 139, 279, 301], "16": [1, 116, 129, 139, 141, 210, 222, 230, 232, 234, 235, 236, 279, 287, 288, 290, 298, 301, 312, 326, 333, 336, 339, 341, 342, 347, 360, 365], "str": [1, 81, 301, 314, 320, 323, 324, 327], "return": [1, 6, 10, 21, 23, 29, 31, 36, 38, 40, 45, 49, 51, 54, 55, 59, 67, 69, 72, 73, 76, 80, 86, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 105, 106, 107, 108, 110, 113, 117, 126, 128, 130, 133, 139, 142, 151, 153, 154, 156, 160, 162, 167, 170, 172, 175, 179, 181, 182, 183, 184, 189, 194, 205, 207, 208, 212, 215, 221, 225, 227, 228, 232, 234, 238, 239, 253, 254, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 358, 359, 360, 362, 365], "specifi": [1, 93, 96, 97, 99, 116, 124, 141, 149, 202, 207, 208, 224, 227, 228, 266, 267, 285, 301, 353, 358, 359, 365], "class": [2, 3, 5, 6, 9, 18, 26, 34, 48, 54, 59, 76, 80, 82, 88, 93, 95, 96, 97, 98, 99, 100, 116, 121, 129, 139, 141, 146, 154, 170, 172, 175, 177, 193, 202, 210, 212, 214, 222, 224, 230, 236, 238, 255, 260, 350, 351, 352, 358, 359, 362, 364, 365], "replicacorrel": [2, 255, 256, 257, 258, 259, 365], "implement": [2, 3, 6, 9, 18, 26, 34, 54, 76, 80, 82, 88, 100, 129, 139, 154, 170, 172, 175, 177, 193, 197, 202, 210, 212, 214, 222, 224, 230, 236, 238, 255, 260, 264, 271, 351, 352, 357], "clairvoy": [2, 255], "replica": [2, 255], "correl": [2, 255, 268, 298, 347, 349], "energydetector": [2, 88, 89, 90, 91, 92, 365], "energi": [2, 36, 45, 88, 179, 189, 232, 234, 255, 256, 257, 258, 259, 267, 287, 288, 289, 290, 291, 296, 299, 312, 326, 336, 337, 339, 341, 342, 364, 365], "albersheim": [2, 264, 365], "p_d": [2, 7, 88, 89, 91, 255, 256, 258, 264, 319, 325, 365], "p_fa": [2, 7, 88, 89, 90, 91, 92, 255, 256, 257, 258, 259, 264, 325], "estim": [2, 34, 38, 59, 177, 181, 182, 210, 222, 230, 236, 264, 320, 327, 361], "minimum": [2, 6, 210, 264, 365], "requir": [2, 55, 101, 239, 261, 264, 271, 353, 354, 355, 356, 365], "singl": [2, 91, 106, 160, 232, 234, 264, 314, 361], "sampl": [2, 3, 11, 12, 13, 34, 35, 38, 40, 46, 54, 55, 59, 66, 74, 76, 80, 89, 90, 91, 92, 100, 101, 104, 106, 107, 108, 110, 113, 129, 132, 135, 139, 160, 162, 167, 172, 173, 177, 178, 182, 184, 190, 193, 195, 199, 210, 211, 212, 214, 215, 216, 218, 221, 222, 223, 230, 231, 236, 237, 238, 239, 243, 250, 260, 261, 262, 264, 266, 286, 288, 291, 294, 296, 299, 305, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 327, 328, 330, 336, 337, 339, 340, 341, 342, 343, 344, 346, 351, 357, 360, 361, 363, 364, 365], "given": [2, 48, 51, 82, 88, 93, 95, 96, 97, 99, 128, 129, 130, 153, 238, 249, 252, 255, 264, 293, 358, 359], "n_": [2, 89, 90, 91, 92, 264], "nc": [2, 89, 90, 91, 92, 264], "non": [2, 55, 89, 90, 91, 92, 101, 239, 261, 264, 299, 330, 337], "coher": [2, 89, 90, 91, 92, 264], "combin": [2, 264], "achiev": [2, 264, 362, 363], "probabl": [2, 7, 18, 22, 25, 26, 30, 33, 82, 83, 87, 88, 89, 90, 91, 92, 253, 254, 255, 256, 257, 258, 259, 264, 269, 270, 273, 274, 285, 314, 319, 325, 351, 365], "fals": [2, 5, 11, 54, 56, 76, 77, 81, 88, 89, 90, 91, 92, 100, 102, 106, 129, 131, 154, 155, 157, 160, 171, 172, 173, 175, 176, 210, 212, 213, 222, 230, 232, 234, 236, 240, 255, 256, 257, 258, 259, 260, 262, 264, 265, 269, 273, 285, 289, 305, 309, 310, 313, 314, 320, 324, 325, 327, 330, 338, 359, 363], "alarm": [2, 88, 89, 90, 91, 92, 255, 256, 257, 258, 259, 264, 325], "p_": [2, 7, 88, 89, 90, 91, 92, 232, 234, 255, 256, 257, 258, 259, 264, 265, 266, 276, 285, 293, 303, 307, 309, 312, 320, 325, 326], "fa": [2, 7, 88, 89, 90, 91, 92, 255, 256, 257, 258, 259, 264, 325], "thi": [2, 18, 22, 26, 30, 35, 50, 53, 59, 76, 87, 95, 96, 97, 99, 100, 118, 126, 143, 151, 154, 172, 173, 177, 178, 191, 202, 210, 215, 222, 223, 230, 231, 235, 236, 237, 260, 262, 264, 266, 267, 269, 271, 273, 285, 286, 293, 295, 298, 313, 314, 320, 324, 327, 330, 346, 347, 353, 355, 356, 357, 359, 361, 362, 363], "function": [2, 7, 8, 59, 68, 80, 100, 139, 154, 155, 175, 193, 214, 253, 254, 264, 267, 271, 286, 296, 298, 312, 313, 314, 319, 320, 324, 325, 326, 327, 336, 339, 346, 347, 358, 359, 361, 363, 364, 365], "": [2, 3, 7, 34, 38, 40, 54, 59, 67, 69, 70, 71, 73, 74, 76, 80, 88, 95, 96, 97, 98, 99, 100, 106, 107, 110, 113, 116, 117, 118, 122, 124, 125, 139, 141, 142, 143, 147, 149, 150, 154, 160, 167, 170, 172, 175, 177, 178, 181, 182, 183, 184, 202, 210, 212, 222, 230, 236, 238, 250, 255, 257, 259, 260, 264, 266, 267, 288, 291, 293, 294, 302, 313, 314, 315, 316, 318, 320, 321, 322, 323, 324, 327, 328, 330, 331, 340, 341, 342, 343, 344, 356, 357, 360, 362, 364, 365], "equat": [2, 67, 69, 70, 71, 72, 73, 89, 90, 92, 154, 175, 222, 230, 236, 256, 257, 259, 264, 295], "finit": [3, 100, 116, 121, 141, 146, 364, 365], "impuls": [3, 7, 54, 76, 80, 100, 108, 139, 154, 162, 170, 172, 175, 212, 238, 260, 277, 278, 279, 280, 281, 282, 296, 315, 317, 336, 339, 363, 364, 365], "respons": [3, 7, 54, 76, 80, 100, 106, 108, 113, 139, 154, 160, 162, 167, 170, 172, 175, 212, 238, 260, 277, 278, 279, 280, 281, 282, 296, 314, 315, 316, 317, 318, 322, 328, 336, 339, 363, 364, 365], "design_lowpass_fir": [3, 106, 281, 365], "order": [3, 34, 35, 41, 54, 55, 56, 59, 76, 77, 80, 81, 93, 98, 100, 101, 109, 116, 117, 122, 123, 124, 125, 126, 127, 128, 129, 131, 134, 139, 141, 142, 147, 148, 149, 150, 151, 152, 153, 154, 163, 170, 172, 173, 175, 177, 178, 185, 193, 195, 210, 212, 222, 230, 231, 236, 237, 238, 239, 246, 248, 260, 261, 262, 266, 271, 277, 278, 280, 281, 282, 287, 288, 290, 293, 294, 296, 313, 314, 323, 336, 339, 340, 341, 352, 359, 360, 361, 362, 365], "design": [3, 35, 54, 56, 58, 76, 77, 78, 139, 172, 173, 174, 178, 223, 231, 237, 260, 262, 263, 277, 278, 279, 280, 281, 282, 353, 364, 365], "lowpass": [3, 281], "h": [3, 7, 34, 35, 39, 43, 44, 47, 54, 56, 76, 77, 80, 88, 100, 102, 106, 108, 115, 139, 154, 160, 162, 170, 172, 173, 175, 177, 178, 187, 188, 192, 193, 210, 212, 222, 223, 230, 231, 236, 237, 238, 240, 246, 249, 252, 255, 260, 262, 277, 278, 279, 280, 281, 282, 296, 315, 317, 318, 322, 333, 336, 339, 360, 361, 363], "n": [3, 5, 7, 8, 9, 10, 34, 35, 38, 40, 43, 44, 47, 54, 55, 56, 59, 76, 77, 80, 81, 87, 88, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 115, 116, 117, 118, 119, 120, 122, 124, 125, 126, 127, 129, 130, 133, 136, 139, 140, 141, 142, 143, 144, 145, 147, 149, 150, 152, 154, 156, 157, 158, 162, 163, 167, 170, 171, 172, 173, 175, 177, 178, 182, 184, 187, 188, 192, 193, 194, 210, 212, 214, 215, 221, 222, 223, 230, 231, 236, 237, 238, 239, 240, 244, 246, 247, 248, 249, 252, 253, 254, 255, 257, 259, 260, 261, 262, 265, 266, 267, 268, 271, 272, 275, 277, 278, 279, 280, 281, 282, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 300, 302, 304, 305, 307, 309, 310, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 327, 328, 330, 333, 338, 340, 341, 342, 343, 344, 346, 347, 349, 350, 351, 361, 363, 364], "us": [3, 7, 9, 16, 18, 23, 24, 26, 31, 32, 34, 35, 38, 54, 56, 58, 76, 77, 78, 79, 80, 81, 82, 100, 102, 105, 106, 111, 129, 131, 133, 139, 154, 155, 157, 160, 165, 170, 171, 172, 173, 174, 175, 176, 177, 178, 181, 182, 193, 197, 202, 207, 208, 210, 212, 213, 222, 223, 224, 227, 228, 230, 231, 236, 237, 238, 240, 244, 247, 251, 260, 262, 263, 267, 270, 271, 274, 277, 278, 279, 280, 281, 282, 293, 298, 301, 304, 306, 313, 314, 315, 317, 319, 320, 327, 328, 331, 345, 347, 353, 354, 355, 356, 358, 359, 361, 362, 363, 364, 365, 366], "window": [3, 76, 80, 81, 106, 172, 260, 277, 278, 279, 280, 281, 282, 320, 327, 365], "method": [3, 7, 58, 78, 171, 173, 174, 240, 244, 247, 262, 263, 277, 278, 279, 280, 281, 282, 320, 327, 358, 359, 365], "design_highpass_fir": [3, 280, 365], "highpass": [3, 280], "design_bandpass_fir": [3, 277, 365], "bandpass": [3, 277], "design_bandstop_fir": [3, 278, 365], "bandstop": [3, 278], "infinit": [3, 154, 170, 364, 365], "polyphasefir": [3, 54, 76, 172, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 260, 365], "gener": [3, 22, 30, 50, 53, 87, 210, 222, 230, 236, 238, 266, 269, 271, 272, 273, 285, 297, 304, 325, 350, 353, 362, 365], "interpol": [3, 34, 47, 54, 76, 129, 172, 173, 174, 177, 192, 210, 222, 230, 236, 238, 240, 244, 245, 247, 260, 262, 282, 346, 360, 362, 364, 365], "decim": [3, 34, 38, 40, 44, 54, 76, 77, 78, 79, 172, 177, 178, 181, 182, 183, 184, 188, 191, 210, 211, 222, 223, 230, 231, 235, 236, 237, 238, 240, 242, 244, 247, 260, 262, 282, 286, 304, 362, 364, 365], "ration": [3, 260, 262, 282, 365], "channel": [3, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 82, 83, 84, 85, 86, 87, 210, 222, 232, 234, 238, 240, 247, 267, 269, 270, 273, 274, 285, 312, 326, 364, 365], "design_multirate_fir": [3, 56, 77, 173, 262, 282, 365], "multir": [3, 54, 55, 76, 172, 260, 282, 333, 365], "kaiser": [3, 54, 56, 58, 76, 77, 78, 172, 173, 174, 260, 262, 263, 277, 278, 279, 280, 281, 282, 365], "polyphase_decompos": [3, 333, 365], "branch": [3, 54, 76, 172, 238, 240, 241, 249, 252, 260, 333, 354, 355], "tap": [3, 54, 56, 76, 77, 80, 100, 115, 116, 117, 127, 128, 129, 138, 139, 141, 142, 152, 153, 154, 158, 159, 170, 172, 173, 175, 212, 238, 240, 246, 248, 249, 252, 260, 262, 271, 333, 358, 359], "decompos": [3, 54, 76, 172, 260, 333], "prototyp": [3, 54, 56, 76, 77, 172, 173, 238, 239, 240, 246, 249, 252, 260, 261, 262, 333, 365], "matrix": [3, 82, 83, 87, 285, 333, 351], "h_i": [3, 54, 76, 172, 238, 248, 249, 252, 260, 333, 358], "b": [3, 54, 76, 154, 157, 172, 238, 240, 241, 246, 248, 249, 252, 260, 264, 267, 296, 301, 315, 317, 328, 333, 353, 354, 359, 363], "phase": [3, 7, 34, 35, 39, 42, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 80, 100, 110, 139, 172, 177, 178, 186, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 260, 264, 294, 302, 304, 305, 314, 321, 322, 323, 333, 351, 364, 365], "movingaverag": [3, 175, 212, 213, 365], "move": [3, 175, 176, 212, 213, 364, 365], "averag": [3, 5, 93, 175, 176, 202, 207, 208, 210, 212, 213, 222, 224, 227, 228, 236, 265, 266, 267, 293, 307, 320, 364, 365], "differenti": [3, 6, 80, 81, 210, 232, 234, 283, 284, 330, 364, 365], "integr": [3, 59, 64, 89, 90, 91, 92, 170, 171, 175, 176, 193, 195, 198, 212, 264, 352, 356, 359, 364, 365], "leakyintegr": [3, 175, 176, 212, 365], "leaki": [3, 175, 176, 212, 364, 365], "farrowresampl": [3, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 357, 365], "piecewis": [3, 129, 131, 134], "polynomi": [3, 118, 119, 120, 123, 129, 131, 134, 143, 144, 145, 148, 271, 304, 350, 365], "farrow": [3, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 364, 365], "fractionaldelai": [3, 139, 140, 365], "fraction": [3, 54, 76, 129, 135, 139, 140, 172, 238, 250, 260, 279, 296, 357, 364, 365], "delai": [3, 7, 54, 55, 76, 80, 100, 101, 104, 107, 110, 129, 132, 139, 140, 172, 193, 212, 214, 238, 239, 243, 260, 261, 279, 283, 284, 299, 316, 321, 337, 361, 364, 365], "design_frac_delay_fir": [3, 279, 365], "length": [3, 7, 38, 40, 54, 55, 56, 76, 77, 80, 81, 91, 100, 101, 103, 108, 113, 115, 139, 140, 156, 172, 173, 176, 178, 182, 184, 211, 212, 213, 223, 231, 237, 238, 239, 260, 261, 262, 268, 272, 277, 278, 279, 280, 281, 282, 296, 297, 298, 299, 304, 315, 317, 320, 324, 327, 328, 336, 337, 339, 343, 347, 349, 354, 357, 360, 363], "mix": [3, 54, 305, 364, 365], "freq": [3, 4, 54, 76, 80, 100, 106, 139, 154, 160, 170, 172, 175, 212, 214, 215, 238, 260, 294, 295, 305, 308, 348, 351, 357, 361], "float": [3, 5, 6, 9, 11, 12, 13, 14, 15, 16, 18, 22, 24, 25, 26, 30, 32, 33, 34, 35, 39, 42, 48, 52, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 82, 91, 93, 95, 96, 97, 99, 100, 106, 107, 110, 129, 130, 133, 139, 140, 154, 155, 160, 161, 170, 172, 173, 175, 176, 177, 178, 186, 193, 195, 196, 198, 199, 200, 202, 203, 204, 206, 209, 210, 211, 212, 214, 216, 217, 218, 219, 222, 223, 224, 229, 230, 231, 233, 236, 237, 238, 250, 258, 260, 262, 265, 266, 267, 269, 273, 275, 277, 278, 279, 280, 281, 282, 293, 294, 296, 302, 305, 307, 309, 310, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 327, 329, 330, 336, 338, 339, 340, 351], "0": [3, 6, 8, 9, 11, 16, 18, 19, 20, 21, 26, 27, 28, 29, 34, 35, 38, 40, 54, 55, 66, 76, 80, 82, 87, 88, 91, 93, 100, 101, 106, 107, 110, 116, 117, 118, 119, 120, 122, 125, 126, 127, 128, 129, 139, 140, 141, 142, 143, 144, 145, 147, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 170, 172, 173, 175, 177, 178, 181, 182, 183, 184, 191, 195, 210, 211, 212, 214, 216, 222, 223, 230, 231, 233, 235, 236, 237, 238, 239, 246, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 300, 302, 303, 304, 305, 306, 308, 311, 313, 314, 315, 316, 317, 318, 321, 322, 323, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 366], "time": [3, 5, 9, 59, 66, 67, 69, 70, 71, 72, 73, 80, 87, 100, 126, 129, 151, 154, 170, 175, 193, 195, 202, 212, 222, 224, 230, 236, 265, 266, 275, 277, 278, 280, 281, 285, 286, 289, 291, 292, 294, 296, 298, 300, 302, 305, 307, 309, 310, 315, 320, 324, 327, 330, 336, 338, 339, 340, 342, 343, 344, 346, 347, 351, 357, 358, 359, 363, 364, 365], "domain": [3, 5, 265, 266, 275, 277, 278, 280, 281, 286, 289, 292, 294, 300, 302, 305, 307, 309, 310, 315, 320, 324, 327, 330, 338, 340, 343, 344, 346, 351, 364, 365], "complex": [3, 5, 7, 34, 38, 40, 54, 59, 76, 80, 88, 89, 90, 91, 92, 100, 106, 139, 154, 160, 170, 172, 175, 177, 178, 181, 182, 183, 184, 191, 202, 205, 210, 211, 212, 214, 215, 221, 222, 223, 224, 225, 230, 231, 235, 236, 237, 238, 255, 256, 257, 258, 259, 260, 266, 267, 286, 293, 302, 305, 313, 314, 316, 318, 320, 321, 322, 327, 329, 330, 343, 344, 346, 351, 357, 358, 359, 361, 362, 364, 365], "exponenti": [3, 54, 215, 286, 305, 343, 344, 346, 357, 358, 359, 365], "real": [3, 89, 90, 92, 253, 254, 256, 257, 259, 266, 305, 316, 318, 320, 321, 322, 324, 327, 330, 343, 344, 358, 359, 361, 364, 365], "sinusoid": [3, 230, 266, 305, 343, 344, 359, 365], "to_complex_bb": [3, 343, 365], "x_r": [3, 343, 344], "complex_": [3, 7, 9, 10, 34, 40, 177, 181, 182, 183, 184, 191, 210, 214, 221, 222, 224, 225, 230, 235, 236, 313, 329, 343, 344, 349, 350], "passband": [3, 139, 277, 278, 279, 280, 281, 296, 299, 336, 337, 339, 343, 344, 360, 365], "center": [3, 54, 277, 278, 279, 280, 281, 299, 330, 337, 343, 344, 365], "f_": [3, 34, 35, 39, 46, 54, 55, 59, 66, 74, 76, 106, 107, 110, 160, 172, 177, 178, 190, 210, 211, 222, 223, 230, 231, 236, 237, 238, 239, 250, 260, 261, 277, 278, 280, 281, 286, 288, 291, 294, 296, 305, 314, 315, 316, 318, 320, 321, 322, 323, 324, 327, 330, 340, 341, 342, 343, 344, 346, 357, 358, 359, 361, 363], "r": [3, 9, 54, 76, 129, 130, 132, 133, 172, 238, 239, 250, 260, 261, 267, 286, 287, 288, 290, 293, 296, 305, 336, 339, 341, 343, 344, 346, 353, 354, 355, 356, 359, 360, 361, 363], "4": [3, 9, 18, 26, 54, 67, 69, 76, 80, 82, 89, 93, 106, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 131, 139, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 160, 170, 172, 175, 202, 210, 211, 212, 214, 222, 223, 224, 230, 232, 233, 234, 235, 236, 238, 246, 248, 249, 252, 255, 256, 257, 259, 260, 264, 266, 267, 268, 271, 272, 277, 278, 279, 280, 281, 285, 286, 287, 288, 290, 291, 293, 294, 295, 297, 298, 301, 302, 304, 305, 306, 308, 312, 313, 314, 315, 316, 317, 318, 321, 322, 326, 328, 329, 330, 331, 332, 333, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 355, 357, 359, 360, 361, 362], "rate": [3, 5, 7, 9, 11, 12, 13, 34, 35, 36, 39, 45, 54, 55, 56, 59, 66, 74, 76, 77, 93, 94, 95, 97, 98, 106, 107, 110, 129, 130, 132, 133, 160, 172, 173, 177, 179, 189, 210, 222, 230, 232, 234, 236, 238, 239, 242, 245, 250, 260, 261, 262, 282, 286, 287, 288, 290, 294, 305, 312, 314, 315, 316, 318, 320, 321, 322, 323, 324, 326, 327, 330, 340, 341, 343, 344, 346, 351, 364, 365], "baseband": [3, 7, 59, 210, 222, 230, 236, 305, 314, 323, 343, 344, 360, 361, 365], "x_c": [3, 343, 344], "c": [3, 18, 23, 24, 26, 31, 32, 48, 51, 52, 54, 55, 56, 57, 59, 67, 69, 70, 71, 72, 73, 82, 95, 96, 97, 98, 99, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 177, 178, 191, 193, 210, 222, 230, 235, 236, 267, 270, 271, 274, 295, 304, 308, 329, 343, 344, 348, 350, 361], "2": [3, 7, 9, 18, 26, 34, 35, 41, 54, 55, 59, 67, 69, 72, 76, 80, 82, 88, 89, 90, 91, 92, 93, 100, 104, 106, 107, 110, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 160, 170, 172, 175, 176, 177, 178, 185, 202, 210, 212, 214, 222, 223, 224, 230, 231, 232, 233, 234, 235, 236, 237, 238, 246, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 353, 356, 357, 358, 359, 360, 361, 362, 363], "to_real_pb": [3, 344, 360, 365], "2f_": [3, 344], "upsampl": [3, 172, 260, 346, 365], "factor": [3, 5, 59, 66, 75, 175, 176, 178, 193, 195, 196, 223, 231, 237, 275, 286, 346, 361], "insert": [3, 172, 260, 346], "zero": [3, 7, 54, 76, 80, 100, 105, 129, 133, 135, 139, 140, 154, 155, 160, 169, 170, 172, 173, 175, 193, 212, 215, 238, 260, 262, 279, 298, 299, 306, 315, 316, 317, 318, 321, 322, 328, 332, 337, 343, 346, 347, 358, 360, 361, 363, 364, 365], "between": [3, 5, 11, 17, 56, 76, 77, 81, 82, 102, 114, 131, 137, 155, 157, 168, 171, 172, 173, 176, 213, 224, 240, 260, 262, 292, 295, 300, 320, 324, 327, 346, 361, 364], "each": [3, 54, 55, 56, 76, 77, 101, 172, 173, 238, 239, 240, 244, 247, 248, 260, 261, 262, 282, 293, 301, 304, 320, 324, 327, 346], "downsampl": [3, 54, 76, 260, 286, 365], "discard": [3, 54, 76, 260, 286], "everi": [3, 54, 76, 93, 260, 286, 357], "bsc_capac": [4, 274, 365], "p": [4, 8, 18, 22, 23, 25, 26, 30, 31, 33, 54, 76, 82, 83, 87, 116, 141, 172, 173, 214, 215, 238, 245, 250, 253, 254, 260, 262, 269, 270, 271, 273, 274, 282, 285, 351], "calcul": [4, 5, 18, 23, 26, 31, 267, 270, 274, 293, 295, 308, 348, 365], "symmetr": [4, 26, 30, 82, 273, 274, 285, 343, 344, 351, 364], "bsc": [4, 26, 27, 28, 30, 31, 33, 82, 273, 274, 285, 351, 364, 365], "bec_capac": [4, 270, 365], "erasur": [4, 18, 20, 21, 22, 25, 82, 269, 270, 285, 351, 364], "bec": [4, 18, 19, 20, 22, 23, 25, 82, 269, 270, 285, 351, 364, 365], "awgn_capac": [4, 267, 365], "addit": [4, 266, 267, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 346, 351, 364], "white": [4, 266, 267, 351, 364], "gaussian": [4, 6, 80, 170, 175, 212, 266, 267, 296, 351, 364, 365], "nois": [4, 9, 36, 45, 59, 60, 61, 66, 72, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 179, 189, 193, 195, 199, 210, 222, 230, 232, 234, 236, 255, 256, 257, 258, 259, 266, 267, 287, 288, 290, 291, 312, 326, 341, 342, 351, 361, 364], "awgn": [4, 210, 222, 230, 232, 234, 236, 266, 267, 293, 312, 313, 326, 343, 344, 351, 362, 364, 365], "fspl": [4, 295], "distanc": [4, 292, 295, 300, 364, 365], "free": [4, 210, 222, 230, 236, 295, 364], "space": [4, 54, 106, 160, 295, 364], "wavelength": [4, 348, 365], "lambda": [4, 295, 348], "electromagnet": [4, 348], "wave": [4, 129, 210, 348], "frequenc": [4, 34, 35, 39, 43, 54, 59, 67, 69, 71, 76, 80, 100, 106, 107, 110, 129, 139, 154, 160, 170, 172, 175, 193, 210, 212, 214, 215, 238, 260, 277, 278, 279, 280, 281, 286, 294, 295, 305, 308, 315, 316, 318, 320, 321, 322, 327, 343, 344, 346, 348, 351, 363, 364, 365], "f": [4, 35, 39, 54, 67, 69, 76, 80, 91, 106, 107, 110, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 139, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 160, 170, 172, 214, 215, 260, 264, 266, 294, 295, 296, 304, 305, 308, 336, 339, 340, 348, 349, 354, 357, 358, 359, 360, 361, 362, 363], "parabolic_antenna": [4, 308, 365], "tupl": [4, 54, 76, 80, 81, 88, 91, 93, 95, 98, 100, 106, 107, 110, 139, 154, 160, 170, 172, 175, 177, 181, 182, 202, 207, 208, 210, 212, 222, 224, 227, 228, 230, 236, 238, 255, 258, 260, 265, 289, 292, 300, 307, 308, 309, 313, 315, 316, 317, 318, 321, 322, 328, 329, 332], "gain": [4, 9, 10, 11, 14, 16, 17, 59, 62, 63, 64, 65, 66, 154, 155, 161, 170, 175, 193, 195, 198, 200, 202, 209, 214, 216, 217, 224, 229, 264, 277, 278, 279, 280, 281, 295, 296, 299, 308, 336, 337, 339, 352, 361, 364, 365], "g": [4, 98, 308, 355], "beamwidth": [4, 308], "theta": [4, 214, 216, 219, 308], "parabol": [4, 308], "reflector": [4, 308], "signal": [5, 7, 9, 10, 11, 12, 13, 34, 35, 43, 54, 55, 59, 67, 69, 72, 73, 76, 80, 81, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 105, 129, 130, 133, 139, 154, 156, 170, 172, 175, 177, 178, 187, 193, 194, 202, 203, 204, 206, 210, 212, 214, 215, 221, 222, 223, 230, 231, 236, 237, 238, 239, 240, 244, 247, 255, 256, 257, 258, 259, 260, 261, 265, 266, 267, 275, 276, 277, 278, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 300, 302, 303, 305, 307, 308, 309, 310, 314, 315, 316, 318, 320, 321, 322, 323, 324, 327, 330, 333, 338, 340, 341, 342, 343, 344, 346, 348, 358, 359, 361, 363, 364, 365], "peak_pow": [5, 307, 309, 365], "peak": [5, 210, 222, 236, 275, 293, 307, 309, 310], "average_pow": [5, 265, 307, 365], "papr": [5, 210, 222, 236, 307, 360, 365], "ratio": [5, 35, 36, 39, 45, 72, 89, 91, 93, 95, 96, 97, 98, 99, 179, 189, 210, 222, 232, 234, 236, 256, 258, 266, 267, 287, 288, 290, 291, 307, 311, 312, 326, 334, 335, 341, 342], "peak_voltag": [5, 275, 310, 365], "bool": [5, 9, 11, 17, 54, 56, 76, 77, 80, 81, 89, 90, 91, 92, 100, 102, 106, 114, 129, 131, 137, 139, 154, 155, 157, 160, 168, 170, 171, 172, 173, 175, 176, 210, 212, 213, 222, 230, 232, 234, 236, 238, 240, 256, 257, 258, 259, 260, 262, 265, 289, 305, 309, 310, 313, 314, 322, 324, 327, 329, 330, 338], "rms_voltag": [5, 275, 338, 365], "root": [5, 6, 178, 223, 231, 237, 293, 314, 330, 338, 339, 349, 350, 358, 364], "mean": [5, 293, 320, 327, 338, 363], "squar": [5, 6, 178, 223, 231, 237, 293, 295, 308, 314, 330, 338, 339, 358], "rm": [5, 202, 203, 204, 206, 275, 293, 338], "crest_factor": [5, 275, 307, 365], "crest": [5, 275], "euclidean": [5, 292, 364, 365], "y": [5, 6, 9, 10, 18, 20, 21, 26, 28, 29, 49, 54, 76, 80, 82, 85, 86, 87, 100, 101, 105, 116, 129, 130, 133, 141, 154, 156, 170, 172, 175, 193, 194, 214, 215, 221, 238, 239, 240, 247, 260, 261, 266, 269, 271, 273, 283, 284, 285, 286, 292, 294, 300, 302, 305, 313, 318, 320, 327, 329, 340, 346, 350, 361, 362], "two": [5, 9, 175, 212, 222, 230, 236, 277, 278, 292, 300, 315, 316, 318, 320, 321, 322, 327, 349, 357, 358, 359], "ham": [5, 106, 277, 278, 280, 281, 300, 364, 365], "errorr": [5, 93, 94, 95, 96, 97, 98, 99, 362, 365], "A": [5, 9, 35, 48, 55, 59, 67, 69, 70, 71, 72, 73, 75, 80, 93, 100, 101, 106, 116, 117, 118, 129, 141, 142, 143, 160, 170, 175, 178, 193, 202, 212, 223, 224, 231, 237, 239, 261, 264, 271, 272, 277, 278, 280, 281, 297, 301, 302, 308, 313, 314, 324, 336, 339, 350, 351, 352, 354, 361], "error": [5, 7, 11, 12, 13, 26, 34, 36, 45, 59, 65, 66, 72, 93, 94, 95, 97, 98, 99, 177, 179, 189, 193, 195, 202, 205, 207, 208, 209, 210, 222, 224, 225, 227, 228, 229, 230, 232, 234, 236, 264, 274, 293, 312, 326, 361, 364, 365], "ber": [5, 7, 34, 36, 93, 177, 179, 210, 222, 230, 232, 236, 312, 362, 364, 365], "symbol": [5, 7, 34, 35, 37, 38, 39, 40, 45, 46, 93, 95, 98, 116, 126, 141, 151, 172, 177, 178, 180, 181, 182, 183, 184, 189, 190, 191, 202, 205, 210, 211, 222, 223, 224, 225, 230, 231, 232, 234, 235, 236, 237, 266, 271, 287, 288, 290, 291, 293, 294, 296, 299, 313, 314, 323, 326, 329, 330, 336, 337, 339, 341, 342, 360, 361, 363, 364, 365], "ser": [5, 7, 34, 45, 93, 177, 189, 210, 222, 230, 234, 236, 326, 362, 364, 365], "evm": [5, 293, 364, 365], "x_hat": [5, 7, 93, 95, 293, 313, 362], "ref": [5, 202, 204, 206, 264, 277, 278, 279, 280, 281, 282, 293, 296, 298, 347], "vector": [5, 93, 106, 116, 117, 118, 122, 124, 125, 135, 141, 142, 143, 147, 149, 150, 160, 277, 278, 280, 281, 293, 320, 327, 364, 365], "magnitud": [5, 7, 9, 11, 15, 80, 139, 170, 175, 212, 279, 293, 315, 318, 349, 364, 365], "hat": [5, 7, 34, 38, 95, 177, 181, 182, 202, 205, 210, 222, 224, 225, 230, 236, 293, 313, 329], "k": [5, 6, 7, 34, 35, 37, 38, 40, 41, 54, 80, 95, 116, 141, 170, 177, 178, 180, 181, 182, 183, 184, 185, 202, 205, 210, 222, 224, 225, 230, 231, 236, 237, 283, 284, 287, 288, 290, 293, 313, 329, 330, 341, 360, 363], "linearmodul": [6, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 207, 208, 227, 228, 230, 329, 365], "amplitud": [6, 54, 177, 178, 202, 203, 204, 206, 302, 351, 361], "arbitrari": [6, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 177, 364, 365], "map": [6, 7, 177, 178, 183, 191, 210, 214, 222, 230, 235, 236, 293, 329, 364, 365], "psk": [6, 202, 222, 224, 230, 231, 232, 233, 234, 235, 236, 237, 266, 293, 294, 302, 312, 313, 314, 326, 329, 330, 340, 360, 361, 364, 365], "shift": [6, 116, 117, 127, 141, 142, 152, 210, 222, 230, 232, 233, 234, 235, 236, 271, 304, 349, 350, 358, 359, 364, 365], "kei": [6, 210, 222, 230, 232, 233, 234, 235, 236, 364, 365], "demodul": [6, 34, 38, 177, 182, 210, 222, 230, 236, 365], "pimpsk": [6, 236, 237, 365], "pi": [6, 9, 35, 39, 54, 76, 80, 129, 160, 170, 172, 202, 214, 222, 224, 230, 236, 237, 260, 266, 286, 295, 296, 302, 305, 308, 315, 316, 317, 318, 321, 322, 328, 332, 336, 339, 343, 344, 346, 349, 357, 358, 359, 361, 364, 365], "m": [6, 34, 35, 37, 38, 40, 41, 54, 76, 87, 116, 141, 154, 157, 159, 170, 172, 175, 177, 178, 180, 181, 182, 183, 184, 185, 191, 202, 210, 222, 224, 230, 231, 235, 236, 237, 238, 246, 248, 260, 271, 285, 287, 288, 290, 295, 304, 329, 341, 350, 353, 354, 355, 356, 364, 365], "oqpsk": [6, 210, 222, 223, 365], "offset": [6, 34, 35, 42, 67, 69, 76, 129, 172, 177, 178, 186, 210, 211, 214, 215, 216, 219, 222, 223, 230, 231, 233, 236, 237, 260, 294, 305, 317, 330, 340, 351, 361, 364, 365], "quadratur": [6, 222, 302, 314], "cpm": [6, 7, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 323, 365], "msk": [6, 210, 211, 323, 365], "rectangular": [6, 35, 171, 178, 223, 231, 237, 337, 360, 363, 364, 365], "span": [6, 7, 35, 178, 223, 231, 237, 296, 299, 314, 323, 336, 337, 339, 360, 363, 365], "half_sin": [6, 211, 299, 365], "half": [6, 210, 222, 299, 308, 364, 365], "sine": [6, 129, 210, 215, 299, 364, 365], "time_bandwidth": [6, 296], "raised_cosin": [6, 178, 223, 231, 237, 336, 363, 365], "alpha": [6, 9, 11, 12, 54, 175, 176, 178, 223, 231, 237, 296, 331, 336, 339, 360, 363], "rais": [6, 80, 170, 178, 223, 231, 237, 314, 330, 336, 339, 358, 364], "cosin": [6, 80, 170, 178, 215, 223, 231, 237, 314, 330, 336, 339, 358, 364, 365], "rc": [6, 178, 222, 223, 230, 231, 236, 237, 314, 336], "root_raised_cosin": [6, 80, 170, 178, 223, 231, 237, 315, 316, 317, 318, 321, 322, 328, 332, 339, 358, 360, 362, 363, 365], "srrc": [6, 178, 222, 223, 230, 231, 236, 237, 314, 330, 339, 360, 362], "diff_encod": [6, 210, 222, 230, 232, 234, 236, 283, 284, 365], "y_prev": [6, 283, 284], "input": [6, 9, 10, 18, 19, 21, 26, 27, 29, 48, 49, 54, 55, 56, 59, 67, 69, 72, 73, 76, 77, 80, 81, 82, 84, 86, 87, 100, 101, 102, 108, 112, 113, 129, 130, 131, 132, 135, 136, 139, 154, 155, 156, 157, 162, 167, 170, 171, 172, 173, 175, 176, 193, 194, 212, 213, 214, 215, 222, 230, 232, 234, 236, 238, 239, 240, 243, 244, 253, 260, 261, 262, 266, 267, 269, 270, 273, 274, 276, 283, 284, 285, 286, 303, 306, 311, 317, 328, 334, 335, 345, 346, 351, 358, 359, 361], "data": [6, 202, 207, 224, 227, 283, 284, 301, 306, 330, 345, 364], "diff_decod": [6, 283, 284, 365], "decod": [6, 283], "use_styl": [7, 331, 357, 358, 359, 360, 361, 362, 363], "appli": [7, 54, 76, 81, 172, 178, 210, 222, 230, 236, 260, 294, 302, 313, 314, 317, 320, 327, 329, 330, 331, 340, 351], "default": [7, 108, 113, 117, 118, 124, 126, 142, 143, 149, 151, 211, 223, 231, 235, 237, 265, 268, 271, 289, 292, 298, 300, 304, 307, 309, 313, 316, 318, 320, 321, 322, 324, 327, 329, 331, 347, 362], "matplotlib": [7, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 357, 358, 359, 360, 361, 362, 363, 364], "rcparam": [7, 331], "time_domain": [7, 9, 76, 80, 129, 170, 172, 175, 210, 212, 214, 222, 230, 236, 260, 266, 268, 286, 298, 305, 330, 343, 344, 346, 347, 349, 357, 360, 361, 362, 363, 365], "ani": [7, 18, 21, 26, 29, 54, 76, 80, 82, 86, 100, 106, 139, 154, 160, 170, 172, 175, 212, 214, 215, 238, 260, 268, 276, 286, 298, 303, 304, 330, 346, 347, 350, 356], "dtype": [7, 18, 21, 26, 29, 54, 76, 80, 82, 86, 100, 106, 139, 154, 160, 170, 172, 175, 210, 212, 214, 215, 222, 230, 236, 238, 260, 268, 298, 304, 306, 330, 345, 347, 350, 361], "scalartyp": [7, 330], "t": [7, 59, 61, 66, 88, 116, 117, 127, 141, 142, 152, 193, 195, 199, 255, 271, 296, 301, 330, 336, 339, 353, 357, 365], "raster": [7, 314, 323, 324, 364, 365], "none": [7, 18, 22, 26, 30, 34, 36, 48, 50, 53, 54, 76, 80, 81, 82, 87, 91, 100, 106, 108, 113, 116, 117, 118, 124, 129, 135, 139, 141, 142, 143, 149, 160, 172, 178, 193, 201, 212, 215, 223, 231, 237, 238, 258, 260, 265, 266, 267, 269, 273, 277, 278, 280, 281, 285, 289, 292, 300, 304, 306, 307, 309, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 327, 328, 329, 330, 345, 351, 357, 360, 362], "periodogram": [7, 54, 286, 320, 343, 344, 346, 360, 364, 365], "power": [7, 210, 222, 230, 236, 265, 266, 267, 276, 293, 296, 298, 299, 303, 307, 308, 309, 320, 336, 337, 339, 347, 363, 364], "densiti": [7, 72, 314, 320, 360, 363], "xx": [7, 320], "welch": [7, 320, 327], "spectrogram": [7, 327, 364, 365], "constel": [7, 210, 222, 230, 233, 236, 266, 293, 294, 302, 313, 340, 349, 364, 365], "symbol_map": [7, 177, 178, 191, 210, 222, 230, 233, 235, 236, 293, 329, 362, 365], "ey": [7, 210, 222, 230, 236, 314, 364, 365], "diagram": [7, 9, 54, 59, 76, 100, 172, 175, 193, 210, 214, 222, 230, 236, 260, 283, 284, 314, 364, 365], "phase_tre": [7, 210, 323, 365], "tree": [7, 323, 365], "continu": [7, 34, 35, 170, 210, 323, 357, 365], "kwarg": [7, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332], "e_b": [7, 34, 36, 95, 96, 97, 98, 99, 177, 179, 210, 222, 230, 232, 236, 267, 287, 288, 290, 312, 341, 364], "n_0": [7, 11, 12, 13, 34, 36, 45, 72, 95, 96, 97, 98, 99, 177, 179, 189, 210, 222, 230, 232, 234, 236, 266, 267, 287, 288, 290, 291, 293, 312, 313, 326, 341, 342, 362, 364], "e_": [7, 34, 45, 95, 96, 97, 98, 99, 177, 189, 210, 222, 230, 234, 236, 266, 267, 287, 290, 291, 293, 313, 326, 342, 362, 364], "roc": [7, 88, 91, 255, 258, 325, 365], "receiv": [7, 9, 34, 38, 44, 88, 89, 91, 93, 95, 177, 181, 182, 188, 202, 203, 205, 206, 210, 222, 224, 225, 230, 232, 234, 236, 255, 256, 257, 258, 259, 293, 295, 314, 319, 325, 365], "oper": [7, 11, 88, 91, 255, 258, 325, 361, 365], "characterist": [7, 88, 91, 116, 118, 119, 120, 141, 143, 144, 145, 255, 258, 271, 304, 325, 365], "curv": [7, 88, 91, 232, 234, 255, 258, 312, 325, 326, 365], "enr": [7, 255, 256, 258, 319], "impulse_respons": [7, 54, 76, 80, 100, 108, 139, 154, 162, 170, 172, 175, 212, 238, 260, 277, 278, 279, 280, 281, 282, 296, 299, 317, 336, 337, 339, 358, 359, 363, 365], "step_respons": [7, 54, 76, 80, 100, 113, 139, 154, 167, 170, 172, 175, 212, 238, 260, 328, 358, 359, 361, 365], "step": [7, 54, 76, 80, 100, 113, 116, 122, 124, 125, 126, 128, 139, 141, 147, 149, 150, 151, 153, 154, 167, 170, 172, 175, 212, 214, 215, 221, 238, 260, 271, 328, 364], "zeros_pol": [7, 332, 359, 365], "pole": [7, 154, 155, 160, 164, 170, 175, 315, 316, 317, 318, 321, 322, 328, 332, 358, 364], "magnitude_respons": [7, 80, 106, 139, 160, 170, 175, 212, 277, 278, 279, 280, 281, 282, 296, 299, 318, 336, 337, 339, 358, 359, 361, 363, 365], "omega": [7, 54, 76, 80, 100, 106, 107, 110, 129, 139, 154, 160, 170, 172, 175, 212, 214, 216, 218, 238, 260, 315, 316, 318, 321, 322, 361], "phase_respons": [7, 106, 160, 322, 365], "angl": [7, 224, 322, 361], "phase_delai": [7, 54, 76, 80, 100, 110, 139, 172, 212, 238, 260, 321, 365], "tau_": [7, 54, 76, 80, 100, 110, 139, 172, 212, 238, 260, 321], "phi": [7, 34, 35, 42, 54, 76, 80, 100, 110, 139, 172, 177, 178, 186, 210, 211, 212, 222, 223, 230, 231, 233, 236, 237, 238, 260, 294, 302, 305, 321], "group_delai": [7, 54, 76, 80, 100, 107, 139, 172, 212, 238, 260, 279, 316, 358, 359, 365], "group": [7, 54, 76, 80, 100, 107, 139, 172, 212, 238, 260, 279, 316, 364], "tau_g": [7, 54, 76, 80, 100, 107, 139, 172, 212, 238, 260, 316], "iir": [7, 59, 68, 108, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 193, 197, 212, 315, 316, 317, 318, 321, 322, 328, 332, 358, 361, 364, 365], "q": [8, 54, 76, 77, 172, 210, 222, 238, 242, 250, 253, 254, 255, 256, 257, 259, 260, 262, 282, 304, 349, 365], "comput": [8, 34, 36, 45, 48, 51, 76, 82, 88, 89, 90, 91, 92, 106, 160, 177, 179, 189, 202, 210, 222, 224, 230, 232, 234, 236, 253, 254, 255, 256, 257, 258, 259, 265, 266, 289, 292, 295, 300, 307, 309, 358, 359, 361, 363, 365], "complementari": [8, 253, 254], "cumul": [8, 253, 254], "distribut": [8, 253, 254], "standard": [8, 253, 254, 365], "normal": [8, 35, 59, 61, 66, 193, 195, 199, 253, 254, 277, 278, 280, 281, 293, 296, 299, 315, 316, 318, 320, 321, 322, 327, 336, 337, 339, 361, 363], "mathcal": [8, 18, 19, 20, 21, 26, 27, 28, 29, 82, 84, 85, 86, 87, 88, 253, 254, 255, 256, 257, 258, 259, 266, 285], "qinv": [8, 253, 254, 365], "invers": [8, 54, 254], "agc": [9, 10, 11, 12, 13, 14, 15, 16, 17, 202, 352, 364, 365], "automat": [9, 10, 11, 202, 352, 364, 365], "control": [9, 10, 11, 59, 202, 214, 216, 336, 339, 361, 364, 365], "note": [9, 18, 26, 54, 76, 80, 82, 88, 89, 90, 92, 100, 116, 118, 119, 120, 139, 141, 143, 144, 145, 154, 170, 172, 175, 193, 202, 212, 214, 224, 238, 244, 247, 249, 252, 255, 256, 257, 259, 260, 264, 266, 267, 270, 271, 274, 279, 283, 284, 296, 302, 304, 308, 314, 333, 336, 339, 349], "block": [9, 54, 59, 76, 100, 172, 175, 193, 214, 260, 283, 284], "exp": [9, 54, 160, 214, 215, 222, 230, 236, 286, 296, 302, 305, 315, 316, 317, 318, 321, 322, 328, 332, 344, 346, 349, 357, 359, 361], "z": [9, 59, 100, 154, 170, 175, 193, 214, 271, 283, 284, 349, 358, 359, 361], "log": [9, 315, 316, 318, 320, 321, 322, 324, 358, 359, 361], "beta": [9, 11, 13], "output": [9, 10, 11, 15, 18, 20, 21, 26, 28, 29, 49, 54, 55, 76, 80, 82, 85, 86, 87, 100, 101, 108, 113, 116, 126, 128, 129, 132, 139, 141, 151, 153, 154, 155, 157, 162, 167, 170, 171, 172, 173, 175, 176, 182, 193, 194, 212, 214, 215, 221, 238, 239, 240, 243, 247, 250, 260, 261, 262, 266, 267, 268, 269, 270, 271, 273, 274, 284, 285, 293, 298, 303, 304, 306, 317, 328, 345, 347, 350, 353, 357, 358, 359, 361, 365], "attack": [9, 11, 12], "decai": [9, 11, 13, 357, 359], "refer": [9, 11, 15, 18, 26, 54, 59, 67, 69, 70, 71, 72, 73, 76, 80, 82, 88, 89, 90, 92, 93, 116, 129, 141, 172, 193, 202, 204, 205, 206, 224, 225, 232, 234, 255, 256, 257, 259, 260, 264, 266, 271, 275, 277, 278, 279, 280, 281, 282, 293, 294, 296, 298, 304, 307, 333, 336, 339, 340, 347, 349, 359, 363, 364], "adder": [9, 76, 116, 141, 193, 214, 283, 284, 361], "multipli": [9, 59, 80, 172, 260], "michael": [9, 59, 67, 69, 70, 71, 72, 73, 80, 129, 193, 202, 224, 336, 339], "rice": [9, 59, 67, 69, 70, 71, 72, 73, 80, 129, 193, 202, 224, 336, 339], "digit": [9, 18, 26, 59, 67, 69, 70, 71, 72, 73, 80, 82, 129, 193, 202, 224, 232, 234, 336, 339, 361, 364, 365], "commun": [9, 18, 26, 54, 59, 67, 69, 70, 71, 72, 73, 76, 80, 82, 129, 172, 193, 202, 224, 232, 234, 260, 282, 333, 336, 339, 361, 364], "discret": [9, 54, 59, 67, 69, 70, 71, 72, 73, 80, 82, 87, 129, 170, 175, 193, 202, 212, 224, 266, 285, 291, 336, 339, 342, 351, 357, 361, 364, 365], "approach": [9, 18, 26, 59, 67, 69, 70, 71, 72, 73, 80, 129, 193, 202, 224, 267, 270, 274, 336, 339, 361], "section": [9, 80, 88, 95, 96, 97, 98, 99, 129, 202, 224, 255, 359, 361], "9": [9, 54, 76, 82, 106, 116, 124, 126, 129, 139, 141, 149, 151, 160, 172, 210, 222, 230, 236, 238, 246, 248, 249, 252, 256, 260, 264, 271, 272, 285, 293, 297, 298, 301, 333, 336, 339, 347, 349, 353, 359, 360, 362, 363], "5": [9, 18, 26, 34, 35, 54, 76, 80, 82, 88, 89, 90, 91, 92, 93, 106, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 139, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 170, 172, 175, 202, 210, 212, 214, 222, 230, 236, 238, 246, 248, 249, 252, 256, 258, 260, 264, 266, 268, 269, 271, 272, 273, 274, 277, 278, 279, 280, 281, 285, 286, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 301, 302, 304, 308, 311, 314, 315, 316, 317, 318, 321, 322, 328, 330, 332, 333, 336, 339, 340, 341, 342, 343, 344, 346, 347, 349, 353, 358, 359, 360, 361, 363], "http": [9, 116, 129, 141, 264, 271, 275, 277, 278, 279, 280, 281, 282, 296, 298, 304, 307, 347, 349, 353, 354, 355], "wirelesspi": [9, 129], "com": [9, 129, 264, 271, 277, 278, 279, 280, 281, 282, 296, 298, 347, 354, 355], "how": [9, 296, 299, 314, 323, 324, 330, 336, 337, 339, 347, 356], "work": 9, "exampl": [9, 18, 26, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 89, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 175, 176, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 230, 232, 233, 234, 235, 236, 246, 248, 249, 251, 252, 253, 254, 256, 258, 260, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 308, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 361, 365], "creat": [9, 11, 18, 22, 26, 30, 34, 35, 48, 50, 54, 56, 59, 66, 76, 77, 80, 81, 82, 87, 93, 94, 100, 102, 116, 124, 128, 129, 131, 139, 140, 141, 149, 153, 154, 155, 157, 170, 171, 172, 173, 175, 176, 177, 178, 193, 195, 210, 211, 212, 213, 214, 216, 222, 223, 230, 231, 233, 236, 237, 238, 240, 260, 262, 266, 268, 293, 294, 298, 305, 340, 343, 344, 347, 349, 357, 361, 363], "bursti": 9, "surround": 9, "In": [9, 11, 17, 18, 26, 54, 55, 56, 76, 77, 80, 81, 82, 89, 91, 93, 101, 102, 106, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 131, 137, 139, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 155, 157, 160, 168, 170, 171, 172, 173, 175, 176, 202, 210, 212, 213, 214, 222, 224, 230, 232, 233, 234, 235, 236, 239, 240, 246, 248, 249, 252, 253, 254, 256, 258, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 308, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 357, 362], "np": [9, 18, 19, 20, 26, 27, 28, 54, 76, 80, 82, 83, 84, 85, 89, 91, 106, 129, 139, 160, 170, 172, 175, 177, 187, 191, 210, 212, 214, 222, 230, 232, 234, 235, 236, 246, 248, 249, 252, 256, 258, 260, 264, 266, 267, 268, 269, 270, 271, 273, 274, 285, 286, 293, 294, 295, 298, 302, 305, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 326, 328, 330, 332, 333, 340, 343, 344, 346, 347, 349, 357, 358, 359, 360, 361, 362, 363], "1j": [9, 54, 160, 286, 305, 315, 316, 317, 318, 321, 322, 328, 332, 344, 346, 357, 359, 361], "arang": [9, 54, 76, 129, 139, 172, 246, 248, 249, 252, 260, 266, 268, 286, 298, 305, 333, 343, 344, 346, 347, 349, 357, 361], "5000": [9, 334, 335], "100": [9, 80, 91, 106, 154, 160, 162, 167, 170, 175, 212, 214, 232, 234, 264, 266, 267, 270, 274, 276, 277, 278, 280, 281, 286, 293, 303, 305, 312, 313, 315, 317, 323, 326, 328, 340, 343, 344, 346, 357, 361], "1000": [9, 106, 160, 207, 208, 210, 222, 227, 228, 230, 236, 293, 295, 343, 344, 362], "2000": 9, "10": [9, 54, 80, 82, 89, 91, 93, 116, 122, 124, 125, 126, 128, 129, 139, 141, 147, 149, 150, 151, 153, 170, 172, 178, 210, 222, 223, 230, 231, 232, 234, 236, 237, 246, 248, 249, 252, 256, 258, 260, 264, 265, 266, 271, 272, 276, 277, 278, 280, 281, 285, 287, 288, 289, 290, 291, 294, 295, 296, 297, 298, 299, 301, 302, 303, 305, 307, 308, 309, 310, 312, 313, 315, 316, 317, 318, 321, 322, 326, 328, 330, 332, 333, 336, 337, 338, 339, 340, 341, 342, 347, 349, 358, 361, 362, 363], "3000": 9, "4000": 9, "001": [9, 361], "random": [9, 18, 22, 26, 30, 50, 53, 54, 82, 87, 88, 175, 210, 212, 222, 230, 236, 266, 269, 273, 285, 293, 294, 302, 313, 314, 323, 330, 340, 360, 361, 362], "randn": [9, 54, 175, 212, 330], "size": [9, 38, 40, 87, 126, 151, 182, 184, 268, 271, 285, 298, 304, 330, 347, 357, 361, 362, 363], "3": [9, 18, 26, 54, 59, 67, 69, 70, 73, 76, 80, 82, 88, 89, 93, 106, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 131, 139, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 160, 170, 172, 175, 202, 210, 212, 214, 222, 224, 230, 232, 233, 234, 235, 236, 238, 246, 248, 249, 252, 255, 256, 260, 264, 266, 267, 268, 269, 271, 272, 273, 276, 277, 278, 279, 280, 281, 282, 285, 286, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 308, 313, 314, 315, 316, 317, 318, 321, 322, 328, 330, 332, 333, 336, 337, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 353, 354, 359, 361, 363, 364], "plt": [9, 18, 26, 54, 76, 80, 89, 91, 129, 139, 170, 172, 175, 202, 210, 212, 214, 222, 224, 230, 232, 233, 234, 235, 236, 256, 258, 260, 264, 266, 267, 268, 270, 274, 277, 278, 279, 280, 281, 282, 286, 293, 294, 295, 296, 298, 299, 302, 305, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 326, 328, 329, 330, 332, 336, 337, 339, 340, 343, 344, 346, 347, 349, 357, 358, 359, 360, 361, 362, 363], "figur": [9, 18, 26, 54, 76, 80, 89, 91, 129, 139, 170, 172, 175, 202, 210, 212, 214, 222, 224, 230, 232, 233, 234, 235, 236, 256, 258, 260, 264, 266, 267, 268, 270, 274, 277, 278, 279, 280, 281, 282, 286, 293, 294, 295, 296, 298, 299, 302, 305, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 326, 328, 329, 330, 331, 332, 336, 337, 339, 340, 343, 344, 346, 347, 349, 357, 358, 359, 360, 361, 362, 363], "plot": [9, 18, 26, 54, 76, 80, 89, 91, 106, 107, 108, 110, 113, 129, 139, 160, 162, 167, 170, 172, 175, 202, 210, 212, 214, 222, 224, 230, 232, 233, 234, 235, 236, 256, 258, 260, 266, 267, 268, 270, 274, 277, 278, 279, 280, 281, 282, 286, 293, 294, 295, 296, 298, 299, 302, 305, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 336, 337, 339, 340, 343, 344, 346, 347, 349, 357, 358, 359, 361, 362, 363, 364, 365], "titl": [9, 18, 26, 54, 76, 80, 129, 170, 172, 202, 214, 224, 232, 234, 260, 264, 266, 267, 268, 270, 274, 286, 293, 294, 298, 302, 305, 312, 326, 330, 340, 343, 344, 346, 347, 349, 357, 360, 361, 362, 363], "01": [9, 106, 160, 235, 236, 301, 359, 361], "notic": [9, 126, 128, 151, 153, 343, 344, 357, 363], "over": [9, 116, 119, 120, 121, 122, 124, 125, 126, 127, 141, 144, 145, 146, 147, 149, 150, 151, 152, 232, 234, 268, 271, 298, 301, 304, 347], "i": [9, 11, 12, 13, 17, 18, 22, 26, 30, 34, 35, 39, 50, 53, 54, 55, 56, 59, 66, 75, 76, 77, 80, 81, 82, 87, 88, 90, 91, 92, 93, 98, 100, 101, 106, 108, 113, 114, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 132, 137, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 157, 159, 160, 162, 167, 168, 170, 172, 173, 175, 176, 177, 178, 193, 195, 196, 199, 202, 210, 212, 215, 222, 223, 224, 230, 231, 236, 237, 238, 239, 240, 244, 247, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 269, 270, 271, 273, 274, 276, 277, 278, 279, 280, 281, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 327, 328, 330, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366], "amplifi": [9, 11, 13], "accord": 9, "also": [9, 54, 126, 151, 202, 210, 224, 279, 295, 296, 364], "when": [9, 16, 18, 26, 54, 56, 76, 77, 79, 80, 100, 105, 108, 111, 113, 129, 133, 139, 154, 162, 165, 167, 170, 172, 173, 175, 176, 212, 238, 251, 260, 262, 266, 267, 269, 270, 273, 274, 291, 298, 315, 316, 317, 318, 321, 322, 328, 342, 347, 349, 357, 358, 359], "interest": 9, "appear": [9, 357], "quickli": 9, "decreas": [9, 267], "6": [9, 18, 26, 54, 76, 80, 82, 93, 116, 117, 122, 124, 125, 126, 127, 128, 129, 139, 141, 142, 147, 149, 150, 151, 152, 153, 160, 170, 172, 175, 202, 210, 212, 214, 222, 230, 235, 236, 238, 246, 248, 249, 252, 256, 257, 259, 260, 264, 271, 272, 276, 279, 285, 286, 287, 288, 293, 295, 297, 298, 301, 303, 304, 308, 313, 314, 315, 316, 317, 318, 321, 322, 328, 329, 330, 332, 333, 336, 339, 343, 344, 346, 347, 349, 353, 356, 358, 359, 361, 362], "ylim": [9, 129, 139, 175, 212, 277, 278, 279, 280, 281, 286, 346, 349, 358, 361, 362, 363], "__call__": [9, 10, 11, 17, 18, 21, 26, 29, 48, 49, 54, 55, 56, 76, 77, 80, 81, 82, 86, 100, 101, 102, 114, 129, 130, 131, 137, 139, 154, 155, 156, 157, 168, 170, 171, 172, 173, 175, 176, 193, 194, 202, 205, 212, 213, 214, 215, 224, 225, 238, 239, 240, 260, 261, 262, 365], "perform": [9, 10, 55, 59, 101, 140, 232, 234, 239, 261, 279, 286, 346, 349, 352, 358, 359, 362, 364, 365], "reset": [9, 16, 18, 26, 48, 53, 54, 76, 79, 80, 82, 100, 111, 116, 124, 129, 135, 139, 141, 149, 154, 165, 170, 172, 175, 193, 201, 212, 214, 220, 238, 251, 260], "indic": [9, 11, 17, 34, 54, 56, 76, 77, 80, 81, 90, 91, 92, 100, 102, 114, 129, 131, 137, 139, 154, 155, 157, 168, 170, 171, 172, 173, 175, 176, 177, 178, 210, 211, 212, 213, 222, 223, 230, 231, 232, 234, 236, 237, 238, 240, 243, 256, 257, 258, 259, 260, 262, 265, 289, 296, 299, 302, 305, 309, 310, 313, 314, 322, 323, 324, 330, 336, 337, 338, 339, 347], "whether": [9, 11, 17, 54, 56, 76, 77, 80, 81, 90, 91, 92, 100, 102, 114, 129, 131, 137, 139, 154, 155, 157, 168, 170, 171, 172, 173, 175, 176, 212, 213, 232, 234, 238, 240, 256, 257, 258, 259, 260, 262, 265, 289, 305, 309, 310, 313, 314, 322, 324, 330, 338], "The": [9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 353, 354, 355, 356, 358, 359, 361, 362, 363, 364, 366], "current": [9, 14, 116, 125, 129, 132, 141, 150, 330, 355], "settabl": [9, 12, 13, 15, 202, 203, 204, 214, 217, 218, 219], "desir": [9, 11, 15, 264, 266, 362], "paramet": [10, 11, 16, 21, 22, 29, 30, 35, 36, 38, 40, 45, 49, 50, 53, 55, 56, 66, 67, 69, 72, 77, 81, 86, 87, 89, 90, 91, 92, 95, 96, 97, 99, 101, 102, 106, 107, 108, 110, 113, 117, 118, 124, 126, 130, 131, 133, 135, 140, 142, 143, 149, 151, 155, 156, 157, 160, 162, 167, 171, 173, 176, 178, 179, 181, 182, 183, 184, 189, 194, 195, 205, 206, 207, 208, 211, 213, 215, 216, 221, 223, 225, 227, 228, 231, 232, 234, 237, 239, 240, 253, 254, 256, 257, 258, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349], "stream": [11, 16, 17, 55, 56, 77, 79, 81, 101, 102, 105, 111, 114, 131, 133, 137, 155, 157, 165, 168, 171, 173, 176, 210, 213, 222, 230, 236, 239, 240, 251, 261, 262, 359], "meant": [11, 12, 13, 59], "attenu": [11, 12, 56, 77, 173, 262, 277, 278, 280, 281, 282, 336, 339], "strong": [11, 12], "after": [11, 12, 13, 249, 252], "approx": [11, 12, 13, 139], "reduc": [11, 12, 13], "e": [11, 12, 13, 18, 20, 21, 98, 202, 224, 255, 256, 257, 258, 259, 265, 269, 270, 289, 349, 354, 355, 358, 359, 362], "its": [11, 12, 13, 100, 116, 117, 118, 124, 126, 141, 142, 143, 149, 154, 155, 170, 175, 266, 358, 359, 363], "origin": [11, 12, 13, 126, 151, 222, 236, 346, 357], "valu": [11, 12, 13, 34, 35, 36, 45, 88, 177, 178, 179, 189, 210, 211, 222, 223, 230, 231, 232, 234, 236, 237, 253, 254, 268, 271, 276, 283, 284, 296, 298, 302, 303, 304, 313, 316, 318, 320, 321, 322, 327, 329, 347, 354, 359, 365], "weak": [11, 13], "mode": [11, 16, 17, 55, 56, 77, 79, 81, 101, 102, 105, 111, 114, 131, 133, 137, 155, 157, 165, 168, 171, 173, 176, 213, 239, 240, 251, 261, 262, 268, 298, 314, 347, 349], "preserv": [11, 17, 56, 76, 77, 81, 102, 114, 131, 137, 155, 157, 168, 171, 172, 173, 176, 213, 240, 260, 262], "call": [11, 17, 55, 56, 76, 77, 81, 101, 102, 114, 126, 131, 137, 151, 155, 157, 168, 171, 172, 173, 176, 213, 239, 240, 260, 261, 262], "properti": [12, 13, 14, 15, 17, 19, 20, 24, 25, 27, 28, 32, 33, 37, 39, 41, 42, 43, 44, 46, 47, 52, 57, 58, 60, 61, 62, 63, 64, 65, 68, 70, 71, 74, 75, 78, 83, 84, 85, 104, 109, 112, 114, 115, 119, 120, 121, 122, 123, 125, 127, 132, 134, 136, 137, 138, 144, 145, 146, 147, 148, 150, 152, 158, 159, 161, 163, 164, 166, 168, 169, 174, 180, 185, 186, 187, 188, 190, 191, 192, 196, 197, 198, 199, 200, 203, 204, 209, 217, 218, 219, 229, 233, 235, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 263, 365], "onli": [16, 35, 55, 56, 59, 77, 79, 101, 105, 106, 111, 133, 160, 165, 173, 178, 202, 211, 223, 231, 235, 237, 239, 251, 261, 262, 266, 277, 278, 280, 281, 295, 298, 299, 313, 314, 324, 337, 347, 356, 361, 362], "initi": [16, 116, 117, 118, 122, 124, 126, 128, 141, 142, 143, 147, 149, 151, 153, 202, 206, 224, 226, 304, 361], "binaryerasurechannel": [18, 19, 20, 21, 22, 23, 24, 25, 351], "ar": [18, 20, 21, 26, 34, 44, 47, 54, 55, 56, 76, 77, 81, 82, 88, 93, 95, 96, 97, 99, 101, 102, 116, 126, 128, 131, 140, 141, 153, 155, 157, 171, 172, 173, 176, 177, 178, 188, 192, 210, 211, 213, 215, 222, 223, 230, 231, 236, 237, 238, 239, 240, 247, 249, 252, 255, 260, 261, 262, 267, 269, 270, 271, 273, 274, 279, 282, 295, 298, 299, 304, 306, 313, 314, 315, 316, 318, 320, 321, 322, 323, 324, 327, 329, 330, 331, 333, 337, 343, 344, 347, 353, 355, 357, 359, 361, 363, 364, 366], "x_i": [18, 21, 26, 29, 82, 86, 87, 267, 269, 270, 273, 274, 285, 302], "y_i": [18, 21, 26, 29, 54, 55, 82, 86, 238, 267, 269, 270, 273, 274, 285], "capac": [18, 23, 24, 26, 31, 32, 48, 51, 52, 82, 267, 270, 274, 364, 365], "text": [18, 26, 56, 77, 82, 88, 173, 236, 255, 262, 264, 265, 266, 267, 270, 274, 275, 276, 282, 293, 294, 295, 303, 307, 309, 310, 338, 340], "john": [18, 26, 82, 232, 234], "proaki": [18, 26, 82, 232, 234], "chapter": [18, 26, 54, 76, 82, 172, 232, 234, 260, 282, 333], "model": [18, 26, 82, 116, 141, 271, 365], "20": [18, 26, 80, 81, 82, 89, 91, 116, 129, 141, 172, 214, 256, 260, 264, 267, 269, 273, 276, 285, 293, 294, 301, 302, 303, 310, 333, 338, 346, 360, 362, 365], "pass": [18, 21, 22, 26, 29, 30, 35, 48, 49, 50, 53, 54, 76, 80, 82, 86, 87, 100, 105, 118, 129, 133, 139, 143, 172, 212, 238, 240, 244, 260, 266, 269, 273, 285, 293, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 351, 353, 355, 358, 359, 365], "through": [18, 21, 26, 29, 48, 49, 54, 76, 80, 82, 86, 100, 105, 129, 133, 139, 172, 212, 222, 236, 238, 260, 269, 273, 285, 351, 358, 359, 361], "25": [18, 26, 54, 82, 89, 116, 141, 269, 273, 279, 285, 311, 334, 335, 357, 360, 361, 363], "roughli": [18, 26, 269, 273, 357], "eras": [18, 269], "seed": [18, 22, 26, 30, 48, 50, 53, 82, 87, 266, 269, 273, 285, 365], "randint": [18, 26, 82, 210, 222, 230, 236, 266, 269, 273, 285, 293, 294, 302, 313, 314, 323, 330, 340, 360, 361, 362], "out": [18, 26, 54, 76, 82, 93, 106, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 139, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 160, 172, 202, 210, 222, 230, 233, 235, 236, 238, 246, 248, 249, 250, 252, 253, 254, 260, 268, 269, 271, 272, 273, 276, 283, 284, 285, 287, 288, 290, 291, 293, 295, 297, 298, 303, 304, 306, 308, 311, 331, 333, 334, 335, 341, 342, 345, 347, 348], "count_nonzero": [18, 26, 82], "75": [18, 82, 278, 301, 361], "howev": [18, 26, 55, 95, 96, 97, 99, 101, 139, 193, 239, 261, 270, 274, 298, 347, 357], "linearli": [18, 173, 262], "linspac": [18, 26, 80, 89, 106, 160, 170, 232, 234, 256, 267, 270, 274, 295, 312, 326, 359, 360, 361, 362], "101": [18, 26, 89, 91, 256, 258, 277, 278, 280, 281], "7": [18, 26, 54, 76, 80, 82, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 139, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 172, 202, 210, 222, 224, 230, 235, 236, 238, 246, 248, 249, 252, 256, 260, 264, 271, 272, 279, 280, 282, 285, 293, 297, 298, 301, 333, 347, 349, 353, 359, 361], "xlabel": [18, 26, 202, 224, 264, 267, 268, 270, 274, 293, 295, 298, 347, 349, 360, 361, 363], "ylabel": [18, 26, 202, 224, 264, 267, 270, 274, 293, 295, 360, 361, 363], "new": [18, 22, 26, 30, 34, 35, 48, 50, 53, 82, 87, 93, 94, 124, 129, 131, 149, 175, 177, 178, 210, 211, 222, 223, 230, 231, 236, 237, 340], "int64": [18, 21, 26, 29, 82, 86, 268, 298, 304, 347, 350], "sequenc": [18, 21, 26, 29, 48, 49, 82, 86, 116, 119, 123, 126, 128, 141, 144, 148, 151, 153, 268, 269, 271, 273, 285, 298, 304, 347, 349, 351, 364, 365], "static": [18, 23, 26, 31, 48, 51, 82, 88, 89, 90, 91, 92, 255, 256, 257, 258, 259, 354], "alphabet": [18, 19, 20, 26, 27, 28, 82, 84, 85, 87, 285], "repres": [18, 20, 21, 59, 68, 269, 270, 304], "instanti": [18, 24, 26, 32, 48, 52, 82], "number": [22, 30, 34, 35, 37, 46, 50, 53, 54, 55, 56, 57, 76, 87, 89, 90, 91, 92, 93, 95, 96, 99, 106, 107, 108, 110, 113, 126, 151, 160, 162, 167, 172, 177, 178, 180, 190, 207, 208, 210, 211, 221, 222, 223, 227, 228, 230, 231, 236, 237, 238, 240, 241, 249, 252, 260, 264, 266, 269, 273, 285, 287, 288, 290, 296, 299, 301, 306, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 327, 328, 333, 336, 337, 339, 341, 345], "numpi": [22, 30, 50, 53, 54, 76, 80, 87, 100, 106, 139, 154, 160, 170, 172, 175, 212, 215, 238, 260, 266, 269, 273, 285, 313, 345, 354, 357, 358, 359, 360, 361, 362, 363, 364], "default_rng": [22, 30, 50, 53, 87, 266, 269, 273, 285], "binarysymmetricchannel": [26, 27, 28, 29, 30, 31, 32, 33, 351], "h_b": [26, 274], "appropri": 26, "modul": [26, 34, 35, 39, 40, 41, 177, 178, 184, 185, 187, 202, 207, 208, 210, 214, 222, 223, 224, 227, 228, 230, 231, 232, 234, 236, 237, 287, 288, 290, 293, 312, 314, 323, 326, 329, 330, 341, 353, 356, 362, 364, 365], "hard": 26, "decis": [26, 34, 38, 177, 181, 182, 202, 205, 208, 210, 222, 224, 225, 228, 230, 236, 361], "detector": [26, 59, 65, 66, 88, 195, 202, 209, 224, 229, 255, 361, 364, 365], "transit": [26, 30, 33, 82, 83, 87, 222, 236, 273, 274, 285, 347, 351], "flip": [26, 273], "189": 26, "18872187554086717": 26, "nomenclatur": [34, 177, 210, 222, 230, 236], "variabl": [34, 177, 210, 214, 215, 222, 230, 236, 301, 361], "name": [34, 116, 177, 210, 222, 230, 236], "follow": [34, 88, 93, 177, 210, 222, 230, 236, 302, 313, 324, 327, 329, 331, 333, 361], "tild": [34, 38, 177, 181, 182, 202, 205, 210, 222, 224, 225, 230, 236], "puls": [34, 35, 38, 40, 43, 44, 47, 80, 170, 177, 178, 182, 184, 187, 188, 192, 210, 222, 223, 230, 231, 236, 237, 296, 299, 314, 330, 336, 337, 339, 364, 365], "shape": [34, 35, 38, 40, 43, 44, 47, 54, 177, 178, 182, 184, 187, 188, 192, 210, 222, 223, 230, 231, 236, 237, 296, 299, 314, 330, 336, 337, 339, 359, 364, 365], "index": [34, 35, 39, 54, 76, 129, 135, 172, 177, 210, 222, 230, 236, 238, 243, 260, 298, 304, 314, 323, 324, 329, 347, 350, 353], "object": [34, 35, 59, 66, 93, 94, 177, 178, 210, 211, 222, 223, 230, 231, 236, 237, 271, 298, 315, 316, 317, 318, 321, 322, 328, 332, 347, 361, 365], "x_tild": [34, 38, 182], "match": [34, 35, 38, 44, 177, 178, 182, 188, 210, 222, 223, 230, 231, 236, 237, 314, 365], "filter": [34, 38, 44, 47, 54, 55, 56, 58, 59, 63, 64, 66, 68, 76, 77, 78, 79, 80, 81, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 129, 132, 133, 135, 136, 137, 138, 139, 140, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 182, 188, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 210, 212, 213, 222, 230, 236, 238, 239, 240, 243, 246, 248, 249, 251, 252, 260, 261, 262, 263, 277, 278, 279, 280, 281, 282, 286, 296, 299, 314, 315, 316, 317, 318, 321, 322, 328, 332, 333, 336, 337, 339, 346, 352, 363, 364, 365], "maximum": [34, 35, 38, 106, 160, 177, 181, 182, 202, 210, 222, 230, 236, 296, 299, 313, 329, 336, 337, 339, 352, 361, 365], "likelihood": [34, 38, 177, 181, 182, 202, 210, 222, 230, 236, 352, 361, 365], "abstract": [34, 36, 45, 177, 179, 189], "provid": [34, 36, 45, 98, 177, 179, 189, 210, 222, 230, 232, 234, 236, 314, 324, 354, 364], "log_2": [34, 37, 177, 180, 210, 222, 230, 236, 267, 287, 288, 290, 341], "phase_offset": [34, 35, 42, 177, 178, 186, 210, 211, 222, 223, 230, 231, 233, 236, 237, 266, 293, 294, 302, 313, 314, 329, 330, 340, 360, 361, 362], "degre": [34, 35, 42, 116, 123, 141, 148, 177, 178, 186, 210, 211, 222, 223, 230, 231, 233, 236, 237, 271, 294, 302, 304, 305, 308, 350, 361], "sym": [34, 35, 39, 46, 177, 178, 190, 210, 211, 222, 223, 230, 231, 236, 237, 288, 291, 296, 336, 339, 341, 342, 363], "pulse_shap": [34, 35, 38, 40, 43, 177, 178, 182, 184, 187, 210, 222, 223, 230, 231, 236, 237, 314, 330, 360, 362], "instantan": [34, 35, 43, 293], "tx_filter": [34, 47, 177, 192, 210, 222, 230, 236], "transmit": [34, 47, 95, 177, 192, 202, 205, 210, 222, 224, 225, 230, 236, 293, 314], "coeffici": [34, 44, 47, 54, 56, 76, 77, 100, 102, 154, 157, 172, 173, 177, 188, 192, 210, 222, 230, 236, 240, 260, 262, 304, 315, 316, 317, 318, 321, 322, 328, 332, 333, 358, 359], "rx_filter": [34, 44, 177, 188, 210, 222, 230, 236], "symbol_label": [35, 210, 211, 222, 223, 230, 231, 235, 236, 237, 362], "bin": [35, 211, 223, 231, 235, 237, 293, 313, 324, 329, 362], "grai": [35, 210, 211, 222, 223, 230, 231, 235, 236, 237, 297, 313, 329, 350, 362, 364], "8": [35, 54, 76, 80, 82, 116, 124, 126, 129, 139, 141, 149, 151, 160, 170, 172, 178, 210, 211, 222, 223, 230, 231, 232, 234, 235, 236, 237, 238, 246, 248, 249, 252, 260, 271, 272, 279, 285, 293, 297, 298, 301, 308, 312, 314, 315, 316, 317, 318, 321, 322, 326, 328, 330, 331, 332, 333, 336, 339, 347, 349, 358, 359, 360, 361, 363], "rect": [35, 178, 223, 231, 237, 363], "deviat": [35, 39], "delta": [35, 39, 54, 67, 69, 76, 80, 100, 108, 139, 140, 154, 162, 170, 172, 175, 212, 238, 260, 279, 317, 358, 359], "chang": [35, 39, 355, 366], "If": [35, 81, 87, 91, 126, 135, 151, 178, 215, 223, 231, 237, 258, 260, 265, 266, 267, 285, 289, 306, 309, 310, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 327, 328, 329, 330, 338, 343, 345, 364], "string": [35, 178, 223, 231, 237, 301, 320, 327, 365], "npt": [35, 56, 77, 106, 160, 173, 178, 211, 223, 231, 237, 262, 277, 278, 280, 281, 315, 316, 317, 318, 321, 322, 328, 332], "custom": [35, 54, 58, 76, 78, 172, 174, 178, 223, 231, 237, 260, 263, 277, 278, 280, 281, 365], "It": [35, 100, 154, 172, 178, 193, 202, 223, 231, 237, 266], "import": [35, 178, 202, 223, 231, 237, 355, 357, 358, 359, 360, 361, 362, 363, 364], "psd": [36, 45, 179, 189, 232, 234, 267, 287, 288, 290, 291, 312, 326, 341, 342], "p_b": [36, 179], "s_hat": [38, 182, 361, 362], "p_e": [45, 189], "base": [48, 314, 323, 324, 330, 351, 365], "wireless": [48, 351], "configur": [48, 51, 82, 116, 141, 361], "2d": [48, 51, 52, 82, 267, 313, 314, 324], "polyphas": [54, 55, 56, 58, 76, 77, 78, 172, 173, 174, 238, 239, 240, 241, 243, 244, 247, 248, 249, 252, 260, 261, 262, 263, 282, 286, 333, 346, 364, 365], "fir": [54, 55, 56, 76, 77, 79, 80, 81, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 129, 132, 139, 140, 172, 173, 175, 176, 210, 212, 213, 222, 230, 236, 238, 239, 240, 243, 246, 248, 249, 251, 252, 260, 261, 262, 277, 278, 279, 280, 281, 282, 314, 315, 316, 317, 318, 321, 322, 328, 332, 333, 360, 364, 365], "effici": [54, 126, 151, 210, 286, 308, 346], "split": 54, "equal": [54, 116, 135, 210], "ha": [54, 101, 170, 172, 210, 222, 230, 239, 261, 266, 277, 278, 279, 280, 281, 286, 295, 296, 308, 336, 339, 346, 349, 361, 362, 363], "bandwidth": [54, 59, 60, 61, 66, 70, 81, 193, 195, 199, 267, 277, 278, 296, 336, 339, 361, 363, 365], "equival": [54, 76, 128, 140, 153, 172, 260, 266, 267, 271, 277, 278, 279, 280, 281, 291, 298, 314, 342, 347, 355, 357], "first": [54, 76, 93, 126, 129, 132, 172, 173, 210, 222, 238, 243, 260, 262, 306, 317, 330, 345, 354, 356, 365], "f_i": 54, "cdot": [54, 76, 80, 100, 116, 118, 119, 120, 129, 132, 141, 143, 144, 145, 172, 175, 202, 224, 238, 239, 250, 260, 261, 271, 277, 278, 280, 281, 302, 305], "feedforward": [54, 56, 76, 77, 80, 100, 102, 115, 139, 154, 157, 159, 170, 172, 173, 175, 212, 238, 240, 249, 252, 260, 262, 315, 316, 317, 318, 321, 322, 328, 332, 333, 358, 359], "instead": [54, 76, 172, 260], "commut": [54, 76, 172, 238, 240, 244, 247, 260], "parallel": [54, 76, 172, 238, 240, 247, 260], "fourier": 54, "transform": 54, "idft": 54, "produc": [54, 55, 101, 116, 123, 126, 128, 141, 148, 151, 153, 172, 238, 239, 240, 247, 260, 261, 271, 296, 350, 363], "bottom": [54, 76, 172, 238, 240, 244, 247, 260], "top": [54, 76, 172, 238, 240, 244, 247, 260], "relat": [54, 76, 116, 127, 141, 152, 172, 238, 249, 252, 260, 267, 296, 304], "j": [54, 76, 106, 154, 157, 158, 160, 170, 172, 175, 210, 214, 222, 230, 236, 238, 249, 252, 260, 266, 271, 285, 302, 305, 349, 358, 359], "fred": [54, 76, 172, 260, 282, 333], "harri": [54, 76, 172, 260, 277, 278, 280, 281, 282, 333], "process": [54, 76, 88, 89, 90, 92, 172, 175, 212, 255, 256, 257, 259, 260, 282, 333, 359, 361, 364], "system": [54, 76, 172, 260, 282, 291, 298, 333, 342, 347, 354, 356, 361, 364], "tone": 54, "increas": [54, 81, 295, 308, 359], "10_000": 54, "rang": [54, 202, 224, 313, 361, 362], "overlai": 54, "boundari": [54, 210], "so": [54, 222, 230, 236, 295, 296, 299, 336, 337, 339, 364], "wrap": 54, "from": [54, 93, 107, 110, 116, 117, 118, 141, 142, 143, 154, 155, 170, 173, 175, 177, 191, 210, 222, 230, 235, 236, 238, 240, 244, 247, 262, 276, 287, 288, 290, 291, 303, 304, 311, 320, 327, 334, 335, 341, 342, 350, 353, 358, 359, 361, 364], "posit": [54, 302], "neg": [54, 126, 151, 295, 302], "fft": [54, 286, 320, 327, 343, 344, 346], "1024": [54, 106, 107, 110, 160, 315, 316, 318, 321, 322, 360, 363], "color": [54, 80, 170, 314, 323, 324, 330, 360, 363], "label": [54, 76, 80, 89, 91, 129, 139, 170, 172, 175, 202, 211, 212, 223, 224, 231, 232, 234, 237, 256, 258, 260, 264, 266, 277, 278, 279, 280, 281, 293, 294, 296, 298, 302, 312, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 326, 327, 330, 336, 339, 340, 347, 357, 360, 361, 362, 363], "f_start": 54, "f_stop": 54, "fill_betweenx": 54, "80": [54, 56, 77, 80, 173, 262, 282, 349], "xtick": 54, "legend": [54, 80, 139, 170, 202, 224, 264, 360, 361, 363], "spread": [54, 298, 347], "across": [54, 80, 240, 264, 292, 300], "10000": 54, "1001": 54, "11": [54, 82, 116, 124, 126, 129, 141, 149, 151, 172, 210, 222, 230, 236, 271, 272, 282, 297, 298, 333, 347, 349, 353, 359], "12": [54, 116, 124, 126, 129, 141, 149, 151, 172, 210, 222, 230, 236, 257, 259, 264, 272, 297, 333, 358, 362], "full": [54, 55, 76, 101, 172, 238, 239, 260, 261, 268, 298, 347], "__len__": [54, 76, 80, 100, 103, 139, 172, 212, 238, 260], "state": [54, 55, 59, 72, 76, 79, 80, 100, 101, 105, 111, 112, 114, 117, 118, 122, 124, 125, 126, 128, 129, 133, 135, 136, 137, 139, 142, 143, 147, 149, 150, 151, 153, 154, 165, 166, 168, 170, 172, 175, 212, 238, 239, 251, 260, 261, 271, 304, 365], "flush": [54, 55, 76, 80, 100, 101, 105, 129, 133, 139, 172, 212, 238, 239, 260, 261, 365], "consist": [54, 76, 80, 95, 96, 97, 98, 99, 100, 112, 129, 136, 139, 172, 212, 238, 260], "previou": [54, 56, 76, 77, 80, 81, 100, 102, 112, 129, 131, 135, 136, 139, 155, 157, 171, 172, 173, 175, 176, 212, 213, 238, 240, 260, 262, 283, 284], "u": [54, 76, 80, 100, 113, 139, 154, 167, 170, 172, 175, 212, 238, 260, 264, 328, 349, 350, 358, 359], "frequency_respons": [54, 76, 80, 100, 106, 139, 154, 160, 170, 172, 175, 212, 238, 260, 365], "float64": [54, 76, 80, 100, 106, 139, 154, 160, 170, 172, 175, 212, 214, 215, 238, 260, 268, 298, 347, 350], "complex128": [54, 76, 80, 100, 106, 139, 154, 160, 170, 172, 175, 212, 214, 215, 238, 260], "polyphase_tap": [54, 76, 172, 238, 246, 248, 249, 252, 260], "polyphase_ord": [54, 56, 76, 77, 172, 173, 238, 246, 248, 260, 262, 282, 365], "hold": [54, 76, 172, 173, 238, 240, 244, 260, 262, 306, 365], "connect": [54, 76, 172, 238, 240, 244, 247, 260], "sum": [54, 76, 88, 100, 154, 172, 238, 240, 247, 255, 260, 363], "all": [54, 76, 93, 98, 117, 118, 142, 143, 172, 215, 238, 240, 247, 260, 293, 314, 323, 324, 354, 356, 364, 365], "integ": [54, 76, 106, 160, 172, 238, 242, 245, 260, 304, 306], "resampl": [54, 76, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 172, 238, 239, 250, 260, 261, 262, 263, 282, 333, 364, 365], "correspond": [54, 76, 93, 98, 117, 118, 124, 129, 132, 142, 143, 149, 172, 238, 243, 260, 304, 324], "l": [55, 101, 139, 140, 156, 176, 212, 213, 239, 261, 279], "convolut": [55, 101, 172, 239, 261], "have": [55, 140, 268, 279, 286, 298, 306, 330, 345, 346, 347], "proport": [55, 59, 63, 193, 195, 200, 239, 261, 295, 308, 352, 365], "align": [55, 101, 173, 222, 239, 261, 262, 298, 347, 357], "where": [55, 66, 82, 87, 101, 129, 132, 178, 193, 195, 199, 231, 237, 239, 255, 261, 266, 267, 285, 287, 288, 290, 296, 341, 349, 358, 359, 364], "final": [55, 101, 239, 261], "d": [55, 80, 100, 104, 116, 129, 132, 139, 141, 212, 271, 292, 295, 300, 308, 353, 355, 364], "dictat": [55, 101, 239, 261, 304], "argument": [55, 56, 77, 101, 173, 239, 261, 262, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 354, 358, 359, 365], "23": [56, 77, 116, 141, 173, 262, 282, 308], "atten": [56, 77, 173, 262, 277, 278, 280, 281, 282, 365], "specif": [56, 77, 98, 106, 160, 173, 262, 356, 363], "must": [56, 77, 131, 173, 262, 266, 277, 278, 280, 281, 282, 296, 298, 305, 324, 336, 339, 347, 349], "odd": [56, 77, 140, 173, 236, 262, 279, 282, 343], "even": [56, 77, 140, 173, 236, 262, 277, 278, 279, 280, 281, 282, 296, 336, 339], "stopband": [56, 77, 173, 262, 282, 336, 339], "a_": [56, 77, 173, 202, 203, 204, 206, 262, 282], "stop": [56, 77, 173, 262, 282], "closedlooppl": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 352, 361, 365], "defin": [59, 82, 100, 116, 119, 120, 121, 123, 127, 141, 144, 145, 146, 148, 152, 154, 170, 266, 285, 296, 304, 325, 336, 339, 349, 352, 359, 364], "close": [59, 66, 68, 352, 364, 365], "loop": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 193, 194, 195, 196, 197, 198, 199, 200, 201, 214, 215, 216, 217, 218, 219, 220, 221, 364, 365], "pll": [59, 60, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 352, 364, 365], "analysi": [59, 66, 354, 361, 364, 365], "bb": [59, 360, 361], "phase_err": [59, 361], "ped": [59, 65, 66, 195, 202, 206, 207, 208, 224, 225, 226, 227, 228, 229, 352, 361, 364, 365], "lf": [59, 361], "phase_est": [59, 361], "lo": [59, 361], "nco": [59, 62, 66, 195, 214, 215, 216, 217, 218, 219, 220, 221, 352, 361, 364, 365], "local": [59, 353, 361], "oscil": [59, 214, 216, 352, 361, 364, 365], "numer": [59, 214, 216, 352, 359, 361, 364, 365], "transfer": [59, 68, 100, 154, 155, 175, 193, 296, 336, 339, 358, 359, 361], "2nd": [59, 193, 195, 352, 361, 365], "plu": [59, 193, 195, 352, 365], "h_": [59, 80, 361], "k_1": [59, 63, 193, 200, 361], "k_2": [59, 64, 193, 198, 361], "frac": [59, 67, 69, 72, 73, 80, 88, 89, 90, 92, 100, 104, 139, 154, 170, 173, 175, 193, 212, 222, 230, 236, 255, 256, 257, 262, 264, 265, 266, 267, 275, 287, 288, 290, 291, 293, 295, 296, 302, 303, 305, 307, 308, 336, 338, 339, 341, 342, 348, 349, 361], "k_0": [59, 62, 66, 195, 214, 216, 217, 361], "k_p": [59, 65, 66, 195, 202, 209, 224, 229, 361], "appendix": [59, 193, 336, 339], "lock": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 193, 194, 195, 196, 197, 198, 199, 200, 201, 214, 215, 216, 217, 218, 219, 220, 221, 364], "see": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 79, 81, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 111, 112, 114, 115, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 153, 154, 155, 156, 157, 158, 159, 161, 163, 164, 165, 166, 168, 169, 171, 176, 193, 194, 195, 196, 197, 198, 199, 200, 201, 210, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 230, 233, 235, 236, 251, 260, 277, 278, 280, 281, 286, 296, 299, 315, 316, 317, 318, 321, 322, 328, 332, 336, 337, 339, 364], "noise_bandwidth": [59, 66, 193, 195, 199], "damping_factor": [59, 66, 193, 195, 196], "phase_lock_tim": [59, 73], "frequency_lock_tim": [59, 67], "freq_offset": [59, 67, 69], "lock_tim": [59, 69, 361], "phase_error_vari": [59, 72], "cn0": [59, 72], "varianc": [59, 72, 88, 90, 92, 257, 259, 266], "steadi": [59, 72], "sample_r": [59, 66, 74, 76, 106, 107, 110, 129, 160, 172, 260, 286, 294, 305, 314, 315, 316, 318, 320, 321, 322, 323, 324, 327, 330, 343, 344, 346, 357, 361, 363], "bnt": [59, 61, 361], "b_n": [59, 60, 61, 66, 67, 69, 72, 73, 193, 195, 199], "bn": [59, 60], "hz": [59, 60, 66, 67, 69, 72, 106, 107, 110, 160, 193, 195, 199, 267, 276, 286, 294, 295, 296, 303, 305, 308, 343, 344, 348, 357], "zeta": [59, 66, 75, 193, 195, 196], "damp": [59, 66, 75, 193, 195, 196, 361], "k0": [59, 62, 66, 195, 214, 361], "kp": [59, 65, 66, 195, 361], "k1": [59, 63, 193, 361], "k2": [59, 64, 193, 361], "omega_n": [59, 71, 361], "natur": [59, 71], "radian": [59, 70, 71, 72, 202, 205, 207, 208, 214, 215, 216, 218, 219, 224, 225, 227, 228, 236, 361], "omega_3db": [59, 70], "omega_": [59, 70], "textrm": [59, 70], "period": [66, 193, 195, 199, 210, 349], "second": [66, 67, 69, 73, 93, 193, 195, 199, 296], "critic": [66, 75, 193, 195, 196, 361], "underdamp": [66, 75, 193, 195, 196], "overdamp": [66, 75, 193, 195, 196], "ted": [66, 195], "t_": [67, 69, 73, 116, 130, 141, 296, 336, 339, 363], "fl": [67, 69], "take": [67, 69, 73, 353], "onto": [67, 69, 73], "39": 67, "pl": [69, 73, 354], "38": 69, "34": [70, 330], "33": 71, "sigma_": [72, 88, 89, 91], "theta_": [72, 202, 205, 224, 225], "carrier": [72, 230], "43": 72, "40": [73, 80, 129, 172, 260, 286], "less": [75, 264], "than": [75, 126, 151, 210, 211, 223, 231, 235, 237, 264, 299, 302, 313, 329, 337], "greater": [75, 336, 339], "prevent": [76, 172, 222, 236, 260], "need": [76, 172, 260, 353, 354, 356], "done": [76, 353], "case": [76, 172, 236, 255, 260, 336, 339], "3x": [76, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 172, 271], "v": [76, 141, 214, 238, 276, 303, 353], "summat": [76, 238], "co": [76, 129, 172, 214, 260, 305, 336, 339], "64": [76, 139, 279, 301, 359], "280": 76, "marker": [76, 129, 172, 214, 260, 313, 329, 330, 357, 358, 359, 362], "o": [76, 129, 172, 260, 357], "true": [76, 89, 90, 91, 92, 106, 119, 120, 129, 144, 145, 160, 172, 202, 207, 208, 210, 222, 224, 227, 228, 230, 232, 234, 236, 256, 257, 258, 259, 260, 265, 269, 271, 273, 285, 289, 298, 305, 309, 310, 313, 314, 322, 324, 327, 329, 330, 331, 338, 347, 361, 362], "y1": [76, 129, 172, 260, 302], "70": [76, 301], "y2": [76, 129, 172, 260, 302], "140": [76, 286], "y3": [76, 129, 172, 260], "210": 76, "y4": [76, 129, 172, 260], "y5": [76, 129, 172, 260], "y_1": [76, 172, 260, 302], "y_2": [76, 172, 260, 302], "y_3": [76, 172, 260], "y_4": [76, 172, 260], "y_5": [76, 172, 260], "win": 80, "quad": [80, 212], "le": [80, 140, 212, 264, 279, 305, 308, 336, 339], "truncat": 80, "same": [80, 101, 116, 126, 128, 141, 151, 153, 202, 224, 314, 330, 358], "deriv": 80, "fir_2": 80, "fir_6": 80, "fir_10": 80, "fir_20": 80, "fir_40": 80, "fir_80": 80, "y_axi": [80, 318, 320, 327, 365], "ab": [80, 126, 151, 170, 268, 298, 347, 349, 363], "linestyl": [80, 170, 202, 210, 222, 224, 230, 236, 313, 324, 329, 331, 349, 357, 362, 363], "theori": [80, 88, 89, 90, 92, 170, 255, 256, 257, 259], "lfloor": [80, 100, 104, 139, 212], "rfloor": [80, 100, 104, 139, 212], "blackman": [81, 277, 278, 280, 281], "scipi": [81, 100, 154, 277, 278, 280, 281, 320, 327, 359, 363, 364], "definit": [81, 315, 316, 317, 318, 321, 322, 328, 332], "get_window": 81, "detail": 81, "discretememorylesschannel": [82, 83, 84, 85, 86, 87, 351], "memoryless": [82, 87, 285, 351, 364], "dmc": [82, 83, 84, 85, 87, 285, 351, 364, 365], "max_": 82, "mutual": [82, 330], "inform": [82, 230, 287, 288, 290, 298, 341, 347], "pr": [87, 285], "y_j": [87, 285], "assum": [87, 88, 255, 266, 285, 306, 330, 345], "ldot": [87, 285], "null": [88, 255, 363], "altern": [88, 255, 359], "hypothes": [88, 255], "w": [88, 255, 266, 357, 358, 359, 360, 361, 362, 363], "sigma": [88, 89, 90, 91, 92, 255, 256, 257, 258, 259, 266, 267], "_0": [88, 255], "_1": [88, 255], "test": [88, 255, 354, 355, 364], "statist": [88, 89, 90, 92, 255, 256, 257, 259], "limits_": [88, 100, 154, 255], "left": [88, 89, 90, 116, 139, 141, 154, 222, 224, 230, 236, 255, 256, 257, 259, 264, 265, 266, 267, 289, 292, 293, 295, 296, 302, 305, 308, 309, 310, 336, 338, 339, 349], "right": [88, 89, 90, 116, 141, 154, 222, 224, 230, 236, 255, 256, 257, 259, 264, 265, 266, 267, 289, 292, 293, 295, 296, 302, 305, 308, 309, 310, 336, 338, 339, 349], "gamma": [88, 90, 92, 255, 257, 259, 264], "sim": [88, 255, 266, 354], "chi_": [88, 89, 90], "2n": [88, 89, 90, 271], "under": [88, 255], "detect": [88, 89, 90, 91, 92, 202, 205, 207, 208, 224, 225, 227, 228, 255, 256, 257, 258, 259, 264, 319, 325, 365], "threshold": [88, 90, 92, 255, 257, 259], "q_": [88, 89, 90, 92], "chi_n": [88, 89, 90, 92], "steven": [88, 89, 90, 92, 255, 256, 257, 259], "kai": [88, 89, 90, 92, 255, 256, 257, 259], "fundament": [88, 89, 90, 92, 255, 256, 257, 259], "n_nc": [88, 89, 90, 91, 92, 264], "For": [89, 90, 92, 256, 257, 259, 266, 271, 286, 295, 346, 353, 358], "1e": [89, 256, 294, 362], "sigma2": [90, 92, 257, 259], "logspac": [91, 106, 160, 258, 264], "theoret": [91, 232, 234, 312, 326, 362, 365], "variou": [91, 139, 354, 363], "1_000": [91, 175, 212, 266, 294, 295, 302, 313, 314, 340, 360], "000": [91, 294, 314], "5_000": 91, "measur": [93, 95, 265, 266, 275, 276, 289, 292, 293, 300, 303, 307, 309, 310, 338, 361, 364, 365], "accumul": [93, 170, 214, 215, 216, 218, 361, 365], "contain": [93, 266, 301], "add": [93, 95, 98, 210, 222, 230, 236, 266, 294, 299, 313, 314, 324, 337, 340, 351, 362, 366], "total": [93, 296, 299, 336, 337, 339, 363], "count": [93, 96, 293], "error_r": [93, 97, 98, 362], "can": [93, 95, 96, 97, 99, 193, 210, 238, 266, 293, 296, 298, 306, 314, 317, 320, 327, 347, 355, 358, 359, 362, 364, 366], "obtain": 93, "tabul": [93, 94], "ascend": [93, 98], "other": [95, 96, 97, 99, 304, 357, 366], "quantiti": [95, 96, 97, 98, 99], "user": [95, 96, 97, 99, 358, 359], "caution": [95, 96, 97, 99], "instanc": [95, 96, 97, 99, 210], "whatev": 98, "wa": [98, 267], "wrapper": [100, 154], "convolv": 100, "support": [100, 154, 365], "one": [100, 126, 151, 154, 211, 222, 223, 231, 235, 237, 296, 301, 315, 316, 318, 320, 321, 322, 327, 343, 358, 359, 360, 363], "sum_": [100, 154, 257, 259, 265, 266, 267, 289, 292, 293, 300, 338], "valid": [101, 295, 314, 323, 324, 349], "remain": [105, 133, 286, 306], "whole": [106, 160, 363], "decad": [106, 160, 315, 316, 318, 321, 322, 358, 361], "point": [106, 160, 207, 208, 227, 228, 313, 320, 327], "endpoint": [106, 160, 359], "includ": [106, 160, 354, 355, 356, 364], "max_f": [106, 160], "log10": [106, 160, 363], "evenli": [106, 160], "00000000e": [106, 160, 235, 236, 359], "00": [106, 160, 235, 236, 359], "76562500e": [106, 160], "04": [106, 160, 301, 359], "95312500e": [106, 160], "03": [106, 160, 301, 359], "97070312e": [106, 160], "98046875e": [106, 160], "99023438e": [106, 160], "95337172": 106, "30202676j": 106, "8178049": 106, "5759632j": 106, "6058636": 106, "79630028j": 106, "rad": [106, 160], "0000000000000002": 106, "0j": [106, 160, 211, 223, 231, 237], "sever": [106, 160], "200": [106, 160, 286, 324, 362], "300": [106, 160, 343, 344], "400": [106, 160, 286], "00391660e": 106, "11022302e": 106, "16j": [106, 235, 236], "53081763e": 106, "79453110e": 106, "17j": 106, "62720131e": 106, "99104274e": 106, "83622458e": 106, "17093835e": 106, "flfsr": [116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 141, 153, 271, 350], "fibonacci": [116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 141, 153, 271, 304, 350], "feedback": [116, 118, 119, 120, 141, 143, 144, 145, 154, 157, 158, 170, 175, 271, 304, 315, 316, 317, 318, 321, 322, 328, 332, 350, 359], "regist": [116, 117, 127, 141, 142, 152, 271, 304, 350], "lfsr": [116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 271, 304, 350], "c_": [116, 117, 118, 119, 120, 127, 141, 142, 143, 144, 145, 152, 271, 349], "dot": [116, 117, 118, 119, 120, 122, 124, 125, 127, 141, 142, 143, 144, 145, 147, 149, 150, 152, 177, 178, 191, 210, 222, 230, 235, 236, 271, 304, 329], "reciproc": [116, 118, 119, 120, 141, 143, 144, 145, 304], "recurr": [116, 119, 123, 127, 141, 144, 148, 152, 271, 304], "y_t": [116, 141, 271], "y_": [116, 141, 271], "c_n": [116, 141], "c_1": [116, 117, 127, 141, 142, 152], "c_0": [116, 117, 127, 141, 142, 152], "field": [116, 117, 121, 126, 128, 141, 142, 146, 151, 153, 268, 271, 295, 298, 304, 347, 350], "t_0": [116, 141], "t_1": [116, 141], "s_0": [116, 117, 118, 122, 124, 125, 141, 142, 143, 147, 149, 150], "s_1": [116, 117, 118, 122, 124, 125, 141, 142, 143, 147, 149, 150], "s_": [116, 117, 118, 122, 124, 125, 141, 142, 143, 147, 149, 150], "addition": [116, 364], "next": [116, 126, 141, 151, 355], "revers": [116, 119, 120, 121, 122, 124, 125, 126, 128, 141, 144, 145, 146, 147, 149, 150, 151, 153, 304], "gardner": [116, 141, 271], "2019": [116, 141, 271], "applic": [116, 141, 271], "galoi": [116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 268, 271, 298, 304, 347, 350], "cryptographi": [116, 141, 271], "figshar": [116, 141], "hdl": [116, 141, 271], "handl": [116, 141, 271], "net": [116, 141, 271], "2134": [116, 141, 271], "21932": [116, 141, 271], "berlekamp_massei": [116, 141, 271, 350], "gf": [116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 268, 271, 298, 304, 347], "primit": [116, 141, 304], "mathrm": [116, 141, 255, 268, 271, 298, 304, 347], "primitive_poli": [116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 304], "poli": [116, 117, 119, 120, 121, 124, 127, 128, 141, 142, 143, 144, 145, 146, 149, 152, 153, 271, 304, 350], "print": [116, 117, 128, 141, 142, 153, 271, 301, 357, 358, 359, 361], "feedback_poli": [116, 117, 118, 119, 120, 128, 141, 142, 143, 144, 145, 153, 271], "characteristic_poli": [116, 117, 119, 120, 128, 141, 142, 144, 145, 153, 271], "initial_st": [116, 117, 122, 128, 141, 142, 147, 153, 271], "5x": [116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 271, 304], "13": [116, 126, 129, 141, 151, 172, 210, 222, 230, 236, 255, 256, 257, 259, 268, 272, 297, 330, 333, 365], "14": [116, 126, 129, 141, 151, 210, 222, 230, 236, 256, 272, 297, 333, 354, 355, 365], "15": [116, 126, 129, 141, 151, 202, 210, 222, 230, 236, 258, 272, 297, 298, 333, 346, 347], "17": [116, 129, 141, 210, 235, 236, 293, 308, 333, 353], "18": [116, 129, 141, 333, 353, 362], "19": [116, 129, 141, 333, 365], "21": [116, 141, 308, 330], "10x": [116, 141], "22": [116, 141], "24": [116, 141], "polylik": [116, 118, 304], "construct": [116, 117, 118, 141, 142, 143], "classmethod": [116, 117, 141, 142, 154, 155, 170, 175], "fieldarrai": [116, 117, 121, 122, 125, 126, 127, 141, 142, 146, 147, 150, 151, 152, 268, 271, 298, 304, 347, 350], "self": [116, 117, 141, 142, 154, 155, 170, 175], "to_galois_lfsr": [116, 128], "glfsr": [116, 128, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 271, 350], "type": [116, 121, 126, 141, 146, 151, 271, 276, 293, 303, 306, 320, 325, 327, 345, 365], "_field": [116, 121, 141, 146], "_arrai": [116, 121, 141, 146], "subclass": [116, 121, 141, 146], "arithmet": [116, 120, 121, 141, 145, 146], "minim": [116, 123, 141, 148, 268, 271, 350], "which": [117, 118, 124, 142, 143, 149, 210, 222, 236, 265, 266, 267, 289, 292, 294, 300, 302, 304, 307, 308, 309, 313, 314, 316, 318, 320, 321, 322, 327, 329, 331, 340, 363], "ones": [117, 118, 142, 143, 173, 262, 277, 278, 280, 281, 361], "coeff": [117, 127, 142, 152], "irreducible_poli": [118, 143], "mai": [118, 143, 211, 223, 231, 235, 237, 293, 313, 324, 327, 329, 331, 359], "becaus": [118, 143, 202, 298, 347], "unaffect": [122, 147], "modifi": [124, 125, 149, 150, 365], "view": [124, 149, 267, 354, 364], "direct": [126, 151, 202, 208, 224, 228, 365], "backward": [126, 151, 170, 171, 365, 366], "end": [126, 151, 222, 236, 255, 314, 336, 339, 343, 354], "more": [126, 151, 211, 223, 231, 235, 237, 365], "iter": [126, 151], "fibonacci_lfsr": [128, 153], "differ": [128, 153, 154, 175, 211, 223, 231, 235, 237, 277, 278, 279, 280, 281, 298, 317, 330, 347, 349, 363], "galois_lfsr": [128, 153], "both": [128, 153, 202, 224, 313, 329, 330, 331], "ident": [128, 153], "structur": 129, "angular": 129, "179": 129, "farrow1": 129, "quadrat": [129, 365], "farrow2": 129, "cubic": 129, "farrow3": 129, "quartic": [129, 365], "farrow4": 129, "compar": [129, 175, 202, 212, 224, 232, 234, 277, 278, 279, 280, 281, 304, 317, 363], "vari": [129, 215], "xlim": [129, 286, 346, 360, 361, 363], "comparison": [129, 202, 224, 354], "run": [129, 353], "30": [129, 172, 175, 210, 212, 222, 230, 236, 260, 286, 315, 317, 328, 343, 344, 359, 365], "concaten": [129, 359], "should": [135, 202, 210, 355], "three": [135, 357, 363], "21719": 139, "examin": [139, 210, 222, 230, 236], "flat": [139, 279], "32": [139, 279, 357], "128": 139, "loc": 139, "lower": [139, 210, 222, 236, 336, 339], "effect": 139, "outsid": [139, 359], "symmetri": 139, "about": [139, 277, 278, 330, 356], "band": 139, "worst": 139, "1f": 139, "around": [139, 211, 223, 231, 237], "perfectli": 139, "exactli": 139, "best": [140, 279], "append": [140, 279, 343, 360], "c_2": 141, "26": [141, 353], "to_fibonacci_lfsr": [141, 153], "lfilter": 154, "b_i": [154, 157, 159, 170, 175, 315, 316, 317, 318, 321, 322, 328, 332, 359], "a_j": [154, 157, 158, 170, 175, 315, 316, 317, 318, 321, 322, 328, 332, 359], "These": [154, 222, 230, 236, 331, 355, 361], "a_0": 154, "zerospol": [154, 155, 160, 170, 175, 315, 316, 317, 318, 321, 322, 328, 332, 359], "b_tap": [154, 159, 170, 175, 359], "a_tap": [154, 158, 170, 175, 359], "conj": [160, 315, 316, 317, 318, 321, 322, 328, 332, 359, 361], "4722987": 160, "47271105": 160, "0041658j": 160, "47394825": 160, "00830241j": 160, "47601067": 160, "01238051j": 160, "472298696877605": 160, "36961426": 160, "9678537j": 160, "57338213": 160, "77694738j": 160, "52496713": 160, "3885743j": 160, "51520024": 160, "1706839j": 160, "accordingli": 170, "dc": [170, 279], "trapezoid": [170, 171, 365], "forward": [170, 171, 214, 221, 365], "iir_back": 170, "iir_trap": 170, "iir_forw": 170, "y_back": 170, "y_trap": 170, "y_forw": 170, "height": 171, "recommend": 172, "wai": [172, 355], "zoh": [172, 173, 174, 260, 262, 263], "matlab": [172, 173, 174, 260, 262, 263, 364], "2p": [173, 262], "ramp": [173, 193, 262], "advanc": [173, 262], "approxim": [175, 176, 264, 365], "rememb": 175, "scale": [175, 202, 315, 316, 318, 320, 321, 322, 327, 358, 359], "\u03b1": 175, "35": [175, 212, 361], "y_fir": [175, 212], "y_iir": [175, 212], "map_symbol": [177, 183, 210, 222, 230, 236, 266, 293, 294, 302, 313, 340, 360, 361, 362, 365], "decide_symbol": [177, 181, 210, 222, 230, 236, 361, 362, 365], "a_tild": [177, 181, 210, 222, 230, 236, 361, 362], "mle": [177, 181, 210, 222, 230, 236], "mapsto": [177, 178, 191, 210, 222, 230, 235, 236, 329], "mathbb": [177, 178, 191, 210, 222, 230, 235, 236, 267, 329, 349], "whose": [178, 211, 223, 230, 231, 237, 304], "roll": [178, 223, 231, 237, 349, 363], "off": [178, 223, 231, 237], "loopfilt": [193, 194, 195, 196, 197, 198, 199, 200, 201, 352, 361, 365], "ppi": [193, 195, 352], "track": 193, "constant": [193, 210, 214, 216, 218, 320, 327, 359, 361], "cannot": 193, "chirp": 193, "proportional_gain": [193, 200], "integral_gain": [193, 198], "underli": [193, 197], "mlped": [202, 203, 204, 205, 206, 207, 208, 209, 352, 361, 365], "ml": [202, 206, 352, 361], "aid": [202, 207, 224, 227], "known": [202, 205, 224, 225, 266, 298, 347], "da": [202, 224], "im": 202, "re": [202, 255], "qpsk": [202, 222, 224, 230, 232, 233, 234, 236, 266, 293, 294, 312, 313, 314, 326, 329, 330, 340, 361, 364, 365], "a_rx": 202, "a_ref": 202, "da_error": [202, 224], "data_aided_error": [202, 207, 224, 227], "dd_error": [202, 224], "decision_directed_error": [202, 208, 224, 228], "grid": [202, 224, 331], "observ": [202, 224, 279, 308, 314], "slope": [202, 224], "rx": [202, 203, 206], "veri": [202, 364], "unambigu": [202, 224], "a_receiv": [202, 203, 206], "a_refer": [202, 204, 206], "simul": [202, 207, 208, 224, 227, 228, 362, 364], "scheme": [202, 207, 208, 210, 222, 224, 227, 228, 230, 236, 365], "either": [205, 214, 225, 293], "modem": [207, 208, 210, 222, 227, 228, 230, 236], "n_point": [207, 208, 227, 228], "similar": [210, 222, 236, 363], "One": [210, 222, 236, 363], "distinct": [210, 222, 236], "result": [210, 222, 236, 265, 289, 295, 308, 309, 310, 336, 338, 339, 362], "envelop": [210, 358, 359], "consid": [210, 301], "cpfsk": 210, "separ": [210, 314], "45": [210, 211, 222, 223, 230, 233, 266, 293, 294, 302, 305, 313, 314, 329, 330, 340, 360, 361, 362], "uint8": [210, 222, 230, 236, 304, 306, 345], "complex_symbol": [210, 222, 230, 236], "70710678": [210, 222, 230], "70710678j": [210, 222, 230], "tx_sampl": [210, 222, 230, 236, 314], "50": [210, 222, 230, 236, 276, 303, 311, 329, 330, 343, 344, 357, 360], "like": [210, 355, 364, 365], "figsiz": [210, 222, 230, 236, 314, 315, 331, 358, 359, 361], "suptitl": [210, 222, 230, 236, 314, 361, 362], "noiseless": [210, 222, 230, 236, 293], "trajectori": 210, "although": 210, "lead": [210, 302, 362], "spectral": [210, 286, 320, 360, 363], "gmsk": 210, "rx_sampl": [210, 222, 230, 236, 314], "manual": [210, 222, 230, 236, 354, 356], "mf": [210, 222, 230, 236, 314], "mf_sampl": [210, 222, 230, 236], "noisi": [210, 222, 230, 236, 266], "last": [210, 222, 306, 353], "rx_symbol": [210, 222, 230, 236], "rx_complex_symbol": [210, 222, 230, 236], "_": [210, 222, 230, 236, 264, 293], "array_equ": [210, 222, 230, 236, 271, 298, 347], "absolut": [211, 214, 216, 219, 223, 237, 267], "consecut": [211, 223, 231, 237], "code": [211, 223, 231, 235, 237, 268, 272, 287, 288, 290, 297, 298, 313, 329, 341, 347, 350, 355, 362, 365], "adjac": [211, 223, 231, 235, 237, 362, 363], "start": [211, 223, 231, 237, 353], "go": [211, 223, 231, 237], "counter": [211, 223, 231, 237], "clockwis": [211, 223, 231, 237], "circl": [211, 223, 231, 237, 359], "increment": [214, 215, 216, 218, 361], "sin": [214, 266, 336, 339, 343], "Then": 214, "fsk": 214, "60": [214, 277, 278, 280, 281, 363], "repeat": 214, "cp": 214, "57": 214, "bpsk": [214, 232, 234, 312, 326, 360], "format": [215, 268, 298, 304, 347, 365], "option": [215, 315, 316, 318, 320, 321, 322, 327, 365], "convent": [222, 236], "independ": 222, "apart": 222, "taken": [222, 230, 236, 238], "jq": 222, "begin": [222, 236, 255, 314, 336, 339], "nyquist": [222, 230, 236, 277, 278, 280, 281, 286, 314, 346, 363], "isi": [222, 230, 236, 314], "present": [222, 230, 236], "persist": [222, 230, 236, 313, 314, 324, 327, 362], "cascad": [222, 230, 236, 314], "therefor": [222, 230, 236, 363], "remov": [222, 230, 236, 305, 320, 327, 365], "without": [222, 230, 236, 365], "heurist": [224, 352, 361, 365], "dd": [224, 361, 365], "encod": [230, 232, 234, 283, 284, 364], "ge": [231, 237, 264, 336, 339], "were": [232, 234], "simon": [232, 234], "alouini": [232, 234], "fade": [232, 234], "optimum": [232, 234], "psk8": [232, 234, 312, 326, 362], "psk16": [232, 234, 312, 326, 362], "de": [232, 234, 361, 365], "se": [234, 326], "00j": [235, 236], "07106781e": [235, 236], "01j": [235, 236], "12323400e": [235, 236], "83697020e": 235, "22464680e": [235, 236], "annot": [235, 329, 365], "rotat": [236, 305, 361], "rel": [236, 349, 363], "2m": 236, "displaystyl": [236, 336, 339], "pi4_qpsk": 236, "partit": [238, 240, 244, 247], "befor": [249, 252, 361, 366], "decomposit": [249, 252, 365], "exceed": [253, 254], "15865525393145707": [253, 254], "158655": [253, 254], "0000010494310452": [253, 254], "perfect": 255, "knowledg": 255, "cn": [255, 266], "sqrt": [255, 256, 257, 259, 264, 292, 293, 296, 338, 339, 349, 360, 361, 363], "____": 260, "ln": [264, 296], "62": [264, 301], "log_": [264, 265, 276, 289, 295, 307, 309, 310, 338], "54": [264, 301], "44": 264, "12ab": 264, "7b": 264, "claim": 264, "leq": 264, "8096": 264, "radarsp": 264, "weebli": 264, "upload": 264, "21471216": 264, "albersheim_alternative_form": 264, "pdf": [264, 271, 296], "bpb": 264, "w2": 264, "wpmucdn": 264, "site": [264, 353, 359], "gatech": 264, "edu": [264, 271], "dist": [264, 354], "462": 264, "file": [264, 354, 356], "2016": 264, "noncoher": 264, "www": [264, 271, 277, 278, 279, 280, 281, 282, 296, 298, 347], "mathwork": [264, 277, 278, 279, 280, 281, 282, 296, 298, 347], "help": [264, 277, 278, 279, 280, 281, 282, 296, 298, 347], "html": [264, 277, 278, 279, 280, 281, 282, 296, 298, 347, 353], "semilogx": [264, 325], "nuse": 264, "axi": [265, 289, 292, 300, 307, 309, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 327, 329, 330, 357, 365], "avg": [265, 266, 307], "ax": [265, 289, 292, 300, 307, 309, 331, 365], "along": [265, 271, 289, 292, 300, 307, 309, 365], "entir": [265, 289, 292, 300, 307, 309], "decibel": [265, 276, 289, 303, 309, 310, 338, 364, 365], "ad": [266, 313, 314, 324, 354, 364, 365], "explicitli": 266, "set": [266, 295, 298, 313, 320, 324, 327, 329, 331, 347, 354, 356, 359], "zorder": [266, 294, 340], "infti": [266, 267], "nand": 266, "monoton": 267, "limit": [267, 313, 329, 362], "At": 267, "occur": 267, "59": 267, "shannon": 267, "semilogi": [267, 312, 325, 326], "barker_cod": [268, 350], "bipolar": [268, 298, 347, 365], "barker": [268, 350, 364, 365], "seq": [268, 298, 347], "ideal": [268, 362], "autocorrel": [268, 298, 347, 349], "sidelob": [268, 277, 278, 280, 281, 298, 336, 339, 347, 349], "corr": [268, 349], "lag": [268, 298, 347, 349], "find": [271, 350], "berlekamp": 271, "massei": 271, "algorithm": 271, "depend": [271, 353, 354, 356, 365], "least": 271, "determin": [271, 324], "sach": 271, "uniniti": 271, "vi": 271, "sing": 271, "embeddedrel": 271, "showarticl": 271, "1099": 271, "php": 271, "crypto": 271, "stanford": 271, "mironov": 271, "cs359": 271, "below": [271, 353, 358, 359], "reproduc": 271, "binary_cod": [272, 350, 365], "cf": 275, "v_": [275, 276, 303, 310, 338], "en": [275, 304, 307, 349], "wikipedia": [275, 304, 307, 349], "org": [275, 304, 307, 349], "wiki": [275, 304, 307, 349], "voltag": [276, 303, 310, 338, 364], "x_": [276, 303], "mhz": [276, 303], "77": [276, 301, 303], "50e6": 276, "76": [276, 301], "98970004336019": 276, "mw": [276, 303], "dbm": [276, 303], "dbv": [276, 303], "020599913279624": 276, "center_freq": [277, 278], "hann": [277, 278, 280, 281, 320, 327], "chebyshev": [277, 278, 280, 281], "side": [277, 278, 296, 315, 316, 318, 320, 321, 322, 327, 358, 359, 360, 363], "No": [277, 278, 280, 281], "blackmanharri": [277, 278, 280, 281], "chebwin": [277, 278, 280, 281], "dsp": [277, 278, 279, 280, 281, 282, 364], "designbandpassfir": 277, "h_ham": [277, 278, 280, 281], "h_hann": [277, 278, 280, 281], "h_blackman": [277, 278, 280, 281], "h_blackman_harri": [277, 278, 280, 281], "h_chebyshev": [277, 278, 280, 281], "h_kaiser": [277, 278, 280, 281], "larger": [278, 299, 302, 313, 329, 337], "designbandstopfir": 278, "tau": 279, "l_": 279, "designfracdelayfir": 279, "h_8": [279, 336, 339], "h_16": [279, 336, 339], "h_32": 279, "h_64": 279, "cutoff_freq": [280, 281], "cutoff": [280, 281], "f_c": [280, 281], "designhighpassfir": 280, "designlowpassfir": 281, "designmultiratefir": 282, "oplu": [283, 284, 300], "uncod": 284, "doe": [286, 346], "anti": [286, 346, 365], "alias": [286, 346, 365], "x1": 286, "x2": 286, "130": 286, "x3": [286, 349], "spectrum": [286, 315, 316, 318, 320, 321, 322, 327, 343, 344, 346], "content": 286, "abov": [286, 346], "fold": 286, "cw": 286, "unalias": 286, "2048": [286, 343, 344, 346, 360], "qam": [287, 288, 290, 341], "249387366082999": [287, 288], "020599913279625": [287, 342], "7506126339170005": [290, 341], "979400086720376": [290, 291], "norm": [293, 296, 299, 324, 336, 337, 339], "sourc": 293, "max": [293, 309, 310], "percentil": [293, 327], "956395536563978": 293, "857802841154296": 293, "13371022812218": 293, "95th": 293, "95": 293, "671308255375767": 293, "inst_evm": 293, "hist": 293, "histogram": [293, 313, 314, 324], "frequency_offset": [294, 351, 365], "freq_rat": 294, "cycl": [294, 330], "5e": 294, "deg": [294, 302, 361], "path": [295, 364], "loss": [295, 364], "meter": [295, 308, 348], "transmitt": 295, "far": 295, "impli": 295, "possibl": [295, 364], "km": 295, "link": [295, 364, 365], "ghz": [295, 308, 348], "1e3": [295, 305, 343], "1e9": [295, 308, 348], "92": 295, "44778322188337": 295, "doubl": [295, 308], "2e3": 295, "98": 295, "468383135163": 295, "2e9": 295, "up": [295, 354], "product": [296, 363], "thought": [296, 366], "smaller": [296, 336, 339, 363], "wider": 296, "gaussdesign": 296, "onlinelibrari": 296, "wilei": 296, "doi": 296, "1002": 296, "9780470041956": 296, "app2": 296, "h_0p1": [296, 336, 339], "h_0p2": 296, "h_0p3": 296, "gray_cod": [297, 350, 365], "hadamard_cod": [298, 347, 350], "hadamard": [298, 347, 350, 364, 365], "comm": [298, 347], "hadamardcod": 298, "walsh": [298, 347, 350, 364, 365], "thei": [298, 304, 347, 366], "walsh_cod": [298, 347, 350], "cross": [298, 347, 349], "seq1": [298, 347], "seq2": [298, 347], "seq3": [298, 347], "quit": [298, 347], "larg": [298, 347, 354], "misalign": [298, 347], "precis": [298, 347], "xcorr12": [298, 347], "xcorr13": [298, 347], "xcorr23": [298, 347], "uniform": [298, 347], "fact": [298, 347], "high": [298, 347], "acorr1": [298, 347], "acorr2": [298, 347], "acorr3": [298, 347], "reason": [299, 337, 353], "h_half_sin": 299, "displai": [301, 313, 315, 316, 318, 320, 321, 322, 327, 329], "line": [301, 330, 354, 360], "quick": 301, "brown": 301, "fox": 301, "jump": 301, "lazi": 301, "dog": 301, "00000000": 301, "68": 301, "65": 301, "71": 301, "69": 301, "63": 301, "6b": 301, "72": 301, "6f": 301, "6e": 301, "00000010": 301, "66": 301, "78": 301, "6a": 301, "6d": 301, "73": 301, "74": 301, "00000020": 301, "6c": 301, "61": 301, "7a": 301, "79": 301, "67": 301, "he": 301, "02": [301, 359, 361], "00000004": 301, "05": [301, 357, 359, 361], "06": 301, "07": 301, "08": 301, "00000008": 301, "09": 301, "0a": 301, "iq_imbal": [302, 351, 365], "iq": [302, 351, 364], "imbal": [302, 351, 364], "compon": [302, 343, 344, 346], "g_i": 302, "180": 302, "g_q": 302, "x_q": 302, "horizont": 302, "stretch": 302, "while": [302, 363], "vertic": 302, "subplot": [302, 314, 361, 362], "northwest": 302, "northeast": 302, "50118723": 303, "36272725": 303, "9952623149688795": 303, "m_sequenc": [304, 350], "maxim": 304, "interpret": 304, "maximum_length_sequ": 304, "just": 304, "6560": 304, "satisfi": 305, "dtypelik": [306, 345], "most": [306, 345], "signific": [306, 345], "enough": 306, "fill": 306, "smallest": 306, "unsign": 306, "diamet": 308, "55": [308, 330, 365], "eta": 308, "dbi": 308, "arcsin": 308, "83": 308, "dish": 308, "810210290266568": 308, "437435887991374": 308, "sinc": [308, 353, 362], "antenna": [308, 364], "we": [308, 314, 364], "830810203546193": 308, "529544741425365": 308, "keyword": [312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 358, 359, 365], "pyplot": [312, 313, 316, 317, 318, 319, 320, 321, 322, 324, 326, 327, 328, 329, 330, 331, 332, 357, 358, 359, 360, 361, 362, 363], "colorbar": [313, 314, 324, 327], "scatter": 313, "overwritten": [313, 324, 327, 329], "histogram2d": [313, 324], "pcolormesh": [313, 324, 327], "cmap": [313, 324], "rainbow": [313, 324], "show_zero": [313, 324], "100_000": [313, 362], "intersymbol": 314, "interfer": 314, "ignor": [314, 354], "transient": 314, "insight": 314, "longer": [314, 336, 339, 343], "open": [314, 364], "n_time": [315, 359], "n_freq": 315, "x_axi": [315, 316, 318, 320, 321, 322, 358, 359, 360, 361, 365], "n_t": 315, "n_f": 315, "logarithm": [315, 316, 318, 320, 321, 322, 358, 359], "h_srrc": [315, 316, 317, 318, 321, 322, 328, 332, 362], "auto": [316, 318, 320, 321, 322, 327, 365], "select": [316, 318, 320, 321, 322, 327, 354], "x_label": 319, "overlap": [320, 327, 360], "detrend": [320, 327], "median": 320, "segment": [320, 327], "256": [320, 327, 360], "trend": [320, 327], "unwrap": [322, 361], "stride": 324, "1d": 324, "row": 324, "collect": 324, "linecollect": 324, "linewidth": [324, 349], "solid": [324, 330], "800": 324, "loglog": 325, "vmin": 327, "10th": 327, "vmax": 327, "100th": 327, "shade": 327, "gouraud": 327, "represent": [329, 365], "markers": 329, "diff": [330, 360], "exclus": 330, "imaginari": 330, "dash": 330, "share": 330, "10e3": 330, "uniformli": 330, "style": 331, "revert": 331, "rcdefault": 331, "_rc_param": 331, "rc_param": 331, "constrained_layout": 331, "h_pad": 331, "w_pad": 331, "max_open_warn": 331, "titleweight": 331, "bold": 331, "arrang": 333, "down": 333, "column": 333, "notion": 333, "demonstr": 333, "matric": 333, "000005": 334, "000000025": 334, "005": [335, 361], "000025": 335, "excess": [336, 339, 363], "narrow": [336, 339], "expens": [336, 339], "higher": [336, 339, 363], "h_0p5": [336, 339], "h_0p9": [336, 339], "affect": [336, 339], "h_4": [336, 339], "h_rect": [337, 363], "sample_rate_offset": [340, 351, 365], "250": [343, 344, 361], "ksp": [343, 344], "conjug": [343, 344, 359], "500": [343, 344, 361], "now": [343, 344, 357, 365], "150": [343, 344, 362], "asymmetr": 344, "copi": 346, "mani": [347, 354], "walshcod": 347, "299792458": 348, "zadoff_chu_sequ": [349, 350], "zadoff": [349, 350, 364, 365], "chu": [349, 350, 364, 365], "prime": 349, "gcd": 349, "ne": 349, "cyclic": 349, "x_u": 349, "2q": 349, "mod": 349, "e2": 349, "93chu_sequ": 349, "x_3": 349, "139": 349, "tile": 349, "x_5": 349, "x5": 349, "xcorr": 349, "sphinx": 353, "immateri": 353, "theme": 353, "store": [353, 355, 356], "txt": [353, 354, 355, 356], "some": 353, "version": [353, 355, 364, 365], "aren": 353, "resolut": 353, "minut": 353, "ci": 353, "myst": 353, "parser": 353, "updat": [353, 365], "git": [353, 355], "math": 353, "dollar": 353, "ipykernel": 353, "nb": 353, "pickleshar": 353, "switch": 353, "pip": [353, 354, 355, 356, 364], "python3": [353, 354, 355, 356, 359, 364], "built": 353, "command": [353, 354], "dirhtml": 353, "locat": [353, 356], "home": [353, 359, 363], "page": 353, "directori": [353, 355], "get": 353, "necessari": 353, "webpag": 353, "webserv": 353, "easili": [353, 354, 356, 358, 359], "python": [353, 364], "server": 353, "8080": 353, "access": 353, "web": 353, "browser": 353, "localhost": 353, "librari": [354, 355, 356, 357, 362, 364, 366], "ruff": [354, 355, 365], "lint": [354, 355], "your": [354, 356, 361], "develop": [354, 355, 356], "dev": [354, 356], "pyproject": [354, 356], "toml": [354, 355, 356], "tool": [354, 356, 364], "src": [354, 363], "extend": 354, "ipynb": 354, "exclud": 354, "build": [354, 364], "_version": 354, "py": [354, 356, 359, 361, 363], "120": 354, "doc": 354, "pycodestyl": 354, "pyflak": 354, "pyupgrad": 354, "flake8": 354, "bugbear": 354, "simplifi": 354, "isort": 354, "pylint": [354, 365], "npy": 354, "rule": 354, "ruf": 354, "e501": 354, "too": 354, "long": 354, "e713": 354, "e714": 354, "plr2004": 354, "magic": 354, "plr0913": 354, "plr5501": 354, "collaps": 354, "els": [354, 360], "plr0912": 354, "plr0915": 354, "statement": 354, "plw0603": 354, "global": 354, "__init__": 354, "f401": 354, "f403": 354, "check": 354, "hook": 354, "config": [354, 357, 358, 359, 360, 361, 362, 363], "yaml": 354, "repo": [354, 355, 359, 363], "github": [354, 364], "rev": 354, "v2": 354, "id": 354, "fixer": 354, "trail": 354, "whitespac": 354, "astral": 354, "sh": 354, "v0": 354, "enabl": [354, 365], "disabl": 354, "uninstal": 354, "extens": 354, "vscode": [354, 356], "json": [354, 356], "you": [354, 355, 356, 361, 364], "edit": [354, 359], "latest": [355, 364], "releas": [355, 365], "main": [355, 363], "mhostett": [355, 365], "Or": [355, 356], "pre": 355, "To": 355, "activ": 355, "benefici": 355, "fashion": 355, "allow": [355, 356], "immedi": 355, "seen": 355, "upon": 355, "clone": 355, "wherev": 355, "flag": 355, "packag": [355, 359, 364], "commit": 355, "pytest": [355, 356], "cov": 355, "xdist": 355, "benchmark": 355, "ini_opt": 356, "minvers": 356, "addopt": 356, "showloc": 356, "testpath": 356, "execut": 356, "test_psk": 356, "instruct": 356, "invok": 356, "infrastructur": 356, "debug": 356, "inlinebackend": [357, 358, 359, 360, 361, 362, 363], "print_figure_kwarg": [357, 358, 359, 360, 361, 362, 363], "facecolor": [357, 358, 359, 360, 361, 362, 363], "inlin": [357, 358, 359, 360, 361, 362, 363], "widget": [357, 358, 359, 360, 361, 362, 363], "tx": 357, "fillstyl": 357, "show": [357, 358, 359, 360, 361, 362, 363], "accomplish": [357, 362], "def": [357, 360, 362], "resample_sign": 357, "new_sample_r": 357, "ty": 357, "gca": [357, 362], "set_prop_cycl": [357, 362], "198": 357, "four": 357, "396": 357, "fourth": 357, "often": 357, "do": 357, "312": 357, "00095883": 358, "00175012": 358, "00423921": 358, "0058825": 358, "006151": 358, "00474595": 358, "0017044": 358, "00254816": 358, "00721645": 358, "0112324": 358, "01342358": 358, "01273202": 358, "00845058": 358, "0004368": 358, "01073669": 358, "02372977": 358, "03650247": 358, "04650654": 358, "05098525": 358, "04734644": 358, "03355896": 358, "00851486": 358, "02769991": 358, "07367348": 358, "12670446": 358, "18301321": 358, "23810898": 358, "28727058": 358, "32607991": 358, "35093841": 358, "35949665": 358, "conveni": [358, 359], "evalu": [358, 359], "29": 358, "31": 358, "here": [358, 359], "478207252018059": 359, "6400000000000001": 359, "7391036260090295": 359, "3061467458920719j": 359, "47820725": 359, "78207252e": 359, "58172329e": 359, "10862468e": 359, "86109590e": 359, "21565653e": 359, "01140214e": 359, "57286400e": 359, "67772160e": 359, "47338728e": 359, "10422993e": 359, "89312837e": 359, "12240078e": 359, "03953322e": 359, "69685122e": 359, "63882791e": 359, "81474977e": 359, "47193366e": 359, "85259041e": 359, "15647504e": 359, "23851924e": 359, "42176895e": 359, "84684395e": 359, "42721858e": 359, "72236648e": 359, "14721649e": 359, "10813095e": 359, "94024315e": 359, "78877688e": 359, "74077567e": 359, "87820725": 359, "53637958": 359, "94724205": 359, "13335164": 359, "1455082": 359, "04436799": 359, "88708159": 359, "71930943": 359, "5719707": 359, "46154771": 359, "39261642": 359, "36139242": 359, "35935288": 359, "3763214": 359, "40270968": 359, "43085717": 359, "45557651": 359, "47410241": 359, "48566716": 359, "49090568": 359, "49124786": 359, "48840102": 359, "4839738": 359, "47925143": 359, "47510421": 359, "47199608": 359, "47005584": 359, "46917696": 359, "46911955": 359, "denomin": 359, "73910363": 359, "30614675j": 359, "plane": 359, "092337035029908": 359, "71104892744724": 359, "684365018955985": 359, "37868538208862": 359, "1263714068241546": 359, "9993519409971622": 359, "1909320767063554": 359, "016796159999999997": 359, "46380627201816593": 359, "3806359704987265j": 359, "4988817673791569": 359, "3333421398098428j": 359, "5543277195052645": 359, "22961005941814036j": 359, "5291527586123693": 359, "28283804209787544j": 359, "lyon": 359, "understand": 359, "3rd": 359, "insid": 359, "matt": [359, 363, 365], "env": 359, "lib": 359, "_filter_design": 359, "480": 359, "runtimewarn": [359, 363], "divid": [359, 363], "encount": [359, 363], "npp_polyv": 359, "zm1": 359, "tensor": 359, "invalid": 359, "unstabl": 359, "n_symbol": 360, "pb": 360, "x_bb_rect": 360, "papr_bb_rect": 360, "x_pb_rect": 360, "papr_pb_rect": 360, "x_bb_0p1": 360, "papr_bb_0p1": 360, "x_pb_0p1": 360, "papr_pb_0p1": 360, "x_bb_0p5": 360, "papr_bb_0p5": 360, "x_pb_0p5": 360, "papr_pb_0p5": 360, "x_bb_0p9": 360, "papr_bb_0p9": 360, "x_pb_0p9": 360, "papr_pb_0p9": 360, "2f": 360, "rf": [360, 361], "512": 360, "sweep_alpha": 360, "bb_papr": 360, "pb_papr": 360, "bpsk_bb_papr": 360, "bpsk_pb_papr": 360, "qpsk_bb_papr": 360, "qpsk_pb_papr": 360, "psk8_bb_papr": 360, "psk8_pb_papr": 360, "psk16_bb_papr": 360, "psk16_pb_papr": 360, "loop_filt": 361, "0x7f312e855c90": 361, "theta_0": 361, "phase_error": 361, "freq_estim": 361, "tmp": 361, "ipykernel_32397": 361, "3044107145": 361, "deprecationwarn": 361, "convers": [361, 364, 365], "ndim": 361, "scalar": 361, "deprec": 361, "futur": 361, "ensur": 361, "extract": 361, "1093092892": 361, "28": 361, "make": [361, 366], "a_hat": [361, 362], "152932338": 361, "rad2deg": 361, "avail": [361, 362, 364], "b_nt": 361, "0005": 361, "0125": 361, "015": 361, "0175": 361, "t_lock": 361, "analyze_psk": 362, "n0": 362, "tx_mf": 362, "1e6": 362, "bpsk_ber": 362, "bpsk_ser": 362, "qpsk_ber": 362, "qpsk_ser": 362, "psk8_ber": 362, "psk8_ser": 362, "psk16_ber": 362, "psk16_ser": 362, "1e0": 362, "psk8_bin": 362, "psk8_grai": 362, "wors": 362, "rc_0p1": 363, "rc_0p5": 363, "rc_0p9": 363, "pm": 363, "nearli": 363, "small": 363, "lobe": 363, "much": 363, "freqz": 363, "worn": 363, "h_rc_0p1": 363, "h_rc_0p5": 363, "h_rc_0p9": 363, "p_rect": 363, "cumsum": 363, "p_rc_0p1": 363, "p_rc_0p5": 363, "p_rc_0p9": 363, "within": 363, "srrc_0p1": 363, "srrc_0p5": 363, "srrc_0p9": 363, "significantli": 363, "due": 363, "being": 363, "h_srrc_0p1": 363, "h_srrc_0p5": 363, "h_srrc_0p9": 363, "p_srrc_0p1": 363, "p_srrc_0p5": 363, "p_srrc_0p9": 363, "gauss_0p1": 363, "gauss_0p2": 363, "gauss_0p3": 363, "_filter": 363, "355": 363, "softwar": 364, "radio": 364, "goal": 364, "analyz": 364, "reli": 364, "interoper": 364, "numba": [364, 365], "acceler": 364, "computation": 364, "intens": 364, "aim": 364, "replic": 364, "relev": 364, "toolbox": 364, "progress": 364, "someth": 364, "pleas": 364, "issu": 364, "pypi": 364, "api": [364, 365, 366], "synchron": 364, "budget": [364, 365], "manipul": 364, "januari": 365, "2024": 365, "design_multirate_tap": 365, "fix": [365, 366], "bug": [365, 366], "hostett": 365, "decemb": 365, "2023": 365, "rework": 365, "frequency_response_log": 365, "explicit": 365, "improv": 365, "jupyt": 365, "notebook": 365, "novemb": 365, "abil": 365, "renam": 365, "multirate_tap": 365, "polyphase_matrix": 365, "replac": 365, "black": 365, "septemb": 365, "sensibl": 365, "august": 365, "27": 365, "superflu": 365, "translat": 365, "zadoff_chu": 365, "juli": 365, "firinterpol": 365, "impair": 365, "fpsl": 365, "helper": 365, "synthes": 365, "semant": 366, "major": 366, "minor": 366, "patch": 366, "introduc": 366, "featur": 366, "compat": 366, "There": 366, "guarante": 366, "them": 366}, "objects": {"": [[3, 0, 0, 1, "sdr", ""]], "sdr": [[9, 1, 1, "", "AGC", "Implements an automatic gain controller (AGC)."], [18, 1, 1, "", "BinaryErasureChannel", "Implements a binary erasure channel (BEC)."], [26, 1, 1, "", "BinarySymmetricChannel", "Implements a binary symmetric channel (BSC)."], [34, 1, 1, "", "CPM", "Implements continuous-phase modulation (CPM)."], [48, 1, 1, "", "Channel", "A base class for wireless channels."], [54, 1, 1, "", "Channelizer", "Implements a polyphase channelizer FIR filter."], [59, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [76, 1, 1, "", "Decimator", "Implements a polyphase decimating FIR filter."], [80, 1, 1, "", "Differentiator", "Implements a differentiator FIR filter."], [82, 1, 1, "", "DiscreteMemorylessChannel", "Implements a discrete memoryless channel (DMC)."], [88, 1, 1, "", "EnergyDetector", "Implements an energy detector."], [93, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [100, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [116, 1, 1, "", "FLFSR", "A Fibonacci linear-feedback shift register (LFSR)."], [129, 1, 1, "", "FarrowResampler", "Implements a piecewise polynomial Farrow arbitrary resampler."], [139, 1, 1, "", "FractionalDelay", "Implements a fractional delay FIR filter."], [141, 1, 1, "", "GLFSR", "A Galois linear-feedback shift register (LFSR)."], [154, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [170, 1, 1, "", "Integrator", "Implements an integrator IIR filter."], [172, 1, 1, "", "Interpolator", "Implements a polyphase interpolating FIR filter."], [175, 1, 1, "", "LeakyIntegrator", "Implements a leaky integrator IIR filter."], [177, 1, 1, "", "LinearModulation", "Implements linear phase/amplitude modulation with arbitrary symbol mapping."], [193, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [202, 1, 1, "", "MLPED", "Implements a maximum-likelihood phase error detector (ML-PED)."], [210, 1, 1, "", "MSK", "Implements minimum-shift keying (MSK) modulation and demodulation."], [212, 1, 1, "", "MovingAverager", "Implements a moving average FIR filter."], [214, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [222, 1, 1, "", "OQPSK", "Implements offset quadrature phase-shift keying (OQPSK) modulation and demodulation."], [224, 1, 1, "", "PED", "Implements a heuristic phase error detector (PED)."], [230, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [236, 1, 1, "", "PiMPSK", "Implements $pi/M$ phase-shift keying ($pi/M$ PSK) modulation and demodulation."], [238, 1, 1, "", "PolyphaseFIR", "Implements a generic polyphase FIR filter."], [253, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [254, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [255, 1, 1, "", "ReplicaCorrelator", "Implements an clairvoyant replica-correlator detector."], [260, 1, 1, "", "Resampler", "Implements a polyphase rational resampling FIR filter."], [264, 5, 1, "", "albersheim", "Estimates the minimum required single-sample SNR, given $N_{NC}$ non-coherent combinations, to achieve a probability of detection $P_D$ and probability of false alarm $P_{FA}$. This function implements Albersheim's equation."], [265, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [266, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [267, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [268, 5, 1, "", "barker_code", "Returns the Barker code/sequence of length $N$."], [269, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [270, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [271, 5, 1, "", "berlekamp_massey", "Finds the minimal polynomial $c(x)$ that produces the linear recurrent sequence $y$."], [272, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [273, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [274, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [275, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [276, 5, 1, "", "db", "Converts from linear units to decibels."], [277, 5, 1, "", "design_bandpass_fir", "Designs a bandpass FIR filter impulse response $h[n]$ using the window method."], [278, 5, 1, "", "design_bandstop_fir", "Designs a bandstop FIR filter impulse response $h[n]$ using the window method."], [279, 5, 1, "", "design_frac_delay_fir", "Designs a fractional delay FIR filter impulse response $h[n]$ using the Kaiser window method."], [280, 5, 1, "", "design_highpass_fir", "Designs a highpass FIR filter impulse response $h[n]$ using the window method."], [281, 5, 1, "", "design_lowpass_fir", "Designs a lowpass FIR filter impulse response $h[n]$ using the window method."], [282, 5, 1, "", "design_multirate_fir", "Designs a multirate FIR filter impulse response $h[n]$ using the Kaiser window method."], [283, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [284, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [285, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [286, 5, 1, "", "downsample", "Downsamples the time-domain signal $x[n]$ by the factor $r$, by discarding $r-1$ samples every $r$ samples."], [287, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [288, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [289, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [290, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [291, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [292, 5, 1, "", "euclidean", "Measures the Euclidean distance between two signals $x[n]$ and $y[n]$."], [293, 5, 1, "", "evm", "Calculates the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [294, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [295, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [296, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [297, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [298, 5, 1, "", "hadamard_code", "Returns the Hadamard code/sequence of length $N$."], [299, 5, 1, "", "half_sine", "Returns a half-sine pulse shape."], [300, 5, 1, "", "hamming", "Measures the Hamming distance between two signals $x[n]$ and $y[n]$."], [301, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [302, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [303, 5, 1, "", "linear", "Converts from decibels to linear units."], [304, 5, 1, "", "m_sequence", "Generates a maximal-length sequence (m-sequence) from a Fibonacci linear feedback shift register (LFSR)."], [305, 5, 1, "", "mix", "Mixes the time-domain signal $x[n]$ with a complex exponential or real sinusoid."], [306, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [307, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [308, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [309, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [310, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [311, 5, 1, "", "percent", "Converts from a ratio to a percentage."], [333, 5, 1, "", "polyphase_decompose", "Decomposes the prototype filter taps $h[n]$ into the polyphase matrix $h_i[n]$ with $B$ phases."], [334, 5, 1, "", "ppb", "Converts from a ratio to parts per billion (ppb)."], [335, 5, 1, "", "ppm", "Converts from a ratio to parts per million (ppm)."], [336, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [337, 5, 1, "", "rectangular", "Returns a rectangular pulse shape."], [338, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [339, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [340, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [341, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [342, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [343, 5, 1, "", "to_complex_bb", "Converts the real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$ to a complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c} = f_{s,r}/2$."], [344, 5, 1, "", "to_real_pb", "Converts the complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$ to a real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r} = 2f_{s,c}$."], [345, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [346, 5, 1, "", "upsample", "Upsamples the time-domain signal $x[n]$ by the factor $r$, by inserting $r-1$ zeros between each sample."], [347, 5, 1, "", "walsh_code", "Returns the Walsh code/sequence of length $N$."], [348, 5, 1, "", "wavelength", "Calculates the wavelength $lambda$ of an electromagnetic wave with frequency $f$."], [349, 5, 1, "", "zadoff_chu_sequence", "Returns the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.AGC": [[10, 2, 1, "", "__call__", "Performs automatic gain control on the input signal."], [11, 2, 1, "", "__init__", "Creates an automatic gain controller (AGC)."], [12, 4, 1, "", "attack", "(Settable) The attack rate $alpha$."], [13, 4, 1, "", "decay", "(Settable) The decay rate $beta$."], [14, 4, 1, "", "gain", "The current linear gain."], [15, 4, 1, "", "reference", "(Settable) The desired output magnitude."], [16, 2, 1, "", "reset", "Resets the AGC gain. Only useful when using streaming mode."], [17, 4, 1, "", "streaming", "Indicates whether the AGC is in streaming mode."]], "sdr.AGC.__call__": [[10, 3, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.AGC.__init__": [[11, 3, 2, "p-attack", "attack", "The attack rate $alpha$. The attack rate is meant to attenuate strong signals. After $n_0 approx 1 / alpha$ samples the error will reduce to $1 / e$ of its original value."], [11, 3, 2, "p-decay", "decay", "The decay rate $beta$. The decay rate is meant to amplify weak signals. After $n_0 approx 1 / beta$ samples the error will reduce to $1 / e$ of its original value."], [11, 3, 2, "p-reference", "reference", "The desired output magnitude."], [11, 3, 2, "p-streaming", "streaming", "Indicates whether the AGC operates in streaming mode. In streaming mode, the gain is preserved between calls to __call__()."]], "sdr.AGC.reset": [[16, 3, 2, "p-gain", "gain", "The initial linear gain of the AGC."]], "sdr.BinaryErasureChannel": [[19, 4, 1, "", "X", "The input alphabet $mathcal{X} = {0, 1}$ of the BEC channel."], [20, 4, 1, "", "Y", "The output alphabet $mathcal{Y} = {0, 1, e}$ of the BEC channel. Erasures $e$ are represented by -1."], [21, 2, 1, "", "__call__", "Passes the binary input sequence $x$ through the channel."], [22, 2, 1, "", "__init__", "Creates a new binary erasure channel (BEC)."], [23, 2, 1, "", "capacities", "Calculates the capacity of BEC channels."], [24, 4, 1, "", "capacity", "The capacity $C$ of the instantiated channel in bits/channel use."], [25, 4, 1, "", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.BinaryErasureChannel.__call__": [[21, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X} = {0, 1}$."]], "sdr.BinaryErasureChannel.__init__": [[22, 3, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."], [22, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."]], "sdr.BinarySymmetricChannel": [[27, 4, 1, "", "X", "The input alphabet $mathcal{X} = {0, 1}$ of the BSC channel."], [28, 4, 1, "", "Y", "The output alphabet $mathcal{Y} = {0, 1}$ of the BSC channel."], [29, 2, 1, "", "__call__", "Passes the binary input sequence $x$ through the channel."], [30, 2, 1, "", "__init__", "Creates a new binary symmetric channel (BSC)."], [31, 2, 1, "", "capacities", "Calculates the capacity of BSC channels."], [32, 4, 1, "", "capacity", "The capacity $C$ of the instantiated channel in bits/channel use."], [33, 4, 1, "", "p", "The transition probability $p$ of the BSC channel."]], "sdr.BinarySymmetricChannel.__call__": [[29, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X} = {0, 1}$."]], "sdr.BinarySymmetricChannel.__init__": [[30, 3, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."], [30, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."]], "sdr.CPM": [[35, 2, 1, "", "__init__", "Creates a new continuous-phase modulation object."], [36, 2, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [37, 4, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [38, 2, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples $tilde{x}[n]$ into decimal symbol decisions $hat{s}[k]$ using matched filtering and maximum-likelihood estimation."], [39, 4, 1, "", "index", "The modulation index $h$."], [40, 2, 1, "", "modulate", "Modulates the decimal symbols $s[k]$ into pulse-shaped complex samples $x[n]$."], [41, 4, 1, "", "order", "The modulation order $M = 2^k$."], [42, 4, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [43, 4, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the instantaneous frequency of the signal."], [44, 4, 1, "", "rx_filter", "The receive decimating matched filter. The filter coefficients are matched to the pulse shape $h[-n]^*$."], [45, 2, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [46, 4, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [47, 4, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter. The filter coefficients are the pulse shape $h[n]$."]], "sdr.CPM.__init__": [[35, 3, 2, "p-index", "index", "The modulation index $h$. The modulation index is the ratio of the frequency deviation to the symbol rate $h = Delta f / f_{sym}$. The phase change per symbol is $pi h$."], [35, 3, 2, "p-order", "order", "The modulation order $M = 2^k$."], [35, 3, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees."], [35, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the instantaneous frequency of the signal. If a string is passed, the pulse shape is normalized such that the maximum value is 1."], [35, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string."], [35, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."]], "sdr.CPM.ber": [[36, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.CPM.demodulate": [[38, 3, 2, "p-x_tilde", "x_tilde", "The received pulse-shaped complex samples $tilde{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.CPM.modulate": [[40, 3, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.CPM.ser": [[45, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.Channel": [[49, 2, 1, "", "__call__", "Passes the input sequence $x$ through the channel."], [50, 2, 1, "", "__init__", "Creates a new channel."], [51, 2, 1, "", "capacities", "Computes the channel capacity given the channel configuration."], [52, 4, 1, "", "capacity", "The channel capacity $C$ in bits/2D of the instantiated channel."], [53, 2, 1, "", "reset", "Resets the channel with a new seed."]], "sdr.Channel.__call__": [[49, 3, 2, "p-x", "x", "The input sequence $x$."]], "sdr.Channel.__init__": [[50, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."]], "sdr.Channel.reset": [[53, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."]], "sdr.Channelizer": [[55, 2, 1, "", "__call__", "Channelizes the input signal $x[n]$ with the polyphase FIR filter."], [56, 2, 1, "", "__init__", "Creates a polyphase FIR channelizing filter."], [57, 4, 1, "", "channels", "The number of channels $C$."], [58, 4, 1, "", "method", "The method used to design the polyphase channelizing filter."]], "sdr.Channelizer.__call__": [[55, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [55, 3, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Channelizer.__init__": [[56, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB. Only used when taps=\"kaiser\"."], [56, 3, 2, "p-channels", "channels", "The number of channels $C$."], [56, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even. Only used when taps=\"kaiser\"."], [56, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [56, 3, 2, "p-taps", "taps", "The prototype filter design specification."]], "sdr.ClosedLoopPLL": [[60, 4, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [61, 4, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [62, 4, 1, "", "K0", "The NCO gain $K_0$."], [63, 4, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [64, 4, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [65, 4, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [66, 2, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [67, 2, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [68, 4, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [69, 2, 1, "", "lock_time", "Returns the lock time of the PLL."], [70, 4, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [71, 4, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [72, 2, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [73, 2, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [74, 4, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [75, 4, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[66, 3, 2, "p-K0", "K0", "The NCO gain $K_0$."], [66, 3, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [66, 3, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [66, 3, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [66, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[67, 3, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[69, 3, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[72, 3, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.Decimator": [[77, 2, 1, "", "__init__", "Creates a polyphase FIR decimating filter."], [78, 4, 1, "", "method", "The method used to design the polyphase decimating filter."], [79, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."]], "sdr.Decimator.__init__": [[77, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB. Only used when taps=\"kaiser\"."], [77, 3, 2, "p-decimation", "decimation", "The decimation rate $Q$."], [77, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even. Only used when taps=\"kaiser\"."], [77, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [77, 3, 2, "p-taps", "taps", "The prototype filter design specification."]], "sdr.Differentiator": [[81, 2, 1, "", "__init__", "Creates a differentiator FIR filter."]], "sdr.Differentiator.__init__": [[81, 3, 2, "p-order", "order", "The order of the FIR differentiator $N$. The filter length is $N + 1$. Increasing the filter order increases the bandwidth of the differentiator."], [81, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [81, 3, 2, "p-window", "window", "The SciPy window definition. See scipy.signal.windows.get_window() for details. If None, no window is applied."]], "sdr.DiscreteMemorylessChannel": [[83, 4, 1, "", "P", "The transition probability matrix $P$ of the DMC channel."], [84, 4, 1, "", "X", "The input alphabet $mathcal{X}$ of the DMC channel."], [85, 4, 1, "", "Y", "The output alphabet $mathcal{Y}$ of the DMC channel."], [86, 2, 1, "", "__call__", "Passes the input sequence $x$ through the channel."], [87, 2, 1, "", "__init__", "Creates a new discrete memoryless channel (DMC)."]], "sdr.DiscreteMemorylessChannel.__call__": [[86, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.DiscreteMemorylessChannel.__init__": [[87, 3, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P = Pr(Y = y_j | X = x_i)$."], [87, 3, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [87, 3, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [87, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."]], "sdr.EnergyDetector": [[89, 2, 1, "", "p_d", "Computes the probability of detection $P_D$."], [90, 2, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [91, 2, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [92, 2, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.EnergyDetector.p_d": [[89, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [89, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [89, 3, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.p_fa": [[90, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [90, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [90, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [90, 3, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.EnergyDetector.roc": [[91, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [91, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [91, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."], [91, 3, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.threshold": [[92, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [92, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [92, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [92, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.ErrorRate": [[94, 2, 1, "", "__init__", "Creates a new error rate tabulation object."], [95, 2, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [96, 2, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [97, 2, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [98, 2, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [99, 2, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[95, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [95, 3, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [95, 3, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[96, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[97, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[99, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[101, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the FIR filter."], [102, 2, 1, "", "__init__", "Creates an FIR filter."], [103, 2, 1, "", "__len__", "Returns the filter length $N + 1$."], [104, 4, 1, "", "delay", "The delay of the FIR filter $d = lfloor frac{N + 1}{2} rfloor$ in samples."], [105, 2, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [106, 2, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the FIR filter."], [107, 2, 1, "", "group_delay", "Returns the group delay $tau_g(omega)$ of the FIR filter."], [108, 2, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [109, 4, 1, "", "order", "The order of the FIR filter $N$."], [110, 2, 1, "", "phase_delay", "Returns the phase delay $tau_{phi}(omega)$ of the FIR filter."], [111, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [112, 4, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [113, 2, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [114, 4, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [115, 4, 1, "", "taps", "The feedforward taps $h[n]$ with length $N + 1$."]], "sdr.FIR.__call__": [[101, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [101, 3, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.FIR.__init__": [[102, 3, 2, "p-h", "h", "The feedforward coefficients $h[n]$."], [102, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FIR.frequency_response": [[106, 3, 2, "p-decades", "decades", "Only used if freqs is an integer."], [106, 3, 2, "p-freqs", "freqs", "The frequency specification."], [106, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [106, 3, 2, "p-whole", "whole", "Only used if freqs is an integer."]], "sdr.FIR.group_delay": [[107, 3, 2, "p-N", "N", "The number of samples in the group delay."], [107, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[108, 3, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.phase_delay": [[110, 3, 2, "p-N", "N", "The number of samples in the phase delay."], [110, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.step_response": [[113, 3, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FLFSR": [[117, 2, 1, "", "Taps", "Constructs a Fibonacci LFSR from its taps $T = [c_{n-1}, c_{n-2}, dots, c_1, c_0]$."], [118, 2, 1, "", "__init__", "Constructs a Fibonacci LFSR from its feedback polynomial $f(x)$."], [119, 4, 1, "", "characteristic_poly", "The characteristic polynomial $c(x) = x^{n} - c_{n-1} cdot x^{n-1} - c_{n-2} cdot x^{n-2} - dots - c_{1} cdot x - c_{0}$ that defines the linear recurrent sequence."], [120, 4, 1, "", "feedback_poly", "The feedback polynomial $f(x) = -c_{0} cdot x^{n} - c_{1} cdot x^{n-1} - dots - c_{n-2} cdot x^{2} - c_{n-1} cdot x + 1$ that defines the feedback arithmetic."], [121, 4, 1, "", "field", "The FieldArray subclass for the finite field that defines the linear arithmetic."], [122, 4, 1, "", "initial_state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$."], [123, 4, 1, "", "order", "The order of the linear recurrence/linear recurrent sequence. The order of a sequence is defined by the degree of the minimal polynomial that produces it."], [124, 2, 1, "", "reset", "Resets the Fibonacci LFSR state to the specified state."], [125, 4, 1, "", "state", "The current state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$."], [126, 2, 1, "", "step", "Produces the next steps output symbols."], [127, 4, 1, "", "taps", "The shift register taps $T = [c_{n-1}, c_{n-2}, dots, c_1, c_0]$. The taps of the shift register define the linear recurrence relation."], [128, 2, 1, "", "to_galois_lfsr", "Converts the Fibonacci LFSR to a Galois LFSR that produces the same output."]], "sdr.FLFSR.Taps": [[117, 3, 2, "p-state", "state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$. The default is None which corresponds to all ones."], [117, 3, 2, "p-taps", "taps", "The shift register taps $T = [c_{n-1}, c_{n-2}, dots, c_1, c_0]$."]], "sdr.FLFSR.__init__": [[118, 3, 2, "p-feedback_poly", "feedback_poly", "The feedback polynomial $f(x) = -c_{0} cdot x^{n} - c_{1} cdot x^{n-1} - dots - c_{n-2} cdot x^{2} - c_{n-1} cdot x + 1$."], [118, 3, 2, "p-state", "state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$. The default is None which corresponds to all ones."]], "sdr.FLFSR.reset": [[124, 3, 2, "p-state", "state", "The state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$. The default is None which corresponds to the initial state."]], "sdr.FLFSR.step": [[126, 3, 2, "p-steps", "steps", "The direction and number of output symbols to produce. The default is 1. If negative, the Fibonacci LFSR will step backwards."]], "sdr.FarrowResampler": [[130, 2, 1, "", "__call__", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [131, 2, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [132, 4, 1, "", "delay", "The delay $d$ of the Farrow FIR filters in samples. Output sample $d cdot r$, corresponds to the first input sample, where $r$ is the current resampling rate."], [133, 2, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [134, 4, 1, "", "order", "The order of the piecewise polynomial."], [135, 2, 1, "", "reset", "Resets the filter state and fractional sample index."], [136, 4, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [137, 4, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [138, 4, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__call__": [[130, 3, 2, "p-rate", "rate", "The resampling rate $r$."], [130, 3, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.__init__": [[131, 3, 2, "p-order", "order", "The order of the piecewise polynomial. Must be between 1 and 4."], [131, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FarrowResampler.flush": [[133, 3, 2, "p-rate", "rate", "The resampling rate $r$."]], "sdr.FarrowResampler.reset": [[135, 3, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.FractionalDelay": [[140, 2, 1, "", "__init__", "Creates a fractional delay FIR filter."]], "sdr.FractionalDelay.__init__": [[140, 3, 2, "p-delay", "delay", "The fractional delay $0 le Delta n le 1$."], [140, 3, 2, "p-length", "length", "The filter length $L$. Filters with even length have best performance. Filters with odd length are equivalent to an even-length filter with an appended zero."]], "sdr.GLFSR": [[142, 2, 1, "", "Taps", "Constructs a Galois LFSR from its taps $T = [c_0, c_1, dots, c_{n-2}, c_{n-1}]$."], [143, 2, 1, "", "__init__", "Constructs a Galois LFSR from its feedback polynomial $f(x)$."], [144, 4, 1, "", "characteristic_poly", "The characteristic polynomial $c(x) = x^{n} - c_{n-1} cdot x^{n-1} - c_{n-2} cdot x^{n-2} - dots - c_{1} cdot x - c_{0}$ that defines the linear recurrent sequence."], [145, 4, 1, "", "feedback_poly", "The feedback polynomial $f(x) = -c_{0} cdot x^{n} - c_{1} cdot x^{n-1} - dots - c_{n-2} cdot x^{2} - c_{n-1} cdot x + 1$ that defines the feedback arithmetic."], [146, 4, 1, "", "field", "The FieldArray subclass for the finite field that defines the linear arithmetic."], [147, 4, 1, "", "initial_state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$."], [148, 4, 1, "", "order", "The order of the linear recurrence/linear recurrent sequence. The order of a sequence is defined by the degree of the minimal polynomial that produces it."], [149, 2, 1, "", "reset", "Resets the Galois LFSR state to the specified state."], [150, 4, 1, "", "state", "The current state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$."], [151, 2, 1, "", "step", "Produces the next steps output symbols."], [152, 4, 1, "", "taps", "The shift register taps $T = [c_0, c_1, dots, c_{n-2}, c_{n-1}]$. The taps of the shift register define the linear recurrence relation."], [153, 2, 1, "", "to_fibonacci_lfsr", "Converts the Galois LFSR to a Fibonacci LFSR that produces the same output."]], "sdr.GLFSR.Taps": [[142, 3, 2, "p-state", "state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$. The default is None which corresponds to all ones."], [142, 3, 2, "p-taps", "taps", "The shift register taps $T = [c_0, c_1, dots, c_{n-2}, c_{n-1}]$."]], "sdr.GLFSR.__init__": [[143, 3, 2, "p-feedback_poly", "feedback_poly", "The feedback polynomial $f(x) = -c_{0} cdot x^{n} - c_{1} cdot x^{n-1} - dots - c_{n-2} cdot x^{2} - c_{n-1} cdot x + 1$."], [143, 3, 2, "p-state", "state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$. The default is None which corresponds to all ones."]], "sdr.GLFSR.reset": [[149, 3, 2, "p-state", "state", "The state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$. The default is None which corresponds to the initial state."]], "sdr.GLFSR.step": [[151, 3, 2, "p-steps", "steps", "The direction and number of output symbols to produce. The default is 1. If negative, the Galois LFSR will step backwards."]], "sdr.IIR": [[155, 2, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [156, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the IIR filter."], [157, 2, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [158, 4, 1, "", "a_taps", "The feedback taps $a_j$ for $j = 0,...,N$."], [159, 4, 1, "", "b_taps", "The feedforward taps $b_i$ for $i = 0,...,M$."], [160, 2, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the IIR filter."], [161, 4, 1, "", "gain", "The gain of the IIR filter."], [162, 2, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [163, 4, 1, "", "order", "The order of the IIR filter $N$."], [164, 4, 1, "", "poles", "The poles of the IIR filter."], [165, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [166, 4, 1, "", "state", "The filter state."], [167, 2, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [168, 4, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [169, 4, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[155, 3, 2, "p-gain", "gain", "The gain of the transfer function."], [155, 3, 2, "p-poles", "poles", "The poles of the transfer function."], [155, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."], [155, 3, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__call__": [[156, 3, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.IIR.__init__": [[157, 3, 2, "p-a", "a", "The feedback coefficients $a_j$ for $j = 0,...,N$."], [157, 3, 2, "p-b", "b", "The feedforward coefficients $b_i$ for $i = 0,...,M$."], [157, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.IIR.frequency_response": [[160, 3, 2, "p-decades", "decades", "Only used if freqs is an integer."], [160, 3, 2, "p-freqs", "freqs", "The frequency specification."], [160, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [160, 3, 2, "p-whole", "whole", "Only used if freqs is an integer."]], "sdr.IIR.impulse_response": [[162, 3, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[167, 3, 2, "p-N", "N", "The number of samples to return."]], "sdr.Integrator": [[171, 2, 1, "", "__init__", "Creates an integrating IIR filter."]], "sdr.Integrator.__init__": [[171, 3, 2, "p-method", "method", "The integration method."], [171, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.Interpolator": [[173, 2, 1, "", "__init__", "Creates a polyphase FIR interpolating filter."], [174, 4, 1, "", "method", "The method used to design the polyphase interpolating filter."]], "sdr.Interpolator.__init__": [[173, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB. Only used when taps=\"kaiser\"."], [173, 3, 2, "p-interpolation", "interpolation", "The interpolation rate $P$."], [173, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even. Only used when taps=\"kaiser\"."], [173, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [173, 3, 2, "p-taps", "taps", "The prototype filter design specification."]], "sdr.LeakyIntegrator": [[176, 2, 1, "", "__init__", "Creates a leaky integrator IIR filter."]], "sdr.LeakyIntegrator.__init__": [[176, 3, 2, "p-alpha", "alpha", "The leaky factor $alpha$. An FIR moving average with length $L$ is approximated when $alpha = 1 - 2/L$."], [176, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.LinearModulation": [[178, 2, 1, "", "__init__", "Creates a new linear phase/amplitude modulation object."], [179, 2, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [180, 4, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [181, 2, 1, "", "decide_symbols", "Converts the received complex symbols $tilde{a}[k]$ into decimal symbol decisions $hat{s}[k]$ and complex symbol decisions $hat{a}[k]$ using maximum-likelihood estimation (MLE)."], [182, 2, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples $tilde{x}[n]$ into decimal symbol decisions $hat{s}[k]$ using matched filtering and maximum-likelihood estimation."], [183, 2, 1, "", "map_symbols", "Converts the decimal symbols $s[k]$ to complex symbols $a[k]$."], [184, 2, 1, "", "modulate", "Modulates the decimal symbols $s[k]$ into pulse-shaped complex samples $x[n]$."], [185, 4, 1, "", "order", "The modulation order $M = 2^k$."], [186, 4, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [187, 4, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [188, 4, 1, "", "rx_filter", "The receive decimating matched filter. The filter coefficients are matched to the pulse shape $h[-n]^*$."], [189, 2, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [190, 4, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [191, 4, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."], [192, 4, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter. The filter coefficients are the pulse shape $h[n]$."]], "sdr.LinearModulation.__init__": [[178, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [178, 3, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees to apply to symbol_map."], [178, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [178, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [178, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [178, 3, 2, "p-symbol_map", "symbol_map", "The symbol mapping ${0, dots, M-1} mapsto mathbb{C}$. An $M$-length array whose indices are decimal symbols $s[k]$ and whose values are complex symbols $a[k]$, where $M$ is the modulation order."]], "sdr.LinearModulation.ber": [[179, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.LinearModulation.decide_symbols": [[181, 3, 2, "p-a_tilde", "a_tilde", "The received complex symbols $tilde{a}[k]$."]], "sdr.LinearModulation.demodulate": [[182, 3, 2, "p-x_tilde", "x_tilde", "The received pulse-shaped complex samples $tilde{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.LinearModulation.map_symbols": [[183, 3, 2, "p-s", "s", "The decimal symbols $s[k]$ to map, $0$ to $M-1$."]], "sdr.LinearModulation.modulate": [[184, 3, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.LinearModulation.ser": [[189, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.LoopFilter": [[194, 2, 1, "", "__call__", "Filters the input signal $x[n]$."], [195, 2, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [196, 4, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [197, 4, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [198, 4, 1, "", "integral_gain", "The integral gain $K_2$ of the loop filter."], [199, 4, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [200, 4, 1, "", "proportional_gain", "The proportional gain $K_1$ of the loop filter."], [201, 2, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__call__": [[194, 3, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.LoopFilter.__init__": [[195, 3, 2, "p-K0", "K0", "The NCO gain $K_0$."], [195, 3, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [195, 3, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [195, 3, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.MLPED": [[203, 4, 1, "", "A_received", "(Settable) The received signal RMS amplitude $A_{rx,rms}$."], [204, 4, 1, "", "A_reference", "(Settable) The reference signal RMS amplitude $A_{ref,rms}$."], [205, 2, 1, "", "__call__", "Detects the phase error."], [206, 2, 1, "", "__init__", "Initializes the ML-PED."], [207, 2, 1, "", "data_aided_error", "Simulates the average phase error of the data-aided PED using the specified modulation scheme."], [208, 2, 1, "", "decision_directed_error", "Simulates the average phase error of the decision-directed PED using the specified modulation scheme."], [209, 4, 1, "", "gain", "The gain of the phase error detector $K_p$."]], "sdr.MLPED.__call__": [[205, 3, 2, "p-received", "received", "The received complex symbols $tilde{a}[k]$."], [205, 3, 2, "p-reference", "reference", "The reference complex symbols, either the known transmitted complex symbols $a[k]$ or the complex symbols decisions $hat{a}[k]$."]], "sdr.MLPED.__init__": [[206, 3, 2, "p-A_received", "A_received", "The received signal RMS amplitude $A_{rx,rms}$."], [206, 3, 2, "p-A_reference", "A_reference", "The reference signal RMS amplitude $A_{ref,rms}$."]], "sdr.MLPED.data_aided_error": [[207, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [207, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.MLPED.decision_directed_error": [[208, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [208, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.MSK": [[211, 2, 1, "", "__init__", "Creates a new MSK object."]], "sdr.MSK.__init__": [[211, 3, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [211, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [211, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.MovingAverager": [[213, 2, 1, "", "__init__", "Creates a moving average FIR filter."]], "sdr.MovingAverager.__init__": [[213, 3, 2, "p-length", "length", "The length of the moving average filter $L$."], [213, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.NCO": [[215, 2, 1, "", "__call__", "Steps the NCO with variable frequency and/or phase signals."], [216, 2, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [217, 4, 1, "", "gain", "(Settable) The NCO gain $K_0$."], [218, 4, 1, "", "increment", "(Settable) The constant phase accumulation $omega$ of the NCO in radians/sample."], [219, 4, 1, "", "offset", "(Settable) The absolute phase offset $theta$ of the NCO in radians."], [220, 2, 1, "", "reset", "Resets the NCO."], [221, 2, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__call__": [[215, 3, 2, "p-freq", "freq", "The variable frequency signal $f[n]$ in radians/sample. This input signal varies the per-sample phase increment of the NCO. If None, the signal is all zeros."], [215, 3, 2, "p-output", "output", "The format of the output signal $y[n]$. Options are the accumulated phase, sine, cosine, or complex exponential."], [215, 3, 2, "p-phase", "phase", "The variable phase signal $p[n]$ in radians. This input signal varies the per-sample phase offset of the NCO. If None, the signal is all zeros."]], "sdr.NCO.__init__": [[216, 3, 2, "p-gain", "gain", "The NCO gain $K_0$."], [216, 3, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [216, 3, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.NCO.step": [[221, 3, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.OQPSK": [[223, 2, 1, "", "__init__", "Creates a new OQPSK object."]], "sdr.OQPSK.__init__": [[223, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [223, 3, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [223, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [223, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [223, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [223, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PED": [[225, 2, 1, "", "__call__", "Detects the phase error."], [226, 2, 1, "", "__init__", "Initializes the PED."], [227, 2, 1, "", "data_aided_error", "Simulates the average phase error of the data-aided PED using the specified modulation scheme."], [228, 2, 1, "", "decision_directed_error", "Simulates the average phase error of the decision-directed PED using the specified modulation scheme."], [229, 4, 1, "", "gain", "The gain of the phase error detector $K_p$."]], "sdr.PED.__call__": [[225, 3, 2, "p-received", "received", "The received complex symbols $tilde{a}[k]$."], [225, 3, 2, "p-reference", "reference", "The reference complex symbols, either the known transmitted complex symbols $a[k]$ or the complex symbols decisions $hat{a}[k]$."]], "sdr.PED.data_aided_error": [[227, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [227, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.PED.decision_directed_error": [[228, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [228, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.PSK": [[231, 2, 1, "", "__init__", "Creates a new PSK object."], [232, 2, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [233, 4, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [234, 2, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [235, 4, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[231, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [231, 3, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [231, 3, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [231, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [231, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [231, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [231, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[232, 3, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [232, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.ser": [[234, 3, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [234, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.PiMPSK": [[237, 2, 1, "", "__init__", "Creates a new $pi/M$ PSK object."]], "sdr.PiMPSK.__init__": [[237, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [237, 3, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [237, 3, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [237, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [237, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [237, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [237, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PolyphaseFIR": [[239, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the polyphase FIR filter."], [240, 2, 1, "", "__init__", "Creates a polyphase FIR filter."], [241, 4, 1, "", "branches", "The number of polyphase branches $B$."], [242, 4, 1, "", "decimation", "The integer decimation rate $Q$."], [243, 4, 1, "", "delay", "The delay of polyphase FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [244, 4, 1, "", "input", "The input connection method."], [245, 4, 1, "", "interpolation", "The integer interpolation rate $P$."], [246, 4, 1, "", "order", "The order $N = (M + 1)B - 1$ of the FIR prototype filter $h[n]$."], [247, 4, 1, "", "output", "The output connection method."], [248, 4, 1, "", "polyphase_order", "The order $M = (N + 1)/B - 1$ of each FIR polyphase filter $h_i[n]$."], [249, 4, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_i[n]$."], [250, 4, 1, "", "rate", "The fractional resampling rate $r = P/Q$. The output sample rate is $f_{s,out} = f_{s,in} cdot r$."], [251, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [252, 4, 1, "", "taps", "The prototype feedforward taps $h[n]$."]], "sdr.PolyphaseFIR.__call__": [[239, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [239, 3, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.PolyphaseFIR.__init__": [[240, 3, 2, "p-branches", "branches", "The number of polyphase branches $B$."], [240, 3, 2, "p-input", "input", "The input connection method."], [240, 3, 2, "p-output", "output", "The output connection method."], [240, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [240, 3, 2, "p-taps", "taps", "The prototype filter feedforward coefficients $h[n]$."]], "sdr.Q": [[253, 3, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[254, 3, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.ReplicaCorrelator": [[256, 2, 1, "", "p_d", "Computes the probability of detection $P_D$."], [257, 2, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [258, 2, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [259, 2, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.ReplicaCorrelator.p_d": [[256, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [256, 3, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [256, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."]], "sdr.ReplicaCorrelator.p_fa": [[257, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [257, 3, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [257, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [257, 3, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.ReplicaCorrelator.roc": [[258, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [258, 3, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [258, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."]], "sdr.ReplicaCorrelator.threshold": [[259, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [259, 3, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [259, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [259, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.Resampler": [[261, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the polyphase FIR filter."], [262, 2, 1, "", "__init__", "Creates a polyphase FIR rational resampling filter."], [263, 4, 1, "", "method", "The method used to design the polyphase resampling filter."]], "sdr.Resampler.__call__": [[261, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [261, 3, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Resampler.__init__": [[262, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB. Only used when taps=\"kaiser\"."], [262, 3, 2, "p-decimation", "decimation", "The decimation rate $Q$."], [262, 3, 2, "p-interpolation", "interpolation", "The interpolation rate $P$."], [262, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even. Only used when taps=\"kaiser\"."], [262, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [262, 3, 2, "p-taps", "taps", "The prototype filter design specification."]], "sdr.albersheim": [[264, 3, 2, "p-N_nc", "N_nc", "The number of non-coherent combinations $N_{NC} ge 1$."], [264, 3, 2, "p-p_d", "p_d", "The desired probability of detection $P_D$ in $(0, 1)$."], [264, 3, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{FA}$ in $(0, 1)$."]], "sdr.average_power": [[265, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the average power. The default is None, which computes the average power of the entire array."], [265, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [265, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[266, 3, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [266, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [266, 3, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [266, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[267, 3, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [267, 3, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.barker_code": [[268, 3, 2, "p-length", "length", "The length $N$ of the Barker code/sequence."], [268, 3, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[269, 3, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [269, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [269, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[270, 3, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.berlekamp_massey": [[271, 3, 2, "p-output", "output", "The output object type."], [271, 3, 2, "p-sequence", "sequence", "A linear recurrent sequence $y$ in $mathrm{GF}(p^m)$."]], "sdr.binary_code": [[272, 3, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[273, 3, 2, "p-p", "p", "The probability $p$ of a bit flip."], [273, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [273, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[274, 3, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[275, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.db": [[276, 3, 2, "p-type", "type", "The type of input value or signal."], [276, 3, 2, "p-x", "x", "The input value or signal."]], "sdr.design_bandpass_fir": [[277, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [277, 3, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [277, 3, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [277, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [277, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_bandstop_fir": [[278, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [278, 3, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [278, 3, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [278, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [278, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_frac_delay_fir": [[279, 3, 2, "p-delay", "delay", "The fractional delay $0 le Delta n le 1$."], [279, 3, 2, "p-length", "length", "The filter length $L$. Filters with even length have best performance. Filters with odd length are equivalent to an even-length filter with an appended zero."]], "sdr.design_highpass_fir": [[280, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [280, 3, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [280, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [280, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_lowpass_fir": [[281, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [281, 3, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [281, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [281, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_multirate_fir": [[282, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB."], [282, 3, 2, "p-decimation", "decimation", "The decimation rate $Q$."], [282, 3, 2, "p-interpolation", "interpolation", "The interpolation rate $P$."], [282, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even."]], "sdr.diff_decode": [[283, 3, 2, "p-y", "y", "The input encoded data $y[k]$."], [283, 3, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[284, 3, 2, "p-x", "x", "The input uncoded data $x[k]$."], [284, 3, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[285, 3, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [285, 3, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [285, 3, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [285, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [285, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.downsample": [[286, 3, 2, "p-rate", "rate", "The downsampling factor $r$."], [286, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.ebn0_to_esn0": [[287, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [287, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [287, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[288, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [288, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [288, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [288, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[289, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the energy. The default is None, which computes the energy of the entire array."], [289, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [289, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[290, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [290, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [290, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[291, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [291, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.euclidean": [[292, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the distance. The default is None, which computes the distance across the entire array."], [292, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [292, 3, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.evm": [[293, 3, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [293, 3, 2, "p-output", "output", "The output type of the EVM calculation."], [293, 3, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [293, 3, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.frequency_offset": [[294, 3, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [294, 3, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [294, 3, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [294, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [294, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[295, 3, 2, "p-distance", "distance", "The distance $d$ in meters between the transmitter and receiver."], [295, 3, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[296, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [296, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [296, 3, 2, "p-sps", "sps", "The number of samples per symbol."], [296, 3, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[297, 3, 2, "p-n", "n", "The length of the Gray code."]], "sdr.hadamard_code": [[298, 3, 2, "p-index", "index", "The index $i$ in $[0, N)$ of the Hadamard code."], [298, 3, 2, "p-length", "length", "The length $N$ of the Hadamard code/sequence. Must be a power of 2."], [298, 3, 2, "p-output", "output", "The output format of the Hadamard code/sequence."]], "sdr.half_sine": [[299, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [299, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [299, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.hamming": [[300, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the distance. The default is None, which computes the distance across the entire array."], [300, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [300, 3, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.hexdump": [[301, 3, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [301, 3, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[302, 3, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [302, 3, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [302, 3, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.linear": [[303, 3, 2, "p-type", "type", "The type of output value or signal."], [303, 3, 2, "p-x", "x", "The input value or signal in dB."]], "sdr.m_sequence": [[304, 3, 2, "p-degree", "degree", "The degree $n$ of the LFSR."], [304, 3, 2, "p-index", "index", "The index $i$ in $[1, q^{n})$ of the m-sequence. The index represents the initial state of the LFSR. The index dictates the phase of the m-sequence. The integer index is interpreted as a polynomial over $mathrm{GF}(q)$, whose coefficients are the shift register values. The default is 1, which corresponds to the $[0, dots, 0, 1]$ state."], [304, 3, 2, "p-output", "output", "The output format of the m-sequence."], [304, 3, 2, "p-poly", "poly", "The feedback polynomial of the LFSR over $mathrm{GF}(q)$. Note, the feedback polynomial is the reciprocal of the characteristic polynomial that defines the linear recurrence relation. The default is None which uses the reciprocal primitive polynomial of degree $n$ over $mathrm{GF}(2)$, galois.primitive_poly(2, degree).reverse()."]], "sdr.mix": [[305, 3, 2, "p-complex", "complex", "Indicates whether to mix by a complex exponential or real sinusoid."], [305, 3, 2, "p-freq", "freq", "The frequency $f$ of the sinusoid in Hz (or 1/samples if sample_rate=1). The frequency must satisfy $-f_s/2 le f le f_s/2$."], [305, 3, 2, "p-phase", "phase", "The phase $phi$ of the sinusoid in degrees."], [305, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal."], [305, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.pack": [[306, 3, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [306, 3, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [306, 3, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[307, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the PAPR. The default is None, which computes the PAPR of the entire array."], [307, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[308, 3, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [308, 3, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [308, 3, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[309, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the peak power. The default is None, which computes the peak power of the entire array."], [309, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [309, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[310, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [310, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.percent": [[311, 3, 2, "p-x", "x", "The input ratio."]], "sdr.plot": [[312, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [313, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [314, 5, 1, "", "eye", "Plots the eye diagram of the baseband modulated signal $x[n]$."], [315, 5, 1, "", "filter", "Plots the magnitude response $|H(omega)|^2$, impulse response $h[n]$, and zeros and poles of the filter."], [316, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [317, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [318, 5, 1, "", "magnitude_response", "Plots the magnitude response $|H(omega)|^2$ of the filter."], [319, 5, 1, "", "p_d", "Plots the probability of detection $P_D$ as a function of received SNR or ENR."], [320, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [321, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [322, 5, 1, "", "phase_response", "Plots the phase response $angle H(omega)$ of the filter."], [323, 5, 1, "", "phase_tree", "Plots the phase tree of a continuous-phase modulated (CPM) signal signal $x[n]$."], [324, 5, 1, "", "raster", "Plots a raster of the time-domain signal $x[n]$."], [325, 5, 1, "", "roc", "Plots the receiver operating characteristic (ROC) curve as a function of $P_{FA}$."], [326, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [327, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [328, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [329, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [330, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [331, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [332, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[312, 3, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [312, 3, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."], [312, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."]], "sdr.plot.constellation": [[313, 3, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if persistence=True."], [313, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to Matplotlib functions."], [313, 3, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [313, 3, 2, "p-persistence", "persistence", "Indicates whether to plot the points as a persistence plot. A persistence plot is a 2D histogram of the points."], [313, 3, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.eye": [[314, 3, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [314, 3, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\" or persistence=True."], [314, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [314, 3, 2, "p-persistence", "persistence", "Indicates whether to plot the raster as a persistence plot. A persistence plot is a 2D histogram of the rasters."], [314, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Symbol\"."], [314, 3, 2, "p-span", "span", "The number of symbols per raster."], [314, 3, 2, "p-sps", "sps", "The number of samples per symbol."], [314, 3, 2, "p-x", "x", "The baseband modulated signal $x[n]$. If x is complex, in-phase and quadrature eye diagrams are plotted in separate subplots."]], "sdr.plot.filter": [[315, 3, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [315, 3, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [315, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [315, 3, 2, "p-filter", "filter", "The filter definition."], [315, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [315, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[316, 3, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [316, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [316, 3, 2, "p-filter", "filter", "The filter definition."], [316, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [316, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [316, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.impulse_response": [[317, 3, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [317, 3, 2, "p-filter", "filter", "The filter definition."], [317, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [317, 3, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. Can be useful for comparing the impulse response of filters with different lengths."]], "sdr.plot.magnitude_response": [[318, 3, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [318, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [318, 3, 2, "p-filter", "filter", "The filter definition."], [318, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [318, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [318, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."], [318, 3, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a linear or logarithmic magnitude response."]], "sdr.plot.p_d": [[319, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [319, 3, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [319, 3, 2, "p-x", "x", "The SNR or ENR in dB."], [319, 3, 2, "p-x_label", "x_label", "The x-axis label to use."]], "sdr.plot.periodogram": [[320, 3, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [320, 3, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [320, 3, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [320, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [320, 3, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [320, 3, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [320, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [320, 3, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [320, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [320, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued signals and \"two-sided\" for complex-valued signals."], [320, 3, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a linear or logarithmic power spectral density."]], "sdr.plot.phase_delay": [[321, 3, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [321, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [321, 3, 2, "p-filter", "filter", "The filter definition."], [321, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [321, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [321, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.phase_response": [[322, 3, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [322, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [322, 3, 2, "p-filter", "filter", "The filter definition."], [322, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [322, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [322, 3, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [322, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.phase_tree": [[323, 3, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [323, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [323, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Symbol\"."], [323, 3, 2, "p-span", "span", "The number of symbols per raster."], [323, 3, 2, "p-sps", "sps", "The number of samples per symbol."], [323, 3, 2, "p-x", "x", "The baseband CPM signal $x[n]$."]], "sdr.plot.raster": [[324, 3, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [324, 3, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\" or persistence=True."], [324, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to Matplotlib functions."], [324, 3, 2, "p-length", "length", "The length of each raster in samples. This must be provided if x is 1D."], [324, 3, 2, "p-persistence", "persistence", "Indicates whether to plot the raster as a persistence plot. A persistence plot is a 2D histogram of the rasters."], [324, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [324, 3, 2, "p-stride", "stride", "The stride between each raster in samples. If None, the stride is set to length."], [324, 3, 2, "p-x", "x", "The real time-domain signal $x[n]$. If x is 1D, the rastering is determined by length and stride. If x is 2D, the rows correspond to each raster."]], "sdr.plot.roc": [[325, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to the plotting function defined by type."], [325, 3, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [325, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [325, 3, 2, "p-type", "type", "The type of plot to generate."]], "sdr.plot.ser": [[326, 3, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [326, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."], [326, 3, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.spectrogram": [[327, 3, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [327, 3, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [327, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.pcolormesh(). The following keyword arguments are set by default. The defaults may be overwritten."], [327, 3, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [327, 3, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [327, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [327, 3, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [327, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [327, 3, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a one-sided spectrum or a two-sided spectrum. The default is \"auto\" which selects \"one-sided\" for real-valued signals and \"two-sided\" for complex-valued signals."]], "sdr.plot.step_response": [[328, 3, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [328, 3, 2, "p-filter", "filter", "The filter definition."], [328, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.symbol_map": [[329, 3, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [329, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot(). The following keyword arguments are set by default. The defaults may be overwritten."], [329, 3, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [329, 3, 2, "p-modulation", "modulation", "The linear modulation or symbol map ${0, dots, M-1} mapsto mathbb{C}$."]], "sdr.plot.time_domain": [[330, 3, 2, "p-centered", "centered", "Indicates whether to center the x-axis about 0. This argument is mutually exclusive with offset."], [330, 3, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal. If \"color\", the real and imaginary parts will have different colors based on the current Matplotlib color cycle. If \"line\", the real part will have a solid line and the imaginary part will have a dashed line, and both lines will share the same color."], [330, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [330, 3, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. The units of the offset are $1/f_s$. This argument is mutually exclusive with centered."], [330, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [330, 3, 2, "p-t", "t", "The time signal $t[n]$. The units are assumed to be $1/f_s$."], [330, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[332, 3, 2, "p-filter", "filter", "The filter definition."], [332, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.polyphase_decompose": [[333, 3, 2, "p-branches", "branches", "The number of polyphase branches $B$."], [333, 3, 2, "p-taps", "taps", "The prototype filter feedforward coefficients $h[n]$."]], "sdr.ppb": [[334, 3, 2, "p-x", "x", "The input ratio."]], "sdr.ppm": [[335, 3, 2, "p-x", "x", "The input ratio."]], "sdr.raised_cosine": [[336, 3, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [336, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [336, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [336, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rectangular": [[337, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [337, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [337, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[338, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [338, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[339, 3, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [339, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [339, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [339, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[340, 3, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [340, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.snr_to_ebn0": [[341, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [341, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [341, 3, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [341, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[342, 3, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [342, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.to_complex_bb": [[343, 3, 2, "p-x_r", "x_r", "The real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$. If the length is odd, one zero is appended to the end."]], "sdr.to_real_pb": [[344, 3, 2, "p-x_c", "x_c", "The complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$."]], "sdr.unpack": [[345, 3, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [345, 3, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [345, 3, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.upsample": [[346, 3, 2, "p-rate", "rate", "The upsampling factor $r$."], [346, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.walsh_code": [[347, 3, 2, "p-index", "index", "The index $i$ in $[0, N)$ of the Walsh code. Indicates how many transitions there are in the code."], [347, 3, 2, "p-length", "length", "The length $N$ of the Walsh code/sequence. Must be a power of 2."], [347, 3, 2, "p-output", "output", "The output format of the Walsh code/sequence."]], "sdr.wavelength": [[348, 3, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.zadoff_chu_sequence": [[349, 3, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [349, 3, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence. The root must be relatively prime to the length, i.e., $gcd(u, N) = 1$."], [349, 3, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence. When $q ne 0$, the returned sequence is a cyclic shift of the root-$u$ Zadoff-Chu sequence."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:parameter", "4": "py:property", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "parameter", "Python parameter"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"]}, "titleterms": {"convers": 0, "decibel": 0, "ratio": 0, "from": [0, 354, 355, 356], "e_b": 0, "n_0": 0, "e_": 0, "": [0, 358, 359], "n": [0, 357, 358, 359], "data": 1, "manipul": [1, 3], "detect": [2, 7], "detector": [2, 352], "theoret": 2, "limit": 2, "digit": [3, 359], "signal": [3, 351, 357, 360], "process": 3, "fir": [3, 358], "filter": [3, 7, 358, 359, 361], "iir": [3, 359], "polyphas": 3, "applic": 3, "arbitrari": [3, 357], "resampl": [3, 357], "correl": [3, 350], "link": 4, "budget": 4, "channel": [4, 351], "capac": 4, "path": 4, "loss": 4, "antenna": 4, "measur": 5, "energi": 5, "power": [5, 360], "voltag": 5, "distanc": 5, "modul": [5, 6, 7], "linear": [6, 350], "continu": 6, "phase": [6, 352, 361, 362], "orthogon": 6, "puls": [6, 360, 363], "shape": [6, 360, 363], "symbol": [6, 350, 362], "encod": 6, "plot": [7, 360], "configur": [7, 354, 356], "time": [7, 360, 361], "domain": [7, 360, 361], "frequenc": [7, 358, 359, 360, 361], "spectral": 7, "estim": 7, "analysi": 7, "probabl": 8, "constructor": [9, 18, 26, 34, 48, 54, 59, 76, 80, 82, 93, 100, 116, 129, 139, 141, 154, 170, 172, 175, 177, 193, 202, 210, 212, 214, 222, 224, 230, 236, 238, 260], "special": [9, 18, 26, 48, 54, 76, 80, 82, 100, 129, 139, 154, 170, 172, 175, 193, 202, 212, 214, 224, 238, 260], "method": [9, 18, 26, 34, 48, 54, 59, 76, 80, 82, 88, 93, 100, 116, 129, 139, 141, 154, 170, 172, 175, 177, 193, 202, 210, 212, 214, 222, 224, 230, 236, 238, 255, 260], "stream": [9, 54, 76, 80, 100, 129, 139, 154, 170, 172, 175, 212, 238, 260], "mode": [9, 54, 76, 80, 100, 129, 139, 154, 170, 172, 175, 212, 238, 260], "onli": [9, 54, 76, 80, 100, 129, 139, 154, 170, 172, 175, 212, 238, 260], "properti": [9, 18, 26, 34, 48, 54, 59, 76, 80, 82, 100, 116, 129, 139, 141, 154, 170, 172, 175, 177, 193, 202, 210, 212, 214, 222, 224, 230, 236, 238, 260], "note": [34, 59, 177, 210, 222, 230, 236, 295, 320, 327], "see": [35, 36, 45, 93, 95, 106, 107, 108, 110, 113, 116, 118, 141, 143, 160, 162, 167, 178, 179, 189, 211, 223, 231, 232, 234, 237, 253, 254, 275, 307, 346], "also": [35, 36, 45, 93, 95, 106, 107, 108, 110, 113, 116, 118, 141, 143, 160, 162, 167, 178, 179, 189, 211, 223, 231, 232, 234, 237, 253, 254, 275, 307, 346], "polynomi": [116, 141], "state": [116, 141], "warn": [286, 346], "sequenc": 350, "map": [350, 362], "recurr": 350, "maxim": 350, "length": 350, "simul": 351, "model": 351, "impair": 351, "synchron": 352, "lock": [352, 361], "loop": [352, 361], "error": [352, 362], "amplitud": 352, "control": 352, "document": 353, "instal": [353, 354, 355, 356, 364], "build": 353, "doc": 353, "serv": 353, "format": 354, "run": [354, 356], "linter": 354, "formatt": 354, "pre": 354, "commit": 354, "v": [354, 356], "code": [354, 356], "pypi": 355, "github": 355, "edit": 355, "local": 355, "folder": 355, "dev": 355, "depend": 355, "unit": 356, "test": 356, "command": 356, "line": 356, "farrow": 357, "construct": 357, "an": [357, 358, 359], "input": 357, "x": 357, "t_": 357, "rate": [357, 362], "r": 357, "y": 357, "frac": 357, "upsampl": 357, "integ": 357, "downsampl": 357, "irrat": 357, "creat": [358, 359], "examin": [358, 359, 360], "impuls": [358, 359], "respons": [358, 359, 361], "h": [358, 359], "step": [358, 359, 361], "omega": [358, 359], "group": [358, 359], "delai": [358, 359], "tau_g": [358, 359], "fulli": [358, 359], "analyz": [358, 359, 361], "zero": 359, "pole": 359, "stabil": 359, "peak": 360, "averag": 360, "qpsk": [360, 362], "variou": 360, "across": [360, 361], "excess": 360, "bandwidth": 360, "design": 361, "proport": 361, "plu": 361, "integr": 361, "ppi": 361, "implement": 361, "pll": 361, "close": 361, "perform": 361, "compar": 361, "zeta": 361, "b_n": 361, "t": 361, "shift": 362, "kei": 362, "constel": 362, "bpsk": 362, "8": [362, 365], "psk": 362, "16": 362, "curv": 362, "bit": 362, "rais": 363, "cosin": 363, "squar": 363, "root": 363, "gaussian": 363, "sdr": 364, "featur": 364, "v0": 365, "0": 365, "12": 365, "chang": 365, "contributor": 365, "11": 365, "10": 365, "9": 365, "7": 365, "6": 365, "5": 365, "4": 365, "3": 365, "2": 365, "1": 365, "version": 366, "alpha": 366, "releas": 366, "beta": 366}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Conversions": [[0, "conversions"]], "Decibels": [[0, "decibels"]], "Ratios": [[0, "ratios"]], "From E_b/N_0": [[0, "from-e-b-n-0"]], "From E_s/N_0": [[0, "from-e-s-n-0"]], "From S/N": [[0, "from-s-n"]], "Data manipulation": [[1, "data-manipulation"]], "Detection": [[2, "detection"], [7, "detection"]], "Detectors": [[2, "detectors"]], "Theoretical limits": [[2, "theoretical-limits"]], "Digital signal processing": [[3, "digital-signal-processing"]], "FIR filtering": [[3, "fir-filtering"]], "IIR filtering": [[3, "iir-filtering"]], "Polyphase FIR filtering": [[3, "polyphase-fir-filtering"]], "Filter applications": [[3, "filter-applications"]], "Arbitrary resampling": [[3, "arbitrary-resampling"]], "Correlation": [[3, "correlation"]], "Signal manipulation": [[3, "signal-manipulation"]], "Link budgets": [[4, "link-budgets"]], "Channel capacity": [[4, "channel-capacity"]], "Path losses": [[4, "path-losses"]], "Antennas": [[4, "antennas"]], "Measurement": [[5, "measurement"]], "Energy": [[5, "energy"]], "Power": [[5, "power"]], "Voltage": [[5, "voltage"]], "Distance": [[5, "distance"]], "Modulation": [[5, "modulation"], [6, "modulation"], [7, "modulation"]], "Linear modulations": [[6, "linear-modulations"]], "Continuous-phase modulations": [[6, "continuous-phase-modulations"]], "Orthogonal modulations": [[6, "orthogonal-modulations"]], "Pulse shaping": [[6, "pulse-shaping"]], "Symbol encoding": [[6, "symbol-encoding"]], "Plotting": [[7, "plotting"]], "Configuration": [[7, "configuration"], [354, "configuration"], [356, "configuration"]], "Time-domain": [[7, "time-domain"]], "Frequency-domain": [[7, "frequency-domain"]], "Spectral estimation": [[7, "spectral-estimation"]], "Filter analysis": [[7, "filter-analysis"]], "Probability": [[8, "probability"]], "Constructors": [[9, "constructors"], [18, "constructors"], [26, "constructors"], [34, "constructors"], [48, "constructors"], [54, "constructors"], [59, "constructors"], [76, "constructors"], [80, "constructors"], [82, "constructors"], [93, "constructors"], [100, "constructors"], [116, "constructors"], [129, "constructors"], [139, "constructors"], [141, "constructors"], [154, "constructors"], [170, "constructors"], [172, "constructors"], [175, "constructors"], [177, "constructors"], [193, "constructors"], [202, "constructors"], [210, "constructors"], [212, "constructors"], [214, "constructors"], [222, "constructors"], [224, "constructors"], [230, "constructors"], [236, "constructors"], [238, "constructors"], [260, "constructors"]], "Special methods": [[9, "special-methods"], [18, "special-methods"], [26, "special-methods"], [48, "special-methods"], [54, "special-methods"], [76, "special-methods"], [80, "special-methods"], [82, "special-methods"], [100, "special-methods"], [129, "special-methods"], [139, "special-methods"], [154, "special-methods"], [170, "special-methods"], [172, "special-methods"], [175, "special-methods"], [193, "special-methods"], [202, "special-methods"], [212, "special-methods"], [214, "special-methods"], [224, "special-methods"], [238, "special-methods"], [260, "special-methods"]], "Streaming mode only": [[9, "streaming-mode-only"], [54, "streaming-mode-only"], [76, "streaming-mode-only"], [80, "streaming-mode-only"], [100, "streaming-mode-only"], [129, "streaming-mode-only"], [139, "streaming-mode-only"], [154, "streaming-mode-only"], [170, "streaming-mode-only"], [172, "streaming-mode-only"], [175, "streaming-mode-only"], [212, "streaming-mode-only"], [238, "streaming-mode-only"], [260, "streaming-mode-only"]], "Properties": [[9, "properties"], [18, "properties"], [26, "properties"], [34, "properties"], [48, "properties"], [54, "properties"], [59, "properties"], [76, "properties"], [80, "properties"], [82, "properties"], [100, "properties"], [116, "properties"], [129, "properties"], [139, "properties"], [141, "properties"], [154, "properties"], [170, "properties"], [172, "properties"], [175, "properties"], [177, "properties"], [193, "properties"], [202, "properties"], [210, "properties"], [212, "properties"], [214, "properties"], [222, "properties"], [224, "properties"], [230, "properties"], [236, "properties"], [238, "properties"], [260, "properties"]], "Methods": [[18, "methods"], [26, "methods"], [34, "methods"], [48, "methods"], [54, "methods"], [59, "methods"], [76, "methods"], [80, "methods"], [82, "methods"], [88, "methods"], [93, "methods"], [100, "methods"], [116, "methods"], [139, "methods"], [141, "methods"], [154, "methods"], [170, "methods"], [172, "methods"], [175, "methods"], [177, "methods"], [193, "methods"], [202, "methods"], [210, "methods"], [212, "methods"], [214, "methods"], [222, "methods"], [224, "methods"], [230, "methods"], [236, "methods"], [238, "methods"], [255, "methods"], [260, "methods"]], "Note": [[34, null], [59, null], [177, null], [210, null], [222, null], [230, null], [236, null], [295, null], [320, null], [327, null]], "See also": [[35, null], [36, null], [45, null], [93, null], [95, null], [106, null], [107, null], [108, null], [110, null], [113, null], [116, null], [118, null], [141, null], [143, null], [160, null], [162, null], [167, null], [178, null], [179, null], [189, null], [211, null], [223, null], [231, null], [232, null], [234, null], [237, null], [253, null], [254, null], [275, null], [307, null], [346, null]], "Polynomials": [[116, "polynomials"], [141, "polynomials"]], "State": [[116, "state"], [141, "state"]], "Warning": [[286, null], [346, null]], "Sequences": [[350, "sequences"]], "Symbol-mapping sequences": [[350, "symbol-mapping-sequences"]], "Correlation sequences": [[350, "correlation-sequences"]], "Linear recurrent sequences": [[350, "linear-recurrent-sequences"]], "Maximal-length sequences": [[350, "maximal-length-sequences"]], "Simulation": [[351, "simulation"]], "Channel models": [[351, "channel-models"]], "Signal impairments": [[351, "signal-impairments"]], "Synchronization": [[352, "synchronization"]], "Phase-locked loops": [[352, "phase-locked-loops"], [361, "phase-locked-loops"]], "Phase error detectors": [[352, "phase-error-detectors"]], "Amplitude control loops": [[352, "amplitude-control-loops"]], "Documentation": [[353, "documentation"]], "Install": [[353, "install"], [354, "install"], [356, "install"]], "Build the docs": [[353, "build-the-docs"]], "Serve the docs": [[353, "serve-the-docs"]], "Formatting": [[354, "formatting"]], "Run the linter": [[354, "run-the-linter"]], "Run the formatter": [[354, "run-the-formatter"]], "Pre-commit": [[354, "pre-commit"]], "Run from VS Code": [[354, "run-from-vs-code"], [356, "run-from-vs-code"]], "Installation": [[355, "installation"], [364, "installation"]], "Install from PyPI": [[355, "install-from-pypi"]], "Install from GitHub": [[355, "install-from-github"]], "Editable install from local folder": [[355, "editable-install-from-local-folder"]], "Install the dev dependencies": [[355, "install-the-dev-dependencies"]], "Unit Tests": [[356, "unit-tests"]], "Run from the command line": [[356, "run-from-the-command-line"]], "Farrow arbitrary resampler": [[357, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[357, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[357, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[357, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[357, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[357, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[357, "downsample-by-an-irrational-rate"]], "FIR filters": [[358, "fir-filters"]], "Create an FIR filter": [[358, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[358, "examine-the-impulse-response-h-n"], [359, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[358, "examine-the-step-response-s-n"], [359, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[358, "examine-the-frequency-response-h-omega"], [359, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[358, "examine-the-group-delay-tau-g-omega"], [359, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[358, "fully-analyze-a-fir-filter"]], "IIR filters": [[359, "iir-filters"]], "Create an IIR filter": [[359, "create-an-iir-filter"]], "Examine the zeros and poles": [[359, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[359, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[359, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[360, "peak-to-average-power"]], "QPSK signal with various pulse shapes": [[360, "qpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[360, "examine-time-domain"]], "Examine frequency domain": [[360, "examine-frequency-domain"]], "Plot across excess bandwidth": [[360, "plot-across-excess-bandwidth"]], "Design a proportional-plus-integrator (PPI) loop filter": [[361, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[361, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[361, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[361, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[361, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[361, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[361, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[362, "phase-shift-keying"]], "Constellations": [[362, "constellations"]], "BPSK": [[362, "bpsk"]], "QPSK": [[362, "qpsk"]], "8-PSK": [[362, "id1"]], "16-PSK": [[362, "id2"]], "Error rate curves": [[362, "error-rate-curves"]], "Bit error rate curves": [[362, "bit-error-rate-curves"]], "Symbol error rate curves": [[362, "symbol-error-rate-curves"]], "Symbol mapping": [[362, "symbol-mapping"]], "Pulse shapes": [[363, "pulse-shapes"]], "Raised cosine": [[363, "raised-cosine"]], "Square-root raised cosine": [[363, "square-root-raised-cosine"]], "Gaussian": [[363, "gaussian"]], "sdr": [[364, "sdr"]], "Features": [[364, "features"]], "v0.0": [[365, "v0-0"]], "v0.0.12": [[365, "v0-0-12"]], "Changes": [[365, "changes"], [365, "id1"], [365, "id3"], [365, "id5"], [365, "id7"], [365, "id9"], [365, "id11"], [365, "id13"], [365, "id15"], [365, "id17"], [365, "id19"], [365, "id21"]], "Contributors": [[365, "contributors"], [365, "id2"], [365, "id4"], [365, "id6"], [365, "id8"], [365, "id10"], [365, "id12"], [365, "id14"], [365, "id16"], [365, "id18"], [365, "id20"], [365, "id22"]], "v0.0.11": [[365, "v0-0-11"]], "v0.0.10": [[365, "v0-0-10"]], "v0.0.9": [[365, "v0-0-9"]], "v0.0.8": [[365, "v0-0-8"]], "v0.0.7": [[365, "v0-0-7"]], "v0.0.6": [[365, "v0-0-6"]], "v0.0.5": [[365, "v0-0-5"]], "v0.0.4": [[365, "v0-0-4"]], "v0.0.3": [[365, "v0-0-3"]], "v0.0.2": [[365, "v0-0-2"]], "v0.0.1": [[365, "v0-0-1"]], "Versioning": [[366, "versioning"]], "Alpha releases": [[366, "alpha-releases"]], "Beta releases": [[366, "beta-releases"]]}, "indexentries": {"module": [[3, "module-sdr"]], "sdr": [[3, "module-sdr"]]}, "docurls": ["api/conversions/", "api/data-manipulation/", "api/detection/", "api/dsp/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/sdr.AGC/", "api/sdr.AGC.__call__/", "api/sdr.AGC.__init__/", "api/sdr.AGC.attack/", "api/sdr.AGC.decay/", "api/sdr.AGC.gain/", "api/sdr.AGC.reference/", "api/sdr.AGC.reset/", "api/sdr.AGC.streaming/", "api/sdr.BinaryErasureChannel/", "api/sdr.BinaryErasureChannel.X/", "api/sdr.BinaryErasureChannel.Y/", "api/sdr.BinaryErasureChannel.__call__/", "api/sdr.BinaryErasureChannel.__init__/", "api/sdr.BinaryErasureChannel.capacities/", "api/sdr.BinaryErasureChannel.capacity/", "api/sdr.BinaryErasureChannel.p/", "api/sdr.BinarySymmetricChannel/", "api/sdr.BinarySymmetricChannel.X/", "api/sdr.BinarySymmetricChannel.Y/", "api/sdr.BinarySymmetricChannel.__call__/", "api/sdr.BinarySymmetricChannel.__init__/", "api/sdr.BinarySymmetricChannel.capacities/", "api/sdr.BinarySymmetricChannel.capacity/", "api/sdr.BinarySymmetricChannel.p/", "api/sdr.CPM/", "api/sdr.CPM.__init__/", "api/sdr.CPM.ber/", "api/sdr.CPM.bps/", "api/sdr.CPM.demodulate/", "api/sdr.CPM.index/", "api/sdr.CPM.modulate/", "api/sdr.CPM.order/", "api/sdr.CPM.phase_offset/", "api/sdr.CPM.pulse_shape/", "api/sdr.CPM.rx_filter/", "api/sdr.CPM.ser/", "api/sdr.CPM.sps/", "api/sdr.CPM.tx_filter/", "api/sdr.Channel/", "api/sdr.Channel.__call__/", "api/sdr.Channel.__init__/", "api/sdr.Channel.capacities/", "api/sdr.Channel.capacity/", "api/sdr.Channel.reset/", "api/sdr.Channelizer/", "api/sdr.Channelizer.__call__/", "api/sdr.Channelizer.__init__/", "api/sdr.Channelizer.channels/", "api/sdr.Channelizer.method/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.Decimator/", "api/sdr.Decimator.__init__/", "api/sdr.Decimator.method/", "api/sdr.Decimator.reset/", "api/sdr.Differentiator/", "api/sdr.Differentiator.__init__/", "api/sdr.DiscreteMemorylessChannel/", "api/sdr.DiscreteMemorylessChannel.P/", "api/sdr.DiscreteMemorylessChannel.X/", "api/sdr.DiscreteMemorylessChannel.Y/", "api/sdr.DiscreteMemorylessChannel.__call__/", "api/sdr.DiscreteMemorylessChannel.__init__/", "api/sdr.EnergyDetector/", "api/sdr.EnergyDetector.p_d/", "api/sdr.EnergyDetector.p_fa/", "api/sdr.EnergyDetector.roc/", "api/sdr.EnergyDetector.threshold/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__call__/", "api/sdr.FIR.__init__/", "api/sdr.FIR.__len__/", "api/sdr.FIR.delay/", "api/sdr.FIR.flush/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.group_delay/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.phase_delay/", "api/sdr.FIR.reset/", "api/sdr.FIR.state/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FLFSR/", "api/sdr.FLFSR.Taps/", "api/sdr.FLFSR.__init__/", "api/sdr.FLFSR.characteristic_poly/", "api/sdr.FLFSR.feedback_poly/", "api/sdr.FLFSR.field/", "api/sdr.FLFSR.initial_state/", "api/sdr.FLFSR.order/", "api/sdr.FLFSR.reset/", "api/sdr.FLFSR.state/", "api/sdr.FLFSR.step/", "api/sdr.FLFSR.taps/", "api/sdr.FLFSR.to_galois_lfsr/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__call__/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.delay/", "api/sdr.FarrowResampler.flush/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.state/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.FractionalDelay/", "api/sdr.FractionalDelay.__init__/", "api/sdr.GLFSR/", "api/sdr.GLFSR.Taps/", "api/sdr.GLFSR.__init__/", "api/sdr.GLFSR.characteristic_poly/", "api/sdr.GLFSR.feedback_poly/", "api/sdr.GLFSR.field/", "api/sdr.GLFSR.initial_state/", "api/sdr.GLFSR.order/", "api/sdr.GLFSR.reset/", "api/sdr.GLFSR.state/", "api/sdr.GLFSR.step/", "api/sdr.GLFSR.taps/", "api/sdr.GLFSR.to_fibonacci_lfsr/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__call__/", "api/sdr.IIR.__init__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.state/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.Integrator/", "api/sdr.Integrator.__init__/", "api/sdr.Interpolator/", "api/sdr.Interpolator.__init__/", "api/sdr.Interpolator.method/", "api/sdr.LeakyIntegrator/", "api/sdr.LeakyIntegrator.__init__/", "api/sdr.LinearModulation/", "api/sdr.LinearModulation.__init__/", "api/sdr.LinearModulation.ber/", "api/sdr.LinearModulation.bps/", "api/sdr.LinearModulation.decide_symbols/", "api/sdr.LinearModulation.demodulate/", "api/sdr.LinearModulation.map_symbols/", "api/sdr.LinearModulation.modulate/", "api/sdr.LinearModulation.order/", "api/sdr.LinearModulation.phase_offset/", "api/sdr.LinearModulation.pulse_shape/", "api/sdr.LinearModulation.rx_filter/", "api/sdr.LinearModulation.ser/", "api/sdr.LinearModulation.sps/", "api/sdr.LinearModulation.symbol_map/", "api/sdr.LinearModulation.tx_filter/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.__call__/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.integral_gain/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.proportional_gain/", "api/sdr.LoopFilter.reset/", "api/sdr.MLPED/", "api/sdr.MLPED.A_received/", "api/sdr.MLPED.A_reference/", "api/sdr.MLPED.__call__/", "api/sdr.MLPED.__init__/", "api/sdr.MLPED.data_aided_error/", "api/sdr.MLPED.decision_directed_error/", "api/sdr.MLPED.gain/", "api/sdr.MSK/", "api/sdr.MSK.__init__/", "api/sdr.MovingAverager/", "api/sdr.MovingAverager.__init__/", "api/sdr.NCO/", "api/sdr.NCO.__call__/", "api/sdr.NCO.__init__/", "api/sdr.NCO.gain/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.OQPSK/", "api/sdr.OQPSK.__init__/", "api/sdr.PED/", "api/sdr.PED.__call__/", "api/sdr.PED.__init__/", "api/sdr.PED.data_aided_error/", "api/sdr.PED.decision_directed_error/", "api/sdr.PED.gain/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.ber/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.PiMPSK/", "api/sdr.PiMPSK.__init__/", "api/sdr.PolyphaseFIR/", "api/sdr.PolyphaseFIR.__call__/", "api/sdr.PolyphaseFIR.__init__/", "api/sdr.PolyphaseFIR.branches/", "api/sdr.PolyphaseFIR.decimation/", "api/sdr.PolyphaseFIR.delay/", "api/sdr.PolyphaseFIR.input/", "api/sdr.PolyphaseFIR.interpolation/", "api/sdr.PolyphaseFIR.order/", "api/sdr.PolyphaseFIR.output/", "api/sdr.PolyphaseFIR.polyphase_order/", "api/sdr.PolyphaseFIR.polyphase_taps/", "api/sdr.PolyphaseFIR.rate/", "api/sdr.PolyphaseFIR.reset/", "api/sdr.PolyphaseFIR.taps/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.ReplicaCorrelator/", "api/sdr.ReplicaCorrelator.p_d/", "api/sdr.ReplicaCorrelator.p_fa/", "api/sdr.ReplicaCorrelator.roc/", "api/sdr.ReplicaCorrelator.threshold/", "api/sdr.Resampler/", "api/sdr.Resampler.__call__/", "api/sdr.Resampler.__init__/", "api/sdr.Resampler.method/", "api/sdr.albersheim/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.barker_code/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.berlekamp_massey/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.db/", "api/sdr.design_bandpass_fir/", "api/sdr.design_bandstop_fir/", "api/sdr.design_frac_delay_fir/", "api/sdr.design_highpass_fir/", "api/sdr.design_lowpass_fir/", "api/sdr.design_multirate_fir/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.downsample/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.euclidean/", "api/sdr.evm/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.hadamard_code/", "api/sdr.half_sine/", "api/sdr.hamming/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.linear/", "api/sdr.m_sequence/", "api/sdr.mix/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.percent/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.eye/", "api/sdr.plot.filter/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.magnitude_response/", "api/sdr.plot.p_d/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.phase_tree/", "api/sdr.plot.raster/", "api/sdr.plot.roc/", "api/sdr.plot.ser/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.polyphase_decompose/", "api/sdr.ppb/", "api/sdr.ppm/", "api/sdr.raised_cosine/", "api/sdr.rectangular/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.to_complex_bb/", "api/sdr.to_real_pb/", "api/sdr.unpack/", "api/sdr.upsample/", "api/sdr.walsh_code/", "api/sdr.wavelength/", "api/sdr.zadoff_chu_sequence/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/formatting/", "development/installation/", "development/unit-tests/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})