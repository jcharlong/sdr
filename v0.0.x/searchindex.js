Search.setIndex({"titles": ["Conversions", "Data manipulation", "Detection", "Digital signal processing", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.DDS", "sdr.DDS.__call__", "sdr.DDS.__init__", "sdr.DDS.nco", "sdr.DDS.reset", "sdr.DDS.step", "sdr.Decimator", "sdr.Decimator.__call__", "sdr.Decimator.__init__", "sdr.Decimator.__repr__", "sdr.Decimator.__str__", "sdr.Decimator.method", "sdr.Decimator.polyphase_taps", "sdr.Decimator.rate", "sdr.Decimator.reset", "sdr.Decimator.taps", "sdr.EnergyDetector", "sdr.EnergyDetector.p_d", "sdr.EnergyDetector.p_fa", "sdr.EnergyDetector.roc", "sdr.EnergyDetector.threshold", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__call__", "sdr.FIR.__init__", "sdr.FIR.__len__", "sdr.FIR.__repr__", "sdr.FIR.__str__", "sdr.FIR.delay", "sdr.FIR.flush", "sdr.FIR.frequency_response", "sdr.FIR.frequency_response_log", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.reset", "sdr.FIR.state", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__call__", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__call__", "sdr.IIR.__init__", "sdr.IIR.__repr__", "sdr.IIR.__str__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.state", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.Interpolator", "sdr.Interpolator.__call__", "sdr.Interpolator.__init__", "sdr.Interpolator.__repr__", "sdr.Interpolator.__str__", "sdr.Interpolator.method", "sdr.Interpolator.polyphase_taps", "sdr.Interpolator.rate", "sdr.Interpolator.reset", "sdr.Interpolator.taps", "sdr.LinearModulation", "sdr.LinearModulation.__init__", "sdr.LinearModulation.__repr__", "sdr.LinearModulation.__str__", "sdr.LinearModulation.ber", "sdr.LinearModulation.bps", "sdr.LinearModulation.decide_symbols", "sdr.LinearModulation.demodulate", "sdr.LinearModulation.map_symbols", "sdr.LinearModulation.modulate", "sdr.LinearModulation.order", "sdr.LinearModulation.phase_offset", "sdr.LinearModulation.pulse_shape", "sdr.LinearModulation.rx_filter", "sdr.LinearModulation.ser", "sdr.LinearModulation.sps", "sdr.LinearModulation.symbol_map", "sdr.LinearModulation.tx_filter", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__call__", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.MSK", "sdr.MSK.__init__", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__call__", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.reset", "sdr.NCO.step", "sdr.OQPSK", "sdr.OQPSK.__init__", "sdr.OQPSK.__repr__", "sdr.OQPSK.__str__", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.__repr__", "sdr.PSK.__str__", "sdr.PSK.ber", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.PiMPSK", "sdr.PiMPSK.__init__", "sdr.Q", "sdr.Qinv", "sdr.ReplicaCorrelator", "sdr.ReplicaCorrelator.p_d", "sdr.ReplicaCorrelator.p_fa", "sdr.ReplicaCorrelator.roc", "sdr.ReplicaCorrelator.threshold", "sdr.albersheim", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.barker", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.db", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.downsample", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.evm", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.half_sine", "sdr.hexdump", "sdr.iq_imbalance", "sdr.linear", "sdr.mix", "sdr.multirate_taps", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.percent", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.eye", "sdr.plot.filter", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.magnitude_response", "sdr.plot.p_d", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.phase_tree", "sdr.plot.raster", "sdr.plot.roc", "sdr.plot.ser", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.polyphase_matrix", "sdr.ppb", "sdr.ppm", "sdr.raised_cosine", "sdr.rectangular", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.to_complex_bb", "sdr.to_real_pb", "sdr.unpack", "sdr.upsample", "sdr.wavelength", "sdr.zadoff_chu", "Sequences", "Simulation", "Synchronization", "Documentation", "Formatting", "Installation", "Unit Tests", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256], "db": [0, 4, 5, 9, 20, 22, 43, 45, 47, 49, 50, 51, 53, 111, 121, 134, 144, 148, 152, 154, 156, 161, 163, 165, 166, 167, 168, 176, 181, 182, 183, 184, 185, 186, 188, 189, 193, 194, 196, 198, 199, 200, 201, 203, 204, 210, 217, 229, 232, 233, 250, 252, 253, 255], "x": [0, 1, 3, 5, 6, 7, 8, 9, 26, 27, 32, 33, 42, 47, 49, 54, 55, 71, 72, 78, 80, 97, 98, 107, 114, 116, 125, 128, 134, 136, 138, 144, 148, 156, 158, 159, 160, 166, 167, 170, 173, 175, 176, 177, 178, 179, 180, 183, 186, 187, 193, 194, 195, 197, 198, 200, 201, 202, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 218, 220, 221, 225, 226, 229, 231, 236, 237, 241, 245, 250, 251, 252, 256], "arraylik": [0, 1, 2, 3, 4, 5, 6, 7, 8, 26, 27, 32, 33, 34, 42, 43, 44, 45, 46, 47, 49, 54, 55, 56, 71, 72, 75, 78, 79, 80, 81, 97, 98, 99, 107, 108, 111, 113, 114, 115, 116, 121, 125, 128, 134, 135, 136, 138, 144, 145, 148, 149, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 229, 231, 232, 233, 234, 235, 236, 237, 241], "ndarrai": [0, 1, 2, 3, 4, 6, 8, 26, 27, 31, 32, 33, 38, 41, 42, 43, 44, 45, 46, 47, 52, 54, 55, 61, 62, 63, 64, 67, 68, 70, 71, 72, 77, 78, 80, 84, 85, 86, 87, 89, 91, 93, 94, 96, 97, 98, 103, 106, 107, 111, 113, 114, 115, 116, 119, 121, 123, 125, 128, 134, 136, 138, 143, 144, 148, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 202, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241], "convert": [0, 3, 107, 113, 115, 134, 144, 148, 156, 176, 181, 182, 184, 185, 192, 194, 202, 224, 225, 226, 232, 233, 234, 235], "linear": [0, 97, 99, 102, 107, 108, 134, 144, 148, 156, 167, 176, 194, 211, 216, 218, 220, 254, 255], "unit": [0, 26, 32, 54, 68, 78, 94, 97, 125, 135, 136, 139, 140, 141, 145, 149, 157, 167, 168, 176, 177, 178, 194, 219, 221, 245, 248, 249, 251, 254, 255], "percent": [0, 202], "percentag": [0, 202], "ppm": [0, 226, 231, 241], "part": [0, 221, 225, 226, 231, 251], "per": [0, 1, 27, 33, 55, 98, 107, 108, 112, 114, 116, 122, 134, 135, 138, 144, 145, 148, 149, 156, 157, 167, 168, 181, 182, 184, 185, 187, 189, 191, 192, 197, 204, 205, 214, 225, 226, 227, 228, 230, 231, 232, 233, 236, 244, 250, 253, 255], "million": [0, 226, 231], "ppb": [0, 225], "billion": [0, 225], "ebn0_to_esn0": [0, 121, 154, 181, 252, 255], "ebn0": [0, 7, 107, 111, 134, 144, 148, 152, 156, 168, 181, 182, 203, 252], "bp": [0, 107, 112, 134, 144, 148, 156, 181, 182, 184, 232, 252], "int": [0, 1, 3, 6, 7, 26, 31, 32, 34, 39, 47, 49, 50, 53, 54, 57, 60, 62, 63, 64, 65, 68, 71, 74, 78, 86, 87, 89, 90, 94, 97, 99, 104, 107, 108, 112, 117, 122, 134, 135, 136, 143, 144, 145, 148, 149, 156, 157, 166, 167, 169, 170, 172, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 189, 190, 191, 192, 196, 197, 198, 200, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 218, 219, 224, 227, 228, 230, 232, 233, 236, 237, 239, 240, 241, 252], "ebn0_to_snr": [0, 134, 144, 148, 156, 182, 255], "esn0_to_ebn0": [0, 111, 152, 184, 255], "esn0": [0, 7, 107, 121, 134, 144, 148, 154, 156, 184, 185, 217, 252], "esn0_to_snr": [0, 185, 252, 255], "sp": [0, 6, 7, 107, 108, 114, 116, 122, 134, 135, 144, 145, 148, 149, 156, 157, 182, 185, 189, 191, 205, 214, 227, 228, 230, 232, 233, 234, 235, 250, 252, 253], "1": [0, 3, 6, 8, 9, 16, 19, 23, 25, 26, 28, 32, 34, 35, 36, 38, 41, 42, 43, 45, 46, 47, 54, 57, 58, 59, 60, 62, 63, 78, 79, 82, 83, 86, 87, 97, 98, 99, 100, 101, 103, 106, 107, 108, 113, 114, 115, 116, 123, 125, 129, 130, 134, 135, 136, 139, 144, 145, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 256], "snr_to_ebn0": [0, 111, 152, 168, 232, 255], "snr": [0, 2, 4, 7, 42, 43, 45, 47, 49, 50, 51, 52, 53, 134, 144, 148, 156, 165, 167, 168, 210, 232, 233, 234, 235, 241, 252, 255], "snr_to_esn0": [0, 121, 154, 233, 255], "pack": [1, 47, 49, 134, 144, 148, 156, 192, 197, 254, 255], "bpe": [1, 197, 236], "binari": [1, 4, 6, 135, 145, 149, 155, 157, 169, 170, 171, 172, 173, 174, 179, 197, 220, 236, 241, 252, 254, 255], "arrai": [1, 38, 41, 47, 99, 103, 106, 108, 134, 135, 144, 145, 148, 149, 155, 156, 157, 166, 169, 170, 172, 173, 177, 178, 179, 183, 190, 197, 198, 200, 221, 224, 236, 249], "an": [1, 2, 3, 4, 32, 42, 54, 64, 78, 79, 81, 89, 97, 98, 108, 135, 145, 149, 152, 154, 157, 160, 168, 197, 203, 208, 217, 236, 238, 245, 254, 255], "multipl": [1, 197, 236, 252, 255], "bit": [1, 5, 7, 47, 49, 52, 107, 111, 112, 134, 135, 144, 145, 148, 149, 152, 155, 156, 157, 168, 170, 171, 173, 174, 181, 182, 184, 192, 197, 203, 232, 236, 254, 255], "element": [1, 192, 197, 236], "unpack": [1, 47, 49, 192, 236, 252, 254, 255], "hexdump": [1, 47, 192, 254, 255], "byte": [1, 192], "width": [1, 192], "16": [1, 152, 154, 155, 181, 182, 184, 192, 203, 217, 224, 227, 230, 232, 233, 250, 255], "str": [1, 32, 35, 36, 54, 58, 59, 78, 82, 83, 97, 100, 101, 107, 109, 110, 134, 144, 146, 147, 148, 150, 151, 156, 192, 205, 211, 214, 215, 218], "return": [1, 6, 9, 17, 19, 22, 23, 27, 31, 32, 33, 35, 36, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 68, 72, 78, 80, 82, 83, 86, 87, 89, 94, 97, 98, 100, 101, 107, 109, 110, 111, 113, 114, 115, 116, 121, 128, 134, 138, 143, 144, 146, 147, 148, 150, 151, 152, 154, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 248, 249, 250, 252, 255], "specifi": [1, 47, 50, 51, 53, 167, 168, 179, 192, 243, 248, 249], "class": [2, 3, 5, 6, 9, 26, 32, 42, 47, 49, 50, 51, 52, 53, 54, 71, 78, 97, 107, 125, 134, 136, 144, 148, 156, 160, 242, 248, 249, 252, 254, 255], "replicacorrel": [2, 160, 161, 162, 163, 164, 255], "implement": [2, 3, 6, 26, 32, 42, 54, 71, 78, 97, 107, 125, 131, 134, 136, 144, 148, 156, 160, 165, 242, 247], "clairvoy": [2, 160], "replica": [2, 160], "correl": [2, 160, 169, 239], "energydetector": [2, 42, 43, 44, 45, 46, 255], "energi": [2, 42, 111, 121, 152, 154, 160, 161, 162, 163, 164, 168, 181, 182, 183, 184, 185, 189, 191, 203, 217, 227, 228, 230, 232, 233, 254, 255], "albersheim": [2, 165, 255], "p_d": [2, 7, 42, 43, 45, 160, 161, 163, 165, 210, 216, 255], "p_fa": [2, 7, 42, 43, 44, 45, 46, 160, 161, 162, 163, 164, 165, 216], "estim": [2, 107, 113, 114, 134, 144, 148, 156, 165, 211, 218, 251], "minimum": [2, 6, 134, 165, 255], "requir": [2, 33, 55, 98, 165, 243, 244, 245, 246, 255], "singl": [2, 45, 152, 154, 165], "sampl": [2, 3, 9, 16, 24, 26, 27, 28, 31, 32, 33, 43, 44, 45, 46, 54, 55, 60, 62, 63, 64, 68, 71, 75, 86, 87, 89, 94, 97, 98, 99, 107, 108, 114, 116, 122, 125, 129, 132, 134, 135, 136, 138, 139, 140, 143, 144, 145, 148, 149, 156, 157, 165, 167, 180, 182, 185, 187, 189, 191, 195, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 218, 219, 221, 227, 228, 230, 231, 232, 233, 234, 235, 237, 241, 247, 250, 251, 253, 254, 255], "given": [2, 42, 47, 49, 50, 51, 53, 71, 72, 160, 165, 186, 248, 249], "n_": [2, 43, 44, 45, 46, 165], "nc": [2, 43, 44, 45, 46, 165], "non": [2, 33, 43, 44, 45, 46, 55, 98, 165, 191, 228], "coher": [2, 43, 44, 45, 46, 165], "combin": [2, 165], "achiev": [2, 3, 165, 196, 224, 252, 253], "probabl": [2, 7, 42, 43, 44, 45, 46, 158, 159, 160, 161, 162, 163, 164, 165, 170, 171, 173, 174, 179, 210, 216, 241, 255], "fals": [2, 5, 7, 32, 34, 35, 36, 42, 43, 44, 45, 46, 54, 56, 58, 59, 71, 73, 78, 79, 81, 82, 83, 97, 98, 99, 100, 101, 152, 154, 160, 161, 162, 163, 164, 165, 166, 170, 173, 179, 183, 195, 200, 201, 204, 211, 216, 218, 221, 229, 249, 253], "alarm": [2, 42, 43, 44, 45, 46, 160, 161, 162, 163, 164, 165, 216], "p_": [2, 7, 42, 43, 44, 45, 46, 152, 154, 160, 161, 162, 163, 164, 165, 166, 167, 176, 179, 186, 194, 198, 200, 203, 211, 216, 217], "fa": [2, 7, 42, 43, 44, 45, 46, 160, 161, 162, 163, 164, 165, 216], "thi": [2, 9, 27, 32, 49, 50, 51, 53, 54, 78, 97, 107, 108, 123, 134, 138, 144, 145, 148, 149, 155, 156, 157, 165, 167, 168, 170, 173, 179, 180, 186, 188, 196, 205, 209, 211, 215, 218, 221, 237, 243, 245, 246, 247, 249, 251, 252, 253], "function": [2, 7, 8, 9, 18, 54, 78, 79, 125, 158, 159, 165, 168, 180, 189, 203, 210, 211, 216, 217, 218, 237, 248, 249, 251, 253, 254, 255], "": [2, 3, 7, 9, 17, 19, 20, 21, 23, 24, 32, 42, 49, 50, 51, 52, 53, 54, 62, 63, 68, 78, 86, 87, 94, 97, 107, 108, 113, 114, 115, 116, 134, 144, 148, 156, 160, 162, 164, 165, 167, 168, 182, 185, 186, 187, 193, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 218, 219, 221, 222, 231, 232, 233, 234, 235, 246, 247, 250, 252, 254, 255], "equat": [2, 17, 19, 20, 21, 22, 23, 43, 44, 46, 78, 144, 148, 156, 161, 162, 164, 165, 188], "fir": [3, 32, 33, 34, 35, 36, 38, 40, 41, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 103, 105, 106, 196, 205, 206, 207, 208, 209, 212, 213, 219, 223, 224, 250, 254, 255], "finit": [3, 32, 54, 97, 254, 255], "impuls": [3, 7, 32, 54, 64, 78, 89, 97, 189, 206, 208, 221, 253, 254, 255], "respons": [3, 7, 32, 54, 62, 63, 64, 68, 78, 86, 87, 89, 94, 97, 189, 206, 207, 208, 209, 213, 219, 253, 254, 255], "iir": [3, 7, 9, 18, 63, 64, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 125, 131, 206, 207, 208, 209, 212, 213, 219, 223, 248, 251, 254, 255], "infinit": [3, 78, 254, 255], "interpol": [3, 32, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 124, 134, 144, 148, 156, 196, 205, 224, 237, 250, 252, 254, 255], "polyphas": [3, 32, 33, 34, 38, 41, 97, 98, 99, 103, 106, 180, 196, 224, 237, 254, 255], "decim": [3, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 107, 108, 113, 114, 115, 116, 120, 123, 134, 135, 144, 145, 148, 149, 155, 156, 157, 180, 196, 224, 252, 254, 255], "multirate_tap": [3, 34, 99, 196, 255], "p": [3, 4, 8, 158, 159, 170, 171, 173, 174, 179, 196, 224, 241], "q": [3, 8, 134, 144, 158, 159, 160, 161, 162, 164, 196, 224, 239, 255], "comput": [3, 8, 32, 42, 43, 44, 45, 46, 107, 111, 121, 134, 144, 148, 152, 154, 156, 158, 159, 160, 161, 162, 163, 164, 166, 167, 183, 188, 196, 198, 200, 248, 249, 251, 253], "ration": [3, 196, 224], "polyphase_matrix": [3, 224, 255], "tap": [3, 32, 34, 38, 41, 54, 59, 70, 71, 77, 78, 84, 85, 97, 99, 103, 106, 224, 248, 249], "h_i": [3, 32, 34, 38, 41, 54, 56, 70, 97, 99, 103, 106, 224, 248], "matrix": [3, 179, 224, 241], "h_": [3, 9, 32, 38, 41, 97, 103, 106, 224, 251], "i": [3, 9, 16, 25, 32, 33, 34, 38, 41, 42, 44, 45, 46, 47, 52, 54, 55, 56, 64, 68, 69, 70, 71, 76, 78, 81, 85, 89, 94, 95, 97, 98, 99, 103, 106, 108, 125, 129, 130, 132, 134, 144, 145, 148, 149, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 173, 174, 176, 179, 181, 182, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 197, 198, 199, 200, 201, 204, 205, 206, 208, 209, 211, 215, 218, 219, 221, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256], "j": [3, 9, 26, 32, 38, 41, 78, 81, 84, 97, 103, 106, 134, 144, 148, 156, 167, 179, 193, 195, 224, 239, 248, 249, 251], "farrowresampl": [3, 71, 72, 73, 74, 75, 76, 77, 247, 255], "cubic": [3, 71], "farrow": [3, 71, 72, 73, 74, 75, 76, 77, 254, 255], "arbitrari": [3, 6, 71, 72, 73, 74, 75, 76, 77, 107, 254, 255], "mix": [3, 195, 254, 255], "freq": [3, 4, 187, 195, 199, 238, 241, 247, 251], "float": [3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 42, 45, 47, 49, 50, 51, 53, 62, 63, 71, 72, 78, 79, 86, 87, 88, 107, 108, 118, 125, 126, 127, 129, 130, 132, 134, 135, 136, 137, 139, 140, 141, 144, 145, 148, 149, 153, 156, 157, 160, 163, 166, 167, 168, 170, 173, 175, 183, 186, 187, 189, 193, 195, 196, 198, 199, 200, 201, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 218, 220, 221, 227, 229, 230, 231, 238, 241], "0": [3, 6, 8, 16, 26, 28, 32, 33, 38, 41, 42, 45, 47, 54, 55, 56, 58, 59, 62, 63, 70, 78, 79, 81, 82, 83, 84, 85, 86, 87, 97, 98, 99, 103, 106, 107, 108, 113, 114, 115, 116, 123, 129, 134, 135, 136, 139, 144, 145, 148, 149, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190, 193, 194, 195, 197, 199, 202, 204, 205, 206, 207, 208, 209, 212, 213, 214, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 256], "time": [3, 5, 9, 16, 17, 19, 20, 21, 22, 23, 54, 78, 125, 129, 144, 148, 156, 166, 167, 175, 179, 180, 183, 185, 187, 189, 193, 195, 198, 200, 201, 205, 206, 211, 215, 218, 221, 227, 229, 230, 231, 233, 234, 235, 237, 241, 247, 248, 249, 253, 254, 255], "domain": [3, 5, 166, 167, 175, 180, 183, 187, 193, 195, 198, 200, 201, 206, 211, 215, 218, 221, 229, 231, 234, 235, 237, 241, 254, 255], "n": [3, 5, 6, 7, 8, 9, 26, 27, 31, 32, 33, 42, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 78, 80, 81, 84, 86, 87, 89, 90, 94, 97, 98, 107, 108, 114, 116, 119, 120, 124, 125, 128, 134, 136, 138, 143, 144, 145, 148, 149, 156, 157, 158, 159, 160, 162, 164, 166, 167, 168, 169, 172, 175, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 193, 195, 196, 198, 200, 201, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 218, 219, 221, 229, 231, 232, 233, 234, 235, 237, 239, 240, 241, 251, 253, 254], "complex": [3, 5, 7, 26, 27, 31, 42, 43, 44, 45, 46, 107, 108, 113, 114, 115, 116, 123, 134, 135, 144, 145, 148, 149, 155, 156, 157, 160, 161, 162, 163, 164, 167, 168, 180, 186, 193, 195, 204, 205, 215, 220, 221, 234, 235, 237, 241, 247, 248, 249, 251, 252, 254, 255], "exponenti": [3, 26, 27, 31, 180, 195, 234, 235, 237, 247, 248, 249], "real": [3, 43, 44, 46, 134, 144, 158, 159, 161, 162, 164, 167, 195, 205, 215, 221, 234, 235, 247, 248, 249, 251, 254, 255], "sinusoid": [3, 148, 167, 195, 234, 235, 249, 255], "to_complex_bb": [3, 234, 255], "x_r": [3, 234, 235], "passband": [3, 189, 191, 227, 228, 230, 234, 235, 250, 255], "center": [3, 191, 221, 228, 234, 235, 255], "f_": [3, 9, 16, 24, 33, 62, 63, 86, 87, 98, 107, 108, 122, 134, 135, 144, 145, 148, 149, 156, 157, 180, 182, 185, 187, 189, 195, 205, 206, 207, 209, 211, 212, 213, 214, 215, 218, 221, 231, 232, 233, 234, 235, 237, 247, 248, 249, 251, 253], "r": [3, 32, 33, 34, 38, 39, 41, 71, 72, 97, 98, 99, 103, 104, 106, 168, 180, 181, 182, 184, 186, 189, 195, 227, 230, 232, 234, 235, 237, 243, 244, 245, 246, 249, 250, 251, 253], "4": [3, 7, 17, 19, 32, 38, 41, 43, 45, 47, 63, 82, 83, 87, 97, 98, 103, 106, 134, 135, 144, 145, 148, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 167, 168, 169, 171, 172, 174, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 199, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 217, 219, 220, 221, 222, 223, 224, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 239, 244, 245, 247, 249, 250, 252], "rate": [3, 5, 7, 9, 16, 24, 32, 33, 34, 36, 39, 47, 48, 49, 51, 52, 62, 63, 71, 72, 86, 87, 97, 98, 99, 101, 104, 107, 111, 121, 134, 144, 148, 152, 154, 156, 180, 181, 182, 184, 187, 195, 196, 203, 205, 206, 207, 209, 211, 212, 213, 214, 215, 217, 218, 221, 224, 231, 232, 234, 235, 237, 241, 254, 255], "baseband": [3, 7, 9, 134, 144, 148, 156, 195, 205, 214, 234, 235, 250, 251, 255], "x_c": [3, 234, 235], "c": [3, 9, 17, 19, 20, 21, 22, 23, 49, 50, 51, 52, 53, 107, 108, 123, 125, 134, 144, 148, 155, 156, 168, 171, 174, 188, 199, 220, 234, 235, 238, 251], "2": [3, 6, 7, 9, 17, 19, 22, 32, 35, 36, 38, 41, 42, 43, 44, 45, 46, 47, 54, 58, 59, 60, 62, 63, 82, 83, 86, 87, 97, 98, 100, 101, 103, 106, 107, 108, 117, 134, 144, 145, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 243, 246, 247, 248, 249, 250, 251, 252, 253], "to_real_pb": [3, 235, 250, 255], "2f_": [3, 235], "upsampl": [3, 97, 237, 255], "factor": [3, 5, 9, 16, 25, 108, 125, 129, 130, 145, 149, 157, 175, 180, 237, 251], "downsampl": [3, 180, 255], "bsc_capac": [4, 174, 255], "calcul": [4, 5, 168, 171, 174, 186, 188, 199, 238, 255], "symmetr": [4, 173, 174, 179, 234, 235, 241, 254], "bsc": [4, 173, 174, 179, 241, 254, 255], "bec_capac": [4, 171, 255], "erasur": [4, 170, 171, 179, 241, 254], "bec": [4, 170, 171, 179, 241, 254, 255], "awgn_capac": [4, 168, 255], "addit": [4, 167, 168, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 237, 241, 254], "white": [4, 167, 168, 241, 254], "gaussian": [4, 6, 167, 168, 189, 241, 254, 255], "nois": [4, 9, 10, 11, 16, 22, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 111, 121, 125, 129, 132, 134, 144, 148, 152, 154, 156, 160, 161, 162, 163, 164, 167, 168, 181, 182, 184, 185, 203, 217, 232, 233, 241, 251, 254], "awgn": [4, 134, 144, 148, 152, 154, 156, 167, 168, 186, 203, 204, 217, 234, 235, 241, 252, 254, 255], "fspl": [4, 188], "d": [4, 32, 54, 60, 97, 188, 199, 243, 245, 254], "f": [4, 17, 19, 32, 45, 62, 63, 86, 87, 97, 165, 167, 187, 188, 189, 195, 199, 231, 238, 239, 244, 247, 248, 249, 250, 251, 252, 253], "free": [4, 134, 144, 148, 156, 188, 254], "space": [4, 63, 87, 188, 254], "wavelength": [4, 238, 255], "lambda": [4, 188, 238], "electromagnet": [4, 238], "wave": [4, 134, 238], "frequenc": [4, 9, 17, 19, 21, 32, 54, 62, 63, 78, 86, 87, 97, 125, 134, 180, 187, 188, 195, 199, 206, 207, 209, 211, 212, 213, 218, 234, 235, 237, 238, 241, 253, 254, 255], "parabolic_antenna": [4, 199, 255], "tupl": [4, 32, 42, 45, 47, 49, 52, 54, 62, 63, 78, 86, 87, 97, 107, 114, 134, 144, 148, 156, 160, 163, 166, 183, 198, 199, 200, 204, 206, 207, 208, 209, 212, 213, 219, 220, 223], "gain": [4, 9, 12, 13, 14, 15, 16, 26, 28, 78, 79, 88, 125, 126, 127, 129, 136, 137, 139, 165, 188, 189, 191, 199, 227, 228, 230, 251, 254], "g": [4, 52, 199, 245], "beamwidth": [4, 199], "theta": [4, 28, 136, 139, 141, 199], "parabol": [4, 199], "reflector": [4, 199], "signal": [5, 7, 9, 17, 19, 22, 23, 26, 27, 32, 33, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 61, 71, 72, 78, 80, 97, 98, 107, 108, 119, 125, 128, 134, 136, 138, 143, 144, 145, 148, 149, 156, 157, 160, 161, 162, 163, 164, 166, 167, 168, 175, 176, 180, 181, 182, 183, 184, 185, 187, 188, 189, 193, 194, 195, 196, 198, 199, 200, 201, 205, 206, 207, 209, 211, 212, 213, 214, 215, 218, 221, 224, 229, 231, 232, 233, 234, 235, 237, 238, 248, 249, 251, 253, 254, 255], "peak_pow": [5, 198, 200, 255], "peak": [5, 134, 144, 156, 175, 186, 198, 200, 201], "average_pow": [5, 166, 198, 255], "averag": [5, 47, 134, 144, 156, 166, 167, 168, 186, 198, 211], "papr": [5, 134, 144, 156, 198, 250, 255], "ratio": [5, 22, 43, 45, 47, 49, 50, 51, 52, 53, 111, 121, 134, 144, 152, 154, 156, 161, 163, 167, 168, 181, 182, 184, 185, 198, 202, 203, 217, 225, 226, 232, 233], "peak_voltag": [5, 175, 201, 255], "bool": [5, 7, 32, 34, 43, 44, 45, 46, 54, 56, 69, 71, 73, 76, 78, 79, 81, 95, 97, 99, 152, 154, 161, 162, 163, 164, 166, 183, 195, 200, 201, 204, 213, 215, 220, 221, 229], "rms_voltag": [5, 175, 229, 255], "root": [5, 6, 108, 145, 149, 157, 186, 205, 221, 229, 230, 239, 240, 248, 254], "mean": [5, 186, 211, 218, 229, 253], "squar": [5, 6, 108, 145, 149, 157, 186, 188, 199, 221, 229, 230, 248], "rm": [5, 175, 186, 229], "crest_factor": [5, 175, 198, 255], "crest": [5, 175], "errorr": [5, 47, 48, 49, 50, 51, 52, 53, 252, 255], "A": [5, 9, 17, 19, 20, 21, 22, 23, 25, 33, 47, 54, 55, 98, 108, 125, 145, 149, 157, 165, 172, 190, 192, 193, 199, 227, 230, 242, 244, 251], "error": [5, 7, 9, 15, 16, 22, 47, 48, 49, 51, 52, 53, 107, 111, 121, 125, 129, 134, 144, 148, 152, 154, 156, 165, 174, 186, 203, 217, 251, 254, 255], "ber": [5, 7, 47, 107, 111, 134, 144, 148, 152, 156, 203, 252, 254, 255], "symbol": [5, 7, 47, 49, 52, 97, 107, 108, 112, 113, 114, 115, 116, 121, 122, 123, 134, 135, 144, 145, 148, 149, 152, 154, 155, 156, 157, 167, 181, 182, 184, 185, 186, 187, 189, 191, 204, 205, 214, 217, 220, 227, 228, 230, 232, 233, 250, 253, 254, 255], "ser": [5, 7, 47, 107, 121, 134, 144, 148, 154, 156, 217, 252, 254, 255], "evm": [5, 186, 254, 255], "x_hat": [5, 7, 47, 49, 107, 114, 134, 144, 148, 156, 186, 204, 252], "ref": [5, 165, 186, 189, 196], "vector": [5, 47, 75, 186, 211, 218, 254, 255], "magnitud": [5, 7, 169, 186, 206, 209, 239, 254, 255], "hat": [5, 7, 49, 107, 113, 114, 134, 144, 148, 156, 186, 204, 220], "k": [5, 6, 7, 49, 107, 108, 112, 113, 114, 115, 116, 117, 134, 144, 148, 149, 156, 157, 177, 178, 181, 182, 184, 186, 204, 220, 232, 250, 253], "linearmodul": [6, 7, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 148, 220, 255], "amplitud": [6, 107, 108, 193, 241, 247, 251], "psk": [6, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 167, 186, 187, 193, 203, 204, 205, 217, 220, 231, 250, 254, 255], "shift": [6, 134, 144, 148, 152, 153, 154, 155, 156, 239, 240, 248, 249, 254, 255], "kei": [6, 134, 144, 148, 152, 153, 154, 155, 156, 254, 255], "demodul": [6, 107, 114, 134, 144, 148, 156, 252, 255], "pimpsk": [6, 156, 157, 255], "pi": [6, 32, 82, 83, 97, 98, 144, 148, 156, 157, 167, 180, 188, 189, 193, 195, 199, 206, 207, 208, 209, 212, 213, 219, 221, 223, 234, 235, 237, 239, 247, 248, 249, 251, 254, 255], "m": [6, 78, 81, 85, 107, 108, 112, 113, 114, 115, 116, 117, 123, 134, 144, 148, 149, 155, 156, 157, 179, 181, 182, 184, 188, 220, 232, 243, 244, 245, 246, 254, 255], "oqpsk": [6, 134, 144, 145, 146, 147, 255], "offset": [6, 17, 19, 26, 28, 32, 97, 98, 107, 108, 118, 134, 135, 136, 139, 141, 144, 145, 148, 149, 153, 156, 157, 187, 195, 221, 231, 241, 251, 254, 255], "quadratur": [6, 134, 144, 193], "msk": [6, 134, 135, 214, 255], "rectangular": [6, 108, 145, 149, 157, 228, 250, 253, 254, 255], "span": [6, 7, 108, 145, 149, 157, 189, 191, 205, 214, 227, 228, 230, 250, 253], "half_sin": [6, 135, 191, 255], "half": [6, 134, 144, 191, 196, 199, 254, 255], "sine": [6, 134, 191, 254, 255], "time_bandwidth": [6, 189], "raised_cosin": [6, 108, 145, 149, 157, 205, 227, 253, 255], "alpha": [6, 108, 145, 149, 157, 189, 222, 227, 230, 250, 253], "rais": [6, 108, 145, 149, 157, 205, 221, 227, 230, 248, 254], "cosin": [6, 108, 145, 149, 157, 205, 221, 227, 230, 248, 254], "rc": [6, 108, 145, 149, 157, 227], "root_raised_cosin": [6, 58, 59, 108, 145, 149, 157, 205, 206, 207, 208, 209, 212, 213, 219, 221, 223, 230, 248, 250, 252, 253, 255], "srrc": [6, 108, 144, 145, 148, 149, 156, 157, 205, 221, 230, 250], "binary_cod": [6, 172, 255], "gener": [6, 134, 144, 148, 156, 167, 170, 172, 173, 179, 190, 216, 243, 252, 255], "code": [6, 32, 35, 54, 58, 78, 82, 97, 100, 107, 109, 134, 135, 144, 145, 146, 148, 149, 150, 155, 156, 157, 169, 172, 181, 182, 184, 190, 204, 220, 232, 240, 245, 252, 255], "length": [6, 7, 32, 33, 45, 54, 55, 57, 64, 68, 80, 97, 98, 99, 108, 114, 116, 135, 145, 149, 157, 169, 172, 189, 190, 191, 196, 206, 208, 211, 215, 218, 219, 227, 228, 230, 234, 239, 240, 244, 247, 250, 253], "gray_cod": [6, 190, 255], "grai": [6, 134, 135, 144, 145, 148, 149, 155, 156, 157, 190, 204, 220, 252, 254], "diff_encod": [6, 152, 154, 177, 178, 255], "y_prev": [6, 177, 178], "differenti": [6, 134, 152, 154, 177, 178, 221, 254, 255], "input": [6, 9, 17, 19, 22, 23, 26, 27, 32, 33, 34, 54, 55, 56, 64, 67, 68, 71, 72, 73, 75, 78, 79, 80, 81, 89, 94, 97, 98, 99, 125, 128, 136, 138, 144, 148, 152, 154, 156, 158, 167, 168, 170, 171, 173, 174, 176, 177, 178, 179, 180, 194, 197, 202, 208, 219, 225, 226, 236, 237, 241, 248, 249, 251], "data": [6, 177, 178, 192, 197, 236, 254], "diff_decod": [6, 177, 178, 255], "y": [6, 26, 27, 31, 32, 33, 54, 55, 61, 72, 78, 80, 97, 98, 125, 128, 136, 138, 143, 167, 170, 173, 177, 178, 179, 180, 187, 193, 195, 204, 209, 211, 218, 220, 221, 231, 237, 251, 252], "decod": [6, 177], "use_styl": [7, 222], "appli": [7, 32, 97, 108, 187, 193, 204, 205, 211, 218, 220, 221, 222, 231, 241], "default": [7, 64, 68, 135, 145, 149, 155, 157, 166, 183, 198, 200, 204, 209, 211, 215, 218, 220, 222, 252], "matplotlib": [7, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 247, 248, 249, 250, 251, 252, 253, 254], "rcparam": [7, 222], "time_domain": [7, 32, 97, 98, 134, 144, 148, 156, 167, 180, 195, 221, 234, 235, 237, 250, 252, 253, 255], "raster": [7, 205, 214, 215, 254, 255], "none": [7, 32, 45, 47, 51, 54, 64, 68, 71, 75, 97, 107, 108, 111, 125, 133, 134, 144, 145, 148, 149, 152, 154, 156, 157, 163, 166, 167, 168, 170, 173, 179, 183, 197, 198, 200, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 218, 219, 220, 221, 236, 241, 247, 250, 252], "periodogram": [7, 180, 211, 234, 235, 237, 250, 254, 255], "power": [7, 134, 144, 148, 156, 166, 167, 168, 176, 186, 189, 191, 194, 198, 199, 200, 211, 227, 228, 230, 253, 254], "densiti": [7, 22, 211, 250, 253], "xx": [7, 211], "us": [7, 26, 29, 32, 34, 37, 40, 54, 56, 61, 66, 71, 73, 78, 79, 81, 92, 97, 98, 99, 102, 105, 107, 108, 113, 114, 125, 131, 134, 144, 145, 148, 149, 156, 157, 168, 171, 174, 186, 192, 196, 197, 204, 205, 206, 208, 210, 211, 218, 219, 236, 243, 244, 245, 246, 248, 249, 252, 253, 254, 256], "welch": [7, 211, 218], "method": [7, 36, 37, 101, 102, 211, 218, 248, 249, 255], "spectrogram": [7, 218, 254, 255], "constel": [7, 134, 144, 148, 153, 156, 167, 186, 187, 193, 204, 231, 239, 254, 255], "heatmap": [7, 204, 252], "symbol_map": [7, 107, 108, 123, 134, 144, 148, 153, 155, 156, 186, 220, 221, 252, 255], "map": [7, 107, 108, 115, 123, 134, 144, 148, 155, 156, 186, 220, 254, 255], "ey": [7, 134, 144, 148, 156, 205, 254, 255], "diagram": [7, 9, 26, 32, 97, 125, 136, 177, 178, 205, 254, 255], "phase_tre": [7, 134, 214, 255], "phase": [7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 107, 108, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 152, 153, 154, 155, 156, 157, 165, 187, 193, 195, 212, 213, 214, 241, 254, 255], "tree": [7, 214, 255], "continu": [7, 134, 214, 247, 255], "cpm": [7, 214, 255], "kwarg": [7, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223], "e_b": [7, 49, 50, 51, 52, 53, 107, 111, 134, 144, 148, 152, 156, 168, 181, 182, 184, 203, 232, 254], "n_0": [7, 22, 49, 50, 51, 52, 53, 107, 111, 121, 134, 144, 148, 152, 154, 156, 167, 168, 181, 182, 184, 185, 186, 203, 204, 217, 232, 233, 252, 254], "e_": [7, 49, 50, 51, 52, 53, 107, 121, 134, 144, 148, 154, 156, 167, 168, 181, 184, 185, 186, 204, 217, 233, 252, 254], "roc": [7, 42, 45, 160, 163, 216, 255], "receiv": [7, 42, 43, 45, 47, 49, 107, 113, 114, 120, 134, 144, 148, 152, 154, 156, 160, 161, 162, 163, 164, 186, 188, 205, 210, 216, 255], "oper": [7, 42, 45, 160, 163, 216, 255], "characterist": [7, 42, 45, 160, 163, 216, 255], "curv": [7, 42, 45, 152, 154, 160, 163, 203, 216, 217, 255], "enr": [7, 160, 161, 163, 210], "impulse_respons": [7, 32, 54, 64, 78, 89, 97, 189, 191, 196, 208, 227, 228, 230, 248, 249, 253, 255], "h": [7, 32, 42, 54, 56, 58, 59, 62, 63, 64, 78, 86, 87, 89, 97, 107, 108, 119, 120, 124, 125, 134, 144, 145, 148, 149, 156, 157, 160, 189, 196, 205, 206, 208, 209, 213, 224, 250, 251, 253], "step_respons": [7, 32, 54, 68, 78, 94, 97, 219, 248, 249, 251, 255], "step": [7, 26, 27, 31, 32, 54, 68, 78, 94, 97, 136, 138, 143, 206, 219, 254], "zeros_pol": [7, 223, 249, 255], "zero": [7, 32, 33, 54, 61, 75, 78, 79, 82, 83, 96, 97, 98, 99, 125, 191, 197, 206, 207, 208, 209, 212, 213, 219, 221, 223, 228, 234, 248, 250, 251, 253, 254, 255], "pole": [7, 78, 79, 82, 83, 91, 206, 207, 208, 209, 212, 213, 219, 223, 248, 254], "magnitude_respons": [7, 62, 63, 86, 87, 191, 196, 209, 227, 228, 230, 248, 249, 251, 253, 255], "omega": [7, 28, 32, 54, 62, 63, 78, 86, 87, 97, 136, 139, 140, 206, 207, 209, 212, 213, 251], "phase_respons": [7, 62, 63, 86, 87, 213, 255], "angl": [7, 213, 251], "phase_delai": [7, 212, 255], "delai": [7, 26, 32, 33, 36, 54, 55, 59, 60, 71, 97, 98, 101, 125, 136, 177, 178, 191, 207, 212, 228, 251, 254], "tau_": [7, 212], "phi": [7, 107, 108, 118, 134, 135, 144, 145, 148, 149, 153, 156, 157, 187, 193, 195, 212], "group_delai": [7, 207, 248, 249, 255], "group": [7, 207, 254], "tau_g": [7, 207], "complementari": [8, 158, 159], "cumul": [8, 158, 159], "distribut": [8, 158, 159], "standard": [8, 158, 159], "normal": [8, 9, 11, 16, 125, 129, 132, 158, 159, 186, 189, 191, 206, 207, 209, 211, 212, 213, 218, 227, 228, 230, 251, 253], "mathcal": [8, 42, 158, 159, 160, 161, 162, 163, 164, 167, 179], "qinv": [8, 158, 159, 255], "invers": [8, 159], "closedlooppl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 242, 251, 255], "defin": [9, 54, 78, 167, 179, 189, 216, 239, 242, 249, 254], "perform": [9, 33, 55, 98, 152, 154, 180, 237, 239, 242, 248, 249, 252, 254, 255], "close": [9, 16, 18, 242, 254, 255], "loop": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 242, 254, 255], "pll": [9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 242, 254, 255], "meant": 9, "analysi": [9, 16, 244, 251, 254, 255], "onli": [9, 33, 40, 55, 61, 66, 71, 75, 92, 98, 105, 108, 135, 145, 149, 155, 157, 167, 188, 191, 215, 228, 246, 251, 252], "block": [9, 26, 32, 97, 125, 136, 177, 178], "bb": [9, 250, 251], "ped": [9, 15, 16, 129, 251], "lf": [9, 251], "lo": [9, 251], "e": [9, 26, 52, 160, 161, 162, 163, 164, 166, 170, 171, 183, 239, 244, 245, 248, 249, 251, 252], "nco": [9, 12, 16, 26, 28, 29, 129, 136, 137, 138, 139, 140, 141, 142, 143, 242, 251, 254, 255], "local": [9, 243, 251], "oscil": [9, 26, 29, 136, 139, 242, 251, 254, 255], "detector": [9, 15, 16, 42, 129, 160, 251, 255], "filter": [9, 13, 14, 16, 18, 32, 33, 34, 37, 38, 40, 41, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 105, 106, 107, 114, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 144, 148, 156, 180, 189, 191, 196, 205, 206, 207, 208, 209, 212, 213, 219, 221, 223, 224, 227, 228, 230, 237, 242, 253, 254, 255], "numer": [9, 26, 29, 136, 139, 242, 249, 251, 254, 255], "control": [9, 26, 29, 136, 139, 227, 230, 242, 251, 254, 255], "The": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 74, 75, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 98, 99, 102, 103, 104, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 243, 244, 245, 246, 248, 249, 251, 252, 253, 254, 256], "transfer": [9, 18, 54, 78, 79, 125, 189, 248, 249, 251], "2nd": [9, 125, 129, 242, 251, 255], "order": [9, 32, 33, 36, 47, 52, 54, 55, 59, 65, 71, 74, 78, 83, 90, 97, 98, 99, 101, 107, 108, 117, 125, 129, 134, 144, 148, 149, 156, 157, 167, 181, 182, 184, 186, 187, 189, 204, 205, 214, 215, 227, 230, 231, 232, 242, 249, 250, 251, 252, 255], "proport": [9, 13, 33, 98, 125, 126, 129, 188, 199, 242, 255], "plu": [9, 125, 129, 242, 255], "integr": [9, 14, 43, 44, 45, 46, 125, 127, 129, 165, 242, 246, 249, 255], "z": [9, 26, 54, 78, 125, 136, 177, 178, 239, 248, 249, 251], "k_1": [9, 13, 125, 126, 251], "k_2": [9, 14, 125, 127, 251], "frac": [9, 17, 19, 22, 23, 32, 42, 43, 44, 46, 54, 60, 78, 97, 99, 125, 144, 148, 156, 160, 161, 162, 165, 166, 167, 168, 175, 181, 182, 184, 185, 186, 188, 189, 193, 194, 195, 198, 199, 229, 232, 233, 238, 239, 251], "k_0": [9, 12, 16, 28, 129, 136, 137, 139, 251], "k_p": [9, 15, 16, 129, 251], "refer": [9, 17, 19, 20, 21, 22, 23, 42, 43, 44, 46, 47, 71, 125, 152, 154, 160, 161, 162, 164, 165, 167, 175, 186, 187, 189, 196, 198, 224, 227, 230, 231, 239, 249, 253, 254], "michael": [9, 17, 19, 20, 21, 22, 23, 125, 227, 230], "rice": [9, 17, 19, 20, 21, 22, 23, 125, 227, 230], "digit": [9, 17, 19, 20, 21, 22, 23, 26, 28, 125, 152, 154, 227, 230, 242, 251, 254, 255], "commun": [9, 17, 19, 20, 21, 22, 23, 125, 152, 154, 196, 224, 227, 230, 251, 254], "discret": [9, 17, 19, 20, 21, 22, 23, 125, 167, 179, 185, 227, 230, 233, 241, 247, 251, 254], "approach": [9, 17, 19, 20, 21, 22, 23, 125, 168, 171, 174, 227, 230, 251], "appendix": [9, 125, 227, 230], "lock": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143], "exampl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 38, 40, 41, 43, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 103, 105, 106, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 152, 153, 154, 155, 156, 158, 159, 161, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 251], "see": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 40, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 88, 90, 91, 92, 93, 95, 96, 105, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 148, 153, 155, 156, 180, 189, 191, 206, 207, 208, 209, 212, 213, 219, 223, 227, 228, 230, 254], "noise_bandwidth": [9, 16, 125, 129, 132], "damping_factor": [9, 16, 125, 129, 130], "creat": [9, 16, 26, 28, 32, 34, 47, 48, 54, 56, 71, 73, 78, 79, 81, 97, 98, 99, 107, 108, 125, 129, 134, 135, 136, 139, 144, 145, 148, 149, 153, 156, 157, 167, 169, 186, 187, 195, 221, 231, 234, 235, 239, 247, 251, 253], "object": [9, 16, 32, 35, 36, 47, 48, 54, 58, 59, 78, 82, 83, 97, 100, 101, 107, 108, 109, 110, 134, 135, 144, 145, 146, 147, 148, 149, 150, 151, 156, 157, 206, 207, 208, 209, 212, 213, 219, 223, 251, 255], "phase_lock_tim": [9, 23], "frequency_lock_tim": [9, 17], "freq_offset": [9, 17, 19], "lock_tim": [9, 19, 251], "phase_error_vari": [9, 22], "cn0": [9, 22], "varianc": [9, 22, 42, 44, 46, 162, 164, 167], "steadi": [9, 22], "state": [9, 22, 32, 33, 40, 54, 55, 61, 66, 67, 69, 71, 75, 76, 78, 92, 93, 95, 97, 98, 105, 255], "sample_r": [9, 16, 24, 32, 62, 63, 86, 87, 97, 98, 134, 144, 148, 156, 180, 187, 195, 205, 206, 207, 209, 211, 212, 213, 214, 215, 218, 221, 234, 235, 237, 247, 251, 253], "bnt": [9, 11, 251], "bandwidth": [9, 10, 11, 16, 20, 125, 129, 132, 168, 189, 227, 230, 251, 253], "b_n": [9, 10, 11, 16, 17, 19, 22, 23, 125, 129, 132], "t": [9, 11, 16, 42, 125, 129, 132, 160, 189, 192, 243, 247], "bn": [9, 10], "hz": [9, 10, 16, 17, 19, 22, 62, 63, 86, 87, 125, 129, 132, 168, 176, 180, 187, 188, 189, 194, 195, 199, 234, 235, 238, 247], "zeta": [9, 16, 25, 125, 129, 130], "damp": [9, 16, 25, 125, 129, 130, 251], "k0": [9, 12, 16, 26, 28, 129, 136, 137, 139], "kp": [9, 15, 16, 129], "k1": [9, 13, 125, 126, 251], "k2": [9, 14, 125, 127, 251], "repres": [9, 18, 170, 171], "omega_n": [9, 21, 251], "natur": [9, 21], "radian": [9, 20, 21, 22, 26, 28, 156, 251], "omega_3db": [9, 20], "3": [9, 17, 19, 20, 23, 32, 38, 41, 42, 43, 47, 58, 59, 82, 83, 97, 98, 103, 106, 134, 144, 148, 152, 153, 154, 155, 156, 160, 161, 165, 167, 168, 169, 170, 172, 173, 176, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 204, 205, 206, 207, 208, 209, 212, 213, 219, 221, 223, 224, 227, 228, 230, 231, 232, 234, 235, 236, 237, 238, 239, 243, 244, 249, 251, 253, 254], "omega_": [9, 20], "textrm": [9, 20], "properti": [10, 11, 12, 13, 14, 15, 18, 20, 21, 24, 25, 29, 37, 38, 39, 41, 60, 65, 67, 69, 70, 74, 76, 77, 84, 85, 88, 90, 91, 93, 95, 96, 102, 103, 104, 106, 112, 117, 118, 119, 120, 122, 123, 124, 126, 127, 130, 131, 132, 137, 140, 141, 153, 155, 255], "paramet": [16, 17, 19, 22, 27, 28, 31, 33, 34, 43, 44, 45, 46, 49, 50, 51, 53, 55, 56, 62, 63, 64, 68, 72, 73, 75, 79, 80, 81, 86, 87, 89, 94, 98, 99, 108, 111, 113, 114, 115, 116, 121, 128, 129, 135, 138, 139, 143, 145, 149, 152, 154, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239], "where": [16, 33, 55, 98, 108, 125, 129, 132, 149, 157, 160, 167, 168, 179, 181, 182, 184, 189, 232, 239, 248, 249, 254], "period": [16, 125, 129, 132, 134, 239], "second": [16, 17, 19, 23, 47, 125, 129, 132, 189], "critic": [16, 25, 125, 129, 130, 251], "underdamp": [16, 25, 125, 129, 130], "overdamp": [16, 25, 125, 129, 130], "ted": [16, 129], "t_": [17, 19, 23, 72, 189, 253], "fl": [17, 19], "delta": [17, 19, 32, 54, 64, 78, 89, 97, 208, 248, 249], "take": [17, 19, 23, 243], "onto": [17, 19, 23], "39": 17, "pl": [19, 23], "38": 19, "34": 20, "33": 21, "sigma_": [22, 42, 43, 45], "theta_": 22, "carrier": [22, 148], "43": 22, "40": [23, 97, 180], "less": [25, 165], "than": [25, 134, 135, 145, 149, 155, 157, 165, 191, 193, 204, 220, 228], "greater": [25, 227, 230], "dd": [26, 27, 28, 29, 30, 31, 136, 242, 251, 254, 255], "direct": [26, 28, 242, 251, 254, 255], "synthes": [26, 28, 242, 251, 254, 255], "note": [26, 32, 38, 41, 42, 43, 44, 46, 54, 78, 97, 103, 106, 125, 134, 136, 144, 148, 156, 160, 161, 162, 164, 165, 167, 168, 171, 174, 177, 178, 189, 193, 199, 205, 224, 239], "increment": [26, 27, 28, 136, 138, 139, 140, 251], "v": [26, 136, 176, 194, 243], "output": [26, 27, 31, 32, 33, 54, 55, 64, 68, 78, 79, 81, 89, 94, 97, 98, 114, 125, 128, 136, 138, 143, 167, 168, 169, 170, 171, 173, 174, 178, 179, 186, 194, 197, 208, 219, 236, 243, 247, 248, 249, 251], "constant": [26, 28, 125, 134, 136, 139, 140, 211, 218, 249, 251], "accumul": [26, 28, 47, 136, 139, 140, 251], "absolut": [26, 28, 135, 136, 139, 141, 145, 157, 168], "adder": [26, 32, 125, 136, 177, 178, 251], "__call__": [26, 27, 32, 33, 34, 54, 55, 56, 69, 71, 72, 73, 76, 78, 79, 80, 81, 95, 97, 98, 99, 125, 128, 136, 138, 255], "variabl": [26, 27, 136, 138, 192, 251], "reset": [26, 30, 32, 40, 54, 66, 71, 75, 78, 92, 97, 105, 125, 133, 136, 142], "forward": [26, 31, 136, 143], "vari": [27, 138], "number": [31, 43, 44, 45, 46, 47, 49, 50, 53, 62, 63, 64, 68, 86, 87, 89, 94, 107, 108, 112, 122, 134, 135, 143, 144, 145, 148, 149, 156, 157, 165, 167, 170, 173, 179, 181, 182, 184, 189, 191, 192, 197, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 218, 219, 227, 228, 230, 232, 236], "equival": [32, 97, 167, 168, 185, 233, 245, 247], "first": [32, 47, 97, 134, 144, 197, 221, 236, 244, 246], "prototyp": [32, 38, 41, 97, 103, 106], "feedforward": [32, 34, 38, 41, 54, 56, 70, 78, 81, 85, 97, 99, 103, 106, 206, 207, 208, 209, 212, 213, 219, 223, 248, 249], "coeffici": [32, 34, 54, 56, 78, 81, 97, 99, 107, 120, 124, 134, 144, 148, 156, 206, 207, 208, 209, 212, 213, 219, 223, 248, 249], "discard": 32, "between": [32, 34, 56, 69, 73, 76, 79, 81, 95, 97, 99, 188, 211, 215, 218, 251, 254], "each": [32, 33, 55, 97, 98, 186, 192, 211, 215, 218], "instead": [32, 97, 204], "decompos": [32, 97], "ar": [32, 33, 34, 38, 41, 42, 47, 49, 50, 51, 53, 55, 56, 63, 73, 79, 81, 87, 97, 98, 99, 103, 106, 107, 108, 120, 124, 134, 135, 144, 145, 148, 149, 156, 157, 160, 168, 170, 171, 173, 174, 188, 191, 197, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 218, 220, 221, 222, 224, 228, 234, 235, 243, 245, 247, 249, 251, 253, 254, 256], "commut": [32, 97], "parallel": [32, 97], "sum": [32, 42, 54, 78, 160, 253], "prevent": [32, 97, 144, 156], "need": [32, 97, 243, 244, 246], "done": [32, 243], "case": [32, 97, 156, 160], "2x": [32, 97], "6": [32, 38, 41, 47, 58, 59, 82, 83, 97, 98, 103, 106, 134, 144, 148, 155, 156, 161, 162, 164, 165, 172, 176, 179, 180, 181, 182, 186, 188, 190, 192, 194, 199, 204, 205, 206, 207, 208, 209, 212, 213, 219, 220, 221, 223, 224, 227, 230, 234, 235, 237, 239, 243, 246, 248, 249, 251, 252], "5": [32, 38, 41, 42, 43, 44, 45, 46, 47, 58, 59, 97, 98, 103, 106, 134, 144, 148, 156, 161, 163, 165, 167, 170, 172, 173, 174, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 192, 193, 199, 202, 205, 206, 207, 208, 209, 212, 213, 219, 221, 223, 224, 227, 230, 231, 232, 233, 234, 235, 237, 239, 243, 247, 248, 249, 250, 251, 252, 253], "summat": 32, "bottom": [32, 97], "top": [32, 97], "relat": [32, 38, 41, 97, 103, 106, 168, 189], "In": [32, 33, 34, 35, 36, 38, 41, 43, 45, 47, 55, 56, 58, 59, 69, 73, 76, 79, 81, 82, 83, 95, 97, 98, 99, 100, 101, 103, 106, 134, 144, 148, 152, 153, 154, 155, 156, 158, 159, 161, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 247, 252], "np": [32, 38, 41, 43, 45, 82, 83, 97, 98, 103, 106, 134, 144, 148, 152, 154, 156, 161, 163, 165, 167, 168, 169, 170, 171, 173, 174, 179, 180, 186, 187, 188, 193, 195, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 217, 219, 221, 223, 224, 231, 234, 235, 237, 239, 247, 248, 249, 250, 251, 252, 253], "co": [32, 97, 98, 195], "64": [32, 186, 192, 249], "arang": [32, 38, 41, 97, 98, 103, 106, 167, 169, 180, 195, 224, 234, 235, 237, 239, 247, 251], "280": 32, "7": [32, 35, 36, 38, 41, 97, 98, 100, 101, 103, 106, 134, 144, 148, 155, 156, 161, 165, 172, 179, 186, 190, 192, 196, 221, 224, 239, 243, 249], "kaiser": [32, 34, 35, 36, 37, 97, 98, 99, 100, 101, 102], "window": [32, 97, 211, 218], "out": [32, 35, 38, 41, 47, 58, 82, 97, 98, 100, 103, 106, 134, 144, 148, 153, 155, 156, 158, 159, 169, 170, 172, 173, 176, 177, 178, 179, 181, 182, 184, 185, 186, 188, 190, 194, 197, 199, 202, 207, 222, 224, 225, 226, 232, 233, 236, 238], "plt": [32, 43, 45, 97, 98, 134, 144, 148, 152, 153, 154, 155, 156, 161, 163, 165, 167, 168, 169, 171, 174, 180, 186, 187, 188, 189, 191, 193, 195, 196, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 217, 219, 220, 221, 223, 227, 228, 230, 231, 234, 235, 237, 239, 247, 248, 249, 250, 251, 252, 253], "figur": [32, 43, 45, 97, 98, 134, 144, 148, 152, 153, 154, 155, 156, 161, 163, 165, 167, 168, 169, 171, 174, 180, 186, 187, 188, 189, 191, 193, 195, 196, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 217, 219, 220, 221, 222, 223, 227, 228, 230, 231, 234, 235, 237, 239, 247, 248, 249, 250, 251, 252, 253], "figsiz": [32, 43, 45, 97, 98, 134, 144, 148, 152, 153, 154, 155, 156, 161, 163, 165, 167, 168, 169, 171, 174, 180, 186, 187, 188, 189, 191, 193, 195, 196, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 217, 219, 220, 221, 222, 223, 227, 228, 230, 231, 234, 235, 237, 239, 247, 248, 249, 250, 251, 252, 253], "8": [32, 38, 41, 43, 45, 82, 83, 97, 98, 103, 106, 108, 134, 135, 144, 145, 148, 149, 152, 153, 154, 155, 156, 157, 161, 163, 165, 167, 168, 169, 171, 172, 174, 179, 180, 186, 188, 189, 190, 191, 192, 195, 196, 199, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 217, 219, 220, 221, 222, 223, 224, 227, 228, 230, 234, 235, 237, 239, 243, 248, 249, 250, 251, 253], "plot": [32, 43, 45, 62, 63, 64, 68, 86, 87, 89, 94, 97, 98, 134, 144, 148, 152, 153, 154, 155, 156, 161, 163, 167, 168, 169, 171, 174, 180, 186, 187, 188, 189, 191, 193, 195, 196, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 227, 228, 230, 231, 234, 235, 237, 239, 247, 248, 249, 251, 252, 253, 254, 255], "marker": [32, 97, 98, 204, 220, 247, 248, 249, 252], "o": [32, 97, 98, 247], "label": [32, 43, 45, 97, 98, 135, 145, 149, 152, 154, 157, 161, 163, 165, 167, 186, 187, 189, 193, 203, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 217, 218, 221, 227, 230, 231, 247, 250, 251, 252, 253], "titl": [32, 97, 134, 144, 152, 154, 165, 167, 168, 169, 171, 174, 180, 186, 187, 193, 195, 203, 217, 221, 231, 234, 235, 237, 239, 247, 250, 251, 252, 253], "tight_layout": [32, 97, 134, 144, 152, 154, 165, 167, 168, 169, 171, 174, 180, 186, 187, 188, 195, 203, 217, 221, 231, 234, 235, 237, 239, 250, 251, 252, 253], "preserv": [32, 34, 56, 69, 73, 76, 79, 81, 95, 97, 99, 205, 215], "call": [32, 33, 34, 55, 56, 69, 73, 76, 79, 81, 95, 97, 98, 99], "true": [32, 43, 44, 45, 46, 97, 98, 134, 144, 148, 152, 154, 156, 161, 162, 163, 164, 165, 166, 168, 170, 171, 173, 174, 179, 183, 188, 195, 200, 201, 204, 213, 215, 220, 222, 229, 250, 252], "y1": [32, 97, 98, 193], "70": [32, 192, 253], "y2": [32, 97, 98, 193], "140": [32, 180], "y3": [32, 97, 98], "210": 32, "y4": [32, 97], "y5": [32, 97], "flush": [32, 33, 54, 55, 61, 97, 98, 255], "y_1": [32, 97, 193], "y_2": [32, 97, 193], "y_3": [32, 97], "y_4": [32, 97], "y_5": [32, 97], "full": [32, 33, 55, 97, 98, 169], "__len__": [32, 54, 57, 97], "__repr__": [32, 35, 54, 58, 78, 82, 97, 100, 107, 109, 134, 144, 146, 148, 150, 156], "style": [32, 35, 54, 58, 78, 82, 97, 100, 107, 109, 134, 144, 146, 148, 150, 156, 222], "__str__": [32, 36, 54, 59, 78, 83, 97, 101, 107, 110, 134, 144, 147, 148, 151, 156], "human": [32, 36, 54, 59, 78, 83, 97, 101, 107, 110, 134, 144, 147, 148, 151, 156], "readabl": [32, 36, 54, 59, 78, 83, 97, 101, 107, 110, 134, 144, 147, 148, 151, 156], "when": [32, 40, 54, 61, 64, 66, 68, 78, 89, 92, 94, 97, 105, 167, 168, 170, 171, 173, 174, 185, 206, 207, 208, 209, 212, 213, 219, 233, 239, 247, 248, 249], "pass": [32, 54, 61, 97, 167, 170, 173, 179, 186, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 241, 243, 245, 248, 249, 255], "through": [32, 54, 61, 97, 144, 156, 170, 173, 179, 241, 248, 249, 251], "indic": [32, 34, 44, 45, 46, 54, 56, 69, 71, 73, 76, 78, 79, 81, 95, 97, 99, 108, 135, 144, 145, 148, 149, 152, 154, 156, 157, 161, 162, 163, 164, 166, 183, 189, 191, 193, 195, 200, 201, 205, 213, 214, 215, 221, 227, 228, 229, 230], "whether": [32, 34, 44, 45, 46, 54, 56, 69, 71, 73, 76, 78, 79, 81, 95, 97, 99, 152, 154, 161, 162, 163, 164, 166, 183, 195, 200, 201, 213, 215, 221, 229], "consist": [32, 49, 50, 51, 52, 53, 54, 67, 97], "previou": [32, 34, 54, 56, 67, 73, 75, 79, 81, 97, 99, 177, 178], "u": [32, 54, 68, 78, 94, 97, 165, 219, 239, 240, 248, 249], "frequency_respons": [32, 54, 62, 78, 86, 97, 255], "numpi": [32, 47, 52, 54, 62, 63, 78, 86, 87, 97, 107, 114, 134, 144, 148, 156, 167, 170, 173, 179, 236, 247, 248, 249, 250, 251, 252, 253, 254], "frequency_response_log": [32, 54, 63, 78, 87, 97], "logarithm": [32, 54, 63, 78, 87, 97, 206, 207, 209, 211, 212, 213, 248, 249], "axi": [32, 54, 63, 78, 87, 97, 166, 183, 198, 200, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 218, 220, 221, 247], "custom": [32, 37, 97, 102, 108, 145, 149, 157, 255], "design": [32, 34, 37, 97, 99, 102, 108, 145, 149, 157, 196, 243, 254, 255], "multir": [32, 33, 34, 37, 97, 98, 99, 102, 196, 224, 255], "polyphase_tap": [32, 36, 38, 41, 97, 98, 101, 103, 106], "lfloor": [32, 54, 60, 97], "rfloor": [32, 54, 60, 97], "mode": [33, 34, 40, 55, 56, 61, 66, 69, 71, 73, 75, 76, 79, 81, 92, 95, 98, 99, 105, 169, 239], "l": [33, 55, 80, 98], "stream": [33, 34, 35, 36, 40, 55, 56, 58, 59, 61, 66, 69, 71, 73, 75, 76, 79, 81, 82, 83, 92, 95, 98, 99, 100, 101, 105, 134, 144, 148, 156, 249], "convolut": [33, 55, 97, 98], "ha": [33, 55, 97, 98, 134, 144, 148, 167, 180, 188, 189, 199, 237, 239, 251, 252, 253], "align": [33, 55, 98, 144, 247], "howev": [33, 49, 50, 51, 53, 55, 98, 125, 171, 174, 247], "produc": [33, 55, 97, 98, 189, 253], "final": [33, 55, 98], "dictat": [33, 55, 98], "argument": [33, 34, 55, 98, 99, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 248, 249], "specif": [34, 52, 99, 246, 253], "npt": [34, 99, 108, 135, 145, 149, 157, 206, 207, 208, 209, 212, 213, 219, 223], "string": [35, 36, 58, 59, 82, 83, 100, 101, 108, 109, 110, 145, 146, 147, 149, 150, 151, 157, 192, 211, 218, 255], "represent": [35, 36, 58, 59, 82, 83, 100, 101, 109, 110, 146, 147, 150, 151, 220, 255], "print": [36, 59, 83, 101, 192, 247, 248, 249, 251], "167": [36, 101], "24": [36, 101], "shape": [36, 59, 83, 98, 101, 107, 108, 114, 116, 119, 120, 124, 134, 144, 145, 148, 149, 156, 157, 189, 191, 205, 221, 227, 228, 230, 249, 254, 255], "84": [36, 101], "befor": [38, 41, 103, 106, 256], "decomposit": [38, 41, 103, 106, 255], "after": [38, 41, 103, 106], "10": [38, 41, 43, 45, 47, 97, 98, 103, 106, 108, 134, 144, 145, 148, 149, 152, 154, 156, 157, 161, 163, 165, 166, 167, 172, 176, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 203, 204, 206, 207, 208, 209, 212, 213, 217, 219, 221, 223, 224, 227, 228, 229, 230, 231, 232, 233, 247, 248, 249, 250, 251, 252, 253], "9": [38, 41, 97, 98, 103, 106, 134, 144, 148, 156, 161, 165, 172, 179, 186, 190, 192, 224, 227, 230, 249, 250, 252, 253, 255], "null": [42, 160, 209, 211, 253], "altern": [42, 160, 249], "hypothes": [42, 160], "follow": [42, 47, 193, 204, 215, 218, 220, 222, 224, 251], "assum": [42, 160, 167, 179, 197, 236], "valu": [42, 107, 108, 111, 121, 134, 135, 144, 145, 148, 149, 152, 154, 156, 157, 158, 159, 169, 176, 177, 178, 189, 193, 194, 204, 220, 249, 255], "random": [42, 134, 144, 148, 156, 167, 170, 173, 179, 186, 187, 193, 204, 205, 214, 221, 231, 250, 252], "process": [42, 43, 44, 46, 160, 161, 162, 164, 196, 224, 249, 251, 254], "w": [42, 160, 167, 247, 248, 249, 250, 251, 252, 253], "sigma": [42, 43, 44, 45, 46, 160, 161, 162, 163, 164, 167, 168], "_0": [42, 160], "_1": [42, 160], "test": [42, 160, 245, 254], "statist": [42, 43, 44, 46, 160, 161, 162, 164], "limits_": [42, 54, 78, 160], "left": [42, 43, 44, 78, 144, 148, 156, 160, 161, 162, 164, 165, 166, 167, 168, 183, 186, 188, 189, 193, 195, 199, 200, 201, 229, 239], "right": [42, 43, 44, 78, 144, 148, 156, 160, 161, 162, 164, 165, 166, 167, 168, 183, 186, 188, 189, 193, 195, 199, 200, 201, 229, 239], "gamma": [42, 44, 46, 160, 162, 164, 165], "sim": [42, 160, 167, 244], "chi_": [42, 43, 44], "2n": [42, 43, 44], "text": [42, 156, 160, 165, 166, 167, 168, 171, 174, 175, 176, 186, 187, 188, 194, 196, 198, 200, 201, 229, 231], "under": [42, 160], "detect": [42, 43, 44, 45, 46, 160, 161, 162, 163, 164, 165, 210, 216, 255], "threshold": [42, 44, 46, 160, 162, 164], "q_": [42, 43, 44, 46], "chi_n": [42, 43, 44, 46], "steven": [42, 43, 44, 46, 160, 161, 162, 164], "kai": [42, 43, 44, 46, 160, 161, 162, 164], "fundament": [42, 43, 44, 46, 160, 161, 162, 164], "theori": [42, 43, 44, 46, 160, 161, 162, 164], "section": [42, 49, 50, 51, 52, 53, 160, 249, 251], "static": [42, 43, 44, 45, 46, 160, 161, 162, 163, 164, 244], "n_nc": [42, 43, 44, 45, 46, 165], "For": [43, 44, 46, 161, 162, 164, 167, 180, 188, 237, 243, 248], "linspac": [43, 152, 154, 161, 168, 171, 174, 188, 203, 217, 249, 250, 251, 252], "20": [43, 45, 97, 98, 134, 144, 148, 156, 161, 165, 168, 170, 173, 176, 179, 186, 187, 192, 193, 194, 201, 224, 229, 237, 250, 252, 253, 255], "101": [43, 45, 161, 163], "25": [43, 170, 173, 179, 202, 205, 225, 226, 247, 250, 251, 253], "1e": [43, 161, 187, 252], "sigma2": [44, 46, 162, 164], "If": [45, 75, 108, 145, 149, 157, 163, 166, 167, 168, 179, 183, 197, 200, 201, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 218, 219, 220, 221, 229, 234, 236, 254], "logspac": [45, 163, 165], "theoret": [45, 152, 154, 203, 217, 252, 255], "variou": [45, 244, 253], "100": [45, 78, 89, 94, 152, 154, 165, 167, 168, 171, 174, 176, 186, 194, 195, 203, 205, 206, 208, 214, 217, 219, 221, 231, 234, 235, 237, 247, 251], "1_000": [45, 167, 187, 188, 193, 231, 250], "000": [45, 187], "5_000": 45, "measur": [47, 49, 166, 167, 175, 176, 183, 186, 194, 198, 200, 201, 229, 251, 254, 255], "new": [47, 48, 71, 73, 107, 108, 134, 135, 144, 145, 148, 149, 156, 157, 231], "from": [47, 62, 63, 78, 79, 86, 87, 107, 123, 134, 144, 148, 155, 156, 176, 181, 182, 184, 185, 194, 202, 211, 218, 225, 226, 232, 233, 243, 248, 249, 251, 254], "contain": [47, 167, 192], "add": [47, 49, 52, 134, 144, 148, 156, 167, 187, 191, 215, 228, 231, 241, 252, 256], "total": [47, 189, 191, 227, 228, 230, 253], "count": [47, 50, 186], "error_r": [47, 51, 52, 252], "everi": [47, 247], "can": [47, 49, 50, 51, 53, 125, 134, 167, 186, 189, 196, 197, 205, 211, 218, 245, 248, 249, 252, 254, 256], "obtain": 47, "tabul": [47, 48], "all": [47, 52, 186, 205, 214, 215, 244, 246, 254], "ascend": [47, 52], "correspond": [47, 52, 215], "other": [49, 50, 51, 53, 247, 256], "quantiti": [49, 50, 51, 52, 53], "user": [49, 50, 51, 53, 248, 249], "caution": [49, 50, 51, 53], "instanc": [49, 50, 51, 53, 134], "transmit": [49, 107, 124, 134, 144, 148, 156, 186, 205], "whatev": 52, "wa": [52, 168], "provid": [52, 107, 111, 121, 134, 144, 148, 152, 154, 156, 215, 244, 254], "wrapper": [54, 78], "scipi": [54, 78, 211, 218, 253, 254], "convolv": [54, 221], "It": [54, 78, 97, 108, 125, 145, 149, 157, 167, 205], "support": [54, 78, 255], "one": [54, 78, 135, 144, 145, 149, 155, 157, 189, 192, 205, 206, 207, 209, 211, 212, 213, 218, 234, 248, 249, 250, 253], "its": [54, 78, 79, 167, 248, 249, 253], "sum_": [54, 78, 162, 164, 166, 167, 168, 183, 186, 229], "valid": [55, 188, 205, 214, 215, 239], "same": [55, 98, 221, 248], "0013559842808217807": [58, 59], "005995136544658217": [58, 59], "008698817681933214": [58, 59], "0024103767414047302": [58, 59], "010205586837665018": [58, 59], "018983779931504997": [58, 59], "011950905288150394": [58, 59], "01518393864077397": [58, 59], "051622191325047306": [58, 59], "07210389837804473": [58, 59], "04745944982876247": [58, 59], "039173517569276436": [58, 59], "17918683372907862": [58, 59], "3367363220550604": [58, 59], "4611457574513795": [58, 59], "5084040873607553": [58, 59], "30": [59, 97, 180, 206, 208, 219, 234, 235, 249, 255], "31": 59, "15": [59, 134, 163, 172, 190, 224, 237], "remain": [61, 180, 197], "1024": [62, 63, 86, 87, 206, 207, 209, 212, 213, 250, 253], "decad": [63, 87, 206, 207, 209, 212, 213, 248, 251], "resampl": [71, 72, 73, 74, 75, 76, 77, 196, 224, 254, 255], "http": [71, 165, 175, 189, 196, 198, 239, 243, 244, 245], "wirelesspi": 71, "com": [71, 165, 189, 196, 244, 245], "fraction": [71, 75, 189, 247], "structur": 71, "index": [71, 75, 205, 214, 215, 220, 243], "should": [75, 134, 205, 245], "equal": [75, 134], "three": [75, 247, 253], "lfilter": 78, "b_i": [78, 81, 85, 206, 207, 208, 209, 212, 213, 219, 223, 249], "feedback": [78, 81, 84, 206, 207, 208, 209, 212, 213, 219, 223, 249], "a_j": [78, 81, 84, 206, 207, 208, 209, 212, 213, 219, 223, 249], "These": [78, 144, 148, 156, 222, 245, 251], "differ": [78, 135, 145, 149, 155, 157, 221, 239, 253], "a_0": 78, "b": [78, 81, 165, 168, 189, 192, 206, 208, 219, 243, 244, 253], "classmethod": [78, 79], "zerospol": [78, 79, 82, 83, 206, 207, 208, 209, 212, 213, 219, 223, 249], "self": [78, 79], "b_tap": [78, 83, 85, 249], "a_tap": [78, 83, 84, 249], "exp": [82, 83, 144, 148, 156, 180, 189, 193, 195, 206, 207, 208, 209, 212, 213, 219, 221, 223, 235, 237, 239, 247, 249, 251], "1j": [82, 83, 180, 195, 206, 207, 208, 209, 212, 213, 219, 221, 223, 235, 237, 247, 249, 251], "conj": [82, 83, 206, 207, 208, 209, 212, 213, 219, 223, 249, 251], "478207252018059": [82, 83, 249], "6400000000000001": [82, 83, 249], "7391036260090295": [83, 249], "3061467458920719j": [83, 249], "insert": 97, "multipli": 97, "hold": [97, 99, 197, 255], "recommend": 97, "wai": [97, 245], "11": [97, 134, 144, 148, 156, 172, 190, 196, 224, 243], "zoh": [97, 99, 102], "12": [97, 134, 144, 148, 156, 162, 164, 165, 172, 190, 196, 224, 248, 252], "13": [97, 134, 144, 148, 156, 160, 161, 162, 164, 169, 172, 190, 224, 255], "iter": 98, "concaten": [98, 249], "linearli": 99, "2r": 99, "ramp": [99, 125], "ones": [99, 251], "modul": [107, 108, 116, 117, 119, 134, 144, 145, 148, 149, 152, 154, 156, 157, 167, 181, 182, 184, 186, 187, 193, 203, 205, 214, 217, 220, 231, 232, 243, 246, 250, 252, 254, 255], "map_symbol": [107, 115, 134, 144, 148, 156, 204, 205, 255], "decide_symbol": [107, 113, 134, 144, 148, 156, 255], "a_hat": [107, 113, 134, 144, 148, 156], "decis": [107, 113, 114, 134, 144, 148, 156, 205], "maximum": [107, 113, 114, 134, 144, 148, 156, 189, 191, 204, 220, 227, 228, 230], "likelihood": [107, 113, 114, 134, 144, 148, 156], "mle": [107, 113, 134, 144, 148, 156], "puls": [107, 108, 114, 116, 119, 120, 124, 134, 144, 145, 148, 149, 156, 157, 189, 191, 205, 221, 227, 228, 230, 254, 255], "match": [107, 108, 114, 120, 134, 144, 145, 148, 149, 156, 157, 255], "abstract": [107, 111, 121], "log_2": [107, 112, 134, 144, 148, 156, 168, 181, 182, 184, 232], "phase_offset": [107, 108, 118, 134, 135, 144, 145, 148, 149, 153, 156, 157, 167, 186, 187, 193, 204, 205, 220, 231, 250, 252], "degre": [107, 108, 118, 134, 135, 144, 145, 148, 149, 153, 156, 157, 187, 193, 195, 199], "dot": [107, 108, 123, 134, 144, 148, 155, 156, 220], "mapsto": [107, 108, 123, 134, 144, 148, 155, 156, 220], "mathbb": [107, 108, 123, 134, 144, 148, 155, 156, 168, 220, 239], "sym": [107, 108, 122, 134, 135, 144, 145, 148, 149, 156, 157, 182, 185, 189, 232, 233, 253], "pulse_shap": [107, 108, 114, 116, 119, 134, 144, 145, 148, 149, 156, 157, 250], "tx_filter": [107, 124, 134, 144, 148, 156], "rx_filter": [107, 120, 134, 144, 148, 156], "rect": [108, 145, 149, 157, 253], "whose": [108, 135, 145, 148, 149, 157], "import": [108, 145, 149, 157, 245, 247, 248, 249, 250, 251, 252, 253, 254], "roll": [108, 145, 149, 157, 239, 253], "off": [108, 145, 149, 157], "psd": [111, 121, 152, 154, 168, 181, 182, 184, 185, 203, 217, 232, 233], "p_b": 111, "s_hat": [114, 252], "size": [114, 116, 169, 179, 247, 251, 252, 253], "p_e": 121, "loopfilt": [125, 126, 127, 128, 129, 130, 131, 132, 133, 242, 251, 255], "ppi": [125, 129, 242], "track": 125, "cannot": 125, "chirp": 125, "underli": [125, 131], "scheme": [134, 144, 148, 156, 255], "similar": [134, 144, 156, 253], "One": [134, 144, 156, 253], "distinct": [134, 144, 156], "result": [134, 144, 156, 166, 183, 188, 199, 200, 201, 227, 229, 230, 252], "envelop": [134, 248, 249], "which": [134, 144, 156, 165, 166, 167, 168, 183, 187, 193, 198, 199, 200, 204, 220, 231, 247, 251, 253], "lower": [134, 144, 156, 209, 211, 227, 230], "also": [134, 188, 189, 254], "consid": [134, 192], "cpfsk": 134, "separ": 134, "modem": [134, 144, 148, 156], "45": [134, 135, 144, 145, 148, 153, 167, 186, 187, 193, 195, 204, 205, 220, 231, 250, 252], "symbol_label": [134, 135, 144, 145, 148, 149, 155, 156, 157, 252], "randint": [134, 144, 148, 156, 167, 170, 173, 179, 186, 187, 193, 204, 205, 214, 221, 231, 250, 252], "1000": [134, 144, 148, 156, 186, 188, 221, 234, 235, 252], "dtype": [134, 144, 148, 156, 197, 221, 236, 251], "uint8": [134, 144, 148, 156, 197, 236], "complex_symbol": [134, 144, 148, 156], "70710678": [134, 144, 148], "70710678j": [134, 144, 148], "linestyl": [134, 144, 148, 156, 204, 215, 220, 222, 239, 247, 251, 252, 253], "tx_sampl": [134, 144, 148, 156], "50": [134, 144, 148, 156, 176, 194, 202, 220, 234, 235, 247, 250], "like": [134, 245, 254, 255], "channel": [134, 144, 152, 154, 168, 170, 171, 173, 174, 179, 203, 217, 254, 255], "subplot": [134, 144, 193, 251, 252], "imag": [134, 144, 247], "trajectori": 134, "although": 134, "boundari": 134, "lead": [134, 193, 252], "spectral": [134, 180, 211, 250, 253], "effici": [134, 180, 199, 237], "gmsk": 134, "rx_sampl": [134, 144, 148, 156], "last": [134, 144, 197, 243], "rx_symbol": [134, 144, 148, 156], "rx_complex_symbol": [134, 144, 148, 156], "14": [134, 144, 148, 156, 161, 172, 190, 224], "array_equ": [134, 144, 148, 156], "bin": [135, 145, 149, 155, 157, 186, 204, 220, 252], "consecut": [135, 145, 149, 157], "adjac": [135, 145, 149, 155, 157, 252, 253], "mai": [135, 145, 149, 155, 157, 186, 204, 215, 218, 220, 222, 249], "more": [135, 145, 149, 155, 157, 255], "start": [135, 145, 149, 157, 243], "0j": [135, 145, 149, 157], "go": [135, 145, 149, 157], "counter": [135, 145, 149, 157], "clockwis": [135, 145, 149, 157], "around": [135, 145, 149, 157], "circl": [135, 145, 149, 157, 249], "qpsk": [144, 148, 152, 153, 154, 156, 167, 186, 187, 203, 204, 205, 217, 220, 221, 231, 254, 255], "convent": [144, 156], "transit": [144, 156, 173, 174, 179, 241], "independ": 144, "apart": 144, "origin": [144, 156, 237, 247], "taken": [144, 148, 156], "jq": 144, "begin": [144, 156, 160], "end": [144, 156, 160, 234, 244], "encod": [148, 152, 154, 177, 178, 254], "inform": [148, 181, 182, 184, 232], "ge": [149, 157, 165], "were": [152, 154], "simon": [152, 154], "alouini": [152, 154], "over": [152, 154, 192], "fade": [152, 154], "chapter": [152, 154, 196, 224], "john": [152, 154], "proaki": [152, 154], "optimum": [152, 154], "bpsk": [152, 154, 203, 217, 221, 250], "psk8": [152, 154, 203, 217, 252], "psk16": [152, 154, 203, 217, 252], "compar": [152, 154, 253], "de": [152, 154, 255], "se": [154, 217], "00000000e": [155, 156, 249], "00": [155, 156, 249], "00j": [155, 156], "07106781e": [155, 156], "01": [155, 156, 192, 249, 251], "01j": [155, 156], "12323400e": [155, 156], "17": [155, 156, 199, 224, 243], "83697020e": 155, "22464680e": [155, 156], "16j": [155, 156], "annot": [155, 220, 255], "odd": [156, 234], "rotat": [156, 195], "rel": [156, 239, 253], "even": [156, 189, 227, 230], "2m": 156, "displaystyl": 156, "pi4_qpsk": 156, "exceed": [158, 159], "15865525393145707": [158, 159], "158655": [158, 159], "0000010494310452": [158, 159], "perfect": 160, "knowledg": 160, "cn": [160, 167], "mathrm": 160, "re": 160, "sqrt": [160, 161, 162, 164, 165, 186, 189, 229, 239, 250, 251, 253], "desir": [165, 167, 252], "ln": [165, 189], "62": [165, 192], "_": [165, 186], "log_": [165, 166, 176, 183, 188, 198, 200, 201, 229], "54": [165, 192], "44": 165, "12ab": 165, "7b": 165, "claim": 165, "leq": 165, "le": [165, 195, 199, 227, 230], "8096": 165, "radarsp": 165, "weebli": 165, "upload": 165, "21471216": 165, "albersheim_alternative_form": 165, "pdf": [165, 189], "bpb": 165, "w2": 165, "wpmucdn": 165, "site": [165, 243], "gatech": 165, "edu": 165, "dist": [165, 244], "462": 165, "file": [165, 244, 246], "2016": 165, "noncoher": 165, "approxim": [165, 255], "www": [165, 189, 196], "mathwork": [165, 189, 196], "help": [165, 189, 196], "html": [165, 189, 196, 243], "semilogx": [165, 216], "legend": [165, 193, 247, 250, 251, 253], "grid": [165, 168, 171, 174, 188, 222, 247, 250, 251, 253], "both": [165, 168, 204, 220, 221, 247, 251], "xlabel": [165, 168, 169, 171, 174, 186, 188, 239, 247, 250, 251, 253], "ylabel": [165, 168, 169, 171, 174, 186, 188, 239, 247, 250, 251, 253], "across": 165, "nuse": 165, "avg": [166, 167, 198], "ax": [166, 183, 198, 200, 222], "along": [166, 183, 198, 200], "entir": [166, 183, 198, 200], "decibel": [166, 176, 183, 194, 200, 201, 229, 254, 255], "seed": [167, 170, 173, 179, 241], "ad": [167, 215, 244, 254, 255], "explicitli": 167, "known": 167, "must": [167, 189, 195, 215, 227, 230, 239], "default_rng": [167, 170, 173, 179], "noisi": 167, "set": [167, 188, 204, 209, 211, 215, 218, 220, 222, 244, 246, 249], "sin": [167, 234], "zorder": [167, 187, 231], "infti": [167, 168], "nand": 167, "capac": [168, 171, 174, 254, 255], "2d": [168, 215], "x_i": [168, 170, 171, 173, 174, 179, 193], "y_i": [168, 170, 171, 173, 174, 179], "monoton": 168, "decreas": 168, "limit": [168, 204, 209, 211, 220, 252], "At": 168, "occur": 168, "view": [168, 244, 254], "59": 168, "shannon": 168, "semilogi": [168, 203, 216, 217], "barker": [169, 240, 254, 255], "bipolar": [169, 255], "sequenc": [169, 170, 173, 179, 239, 241, 254, 255], "format": 169, "seq": 169, "have": [169, 180, 197, 221, 236, 237], "ideal": [169, 252], "minim": 169, "autocorrel": [169, 239], "sidelob": [169, 227, 230, 239], "corr": [169, 239], "lag": [169, 239], "ab": [169, 239, 253], "roughli": [170, 173, 247], "eras": 170, "flip": 173, "h_b": 174, "cf": 175, "v_": [175, 176, 194, 201, 229], "en": [175, 198, 239], "wikipedia": [175, 198, 239], "org": [175, 198, 239], "wiki": [175, 198, 239], "type": [176, 186, 194, 197, 211, 216, 218, 236, 255], "voltag": [176, 194, 201, 229, 254], "ani": [176, 180, 194, 209, 211, 237, 246], "x_": [176, 194], "mhz": [176, 194], "77": [176, 192, 194], "50e6": 176, "76": [176, 192], "98970004336019": 176, "mw": [176, 194], "dbm": [176, 194], "dbv": [176, 194], "020599913279624": 176, "uncod": 178, "dmc": [179, 241, 254, 255], "memoryless": [179, 241, 254], "pr": 179, "y_j": 179, "alphabet": 179, "ldot": 179, "doe": [180, 237], "anti": [180, 237, 255], "alias": [180, 237, 255], "400": [180, 247], "x1": 180, "200": [180, 247, 252], "x2": 180, "130": 180, "x3": [180, 239], "spectrum": [180, 206, 207, 209, 211, 212, 213, 218, 234, 235, 237], "content": 180, "abov": [180, 237], "nyquist": [180, 205, 237, 253], "fold": 180, "cw": 180, "unalias": 180, "fft": [180, 211, 218, 234, 235, 237], "2048": [180, 234, 235, 237, 250], "xlim": [180, 237, 250, 251, 253], "qam": [181, 182, 184, 232], "249387366082999": [181, 182], "020599913279625": [181, 233], "750612633917001": [184, 232], "979400086720376": [184, 185], "system": [185, 196, 224, 233, 244, 246, 251, 254], "norm": [186, 189, 191, 227, 228, 230], "noiseless": 186, "sourc": 186, "max": [186, 200, 201], "instantan": 186, "percentil": [186, 209, 211, 218], "either": 186, "72631800082334": 186, "031794417585106": 186, "182": 186, "0799016396763": 186, "143": 186, "9716223858297": 186, "95th": 186, "95": 186, "68": [186, 192], "71518865383959": 186, "inst_evm": 186, "hist": 186, "histogram": 186, "frequency_offset": [187, 241, 255], "freq_rat": 187, "cycl": [187, 221], "5e": 187, "deg": [187, 193], "path": [188, 254], "loss": [188, 254], "distanc": 188, "meter": [188, 199, 238], "transmitt": 188, "far": 188, "field": 188, "neg": [188, 193], "impli": 188, "possibl": [188, 254], "so": [188, 189, 191, 227, 228, 230, 254], "km": 188, "link": [188, 254, 255], "ghz": [188, 199, 238], "1e3": [188, 195, 234], "1e9": [188, 199, 238], "92": 188, "44778322188337": 188, "doubl": [188, 199], "increas": [188, 199, 249], "2e3": 188, "98": 188, "468383135163": 188, "2e9": 188, "up": [188, 244], "product": [189, 253], "side": [189, 206, 207, 209, 211, 212, 213, 218, 248, 249, 250, 253], "thought": [189, 256], "smaller": [189, 227, 230, 253], "wider": 189, "how": [189, 191, 205, 214, 215, 221, 227, 228, 230, 246], "gaussdesign": 189, "onlinelibrari": 189, "wilei": 189, "doi": 189, "1002": 189, "9780470041956": 189, "app2": 189, "h_0p1": [189, 227, 230], "h_0p2": 189, "h_0p3": 189, "reason": [191, 228, 243], "larger": [191, 193, 204, 220, 228], "h_half_sin": 191, "displai": [192, 204, 206, 207, 209, 211, 212, 213, 218, 220], "line": [192, 221, 244, 250], "quick": 192, "brown": 192, "fox": 192, "jump": 192, "lazi": 192, "dog": 192, "00000000": 192, "65": 192, "71": 192, "75": [192, 204, 251, 252], "69": 192, "63": 192, "6b": 192, "72": 192, "6f": 192, "6e": 192, "00000010": 192, "66": 192, "78": 192, "6a": 192, "6d": 192, "73": 192, "74": 192, "00000020": 192, "6c": 192, "61": 192, "7a": 192, "79": 192, "67": 192, "he": 192, "02": [192, 249, 251], "03": [192, 249], "04": [192, 249], "00000004": 192, "05": [192, 247, 249, 251], "06": 192, "07": 192, "08": 192, "00000008": 192, "09": 192, "0a": 192, "iq_imbal": [193, 241, 255], "iq": [193, 241, 254], "imbal": [193, 241, 254], "posit": 193, "compon": [193, 234, 235, 237], "g_i": 193, "180": 193, "g_q": 193, "x_q": 193, "horizont": 193, "stretch": 193, "while": [193, 253], "vertic": 193, "northwest": 193, "northeast": 193, "50118723": 194, "36272725": 194, "9952623149688795": 194, "satisfi": 195, "cdot": 195, "remov": [195, 211, 218, 255], "half_length": 196, "a_stop": 196, "80": [196, 239], "stopband": [196, 227, 230], "attenu": [196, 227, 230], "a_": 196, "stop": 196, "fred": [196, 224], "harri": [196, 224], "dsp": [196, 254], "designmultiratefir": 196, "dtypelik": [197, 236], "most": [197, 236], "signific": [197, 236], "enough": 197, "fill": 197, "smallest": 197, "unsign": 197, "integ": 197, "diamet": 199, "55": 199, "eta": 199, "dbi": 199, "arcsin": 199, "83": 199, "dish": 199, "21": 199, "810210290266568": 199, "437435887991374": 199, "23": 199, "sinc": [199, 205, 243, 252], "antenna": [199, 254], "we": [199, 254], "observ": [199, 205], "830810203546193": 199, "529544741425365": 199, "keyword": [203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 248, 249], "pyplot": [203, 204, 207, 208, 209, 210, 211, 212, 213, 217, 218, 219, 220, 221, 222, 223, 247, 248, 249, 250, 251, 252, 253], "scatter": 204, "overwritten": [204, 215, 218, 220], "rang": [204, 251, 252], "hist2d": 204, "10_000": 204, "color": [205, 214, 215, 221, 250, 253], "imaginari": [205, 215, 221], "interleav": [205, 215], "base": [205, 214, 215, 221], "examin": 205, "intersymbol": 205, "interfer": 205, "isi": 205, "two": [205, 206, 207, 209, 211, 212, 213, 218, 239, 247, 248, 249], "cascad": 205, "why": 205, "often": [205, 247], "practic": 205, "n_time": [206, 249], "n_freq": 206, "x_axi": [206, 207, 209, 211, 212, 213, 218, 248, 249, 250, 251], "log": [206, 207, 209, 211, 212, 213, 248, 249, 251], "definit": [206, 207, 208, 209, 212, 213, 219, 223], "n_t": 206, "n_f": 206, "scale": [206, 207, 209, 211, 212, 213, 218, 248, 249], "option": [206, 207, 209, 211, 212, 213, 218], "h_srrc": [206, 207, 208, 209, 212, 213, 219, 221, 223, 252], "ylim": [207, 239, 248, 251, 252, 253], "48": 207, "52": 207, "10th": [209, 211, 218], "crop": [209, 211], "deep": [209, 211], "x_label": 210, "hann": [211, 218], "overlap": [211, 218, 250], "detrend": [211, 218], "median": 211, "segment": [211, 218], "256": [211, 218, 250], "point": [211, 218], "trend": [211, 218], "unwrap": [213, 251], "stride": 215, "colorbar": 215, "1d": 215, "determin": 215, "row": 215, "collect": 215, "linecollect": 215, "linewidth": [215, 239], "solid": [215, 221], "cmap": 215, "rainbow": 215, "loglog": 216, "pcolormesh": 218, "vmin": 218, "vmax": 218, "100th": 218, "shade": 218, "gouraud": 218, "markers": 220, "diff": [221, 250], "about": [221, 246], "mutual": 221, "exclus": 221, "current": [221, 245], "dash": 221, "share": 221, "10e3": 221, "revert": 222, "rcdefault": 222, "_rc_param": 222, "rc_param": 222, "autolayout": 222, "max_open_warn": 222, "titleweight": 222, "bold": 222, "arrang": 224, "down": 224, "column": 224, "notion": 224, "demonstr": 224, "18": [224, 243, 252], "19": 224, "000005": 225, "5000": [225, 226], "000000025": 225, "005": [226, 251], "000025": 226, "excess": [227, 230, 253], "narrow": [227, 230], "expens": [227, 230], "higher": [227, 230, 253], "h_0p5": [227, 230], "h_0p9": [227, 230], "affect": [227, 230], "longer": [227, 230, 234], "h_4": [227, 230], "h_8": [227, 230], "h_16": [227, 230], "h_rect": [228, 253], "sample_rate_offset": [231, 241, 255], "append": [234, 250], "250": [234, 235], "300": [234, 235], "ksp": [234, 235], "notic": [234, 235, 247, 253], "conjug": [234, 235, 249], "500": [234, 235, 251], "now": [234, 235, 247, 255], "150": [234, 235], "asymmetr": 235, "copi": 237, "299792458": 238, "zadoff_chu": [239, 240, 255], "zadoff": [239, 240, 254, 255], "chu": [239, 240, 254, 255], "prime": 239, "gcd": 239, "ne": 239, "cyclic": 239, "x_u": 239, "c_": 239, "2q": 239, "mod": 239, "e2": 239, "93chu_sequ": 239, "x_3": 239, "139": 239, "tile": 239, "x_5": 239, "x5": 239, "cross": 239, "xcorr": 239, "sphinx": 243, "immateri": 243, "theme": 243, "depend": [243, 244, 246], "store": [243, 245, 246], "txt": [243, 244, 245, 246], "some": 243, "below": [243, 248, 249], "version": [243, 245, 254], "aren": 243, "resolut": 243, "minut": 243, "ci": 243, "myst": 243, "parser": 243, "updat": 243, "git": [243, 245], "math": 243, "dollar": 243, "ipykernel": 243, "26": 243, "nb": 243, "pickleshar": 243, "switch": 243, "pip": [243, 244, 245, 246, 254], "python3": [243, 244, 245, 246, 254], "built": 243, "run": 243, "command": [243, 244], "dirhtml": 243, "locat": [243, 246], "home": 243, "page": 243, "directori": [243, 245], "get": 243, "necessari": 243, "webpag": 243, "webserv": 243, "easili": [243, 244, 246, 248, 249], "python": [243, 254], "server": 243, "8080": 243, "access": 243, "web": 243, "browser": 243, "localhost": 243, "librari": [244, 245, 246, 247, 252, 254, 256], "ruff": [244, 245], "lint": [244, 245], "your": [244, 246], "develop": [244, 245, 246], "dev": [244, 246], "pyproject": [244, 246], "toml": [244, 245, 246], "tool": [244, 246, 254], "src": 244, "extend": 244, "includ": [244, 245, 246, 254], "ipynb": 244, "exclud": 244, "build": [244, 254], "doc": 244, "_version": 244, "py": [244, 246], "120": 244, "select": 244, "pycodestyl": 244, "pyflak": 244, "pyupgrad": 244, "flake8": 244, "bugbear": 244, "simplifi": 244, "isort": 244, "ignor": 244, "e501": 244, "e713": 244, "e714": 244, "__init__": 244, "f401": 244, "f403": 244, "manual": [244, 246], "check": 244, "hook": 244, "config": [244, 247, 248, 249, 250, 251, 252, 253], "yaml": 244, "repo": [244, 245], "github": [244, 254], "rev": 244, "v2": 244, "id": 244, "larg": 244, "fixer": 244, "trail": 244, "whitespac": 244, "astral": 244, "sh": 244, "v0": 244, "enabl": 244, "disabl": 244, "uninstal": 244, "extens": 244, "vscode": [244, 246], "json": [244, 246], "you": [244, 245, 246, 254], "edit": [244, 249], "latest": [245, 254], "releas": [245, 255], "main": [245, 253], "branch": 245, "mhostett": [245, 255], "Or": [245, 246], "pre": 245, "To": 245, "activ": 245, "benefici": 245, "fashion": 245, "allow": [245, 246], "chang": [245, 256], "immedi": 245, "seen": 245, "upon": 245, "next": 245, "clone": 245, "wherev": 245, "flag": 245, "packag": [245, 254], "commit": 245, "pytest": [245, 246], "cov": 245, "xdist": 245, "benchmark": 245, "ini_opt": 246, "minvers": 246, "addopt": 246, "showloc": 246, "testpath": 246, "execut": 246, "test_psk": 246, "instruct": 246, "invok": 246, "infrastructur": 246, "debug": 246, "inlinebackend": [247, 248, 249, 250, 251, 252, 253], "print_figure_kwarg": [247, 248, 249, 250, 251, 252, 253], "facecolor": [247, 248, 249, 250, 251, 252, 253], "widget": [247, 248, 249, 250, 251, 252, 253], "tx": 247, "decai": [247, 249], "fillstyl": 247, "show": [247, 248, 249, 250, 251, 252, 253], "accomplish": [247, 252], "def": [247, 250, 252], "resample_sign": 247, "new_sample_r": 247, "ty": 247, "gca": [247, 252], "set_prop_cycl": [247, 252], "four": 247, "appear": 247, "fourth": 247, "do": 247, "315": 247, "32": 247, "00095883": 248, "00175012": 248, "00423921": 248, "0058825": 248, "006151": 248, "00474595": 248, "0017044": 248, "00254816": 248, "00721645": 248, "0112324": 248, "01342358": 248, "01273202": 248, "00845058": 248, "0004368": 248, "01073669": 248, "02372977": 248, "03650247": 248, "04650654": 248, "05098525": 248, "04734644": 248, "03355896": 248, "00851486": 248, "02769991": 248, "07367348": 248, "12670447": 248, "1830132": 248, "23810898": 248, "28727058": 248, "3260799": 248, "3509384": 248, "35949665": 248, "conveni": [248, 249], "evalu": [248, 249], "here": [248, 249], "47820725": 249, "78207252e": 249, "58172329e": 249, "10862468e": 249, "86109590e": 249, "21565653e": 249, "01140214e": 249, "57286400e": 249, "67772160e": 249, "47338728e": 249, "10422993e": 249, "89312837e": 249, "12240078e": 249, "03953322e": 249, "69685122e": 249, "63882791e": 249, "81474977e": 249, "47193366e": 249, "85259041e": 249, "15647504e": 249, "23851924e": 249, "42176895e": 249, "84684395e": 249, "42721858e": 249, "72236648e": 249, "14721649e": 249, "10813095e": 249, "94024315e": 249, "78877688e": 249, "74077567e": 249, "87820725": 249, "53637958": 249, "94724205": 249, "13335164": 249, "1455082": 249, "04436799": 249, "88708159": 249, "71930943": 249, "5719707": 249, "46154771": 249, "39261642": 249, "36139242": 249, "35935288": 249, "3763214": 249, "40270968": 249, "43085717": 249, "45557651": 249, "47410241": 249, "48566716": 249, "49090568": 249, "49124786": 249, "48840102": 249, "4839738": 249, "47925143": 249, "47510421": 249, "47199608": 249, "47005584": 249, "46917696": 249, "46911955": 249, "denomin": 249, "73910363": 249, "30614675j": 249, "plane": 249, "endpoint": 249, "092337035029908": 249, "71104892744724": 249, "684365018955985": 249, "37868538208862": 249, "1263714068241546": 249, "9993519409971622": 249, "1909320767063554": 249, "016796159999999997": 249, "46380627201679264": 249, "3806359704987118j": 249, "4988817673846036": 249, "333342139809402j": 249, "5543277195082319": 249, "22961005941718524j": 249, "5291527586053246": 249, "2828380420991956j": 249, "lyon": 249, "understand": 249, "3rd": 249, "insid": 249, "outsid": 249, "unstabl": 249, "n_symbol": 250, "els": 250, "pb": 250, "x_bb_rect": 250, "papr_bb_rect": 250, "x_pb_rect": 250, "papr_pb_rect": 250, "x_bb_0p1": 250, "papr_bb_0p1": 250, "x_pb_0p1": 250, "papr_pb_0p1": 250, "x_bb_0p5": 250, "papr_bb_0p5": 250, "x_pb_0p5": 250, "papr_pb_0p5": 250, "x_bb_0p9": 250, "papr_bb_0p9": 250, "x_pb_0p9": 250, "papr_pb_0p9": 250, "2f": 250, "rf": [250, 251], "512": 250, "sweep_alpha": 250, "bb_papr": 250, "pb_papr": 250, "bpsk_bb_papr": 250, "bpsk_pb_papr": 250, "qpsk_bb_papr": 250, "qpsk_pb_papr": 250, "psk8_bb_papr": 250, "psk8_pb_papr": 250, "psk16_bb_papr": 250, "psk16_pb_papr": 250, "configur": 251, "loop_filt": 251, "0x000002276d2bcc08": 251, "theta_0": 251, "phase_error": 251, "freq_estim": 251, "suptitl": [251, 252], "avail": [251, 252, 254], "001": 251, "b_nt": 251, "0005": 251, "0125": 251, "015": 251, "0175": 251, "t_lock": 251, "analyze_psk": 252, "100_000": 252, "n0": 252, "tx_mf": 252, "1e6": 252, "bpsk_ber": 252, "bpsk_ser": 252, "qpsk_ber": 252, "qpsk_ser": 252, "psk8_ber": 252, "psk8_ser": 252, "psk16_ber": 252, "psk16_ser": 252, "simul": [252, 254], "1e0": 252, "psk8_bin": 252, "psk8_grai": 252, "wors": 252, "rc_0p1": 253, "rc_0p5": 253, "rc_0p9": 253, "pm": 253, "60": 253, "nearli": 253, "small": 253, "lobe": 253, "much": 253, "freqz": 253, "worn": 253, "whole": 253, "h_rc_0p1": 253, "h_rc_0p5": 253, "h_rc_0p9": 253, "p_rect": 253, "cumsum": 253, "p_rc_0p1": 253, "p_rc_0p5": 253, "p_rc_0p9": 253, "within": 253, "srrc_0p1": 253, "srrc_0p5": 253, "srrc_0p9": 253, "therefor": 253, "significantli": 253, "due": 253, "being": 253, "h_srrc_0p1": 253, "h_srrc_0p5": 253, "h_srrc_0p9": 253, "p_srrc_0p1": 253, "p_srrc_0p5": 253, "p_srrc_0p9": 253, "gauss_0p1": 253, "gauss_0p2": 253, "gauss_0p3": 253, "softwar": 254, "radio": 254, "goal": 254, "analyz": 254, "reli": 254, "interoper": 254, "veri": 254, "numba": 254, "acceler": 254, "computation": 254, "intens": 254, "addition": 254, "aim": 254, "replic": 254, "relev": 254, "matlab": 254, "toolbox": 254, "progress": 254, "someth": 254, "pleas": 254, "open": 254, "issu": 254, "pypi": 254, "api": [254, 256], "convers": [254, 255], "synchron": 254, "budget": [254, 255], "manipul": 254, "septemb": 255, "2023": 255, "sensibl": 255, "matt": 255, "hostett": 255, "august": 255, "27": 255, "without": 255, "abil": 255, "improv": 255, "renam": 255, "superflu": 255, "replac": 255, "translat": 255, "fix": [255, 256], "juli": 255, "firinterpol": 255, "model": 255, "impair": 255, "fpsl": 255, "helper": 255, "semant": 256, "major": 256, "minor": 256, "patch": 256, "introduc": 256, "featur": 256, "backward": 256, "compat": 256, "make": 256, "bug": 256, "There": 256, "guarante": 256, "them": 256, "thei": 256}, "objects": {"": [[3, 0, 0, 1, "sdr", ""]], "sdr": [[9, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [26, 1, 1, "", "DDS", "Implements a direct digital synthesizer (DDS)."], [32, 1, 1, "", "Decimator", "Implements a polyphase finite impulse response (FIR) decimating filter."], [42, 1, 1, "", "EnergyDetector", "Implements an energy detector."], [47, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [54, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [71, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [78, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [97, 1, 1, "", "Interpolator", "Implements a polyphase finite impulse response (FIR) interpolating filter."], [107, 1, 1, "", "LinearModulation", "Implements linear phase/amplitude modulation with arbitrary symbol mapping."], [125, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [134, 1, 1, "", "MSK", "Implements minimum-shift keying (MSK) modulation and demodulation."], [136, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [144, 1, 1, "", "OQPSK", "Implements offset quadrature phase-shift keying (OQPSK) modulation and demodulation."], [148, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [156, 1, 1, "", "PiMPSK", "Implements $pi/M$ phase-shift keying ($pi/M$ PSK) modulation and demodulation."], [158, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [159, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [160, 1, 1, "", "ReplicaCorrelator", "Implements an clairvoyant replica-correlator detector."], [165, 5, 1, "", "albersheim", "Estimates the minimum required single-sample SNR, given $N_{NC}$ non-coherent combinations, to achieve a probability of detection $P_D$ and probability of false alarm $P_{FA}$. This function implements Albersheim's equation."], [166, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [167, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [168, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [169, 5, 1, "", "barker", "Returns the Barker code/sequence of length $N$."], [170, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [171, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [172, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [173, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [174, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [175, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [176, 5, 1, "", "db", "Converts from linear units to decibels."], [177, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [178, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [179, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [180, 5, 1, "", "downsample", "Downsamples the time-domain signal $x[n]$ by the factor $r$."], [181, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [182, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [183, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [184, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [185, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [186, 5, 1, "", "evm", "Calculates the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [187, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [188, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [189, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [190, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [191, 5, 1, "", "half_sine", "Returns a half-sine pulse shape."], [192, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [193, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [194, 5, 1, "", "linear", "Converts from decibels to linear units."], [195, 5, 1, "", "mix", "Mixes the time-domain signal $x[n]$ with a complex exponential or real sinusoid."], [196, 5, 1, "", "multirate_taps", "Computes the multirate FIR filter that achieves rational resampling by $P/Q$."], [197, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [198, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [199, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [200, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [201, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [202, 5, 1, "", "percent", "Converts from a ratio to a percentage."], [224, 5, 1, "", "polyphase_matrix", "Converts the multirate FIR filter taps $h_i$ into the polyphase matrix $H_{i, j}$ that achieves rational resampling by $P/Q$."], [225, 5, 1, "", "ppb", "Converts from a ratio to parts per billion (ppb)."], [226, 5, 1, "", "ppm", "Converts from a ratio to parts per million (ppm)."], [227, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [228, 5, 1, "", "rectangular", "Returns a rectangular pulse shape."], [229, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [230, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [231, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [232, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [233, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [234, 5, 1, "", "to_complex_bb", "Converts the real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$ to a complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c} = f_{s,r}/2$."], [235, 5, 1, "", "to_real_pb", "Converts the complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$ to a real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r} = 2f_{s,c}$."], [236, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [237, 5, 1, "", "upsample", "Upsamples the time-domain signal $x[n]$ by the factor $r$."], [238, 5, 1, "", "wavelength", "Calculates the wavelength $lambda$ of an electromagnetic wave with frequency $f$."], [239, 5, 1, "", "zadoff_chu", "Returns the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.ClosedLoopPLL": [[10, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [11, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [12, 2, 1, "", "K0", "The NCO gain $K_0$."], [13, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [14, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [15, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [16, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [17, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [18, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [19, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [20, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [21, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [22, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [23, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [24, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [25, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[16, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [16, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [16, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [16, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [16, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[17, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[19, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[22, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.DDS": [[27, 3, 1, "", "__call__", "Steps the DDS with the variable phase increment signal $x[n]$."], [28, 3, 1, "", "__init__", "Creates a direct digital synthesizer (DDS)."], [29, 2, 1, "", "nco", "The numerically-controlled oscillator (NCO) used by the DDS."], [30, 3, 1, "", "reset", "Resets the DDS."], [31, 3, 1, "", "step", "Steps the DDS forward by $N$ samples."]], "sdr.DDS.__call__": [[27, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the DDS."]], "sdr.DDS.__init__": [[28, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [28, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [28, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.DDS.step": [[31, 4, 2, "p-N", "N", "The number of samples $N$ to step the DDS forward."]], "sdr.Decimator": [[33, 3, 1, "", "__call__", "Filters and decimates the input signal $x[n]$ with the polyphase FIR filter."], [34, 3, 1, "", "__init__", "Creates a polyphase FIR decimating filter."], [35, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [36, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [37, 2, 1, "", "method", "The method used to design the multirate filter."], [38, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [39, 2, 1, "", "rate", "The decimation rate $r$."], [40, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [41, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Decimator.__call__": [[33, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [33, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Decimator.__init__": [[34, 4, 2, "p-rate", "rate", "The decimation rate $r$."], [34, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [34, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.EnergyDetector": [[43, 3, 1, "", "p_d", "Computes the probability of detection $P_D$."], [44, 3, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [45, 3, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [46, 3, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.EnergyDetector.p_d": [[43, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [43, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [43, 4, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.p_fa": [[44, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [44, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [44, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [44, 4, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.EnergyDetector.roc": [[45, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [45, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [45, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."], [45, 4, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.threshold": [[46, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [46, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [46, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [46, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.ErrorRate": [[48, 3, 1, "", "__init__", "Creates a new error rate tabulation object."], [49, 3, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [50, 3, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [51, 3, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [52, 3, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [53, 3, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[49, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [49, 4, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [49, 4, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[50, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[51, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[53, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[55, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the FIR filter."], [56, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [57, 3, 1, "", "__len__", "Returns the filter length $N + 1$."], [58, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [59, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [60, 2, 1, "", "delay", "The delay of the FIR filter $d = lfloor frac{N + 1}{2} rfloor$ in samples."], [61, 3, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [62, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the FIR filter."], [63, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(omega)$ of the FIR filter on a logarithmic frequency axis."], [64, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [65, 2, 1, "", "order", "The order of the FIR filter $N$."], [66, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [67, 2, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [68, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [69, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [70, 2, 1, "", "taps", "The feedforward taps $h_i$ for $i = 0,...,N$."]], "sdr.FIR.__call__": [[55, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [55, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.FIR.__init__": [[56, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$ for $i = 0,...N$."], [56, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FIR.frequency_response": [[62, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [62, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.frequency_response_log": [[63, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [63, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [63, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[64, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.step_response": [[68, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FarrowResampler": [[72, 3, 1, "", "__call__", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [73, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [74, 2, 1, "", "order", "The order of the filter."], [75, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [76, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [77, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__call__": [[72, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [72, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.__init__": [[73, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FarrowResampler.reset": [[75, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[79, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [80, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the IIR filter."], [81, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [82, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [83, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [84, 2, 1, "", "a_taps", "The feedback taps $a_j$ for $j = 0,...,N$."], [85, 2, 1, "", "b_taps", "The feedforward taps $b_i$ for $i = 0,...,M$."], [86, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the IIR filter."], [87, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(omega)$ of the IIR filter on a logarithmic frequency axis."], [88, 2, 1, "", "gain", "The gain of the IIR filter."], [89, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [90, 2, 1, "", "order", "The order of the IIR filter $N$."], [91, 2, 1, "", "poles", "The poles of the IIR filter."], [92, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [93, 2, 1, "", "state", "The filter state."], [94, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [95, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [96, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[79, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [79, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [79, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."], [79, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__call__": [[80, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.IIR.__init__": [[81, 4, 2, "p-a", "a", "The feedback coefficients $a_j$ for $j = 0,...,N$."], [81, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$ for $i = 0,...,M$."], [81, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.IIR.frequency_response": [[86, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [86, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[87, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [87, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [87, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[89, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[94, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.Interpolator": [[98, 3, 1, "", "__call__", "Interpolates and filters the input signal $x[n]$ with the polyphase FIR filter."], [99, 3, 1, "", "__init__", "Creates a polyphase FIR interpolating filter."], [100, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [101, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [102, 2, 1, "", "method", "The method used to design the multirate filter."], [103, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [104, 2, 1, "", "rate", "The interpolation rate $r$."], [105, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [106, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Interpolator.__call__": [[98, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [98, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Interpolator.__init__": [[99, 4, 2, "p-rate", "rate", "The interpolation rate $r$."], [99, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [99, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.LinearModulation": [[108, 3, 1, "", "__init__", "Creates a new linear phase/amplitude modulation object."], [109, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [110, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [111, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [112, 2, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [113, 3, 1, "", "decide_symbols", "Converts the received complex symbols $hat{a}[k]$ into decimal symbol decisions $hat{s}[k]$ using maximum-likelihood estimation (MLE)."], [114, 3, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples $hat{x}[n]$ into decimal symbol decisions $hat{s}[k]$ using matched filtering and maximum-likelihood estimation."], [115, 3, 1, "", "map_symbols", "Converts the decimal symbols $s[k]$ to complex symbols $a[k]$."], [116, 3, 1, "", "modulate", "Modulates the decimal symbols $s[k]$ into pulse-shaped complex samples $x[n]$."], [117, 2, 1, "", "order", "The modulation order $M = 2^k$."], [118, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [119, 2, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [120, 2, 1, "", "rx_filter", "The receive decimating matched filter. The filter coefficients are matched to the pulse shape $h[-n]^*$."], [121, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [122, 2, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [123, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."], [124, 2, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter. The filter coefficients are the pulse shape $h[n]$."]], "sdr.LinearModulation.__init__": [[108, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [108, 4, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees to apply to symbol_map."], [108, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [108, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [108, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [108, 4, 2, "p-symbol_map", "symbol_map", "The symbol mapping ${0, dots, M-1} mapsto mathbb{C}$. An $M$-length array whose indices are decimal symbols $s[k]$ and whose values are complex symbols $a[k]$, where $M$ is the modulation order."]], "sdr.LinearModulation.ber": [[111, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.LinearModulation.decide_symbols": [[113, 4, 2, "p-a_hat", "a_hat", "The received complex symbols $hat{a}[k]$."]], "sdr.LinearModulation.demodulate": [[114, 4, 2, "p-x_hat", "x_hat", "The received pulse-shaped complex samples $hat{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.LinearModulation.map_symbols": [[115, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to map, $0$ to $M-1$."]], "sdr.LinearModulation.modulate": [[116, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.LinearModulation.ser": [[121, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.LoopFilter": [[126, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [127, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [128, 3, 1, "", "__call__", "Filters the input signal $x[n]$."], [129, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [130, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [131, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [132, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [133, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__call__": [[128, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.LoopFilter.__init__": [[129, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [129, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [129, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [129, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.MSK": [[135, 3, 1, "", "__init__", "Creates a new MSK object."]], "sdr.MSK.__init__": [[135, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [135, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [135, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.NCO": [[137, 2, 1, "", "K0", "The NCO gain $K_0$."], [138, 3, 1, "", "__call__", "Steps the NCO with the variable-increment signal $x[n]$."], [139, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [140, 2, 1, "", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [141, 2, 1, "", "offset", "The absolute offset $theta$ of the NCO in units."], [142, 3, 1, "", "reset", "Resets the NCO."], [143, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__call__": [[138, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the NCO."]], "sdr.NCO.__init__": [[139, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [139, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [139, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in units."]], "sdr.NCO.step": [[143, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.OQPSK": [[145, 3, 1, "", "__init__", "Creates a new OQPSK object."], [146, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [147, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."]], "sdr.OQPSK.__init__": [[145, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [145, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [145, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [145, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [145, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [145, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK": [[149, 3, 1, "", "__init__", "Creates a new PSK object."], [150, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [151, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [152, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [153, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [154, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [155, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[149, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [149, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [149, 4, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [149, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [149, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [149, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [149, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[152, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [152, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.ser": [[154, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [154, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.PiMPSK": [[157, 3, 1, "", "__init__", "Creates a new $pi/M$ PSK object."]], "sdr.PiMPSK.__init__": [[157, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [157, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [157, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [157, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [157, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [157, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [157, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.Q": [[158, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[159, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.ReplicaCorrelator": [[161, 3, 1, "", "p_d", "Computes the probability of detection $P_D$."], [162, 3, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [163, 3, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [164, 3, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.ReplicaCorrelator.p_d": [[161, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [161, 4, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [161, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."]], "sdr.ReplicaCorrelator.p_fa": [[162, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [162, 4, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [162, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [162, 4, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.ReplicaCorrelator.roc": [[163, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [163, 4, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [163, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."]], "sdr.ReplicaCorrelator.threshold": [[164, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [164, 4, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [164, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [164, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.albersheim": [[165, 4, 2, "p-N_nc", "N_nc", "The number of non-coherent combinations $N_{NC} ge 1$."], [165, 4, 2, "p-p_d", "p_d", "The desired probability of detection $P_D$ in $(0, 1)$."], [165, 4, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{FA}$ in $(0, 1)$."]], "sdr.average_power": [[166, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the average power. The default is None, which computes the average power of the entire array."], [166, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [166, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[167, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [167, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [167, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [167, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[168, 4, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [168, 4, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.barker": [[169, 4, 2, "p-length", "length", "The length $N$ of the Barker code/sequence."], [169, 4, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[170, 4, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [170, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [170, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[171, 4, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[172, 4, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[173, 4, 2, "p-p", "p", "The probability $p$ of a bit flip."], [173, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [173, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[174, 4, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[175, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.db": [[176, 4, 2, "p-type", "type", "The type of input value or signal."], [176, 4, 2, "p-x", "x", "The input value or signal."]], "sdr.diff_decode": [[177, 4, 2, "p-y", "y", "The input encoded data $y[k]$."], [177, 4, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[178, 4, 2, "p-x", "x", "The input uncoded data $x[k]$."], [178, 4, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[179, 4, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [179, 4, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [179, 4, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [179, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [179, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.downsample": [[180, 4, 2, "p-rate", "rate", "The downsampling factor $r$."], [180, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.ebn0_to_esn0": [[181, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [181, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [181, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[182, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [182, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [182, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [182, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[183, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the energy. The default is None, which computes the energy of the entire array."], [183, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [183, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[184, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [184, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [184, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[185, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [185, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.evm": [[186, 4, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [186, 4, 2, "p-output", "output", "The output type of the EVM calculation."], [186, 4, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [186, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.frequency_offset": [[187, 4, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [187, 4, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [187, 4, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [187, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [187, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[188, 4, 2, "p-d", "d", "The distance $d$ in meters between the transmitter and receiver."], [188, 4, 2, "p-f", "f", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[189, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [189, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [189, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [189, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[190, 4, 2, "p-n", "n", "The length of the Gray code."]], "sdr.half_sine": [[191, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [191, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [191, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.hexdump": [[192, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [192, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[193, 4, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [193, 4, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [193, 4, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.linear": [[194, 4, 2, "p-type", "type", "The type of output value or signal."], [194, 4, 2, "p-x", "x", "The input value or signal in dB."]], "sdr.mix": [[195, 4, 2, "p-complex", "complex", "Indicates whether to mix by a complex exponential or real sinusoid."], [195, 4, 2, "p-freq", "freq", "The frequency $f$ of the sinusoid in Hz (or 1/samples if sample_rate=1). The frequency must satisfy $-f_s/2 le f le f_s/2$."], [195, 4, 2, "p-phase", "phase", "The phase $phi$ of the sinusoid in degrees."], [195, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal."], [195, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.multirate_taps": [[196, 4, 2, "p-A_stop", "A_stop", "The stopband attenuation $A_{text{stop}}$ in dB."], [196, 4, 2, "p-P", "P", "The interpolation rate $P$."], [196, 4, 2, "p-Q", "Q", "The decimation rate $Q$."], [196, 4, 2, "p-half_length", "half_length", "The half-length of the polyphase filters."]], "sdr.pack": [[197, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [197, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [197, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[198, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the PAPR. The default is None, which computes the PAPR of the entire array."], [198, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[199, 4, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [199, 4, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [199, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[200, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the peak power. The default is None, which computes the peak power of the entire array."], [200, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [200, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[201, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [201, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.percent": [[202, 4, 2, "p-x", "x", "The input ratio."]], "sdr.plot": [[203, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [204, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [205, 5, 1, "", "eye", "Plots the eye diagram of the baseband modulated signal $x[n]$."], [206, 5, 1, "", "filter", "Plots the magnitude response $|H(omega)|^2$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [207, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [208, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [209, 5, 1, "", "magnitude_response", "Plots the magnitude response $|H(omega)|^2$ of the filter."], [210, 5, 1, "", "p_d", "Plots the probability of detection $P_D$ as a function of received SNR or ENR."], [211, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [212, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [213, 5, 1, "", "phase_response", "Plots the phase response $angle H(omega)$ of the filter."], [214, 5, 1, "", "phase_tree", "Plots the phase tree of a continuous-phase modulated (CPM) signal signal $x[n]$."], [215, 5, 1, "", "raster", "Plots a raster of the time-domain signal $x[n]$."], [216, 5, 1, "", "roc", "Plots the receiver operating characteristic (ROC) curve as a function of $P_{FA}$."], [217, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [218, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [219, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [220, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [221, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [222, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [223, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[203, 4, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [203, 4, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."], [203, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."]], "sdr.plot.constellation": [[204, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [204, 4, 2, "p-kwargs", "kwargs", "If heatmap=False, additional keyword arguments to pass to matplotlib.pyplot.scatter(). The following keyword arguments are set by default. The defaults may be overwritten."], [204, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [204, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.eye": [[205, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [205, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [205, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [205, 4, 2, "p-span", "span", "The number of symbols per raster."], [205, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [205, 4, 2, "p-x", "x", "The baseband modulated signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved."]], "sdr.plot.filter": [[206, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [206, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [206, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [206, 4, 2, "p-filter", "filter", "The filter definition."], [206, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [206, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[207, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [207, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [207, 4, 2, "p-filter", "filter", "The filter definition."], [207, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [207, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [207, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.impulse_response": [[208, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [208, 4, 2, "p-filter", "filter", "The filter definition."], [208, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.magnitude_response": [[209, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [209, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [209, 4, 2, "p-filter", "filter", "The filter definition."], [209, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [209, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [209, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.p_d": [[210, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [210, 4, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [210, 4, 2, "p-x", "x", "The SNR or ENR in dB."], [210, 4, 2, "p-x_label", "x_label", "The x-axis label to use."]], "sdr.plot.periodogram": [[211, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [211, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [211, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [211, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [211, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [211, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [211, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [211, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [211, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [211, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_delay": [[212, 4, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [212, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [212, 4, 2, "p-filter", "filter", "The filter definition."], [212, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [212, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [212, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_response": [[213, 4, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [213, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [213, 4, 2, "p-filter", "filter", "The filter definition."], [213, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [213, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [213, 4, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [213, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_tree": [[214, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [214, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [214, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [214, 4, 2, "p-span", "span", "The number of symbols per raster."], [214, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [214, 4, 2, "p-x", "x", "The baseband CPM signal $x[n]$."]], "sdr.plot.raster": [[215, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [215, 4, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\"."], [215, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.collections.LineCollection. The following keyword arguments are set by default. The defaults may be overwritten."], [215, 4, 2, "p-length", "length", "The length of each raster in samples. This must be provided if x is 1D."], [215, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [215, 4, 2, "p-stride", "stride", "The stride between each raster in samples. If None, the stride is set to length."], [215, 4, 2, "p-x", "x", "The time-domain signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved. If x is 1D, the rastering is determined by length and stride. If x is 2D, the rows correspond to each raster."]], "sdr.plot.roc": [[216, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to the plotting function defined by type."], [216, 4, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [216, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [216, 4, 2, "p-type", "type", "The type of plot to generate."]], "sdr.plot.ser": [[217, 4, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [217, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."], [217, 4, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.spectrogram": [[218, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [218, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [218, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.pcolormesh(). The following keyword arguments are set by default. The defaults may be overwritten."], [218, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [218, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [218, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [218, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [218, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [218, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[219, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [219, 4, 2, "p-filter", "filter", "The filter definition."], [219, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.symbol_map": [[220, 4, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [220, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot(). The following keyword arguments are set by default. The defaults may be overwritten."], [220, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [220, 4, 2, "p-modulation", "modulation", "The linear modulation or symbol map ${0, dots, M-1} mapsto mathbb{C}$."]], "sdr.plot.time_domain": [[221, 4, 2, "p-centered", "centered", "Indicates whether to center the x-axis about 0. This argument is mutually exclusive with offset."], [221, 4, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal. If \"color\", the real and imaginary parts will have different colors based on the current Matplotlib color cycle. If \"line\", the real part will have a solid line and the imaginary part will have a dashed line, and both lines will share the same color."], [221, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [221, 4, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. The units of the offset are $1/f_s$. This argument is mutually exclusive with centered."], [221, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [221, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[223, 4, 2, "p-filter", "filter", "The filter definition."], [223, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.polyphase_matrix": [[224, 4, 2, "p-P", "P", "The interpolation rate $P$."], [224, 4, 2, "p-Q", "Q", "The decimation rate $Q$."], [224, 4, 2, "p-taps", "taps", "The multirate FIR filter taps $h_i$."]], "sdr.ppb": [[225, 4, 2, "p-x", "x", "The input ratio."]], "sdr.ppm": [[226, 4, 2, "p-x", "x", "The input ratio."]], "sdr.raised_cosine": [[227, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [227, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [227, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [227, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rectangular": [[228, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [228, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [228, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[229, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [229, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[230, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [230, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [230, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [230, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[231, 4, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [231, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.snr_to_ebn0": [[232, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [232, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [232, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [232, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[233, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [233, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.to_complex_bb": [[234, 4, 2, "p-x_r", "x_r", "The real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$. If the length is odd, one zero is appended to the end."]], "sdr.to_real_pb": [[235, 4, 2, "p-x_c", "x_c", "The complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$."]], "sdr.unpack": [[236, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [236, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [236, 4, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.upsample": [[237, 4, 2, "p-rate", "rate", "The upsampling factor $r$."], [237, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.wavelength": [[238, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.zadoff_chu": [[239, 4, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [239, 4, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence. The root must be relatively prime to the length, i.e., $gcd(u, N) = 1$."], [239, 4, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence. When $q ne 0$, the returned sequence is a cyclic shift of the root-$u$ Zadoff-Chu sequence."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"convers": 0, "decibel": 0, "ratio": 0, "from": [0, 244, 245, 246], "e_b": 0, "n_0": 0, "e_": 0, "": [0, 248, 249], "n": [0, 247, 248, 249], "data": 1, "manipul": [1, 3], "detect": [2, 7], "detector": 2, "theoret": 2, "limit": 2, "digit": [3, 249], "signal": [3, 241, 247, 250], "process": 3, "filter": [3, 7, 248, 249, 251], "multir": 3, "resampl": [3, 247], "correl": 3, "link": 4, "budget": 4, "channel": [4, 241], "capac": 4, "path": 4, "loss": 4, "antenna": 4, "measur": 5, "energi": 5, "power": [5, 250], "voltag": 5, "modul": [5, 6, 7], "linear": 6, "continu": 6, "phase": [6, 251, 252], "orthogon": 6, "puls": [6, 250, 253], "shape": [6, 250, 253], "symbol": [6, 252], "map": [6, 252], "encod": 6, "plot": [7, 250], "configur": [7, 244, 246], "time": [7, 250, 251], "domain": [7, 250, 251], "frequenc": [7, 248, 249, 250, 251], "spectral": 7, "estim": 7, "analysi": 7, "probabl": 8, "note": [9, 188, 196, 209, 211, 218], "constructor": [9, 26, 32, 47, 54, 71, 78, 97, 107, 125, 134, 136, 144, 148, 156], "method": [9, 26, 32, 42, 47, 54, 71, 78, 97, 107, 125, 134, 136, 144, 148, 156, 160], "properti": [9, 26, 32, 54, 71, 78, 97, 107, 125, 134, 136, 144, 148, 156], "see": [26, 47, 49, 62, 63, 64, 68, 86, 87, 89, 94, 108, 111, 121, 135, 136, 145, 149, 152, 154, 157, 158, 159, 175, 198, 237], "also": [26, 47, 49, 62, 63, 64, 68, 86, 87, 89, 94, 108, 111, 121, 135, 136, 145, 149, 152, 154, 157, 158, 159, 175, 198, 237], "special": [26, 32, 54, 71, 78, 97, 125, 136], "string": [32, 54, 78, 97, 107, 134, 144, 148, 156], "represent": [32, 54, 78, 97, 107, 134, 144, 148, 156], "stream": [32, 54, 78, 97], "mode": [32, 54, 78, 97], "onli": [32, 54, 78, 97], "warn": [180, 237], "sequenc": 240, "simul": 241, "model": 241, "impair": 241, "synchron": 242, "document": 243, "instal": [243, 244, 245, 246, 254], "build": 243, "doc": 243, "serv": 243, "format": 244, "run": [244, 246], "linter": 244, "formatt": 244, "pre": 244, "commit": 244, "v": [244, 246], "code": [244, 246], "pypi": 245, "github": 245, "edit": 245, "local": 245, "folder": 245, "dev": 245, "depend": 245, "unit": 246, "test": 246, "command": 246, "line": 246, "farrow": 247, "arbitrari": 247, "construct": 247, "an": [247, 248, 249], "input": 247, "x": 247, "t_": 247, "rate": [247, 252], "r": 247, "y": 247, "frac": 247, "upsampl": 247, "integ": 247, "downsampl": 247, "irrat": 247, "fir": 248, "creat": [248, 249], "examin": [248, 249, 250], "impuls": [248, 249], "respons": [248, 249, 251], "h": [248, 249], "step": [248, 249, 251], "omega": [248, 249], "group": [248, 249], "delai": [248, 249], "tau_g": [248, 249], "fulli": [248, 249], "analyz": [248, 249, 251], "iir": 249, "zero": 249, "pole": 249, "stabil": 249, "peak": 250, "averag": 250, "qpsk": [250, 252], "variou": 250, "across": [250, 251], "excess": 250, "bandwidth": 250, "lock": 251, "loop": 251, "design": 251, "proport": 251, "plu": 251, "integr": 251, "ppi": 251, "implement": 251, "pll": 251, "close": 251, "perform": 251, "compar": 251, "zeta": 251, "b_n": 251, "t": 251, "shift": 252, "kei": 252, "constel": 252, "bpsk": 252, "8": [252, 255], "psk": 252, "16": 252, "error": 252, "curv": 252, "bit": 252, "rais": 253, "cosin": 253, "squar": 253, "root": 253, "gaussian": 253, "sdr": 254, "featur": 254, "v0": 255, "0": 255, "chang": 255, "contributor": 255, "7": 255, "6": 255, "5": 255, "4": 255, "3": 255, "2": 255, "1": 255, "version": 256, "alpha": 256, "releas": 256, "beta": 256}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Conversions": [[0, "conversions"]], "Decibels": [[0, "decibels"]], "Ratios": [[0, "ratios"]], "From E_b/N_0": [[0, "from-e-b-n-0"]], "From E_s/N_0": [[0, "from-e-s-n-0"]], "From S/N": [[0, "from-s-n"]], "Data manipulation": [[1, "data-manipulation"]], "Detection": [[2, "detection"], [7, "detection"]], "Detectors": [[2, "detectors"]], "Theoretical limits": [[2, "theoretical-limits"]], "Digital signal processing": [[3, "digital-signal-processing"]], "Filtering": [[3, "filtering"]], "Multirate filtering": [[3, "multirate-filtering"]], "Resampling": [[3, "resampling"]], "Correlation": [[3, "correlation"]], "Signal manipulation": [[3, "signal-manipulation"]], "Link budgets": [[4, "link-budgets"]], "Channel capacity": [[4, "channel-capacity"]], "Path losses": [[4, "path-losses"]], "Antennas": [[4, "antennas"]], "Measurement": [[5, "measurement"]], "Energy": [[5, "energy"]], "Power": [[5, "power"]], "Voltage": [[5, "voltage"]], "Modulation": [[5, "modulation"], [6, "modulation"], [7, "modulation"]], "Linear modulations": [[6, "linear-modulations"]], "Continuous-phase modulations": [[6, "continuous-phase-modulations"]], "Orthogonal modulations": [[6, "orthogonal-modulations"]], "Pulse shaping": [[6, "pulse-shaping"]], "Symbol mapping": [[6, "symbol-mapping"], [252, "symbol-mapping"]], "Symbol encoding": [[6, "symbol-encoding"]], "Plotting": [[7, "plotting"]], "Configuration": [[7, "configuration"], [244, "configuration"], [246, "configuration"]], "Time-domain": [[7, "time-domain"]], "Frequency-domain": [[7, "frequency-domain"]], "Spectral estimation": [[7, "spectral-estimation"]], "Filter analysis": [[7, "filter-analysis"]], "Probability": [[8, "probability"]], "Note": [[9, null], [188, null], [196, null], [209, null], [211, null], [211, null], [218, null]], "Constructors": [[9, "constructors"], [26, "constructors"], [32, "constructors"], [47, "constructors"], [54, "constructors"], [71, "constructors"], [78, "constructors"], [97, "constructors"], [107, "constructors"], [125, "constructors"], [134, "constructors"], [136, "constructors"], [144, "constructors"], [148, "constructors"], [156, "constructors"]], "Methods": [[9, "methods"], [26, "methods"], [32, "methods"], [42, "methods"], [47, "methods"], [54, "methods"], [71, "methods"], [78, "methods"], [97, "methods"], [107, "methods"], [125, "methods"], [134, "methods"], [136, "methods"], [144, "methods"], [148, "methods"], [156, "methods"], [160, "methods"]], "Properties": [[9, "properties"], [26, "properties"], [32, "properties"], [54, "properties"], [71, "properties"], [78, "properties"], [97, "properties"], [107, "properties"], [125, "properties"], [134, "properties"], [136, "properties"], [144, "properties"], [148, "properties"], [156, "properties"]], "See also": [[26, null], [47, null], [49, null], [62, null], [63, null], [64, null], [68, null], [86, null], [87, null], [89, null], [94, null], [108, null], [111, null], [121, null], [135, null], [136, null], [145, null], [149, null], [152, null], [154, null], [157, null], [158, null], [159, null], [175, null], [198, null], [237, null]], "Special methods": [[26, "special-methods"], [32, "special-methods"], [54, "special-methods"], [71, "special-methods"], [78, "special-methods"], [97, "special-methods"], [125, "special-methods"], [136, "special-methods"]], "String representation": [[32, "string-representation"], [54, "string-representation"], [78, "string-representation"], [97, "string-representation"], [107, "string-representation"], [134, "string-representation"], [144, "string-representation"], [148, "string-representation"], [156, "string-representation"]], "Streaming mode only": [[32, "streaming-mode-only"], [54, "streaming-mode-only"], [78, "streaming-mode-only"], [97, "streaming-mode-only"]], "Warning": [[180, null], [237, null]], "Sequences": [[240, "sequences"]], "Simulation": [[241, "simulation"]], "Channel models": [[241, "channel-models"]], "Signal impairments": [[241, "signal-impairments"]], "Synchronization": [[242, "synchronization"]], "Documentation": [[243, "documentation"]], "Install": [[243, "install"], [244, "install"], [246, "install"]], "Build the docs": [[243, "build-the-docs"]], "Serve the docs": [[243, "serve-the-docs"]], "Formatting": [[244, "formatting"]], "Run the linter": [[244, "run-the-linter"]], "Run the formatter": [[244, "run-the-formatter"]], "Pre-commit": [[244, "pre-commit"]], "Run from VS Code": [[244, "run-from-vs-code"], [246, "run-from-vs-code"]], "Installation": [[245, "installation"], [254, "installation"]], "Install from PyPI": [[245, "install-from-pypi"]], "Install from GitHub": [[245, "install-from-github"]], "Editable install from local folder": [[245, "editable-install-from-local-folder"]], "Install the dev dependencies": [[245, "install-the-dev-dependencies"]], "Unit Tests": [[246, "unit-tests"]], "Run from the command line": [[246, "run-from-the-command-line"]], "Farrow arbitrary resampler": [[247, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[247, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[247, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[247, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[247, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[247, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[247, "downsample-by-an-irrational-rate"]], "FIR filters": [[248, "fir-filters"]], "Create an FIR filter": [[248, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[248, "examine-the-impulse-response-h-n"], [249, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[248, "examine-the-step-response-s-n"], [249, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[248, "examine-the-frequency-response-h-omega"], [249, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[248, "examine-the-group-delay-tau-g-omega"], [249, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[248, "fully-analyze-a-fir-filter"]], "IIR filters": [[249, "iir-filters"]], "Create an IIR filter": [[249, "create-an-iir-filter"]], "Examine the zeros and poles": [[249, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[249, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[249, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[250, "peak-to-average-power"]], "QPSK signal with various pulse shapes": [[250, "qpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[250, "examine-time-domain"]], "Examine frequency domain": [[250, "examine-frequency-domain"]], "Plot across excess bandwidth": [[250, "plot-across-excess-bandwidth"]], "Phase-locked loops": [[251, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[251, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[251, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[251, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[251, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[251, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[251, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[251, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[252, "phase-shift-keying"]], "Constellations": [[252, "constellations"]], "BPSK": [[252, "bpsk"]], "QPSK": [[252, "qpsk"]], "8-PSK": [[252, "id1"]], "16-PSK": [[252, "id2"]], "Error rate curves": [[252, "error-rate-curves"]], "Bit error rate curves": [[252, "bit-error-rate-curves"]], "Symbol error rate curves": [[252, "symbol-error-rate-curves"]], "Pulse shapes": [[253, "pulse-shapes"]], "Raised cosine": [[253, "raised-cosine"]], "Square-root raised cosine": [[253, "square-root-raised-cosine"]], "Gaussian": [[253, "gaussian"]], "sdr": [[254, "sdr"]], "Features": [[254, "features"]], "v0.0": [[255, "v0-0"]], "v0.0.8": [[255, "v0-0-8"]], "Changes": [[255, "changes"], [255, "id1"], [255, "id3"], [255, "id5"], [255, "id7"], [255, "id9"], [255, "id11"], [255, "id13"]], "Contributors": [[255, "contributors"], [255, "id2"], [255, "id4"], [255, "id6"], [255, "id8"], [255, "id10"], [255, "id12"], [255, "id14"]], "v0.0.7": [[255, "v0-0-7"]], "v0.0.6": [[255, "v0-0-6"]], "v0.0.5": [[255, "v0-0-5"]], "v0.0.4": [[255, "v0-0-4"]], "v0.0.3": [[255, "v0-0-3"]], "v0.0.2": [[255, "v0-0-2"]], "v0.0.1": [[255, "v0-0-1"]], "Versioning": [[256, "versioning"]], "Alpha releases": [[256, "alpha-releases"]], "Beta releases": [[256, "beta-releases"]]}, "indexentries": {"module": [[3, "module-sdr"]], "sdr": [[3, "module-sdr"]]}, "docurls": ["api/conversions/", "api/data-manipulation/", "api/detection/", "api/dsp/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.DDS/", "api/sdr.DDS.__call__/", "api/sdr.DDS.__init__/", "api/sdr.DDS.nco/", "api/sdr.DDS.reset/", "api/sdr.DDS.step/", "api/sdr.Decimator/", "api/sdr.Decimator.__call__/", "api/sdr.Decimator.__init__/", "api/sdr.Decimator.__repr__/", "api/sdr.Decimator.__str__/", "api/sdr.Decimator.method/", "api/sdr.Decimator.polyphase_taps/", "api/sdr.Decimator.rate/", "api/sdr.Decimator.reset/", "api/sdr.Decimator.taps/", "api/sdr.EnergyDetector/", "api/sdr.EnergyDetector.p_d/", "api/sdr.EnergyDetector.p_fa/", "api/sdr.EnergyDetector.roc/", "api/sdr.EnergyDetector.threshold/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__call__/", "api/sdr.FIR.__init__/", "api/sdr.FIR.__len__/", "api/sdr.FIR.__repr__/", "api/sdr.FIR.__str__/", "api/sdr.FIR.delay/", "api/sdr.FIR.flush/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.frequency_response_log/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.reset/", "api/sdr.FIR.state/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__call__/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__call__/", "api/sdr.IIR.__init__/", "api/sdr.IIR.__repr__/", "api/sdr.IIR.__str__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.state/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.Interpolator/", "api/sdr.Interpolator.__call__/", "api/sdr.Interpolator.__init__/", "api/sdr.Interpolator.__repr__/", "api/sdr.Interpolator.__str__/", "api/sdr.Interpolator.method/", "api/sdr.Interpolator.polyphase_taps/", "api/sdr.Interpolator.rate/", "api/sdr.Interpolator.reset/", "api/sdr.Interpolator.taps/", "api/sdr.LinearModulation/", "api/sdr.LinearModulation.__init__/", "api/sdr.LinearModulation.__repr__/", "api/sdr.LinearModulation.__str__/", "api/sdr.LinearModulation.ber/", "api/sdr.LinearModulation.bps/", "api/sdr.LinearModulation.decide_symbols/", "api/sdr.LinearModulation.demodulate/", "api/sdr.LinearModulation.map_symbols/", "api/sdr.LinearModulation.modulate/", "api/sdr.LinearModulation.order/", "api/sdr.LinearModulation.phase_offset/", "api/sdr.LinearModulation.pulse_shape/", "api/sdr.LinearModulation.rx_filter/", "api/sdr.LinearModulation.ser/", "api/sdr.LinearModulation.sps/", "api/sdr.LinearModulation.symbol_map/", "api/sdr.LinearModulation.tx_filter/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__call__/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.MSK/", "api/sdr.MSK.__init__/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__call__/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.OQPSK/", "api/sdr.OQPSK.__init__/", "api/sdr.OQPSK.__repr__/", "api/sdr.OQPSK.__str__/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.__repr__/", "api/sdr.PSK.__str__/", "api/sdr.PSK.ber/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.PiMPSK/", "api/sdr.PiMPSK.__init__/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.ReplicaCorrelator/", "api/sdr.ReplicaCorrelator.p_d/", "api/sdr.ReplicaCorrelator.p_fa/", "api/sdr.ReplicaCorrelator.roc/", "api/sdr.ReplicaCorrelator.threshold/", "api/sdr.albersheim/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.barker/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.db/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.downsample/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.evm/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.half_sine/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.linear/", "api/sdr.mix/", "api/sdr.multirate_taps/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.percent/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.eye/", "api/sdr.plot.filter/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.magnitude_response/", "api/sdr.plot.p_d/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.phase_tree/", "api/sdr.plot.raster/", "api/sdr.plot.roc/", "api/sdr.plot.ser/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.polyphase_matrix/", "api/sdr.ppb/", "api/sdr.ppm/", "api/sdr.raised_cosine/", "api/sdr.rectangular/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.to_complex_bb/", "api/sdr.to_real_pb/", "api/sdr.unpack/", "api/sdr.upsample/", "api/sdr.wavelength/", "api/sdr.zadoff_chu/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/formatting/", "development/installation/", "development/unit-tests/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})