Search.setIndex({"titles": ["sdr", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.DDS", "sdr.DDS.__init__", "sdr.DDS.nco", "sdr.DDS.process", "sdr.DDS.reset", "sdr.DDS.step", "sdr.FIR", "sdr.FIR.__init__", "sdr.FIR.delay", "sdr.FIR.filter", "sdr.FIR.frequency_response", "sdr.FIR.frequency_response_log", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.reset", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.resample", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__init__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.filter", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.filter", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.process", "sdr.NCO.reset", "sdr.NCO.step", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.demodulate", "sdr.PSK.modulate", "sdr.PSK.offset", "sdr.PSK.order", "sdr.PSK.symbol_map", "sdr.Q", "sdr.Qinv", "sdr.average_power", "sdr.awgn", "sdr.crest_factor", "sdr.energy", "sdr.gaussian", "sdr.hexdump", "sdr.pack", "sdr.papr", "sdr.peak_power", "sdr.peak_voltage", "sdr.plot.constellation", "sdr.plot.filter", "sdr.plot.frequency_response", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.periodogram", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.raised_cosine", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.unpack", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"class": [0, 1, 18, 24, 36, 43, 59, 68, 76, 111, 112, 115], "fir": [0, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 96, 97, 98, 99, 102, 105, 117, 118], "implement": [0, 18, 24, 36, 43, 59, 65, 68, 76, 110], "finit": [0, 24, 118], "impuls": [0, 24, 30, 43, 52, 89, 96, 99, 103, 113, 116, 118], "respons": [0, 24, 28, 29, 30, 33, 43, 49, 50, 52, 56, 89, 96, 97, 98, 99, 102, 116, 118], "iir": [0, 1, 10, 29, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 65, 96, 97, 98, 99, 102, 105, 111, 114, 117, 118], "an": [0, 24, 30, 43, 44, 45, 52, 91, 99, 109, 117], "infinit": [0, 43, 118], "gaussian": [0, 86, 89, 117, 118], "time_bandwidth": [0, 89], "float": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 36, 39, 43, 44, 49, 50, 51, 59, 60, 61, 62, 63, 66, 68, 69, 70, 71, 72, 76, 77, 80, 85, 86, 87, 88, 89, 92, 93, 94, 96, 97, 98, 100, 101, 103, 106, 107, 108], "span": [0, 89, 106, 108, 113, 116], "int": [0, 18, 23, 24, 26, 28, 29, 30, 31, 33, 36, 38, 43, 49, 50, 52, 53, 56, 68, 75, 76, 77, 81, 86, 89, 90, 91, 96, 97, 98, 99, 100, 101, 102, 106, 108, 109], "sp": [0, 89, 106, 108, 113, 116], "ndarrai": [0, 18, 21, 23, 24, 27, 28, 29, 30, 33, 35, 36, 39, 42, 43, 46, 47, 48, 49, 50, 52, 54, 56, 58, 59, 64, 68, 73, 75, 76, 78, 79, 82, 83, 84, 86, 89, 91, 106, 108, 109], "return": [0, 1, 9, 11, 14, 15, 21, 23, 24, 27, 28, 29, 30, 33, 39, 43, 48, 49, 50, 52, 56, 64, 73, 75, 78, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 106, 107, 108, 109, 111, 112], "raised_cosin": [0, 106, 116, 117, 118], "alpha": [0, 89, 104, 106, 108, 113, 116], "rais": [0, 103, 106, 108, 111], "cosin": [0, 103, 106, 108, 111], "rc": [0, 106], "root_raised_cosin": [0, 96, 97, 98, 99, 102, 103, 105, 108, 111, 113, 116, 117, 118], "squar": [0, 103, 107, 108, 111], "root": [0, 103, 107, 108, 111], "srrc": [0, 103, 108, 113], "farrowresampl": [0, 36, 37, 38, 39, 40, 41, 42, 110, 117, 118], "cubic": [0, 36], "farrow": [0, 36, 37, 38, 39, 40, 41, 42, 118], "arbitrari": [0, 36, 37, 38, 39, 40, 41, 42, 117, 118], "psk": [0, 76, 77, 78, 79, 80, 81, 82], "shift": [0, 76, 78, 79, 80, 81, 82, 111, 112], "kei": [0, 76, 78, 79, 80, 81, 82], "demodul": [0, 76, 78], "closedlooppl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 114, 117, 118], "A": [0, 1, 9, 11, 12, 13, 14, 15, 17, 24, 59, 90, 106, 108, 114], "defin": [0, 1, 24, 43, 86, 89, 112, 117], "perform": [0, 1, 111, 112, 117], "close": [0, 1, 8, 10, 118], "pll": [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 118], "dd": [0, 18, 19, 20, 21, 22, 23, 68, 114, 117, 118], "direct": [0, 18, 19, 114, 118], "digit": [0, 1, 9, 11, 12, 13, 14, 15, 18, 19, 59, 106, 108, 114, 117, 118], "synthes": [0, 18, 19, 114, 118], "loopfilt": [0, 59, 60, 61, 62, 63, 64, 65, 66, 67, 114, 117, 118], "2nd": [0, 1, 59, 62, 114, 118], "order": [0, 1, 24, 31, 36, 38, 43, 53, 59, 62, 76, 77, 81, 89, 106, 108, 114, 115, 118], "proport": [0, 1, 5, 59, 60, 62, 118], "plu": [0, 1, 59, 62, 118], "integr": [0, 1, 6, 59, 61, 62, 112, 118], "ppi": [0, 59, 62], "nco": [0, 1, 4, 8, 18, 19, 20, 62, 68, 69, 70, 71, 72, 73, 74, 75, 114, 117, 118], "numer": [0, 1, 18, 20, 68, 70, 112, 114, 118], "control": [0, 1, 18, 20, 68, 70, 114, 118], "oscil": [0, 1, 18, 20, 68, 70, 114, 118], "awgn": [0, 86, 115, 117], "x": [0, 1, 18, 21, 24, 27, 36, 39, 43, 48, 59, 64, 68, 73, 76, 78, 79, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 103, 107, 109, 113, 114, 115, 119], "arraylik": [0, 18, 21, 24, 25, 27, 36, 39, 40, 43, 44, 45, 48, 59, 64, 68, 73, 76, 78, 79, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 109], "snr": [0, 86], "none": [0, 24, 30, 33, 36, 40, 59, 67, 86, 91, 96, 99, 100, 101, 102, 109, 110], "add": [0, 86, 115, 119], "addit": [0, 86, 95, 97, 98, 99, 100, 101, 102, 103, 105], "white": [0, 86], "nois": [0, 1, 2, 3, 8, 14, 59, 62, 66, 86, 101, 114], "signal": [0, 1, 9, 11, 14, 15, 18, 21, 24, 27, 36, 39, 43, 48, 59, 64, 68, 73, 75, 85, 86, 87, 88, 89, 92, 93, 94, 100, 101, 103, 107, 111, 112, 113, 114, 116], "n": [0, 1, 18, 21, 23, 24, 27, 28, 29, 30, 31, 33, 36, 39, 43, 48, 49, 50, 52, 53, 56, 59, 64, 68, 73, 75, 83, 84, 85, 86, 87, 88, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 107, 114, 116], "average_pow": [0, 85, 92, 117], "averag": [0, 85, 86, 92, 100], "power": [0, 85, 86, 92, 93, 100, 116], "crest_factor": [0, 87, 92, 117, 118], "crest": [0, 87], "factor": [0, 1, 8, 17, 59, 62, 63, 87, 114], "energi": [0, 88, 106, 108, 117], "papr": [0, 92, 113, 117, 118], "peak": [0, 87, 92, 93, 94], "ratio": [0, 14, 86, 92], "peak_pow": [0, 92, 93, 117], "peak_voltag": [0, 87, 94, 117], "voltag": [0, 94, 107], "rms_voltag": [0, 87, 107, 117], "mean": [0, 100, 107, 116], "rm": [0, 87, 107], "hexdump": [0, 90, 117, 118], "byte": [0, 90], "width": [0, 90], "16": [0, 90, 118], "str": [0, 90, 100, 101], "specifi": [0, 86, 90, 111, 112], "pack": [0, 90, 91, 117, 118], "bpe": [0, 91, 109], "binari": [0, 91, 109], "arrai": [0, 91, 103, 109, 112, 113], "multipl": [0, 91, 109], "bit": [0, 90, 91, 109, 118], "per": [0, 21, 73, 89, 90, 91, 106, 108, 109, 113, 116], "element": [0, 90, 91, 109], "unpack": [0, 90, 109, 117, 118], "q": [0, 83, 84, 117], "comput": [0, 83, 84, 86, 111, 112, 114, 116], "complementari": [0, 83, 84], "cumul": [0, 83, 84], "distribut": [0, 83, 84], "function": [0, 1, 10, 24, 43, 44, 59, 83, 84, 89, 100, 101, 111, 112, 114, 116, 117, 118], "standard": [0, 83, 84], "normal": [0, 1, 3, 8, 59, 62, 66, 83, 84, 89, 101, 114, 116], "mathcal": [0, 83, 84, 86], "0": [0, 8, 18, 19, 24, 28, 29, 43, 44, 49, 50, 62, 68, 70, 76, 77, 78, 79, 82, 83, 84, 85, 86, 88, 89, 91, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119], "1": [0, 1, 8, 11, 15, 17, 18, 19, 28, 29, 43, 44, 49, 50, 59, 62, 63, 68, 70, 76, 78, 79, 82, 83, 84, 85, 86, 88, 89, 90, 91, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119], "qinv": [0, 83, 84, 117], "p": [0, 83, 84], "invers": [0, 84], "use_styl": [0, 104], "appli": [0, 104], "": [0, 1, 9, 11, 12, 13, 15, 16, 24, 28, 29, 33, 43, 49, 50, 56, 76, 78, 79, 96, 97, 98, 100, 101, 102, 103, 104, 110, 115, 117], "default": [0, 30, 33, 101, 104], "matplotlib": [0, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115, 116, 117], "rcparam": [0, 104, 110, 114], "time_domain": [0, 86, 103, 113, 116, 117, 118], "sample_r": [0, 1, 8, 16, 28, 29, 49, 50, 96, 97, 98, 100, 101, 103, 110, 114, 116], "periodogram": [0, 100, 113, 117, 118], "estim": [0, 76, 78, 100, 101, 114], "spectral": [0, 100, 113, 116], "densiti": [0, 14, 100, 113, 116], "p_": [0, 85, 86, 92, 93, 100], "xx": [0, 100], "us": [0, 18, 20, 25, 36, 37, 44, 45, 59, 65, 76, 78, 90, 91, 96, 99, 100, 101, 102, 109, 111, 112, 116, 117, 119], "welch": [0, 100, 101], "method": [0, 100, 101, 111, 112], "spectrogram": [0, 101, 117, 118], "b": [0, 43, 45, 89, 90, 96, 97, 98, 99, 102, 105, 116], "h": [0, 24, 25, 28, 29, 30, 43, 49, 50, 52, 59, 89, 96, 97, 99, 113, 114, 116], "e": [0, 1, 18, 85, 88, 96, 97, 111, 112, 114, 115], "j": [0, 1, 18, 43, 86, 96, 97, 111, 112, 114], "omega": [0, 19, 68, 70, 71, 96, 97, 98, 114], "step": [0, 18, 21, 23, 24, 33, 43, 56, 68, 73, 75, 96, 102], "zero": [0, 40, 43, 44, 58, 59, 91, 96, 97, 98, 99, 102, 103, 105, 111, 113, 114, 116], "pole": [0, 43, 44, 54, 96, 97, 98, 99, 102, 105, 111], "frequency_respons": [0, 24, 28, 29, 43, 49, 50, 97, 111, 112, 114, 116, 117, 118], "group_delai": [0, 98, 111, 112, 117, 118], "group": [0, 98], "delai": [0, 18, 24, 26, 36, 59, 68, 98, 114], "tau_g": [0, 98], "impulse_respons": [0, 24, 30, 43, 52, 89, 99, 106, 108, 111, 112, 116, 117, 118], "step_respons": [0, 24, 33, 43, 56, 102, 111, 112, 114, 117, 118], "zeros_pol": [0, 105, 112, 117, 118], "kwarg": [0, 95, 97, 98, 99, 100, 101, 102, 103, 105], "sdr": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119], "loop": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 117, 118], "thi": [1, 21, 24, 43, 73, 76, 82, 86, 96, 97, 98, 99, 100, 101, 102, 105, 110, 112, 114, 116], "i": [1, 8, 17, 24, 30, 33, 34, 36, 41, 43, 52, 56, 57, 59, 62, 63, 66, 83, 84, 86, 89, 90, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119], "meant": 1, "analysi": [1, 8, 114, 118], "onli": [1, 24, 32, 36, 40, 43, 55, 86, 114], "block": [1, 18, 59, 68], "diagram": [1, 18, 59, 68], "bb": [1, 114], "ped": [1, 7, 8, 62, 114], "lf": [1, 114], "lo": [1, 114], "input": [1, 9, 11, 14, 15, 18, 21, 24, 25, 27, 30, 33, 36, 37, 39, 40, 43, 44, 45, 48, 52, 56, 59, 64, 68, 73, 83, 86, 91, 99, 102, 109, 111, 112, 114], "local": [1, 114], "baseband": [1, 113, 114], "phase": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 117], "error": [1, 7, 8, 14, 59, 62, 114], "detector": [1, 7, 8, 62, 114], "filter": [1, 5, 6, 8, 10, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 89, 96, 97, 98, 99, 102, 103, 105, 106, 108, 113, 116, 117, 118], "The": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 116, 117, 119], "transfer": [1, 10, 24, 43, 44, 59, 89, 111, 112, 114], "h_": [1, 114], "z": [1, 18, 24, 43, 59, 68, 111, 112, 114], "k_1": [1, 5, 59, 60, 114], "k_2": [1, 6, 59, 61, 114], "frac": [1, 9, 11, 14, 15, 43, 59, 85, 86, 87, 89, 92, 107, 114], "k_0": [1, 4, 8, 19, 62, 68, 69, 70, 114], "k_p": [1, 7, 8, 62, 114], "2": [1, 9, 11, 14, 28, 29, 49, 50, 77, 83, 84, 85, 86, 88, 89, 90, 91, 93, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116], "refer": [1, 9, 11, 12, 13, 14, 15, 36, 59, 87, 89, 92, 106, 108, 112, 116], "michael": [1, 9, 11, 12, 13, 14, 15, 59, 106, 108], "rice": [1, 9, 11, 12, 13, 14, 15, 59, 106, 108], "commun": [1, 9, 11, 12, 13, 14, 15, 59, 106, 108, 114, 117], "discret": [1, 9, 11, 12, 13, 14, 15, 59, 106, 108, 110, 114], "time": [1, 8, 9, 11, 12, 13, 14, 15, 24, 43, 59, 62, 85, 86, 87, 88, 89, 92, 93, 94, 96, 100, 101, 103, 106, 107, 108, 110, 111, 112, 116], "approach": [1, 9, 11, 12, 13, 14, 15, 59, 106, 108, 114], "appendix": [1, 59, 106, 108], "c": [1, 9, 11, 12, 13, 14, 15, 59, 76, 82, 114], "lock": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 117], "exampl": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 96, 97, 98, 99, 102, 103, 104, 105, 106, 108, 109, 114], "see": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 89, 106, 108, 117], "noise_bandwidth": [1, 8, 59, 62, 66], "damping_factor": [1, 8, 59, 62, 63], "creat": [1, 8, 18, 19, 24, 25, 36, 37, 43, 44, 45, 59, 62, 68, 70, 76, 77, 103, 110, 113, 114, 115, 116], "object": [1, 8, 76, 77, 112, 114, 115], "frequency_lock_tim": [1, 9], "freq_offset": [1, 9, 11], "frequenc": [1, 9, 11, 13, 24, 28, 29, 43, 49, 50, 59, 96, 97, 98, 100, 101, 116], "lock_tim": [1, 11, 114], "phase_error_vari": [1, 14], "cn0": [1, 14], "varianc": [1, 14, 86], "steadi": [1, 14], "state": [1, 14, 24, 32, 34, 36, 40, 41, 43, 55, 57], "phase_lock_tim": [1, 15], "bn": [1, 2], "bandwidth": [1, 2, 3, 8, 12, 59, 62, 66, 89, 106, 108, 114, 116], "b_n": [1, 2, 3, 8, 9, 11, 14, 15, 59, 62, 66], "hz": [1, 2, 8, 9, 11, 14, 28, 29, 49, 50, 59, 62, 66, 89, 110], "bnt": [1, 3, 114], "t": [1, 3, 8, 59, 62, 66, 89, 90, 110], "repres": [1, 10], "k0": [1, 4, 8, 18, 19, 62, 68, 69, 70], "gain": [1, 4, 5, 6, 7, 8, 18, 19, 43, 44, 51, 59, 60, 61, 62, 68, 69, 70, 89, 114], "k1": [1, 5, 59, 60, 114], "k2": [1, 6, 59, 61, 114], "kp": [1, 7, 8, 62], "omega_3db": [1, 12], "3": [1, 9, 11, 12, 15, 89, 90, 91, 96, 97, 98, 99, 102, 103, 105, 109, 112, 114, 116, 117, 118], "db": [1, 12, 14, 86, 89, 92, 113, 115, 116], "omega_": [1, 12], "textrm": [1, 12], "radian": [1, 12, 13, 14, 18, 19, 76, 77, 80, 114], "omega_n": [1, 13, 114], "natur": [1, 13], "sampl": [1, 8, 16, 18, 19, 21, 23, 24, 26, 28, 29, 30, 33, 36, 40, 49, 50, 52, 56, 59, 62, 66, 68, 70, 71, 73, 75, 89, 96, 97, 98, 99, 100, 101, 102, 103, 106, 108, 110, 113, 114, 116], "rate": [1, 8, 16, 28, 29, 36, 39, 49, 50, 96, 97, 98, 100, 101, 103], "f_": [1, 8, 16, 28, 29, 49, 50, 89, 96, 97, 98, 100, 101, 103, 110, 111, 112, 114, 116], "zeta": [1, 8, 17, 59, 62, 63], "damp": [1, 8, 17, 59, 62, 63, 114], "properti": [2, 3, 4, 5, 6, 7, 10, 12, 13, 16, 17, 20, 26, 31, 34, 35, 38, 41, 42, 46, 47, 51, 53, 54, 57, 58, 60, 61, 63, 65, 66, 69, 71, 72, 80, 81, 82], "paramet": [8, 9, 11, 14, 19, 21, 23, 25, 27, 28, 29, 30, 33, 37, 39, 40, 44, 45, 48, 49, 50, 52, 56, 62, 64, 70, 73, 75, 77, 78, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109], "where": [8, 59, 62, 66, 86, 89, 111, 112, 117], "period": [8, 59, 62, 66], "second": [8, 9, 11, 15, 59, 62, 66, 89], "critic": [8, 17, 59, 62, 63, 114], "underdamp": [8, 17, 59, 62, 63], "overdamp": [8, 17, 59, 62, 63], "ted": [8, 62], "t_": [9, 11, 15, 39, 89, 116], "fl": [9, 11], "4": [9, 11, 29, 50, 86, 89, 90, 91, 96, 97, 98, 99, 102, 103, 104, 105, 106, 108, 109, 110, 112, 115, 118], "delta": [9, 11, 24, 30, 43, 52, 99, 111, 112], "f": [9, 11, 24, 28, 29, 43, 49, 50, 89, 110, 111, 112, 113, 114, 115, 116], "offset": [9, 11, 18, 19, 68, 70, 72, 76, 77, 80, 114], "take": [9, 11, 15], "onto": [9, 11, 15], "equat": [9, 11, 12, 13, 14, 15, 43], "39": 9, "pl": [11, 15], "38": 11, "34": 12, "33": 13, "sigma_": 14, "theta_": 14, "n_0": [14, 115], "carrier": 14, "43": 14, "40": 15, "less": 17, "than": 17, "greater": 17, "note": [18, 24, 43, 59, 68, 86, 89, 101], "increment": [18, 19, 21, 68, 70, 71, 73, 114], "v": [18, 68], "y": [18, 21, 23, 24, 27, 39, 43, 48, 59, 64, 68, 73, 75, 86, 101, 103, 114], "output": [18, 21, 23, 24, 30, 33, 43, 44, 45, 52, 56, 59, 64, 68, 73, 75, 86, 91, 99, 102, 109, 110, 111, 112, 114], "complex": [18, 21, 23, 76, 78, 79, 82, 86, 95, 110, 111, 112, 115], "exponenti": [18, 21, 23, 110, 111, 112], "constant": [18, 19, 59, 68, 70, 71, 112, 114], "accumul": [18, 19, 68, 70, 71, 114], "absolut": [18, 19, 68, 70, 72], "unit": [18, 24, 33, 43, 56, 59, 68, 70, 71, 72, 85, 86, 88, 93, 94, 102, 106, 107, 108, 111, 112, 114], "adder": [18, 59, 68, 114], "process": [18, 21, 68, 73, 112, 114], "variabl": [18, 21, 68, 73, 90, 114], "reset": [18, 22, 24, 32, 36, 40, 43, 55, 59, 67, 68, 74], "forward": [18, 23, 68, 75], "theta": [19, 68, 70, 72], "vari": [21, 73], "number": [23, 28, 29, 30, 33, 49, 50, 52, 56, 75, 86, 89, 90, 91, 96, 97, 98, 99, 100, 101, 102, 106, 108, 109], "wrapper": [24, 43], "scipi": [24, 27, 43, 100, 101, 116, 117], "convolv": [24, 27, 103, 113], "It": [24, 43, 59, 86], "support": [24, 43], "one": [24, 43, 89, 90, 96, 97, 98, 100, 101, 111, 112, 113, 116], "stream": [24, 25, 32, 34, 36, 37, 40, 41, 43, 44, 45, 55, 57], "its": [24, 43, 44, 111, 112, 116], "feedforward": [24, 25, 35, 43, 45, 47, 96, 97, 98, 99, 102, 105, 111, 112], "coeffici": [24, 25, 43, 45, 96, 97, 98, 99, 102, 105, 111, 112], "h_i": [24, 25, 35, 111], "sum_": [24, 43, 85, 86, 88, 107], "sum": [24, 43, 116], "limits_": [24, 43], "bool": [24, 25, 34, 36, 37, 41, 43, 44, 45, 57, 95], "fals": [24, 25, 36, 37, 43, 44, 45, 95, 112, 116], "tupl": [24, 28, 29, 43, 49, 50], "frequency_response_log": [24, 29, 43, 50], "logarithm": [24, 29, 43, 50, 96, 97, 98, 100, 111, 112], "axi": [24, 29, 43, 50, 96, 97, 98, 100, 101, 103, 110], "when": [24, 30, 33, 43, 52, 56, 96, 97, 98, 99, 102, 110, 111, 112], "mode": [24, 25, 27, 32, 34, 36, 37, 40, 41, 43, 44, 45, 55, 57, 113], "u": [24, 33, 43, 56, 102, 111, 112], "indic": [24, 25, 34, 36, 37, 41, 43, 44, 45, 57], "whether": [24, 25, 34, 36, 37, 41, 43, 44, 45, 57], "tap": [24, 35, 36, 42, 43, 46, 47, 111, 112], "In": [25, 34, 37, 41, 44, 45, 57, 83, 84, 86, 89, 90, 91, 96, 97, 98, 99, 102, 103, 104, 105, 106, 108, 109, 110, 115], "previou": [25, 37, 40, 44, 45], "ar": [25, 29, 37, 44, 45, 50, 91, 96, 97, 98, 100, 101, 104, 110, 112, 114, 116, 117, 119], "preserv": [25, 34, 37, 41, 44, 45, 57], "between": [25, 34, 37, 41, 44, 45, 57, 100, 101, 114], "call": [25, 34, 37, 41, 44, 45, 57], "liter": [27, 97, 98], "full": 27, "valid": [27, 113], "same": [27, 111], "convolut": 27, "detail": 27, "1024": [28, 29, 49, 50, 96, 97, 98, 113, 116], "from": [28, 29, 43, 44, 49, 50, 76, 82, 101, 111, 112, 114, 117], "plot": [28, 29, 30, 33, 49, 50, 52, 56, 86, 89, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118], "decad": [29, 50, 96, 97, 98, 111, 114], "space": [29, 50], "length": [30, 33, 89, 96, 99, 100, 101, 102, 106, 108, 110, 113, 116], "resampl": [36, 37, 38, 39, 40, 41, 42, 117, 118], "http": [36, 87, 89, 92], "wirelesspi": 36, "com": [36, 89], "fraction": [36, 40, 89, 110], "structur": 36, "new": [36, 37, 76, 77], "given": [36, 39, 111, 112], "r": [36, 39, 89, 106, 108, 112, 114, 116], "index": [36, 40], "vector": [40, 100, 101], "should": 40, "equal": 40, "three": [40, 110, 116], "If": [40, 86, 91, 95, 96, 99, 100, 101, 102, 103, 109, 117], "lfilter": 43, "b_i": [43, 45, 47, 96, 97, 98, 99, 102, 105, 112], "feedback": [43, 45, 46, 96, 97, 98, 99, 102, 105, 112], "a_j": [43, 45, 46, 96, 97, 98, 99, 102, 105, 112], "These": [43, 104, 114], "differ": [43, 116], "a_0": 43, "left": [43, 85, 86, 88, 89, 93, 94, 107], "m": [43, 76, 77, 78, 79, 81, 82], "right": [43, 85, 86, 88, 89, 93, 94, 107], "classmethod": [43, 44], "zerospol": [43, 44, 96, 97, 98, 99, 102, 105, 112], "self": [43, 44], "100": [43, 52, 56, 86, 96, 99, 102, 103, 110], "a_tap": [43, 46, 96, 97, 98, 99, 102, 105, 112, 114], "b_tap": [43, 47, 96, 97, 98, 99, 102, 105, 112, 114], "can": [59, 86, 89, 91, 100, 101, 111, 112, 119], "track": 59, "cannot": 59, "howev": [59, 110], "chirp": 59, "ramp": 59, "underli": [59, 65], "modul": [76, 77, 79, 81, 115], "x_hat": [76, 78, 95, 115], "symbol": [76, 78, 79, 82, 89, 95, 106, 108, 113, 115, 116], "hat": [76, 78, 95], "k": [76, 78, 79, 95, 113, 116], "decim": [76, 78, 79, 82, 115], "maximum": [76, 78], "likelihood": [76, 78], "phi": [76, 77, 80], "symbol_map": [76, 82, 103, 113], "map": [76, 82], "dot": [76, 82], "mathbb": [76, 82], "must": [77, 86, 89, 106, 108], "least": 77, "real": [83, 84, 86, 110, 111, 112, 113, 114], "valu": [83, 84, 89, 101, 112], "probabl": [83, 84, 117], "exceed": [83, 84], "out": [83, 84, 91, 104, 109], "15865525393145707": [83, 84], "158655": [83, 84], "0000010494310452": [83, 84], "measur": [85, 86, 87, 88, 92, 93, 94, 107, 114, 117, 118], "domain": [85, 86, 87, 88, 92, 93, 94, 96, 100, 101, 103, 107], "text": [85, 86, 87, 92, 93, 94, 107], "avg": [85, 86, 92], "seed": 86, "which": [86, 110, 114, 116], "ad": [86, 117, 118], "desir": [86, 115], "explicitli": 86, "assum": [86, 91, 109], "contain": [86, 90], "known": 86, "pass": [86, 95, 97, 98, 99, 100, 101, 102, 103, 105, 111, 112], "linear": 86, "random": [86, 103, 113, 115], "gener": [86, 115], "numpi": [86, 109, 110, 111, 112, 113, 114, 115, 116, 117], "default_rng": 86, "noisi": 86, "w": [86, 110, 111, 112, 113, 114, 115, 116], "sigma": 86, "For": [86, 96, 97, 98, 99, 102, 105, 111], "sim": 86, "cn": 86, "np": [86, 96, 97, 98, 99, 102, 103, 105, 110, 111, 112, 113, 114, 115, 116], "sin": 86, "pi": [86, 89, 96, 97, 98, 99, 102, 103, 105, 110, 111, 112, 113, 114], "5": [86, 89, 90, 96, 97, 98, 99, 102, 103, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 118], "arang": [86, 110, 113, 114], "10": [86, 89, 90, 92, 96, 97, 98, 99, 102, 103, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116], "plt": [86, 89, 96, 97, 98, 99, 102, 103, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116], "figur": [86, 89, 96, 97, 98, 99, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116], "figsiz": [86, 89, 96, 97, 98, 99, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116], "8": [86, 89, 90, 96, 97, 98, 99, 102, 103, 104, 105, 106, 108, 111, 112, 113, 114, 116], "label": [86, 89, 101, 103, 106, 108, 110, 113, 114, 116], "titl": [86, 103, 110, 113, 114, 116], "tight_layout": [86, 103, 113, 114, 115, 116], "show": [86, 89, 96, 97, 98, 99, 102, 103, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116], "cf": 87, "v_": [87, 94, 107], "en": [87, 92], "wikipedia": [87, 92], "org": [87, 92], "wiki": [87, 92], "puls": [89, 103, 106, 108, 117, 118], "shape": [89, 103, 106, 108, 117, 118], "product": [89, 116], "sym": [89, 116], "side": [89, 96, 97, 98, 100, 101, 111, 112, 113, 116], "also": [89, 117], "thought": [89, 119], "smaller": [89, 116], "produc": [89, 116], "wider": 89, "even": [89, 106, 108], "amplitud": [89, 110, 114], "so": [89, 117], "nomin": 89, "passband": [89, 113], "ha": [89, 114, 116], "exp": [89, 96, 97, 98, 99, 102, 103, 105, 110, 112, 113, 114], "relat": 89, "sqrt": [89, 107, 113, 114, 116], "ln": 89, "www": 89, "mathwork": 89, "help": 89, "ref": 89, "gaussdesign": 89, "html": 89, "onlinelibrari": 89, "wilei": 89, "doi": 89, "pdf": 89, "1002": 89, "9780470041956": 89, "app2": 89, "h_0p1": [89, 106, 108], "h_0p2": 89, "h_0p3": 89, "data": [90, 91, 109, 117], "displai": [90, 96, 97, 98, 100, 101], "each": [90, 100, 101], "consid": 90, "convert": 90, "line": 90, "string": [90, 100, 101], "print": [90, 110, 111, 112, 114], "quick": 90, "brown": 90, "fox": 90, "jump": 90, "over": 90, "lazi": 90, "dog": 90, "00000000": 90, "54": 90, "68": 90, "65": 90, "20": [90, 113, 116], "71": 90, "75": [90, 114, 115], "69": 90, "63": 90, "6b": 90, "62": 90, "72": 90, "6f": 90, "77": 90, "6e": 90, "00000010": 90, "66": 90, "78": 90, "6a": 90, "6d": 90, "70": [90, 116], "73": 90, "76": 90, "74": 90, "00000020": 90, "6c": 90, "61": 90, "7a": 90, "79": 90, "64": [90, 112], "67": 90, "he": 90, "6": [90, 96, 97, 98, 99, 102, 103, 105, 111, 112, 114, 115], "7": [90, 103], "9": [90, 106, 108, 113, 115, 116, 118], "01": [90, 112, 114], "02": [90, 112, 114], "03": [90, 112], "04": [90, 112], "00000004": 90, "05": [90, 110, 112, 114], "06": 90, "07": 90, "08": 90, "00000008": 90, "09": 90, "0a": 90, "dtype": [91, 103, 109, 114], "dtypelik": [91, 109], "have": [91, 109], "most": [91, 109], "signific": [91, 109], "first": [91, 109], "enough": 91, "fill": 91, "last": 91, "remain": 91, "type": [91, 97, 98, 100, 109, 118], "smallest": 91, "unsign": 91, "integ": 91, "hold": 91, "uint8": [91, 109], "log_": 92, "max": [93, 94], "constel": 95, "heatmap": [95, 115], "true": [95, 104, 115], "instead": 95, "scatter": 95, "keyword": [95, 97, 98, 99, 100, 101, 102, 103, 105, 111, 112], "argument": [95, 97, 98, 99, 100, 101, 102, 103, 105, 111, 112], "pyplot": [95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115, 116], "hist2d": 95, "n_time": [96, 112], "n_freq": 96, "x_axi": [96, 97, 98, 100, 101, 111, 112, 113, 114], "two": [96, 97, 98, 100, 101, 110, 111, 112], "log": [96, 97, 98, 100, 111, 112, 114], "set": [96, 97, 98, 99, 100, 101, 102, 104, 105, 112], "n_t": 96, "n_f": 96, "scale": [96, 97, 98, 100, 101, 111, 112], "option": [96, 97, 98, 100, 101], "spectrum": [96, 97, 98, 100, 101], "h_srrc": [96, 97, 98, 99, 102, 103, 105], "1j": [96, 97, 98, 99, 102, 103, 105, 110, 112, 113, 114], "conj": [96, 97, 98, 99, 102, 105, 112, 114], "30": [96, 99, 102, 112], "ylim": [98, 111, 114, 116], "48": 98, "52": 98, "window": [100, 101], "hann": [100, 101], "overlap": [100, 101, 113], "fft": [100, 101], "median": 100, "segment": [100, 101], "256": [100, 101, 113], "point": [100, 101], "pcolormesh": 101, "By": 101, "color": [101, 110, 113, 114, 116], "bar": 101, "rang": [101, 114], "10th": 101, "100th": 101, "percentil": 101, "provid": [101, 117], "more": 101, "dynam": 101, "activ": 101, "chang": [101, 119], "vmin": 101, "vmax": 101, "bpsk": [103, 113], "1000": 103, "randint": [103, 113, 115], "10e3": 103, "qpsk": 103, "complex64": [103, 114], "style": 104, "mai": [104, 112], "revert": 104, "rcdefault": 104, "follow": [104, 114], "_rc_param": 104, "rc_param": 104, "ax": [104, 110, 114], "grid": [104, 110, 114, 116], "autolayout": 104, "max_open_warn": 104, "titleweight": 104, "bold": 104, "linestyl": [104, 110, 114, 116], "excess": [106, 108, 116], "le": [106, 108], "h_0p5": [106, 108], "h_0p9": [106, 108], "import": [110, 111, 112, 113, 114, 115, 116, 117], "config": [110, 111, 112, 113, 114, 115, 116], "inlinebackend": [110, 111, 112, 113, 114, 115, 116], "print_figure_kwarg": [110, 111, 112, 113, 114, 115, 116], "facecolor": [110, 111, 112, 113, 114, 115, 116], "widget": [110, 111, 112, 113, 114, 115, 116], "prop_cycl": [110, 114], "by_kei": [110, 114], "continu": 110, "freq": [110, 114], "tx": 110, "decai": [110, 112], "marker": [110, 111, 112], "o": 110, "fillstyl": 110, "imag": 110, "xlabel": [110, 114, 116], "ylabel": [110, 114, 116], "origin": 110, "legend": [110, 113, 114, 116], "both": [110, 114], "now": 110, "equival": 110, "accomplish": 110, "librari": [110, 115, 117, 119], "def": [110, 115], "resample_sign": 110, "new_sample_r": 110, "ty": 110, "size": [110, 113, 114, 116], "notic": [110, 116], "everi": 110, "200": 110, "four": 110, "400": 110, "other": [110, 119], "appear": 110, "50": [110, 113], "fourth": 110, "25": [110, 114, 116], "roughli": 110, "often": 110, "do": 110, "align": 110, "315": 110, "32": 110, "user": [111, 112], "below": [111, 112], "00095881": 111, "00175008": 111, "00423912": 111, "00588237": 111, "00615087": 111, "00474585": 111, "00170436": 111, "0025481": 111, "00721629": 111, "01123216": 111, "01342329": 111, "01273174": 111, "00845039": 111, "00043678": 111, "01073645": 111, "02372925": 111, "03650167": 111, "04650553": 111, "05098414": 111, "04734541": 111, "03355823": 111, "00851466": 111, "0276993": 111, "07367186": 111, "12670168": 111, "18306847": 111, "2381038": 111, "28726435": 111, "32607284": 111, "3509308": 111, "35948882": 111, "conveni": [111, 112], "evalu": [111, 112], "envelop": [111, 112], "through": [111, 112, 114], "easili": [111, 112], "here": [111, 112], "12": [111, 115], "altern": 112, "conjug": 112, "0x000002214b040a88": 112, "47820725": 112, "00000000e": 112, "00": 112, "78207252e": 112, "58172329e": 112, "10862468e": 112, "86109590e": 112, "21565653e": 112, "01140214e": 112, "57286400e": 112, "67772160e": 112, "47338728e": 112, "10422993e": 112, "89312837e": 112, "12240078e": 112, "03953322e": 112, "69685122e": 112, "63882791e": 112, "81474977e": 112, "47193366e": 112, "85259041e": 112, "15647504e": 112, "23851924e": 112, "42176895e": 112, "84684395e": 112, "42721858e": 112, "72236648e": 112, "14721649e": 112, "10813095e": 112, "94024315e": 112, "78877688e": 112, "74077567e": 112, "87820725": 112, "53637958": 112, "94724205": 112, "13335164": 112, "1455082": 112, "04436799": 112, "88708159": 112, "71930943": 112, "5719707": 112, "46154771": 112, "39261642": 112, "36139242": 112, "35935288": 112, "3763214": 112, "40270968": 112, "43085717": 112, "45557651": 112, "47410241": 112, "48566716": 112, "49090568": 112, "49124786": 112, "48840102": 112, "4839738": 112, "47925143": 112, "47510421": 112, "47199608": 112, "47005584": 112, "46917696": 112, "46911955": 112, "denomin": 112, "73910363": 112, "30614675j": 112, "plane": 112, "linspac": 112, "endpoint": 112, "concaten": 112, "0x000002214dc574c8": 112, "lyon": 112, "understand": 112, "3rd": 112, "edit": 112, "section": [112, 114], "insid": 112, "circl": 112, "sinusoid": 112, "outsid": 112, "unstabl": 112, "increas": 112, "n_symbol": 113, "500": [113, 114], "x_bb_rect": 113, "papr_bb_rect": 113, "x_pb_rect": 113, "papr_pb_rect": 113, "x_bb_0p9": 113, "papr_bb_0p9": 113, "x_bb_0p5": 113, "papr_bb_0p5": 113, "x_bb_0p1": 113, "papr_bb_0p1": 113, "2f": 113, "rf": [113, 114], "xlim": [113, 114, 116], "x_pb_0p9": 113, "papr_pb_0p9": 113, "x_pb_0p5": 113, "papr_pb_0p5": 113, "x_pb_0p1": 113, "papr_pb_0p1": 113, "configur": 114, "0x00000290f1ce3488": 114, "theta_0": 114, "phase_error": 114, "freq_estim": 114, "subplot": [114, 115], "suptitl": [114, 115], "ones": 114, "angl": 114, "part": 114, "unwrap": 114, "system": [114, 117], "avail": [114, 115], "001": 114, "005": 114, "b_nt": 114, "0005": 114, "00001": 114, "0125": 114, "015": 114, "0175": 114, "t_lock": 114, "analyze_psk": 115, "esn0": 115, "100_000": 115, "achiev": [115, 116], "n0": 115, "bin": 115, "e_": 115, "18": 115, "rectangular": 116, "rect": 116, "rc_0p1": 116, "rc_0p5": 116, "rc_0p9": 116, "nyquist": 116, "adjac": 116, "specif": 116, "pm": 116, "roll": 116, "60": 116, "total": 116, "nearli": 116, "compar": 116, "null": 116, "while": 116, "small": 116, "lobe": 116, "much": 116, "higher": 116, "h_rect": 116, "freqz": 116, "worn": 116, "whole": 116, "h_rc_0p1": 116, "h_rc_0p5": 116, "h_rc_0p9": 116, "rel": 116, "main": 116, "p_rect": 116, "log10": 116, "cumsum": 116, "ab": 116, "p_rc_0p1": 116, "p_rc_0p5": 116, "p_rc_0p9": 116, "One": 116, "within": 116, "variou": 116, "srrc_0p1": 116, "srrc_0p5": 116, "srrc_0p9": 116, "therefor": 116, "similar": 116, "significantli": 116, "due": 116, "being": 116, "h_srrc_0p1": 116, "h_srrc_0p5": 116, "h_srrc_0p9": 116, "p_srrc_0p1": 116, "p_srrc_0p5": 116, "p_srrc_0p9": 116, "gauss_0p1": 116, "gauss_0p2": 116, "gauss_0p3": 116, "python": 117, "packag": 117, "softwar": 117, "radio": 117, "goal": 117, "tool": 117, "design": 117, "build": 117, "analyz": 117, "reli": 117, "interoper": 117, "veri": 117, "possibl": 117, "numba": 117, "acceler": 117, "computation": 117, "intens": 117, "addition": 117, "aim": 117, "replic": 117, "relev": 117, "matlab": 117, "dsp": 117, "toolbox": 117, "we": 117, "progress": 117, "someth": 117, "you": 117, "d": 117, "like": 117, "includ": 117, "pleas": 117, "open": 117, "issu": 117, "github": 117, "impair": 117, "manipul": 117, "util": 117, "releas": 118, "juli": 118, "2023": 118, "helper": 118, "improv": 118, "annot": 118, "matt": 118, "hostett": 118, "mhostett": 118, "semant": 119, "major": 119, "minor": 119, "patch": 119, "introduc": 119, "api": 119, "featur": 119, "backward": 119, "compat": 119, "make": 119, "bug": 119, "fix": 119, "befor": 119, "There": 119, "guarante": 119, "them": 119, "thei": 119}, "objects": {"": [[0, 0, 0, 1, "sdr", ""]], "sdr": [[1, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [18, 1, 1, "", "DDS", "Implements a direct digital synthesizer (DDS)."], [24, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [36, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [43, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [59, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [68, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [76, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [83, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [84, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [85, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [86, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [87, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [88, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [89, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [90, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [91, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [92, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [93, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [94, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [106, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [107, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [108, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [109, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."]], "sdr.ClosedLoopPLL": [[2, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [3, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [4, 2, 1, "", "K0", "The NCO gain $K_0$."], [5, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [6, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [7, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [8, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [9, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [10, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [11, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [12, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [13, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [14, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [15, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [16, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [17, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[8, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [8, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [8, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [8, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [8, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[9, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[11, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[14, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.DDS": [[19, 3, 1, "", "__init__", "Creates a direct digital synthesizer (DDS)."], [20, 2, 1, "", "nco", "The numerically-controlled oscillator (NCO) used by the DDS."], [21, 3, 1, "", "process", "Steps the DDS with the variable phase increment signal $x[n]$."], [22, 3, 1, "", "reset", "Resets the DDS."], [23, 3, 1, "", "step", "Steps the DDS forward by $N$ samples."]], "sdr.DDS.__init__": [[19, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [19, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [19, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.DDS.process": [[21, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the DDS."]], "sdr.DDS.step": [[23, 4, 2, "p-N", "N", "The number of samples $N$ to step the DDS forward."]], "sdr.FIR": [[25, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [26, 2, 1, "", "delay", "The delay of the FIR filter in samples."], [27, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the FIR filter."], [28, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the FIR filter."], [29, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the FIR filter on a logarithmic frequency axis."], [30, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [31, 2, 1, "", "order", "The order of the FIR filter, $N$."], [32, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [33, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [34, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [35, 2, 1, "", "taps", "The feedforward taps $h_i$."]], "sdr.FIR.__init__": [[25, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$."], [25, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to filter()."]], "sdr.FIR.filter": [[27, 4, 2, "p-mode", "mode", "The convolution mode. See scipy.signal.convolve() for details."], [27, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.FIR.frequency_response": [[28, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [28, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.frequency_response_log": [[29, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [29, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [29, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[30, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.step_response": [[33, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FarrowResampler": [[37, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [38, 2, 1, "", "order", "The order of the filter."], [39, 3, 1, "", "resample", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [40, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [41, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [42, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__init__": [[37, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to resample()."]], "sdr.FarrowResampler.resample": [[39, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [39, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.reset": [[40, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[44, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [45, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [46, 2, 1, "", "a_taps", "The feedback taps $a_j$."], [47, 2, 1, "", "b_taps", "The feedforward taps $b_i$."], [48, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the IIR filter."], [49, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the IIR filter."], [50, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the IIR filter on a logarithmic frequency axis."], [51, 2, 1, "", "gain", "The gain of the IIR filter."], [52, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [53, 2, 1, "", "order", "The order of the IIR filter, $N$."], [54, 2, 1, "", "poles", "The poles of the IIR filter."], [55, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [56, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [57, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [58, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[44, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [44, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [44, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."], [44, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__init__": [[45, 4, 2, "p-a", "a", "The feedback coefficients $a_j$."], [45, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [45, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."]], "sdr.IIR.filter": [[48, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.IIR.frequency_response": [[49, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [49, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[50, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [50, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [50, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[52, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[56, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.LoopFilter": [[60, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [61, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [62, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [63, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [64, 3, 1, "", "filter", "Filters the input signal $x[n]$."], [65, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [66, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [67, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__init__": [[62, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [62, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [62, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [62, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.LoopFilter.filter": [[64, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.NCO": [[69, 2, 1, "", "K0", "The NCO gain $K_0$."], [70, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [71, 2, 1, "", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [72, 2, 1, "", "offset", "The absolute offset $theta$ of the NCO in units."], [73, 3, 1, "", "process", "Steps the NCO with the variable-increment signal $x[n]$."], [74, 3, 1, "", "reset", "Resets the NCO."], [75, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__init__": [[70, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [70, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [70, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in units."]], "sdr.NCO.process": [[73, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the NCO."]], "sdr.NCO.step": [[75, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.PSK": [[77, 3, 1, "", "__init__", "Creates a new PSK object."], [78, 3, 1, "", "demodulate", "Demodulates the complex symbols $hat{x}[k]$ to decimal symbols $hat{s}[k]$ using maximum-likelihood estimation."], [79, 3, 1, "", "modulate", "Modulates to decimal symbols $s[k]$ to complex symbols $x[k]$."], [80, 2, 1, "", "offset", "The phase offset $phi$ in radians."], [81, 2, 1, "", "order", "The modulation order $M$."], [82, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} -> mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[77, 4, 2, "p-offset", "offset", "The phase offset $phi$ in radians."], [77, 4, 2, "p-order", "order", "The modulation order $M$. Must be at least 2."]], "sdr.PSK.demodulate": [[78, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to demodulate."]], "sdr.PSK.modulate": [[79, 4, 2, "p-symbols", "symbols", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.Q": [[83, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[84, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.average_power": [[85, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[86, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [86, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [86, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [86, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.crest_factor": [[87, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.energy": [[88, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.gaussian": [[89, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [89, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [89, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.hexdump": [[90, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [90, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.pack": [[91, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [91, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [91, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[92, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_power": [[93, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[94, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.plot": [[95, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [96, 5, 1, "", "filter", "Plots the frequency response $H(e^{jomega})$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [97, 5, 1, "", "frequency_response", "Plots the frequency response $H(e^{jomega})$ of the filter."], [98, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [99, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [100, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [101, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [102, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [103, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [104, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [105, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.constellation": [[95, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [95, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.filter": [[96, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [96, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [96, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [96, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [96, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [96, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [96, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.frequency_response": [[97, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [97, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [97, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [97, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [97, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [97, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[98, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [98, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [98, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [98, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [98, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [98, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.impulse_response": [[99, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [99, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [99, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.plot.periodogram": [[100, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [100, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [100, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [100, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [100, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [100, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [100, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [100, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.spectrogram": [[101, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [101, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [101, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [101, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [101, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [101, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [101, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[102, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [102, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [102, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.plot.time_domain": [[103, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\"."], [103, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[105, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [105, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.raised_cosine": [[106, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [106, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [106, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[107, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[108, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [108, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [108, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.unpack": [[109, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [109, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [109, 4, 2, "p-x", "x", "The input array with bpe bits per element."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"sdr": [0, 117], "filter": [0, 111, 112, 114], "puls": [0, 113, 116], "shape": [0, 113, 116], "resampl": [0, 110], "modul": 0, "phase": [0, 114, 115], "time": [0, 114], "lock": [0, 114], "loop": [0, 114], "impair": 0, "measur": 0, "data": 0, "manipul": 0, "probabl": 0, "plot": 0, "configur": 0, "domain": [0, 114], "frequenc": [0, 111, 112, 114], "analysi": 0, "note": 1, "constructor": [1, 18, 24, 36, 43, 59, 68, 76], "method": [1, 18, 24, 36, 43, 59, 68, 76], "properti": [1, 18, 24, 36, 43, 59, 68, 76], "see": [18, 28, 29, 30, 33, 49, 50, 52, 56, 68, 83, 84, 87, 92, 96, 97, 98, 99, 102, 105], "also": [18, 28, 29, 30, 33, 49, 50, 52, 56, 68, 83, 84, 87, 92, 96, 97, 98, 99, 102, 105], "farrow": 110, "arbitrari": 110, "construct": 110, "an": [110, 111, 112], "input": 110, "signal": 110, "x": 110, "n": [110, 111, 112], "t_": 110, "rate": 110, "r": 110, "y": 110, "frac": 110, "upsampl": 110, "integ": 110, "downsampl": 110, "irrat": 110, "fir": 111, "creat": [111, 112], "examin": [111, 112], "impuls": [111, 112], "respons": [111, 112, 114], "h": [111, 112], "step": [111, 112, 114], "": [111, 112], "omega": [111, 112], "group": [111, 112], "delai": [111, 112], "tau_g": [111, 112], "fulli": [111, 112], "analyz": [111, 112, 114], "iir": 112, "zero": 112, "pole": 112, "digit": 112, "stabil": 112, "peak": 113, "averag": 113, "power": 113, "rectangular": 113, "squar": [113, 116], "root": [113, 116], "rais": [113, 116], "cosin": [113, 116], "design": 114, "proport": 114, "plu": 114, "integr": 114, "ppi": 114, "implement": 114, "pll": 114, "close": 114, "perform": 114, "compar": 114, "across": 114, "zeta": 114, "b_n": 114, "t": 114, "shift": 115, "kei": 115, "constel": 115, "bpsk": 115, "qpsk": 115, "8": 115, "psk": 115, "16": 115, "gaussian": 116, "featur": 117, "v0": 118, "0": 118, "2": 118, "chang": 118, "contributor": 118, "1": 118, "version": 119, "alpha": 119, "releas": 119, "beta": 119}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"sdr": [[0, "sdr"], [117, "sdr"]], "Filtering": [[0, "filtering"]], "Pulse shaping": [[0, "pulse-shaping"]], "Resampling": [[0, "resampling"]], "Modulation": [[0, "modulation"]], "Phase/time-locked loops": [[0, "phase-time-locked-loops"]], "Impairments": [[0, "impairments"]], "Measurement": [[0, "measurement"]], "Data manipulation": [[0, "data-manipulation"]], "Probability": [[0, "probability"]], "Plotting": [[0, "plotting"]], "Configuration": [[0, "configuration"]], "Time-domain": [[0, "time-domain"]], "Frequency-domain": [[0, "frequency-domain"]], "Filter analysis": [[0, "filter-analysis"]], "Note": [[1, null]], "Constructors": [[1, "constructors"], [18, "constructors"], [24, "constructors"], [36, "constructors"], [43, "constructors"], [59, "constructors"], [68, "constructors"], [76, "constructors"]], "Methods": [[1, "methods"], [18, "methods"], [24, "methods"], [36, "methods"], [43, "methods"], [59, "methods"], [68, "methods"], [76, "methods"]], "Properties": [[1, "properties"], [18, "properties"], [24, "properties"], [36, "properties"], [43, "properties"], [59, "properties"], [68, "properties"], [76, "properties"]], "See also": [[18, null], [28, null], [29, null], [30, null], [33, null], [49, null], [50, null], [52, null], [56, null], [68, null], [83, null], [84, null], [87, null], [92, null], [96, null], [97, null], [98, null], [99, null], [102, null], [105, null]], "Farrow arbitrary resampler": [[110, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[110, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[110, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[110, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[110, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[110, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[110, "downsample-by-an-irrational-rate"]], "FIR filters": [[111, "fir-filters"]], "Create an FIR filter": [[111, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[111, "examine-the-impulse-response-h-n"], [112, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[111, "examine-the-step-response-s-n"], [112, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[111, "examine-the-frequency-response-h-omega"], [112, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[111, "examine-the-group-delay-tau-g-omega"], [112, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[111, "fully-analyze-a-fir-filter"]], "IIR filters": [[112, "iir-filters"]], "Create an IIR filter": [[112, "create-an-iir-filter"]], "Examine the zeros and poles": [[112, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[112, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[112, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[113, "peak-to-average-power"]], "Rectangular pulse shape": [[113, "rectangular-pulse-shape"]], "Square-root raised cosine pulse shape": [[113, "square-root-raised-cosine-pulse-shape"]], "Phase-locked loops": [[114, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[114, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[114, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[114, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[114, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[114, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[114, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[114, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[115, "phase-shift-keying"]], "Constellations": [[115, "constellations"]], "BPSK": [[115, "bpsk"]], "QPSK": [[115, "qpsk"]], "8-PSK": [[115, "id1"]], "16-PSK": [[115, "id2"]], "Pulse shapes": [[116, "pulse-shapes"]], "Raised cosine": [[116, "raised-cosine"]], "Square-root raised cosine": [[116, "square-root-raised-cosine"]], "Gaussian": [[116, "gaussian"]], "Features": [[117, "features"]], "v0.0": [[118, "v0-0"]], "v0.0.2": [[118, "v0-0-2"]], "Changes": [[118, "changes"], [118, "id1"]], "Contributors": [[118, "contributors"], [118, "id2"]], "v0.0.1": [[118, "v0-0-1"]], "Versioning": [[119, "versioning"]], "Alpha releases": [[119, "alpha-releases"]], "Beta releases": [[119, "beta-releases"]]}, "indexentries": {"module": [[0, "module-sdr"]], "sdr": [[0, "module-sdr"]]}, "docurls": ["api/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.DDS/", "api/sdr.DDS.__init__/", "api/sdr.DDS.nco/", "api/sdr.DDS.process/", "api/sdr.DDS.reset/", "api/sdr.DDS.step/", "api/sdr.FIR/", "api/sdr.FIR.__init__/", "api/sdr.FIR.delay/", "api/sdr.FIR.filter/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.frequency_response_log/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.reset/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.resample/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__init__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.filter/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.filter/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.process/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.demodulate/", "api/sdr.PSK.modulate/", "api/sdr.PSK.offset/", "api/sdr.PSK.order/", "api/sdr.PSK.symbol_map/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.crest_factor/", "api/sdr.energy/", "api/sdr.gaussian/", "api/sdr.hexdump/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.plot.constellation/", "api/sdr.plot.filter/", "api/sdr.plot.frequency_response/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.periodogram/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.raised_cosine/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.unpack/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})