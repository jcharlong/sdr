Search.setIndex({"titles": ["sdr", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.DDS", "sdr.DDS.__init__", "sdr.DDS.nco", "sdr.DDS.process", "sdr.DDS.reset", "sdr.DDS.step", "sdr.FarrowResampler", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.resample", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__init__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.filter", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.filter", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.process", "sdr.NCO.reset", "sdr.NCO.step", "sdr.hexdump", "sdr.pack", "sdr.plot.filter", "sdr.plot.frequency_response", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.step_response", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.raised_cosine", "sdr.root_raised_cosine", "sdr.unpack", "Farrow arbitrary resampler", "IIR filters", "Phase-locked loops", "Raised cosine pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"class": [0, 1, 18, 24, 31, 47, 56, 78], "iir": [0, 1, 10, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 53, 66, 67, 68, 69, 70, 73, 79, 81, 82], "implement": [0, 18, 24, 31, 47, 53, 56, 77], "an": [0, 31, 32, 33, 40, 65, 69, 76], "infinit": [0, 31, 82], "impuls": [0, 31, 40, 66, 69, 71, 80, 82], "respons": [0, 31, 37, 38, 40, 44, 66, 67, 68, 69, 70, 80, 82], "raised_cosin": [0, 74, 80, 81], "alpha": [0, 72, 74, 75, 80], "float": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 27, 31, 32, 37, 38, 39, 47, 48, 49, 50, 51, 54, 56, 57, 58, 59, 60, 66, 67, 68, 71, 74, 75], "sp": [0, 74, 75, 80], "int": [0, 18, 23, 24, 26, 31, 37, 38, 40, 41, 44, 56, 63, 64, 65, 66, 67, 68, 69, 70, 74, 75, 76], "n_symbol": [0, 74, 75, 80], "ndarrai": [0, 18, 21, 23, 24, 27, 30, 31, 34, 35, 36, 37, 38, 40, 42, 44, 46, 47, 52, 56, 61, 63, 65, 74, 75, 76], "return": [0, 1, 9, 11, 14, 15, 21, 23, 27, 31, 36, 37, 38, 40, 44, 52, 61, 63, 64, 65, 74, 75, 76, 78], "rais": [0, 71, 74, 75], "cosin": [0, 71, 74, 75], "rc": [0, 74], "root_raised_cosin": [0, 66, 67, 68, 69, 70, 71, 75, 80, 81], "squar": [0, 71, 75], "root": [0, 71, 75], "srrc": [0, 71, 75], "farrowresampl": [0, 24, 25, 26, 27, 28, 29, 30, 77, 81, 82], "cubic": [0, 24], "farrow": [0, 24, 25, 26, 27, 28, 29, 30, 82], "arbitrari": [0, 24, 25, 26, 27, 28, 29, 30, 81, 82], "closedlooppl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 79, 81, 82], "A": [0, 1, 9, 11, 12, 13, 14, 15, 17, 47, 64, 74, 75, 79], "defin": [0, 1, 31, 78, 81], "perform": [0, 1, 78], "close": [0, 1, 8, 10, 82], "pll": [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 82], "dd": [0, 18, 19, 20, 21, 22, 23, 56, 79, 81, 82], "direct": [0, 18, 19, 79, 82], "digit": [0, 1, 9, 11, 12, 13, 14, 15, 18, 19, 47, 74, 75, 79, 82], "synthes": [0, 18, 19, 79, 82], "loopfilt": [0, 47, 48, 49, 50, 51, 52, 53, 54, 55, 79, 81, 82], "2nd": [0, 1, 47, 50, 79, 82], "order": [0, 1, 24, 26, 31, 41, 47, 50, 74, 75, 79, 82], "proport": [0, 1, 5, 47, 48, 50, 82], "plu": [0, 1, 47, 50, 82], "integr": [0, 1, 6, 47, 49, 50, 78, 82], "ppi": [0, 47, 50], "nco": [0, 1, 4, 8, 18, 19, 20, 50, 56, 57, 58, 59, 60, 61, 62, 63, 79, 81, 82], "numer": [0, 1, 18, 20, 56, 58, 78, 79, 82], "control": [0, 1, 18, 20, 56, 58, 79, 82], "oscil": [0, 1, 18, 20, 56, 58, 79, 82], "hexdump": [0, 64, 81], "arraylik": [0, 18, 21, 24, 27, 28, 31, 32, 33, 36, 47, 52, 56, 61, 64, 65, 66, 67, 68, 69, 70, 71, 73, 76], "byte": [0, 64], "width": [0, 64], "16": [0, 64], "str": [0, 64], "specifi": [0, 64, 78], "pack": [0, 64, 65, 81], "x": [0, 1, 18, 21, 24, 27, 31, 36, 47, 52, 56, 61, 65, 66, 67, 68, 71, 76, 79, 83], "bpe": [0, 65, 76], "binari": [0, 65, 76], "arrai": [0, 65, 71, 76, 78], "multipl": [0, 65, 76], "bit": [0, 64, 65, 76], "per": [0, 21, 61, 64, 65, 74, 75, 76], "element": [0, 64, 65, 76], "unpack": [0, 64, 76, 81], "use_styl": [0, 72], "appli": [0, 72], "": [0, 1, 9, 11, 12, 13, 15, 16, 31, 37, 38, 44, 66, 67, 68, 70, 71, 72, 77], "default": [0, 72], "matplotlib": [0, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80], "rcparam": [0, 72, 77, 79], "time_domain": [0, 71, 80, 81], "sample_r": [0, 1, 8, 16, 37, 38, 66, 67, 68, 71, 77, 79, 80], "1": [0, 1, 8, 11, 15, 17, 18, 19, 31, 32, 37, 38, 41, 47, 50, 51, 56, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83], "0": [0, 8, 18, 19, 31, 32, 37, 38, 50, 56, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83], "signal": [0, 1, 9, 11, 14, 15, 18, 21, 24, 27, 31, 36, 47, 52, 56, 61, 63, 71, 78, 79, 80], "n": [0, 1, 18, 21, 23, 24, 27, 31, 36, 37, 38, 40, 41, 44, 47, 52, 56, 61, 63, 66, 67, 68, 69, 70, 71, 79, 80], "b": [0, 31, 33, 64, 66, 67, 68, 69, 70, 73], "h": [0, 31, 37, 38, 40, 47, 66, 67, 69, 79, 80], "e": [0, 1, 18, 31, 37, 38, 66, 67, 78, 79], "j": [0, 1, 18, 31, 66, 67, 78, 79], "omega": [0, 19, 56, 58, 59, 66, 67, 68, 79], "step": [0, 18, 21, 23, 31, 44, 56, 61, 63, 66, 70], "zero": [0, 28, 31, 32, 46, 47, 65, 66, 67, 68, 69, 70, 71, 73, 79, 80], "pole": [0, 31, 32, 42, 66, 67, 68, 69, 70, 73], "frequency_respons": [0, 31, 37, 67, 78, 79, 80, 81], "group_delai": [0, 68, 78, 81], "group": [0, 68], "delai": [0, 18, 24, 47, 56, 68, 79], "tau_g": [0, 68], "impulse_respons": [0, 31, 40, 69, 74, 75, 78, 80, 81], "step_respons": [0, 31, 44, 70, 78, 79, 81], "zeros_pol": [0, 73, 78, 81], "kwarg": [0, 67, 68, 69, 70, 71, 73], "sdr": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83], "loop": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 81, 82], "thi": [1, 21, 31, 61, 66, 67, 68, 69, 70, 73, 77, 78, 79, 80], "i": [1, 8, 17, 24, 29, 31, 40, 44, 45, 47, 50, 51, 54, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83], "meant": 1, "analysi": [1, 8, 79, 82], "onli": [1, 24, 28, 31, 43, 79], "block": [1, 18, 47, 56], "diagram": [1, 18, 47, 56], "bb": [1, 79], "ped": [1, 7, 8, 50, 79], "lf": [1, 79], "lo": [1, 79], "input": [1, 9, 11, 14, 15, 18, 21, 24, 25, 27, 28, 31, 32, 33, 36, 40, 44, 47, 52, 56, 61, 65, 69, 70, 76, 78, 79], "local": [1, 79], "baseband": [1, 79], "phase": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 81], "error": [1, 7, 8, 14, 47, 50, 79], "detector": [1, 7, 8, 50, 79], "filter": [1, 5, 6, 8, 10, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 66, 67, 68, 69, 70, 71, 73, 74, 75, 81, 82], "The": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83], "transfer": [1, 10, 31, 32, 47, 78, 79], "function": [1, 10, 31, 32, 47, 78, 79, 80], "h_": [1, 79], "z": [1, 18, 31, 47, 56, 78, 79], "k_1": [1, 5, 47, 48, 79], "k_2": [1, 6, 47, 49, 79], "frac": [1, 9, 11, 14, 15, 31, 47, 79], "k_0": [1, 4, 8, 19, 50, 56, 57, 58, 79], "k_p": [1, 7, 8, 50, 79], "2": [1, 9, 11, 14, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80], "refer": [1, 9, 11, 12, 13, 14, 15, 24, 47, 74, 75, 78, 80], "michael": [1, 9, 11, 12, 13, 14, 15, 47, 74, 75], "rice": [1, 9, 11, 12, 13, 14, 15, 47, 74, 75], "commun": [1, 9, 11, 12, 13, 14, 15, 47, 74, 75, 79], "discret": [1, 9, 11, 12, 13, 14, 15, 47, 74, 75, 77, 79], "time": [1, 8, 9, 11, 12, 13, 14, 15, 31, 47, 50, 66, 71, 74, 75, 77, 78], "approach": [1, 9, 11, 12, 13, 14, 15, 47, 74, 75, 79], "appendix": [1, 47, 74, 75], "c": [1, 9, 11, 12, 13, 14, 15, 47, 79], "lock": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 81], "exampl": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79], "see": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 74, 75], "noise_bandwidth": [1, 8, 47, 50, 54], "damping_factor": [1, 8, 47, 50, 51], "creat": [1, 8, 18, 19, 24, 25, 31, 32, 33, 47, 50, 56, 58, 71, 77, 79, 80], "object": [1, 8, 78, 79], "frequency_lock_tim": [1, 9], "freq_offset": [1, 9, 11], "frequenc": [1, 9, 11, 13, 31, 37, 38, 47, 66, 67, 68, 80], "lock_tim": [1, 11, 79], "phase_error_vari": [1, 14], "cn0": [1, 14], "varianc": [1, 14], "steadi": [1, 14], "state": [1, 14, 24, 28, 29, 31, 43, 45], "phase_lock_tim": [1, 15], "bn": [1, 2], "nois": [1, 2, 3, 8, 14, 47, 50, 54, 79], "bandwidth": [1, 2, 3, 8, 12, 47, 50, 54, 74, 75, 79, 80], "b_n": [1, 2, 3, 8, 9, 11, 14, 15, 47, 50, 54], "hz": [1, 2, 8, 9, 11, 14, 37, 38, 47, 50, 54, 77], "bnt": [1, 3, 79], "normal": [1, 3, 8, 47, 50, 54, 79, 80], "t": [1, 3, 8, 47, 50, 54, 64, 77], "repres": [1, 10], "k0": [1, 4, 8, 18, 19, 50, 56, 57, 58], "gain": [1, 4, 5, 6, 7, 8, 18, 19, 31, 32, 39, 47, 48, 49, 50, 56, 57, 58, 79], "k1": [1, 5, 47, 48, 79], "k2": [1, 6, 47, 49, 79], "kp": [1, 7, 8, 50], "omega_3db": [1, 12], "3": [1, 9, 11, 12, 15, 64, 65, 66, 67, 68, 69, 70, 71, 76, 78, 79, 80, 81, 82], "db": [1, 12, 14, 80], "omega_": [1, 12], "textrm": [1, 12], "radian": [1, 12, 13, 14, 18, 19, 79], "omega_n": [1, 13, 79], "natur": [1, 13], "sampl": [1, 8, 16, 18, 19, 21, 23, 24, 28, 37, 38, 40, 44, 47, 50, 54, 56, 58, 59, 61, 63, 66, 67, 68, 69, 70, 71, 74, 75, 77, 79], "rate": [1, 8, 16, 24, 27, 37, 38, 66, 67, 68, 71], "f_": [1, 8, 16, 37, 38, 66, 67, 68, 71, 77, 78, 79, 80], "zeta": [1, 8, 17, 47, 50, 51], "damp": [1, 8, 17, 47, 50, 51, 79], "factor": [1, 8, 17, 47, 50, 51, 79], "properti": [2, 3, 4, 5, 6, 7, 10, 12, 13, 16, 17, 20, 26, 29, 30, 34, 35, 39, 41, 42, 45, 46, 48, 49, 51, 53, 54, 57, 59, 60], "paramet": [8, 9, 11, 14, 19, 21, 23, 25, 27, 28, 32, 33, 36, 37, 38, 40, 44, 50, 52, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76], "where": [8, 47, 50, 54, 78], "period": [8, 47, 50, 54], "second": [8, 9, 11, 15, 47, 50, 54], "critic": [8, 17, 47, 50, 51, 79], "underdamp": [8, 17, 47, 50, 51], "overdamp": [8, 17, 47, 50, 51], "ted": [8, 50], "t_": [9, 11, 15, 27, 80], "fl": [9, 11], "4": [9, 11, 38, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 82], "delta": [9, 11, 31, 40, 69, 78], "f": [9, 11, 31, 37, 38, 77, 78, 79, 80], "offset": [9, 11, 18, 19, 56, 58, 60, 79], "take": [9, 11, 15], "onto": [9, 11, 15], "equat": [9, 11, 12, 13, 14, 15, 31], "39": 9, "pl": [11, 15], "38": 11, "34": 12, "33": 13, "sigma_": 14, "theta_": 14, "n_0": 14, "carrier": 14, "densiti": [14, 80], "ratio": 14, "43": 14, "40": 15, "less": 17, "than": 17, "greater": 17, "note": [18, 31, 47, 56], "increment": [18, 19, 21, 56, 58, 59, 61, 79], "v": [18, 56], "y": [18, 21, 23, 27, 31, 36, 47, 52, 56, 61, 63, 71, 79], "output": [18, 21, 23, 31, 32, 33, 40, 44, 47, 52, 56, 61, 63, 65, 69, 70, 76, 77, 78, 79], "complex": [18, 21, 23, 77, 78], "exponenti": [18, 21, 23, 77, 78], "constant": [18, 19, 47, 56, 58, 59, 78, 79], "accumul": [18, 19, 56, 58, 59, 79], "absolut": [18, 19, 56, 58, 60], "unit": [18, 31, 44, 47, 56, 58, 59, 60, 70, 74, 75, 78, 79], "adder": [18, 47, 56, 79], "process": [18, 21, 56, 61, 78, 79], "variabl": [18, 21, 56, 61, 64, 79], "reset": [18, 22, 24, 28, 31, 43, 47, 55, 56, 62], "forward": [18, 23, 56, 63], "us": [18, 20, 24, 25, 32, 33, 47, 53, 64, 65, 66, 69, 70, 76, 78, 80, 83], "theta": [19, 56, 58, 60], "vari": [21, 61], "number": [23, 37, 38, 40, 44, 63, 64, 65, 66, 67, 68, 69, 70, 74, 75, 76], "resampl": [24, 25, 26, 27, 28, 29, 30, 81, 82], "http": 24, "wirelesspi": 24, "com": 24, "fraction": [24, 28, 77], "structur": 24, "stream": [24, 25, 28, 29, 31, 32, 33, 43, 45], "bool": [24, 25, 29, 31, 32, 33, 45], "fals": [24, 25, 31, 32, 33, 78, 80], "new": [24, 25], "given": [24, 27, 78], "r": [24, 27, 78, 79, 80], "none": [24, 28, 47, 55, 65, 66, 69, 70, 76, 77], "mode": [24, 25, 28, 29, 31, 32, 33, 43, 45], "index": [24, 28], "indic": [24, 25, 29, 31, 32, 33, 45], "whether": [24, 25, 29, 31, 32, 33, 45], "tap": [24, 30, 31, 34, 35, 78], "In": [25, 29, 32, 33, 45, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77], "previou": [25, 28, 32, 33], "ar": [25, 32, 33, 38, 65, 66, 67, 68, 72, 77, 78, 79, 80, 83], "preserv": [25, 29, 32, 33, 45], "between": [25, 29, 32, 33, 45, 79], "call": [25, 29, 32, 33, 45], "vector": 28, "should": 28, "equal": 28, "three": [28, 77, 80], "If": [28, 65, 66, 69, 70, 71, 76], "wrapper": 31, "scipi": [31, 80], "lfilter": 31, "It": [31, 47], "support": 31, "one": [31, 64, 66, 67, 68, 78, 80], "its": [31, 32, 78, 80], "feedforward": [31, 33, 35, 66, 67, 68, 69, 70, 73, 78], "coeffici": [31, 33, 66, 67, 68, 69, 70, 73, 78], "b_i": [31, 33, 35, 66, 67, 68, 69, 70, 73, 78], "feedback": [31, 33, 34, 66, 67, 68, 69, 70, 73, 78], "a_j": [31, 33, 34, 66, 67, 68, 69, 70, 73, 78], "These": [31, 72, 79], "differ": [31, 80], "a_0": 31, "left": 31, "sum_": 31, "m": 31, "right": 31, "sum": [31, 80], "limits_": 31, "classmethod": [31, 32], "zerospol": [31, 32, 66, 67, 68, 69, 70, 73, 78], "self": [31, 32], "from": [31, 32, 37, 38, 78, 79], "tupl": [31, 37, 38], "j2": [31, 37, 38], "pi": [31, 37, 38, 66, 67, 68, 69, 70, 71, 73, 77, 78, 79], "frequency_response_log": [31, 38], "logarithm": [31, 38, 66, 67, 68, 78], "axi": [31, 38, 66, 67, 68, 71, 77], "100": [31, 40, 44, 66, 69, 70, 71, 77, 80], "when": [31, 40, 44, 66, 67, 68, 69, 70, 77, 78], "u": [31, 44, 70, 78], "a_tap": [31, 34, 66, 67, 68, 69, 70, 73, 78, 79], "b_tap": [31, 35, 66, 67, 68, 69, 70, 73, 78, 79], "1024": [37, 38, 66, 67, 68, 80], "decad": [38, 66, 67, 68, 79], "plot": [38, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81], "space": 38, "can": [47, 65, 78, 83], "track": 47, "cannot": 47, "howev": [47, 77], "chirp": 47, "ramp": 47, "underli": [47, 53], "data": [64, 65, 76, 81], "displai": [64, 66, 67, 68], "each": 64, "consid": 64, "convert": 64, "line": 64, "string": 64, "contain": 64, "print": [64, 77, 78, 79], "quick": 64, "brown": 64, "fox": 64, "jump": 64, "over": 64, "lazi": 64, "dog": 64, "00000000": 64, "54": 64, "68": 64, "65": 64, "20": [64, 80], "71": 64, "75": [64, 79], "69": 64, "63": 64, "6b": 64, "62": 64, "72": 64, "6f": 64, "77": 64, "6e": 64, "00000010": 64, "66": 64, "78": 64, "6a": 64, "6d": 64, "70": 64, "73": 64, "76": 64, "74": 64, "00000020": 64, "6c": 64, "61": 64, "7a": 64, "79": 64, "64": [64, 78], "67": 64, "he": 64, "5": [64, 66, 67, 68, 69, 70, 71, 74, 75, 77, 78, 79, 80, 82], "6": [64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 78, 79], "7": 64, "8": [64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79], "9": [64, 80, 82], "10": [64, 66, 67, 68, 69, 70, 71, 74, 75, 77, 78, 79, 80], "01": [64, 78, 79, 80], "02": [64, 78, 79], "03": [64, 78], "04": [64, 78], "00000004": 64, "05": [64, 77, 78, 79], "06": 64, "07": 64, "08": 64, "00000008": 64, "09": 64, "0a": 64, "dtype": [65, 71, 76, 79], "dtypelik": [65, 76], "assum": [65, 76], "have": [65, 74, 75, 76], "most": [65, 76], "signific": [65, 76], "first": [65, 76], "enough": 65, "fill": 65, "last": 65, "remain": 65, "type": [65, 67, 68, 76], "smallest": 65, "unsign": 65, "integ": 65, "hold": 65, "out": [65, 72, 76], "uint8": [65, 76], "n_time": [66, 78], "n_freq": 66, "x_axi": [66, 67, 68, 78, 79], "side": [66, 67, 68, 78, 80], "two": [66, 67, 68, 77, 78], "log": [66, 67, 68, 78, 79], "For": [66, 67, 68, 69, 70, 73], "fir": [66, 67, 68, 69, 70, 73], "set": [66, 67, 68, 69, 70, 72, 73, 78], "n_t": 66, "domain": [66, 71], "length": [66, 69, 70, 74, 75, 77], "n_f": 66, "scale": [66, 67, 68, 78], "option": [66, 67, 68], "spectrum": [66, 67, 68], "h_srrc": [66, 67, 68, 69, 70, 71, 75], "plt": [66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80], "figur": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80], "figsiz": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80], "show": [66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80], "np": [66, 67, 68, 69, 70, 71, 73, 77, 78, 79, 80], "exp": [66, 67, 68, 69, 70, 71, 73, 77, 78, 79], "1j": [66, 67, 68, 69, 70, 71, 73, 77, 78, 79], "conj": [66, 67, 68, 69, 70, 73, 78, 79], "30": [66, 69, 70, 78], "liter": [67, 68], "addit": [67, 68, 69, 70, 71, 73], "keyword": [67, 68, 69, 70, 71, 73, 78], "argument": [67, 68, 69, 70, 71, 73, 78], "pass": [67, 68, 69, 70, 71, 73, 78], "pyplot": [67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80], "ylim": [68, 79, 80], "48": 68, "52": 68, "label": [71, 77, 79, 80], "bpsk": 71, "1000": 71, "symbol_map": 71, "random": 71, "randint": 71, "puls": [71, 74, 75, 81], "shape": [71, 74, 75, 81], "convolv": 71, "10e3": 71, "titl": [71, 77, 79, 80], "tight_layout": [71, 79], "qpsk": 71, "complex64": [71, 79], "style": 72, "mai": [72, 78], "revert": 72, "rcdefault": 72, "follow": [72, 79], "_rc_param": 72, "rc_param": 72, "ax": [72, 77, 79], "grid": [72, 77, 79, 80], "true": 72, "autolayout": 72, "max_open_warn": 72, "titleweight": 72, "bold": 72, "linestyl": [72, 77, 79, 80], "excess": [74, 75, 80], "le": [74, 75], "symbol": [74, 75, 80], "must": [74, 75], "even": [74, 75], "energi": [74, 75], "h_rc": 74, "numpi": [76, 77, 78, 79, 80], "import": [77, 78, 79, 80], "config": [77, 78, 79, 80], "inlinebackend": [77, 78, 79, 80], "print_figure_kwarg": [77, 78, 79, 80], "facecolor": [77, 78, 79, 80], "w": [77, 78, 79, 80], "widget": [77, 78, 79, 80], "color": [77, 79, 80], "prop_cycl": [77, 79], "by_kei": [77, 79], "continu": 77, "freq": [77, 79], "tx": 77, "arang": [77, 79, 80], "decai": [77, 78], "real": [77, 78, 79], "marker": [77, 78], "o": 77, "fillstyl": 77, "imag": 77, "xlabel": [77, 79, 80], "ylabel": [77, 79, 80], "amplitud": [77, 79], "origin": 77, "legend": [77, 79, 80], "which": [77, 79, 80], "both": [77, 79], "now": 77, "equival": 77, "accomplish": 77, "librari": [77, 81, 83], "def": 77, "resample_sign": 77, "new_sample_r": 77, "ty": 77, "size": [77, 79, 80], "notic": [77, 80], "everi": 77, "200": 77, "four": 77, "400": 77, "other": [77, 83], "appear": 77, "50": 77, "fourth": 77, "25": [77, 79, 80], "roughli": 77, "often": 77, "do": 77, "align": 77, "315": 77, "32": 77, "user": 78, "altern": 78, "below": 78, "conjug": 78, "0x000002214b040a88": 78, "47820725": 78, "comput": [78, 79, 80], "method": 78, "00000000e": 78, "00": 78, "78207252e": 78, "58172329e": 78, "10862468e": 78, "86109590e": 78, "21565653e": 78, "01140214e": 78, "57286400e": 78, "67772160e": 78, "47338728e": 78, "10422993e": 78, "89312837e": 78, "12240078e": 78, "03953322e": 78, "69685122e": 78, "63882791e": 78, "81474977e": 78, "47193366e": 78, "85259041e": 78, "15647504e": 78, "23851924e": 78, "42176895e": 78, "84684395e": 78, "42721858e": 78, "72236648e": 78, "14721649e": 78, "10813095e": 78, "94024315e": 78, "78877688e": 78, "74077567e": 78, "conveni": 78, "87820725": 78, "53637958": 78, "94724205": 78, "13335164": 78, "1455082": 78, "04436799": 78, "88708159": 78, "71930943": 78, "5719707": 78, "46154771": 78, "39261642": 78, "36139242": 78, "35935288": 78, "3763214": 78, "40270968": 78, "43085717": 78, "45557651": 78, "47410241": 78, "48566716": 78, "49090568": 78, "49124786": 78, "48840102": 78, "4839738": 78, "47925143": 78, "47510421": 78, "47199608": 78, "47005584": 78, "46917696": 78, "46911955": 78, "valu": 78, "denomin": 78, "73910363": 78, "30614675j": 78, "plane": 78, "evalu": 78, "shift": 78, "envelop": 78, "through": [78, 79], "easili": 78, "here": 78, "linspac": 78, "endpoint": 78, "concaten": 78, "0x000002214dc574c8": 78, "lyon": 78, "understand": 78, "3rd": 78, "edit": 78, "section": [78, 79], "insid": 78, "circl": 78, "sinusoid": 78, "outsid": 78, "unstabl": 78, "increas": 78, "ha": [79, 80], "configur": 79, "0x00000290f1ce3488": 79, "theta_0": 79, "phase_error": 79, "measur": 79, "freq_estim": 79, "estim": 79, "rang": 79, "subplot": 79, "suptitl": 79, "ones": 79, "angl": 79, "part": 79, "unwrap": 79, "system": 79, "avail": 79, "sqrt": [79, 80], "500": 79, "rf": 79, "xlim": [79, 80], "001": 79, "005": 79, "b_nt": 79, "0005": 79, "00001": 79, "0125": 79, "015": 79, "0175": 79, "t_lock": 79, "rectangular": 80, "rect": 80, "achiev": 80, "rc_0p1": 80, "rc_0p5": 80, "rc_0p9": 80, "k": 80, "xtick": 80, "110": 80, "nyquist": 80, "mean": 80, "adjac": 80, "specif": 80, "pm": 80, "sym": 80, "roll": 80, "60": 80, "total": 80, "nearli": 80, "compar": 80, "null": 80, "while": 80, "small": 80, "produc": 80, "smaller": 80, "lobe": 80, "much": 80, "higher": 80, "power": 80, "spectral": 80, "h_rect": 80, "freqz": 80, "worn": 80, "whole": 80, "h_rc_0p1": 80, "h_rc_0p5": 80, "h_rc_0p9": 80, "rel": 80, "main": 80, "p_rect": 80, "log10": 80, "cumsum": 80, "ab": 80, "p_rc_0p1": 80, "p_rc_0p5": 80, "p_rc_0p9": 80, "One": 80, "within": 80, "variou": 80, "srrc_0p1": 80, "srrc_0p5": 80, "srrc_0p9": 80, "therefor": 80, "similar": 80, "significantli": 80, "due": 80, "being": 80, "h_srrc_0p1": 80, "h_srrc_0p5": 80, "h_srrc_0p9": 80, "p_srrc_0p1": 80, "p_srrc_0p5": 80, "p_srrc_0p9": 80, "python": 81, "packag": 81, "softwar": 81, "radio": 81, "applic": 81, "manipul": 81, "util": 81, "releas": 82, "juli": 82, "2023": 82, "ad": 82, "matt": 82, "hostett": 82, "mhostett": 82, "semant": 83, "major": 83, "minor": 83, "patch": 83, "introduc": 83, "api": 83, "chang": 83, "featur": 83, "add": 83, "backward": 83, "compat": 83, "make": 83, "bug": 83, "fix": 83, "befor": 83, "There": 83, "guarante": 83, "them": 83, "thei": 83, "thought": 83}, "objects": {"": [[0, 0, 0, 1, "sdr", ""]], "sdr": [[1, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [18, 1, 1, "", "DDS", "Implements a direct digital synthesizer (DDS)."], [24, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [31, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [47, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [56, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [64, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [65, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [74, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [75, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [76, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."]], "sdr.ClosedLoopPLL": [[2, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [3, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [4, 2, 1, "", "K0", "The NCO gain $K_0$."], [5, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [6, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [7, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [8, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [9, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [10, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [11, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [12, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [13, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [14, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [15, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [16, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [17, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[8, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [8, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [8, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [8, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [8, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[9, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[11, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[14, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.DDS": [[19, 3, 1, "", "__init__", "Creates a direct digital synthesizer (DDS)."], [20, 2, 1, "", "nco", "The numerically-controlled oscillator (NCO) used by the DDS."], [21, 3, 1, "", "process", "Steps the DDS with the variable phase increment signal $x[n]$."], [22, 3, 1, "", "reset", "Resets the DDS."], [23, 3, 1, "", "step", "Steps the DDS forward by $N$ samples."]], "sdr.DDS.__init__": [[19, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [19, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [19, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.DDS.process": [[21, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the DDS."]], "sdr.DDS.step": [[23, 4, 2, "p-N", "N", "The number of samples $N$ to step the DDS forward."]], "sdr.FarrowResampler": [[25, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [26, 2, 1, "", "order", "The order of the filter."], [27, 3, 1, "", "resample", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [28, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [29, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [30, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__init__": [[25, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to resample()."]], "sdr.FarrowResampler.resample": [[27, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [27, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.reset": [[28, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[32, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [33, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [34, 2, 1, "", "a_taps", "The feedback taps $a_j$."], [35, 2, 1, "", "b_taps", "The feedforward taps $b_i$."], [36, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the IIR filter."], [37, 3, 1, "", "frequency_response", "Returns the frequency response $H(e^{j2 pi f})$ of the IIR filter."], [38, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(e^{j2 pi f})$ of the IIR filter on a logarithmic frequency axis"], [39, 2, 1, "", "gain", "The gain of the IIR filter."], [40, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [41, 2, 1, "", "order", "The order of the IIR filter, $N - 1$."], [42, 2, 1, "", "poles", "The poles of the IIR filter."], [43, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [44, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [45, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [46, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[32, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [32, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [32, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."], [32, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__init__": [[33, 4, 2, "p-a", "a", "The feedback coefficients $a_j$."], [33, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [33, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."]], "sdr.IIR.filter": [[36, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.IIR.frequency_response": [[37, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [37, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[38, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [38, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [38, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[40, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[44, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.LoopFilter": [[48, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [49, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [50, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [51, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [52, 3, 1, "", "filter", "Filters the input signal $x[n]$."], [53, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [54, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [55, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__init__": [[50, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [50, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [50, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [50, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.LoopFilter.filter": [[52, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.NCO": [[57, 2, 1, "", "K0", "The NCO gain $K_0$."], [58, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [59, 2, 1, "", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [60, 2, 1, "", "offset", "The absolute offset $theta$ of the NCO in units."], [61, 3, 1, "", "process", "Steps the NCO with the variable-increment signal $x[n]$."], [62, 3, 1, "", "reset", "Resets the NCO."], [63, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__init__": [[58, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [58, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [58, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in units."]], "sdr.NCO.process": [[61, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the NCO."]], "sdr.NCO.step": [[63, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.hexdump": [[64, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [64, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.pack": [[65, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [65, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [65, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.plot": [[66, 5, 1, "", "filter", "Plots the frequency response $H(e^{jomega})$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [67, 5, 1, "", "frequency_response", "Plots the frequency response $H(e^{jomega})$ of the filter."], [68, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [69, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [70, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [71, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [72, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [73, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.filter": [[66, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [66, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [66, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [66, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [66, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [66, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [66, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.frequency_response": [[67, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [67, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [67, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [67, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [67, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [67, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[68, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [68, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [68, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [68, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [68, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [68, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.impulse_response": [[69, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [69, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [69, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.plot.step_response": [[70, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [70, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [70, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.plot.time_domain": [[71, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\"."], [71, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[73, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [73, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.raised_cosine": [[74, 4, 2, "p-N_symbols", "N_symbols", "The length of the filter in symbols. The filter must have even order, sps * N_symbols == 1. The length of the filter is sps * N_symbols + 1."], [74, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [74, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.root_raised_cosine": [[75, 4, 2, "p-N_symbols", "N_symbols", "The length of the filter in symbols. The filter must have even order, sps * N_symbols == 1. The length of the filter is sps * N_symbols + 1."], [75, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [75, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.unpack": [[76, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [76, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [76, 4, 2, "p-x", "x", "The input array with bpe bits per element."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"sdr": [0, 81], "filter": [0, 78, 79, 80], "puls": [0, 80], "shape": [0, 80], "resampl": [0, 77], "phase": [0, 79], "time": [0, 79], "lock": [0, 79], "loop": [0, 79], "data": 0, "manipul": 0, "plot": 0, "configur": 0, "domain": [0, 79], "frequenc": [0, 78, 79], "analysi": 0, "note": 1, "constructor": [1, 18, 24, 31, 47, 56], "method": [1, 18, 24, 31, 47, 56], "properti": [1, 18, 24, 31, 47, 56], "see": [18, 56, 66, 67, 68, 69, 70, 73], "also": [18, 56, 66, 67, 68, 69, 70, 73], "farrow": 77, "arbitrari": 77, "construct": 77, "an": [77, 78], "input": 77, "signal": 77, "x": 77, "n": [77, 78], "t_": 77, "rate": 77, "r": 77, "y": 77, "frac": 77, "upsampl": 77, "integ": 77, "downsampl": 77, "irrat": 77, "iir": 78, "creat": 78, "examin": 78, "impuls": 78, "respons": [78, 79], "h": 78, "step": [78, 79], "": 78, "zero": 78, "pole": 78, "omega": 78, "group": 78, "delai": 78, "tau_g": 78, "fulli": 78, "analyz": [78, 79], "digit": 78, "stabil": 78, "design": 79, "proport": 79, "plu": 79, "integr": 79, "ppi": 79, "implement": 79, "pll": 79, "close": 79, "perform": 79, "compar": 79, "across": 79, "zeta": 79, "b_n": 79, "t": 79, "rais": 80, "cosin": 80, "squar": 80, "root": 80, "featur": 81, "v0": 82, "0": 82, "1": 82, "chang": 82, "contributor": 82, "version": 83, "alpha": 83, "releas": 83, "beta": 83}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"sdr": [[0, "sdr"], [81, "sdr"]], "Filtering": [[0, "filtering"]], "Pulse shaping": [[0, "pulse-shaping"]], "Resampling": [[0, "resampling"]], "Phase/time-locked loops": [[0, "phase-time-locked-loops"]], "Data manipulation": [[0, "data-manipulation"]], "Plotting": [[0, "plotting"]], "Configuration": [[0, "configuration"]], "Time-domain": [[0, "time-domain"]], "Frequency-domain": [[0, "frequency-domain"]], "Filter analysis": [[0, "filter-analysis"]], "Note": [[1, null]], "Constructors": [[1, "constructors"], [18, "constructors"], [24, "constructors"], [31, "constructors"], [47, "constructors"], [56, "constructors"]], "Methods": [[1, "methods"], [18, "methods"], [24, "methods"], [31, "methods"], [47, "methods"], [56, "methods"]], "Properties": [[1, "properties"], [18, "properties"], [24, "properties"], [31, "properties"], [47, "properties"], [56, "properties"]], "See also": [[18, null], [56, null], [66, null], [67, null], [68, null], [69, null], [70, null], [73, null]], "Farrow arbitrary resampler": [[77, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[77, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[77, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[77, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[77, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[77, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[77, "downsample-by-an-irrational-rate"]], "IIR filters": [[78, "iir-filters"]], "Create an IIR filter": [[78, "create-an-iir-filter"]], "Examine the impulse response, h[n]": [[78, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[78, "examine-the-step-response-s-n"]], "Examine the zeros and poles": [[78, "examine-the-zeros-and-poles"]], "Examine the frequency response, H(\\omega)": [[78, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[78, "examine-the-group-delay-tau-g-omega"]], "Fully analyze an IIR filter": [[78, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[78, "poles-and-digital-filter-stability"]], "Phase-locked loops": [[79, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[79, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[79, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[79, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[79, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[79, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[79, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[79, "compare-lock-time-across-b-n-t"]], "Raised cosine pulse shapes": [[80, "raised-cosine-pulse-shapes"]], "Raised cosine filters": [[80, "raised-cosine-filters"]], "Square-root raised cosine filters": [[80, "square-root-raised-cosine-filters"]], "Features": [[81, "features"]], "v0.0": [[82, "v0-0"]], "v0.0.1": [[82, "v0-0-1"]], "Changes": [[82, "changes"]], "Contributors": [[82, "contributors"]], "Versioning": [[83, "versioning"]], "Alpha releases": [[83, "alpha-releases"]], "Beta releases": [[83, "beta-releases"]]}, "indexentries": {"module": [[0, "module-sdr"]], "sdr": [[0, "module-sdr"]]}, "docurls": ["api/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.DDS/", "api/sdr.DDS.__init__/", "api/sdr.DDS.nco/", "api/sdr.DDS.process/", "api/sdr.DDS.reset/", "api/sdr.DDS.step/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.resample/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__init__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.filter/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.filter/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.process/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.hexdump/", "api/sdr.pack/", "api/sdr.plot.filter/", "api/sdr.plot.frequency_response/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.step_response/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.raised_cosine/", "api/sdr.root_raised_cosine/", "api/sdr.unpack/", "examples/farrow-resampler/", "examples/iir-filter/", "examples/phase-locked-loop/", "examples/raised-cosine-pulse/", "", "release-notes/v0.0/", "release-notes/versioning/"]})