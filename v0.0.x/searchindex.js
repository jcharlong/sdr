Search.setIndex({"titles": ["Conversions", "Data manipulation", "Filtering", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "Resampling", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.DDS", "sdr.DDS.__init__", "sdr.DDS.nco", "sdr.DDS.process", "sdr.DDS.reset", "sdr.DDS.step", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__init__", "sdr.FIR.delay", "sdr.FIR.filter", "sdr.FIR.frequency_response", "sdr.FIR.frequency_response_log", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.reset", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FIRInterpolator", "sdr.FIRInterpolator.__init__", "sdr.FIRInterpolator.filter", "sdr.FIRInterpolator.polyphase_taps", "sdr.FIRInterpolator.rate", "sdr.FIRInterpolator.reset", "sdr.FIRInterpolator.streaming", "sdr.FIRInterpolator.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.resample", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__init__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.filter", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.filter", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.process", "sdr.NCO.reset", "sdr.NCO.step", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.ber", "sdr.PSK.bps", "sdr.PSK.demodulate", "sdr.PSK.modulate", "sdr.PSK.order", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.Q", "sdr.Qinv", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.evm", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.hexdump", "sdr.iq_imbalance", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.filter", "sdr.plot.frequency_response", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.ser", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.raised_cosine", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.unpack", "Simulation", "Synchronization", "Documentation", "Installation", "Linter", "Unit Tests", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178], "ebn0_to_esn0": [0, 107, 123, 174, 176, 177], "ebn0": [0, 6, 99, 101, 113, 123, 124, 140, 174], "arraylik": [0, 1, 3, 4, 5, 6, 7, 26, 29, 32, 34, 39, 40, 42, 51, 52, 53, 59, 62, 63, 66, 67, 68, 71, 82, 87, 91, 96, 99, 100, 101, 103, 104, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 157, 159, 160, 161, 162, 163], "bp": [0, 99, 102, 123, 124, 126, 160, 174], "int": [0, 1, 5, 26, 31, 32, 34, 35, 38, 39, 41, 43, 44, 45, 46, 48, 51, 52, 55, 59, 61, 66, 72, 73, 75, 76, 79, 91, 98, 99, 100, 102, 105, 112, 116, 120, 121, 123, 124, 126, 127, 131, 132, 133, 135, 142, 143, 144, 145, 146, 147, 148, 150, 151, 156, 158, 160, 161, 162, 174], "ndarrai": [0, 1, 3, 5, 7, 26, 29, 31, 32, 37, 39, 42, 43, 44, 45, 48, 50, 51, 53, 54, 58, 59, 62, 65, 66, 69, 70, 71, 72, 73, 75, 77, 79, 81, 82, 87, 91, 96, 98, 99, 101, 103, 104, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 129, 130, 131, 132, 134, 135, 156, 158, 159, 160, 161, 162, 163], "convert": [0, 123, 124, 126, 127, 133, 160, 161], "ebn0_to_snr": [0, 124, 176, 177], "esn0_to_ebn0": [0, 101, 126, 176, 177], "esn0": [0, 6, 99, 107, 126, 127, 149, 174], "esn0_to_snr": [0, 127, 174, 176, 177], "sp": [0, 5, 124, 127, 131, 156, 158, 160, 161, 172, 174, 175], "1": [0, 6, 7, 9, 16, 19, 23, 25, 26, 27, 32, 43, 44, 51, 54, 58, 66, 67, 72, 73, 82, 85, 86, 91, 93, 99, 100, 101, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 169, 170, 171, 172, 173, 174, 175, 178], "snr_to_ebn0": [0, 101, 113, 160, 176, 177], "snr": [0, 3, 32, 34, 35, 36, 37, 38, 112, 113, 160, 161, 163, 174, 177], "snr_to_esn0": [0, 107, 161, 176, 177], "hexdump": [1, 32, 133, 176, 177], "byte": [1, 133], "width": [1, 133], "16": [1, 101, 107, 108, 123, 124, 126, 133, 140, 149, 160, 161, 172, 177], "str": [1, 133, 146, 150], "return": [1, 5, 9, 17, 19, 22, 23, 29, 31, 32, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 48, 53, 62, 66, 71, 72, 73, 75, 79, 87, 96, 98, 101, 103, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 156, 157, 158, 159, 160, 161, 162, 170, 171, 172, 174], "specifi": [1, 32, 35, 36, 38, 112, 113, 122, 133, 170, 171], "pack": [1, 32, 34, 133, 135, 176, 177], "x": [1, 4, 5, 6, 7, 9, 26, 29, 32, 34, 39, 42, 51, 53, 59, 62, 66, 71, 82, 87, 91, 96, 99, 103, 104, 109, 110, 111, 112, 114, 117, 119, 120, 121, 122, 125, 128, 129, 134, 135, 136, 138, 139, 141, 142, 143, 144, 146, 147, 148, 150, 152, 153, 157, 159, 162, 163, 166, 172, 173, 174, 178], "bpe": [1, 135, 162], "binari": [1, 3, 5, 100, 108, 114, 115, 116, 117, 118, 122, 135, 152, 162, 163, 174], "arrai": [1, 32, 54, 58, 100, 108, 114, 116, 117, 120, 121, 122, 132, 135, 153, 162, 171], "an": [1, 2, 3, 39, 45, 66, 67, 68, 75, 100, 101, 107, 113, 135, 140, 145, 149, 162, 166, 167, 176], "multipl": [1, 135, 162, 174], "bit": [1, 4, 6, 32, 34, 37, 99, 100, 101, 102, 108, 113, 114, 115, 117, 118, 123, 124, 126, 133, 135, 140, 160, 162, 177], "per": [1, 29, 96, 99, 100, 102, 112, 113, 123, 124, 126, 127, 129, 131, 133, 135, 156, 158, 159, 160, 161, 162, 172, 175], "element": [1, 133, 135, 162], "unpack": [1, 32, 34, 133, 162, 174, 176, 177], "class": [2, 4, 8, 9, 26, 32, 34, 35, 36, 37, 38, 39, 51, 59, 66, 82, 91, 99, 164, 170, 171, 174, 176], "fir": [2, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 142, 143, 144, 145, 147, 148, 151, 155, 172, 176, 177], "implement": [2, 5, 8, 26, 39, 51, 59, 66, 82, 88, 91, 99, 164, 169], "finit": [2, 39, 51, 177], "impuls": [2, 6, 39, 45, 51, 66, 75, 131, 142, 145, 153, 175, 177], "respons": [2, 6, 39, 43, 44, 45, 48, 51, 66, 72, 73, 75, 79, 131, 142, 143, 144, 145, 148, 151, 175, 177], "firinterpol": [2, 51, 52, 53, 54, 55, 56, 57, 58, 172, 174, 176, 177], "polyphas": [2, 51, 52, 54, 58], "interpol": [2, 51, 52, 53, 55, 177], "iir": [2, 6, 9, 18, 44, 45, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 88, 142, 143, 144, 145, 147, 148, 151, 155, 170, 173, 176, 177], "infinit": [2, 66, 177], "awgn_capac": [3, 113, 176, 177], "calcul": [3, 4, 113, 115, 118, 128, 130, 137], "addit": [3, 112, 113, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 163], "white": [3, 112, 113, 163], "gaussian": [3, 5, 112, 113, 131, 163, 176, 177], "nois": [3, 9, 10, 11, 16, 22, 32, 34, 35, 36, 37, 38, 82, 85, 89, 101, 107, 112, 113, 123, 124, 126, 127, 140, 149, 150, 160, 161, 163, 173], "awgn": [3, 101, 107, 112, 113, 128, 140, 141, 149, 163, 174, 176, 177], "bec_capac": [3, 115, 176, 177], "p": [3, 7, 109, 110, 114, 115, 117, 118, 122, 163], "erasur": [3, 114, 115, 122, 163], "bec": [3, 114, 115, 122, 163, 176, 177], "bsc_capac": [3, 118, 176, 177], "symmetr": [3, 117, 118, 122, 163], "bsc": [3, 117, 118, 122, 163, 176, 177], "fspl": [3, 130, 176], "d": [3, 130, 137, 165, 166, 176], "f": [3, 17, 19, 39, 43, 44, 66, 72, 73, 112, 129, 130, 131, 137, 159, 169, 170, 171, 172, 173, 174, 175], "free": [3, 130], "space": [3, 44, 73, 130], "db": [3, 9, 20, 22, 32, 34, 35, 36, 38, 101, 107, 112, 113, 123, 124, 126, 127, 128, 130, 131, 134, 136, 137, 140, 141, 149, 160, 161, 172, 174, 175], "parabolic_antenna": [3, 137, 176, 177], "freq": [3, 129, 137, 163, 169, 173], "tupl": [3, 32, 34, 37, 39, 43, 44, 66, 72, 73, 137, 141, 152], "gain": [3, 9, 12, 13, 14, 15, 16, 26, 27, 66, 67, 74, 82, 83, 84, 85, 91, 92, 93, 131, 137, 173], "g": [3, 37, 137, 166], "beamwidth": [3, 137], "theta": [3, 6, 27, 91, 93, 95, 137, 148], "parabol": [3, 137], "reflector": [3, 137], "float": [4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32, 34, 35, 36, 38, 43, 44, 59, 62, 66, 67, 72, 73, 74, 82, 83, 84, 85, 86, 89, 91, 92, 93, 94, 95, 99, 100, 106, 111, 112, 113, 114, 117, 119, 125, 128, 129, 131, 134, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 150, 152, 153, 156, 157, 158, 159, 163], "time": [4, 9, 16, 17, 19, 20, 21, 22, 23, 39, 66, 82, 85, 99, 111, 112, 119, 122, 125, 127, 129, 131, 134, 136, 138, 139, 142, 146, 150, 153, 156, 157, 158, 159, 161, 163, 169, 170, 171, 175, 176], "domain": [4, 111, 112, 119, 125, 129, 134, 136, 138, 139, 142, 146, 150, 153, 157, 159, 163, 176], "signal": [4, 6, 9, 17, 19, 22, 23, 26, 29, 32, 34, 35, 36, 37, 38, 39, 42, 51, 53, 59, 62, 66, 71, 82, 87, 91, 96, 98, 111, 112, 113, 119, 123, 124, 125, 126, 127, 129, 130, 131, 134, 136, 137, 138, 139, 146, 150, 153, 157, 159, 160, 161, 170, 171, 173, 175, 176, 177], "n": [4, 5, 6, 7, 9, 26, 29, 31, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 48, 51, 53, 59, 62, 66, 71, 72, 73, 75, 76, 79, 82, 87, 91, 96, 98, 109, 110, 111, 112, 113, 116, 119, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 136, 138, 139, 142, 143, 144, 145, 146, 147, 148, 150, 151, 153, 157, 159, 160, 161, 163, 173, 175, 176], "average_pow": [4, 111, 136, 176, 177], "averag": [4, 32, 111, 112, 113, 128, 136, 146], "papr": [4, 136, 172, 176, 177], "peak": [4, 119, 128, 136, 138, 139], "ratio": [4, 22, 32, 34, 35, 36, 37, 38, 101, 107, 112, 113, 123, 124, 126, 127, 136, 140, 149, 160, 161], "peak_pow": [4, 136, 138, 176, 177], "crest_factor": [4, 119, 136, 176, 177], "crest": [4, 119], "factor": [4, 9, 16, 25, 82, 85, 86, 119, 173], "peak_voltag": [4, 119, 139, 176, 177], "rms_voltag": [4, 119, 157, 176, 177], "root": [4, 5, 128, 153, 157, 158, 170], "mean": [4, 128, 146, 157, 175], "squar": [4, 5, 128, 130, 137, 153, 157, 158, 170], "rm": [4, 119, 128, 157], "errorr": [4, 32, 33, 34, 35, 36, 37, 38, 174, 176, 177], "A": [4, 9, 17, 19, 20, 21, 22, 23, 25, 32, 39, 82, 116, 132, 133, 134, 137, 156, 158, 164, 173], "error": [4, 6, 9, 15, 16, 22, 32, 33, 34, 36, 37, 38, 82, 85, 99, 101, 107, 118, 128, 140, 149, 173, 177], "rate": [4, 6, 9, 16, 24, 32, 33, 34, 36, 37, 43, 44, 51, 52, 53, 55, 59, 62, 72, 73, 99, 101, 107, 123, 124, 126, 129, 140, 142, 143, 144, 146, 147, 148, 149, 150, 153, 159, 160, 163, 177], "ber": [4, 6, 32, 99, 101, 140, 174, 176, 177], "symbol": [4, 6, 32, 34, 37, 99, 100, 101, 102, 103, 104, 107, 108, 112, 123, 124, 126, 127, 128, 129, 131, 141, 149, 152, 156, 158, 160, 161, 172, 175, 176, 177], "ser": [4, 6, 32, 99, 107, 149, 174, 176, 177], "evm": [4, 128, 176], "x_hat": [4, 6, 32, 34, 99, 103, 128, 141, 174], "ref": [4, 128, 131], "vector": [4, 32, 63, 128, 146, 150], "magnitud": [4, 128], "complex": [4, 6, 26, 29, 31, 99, 100, 103, 104, 108, 112, 113, 128, 134, 141, 152, 163, 169, 170, 171, 174], "hat": [4, 6, 34, 99, 103, 128, 141, 152], "k": [4, 5, 6, 34, 99, 100, 102, 103, 104, 105, 120, 121, 123, 124, 126, 128, 141, 152, 160, 172, 175], "psk": [5, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 128, 129, 134, 140, 141, 149, 152, 159, 172, 176, 177], "phase": [5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107, 108, 129, 134, 147, 148, 163], "shift": [5, 99, 101, 106, 107, 108, 170, 171], "kei": [5, 99, 101, 106, 107, 108], "demodul": [5, 99, 103, 174], "time_bandwidth": [5, 131], "span": [5, 131, 156, 158, 172, 175], "raised_cosin": [5, 156, 175, 176, 177], "alpha": [5, 131, 154, 156, 158, 172, 175], "rais": [5, 153, 156, 158, 170], "cosin": [5, 153, 156, 158, 170], "rc": [5, 156], "root_raised_cosin": [5, 142, 143, 144, 145, 147, 148, 151, 153, 155, 158, 170, 172, 174, 175, 176, 177], "srrc": [5, 153, 158, 172], "binary_cod": [5, 116, 176, 177], "gener": [5, 112, 116, 132, 165, 174], "code": [5, 100, 108, 116, 123, 124, 126, 132, 141, 152, 160, 166, 174, 177], "length": [5, 45, 48, 100, 116, 131, 132, 142, 145, 146, 150, 151, 156, 158, 169, 172, 175], "2": [5, 9, 17, 19, 22, 32, 43, 44, 51, 54, 58, 72, 73, 99, 100, 101, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 166, 168, 169, 170, 171, 172, 173, 174, 175], "gray_cod": [5, 132, 176, 177], "grai": [5, 100, 108, 132, 141, 152, 174], "diff_decod": [5, 120, 121, 176, 177], "y": [5, 26, 29, 31, 39, 42, 51, 53, 62, 66, 71, 82, 87, 91, 96, 98, 112, 114, 117, 120, 121, 122, 129, 134, 141, 150, 152, 153, 159, 173, 174], "y_prev": [5, 120, 121], "0": [5, 6, 7, 16, 26, 27, 32, 39, 43, 44, 51, 54, 58, 66, 67, 72, 73, 85, 91, 93, 99, 100, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 124, 125, 127, 128, 129, 131, 132, 134, 135, 137, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 169, 170, 171, 172, 173, 174, 175, 178], "differenti": [5, 101, 107, 120, 121, 177], "decod": [5, 120], "input": [5, 9, 17, 19, 22, 23, 26, 29, 39, 40, 42, 45, 48, 51, 52, 53, 59, 60, 62, 63, 66, 67, 68, 71, 75, 79, 82, 87, 91, 96, 99, 101, 107, 109, 112, 113, 114, 115, 117, 118, 120, 121, 122, 135, 145, 151, 162, 163, 170, 171, 173], "data": [5, 120, 121, 133, 135, 162, 176], "diff_encod": [5, 101, 107, 120, 121, 176, 177], "use_styl": [6, 154], "appli": [6, 51, 129, 134, 141, 152, 154, 159, 163], "": [6, 9, 17, 19, 20, 21, 23, 24, 34, 35, 36, 37, 38, 39, 43, 44, 48, 66, 72, 73, 79, 99, 103, 104, 112, 113, 124, 127, 128, 129, 134, 141, 142, 143, 144, 146, 147, 148, 150, 151, 153, 154, 159, 160, 161, 168, 169, 172, 174, 176], "default": [6, 45, 48, 100, 108, 150, 154, 174], "matplotlib": [6, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 169, 170, 171, 172, 173, 174, 175, 176], "rcparam": [6, 154, 169, 173], "time_domain": [6, 112, 153, 172, 174, 175, 176, 177], "sample_r": [6, 9, 16, 24, 43, 44, 72, 73, 129, 142, 143, 144, 146, 147, 148, 150, 153, 169, 173, 175], "periodogram": [6, 146, 172, 176, 177], "estim": [6, 99, 103, 146, 150, 173], "power": [6, 99, 111, 112, 113, 128, 136, 137, 138, 146, 175, 176], "spectral": [6, 146, 172, 175], "densiti": [6, 22, 146, 172, 175], "p_": [6, 101, 107, 111, 112, 122, 128, 136, 138, 140, 146, 149], "xx": [6, 146], "us": [6, 26, 28, 40, 52, 59, 60, 67, 68, 82, 88, 99, 103, 113, 115, 118, 128, 133, 135, 141, 142, 145, 146, 150, 151, 162, 165, 166, 167, 168, 170, 171, 174, 175, 176, 178], "welch": [6, 146, 150], "method": [6, 146, 150, 170, 171], "spectrogram": [6, 150, 176, 177], "kwarg": [6, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155], "function": [6, 7, 9, 18, 39, 66, 67, 82, 109, 110, 113, 131, 140, 146, 149, 150, 170, 171, 173, 175, 176, 177], "e_b": [6, 34, 35, 36, 37, 38, 99, 101, 113, 123, 124, 126, 140, 160, 176], "n_0": [6, 22, 34, 35, 36, 37, 38, 99, 101, 107, 112, 113, 123, 124, 126, 127, 128, 140, 141, 149, 160, 161, 174, 176], "constel": [6, 106, 112, 128, 129, 134, 141, 159, 176, 177], "heatmap": [6, 141, 174], "bool": [6, 39, 40, 49, 51, 52, 57, 59, 60, 64, 66, 67, 68, 80, 101, 107, 141, 148, 152], "fals": [6, 39, 40, 51, 52, 59, 60, 66, 67, 68, 101, 107, 114, 117, 122, 141, 171, 175], "e_": [6, 34, 35, 36, 37, 38, 99, 107, 112, 113, 123, 126, 127, 128, 141, 149, 161, 174, 176], "symbol_map": [6, 99, 106, 108, 128, 152, 153, 174, 176, 177], "map": [6, 99, 108, 128, 152, 176, 177], "b": [6, 66, 68, 113, 131, 133, 142, 143, 144, 145, 147, 148, 151, 155, 165, 175], "h": [6, 39, 40, 43, 44, 45, 51, 66, 72, 73, 75, 82, 131, 142, 143, 145, 172, 173, 175], "omega": [6, 27, 91, 93, 94, 142, 143, 144, 147, 148, 173], "step": [6, 26, 29, 31, 39, 48, 66, 79, 91, 96, 98, 142, 151], "zero": [6, 51, 63, 66, 67, 81, 82, 135, 142, 143, 144, 145, 147, 148, 151, 153, 155, 170, 172, 173, 175], "pole": [6, 66, 67, 77, 142, 143, 144, 145, 147, 148, 151, 155, 170], "frequency_respons": [6, 39, 43, 44, 66, 72, 73, 143, 170, 171, 173, 175, 176, 177], "group_delai": [6, 144, 170, 171, 176, 177], "group": [6, 144], "delai": [6, 26, 39, 41, 59, 82, 91, 120, 121, 144, 147, 173], "tau_g": [6, 144], "impulse_respons": [6, 39, 45, 66, 75, 131, 145, 156, 158, 170, 171, 175, 176, 177], "phase_delai": [6, 147, 176, 177], "tau_": [6, 147], "phi": [6, 99, 100, 106, 129, 134, 147], "phase_respons": [6, 148, 176, 177], "step_respons": [6, 39, 48, 66, 79, 151, 170, 171, 173, 176, 177], "zeros_pol": [6, 155, 171, 176, 177], "q": [7, 109, 110, 176, 177], "comput": [7, 99, 101, 107, 109, 110, 112, 130, 170, 171, 173, 175], "complementari": [7, 109, 110], "cumul": [7, 109, 110], "distribut": [7, 109, 110], "standard": [7, 109, 110], "normal": [7, 9, 11, 16, 82, 85, 89, 109, 110, 128, 131, 150, 173, 175], "mathcal": [7, 109, 110, 112, 122], "qinv": [7, 109, 110, 176, 177], "invers": [7, 110], "farrowresampl": [8, 59, 60, 61, 62, 63, 64, 65, 169, 176, 177], "cubic": [8, 59], "farrow": [8, 59, 60, 61, 62, 63, 64, 65, 177], "arbitrari": [8, 59, 60, 61, 62, 63, 64, 65, 177], "closedlooppl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 164, 173, 176, 177], "defin": [9, 39, 66, 112, 122, 131, 164, 171, 176], "perform": [9, 101, 107, 164, 170, 171, 174, 176], "close": [9, 16, 18, 164, 177], "loop": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 164, 177], "pll": [9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 164, 177], "thi": [9, 29, 34, 35, 36, 38, 39, 51, 66, 96, 99, 108, 112, 113, 128, 142, 143, 144, 145, 146, 147, 148, 150, 151, 155, 165, 166, 167, 168, 169, 171, 173, 174, 175], "i": [9, 16, 25, 32, 37, 39, 45, 48, 49, 51, 54, 57, 58, 59, 64, 66, 75, 79, 80, 82, 85, 86, 89, 99, 100, 109, 110, 112, 113, 115, 118, 122, 123, 124, 126, 127, 129, 130, 131, 133, 134, 135, 137, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 153, 155, 156, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178], "meant": 9, "analysi": [9, 16, 167, 173, 177], "onli": [9, 39, 47, 51, 56, 59, 63, 66, 78, 100, 108, 112, 168, 173, 174], "block": [9, 26, 51, 82, 91, 120, 121], "diagram": [9, 26, 51, 82, 91, 120, 121], "bb": [9, 172, 173], "ped": [9, 15, 16, 85, 173], "lf": [9, 173], "lo": [9, 173], "e": [9, 26, 37, 111, 114, 115, 125, 166, 170, 171, 173, 174], "j": [9, 26, 51, 54, 58, 66, 99, 112, 122, 134, 170, 171, 173], "nco": [9, 12, 16, 26, 27, 28, 85, 91, 92, 93, 94, 95, 96, 97, 98, 164, 173, 176, 177], "local": [9, 165, 173], "oscil": [9, 26, 28, 91, 93, 164, 173, 177], "baseband": [9, 172, 173], "detector": [9, 15, 16, 85, 173], "filter": [9, 13, 14, 16, 18, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 131, 142, 143, 144, 145, 147, 148, 151, 153, 155, 156, 158, 164, 172, 174, 175, 176, 177], "numer": [9, 26, 28, 91, 93, 164, 171, 173, 177], "control": [9, 26, 28, 91, 93, 164, 173, 177], "The": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 58, 59, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 173, 174, 175, 176, 178], "transfer": [9, 18, 39, 66, 67, 82, 131, 170, 171, 173], "2nd": [9, 82, 85, 164, 173, 177], "order": [9, 32, 37, 39, 46, 59, 61, 66, 76, 82, 85, 99, 100, 105, 112, 123, 124, 126, 128, 129, 131, 141, 156, 158, 159, 160, 164, 172, 173, 174, 177], "proport": [9, 13, 82, 83, 85, 130, 137, 164, 177], "plu": [9, 82, 85, 164, 177], "integr": [9, 14, 82, 84, 85, 164, 168, 171, 177], "h_": [9, 51, 54, 58, 173], "z": [9, 26, 39, 66, 82, 91, 120, 121, 170, 171, 173], "k_1": [9, 13, 82, 83, 173], "k_2": [9, 14, 82, 84, 173], "frac": [9, 17, 19, 22, 23, 66, 82, 99, 111, 112, 113, 119, 123, 124, 126, 127, 128, 130, 131, 134, 136, 137, 157, 160, 161, 173], "k_0": [9, 12, 16, 27, 85, 91, 92, 93, 173], "k_p": [9, 15, 16, 85, 173], "refer": [9, 17, 19, 20, 21, 22, 23, 32, 59, 82, 101, 107, 112, 119, 128, 129, 131, 136, 156, 158, 159, 171, 175], "michael": [9, 17, 19, 20, 21, 22, 23, 82, 156, 158], "rice": [9, 17, 19, 20, 21, 22, 23, 82, 156, 158], "digit": [9, 17, 19, 20, 21, 22, 23, 26, 27, 82, 101, 107, 156, 158, 164, 173, 176, 177], "commun": [9, 17, 19, 20, 21, 22, 23, 82, 101, 107, 156, 158, 173, 176], "discret": [9, 17, 19, 20, 21, 22, 23, 82, 112, 122, 127, 156, 158, 161, 163, 169, 173], "approach": [9, 17, 19, 20, 21, 22, 23, 82, 113, 115, 118, 156, 158, 173], "appendix": [9, 82, 156, 158], "c": [9, 17, 19, 20, 21, 22, 23, 34, 35, 36, 37, 38, 82, 99, 108, 113, 115, 118, 130, 137, 173], "lock": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "exampl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 140, 141, 142, 143, 144, 145, 147, 148, 149, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 173], "see": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 49, 50, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 106, 108, 131, 156, 158, 176], "noise_bandwidth": [9, 16, 82, 85, 89], "damping_factor": [9, 16, 82, 85, 86], "creat": [9, 16, 26, 27, 32, 33, 39, 40, 51, 52, 59, 60, 66, 67, 68, 82, 85, 91, 93, 99, 100, 106, 112, 128, 129, 153, 159, 169, 173, 175], "object": [9, 16, 32, 33, 99, 100, 171, 173], "frequency_lock_tim": [9, 17], "freq_offset": [9, 17, 19], "frequenc": [9, 17, 19, 21, 39, 43, 44, 66, 72, 73, 82, 129, 130, 137, 142, 143, 144, 146, 147, 148, 150, 163, 175, 176], "lock_tim": [9, 19, 173], "phase_error_vari": [9, 22], "cn0": [9, 22], "varianc": [9, 22, 112], "steadi": [9, 22], "state": [9, 22, 39, 47, 49, 51, 56, 57, 59, 63, 64, 66, 78, 80], "phase_lock_tim": [9, 23], "bn": [9, 10], "bandwidth": [9, 10, 11, 16, 20, 82, 85, 89, 113, 131, 156, 158, 173, 175], "b_n": [9, 10, 11, 16, 17, 19, 22, 23, 82, 85, 89], "hz": [9, 10, 16, 17, 19, 22, 43, 44, 72, 73, 82, 85, 89, 113, 129, 130, 131, 137, 169], "bnt": [9, 11, 173], "t": [9, 11, 16, 82, 85, 89, 131, 133, 169], "repres": [9, 18, 114, 115], "k0": [9, 12, 16, 26, 27, 85, 91, 92, 93], "k1": [9, 13, 82, 83, 173], "k2": [9, 14, 82, 84, 173], "kp": [9, 15, 16, 85], "omega_3db": [9, 20], "3": [9, 17, 19, 20, 23, 32, 51, 54, 58, 101, 106, 107, 108, 112, 113, 114, 116, 117, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 141, 142, 143, 144, 145, 147, 148, 151, 153, 155, 159, 160, 162, 171, 173, 175, 176], "omega_": [9, 20], "textrm": [9, 20], "radian": [9, 20, 21, 22, 26, 27, 173], "omega_n": [9, 21, 173], "natur": [9, 21], "sampl": [9, 16, 24, 26, 27, 29, 31, 39, 41, 43, 44, 45, 48, 51, 53, 59, 63, 72, 73, 75, 79, 82, 85, 89, 91, 93, 94, 96, 98, 112, 124, 127, 129, 131, 142, 143, 144, 145, 146, 147, 148, 150, 151, 153, 156, 158, 159, 160, 161, 163, 169, 172, 173, 175], "f_": [9, 16, 24, 43, 44, 53, 72, 73, 124, 127, 129, 131, 142, 143, 144, 146, 147, 148, 150, 153, 159, 160, 161, 169, 170, 171, 173, 175], "zeta": [9, 16, 25, 82, 85, 86], "damp": [9, 16, 25, 82, 85, 86, 173], "properti": [10, 11, 12, 13, 14, 15, 18, 20, 21, 24, 25, 28, 41, 46, 49, 50, 54, 55, 57, 58, 61, 64, 65, 69, 70, 74, 76, 77, 80, 81, 83, 84, 86, 88, 89, 92, 94, 95, 102, 105, 106, 108], "paramet": [16, 17, 19, 22, 27, 29, 31, 34, 35, 36, 38, 40, 42, 43, 44, 45, 48, 52, 53, 60, 62, 63, 67, 68, 71, 72, 73, 75, 79, 85, 87, 93, 96, 98, 100, 101, 103, 104, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162], "where": [16, 82, 85, 89, 100, 112, 113, 122, 123, 124, 126, 131, 160, 170, 171, 176], "period": [16, 82, 85, 89], "second": [16, 17, 19, 23, 32, 82, 85, 89, 131], "critic": [16, 25, 82, 85, 86, 173], "underdamp": [16, 25, 82, 85, 86], "overdamp": [16, 25, 82, 85, 86], "ted": [16, 85], "t_": [17, 19, 23, 62, 131, 175], "fl": [17, 19], "4": [17, 19, 32, 44, 51, 54, 58, 73, 101, 106, 107, 108, 112, 113, 115, 116, 118, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 140, 141, 142, 143, 144, 145, 147, 148, 149, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 165, 166, 169, 171, 172, 174, 177], "delta": [17, 19, 39, 45, 66, 75, 145, 170, 171], "offset": [17, 19, 26, 27, 91, 93, 95, 99, 100, 106, 129, 159, 163, 173], "take": [17, 19, 23], "onto": [17, 19, 23], "equat": [17, 19, 20, 21, 22, 23, 66, 99], "39": 17, "pl": [19, 23], "38": 19, "34": 20, "33": 21, "sigma_": 22, "theta_": 22, "carrier": [22, 99], "43": 22, "40": 23, "less": 25, "than": [25, 100, 108, 134, 141, 152], "greater": 25, "dd": [26, 27, 28, 29, 30, 31, 91, 164, 173, 176, 177], "direct": [26, 27, 164, 173, 177], "synthes": [26, 27, 164, 173, 177], "note": [26, 39, 51, 54, 58, 66, 82, 91, 99, 112, 113, 115, 118, 120, 121, 131, 134, 137, 150], "increment": [26, 27, 29, 91, 93, 94, 96, 173], "v": [26, 91, 165], "output": [26, 29, 31, 39, 42, 45, 48, 51, 53, 66, 67, 68, 75, 79, 82, 87, 91, 96, 98, 112, 113, 114, 115, 117, 118, 121, 122, 128, 135, 145, 151, 162, 165, 169, 170, 171, 173], "exponenti": [26, 29, 31, 169, 170, 171], "constant": [26, 27, 82, 91, 93, 94, 171, 173], "accumul": [26, 27, 32, 91, 93, 94, 173], "absolut": [26, 27, 91, 93, 95, 113], "unit": [26, 39, 48, 66, 79, 82, 91, 93, 94, 95, 100, 111, 112, 113, 120, 121, 125, 138, 139, 151, 156, 157, 158, 166, 170, 171, 173], "adder": [26, 82, 91, 120, 121, 173], "process": [26, 29, 91, 96, 171, 173], "variabl": [26, 29, 91, 96, 133, 173], "reset": [26, 30, 39, 47, 51, 56, 59, 63, 66, 78, 82, 90, 91, 97], "forward": [26, 31, 91, 98], "vari": [29, 96], "number": [31, 32, 34, 35, 38, 43, 44, 45, 48, 72, 73, 75, 79, 98, 99, 102, 112, 123, 124, 126, 131, 133, 135, 142, 143, 144, 145, 146, 147, 148, 150, 151, 156, 158, 160, 162], "measur": [32, 34, 111, 112, 119, 125, 128, 136, 138, 139, 157, 173, 176, 177], "new": [32, 33, 59, 60, 99, 100, 159], "In": [32, 40, 42, 49, 52, 53, 54, 57, 58, 60, 64, 67, 68, 80, 101, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 140, 141, 142, 143, 144, 145, 147, 148, 149, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 169, 174], "from": [32, 43, 44, 66, 67, 72, 73, 99, 108, 123, 124, 126, 127, 150, 160, 161, 165, 170, 171, 173, 176], "first": [32, 51, 135, 162, 167, 168], "receiv": [32, 34, 101, 107, 128, 130], "contain": [32, 112, 133], "10": [32, 54, 58, 101, 107, 112, 116, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 140, 141, 142, 143, 144, 145, 147, 148, 149, 151, 153, 155, 156, 158, 159, 160, 161, 169, 170, 171, 172, 173, 174, 175], "add": [32, 34, 37, 112, 129, 159, 163, 174, 178], "out": [32, 54, 58, 106, 108, 109, 110, 114, 116, 117, 120, 121, 122, 123, 124, 126, 127, 128, 130, 132, 135, 137, 144, 154, 160, 161, 162], "5": [32, 51, 54, 58, 112, 114, 116, 117, 118, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 137, 142, 143, 144, 145, 147, 148, 151, 153, 155, 156, 158, 159, 160, 161, 165, 169, 170, 171, 172, 173, 174, 175, 177], "total": [32, 175], "ar": [32, 34, 35, 36, 38, 40, 44, 51, 52, 54, 58, 60, 67, 68, 73, 99, 100, 113, 114, 115, 117, 118, 135, 141, 142, 143, 144, 146, 147, 148, 150, 152, 154, 165, 166, 167, 169, 171, 173, 175, 176, 178], "count": [32, 35, 128], "error_r": [32, 36, 37, 174], "everi": [32, 169], "can": [32, 34, 35, 36, 38, 82, 112, 128, 131, 135, 146, 150, 166, 170, 171, 174, 178], "obtain": 32, "follow": [32, 134, 154, 173], "6": [32, 51, 54, 58, 108, 116, 122, 123, 124, 128, 130, 132, 133, 137, 141, 142, 143, 144, 145, 147, 148, 151, 153, 155, 168, 170, 171, 173, 174], "tabul": [32, 33], "given": [32, 34, 35, 36, 38, 59, 62, 128, 170, 171], "none": [32, 36, 39, 45, 48, 59, 63, 82, 90, 99, 101, 107, 112, 113, 122, 135, 141, 142, 145, 146, 150, 151, 152, 162, 163, 169, 172, 174], "all": [32, 37, 128, 168], "ascend": [32, 37], "correspond": [32, 37], "other": [34, 35, 36, 38, 169, 178], "quantiti": [34, 35, 36, 37, 38], "howev": [34, 35, 36, 38, 82, 115, 118, 169], "user": [34, 35, 36, 38, 170, 171], "caution": [34, 35, 36, 38], "consist": [34, 35, 36, 37, 38], "instanc": [34, 35, 36, 38], "transmit": [34, 128], "section": [34, 35, 36, 37, 38, 171, 173], "specif": [37, 168, 175], "whatev": 37, "wa": [37, 113], "provid": [37, 99, 101, 107, 150, 176], "wrapper": [39, 66], "scipi": [39, 42, 53, 66, 146, 150, 175, 176], "convolv": [39, 42, 53, 153], "It": [39, 66, 82, 112], "support": [39, 66], "one": [39, 66, 100, 108, 131, 133, 142, 143, 144, 146, 147, 148, 150, 170, 171, 172, 175], "stream": [39, 40, 42, 47, 49, 51, 52, 53, 56, 57, 59, 60, 63, 64, 66, 67, 68, 78, 80, 99], "its": [39, 66, 67, 112, 170, 171, 175], "feedforward": [39, 40, 50, 51, 52, 54, 58, 66, 68, 70, 142, 143, 144, 145, 147, 148, 151, 155, 170, 171], "coeffici": [39, 40, 51, 52, 66, 68, 142, 143, 144, 145, 147, 148, 151, 155, 170, 171], "h_i": [39, 40, 50, 51, 52, 54, 58, 170], "sum_": [39, 66, 111, 112, 113, 125, 128, 157], "sum": [39, 66, 175], "limits_": [39, 66], "frequency_response_log": [39, 44, 66, 73], "logarithm": [39, 44, 66, 73, 142, 143, 144, 146, 147, 148, 170, 171], "axi": [39, 44, 66, 73, 141, 142, 143, 144, 146, 147, 148, 150, 152, 153, 169], "when": [39, 45, 48, 66, 75, 79, 112, 113, 114, 115, 117, 118, 127, 142, 143, 144, 145, 147, 148, 151, 161, 169, 170, 171], "mode": [39, 40, 42, 47, 49, 51, 52, 53, 56, 57, 59, 60, 63, 64, 66, 67, 68, 78, 80], "u": [39, 48, 66, 79, 151, 170, 171], "indic": [39, 40, 49, 51, 52, 57, 59, 60, 64, 66, 67, 68, 80, 99, 100, 101, 107, 134, 148], "whether": [39, 40, 49, 51, 52, 57, 59, 60, 64, 66, 67, 68, 80, 101, 107, 148], "tap": [39, 50, 51, 52, 54, 58, 59, 65, 66, 69, 70, 170, 171], "previou": [40, 52, 60, 63, 67, 68, 120, 121], "preserv": [40, 49, 52, 57, 60, 64, 67, 68, 80], "between": [40, 49, 51, 52, 57, 60, 64, 67, 68, 80, 130, 146, 150, 173], "call": [40, 49, 52, 57, 60, 64, 67, 68, 80], "liter": [42, 53, 143, 144, 147, 148], "full": [42, 53], "valid": [42, 53], "same": [42, 53, 170], "non": [42, 53], "convolut": [42, 53], "detail": [42, 53], "alwai": [42, 53], "produc": [42, 51, 53, 131, 175], "1024": [43, 44, 72, 73, 142, 143, 144, 147, 148, 172, 175], "plot": [43, 44, 45, 48, 72, 73, 75, 79, 101, 106, 107, 108, 112, 113, 115, 118, 128, 129, 131, 134, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 169, 170, 171, 173, 174, 175, 176, 177], "decad": [44, 73, 142, 143, 144, 147, 148, 170, 173], "equival": [51, 112, 113, 127, 161, 166, 169], "upsampl": 51, "r": [51, 52, 53, 54, 55, 58, 59, 62, 113, 123, 124, 126, 128, 131, 156, 158, 160, 165, 166, 167, 168, 171, 172, 173, 175], "insert": 51, "each": [51, 128, 133, 146, 150], "prototyp": [51, 54, 58], "instead": [51, 141], "decompos": 51, "parallel": 51, "commut": 51, "prevent": 51, "need": [51, 167, 168], "multipli": 51, "case": 51, "2x": 51, "hold": [51, 135], "top": 51, "bottom": 51, "relat": [51, 54, 58, 113, 131], "polyphase_tap": [51, 54, 58], "befor": [54, 58, 178], "decomposit": [54, 58], "after": [54, 58], "np": [54, 58, 101, 107, 112, 113, 114, 115, 117, 118, 122, 128, 129, 134, 140, 141, 142, 143, 144, 145, 147, 148, 149, 151, 153, 155, 159, 169, 170, 171, 172, 173, 174, 175], "arang": [54, 58, 112, 169, 172, 173], "7": [54, 58, 108, 116, 122, 128, 132, 133, 153], "8": [54, 58, 101, 106, 107, 108, 112, 113, 115, 116, 118, 122, 128, 131, 132, 133, 137, 140, 141, 142, 143, 144, 145, 147, 148, 149, 151, 152, 153, 154, 155, 156, 158, 166, 170, 171, 172, 173, 175], "9": [54, 58, 116, 122, 128, 132, 133, 156, 158, 172, 174, 175, 177], "resampl": [59, 60, 61, 62, 63, 64, 65, 176, 177], "http": [59, 119, 131, 136, 165, 166], "wirelesspi": 59, "com": [59, 131, 166], "fraction": [59, 63, 131, 169], "structur": 59, "index": [59, 63, 152, 165], "should": [63, 166], "equal": 63, "three": [63, 169, 175], "If": [63, 112, 113, 122, 135, 141, 142, 145, 146, 150, 151, 152, 153, 162, 176], "lfilter": 66, "b_i": [66, 68, 70, 142, 143, 144, 145, 147, 148, 151, 155, 171], "feedback": [66, 68, 69, 142, 143, 144, 145, 147, 148, 151, 155, 171], "a_j": [66, 68, 69, 142, 143, 144, 145, 147, 148, 151, 155, 171], "These": [66, 99, 154, 166, 173], "differ": [66, 100, 108, 175], "a_0": 66, "left": [66, 99, 111, 112, 113, 125, 128, 130, 131, 134, 137, 138, 139, 157], "m": [66, 99, 100, 102, 103, 104, 105, 108, 122, 123, 124, 126, 160, 165, 166, 167, 168], "right": [66, 99, 111, 112, 113, 125, 128, 130, 131, 134, 137, 138, 139, 157], "classmethod": [66, 67], "zerospol": [66, 67, 142, 143, 144, 145, 147, 148, 151, 155, 171], "self": [66, 67], "100": [66, 75, 79, 101, 107, 112, 113, 115, 118, 128, 140, 142, 145, 149, 151, 153, 159, 169, 173], "a_tap": [66, 69, 142, 143, 144, 145, 147, 148, 151, 155, 171, 173], "b_tap": [66, 70, 142, 143, 144, 145, 147, 148, 151, 155, 171, 173], "loopfilt": [82, 83, 84, 85, 86, 87, 88, 89, 90, 164, 173, 176, 177], "ppi": [82, 85, 164], "track": 82, "cannot": 82, "chirp": 82, "ramp": 82, "underli": [82, 88], "modul": [99, 100, 101, 104, 105, 107, 112, 123, 124, 126, 128, 129, 134, 140, 141, 149, 159, 160, 165, 168, 172, 174, 176, 177], "linear": [99, 112], "scheme": 99, "encod": [99, 101, 107, 120, 121, 176], "inform": [99, 123, 124, 126, 160], "sinusoid": [99, 112, 171], "taken": 99, "decim": [99, 100, 103, 104, 108, 174], "dot": [99, 108], "mathbb": [99, 108, 113], "exp": [99, 131, 134, 142, 143, 144, 145, 147, 148, 151, 153, 155, 169, 171, 172, 173], "pi": [99, 112, 130, 131, 134, 137, 142, 143, 144, 145, 147, 148, 151, 153, 155, 169, 170, 171, 172, 173], "phase_offset": [99, 100, 106, 112, 128, 129, 134, 141, 152, 159, 174], "valu": [99, 100, 101, 107, 109, 110, 120, 121, 131, 134, 141, 150, 152, 171], "maximum": [99, 103, 141, 152], "likelihood": [99, 103], "log_2": [99, 102, 113, 123, 124, 126, 160], "degre": [99, 100, 106, 129, 134, 137], "mapsto": [99, 108], "symbol_label": [100, 108, 174], "bin": [100, 108, 128, 152, 174], "ge": 100, "label": [100, 101, 107, 112, 128, 129, 131, 134, 140, 149, 150, 153, 156, 158, 159, 169, 172, 173, 174, 175], "consecut": 100, "adjac": [100, 108, 174, 175], "mai": [100, 108, 128, 154, 171], "more": [100, 108, 150, 177], "npt": 100, "whose": 100, "start": [100, 165], "0j": 100, "go": 100, "counter": 100, "clockwis": 100, "around": 100, "circl": [100, 171], "energi": [101, 107, 113, 123, 124, 125, 126, 127, 140, 149, 156, 158, 160, 161, 176, 177], "psd": [101, 107, 113, 123, 124, 126, 127, 140, 149, 160, 161], "were": [101, 107], "simon": [101, 107], "alouini": [101, 107], "over": [101, 107, 133], "fade": [101, 107], "channel": [101, 107, 113, 114, 115, 117, 118, 122, 140, 149, 176, 177], "chapter": [101, 107], "singl": [101, 107], "john": [101, 107], "proaki": [101, 107], "optimum": [101, 107], "theoret": [101, 107, 140, 149, 174], "curv": [101, 107, 140, 149], "bpsk": [101, 107, 140, 149, 153], "qpsk": [101, 106, 107, 112, 128, 129, 140, 141, 149, 152, 153, 159, 172], "psk8": [101, 107, 140, 149, 174], "psk16": [101, 107, 140, 149, 174], "linspac": [101, 107, 113, 115, 118, 140, 149, 171, 172, 173, 174], "plt": [101, 106, 107, 108, 112, 113, 115, 118, 128, 129, 131, 134, 140, 141, 142, 143, 144, 145, 147, 148, 149, 151, 152, 153, 155, 156, 158, 159, 169, 170, 171, 172, 173, 174, 175], "figur": [101, 106, 107, 108, 112, 113, 115, 118, 128, 129, 131, 134, 140, 141, 142, 143, 144, 145, 147, 148, 149, 151, 152, 153, 154, 155, 156, 158, 159, 169, 170, 171, 172, 173, 174, 175], "figsiz": [101, 106, 107, 108, 112, 113, 115, 118, 128, 129, 131, 134, 140, 141, 142, 143, 144, 145, 147, 148, 149, 151, 152, 153, 154, 155, 156, 158, 159, 169, 170, 171, 172, 173, 174, 175], "titl": [101, 107, 112, 113, 115, 118, 128, 129, 134, 140, 149, 153, 159, 169, 172, 173, 174, 175], "tight_layout": [101, 107, 112, 113, 115, 118, 128, 129, 140, 149, 153, 159, 172, 173, 174, 175], "compar": [101, 107, 175], "de": [101, 107], "true": [101, 107, 113, 114, 115, 117, 118, 122, 141, 148, 152, 154, 172, 174], "45": [106, 112, 128, 129, 134, 141, 152, 159, 174], "se": [107, 149], "00000000e": [108, 171], "00": [108, 171], "00j": 108, "07106781e": 108, "01": [108, 133, 171, 173], "01j": 108, "12323400e": 108, "17": [108, 128, 137], "83697020e": 108, "22464680e": 108, "16j": 108, "annot": [108, 152, 177], "real": [109, 110, 112, 169, 170, 171, 172, 173], "probabl": [109, 110, 114, 115, 117, 118, 122, 163, 176, 177], "exceed": [109, 110], "15865525393145707": [109, 110], "158655": [109, 110], "0000010494310452": [109, 110], "text": [111, 112, 113, 115, 118, 119, 128, 129, 130, 136, 138, 139, 157, 159], "avg": [111, 112, 136], "seed": 112, "which": [112, 113, 129, 134, 137, 141, 152, 159, 169, 173, 175], "ad": [112, 167, 176, 177], "desir": [112, 174], "explicitli": 112, "assum": [112, 122, 135, 162], "known": 112, "pass": [112, 114, 117, 122, 128, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 163, 165, 166, 170, 171], "must": [112, 131, 156, 158], "random": [112, 114, 117, 122, 128, 129, 134, 141, 153, 159, 172, 174], "numpi": [112, 162, 169, 170, 171, 172, 173, 174, 175, 176], "default_rng": 112, "noisi": 112, "w": [112, 169, 170, 171, 172, 173, 174, 175], "sigma": [112, 113], "For": [112, 142, 143, 144, 145, 147, 148, 151, 155, 170], "sim": 112, "cn": 112, "set": [112, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 154, 155, 167, 168, 171], "sin": 112, "ha": [112, 131, 137, 173, 174, 175], "randint": [112, 114, 117, 122, 128, 129, 134, 141, 153, 159, 172, 174], "1_000": [112, 129, 134, 159, 172], "zorder": [112, 129, 159], "infti": [112, 113], "nand": 112, "capac": [113, 115, 118, 176, 177], "2d": 113, "x_i": [113, 114, 115, 117, 118, 122, 134], "y_i": [113, 114, 115, 117, 118, 122], "monoton": 113, "decreas": 113, "limit": [113, 141, 152, 174], "20": [113, 114, 117, 122, 128, 129, 133, 134, 172, 174, 175], "xlabel": [113, 115, 118, 128, 169, 172, 173, 175], "ylabel": [113, 115, 118, 128, 169, 172, 173, 175], "grid": [113, 115, 118, 154, 169, 172, 173, 175], "At": 113, "occur": 113, "view": [113, 167], "59": 113, "shannon": 113, "semilogi": [113, 140, 149], "both": [113, 141, 152, 169, 173], "sequenc": [114, 117, 122, 163], "through": [114, 117, 122, 163, 170, 171, 173], "25": [114, 117, 122, 169, 172, 173, 175], "roughli": [114, 117, 169], "eras": 114, "11": [116, 132, 165], "12": [116, 132, 170, 174], "13": [116, 132], "14": [116, 132, 166], "15": [116, 132], "transit": [117, 118, 122, 163], "flip": 117, "h_b": 118, "cf": 119, "v_": [119, 139, 157], "en": [119, 136], "wikipedia": [119, 136], "org": [119, 136], "wiki": [119, 136], "uncod": 121, "dmc": [122, 163, 176, 177], "memoryless": [122, 163], "matrix": [122, 163], "pr": 122, "y_j": 122, "alphabet": 122, "size": [122, 169, 172, 173, 174, 175], "ldot": 122, "qam": [123, 124, 126, 160], "249387366082999": [123, 124], "020599913279625": [123, 161], "sym": [124, 127, 131, 160, 161, 175], "7506126339170005": [126, 160], "979400086720376": [126, 127], "system": [127, 161, 167, 168, 173, 176], "norm": 128, "noiseless": 128, "sourc": 128, "max": [128, 138, 139], "type": [128, 135, 143, 144, 146, 147, 148, 162, 177], "_": 128, "sqrt": [128, 131, 157, 172, 173, 175], "instantan": 128, "percentil": [128, 150], "1000": [128, 153, 174], "either": 128, "007333857960104": 128, "98137009448002": 128, "445418534734603": 128, "95th": 128, "95": 128, "312914192411206": 128, "inst_evm": 128, "hist": 128, "histogram": 128, "frequency_offset": [129, 163, 176, 177], "freq_rat": 129, "cycl": 129, "000": 129, "1e": [129, 174], "5e": 129, "deg": [129, 134], "path": [130, 176], "loss": [130, 176], "log_": [130, 136], "distanc": 130, "meter": [130, 137], "transmitt": 130, "km": 130, "link": [130, 176, 177], "ghz": [130, 137], "1e3": 130, "1e9": [130, 137], "92": 130, "44778322188337": 130, "so": [130, 131, 176], "doubl": [130, 137], "result": [130, 137, 174], "increas": [130, 137, 171], "2e3": 130, "98": 130, "468383135163": 130, "also": [130, 131, 176], "2e9": 130, "puls": [131, 153, 156, 158, 176, 177], "shape": [131, 153, 156, 158, 176, 177], "product": [131, 175], "side": [131, 142, 143, 144, 146, 147, 148, 150, 170, 171, 172, 175], "thought": [131, 178], "smaller": [131, 175], "wider": 131, "even": [131, 156, 158], "amplitud": [131, 134, 163, 169, 173], "nomin": 131, "passband": [131, 172], "ln": 131, "www": 131, "mathwork": 131, "help": 131, "gaussdesign": 131, "html": [131, 165], "onlinelibrari": 131, "wilei": 131, "doi": 131, "pdf": 131, "1002": 131, "9780470041956": 131, "app2": 131, "h_0p1": [131, 156, 158], "h_0p2": 131, "h_0p3": 131, "displai": [133, 141, 142, 143, 144, 146, 147, 148, 150, 152], "consid": 133, "line": 133, "string": [133, 146, 150], "print": [133, 169, 170, 171, 173], "quick": 133, "brown": 133, "fox": 133, "jump": 133, "lazi": 133, "dog": 133, "00000000": 133, "54": 133, "68": 133, "65": 133, "71": 133, "75": [133, 173, 174], "69": 133, "63": 133, "6b": 133, "62": 133, "72": 133, "6f": 133, "77": 133, "6e": 133, "00000010": 133, "66": 133, "78": 133, "6a": 133, "6d": 133, "70": [133, 175], "73": 133, "76": 133, "74": 133, "00000020": 133, "6c": 133, "61": 133, "7a": 133, "79": 133, "64": [133, 171], "67": 133, "he": 133, "02": [133, 171, 173], "03": [133, 171], "04": [133, 171], "00000004": 133, "05": [133, 169, 171, 173], "06": 133, "07": 133, "08": 133, "00000008": 133, "09": 133, "0a": 133, "iq_imbal": [134, 163, 176, 177], "iq": [134, 163], "imbal": [134, 163], "posit": 134, "compon": 134, "larger": [134, 141, 152], "quadratur": 134, "lead": [134, 174], "g_i": 134, "180": 134, "g_q": 134, "x_q": 134, "horizont": 134, "stretch": 134, "while": [134, 175], "neg": 134, "vertic": 134, "y1": 134, "y2": 134, "subplot": [134, 173, 174], "y_1": 134, "legend": [134, 169, 172, 173, 175], "y_2": 134, "northwest": 134, "northeast": 134, "dtype": [135, 153, 162, 173], "dtypelik": [135, 162], "have": [135, 162], "most": [135, 162], "signific": [135, 162], "enough": 135, "fill": 135, "last": [135, 165], "remain": 135, "smallest": 135, "unsign": 135, "integ": 135, "uint8": [135, 162], "diamet": 137, "effici": 137, "55": 137, "le": [137, 156, 158], "eta": 137, "dbi": 137, "half": 137, "arcsin": 137, "83": 137, "dish": 137, "21": 137, "810210290266568": 137, "437435887991374": 137, "23": 137, "sinc": [137, 165, 174], "antenna": [137, 176], "we": [137, 176], "observ": 137, "830810203546193": 137, "529544741425365": 137, "voltag": [139, 157, 176], "keyword": [140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 170, 171], "argument": [140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 170, 171], "pyplot": [140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 169, 170, 171, 172, 173, 174, 175], "scatter": 141, "hist2d": 141, "10_000": 141, "n_time": [142, 171], "n_freq": 142, "x_axi": [142, 143, 144, 146, 147, 148, 150, 170, 171, 172, 173], "two": [142, 143, 144, 146, 147, 148, 150, 169, 170, 171], "log": [142, 143, 144, 146, 147, 148, 170, 171, 173], "n_t": 142, "n_f": 142, "scale": [142, 143, 144, 146, 147, 148, 150, 170, 171], "option": [142, 143, 144, 146, 147, 148, 150], "spectrum": [142, 143, 144, 146, 147, 148, 150], "h_srrc": [142, 143, 144, 145, 147, 148, 151, 153, 155, 174], "1j": [142, 143, 144, 145, 147, 148, 151, 153, 155, 169, 171, 172, 173], "conj": [142, 143, 144, 145, 147, 148, 151, 155, 171, 173], "30": [142, 145, 151, 171, 177], "ylim": [144, 170, 173, 174, 175], "48": 144, "52": 144, "window": [146, 150], "hann": [146, 150], "overlap": [146, 150, 172], "fft": [146, 150], "median": 146, "segment": [146, 150], "256": [146, 150, 172], "point": [146, 150], "unwrap": [148, 173], "pcolormesh": 150, "By": 150, "color": [150, 169, 172, 173, 175], "bar": 150, "rang": [150, 173, 174], "10th": 150, "100th": 150, "dynam": 150, "activ": [150, 166], "chang": [150, 166, 178], "vmin": 150, "vmax": 150, "represent": 152, "50": [152, 169, 172], "10e3": 153, "complex64": [153, 173], "style": 154, "revert": 154, "rcdefault": 154, "_rc_param": 154, "rc_param": 154, "ax": [154, 169, 173], "autolayout": 154, "max_open_warn": 154, "titleweight": 154, "bold": 154, "linestyl": [154, 169, 173, 174, 175], "excess": [156, 158, 175], "h_0p5": [156, 158], "h_0p9": [156, 158], "sample_rate_offset": [159, 163, 176, 177], "ppm": [159, 163], "part": [159, 173], "million": 159, "sphinx": 165, "immateri": 165, "theme": 165, "depend": [165, 167, 168], "store": [165, 166, 168], "requir": [165, 166, 167, 168], "txt": [165, 166, 167, 168], "myst": 165, "parser": 165, "design": [165, 176], "updat": 165, "git": [165, 166], "math": 165, "dollar": 165, "ipykernel": 165, "nb": 165, "switch": 165, "pip": [165, 166, 167, 168], "python3": [165, 166, 167, 168], "built": 165, "run": 165, "command": 165, "dirhtml": 165, "locat": [165, 168], "home": 165, "page": 165, "site": 165, "directori": [165, 166], "get": 165, "necessari": 165, "webpag": 165, "webserv": 165, "easili": [165, 167, 168, 170, 171], "done": 165, "python": [165, 176], "server": 165, "8080": 165, "access": 165, "web": 165, "browser": 165, "localhost": 165, "latest": 166, "releas": [166, 177], "version": 166, "main": [166, 175], "wai": 166, "branch": 166, "mhostett": [166, 177], "Or": [166, 168], "pre": 166, "To": 166, "develop": [166, 167, 168], "librari": [166, 167, 168, 169, 174, 176, 178], "benefici": 166, "fashion": 166, "allow": [166, 168], "current": 166, "immedi": 166, "seen": 166, "upon": 166, "next": 166, "import": [166, 169, 170, 171, 172, 173, 174, 175, 176], "clone": 166, "repo": 166, "wherev": 166, "you": [166, 167, 168, 176], "like": [166, 176], "flag": 166, "includ": [166, 167, 168, 176], "packag": [166, 176], "lint": 166, "test": 166, "pylint": [166, 167], "black": 166, "jupyt": 166, "22": 166, "pytest": [166, 168], "cov": 166, "toml": [166, 167, 168], "xdist": 166, "benchmark": 166, "static": 167, "format": 167, "your": [167, 168], "dev": [167, 168], "variou": [167, 175], "nuisanc": 167, "warn": 167, "ignor": 167, "list": 167, "pyproject": [167, 168], "manual": [167, 168], "src": 167, "file": [167, 168], "vscode": [167, 168], "json": [167, 168], "instruct": [167, 168], "about": [167, 168], "how": [167, 168], "invok": [167, 168], "edit": [167, 171], "tool": [168, 176], "ini_opt": 168, "minvers": 168, "addopt": 168, "showloc": 168, "testpath": 168, "execut": 168, "test_psk": 168, "py": 168, "infrastructur": 168, "debug": 168, "ani": 168, "config": [169, 170, 171, 172, 173, 174, 175], "inlinebackend": [169, 170, 171, 172, 173, 174, 175], "print_figure_kwarg": [169, 170, 171, 172, 173, 174, 175], "facecolor": [169, 170, 171, 172, 173, 174, 175], "widget": [169, 170, 171, 172, 173, 174, 175], "prop_cycl": [169, 173], "by_kei": [169, 173], "continu": 169, "tx": 169, "decai": [169, 171], "marker": [169, 170, 171], "o": 169, "fillstyl": 169, "imag": 169, "origin": 169, "show": [169, 170, 171, 172, 173, 174, 175], "now": 169, "accomplish": [169, 174], "def": [169, 172, 174], "resample_sign": 169, "new_sample_r": 169, "ty": 169, "gca": [169, 174], "set_prop_cycl": [169, 174], "notic": [169, 175], "200": [169, 174], "four": 169, "400": 169, "appear": 169, "fourth": 169, "often": 169, "do": 169, "align": 169, "315": 169, "32": 169, "below": [170, 171], "00095881": 170, "00175008": 170, "00423912": 170, "00588237": 170, "00615087": 170, "00474585": 170, "00170436": 170, "0025481": 170, "00721629": 170, "01123216": 170, "01342329": 170, "01273174": 170, "00845039": 170, "00043678": 170, "01073645": 170, "02372925": 170, "03650167": 170, "04650553": 170, "05098414": 170, "04734541": 170, "03355823": 170, "00851466": 170, "0276993": 170, "07367186": 170, "12670168": 170, "18306847": 170, "2381038": 170, "28726435": 170, "32607284": 170, "3509308": 170, "35948882": 170, "conveni": [170, 171], "evalu": [170, 171], "envelop": [170, 171], "here": [170, 171], "altern": 171, "conjug": 171, "0x000002214b040a88": 171, "47820725": 171, "78207252e": 171, "58172329e": 171, "10862468e": 171, "86109590e": 171, "21565653e": 171, "01140214e": 171, "57286400e": 171, "67772160e": 171, "47338728e": 171, "10422993e": 171, "89312837e": 171, "12240078e": 171, "03953322e": 171, "69685122e": 171, "63882791e": 171, "81474977e": 171, "47193366e": 171, "85259041e": 171, "15647504e": 171, "23851924e": 171, "42176895e": 171, "84684395e": 171, "42721858e": 171, "72236648e": 171, "14721649e": 171, "10813095e": 171, "94024315e": 171, "78877688e": 171, "74077567e": 171, "87820725": 171, "53637958": 171, "94724205": 171, "13335164": 171, "1455082": 171, "04436799": 171, "88708159": 171, "71930943": 171, "5719707": 171, "46154771": 171, "39261642": 171, "36139242": 171, "35935288": 171, "3763214": 171, "40270968": 171, "43085717": 171, "45557651": 171, "47410241": 171, "48566716": 171, "49090568": 171, "49124786": 171, "48840102": 171, "4839738": 171, "47925143": 171, "47510421": 171, "47199608": 171, "47005584": 171, "46917696": 171, "46911955": 171, "denomin": 171, "73910363": 171, "30614675j": 171, "plane": 171, "endpoint": 171, "concaten": 171, "0x000002214dc574c8": 171, "lyon": 171, "understand": 171, "3rd": 171, "insid": 171, "outsid": 171, "unstabl": 171, "n_symbol": 172, "pulse_shap": 172, "els": 172, "pb": 172, "x_bb_rect": 172, "papr_bb_rect": 172, "x_pb_rect": 172, "papr_pb_rect": 172, "x_bb_0p1": 172, "papr_bb_0p1": 172, "x_pb_0p1": 172, "papr_pb_0p1": 172, "x_bb_0p5": 172, "papr_bb_0p5": 172, "x_pb_0p5": 172, "papr_pb_0p5": 172, "x_bb_0p9": 172, "papr_bb_0p9": 172, "x_pb_0p9": 172, "papr_pb_0p9": 172, "rectangular": [172, 175], "2f": 172, "rf": [172, 173], "xlim": [172, 173, 175], "sweep_alpha": 172, "bb_papr": 172, "pb_papr": 172, "append": 172, "bpsk_bb_papr": 172, "bpsk_pb_papr": 172, "qpsk_bb_papr": 172, "qpsk_pb_papr": 172, "psk8_bb_papr": 172, "psk8_pb_papr": 172, "psk16_bb_papr": 172, "psk16_pb_papr": 172, "configur": 173, "0x7f058065cf10": 173, "theta_0": 173, "phase_error": 173, "freq_estim": 173, "suptitl": [173, 174], "ones": 173, "angl": 173, "avail": [173, 174], "500": 173, "001": 173, "005": 173, "b_nt": 173, "0005": 173, "0125": 173, "015": 173, "0175": 173, "t_lock": 173, "analyze_psk": 174, "100_000": 174, "achiev": [174, 175], "n0": 174, "tx_mf": 174, "18": 174, "1e6": 174, "s_hat": 174, "bpsk_ber": 174, "bpsk_ser": 174, "qpsk_ber": 174, "qpsk_ser": 174, "psk8_ber": 174, "psk8_ser": 174, "psk16_ber": 174, "psk16_ser": 174, "simul": [174, 176], "bit_error_r": 174, "1e0": 174, "ideal": 174, "psk8_bin": 174, "psk8_grai": 174, "wors": 174, "rect": 175, "rc_0p1": 175, "rc_0p5": 175, "rc_0p9": 175, "nyquist": 175, "pm": 175, "roll": 175, "60": 175, "nearli": 175, "null": 175, "small": 175, "lobe": 175, "much": 175, "higher": 175, "h_rect": 175, "freqz": 175, "worn": 175, "whole": 175, "h_rc_0p1": 175, "h_rc_0p5": 175, "h_rc_0p9": 175, "rel": 175, "p_rect": 175, "log10": 175, "cumsum": 175, "ab": 175, "p_rc_0p1": 175, "p_rc_0p5": 175, "p_rc_0p9": 175, "One": 175, "within": 175, "srrc_0p1": 175, "srrc_0p5": 175, "srrc_0p9": 175, "therefor": 175, "similar": 175, "significantli": 175, "due": 175, "being": 175, "h_srrc_0p1": 175, "h_srrc_0p5": 175, "h_srrc_0p9": 175, "p_srrc_0p1": 175, "p_srrc_0p5": 175, "p_srrc_0p9": 175, "gauss_0p1": 175, "gauss_0p2": 175, "gauss_0p3": 175, "softwar": 176, "radio": 176, "goal": 176, "build": 176, "analyz": 176, "reli": 176, "interoper": 176, "veri": 176, "possibl": 176, "numba": 176, "acceler": 176, "computation": 176, "intens": 176, "addition": 176, "aim": 176, "replic": 176, "relev": 176, "matlab": 176, "dsp": 176, "toolbox": 176, "progress": 176, "someth": 176, "pleas": 176, "open": 176, "issu": 176, "github": 176, "synchron": 176, "convers": [176, 177], "model": [176, 177], "impair": [176, 177], "budget": [176, 177], "manipul": 176, "juli": 177, "2023": 177, "fpsl": 177, "matt": 177, "hostett": 177, "helper": 177, "improv": 177, "semant": 178, "major": 178, "minor": 178, "patch": 178, "introduc": 178, "api": 178, "featur": 178, "backward": 178, "compat": 178, "make": 178, "bug": 178, "fix": 178, "There": 178, "guarante": 178, "them": 178, "thei": 178}, "objects": {"": [[2, 0, 0, 1, "sdr", ""]], "sdr": [[9, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [26, 1, 1, "", "DDS", "Implements a direct digital synthesizer (DDS)."], [32, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [39, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [51, 1, 1, "", "FIRInterpolator", "Implements a polyphase finite impulse response (FIR) interpolating filter."], [59, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [66, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [82, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [91, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [99, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [109, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [110, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [111, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [112, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [113, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [114, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [115, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [116, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [117, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [118, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [119, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [120, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [121, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [122, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [123, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [124, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [125, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [126, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [127, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [128, 5, 1, "", "evm", "Calculates the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [129, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [130, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [131, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [132, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [133, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [134, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [135, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [136, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [137, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [138, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [139, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [156, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [157, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [158, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [159, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [160, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [161, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [162, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."]], "sdr.ClosedLoopPLL": [[10, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [11, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [12, 2, 1, "", "K0", "The NCO gain $K_0$."], [13, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [14, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [15, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [16, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [17, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [18, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [19, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [20, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [21, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [22, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [23, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [24, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [25, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[16, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [16, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [16, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [16, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [16, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[17, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[19, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[22, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.DDS": [[27, 3, 1, "", "__init__", "Creates a direct digital synthesizer (DDS)."], [28, 2, 1, "", "nco", "The numerically-controlled oscillator (NCO) used by the DDS."], [29, 3, 1, "", "process", "Steps the DDS with the variable phase increment signal $x[n]$."], [30, 3, 1, "", "reset", "Resets the DDS."], [31, 3, 1, "", "step", "Steps the DDS forward by $N$ samples."]], "sdr.DDS.__init__": [[27, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [27, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [27, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.DDS.process": [[29, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the DDS."]], "sdr.DDS.step": [[31, 4, 2, "p-N", "N", "The number of samples $N$ to step the DDS forward."]], "sdr.ErrorRate": [[33, 3, 1, "", "__init__", "Creates a new error rate tabulation object."], [34, 3, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [35, 3, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [36, 3, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [37, 3, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [38, 3, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[34, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [34, 4, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [34, 4, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[35, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[36, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[38, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[40, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [41, 2, 1, "", "delay", "The delay of the FIR filter in samples."], [42, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the FIR filter."], [43, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the FIR filter."], [44, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the FIR filter on a logarithmic frequency axis."], [45, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [46, 2, 1, "", "order", "The order of the FIR filter, $N$."], [47, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [48, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [49, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [50, 2, 1, "", "taps", "The feedforward taps $h_i$."]], "sdr.FIR.__init__": [[40, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$."], [40, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to filter()."]], "sdr.FIR.filter": [[42, 4, 2, "p-mode", "mode", "The non-streaming convolution mode. See scipy.signal.convolve() for details. In streaming mode, $N$ inputs always produce $N$ outputs."], [42, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.FIR.frequency_response": [[43, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [43, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.frequency_response_log": [[44, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [44, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [44, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[45, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.step_response": [[48, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIRInterpolator": [[52, 3, 1, "", "__init__", "Creates a polyphase FIR interpolating filter with feedforward coefficients $h_i$."], [53, 3, 1, "", "filter", "Filters and interpolates the input signal $x[n]$ with the FIR filter."], [54, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [55, 2, 1, "", "rate", "The interpolation rate $r$."], [56, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [57, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [58, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.FIRInterpolator.__init__": [[52, 4, 2, "p-rate", "rate", "The interpolation rate $r$."], [52, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to filter()."], [52, 4, 2, "p-taps", "taps", "The feedforward coefficients $h_i$."]], "sdr.FIRInterpolator.filter": [[53, 4, 2, "p-mode", "mode", "The non-streaming convolution mode. See scipy.signal.convolve() for details. In streaming mode, $N$ inputs always produce $N r$ outputs."], [53, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$."]], "sdr.FarrowResampler": [[60, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [61, 2, 1, "", "order", "The order of the filter."], [62, 3, 1, "", "resample", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [63, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [64, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [65, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__init__": [[60, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to resample()."]], "sdr.FarrowResampler.resample": [[62, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [62, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.reset": [[63, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[67, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [68, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [69, 2, 1, "", "a_taps", "The feedback taps $a_j$."], [70, 2, 1, "", "b_taps", "The feedforward taps $b_i$."], [71, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the IIR filter."], [72, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the IIR filter."], [73, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the IIR filter on a logarithmic frequency axis."], [74, 2, 1, "", "gain", "The gain of the IIR filter."], [75, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [76, 2, 1, "", "order", "The order of the IIR filter, $N$."], [77, 2, 1, "", "poles", "The poles of the IIR filter."], [78, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [79, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [80, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [81, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[67, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [67, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [67, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."], [67, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__init__": [[68, 4, 2, "p-a", "a", "The feedback coefficients $a_j$."], [68, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [68, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."]], "sdr.IIR.filter": [[71, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.IIR.frequency_response": [[72, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [72, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[73, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [73, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [73, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[75, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[79, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.LoopFilter": [[83, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [84, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [85, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [86, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [87, 3, 1, "", "filter", "Filters the input signal $x[n]$."], [88, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [89, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [90, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__init__": [[85, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [85, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [85, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [85, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.LoopFilter.filter": [[87, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.NCO": [[92, 2, 1, "", "K0", "The NCO gain $K_0$."], [93, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [94, 2, 1, "", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [95, 2, 1, "", "offset", "The absolute offset $theta$ of the NCO in units."], [96, 3, 1, "", "process", "Steps the NCO with the variable-increment signal $x[n]$."], [97, 3, 1, "", "reset", "Resets the NCO."], [98, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__init__": [[93, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [93, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [93, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in units."]], "sdr.NCO.process": [[96, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the NCO."]], "sdr.NCO.step": [[98, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.PSK": [[100, 3, 1, "", "__init__", "Creates a new PSK object."], [101, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [102, 2, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [103, 3, 1, "", "demodulate", "Demodulates the complex symbols $hat{x}[k]$ to decimal symbols $hat{s}[k]$ using maximum-likelihood estimation."], [104, 3, 1, "", "modulate", "Modulates to decimal symbols $s[k]$ to complex symbols $x[k]$."], [105, 2, 1, "", "order", "The modulation order $M = 2^k$."], [106, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [107, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [108, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[100, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [100, 4, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [100, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[101, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [101, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.demodulate": [[103, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to demodulate."]], "sdr.PSK.modulate": [[104, 4, 2, "p-symbols", "symbols", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.PSK.ser": [[107, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [107, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.Q": [[109, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[110, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.average_power": [[111, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[112, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [112, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [112, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [112, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[113, 4, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [113, 4, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.bec": [[114, 4, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [114, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[115, 4, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[116, 4, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[117, 4, 2, "p-p", "p", "The probability $p$ of a bit flip."], [117, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[118, 4, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[119, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.diff_decode": [[120, 4, 2, "p-y", "y", "The input encoded data $y[k]$."], [120, 4, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[121, 4, 2, "p-x", "x", "The input uncoded data $x[k]$."], [121, 4, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[122, 4, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [122, 4, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [122, 4, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [122, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.ebn0_to_esn0": [[123, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [123, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [123, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[124, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [124, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [124, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [124, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[125, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[126, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [126, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [126, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[127, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [127, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.evm": [[128, 4, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [128, 4, 2, "p-output", "output", "The output type of the EVM calculation."], [128, 4, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [128, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.frequency_offset": [[129, 4, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [129, 4, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [129, 4, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [129, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [129, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[130, 4, 2, "p-d", "d", "The distance $d$ in meters between the transmitter and receiver."], [130, 4, 2, "p-f", "f", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[131, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [131, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [131, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[132, 4, 2, "p-n", "n", "The length of the Gray code."]], "sdr.hexdump": [[133, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [133, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[134, 4, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [134, 4, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [134, 4, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.pack": [[135, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [135, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [135, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[136, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[137, 4, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [137, 4, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [137, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[138, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[139, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.plot": [[140, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [141, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [142, 5, 1, "", "filter", "Plots the frequency response $H(omega)$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [143, 5, 1, "", "frequency_response", "Plots the frequency response $H(omega)$ of the filter."], [144, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [145, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [146, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [147, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [148, 5, 1, "", "phase_response", "Plots the phase response $Theta(omega)$ of the filter."], [149, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [150, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [151, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [152, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [153, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [154, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [155, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[140, 4, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [140, 4, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."]], "sdr.plot.constellation": [[141, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [141, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [141, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.filter": [[142, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [142, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [142, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [142, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [142, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [142, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [142, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.frequency_response": [[143, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [143, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [143, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [143, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [143, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [143, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[144, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [144, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [144, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [144, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [144, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [144, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.impulse_response": [[145, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [145, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [145, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.plot.periodogram": [[146, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [146, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [146, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [146, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [146, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [146, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [146, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [146, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_delay": [[147, 4, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [147, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [147, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [147, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [147, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [147, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_response": [[148, 4, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [148, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [148, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [148, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [148, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [148, 4, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [148, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.ser": [[149, 4, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [149, 4, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.spectrogram": [[150, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [150, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [150, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [150, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [150, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [150, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [150, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[151, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [151, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [151, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.plot.symbol_map": [[152, 4, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [152, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [152, 4, 2, "p-symbol_map", "symbol_map", "The complex symbols $hat{x}[k]$."]], "sdr.plot.time_domain": [[153, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\"."], [153, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[155, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [155, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.raised_cosine": [[156, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [156, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [156, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[157, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[158, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [158, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [158, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[159, 4, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [159, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.snr_to_ebn0": [[160, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [160, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [160, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [160, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[161, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [161, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.unpack": [[162, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [162, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [162, 4, 2, "p-x", "x", "The input array with bpe bits per element."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"convers": 0, "from": [0, 166, 167, 168], "e_b": 0, "n_0": 0, "e_": 0, "": [0, 170, 171], "n": [0, 169, 170, 171], "data": 1, "manipul": 1, "filter": [2, 6, 170, 171, 173], "link": 3, "budget": 3, "channel": [3, 163], "capac": 3, "path": 3, "loss": 3, "antenna": 3, "measur": 4, "energi": 4, "power": [4, 172], "voltag": 4, "modul": [4, 5, 6], "class": 5, "puls": [5, 172, 175], "shape": [5, 172, 175], "symbol": [5, 174], "map": [5, 174], "encod": 5, "plot": [6, 172], "configur": [6, 167, 168], "time": [6, 172, 173], "domain": [6, 172, 173], "frequenc": [6, 170, 171, 172, 173], "analysi": 6, "probabl": 7, "resampl": [8, 169], "note": 9, "constructor": [9, 26, 32, 39, 51, 59, 66, 82, 91, 99], "method": [9, 26, 32, 39, 51, 59, 66, 82, 91, 99], "properti": [9, 26, 39, 51, 59, 66, 82, 91, 99], "see": [26, 32, 34, 43, 44, 45, 48, 72, 73, 75, 79, 91, 101, 107, 109, 110, 119, 136, 142, 143, 144, 145, 147, 148, 151, 155], "also": [26, 32, 34, 43, 44, 45, 48, 72, 73, 75, 79, 91, 101, 107, 109, 110, 119, 136, 142, 143, 144, 145, 147, 148, 151, 155], "simul": 163, "model": 163, "signal": [163, 169, 172], "impair": 163, "synchron": 164, "document": 165, "instal": [165, 166, 167, 168], "build": 165, "doc": 165, "serv": 165, "pypi": 166, "github": 166, "edit": 166, "local": 166, "folder": 166, "dev": 166, "depend": 166, "linter": 167, "run": [167, 168], "command": [167, 168], "line": [167, 168], "v": [167, 168], "code": [167, 168], "unit": 168, "test": 168, "farrow": 169, "arbitrari": 169, "construct": 169, "an": [169, 170, 171], "input": 169, "x": 169, "t_": 169, "rate": [169, 174], "r": 169, "y": 169, "frac": 169, "upsampl": 169, "integ": 169, "downsampl": 169, "irrat": 169, "fir": 170, "creat": [170, 171], "examin": [170, 171, 172], "impuls": [170, 171], "respons": [170, 171, 173], "h": [170, 171], "step": [170, 171, 173], "omega": [170, 171], "group": [170, 171], "delai": [170, 171], "tau_g": [170, 171], "fulli": [170, 171], "analyz": [170, 171, 173], "iir": 171, "zero": 171, "pole": 171, "digit": 171, "stabil": 171, "peak": 172, "averag": 172, "bpsk": [172, 174], "variou": 172, "across": [172, 173], "excess": 172, "bandwidth": 172, "phase": [173, 174], "lock": 173, "loop": 173, "design": 173, "proport": 173, "plu": 173, "integr": 173, "ppi": 173, "implement": 173, "pll": 173, "close": 173, "perform": 173, "compar": 173, "zeta": 173, "b_n": 173, "t": 173, "shift": 174, "kei": 174, "constel": 174, "qpsk": 174, "8": 174, "psk": 174, "16": 174, "error": 174, "curv": 174, "bit": 174, "rais": 175, "cosin": 175, "squar": 175, "root": 175, "gaussian": 175, "sdr": 176, "featur": 176, "v0": 177, "0": 177, "3": 177, "chang": 177, "contributor": 177, "2": 177, "1": 177, "version": 178, "alpha": 178, "releas": 178, "beta": 178}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Conversions": [[0, "conversions"]], "From E_b/N_0": [[0, "from-e-b-n-0"]], "From E_s/N_0": [[0, "from-e-s-n-0"]], "From S/N": [[0, "from-s-n"]], "Data manipulation": [[1, "data-manipulation"]], "Filtering": [[2, "filtering"]], "Link budgets": [[3, "link-budgets"]], "Channel capacity": [[3, "channel-capacity"]], "Path losses": [[3, "path-losses"]], "Antennas": [[3, "antennas"]], "Measurement": [[4, "measurement"]], "Energy": [[4, "energy"]], "Power": [[4, "power"]], "Voltage": [[4, "voltage"]], "Modulation": [[4, "modulation"], [5, "modulation"], [6, "modulation"]], "Classes": [[5, "classes"]], "Pulse shaping": [[5, "pulse-shaping"]], "Symbol mapping": [[5, "symbol-mapping"], [174, "symbol-mapping"]], "Symbol encoding": [[5, "symbol-encoding"]], "Plotting": [[6, "plotting"]], "Configuration": [[6, "configuration"], [167, "configuration"], [168, "configuration"]], "Time-domain": [[6, "time-domain"]], "Frequency-domain": [[6, "frequency-domain"]], "Filter analysis": [[6, "filter-analysis"]], "Probability": [[7, "probability"]], "Resampling": [[8, "resampling"]], "Note": [[9, null]], "Constructors": [[9, "constructors"], [26, "constructors"], [32, "constructors"], [39, "constructors"], [51, "constructors"], [59, "constructors"], [66, "constructors"], [82, "constructors"], [91, "constructors"], [99, "constructors"]], "Methods": [[9, "methods"], [26, "methods"], [32, "methods"], [39, "methods"], [51, "methods"], [59, "methods"], [66, "methods"], [82, "methods"], [91, "methods"], [99, "methods"]], "Properties": [[9, "properties"], [26, "properties"], [39, "properties"], [51, "properties"], [59, "properties"], [66, "properties"], [82, "properties"], [91, "properties"], [99, "properties"]], "See also": [[26, null], [32, null], [34, null], [43, null], [44, null], [45, null], [48, null], [72, null], [73, null], [75, null], [79, null], [91, null], [101, null], [107, null], [109, null], [110, null], [119, null], [136, null], [142, null], [143, null], [144, null], [145, null], [147, null], [148, null], [151, null], [155, null]], "Simulation": [[163, "simulation"]], "Channel models": [[163, "channel-models"]], "Signal impairments": [[163, "signal-impairments"]], "Synchronization": [[164, "synchronization"]], "Documentation": [[165, "documentation"]], "Install": [[165, "install"], [167, "install"], [168, "install"]], "Build the docs": [[165, "build-the-docs"]], "Serve the docs": [[165, "serve-the-docs"]], "Installation": [[166, "installation"]], "Install from PyPI": [[166, "install-from-pypi"]], "Install from GitHub": [[166, "install-from-github"]], "Editable install from local folder": [[166, "editable-install-from-local-folder"]], "Install the dev dependencies": [[166, "install-the-dev-dependencies"]], "Linter": [[167, "linter"]], "Run from the command line": [[167, "run-from-the-command-line"], [168, "run-from-the-command-line"]], "Run from VS Code": [[167, "run-from-vs-code"], [168, "run-from-vs-code"]], "Unit Tests": [[168, "unit-tests"]], "Farrow arbitrary resampler": [[169, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[169, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[169, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[169, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[169, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[169, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[169, "downsample-by-an-irrational-rate"]], "FIR filters": [[170, "fir-filters"]], "Create an FIR filter": [[170, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[170, "examine-the-impulse-response-h-n"], [171, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[170, "examine-the-step-response-s-n"], [171, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[170, "examine-the-frequency-response-h-omega"], [171, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[170, "examine-the-group-delay-tau-g-omega"], [171, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[170, "fully-analyze-a-fir-filter"]], "IIR filters": [[171, "iir-filters"]], "Create an IIR filter": [[171, "create-an-iir-filter"]], "Examine the zeros and poles": [[171, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[171, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[171, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[172, "peak-to-average-power"]], "BPSK signal with various pulse shapes": [[172, "bpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[172, "examine-time-domain"]], "Examine frequency domain": [[172, "examine-frequency-domain"]], "Plot across excess bandwidth": [[172, "plot-across-excess-bandwidth"]], "Phase-locked loops": [[173, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[173, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[173, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[173, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[173, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[173, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[173, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[173, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[174, "phase-shift-keying"]], "Constellations": [[174, "constellations"]], "BPSK": [[174, "bpsk"]], "QPSK": [[174, "qpsk"]], "8-PSK": [[174, "id1"]], "16-PSK": [[174, "id2"]], "Error rate curves": [[174, "error-rate-curves"]], "Bit error rate curves": [[174, "bit-error-rate-curves"]], "Symbol error rate curves": [[174, "symbol-error-rate-curves"]], "Pulse shapes": [[175, "pulse-shapes"]], "Raised cosine": [[175, "raised-cosine"]], "Square-root raised cosine": [[175, "square-root-raised-cosine"]], "Gaussian": [[175, "gaussian"]], "sdr": [[176, "sdr"]], "Features": [[176, "features"]], "v0.0": [[177, "v0-0"]], "v0.0.3": [[177, "v0-0-3"]], "Changes": [[177, "changes"], [177, "id1"], [177, "id3"]], "Contributors": [[177, "contributors"], [177, "id2"], [177, "id4"]], "v0.0.2": [[177, "v0-0-2"]], "v0.0.1": [[177, "v0-0-1"]], "Versioning": [[178, "versioning"]], "Alpha releases": [[178, "alpha-releases"]], "Beta releases": [[178, "beta-releases"]]}, "indexentries": {"module": [[2, "module-sdr"]], "sdr": [[2, "module-sdr"]]}, "docurls": ["api/conversions/", "api/data-manipulation/", "api/filtering/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/resampling/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.DDS/", "api/sdr.DDS.__init__/", "api/sdr.DDS.nco/", "api/sdr.DDS.process/", "api/sdr.DDS.reset/", "api/sdr.DDS.step/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__init__/", "api/sdr.FIR.delay/", "api/sdr.FIR.filter/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.frequency_response_log/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.reset/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FIRInterpolator/", "api/sdr.FIRInterpolator.__init__/", "api/sdr.FIRInterpolator.filter/", "api/sdr.FIRInterpolator.polyphase_taps/", "api/sdr.FIRInterpolator.rate/", "api/sdr.FIRInterpolator.reset/", "api/sdr.FIRInterpolator.streaming/", "api/sdr.FIRInterpolator.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.resample/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__init__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.filter/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.filter/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.process/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.ber/", "api/sdr.PSK.bps/", "api/sdr.PSK.demodulate/", "api/sdr.PSK.modulate/", "api/sdr.PSK.order/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.evm/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.filter/", "api/sdr.plot.frequency_response/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.ser/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.raised_cosine/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.unpack/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/installation/", "development/linter/", "development/unit-tests/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})