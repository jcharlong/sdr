Search.setIndex({"titles": ["Coding", "Conversions", "Data manipulation", "Detection", "Digital signal processing", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "sdr.AGC", "sdr.AGC.__call__", "sdr.AGC.__init__", "sdr.AGC.attack", "sdr.AGC.decay", "sdr.AGC.gain", "sdr.AGC.reference", "sdr.AGC.reset", "sdr.AGC.streaming", "sdr.BinaryErasureChannel", "sdr.BinaryErasureChannel.X", "sdr.BinaryErasureChannel.Y", "sdr.BinaryErasureChannel.__call__", "sdr.BinaryErasureChannel.__init__", "sdr.BinaryErasureChannel.capacities", "sdr.BinaryErasureChannel.capacity", "sdr.BinaryErasureChannel.p", "sdr.BinarySymmetricChannel", "sdr.BinarySymmetricChannel.X", "sdr.BinarySymmetricChannel.Y", "sdr.BinarySymmetricChannel.__call__", "sdr.BinarySymmetricChannel.__init__", "sdr.BinarySymmetricChannel.capacities", "sdr.BinarySymmetricChannel.capacity", "sdr.BinarySymmetricChannel.p", "sdr.BlockInterleaver", "sdr.BlockInterleaver.__init__", "sdr.CPM", "sdr.CPM.__init__", "sdr.CPM.ber", "sdr.CPM.bps", "sdr.CPM.demodulate", "sdr.CPM.index", "sdr.CPM.modulate", "sdr.CPM.order", "sdr.CPM.phase_offset", "sdr.CPM.pulse_shape", "sdr.CPM.rx_filter", "sdr.CPM.ser", "sdr.CPM.sps", "sdr.CPM.tx_filter", "sdr.Channel", "sdr.Channel.__call__", "sdr.Channel.__init__", "sdr.Channel.capacities", "sdr.Channel.capacity", "sdr.Channel.reset", "sdr.Channelizer", "sdr.Channelizer.__call__", "sdr.Channelizer.__init__", "sdr.Channelizer.channels", "sdr.Channelizer.method", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.Decimator", "sdr.Decimator.__init__", "sdr.Decimator.method", "sdr.Decimator.reset", "sdr.Differentiator", "sdr.Differentiator.__init__", "sdr.DiscreteMemorylessChannel", "sdr.DiscreteMemorylessChannel.P", "sdr.DiscreteMemorylessChannel.X", "sdr.DiscreteMemorylessChannel.Y", "sdr.DiscreteMemorylessChannel.__call__", "sdr.DiscreteMemorylessChannel.__init__", "sdr.EnergyDetector", "sdr.EnergyDetector.p_d", "sdr.EnergyDetector.p_fa", "sdr.EnergyDetector.roc", "sdr.EnergyDetector.threshold", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__call__", "sdr.FIR.__init__", "sdr.FIR.__len__", "sdr.FIR.delay", "sdr.FIR.flush", "sdr.FIR.frequency_response", "sdr.FIR.group_delay", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.phase_delay", "sdr.FIR.reset", "sdr.FIR.state", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FLFSR", "sdr.FLFSR.Taps", "sdr.FLFSR.__init__", "sdr.FLFSR.characteristic_poly", "sdr.FLFSR.feedback_poly", "sdr.FLFSR.field", "sdr.FLFSR.initial_state", "sdr.FLFSR.order", "sdr.FLFSR.reset", "sdr.FLFSR.state", "sdr.FLFSR.step", "sdr.FLFSR.taps", "sdr.FLFSR.to_galois_lfsr", "sdr.FarrowResampler", "sdr.FarrowResampler.__call__", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.delay", "sdr.FarrowResampler.flush", "sdr.FarrowResampler.order", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.state", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.FractionalDelay", "sdr.FractionalDelay.__init__", "sdr.GLFSR", "sdr.GLFSR.Taps", "sdr.GLFSR.__init__", "sdr.GLFSR.characteristic_poly", "sdr.GLFSR.feedback_poly", "sdr.GLFSR.field", "sdr.GLFSR.initial_state", "sdr.GLFSR.order", "sdr.GLFSR.reset", "sdr.GLFSR.state", "sdr.GLFSR.step", "sdr.GLFSR.taps", "sdr.GLFSR.to_fibonacci_lfsr", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__call__", "sdr.IIR.__init__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.frequency_response", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.state", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.Integrator", "sdr.Integrator.__init__", "sdr.Interleaver", "sdr.Interleaver.__init__", "sdr.Interleaver.__len__", "sdr.Interleaver.deinterleave", "sdr.Interleaver.interleave", "sdr.Interleaver.inverse_map", "sdr.Interleaver.map", "sdr.Interpolator", "sdr.Interpolator.__init__", "sdr.Interpolator.method", "sdr.LeakyIntegrator", "sdr.LeakyIntegrator.__init__", "sdr.LinearModulation", "sdr.LinearModulation.__init__", "sdr.LinearModulation.ber", "sdr.LinearModulation.bps", "sdr.LinearModulation.decide_symbols", "sdr.LinearModulation.demodulate", "sdr.LinearModulation.map_symbols", "sdr.LinearModulation.modulate", "sdr.LinearModulation.order", "sdr.LinearModulation.phase_offset", "sdr.LinearModulation.pulse_shape", "sdr.LinearModulation.rx_filter", "sdr.LinearModulation.ser", "sdr.LinearModulation.sps", "sdr.LinearModulation.symbol_map", "sdr.LinearModulation.tx_filter", "sdr.LoopFilter", "sdr.LoopFilter.__call__", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.iir", "sdr.LoopFilter.integral_gain", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.proportional_gain", "sdr.LoopFilter.reset", "sdr.MLPED", "sdr.MLPED.A_received", "sdr.MLPED.A_reference", "sdr.MLPED.__call__", "sdr.MLPED.__init__", "sdr.MLPED.data_aided_error", "sdr.MLPED.decision_directed_error", "sdr.MLPED.gain", "sdr.MSK", "sdr.MSK.__init__", "sdr.MovingAverager", "sdr.MovingAverager.__init__", "sdr.NCO", "sdr.NCO.__call__", "sdr.NCO.__init__", "sdr.NCO.gain", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.reset", "sdr.NCO.step", "sdr.OQPSK", "sdr.OQPSK.__init__", "sdr.PED", "sdr.PED.__call__", "sdr.PED.__init__", "sdr.PED.data_aided_error", "sdr.PED.decision_directed_error", "sdr.PED.gain", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.ber", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.PiMPSK", "sdr.PiMPSK.__init__", "sdr.PolyphaseFIR", "sdr.PolyphaseFIR.__call__", "sdr.PolyphaseFIR.__init__", "sdr.PolyphaseFIR.branches", "sdr.PolyphaseFIR.decimation", "sdr.PolyphaseFIR.delay", "sdr.PolyphaseFIR.input", "sdr.PolyphaseFIR.interpolation", "sdr.PolyphaseFIR.order", "sdr.PolyphaseFIR.output", "sdr.PolyphaseFIR.polyphase_order", "sdr.PolyphaseFIR.polyphase_taps", "sdr.PolyphaseFIR.rate", "sdr.PolyphaseFIR.reset", "sdr.PolyphaseFIR.taps", "sdr.Q", "sdr.Qinv", "sdr.ReplicaCorrelator", "sdr.ReplicaCorrelator.p_d", "sdr.ReplicaCorrelator.p_fa", "sdr.ReplicaCorrelator.roc", "sdr.ReplicaCorrelator.threshold", "sdr.Resampler", "sdr.Resampler.__call__", "sdr.Resampler.__init__", "sdr.Resampler.method", "sdr.albersheim", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.barker_code", "sdr.bec", "sdr.bec_capacity", "sdr.berlekamp_massey", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.db", "sdr.design_bandpass_fir", "sdr.design_bandstop_fir", "sdr.design_frac_delay_fir", "sdr.design_highpass_fir", "sdr.design_lowpass_fir", "sdr.design_multirate_fir", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.downsample", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.euclidean", "sdr.evm", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.hadamard_code", "sdr.half_sine", "sdr.hamming", "sdr.hexdump", "sdr.iq_imbalance", "sdr.linear", "sdr.m_sequence", "sdr.mix", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.percent", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.eye", "sdr.plot.filter", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.magnitude_response", "sdr.plot.p_d", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.phase_tree", "sdr.plot.raster", "sdr.plot.roc", "sdr.plot.ser", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.polyphase_decompose", "sdr.ppb", "sdr.ppm", "sdr.raised_cosine", "sdr.rectangular", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.to_complex_bb", "sdr.to_real_pb", "sdr.unpack", "sdr.upsample", "sdr.walsh_code", "sdr.wavelength", "sdr.zadoff_chu_sequence", "Sequences", "Simulation", "Synchronization", "Documentation", "Formatting", "Installation", "Unit Tests", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"class": [0, 3, 4, 6, 7, 10, 19, 27, 35, 37, 51, 57, 62, 79, 83, 85, 91, 96, 98, 99, 100, 101, 102, 103, 119, 124, 132, 142, 144, 149, 157, 173, 175, 182, 185, 187, 203, 212, 220, 222, 224, 232, 234, 240, 246, 248, 265, 270, 360, 361, 362, 368, 369, 372, 374, 375], "sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376], "implement": [0, 3, 4, 7, 10, 19, 27, 35, 37, 57, 79, 83, 85, 91, 103, 132, 142, 157, 173, 175, 182, 185, 187, 203, 207, 212, 220, 222, 224, 232, 234, 240, 246, 248, 265, 270, 274, 281, 361, 362, 367], "an": [0, 2, 3, 4, 5, 10, 12, 27, 57, 79, 83, 91, 103, 105, 109, 111, 127, 129, 131, 142, 143, 152, 154, 156, 157, 158, 160, 163, 165, 173, 174, 175, 176, 182, 185, 186, 188, 221, 222, 224, 233, 241, 242, 244, 247, 248, 265, 270, 277, 289, 316, 322, 327, 336, 340, 355, 358, 362, 365, 371, 374, 375], "arbitrari": [0, 7, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 175, 176, 187, 374, 375], "blockinterleav": [0, 35, 36], "block": [0, 10, 35, 36, 57, 62, 79, 103, 182, 185, 203, 224, 270, 293, 294], "db": [1, 5, 6, 39, 48, 57, 59, 62, 73, 75, 80, 92, 94, 96, 98, 99, 100, 102, 173, 183, 189, 199, 220, 232, 240, 242, 244, 246, 266, 268, 272, 274, 275, 276, 277, 286, 287, 288, 289, 290, 291, 292, 297, 298, 299, 300, 301, 303, 305, 306, 312, 313, 317, 318, 319, 320, 322, 323, 329, 336, 348, 351, 352, 370, 372, 373, 375], "x": [1, 2, 4, 6, 7, 8, 9, 10, 11, 19, 20, 22, 27, 28, 30, 35, 37, 41, 43, 51, 52, 57, 58, 62, 79, 83, 85, 87, 89, 90, 91, 96, 98, 103, 104, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 142, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 159, 173, 174, 175, 178, 179, 182, 185, 187, 192, 194, 203, 204, 220, 222, 232, 240, 246, 248, 249, 250, 254, 263, 264, 265, 270, 271, 275, 276, 279, 281, 283, 285, 286, 293, 294, 295, 296, 299, 302, 303, 304, 310, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 339, 340, 344, 345, 348, 350, 355, 356, 360, 361, 365, 370, 371, 372, 375, 376], "arraylik": [1, 2, 3, 4, 5, 6, 7, 8, 9, 19, 24, 27, 32, 37, 38, 39, 41, 43, 48, 57, 58, 59, 79, 80, 83, 85, 90, 91, 92, 93, 94, 95, 96, 98, 103, 104, 105, 119, 120, 121, 127, 132, 138, 142, 144, 145, 146, 152, 157, 158, 159, 160, 173, 182, 183, 185, 187, 188, 189, 191, 192, 193, 194, 199, 212, 215, 220, 221, 222, 232, 233, 240, 241, 242, 244, 246, 247, 248, 249, 250, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 277, 279, 280, 283, 284, 286, 287, 288, 290, 291, 293, 294, 295, 297, 298, 299, 300, 301, 303, 304, 305, 311, 313, 316, 318, 321, 325, 326, 327, 328, 329, 330, 331, 332, 335, 337, 338, 342, 343, 344, 345, 351, 352, 355, 358, 361], "ndarrai": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 19, 20, 21, 22, 24, 27, 28, 29, 30, 32, 35, 37, 39, 41, 43, 46, 48, 51, 52, 54, 57, 58, 79, 83, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 101, 103, 104, 108, 109, 110, 111, 113, 115, 116, 118, 132, 133, 136, 139, 141, 142, 157, 159, 161, 162, 163, 165, 167, 169, 170, 172, 173, 175, 176, 178, 179, 180, 181, 182, 185, 187, 189, 191, 192, 193, 194, 197, 199, 201, 203, 204, 212, 215, 217, 218, 220, 222, 224, 225, 231, 232, 234, 235, 237, 238, 240, 242, 244, 245, 246, 248, 249, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 333, 334, 336, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361], "float_": [1, 3, 4, 5, 6, 7, 8, 9, 19, 24, 27, 32, 85, 86, 91, 92, 93, 94, 95, 96, 101, 187, 189, 197, 199, 212, 217, 218, 220, 232, 234, 235, 237, 238, 240, 242, 244, 246, 263, 264, 265, 266, 267, 268, 269, 274, 277, 280, 284, 286, 287, 288, 289, 290, 291, 292, 297, 298, 299, 300, 301, 305, 306, 309, 313, 318, 321, 322, 336, 344, 345, 346, 347, 349, 351, 352, 353, 354, 358], "convert": [1, 4, 119, 131, 144, 156, 187, 191, 193, 220, 232, 240, 246, 286, 297, 298, 300, 301, 311, 313, 321, 344, 345, 351, 352, 353, 354], "linear": [1, 10, 15, 17, 57, 83, 119, 122, 124, 126, 130, 132, 144, 147, 149, 151, 155, 182, 183, 184, 187, 188, 217, 218, 220, 232, 237, 238, 240, 246, 270, 272, 273, 276, 281, 286, 313, 314, 328, 330, 335, 337, 339, 374, 375], "unit": [1, 57, 79, 83, 103, 116, 142, 157, 170, 173, 182, 185, 203, 221, 222, 224, 233, 241, 247, 248, 270, 276, 277, 286, 293, 294, 313, 338, 340, 365, 368, 369, 371, 374, 375], "percent": [1, 321, 375], "percentag": [1, 321], "ppm": [1, 345, 350, 361, 375], "part": [1, 281, 340, 344, 345, 350, 371], "per": [1, 2, 37, 38, 40, 41, 42, 43, 49, 58, 104, 187, 188, 190, 192, 194, 200, 220, 221, 225, 232, 233, 240, 241, 246, 247, 249, 271, 276, 277, 297, 298, 300, 301, 304, 306, 309, 311, 316, 323, 324, 333, 344, 345, 346, 347, 349, 350, 351, 352, 355, 364, 370, 373, 375], "million": [1, 345, 350], "ppb": [1, 344, 375], "billion": [1, 344], "ebn0_to_esn0": [1, 48, 199, 244, 297, 372, 375], "ebn0": [1, 8, 37, 39, 187, 189, 220, 232, 240, 242, 246, 277, 297, 298, 322, 372], "bp": [1, 37, 40, 187, 190, 220, 232, 240, 246, 297, 298, 300, 351, 372], "int": [1, 2, 4, 7, 8, 19, 22, 23, 27, 30, 31, 35, 36, 37, 38, 40, 44, 49, 51, 53, 56, 57, 59, 79, 80, 83, 84, 85, 89, 90, 96, 98, 99, 102, 103, 106, 107, 109, 110, 111, 112, 113, 116, 119, 126, 129, 132, 134, 135, 137, 142, 143, 144, 151, 154, 157, 163, 165, 166, 170, 173, 175, 177, 182, 183, 185, 187, 188, 190, 195, 200, 217, 218, 220, 221, 222, 223, 224, 231, 232, 233, 237, 238, 240, 241, 246, 247, 248, 250, 251, 252, 253, 255, 256, 258, 270, 272, 275, 276, 278, 279, 282, 283, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 306, 307, 308, 309, 310, 311, 314, 316, 317, 319, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 337, 338, 343, 346, 347, 349, 351, 352, 355, 356, 357, 359, 360, 372], "ebn0_to_snr": [1, 220, 232, 240, 246, 298, 375], "esn0_to_ebn0": [1, 39, 189, 242, 300, 375], "esn0": [1, 8, 37, 48, 187, 199, 220, 232, 240, 244, 246, 300, 301, 336, 372], "esn0_to_snr": [1, 301, 372, 375], "sp": [1, 7, 8, 37, 38, 41, 43, 49, 187, 188, 192, 194, 200, 220, 221, 232, 233, 240, 241, 246, 247, 298, 301, 306, 309, 324, 333, 340, 346, 347, 349, 351, 352, 353, 354, 370, 372, 373], "1": [1, 4, 7, 9, 10, 12, 13, 14, 17, 19, 20, 21, 22, 27, 28, 29, 30, 35, 38, 41, 43, 57, 59, 62, 69, 72, 76, 78, 79, 80, 83, 84, 85, 90, 91, 92, 94, 95, 96, 103, 106, 107, 109, 110, 113, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 163, 173, 174, 175, 180, 182, 183, 185, 186, 187, 188, 191, 192, 193, 194, 201, 203, 205, 206, 212, 216, 220, 221, 222, 224, 226, 232, 233, 234, 240, 241, 242, 243, 244, 245, 246, 247, 248, 256, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 321, 322, 323, 324, 325, 326, 327, 328, 331, 332, 333, 334, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 376], "snr_to_ebn0": [1, 39, 189, 242, 277, 351, 375], "snr": [1, 3, 5, 8, 91, 92, 94, 96, 98, 99, 100, 101, 102, 220, 232, 240, 246, 274, 276, 277, 329, 351, 352, 353, 354, 361, 372, 375], "snr_to_esn0": [1, 48, 199, 244, 352, 375], "pack": [2, 96, 98, 220, 232, 240, 246, 311, 316, 374, 375], "bpe": [2, 316, 355], "int_": [2, 6, 7, 19, 20, 21, 27, 28, 29, 35, 37, 41, 85, 87, 88, 175, 176, 180, 181, 187, 191, 192, 220, 232, 240, 246, 279, 282, 283, 293, 294, 295, 307, 310, 316, 355, 360, 361], "binari": [2, 5, 19, 22, 23, 27, 30, 31, 85, 221, 233, 241, 245, 247, 278, 279, 280, 282, 283, 284, 295, 308, 316, 339, 355, 357, 360, 361, 372, 374, 375], "arrai": [2, 19, 27, 35, 58, 85, 96, 109, 129, 154, 163, 175, 183, 188, 220, 221, 224, 232, 233, 240, 241, 245, 246, 247, 256, 258, 259, 262, 272, 275, 278, 279, 282, 283, 293, 294, 295, 299, 302, 307, 308, 310, 314, 316, 317, 319, 340, 343, 355, 357, 369, 371], "multipl": [2, 109, 163, 178, 179, 316, 355, 372, 375], "bit": [2, 6, 8, 19, 24, 25, 27, 32, 33, 37, 39, 40, 51, 54, 55, 85, 96, 98, 101, 187, 189, 190, 220, 221, 232, 233, 240, 241, 242, 245, 246, 247, 277, 279, 280, 283, 284, 297, 298, 300, 311, 316, 322, 351, 355, 374, 375], "element": [2, 36, 176, 311, 316, 355, 371], "unpack": [2, 96, 98, 311, 355, 372, 374, 375], "hexdump": [2, 96, 311, 374, 375], "byte": [2, 311], "width": [2, 142, 289, 311], "16": [2, 119, 132, 142, 144, 175, 220, 232, 240, 242, 244, 245, 246, 289, 297, 298, 300, 303, 308, 311, 322, 336, 343, 346, 349, 351, 352, 357, 370, 375], "str": [2, 84, 311, 324, 330, 333, 334, 337], "return": [2, 7, 11, 22, 24, 30, 32, 39, 41, 43, 48, 52, 54, 57, 58, 62, 70, 72, 75, 76, 79, 83, 89, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 106, 108, 109, 110, 111, 113, 116, 120, 129, 131, 133, 136, 142, 145, 154, 156, 157, 159, 163, 165, 170, 173, 178, 179, 182, 185, 189, 191, 192, 193, 194, 199, 204, 215, 217, 218, 222, 225, 231, 235, 237, 238, 242, 244, 248, 249, 263, 264, 266, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 368, 369, 370, 372, 375], "specifi": [2, 96, 99, 100, 102, 119, 127, 144, 152, 212, 217, 218, 234, 237, 238, 276, 277, 295, 311, 363, 368, 369, 375], "replicacorrel": [3, 265, 266, 267, 268, 269, 375], "clairvoy": [3, 265], "replica": [3, 265], "correl": [3, 265, 278, 308, 357, 359], "energydetector": [3, 91, 92, 93, 94, 95, 375], "energi": [3, 39, 48, 91, 189, 199, 242, 244, 265, 266, 267, 268, 269, 277, 297, 298, 299, 300, 301, 306, 309, 322, 336, 346, 347, 349, 351, 352, 374, 375], "albersheim": [3, 274, 375], "p_d": [3, 8, 91, 92, 94, 265, 266, 268, 274, 329, 335, 375], "p_fa": [3, 8, 91, 92, 93, 94, 95, 265, 266, 267, 268, 269, 274, 335], "estim": [3, 37, 41, 62, 187, 191, 192, 220, 232, 240, 246, 274, 330, 337, 371], "minimum": [3, 7, 220, 274, 375], "requir": [3, 58, 104, 249, 271, 274, 281, 363, 364, 365, 366, 375], "singl": [3, 94, 109, 163, 242, 244, 274, 324, 371], "sampl": [3, 4, 12, 13, 14, 37, 38, 41, 43, 49, 57, 58, 62, 69, 77, 79, 83, 92, 93, 94, 95, 103, 104, 107, 109, 110, 111, 113, 116, 132, 135, 138, 142, 163, 165, 170, 182, 183, 187, 188, 192, 194, 200, 203, 205, 209, 220, 221, 222, 224, 225, 226, 228, 231, 232, 233, 240, 241, 246, 247, 248, 249, 253, 260, 270, 271, 272, 274, 276, 296, 298, 301, 304, 306, 309, 315, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 337, 338, 340, 346, 347, 349, 350, 351, 352, 353, 354, 356, 361, 367, 370, 371, 373, 374, 375], "given": [3, 51, 54, 85, 91, 96, 98, 99, 100, 102, 131, 132, 133, 156, 248, 259, 262, 265, 274, 303, 368, 369], "n_": [3, 92, 93, 94, 95, 274], "nc": [3, 92, 93, 94, 95, 274], "non": [3, 58, 92, 93, 94, 95, 104, 249, 271, 274, 309, 340, 347], "coher": [3, 92, 93, 94, 95, 274], "combin": [3, 274], "achiev": [3, 274, 372, 373], "probabl": [3, 8, 19, 23, 26, 27, 31, 34, 85, 86, 90, 91, 92, 93, 94, 95, 263, 264, 265, 266, 267, 268, 269, 274, 279, 280, 283, 284, 295, 324, 329, 335, 361, 375], "fals": [3, 6, 12, 57, 59, 79, 80, 84, 91, 92, 93, 94, 95, 103, 105, 109, 132, 134, 157, 158, 160, 163, 174, 182, 183, 185, 186, 220, 222, 223, 232, 240, 242, 244, 246, 250, 265, 266, 267, 268, 269, 270, 272, 274, 275, 279, 283, 295, 299, 315, 319, 320, 323, 324, 330, 334, 335, 337, 340, 348, 369, 373], "alarm": [3, 91, 92, 93, 94, 95, 265, 266, 267, 268, 269, 274, 335], "p_": [3, 8, 91, 92, 93, 94, 95, 242, 244, 265, 266, 267, 268, 269, 274, 275, 276, 286, 295, 303, 313, 317, 319, 322, 330, 335, 336], "fa": [3, 8, 91, 92, 93, 94, 95, 265, 266, 267, 268, 269, 274, 335], "thi": [3, 19, 23, 27, 31, 38, 53, 56, 62, 79, 90, 98, 99, 100, 102, 103, 121, 129, 146, 154, 157, 182, 183, 187, 188, 201, 212, 220, 225, 232, 233, 240, 241, 245, 246, 247, 270, 272, 274, 276, 277, 279, 281, 283, 295, 296, 303, 305, 308, 323, 324, 330, 334, 337, 340, 356, 357, 363, 365, 366, 367, 369, 371, 372, 373], "function": [3, 8, 9, 62, 71, 83, 103, 142, 157, 158, 185, 203, 224, 263, 264, 274, 277, 281, 296, 306, 308, 322, 323, 324, 329, 330, 334, 335, 336, 337, 346, 349, 356, 357, 368, 369, 371, 373, 374, 375], "": [3, 4, 8, 37, 41, 43, 57, 62, 70, 72, 73, 74, 76, 77, 79, 83, 91, 98, 99, 100, 101, 102, 103, 109, 110, 113, 116, 119, 120, 121, 125, 127, 128, 142, 144, 145, 146, 150, 152, 153, 157, 163, 170, 173, 182, 185, 187, 188, 191, 192, 193, 194, 212, 220, 222, 232, 240, 246, 248, 260, 265, 267, 269, 270, 274, 276, 277, 298, 301, 303, 304, 312, 323, 324, 325, 326, 328, 330, 331, 332, 333, 334, 337, 338, 340, 341, 350, 351, 352, 353, 354, 366, 367, 370, 372, 374, 375], "equat": [3, 70, 72, 73, 74, 75, 76, 92, 93, 95, 157, 185, 232, 240, 246, 266, 267, 269, 274, 305], "finit": [4, 103, 119, 124, 144, 149, 374, 375], "impuls": [4, 8, 57, 79, 83, 103, 111, 142, 157, 165, 173, 182, 185, 222, 248, 270, 287, 288, 289, 290, 291, 292, 306, 325, 327, 346, 349, 373, 374, 375], "respons": [4, 8, 57, 79, 83, 103, 109, 111, 116, 142, 157, 163, 165, 170, 173, 182, 185, 222, 248, 270, 287, 288, 289, 290, 291, 292, 306, 324, 325, 326, 327, 328, 332, 338, 346, 349, 373, 374, 375], "design_lowpass_fir": [4, 109, 291, 375], "order": [4, 37, 38, 44, 57, 58, 59, 62, 79, 80, 83, 84, 96, 101, 103, 104, 112, 119, 120, 125, 126, 127, 128, 129, 130, 131, 132, 134, 137, 142, 144, 145, 150, 151, 152, 153, 154, 155, 156, 157, 166, 173, 182, 183, 185, 187, 188, 195, 203, 205, 220, 222, 232, 240, 241, 246, 247, 248, 249, 256, 258, 270, 271, 272, 276, 281, 287, 288, 290, 291, 292, 297, 298, 300, 303, 304, 306, 323, 324, 333, 346, 349, 350, 351, 362, 369, 370, 371, 372, 375], "design": [4, 38, 57, 59, 61, 79, 80, 81, 142, 182, 183, 184, 188, 233, 241, 247, 270, 272, 273, 287, 288, 289, 290, 291, 292, 363, 374, 375], "lowpass": [4, 291], "h": [4, 8, 37, 38, 42, 46, 47, 50, 57, 59, 79, 80, 83, 91, 103, 105, 109, 111, 118, 142, 157, 163, 165, 173, 182, 183, 185, 187, 188, 197, 198, 202, 203, 220, 222, 232, 233, 240, 241, 246, 247, 248, 250, 256, 259, 262, 265, 270, 272, 287, 288, 289, 290, 291, 292, 306, 325, 327, 328, 332, 343, 346, 349, 370, 371, 373], "n": [4, 6, 8, 9, 10, 11, 35, 37, 38, 41, 43, 46, 47, 50, 57, 58, 59, 62, 79, 80, 83, 84, 90, 91, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 132, 133, 136, 139, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 155, 157, 159, 160, 161, 165, 166, 170, 173, 174, 175, 176, 178, 179, 182, 183, 185, 187, 188, 192, 194, 197, 198, 202, 203, 204, 220, 222, 224, 225, 231, 232, 233, 240, 241, 246, 247, 248, 249, 250, 254, 256, 257, 258, 259, 262, 263, 264, 265, 267, 269, 270, 271, 272, 275, 276, 277, 278, 281, 282, 285, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 307, 308, 310, 312, 314, 315, 317, 319, 320, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 337, 338, 340, 343, 348, 350, 351, 352, 353, 354, 356, 357, 359, 360, 361, 371, 373, 374], "us": [4, 8, 10, 17, 19, 24, 25, 27, 32, 33, 37, 38, 41, 57, 59, 61, 79, 80, 81, 82, 83, 84, 85, 103, 105, 108, 109, 114, 132, 134, 136, 142, 157, 158, 160, 163, 168, 173, 174, 182, 183, 184, 185, 186, 187, 188, 191, 192, 203, 207, 212, 217, 218, 220, 222, 223, 232, 233, 234, 237, 238, 240, 241, 246, 247, 248, 250, 254, 257, 261, 270, 272, 273, 277, 280, 281, 284, 287, 288, 289, 290, 291, 292, 303, 308, 311, 314, 316, 323, 324, 325, 327, 329, 330, 337, 338, 341, 355, 357, 363, 364, 365, 366, 368, 369, 371, 372, 373, 374, 375, 376], "window": [4, 79, 83, 84, 109, 182, 270, 287, 288, 289, 290, 291, 292, 330, 337, 375], "method": [4, 8, 61, 81, 174, 183, 184, 250, 254, 257, 272, 273, 287, 288, 289, 290, 291, 292, 330, 337, 368, 369, 375], "design_highpass_fir": [4, 290, 375], "highpass": [4, 290], "design_bandpass_fir": [4, 287, 375], "bandpass": [4, 287], "design_bandstop_fir": [4, 288, 375], "bandstop": [4, 288], "infinit": [4, 157, 173, 374, 375], "polyphasefir": [4, 57, 79, 182, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 270, 375], "gener": [4, 23, 31, 53, 56, 90, 220, 232, 240, 246, 248, 276, 279, 281, 282, 283, 295, 307, 314, 335, 360, 363, 372, 375], "interpol": [4, 37, 50, 57, 79, 132, 182, 183, 184, 187, 202, 220, 232, 240, 246, 248, 250, 254, 255, 257, 270, 272, 292, 356, 370, 372, 374, 375], "decim": [4, 37, 41, 43, 47, 57, 79, 80, 81, 82, 182, 187, 188, 191, 192, 193, 194, 198, 201, 220, 221, 232, 233, 240, 241, 245, 246, 247, 248, 250, 252, 254, 257, 270, 272, 292, 296, 314, 372, 374, 375], "ration": [4, 270, 272, 292, 375], "channel": [4, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 85, 86, 87, 88, 89, 90, 220, 232, 242, 244, 248, 250, 257, 277, 279, 280, 283, 284, 295, 322, 336, 374, 375], "design_multirate_fir": [4, 59, 80, 183, 272, 292, 375], "multir": [4, 57, 58, 79, 182, 270, 292, 343, 375], "kaiser": [4, 57, 59, 61, 79, 80, 81, 182, 183, 184, 270, 272, 273, 287, 288, 289, 290, 291, 292, 375], "polyphase_decompos": [4, 343, 375], "branch": [4, 57, 79, 182, 248, 250, 251, 259, 262, 270, 343, 364, 365], "tap": [4, 57, 59, 79, 80, 83, 103, 118, 119, 120, 130, 131, 132, 141, 142, 144, 145, 155, 156, 157, 161, 162, 173, 182, 183, 185, 222, 248, 250, 256, 258, 259, 262, 270, 272, 281, 343, 368, 369], "decompos": [4, 57, 79, 182, 270, 343], "prototyp": [4, 57, 59, 79, 80, 182, 183, 248, 249, 250, 256, 259, 262, 270, 271, 272, 343, 375], "matrix": [4, 35, 85, 86, 90, 295, 343, 361], "h_i": [4, 57, 79, 182, 248, 258, 259, 262, 270, 343, 368], "b": [4, 57, 79, 157, 160, 182, 248, 250, 251, 256, 258, 259, 262, 270, 274, 277, 306, 311, 325, 327, 338, 343, 363, 364, 369, 373], "phase": [4, 8, 37, 38, 42, 45, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 83, 103, 113, 142, 182, 187, 188, 196, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 270, 274, 304, 312, 314, 315, 324, 331, 332, 333, 343, 361, 374, 375], "movingaverag": [4, 185, 222, 223, 375], "move": [4, 185, 186, 222, 223, 374, 375], "averag": [4, 6, 96, 185, 186, 212, 217, 218, 220, 222, 223, 232, 234, 237, 238, 246, 275, 276, 277, 303, 317, 330, 374, 375], "differenti": [4, 7, 83, 84, 220, 242, 244, 293, 294, 340, 374, 375], "integr": [4, 62, 67, 92, 93, 94, 95, 173, 174, 185, 186, 203, 205, 208, 222, 274, 362, 366, 369, 374, 375], "leakyintegr": [4, 185, 186, 222, 375], "leaki": [4, 185, 186, 222, 374, 375], "farrowresampl": [4, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 367, 375], "piecewis": [4, 132, 134, 137], "polynomi": [4, 121, 122, 123, 126, 132, 134, 137, 146, 147, 148, 151, 281, 314, 360, 375], "farrow": [4, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 374, 375], "fractionaldelai": [4, 142, 143, 375], "fraction": [4, 57, 79, 132, 138, 142, 143, 182, 248, 260, 270, 289, 306, 367, 374, 375], "delai": [4, 8, 57, 58, 79, 83, 103, 104, 107, 110, 113, 132, 135, 142, 143, 182, 203, 222, 224, 248, 249, 253, 270, 271, 289, 293, 294, 309, 326, 331, 347, 371, 374, 375], "design_frac_delay_fir": [4, 289, 375], "length": [4, 8, 41, 43, 57, 58, 59, 79, 80, 83, 84, 94, 103, 104, 106, 111, 116, 118, 142, 143, 159, 175, 178, 179, 182, 183, 186, 188, 192, 194, 221, 222, 223, 233, 241, 247, 248, 249, 270, 271, 272, 278, 282, 287, 288, 289, 290, 291, 292, 306, 307, 308, 309, 314, 325, 327, 330, 334, 337, 338, 346, 347, 349, 353, 357, 359, 364, 367, 370, 373], "mix": [4, 57, 315, 374, 375], "freq": [4, 5, 57, 79, 83, 103, 109, 142, 157, 163, 173, 182, 185, 222, 224, 225, 248, 270, 304, 305, 315, 318, 358, 361, 367, 371], "float": [4, 6, 7, 10, 12, 13, 14, 15, 16, 17, 19, 23, 25, 26, 27, 31, 33, 34, 37, 38, 42, 45, 51, 55, 57, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 94, 96, 98, 99, 100, 102, 103, 109, 110, 113, 132, 133, 136, 142, 143, 157, 158, 163, 164, 173, 182, 183, 185, 186, 187, 188, 196, 203, 205, 206, 208, 209, 210, 212, 213, 214, 216, 219, 220, 221, 222, 224, 226, 227, 228, 229, 232, 233, 234, 239, 240, 241, 243, 246, 247, 248, 260, 268, 270, 272, 275, 276, 277, 279, 283, 285, 287, 288, 289, 290, 291, 292, 303, 304, 306, 312, 315, 317, 319, 320, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 337, 339, 340, 346, 348, 349, 350, 361], "0": [4, 7, 9, 10, 12, 17, 19, 20, 21, 22, 27, 28, 29, 30, 35, 37, 38, 41, 43, 57, 58, 69, 79, 83, 85, 90, 91, 94, 96, 103, 104, 109, 110, 113, 119, 120, 121, 122, 123, 125, 128, 129, 130, 131, 132, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 173, 175, 176, 182, 183, 185, 187, 188, 191, 192, 193, 194, 201, 205, 220, 221, 222, 224, 226, 232, 233, 240, 241, 243, 245, 246, 247, 248, 249, 256, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 312, 313, 314, 315, 316, 318, 321, 323, 324, 325, 326, 327, 328, 331, 332, 333, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 376], "time": [4, 6, 10, 35, 36, 62, 69, 70, 72, 73, 74, 75, 76, 83, 90, 103, 129, 132, 154, 157, 173, 185, 203, 205, 212, 222, 232, 234, 240, 246, 275, 276, 285, 287, 288, 290, 291, 295, 296, 299, 301, 302, 304, 306, 308, 310, 312, 315, 317, 319, 320, 325, 330, 334, 337, 340, 346, 348, 349, 350, 352, 353, 354, 356, 357, 361, 367, 368, 369, 373, 374, 375], "domain": [4, 6, 275, 276, 285, 287, 288, 290, 291, 296, 299, 302, 304, 310, 312, 315, 317, 319, 320, 325, 330, 334, 337, 340, 348, 350, 353, 354, 356, 361, 374, 375], "complex": [4, 6, 8, 37, 41, 43, 57, 62, 79, 83, 91, 92, 93, 94, 95, 103, 109, 142, 157, 163, 173, 182, 185, 187, 188, 191, 192, 193, 194, 201, 212, 215, 220, 221, 222, 224, 225, 231, 232, 233, 234, 235, 240, 241, 245, 246, 247, 248, 265, 266, 267, 268, 269, 270, 276, 277, 296, 303, 312, 315, 323, 324, 326, 328, 330, 331, 332, 337, 339, 340, 353, 354, 356, 361, 367, 368, 369, 371, 372, 374, 375], "exponenti": [4, 57, 225, 296, 315, 353, 354, 356, 367, 368, 369, 375], "real": [4, 92, 93, 95, 263, 264, 266, 267, 269, 276, 315, 326, 328, 330, 331, 332, 334, 337, 340, 353, 354, 368, 369, 371, 374, 375], "sinusoid": [4, 240, 276, 315, 353, 354, 369, 375], "to_complex_bb": [4, 353, 375], "x_r": [4, 353, 354], "complex_": [4, 8, 10, 11, 37, 43, 187, 191, 192, 193, 194, 201, 220, 224, 231, 232, 234, 235, 240, 245, 246, 323, 339, 353, 354, 359, 360], "passband": [4, 142, 287, 288, 289, 290, 291, 306, 309, 346, 347, 349, 353, 354, 370, 375], "center": [4, 57, 287, 288, 289, 290, 291, 309, 340, 347, 353, 354, 375], "f_": [4, 37, 38, 42, 49, 57, 58, 62, 69, 77, 79, 109, 110, 113, 163, 182, 187, 188, 200, 220, 221, 232, 233, 240, 241, 246, 247, 248, 249, 260, 270, 271, 287, 288, 290, 291, 296, 298, 301, 304, 306, 315, 324, 325, 326, 328, 330, 331, 332, 333, 334, 337, 340, 350, 351, 352, 353, 354, 356, 367, 368, 369, 371, 373], "r": [4, 10, 35, 36, 57, 79, 132, 133, 135, 136, 182, 248, 249, 260, 270, 271, 277, 296, 297, 298, 300, 303, 306, 315, 346, 349, 351, 353, 354, 356, 363, 364, 365, 366, 369, 370, 371, 373], "4": [4, 10, 19, 27, 35, 57, 70, 72, 79, 83, 85, 92, 96, 109, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 134, 142, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 163, 173, 175, 182, 185, 212, 220, 221, 222, 224, 232, 233, 234, 240, 242, 243, 244, 245, 246, 248, 256, 258, 259, 262, 265, 266, 267, 269, 270, 274, 276, 277, 278, 281, 282, 287, 288, 289, 290, 291, 295, 296, 297, 298, 300, 301, 303, 304, 305, 307, 308, 311, 312, 314, 315, 316, 318, 322, 323, 324, 325, 326, 327, 328, 331, 332, 336, 338, 339, 340, 341, 342, 343, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 365, 367, 369, 370, 371, 372], "rate": [4, 6, 8, 10, 12, 13, 14, 37, 38, 39, 42, 48, 57, 58, 59, 62, 69, 77, 79, 80, 96, 97, 98, 100, 101, 109, 110, 113, 132, 133, 135, 136, 163, 182, 183, 187, 189, 199, 220, 232, 240, 242, 244, 246, 248, 249, 252, 255, 260, 270, 271, 272, 292, 296, 297, 298, 300, 304, 315, 322, 324, 325, 326, 328, 330, 331, 332, 333, 334, 336, 337, 340, 350, 351, 353, 354, 356, 361, 374, 375], "baseband": [4, 8, 62, 220, 232, 240, 246, 315, 324, 333, 353, 354, 370, 371, 375], "x_c": [4, 353, 354], "c": [4, 19, 24, 25, 27, 32, 33, 35, 36, 51, 54, 55, 57, 58, 59, 60, 62, 70, 72, 73, 74, 75, 76, 85, 98, 99, 100, 101, 102, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 187, 188, 201, 203, 220, 232, 240, 245, 246, 277, 280, 281, 284, 305, 314, 318, 339, 353, 354, 358, 360, 371], "2": [4, 8, 10, 19, 27, 35, 37, 38, 44, 57, 58, 62, 70, 72, 75, 79, 83, 85, 91, 92, 93, 94, 95, 96, 103, 107, 109, 110, 113, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 142, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 163, 173, 175, 182, 185, 186, 187, 188, 195, 212, 220, 222, 224, 232, 233, 234, 240, 241, 242, 243, 244, 245, 246, 247, 248, 256, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 363, 366, 367, 368, 369, 370, 371, 372, 373], "to_real_pb": [4, 354, 370, 375], "2f_": [4, 354], "upsampl": [4, 182, 270, 356, 375], "factor": [4, 6, 62, 69, 78, 185, 186, 188, 203, 205, 206, 233, 241, 247, 285, 296, 356, 371], "insert": [4, 182, 270, 356], "zero": [4, 8, 57, 79, 83, 103, 108, 132, 136, 138, 142, 143, 157, 158, 163, 172, 173, 182, 183, 185, 203, 222, 225, 248, 270, 272, 289, 308, 309, 316, 325, 326, 327, 328, 331, 332, 338, 342, 347, 353, 356, 357, 368, 370, 371, 373, 374, 375], "between": [4, 6, 12, 18, 59, 79, 80, 84, 85, 105, 117, 134, 140, 158, 160, 171, 174, 182, 183, 186, 223, 234, 250, 270, 272, 302, 305, 310, 330, 334, 337, 356, 371, 374], "each": [4, 57, 58, 59, 79, 80, 104, 182, 183, 248, 249, 250, 254, 257, 258, 270, 271, 272, 292, 303, 311, 314, 330, 334, 337, 356], "downsampl": [4, 57, 79, 270, 296, 375], "discard": [4, 57, 79, 270, 296], "everi": [4, 57, 79, 96, 270, 296, 367], "bsc_capac": [5, 284, 375], "p": [5, 9, 19, 23, 24, 26, 27, 31, 32, 34, 57, 79, 85, 86, 90, 119, 144, 182, 183, 224, 225, 248, 255, 260, 263, 264, 270, 272, 279, 280, 281, 283, 284, 292, 295, 361], "calcul": [5, 6, 19, 24, 27, 32, 277, 280, 284, 303, 305, 318, 358, 375], "symmetr": [5, 27, 31, 85, 283, 284, 295, 353, 354, 361, 374], "bsc": [5, 27, 28, 29, 31, 32, 34, 85, 283, 284, 295, 361, 374, 375], "bec_capac": [5, 280, 375], "erasur": [5, 19, 21, 22, 23, 26, 85, 279, 280, 295, 361, 374], "bec": [5, 19, 20, 21, 23, 24, 26, 85, 279, 280, 295, 361, 374, 375], "awgn_capac": [5, 277, 375], "addit": [5, 276, 277, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 356, 361, 374], "white": [5, 276, 277, 361, 374], "gaussian": [5, 7, 83, 173, 185, 222, 276, 277, 306, 361, 374, 375], "nois": [5, 10, 39, 48, 62, 63, 64, 69, 75, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 189, 199, 203, 205, 209, 220, 232, 240, 242, 244, 246, 265, 266, 267, 268, 269, 276, 277, 297, 298, 300, 301, 322, 336, 351, 352, 361, 371, 374], "awgn": [5, 220, 232, 240, 242, 244, 246, 276, 277, 303, 322, 323, 336, 353, 354, 361, 372, 374, 375], "fspl": [5, 305], "distanc": [5, 302, 305, 310, 374, 375], "free": [5, 220, 232, 240, 246, 305, 374], "space": [5, 57, 109, 163, 305, 374], "wavelength": [5, 358, 375], "lambda": [5, 305, 358], "electromagnet": [5, 358], "wave": [5, 132, 220, 358], "frequenc": [5, 37, 38, 42, 46, 57, 62, 70, 72, 74, 79, 83, 103, 109, 110, 113, 132, 142, 157, 163, 173, 182, 185, 203, 220, 222, 224, 225, 248, 270, 287, 288, 289, 290, 291, 296, 304, 305, 315, 318, 325, 326, 328, 330, 331, 332, 337, 353, 354, 356, 358, 361, 373, 374, 375], "f": [5, 38, 42, 57, 70, 72, 79, 83, 94, 109, 110, 113, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 142, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 163, 173, 182, 224, 225, 270, 274, 276, 304, 305, 306, 314, 315, 318, 346, 349, 350, 358, 359, 364, 367, 368, 369, 370, 371, 372, 373], "parabolic_antenna": [5, 318, 375], "tupl": [5, 57, 79, 83, 84, 91, 94, 96, 98, 101, 103, 109, 110, 113, 142, 157, 163, 173, 182, 185, 187, 191, 192, 212, 217, 218, 220, 222, 232, 234, 237, 238, 240, 246, 248, 265, 268, 270, 275, 299, 302, 310, 317, 318, 319, 323, 325, 326, 327, 328, 331, 332, 338, 339, 342], "gain": [5, 10, 11, 12, 15, 17, 18, 62, 65, 66, 67, 68, 69, 157, 158, 164, 173, 185, 203, 205, 208, 210, 212, 219, 224, 226, 227, 234, 239, 274, 287, 288, 289, 290, 291, 305, 306, 309, 318, 346, 347, 349, 362, 371, 374, 375], "g": [5, 101, 318, 365], "beamwidth": [5, 318], "theta": [5, 224, 226, 229, 318], "parabol": [5, 318], "reflector": [5, 318], "signal": [6, 8, 10, 11, 12, 13, 14, 37, 38, 46, 57, 58, 62, 70, 72, 75, 76, 79, 83, 84, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 108, 132, 133, 136, 142, 157, 159, 173, 182, 185, 187, 188, 197, 203, 204, 212, 213, 214, 216, 220, 222, 224, 225, 231, 232, 233, 240, 241, 246, 247, 248, 249, 250, 254, 257, 265, 266, 267, 268, 269, 270, 271, 275, 276, 277, 285, 286, 287, 288, 290, 291, 292, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 310, 312, 313, 315, 317, 318, 319, 320, 324, 325, 326, 328, 330, 331, 332, 333, 334, 337, 340, 343, 348, 350, 351, 352, 353, 354, 356, 358, 368, 369, 371, 373, 374, 375], "peak_pow": [6, 317, 319, 375], "peak": [6, 220, 232, 246, 285, 303, 317, 319, 320], "average_pow": [6, 275, 317, 375], "papr": [6, 220, 232, 246, 317, 370, 375], "ratio": [6, 38, 39, 42, 48, 75, 92, 94, 96, 98, 99, 100, 101, 102, 189, 199, 220, 232, 242, 244, 246, 266, 268, 276, 277, 297, 298, 300, 301, 317, 321, 322, 336, 344, 345, 351, 352], "peak_voltag": [6, 285, 320, 375], "bool": [6, 10, 12, 18, 57, 59, 79, 80, 83, 84, 92, 93, 94, 95, 103, 105, 109, 117, 132, 134, 140, 142, 157, 158, 160, 163, 171, 173, 174, 182, 183, 185, 186, 220, 222, 223, 232, 240, 242, 244, 246, 248, 250, 266, 267, 268, 269, 270, 272, 275, 299, 315, 319, 320, 323, 324, 332, 334, 337, 339, 340, 348], "rms_voltag": [6, 285, 348, 375], "root": [6, 7, 188, 233, 241, 247, 303, 324, 340, 348, 349, 359, 360, 368, 374], "mean": [6, 303, 330, 337, 348, 373], "squar": [6, 7, 188, 233, 241, 247, 303, 305, 318, 324, 340, 348, 349, 368], "rm": [6, 212, 213, 214, 216, 285, 303, 348], "crest_factor": [6, 285, 317, 375], "crest": [6, 285], "euclidean": [6, 302, 374, 375], "y": [6, 7, 10, 11, 19, 21, 22, 27, 29, 30, 35, 52, 57, 79, 83, 85, 88, 89, 90, 103, 104, 108, 119, 132, 133, 136, 144, 157, 159, 173, 175, 178, 179, 182, 185, 203, 204, 224, 225, 231, 248, 249, 250, 257, 270, 271, 276, 279, 281, 283, 293, 294, 295, 296, 302, 304, 310, 312, 315, 323, 328, 330, 337, 339, 350, 356, 360, 371, 372], "two": [6, 10, 185, 222, 232, 240, 246, 287, 288, 302, 310, 325, 326, 328, 330, 331, 332, 337, 359, 367, 368, 369], "ham": [6, 109, 287, 288, 290, 291, 310, 374, 375], "errorr": [6, 96, 97, 98, 99, 100, 101, 102, 372, 375], "A": [6, 10, 35, 38, 51, 58, 62, 70, 72, 73, 74, 75, 76, 78, 83, 96, 103, 104, 109, 119, 120, 121, 132, 144, 145, 146, 163, 173, 185, 188, 203, 212, 222, 233, 234, 241, 247, 249, 271, 274, 281, 282, 287, 288, 290, 291, 307, 311, 312, 318, 323, 324, 334, 346, 349, 360, 361, 362, 364, 371], "error": [6, 8, 12, 13, 14, 27, 37, 39, 48, 62, 68, 69, 75, 96, 97, 98, 100, 101, 102, 187, 189, 199, 203, 205, 212, 215, 217, 218, 219, 220, 232, 234, 235, 237, 238, 239, 240, 242, 244, 246, 274, 284, 303, 322, 336, 371, 374, 375], "ber": [6, 8, 37, 39, 96, 187, 189, 220, 232, 240, 242, 246, 322, 372, 374, 375], "symbol": [6, 8, 37, 38, 40, 41, 42, 43, 48, 49, 96, 98, 101, 119, 129, 144, 154, 182, 187, 188, 190, 191, 192, 193, 194, 199, 200, 201, 212, 215, 220, 221, 232, 233, 234, 235, 240, 241, 242, 244, 245, 246, 247, 276, 281, 297, 298, 300, 301, 303, 304, 306, 309, 323, 324, 333, 336, 339, 340, 346, 347, 349, 351, 352, 370, 371, 373, 374, 375], "ser": [6, 8, 37, 48, 96, 187, 199, 220, 232, 240, 244, 246, 336, 372, 374, 375], "evm": [6, 303, 374, 375], "x_hat": [6, 8, 96, 98, 303, 323, 372], "ref": [6, 212, 214, 216, 274, 287, 288, 289, 290, 291, 292, 303, 306, 308, 357], "vector": [6, 96, 109, 119, 120, 121, 125, 127, 128, 138, 144, 145, 146, 150, 152, 153, 163, 287, 288, 290, 291, 303, 330, 337, 374, 375], "magnitud": [6, 8, 10, 12, 16, 83, 142, 173, 185, 222, 289, 303, 325, 328, 359, 374, 375], "hat": [6, 8, 37, 41, 98, 187, 191, 192, 212, 215, 220, 232, 234, 235, 240, 246, 303, 323, 339], "k": [6, 7, 8, 37, 38, 40, 41, 43, 44, 57, 83, 98, 119, 144, 173, 187, 188, 190, 191, 192, 193, 194, 195, 212, 215, 220, 232, 234, 235, 240, 241, 246, 247, 293, 294, 297, 298, 300, 303, 323, 339, 340, 351, 370, 373], "linearmodul": [7, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 217, 218, 237, 238, 240, 339, 375], "amplitud": [7, 57, 187, 188, 212, 213, 214, 216, 312, 361, 371], "map": [7, 8, 35, 175, 176, 180, 181, 187, 188, 193, 201, 220, 224, 232, 240, 245, 246, 303, 339, 374, 375], "psk": [7, 212, 232, 234, 240, 241, 242, 243, 244, 245, 246, 247, 276, 303, 304, 312, 322, 323, 324, 336, 339, 340, 350, 370, 371, 374, 375], "shift": [7, 119, 120, 130, 144, 145, 155, 220, 232, 240, 242, 243, 244, 245, 246, 281, 314, 359, 360, 368, 369, 374, 375], "kei": [7, 220, 232, 240, 242, 243, 244, 245, 246, 374, 375], "demodul": [7, 37, 41, 187, 192, 220, 232, 240, 246, 375], "pimpsk": [7, 246, 247, 375], "pi": [7, 10, 35, 38, 42, 57, 79, 83, 132, 163, 173, 175, 176, 180, 181, 182, 212, 224, 232, 234, 240, 246, 247, 270, 276, 296, 305, 306, 312, 315, 318, 325, 326, 327, 328, 331, 332, 338, 342, 346, 349, 353, 354, 356, 359, 367, 368, 369, 371, 374, 375], "m": [7, 37, 38, 40, 41, 43, 44, 57, 79, 90, 119, 144, 157, 160, 162, 173, 182, 185, 187, 188, 190, 191, 192, 193, 194, 195, 201, 212, 220, 232, 234, 240, 241, 245, 246, 247, 248, 256, 258, 270, 281, 295, 297, 298, 300, 305, 314, 339, 351, 360, 363, 364, 365, 366, 374, 375], "oqpsk": [7, 220, 232, 233, 375], "offset": [7, 37, 38, 45, 70, 72, 79, 132, 182, 187, 188, 196, 220, 221, 224, 225, 226, 229, 232, 233, 240, 241, 243, 246, 247, 270, 304, 315, 327, 340, 350, 361, 371, 374, 375], "quadratur": [7, 232, 312, 324], "cpm": [7, 8, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 333, 375], "msk": [7, 220, 221, 333, 375], "rectangular": [7, 38, 174, 188, 233, 241, 247, 347, 370, 373, 374, 375], "span": [7, 8, 38, 188, 233, 241, 247, 306, 309, 324, 333, 346, 347, 349, 370, 373, 375], "half_sin": [7, 221, 309, 375], "half": [7, 220, 232, 309, 318, 374, 375], "sine": [7, 132, 220, 225, 309, 374, 375], "time_bandwidth": [7, 306], "raised_cosin": [7, 188, 233, 241, 247, 346, 373, 375], "alpha": [7, 10, 12, 13, 57, 185, 186, 188, 233, 241, 247, 306, 341, 346, 349, 370, 373], "rais": [7, 83, 173, 188, 233, 241, 247, 324, 340, 346, 349, 368, 374], "cosin": [7, 83, 173, 188, 225, 233, 241, 247, 324, 340, 346, 349, 368, 374, 375], "rc": [7, 188, 232, 233, 240, 241, 246, 247, 324, 346], "root_raised_cosin": [7, 83, 173, 188, 233, 241, 247, 325, 326, 327, 328, 331, 332, 338, 342, 349, 368, 370, 372, 373, 375], "srrc": [7, 188, 232, 233, 240, 241, 246, 247, 324, 340, 349, 370, 372], "diff_encod": [7, 220, 232, 240, 242, 244, 246, 293, 294, 375], "y_prev": [7, 293, 294], "input": [7, 10, 11, 19, 20, 22, 27, 28, 30, 35, 36, 51, 52, 57, 58, 59, 62, 70, 72, 75, 76, 79, 80, 83, 84, 85, 87, 89, 90, 103, 104, 105, 111, 115, 116, 132, 133, 134, 135, 138, 139, 142, 157, 158, 159, 160, 165, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 185, 186, 203, 204, 222, 223, 224, 225, 232, 240, 242, 244, 246, 248, 249, 250, 253, 254, 263, 270, 271, 272, 276, 277, 279, 280, 283, 284, 286, 293, 294, 295, 296, 313, 316, 321, 327, 338, 344, 345, 355, 356, 361, 368, 369, 371], "data": [7, 212, 217, 234, 237, 293, 294, 311, 316, 340, 355, 374], "diff_decod": [7, 293, 294, 375], "decod": [7, 293], "use_styl": [8, 341, 367, 368, 369, 370, 371, 372, 373], "appli": [8, 57, 79, 84, 182, 188, 220, 232, 240, 246, 270, 304, 312, 323, 324, 327, 330, 337, 339, 340, 341, 350, 361], "default": [8, 111, 116, 120, 121, 127, 129, 145, 146, 152, 154, 221, 233, 241, 245, 247, 275, 278, 281, 299, 302, 308, 310, 314, 317, 319, 323, 326, 328, 330, 331, 332, 334, 337, 339, 341, 357, 372], "matplotlib": [8, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 367, 368, 369, 370, 371, 372, 373, 374], "rcparam": [8, 341], "time_domain": [8, 10, 79, 83, 132, 173, 182, 185, 220, 222, 224, 232, 240, 246, 270, 276, 278, 296, 308, 315, 340, 353, 354, 356, 357, 359, 367, 370, 371, 372, 373, 375], "ani": [8, 19, 22, 27, 30, 57, 79, 83, 85, 89, 103, 109, 142, 157, 163, 173, 182, 185, 222, 224, 225, 248, 270, 278, 286, 296, 308, 313, 314, 340, 356, 357, 360, 366], "dtype": [8, 19, 22, 27, 30, 57, 79, 83, 85, 89, 103, 109, 142, 157, 163, 173, 182, 185, 220, 222, 224, 225, 232, 240, 246, 248, 270, 278, 308, 314, 316, 340, 355, 357, 360, 371], "scalartyp": [8, 340], "t": [8, 62, 64, 69, 91, 119, 120, 130, 144, 145, 155, 203, 205, 209, 265, 281, 306, 311, 340, 346, 349, 363, 367, 375], "raster": [8, 324, 333, 334, 374, 375], "none": [8, 19, 23, 27, 31, 37, 39, 51, 53, 56, 57, 79, 83, 84, 85, 90, 94, 103, 109, 111, 116, 119, 120, 121, 127, 132, 138, 142, 144, 145, 146, 152, 163, 182, 188, 203, 211, 222, 225, 233, 241, 247, 248, 268, 270, 275, 276, 277, 279, 283, 287, 288, 290, 291, 295, 299, 302, 310, 314, 316, 317, 319, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 337, 338, 339, 340, 355, 361, 367, 370, 372], "periodogram": [8, 57, 296, 330, 353, 354, 356, 370, 374, 375], "power": [8, 220, 232, 240, 246, 275, 276, 277, 286, 303, 306, 308, 309, 313, 317, 318, 319, 330, 346, 347, 349, 357, 373, 374], "densiti": [8, 75, 324, 330, 370, 373], "xx": [8, 330], "welch": [8, 330, 337], "spectrogram": [8, 337, 374, 375], "constel": [8, 220, 232, 240, 243, 246, 276, 303, 304, 312, 323, 350, 359, 374, 375], "symbol_map": [8, 187, 188, 201, 220, 232, 240, 243, 245, 246, 303, 339, 372, 375], "ey": [8, 220, 232, 240, 246, 324, 374, 375], "diagram": [8, 10, 57, 62, 79, 103, 182, 185, 203, 220, 224, 232, 240, 246, 270, 293, 294, 324, 374, 375], "phase_tre": [8, 220, 333, 375], "tree": [8, 333, 375], "continu": [8, 37, 38, 173, 220, 333, 367, 375], "kwarg": [8, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342], "e_b": [8, 37, 39, 98, 99, 100, 101, 102, 187, 189, 220, 232, 240, 242, 246, 277, 297, 298, 300, 322, 351, 374], "n_0": [8, 12, 13, 14, 37, 39, 48, 75, 98, 99, 100, 101, 102, 187, 189, 199, 220, 232, 240, 242, 244, 246, 276, 277, 297, 298, 300, 301, 303, 322, 323, 336, 351, 352, 372, 374], "e_": [8, 37, 48, 98, 99, 100, 101, 102, 187, 199, 220, 232, 240, 244, 246, 276, 277, 297, 300, 301, 303, 323, 336, 352, 372, 374], "roc": [8, 91, 94, 265, 268, 335, 375], "receiv": [8, 10, 37, 41, 47, 91, 92, 94, 96, 98, 187, 191, 192, 198, 212, 213, 215, 216, 220, 232, 234, 235, 240, 242, 244, 246, 265, 266, 267, 268, 269, 303, 305, 324, 329, 335, 375], "oper": [8, 12, 91, 94, 265, 268, 335, 371, 375], "characterist": [8, 91, 94, 119, 121, 122, 123, 144, 146, 147, 148, 265, 268, 281, 314, 335, 375], "curv": [8, 91, 94, 242, 244, 265, 268, 322, 335, 336, 375], "enr": [8, 265, 266, 268, 329], "impulse_respons": [8, 57, 79, 83, 103, 111, 142, 157, 165, 173, 182, 185, 222, 248, 270, 287, 288, 289, 290, 291, 292, 306, 309, 327, 346, 347, 349, 368, 369, 373, 375], "step_respons": [8, 57, 79, 83, 103, 116, 142, 157, 170, 173, 182, 185, 222, 248, 270, 338, 368, 369, 371, 375], "step": [8, 57, 79, 83, 103, 116, 119, 125, 127, 128, 129, 131, 142, 144, 150, 152, 153, 154, 156, 157, 170, 173, 182, 185, 222, 224, 225, 231, 248, 270, 281, 338, 374], "zeros_pol": [8, 342, 369, 375], "pole": [8, 157, 158, 163, 167, 173, 185, 325, 326, 327, 328, 331, 332, 338, 342, 368, 374], "magnitude_respons": [8, 83, 109, 142, 163, 173, 185, 222, 287, 288, 289, 290, 291, 292, 306, 309, 328, 346, 347, 349, 368, 369, 371, 373, 375], "omega": [8, 57, 79, 83, 103, 109, 110, 113, 132, 142, 157, 163, 173, 182, 185, 222, 224, 226, 228, 248, 270, 325, 326, 328, 331, 332, 371], "phase_respons": [8, 109, 163, 332, 375], "angl": [8, 234, 332, 371], "phase_delai": [8, 57, 79, 83, 103, 113, 142, 182, 222, 248, 270, 331, 375], "tau_": [8, 57, 79, 83, 103, 113, 142, 182, 222, 248, 270, 331], "phi": [8, 37, 38, 45, 57, 79, 83, 103, 113, 142, 182, 187, 188, 196, 220, 221, 222, 232, 233, 240, 241, 243, 246, 247, 248, 270, 304, 312, 315, 331], "group_delai": [8, 57, 79, 83, 103, 110, 142, 182, 222, 248, 270, 289, 326, 368, 369, 375], "group": [8, 57, 79, 83, 103, 110, 142, 182, 222, 248, 270, 289, 326, 374], "tau_g": [8, 57, 79, 83, 103, 110, 142, 182, 222, 248, 270, 326], "iir": [8, 62, 71, 111, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 185, 186, 203, 207, 222, 325, 326, 327, 328, 331, 332, 338, 342, 368, 371, 374, 375], "q": [9, 57, 79, 80, 182, 220, 232, 248, 252, 260, 263, 264, 265, 266, 267, 269, 270, 272, 292, 314, 359, 375], "comput": [9, 37, 39, 48, 51, 54, 79, 85, 91, 92, 93, 94, 95, 109, 163, 187, 189, 199, 212, 220, 232, 234, 240, 242, 244, 246, 263, 264, 265, 266, 267, 268, 269, 275, 276, 299, 302, 305, 310, 317, 319, 368, 369, 371, 373, 375], "complementari": [9, 263, 264], "cumul": [9, 263, 264], "distribut": [9, 263, 264], "standard": [9, 263, 264, 375], "normal": [9, 38, 62, 64, 69, 203, 205, 209, 263, 264, 287, 288, 290, 291, 303, 306, 309, 325, 326, 328, 330, 331, 332, 337, 346, 347, 349, 371, 373], "mathcal": [9, 19, 20, 21, 22, 27, 28, 29, 30, 85, 87, 88, 89, 90, 91, 263, 264, 265, 266, 267, 268, 269, 276, 295], "qinv": [9, 263, 264, 375], "invers": [9, 57, 264], "agc": [10, 11, 12, 13, 14, 15, 16, 17, 18, 212, 362, 374, 375], "automat": [10, 11, 12, 212, 362, 374, 375], "control": [10, 11, 12, 62, 212, 224, 226, 346, 349, 371, 374, 375], "note": [10, 19, 27, 35, 57, 79, 83, 85, 91, 92, 93, 95, 103, 119, 121, 122, 123, 142, 144, 146, 147, 148, 157, 173, 182, 185, 203, 212, 222, 224, 234, 248, 254, 257, 259, 262, 265, 266, 267, 269, 270, 274, 276, 277, 280, 281, 284, 289, 293, 294, 306, 312, 314, 318, 324, 343, 346, 349, 359], "exp": [10, 57, 163, 224, 225, 232, 240, 246, 296, 306, 312, 315, 325, 326, 327, 328, 331, 332, 338, 342, 354, 356, 359, 367, 369, 371], "z": [10, 62, 103, 157, 173, 185, 203, 224, 281, 293, 294, 359, 368, 369, 371], "log": [10, 325, 326, 328, 330, 331, 332, 334, 368, 369, 371], "beta": [10, 12, 14], "output": [10, 11, 12, 16, 19, 21, 22, 27, 29, 30, 35, 36, 52, 57, 58, 79, 83, 85, 88, 89, 90, 103, 104, 111, 116, 119, 129, 131, 132, 135, 142, 144, 154, 156, 157, 158, 160, 165, 170, 173, 174, 176, 180, 181, 182, 183, 185, 186, 192, 203, 204, 222, 224, 225, 231, 248, 249, 250, 253, 257, 260, 270, 271, 272, 276, 277, 278, 279, 280, 281, 283, 284, 294, 295, 303, 308, 313, 314, 316, 327, 338, 355, 357, 360, 363, 367, 368, 369, 371, 375], "attack": [10, 12, 13], "decai": [10, 12, 14, 367, 369], "refer": [10, 12, 16, 19, 27, 57, 62, 70, 72, 73, 74, 75, 76, 79, 83, 85, 91, 92, 93, 95, 96, 119, 132, 144, 182, 203, 212, 214, 215, 216, 234, 235, 242, 244, 265, 266, 267, 269, 270, 274, 276, 281, 285, 287, 288, 289, 290, 291, 292, 303, 304, 306, 308, 314, 317, 343, 346, 349, 350, 357, 359, 369, 373, 374], "adder": [10, 79, 119, 144, 203, 224, 293, 294, 371], "multipli": [10, 62, 83, 182, 270], "michael": [10, 62, 70, 72, 73, 74, 75, 76, 83, 132, 203, 212, 234, 346, 349], "rice": [10, 62, 70, 72, 73, 74, 75, 76, 83, 132, 203, 212, 234, 346, 349], "digit": [10, 19, 27, 62, 70, 72, 73, 74, 75, 76, 83, 85, 132, 203, 212, 234, 242, 244, 346, 349, 371, 374, 375], "commun": [10, 19, 27, 57, 62, 70, 72, 73, 74, 75, 76, 79, 83, 85, 132, 182, 203, 212, 234, 242, 244, 270, 292, 343, 346, 349, 371, 374], "discret": [10, 57, 62, 70, 72, 73, 74, 75, 76, 83, 85, 90, 132, 173, 185, 203, 212, 222, 234, 276, 295, 301, 346, 349, 352, 361, 367, 371, 374, 375], "approach": [10, 19, 27, 62, 70, 72, 73, 74, 75, 76, 83, 132, 203, 212, 234, 277, 280, 284, 346, 349, 371], "section": [10, 83, 91, 98, 99, 100, 101, 102, 132, 212, 234, 265, 369, 371], "9": [10, 35, 57, 79, 85, 109, 119, 127, 129, 132, 142, 144, 152, 154, 163, 175, 182, 220, 232, 240, 246, 248, 256, 258, 259, 262, 266, 270, 274, 281, 282, 295, 303, 307, 308, 311, 343, 346, 349, 357, 359, 363, 369, 370, 372, 373], "5": [10, 19, 27, 35, 37, 38, 57, 79, 83, 85, 91, 92, 93, 94, 95, 96, 109, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 142, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 173, 175, 182, 185, 212, 220, 222, 224, 232, 240, 246, 248, 256, 258, 259, 262, 266, 268, 270, 274, 276, 278, 279, 281, 282, 283, 284, 287, 288, 289, 290, 291, 295, 296, 297, 298, 300, 301, 303, 304, 305, 306, 307, 308, 311, 312, 314, 318, 321, 324, 325, 326, 327, 328, 331, 332, 338, 340, 342, 343, 346, 349, 350, 351, 352, 353, 354, 356, 357, 359, 363, 368, 369, 370, 371, 373], "http": [10, 119, 132, 144, 274, 281, 285, 287, 288, 289, 290, 291, 292, 306, 308, 314, 317, 357, 359, 363, 364, 365], "wirelesspi": [10, 132], "com": [10, 132, 274, 281, 287, 288, 289, 290, 291, 292, 306, 308, 357, 364, 365], "how": [10, 306, 309, 324, 333, 334, 340, 346, 347, 349, 357, 366], "work": 10, "exampl": [10, 19, 27, 35, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 92, 94, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 182, 185, 186, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 240, 242, 243, 244, 245, 246, 256, 258, 259, 261, 262, 263, 264, 266, 268, 270, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 318, 321, 322, 323, 324, 325, 326, 327, 328, 331, 332, 333, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 371, 375], "creat": [10, 12, 19, 23, 27, 31, 35, 36, 37, 38, 51, 53, 57, 59, 62, 69, 79, 80, 83, 84, 85, 90, 96, 97, 103, 105, 119, 127, 131, 132, 134, 142, 143, 144, 152, 156, 157, 158, 160, 173, 174, 175, 176, 182, 183, 185, 186, 187, 188, 203, 205, 220, 221, 222, 223, 224, 226, 232, 233, 240, 241, 243, 246, 247, 248, 250, 270, 272, 276, 278, 303, 304, 308, 315, 350, 353, 354, 357, 359, 367, 371, 373], "bursti": 10, "surround": 10, "In": [10, 12, 18, 19, 27, 35, 57, 58, 59, 79, 80, 83, 84, 85, 92, 94, 96, 104, 105, 109, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 134, 140, 142, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 158, 160, 163, 171, 173, 174, 175, 182, 183, 185, 186, 212, 220, 222, 223, 224, 232, 234, 240, 242, 243, 244, 245, 246, 249, 250, 256, 258, 259, 262, 263, 264, 266, 268, 270, 271, 272, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 318, 321, 322, 323, 324, 325, 326, 327, 328, 331, 332, 333, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 367, 372], "np": [10, 19, 20, 21, 27, 28, 29, 35, 57, 79, 83, 85, 86, 87, 88, 92, 94, 109, 132, 142, 163, 173, 175, 180, 181, 182, 185, 187, 197, 201, 220, 222, 224, 232, 240, 242, 244, 245, 246, 256, 258, 259, 262, 266, 268, 270, 274, 276, 277, 278, 279, 280, 281, 283, 284, 295, 296, 303, 304, 305, 308, 312, 315, 322, 323, 324, 325, 326, 327, 328, 331, 332, 333, 334, 336, 338, 340, 342, 343, 350, 353, 354, 356, 357, 359, 367, 368, 369, 370, 371, 372, 373], "1j": [10, 57, 163, 296, 315, 325, 326, 327, 328, 331, 332, 338, 342, 354, 356, 367, 369, 371], "arang": [10, 35, 57, 79, 132, 142, 175, 182, 256, 258, 259, 262, 270, 276, 278, 296, 308, 315, 343, 353, 354, 356, 357, 359, 367, 371], "5000": [10, 344, 345], "100": [10, 83, 94, 109, 157, 163, 165, 170, 173, 185, 222, 224, 242, 244, 274, 276, 277, 280, 284, 286, 287, 288, 290, 291, 296, 303, 313, 315, 322, 323, 325, 327, 333, 336, 338, 350, 353, 354, 356, 367, 371], "1000": [10, 109, 163, 217, 218, 220, 232, 237, 238, 240, 246, 303, 305, 353, 354, 372], "2000": 10, "10": [10, 35, 57, 83, 85, 92, 94, 96, 119, 125, 127, 128, 129, 131, 132, 142, 144, 150, 152, 153, 154, 156, 173, 175, 182, 188, 220, 232, 233, 240, 241, 242, 244, 246, 247, 256, 258, 259, 262, 266, 268, 270, 274, 275, 276, 281, 282, 286, 287, 288, 290, 291, 295, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 317, 318, 319, 320, 322, 323, 325, 326, 327, 328, 331, 332, 336, 338, 340, 342, 343, 346, 347, 348, 349, 350, 351, 352, 357, 359, 368, 371, 372, 373], "3000": 10, "4000": 10, "001": [10, 371], "random": [10, 19, 23, 27, 31, 53, 56, 57, 85, 90, 91, 185, 220, 222, 232, 240, 246, 276, 279, 283, 295, 303, 304, 312, 323, 324, 333, 340, 350, 370, 371, 372], "randn": [10, 57, 185, 222, 340], "size": [10, 35, 36, 41, 43, 90, 129, 154, 175, 177, 178, 179, 192, 194, 278, 281, 295, 308, 314, 340, 357, 367, 371, 372, 373], "3": [10, 19, 27, 35, 57, 62, 70, 72, 73, 76, 79, 83, 85, 91, 92, 96, 109, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 134, 142, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 163, 173, 175, 182, 185, 212, 220, 222, 224, 232, 234, 240, 242, 243, 244, 245, 246, 248, 256, 258, 259, 262, 265, 266, 270, 274, 276, 277, 278, 279, 281, 282, 283, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 300, 301, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 318, 323, 324, 325, 326, 327, 328, 331, 332, 338, 340, 342, 343, 346, 347, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 363, 364, 369, 371, 373, 374], "plt": [10, 19, 27, 57, 79, 83, 92, 94, 132, 142, 173, 182, 185, 212, 220, 222, 224, 232, 234, 240, 242, 243, 244, 245, 246, 266, 268, 270, 274, 276, 277, 278, 280, 284, 287, 288, 289, 290, 291, 292, 296, 303, 304, 305, 306, 308, 309, 312, 315, 322, 323, 324, 325, 326, 327, 328, 331, 332, 333, 336, 338, 339, 340, 342, 346, 347, 349, 350, 353, 354, 356, 357, 359, 367, 368, 369, 370, 371, 372, 373], "figur": [10, 19, 27, 57, 79, 83, 92, 94, 132, 142, 173, 182, 185, 212, 220, 222, 224, 232, 234, 240, 242, 243, 244, 245, 246, 266, 268, 270, 274, 276, 277, 278, 280, 284, 287, 288, 289, 290, 291, 292, 296, 303, 304, 305, 306, 308, 309, 312, 315, 322, 323, 324, 325, 326, 327, 328, 331, 332, 333, 336, 338, 339, 340, 341, 342, 346, 347, 349, 350, 353, 354, 356, 357, 359, 367, 368, 369, 370, 371, 372, 373], "plot": [10, 19, 27, 57, 79, 83, 92, 94, 109, 110, 111, 113, 116, 132, 142, 163, 165, 170, 173, 182, 185, 212, 220, 222, 224, 232, 234, 240, 242, 243, 244, 245, 246, 266, 268, 270, 276, 277, 278, 280, 284, 287, 288, 289, 290, 291, 292, 296, 303, 304, 305, 306, 308, 309, 312, 315, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 346, 347, 349, 350, 353, 354, 356, 357, 359, 367, 368, 369, 371, 372, 373, 374, 375], "titl": [10, 19, 27, 57, 79, 83, 132, 173, 182, 212, 224, 234, 242, 244, 270, 274, 276, 277, 278, 280, 284, 296, 303, 304, 308, 312, 315, 322, 336, 340, 350, 353, 354, 356, 357, 359, 367, 370, 371, 372, 373], "01": [10, 109, 163, 245, 246, 311, 369, 371], "notic": [10, 129, 131, 154, 156, 353, 354, 367, 373], "over": [10, 119, 122, 123, 124, 125, 127, 128, 129, 130, 144, 147, 148, 149, 150, 152, 153, 154, 155, 242, 244, 278, 281, 308, 311, 314, 357], "i": [10, 12, 13, 14, 18, 19, 23, 27, 31, 37, 38, 42, 53, 56, 57, 58, 59, 62, 69, 78, 79, 80, 83, 84, 85, 90, 91, 93, 94, 95, 96, 101, 103, 104, 109, 111, 116, 117, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 131, 132, 135, 140, 142, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 160, 162, 163, 165, 170, 171, 173, 176, 180, 181, 182, 183, 185, 186, 187, 188, 203, 205, 206, 209, 212, 220, 222, 225, 232, 233, 234, 240, 241, 246, 247, 248, 249, 250, 254, 257, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 283, 284, 286, 287, 288, 289, 290, 291, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 330, 331, 332, 334, 337, 338, 340, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376], "amplifi": [10, 12, 14], "accord": 10, "also": [10, 57, 129, 154, 212, 220, 234, 289, 305, 306, 374], "when": [10, 17, 19, 27, 57, 59, 79, 80, 82, 83, 103, 108, 111, 114, 116, 132, 136, 142, 157, 165, 168, 170, 173, 182, 183, 185, 186, 222, 248, 261, 270, 272, 276, 277, 279, 280, 283, 284, 301, 308, 325, 326, 327, 328, 331, 332, 338, 352, 357, 359, 367, 368, 369], "interest": 10, "appear": [10, 367], "quickli": 10, "decreas": [10, 277], "6": [10, 19, 27, 35, 57, 79, 83, 85, 96, 119, 120, 125, 127, 128, 129, 130, 131, 132, 142, 144, 145, 150, 152, 153, 154, 155, 156, 163, 173, 175, 182, 185, 212, 220, 222, 224, 232, 240, 245, 246, 248, 256, 258, 259, 262, 266, 267, 269, 270, 274, 281, 282, 286, 289, 295, 296, 297, 298, 303, 305, 307, 308, 311, 313, 314, 318, 323, 324, 325, 326, 327, 328, 331, 332, 338, 339, 340, 342, 343, 346, 349, 353, 354, 356, 357, 359, 363, 366, 368, 369, 371, 372], "ylim": [10, 132, 142, 185, 222, 287, 288, 289, 290, 291, 296, 356, 359, 368, 371, 372, 373], "__call__": [10, 11, 12, 18, 19, 22, 27, 30, 51, 52, 57, 58, 59, 79, 80, 83, 84, 85, 89, 103, 104, 105, 117, 132, 133, 134, 140, 142, 157, 158, 159, 160, 171, 173, 174, 182, 183, 185, 186, 203, 204, 212, 215, 222, 223, 224, 225, 234, 235, 248, 249, 250, 270, 271, 272, 375], "perform": [10, 11, 58, 62, 104, 143, 242, 244, 249, 271, 289, 296, 356, 359, 362, 368, 369, 372, 374, 375], "reset": [10, 17, 19, 27, 51, 56, 57, 79, 82, 83, 85, 103, 114, 119, 127, 132, 138, 142, 144, 152, 157, 168, 173, 182, 185, 203, 211, 222, 224, 230, 248, 261, 270], "indic": [10, 12, 18, 37, 57, 59, 79, 80, 83, 84, 93, 94, 95, 103, 105, 117, 132, 134, 140, 142, 157, 158, 160, 171, 173, 174, 180, 181, 182, 183, 185, 186, 187, 188, 220, 221, 222, 223, 232, 233, 240, 241, 242, 244, 246, 247, 248, 250, 253, 266, 267, 268, 269, 270, 272, 275, 299, 306, 309, 312, 315, 319, 320, 323, 324, 332, 333, 334, 340, 346, 347, 348, 349, 357], "whether": [10, 12, 18, 57, 59, 79, 80, 83, 84, 93, 94, 95, 103, 105, 117, 132, 134, 140, 142, 157, 158, 160, 171, 173, 174, 182, 183, 185, 186, 222, 223, 242, 244, 248, 250, 266, 267, 268, 269, 270, 272, 275, 299, 315, 319, 320, 323, 324, 332, 334, 340, 348], "The": [10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 364, 365, 366, 368, 369, 371, 372, 373, 374, 376], "current": [10, 15, 119, 128, 132, 135, 144, 153, 340, 365], "settabl": [10, 13, 14, 16, 212, 213, 214, 224, 227, 228, 229], "desir": [10, 12, 16, 274, 276, 372], "paramet": [11, 12, 17, 22, 23, 30, 31, 36, 38, 39, 41, 43, 48, 52, 53, 56, 58, 59, 69, 70, 72, 75, 80, 84, 89, 90, 92, 93, 94, 95, 98, 99, 100, 102, 104, 105, 109, 110, 111, 113, 116, 120, 121, 127, 129, 133, 134, 136, 138, 143, 145, 146, 152, 154, 158, 159, 160, 163, 165, 170, 174, 176, 178, 179, 183, 186, 188, 189, 191, 192, 193, 194, 199, 204, 205, 215, 216, 217, 218, 221, 223, 225, 226, 231, 233, 235, 237, 238, 241, 242, 244, 247, 249, 250, 263, 264, 266, 267, 268, 269, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359], "stream": [12, 17, 18, 58, 59, 80, 82, 84, 104, 105, 108, 114, 117, 134, 136, 140, 158, 160, 168, 171, 174, 183, 186, 220, 223, 232, 240, 246, 249, 250, 261, 271, 272, 369], "meant": [12, 13, 14, 62], "attenu": [12, 13, 59, 80, 183, 272, 287, 288, 290, 291, 292, 346, 349], "strong": [12, 13], "after": [12, 13, 14, 259, 262], "approx": [12, 13, 14, 142], "reduc": [12, 13, 14], "e": [12, 13, 14, 19, 21, 22, 101, 212, 234, 265, 266, 267, 268, 269, 275, 279, 280, 299, 359, 364, 365, 368, 369, 372], "its": [12, 13, 14, 103, 119, 120, 121, 127, 129, 144, 145, 146, 152, 157, 158, 173, 185, 276, 368, 369, 373], "origin": [12, 13, 14, 129, 154, 232, 246, 356, 367], "valu": [12, 13, 14, 37, 38, 39, 48, 91, 176, 187, 188, 189, 199, 220, 221, 232, 233, 240, 241, 242, 244, 246, 247, 263, 264, 278, 281, 286, 293, 294, 306, 308, 312, 313, 314, 323, 326, 328, 330, 331, 332, 337, 339, 357, 364, 369, 375], "weak": [12, 14], "mode": [12, 17, 18, 58, 59, 80, 82, 84, 104, 105, 108, 114, 117, 134, 136, 140, 158, 160, 168, 171, 174, 183, 186, 223, 249, 250, 261, 271, 272, 278, 308, 324, 357, 359], "preserv": [12, 18, 59, 79, 80, 84, 105, 117, 134, 140, 158, 160, 171, 174, 182, 183, 186, 223, 250, 270, 272], "call": [12, 18, 58, 59, 79, 80, 84, 104, 105, 117, 129, 134, 140, 154, 158, 160, 171, 174, 182, 183, 186, 223, 249, 250, 270, 271, 272], "properti": [13, 14, 15, 16, 18, 20, 21, 25, 26, 28, 29, 33, 34, 40, 42, 44, 45, 46, 47, 49, 50, 55, 60, 61, 63, 64, 65, 66, 67, 68, 71, 73, 74, 77, 78, 81, 86, 87, 88, 107, 112, 115, 117, 118, 122, 123, 124, 125, 126, 128, 130, 135, 137, 139, 140, 141, 147, 148, 149, 150, 151, 153, 155, 161, 162, 164, 166, 167, 169, 171, 172, 180, 181, 184, 190, 195, 196, 197, 198, 200, 201, 202, 206, 207, 208, 209, 210, 213, 214, 219, 227, 228, 229, 239, 243, 245, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 273, 375], "onli": [17, 38, 58, 59, 62, 80, 82, 104, 108, 109, 114, 136, 163, 168, 183, 188, 212, 221, 233, 241, 245, 247, 249, 261, 271, 272, 276, 287, 288, 290, 291, 305, 308, 309, 314, 323, 324, 334, 347, 357, 366, 371, 372], "initi": [17, 119, 120, 121, 125, 127, 129, 131, 144, 145, 146, 150, 152, 154, 156, 212, 216, 234, 236, 314, 371], "binaryerasurechannel": [19, 20, 21, 22, 23, 24, 25, 26, 361], "ar": [19, 21, 22, 27, 37, 47, 50, 57, 58, 59, 79, 80, 84, 85, 91, 96, 98, 99, 100, 102, 104, 105, 119, 129, 131, 134, 143, 144, 156, 158, 160, 174, 182, 183, 186, 187, 188, 198, 202, 220, 221, 223, 225, 232, 233, 240, 241, 246, 247, 248, 249, 250, 257, 259, 262, 265, 270, 271, 272, 277, 279, 280, 281, 283, 284, 289, 292, 305, 308, 309, 314, 316, 323, 324, 325, 326, 328, 330, 331, 332, 333, 334, 337, 339, 340, 341, 343, 347, 353, 354, 357, 363, 365, 367, 369, 371, 373, 374, 376], "x_i": [19, 22, 27, 30, 85, 89, 90, 277, 279, 280, 283, 284, 295, 312], "y_i": [19, 22, 27, 30, 57, 58, 85, 89, 248, 277, 279, 280, 283, 284, 295], "capac": [19, 24, 25, 27, 32, 33, 51, 54, 55, 85, 277, 280, 284, 374, 375], "text": [19, 27, 59, 80, 85, 91, 183, 246, 265, 272, 274, 275, 276, 277, 280, 284, 285, 286, 292, 303, 304, 305, 313, 317, 319, 320, 348, 350], "john": [19, 27, 85, 242, 244], "proaki": [19, 27, 85, 242, 244], "chapter": [19, 27, 57, 79, 85, 182, 242, 244, 270, 292, 343], "model": [19, 27, 85, 119, 144, 281, 375], "20": [19, 27, 83, 84, 85, 92, 94, 119, 132, 144, 182, 224, 266, 270, 274, 277, 279, 283, 286, 295, 303, 304, 311, 312, 313, 320, 343, 348, 356, 370, 372, 375], "pass": [19, 22, 23, 27, 30, 31, 38, 51, 52, 53, 56, 57, 79, 83, 85, 89, 90, 103, 108, 121, 132, 136, 142, 146, 182, 222, 248, 250, 254, 270, 276, 279, 283, 295, 303, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 361, 363, 365, 368, 369, 375], "through": [19, 22, 27, 30, 51, 52, 57, 79, 83, 85, 89, 103, 108, 132, 136, 142, 182, 222, 232, 246, 248, 270, 279, 283, 295, 361, 368, 369, 371], "25": [19, 27, 57, 85, 92, 119, 144, 279, 283, 289, 295, 321, 344, 345, 367, 370, 371, 373], "roughli": [19, 27, 279, 283, 367], "eras": [19, 279], "seed": [19, 23, 27, 31, 51, 53, 56, 85, 90, 276, 279, 283, 295, 375], "randint": [19, 27, 85, 220, 232, 240, 246, 276, 279, 283, 295, 303, 304, 312, 323, 324, 333, 340, 350, 370, 371, 372], "out": [19, 27, 35, 57, 79, 85, 96, 109, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 142, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 163, 175, 182, 212, 220, 232, 240, 243, 245, 246, 248, 256, 258, 259, 260, 262, 263, 264, 270, 278, 279, 281, 282, 283, 286, 293, 294, 295, 297, 298, 300, 301, 303, 305, 307, 308, 313, 314, 316, 318, 321, 341, 343, 344, 345, 351, 352, 355, 357, 358], "count_nonzero": [19, 27, 85], "75": [19, 85, 288, 311, 371], "howev": [19, 27, 58, 98, 99, 100, 102, 104, 142, 203, 249, 271, 280, 284, 308, 357, 367], "linearli": [19, 183, 272], "linspac": [19, 27, 83, 92, 109, 163, 173, 242, 244, 266, 277, 280, 284, 305, 322, 336, 369, 370, 371, 372], "101": [19, 27, 92, 94, 266, 268, 287, 288, 290, 291], "7": [19, 27, 35, 57, 79, 83, 85, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 142, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 175, 182, 212, 220, 232, 234, 240, 245, 246, 248, 256, 258, 259, 262, 266, 270, 274, 281, 282, 289, 290, 292, 295, 303, 307, 308, 311, 343, 357, 359, 363, 369, 371], "xlabel": [19, 27, 212, 234, 274, 277, 278, 280, 284, 303, 305, 308, 357, 359, 370, 371, 373], "ylabel": [19, 27, 212, 234, 274, 277, 280, 284, 303, 305, 370, 371, 373], "new": [19, 23, 27, 31, 37, 38, 51, 53, 56, 85, 90, 96, 97, 127, 132, 134, 152, 185, 187, 188, 220, 221, 232, 233, 240, 241, 246, 247, 350], "int64": [19, 22, 27, 30, 85, 89, 278, 308, 314, 357, 360], "sequenc": [19, 22, 27, 30, 35, 51, 52, 85, 89, 119, 122, 126, 129, 131, 144, 147, 151, 154, 156, 175, 178, 179, 278, 279, 281, 283, 295, 308, 314, 357, 359, 361, 374, 375], "static": [19, 24, 27, 32, 51, 54, 85, 91, 92, 93, 94, 95, 265, 266, 267, 268, 269, 364], "alphabet": [19, 20, 21, 27, 28, 29, 85, 87, 88, 90, 295], "repres": [19, 21, 22, 62, 71, 279, 280, 314], "instanti": [19, 25, 27, 33, 51, 55, 85], "number": [23, 31, 36, 37, 38, 40, 49, 53, 56, 57, 58, 59, 60, 79, 90, 92, 93, 94, 95, 96, 98, 99, 102, 109, 110, 111, 113, 116, 129, 154, 163, 165, 170, 182, 187, 188, 190, 200, 217, 218, 220, 221, 231, 232, 233, 237, 238, 240, 241, 246, 247, 248, 250, 251, 259, 262, 270, 274, 276, 279, 283, 295, 297, 298, 300, 306, 309, 311, 316, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 337, 338, 343, 346, 347, 349, 351, 355], "numpi": [23, 31, 53, 56, 57, 79, 83, 90, 103, 109, 142, 157, 163, 173, 182, 185, 222, 225, 248, 270, 276, 279, 283, 295, 323, 355, 364, 367, 368, 369, 370, 371, 372, 373, 374], "default_rng": [23, 31, 53, 56, 90, 276, 279, 283, 295], "binarysymmetricchannel": [27, 28, 29, 30, 31, 32, 33, 34, 361], "h_b": [27, 284], "appropri": 27, "modul": [27, 37, 38, 42, 43, 44, 187, 188, 194, 195, 197, 212, 217, 218, 220, 224, 232, 233, 234, 237, 238, 240, 241, 242, 244, 246, 247, 297, 298, 300, 303, 322, 324, 333, 336, 339, 340, 351, 363, 366, 372, 374, 375], "hard": 27, "decis": [27, 37, 41, 187, 191, 192, 212, 215, 218, 220, 232, 234, 235, 238, 240, 246, 371], "detector": [27, 62, 68, 69, 91, 205, 212, 219, 234, 239, 265, 371, 374, 375], "transit": [27, 31, 34, 85, 86, 90, 232, 246, 283, 284, 295, 357, 361], "flip": [27, 283], "189": 27, "18872187554086717": 27, "interleav": [35, 36, 175, 176, 177, 178, 179, 180, 181], "feed": 35, "down": [35, 343], "column": [35, 36, 343], "read": 35, "across": [35, 57, 83, 250, 274, 302, 310], "row": [35, 36, 334], "8": [35, 38, 57, 79, 83, 85, 119, 127, 129, 132, 142, 144, 152, 154, 163, 173, 175, 182, 188, 220, 221, 232, 233, 240, 241, 242, 244, 245, 246, 247, 248, 256, 258, 259, 262, 270, 281, 282, 289, 295, 303, 307, 308, 311, 318, 322, 324, 325, 326, 327, 328, 331, 332, 336, 338, 340, 341, 342, 343, 346, 349, 357, 359, 368, 369, 370, 371, 373], "11": [35, 57, 85, 119, 127, 129, 132, 144, 152, 154, 175, 182, 220, 232, 240, 246, 281, 282, 292, 307, 308, 343, 357, 359, 363, 369], "inverse_map": [35, 175, 180], "deinterleav": [35, 175, 178, 180], "12": [35, 57, 119, 127, 129, 132, 144, 152, 154, 175, 182, 220, 232, 240, 246, 267, 269, 274, 282, 307, 343, 368, 372], "col": [35, 36], "__len__": [35, 57, 79, 83, 103, 106, 142, 175, 177, 182, 222, 248, 270], "permut": [35, 175, 176, 180, 181], "determin": [36, 281, 334], "separ": [36, 220, 324], "consecut": [36, 221, 233, 241, 247], "nomenclatur": [37, 187, 220, 232, 240, 246], "variabl": [37, 187, 220, 224, 225, 232, 240, 246, 311, 371], "name": [37, 119, 187, 220, 232, 240, 246], "follow": [37, 91, 96, 187, 220, 232, 240, 246, 312, 323, 334, 337, 339, 341, 343, 371], "tild": [37, 41, 187, 191, 192, 212, 215, 220, 232, 234, 235, 240, 246], "puls": [37, 38, 41, 43, 46, 47, 50, 83, 173, 187, 188, 192, 194, 197, 198, 202, 220, 232, 233, 240, 241, 246, 247, 306, 309, 324, 340, 346, 347, 349, 374, 375], "shape": [37, 38, 41, 43, 46, 47, 50, 57, 187, 188, 192, 194, 197, 198, 202, 220, 232, 233, 240, 241, 246, 247, 306, 309, 324, 340, 346, 347, 349, 369, 374, 375], "index": [37, 38, 42, 57, 79, 132, 138, 182, 187, 220, 232, 240, 246, 248, 253, 270, 308, 314, 324, 333, 334, 339, 357, 360, 363], "object": [37, 38, 62, 69, 96, 97, 187, 188, 220, 221, 232, 233, 240, 241, 246, 247, 281, 308, 325, 326, 327, 328, 331, 332, 338, 342, 357, 371, 375], "x_tild": [37, 41, 192], "match": [37, 38, 41, 47, 187, 188, 192, 198, 220, 232, 233, 240, 241, 246, 247, 324, 375], "filter": [37, 41, 47, 50, 57, 58, 59, 61, 62, 66, 67, 69, 71, 79, 80, 81, 82, 83, 84, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 132, 135, 136, 138, 139, 140, 141, 142, 143, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 182, 183, 184, 185, 186, 187, 192, 198, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 220, 222, 223, 232, 240, 246, 248, 249, 250, 253, 256, 258, 259, 261, 262, 270, 271, 272, 273, 287, 288, 289, 290, 291, 292, 296, 306, 309, 324, 325, 326, 327, 328, 331, 332, 338, 342, 343, 346, 347, 349, 356, 362, 373, 374, 375], "maximum": [37, 38, 41, 109, 163, 187, 191, 192, 212, 220, 232, 240, 246, 306, 309, 323, 339, 346, 347, 349, 362, 371, 375], "likelihood": [37, 41, 187, 191, 192, 212, 220, 232, 240, 246, 362, 371, 375], "abstract": [37, 39, 48, 187, 189, 199], "provid": [37, 39, 48, 101, 187, 189, 199, 220, 232, 240, 242, 244, 246, 324, 334, 364, 374], "log_2": [37, 40, 187, 190, 220, 232, 240, 246, 277, 297, 298, 300, 351], "phase_offset": [37, 38, 45, 187, 188, 196, 220, 221, 232, 233, 240, 241, 243, 246, 247, 276, 303, 304, 312, 323, 324, 339, 340, 350, 370, 371, 372], "degre": [37, 38, 45, 119, 126, 144, 151, 187, 188, 196, 220, 221, 232, 233, 240, 241, 243, 246, 247, 281, 304, 312, 314, 315, 318, 360, 371], "sym": [37, 38, 42, 49, 187, 188, 200, 220, 221, 232, 233, 240, 241, 246, 247, 298, 301, 306, 346, 349, 351, 352, 373], "pulse_shap": [37, 38, 41, 43, 46, 187, 188, 192, 194, 197, 220, 232, 233, 240, 241, 246, 247, 324, 340, 370, 372], "instantan": [37, 38, 46, 303], "tx_filter": [37, 50, 187, 202, 220, 232, 240, 246], "transmit": [37, 50, 98, 187, 202, 212, 215, 220, 232, 234, 235, 240, 246, 303, 324], "coeffici": [37, 47, 50, 57, 59, 79, 80, 103, 105, 157, 160, 182, 183, 187, 198, 202, 220, 232, 240, 246, 250, 270, 272, 314, 325, 326, 327, 328, 331, 332, 338, 342, 343, 368, 369], "rx_filter": [37, 47, 187, 198, 220, 232, 240, 246], "symbol_label": [38, 220, 221, 232, 233, 240, 241, 245, 246, 247, 372], "bin": [38, 221, 233, 241, 245, 247, 303, 323, 334, 339, 372], "grai": [38, 220, 221, 232, 233, 240, 241, 245, 246, 247, 307, 323, 339, 360, 372, 374], "rect": [38, 188, 233, 241, 247, 373], "deviat": [38, 42], "delta": [38, 42, 57, 70, 72, 79, 83, 103, 111, 142, 143, 157, 165, 173, 182, 185, 222, 248, 270, 289, 327, 368, 369], "chang": [38, 42, 365, 376], "If": [38, 84, 90, 94, 129, 138, 154, 188, 225, 233, 241, 247, 268, 270, 275, 276, 277, 295, 299, 316, 319, 320, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 337, 338, 339, 340, 348, 353, 355, 374], "string": [38, 188, 233, 241, 247, 311, 330, 337, 375], "npt": [38, 59, 80, 109, 163, 183, 188, 221, 233, 241, 247, 272, 287, 288, 290, 291, 325, 326, 327, 328, 331, 332, 338, 342], "custom": [38, 57, 61, 79, 81, 175, 182, 184, 188, 233, 241, 247, 270, 273, 287, 288, 290, 291, 375], "It": [38, 103, 157, 182, 188, 203, 212, 233, 241, 247, 276], "import": [38, 188, 212, 233, 241, 247, 365, 367, 368, 369, 370, 371, 372, 373, 374], "psd": [39, 48, 189, 199, 242, 244, 277, 297, 298, 300, 301, 322, 336, 351, 352], "p_b": [39, 189], "s_hat": [41, 192, 371, 372], "p_e": [48, 199], "base": [51, 324, 333, 334, 340, 361, 375], "wireless": [51, 361], "configur": [51, 54, 85, 119, 144, 371], "2d": [51, 54, 55, 85, 277, 323, 324, 334], "polyphas": [57, 58, 59, 61, 79, 80, 81, 182, 183, 184, 248, 249, 250, 251, 253, 254, 257, 258, 259, 262, 270, 271, 272, 273, 292, 296, 343, 356, 374, 375], "fir": [57, 58, 59, 79, 80, 82, 83, 84, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 132, 135, 142, 143, 182, 183, 185, 186, 220, 222, 223, 232, 240, 246, 248, 249, 250, 253, 256, 258, 259, 261, 262, 270, 271, 272, 287, 288, 289, 290, 291, 292, 324, 325, 326, 327, 328, 331, 332, 338, 342, 343, 370, 374, 375], "effici": [57, 129, 154, 220, 296, 318, 356], "split": 57, "equal": [57, 119, 138, 220], "ha": [57, 104, 173, 182, 220, 232, 240, 249, 271, 276, 287, 288, 289, 290, 291, 296, 305, 306, 318, 346, 349, 356, 359, 371, 372, 373], "bandwidth": [57, 62, 63, 64, 69, 73, 84, 203, 205, 209, 277, 287, 288, 306, 346, 349, 371, 373, 375], "equival": [57, 79, 131, 143, 156, 182, 270, 276, 277, 281, 287, 288, 289, 290, 291, 301, 308, 324, 352, 357, 365, 367], "first": [57, 79, 96, 129, 132, 135, 182, 183, 220, 232, 248, 253, 270, 272, 316, 327, 340, 355, 364, 366, 375], "f_i": 57, "cdot": [57, 79, 83, 103, 119, 121, 122, 123, 132, 135, 144, 146, 147, 148, 182, 185, 212, 234, 248, 249, 260, 270, 271, 281, 287, 288, 290, 291, 312, 315], "feedforward": [57, 59, 79, 80, 83, 103, 105, 118, 142, 157, 160, 162, 173, 182, 183, 185, 222, 248, 250, 259, 262, 270, 272, 325, 326, 327, 328, 331, 332, 338, 342, 343, 368, 369], "instead": [57, 79, 182, 270], "commut": [57, 79, 182, 248, 250, 254, 257, 270], "parallel": [57, 79, 182, 248, 250, 257, 270], "fourier": 57, "transform": 57, "idft": 57, "produc": [57, 58, 104, 119, 126, 129, 131, 144, 151, 154, 156, 182, 248, 249, 250, 257, 270, 271, 281, 306, 360, 373], "bottom": [57, 79, 182, 248, 250, 254, 257, 270], "top": [57, 79, 182, 248, 250, 254, 257, 270], "relat": [57, 79, 119, 130, 144, 155, 182, 248, 259, 262, 270, 277, 306, 314], "j": [57, 79, 109, 157, 160, 161, 163, 173, 176, 180, 181, 182, 185, 220, 224, 232, 240, 246, 248, 259, 262, 270, 276, 281, 295, 312, 315, 359, 368, 369], "fred": [57, 79, 182, 270, 292, 343], "harri": [57, 79, 182, 270, 287, 288, 290, 291, 292, 343], "process": [57, 79, 91, 92, 93, 95, 182, 185, 222, 265, 266, 267, 269, 270, 292, 343, 369, 371, 374], "system": [57, 79, 182, 270, 292, 301, 308, 343, 352, 357, 364, 366, 371, 374], "tone": 57, "increas": [57, 84, 305, 318, 369], "10_000": 57, "rang": [57, 212, 234, 323, 371, 372], "overlai": 57, "boundari": [57, 220], "so": [57, 232, 240, 246, 305, 306, 309, 346, 347, 349, 374], "wrap": 57, "from": [57, 96, 110, 113, 119, 120, 121, 144, 145, 146, 157, 158, 173, 183, 185, 187, 201, 220, 232, 240, 245, 246, 248, 250, 254, 257, 272, 286, 297, 298, 300, 301, 313, 314, 321, 330, 337, 344, 345, 351, 352, 360, 363, 368, 369, 371, 374], "posit": [57, 176, 180, 181, 312], "neg": [57, 129, 154, 305, 312], "fft": [57, 296, 330, 337, 353, 354, 356], "1024": [57, 109, 110, 113, 163, 325, 326, 328, 331, 332, 370, 373], "color": [57, 83, 173, 324, 333, 334, 340, 370, 373], "label": [57, 79, 83, 92, 94, 132, 142, 173, 182, 185, 212, 221, 222, 233, 234, 241, 242, 244, 247, 266, 268, 270, 274, 276, 287, 288, 289, 290, 291, 303, 304, 306, 308, 312, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 336, 337, 340, 346, 349, 350, 357, 367, 370, 371, 372, 373], "f_start": 57, "f_stop": 57, "fill_betweenx": 57, "80": [57, 59, 80, 83, 183, 272, 292, 359], "xtick": 57, "legend": [57, 83, 142, 173, 212, 234, 274, 370, 371, 373], "spread": [57, 308, 357], "10000": 57, "1001": 57, "full": [57, 58, 79, 104, 182, 248, 249, 270, 271, 278, 308, 357], "state": [57, 58, 62, 75, 79, 82, 83, 103, 104, 108, 114, 115, 117, 120, 121, 125, 127, 128, 129, 131, 132, 136, 138, 139, 140, 142, 145, 146, 150, 152, 153, 154, 156, 157, 168, 169, 171, 173, 182, 185, 222, 248, 249, 261, 270, 271, 281, 314, 375], "flush": [57, 58, 79, 83, 103, 104, 108, 132, 136, 142, 182, 222, 248, 249, 270, 271, 375], "consist": [57, 79, 83, 98, 99, 100, 101, 102, 103, 115, 132, 139, 142, 182, 222, 248, 270], "previou": [57, 59, 79, 80, 83, 84, 103, 105, 115, 132, 134, 138, 139, 142, 158, 160, 174, 182, 183, 185, 186, 222, 223, 248, 250, 270, 272, 293, 294], "u": [57, 79, 83, 103, 116, 142, 157, 170, 173, 182, 185, 222, 248, 270, 274, 338, 359, 360, 368, 369], "frequency_respons": [57, 79, 83, 103, 109, 142, 157, 163, 173, 182, 185, 222, 248, 270, 375], "float64": [57, 79, 83, 103, 109, 142, 157, 163, 173, 182, 185, 222, 224, 225, 248, 270, 278, 308, 314, 357, 360], "complex128": [57, 79, 83, 103, 109, 142, 157, 163, 173, 182, 185, 222, 224, 225, 248, 270], "polyphase_tap": [57, 79, 182, 248, 256, 258, 259, 262, 270], "polyphase_ord": [57, 59, 79, 80, 182, 183, 248, 256, 258, 270, 272, 292, 375], "hold": [57, 79, 182, 183, 248, 250, 254, 270, 272, 316, 375], "connect": [57, 79, 182, 248, 250, 254, 257, 270], "sum": [57, 79, 91, 103, 157, 182, 248, 250, 257, 265, 270, 373], "all": [57, 79, 96, 101, 120, 121, 145, 146, 182, 225, 248, 250, 257, 270, 303, 324, 333, 334, 364, 366, 374, 375], "integ": [57, 79, 109, 163, 182, 248, 252, 255, 270, 314, 316], "resampl": [57, 79, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 182, 248, 249, 260, 270, 271, 272, 273, 292, 343, 374, 375], "correspond": [57, 79, 96, 101, 120, 121, 127, 132, 135, 145, 146, 152, 182, 248, 253, 270, 314, 334], "l": [58, 104, 142, 143, 159, 186, 222, 223, 249, 271, 289], "convolut": [58, 104, 182, 249, 271], "have": [58, 143, 278, 289, 296, 308, 316, 340, 355, 356, 357], "proport": [58, 62, 66, 203, 205, 210, 249, 271, 305, 318, 362, 375], "align": [58, 104, 183, 232, 249, 271, 272, 308, 357, 367], "where": [58, 69, 85, 90, 104, 132, 135, 188, 203, 205, 209, 241, 247, 249, 265, 271, 276, 277, 295, 297, 298, 300, 306, 351, 359, 368, 369, 374], "final": [58, 104, 249, 271], "d": [58, 83, 103, 107, 119, 132, 135, 142, 144, 222, 281, 302, 305, 310, 318, 363, 365, 374], "dictat": [58, 104, 249, 271, 314], "argument": [58, 59, 80, 104, 183, 249, 271, 272, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 364, 368, 369, 375], "23": [59, 80, 119, 144, 183, 272, 292, 318], "atten": [59, 80, 183, 272, 287, 288, 290, 291, 292, 375], "specif": [59, 80, 101, 109, 163, 183, 272, 366, 373], "must": [59, 80, 134, 178, 179, 183, 272, 276, 287, 288, 290, 291, 292, 306, 308, 315, 334, 346, 349, 357, 359], "odd": [59, 80, 143, 183, 246, 272, 289, 292, 353], "even": [59, 80, 143, 183, 246, 272, 287, 288, 289, 290, 291, 292, 306, 346, 349], "stopband": [59, 80, 183, 272, 292, 346, 349], "a_": [59, 80, 183, 212, 213, 214, 216, 272, 292], "stop": [59, 80, 183, 272, 292], "closedlooppl": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 362, 371, 375], "defin": [62, 85, 103, 119, 122, 123, 124, 126, 130, 144, 147, 148, 149, 151, 155, 157, 173, 276, 295, 306, 314, 335, 346, 349, 359, 362, 369, 374], "close": [62, 69, 71, 362, 374, 375], "loop": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 203, 204, 205, 206, 207, 208, 209, 210, 211, 224, 225, 226, 227, 228, 229, 230, 231, 374, 375], "pll": [62, 63, 64, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 362, 374, 375], "analysi": [62, 69, 364, 371, 374, 375], "bb": [62, 370, 371], "phase_err": [62, 371], "ped": [62, 68, 69, 205, 212, 216, 217, 218, 234, 235, 236, 237, 238, 239, 362, 371, 374, 375], "lf": [62, 371], "phase_est": [62, 371], "lo": [62, 371], "nco": [62, 65, 69, 205, 224, 225, 226, 227, 228, 229, 230, 231, 362, 371, 374, 375], "local": [62, 363, 371], "oscil": [62, 224, 226, 362, 371, 374, 375], "numer": [62, 224, 226, 362, 369, 371, 374, 375], "transfer": [62, 71, 103, 157, 158, 185, 203, 306, 346, 349, 368, 369, 371], "2nd": [62, 203, 205, 362, 371, 375], "plu": [62, 203, 205, 362, 375], "h_": [62, 83, 371], "k_1": [62, 66, 203, 210, 371], "k_2": [62, 67, 203, 208, 371], "frac": [62, 70, 72, 75, 76, 83, 91, 92, 93, 95, 103, 107, 142, 157, 173, 183, 185, 203, 222, 232, 240, 246, 265, 266, 267, 272, 274, 275, 276, 277, 285, 297, 298, 300, 301, 303, 305, 306, 312, 313, 315, 317, 318, 346, 348, 349, 351, 352, 358, 359, 371], "k_0": [62, 65, 69, 205, 224, 226, 227, 371], "k_p": [62, 68, 69, 205, 212, 219, 234, 239, 371], "appendix": [62, 203, 346, 349], "lock": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 203, 204, 205, 206, 207, 208, 209, 210, 211, 224, 225, 226, 227, 228, 229, 230, 231, 374], "see": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 84, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 114, 115, 117, 118, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 156, 157, 158, 159, 160, 161, 162, 164, 166, 167, 168, 169, 171, 172, 174, 186, 203, 204, 205, 206, 207, 208, 209, 210, 211, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 240, 243, 245, 246, 261, 270, 287, 288, 290, 291, 296, 306, 309, 325, 326, 327, 328, 331, 332, 338, 342, 346, 347, 349, 374], "noise_bandwidth": [62, 69, 203, 205, 209], "damping_factor": [62, 69, 203, 205, 206], "phase_lock_tim": [62, 76], "frequency_lock_tim": [62, 70], "freq_offset": [62, 70, 72], "lock_tim": [62, 72, 371], "phase_error_vari": [62, 75], "cn0": [62, 75], "varianc": [62, 75, 91, 93, 95, 267, 269, 276], "steadi": [62, 75], "sample_r": [62, 69, 77, 79, 109, 110, 113, 132, 163, 182, 270, 296, 304, 315, 324, 325, 326, 328, 330, 331, 332, 333, 334, 337, 340, 353, 354, 356, 367, 371, 373], "bnt": [62, 64, 371], "b_n": [62, 63, 64, 69, 70, 72, 75, 76, 203, 205, 209], "bn": [62, 63], "hz": [62, 63, 69, 70, 72, 75, 109, 110, 113, 163, 203, 205, 209, 277, 286, 296, 304, 305, 306, 313, 315, 318, 353, 354, 358, 367], "zeta": [62, 69, 78, 203, 205, 206], "damp": [62, 69, 78, 203, 205, 206, 371], "k0": [62, 65, 69, 205, 224, 371], "kp": [62, 68, 69, 205, 371], "k1": [62, 66, 203, 371], "k2": [62, 67, 203, 371], "omega_n": [62, 74, 371], "natur": [62, 74], "radian": [62, 73, 74, 75, 212, 215, 217, 218, 224, 225, 226, 228, 229, 234, 235, 237, 238, 246, 371], "omega_3db": [62, 73], "omega_": [62, 73], "textrm": [62, 73], "period": [69, 203, 205, 209, 220, 359], "second": [69, 70, 72, 76, 96, 203, 205, 209, 306], "critic": [69, 78, 203, 205, 206, 371], "underdamp": [69, 78, 203, 205, 206], "overdamp": [69, 78, 203, 205, 206], "ted": [69, 205], "t_": [70, 72, 76, 119, 133, 144, 306, 346, 349, 373], "fl": [70, 72], "take": [70, 72, 76, 363], "onto": [70, 72, 76], "39": 70, "pl": [72, 76, 364], "38": 72, "34": [73, 340], "33": 74, "sigma_": [75, 91, 92, 94], "theta_": [75, 212, 215, 234, 235], "carrier": [75, 240], "43": 75, "40": [76, 83, 132, 182, 270, 296], "less": [78, 274], "than": [78, 129, 154, 220, 221, 233, 241, 245, 247, 274, 309, 312, 323, 339, 347], "greater": [78, 346, 349], "prevent": [79, 182, 232, 246, 270], "need": [79, 182, 270, 363, 364, 366], "done": [79, 363], "case": [79, 182, 246, 265, 270, 346, 349], "3x": [79, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 182, 281], "v": [79, 144, 224, 248, 286, 313, 363], "summat": [79, 248], "co": [79, 132, 182, 224, 270, 315, 346, 349], "64": [79, 142, 289, 311, 369], "280": 79, "marker": [79, 132, 182, 224, 270, 323, 339, 340, 367, 368, 369, 372], "o": [79, 132, 182, 270, 367], "true": [79, 92, 93, 94, 95, 109, 122, 123, 132, 147, 148, 163, 182, 212, 217, 218, 220, 232, 234, 237, 238, 240, 242, 244, 246, 266, 267, 268, 269, 270, 275, 279, 281, 283, 295, 299, 308, 315, 319, 320, 323, 324, 332, 334, 337, 339, 340, 341, 348, 357, 371, 372], "y1": [79, 132, 182, 270, 312], "70": [79, 311], "y2": [79, 132, 182, 270, 312], "140": [79, 296], "y3": [79, 132, 182, 270], "210": 79, "y4": [79, 132, 182, 270], "y5": [79, 132, 182, 270], "y_1": [79, 182, 270, 312], "y_2": [79, 182, 270, 312], "y_3": [79, 182, 270], "y_4": [79, 182, 270], "y_5": [79, 182, 270], "win": 83, "quad": [83, 222], "le": [83, 143, 222, 274, 289, 315, 318, 346, 349], "truncat": 83, "same": [83, 104, 119, 129, 131, 144, 154, 156, 212, 234, 324, 340, 368], "deriv": 83, "fir_2": 83, "fir_6": 83, "fir_10": 83, "fir_20": 83, "fir_40": 83, "fir_80": 83, "y_axi": [83, 328, 330, 337, 375], "ab": [83, 129, 154, 173, 278, 308, 357, 359, 373], "linestyl": [83, 173, 212, 220, 232, 234, 240, 246, 323, 334, 339, 341, 359, 367, 372, 373], "theori": [83, 91, 92, 93, 95, 173, 265, 266, 267, 269], "lfloor": [83, 103, 107, 142, 222], "rfloor": [83, 103, 107, 142, 222], "blackman": [84, 287, 288, 290, 291], "scipi": [84, 103, 157, 287, 288, 290, 291, 330, 337, 369, 373, 374], "definit": [84, 325, 326, 327, 328, 331, 332, 338, 342], "get_window": 84, "detail": 84, "discretememorylesschannel": [85, 86, 87, 88, 89, 90, 361], "memoryless": [85, 90, 295, 361, 374], "dmc": [85, 86, 87, 88, 90, 295, 361, 374, 375], "max_": 85, "mutual": [85, 340], "inform": [85, 240, 297, 298, 300, 308, 351, 357], "pr": [90, 295], "y_j": [90, 295], "assum": [90, 91, 265, 276, 295, 316, 340, 355], "ldot": [90, 295], "null": [91, 265, 373], "altern": [91, 265, 369], "hypothes": [91, 265], "w": [91, 265, 276, 367, 368, 369, 370, 371, 372, 373], "sigma": [91, 92, 93, 94, 95, 265, 266, 267, 268, 269, 276, 277], "_0": [91, 265], "_1": [91, 265], "test": [91, 265, 364, 365, 374], "statist": [91, 92, 93, 95, 265, 266, 267, 269], "limits_": [91, 103, 157, 265], "left": [91, 92, 93, 119, 142, 144, 157, 232, 234, 240, 246, 265, 266, 267, 269, 274, 275, 276, 277, 299, 302, 303, 305, 306, 312, 315, 318, 319, 320, 346, 348, 349, 359], "right": [91, 92, 93, 119, 144, 157, 232, 234, 240, 246, 265, 266, 267, 269, 274, 275, 276, 277, 299, 302, 303, 305, 306, 312, 315, 318, 319, 320, 346, 348, 349, 359], "gamma": [91, 93, 95, 265, 267, 269, 274], "sim": [91, 265, 276, 364], "chi_": [91, 92, 93], "2n": [91, 92, 93, 281], "under": [91, 265], "detect": [91, 92, 93, 94, 95, 212, 215, 217, 218, 234, 235, 237, 238, 265, 266, 267, 268, 269, 274, 329, 335, 375], "threshold": [91, 93, 95, 265, 267, 269], "q_": [91, 92, 93, 95], "chi_n": [91, 92, 93, 95], "steven": [91, 92, 93, 95, 265, 266, 267, 269], "kai": [91, 92, 93, 95, 265, 266, 267, 269], "fundament": [91, 92, 93, 95, 265, 266, 267, 269], "n_nc": [91, 92, 93, 94, 95, 274], "For": [92, 93, 95, 266, 267, 269, 276, 281, 296, 305, 356, 363, 368], "1e": [92, 266, 304, 372], "sigma2": [93, 95, 267, 269], "logspac": [94, 109, 163, 268, 274], "theoret": [94, 242, 244, 322, 336, 372, 375], "variou": [94, 142, 364, 373], "1_000": [94, 185, 222, 276, 304, 305, 312, 323, 324, 350, 370], "000": [94, 304, 324], "5_000": 94, "measur": [96, 98, 275, 276, 285, 286, 299, 302, 303, 310, 313, 317, 319, 320, 348, 371, 374, 375], "accumul": [96, 173, 224, 225, 226, 228, 371, 375], "contain": [96, 176, 276, 311], "add": [96, 98, 101, 220, 232, 240, 246, 276, 304, 309, 323, 324, 334, 347, 350, 361, 372, 376], "total": [96, 306, 309, 346, 347, 349, 373], "count": [96, 99, 303], "error_r": [96, 100, 101, 372], "can": [96, 98, 99, 100, 102, 203, 220, 248, 276, 303, 306, 308, 316, 324, 327, 330, 337, 357, 365, 368, 369, 372, 374, 376], "obtain": 96, "tabul": [96, 97], "ascend": [96, 101], "other": [98, 99, 100, 102, 314, 367, 376], "quantiti": [98, 99, 100, 101, 102], "user": [98, 99, 100, 102, 368, 369], "caution": [98, 99, 100, 102], "instanc": [98, 99, 100, 102, 220], "whatev": 101, "wa": [101, 277], "wrapper": [103, 157], "convolv": 103, "support": [103, 157, 375], "one": [103, 129, 154, 157, 221, 232, 233, 241, 245, 247, 306, 311, 325, 326, 328, 330, 331, 332, 337, 353, 368, 369, 370, 373], "sum_": [103, 157, 267, 269, 275, 276, 277, 299, 302, 303, 310, 348], "valid": [104, 305, 314, 324, 333, 334, 359], "remain": [108, 136, 296, 316], "whole": [109, 163, 373], "decad": [109, 163, 325, 326, 328, 331, 332, 368, 371], "point": [109, 163, 217, 218, 237, 238, 323, 330, 337], "endpoint": [109, 163, 369], "includ": [109, 163, 364, 365, 366, 374], "max_f": [109, 163], "log10": [109, 163, 373], "evenli": [109, 163], "00000000e": [109, 163, 245, 246, 369], "00": [109, 163, 245, 246, 369], "76562500e": [109, 163], "04": [109, 163, 311, 369], "95312500e": [109, 163], "03": [109, 163, 311, 369], "97070312e": [109, 163], "98046875e": [109, 163], "99023438e": [109, 163], "95337172": 109, "30202676j": 109, "8178049": 109, "5759632j": 109, "6058636": 109, "79630028j": 109, "rad": [109, 163], "0000000000000002": 109, "0j": [109, 163, 221, 233, 241, 247], "sever": [109, 163], "200": [109, 163, 296, 334, 372], "300": [109, 163, 353, 354], "400": [109, 163, 296], "00391660e": 109, "11022302e": 109, "16j": [109, 245, 246], "53081763e": 109, "79453110e": 109, "17j": 109, "62720131e": 109, "99104274e": 109, "83622458e": 109, "17093835e": 109, "flfsr": [119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 144, 156, 281, 360], "fibonacci": [119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 144, 156, 281, 314, 360], "feedback": [119, 121, 122, 123, 144, 146, 147, 148, 157, 160, 161, 173, 185, 281, 314, 325, 326, 327, 328, 331, 332, 338, 342, 360, 369], "regist": [119, 120, 130, 144, 145, 155, 281, 314, 360], "lfsr": [119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 281, 314, 360], "c_": [119, 120, 121, 122, 123, 130, 144, 145, 146, 147, 148, 155, 281, 359], "dot": [119, 120, 121, 122, 123, 125, 127, 128, 130, 144, 145, 146, 147, 148, 150, 152, 153, 155, 187, 188, 201, 220, 232, 240, 245, 246, 281, 314, 339], "reciproc": [119, 121, 122, 123, 144, 146, 147, 148, 314], "recurr": [119, 122, 126, 130, 144, 147, 151, 155, 281, 314], "y_t": [119, 144, 281], "y_": [119, 144, 281], "c_n": [119, 144], "c_1": [119, 120, 130, 144, 145, 155], "c_0": [119, 120, 130, 144, 145, 155], "field": [119, 120, 124, 129, 131, 144, 145, 149, 154, 156, 278, 281, 305, 308, 314, 357, 360], "t_0": [119, 144], "t_1": [119, 144], "s_0": [119, 120, 121, 125, 127, 128, 144, 145, 146, 150, 152, 153], "s_1": [119, 120, 121, 125, 127, 128, 144, 145, 146, 150, 152, 153], "s_": [119, 120, 121, 125, 127, 128, 144, 145, 146, 150, 152, 153], "addition": [119, 374], "next": [119, 129, 144, 154, 365], "revers": [119, 122, 123, 124, 125, 127, 128, 129, 131, 144, 147, 148, 149, 150, 152, 153, 154, 156, 314], "gardner": [119, 144, 281], "2019": [119, 144, 281], "applic": [119, 144, 281], "galoi": [119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 278, 281, 308, 314, 357, 360], "cryptographi": [119, 144, 281], "figshar": [119, 144], "hdl": [119, 144, 281], "handl": [119, 144, 281], "net": [119, 144, 281], "2134": [119, 144, 281], "21932": [119, 144, 281], "berlekamp_massei": [119, 144, 281, 360], "gf": [119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 278, 281, 308, 314, 357], "primit": [119, 144, 314], "mathrm": [119, 144, 265, 278, 281, 308, 314, 357], "primitive_poli": [119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 314], "poli": [119, 120, 122, 123, 124, 127, 130, 131, 144, 145, 146, 147, 148, 149, 152, 155, 156, 281, 314, 360], "print": [119, 120, 131, 144, 145, 156, 281, 311, 367, 368, 369, 371], "feedback_poli": [119, 120, 121, 122, 123, 131, 144, 145, 146, 147, 148, 156, 281], "characteristic_poli": [119, 120, 122, 123, 131, 144, 145, 147, 148, 156, 281], "initial_st": [119, 120, 125, 131, 144, 145, 150, 156, 281], "5x": [119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 281, 314], "13": [119, 129, 132, 144, 154, 175, 182, 220, 232, 240, 246, 265, 266, 267, 269, 278, 282, 307, 340, 343, 375], "14": [119, 129, 132, 144, 154, 175, 220, 232, 240, 246, 266, 282, 307, 343, 364, 365, 375], "15": [119, 129, 132, 144, 154, 175, 212, 220, 232, 240, 246, 268, 282, 307, 308, 343, 356, 357], "17": [119, 132, 144, 220, 245, 246, 318, 343, 363], "18": [119, 132, 144, 343, 363, 372], "19": [119, 132, 144, 343, 375], "21": [119, 144, 318, 340], "10x": [119, 144], "22": [119, 144], "24": [119, 144], "polylik": [119, 121, 314], "construct": [119, 120, 121, 144, 145, 146], "classmethod": [119, 120, 144, 145, 157, 158, 173, 185], "fieldarrai": [119, 120, 124, 125, 128, 129, 130, 144, 145, 149, 150, 153, 154, 155, 278, 281, 308, 314, 357, 360], "self": [119, 120, 144, 145, 157, 158, 173, 185], "to_galois_lfsr": [119, 131], "glfsr": [119, 131, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 281, 360], "type": [119, 124, 129, 144, 149, 154, 281, 286, 303, 313, 316, 330, 335, 337, 355, 375], "_field": [119, 124, 144, 149], "_arrai": [119, 124, 144, 149], "subclass": [119, 124, 144, 149], "arithmet": [119, 123, 124, 144, 148, 149], "minim": [119, 126, 144, 151, 278, 281, 360], "which": [120, 121, 127, 145, 146, 152, 220, 232, 246, 275, 276, 277, 299, 302, 304, 310, 312, 314, 317, 318, 319, 323, 324, 326, 328, 330, 331, 332, 337, 339, 341, 350, 373], "ones": [120, 121, 145, 146, 183, 272, 287, 288, 290, 291, 371], "coeff": [120, 130, 145, 155], "irreducible_poli": [121, 146], "mai": [121, 146, 221, 233, 241, 245, 247, 303, 323, 334, 337, 339, 341, 369], "becaus": [121, 146, 212, 308, 357], "unaffect": [125, 150], "modifi": [127, 128, 152, 153, 375], "view": [127, 152, 277, 364, 374], "direct": [129, 154, 212, 218, 234, 238, 375], "backward": [129, 154, 173, 174, 375, 376], "end": [129, 154, 232, 246, 265, 324, 346, 349, 353, 364], "more": [129, 154, 221, 233, 241, 245, 247, 375], "iter": [129, 154], "fibonacci_lfsr": [131, 156], "differ": [131, 156, 157, 185, 221, 233, 241, 245, 247, 287, 288, 289, 290, 291, 308, 327, 340, 357, 359, 373], "galois_lfsr": [131, 156], "both": [131, 156, 212, 234, 323, 339, 340, 341], "ident": [131, 156], "structur": 132, "angular": 132, "179": 132, "farrow1": 132, "quadrat": [132, 375], "farrow2": 132, "cubic": 132, "farrow3": 132, "quartic": [132, 375], "farrow4": 132, "compar": [132, 185, 212, 222, 234, 242, 244, 287, 288, 289, 290, 291, 314, 327, 373], "vari": [132, 225], "xlim": [132, 296, 356, 370, 371, 373], "comparison": [132, 212, 234, 364], "run": [132, 363], "30": [132, 182, 185, 220, 222, 232, 240, 246, 270, 296, 325, 327, 338, 353, 354, 369, 375], "concaten": [132, 369], "should": [138, 212, 220, 365], "three": [138, 367, 373], "21719": 142, "examin": [142, 220, 232, 240, 246], "flat": [142, 289], "32": [142, 289, 308, 357, 367], "128": 142, "loc": 142, "lower": [142, 220, 232, 246, 346, 349], "effect": 142, "outsid": [142, 369], "symmetri": 142, "about": [142, 287, 288, 340, 366], "band": 142, "worst": 142, "1f": 142, "around": [142, 221, 233, 241, 247], "perfectli": 142, "exactli": 142, "best": [143, 289], "append": [143, 289, 353, 370], "c_2": 144, "26": [144, 363], "to_fibonacci_lfsr": [144, 156], "lfilter": 157, "b_i": [157, 160, 162, 173, 185, 325, 326, 327, 328, 331, 332, 338, 342, 369], "a_j": [157, 160, 161, 173, 185, 325, 326, 327, 328, 331, 332, 338, 342, 369], "These": [157, 232, 240, 246, 341, 365, 371], "a_0": 157, "zerospol": [157, 158, 163, 173, 185, 325, 326, 327, 328, 331, 332, 338, 342, 369], "b_tap": [157, 162, 173, 185, 369], "a_tap": [157, 161, 173, 185, 369], "conj": [163, 325, 326, 327, 328, 331, 332, 338, 342, 369, 371], "4722987": 163, "47271105": 163, "0041658j": 163, "47394825": 163, "00830241j": 163, "47601067": 163, "01238051j": 163, "472298696877605": 163, "36961426": 163, "9678537j": 163, "57338213": 163, "77694738j": 163, "52496713": 163, "3885743j": 163, "51520024": 163, "1706839j": 163, "accordingli": 173, "dc": [173, 289], "trapezoid": [173, 174, 375], "forward": [173, 174, 224, 231, 375], "iir_back": 173, "iir_trap": 173, "iir_forw": 173, "y_back": 173, "y_trap": 173, "y_forw": 173, "height": 174, "mapsto": [176, 180, 181, 187, 188, 201, 220, 232, 240, 245, 246, 339], "th": [176, 180, 181], "place": [176, 180, 181], "recommend": 182, "wai": [182, 365], "zoh": [182, 183, 184, 270, 272, 273], "matlab": [182, 183, 184, 270, 272, 273, 374], "2p": [183, 272], "ramp": [183, 203, 272], "advanc": [183, 272], "approxim": [185, 186, 274, 375], "rememb": 185, "scale": [185, 212, 325, 326, 328, 330, 331, 332, 337, 368, 369], "\u03b1": 185, "35": [185, 222, 371], "y_fir": [185, 222], "y_iir": [185, 222], "map_symbol": [187, 193, 220, 232, 240, 246, 276, 303, 304, 312, 323, 350, 370, 371, 372, 375], "decide_symbol": [187, 191, 220, 232, 240, 246, 371, 372, 375], "a_tild": [187, 191, 220, 232, 240, 246, 371, 372], "mle": [187, 191, 220, 232, 240, 246], "mathbb": [187, 188, 201, 220, 232, 240, 245, 246, 277, 339, 359], "whose": [188, 221, 233, 240, 241, 247, 314], "roll": [188, 233, 241, 247, 359, 373], "off": [188, 233, 241, 247], "loopfilt": [203, 204, 205, 206, 207, 208, 209, 210, 211, 362, 371, 375], "ppi": [203, 205, 362], "track": 203, "constant": [203, 220, 224, 226, 228, 330, 337, 369, 371], "cannot": 203, "chirp": 203, "proportional_gain": [203, 210], "integral_gain": [203, 208], "underli": [203, 207], "mlped": [212, 213, 214, 215, 216, 217, 218, 219, 362, 371, 375], "ml": [212, 216, 362, 371], "aid": [212, 217, 234, 237], "known": [212, 215, 234, 235, 276, 308, 357], "da": [212, 234], "im": 212, "re": [212, 265], "qpsk": [212, 232, 234, 240, 242, 243, 244, 246, 276, 303, 304, 322, 323, 324, 336, 339, 340, 350, 371, 374, 375], "a_rx": 212, "a_ref": 212, "da_error": [212, 234], "data_aided_error": [212, 217, 234, 237], "dd_error": [212, 234], "decision_directed_error": [212, 218, 234, 238], "grid": [212, 234, 341], "observ": [212, 234, 289, 318, 324], "slope": [212, 234], "rx": [212, 213, 216], "veri": [212, 374], "unambigu": [212, 234], "a_receiv": [212, 213, 216], "a_refer": [212, 214, 216], "simul": [212, 217, 218, 234, 237, 238, 372, 374], "scheme": [212, 217, 218, 220, 232, 234, 237, 238, 240, 246, 375], "either": [215, 224, 235, 303], "modem": [217, 218, 220, 232, 237, 238, 240, 246], "n_point": [217, 218, 237, 238], "similar": [220, 232, 246, 373], "One": [220, 232, 246, 373], "distinct": [220, 232, 246], "result": [220, 232, 246, 275, 299, 305, 318, 319, 320, 346, 348, 349, 372], "envelop": [220, 368, 369], "consid": [220, 311], "cpfsk": 220, "45": [220, 221, 232, 233, 240, 243, 276, 303, 304, 312, 315, 323, 324, 339, 340, 350, 370, 371, 372], "uint8": [220, 232, 240, 246, 316, 355], "complex_symbol": [220, 232, 240, 246], "70710678": [220, 232, 240], "70710678j": [220, 232, 240], "tx_sampl": [220, 232, 240, 246, 324], "50": [220, 232, 240, 246, 286, 313, 321, 339, 340, 353, 354, 367, 370], "like": [220, 365, 374, 375], "figsiz": [220, 232, 240, 246, 324, 325, 341, 368, 369, 371], "suptitl": [220, 232, 240, 246, 324, 371, 372], "noiseless": [220, 232, 240, 246, 303], "trajectori": 220, "although": 220, "lead": [220, 312, 372], "spectral": [220, 296, 330, 370, 373], "gmsk": 220, "rx_sampl": [220, 232, 240, 246, 324], "manual": [220, 232, 240, 246, 364, 366], "mf": [220, 232, 240, 246, 324], "mf_sampl": [220, 232, 240, 246], "noisi": [220, 232, 240, 246, 276], "last": [220, 232, 316, 363], "rx_symbol": [220, 232, 240, 246], "rx_complex_symbol": [220, 232, 240, 246], "_": [220, 232, 240, 246, 274, 303], "array_equ": [220, 232, 240, 246, 281, 308, 357], "absolut": [221, 224, 226, 229, 233, 247, 277], "code": [221, 233, 241, 245, 247, 278, 282, 297, 298, 300, 307, 308, 323, 339, 351, 357, 360, 365, 372, 375], "adjac": [221, 233, 241, 245, 247, 372, 373], "start": [221, 233, 241, 247, 363], "go": [221, 233, 241, 247], "counter": [221, 233, 241, 247], "clockwis": [221, 233, 241, 247], "circl": [221, 233, 241, 247, 369], "increment": [224, 225, 226, 228, 371], "sin": [224, 276, 346, 349, 353], "Then": 224, "fsk": 224, "60": [224, 287, 288, 290, 291, 373], "repeat": 224, "cp": 224, "57": 224, "bpsk": [224, 242, 244, 322, 336, 370], "format": [225, 278, 308, 314, 357, 375], "option": [225, 325, 326, 328, 330, 331, 332, 337, 375], "convent": [232, 246], "independ": 232, "apart": 232, "taken": [232, 240, 246, 248], "jq": 232, "begin": [232, 246, 265, 324, 346, 349], "nyquist": [232, 240, 246, 287, 288, 290, 291, 296, 324, 356, 373], "isi": [232, 240, 246, 324], "present": [232, 240, 246], "persist": [232, 240, 246, 323, 324, 334, 337, 372], "cascad": [232, 240, 246, 324], "therefor": [232, 240, 246, 373], "remov": [232, 240, 246, 315, 330, 337, 375], "without": [232, 240, 246, 375], "heurist": [234, 362, 371, 375], "dd": [234, 371, 375], "encod": [240, 242, 244, 293, 294, 374], "ge": [241, 247, 274, 346, 349], "were": [242, 244], "simon": [242, 244], "alouini": [242, 244], "fade": [242, 244], "optimum": [242, 244], "psk8": [242, 244, 322, 336, 372], "psk16": [242, 244, 322, 336, 372], "de": [242, 244, 371, 375], "se": [244, 336], "00j": [245, 246], "07106781e": [245, 246], "01j": [245, 246], "12323400e": [245, 246], "83697020e": 245, "22464680e": [245, 246], "annot": [245, 339, 375], "rotat": [246, 315, 371], "rel": [246, 359, 373], "2m": 246, "displaystyl": [246, 346, 349], "pi4_qpsk": 246, "partit": [248, 250, 254, 257], "befor": [259, 262, 371, 376], "decomposit": [259, 262, 375], "exceed": [263, 264], "15865525393145707": [263, 264], "158655": [263, 264], "0000010494310452": [263, 264], "perfect": 265, "knowledg": 265, "cn": [265, 276], "sqrt": [265, 266, 267, 269, 274, 302, 303, 306, 348, 349, 359, 370, 371, 373], "____": 270, "ln": [274, 306], "62": [274, 311], "log_": [274, 275, 286, 299, 305, 317, 319, 320, 348], "54": [274, 311], "44": 274, "12ab": 274, "7b": 274, "claim": 274, "leq": 274, "8096": 274, "radarsp": 274, "weebli": 274, "upload": 274, "21471216": 274, "albersheim_alternative_form": 274, "pdf": [274, 281, 306], "bpb": 274, "w2": 274, "wpmucdn": 274, "site": [274, 363, 369], "gatech": 274, "edu": [274, 281], "dist": [274, 364], "462": 274, "file": [274, 364, 366], "2016": 274, "noncoher": 274, "www": [274, 281, 287, 288, 289, 290, 291, 292, 306, 308, 357], "mathwork": [274, 287, 288, 289, 290, 291, 292, 306, 308, 357], "help": [274, 287, 288, 289, 290, 291, 292, 306, 308, 357], "html": [274, 287, 288, 289, 290, 291, 292, 306, 308, 357, 363], "semilogx": [274, 335], "nuse": 274, "axi": [275, 299, 302, 310, 317, 319, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 339, 340, 367, 375], "avg": [275, 276, 317], "ax": [275, 299, 302, 310, 317, 319, 341, 375], "along": [275, 281, 299, 302, 310, 317, 319, 375], "entir": [275, 299, 302, 310, 317, 319], "decibel": [275, 286, 299, 313, 319, 320, 348, 374, 375], "ad": [276, 323, 324, 334, 364, 374, 375], "explicitli": 276, "set": [276, 305, 308, 323, 330, 334, 337, 339, 341, 357, 364, 366, 369], "zorder": [276, 304, 350], "infti": [276, 277], "nand": 276, "monoton": 277, "limit": [277, 323, 339, 372], "At": 277, "occur": 277, "59": 277, "shannon": 277, "semilogi": [277, 322, 335, 336], "barker_cod": [278, 360], "bipolar": [278, 308, 314, 357, 375], "barker": [278, 360, 374, 375], "seq": [278, 308, 357], "ideal": [278, 372], "autocorrel": [278, 308, 357, 359], "sidelob": [278, 287, 288, 290, 291, 308, 346, 349, 357, 359], "corr": [278, 359], "lag": [278, 308, 357, 359], "find": [281, 360], "berlekamp": 281, "massei": 281, "algorithm": 281, "depend": [281, 363, 364, 366, 375], "least": 281, "sach": 281, "uniniti": 281, "vi": 281, "sing": 281, "embeddedrel": 281, "showarticl": 281, "1099": 281, "php": 281, "crypto": 281, "stanford": 281, "mironov": 281, "cs359": 281, "below": [281, 363, 368, 369], "reproduc": 281, "binary_cod": [282, 360, 375], "cf": 285, "v_": [285, 286, 313, 320, 348], "en": [285, 314, 317, 359], "wikipedia": [285, 314, 317, 359], "org": [285, 314, 317, 359], "wiki": [285, 314, 317, 359], "voltag": [286, 313, 320, 348, 374], "x_": [286, 313], "mhz": [286, 313], "77": [286, 311, 313], "50e6": 286, "76": [286, 311], "98970004336019": 286, "mw": [286, 313], "dbm": [286, 313], "dbv": [286, 313], "020599913279624": 286, "center_freq": [287, 288], "hann": [287, 288, 290, 291, 330, 337], "chebyshev": [287, 288, 290, 291], "side": [287, 288, 306, 325, 326, 328, 330, 331, 332, 337, 368, 369, 370, 373], "No": [287, 288, 290, 291], "blackmanharri": [287, 288, 290, 291], "chebwin": [287, 288, 290, 291], "dsp": [287, 288, 289, 290, 291, 292, 374], "designbandpassfir": 287, "h_ham": [287, 288, 290, 291], "h_hann": [287, 288, 290, 291], "h_blackman": [287, 288, 290, 291], "h_blackman_harri": [287, 288, 290, 291], "h_chebyshev": [287, 288, 290, 291], "h_kaiser": [287, 288, 290, 291], "larger": [288, 309, 312, 323, 339, 347], "designbandstopfir": 288, "tau": 289, "l_": 289, "designfracdelayfir": 289, "h_8": [289, 346, 349], "h_16": [289, 346, 349], "h_32": 289, "h_64": 289, "cutoff_freq": [290, 291], "cutoff": [290, 291], "f_c": [290, 291], "designhighpassfir": 290, "designlowpassfir": 291, "designmultiratefir": 292, "oplu": [293, 294, 310], "uncod": 294, "doe": [296, 356], "anti": [296, 356, 375], "alias": [296, 356, 375], "x1": 296, "x2": 296, "130": 296, "x3": [296, 359], "spectrum": [296, 325, 326, 328, 330, 331, 332, 337, 353, 354, 356], "content": 296, "abov": [296, 356], "fold": 296, "cw": 296, "unalias": 296, "2048": [296, 353, 354, 356, 370], "qam": [297, 298, 300, 351], "249387366082999": [297, 298], "020599913279625": [297, 352], "7506126339170005": [300, 351], "979400086720376": [300, 301], "norm": [303, 306, 309, 334, 346, 347, 349], "sourc": 303, "max": [303, 319, 320], "percentil": [303, 337], "912948368271474": 303, "865875235622969": 303, "110008484881668": 303, "95th": 303, "95": 303, "881487580141695": 303, "inst_evm": 303, "hist": 303, "histogram": [303, 323, 324, 334], "frequency_offset": [304, 361, 375], "freq_rat": 304, "cycl": [304, 340], "5e": 304, "deg": [304, 312, 371], "path": [305, 374], "loss": [305, 374], "meter": [305, 318, 358], "transmitt": 305, "far": 305, "impli": 305, "possibl": [305, 374], "km": 305, "link": [305, 374, 375], "ghz": [305, 318, 358], "1e3": [305, 315, 353], "1e9": [305, 318, 358], "92": 305, "44778322188337": 305, "doubl": [305, 318], "2e3": 305, "98": 305, "468383135163": 305, "2e9": 305, "up": [305, 364], "product": [306, 373], "thought": [306, 376], "smaller": [306, 346, 349, 373], "wider": 306, "gaussdesign": 306, "onlinelibrari": 306, "wilei": 306, "doi": 306, "1002": 306, "9780470041956": 306, "app2": 306, "h_0p1": [306, 346, 349], "h_0p2": 306, "h_0p3": 306, "gray_cod": [307, 360, 375], "hadamard_cod": [308, 357, 360], "hadamard": [308, 357, 360, 374, 375], "comm": [308, 357], "hadamardcod": 308, "walsh": [308, 357, 360, 374, 375], "thei": [308, 314, 357, 376], "walsh_cod": [308, 357, 360], "cross": [308, 357, 359], "seq1": [308, 357], "seq2": [308, 357], "seq3": [308, 357], "quit": [308, 357], "larg": [308, 357, 364], "misalign": [308, 357], "precis": [308, 357], "xcorr12": [308, 357], "xcorr13": [308, 357], "xcorr23": [308, 357], "uniform": [308, 357], "fact": [308, 357], "high": [308, 357], "acorr1": [308, 357], "acorr2": [308, 357], "acorr3": [308, 357], "reason": [309, 347, 363], "h_half_sin": 309, "displai": [311, 323, 325, 326, 328, 330, 331, 332, 337, 339], "line": [311, 340, 364, 370], "quick": 311, "brown": 311, "fox": 311, "jump": 311, "lazi": 311, "dog": 311, "00000000": 311, "68": 311, "65": 311, "71": 311, "69": 311, "63": 311, "6b": 311, "72": 311, "6f": 311, "6e": 311, "00000010": 311, "66": 311, "78": 311, "6a": 311, "6d": 311, "73": 311, "74": 311, "00000020": 311, "6c": 311, "61": 311, "7a": 311, "79": 311, "67": 311, "he": 311, "02": [311, 369, 371], "00000004": 311, "05": [311, 367, 369, 371], "06": 311, "07": 311, "08": 311, "00000008": 311, "09": 311, "0a": 311, "iq_imbal": [312, 361, 375], "iq": [312, 361, 374], "imbal": [312, 361, 374], "compon": [312, 353, 354, 356], "g_i": 312, "180": 312, "g_q": 312, "x_q": 312, "horizont": 312, "stretch": 312, "while": [312, 373], "vertic": 312, "subplot": [312, 324, 371, 372], "northwest": 312, "northeast": 312, "50118723": 313, "36272725": 313, "9952623149688795": 313, "m_sequenc": [314, 360], "maxim": 314, "interpret": 314, "maximum_length_sequ": 314, "just": 314, "6560": 314, "satisfi": 315, "dtypelik": [316, 355], "most": [316, 355], "signific": [316, 355], "enough": 316, "fill": 316, "smallest": 316, "unsign": 316, "diamet": 318, "55": [318, 340, 375], "eta": 318, "dbi": 318, "arcsin": 318, "83": 318, "dish": 318, "810210290266568": 318, "437435887991374": 318, "sinc": [318, 363, 372], "antenna": [318, 374], "we": [318, 324, 374], "830810203546193": 318, "529544741425365": 318, "keyword": [322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 368, 369, 375], "pyplot": [322, 323, 326, 327, 328, 329, 330, 331, 332, 334, 336, 337, 338, 339, 340, 341, 342, 367, 368, 369, 370, 371, 372, 373], "colorbar": [323, 324, 334, 337], "scatter": 323, "overwritten": [323, 334, 337, 339], "histogram2d": [323, 334], "pcolormesh": [323, 334, 337], "cmap": [323, 334], "rainbow": [323, 334], "show_zero": [323, 334], "100_000": [323, 372], "intersymbol": 324, "interfer": 324, "ignor": [324, 364], "transient": 324, "insight": 324, "longer": [324, 346, 349, 353], "open": [324, 374], "n_time": [325, 369], "n_freq": 325, "x_axi": [325, 326, 328, 330, 331, 332, 368, 369, 370, 371, 375], "n_t": 325, "n_f": 325, "logarithm": [325, 326, 328, 330, 331, 332, 368, 369], "h_srrc": [325, 326, 327, 328, 331, 332, 338, 342, 372], "auto": [326, 328, 330, 331, 332, 337, 375], "select": [326, 328, 330, 331, 332, 337, 364], "x_label": 329, "overlap": [330, 337, 370], "detrend": [330, 337], "median": 330, "segment": [330, 337], "256": [330, 337, 370], "trend": [330, 337], "unwrap": [332, 371], "stride": 334, "1d": 334, "collect": 334, "linecollect": 334, "linewidth": [334, 359], "solid": [334, 340], "800": 334, "loglog": 335, "vmin": 337, "10th": 337, "vmax": 337, "100th": 337, "shade": 337, "gouraud": 337, "represent": [339, 375], "markers": 339, "diff": [340, 370], "exclus": 340, "imaginari": 340, "dash": 340, "share": 340, "10e3": 340, "uniformli": 340, "style": 341, "revert": 341, "rcdefault": 341, "_rc_param": 341, "rc_param": 341, "constrained_layout": 341, "h_pad": 341, "w_pad": 341, "max_open_warn": 341, "titleweight": 341, "bold": 341, "arrang": 343, "notion": 343, "demonstr": 343, "matric": 343, "000005": 344, "000000025": 344, "005": [345, 371], "000025": 345, "excess": [346, 349, 373], "narrow": [346, 349], "expens": [346, 349], "higher": [346, 349, 373], "h_0p5": [346, 349], "h_0p9": [346, 349], "affect": [346, 349], "h_4": [346, 349], "h_rect": [347, 373], "sample_rate_offset": [350, 361, 375], "250": [353, 354, 371], "ksp": [353, 354], "conjug": [353, 354, 369], "500": [353, 354, 371], "now": [353, 354, 367, 375], "150": [353, 354, 372], "asymmetr": 354, "copi": 356, "mani": [357, 364], "walshcod": 357, "299792458": 358, "zadoff_chu_sequ": [359, 360], "zadoff": [359, 360, 374, 375], "chu": [359, 360, 374, 375], "prime": 359, "gcd": 359, "ne": 359, "cyclic": 359, "x_u": 359, "2q": 359, "mod": 359, "e2": 359, "93chu_sequ": 359, "x_3": 359, "139": 359, "tile": 359, "x_5": 359, "x5": 359, "xcorr": 359, "sphinx": 363, "immateri": 363, "theme": 363, "store": [363, 365, 366], "txt": [363, 364, 365, 366], "some": 363, "version": [363, 365, 374, 375], "aren": 363, "resolut": 363, "minut": 363, "ci": 363, "myst": 363, "parser": 363, "updat": [363, 375], "git": [363, 365], "math": 363, "dollar": 363, "ipykernel": 363, "nb": 363, "pickleshar": 363, "switch": 363, "pip": [363, 364, 365, 366, 374], "python3": [363, 364, 365, 366, 369, 374], "built": 363, "command": [363, 364], "dirhtml": 363, "locat": [363, 366], "home": [363, 369, 373], "page": 363, "directori": [363, 365], "get": 363, "necessari": 363, "webpag": 363, "webserv": 363, "easili": [363, 364, 366, 368, 369], "python": [363, 374], "server": 363, "8080": 363, "access": 363, "web": 363, "browser": 363, "localhost": 363, "librari": [364, 365, 366, 367, 372, 374, 376], "ruff": [364, 365, 375], "lint": [364, 365], "your": [364, 366, 371], "develop": [364, 365, 366], "dev": [364, 366], "pyproject": [364, 366], "toml": [364, 365, 366], "tool": [364, 366, 374], "src": [364, 373], "extend": 364, "ipynb": 364, "exclud": 364, "build": [364, 374], "_version": 364, "py": [364, 366, 369, 371, 373], "120": 364, "doc": 364, "pycodestyl": 364, "pyflak": 364, "pyupgrad": 364, "flake8": 364, "bugbear": 364, "simplifi": 364, "isort": 364, "pylint": [364, 375], "npy": 364, "rule": 364, "ruf": 364, "e501": 364, "too": 364, "long": 364, "e713": 364, "e714": 364, "plr2004": 364, "magic": 364, "plr0913": 364, "plr5501": 364, "collaps": 364, "els": [364, 370], "plr0912": 364, "plr0915": 364, "statement": 364, "plw0603": 364, "global": 364, "__init__": 364, "f401": 364, "f403": 364, "check": 364, "hook": 364, "config": [364, 367, 368, 369, 370, 371, 372, 373], "yaml": 364, "repo": [364, 365, 369, 373], "github": [364, 374], "rev": 364, "v2": 364, "id": 364, "fixer": 364, "trail": 364, "whitespac": 364, "astral": 364, "sh": 364, "v0": 364, "enabl": [364, 375], "disabl": 364, "uninstal": 364, "extens": 364, "vscode": [364, 366], "json": [364, 366], "you": [364, 365, 366, 371, 374], "edit": [364, 369], "latest": [365, 374], "releas": [365, 375], "main": [365, 373], "mhostett": [365, 375], "Or": [365, 366], "pre": 365, "To": 365, "activ": 365, "benefici": 365, "fashion": 365, "allow": [365, 366], "immedi": 365, "seen": 365, "upon": 365, "clone": 365, "wherev": 365, "flag": 365, "packag": [365, 369, 374], "commit": 365, "pytest": [365, 366], "cov": 365, "xdist": 365, "benchmark": 365, "ini_opt": 366, "minvers": 366, "addopt": 366, "showloc": 366, "testpath": 366, "execut": 366, "test_psk": 366, "instruct": 366, "invok": 366, "infrastructur": 366, "debug": 366, "inlinebackend": [367, 368, 369, 370, 371, 372, 373], "print_figure_kwarg": [367, 368, 369, 370, 371, 372, 373], "facecolor": [367, 368, 369, 370, 371, 372, 373], "inlin": [367, 368, 369, 370, 371, 372, 373], "widget": [367, 368, 369, 370, 371, 372, 373], "tx": 367, "fillstyl": 367, "show": [367, 368, 369, 370, 371, 372, 373], "accomplish": [367, 372], "def": [367, 370, 372], "resample_sign": 367, "new_sample_r": 367, "ty": 367, "gca": [367, 372], "set_prop_cycl": [367, 372], "198": 367, "four": 367, "396": 367, "fourth": 367, "often": 367, "do": 367, "312": 367, "00095883": 368, "00175012": 368, "00423921": 368, "0058825": 368, "006151": 368, "00474595": 368, "0017044": 368, "00254816": 368, "00721645": 368, "0112324": 368, "01342358": 368, "01273202": 368, "00845058": 368, "0004368": 368, "01073669": 368, "02372977": 368, "03650247": 368, "04650654": 368, "05098525": 368, "04734644": 368, "03355896": 368, "00851486": 368, "02769991": 368, "07367348": 368, "12670446": 368, "18301321": 368, "23810898": 368, "28727058": 368, "32607991": 368, "35093841": 368, "35949665": 368, "conveni": [368, 369], "evalu": [368, 369], "29": 368, "31": 368, "here": [368, 369], "478207252018059": 369, "6400000000000001": 369, "7391036260090295": 369, "3061467458920719j": 369, "47820725": 369, "78207252e": 369, "58172329e": 369, "10862468e": 369, "86109590e": 369, "21565653e": 369, "01140214e": 369, "57286400e": 369, "67772160e": 369, "47338728e": 369, "10422993e": 369, "89312837e": 369, "12240078e": 369, "03953322e": 369, "69685122e": 369, "63882791e": 369, "81474977e": 369, "47193366e": 369, "85259041e": 369, "15647504e": 369, "23851924e": 369, "42176895e": 369, "84684395e": 369, "42721858e": 369, "72236648e": 369, "14721649e": 369, "10813095e": 369, "94024315e": 369, "78877688e": 369, "74077567e": 369, "87820725": 369, "53637958": 369, "94724205": 369, "13335164": 369, "1455082": 369, "04436799": 369, "88708159": 369, "71930943": 369, "5719707": 369, "46154771": 369, "39261642": 369, "36139242": 369, "35935288": 369, "3763214": 369, "40270968": 369, "43085717": 369, "45557651": 369, "47410241": 369, "48566716": 369, "49090568": 369, "49124786": 369, "48840102": 369, "4839738": 369, "47925143": 369, "47510421": 369, "47199608": 369, "47005584": 369, "46917696": 369, "46911955": 369, "denomin": 369, "73910363": 369, "30614675j": 369, "plane": 369, "092337035029908": 369, "71104892744724": 369, "684365018955985": 369, "37868538208862": 369, "1263714068241546": 369, "9993519409971622": 369, "1909320767063554": 369, "016796159999999997": 369, "46380627201816593": 369, "3806359704987265j": 369, "4988817673791569": 369, "3333421398098428j": 369, "5543277195052645": 369, "22961005941814036j": 369, "5291527586123693": 369, "28283804209787544j": 369, "lyon": 369, "understand": 369, "3rd": 369, "insid": 369, "matt": [369, 373, 375], "env": 369, "lib": 369, "_filter_design": 369, "480": 369, "runtimewarn": [369, 373], "divid": [369, 373], "encount": [369, 373], "npp_polyv": 369, "zm1": 369, "tensor": 369, "invalid": 369, "unstabl": 369, "n_symbol": 370, "pb": 370, "x_bb_rect": 370, "papr_bb_rect": 370, "x_pb_rect": 370, "papr_pb_rect": 370, "x_bb_0p1": 370, "papr_bb_0p1": 370, "x_pb_0p1": 370, "papr_pb_0p1": 370, "x_bb_0p5": 370, "papr_bb_0p5": 370, "x_pb_0p5": 370, "papr_pb_0p5": 370, "x_bb_0p9": 370, "papr_bb_0p9": 370, "x_pb_0p9": 370, "papr_pb_0p9": 370, "2f": 370, "rf": [370, 371], "512": 370, "sweep_alpha": 370, "bb_papr": 370, "pb_papr": 370, "bpsk_bb_papr": 370, "bpsk_pb_papr": 370, "qpsk_bb_papr": 370, "qpsk_pb_papr": 370, "psk8_bb_papr": 370, "psk8_pb_papr": 370, "psk16_bb_papr": 370, "psk16_pb_papr": 370, "loop_filt": 371, "0x7f312e855c90": 371, "theta_0": 371, "phase_error": 371, "freq_estim": 371, "tmp": 371, "ipykernel_32397": 371, "3044107145": 371, "deprecationwarn": 371, "convers": [371, 374, 375], "ndim": 371, "scalar": 371, "deprec": 371, "futur": 371, "ensur": 371, "extract": 371, "1093092892": 371, "28": 371, "make": [371, 376], "a_hat": [371, 372], "152932338": 371, "rad2deg": 371, "avail": [371, 372, 374], "b_nt": 371, "0005": 371, "0125": 371, "015": 371, "0175": 371, "t_lock": 371, "analyze_psk": 372, "n0": 372, "tx_mf": 372, "1e6": 372, "bpsk_ber": 372, "bpsk_ser": 372, "qpsk_ber": 372, "qpsk_ser": 372, "psk8_ber": 372, "psk8_ser": 372, "psk16_ber": 372, "psk16_ser": 372, "1e0": 372, "psk8_bin": 372, "psk8_grai": 372, "wors": 372, "rc_0p1": 373, "rc_0p5": 373, "rc_0p9": 373, "pm": 373, "nearli": 373, "small": 373, "lobe": 373, "much": 373, "freqz": 373, "worn": 373, "h_rc_0p1": 373, "h_rc_0p5": 373, "h_rc_0p9": 373, "p_rect": 373, "cumsum": 373, "p_rc_0p1": 373, "p_rc_0p5": 373, "p_rc_0p9": 373, "within": 373, "srrc_0p1": 373, "srrc_0p5": 373, "srrc_0p9": 373, "significantli": 373, "due": 373, "being": 373, "h_srrc_0p1": 373, "h_srrc_0p5": 373, "h_srrc_0p9": 373, "p_srrc_0p1": 373, "p_srrc_0p5": 373, "p_srrc_0p9": 373, "gauss_0p1": 373, "gauss_0p2": 373, "gauss_0p3": 373, "_filter": 373, "355": 373, "softwar": 374, "radio": 374, "goal": 374, "analyz": 374, "reli": 374, "interoper": 374, "numba": [374, 375], "acceler": 374, "computation": 374, "intens": 374, "aim": 374, "replic": 374, "relev": 374, "toolbox": 374, "progress": 374, "someth": 374, "pleas": 374, "issu": 374, "pypi": 374, "api": [374, 375, 376], "synchron": 374, "budget": [374, 375], "manipul": 374, "januari": 375, "2024": 375, "design_multirate_tap": 375, "fix": [375, 376], "bug": [375, 376], "hostett": 375, "decemb": 375, "2023": 375, "rework": 375, "frequency_response_log": 375, "explicit": 375, "improv": 375, "jupyt": 375, "notebook": 375, "novemb": 375, "abil": 375, "renam": 375, "multirate_tap": 375, "polyphase_matrix": 375, "replac": 375, "black": 375, "septemb": 375, "sensibl": 375, "august": 375, "27": 375, "superflu": 375, "translat": 375, "zadoff_chu": 375, "juli": 375, "firinterpol": 375, "impair": 375, "fpsl": 375, "helper": 375, "synthes": 375, "semant": 376, "major": 376, "minor": 376, "patch": 376, "introduc": 376, "featur": 376, "compat": 376, "There": 376, "guarante": 376, "them": 376}, "objects": {"": [[4, 0, 0, 1, "sdr", ""]], "sdr": [[10, 1, 1, "", "AGC", "Implements an automatic gain controller (AGC)."], [19, 1, 1, "", "BinaryErasureChannel", "Implements a binary erasure channel (BEC)."], [27, 1, 1, "", "BinarySymmetricChannel", "Implements a binary symmetric channel (BSC)."], [35, 1, 1, "", "BlockInterleaver", "Implements a block interleaver."], [37, 1, 1, "", "CPM", "Implements continuous-phase modulation (CPM)."], [51, 1, 1, "", "Channel", "A base class for wireless channels."], [57, 1, 1, "", "Channelizer", "Implements a polyphase channelizer FIR filter."], [62, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [79, 1, 1, "", "Decimator", "Implements a polyphase decimating FIR filter."], [83, 1, 1, "", "Differentiator", "Implements a differentiator FIR filter."], [85, 1, 1, "", "DiscreteMemorylessChannel", "Implements a discrete memoryless channel (DMC)."], [91, 1, 1, "", "EnergyDetector", "Implements an energy detector."], [96, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [103, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [119, 1, 1, "", "FLFSR", "A Fibonacci linear-feedback shift register (LFSR)."], [132, 1, 1, "", "FarrowResampler", "Implements a piecewise polynomial Farrow arbitrary resampler."], [142, 1, 1, "", "FractionalDelay", "Implements a fractional delay FIR filter."], [144, 1, 1, "", "GLFSR", "A Galois linear-feedback shift register (LFSR)."], [157, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [173, 1, 1, "", "Integrator", "Implements an integrator IIR filter."], [175, 1, 1, "", "Interleaver", "Implements an arbitrary interleaver."], [182, 1, 1, "", "Interpolator", "Implements a polyphase interpolating FIR filter."], [185, 1, 1, "", "LeakyIntegrator", "Implements a leaky integrator IIR filter."], [187, 1, 1, "", "LinearModulation", "Implements linear phase/amplitude modulation with arbitrary symbol mapping."], [203, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [212, 1, 1, "", "MLPED", "Implements a maximum-likelihood phase error detector (ML-PED)."], [220, 1, 1, "", "MSK", "Implements minimum-shift keying (MSK) modulation and demodulation."], [222, 1, 1, "", "MovingAverager", "Implements a moving average FIR filter."], [224, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [232, 1, 1, "", "OQPSK", "Implements offset quadrature phase-shift keying (OQPSK) modulation and demodulation."], [234, 1, 1, "", "PED", "Implements a heuristic phase error detector (PED)."], [240, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [246, 1, 1, "", "PiMPSK", "Implements $pi/M$ phase-shift keying ($pi/M$ PSK) modulation and demodulation."], [248, 1, 1, "", "PolyphaseFIR", "Implements a generic polyphase FIR filter."], [263, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [264, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [265, 1, 1, "", "ReplicaCorrelator", "Implements an clairvoyant replica-correlator detector."], [270, 1, 1, "", "Resampler", "Implements a polyphase rational resampling FIR filter."], [274, 5, 1, "", "albersheim", "Estimates the minimum required single-sample SNR, given $N_{NC}$ non-coherent combinations, to achieve a probability of detection $P_D$ and probability of false alarm $P_{FA}$. This function implements Albersheim's equation."], [275, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [276, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [277, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [278, 5, 1, "", "barker_code", "Returns the Barker code/sequence of length $N$."], [279, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [280, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [281, 5, 1, "", "berlekamp_massey", "Finds the minimal polynomial $c(x)$ that produces the linear recurrent sequence $y$."], [282, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [283, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [284, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [285, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [286, 5, 1, "", "db", "Converts from linear units to decibels."], [287, 5, 1, "", "design_bandpass_fir", "Designs a bandpass FIR filter impulse response $h[n]$ using the window method."], [288, 5, 1, "", "design_bandstop_fir", "Designs a bandstop FIR filter impulse response $h[n]$ using the window method."], [289, 5, 1, "", "design_frac_delay_fir", "Designs a fractional delay FIR filter impulse response $h[n]$ using the Kaiser window method."], [290, 5, 1, "", "design_highpass_fir", "Designs a highpass FIR filter impulse response $h[n]$ using the window method."], [291, 5, 1, "", "design_lowpass_fir", "Designs a lowpass FIR filter impulse response $h[n]$ using the window method."], [292, 5, 1, "", "design_multirate_fir", "Designs a multirate FIR filter impulse response $h[n]$ using the Kaiser window method."], [293, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [294, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [295, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [296, 5, 1, "", "downsample", "Downsamples the time-domain signal $x[n]$ by the factor $r$, by discarding $r-1$ samples every $r$ samples."], [297, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [298, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [299, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [300, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [301, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [302, 5, 1, "", "euclidean", "Measures the Euclidean distance between two signals $x[n]$ and $y[n]$."], [303, 5, 1, "", "evm", "Calculates the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [304, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [305, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [306, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [307, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [308, 5, 1, "", "hadamard_code", "Returns the Hadamard code/sequence of length $N$."], [309, 5, 1, "", "half_sine", "Returns a half-sine pulse shape."], [310, 5, 1, "", "hamming", "Measures the Hamming distance between two signals $x[n]$ and $y[n]$."], [311, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [312, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [313, 5, 1, "", "linear", "Converts from decibels to linear units."], [314, 5, 1, "", "m_sequence", "Generates a maximal-length sequence (m-sequence) from a Fibonacci linear feedback shift register (LFSR)."], [315, 5, 1, "", "mix", "Mixes the time-domain signal $x[n]$ with a complex exponential or real sinusoid."], [316, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [317, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [318, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [319, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [320, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [321, 5, 1, "", "percent", "Converts from a ratio to a percentage."], [343, 5, 1, "", "polyphase_decompose", "Decomposes the prototype filter taps $h[n]$ into the polyphase matrix $h_i[n]$ with $B$ phases."], [344, 5, 1, "", "ppb", "Converts from a ratio to parts per billion (ppb)."], [345, 5, 1, "", "ppm", "Converts from a ratio to parts per million (ppm)."], [346, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [347, 5, 1, "", "rectangular", "Returns a rectangular pulse shape."], [348, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [349, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [350, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [351, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [352, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [353, 5, 1, "", "to_complex_bb", "Converts the real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$ to a complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c} = f_{s,r}/2$."], [354, 5, 1, "", "to_real_pb", "Converts the complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$ to a real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r} = 2f_{s,c}$."], [355, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [356, 5, 1, "", "upsample", "Upsamples the time-domain signal $x[n]$ by the factor $r$, by inserting $r-1$ zeros between each sample."], [357, 5, 1, "", "walsh_code", "Returns the Walsh code/sequence of length $N$."], [358, 5, 1, "", "wavelength", "Calculates the wavelength $lambda$ of an electromagnetic wave with frequency $f$."], [359, 5, 1, "", "zadoff_chu_sequence", "Returns the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.AGC": [[11, 2, 1, "", "__call__", "Performs automatic gain control on the input signal."], [12, 2, 1, "", "__init__", "Creates an automatic gain controller (AGC)."], [13, 4, 1, "", "attack", "(Settable) The attack rate $alpha$."], [14, 4, 1, "", "decay", "(Settable) The decay rate $beta$."], [15, 4, 1, "", "gain", "The current linear gain."], [16, 4, 1, "", "reference", "(Settable) The desired output magnitude."], [17, 2, 1, "", "reset", "Resets the AGC gain. Only useful when using streaming mode."], [18, 4, 1, "", "streaming", "Indicates whether the AGC is in streaming mode."]], "sdr.AGC.__call__": [[11, 3, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.AGC.__init__": [[12, 3, 2, "p-attack", "attack", "The attack rate $alpha$. The attack rate is meant to attenuate strong signals. After $n_0 approx 1 / alpha$ samples the error will reduce to $1 / e$ of its original value."], [12, 3, 2, "p-decay", "decay", "The decay rate $beta$. The decay rate is meant to amplify weak signals. After $n_0 approx 1 / beta$ samples the error will reduce to $1 / e$ of its original value."], [12, 3, 2, "p-reference", "reference", "The desired output magnitude."], [12, 3, 2, "p-streaming", "streaming", "Indicates whether the AGC operates in streaming mode. In streaming mode, the gain is preserved between calls to __call__()."]], "sdr.AGC.reset": [[17, 3, 2, "p-gain", "gain", "The initial linear gain of the AGC."]], "sdr.BinaryErasureChannel": [[20, 4, 1, "", "X", "The input alphabet $mathcal{X} = {0, 1}$ of the BEC channel."], [21, 4, 1, "", "Y", "The output alphabet $mathcal{Y} = {0, 1, e}$ of the BEC channel. Erasures $e$ are represented by -1."], [22, 2, 1, "", "__call__", "Passes the binary input sequence $x$ through the channel."], [23, 2, 1, "", "__init__", "Creates a new binary erasure channel (BEC)."], [24, 2, 1, "", "capacities", "Calculates the capacity of BEC channels."], [25, 4, 1, "", "capacity", "The capacity $C$ of the instantiated channel in bits/channel use."], [26, 4, 1, "", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.BinaryErasureChannel.__call__": [[22, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X} = {0, 1}$."]], "sdr.BinaryErasureChannel.__init__": [[23, 3, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."], [23, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."]], "sdr.BinarySymmetricChannel": [[28, 4, 1, "", "X", "The input alphabet $mathcal{X} = {0, 1}$ of the BSC channel."], [29, 4, 1, "", "Y", "The output alphabet $mathcal{Y} = {0, 1}$ of the BSC channel."], [30, 2, 1, "", "__call__", "Passes the binary input sequence $x$ through the channel."], [31, 2, 1, "", "__init__", "Creates a new binary symmetric channel (BSC)."], [32, 2, 1, "", "capacities", "Calculates the capacity of BSC channels."], [33, 4, 1, "", "capacity", "The capacity $C$ of the instantiated channel in bits/channel use."], [34, 4, 1, "", "p", "The transition probability $p$ of the BSC channel."]], "sdr.BinarySymmetricChannel.__call__": [[30, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X} = {0, 1}$."]], "sdr.BinarySymmetricChannel.__init__": [[31, 3, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."], [31, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."]], "sdr.BlockInterleaver": [[36, 2, 1, "", "__init__", "Creates a $R times C$ block interleaver."]], "sdr.BlockInterleaver.__init__": [[36, 3, 2, "p-cols", "cols", "The number of columns $C$ in the interleaver."], [36, 3, 2, "p-rows", "rows", "The number of rows $R$ in the interleaver. The row size determines the output separation of consecutive input elements."]], "sdr.CPM": [[38, 2, 1, "", "__init__", "Creates a new continuous-phase modulation object."], [39, 2, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [40, 4, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [41, 2, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples $tilde{x}[n]$ into decimal symbol decisions $hat{s}[k]$ using matched filtering and maximum-likelihood estimation."], [42, 4, 1, "", "index", "The modulation index $h$."], [43, 2, 1, "", "modulate", "Modulates the decimal symbols $s[k]$ into pulse-shaped complex samples $x[n]$."], [44, 4, 1, "", "order", "The modulation order $M = 2^k$."], [45, 4, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [46, 4, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the instantaneous frequency of the signal."], [47, 4, 1, "", "rx_filter", "The receive decimating matched filter. The filter coefficients are matched to the pulse shape $h[-n]^*$."], [48, 2, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [49, 4, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [50, 4, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter. The filter coefficients are the pulse shape $h[n]$."]], "sdr.CPM.__init__": [[38, 3, 2, "p-index", "index", "The modulation index $h$. The modulation index is the ratio of the frequency deviation to the symbol rate $h = Delta f / f_{sym}$. The phase change per symbol is $pi h$."], [38, 3, 2, "p-order", "order", "The modulation order $M = 2^k$."], [38, 3, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees."], [38, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the instantaneous frequency of the signal. If a string is passed, the pulse shape is normalized such that the maximum value is 1."], [38, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string."], [38, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."]], "sdr.CPM.ber": [[39, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.CPM.demodulate": [[41, 3, 2, "p-x_tilde", "x_tilde", "The received pulse-shaped complex samples $tilde{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.CPM.modulate": [[43, 3, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.CPM.ser": [[48, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.Channel": [[52, 2, 1, "", "__call__", "Passes the input sequence $x$ through the channel."], [53, 2, 1, "", "__init__", "Creates a new channel."], [54, 2, 1, "", "capacities", "Computes the channel capacity given the channel configuration."], [55, 4, 1, "", "capacity", "The channel capacity $C$ in bits/2D of the instantiated channel."], [56, 2, 1, "", "reset", "Resets the channel with a new seed."]], "sdr.Channel.__call__": [[52, 3, 2, "p-x", "x", "The input sequence $x$."]], "sdr.Channel.__init__": [[53, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."]], "sdr.Channel.reset": [[56, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."]], "sdr.Channelizer": [[58, 2, 1, "", "__call__", "Channelizes the input signal $x[n]$ with the polyphase FIR filter."], [59, 2, 1, "", "__init__", "Creates a polyphase FIR channelizing filter."], [60, 4, 1, "", "channels", "The number of channels $C$."], [61, 4, 1, "", "method", "The method used to design the polyphase channelizing filter."]], "sdr.Channelizer.__call__": [[58, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [58, 3, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Channelizer.__init__": [[59, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB. Only used when taps=\"kaiser\"."], [59, 3, 2, "p-channels", "channels", "The number of channels $C$."], [59, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even. Only used when taps=\"kaiser\"."], [59, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [59, 3, 2, "p-taps", "taps", "The prototype filter design specification."]], "sdr.ClosedLoopPLL": [[63, 4, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [64, 4, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [65, 4, 1, "", "K0", "The NCO gain $K_0$."], [66, 4, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [67, 4, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [68, 4, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [69, 2, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [70, 2, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [71, 4, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [72, 2, 1, "", "lock_time", "Returns the lock time of the PLL."], [73, 4, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [74, 4, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [75, 2, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [76, 2, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [77, 4, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [78, 4, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[69, 3, 2, "p-K0", "K0", "The NCO gain $K_0$."], [69, 3, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [69, 3, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [69, 3, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [69, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[70, 3, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[72, 3, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[75, 3, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.Decimator": [[80, 2, 1, "", "__init__", "Creates a polyphase FIR decimating filter."], [81, 4, 1, "", "method", "The method used to design the polyphase decimating filter."], [82, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."]], "sdr.Decimator.__init__": [[80, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB. Only used when taps=\"kaiser\"."], [80, 3, 2, "p-decimation", "decimation", "The decimation rate $Q$."], [80, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even. Only used when taps=\"kaiser\"."], [80, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [80, 3, 2, "p-taps", "taps", "The prototype filter design specification."]], "sdr.Differentiator": [[84, 2, 1, "", "__init__", "Creates a differentiator FIR filter."]], "sdr.Differentiator.__init__": [[84, 3, 2, "p-order", "order", "The order of the FIR differentiator $N$. The filter length is $N + 1$. Increasing the filter order increases the bandwidth of the differentiator."], [84, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [84, 3, 2, "p-window", "window", "The SciPy window definition. See scipy.signal.windows.get_window() for details. If None, no window is applied."]], "sdr.DiscreteMemorylessChannel": [[86, 4, 1, "", "P", "The transition probability matrix $P$ of the DMC channel."], [87, 4, 1, "", "X", "The input alphabet $mathcal{X}$ of the DMC channel."], [88, 4, 1, "", "Y", "The output alphabet $mathcal{Y}$ of the DMC channel."], [89, 2, 1, "", "__call__", "Passes the input sequence $x$ through the channel."], [90, 2, 1, "", "__init__", "Creates a new discrete memoryless channel (DMC)."]], "sdr.DiscreteMemorylessChannel.__call__": [[89, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.DiscreteMemorylessChannel.__init__": [[90, 3, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P = Pr(Y = y_j | X = x_i)$."], [90, 3, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [90, 3, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [90, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."]], "sdr.EnergyDetector": [[92, 2, 1, "", "p_d", "Computes the probability of detection $P_D$."], [93, 2, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [94, 2, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [95, 2, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.EnergyDetector.p_d": [[92, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [92, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [92, 3, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.p_fa": [[93, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [93, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [93, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [93, 3, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.EnergyDetector.roc": [[94, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [94, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [94, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."], [94, 3, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.threshold": [[95, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [95, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [95, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [95, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.ErrorRate": [[97, 2, 1, "", "__init__", "Creates a new error rate tabulation object."], [98, 2, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [99, 2, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [100, 2, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [101, 2, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [102, 2, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[98, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [98, 3, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [98, 3, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[99, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[100, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[102, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[104, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the FIR filter."], [105, 2, 1, "", "__init__", "Creates an FIR filter."], [106, 2, 1, "", "__len__", "Returns the filter length $N + 1$."], [107, 4, 1, "", "delay", "The delay of the FIR filter $d = lfloor frac{N + 1}{2} rfloor$ in samples."], [108, 2, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [109, 2, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the FIR filter."], [110, 2, 1, "", "group_delay", "Returns the group delay $tau_g(omega)$ of the FIR filter."], [111, 2, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [112, 4, 1, "", "order", "The order of the FIR filter $N$."], [113, 2, 1, "", "phase_delay", "Returns the phase delay $tau_{phi}(omega)$ of the FIR filter."], [114, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [115, 4, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [116, 2, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [117, 4, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [118, 4, 1, "", "taps", "The feedforward taps $h[n]$ with length $N + 1$."]], "sdr.FIR.__call__": [[104, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [104, 3, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.FIR.__init__": [[105, 3, 2, "p-h", "h", "The feedforward coefficients $h[n]$."], [105, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FIR.frequency_response": [[109, 3, 2, "p-decades", "decades", "Only used if freqs is an integer."], [109, 3, 2, "p-freqs", "freqs", "The frequency specification."], [109, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [109, 3, 2, "p-whole", "whole", "Only used if freqs is an integer."]], "sdr.FIR.group_delay": [[110, 3, 2, "p-N", "N", "The number of samples in the group delay."], [110, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[111, 3, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.phase_delay": [[113, 3, 2, "p-N", "N", "The number of samples in the phase delay."], [113, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.step_response": [[116, 3, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FLFSR": [[120, 2, 1, "", "Taps", "Constructs a Fibonacci LFSR from its taps $T = [c_{n-1}, c_{n-2}, dots, c_1, c_0]$."], [121, 2, 1, "", "__init__", "Constructs a Fibonacci LFSR from its feedback polynomial $f(x)$."], [122, 4, 1, "", "characteristic_poly", "The characteristic polynomial $c(x) = x^{n} - c_{n-1} cdot x^{n-1} - c_{n-2} cdot x^{n-2} - dots - c_{1} cdot x - c_{0}$ that defines the linear recurrent sequence."], [123, 4, 1, "", "feedback_poly", "The feedback polynomial $f(x) = -c_{0} cdot x^{n} - c_{1} cdot x^{n-1} - dots - c_{n-2} cdot x^{2} - c_{n-1} cdot x + 1$ that defines the feedback arithmetic."], [124, 4, 1, "", "field", "The FieldArray subclass for the finite field that defines the linear arithmetic."], [125, 4, 1, "", "initial_state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$."], [126, 4, 1, "", "order", "The order of the linear recurrence/linear recurrent sequence. The order of a sequence is defined by the degree of the minimal polynomial that produces it."], [127, 2, 1, "", "reset", "Resets the Fibonacci LFSR state to the specified state."], [128, 4, 1, "", "state", "The current state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$."], [129, 2, 1, "", "step", "Produces the next steps output symbols."], [130, 4, 1, "", "taps", "The shift register taps $T = [c_{n-1}, c_{n-2}, dots, c_1, c_0]$. The taps of the shift register define the linear recurrence relation."], [131, 2, 1, "", "to_galois_lfsr", "Converts the Fibonacci LFSR to a Galois LFSR that produces the same output."]], "sdr.FLFSR.Taps": [[120, 3, 2, "p-state", "state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$. The default is None which corresponds to all ones."], [120, 3, 2, "p-taps", "taps", "The shift register taps $T = [c_{n-1}, c_{n-2}, dots, c_1, c_0]$."]], "sdr.FLFSR.__init__": [[121, 3, 2, "p-feedback_poly", "feedback_poly", "The feedback polynomial $f(x) = -c_{0} cdot x^{n} - c_{1} cdot x^{n-1} - dots - c_{n-2} cdot x^{2} - c_{n-1} cdot x + 1$."], [121, 3, 2, "p-state", "state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$. The default is None which corresponds to all ones."]], "sdr.FLFSR.reset": [[127, 3, 2, "p-state", "state", "The state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$. The default is None which corresponds to the initial state."]], "sdr.FLFSR.step": [[129, 3, 2, "p-steps", "steps", "The direction and number of output symbols to produce. The default is 1. If negative, the Fibonacci LFSR will step backwards."]], "sdr.FarrowResampler": [[133, 2, 1, "", "__call__", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [134, 2, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [135, 4, 1, "", "delay", "The delay $d$ of the Farrow FIR filters in samples. Output sample $d cdot r$, corresponds to the first input sample, where $r$ is the current resampling rate."], [136, 2, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [137, 4, 1, "", "order", "The order of the piecewise polynomial."], [138, 2, 1, "", "reset", "Resets the filter state and fractional sample index."], [139, 4, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [140, 4, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [141, 4, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__call__": [[133, 3, 2, "p-rate", "rate", "The resampling rate $r$."], [133, 3, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.__init__": [[134, 3, 2, "p-order", "order", "The order of the piecewise polynomial. Must be between 1 and 4."], [134, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FarrowResampler.flush": [[136, 3, 2, "p-rate", "rate", "The resampling rate $r$."]], "sdr.FarrowResampler.reset": [[138, 3, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.FractionalDelay": [[143, 2, 1, "", "__init__", "Creates a fractional delay FIR filter."]], "sdr.FractionalDelay.__init__": [[143, 3, 2, "p-delay", "delay", "The fractional delay $0 le Delta n le 1$."], [143, 3, 2, "p-length", "length", "The filter length $L$. Filters with even length have best performance. Filters with odd length are equivalent to an even-length filter with an appended zero."]], "sdr.GLFSR": [[145, 2, 1, "", "Taps", "Constructs a Galois LFSR from its taps $T = [c_0, c_1, dots, c_{n-2}, c_{n-1}]$."], [146, 2, 1, "", "__init__", "Constructs a Galois LFSR from its feedback polynomial $f(x)$."], [147, 4, 1, "", "characteristic_poly", "The characteristic polynomial $c(x) = x^{n} - c_{n-1} cdot x^{n-1} - c_{n-2} cdot x^{n-2} - dots - c_{1} cdot x - c_{0}$ that defines the linear recurrent sequence."], [148, 4, 1, "", "feedback_poly", "The feedback polynomial $f(x) = -c_{0} cdot x^{n} - c_{1} cdot x^{n-1} - dots - c_{n-2} cdot x^{2} - c_{n-1} cdot x + 1$ that defines the feedback arithmetic."], [149, 4, 1, "", "field", "The FieldArray subclass for the finite field that defines the linear arithmetic."], [150, 4, 1, "", "initial_state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$."], [151, 4, 1, "", "order", "The order of the linear recurrence/linear recurrent sequence. The order of a sequence is defined by the degree of the minimal polynomial that produces it."], [152, 2, 1, "", "reset", "Resets the Galois LFSR state to the specified state."], [153, 4, 1, "", "state", "The current state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$."], [154, 2, 1, "", "step", "Produces the next steps output symbols."], [155, 4, 1, "", "taps", "The shift register taps $T = [c_0, c_1, dots, c_{n-2}, c_{n-1}]$. The taps of the shift register define the linear recurrence relation."], [156, 2, 1, "", "to_fibonacci_lfsr", "Converts the Galois LFSR to a Fibonacci LFSR that produces the same output."]], "sdr.GLFSR.Taps": [[145, 3, 2, "p-state", "state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$. The default is None which corresponds to all ones."], [145, 3, 2, "p-taps", "taps", "The shift register taps $T = [c_0, c_1, dots, c_{n-2}, c_{n-1}]$."]], "sdr.GLFSR.__init__": [[146, 3, 2, "p-feedback_poly", "feedback_poly", "The feedback polynomial $f(x) = -c_{0} cdot x^{n} - c_{1} cdot x^{n-1} - dots - c_{n-2} cdot x^{2} - c_{n-1} cdot x + 1$."], [146, 3, 2, "p-state", "state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$. The default is None which corresponds to all ones."]], "sdr.GLFSR.reset": [[152, 3, 2, "p-state", "state", "The state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$. The default is None which corresponds to the initial state."]], "sdr.GLFSR.step": [[154, 3, 2, "p-steps", "steps", "The direction and number of output symbols to produce. The default is 1. If negative, the Galois LFSR will step backwards."]], "sdr.IIR": [[158, 2, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [159, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the IIR filter."], [160, 2, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [161, 4, 1, "", "a_taps", "The feedback taps $a_j$ for $j = 0,...,N$."], [162, 4, 1, "", "b_taps", "The feedforward taps $b_i$ for $i = 0,...,M$."], [163, 2, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the IIR filter."], [164, 4, 1, "", "gain", "The gain of the IIR filter."], [165, 2, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [166, 4, 1, "", "order", "The order of the IIR filter $N$."], [167, 4, 1, "", "poles", "The poles of the IIR filter."], [168, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [169, 4, 1, "", "state", "The filter state."], [170, 2, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [171, 4, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [172, 4, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[158, 3, 2, "p-gain", "gain", "The gain of the transfer function."], [158, 3, 2, "p-poles", "poles", "The poles of the transfer function."], [158, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."], [158, 3, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__call__": [[159, 3, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.IIR.__init__": [[160, 3, 2, "p-a", "a", "The feedback coefficients $a_j$ for $j = 0,...,N$."], [160, 3, 2, "p-b", "b", "The feedforward coefficients $b_i$ for $i = 0,...,M$."], [160, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.IIR.frequency_response": [[163, 3, 2, "p-decades", "decades", "Only used if freqs is an integer."], [163, 3, 2, "p-freqs", "freqs", "The frequency specification."], [163, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [163, 3, 2, "p-whole", "whole", "Only used if freqs is an integer."]], "sdr.IIR.impulse_response": [[165, 3, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[170, 3, 2, "p-N", "N", "The number of samples to return."]], "sdr.Integrator": [[174, 2, 1, "", "__init__", "Creates an integrating IIR filter."]], "sdr.Integrator.__init__": [[174, 3, 2, "p-method", "method", "The integration method."], [174, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.Interleaver": [[176, 2, 1, "", "__init__", "Creates an arbitrary interleaver."], [177, 2, 1, "", "__len__", "The size of the interleaver."], [178, 2, 1, "", "deinterleave", "Deinterleaves the input sequence $y[n]$."], [179, 2, 1, "", "interleave", "Interleaves the input sequence $x[n]$."], [180, 4, 1, "", "inverse_map", "The deinterleaver permutation map $pi^{-1}$."], [181, 4, 1, "", "map", "The interleaver permutation map $pi$."]], "sdr.Interleaver.__init__": [[176, 3, 2, "p-map", "map", "The interleaver permutation map $pi : i mapsto j$, containing the values $[0, N)$. The $i$-th input element will be placed at the $pi(i)$-th output position."]], "sdr.Interleaver.deinterleave": [[178, 3, 2, "p-y", "y", "The input sequence $y[n]$. Length must be a multiple of the interleaver size."]], "sdr.Interleaver.interleave": [[179, 3, 2, "p-x", "x", "The input sequence $x[n]$. Length must be a multiple of the interleaver size."]], "sdr.Interpolator": [[183, 2, 1, "", "__init__", "Creates a polyphase FIR interpolating filter."], [184, 4, 1, "", "method", "The method used to design the polyphase interpolating filter."]], "sdr.Interpolator.__init__": [[183, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB. Only used when taps=\"kaiser\"."], [183, 3, 2, "p-interpolation", "interpolation", "The interpolation rate $P$."], [183, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even. Only used when taps=\"kaiser\"."], [183, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [183, 3, 2, "p-taps", "taps", "The prototype filter design specification."]], "sdr.LeakyIntegrator": [[186, 2, 1, "", "__init__", "Creates a leaky integrator IIR filter."]], "sdr.LeakyIntegrator.__init__": [[186, 3, 2, "p-alpha", "alpha", "The leaky factor $alpha$. An FIR moving average with length $L$ is approximated when $alpha = 1 - 2/L$."], [186, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.LinearModulation": [[188, 2, 1, "", "__init__", "Creates a new linear phase/amplitude modulation object."], [189, 2, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [190, 4, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [191, 2, 1, "", "decide_symbols", "Converts the received complex symbols $tilde{a}[k]$ into decimal symbol decisions $hat{s}[k]$ and complex symbol decisions $hat{a}[k]$ using maximum-likelihood estimation (MLE)."], [192, 2, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples $tilde{x}[n]$ into decimal symbol decisions $hat{s}[k]$ using matched filtering and maximum-likelihood estimation."], [193, 2, 1, "", "map_symbols", "Converts the decimal symbols $s[k]$ to complex symbols $a[k]$."], [194, 2, 1, "", "modulate", "Modulates the decimal symbols $s[k]$ into pulse-shaped complex samples $x[n]$."], [195, 4, 1, "", "order", "The modulation order $M = 2^k$."], [196, 4, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [197, 4, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [198, 4, 1, "", "rx_filter", "The receive decimating matched filter. The filter coefficients are matched to the pulse shape $h[-n]^*$."], [199, 2, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [200, 4, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [201, 4, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."], [202, 4, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter. The filter coefficients are the pulse shape $h[n]$."]], "sdr.LinearModulation.__init__": [[188, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [188, 3, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees to apply to symbol_map."], [188, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [188, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [188, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [188, 3, 2, "p-symbol_map", "symbol_map", "The symbol mapping ${0, dots, M-1} mapsto mathbb{C}$. An $M$-length array whose indices are decimal symbols $s[k]$ and whose values are complex symbols $a[k]$, where $M$ is the modulation order."]], "sdr.LinearModulation.ber": [[189, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.LinearModulation.decide_symbols": [[191, 3, 2, "p-a_tilde", "a_tilde", "The received complex symbols $tilde{a}[k]$."]], "sdr.LinearModulation.demodulate": [[192, 3, 2, "p-x_tilde", "x_tilde", "The received pulse-shaped complex samples $tilde{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.LinearModulation.map_symbols": [[193, 3, 2, "p-s", "s", "The decimal symbols $s[k]$ to map, $0$ to $M-1$."]], "sdr.LinearModulation.modulate": [[194, 3, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.LinearModulation.ser": [[199, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.LoopFilter": [[204, 2, 1, "", "__call__", "Filters the input signal $x[n]$."], [205, 2, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [206, 4, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [207, 4, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [208, 4, 1, "", "integral_gain", "The integral gain $K_2$ of the loop filter."], [209, 4, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [210, 4, 1, "", "proportional_gain", "The proportional gain $K_1$ of the loop filter."], [211, 2, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__call__": [[204, 3, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.LoopFilter.__init__": [[205, 3, 2, "p-K0", "K0", "The NCO gain $K_0$."], [205, 3, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [205, 3, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [205, 3, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.MLPED": [[213, 4, 1, "", "A_received", "(Settable) The received signal RMS amplitude $A_{rx,rms}$."], [214, 4, 1, "", "A_reference", "(Settable) The reference signal RMS amplitude $A_{ref,rms}$."], [215, 2, 1, "", "__call__", "Detects the phase error."], [216, 2, 1, "", "__init__", "Initializes the ML-PED."], [217, 2, 1, "", "data_aided_error", "Simulates the average phase error of the data-aided PED using the specified modulation scheme."], [218, 2, 1, "", "decision_directed_error", "Simulates the average phase error of the decision-directed PED using the specified modulation scheme."], [219, 4, 1, "", "gain", "The gain of the phase error detector $K_p$."]], "sdr.MLPED.__call__": [[215, 3, 2, "p-received", "received", "The received complex symbols $tilde{a}[k]$."], [215, 3, 2, "p-reference", "reference", "The reference complex symbols, either the known transmitted complex symbols $a[k]$ or the complex symbols decisions $hat{a}[k]$."]], "sdr.MLPED.__init__": [[216, 3, 2, "p-A_received", "A_received", "The received signal RMS amplitude $A_{rx,rms}$."], [216, 3, 2, "p-A_reference", "A_reference", "The reference signal RMS amplitude $A_{ref,rms}$."]], "sdr.MLPED.data_aided_error": [[217, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [217, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.MLPED.decision_directed_error": [[218, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [218, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.MSK": [[221, 2, 1, "", "__init__", "Creates a new MSK object."]], "sdr.MSK.__init__": [[221, 3, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [221, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [221, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.MovingAverager": [[223, 2, 1, "", "__init__", "Creates a moving average FIR filter."]], "sdr.MovingAverager.__init__": [[223, 3, 2, "p-length", "length", "The length of the moving average filter $L$."], [223, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.NCO": [[225, 2, 1, "", "__call__", "Steps the NCO with variable frequency and/or phase signals."], [226, 2, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [227, 4, 1, "", "gain", "(Settable) The NCO gain $K_0$."], [228, 4, 1, "", "increment", "(Settable) The constant phase accumulation $omega$ of the NCO in radians/sample."], [229, 4, 1, "", "offset", "(Settable) The absolute phase offset $theta$ of the NCO in radians."], [230, 2, 1, "", "reset", "Resets the NCO."], [231, 2, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__call__": [[225, 3, 2, "p-freq", "freq", "The variable frequency signal $f[n]$ in radians/sample. This input signal varies the per-sample phase increment of the NCO. If None, the signal is all zeros."], [225, 3, 2, "p-output", "output", "The format of the output signal $y[n]$. Options are the accumulated phase, sine, cosine, or complex exponential."], [225, 3, 2, "p-phase", "phase", "The variable phase signal $p[n]$ in radians. This input signal varies the per-sample phase offset of the NCO. If None, the signal is all zeros."]], "sdr.NCO.__init__": [[226, 3, 2, "p-gain", "gain", "The NCO gain $K_0$."], [226, 3, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [226, 3, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.NCO.step": [[231, 3, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.OQPSK": [[233, 2, 1, "", "__init__", "Creates a new OQPSK object."]], "sdr.OQPSK.__init__": [[233, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [233, 3, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [233, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [233, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [233, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [233, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PED": [[235, 2, 1, "", "__call__", "Detects the phase error."], [236, 2, 1, "", "__init__", "Initializes the PED."], [237, 2, 1, "", "data_aided_error", "Simulates the average phase error of the data-aided PED using the specified modulation scheme."], [238, 2, 1, "", "decision_directed_error", "Simulates the average phase error of the decision-directed PED using the specified modulation scheme."], [239, 4, 1, "", "gain", "The gain of the phase error detector $K_p$."]], "sdr.PED.__call__": [[235, 3, 2, "p-received", "received", "The received complex symbols $tilde{a}[k]$."], [235, 3, 2, "p-reference", "reference", "The reference complex symbols, either the known transmitted complex symbols $a[k]$ or the complex symbols decisions $hat{a}[k]$."]], "sdr.PED.data_aided_error": [[237, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [237, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.PED.decision_directed_error": [[238, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [238, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.PSK": [[241, 2, 1, "", "__init__", "Creates a new PSK object."], [242, 2, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [243, 4, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [244, 2, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [245, 4, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[241, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [241, 3, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [241, 3, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [241, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [241, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [241, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [241, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[242, 3, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [242, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.ser": [[244, 3, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [244, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.PiMPSK": [[247, 2, 1, "", "__init__", "Creates a new $pi/M$ PSK object."]], "sdr.PiMPSK.__init__": [[247, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [247, 3, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [247, 3, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [247, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [247, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [247, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [247, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PolyphaseFIR": [[249, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the polyphase FIR filter."], [250, 2, 1, "", "__init__", "Creates a polyphase FIR filter."], [251, 4, 1, "", "branches", "The number of polyphase branches $B$."], [252, 4, 1, "", "decimation", "The integer decimation rate $Q$."], [253, 4, 1, "", "delay", "The delay of polyphase FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [254, 4, 1, "", "input", "The input connection method."], [255, 4, 1, "", "interpolation", "The integer interpolation rate $P$."], [256, 4, 1, "", "order", "The order $N = (M + 1)B - 1$ of the FIR prototype filter $h[n]$."], [257, 4, 1, "", "output", "The output connection method."], [258, 4, 1, "", "polyphase_order", "The order $M = (N + 1)/B - 1$ of each FIR polyphase filter $h_i[n]$."], [259, 4, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_i[n]$."], [260, 4, 1, "", "rate", "The fractional resampling rate $r = P/Q$. The output sample rate is $f_{s,out} = f_{s,in} cdot r$."], [261, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [262, 4, 1, "", "taps", "The prototype feedforward taps $h[n]$."]], "sdr.PolyphaseFIR.__call__": [[249, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [249, 3, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.PolyphaseFIR.__init__": [[250, 3, 2, "p-branches", "branches", "The number of polyphase branches $B$."], [250, 3, 2, "p-input", "input", "The input connection method."], [250, 3, 2, "p-output", "output", "The output connection method."], [250, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [250, 3, 2, "p-taps", "taps", "The prototype filter feedforward coefficients $h[n]$."]], "sdr.Q": [[263, 3, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[264, 3, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.ReplicaCorrelator": [[266, 2, 1, "", "p_d", "Computes the probability of detection $P_D$."], [267, 2, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [268, 2, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [269, 2, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.ReplicaCorrelator.p_d": [[266, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [266, 3, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [266, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."]], "sdr.ReplicaCorrelator.p_fa": [[267, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [267, 3, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [267, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [267, 3, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.ReplicaCorrelator.roc": [[268, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [268, 3, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [268, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."]], "sdr.ReplicaCorrelator.threshold": [[269, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [269, 3, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [269, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [269, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.Resampler": [[271, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the polyphase FIR filter."], [272, 2, 1, "", "__init__", "Creates a polyphase FIR rational resampling filter."], [273, 4, 1, "", "method", "The method used to design the polyphase resampling filter."]], "sdr.Resampler.__call__": [[271, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [271, 3, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Resampler.__init__": [[272, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB. Only used when taps=\"kaiser\"."], [272, 3, 2, "p-decimation", "decimation", "The decimation rate $Q$."], [272, 3, 2, "p-interpolation", "interpolation", "The interpolation rate $P$."], [272, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even. Only used when taps=\"kaiser\"."], [272, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [272, 3, 2, "p-taps", "taps", "The prototype filter design specification."]], "sdr.albersheim": [[274, 3, 2, "p-N_nc", "N_nc", "The number of non-coherent combinations $N_{NC} ge 1$."], [274, 3, 2, "p-p_d", "p_d", "The desired probability of detection $P_D$ in $(0, 1)$."], [274, 3, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{FA}$ in $(0, 1)$."]], "sdr.average_power": [[275, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the average power. The default is None, which computes the average power of the entire array."], [275, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [275, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[276, 3, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [276, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [276, 3, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [276, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[277, 3, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [277, 3, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.barker_code": [[278, 3, 2, "p-length", "length", "The length $N$ of the Barker code/sequence."], [278, 3, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[279, 3, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [279, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [279, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[280, 3, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.berlekamp_massey": [[281, 3, 2, "p-output", "output", "The output object type."], [281, 3, 2, "p-sequence", "sequence", "A linear recurrent sequence $y$ in $mathrm{GF}(p^m)$."]], "sdr.binary_code": [[282, 3, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[283, 3, 2, "p-p", "p", "The probability $p$ of a bit flip."], [283, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [283, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[284, 3, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[285, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.db": [[286, 3, 2, "p-type", "type", "The type of input value or signal."], [286, 3, 2, "p-x", "x", "The input value or signal."]], "sdr.design_bandpass_fir": [[287, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [287, 3, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [287, 3, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [287, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [287, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_bandstop_fir": [[288, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [288, 3, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [288, 3, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [288, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [288, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_frac_delay_fir": [[289, 3, 2, "p-delay", "delay", "The fractional delay $0 le Delta n le 1$."], [289, 3, 2, "p-length", "length", "The filter length $L$. Filters with even length have best performance. Filters with odd length are equivalent to an even-length filter with an appended zero."]], "sdr.design_highpass_fir": [[290, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [290, 3, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [290, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [290, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_lowpass_fir": [[291, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [291, 3, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [291, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [291, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_multirate_fir": [[292, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB."], [292, 3, 2, "p-decimation", "decimation", "The decimation rate $Q$."], [292, 3, 2, "p-interpolation", "interpolation", "The interpolation rate $P$."], [292, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even."]], "sdr.diff_decode": [[293, 3, 2, "p-y", "y", "The input encoded data $y[k]$."], [293, 3, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[294, 3, 2, "p-x", "x", "The input uncoded data $x[k]$."], [294, 3, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[295, 3, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [295, 3, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [295, 3, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [295, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [295, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.downsample": [[296, 3, 2, "p-rate", "rate", "The downsampling factor $r$."], [296, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.ebn0_to_esn0": [[297, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [297, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [297, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[298, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [298, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [298, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [298, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[299, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the energy. The default is None, which computes the energy of the entire array."], [299, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [299, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[300, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [300, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [300, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[301, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [301, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.euclidean": [[302, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the distance. The default is None, which computes the distance across the entire array."], [302, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [302, 3, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.evm": [[303, 3, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [303, 3, 2, "p-output", "output", "The output type of the EVM calculation."], [303, 3, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [303, 3, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.frequency_offset": [[304, 3, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [304, 3, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [304, 3, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [304, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [304, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[305, 3, 2, "p-distance", "distance", "The distance $d$ in meters between the transmitter and receiver."], [305, 3, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[306, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [306, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [306, 3, 2, "p-sps", "sps", "The number of samples per symbol."], [306, 3, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[307, 3, 2, "p-n", "n", "The length of the Gray code."]], "sdr.hadamard_code": [[308, 3, 2, "p-index", "index", "The index $i$ in $[0, N)$ of the Hadamard code."], [308, 3, 2, "p-length", "length", "The length $N$ of the Hadamard code/sequence. Must be a power of 2."], [308, 3, 2, "p-output", "output", "The output format of the Hadamard code/sequence."]], "sdr.half_sine": [[309, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [309, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [309, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.hamming": [[310, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the distance. The default is None, which computes the distance across the entire array."], [310, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [310, 3, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.hexdump": [[311, 3, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [311, 3, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[312, 3, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [312, 3, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [312, 3, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.linear": [[313, 3, 2, "p-type", "type", "The type of output value or signal."], [313, 3, 2, "p-x", "x", "The input value or signal in dB."]], "sdr.m_sequence": [[314, 3, 2, "p-degree", "degree", "The degree $n$ of the LFSR."], [314, 3, 2, "p-index", "index", "The index $i$ in $[1, q^{n})$ of the m-sequence. The index represents the initial state of the LFSR. The index dictates the phase of the m-sequence. The integer index is interpreted as a polynomial over $mathrm{GF}(q)$, whose coefficients are the shift register values. The default is 1, which corresponds to the $[0, dots, 0, 1]$ state."], [314, 3, 2, "p-output", "output", "The output format of the m-sequence."], [314, 3, 2, "p-poly", "poly", "The feedback polynomial of the LFSR over $mathrm{GF}(q)$. Note, the feedback polynomial is the reciprocal of the characteristic polynomial that defines the linear recurrence relation. The default is None which uses the reciprocal primitive polynomial of degree $n$ over $mathrm{GF}(2)$, galois.primitive_poly(2, degree).reverse()."]], "sdr.mix": [[315, 3, 2, "p-complex", "complex", "Indicates whether to mix by a complex exponential or real sinusoid."], [315, 3, 2, "p-freq", "freq", "The frequency $f$ of the sinusoid in Hz (or 1/samples if sample_rate=1). The frequency must satisfy $-f_s/2 le f le f_s/2$."], [315, 3, 2, "p-phase", "phase", "The phase $phi$ of the sinusoid in degrees."], [315, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal."], [315, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.pack": [[316, 3, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [316, 3, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [316, 3, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[317, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the PAPR. The default is None, which computes the PAPR of the entire array."], [317, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[318, 3, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [318, 3, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [318, 3, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[319, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the peak power. The default is None, which computes the peak power of the entire array."], [319, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [319, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[320, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [320, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.percent": [[321, 3, 2, "p-x", "x", "The input ratio."]], "sdr.plot": [[322, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [323, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [324, 5, 1, "", "eye", "Plots the eye diagram of the baseband modulated signal $x[n]$."], [325, 5, 1, "", "filter", "Plots the magnitude response $|H(omega)|^2$, impulse response $h[n]$, and zeros and poles of the filter."], [326, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [327, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [328, 5, 1, "", "magnitude_response", "Plots the magnitude response $|H(omega)|^2$ of the filter."], [329, 5, 1, "", "p_d", "Plots the probability of detection $P_D$ as a function of received SNR or ENR."], [330, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [331, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [332, 5, 1, "", "phase_response", "Plots the phase response $angle H(omega)$ of the filter."], [333, 5, 1, "", "phase_tree", "Plots the phase tree of a continuous-phase modulated (CPM) signal signal $x[n]$."], [334, 5, 1, "", "raster", "Plots a raster of the time-domain signal $x[n]$."], [335, 5, 1, "", "roc", "Plots the receiver operating characteristic (ROC) curve as a function of $P_{FA}$."], [336, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [337, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [338, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [339, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [340, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [341, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [342, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[322, 3, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [322, 3, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."], [322, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."]], "sdr.plot.constellation": [[323, 3, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if persistence=True."], [323, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to Matplotlib functions."], [323, 3, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [323, 3, 2, "p-persistence", "persistence", "Indicates whether to plot the points as a persistence plot. A persistence plot is a 2D histogram of the points."], [323, 3, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.eye": [[324, 3, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [324, 3, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\" or persistence=True."], [324, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [324, 3, 2, "p-persistence", "persistence", "Indicates whether to plot the raster as a persistence plot. A persistence plot is a 2D histogram of the rasters."], [324, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Symbol\"."], [324, 3, 2, "p-span", "span", "The number of symbols per raster."], [324, 3, 2, "p-sps", "sps", "The number of samples per symbol."], [324, 3, 2, "p-x", "x", "The baseband modulated signal $x[n]$. If x is complex, in-phase and quadrature eye diagrams are plotted in separate subplots."]], "sdr.plot.filter": [[325, 3, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [325, 3, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [325, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [325, 3, 2, "p-filter", "filter", "The filter definition."], [325, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [325, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[326, 3, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [326, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [326, 3, 2, "p-filter", "filter", "The filter definition."], [326, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [326, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [326, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.impulse_response": [[327, 3, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [327, 3, 2, "p-filter", "filter", "The filter definition."], [327, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [327, 3, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. Can be useful for comparing the impulse response of filters with different lengths."]], "sdr.plot.magnitude_response": [[328, 3, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [328, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [328, 3, 2, "p-filter", "filter", "The filter definition."], [328, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [328, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [328, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."], [328, 3, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a linear or logarithmic magnitude response."]], "sdr.plot.p_d": [[329, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [329, 3, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [329, 3, 2, "p-x", "x", "The SNR or ENR in dB."], [329, 3, 2, "p-x_label", "x_label", "The x-axis label to use."]], "sdr.plot.periodogram": [[330, 3, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [330, 3, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [330, 3, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [330, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [330, 3, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [330, 3, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [330, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [330, 3, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [330, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [330, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued signals and \"two-sided\" for complex-valued signals."], [330, 3, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a linear or logarithmic power spectral density."]], "sdr.plot.phase_delay": [[331, 3, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [331, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [331, 3, 2, "p-filter", "filter", "The filter definition."], [331, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [331, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [331, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.phase_response": [[332, 3, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [332, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [332, 3, 2, "p-filter", "filter", "The filter definition."], [332, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [332, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [332, 3, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [332, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.phase_tree": [[333, 3, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [333, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [333, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Symbol\"."], [333, 3, 2, "p-span", "span", "The number of symbols per raster."], [333, 3, 2, "p-sps", "sps", "The number of samples per symbol."], [333, 3, 2, "p-x", "x", "The baseband CPM signal $x[n]$."]], "sdr.plot.raster": [[334, 3, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [334, 3, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\" or persistence=True."], [334, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to Matplotlib functions."], [334, 3, 2, "p-length", "length", "The length of each raster in samples. This must be provided if x is 1D."], [334, 3, 2, "p-persistence", "persistence", "Indicates whether to plot the raster as a persistence plot. A persistence plot is a 2D histogram of the rasters."], [334, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [334, 3, 2, "p-stride", "stride", "The stride between each raster in samples. If None, the stride is set to length."], [334, 3, 2, "p-x", "x", "The real time-domain signal $x[n]$. If x is 1D, the rastering is determined by length and stride. If x is 2D, the rows correspond to each raster."]], "sdr.plot.roc": [[335, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to the plotting function defined by type."], [335, 3, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [335, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [335, 3, 2, "p-type", "type", "The type of plot to generate."]], "sdr.plot.ser": [[336, 3, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [336, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."], [336, 3, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.spectrogram": [[337, 3, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [337, 3, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [337, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.pcolormesh(). The following keyword arguments are set by default. The defaults may be overwritten."], [337, 3, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [337, 3, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [337, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [337, 3, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [337, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [337, 3, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a one-sided spectrum or a two-sided spectrum. The default is \"auto\" which selects \"one-sided\" for real-valued signals and \"two-sided\" for complex-valued signals."]], "sdr.plot.step_response": [[338, 3, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [338, 3, 2, "p-filter", "filter", "The filter definition."], [338, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.symbol_map": [[339, 3, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [339, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot(). The following keyword arguments are set by default. The defaults may be overwritten."], [339, 3, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [339, 3, 2, "p-modulation", "modulation", "The linear modulation or symbol map ${0, dots, M-1} mapsto mathbb{C}$."]], "sdr.plot.time_domain": [[340, 3, 2, "p-centered", "centered", "Indicates whether to center the x-axis about 0. This argument is mutually exclusive with offset."], [340, 3, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal. If \"color\", the real and imaginary parts will have different colors based on the current Matplotlib color cycle. If \"line\", the real part will have a solid line and the imaginary part will have a dashed line, and both lines will share the same color."], [340, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [340, 3, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. The units of the offset are $1/f_s$. This argument is mutually exclusive with centered."], [340, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [340, 3, 2, "p-t", "t", "The time signal $t[n]$. The units are assumed to be $1/f_s$."], [340, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[342, 3, 2, "p-filter", "filter", "The filter definition."], [342, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.polyphase_decompose": [[343, 3, 2, "p-branches", "branches", "The number of polyphase branches $B$."], [343, 3, 2, "p-taps", "taps", "The prototype filter feedforward coefficients $h[n]$."]], "sdr.ppb": [[344, 3, 2, "p-x", "x", "The input ratio."]], "sdr.ppm": [[345, 3, 2, "p-x", "x", "The input ratio."]], "sdr.raised_cosine": [[346, 3, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [346, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [346, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [346, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rectangular": [[347, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [347, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [347, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[348, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [348, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[349, 3, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [349, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [349, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [349, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[350, 3, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [350, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.snr_to_ebn0": [[351, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [351, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [351, 3, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [351, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[352, 3, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [352, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.to_complex_bb": [[353, 3, 2, "p-x_r", "x_r", "The real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$. If the length is odd, one zero is appended to the end."]], "sdr.to_real_pb": [[354, 3, 2, "p-x_c", "x_c", "The complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$."]], "sdr.unpack": [[355, 3, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [355, 3, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [355, 3, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.upsample": [[356, 3, 2, "p-rate", "rate", "The upsampling factor $r$."], [356, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.walsh_code": [[357, 3, 2, "p-index", "index", "The index $i$ in $[0, N)$ of the Walsh code. Indicates how many transitions there are in the code."], [357, 3, 2, "p-length", "length", "The length $N$ of the Walsh code/sequence. Must be a power of 2."], [357, 3, 2, "p-output", "output", "The output format of the Walsh code/sequence."]], "sdr.wavelength": [[358, 3, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.zadoff_chu_sequence": [[359, 3, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [359, 3, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence. The root must be relatively prime to the length, i.e., $gcd(u, N) = 1$."], [359, 3, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence. When $q ne 0$, the returned sequence is a cyclic shift of the root-$u$ Zadoff-Chu sequence."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:parameter", "4": "py:property", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "parameter", "Python parameter"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"]}, "titleterms": {"code": [0, 364, 366], "interleav": 0, "convers": 1, "decibel": 1, "ratio": 1, "from": [1, 364, 365, 366], "e_b": 1, "n_0": 1, "e_": 1, "": [1, 368, 369], "n": [1, 367, 368, 369], "data": 2, "manipul": [2, 4], "detect": [3, 8], "detector": [3, 362], "theoret": 3, "limit": 3, "digit": [4, 369], "signal": [4, 361, 367, 370], "process": 4, "fir": [4, 368], "filter": [4, 8, 368, 369, 371], "iir": [4, 369], "polyphas": 4, "applic": 4, "arbitrari": [4, 367], "resampl": [4, 367], "correl": [4, 360], "link": 5, "budget": 5, "channel": [5, 361], "capac": 5, "path": 5, "loss": 5, "antenna": 5, "measur": 6, "energi": 6, "power": [6, 370], "voltag": 6, "distanc": 6, "modul": [6, 7, 8], "linear": [7, 360], "continu": 7, "phase": [7, 362, 371, 372], "orthogon": 7, "puls": [7, 370, 373], "shape": [7, 370, 373], "symbol": [7, 360, 372], "encod": 7, "plot": [8, 370], "configur": [8, 364, 366], "time": [8, 370, 371], "domain": [8, 370, 371], "frequenc": [8, 368, 369, 370, 371], "spectral": 8, "estim": 8, "analysi": 8, "probabl": 9, "constructor": [10, 19, 27, 35, 37, 51, 57, 62, 79, 83, 85, 96, 103, 119, 132, 142, 144, 157, 173, 175, 182, 185, 187, 203, 212, 220, 222, 224, 232, 234, 240, 246, 248, 270], "special": [10, 19, 27, 35, 51, 57, 79, 83, 85, 103, 132, 142, 157, 173, 175, 182, 185, 203, 212, 222, 224, 234, 248, 270], "method": [10, 19, 27, 35, 37, 51, 57, 62, 79, 83, 85, 91, 96, 103, 119, 132, 142, 144, 157, 173, 175, 182, 185, 187, 203, 212, 220, 222, 224, 232, 234, 240, 246, 248, 265, 270], "stream": [10, 57, 79, 83, 103, 132, 142, 157, 173, 182, 185, 222, 248, 270], "mode": [10, 57, 79, 83, 103, 132, 142, 157, 173, 182, 185, 222, 248, 270], "onli": [10, 57, 79, 83, 103, 132, 142, 157, 173, 182, 185, 222, 248, 270], "properti": [10, 19, 27, 35, 37, 51, 57, 62, 79, 83, 85, 103, 119, 132, 142, 144, 157, 173, 175, 182, 185, 187, 203, 212, 220, 222, 224, 232, 234, 240, 246, 248, 270], "note": [37, 62, 187, 220, 232, 240, 246, 305, 330, 337], "see": [38, 39, 48, 96, 98, 109, 110, 111, 113, 116, 119, 121, 144, 146, 163, 165, 170, 188, 189, 199, 221, 233, 241, 242, 244, 247, 263, 264, 285, 317, 356], "also": [38, 39, 48, 96, 98, 109, 110, 111, 113, 116, 119, 121, 144, 146, 163, 165, 170, 188, 189, 199, 221, 233, 241, 242, 244, 247, 263, 264, 285, 317, 356], "polynomi": [119, 144], "state": [119, 144], "warn": [296, 356], "sequenc": 360, "map": [360, 372], "recurr": 360, "maxim": 360, "length": 360, "simul": 361, "model": 361, "impair": 361, "synchron": 362, "lock": [362, 371], "loop": [362, 371], "error": [362, 372], "amplitud": 362, "control": 362, "document": 363, "instal": [363, 364, 365, 366, 374], "build": 363, "doc": 363, "serv": 363, "format": 364, "run": [364, 366], "linter": 364, "formatt": 364, "pre": 364, "commit": 364, "v": [364, 366], "pypi": 365, "github": 365, "edit": 365, "local": 365, "folder": 365, "dev": 365, "depend": 365, "unit": 366, "test": 366, "command": 366, "line": 366, "farrow": 367, "construct": 367, "an": [367, 368, 369], "input": 367, "x": 367, "t_": 367, "rate": [367, 372], "r": 367, "y": 367, "frac": 367, "upsampl": 367, "integ": 367, "downsampl": 367, "irrat": 367, "creat": [368, 369], "examin": [368, 369, 370], "impuls": [368, 369], "respons": [368, 369, 371], "h": [368, 369], "step": [368, 369, 371], "omega": [368, 369], "group": [368, 369], "delai": [368, 369], "tau_g": [368, 369], "fulli": [368, 369], "analyz": [368, 369, 371], "zero": 369, "pole": 369, "stabil": 369, "peak": 370, "averag": 370, "qpsk": [370, 372], "variou": 370, "across": [370, 371], "excess": 370, "bandwidth": 370, "design": 371, "proport": 371, "plu": 371, "integr": 371, "ppi": 371, "implement": 371, "pll": 371, "close": 371, "perform": 371, "compar": 371, "zeta": 371, "b_n": 371, "t": 371, "shift": 372, "kei": 372, "constel": 372, "bpsk": 372, "8": [372, 375], "psk": 372, "16": 372, "curv": 372, "bit": 372, "rais": 373, "cosin": 373, "squar": 373, "root": 373, "gaussian": 373, "sdr": 374, "featur": 374, "v0": 375, "0": 375, "12": 375, "chang": 375, "contributor": 375, "11": 375, "10": 375, "9": 375, "7": 375, "6": 375, "5": 375, "4": 375, "3": 375, "2": 375, "1": 375, "version": 376, "alpha": 376, "releas": 376, "beta": 376}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Coding": [[0, "coding"]], "Interleavers": [[0, "interleavers"]], "Conversions": [[1, "conversions"]], "Decibels": [[1, "decibels"]], "Ratios": [[1, "ratios"]], "From E_b/N_0": [[1, "from-e-b-n-0"]], "From E_s/N_0": [[1, "from-e-s-n-0"]], "From S/N": [[1, "from-s-n"]], "Data manipulation": [[2, "data-manipulation"]], "Detection": [[3, "detection"], [8, "detection"]], "Detectors": [[3, "detectors"]], "Theoretical limits": [[3, "theoretical-limits"]], "Digital signal processing": [[4, "digital-signal-processing"]], "FIR filtering": [[4, "fir-filtering"]], "IIR filtering": [[4, "iir-filtering"]], "Polyphase FIR filtering": [[4, "polyphase-fir-filtering"]], "Filter applications": [[4, "filter-applications"]], "Arbitrary resampling": [[4, "arbitrary-resampling"]], "Correlation": [[4, "correlation"]], "Signal manipulation": [[4, "signal-manipulation"]], "Link budgets": [[5, "link-budgets"]], "Channel capacity": [[5, "channel-capacity"]], "Path losses": [[5, "path-losses"]], "Antennas": [[5, "antennas"]], "Measurement": [[6, "measurement"]], "Energy": [[6, "energy"]], "Power": [[6, "power"]], "Voltage": [[6, "voltage"]], "Distance": [[6, "distance"]], "Modulation": [[6, "modulation"], [7, "modulation"], [8, "modulation"]], "Linear modulations": [[7, "linear-modulations"]], "Continuous-phase modulations": [[7, "continuous-phase-modulations"]], "Orthogonal modulations": [[7, "orthogonal-modulations"]], "Pulse shaping": [[7, "pulse-shaping"]], "Symbol encoding": [[7, "symbol-encoding"]], "Plotting": [[8, "plotting"]], "Configuration": [[8, "configuration"], [364, "configuration"], [366, "configuration"]], "Time-domain": [[8, "time-domain"]], "Frequency-domain": [[8, "frequency-domain"]], "Spectral estimation": [[8, "spectral-estimation"]], "Filter analysis": [[8, "filter-analysis"]], "Probability": [[9, "probability"]], "Constructors": [[10, "constructors"], [19, "constructors"], [27, "constructors"], [35, "constructors"], [37, "constructors"], [51, "constructors"], [57, "constructors"], [62, "constructors"], [79, "constructors"], [83, "constructors"], [85, "constructors"], [96, "constructors"], [103, "constructors"], [119, "constructors"], [132, "constructors"], [142, "constructors"], [144, "constructors"], [157, "constructors"], [173, "constructors"], [175, "constructors"], [182, "constructors"], [185, "constructors"], [187, "constructors"], [203, "constructors"], [212, "constructors"], [220, "constructors"], [222, "constructors"], [224, "constructors"], [232, "constructors"], [234, "constructors"], [240, "constructors"], [246, "constructors"], [248, "constructors"], [270, "constructors"]], "Special methods": [[10, "special-methods"], [19, "special-methods"], [27, "special-methods"], [35, "special-methods"], [51, "special-methods"], [57, "special-methods"], [79, "special-methods"], [83, "special-methods"], [85, "special-methods"], [103, "special-methods"], [132, "special-methods"], [142, "special-methods"], [157, "special-methods"], [173, "special-methods"], [175, "special-methods"], [182, "special-methods"], [185, "special-methods"], [203, "special-methods"], [212, "special-methods"], [222, "special-methods"], [224, "special-methods"], [234, "special-methods"], [248, "special-methods"], [270, "special-methods"]], "Streaming mode only": [[10, "streaming-mode-only"], [57, "streaming-mode-only"], [79, "streaming-mode-only"], [83, "streaming-mode-only"], [103, "streaming-mode-only"], [132, "streaming-mode-only"], [142, "streaming-mode-only"], [157, "streaming-mode-only"], [173, "streaming-mode-only"], [182, "streaming-mode-only"], [185, "streaming-mode-only"], [222, "streaming-mode-only"], [248, "streaming-mode-only"], [270, "streaming-mode-only"]], "Properties": [[10, "properties"], [19, "properties"], [27, "properties"], [35, "properties"], [37, "properties"], [51, "properties"], [57, "properties"], [62, "properties"], [79, "properties"], [83, "properties"], [85, "properties"], [103, "properties"], [119, "properties"], [132, "properties"], [142, "properties"], [144, "properties"], [157, "properties"], [173, "properties"], [175, "properties"], [182, "properties"], [185, "properties"], [187, "properties"], [203, "properties"], [212, "properties"], [220, "properties"], [222, "properties"], [224, "properties"], [232, "properties"], [234, "properties"], [240, "properties"], [246, "properties"], [248, "properties"], [270, "properties"]], "Methods": [[19, "methods"], [27, "methods"], [35, "methods"], [37, "methods"], [51, "methods"], [57, "methods"], [62, "methods"], [79, "methods"], [83, "methods"], [85, "methods"], [91, "methods"], [96, "methods"], [103, "methods"], [119, "methods"], [142, "methods"], [144, "methods"], [157, "methods"], [173, "methods"], [175, "methods"], [182, "methods"], [185, "methods"], [187, "methods"], [203, "methods"], [212, "methods"], [220, "methods"], [222, "methods"], [224, "methods"], [232, "methods"], [234, "methods"], [240, "methods"], [246, "methods"], [248, "methods"], [265, "methods"], [270, "methods"]], "Note": [[37, null], [62, null], [187, null], [220, null], [232, null], [240, null], [246, null], [305, null], [330, null], [337, null]], "See also": [[38, null], [39, null], [48, null], [96, null], [98, null], [109, null], [110, null], [111, null], [113, null], [116, null], [119, null], [121, null], [144, null], [146, null], [163, null], [165, null], [170, null], [188, null], [189, null], [199, null], [221, null], [233, null], [241, null], [242, null], [244, null], [247, null], [263, null], [264, null], [285, null], [317, null], [356, null]], "Polynomials": [[119, "polynomials"], [144, "polynomials"]], "State": [[119, "state"], [144, "state"]], "Warning": [[296, null], [356, null]], "Sequences": [[360, "sequences"]], "Symbol-mapping sequences": [[360, "symbol-mapping-sequences"]], "Correlation sequences": [[360, "correlation-sequences"]], "Linear recurrent sequences": [[360, "linear-recurrent-sequences"]], "Maximal-length sequences": [[360, "maximal-length-sequences"]], "Simulation": [[361, "simulation"]], "Channel models": [[361, "channel-models"]], "Signal impairments": [[361, "signal-impairments"]], "Synchronization": [[362, "synchronization"]], "Phase-locked loops": [[362, "phase-locked-loops"], [371, "phase-locked-loops"]], "Phase error detectors": [[362, "phase-error-detectors"]], "Amplitude control loops": [[362, "amplitude-control-loops"]], "Documentation": [[363, "documentation"]], "Install": [[363, "install"], [364, "install"], [366, "install"]], "Build the docs": [[363, "build-the-docs"]], "Serve the docs": [[363, "serve-the-docs"]], "Formatting": [[364, "formatting"]], "Run the linter": [[364, "run-the-linter"]], "Run the formatter": [[364, "run-the-formatter"]], "Pre-commit": [[364, "pre-commit"]], "Run from VS Code": [[364, "run-from-vs-code"], [366, "run-from-vs-code"]], "Installation": [[365, "installation"], [374, "installation"]], "Install from PyPI": [[365, "install-from-pypi"]], "Install from GitHub": [[365, "install-from-github"]], "Editable install from local folder": [[365, "editable-install-from-local-folder"]], "Install the dev dependencies": [[365, "install-the-dev-dependencies"]], "Unit Tests": [[366, "unit-tests"]], "Run from the command line": [[366, "run-from-the-command-line"]], "Farrow arbitrary resampler": [[367, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[367, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[367, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[367, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[367, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[367, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[367, "downsample-by-an-irrational-rate"]], "FIR filters": [[368, "fir-filters"]], "Create an FIR filter": [[368, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[368, "examine-the-impulse-response-h-n"], [369, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[368, "examine-the-step-response-s-n"], [369, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[368, "examine-the-frequency-response-h-omega"], [369, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[368, "examine-the-group-delay-tau-g-omega"], [369, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[368, "fully-analyze-a-fir-filter"]], "IIR filters": [[369, "iir-filters"]], "Create an IIR filter": [[369, "create-an-iir-filter"]], "Examine the zeros and poles": [[369, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[369, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[369, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[370, "peak-to-average-power"]], "QPSK signal with various pulse shapes": [[370, "qpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[370, "examine-time-domain"]], "Examine frequency domain": [[370, "examine-frequency-domain"]], "Plot across excess bandwidth": [[370, "plot-across-excess-bandwidth"]], "Design a proportional-plus-integrator (PPI) loop filter": [[371, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[371, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[371, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[371, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[371, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[371, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[371, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[372, "phase-shift-keying"]], "Constellations": [[372, "constellations"]], "BPSK": [[372, "bpsk"]], "QPSK": [[372, "qpsk"]], "8-PSK": [[372, "id1"]], "16-PSK": [[372, "id2"]], "Error rate curves": [[372, "error-rate-curves"]], "Bit error rate curves": [[372, "bit-error-rate-curves"]], "Symbol error rate curves": [[372, "symbol-error-rate-curves"]], "Symbol mapping": [[372, "symbol-mapping"]], "Pulse shapes": [[373, "pulse-shapes"]], "Raised cosine": [[373, "raised-cosine"]], "Square-root raised cosine": [[373, "square-root-raised-cosine"]], "Gaussian": [[373, "gaussian"]], "sdr": [[374, "sdr"]], "Features": [[374, "features"]], "v0.0": [[375, "v0-0"]], "v0.0.12": [[375, "v0-0-12"]], "Changes": [[375, "changes"], [375, "id1"], [375, "id3"], [375, "id5"], [375, "id7"], [375, "id9"], [375, "id11"], [375, "id13"], [375, "id15"], [375, "id17"], [375, "id19"], [375, "id21"]], "Contributors": [[375, "contributors"], [375, "id2"], [375, "id4"], [375, "id6"], [375, "id8"], [375, "id10"], [375, "id12"], [375, "id14"], [375, "id16"], [375, "id18"], [375, "id20"], [375, "id22"]], "v0.0.11": [[375, "v0-0-11"]], "v0.0.10": [[375, "v0-0-10"]], "v0.0.9": [[375, "v0-0-9"]], "v0.0.8": [[375, "v0-0-8"]], "v0.0.7": [[375, "v0-0-7"]], "v0.0.6": [[375, "v0-0-6"]], "v0.0.5": [[375, "v0-0-5"]], "v0.0.4": [[375, "v0-0-4"]], "v0.0.3": [[375, "v0-0-3"]], "v0.0.2": [[375, "v0-0-2"]], "v0.0.1": [[375, "v0-0-1"]], "Versioning": [[376, "versioning"]], "Alpha releases": [[376, "alpha-releases"]], "Beta releases": [[376, "beta-releases"]]}, "indexentries": {"module": [[4, "module-sdr"]], "sdr": [[4, "module-sdr"]]}, "docurls": ["api/coding/", "api/conversions/", "api/data-manipulation/", "api/detection/", "api/dsp/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/sdr.AGC/", "api/sdr.AGC.__call__/", "api/sdr.AGC.__init__/", "api/sdr.AGC.attack/", "api/sdr.AGC.decay/", "api/sdr.AGC.gain/", "api/sdr.AGC.reference/", "api/sdr.AGC.reset/", "api/sdr.AGC.streaming/", "api/sdr.BinaryErasureChannel/", "api/sdr.BinaryErasureChannel.X/", "api/sdr.BinaryErasureChannel.Y/", "api/sdr.BinaryErasureChannel.__call__/", "api/sdr.BinaryErasureChannel.__init__/", "api/sdr.BinaryErasureChannel.capacities/", "api/sdr.BinaryErasureChannel.capacity/", "api/sdr.BinaryErasureChannel.p/", "api/sdr.BinarySymmetricChannel/", "api/sdr.BinarySymmetricChannel.X/", "api/sdr.BinarySymmetricChannel.Y/", "api/sdr.BinarySymmetricChannel.__call__/", "api/sdr.BinarySymmetricChannel.__init__/", "api/sdr.BinarySymmetricChannel.capacities/", "api/sdr.BinarySymmetricChannel.capacity/", "api/sdr.BinarySymmetricChannel.p/", "api/sdr.BlockInterleaver/", "api/sdr.BlockInterleaver.__init__/", "api/sdr.CPM/", "api/sdr.CPM.__init__/", "api/sdr.CPM.ber/", "api/sdr.CPM.bps/", "api/sdr.CPM.demodulate/", "api/sdr.CPM.index/", "api/sdr.CPM.modulate/", "api/sdr.CPM.order/", "api/sdr.CPM.phase_offset/", "api/sdr.CPM.pulse_shape/", "api/sdr.CPM.rx_filter/", "api/sdr.CPM.ser/", "api/sdr.CPM.sps/", "api/sdr.CPM.tx_filter/", "api/sdr.Channel/", "api/sdr.Channel.__call__/", "api/sdr.Channel.__init__/", "api/sdr.Channel.capacities/", "api/sdr.Channel.capacity/", "api/sdr.Channel.reset/", "api/sdr.Channelizer/", "api/sdr.Channelizer.__call__/", "api/sdr.Channelizer.__init__/", "api/sdr.Channelizer.channels/", "api/sdr.Channelizer.method/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.Decimator/", "api/sdr.Decimator.__init__/", "api/sdr.Decimator.method/", "api/sdr.Decimator.reset/", "api/sdr.Differentiator/", "api/sdr.Differentiator.__init__/", "api/sdr.DiscreteMemorylessChannel/", "api/sdr.DiscreteMemorylessChannel.P/", "api/sdr.DiscreteMemorylessChannel.X/", "api/sdr.DiscreteMemorylessChannel.Y/", "api/sdr.DiscreteMemorylessChannel.__call__/", "api/sdr.DiscreteMemorylessChannel.__init__/", "api/sdr.EnergyDetector/", "api/sdr.EnergyDetector.p_d/", "api/sdr.EnergyDetector.p_fa/", "api/sdr.EnergyDetector.roc/", "api/sdr.EnergyDetector.threshold/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__call__/", "api/sdr.FIR.__init__/", "api/sdr.FIR.__len__/", "api/sdr.FIR.delay/", "api/sdr.FIR.flush/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.group_delay/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.phase_delay/", "api/sdr.FIR.reset/", "api/sdr.FIR.state/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FLFSR/", "api/sdr.FLFSR.Taps/", "api/sdr.FLFSR.__init__/", "api/sdr.FLFSR.characteristic_poly/", "api/sdr.FLFSR.feedback_poly/", "api/sdr.FLFSR.field/", "api/sdr.FLFSR.initial_state/", "api/sdr.FLFSR.order/", "api/sdr.FLFSR.reset/", "api/sdr.FLFSR.state/", "api/sdr.FLFSR.step/", "api/sdr.FLFSR.taps/", "api/sdr.FLFSR.to_galois_lfsr/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__call__/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.delay/", "api/sdr.FarrowResampler.flush/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.state/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.FractionalDelay/", "api/sdr.FractionalDelay.__init__/", "api/sdr.GLFSR/", "api/sdr.GLFSR.Taps/", "api/sdr.GLFSR.__init__/", "api/sdr.GLFSR.characteristic_poly/", "api/sdr.GLFSR.feedback_poly/", "api/sdr.GLFSR.field/", "api/sdr.GLFSR.initial_state/", "api/sdr.GLFSR.order/", "api/sdr.GLFSR.reset/", "api/sdr.GLFSR.state/", "api/sdr.GLFSR.step/", "api/sdr.GLFSR.taps/", "api/sdr.GLFSR.to_fibonacci_lfsr/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__call__/", "api/sdr.IIR.__init__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.state/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.Integrator/", "api/sdr.Integrator.__init__/", "api/sdr.Interleaver/", "api/sdr.Interleaver.__init__/", "api/sdr.Interleaver.__len__/", "api/sdr.Interleaver.deinterleave/", "api/sdr.Interleaver.interleave/", "api/sdr.Interleaver.inverse_map/", "api/sdr.Interleaver.map/", "api/sdr.Interpolator/", "api/sdr.Interpolator.__init__/", "api/sdr.Interpolator.method/", "api/sdr.LeakyIntegrator/", "api/sdr.LeakyIntegrator.__init__/", "api/sdr.LinearModulation/", "api/sdr.LinearModulation.__init__/", "api/sdr.LinearModulation.ber/", "api/sdr.LinearModulation.bps/", "api/sdr.LinearModulation.decide_symbols/", "api/sdr.LinearModulation.demodulate/", "api/sdr.LinearModulation.map_symbols/", "api/sdr.LinearModulation.modulate/", "api/sdr.LinearModulation.order/", "api/sdr.LinearModulation.phase_offset/", "api/sdr.LinearModulation.pulse_shape/", "api/sdr.LinearModulation.rx_filter/", "api/sdr.LinearModulation.ser/", "api/sdr.LinearModulation.sps/", "api/sdr.LinearModulation.symbol_map/", "api/sdr.LinearModulation.tx_filter/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.__call__/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.integral_gain/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.proportional_gain/", "api/sdr.LoopFilter.reset/", "api/sdr.MLPED/", "api/sdr.MLPED.A_received/", "api/sdr.MLPED.A_reference/", "api/sdr.MLPED.__call__/", "api/sdr.MLPED.__init__/", "api/sdr.MLPED.data_aided_error/", "api/sdr.MLPED.decision_directed_error/", "api/sdr.MLPED.gain/", "api/sdr.MSK/", "api/sdr.MSK.__init__/", "api/sdr.MovingAverager/", "api/sdr.MovingAverager.__init__/", "api/sdr.NCO/", "api/sdr.NCO.__call__/", "api/sdr.NCO.__init__/", "api/sdr.NCO.gain/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.OQPSK/", "api/sdr.OQPSK.__init__/", "api/sdr.PED/", "api/sdr.PED.__call__/", "api/sdr.PED.__init__/", "api/sdr.PED.data_aided_error/", "api/sdr.PED.decision_directed_error/", "api/sdr.PED.gain/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.ber/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.PiMPSK/", "api/sdr.PiMPSK.__init__/", "api/sdr.PolyphaseFIR/", "api/sdr.PolyphaseFIR.__call__/", "api/sdr.PolyphaseFIR.__init__/", "api/sdr.PolyphaseFIR.branches/", "api/sdr.PolyphaseFIR.decimation/", "api/sdr.PolyphaseFIR.delay/", "api/sdr.PolyphaseFIR.input/", "api/sdr.PolyphaseFIR.interpolation/", "api/sdr.PolyphaseFIR.order/", "api/sdr.PolyphaseFIR.output/", "api/sdr.PolyphaseFIR.polyphase_order/", "api/sdr.PolyphaseFIR.polyphase_taps/", "api/sdr.PolyphaseFIR.rate/", "api/sdr.PolyphaseFIR.reset/", "api/sdr.PolyphaseFIR.taps/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.ReplicaCorrelator/", "api/sdr.ReplicaCorrelator.p_d/", "api/sdr.ReplicaCorrelator.p_fa/", "api/sdr.ReplicaCorrelator.roc/", "api/sdr.ReplicaCorrelator.threshold/", "api/sdr.Resampler/", "api/sdr.Resampler.__call__/", "api/sdr.Resampler.__init__/", "api/sdr.Resampler.method/", "api/sdr.albersheim/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.barker_code/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.berlekamp_massey/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.db/", "api/sdr.design_bandpass_fir/", "api/sdr.design_bandstop_fir/", "api/sdr.design_frac_delay_fir/", "api/sdr.design_highpass_fir/", "api/sdr.design_lowpass_fir/", "api/sdr.design_multirate_fir/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.downsample/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.euclidean/", "api/sdr.evm/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.hadamard_code/", "api/sdr.half_sine/", "api/sdr.hamming/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.linear/", "api/sdr.m_sequence/", "api/sdr.mix/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.percent/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.eye/", "api/sdr.plot.filter/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.magnitude_response/", "api/sdr.plot.p_d/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.phase_tree/", "api/sdr.plot.raster/", "api/sdr.plot.roc/", "api/sdr.plot.ser/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.polyphase_decompose/", "api/sdr.ppb/", "api/sdr.ppm/", "api/sdr.raised_cosine/", "api/sdr.rectangular/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.to_complex_bb/", "api/sdr.to_real_pb/", "api/sdr.unpack/", "api/sdr.upsample/", "api/sdr.walsh_code/", "api/sdr.wavelength/", "api/sdr.zadoff_chu_sequence/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/formatting/", "development/installation/", "development/unit-tests/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})