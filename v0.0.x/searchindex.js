Search.setIndex({"titles": ["Conversions", "Data manipulation", "Detection", "Digital signal processing", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "sdr.AGC", "sdr.AGC.__call__", "sdr.AGC.__init__", "sdr.AGC.attack", "sdr.AGC.decay", "sdr.AGC.gain", "sdr.AGC.reference", "sdr.AGC.reset", "sdr.AGC.streaming", "sdr.BinaryErasureChannel", "sdr.BinaryErasureChannel.X", "sdr.BinaryErasureChannel.Y", "sdr.BinaryErasureChannel.__call__", "sdr.BinaryErasureChannel.__init__", "sdr.BinaryErasureChannel.capacities", "sdr.BinaryErasureChannel.capacity", "sdr.BinaryErasureChannel.p", "sdr.BinarySymmetricChannel", "sdr.BinarySymmetricChannel.X", "sdr.BinarySymmetricChannel.Y", "sdr.BinarySymmetricChannel.__call__", "sdr.BinarySymmetricChannel.__init__", "sdr.BinarySymmetricChannel.capacities", "sdr.BinarySymmetricChannel.capacity", "sdr.BinarySymmetricChannel.p", "sdr.CPM", "sdr.CPM.__init__", "sdr.CPM.ber", "sdr.CPM.bps", "sdr.CPM.demodulate", "sdr.CPM.index", "sdr.CPM.modulate", "sdr.CPM.order", "sdr.CPM.phase_offset", "sdr.CPM.pulse_shape", "sdr.CPM.rx_filter", "sdr.CPM.ser", "sdr.CPM.sps", "sdr.CPM.tx_filter", "sdr.Channel", "sdr.Channel.__call__", "sdr.Channel.__init__", "sdr.Channel.capacities", "sdr.Channel.capacity", "sdr.Channel.reset", "sdr.Channelizer", "sdr.Channelizer.__call__", "sdr.Channelizer.__init__", "sdr.Channelizer.channels", "sdr.Channelizer.method", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.Decimator", "sdr.Decimator.__init__", "sdr.Decimator.method", "sdr.Decimator.reset", "sdr.Differentiator", "sdr.Differentiator.__init__", "sdr.DiscreteMemorylessChannel", "sdr.DiscreteMemorylessChannel.P", "sdr.DiscreteMemorylessChannel.X", "sdr.DiscreteMemorylessChannel.Y", "sdr.DiscreteMemorylessChannel.__call__", "sdr.DiscreteMemorylessChannel.__init__", "sdr.EnergyDetector", "sdr.EnergyDetector.p_d", "sdr.EnergyDetector.p_fa", "sdr.EnergyDetector.roc", "sdr.EnergyDetector.threshold", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__call__", "sdr.FIR.__init__", "sdr.FIR.__len__", "sdr.FIR.delay", "sdr.FIR.flush", "sdr.FIR.frequency_response", "sdr.FIR.group_delay", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.phase_delay", "sdr.FIR.reset", "sdr.FIR.state", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__call__", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.delay", "sdr.FarrowResampler.flush", "sdr.FarrowResampler.order", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.state", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.FractionalDelay", "sdr.FractionalDelay.__init__", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__call__", "sdr.IIR.__init__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.frequency_response", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.state", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.Integrator", "sdr.Integrator.__init__", "sdr.Interpolator", "sdr.Interpolator.__init__", "sdr.Interpolator.method", "sdr.LeakyIntegrator", "sdr.LeakyIntegrator.__init__", "sdr.LinearModulation", "sdr.LinearModulation.__init__", "sdr.LinearModulation.ber", "sdr.LinearModulation.bps", "sdr.LinearModulation.decide_symbols", "sdr.LinearModulation.demodulate", "sdr.LinearModulation.map_symbols", "sdr.LinearModulation.modulate", "sdr.LinearModulation.order", "sdr.LinearModulation.phase_offset", "sdr.LinearModulation.pulse_shape", "sdr.LinearModulation.rx_filter", "sdr.LinearModulation.ser", "sdr.LinearModulation.sps", "sdr.LinearModulation.symbol_map", "sdr.LinearModulation.tx_filter", "sdr.LoopFilter", "sdr.LoopFilter.__call__", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.iir", "sdr.LoopFilter.integral_gain", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.proportional_gain", "sdr.LoopFilter.reset", "sdr.MLPED", "sdr.MLPED.A_received", "sdr.MLPED.A_reference", "sdr.MLPED.__call__", "sdr.MLPED.__init__", "sdr.MLPED.data_aided_error", "sdr.MLPED.decision_directed_error", "sdr.MLPED.gain", "sdr.MSK", "sdr.MSK.__init__", "sdr.MovingAverager", "sdr.MovingAverager.__init__", "sdr.NCO", "sdr.NCO.__call__", "sdr.NCO.__init__", "sdr.NCO.gain", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.reset", "sdr.NCO.step", "sdr.OQPSK", "sdr.OQPSK.__init__", "sdr.PED", "sdr.PED.__call__", "sdr.PED.__init__", "sdr.PED.data_aided_error", "sdr.PED.decision_directed_error", "sdr.PED.gain", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.ber", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.PiMPSK", "sdr.PiMPSK.__init__", "sdr.PolyphaseFIR", "sdr.PolyphaseFIR.__call__", "sdr.PolyphaseFIR.__init__", "sdr.PolyphaseFIR.branches", "sdr.PolyphaseFIR.decimation", "sdr.PolyphaseFIR.delay", "sdr.PolyphaseFIR.input", "sdr.PolyphaseFIR.interpolation", "sdr.PolyphaseFIR.order", "sdr.PolyphaseFIR.output", "sdr.PolyphaseFIR.polyphase_order", "sdr.PolyphaseFIR.polyphase_taps", "sdr.PolyphaseFIR.rate", "sdr.PolyphaseFIR.reset", "sdr.PolyphaseFIR.taps", "sdr.Q", "sdr.Qinv", "sdr.ReplicaCorrelator", "sdr.ReplicaCorrelator.p_d", "sdr.ReplicaCorrelator.p_fa", "sdr.ReplicaCorrelator.roc", "sdr.ReplicaCorrelator.threshold", "sdr.Resampler", "sdr.Resampler.__call__", "sdr.Resampler.__init__", "sdr.Resampler.method", "sdr.albersheim", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.barker", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.db", "sdr.design_bandpass_fir", "sdr.design_bandstop_fir", "sdr.design_frac_delay_fir", "sdr.design_highpass_fir", "sdr.design_lowpass_fir", "sdr.design_multirate_fir", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.downsample", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.euclidean", "sdr.evm", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.hadamard", "sdr.half_sine", "sdr.hamming", "sdr.hexdump", "sdr.iq_imbalance", "sdr.linear", "sdr.mix", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.percent", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.eye", "sdr.plot.filter", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.magnitude_response", "sdr.plot.p_d", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.phase_tree", "sdr.plot.raster", "sdr.plot.roc", "sdr.plot.ser", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.polyphase_decompose", "sdr.ppb", "sdr.ppm", "sdr.raised_cosine", "sdr.rectangular", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.to_complex_bb", "sdr.to_real_pb", "sdr.unpack", "sdr.upsample", "sdr.walsh", "sdr.wavelength", "sdr.zadoff_chu", "Sequences", "Simulation", "Synchronization", "Documentation", "Formatting", "Installation", "Unit Tests", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338], "db": [0, 4, 5, 36, 45, 54, 56, 59, 70, 72, 77, 89, 91, 93, 95, 96, 97, 99, 144, 147, 153, 163, 184, 196, 204, 206, 208, 210, 230, 232, 236, 238, 239, 240, 241, 249, 250, 251, 252, 253, 254, 255, 260, 261, 262, 263, 264, 266, 268, 269, 275, 276, 279, 280, 281, 282, 284, 285, 291, 298, 310, 313, 314, 332, 334, 335, 337], "x": [0, 1, 3, 5, 6, 7, 8, 9, 10, 18, 19, 21, 26, 27, 29, 34, 38, 40, 48, 49, 54, 55, 59, 76, 80, 82, 84, 86, 87, 88, 93, 95, 100, 101, 116, 117, 126, 128, 130, 144, 145, 146, 149, 151, 156, 158, 167, 168, 184, 186, 196, 204, 210, 212, 213, 214, 218, 227, 228, 229, 234, 235, 239, 240, 243, 246, 248, 249, 256, 257, 258, 259, 262, 265, 266, 267, 273, 275, 276, 277, 278, 279, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 301, 302, 306, 307, 310, 312, 317, 318, 323, 327, 332, 333, 334, 337, 338], "arraylik": [0, 1, 2, 3, 4, 5, 6, 7, 8, 18, 23, 26, 31, 34, 35, 36, 38, 40, 45, 54, 55, 56, 76, 77, 80, 82, 87, 88, 89, 90, 91, 92, 93, 95, 100, 101, 102, 116, 122, 126, 128, 129, 130, 131, 144, 146, 147, 149, 151, 152, 153, 155, 156, 157, 158, 163, 176, 179, 184, 185, 186, 196, 197, 204, 205, 206, 208, 210, 211, 212, 213, 214, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 241, 243, 244, 246, 247, 249, 250, 251, 253, 254, 256, 257, 258, 260, 261, 262, 263, 264, 266, 267, 268, 274, 276, 278, 280, 283, 287, 288, 289, 290, 291, 292, 293, 294, 297, 299, 300, 304, 305, 306, 307, 313, 314, 317, 320, 323], "ndarrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 18, 19, 20, 21, 23, 26, 27, 28, 29, 31, 34, 36, 38, 40, 43, 45, 48, 49, 51, 54, 55, 76, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 98, 100, 101, 105, 106, 107, 108, 110, 112, 113, 115, 116, 117, 120, 123, 125, 126, 128, 130, 132, 133, 134, 136, 138, 140, 141, 143, 144, 146, 149, 151, 153, 155, 156, 157, 158, 161, 163, 165, 167, 168, 176, 179, 181, 182, 184, 186, 188, 189, 195, 196, 198, 199, 201, 202, 204, 206, 208, 209, 210, 212, 213, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 295, 296, 298, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323], "float_": [0, 2, 3, 4, 5, 6, 7, 8, 18, 23, 26, 31, 82, 83, 88, 89, 90, 91, 92, 93, 98, 151, 153, 161, 163, 176, 181, 182, 184, 196, 198, 199, 201, 202, 204, 206, 208, 210, 227, 228, 229, 230, 231, 232, 233, 238, 241, 244, 247, 249, 250, 251, 252, 253, 254, 255, 260, 261, 262, 263, 264, 268, 269, 272, 276, 280, 283, 284, 298, 306, 307, 308, 309, 311, 313, 314, 315, 316, 320], "convert": [0, 3, 151, 155, 157, 184, 196, 204, 210, 249, 260, 261, 263, 264, 274, 276, 283, 306, 307, 313, 314, 315, 316], "linear": [0, 9, 14, 16, 54, 80, 116, 146, 147, 148, 151, 152, 181, 182, 184, 196, 201, 202, 204, 210, 234, 236, 237, 240, 249, 276, 290, 292, 297, 299, 301, 336, 337], "unit": [0, 54, 76, 80, 100, 113, 126, 128, 141, 144, 146, 149, 167, 185, 186, 188, 197, 205, 211, 212, 234, 240, 241, 249, 256, 257, 276, 300, 302, 327, 330, 331, 333, 336, 337], "percent": [0, 283, 337], "percentag": [0, 283], "ppm": [0, 307, 312, 323, 337], "part": [0, 302, 306, 307, 312, 333], "per": [0, 1, 34, 35, 37, 38, 39, 40, 46, 55, 101, 151, 152, 154, 156, 158, 164, 184, 185, 189, 196, 197, 204, 205, 210, 211, 213, 235, 240, 241, 260, 261, 263, 264, 267, 269, 272, 274, 278, 285, 286, 295, 306, 307, 308, 309, 311, 312, 313, 314, 317, 326, 332, 335, 337], "million": [0, 307, 312], "ppb": [0, 306, 337], "billion": [0, 306], "ebn0_to_esn0": [0, 45, 163, 208, 260, 334, 337], "ebn0": [0, 7, 34, 36, 151, 153, 184, 196, 204, 206, 210, 241, 260, 261, 284, 334], "bp": [0, 34, 37, 151, 154, 184, 196, 204, 210, 260, 261, 263, 313, 334], "int": [0, 1, 3, 6, 7, 18, 21, 22, 26, 29, 30, 34, 35, 37, 41, 46, 48, 50, 53, 54, 56, 76, 77, 80, 81, 82, 86, 87, 93, 95, 96, 99, 100, 103, 104, 106, 107, 108, 109, 110, 113, 116, 118, 119, 121, 126, 127, 128, 134, 136, 137, 141, 144, 146, 147, 149, 151, 152, 154, 159, 164, 181, 182, 184, 185, 186, 187, 188, 195, 196, 197, 201, 202, 204, 205, 210, 211, 212, 214, 215, 216, 217, 219, 220, 222, 234, 236, 239, 240, 242, 243, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 269, 270, 271, 272, 273, 274, 278, 279, 281, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 299, 300, 305, 308, 309, 311, 313, 314, 317, 318, 319, 321, 322, 334], "ebn0_to_snr": [0, 184, 196, 204, 210, 261, 337], "esn0_to_ebn0": [0, 36, 153, 206, 263, 337], "esn0": [0, 7, 34, 45, 151, 163, 184, 196, 204, 208, 210, 263, 264, 298, 334], "esn0_to_snr": [0, 264, 334, 337], "sp": [0, 6, 7, 34, 35, 38, 40, 46, 151, 152, 156, 158, 164, 184, 185, 196, 197, 204, 205, 210, 211, 261, 264, 269, 272, 286, 295, 302, 308, 309, 311, 313, 314, 315, 316, 332, 334, 335], "1": [0, 3, 6, 8, 9, 11, 12, 13, 16, 18, 19, 20, 21, 26, 27, 28, 29, 35, 38, 40, 54, 56, 59, 66, 69, 73, 75, 76, 77, 80, 81, 82, 87, 88, 89, 91, 92, 93, 100, 103, 104, 106, 107, 110, 115, 116, 118, 126, 127, 128, 129, 134, 144, 145, 146, 147, 149, 150, 151, 152, 155, 156, 157, 158, 165, 167, 169, 170, 176, 180, 184, 185, 186, 188, 190, 196, 197, 198, 204, 205, 206, 207, 208, 209, 210, 211, 212, 220, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 338], "snr_to_ebn0": [0, 36, 153, 206, 241, 313, 337], "snr": [0, 2, 4, 7, 88, 89, 91, 93, 95, 96, 97, 98, 99, 184, 196, 204, 210, 238, 240, 241, 291, 313, 314, 315, 316, 323, 334, 337], "snr_to_esn0": [0, 45, 163, 208, 314, 337], "pack": [1, 93, 95, 184, 196, 204, 210, 274, 278, 336, 337], "bpe": [1, 278, 317], "int_": [1, 5, 6, 18, 19, 20, 26, 27, 28, 34, 38, 82, 84, 85, 151, 155, 156, 184, 196, 204, 210, 243, 245, 246, 256, 257, 258, 270, 273, 278, 317, 323], "binari": [1, 4, 6, 18, 21, 22, 26, 29, 30, 82, 185, 197, 205, 209, 211, 242, 243, 244, 245, 246, 247, 258, 271, 278, 301, 317, 319, 323, 334, 336, 337], "arrai": [1, 18, 26, 55, 82, 93, 106, 134, 147, 152, 184, 185, 188, 196, 197, 204, 205, 209, 210, 211, 220, 222, 223, 226, 236, 239, 242, 243, 245, 246, 256, 257, 258, 262, 265, 270, 271, 273, 278, 279, 281, 302, 305, 317, 319, 331, 333], "an": [1, 2, 3, 4, 9, 11, 26, 54, 76, 80, 88, 100, 102, 106, 108, 126, 127, 128, 129, 131, 134, 136, 144, 145, 146, 149, 150, 152, 185, 186, 188, 197, 205, 206, 208, 211, 212, 229, 234, 241, 252, 278, 284, 289, 298, 302, 317, 320, 324, 327, 333, 336, 337], "multipl": [1, 106, 134, 278, 317, 334, 337], "bit": [1, 5, 7, 18, 23, 24, 26, 31, 32, 34, 36, 37, 48, 51, 52, 82, 93, 95, 98, 151, 153, 154, 184, 185, 196, 197, 204, 205, 206, 209, 210, 211, 241, 243, 244, 246, 247, 260, 261, 263, 274, 278, 284, 313, 317, 336, 337], "element": [1, 274, 278, 317, 333], "unpack": [1, 93, 95, 274, 317, 334, 336, 337], "hexdump": [1, 93, 274, 336, 337], "byte": [1, 274], "width": [1, 126, 252, 274], "16": [1, 116, 126, 184, 196, 204, 206, 208, 209, 210, 252, 260, 261, 263, 271, 274, 284, 298, 305, 308, 311, 313, 314, 319, 332, 337], "str": [1, 81, 274, 286, 292, 295, 296, 299], "return": [1, 6, 10, 21, 23, 29, 31, 36, 38, 40, 45, 49, 51, 54, 55, 59, 67, 69, 72, 73, 76, 80, 86, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 105, 106, 107, 108, 110, 113, 117, 120, 126, 128, 130, 134, 136, 141, 144, 146, 149, 153, 155, 156, 157, 158, 163, 168, 179, 181, 182, 186, 189, 195, 199, 201, 202, 206, 208, 212, 213, 227, 228, 230, 231, 232, 233, 234, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 330, 331, 332, 334, 337], "specifi": [1, 93, 96, 97, 99, 176, 181, 182, 198, 201, 202, 240, 241, 258, 274, 325, 330, 331, 337], "class": [2, 3, 5, 6, 9, 18, 26, 34, 48, 54, 59, 76, 80, 82, 88, 93, 95, 96, 97, 98, 99, 100, 116, 126, 128, 144, 146, 149, 151, 167, 176, 184, 186, 188, 196, 198, 204, 210, 212, 229, 234, 323, 324, 330, 331, 334, 336, 337], "replicacorrel": [2, 229, 230, 231, 232, 233, 337], "implement": [2, 3, 6, 9, 18, 26, 34, 54, 76, 80, 82, 88, 100, 116, 126, 128, 144, 146, 149, 151, 167, 171, 176, 184, 186, 188, 196, 198, 204, 210, 212, 229, 234, 238, 323, 324, 329], "clairvoy": [2, 229], "replica": [2, 229], "correl": [2, 229, 242, 271, 319, 321], "energydetector": [2, 88, 89, 90, 91, 92, 337], "energi": [2, 36, 45, 88, 153, 163, 206, 208, 229, 230, 231, 232, 233, 241, 260, 261, 262, 263, 264, 269, 272, 284, 298, 308, 309, 311, 313, 314, 336, 337], "albersheim": [2, 238, 337], "p_d": [2, 7, 88, 89, 91, 229, 230, 232, 238, 291, 297, 337], "p_fa": [2, 7, 88, 89, 90, 91, 92, 229, 230, 231, 232, 233, 238, 297], "estim": [2, 34, 38, 59, 151, 155, 156, 184, 196, 204, 210, 238, 292, 299, 333], "minimum": [2, 6, 184, 238, 337], "requir": [2, 55, 101, 213, 235, 238, 325, 326, 327, 328, 337], "singl": [2, 91, 106, 134, 206, 208, 238, 286, 333], "sampl": [2, 3, 11, 12, 13, 34, 35, 38, 40, 46, 54, 55, 59, 66, 74, 76, 80, 89, 90, 91, 92, 100, 101, 104, 106, 107, 108, 110, 113, 116, 119, 122, 126, 134, 136, 141, 146, 147, 151, 152, 156, 158, 164, 167, 169, 173, 184, 185, 186, 188, 189, 190, 192, 195, 196, 197, 204, 205, 210, 211, 212, 213, 217, 224, 234, 235, 236, 238, 240, 259, 261, 264, 267, 269, 272, 277, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 299, 300, 302, 308, 309, 311, 312, 313, 314, 315, 316, 318, 323, 329, 332, 333, 335, 336, 337], "given": [2, 48, 51, 82, 88, 93, 95, 96, 97, 99, 116, 117, 212, 223, 226, 229, 238, 266, 330, 331], "n_": [2, 89, 90, 91, 92, 238], "nc": [2, 89, 90, 91, 92, 238], "non": [2, 55, 89, 90, 91, 92, 101, 213, 235, 238, 272, 302, 309], "coher": [2, 89, 90, 91, 92, 238], "combin": [2, 238], "achiev": [2, 238, 334, 335], "probabl": [2, 7, 18, 22, 25, 26, 30, 33, 82, 83, 87, 88, 89, 90, 91, 92, 227, 228, 229, 230, 231, 232, 233, 238, 243, 244, 246, 247, 258, 286, 291, 297, 323, 337], "fals": [2, 5, 11, 54, 56, 76, 77, 81, 88, 89, 90, 91, 92, 100, 102, 106, 116, 118, 128, 129, 131, 134, 145, 146, 147, 149, 150, 184, 186, 187, 196, 204, 206, 208, 210, 214, 229, 230, 231, 232, 233, 234, 236, 238, 239, 243, 246, 258, 262, 277, 281, 282, 285, 286, 292, 296, 297, 299, 302, 310, 331, 335], "alarm": [2, 88, 89, 90, 91, 92, 229, 230, 231, 232, 233, 238, 297], "p_": [2, 7, 88, 89, 90, 91, 92, 206, 208, 229, 230, 231, 232, 233, 238, 239, 240, 249, 258, 266, 276, 279, 281, 284, 292, 297, 298], "fa": [2, 7, 88, 89, 90, 91, 92, 229, 230, 231, 232, 233, 238, 297], "thi": [2, 18, 22, 26, 30, 35, 50, 53, 59, 76, 87, 95, 96, 97, 99, 100, 128, 146, 147, 151, 152, 165, 176, 184, 189, 196, 197, 204, 205, 209, 210, 211, 234, 236, 238, 240, 241, 243, 246, 258, 259, 266, 268, 271, 285, 286, 292, 296, 299, 302, 318, 319, 325, 327, 328, 329, 331, 333, 334, 335], "function": [2, 7, 8, 59, 68, 80, 100, 126, 128, 129, 149, 167, 188, 227, 228, 238, 241, 259, 269, 271, 284, 285, 286, 291, 292, 296, 297, 298, 299, 308, 311, 318, 319, 330, 331, 333, 335, 336, 337], "": [2, 3, 7, 34, 38, 40, 54, 59, 67, 69, 70, 71, 73, 74, 76, 80, 88, 95, 96, 97, 98, 99, 100, 106, 107, 110, 113, 126, 128, 134, 141, 144, 146, 149, 151, 152, 155, 156, 157, 158, 176, 184, 186, 196, 204, 210, 212, 224, 229, 231, 233, 234, 238, 240, 241, 261, 264, 266, 267, 275, 285, 286, 287, 288, 290, 292, 293, 294, 295, 296, 299, 300, 302, 303, 312, 313, 314, 315, 316, 328, 329, 332, 334, 336, 337], "equat": [2, 67, 69, 70, 71, 72, 73, 89, 90, 92, 128, 149, 196, 204, 210, 230, 231, 233, 238, 268], "finit": [3, 100, 336, 337], "impuls": [3, 7, 54, 76, 80, 100, 108, 126, 128, 136, 144, 146, 149, 186, 212, 234, 250, 251, 252, 253, 254, 255, 269, 287, 289, 308, 311, 335, 336, 337], "respons": [3, 7, 54, 76, 80, 100, 106, 108, 113, 126, 128, 134, 136, 141, 144, 146, 149, 186, 212, 234, 250, 251, 252, 253, 254, 255, 269, 286, 287, 288, 289, 290, 294, 300, 308, 311, 335, 336, 337], "design_lowpass_fir": [3, 106, 254, 337], "order": [3, 34, 35, 41, 54, 55, 56, 59, 76, 77, 80, 81, 93, 98, 100, 101, 109, 116, 118, 121, 126, 128, 137, 144, 146, 147, 149, 151, 152, 159, 167, 169, 184, 186, 196, 204, 205, 210, 211, 212, 213, 220, 222, 234, 235, 236, 240, 250, 251, 253, 254, 255, 260, 261, 263, 266, 267, 269, 285, 286, 295, 308, 311, 312, 313, 324, 331, 332, 333, 334, 337], "design": [3, 35, 54, 56, 58, 76, 77, 78, 126, 146, 147, 148, 152, 197, 205, 211, 234, 236, 237, 250, 251, 252, 253, 254, 255, 325, 336, 337], "lowpass": [3, 254], "h": [3, 7, 34, 35, 39, 43, 44, 47, 54, 56, 76, 77, 80, 88, 100, 102, 106, 108, 115, 126, 128, 134, 136, 144, 146, 147, 149, 151, 152, 161, 162, 166, 167, 184, 186, 196, 197, 204, 205, 210, 211, 212, 214, 220, 223, 226, 229, 234, 236, 250, 251, 252, 253, 254, 255, 269, 287, 289, 290, 294, 305, 308, 311, 332, 333, 335], "n": [3, 5, 6, 7, 8, 9, 10, 34, 35, 38, 40, 43, 44, 47, 54, 55, 56, 59, 76, 77, 80, 81, 87, 88, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 115, 116, 117, 120, 123, 126, 127, 128, 130, 131, 132, 136, 137, 141, 144, 145, 146, 147, 149, 151, 152, 156, 158, 161, 162, 166, 167, 168, 184, 186, 188, 189, 195, 196, 197, 204, 205, 210, 211, 212, 213, 214, 218, 220, 221, 222, 223, 226, 227, 228, 229, 231, 233, 234, 235, 236, 239, 240, 241, 242, 245, 248, 250, 251, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 270, 271, 273, 275, 277, 279, 281, 282, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 299, 300, 302, 305, 310, 312, 313, 314, 315, 316, 318, 319, 321, 322, 323, 333, 335, 336], "us": [3, 7, 9, 16, 18, 23, 24, 26, 31, 32, 34, 35, 38, 54, 56, 58, 76, 77, 78, 79, 80, 81, 82, 100, 102, 105, 106, 111, 116, 118, 120, 126, 128, 129, 131, 134, 139, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 167, 171, 176, 181, 182, 184, 186, 187, 196, 197, 198, 201, 202, 204, 205, 210, 211, 212, 214, 218, 221, 225, 234, 236, 237, 241, 244, 247, 250, 251, 252, 253, 254, 255, 266, 271, 274, 278, 285, 286, 287, 289, 291, 292, 299, 300, 303, 317, 319, 325, 326, 327, 328, 330, 331, 333, 334, 335, 336, 337, 338], "window": [3, 76, 80, 81, 106, 146, 234, 250, 251, 252, 253, 254, 255, 292, 299, 337], "method": [3, 7, 58, 78, 145, 147, 148, 214, 218, 221, 236, 237, 250, 251, 252, 253, 254, 255, 292, 299, 330, 331, 337], "design_highpass_fir": [3, 253, 337], "highpass": [3, 253], "design_bandpass_fir": [3, 250, 337], "bandpass": [3, 250], "design_bandstop_fir": [3, 251, 337], "bandstop": [3, 251], "infinit": [3, 128, 144, 336, 337], "polyphasefir": [3, 54, 76, 146, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 234, 337], "gener": [3, 6, 22, 30, 50, 53, 87, 184, 196, 204, 210, 212, 240, 243, 245, 246, 258, 270, 297, 325, 334, 337], "interpol": [3, 34, 47, 54, 76, 116, 146, 147, 148, 151, 166, 184, 196, 204, 210, 212, 214, 218, 219, 221, 234, 236, 255, 318, 332, 334, 336, 337], "decim": [3, 34, 38, 40, 44, 54, 76, 77, 78, 79, 146, 151, 152, 155, 156, 157, 158, 162, 165, 184, 185, 196, 197, 204, 205, 209, 210, 211, 212, 214, 216, 218, 221, 234, 236, 255, 259, 334, 336, 337], "ration": [3, 234, 236, 255, 337], "channel": [3, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 82, 83, 84, 85, 86, 87, 184, 196, 206, 208, 212, 214, 221, 241, 243, 244, 246, 247, 258, 284, 298, 336, 337], "design_multirate_fir": [3, 56, 77, 147, 236, 255, 337], "multir": [3, 54, 55, 76, 146, 234, 255, 305, 337], "kaiser": [3, 54, 56, 58, 76, 77, 78, 146, 147, 148, 234, 236, 237, 250, 251, 252, 253, 254, 255, 337], "polyphase_decompos": [3, 305, 337], "branch": [3, 54, 76, 146, 212, 214, 215, 223, 226, 234, 305, 326, 327], "tap": [3, 54, 56, 76, 77, 80, 100, 115, 116, 125, 126, 128, 132, 133, 144, 146, 147, 149, 186, 212, 214, 220, 222, 223, 226, 234, 236, 305, 330, 331], "decompos": [3, 54, 76, 146, 234, 305], "prototyp": [3, 54, 56, 76, 77, 146, 147, 212, 213, 214, 220, 223, 226, 234, 235, 236, 305, 337], "matrix": [3, 82, 83, 87, 258, 305, 323], "h_i": [3, 54, 76, 146, 212, 222, 223, 226, 234, 305, 330], "b": [3, 54, 76, 128, 131, 146, 212, 214, 215, 220, 222, 223, 226, 234, 238, 241, 269, 274, 287, 289, 300, 305, 325, 326, 331, 335], "phase": [3, 7, 34, 35, 39, 42, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 80, 100, 110, 126, 146, 151, 152, 160, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 179, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 234, 238, 267, 275, 277, 286, 293, 294, 295, 305, 323, 336, 337], "movingaverag": [3, 149, 186, 187, 337], "move": [3, 149, 150, 186, 187, 336, 337], "averag": [3, 5, 93, 149, 150, 176, 181, 182, 184, 186, 187, 196, 198, 201, 202, 210, 239, 240, 241, 266, 279, 292, 336, 337], "differenti": [3, 6, 80, 81, 184, 206, 208, 256, 257, 302, 336, 337], "integr": [3, 59, 64, 89, 90, 91, 92, 144, 145, 149, 150, 167, 169, 172, 186, 238, 324, 328, 331, 336, 337], "leakyintegr": [3, 149, 150, 186, 337], "leaki": [3, 149, 150, 186, 336, 337], "farrowresampl": [3, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 329, 337], "piecewis": [3, 116, 118, 121], "polynomi": [3, 116, 118, 121, 337], "farrow": [3, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 336, 337], "fractionaldelai": [3, 126, 127, 337], "fraction": [3, 54, 76, 116, 122, 126, 127, 146, 212, 224, 234, 252, 269, 329, 336, 337], "delai": [3, 7, 54, 55, 76, 80, 100, 101, 104, 107, 110, 116, 119, 126, 127, 146, 167, 186, 188, 212, 213, 217, 234, 235, 252, 256, 257, 272, 288, 293, 309, 333, 336, 337], "design_frac_delay_fir": [3, 252, 337], "length": [3, 6, 7, 38, 40, 54, 55, 56, 76, 77, 80, 81, 91, 100, 101, 103, 108, 113, 115, 126, 127, 130, 146, 147, 150, 152, 156, 158, 185, 186, 187, 197, 205, 211, 212, 213, 234, 235, 236, 242, 245, 250, 251, 252, 253, 254, 255, 269, 270, 271, 272, 287, 289, 292, 296, 299, 300, 308, 309, 311, 315, 319, 321, 322, 326, 329, 332, 335], "mix": [3, 54, 277, 336, 337], "freq": [3, 4, 54, 76, 80, 100, 106, 126, 128, 134, 144, 146, 149, 186, 188, 189, 212, 234, 267, 268, 277, 280, 320, 323, 329, 333], "float": [3, 5, 6, 9, 11, 12, 13, 14, 15, 16, 18, 22, 24, 25, 26, 30, 32, 33, 34, 35, 39, 42, 48, 52, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 82, 91, 93, 95, 96, 97, 99, 100, 106, 107, 110, 116, 117, 120, 126, 127, 128, 129, 134, 135, 144, 146, 147, 149, 150, 151, 152, 160, 167, 169, 170, 172, 173, 174, 176, 177, 178, 180, 183, 184, 185, 186, 188, 190, 191, 192, 193, 196, 197, 198, 203, 204, 205, 207, 210, 211, 212, 224, 232, 234, 236, 239, 240, 241, 243, 246, 248, 250, 251, 252, 253, 254, 255, 266, 267, 269, 275, 277, 279, 281, 282, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 299, 301, 302, 308, 310, 311, 312, 323], "0": [3, 6, 8, 9, 11, 16, 18, 19, 20, 21, 26, 27, 28, 29, 34, 35, 38, 40, 54, 55, 66, 76, 80, 82, 87, 88, 91, 93, 100, 101, 106, 107, 110, 116, 126, 127, 128, 129, 131, 132, 133, 134, 144, 146, 147, 149, 151, 152, 155, 156, 157, 158, 165, 169, 184, 185, 186, 188, 190, 196, 197, 204, 205, 207, 209, 210, 211, 212, 213, 220, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 280, 283, 285, 286, 287, 288, 289, 290, 293, 294, 295, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 338], "time": [3, 5, 9, 59, 66, 67, 69, 70, 71, 72, 73, 80, 87, 100, 116, 128, 144, 149, 167, 169, 176, 186, 196, 198, 204, 210, 239, 240, 248, 250, 251, 253, 254, 258, 259, 262, 264, 265, 267, 269, 271, 273, 275, 277, 279, 281, 282, 287, 292, 296, 299, 302, 308, 310, 311, 312, 314, 315, 316, 318, 319, 323, 329, 330, 331, 335, 336, 337], "domain": [3, 5, 239, 240, 248, 250, 251, 253, 254, 259, 262, 265, 267, 273, 275, 277, 279, 281, 282, 287, 292, 296, 299, 302, 310, 312, 315, 316, 318, 323, 336, 337], "complex": [3, 5, 7, 34, 38, 40, 54, 59, 76, 80, 88, 89, 90, 91, 92, 100, 106, 126, 128, 134, 144, 146, 149, 151, 152, 155, 156, 157, 158, 165, 176, 179, 184, 185, 186, 188, 189, 195, 196, 197, 198, 199, 204, 205, 209, 210, 211, 212, 229, 230, 231, 232, 233, 234, 240, 241, 259, 266, 275, 277, 285, 286, 288, 290, 292, 293, 294, 299, 301, 302, 315, 316, 318, 323, 329, 330, 331, 333, 334, 336, 337], "exponenti": [3, 54, 189, 259, 277, 315, 316, 318, 329, 330, 331, 337], "real": [3, 89, 90, 92, 227, 228, 230, 231, 233, 240, 277, 288, 290, 292, 293, 294, 296, 299, 302, 315, 316, 330, 331, 333, 336, 337], "sinusoid": [3, 204, 240, 277, 315, 316, 331, 337], "to_complex_bb": [3, 315, 337], "x_r": [3, 315, 316], "complex_": [3, 7, 9, 10, 34, 40, 151, 155, 156, 157, 158, 165, 184, 188, 195, 196, 198, 199, 204, 209, 210, 285, 301, 315, 316, 321, 322], "passband": [3, 126, 250, 251, 252, 253, 254, 269, 272, 308, 309, 311, 315, 316, 332, 337], "center": [3, 54, 250, 251, 252, 253, 254, 272, 302, 309, 315, 316, 337], "f_": [3, 34, 35, 39, 46, 54, 55, 59, 66, 74, 76, 106, 107, 110, 134, 146, 151, 152, 164, 184, 185, 196, 197, 204, 205, 210, 211, 212, 213, 224, 234, 235, 250, 251, 253, 254, 259, 261, 264, 267, 269, 277, 286, 287, 288, 290, 292, 293, 294, 295, 296, 299, 302, 312, 313, 314, 315, 316, 318, 329, 330, 331, 333, 335], "r": [3, 9, 54, 76, 116, 117, 119, 120, 146, 212, 213, 224, 234, 235, 241, 259, 260, 261, 263, 266, 269, 277, 308, 311, 313, 315, 316, 318, 325, 326, 327, 328, 331, 332, 333, 335], "4": [3, 9, 18, 26, 54, 67, 69, 76, 80, 82, 89, 93, 106, 116, 118, 126, 134, 144, 146, 149, 176, 184, 185, 186, 188, 196, 197, 198, 204, 206, 207, 208, 209, 210, 212, 220, 222, 223, 226, 229, 230, 231, 233, 234, 238, 240, 241, 242, 245, 250, 251, 252, 253, 254, 258, 259, 260, 261, 263, 264, 266, 267, 268, 270, 271, 274, 275, 277, 278, 280, 284, 285, 286, 287, 288, 289, 290, 293, 294, 298, 300, 301, 302, 303, 304, 305, 308, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 327, 329, 331, 332, 333, 334], "rate": [3, 5, 7, 9, 11, 12, 13, 34, 35, 36, 39, 45, 54, 55, 56, 59, 66, 74, 76, 77, 93, 94, 95, 97, 98, 106, 107, 110, 116, 117, 119, 120, 134, 146, 147, 151, 153, 163, 184, 196, 204, 206, 208, 210, 212, 213, 216, 219, 224, 234, 235, 236, 255, 259, 260, 261, 263, 267, 277, 284, 286, 287, 288, 290, 292, 293, 294, 295, 296, 298, 299, 302, 312, 313, 315, 316, 318, 323, 336, 337], "baseband": [3, 7, 59, 184, 196, 204, 210, 277, 286, 295, 315, 316, 332, 333, 337], "x_c": [3, 315, 316], "c": [3, 18, 23, 24, 26, 31, 32, 48, 51, 52, 54, 55, 56, 57, 59, 67, 69, 70, 71, 72, 73, 82, 95, 96, 97, 98, 99, 151, 152, 165, 167, 184, 196, 204, 209, 210, 241, 244, 247, 268, 280, 301, 315, 316, 320, 333], "2": [3, 6, 7, 9, 18, 26, 34, 35, 41, 54, 55, 59, 67, 69, 72, 76, 80, 82, 88, 89, 90, 91, 92, 93, 100, 104, 106, 107, 110, 116, 126, 134, 144, 146, 149, 150, 151, 152, 159, 176, 184, 186, 188, 196, 197, 198, 204, 205, 206, 207, 208, 209, 210, 211, 212, 220, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 325, 328, 329, 330, 331, 332, 333, 334, 335], "to_real_pb": [3, 316, 332, 337], "2f_": [3, 316], "upsampl": [3, 146, 234, 318, 337], "factor": [3, 5, 59, 66, 75, 149, 150, 152, 167, 169, 170, 197, 205, 211, 248, 259, 318, 333], "insert": [3, 146, 234, 318], "zero": [3, 7, 54, 76, 80, 100, 105, 116, 120, 122, 126, 127, 128, 129, 134, 143, 144, 146, 147, 149, 167, 186, 189, 212, 234, 236, 252, 271, 272, 278, 287, 288, 289, 290, 293, 294, 300, 304, 309, 315, 318, 319, 330, 332, 333, 335, 336, 337], "between": [3, 5, 11, 17, 56, 76, 77, 81, 82, 102, 114, 118, 124, 129, 131, 142, 145, 146, 147, 150, 187, 198, 214, 234, 236, 265, 268, 273, 292, 296, 299, 318, 333, 336], "each": [3, 54, 55, 56, 76, 77, 101, 146, 147, 212, 213, 214, 218, 221, 222, 234, 235, 236, 255, 266, 274, 292, 296, 299, 318], "downsampl": [3, 54, 76, 234, 259, 337], "discard": [3, 54, 76, 234, 259], "everi": [3, 54, 76, 93, 234, 259, 329], "bsc_capac": [4, 247, 337], "p": [4, 8, 18, 22, 23, 25, 26, 30, 31, 33, 54, 76, 82, 83, 87, 146, 147, 188, 189, 212, 219, 224, 227, 228, 234, 236, 243, 244, 246, 247, 255, 258, 323], "calcul": [4, 5, 18, 23, 26, 31, 241, 244, 247, 266, 268, 280, 320, 337], "symmetr": [4, 26, 30, 82, 246, 247, 258, 315, 316, 323, 336], "bsc": [4, 26, 27, 28, 30, 31, 33, 82, 246, 247, 258, 323, 336, 337], "bec_capac": [4, 244, 337], "erasur": [4, 18, 20, 21, 22, 25, 82, 243, 244, 258, 323, 336], "bec": [4, 18, 19, 20, 22, 23, 25, 82, 243, 244, 258, 323, 336, 337], "awgn_capac": [4, 241, 337], "addit": [4, 240, 241, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 318, 323, 336], "white": [4, 240, 241, 323, 336], "gaussian": [4, 6, 80, 144, 149, 186, 240, 241, 269, 323, 336, 337], "nois": [4, 9, 36, 45, 59, 60, 61, 66, 72, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 153, 163, 167, 169, 173, 184, 196, 204, 206, 208, 210, 229, 230, 231, 232, 233, 240, 241, 260, 261, 263, 264, 284, 298, 313, 314, 323, 333, 336], "awgn": [4, 184, 196, 204, 206, 208, 210, 240, 241, 266, 284, 285, 298, 315, 316, 323, 334, 336, 337], "fspl": [4, 268], "distanc": [4, 265, 268, 273, 336, 337], "free": [4, 184, 196, 204, 210, 268, 336], "space": [4, 54, 106, 134, 268, 336], "wavelength": [4, 320, 337], "lambda": [4, 268, 320], "electromagnet": [4, 320], "wave": [4, 116, 184, 320], "frequenc": [4, 34, 35, 39, 43, 54, 59, 67, 69, 71, 76, 80, 100, 106, 107, 110, 116, 126, 128, 134, 144, 146, 149, 167, 184, 186, 188, 189, 212, 234, 250, 251, 252, 253, 254, 259, 267, 268, 277, 280, 287, 288, 290, 292, 293, 294, 299, 315, 316, 318, 320, 323, 335, 336, 337], "f": [4, 35, 39, 54, 67, 69, 76, 80, 91, 106, 107, 110, 126, 134, 144, 146, 188, 189, 234, 238, 240, 267, 268, 269, 277, 280, 308, 311, 312, 320, 321, 326, 329, 330, 331, 332, 333, 334, 335], "parabolic_antenna": [4, 280, 337], "tupl": [4, 54, 76, 80, 81, 88, 91, 93, 95, 98, 100, 106, 107, 110, 126, 128, 134, 144, 146, 149, 151, 155, 156, 176, 181, 182, 184, 186, 196, 198, 201, 202, 204, 210, 212, 229, 232, 234, 239, 262, 265, 273, 279, 280, 281, 285, 287, 288, 289, 290, 293, 294, 300, 301, 304], "gain": [4, 9, 10, 11, 14, 16, 17, 59, 62, 63, 64, 65, 66, 128, 129, 135, 144, 149, 167, 169, 172, 174, 176, 183, 188, 190, 191, 198, 203, 238, 250, 251, 252, 253, 254, 268, 269, 272, 280, 308, 309, 311, 324, 333, 336, 337], "g": [4, 98, 280, 327], "beamwidth": [4, 280], "theta": [4, 188, 190, 193, 280], "parabol": [4, 280], "reflector": [4, 280], "signal": [5, 7, 9, 10, 11, 12, 13, 34, 35, 43, 54, 55, 59, 67, 69, 72, 73, 76, 80, 81, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 105, 116, 117, 120, 126, 128, 130, 144, 146, 149, 151, 152, 161, 167, 168, 176, 177, 178, 180, 184, 186, 188, 189, 195, 196, 197, 204, 205, 210, 211, 212, 213, 214, 218, 221, 229, 230, 231, 232, 233, 234, 235, 239, 240, 241, 248, 249, 250, 251, 253, 254, 255, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 273, 275, 276, 277, 279, 280, 281, 282, 286, 287, 288, 290, 292, 293, 294, 295, 296, 299, 302, 305, 310, 312, 313, 314, 315, 316, 318, 320, 330, 331, 333, 335, 336, 337], "peak_pow": [5, 279, 281, 337], "peak": [5, 184, 196, 210, 248, 266, 279, 281, 282], "average_pow": [5, 239, 279, 337], "papr": [5, 184, 196, 210, 279, 332, 337], "ratio": [5, 35, 36, 39, 45, 72, 89, 91, 93, 95, 96, 97, 98, 99, 153, 163, 184, 196, 206, 208, 210, 230, 232, 240, 241, 260, 261, 263, 264, 279, 283, 284, 298, 306, 307, 313, 314], "peak_voltag": [5, 248, 282, 337], "bool": [5, 9, 11, 17, 54, 56, 76, 77, 80, 81, 89, 90, 91, 92, 100, 102, 106, 114, 116, 118, 124, 126, 128, 129, 131, 134, 142, 144, 145, 146, 147, 149, 150, 184, 186, 187, 196, 204, 206, 208, 210, 212, 214, 230, 231, 232, 233, 234, 236, 239, 262, 277, 281, 282, 285, 286, 294, 296, 299, 301, 302, 310], "rms_voltag": [5, 248, 310, 337], "root": [5, 6, 152, 197, 205, 211, 266, 286, 302, 310, 311, 321, 322, 330, 336], "mean": [5, 266, 292, 299, 310, 335], "squar": [5, 6, 152, 197, 205, 211, 266, 268, 280, 286, 302, 310, 311, 330], "rm": [5, 176, 177, 178, 180, 248, 266, 310], "crest_factor": [5, 248, 279, 337], "crest": [5, 248], "euclidean": [5, 265, 336, 337], "y": [5, 6, 9, 10, 18, 20, 21, 26, 28, 29, 49, 54, 76, 80, 82, 85, 86, 87, 100, 101, 105, 116, 117, 120, 128, 130, 144, 146, 149, 167, 168, 188, 189, 195, 212, 213, 214, 221, 234, 235, 240, 243, 246, 256, 257, 258, 259, 265, 267, 273, 275, 277, 285, 290, 292, 299, 301, 312, 318, 333, 334], "two": [5, 9, 149, 186, 196, 204, 210, 250, 251, 265, 273, 287, 288, 290, 292, 293, 294, 299, 321, 329, 330, 331], "ham": [5, 106, 250, 251, 253, 254, 273, 336, 337], "errorr": [5, 93, 94, 95, 96, 97, 98, 99, 334, 337], "A": [5, 9, 35, 48, 55, 59, 67, 69, 70, 71, 72, 73, 75, 80, 93, 100, 101, 106, 116, 134, 144, 149, 152, 167, 176, 186, 197, 198, 205, 211, 213, 235, 238, 245, 250, 251, 253, 254, 270, 274, 275, 280, 285, 286, 296, 308, 311, 323, 324, 326, 333], "error": [5, 7, 11, 12, 13, 26, 34, 36, 45, 59, 65, 66, 72, 93, 94, 95, 97, 98, 99, 151, 153, 163, 167, 169, 176, 179, 181, 182, 183, 184, 196, 198, 199, 201, 202, 203, 204, 206, 208, 210, 238, 247, 266, 284, 298, 333, 336, 337], "ber": [5, 7, 34, 36, 93, 151, 153, 184, 196, 204, 206, 210, 284, 334, 336, 337], "symbol": [5, 7, 34, 35, 37, 38, 39, 40, 45, 46, 93, 95, 98, 146, 151, 152, 154, 155, 156, 157, 158, 163, 164, 165, 176, 179, 184, 185, 196, 197, 198, 199, 204, 205, 206, 208, 209, 210, 211, 240, 260, 261, 263, 264, 266, 267, 269, 272, 285, 286, 295, 298, 301, 302, 308, 309, 311, 313, 314, 332, 333, 335, 336, 337], "ser": [5, 7, 34, 45, 93, 151, 163, 184, 196, 204, 208, 210, 298, 334, 336, 337], "evm": [5, 266, 336, 337], "x_hat": [5, 7, 93, 95, 266, 285, 334], "ref": [5, 176, 178, 180, 238, 250, 251, 252, 253, 254, 255, 266, 269, 271, 319], "vector": [5, 93, 106, 122, 134, 250, 251, 253, 254, 266, 292, 299, 336, 337], "magnitud": [5, 7, 9, 11, 15, 80, 126, 144, 149, 186, 252, 266, 287, 290, 321, 336, 337], "hat": [5, 7, 34, 38, 95, 151, 155, 156, 176, 179, 184, 196, 198, 199, 204, 210, 266, 285, 301], "k": [5, 6, 7, 34, 35, 37, 38, 40, 41, 54, 80, 95, 144, 151, 152, 154, 155, 156, 157, 158, 159, 176, 179, 184, 196, 198, 199, 204, 205, 210, 211, 256, 257, 260, 261, 263, 266, 285, 301, 302, 313, 332, 335], "linearmodul": [6, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 181, 182, 201, 202, 204, 301, 337], "amplitud": [6, 54, 151, 152, 176, 177, 178, 180, 275, 323, 333], "arbitrari": [6, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 151, 336, 337], "psk": [6, 176, 196, 198, 204, 205, 206, 207, 208, 209, 210, 211, 240, 266, 267, 275, 284, 285, 286, 298, 301, 302, 312, 332, 333, 336, 337], "shift": [6, 184, 196, 204, 206, 207, 208, 209, 210, 321, 330, 331, 336, 337], "kei": [6, 184, 196, 204, 206, 207, 208, 209, 210, 336, 337], "demodul": [6, 34, 38, 151, 156, 184, 196, 204, 210, 337], "pimpsk": [6, 210, 211, 337], "pi": [6, 9, 35, 39, 54, 76, 80, 116, 134, 144, 146, 176, 188, 196, 198, 204, 210, 211, 234, 240, 259, 268, 269, 275, 277, 280, 287, 288, 289, 290, 293, 294, 300, 304, 308, 311, 315, 316, 318, 321, 329, 330, 331, 333, 336, 337], "m": [6, 34, 35, 37, 38, 40, 41, 54, 76, 87, 128, 131, 133, 144, 146, 149, 151, 152, 154, 155, 156, 157, 158, 159, 165, 176, 184, 196, 198, 204, 205, 209, 210, 211, 212, 220, 222, 234, 258, 260, 261, 263, 268, 301, 313, 325, 326, 327, 328, 336, 337], "oqpsk": [6, 184, 196, 197, 337], "offset": [6, 34, 35, 42, 67, 69, 76, 116, 146, 151, 152, 160, 184, 185, 188, 189, 190, 193, 196, 197, 204, 205, 207, 210, 211, 234, 267, 277, 289, 302, 312, 323, 333, 336, 337], "quadratur": [6, 196, 275, 286], "cpm": [6, 7, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 295, 337], "msk": [6, 184, 185, 295, 337], "rectangular": [6, 35, 145, 152, 197, 205, 211, 309, 332, 335, 336, 337], "span": [6, 7, 35, 152, 197, 205, 211, 269, 272, 286, 295, 308, 309, 311, 332, 335, 337], "half_sin": [6, 185, 272, 337], "half": [6, 184, 196, 272, 280, 336, 337], "sine": [6, 116, 184, 189, 272, 336, 337], "time_bandwidth": [6, 269], "raised_cosin": [6, 152, 197, 205, 211, 308, 335, 337], "alpha": [6, 9, 11, 12, 54, 149, 150, 152, 197, 205, 211, 269, 303, 308, 311, 332, 335], "rais": [6, 80, 144, 152, 197, 205, 211, 286, 302, 308, 311, 330, 336], "cosin": [6, 80, 144, 152, 189, 197, 205, 211, 286, 302, 308, 311, 330, 336, 337], "rc": [6, 152, 196, 197, 204, 205, 210, 211, 286, 308], "root_raised_cosin": [6, 80, 144, 152, 197, 205, 211, 287, 288, 289, 290, 293, 294, 300, 304, 311, 330, 332, 334, 335, 337], "srrc": [6, 152, 196, 197, 204, 205, 210, 211, 286, 302, 311, 332, 334], "binary_cod": [6, 245, 337], "code": [6, 185, 197, 205, 209, 211, 242, 245, 260, 261, 263, 270, 271, 285, 301, 313, 319, 322, 327, 334, 337], "gray_cod": [6, 270, 337], "grai": [6, 35, 184, 185, 196, 197, 204, 205, 209, 210, 211, 270, 285, 301, 334, 336], "diff_encod": [6, 184, 196, 204, 206, 208, 210, 256, 257, 337], "y_prev": [6, 256, 257], "input": [6, 9, 10, 18, 19, 21, 26, 27, 29, 48, 49, 54, 55, 56, 59, 67, 69, 72, 73, 76, 77, 80, 81, 82, 84, 86, 87, 100, 101, 102, 108, 112, 113, 116, 117, 118, 119, 122, 123, 126, 128, 129, 130, 131, 136, 141, 144, 145, 146, 147, 149, 150, 167, 168, 186, 187, 188, 189, 196, 204, 206, 208, 210, 212, 213, 214, 217, 218, 227, 234, 235, 236, 240, 241, 243, 244, 246, 247, 249, 256, 257, 258, 259, 276, 278, 283, 289, 300, 306, 307, 317, 318, 323, 330, 331, 333], "data": [6, 176, 181, 198, 201, 256, 257, 274, 278, 302, 317, 336], "diff_decod": [6, 256, 257, 337], "decod": [6, 256], "use_styl": [7, 303, 329, 330, 331, 332, 333, 334, 335], "appli": [7, 54, 76, 81, 146, 152, 184, 196, 204, 210, 234, 267, 275, 285, 286, 289, 292, 299, 301, 302, 303, 312, 323], "default": [7, 108, 113, 185, 197, 205, 209, 211, 239, 262, 265, 273, 279, 281, 285, 288, 290, 292, 293, 294, 296, 299, 301, 303, 334], "matplotlib": [7, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 329, 330, 331, 332, 333, 334, 335, 336], "rcparam": [7, 303], "time_domain": [7, 9, 76, 80, 116, 144, 146, 149, 184, 186, 188, 196, 204, 210, 234, 240, 242, 259, 271, 277, 302, 315, 316, 318, 319, 321, 329, 332, 333, 334, 335, 337], "ani": [7, 18, 21, 26, 29, 54, 76, 80, 82, 86, 100, 106, 126, 128, 134, 144, 146, 149, 186, 188, 189, 212, 234, 242, 249, 259, 271, 276, 302, 318, 319, 322, 328], "dtype": [7, 18, 21, 26, 29, 54, 76, 80, 82, 86, 100, 106, 126, 128, 134, 144, 146, 149, 184, 186, 188, 189, 196, 204, 210, 212, 234, 242, 271, 278, 302, 317, 319, 322, 333], "scalartyp": [7, 302], "t": [7, 59, 61, 66, 88, 167, 169, 173, 229, 269, 274, 302, 308, 311, 325, 329, 337], "raster": [7, 286, 295, 296, 336, 337], "none": [7, 18, 22, 26, 30, 34, 36, 48, 50, 53, 54, 76, 80, 81, 82, 87, 91, 100, 106, 108, 113, 116, 122, 126, 134, 146, 152, 167, 175, 186, 189, 197, 205, 211, 212, 232, 234, 239, 240, 241, 243, 246, 250, 251, 253, 254, 258, 262, 265, 273, 278, 279, 281, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 299, 300, 301, 302, 317, 323, 329, 332, 334], "periodogram": [7, 54, 259, 292, 315, 316, 318, 332, 336, 337], "power": [7, 184, 196, 204, 210, 239, 240, 241, 249, 266, 269, 271, 272, 276, 279, 280, 281, 292, 308, 309, 311, 319, 335, 336], "densiti": [7, 72, 286, 292, 332, 335], "xx": [7, 292], "welch": [7, 292, 299], "spectrogram": [7, 299, 336, 337], "constel": [7, 184, 196, 204, 207, 210, 240, 266, 267, 275, 285, 312, 321, 336, 337], "symbol_map": [7, 151, 152, 165, 184, 196, 204, 207, 209, 210, 266, 301, 334, 337], "map": [7, 151, 152, 157, 165, 184, 188, 196, 204, 209, 210, 266, 301, 336, 337], "ey": [7, 184, 196, 204, 210, 286, 336, 337], "diagram": [7, 9, 54, 59, 76, 100, 146, 149, 167, 184, 188, 196, 204, 210, 234, 256, 257, 286, 336, 337], "phase_tre": [7, 184, 295, 337], "tree": [7, 295, 337], "continu": [7, 34, 35, 144, 184, 295, 329, 337], "kwarg": [7, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304], "e_b": [7, 34, 36, 95, 96, 97, 98, 99, 151, 153, 184, 196, 204, 206, 210, 241, 260, 261, 263, 284, 313, 336], "n_0": [7, 11, 12, 13, 34, 36, 45, 72, 95, 96, 97, 98, 99, 151, 153, 163, 184, 196, 204, 206, 208, 210, 240, 241, 260, 261, 263, 264, 266, 284, 285, 298, 313, 314, 334, 336], "e_": [7, 34, 45, 95, 96, 97, 98, 99, 151, 163, 184, 196, 204, 208, 210, 240, 241, 260, 263, 264, 266, 285, 298, 314, 334, 336], "roc": [7, 88, 91, 229, 232, 297, 337], "receiv": [7, 9, 34, 38, 44, 88, 89, 91, 93, 95, 151, 155, 156, 162, 176, 177, 179, 180, 184, 196, 198, 199, 204, 206, 208, 210, 229, 230, 231, 232, 233, 266, 268, 286, 291, 297, 337], "oper": [7, 11, 88, 91, 229, 232, 297, 333, 337], "characterist": [7, 88, 91, 229, 232, 297, 337], "curv": [7, 88, 91, 206, 208, 229, 232, 284, 297, 298, 337], "enr": [7, 229, 230, 232, 291], "impulse_respons": [7, 54, 76, 80, 100, 108, 126, 128, 136, 144, 146, 149, 186, 212, 234, 250, 251, 252, 253, 254, 255, 269, 272, 289, 308, 309, 311, 330, 331, 335, 337], "step_respons": [7, 54, 76, 80, 100, 113, 126, 128, 141, 144, 146, 149, 186, 212, 234, 300, 330, 331, 333, 337], "step": [7, 54, 76, 80, 100, 113, 126, 128, 141, 144, 146, 149, 186, 188, 189, 195, 212, 234, 300, 336], "zeros_pol": [7, 304, 331, 337], "pole": [7, 128, 129, 134, 138, 144, 149, 287, 288, 289, 290, 293, 294, 300, 304, 330, 336], "magnitude_respons": [7, 80, 106, 126, 134, 144, 149, 186, 250, 251, 252, 253, 254, 255, 269, 272, 290, 308, 309, 311, 330, 331, 333, 335, 337], "omega": [7, 54, 76, 80, 100, 106, 107, 110, 116, 126, 128, 134, 144, 146, 149, 186, 188, 190, 192, 212, 234, 287, 288, 290, 293, 294, 333], "phase_respons": [7, 106, 134, 294, 337], "angl": [7, 198, 294, 333], "phase_delai": [7, 54, 76, 80, 100, 110, 126, 146, 186, 212, 234, 293, 337], "tau_": [7, 54, 76, 80, 100, 110, 126, 146, 186, 212, 234, 293], "phi": [7, 34, 35, 42, 54, 76, 80, 100, 110, 126, 146, 151, 152, 160, 184, 185, 186, 196, 197, 204, 205, 207, 210, 211, 212, 234, 267, 275, 277, 293], "group_delai": [7, 54, 76, 80, 100, 107, 126, 146, 186, 212, 234, 252, 288, 330, 331, 337], "group": [7, 54, 76, 80, 100, 107, 126, 146, 186, 212, 234, 252, 288, 336], "tau_g": [7, 54, 76, 80, 100, 107, 126, 146, 186, 212, 234, 288], "iir": [7, 59, 68, 108, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 149, 150, 167, 171, 186, 287, 288, 289, 290, 293, 294, 300, 304, 330, 333, 336, 337], "q": [8, 54, 76, 77, 146, 184, 196, 212, 216, 224, 227, 228, 229, 230, 231, 233, 234, 236, 255, 321, 337], "comput": [8, 34, 36, 45, 48, 51, 76, 82, 88, 89, 90, 91, 92, 106, 134, 151, 153, 163, 176, 184, 196, 198, 204, 206, 208, 210, 227, 228, 229, 230, 231, 232, 233, 239, 240, 262, 265, 268, 273, 279, 281, 330, 331, 333, 335, 337], "complementari": [8, 227, 228], "cumul": [8, 227, 228], "distribut": [8, 227, 228], "standard": [8, 227, 228, 337], "normal": [8, 35, 59, 61, 66, 167, 169, 173, 227, 228, 250, 251, 253, 254, 266, 269, 272, 287, 288, 290, 292, 293, 294, 299, 308, 309, 311, 333, 335], "mathcal": [8, 18, 19, 20, 21, 26, 27, 28, 29, 82, 84, 85, 86, 87, 88, 227, 228, 229, 230, 231, 232, 233, 240, 258], "qinv": [8, 227, 228, 337], "invers": [8, 54, 228], "agc": [9, 10, 11, 12, 13, 14, 15, 16, 17, 176, 324, 336, 337], "automat": [9, 10, 11, 176, 324, 336, 337], "control": [9, 10, 11, 59, 176, 188, 190, 308, 311, 333, 336, 337], "note": [9, 18, 26, 54, 76, 80, 82, 88, 89, 90, 92, 100, 126, 128, 144, 146, 149, 167, 176, 186, 188, 198, 212, 218, 221, 223, 226, 229, 230, 231, 233, 234, 238, 240, 241, 244, 247, 252, 256, 257, 269, 275, 280, 286, 305, 308, 311, 321], "block": [9, 54, 59, 76, 100, 146, 149, 167, 188, 234, 256, 257], "exp": [9, 54, 134, 188, 189, 196, 204, 210, 259, 269, 275, 277, 287, 288, 289, 290, 293, 294, 300, 304, 316, 318, 321, 329, 331, 333], "z": [9, 59, 100, 128, 144, 149, 167, 188, 256, 257, 321, 330, 331, 333], "log": [9, 287, 288, 290, 292, 293, 294, 296, 330, 331, 333], "beta": [9, 11, 13], "output": [9, 10, 11, 15, 18, 20, 21, 26, 28, 29, 49, 54, 55, 76, 80, 82, 85, 86, 87, 100, 101, 108, 113, 116, 119, 126, 128, 129, 131, 136, 141, 144, 145, 146, 147, 149, 150, 156, 167, 168, 186, 188, 189, 195, 212, 213, 214, 217, 221, 224, 234, 235, 236, 240, 241, 242, 243, 244, 246, 247, 257, 258, 266, 271, 276, 278, 289, 300, 317, 319, 322, 325, 329, 330, 331, 333, 337], "attack": [9, 11, 12], "decai": [9, 11, 13, 329, 331], "refer": [9, 11, 15, 18, 26, 54, 59, 67, 69, 70, 71, 72, 73, 76, 80, 82, 88, 89, 90, 92, 93, 116, 146, 167, 176, 178, 179, 180, 198, 199, 206, 208, 229, 230, 231, 233, 234, 238, 240, 248, 250, 251, 252, 253, 254, 255, 266, 267, 269, 271, 279, 305, 308, 311, 312, 319, 321, 331, 335, 336], "adder": [9, 76, 167, 188, 256, 257, 333], "multipli": [9, 59, 80, 146, 234], "michael": [9, 59, 67, 69, 70, 71, 72, 73, 80, 116, 167, 176, 198, 308, 311], "rice": [9, 59, 67, 69, 70, 71, 72, 73, 80, 116, 167, 176, 198, 308, 311], "digit": [9, 18, 26, 59, 67, 69, 70, 71, 72, 73, 80, 82, 116, 167, 176, 198, 206, 208, 308, 311, 333, 336, 337], "commun": [9, 18, 26, 54, 59, 67, 69, 70, 71, 72, 73, 76, 80, 82, 116, 146, 167, 176, 198, 206, 208, 234, 255, 305, 308, 311, 333, 336], "discret": [9, 54, 59, 67, 69, 70, 71, 72, 73, 80, 82, 87, 116, 144, 149, 167, 176, 186, 198, 240, 258, 264, 308, 311, 314, 323, 329, 333, 336, 337], "approach": [9, 18, 26, 59, 67, 69, 70, 71, 72, 73, 80, 116, 167, 176, 198, 241, 244, 247, 308, 311, 333], "section": [9, 80, 88, 95, 96, 97, 98, 99, 116, 176, 198, 229, 331, 333], "9": [9, 54, 76, 82, 106, 116, 126, 134, 146, 184, 196, 204, 210, 212, 220, 222, 223, 226, 230, 234, 238, 245, 258, 266, 270, 271, 274, 305, 308, 311, 319, 321, 325, 331, 332, 334, 335], "5": [9, 18, 26, 34, 35, 54, 76, 80, 82, 88, 89, 90, 91, 92, 93, 106, 116, 126, 144, 146, 149, 176, 184, 186, 188, 196, 204, 210, 212, 220, 222, 223, 226, 230, 232, 234, 238, 240, 242, 243, 245, 246, 247, 250, 251, 252, 253, 254, 258, 259, 260, 261, 263, 264, 266, 267, 268, 269, 270, 271, 274, 275, 280, 283, 286, 287, 288, 289, 290, 293, 294, 300, 302, 304, 305, 308, 311, 312, 313, 314, 315, 316, 318, 319, 321, 325, 330, 331, 332, 333, 335], "http": [9, 116, 238, 248, 250, 251, 252, 253, 254, 255, 269, 271, 279, 319, 321, 325, 326, 327], "wirelesspi": [9, 116], "com": [9, 116, 238, 250, 251, 252, 253, 254, 255, 269, 271, 319, 326, 327], "how": [9, 269, 272, 286, 295, 296, 302, 308, 309, 311, 319, 328], "work": 9, "exampl": [9, 18, 26, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 89, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 204, 206, 207, 208, 209, 210, 220, 222, 223, 225, 226, 227, 228, 230, 232, 234, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 280, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 333, 337], "creat": [9, 11, 18, 22, 26, 30, 34, 35, 48, 50, 54, 56, 59, 66, 76, 77, 80, 81, 82, 87, 93, 94, 100, 102, 116, 118, 126, 127, 128, 129, 131, 144, 145, 146, 147, 149, 150, 151, 152, 167, 169, 184, 185, 186, 187, 188, 190, 196, 197, 204, 205, 207, 210, 211, 212, 214, 234, 236, 240, 242, 266, 267, 271, 277, 312, 315, 316, 319, 321, 329, 333, 335], "bursti": 9, "surround": 9, "In": [9, 11, 17, 18, 26, 54, 55, 56, 76, 77, 80, 81, 82, 89, 91, 93, 101, 102, 106, 114, 116, 118, 124, 126, 129, 131, 134, 142, 144, 145, 146, 147, 149, 150, 176, 184, 186, 187, 188, 196, 198, 204, 206, 207, 208, 209, 210, 213, 214, 220, 222, 223, 226, 227, 228, 230, 232, 234, 235, 236, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 280, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 329, 334], "np": [9, 18, 19, 20, 26, 27, 28, 54, 76, 80, 82, 83, 84, 85, 89, 91, 106, 116, 126, 134, 144, 146, 149, 151, 161, 165, 184, 186, 188, 196, 204, 206, 208, 209, 210, 220, 222, 223, 226, 230, 232, 234, 238, 240, 241, 242, 243, 244, 246, 247, 258, 259, 266, 267, 268, 271, 275, 277, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 298, 300, 302, 304, 305, 312, 315, 316, 318, 319, 321, 329, 330, 331, 332, 333, 334, 335], "1j": [9, 54, 134, 259, 277, 287, 288, 289, 290, 293, 294, 300, 304, 316, 318, 329, 331, 333], "arang": [9, 54, 76, 116, 126, 146, 220, 222, 223, 226, 234, 240, 242, 259, 271, 277, 305, 315, 316, 318, 319, 321, 329, 333], "5000": [9, 306, 307], "100": [9, 80, 91, 106, 128, 134, 136, 141, 144, 149, 186, 188, 206, 208, 238, 240, 241, 244, 247, 249, 250, 251, 253, 254, 259, 266, 276, 277, 284, 285, 287, 289, 295, 298, 300, 312, 315, 316, 318, 329, 333], "1000": [9, 106, 134, 181, 182, 184, 196, 201, 202, 204, 210, 266, 268, 315, 316, 334], "2000": 9, "10": [9, 54, 80, 82, 89, 91, 93, 116, 126, 144, 146, 152, 184, 196, 197, 204, 205, 206, 208, 210, 211, 220, 222, 223, 226, 230, 232, 234, 238, 239, 240, 245, 249, 250, 251, 253, 254, 258, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 284, 285, 287, 288, 289, 290, 293, 294, 298, 300, 302, 304, 305, 308, 309, 310, 311, 312, 313, 314, 319, 321, 330, 333, 334, 335], "3000": 9, "4000": 9, "001": [9, 333], "random": [9, 18, 22, 26, 30, 50, 53, 54, 82, 87, 88, 149, 184, 186, 196, 204, 210, 240, 243, 246, 258, 266, 267, 275, 285, 286, 295, 302, 312, 332, 333, 334], "randn": [9, 54, 149, 186, 302], "size": [9, 38, 40, 87, 156, 158, 242, 258, 271, 302, 319, 329, 333, 334, 335], "3": [9, 18, 26, 54, 59, 67, 69, 70, 73, 76, 80, 82, 88, 89, 93, 106, 116, 118, 126, 134, 144, 146, 149, 176, 184, 186, 188, 196, 198, 204, 206, 207, 208, 209, 210, 212, 220, 222, 223, 226, 229, 230, 234, 238, 240, 241, 242, 243, 245, 246, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 261, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 280, 285, 286, 287, 288, 289, 290, 293, 294, 300, 302, 304, 305, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 325, 326, 331, 333, 335, 336], "plt": [9, 18, 26, 54, 76, 80, 89, 91, 116, 126, 144, 146, 149, 176, 184, 186, 188, 196, 198, 204, 206, 207, 208, 209, 210, 230, 232, 234, 238, 240, 241, 242, 244, 247, 250, 251, 252, 253, 254, 255, 259, 266, 267, 268, 269, 271, 272, 275, 277, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 298, 300, 301, 302, 304, 308, 309, 311, 312, 315, 316, 318, 319, 321, 329, 330, 331, 332, 333, 334, 335], "figur": [9, 18, 26, 54, 76, 80, 89, 91, 116, 126, 144, 146, 149, 176, 184, 186, 188, 196, 198, 204, 206, 207, 208, 209, 210, 230, 232, 234, 238, 240, 241, 242, 244, 247, 250, 251, 252, 253, 254, 255, 259, 266, 267, 268, 269, 271, 272, 275, 277, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 298, 300, 301, 302, 303, 304, 308, 309, 311, 312, 315, 316, 318, 319, 321, 329, 330, 331, 332, 333, 334, 335], "plot": [9, 18, 26, 54, 76, 80, 89, 91, 106, 107, 108, 110, 113, 116, 126, 134, 136, 141, 144, 146, 149, 176, 184, 186, 188, 196, 198, 204, 206, 207, 208, 209, 210, 230, 232, 234, 240, 241, 242, 244, 247, 250, 251, 252, 253, 254, 255, 259, 266, 267, 268, 269, 271, 272, 275, 277, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 308, 309, 311, 312, 315, 316, 318, 319, 321, 329, 330, 331, 333, 334, 335, 336, 337], "titl": [9, 18, 26, 54, 76, 80, 116, 144, 146, 176, 188, 198, 206, 208, 234, 238, 240, 241, 242, 244, 247, 259, 266, 267, 271, 275, 277, 284, 298, 302, 312, 315, 316, 318, 319, 321, 329, 332, 333, 334, 335], "01": [9, 106, 134, 209, 210, 274, 331, 333], "notic": [9, 315, 316, 329, 335], "over": [9, 206, 208, 274], "i": [9, 11, 12, 13, 17, 18, 22, 26, 30, 34, 35, 39, 50, 53, 54, 55, 56, 59, 66, 75, 76, 77, 80, 81, 82, 87, 88, 90, 91, 92, 93, 98, 100, 101, 106, 108, 113, 114, 116, 119, 124, 126, 128, 131, 133, 134, 136, 141, 142, 144, 146, 147, 149, 150, 151, 152, 167, 169, 170, 173, 176, 184, 186, 189, 196, 197, 198, 204, 205, 210, 211, 212, 213, 214, 218, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 243, 244, 246, 247, 249, 250, 251, 252, 253, 254, 258, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 285, 286, 287, 288, 289, 290, 292, 293, 294, 296, 299, 300, 302, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338], "amplifi": [9, 11, 13], "accord": 9, "also": [9, 54, 176, 184, 198, 252, 268, 269, 336], "when": [9, 16, 18, 26, 54, 56, 76, 77, 79, 80, 100, 105, 108, 111, 113, 116, 120, 126, 128, 136, 139, 141, 144, 146, 147, 149, 150, 186, 212, 225, 234, 236, 240, 241, 243, 244, 246, 247, 264, 271, 287, 288, 289, 290, 293, 294, 300, 314, 319, 321, 329, 330, 331], "interest": 9, "appear": [9, 329], "quickli": 9, "decreas": [9, 241], "6": [9, 18, 26, 54, 76, 80, 82, 93, 116, 126, 134, 144, 146, 149, 176, 184, 186, 188, 196, 204, 209, 210, 212, 220, 222, 223, 226, 230, 231, 233, 234, 238, 245, 249, 252, 258, 259, 260, 261, 266, 268, 270, 271, 274, 276, 280, 285, 286, 287, 288, 289, 290, 293, 294, 300, 301, 302, 304, 305, 308, 311, 315, 316, 318, 319, 321, 325, 328, 330, 331, 333, 334], "ylim": [9, 116, 126, 149, 186, 250, 251, 252, 253, 254, 259, 318, 321, 330, 333, 334, 335], "__call__": [9, 10, 11, 17, 18, 21, 26, 29, 48, 49, 54, 55, 56, 76, 77, 80, 81, 82, 86, 100, 101, 102, 114, 116, 117, 118, 124, 126, 128, 129, 130, 131, 142, 144, 145, 146, 147, 149, 150, 167, 168, 176, 179, 186, 187, 188, 189, 198, 199, 212, 213, 214, 234, 235, 236, 337], "perform": [9, 10, 55, 59, 101, 127, 206, 208, 213, 235, 252, 259, 318, 321, 324, 330, 331, 334, 336, 337], "reset": [9, 16, 18, 26, 48, 53, 54, 76, 79, 80, 82, 100, 111, 116, 122, 126, 128, 139, 144, 146, 149, 167, 175, 186, 188, 194, 212, 225, 234], "indic": [9, 11, 17, 34, 54, 56, 76, 77, 80, 81, 90, 91, 92, 100, 102, 114, 116, 118, 124, 126, 128, 129, 131, 142, 144, 145, 146, 147, 149, 150, 151, 152, 184, 185, 186, 187, 196, 197, 204, 205, 206, 208, 210, 211, 212, 214, 217, 230, 231, 232, 233, 234, 236, 239, 262, 269, 272, 275, 277, 281, 282, 285, 286, 294, 295, 296, 302, 308, 309, 310, 311, 319], "whether": [9, 11, 17, 54, 56, 76, 77, 80, 81, 90, 91, 92, 100, 102, 114, 116, 118, 124, 126, 128, 129, 131, 142, 144, 145, 146, 147, 149, 150, 186, 187, 206, 208, 212, 214, 230, 231, 232, 233, 234, 236, 239, 262, 277, 281, 282, 285, 286, 294, 296, 302, 310], "The": [9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 325, 326, 327, 328, 330, 331, 333, 334, 335, 336, 338], "current": [9, 14, 116, 119, 302, 327], "settabl": [9, 12, 13, 15, 176, 177, 178, 188, 191, 192, 193], "desir": [9, 11, 15, 238, 240, 334], "paramet": [10, 11, 16, 21, 22, 29, 30, 35, 36, 38, 40, 45, 49, 50, 53, 55, 56, 66, 67, 69, 72, 77, 81, 86, 87, 89, 90, 91, 92, 95, 96, 97, 99, 101, 102, 106, 107, 108, 110, 113, 117, 118, 120, 122, 127, 129, 130, 131, 134, 136, 141, 145, 147, 150, 152, 153, 155, 156, 157, 158, 163, 168, 169, 179, 180, 181, 182, 185, 187, 189, 190, 195, 197, 199, 201, 202, 205, 206, 208, 211, 213, 214, 227, 228, 230, 231, 232, 233, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321], "stream": [11, 16, 17, 55, 56, 77, 79, 81, 101, 102, 105, 111, 114, 118, 120, 124, 129, 131, 139, 142, 145, 147, 150, 184, 187, 196, 204, 210, 213, 214, 225, 235, 236, 331], "meant": [11, 12, 13, 59], "attenu": [11, 12, 56, 77, 147, 236, 250, 251, 253, 254, 255, 308, 311], "strong": [11, 12], "after": [11, 12, 13, 223, 226], "approx": [11, 12, 13, 126], "reduc": [11, 12, 13], "e": [11, 12, 13, 18, 20, 21, 98, 176, 198, 229, 230, 231, 232, 233, 239, 243, 244, 262, 321, 326, 327, 330, 331, 334], "its": [11, 12, 13, 100, 128, 129, 144, 149, 240, 330, 331, 335], "origin": [11, 12, 13, 196, 210, 318, 329], "valu": [11, 12, 13, 34, 35, 36, 45, 88, 151, 152, 153, 163, 184, 185, 196, 197, 204, 205, 206, 208, 210, 211, 227, 228, 242, 249, 256, 257, 269, 271, 275, 276, 285, 288, 290, 292, 293, 294, 299, 301, 319, 326, 331, 337], "weak": [11, 13], "mode": [11, 16, 17, 55, 56, 77, 79, 81, 101, 102, 105, 111, 114, 118, 120, 124, 129, 131, 139, 142, 145, 147, 150, 187, 213, 214, 225, 235, 236, 242, 271, 286, 319, 321], "preserv": [11, 17, 56, 76, 77, 81, 102, 114, 118, 124, 129, 131, 142, 145, 146, 147, 150, 187, 214, 234, 236], "call": [11, 17, 55, 56, 76, 77, 81, 101, 102, 114, 118, 124, 129, 131, 142, 145, 146, 147, 150, 187, 213, 214, 234, 235, 236], "properti": [12, 13, 14, 15, 17, 19, 20, 24, 25, 27, 28, 32, 33, 37, 39, 41, 42, 43, 44, 46, 47, 52, 57, 58, 60, 61, 62, 63, 64, 65, 68, 70, 71, 74, 75, 78, 83, 84, 85, 104, 109, 112, 114, 115, 119, 121, 123, 124, 125, 132, 133, 135, 137, 138, 140, 142, 143, 148, 154, 159, 160, 161, 162, 164, 165, 166, 170, 171, 172, 173, 174, 177, 178, 183, 191, 192, 193, 203, 207, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 237, 337], "onli": [16, 35, 55, 56, 59, 77, 79, 101, 105, 106, 111, 120, 134, 139, 147, 152, 176, 185, 197, 205, 209, 211, 213, 225, 235, 236, 240, 250, 251, 253, 254, 268, 271, 272, 285, 286, 296, 309, 319, 328, 333, 334], "initi": [16, 176, 180, 198, 200, 333], "binaryerasurechannel": [18, 19, 20, 21, 22, 23, 24, 25, 323], "ar": [18, 20, 21, 26, 34, 44, 47, 54, 55, 56, 76, 77, 81, 82, 88, 93, 95, 96, 97, 99, 101, 102, 118, 127, 129, 131, 145, 146, 147, 150, 151, 152, 162, 166, 184, 185, 187, 189, 196, 197, 204, 205, 210, 211, 212, 213, 214, 221, 223, 226, 229, 234, 235, 236, 241, 243, 244, 246, 247, 252, 255, 268, 271, 272, 278, 285, 286, 287, 288, 290, 292, 293, 294, 295, 296, 299, 301, 302, 303, 305, 309, 315, 316, 319, 325, 327, 329, 331, 333, 335, 336, 338], "x_i": [18, 21, 26, 29, 82, 86, 87, 241, 243, 244, 246, 247, 258, 275], "y_i": [18, 21, 26, 29, 54, 55, 82, 86, 212, 241, 243, 244, 246, 247, 258], "capac": [18, 23, 24, 26, 31, 32, 48, 51, 52, 82, 241, 244, 247, 336, 337], "text": [18, 26, 56, 77, 82, 88, 147, 210, 229, 236, 238, 239, 240, 241, 244, 247, 248, 249, 255, 266, 267, 268, 276, 279, 281, 282, 310, 312], "john": [18, 26, 82, 206, 208], "proaki": [18, 26, 82, 206, 208], "chapter": [18, 26, 54, 76, 82, 146, 206, 208, 234, 255, 305], "model": [18, 26, 82, 337], "20": [18, 26, 80, 81, 82, 89, 91, 116, 146, 188, 230, 234, 238, 241, 243, 246, 249, 258, 266, 267, 274, 275, 276, 282, 305, 310, 318, 332, 334, 337], "pass": [18, 21, 22, 26, 29, 30, 35, 48, 49, 50, 53, 54, 76, 80, 82, 86, 87, 100, 105, 116, 120, 126, 146, 186, 212, 214, 218, 234, 240, 243, 246, 258, 266, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 323, 325, 327, 330, 331, 337], "through": [18, 21, 26, 29, 48, 49, 54, 76, 80, 82, 86, 100, 105, 116, 120, 126, 146, 186, 196, 210, 212, 234, 243, 246, 258, 323, 330, 331, 333], "25": [18, 26, 54, 82, 89, 243, 246, 252, 258, 283, 306, 307, 329, 332, 333, 335], "roughli": [18, 26, 243, 246, 329], "eras": [18, 243], "seed": [18, 22, 26, 30, 48, 50, 53, 82, 87, 240, 243, 246, 258, 337], "randint": [18, 26, 82, 184, 196, 204, 210, 240, 243, 246, 258, 266, 267, 275, 285, 286, 295, 302, 312, 332, 333, 334], "out": [18, 26, 54, 76, 82, 93, 106, 126, 134, 146, 176, 184, 196, 204, 207, 209, 210, 212, 220, 222, 223, 224, 226, 227, 228, 234, 242, 243, 245, 246, 249, 256, 257, 258, 260, 261, 263, 264, 266, 268, 270, 271, 276, 278, 280, 283, 303, 305, 306, 307, 313, 314, 317, 319, 320], "count_nonzero": [18, 26, 82], "75": [18, 82, 251, 274, 333], "howev": [18, 26, 55, 95, 96, 97, 99, 101, 126, 167, 213, 235, 244, 247, 271, 319, 329], "linearli": [18, 147, 236], "linspac": [18, 26, 80, 89, 106, 134, 144, 206, 208, 230, 241, 244, 247, 268, 284, 298, 331, 332, 333, 334], "101": [18, 26, 89, 91, 230, 232, 250, 251, 253, 254], "7": [18, 26, 54, 76, 80, 82, 116, 126, 146, 176, 184, 196, 198, 204, 209, 210, 212, 220, 222, 223, 226, 230, 234, 238, 245, 252, 253, 255, 258, 266, 270, 271, 274, 305, 319, 321, 325, 331, 333], "xlabel": [18, 26, 176, 198, 238, 241, 242, 244, 247, 266, 268, 271, 319, 321, 332, 333, 335], "ylabel": [18, 26, 176, 198, 238, 241, 244, 247, 266, 268, 332, 333, 335], "new": [18, 22, 26, 30, 34, 35, 48, 50, 53, 82, 87, 93, 94, 116, 118, 149, 151, 152, 184, 185, 196, 197, 204, 205, 210, 211, 312], "int64": [18, 21, 26, 29, 82, 86, 242, 271, 319, 322], "sequenc": [18, 21, 26, 29, 48, 49, 82, 86, 242, 243, 246, 258, 271, 319, 321, 323, 336, 337], "static": [18, 23, 26, 31, 48, 51, 82, 88, 89, 90, 91, 92, 229, 230, 231, 232, 233, 326], "alphabet": [18, 19, 20, 26, 27, 28, 82, 84, 85, 87, 258], "repres": [18, 20, 21, 59, 68, 243, 244], "instanti": [18, 24, 26, 32, 48, 52, 82], "number": [22, 30, 34, 35, 37, 46, 50, 53, 54, 55, 56, 57, 76, 87, 89, 90, 91, 92, 93, 95, 96, 99, 106, 107, 108, 110, 113, 134, 136, 141, 146, 151, 152, 154, 164, 181, 182, 184, 185, 195, 196, 197, 201, 202, 204, 205, 210, 211, 212, 214, 215, 223, 226, 234, 238, 240, 243, 246, 258, 260, 261, 263, 269, 272, 274, 278, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 299, 300, 305, 308, 309, 311, 313, 317], "numpi": [22, 30, 50, 53, 54, 76, 80, 87, 100, 106, 126, 128, 134, 144, 146, 149, 186, 189, 212, 234, 240, 243, 246, 258, 285, 317, 326, 329, 330, 331, 332, 333, 334, 335, 336], "default_rng": [22, 30, 50, 53, 87, 240, 243, 246, 258], "binarysymmetricchannel": [26, 27, 28, 29, 30, 31, 32, 33, 323], "h_b": [26, 247], "appropri": 26, "modul": [26, 34, 35, 39, 40, 41, 151, 152, 158, 159, 161, 176, 181, 182, 184, 188, 196, 197, 198, 201, 202, 204, 205, 206, 208, 210, 211, 260, 261, 263, 266, 284, 286, 295, 298, 301, 302, 313, 325, 328, 334, 336, 337], "hard": 26, "decis": [26, 34, 38, 151, 155, 156, 176, 179, 182, 184, 196, 198, 199, 202, 204, 210, 333], "detector": [26, 59, 65, 66, 88, 169, 176, 183, 198, 203, 229, 333, 336, 337], "transit": [26, 30, 33, 82, 83, 87, 196, 210, 246, 247, 258, 319, 323], "flip": [26, 246], "189": 26, "18872187554086717": 26, "nomenclatur": [34, 151, 184, 196, 204, 210], "variabl": [34, 151, 184, 188, 189, 196, 204, 210, 274, 333], "name": [34, 151, 184, 196, 204, 210], "follow": [34, 88, 93, 151, 184, 196, 204, 210, 275, 285, 296, 299, 301, 303, 305, 333], "tild": [34, 38, 151, 155, 156, 176, 179, 184, 196, 198, 199, 204, 210], "puls": [34, 35, 38, 40, 43, 44, 47, 80, 144, 151, 152, 156, 158, 161, 162, 166, 184, 196, 197, 204, 205, 210, 211, 269, 272, 286, 302, 308, 309, 311, 336, 337], "shape": [34, 35, 38, 40, 43, 44, 47, 54, 151, 152, 156, 158, 161, 162, 166, 184, 196, 197, 204, 205, 210, 211, 269, 272, 286, 302, 308, 309, 311, 331, 336, 337], "index": [34, 35, 39, 54, 76, 116, 122, 146, 151, 184, 196, 204, 210, 212, 217, 234, 271, 286, 295, 296, 301, 319, 322, 325], "object": [34, 35, 59, 66, 93, 94, 151, 152, 184, 185, 196, 197, 204, 205, 210, 211, 271, 287, 288, 289, 290, 293, 294, 300, 304, 319, 333, 337], "x_tild": [34, 38, 156], "match": [34, 35, 38, 44, 151, 152, 156, 162, 184, 196, 197, 204, 205, 210, 211, 286, 337], "filter": [34, 38, 44, 47, 54, 55, 56, 58, 59, 63, 64, 66, 68, 76, 77, 78, 79, 80, 81, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 156, 162, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 184, 186, 187, 196, 204, 210, 212, 213, 214, 217, 220, 222, 223, 225, 226, 234, 235, 236, 237, 250, 251, 252, 253, 254, 255, 259, 269, 272, 286, 287, 288, 289, 290, 293, 294, 300, 304, 305, 308, 309, 311, 318, 324, 335, 336, 337], "maximum": [34, 35, 38, 106, 134, 151, 155, 156, 176, 184, 196, 204, 210, 269, 272, 285, 301, 308, 309, 311, 324, 333, 337], "likelihood": [34, 38, 151, 155, 156, 176, 184, 196, 204, 210, 324, 333, 337], "abstract": [34, 36, 45, 151, 153, 163], "provid": [34, 36, 45, 98, 151, 153, 163, 184, 196, 204, 206, 208, 210, 286, 296, 326, 336], "log_2": [34, 37, 151, 154, 184, 196, 204, 210, 241, 260, 261, 263, 313], "phase_offset": [34, 35, 42, 151, 152, 160, 184, 185, 196, 197, 204, 205, 207, 210, 211, 240, 266, 267, 275, 285, 286, 301, 302, 312, 332, 333, 334], "degre": [34, 35, 42, 151, 152, 160, 184, 185, 196, 197, 204, 205, 207, 210, 211, 267, 275, 277, 280, 333], "sym": [34, 35, 39, 46, 151, 152, 164, 184, 185, 196, 197, 204, 205, 210, 211, 261, 264, 269, 308, 311, 313, 314, 335], "pulse_shap": [34, 35, 38, 40, 43, 151, 152, 156, 158, 161, 184, 196, 197, 204, 205, 210, 211, 286, 302, 332, 334], "instantan": [34, 35, 43, 266], "tx_filter": [34, 47, 151, 166, 184, 196, 204, 210], "transmit": [34, 47, 95, 151, 166, 176, 179, 184, 196, 198, 199, 204, 210, 266, 286], "coeffici": [34, 44, 47, 54, 56, 76, 77, 100, 102, 128, 131, 146, 147, 151, 162, 166, 184, 196, 204, 210, 214, 234, 236, 287, 288, 289, 290, 293, 294, 300, 304, 305, 330, 331], "rx_filter": [34, 44, 151, 162, 184, 196, 204, 210], "symbol_label": [35, 184, 185, 196, 197, 204, 205, 209, 210, 211, 334], "bin": [35, 185, 197, 205, 209, 211, 266, 285, 296, 301, 334], "8": [35, 54, 76, 80, 82, 116, 126, 134, 144, 146, 152, 184, 185, 196, 197, 204, 205, 206, 208, 209, 210, 211, 212, 220, 222, 223, 226, 234, 245, 252, 258, 266, 270, 271, 274, 280, 284, 286, 287, 288, 289, 290, 293, 294, 298, 300, 302, 303, 304, 305, 308, 311, 319, 321, 330, 331, 332, 333, 335], "rect": [35, 152, 197, 205, 211, 335], "deviat": [35, 39], "delta": [35, 39, 54, 67, 69, 76, 80, 100, 108, 126, 127, 128, 136, 144, 146, 149, 186, 212, 234, 252, 289, 330, 331], "chang": [35, 39, 327, 338], "If": [35, 81, 87, 91, 122, 152, 189, 197, 205, 211, 232, 234, 239, 240, 241, 258, 262, 278, 281, 282, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 299, 300, 301, 302, 310, 315, 317, 336], "string": [35, 152, 197, 205, 211, 274, 292, 299, 337], "npt": [35, 56, 77, 106, 134, 147, 152, 185, 197, 205, 211, 236, 250, 251, 253, 254, 287, 288, 289, 290, 293, 294, 300, 304], "custom": [35, 54, 58, 76, 78, 146, 148, 152, 197, 205, 211, 234, 237, 250, 251, 253, 254, 337], "It": [35, 100, 128, 146, 152, 167, 176, 197, 205, 211, 240], "import": [35, 152, 176, 197, 205, 211, 327, 329, 330, 331, 332, 333, 334, 335, 336], "psd": [36, 45, 153, 163, 206, 208, 241, 260, 261, 263, 264, 284, 298, 313, 314], "p_b": [36, 153], "s_hat": [38, 156, 333, 334], "p_e": [45, 163], "base": [48, 286, 295, 296, 302, 323, 337], "wireless": [48, 323], "configur": [48, 51, 82, 333], "2d": [48, 51, 52, 82, 241, 285, 286, 296], "polyphas": [54, 55, 56, 58, 76, 77, 78, 146, 147, 148, 212, 213, 214, 215, 217, 218, 221, 222, 223, 226, 234, 235, 236, 237, 255, 259, 305, 318, 336, 337], "fir": [54, 55, 56, 76, 77, 79, 80, 81, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 126, 127, 146, 147, 149, 150, 184, 186, 187, 196, 204, 210, 212, 213, 214, 217, 220, 222, 223, 225, 226, 234, 235, 236, 250, 251, 252, 253, 254, 255, 286, 287, 288, 289, 290, 293, 294, 300, 304, 305, 332, 336, 337], "effici": [54, 184, 259, 280, 318], "split": 54, "equal": [54, 122, 184], "ha": [54, 101, 144, 146, 184, 196, 204, 213, 235, 240, 250, 251, 252, 253, 254, 259, 268, 269, 280, 308, 311, 318, 321, 333, 334, 335], "bandwidth": [54, 59, 60, 61, 66, 70, 81, 167, 169, 173, 241, 250, 251, 269, 308, 311, 333, 335, 337], "equival": [54, 76, 127, 146, 234, 240, 241, 250, 251, 252, 253, 254, 264, 271, 286, 314, 319, 327, 329], "first": [54, 76, 93, 116, 119, 146, 147, 184, 196, 212, 217, 234, 236, 278, 289, 302, 317, 326, 328, 337], "f_i": 54, "cdot": [54, 76, 80, 100, 116, 119, 146, 149, 176, 198, 212, 213, 224, 234, 235, 250, 251, 253, 254, 275, 277], "feedforward": [54, 56, 76, 77, 80, 100, 102, 115, 126, 128, 131, 133, 144, 146, 147, 149, 186, 212, 214, 223, 226, 234, 236, 287, 288, 289, 290, 293, 294, 300, 304, 305, 330, 331], "instead": [54, 76, 146, 234], "commut": [54, 76, 146, 212, 214, 218, 221, 234], "parallel": [54, 76, 146, 212, 214, 221, 234], "fourier": 54, "transform": 54, "idft": 54, "produc": [54, 55, 101, 146, 212, 213, 214, 221, 234, 235, 269, 335], "bottom": [54, 76, 146, 212, 214, 218, 221, 234], "top": [54, 76, 146, 212, 214, 218, 221, 234], "relat": [54, 76, 146, 212, 223, 226, 234, 241, 269], "j": [54, 76, 106, 128, 131, 132, 134, 144, 146, 149, 184, 188, 196, 204, 210, 212, 223, 226, 234, 240, 258, 275, 277, 321, 330, 331], "fred": [54, 76, 146, 234, 255, 305], "harri": [54, 76, 146, 234, 250, 251, 253, 254, 255, 305], "process": [54, 76, 88, 89, 90, 92, 146, 149, 186, 229, 230, 231, 233, 234, 255, 305, 331, 333, 336], "system": [54, 76, 146, 234, 255, 264, 271, 305, 314, 319, 326, 328, 333, 336], "tone": 54, "increas": [54, 81, 268, 280, 331], "10_000": 54, "rang": [54, 176, 198, 285, 333, 334], "overlai": 54, "boundari": [54, 184], "so": [54, 196, 204, 210, 268, 269, 272, 308, 309, 311, 336], "wrap": 54, "from": [54, 93, 107, 110, 128, 129, 144, 147, 149, 151, 165, 184, 196, 204, 209, 210, 212, 214, 218, 221, 236, 249, 260, 261, 263, 264, 276, 283, 292, 299, 306, 307, 313, 314, 325, 330, 331, 333, 336], "posit": [54, 275], "neg": [54, 268, 275], "fft": [54, 259, 292, 299, 315, 316, 318], "1024": [54, 106, 107, 110, 134, 287, 288, 290, 293, 294, 332, 335], "color": [54, 80, 144, 286, 295, 296, 302, 332, 335], "label": [54, 76, 80, 89, 91, 116, 126, 144, 146, 149, 176, 185, 186, 197, 198, 205, 206, 208, 211, 230, 232, 234, 238, 240, 250, 251, 252, 253, 254, 266, 267, 269, 271, 275, 284, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 298, 299, 302, 308, 311, 312, 319, 329, 332, 333, 334, 335], "f_start": 54, "f_stop": 54, "fill_betweenx": 54, "80": [54, 56, 77, 80, 147, 236, 255, 321], "xtick": 54, "legend": [54, 80, 126, 144, 176, 198, 238, 332, 333, 335], "spread": [54, 271, 319], "across": [54, 80, 214, 238, 265, 273], "10000": 54, "1001": 54, "11": [54, 82, 116, 146, 184, 196, 204, 210, 245, 255, 270, 271, 305, 319, 321, 325, 331], "12": [54, 116, 146, 184, 196, 204, 210, 231, 233, 238, 245, 270, 305, 330, 334], "full": [54, 55, 76, 101, 146, 212, 213, 234, 235, 242, 271, 319], "__len__": [54, 76, 80, 100, 103, 126, 146, 186, 212, 234], "state": [54, 55, 59, 72, 76, 79, 80, 100, 101, 105, 111, 112, 114, 116, 120, 122, 123, 124, 126, 128, 139, 140, 142, 144, 146, 149, 186, 212, 213, 225, 234, 235, 337], "flush": [54, 55, 76, 80, 100, 101, 105, 116, 120, 126, 146, 186, 212, 213, 234, 235, 337], "consist": [54, 76, 80, 95, 96, 97, 98, 99, 100, 112, 116, 123, 126, 146, 186, 212, 234], "previou": [54, 56, 76, 77, 80, 81, 100, 102, 112, 116, 118, 122, 123, 126, 129, 131, 145, 146, 147, 149, 150, 186, 187, 212, 214, 234, 236, 256, 257], "u": [54, 76, 80, 100, 113, 126, 128, 141, 144, 146, 149, 186, 212, 234, 238, 300, 321, 322, 330, 331], "frequency_respons": [54, 76, 80, 100, 106, 126, 128, 134, 144, 146, 149, 186, 212, 234, 337], "float64": [54, 76, 80, 100, 106, 126, 128, 134, 144, 146, 149, 186, 188, 189, 212, 234, 242, 271, 319, 322], "complex128": [54, 76, 80, 100, 106, 126, 128, 134, 144, 146, 149, 186, 188, 189, 212, 234], "polyphase_tap": [54, 76, 146, 212, 220, 222, 223, 226, 234], "polyphase_ord": [54, 56, 76, 77, 146, 147, 212, 220, 222, 234, 236, 255, 337], "hold": [54, 76, 146, 147, 212, 214, 218, 234, 236, 278, 337], "connect": [54, 76, 146, 212, 214, 218, 221, 234], "sum": [54, 76, 88, 100, 128, 146, 212, 214, 221, 229, 234, 335], "all": [54, 76, 93, 98, 146, 189, 212, 214, 221, 234, 266, 286, 295, 296, 326, 328, 336, 337], "integ": [54, 76, 106, 134, 146, 212, 216, 219, 234, 278], "resampl": [54, 76, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 146, 212, 213, 224, 234, 235, 236, 237, 255, 305, 336, 337], "correspond": [54, 76, 93, 98, 116, 119, 146, 212, 217, 234, 296], "l": [55, 101, 126, 127, 130, 150, 186, 187, 213, 235, 252], "convolut": [55, 101, 146, 213, 235], "have": [55, 127, 242, 252, 259, 271, 278, 302, 317, 318, 319], "proport": [55, 59, 63, 167, 169, 174, 213, 235, 268, 280, 324, 337], "align": [55, 101, 147, 196, 213, 235, 236, 271, 319, 329], "where": [55, 66, 82, 87, 101, 116, 119, 152, 167, 169, 173, 205, 211, 213, 229, 235, 240, 241, 258, 260, 261, 263, 269, 313, 321, 330, 331, 336], "final": [55, 101, 213, 235], "d": [55, 80, 100, 104, 116, 119, 126, 186, 265, 268, 273, 280, 325, 327, 336], "dictat": [55, 101, 213, 235], "argument": [55, 56, 77, 101, 147, 213, 235, 236, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 326, 330, 331, 337], "23": [56, 77, 147, 236, 255, 280], "atten": [56, 77, 147, 236, 250, 251, 253, 254, 255, 337], "specif": [56, 77, 98, 106, 134, 147, 236, 328, 335], "must": [56, 77, 118, 147, 236, 240, 250, 251, 253, 254, 255, 269, 271, 277, 296, 308, 311, 319, 321], "odd": [56, 77, 127, 147, 210, 236, 252, 255, 315], "even": [56, 77, 127, 147, 210, 236, 250, 251, 252, 253, 254, 255, 269, 308, 311], "stopband": [56, 77, 147, 236, 255, 308, 311], "a_": [56, 77, 147, 176, 177, 178, 180, 236, 255], "stop": [56, 77, 147, 236, 255], "closedlooppl": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 324, 333, 337], "defin": [59, 82, 100, 128, 144, 240, 258, 269, 297, 308, 311, 321, 324, 331, 336], "close": [59, 66, 68, 324, 336, 337], "loop": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 167, 168, 169, 170, 171, 172, 173, 174, 175, 188, 189, 190, 191, 192, 193, 194, 195, 336, 337], "pll": [59, 60, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 324, 336, 337], "analysi": [59, 66, 326, 333, 336, 337], "bb": [59, 332, 333], "phase_err": [59, 333], "ped": [59, 65, 66, 169, 176, 180, 181, 182, 198, 199, 200, 201, 202, 203, 324, 333, 336, 337], "lf": [59, 333], "phase_est": [59, 333], "lo": [59, 333], "nco": [59, 62, 66, 169, 188, 189, 190, 191, 192, 193, 194, 195, 324, 333, 336, 337], "local": [59, 325, 333], "oscil": [59, 188, 190, 324, 333, 336, 337], "numer": [59, 188, 190, 324, 331, 333, 336, 337], "transfer": [59, 68, 100, 128, 129, 149, 167, 269, 308, 311, 330, 331, 333], "2nd": [59, 167, 169, 324, 333, 337], "plu": [59, 167, 169, 324, 337], "h_": [59, 80, 333], "k_1": [59, 63, 167, 174, 333], "k_2": [59, 64, 167, 172, 333], "frac": [59, 67, 69, 72, 73, 80, 88, 89, 90, 92, 100, 104, 126, 128, 144, 147, 149, 167, 186, 196, 204, 210, 229, 230, 231, 236, 238, 239, 240, 241, 248, 260, 261, 263, 264, 266, 268, 269, 275, 276, 277, 279, 280, 308, 310, 311, 313, 314, 320, 321, 333], "k_0": [59, 62, 66, 169, 188, 190, 191, 333], "k_p": [59, 65, 66, 169, 176, 183, 198, 203, 333], "appendix": [59, 167, 308, 311], "lock": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 167, 168, 169, 170, 171, 172, 173, 174, 175, 188, 189, 190, 191, 192, 193, 194, 195, 336], "see": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 79, 81, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 142, 143, 145, 150, 167, 168, 169, 170, 171, 172, 173, 174, 175, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 204, 207, 209, 210, 225, 234, 250, 251, 253, 254, 259, 269, 272, 287, 288, 289, 290, 293, 294, 300, 304, 308, 309, 311, 336], "noise_bandwidth": [59, 66, 167, 169, 173], "damping_factor": [59, 66, 167, 169, 170], "phase_lock_tim": [59, 73], "frequency_lock_tim": [59, 67], "freq_offset": [59, 67, 69], "lock_tim": [59, 69, 333], "phase_error_vari": [59, 72], "cn0": [59, 72], "varianc": [59, 72, 88, 90, 92, 231, 233, 240], "steadi": [59, 72], "sample_r": [59, 66, 74, 76, 106, 107, 110, 116, 134, 146, 234, 259, 267, 277, 286, 287, 288, 290, 292, 293, 294, 295, 296, 299, 302, 315, 316, 318, 329, 333, 335], "bnt": [59, 61, 333], "b_n": [59, 60, 61, 66, 67, 69, 72, 73, 167, 169, 173], "bn": [59, 60], "hz": [59, 60, 66, 67, 69, 72, 106, 107, 110, 134, 167, 169, 173, 241, 249, 259, 267, 268, 269, 276, 277, 280, 315, 316, 320, 329], "zeta": [59, 66, 75, 167, 169, 170], "damp": [59, 66, 75, 167, 169, 170, 333], "k0": [59, 62, 66, 169, 188, 333], "kp": [59, 65, 66, 169, 333], "k1": [59, 63, 167, 333], "k2": [59, 64, 167, 333], "omega_n": [59, 71, 333], "natur": [59, 71], "radian": [59, 70, 71, 72, 176, 179, 181, 182, 188, 189, 190, 192, 193, 198, 199, 201, 202, 210, 333], "omega_3db": [59, 70], "omega_": [59, 70], "textrm": [59, 70], "period": [66, 167, 169, 173, 184, 321], "second": [66, 67, 69, 73, 93, 167, 169, 173, 269], "critic": [66, 75, 167, 169, 170, 333], "underdamp": [66, 75, 167, 169, 170], "overdamp": [66, 75, 167, 169, 170], "ted": [66, 169], "t_": [67, 69, 73, 117, 269, 308, 311, 335], "fl": [67, 69], "take": [67, 69, 73, 325], "onto": [67, 69, 73], "39": 67, "pl": [69, 73, 326], "38": 69, "34": [70, 302], "33": 71, "sigma_": [72, 88, 89, 91], "theta_": [72, 176, 179, 198, 199], "carrier": [72, 204], "43": 72, "40": [73, 80, 116, 146, 234, 259], "less": [75, 238], "than": [75, 184, 185, 197, 205, 209, 211, 238, 272, 275, 285, 301, 309], "greater": [75, 308, 311], "prevent": [76, 146, 196, 210, 234], "need": [76, 146, 234, 325, 326, 328], "done": [76, 325], "case": [76, 146, 210, 229, 234, 308, 311], "3x": [76, 146], "v": [76, 188, 212, 249, 276, 325], "summat": [76, 212], "co": [76, 116, 146, 188, 234, 277, 308, 311], "64": [76, 126, 252, 274, 331], "280": 76, "marker": [76, 116, 146, 188, 234, 285, 301, 302, 329, 330, 331, 334], "o": [76, 116, 146, 234, 329], "true": [76, 89, 90, 91, 92, 106, 116, 134, 146, 176, 181, 182, 184, 196, 198, 201, 202, 204, 206, 208, 210, 230, 231, 232, 233, 234, 239, 243, 246, 258, 262, 271, 277, 281, 282, 285, 286, 294, 296, 299, 301, 302, 303, 310, 319, 333, 334], "y1": [76, 116, 146, 234, 275], "70": [76, 274], "y2": [76, 116, 146, 234, 275], "140": [76, 259], "y3": [76, 116, 146, 234], "210": 76, "y4": [76, 116, 146, 234], "y5": [76, 116, 146, 234], "y_1": [76, 146, 234, 275], "y_2": [76, 146, 234, 275], "y_3": [76, 146, 234], "y_4": [76, 146, 234], "y_5": [76, 146, 234], "win": 80, "quad": [80, 186], "le": [80, 127, 186, 238, 252, 277, 280, 308, 311], "truncat": 80, "same": [80, 101, 176, 198, 286, 302, 330], "deriv": 80, "fir_2": 80, "fir_6": 80, "fir_10": 80, "fir_20": 80, "fir_40": 80, "fir_80": 80, "y_axi": [80, 290, 292, 299, 337], "ab": [80, 144, 242, 271, 319, 321, 335], "linestyl": [80, 144, 176, 184, 196, 198, 204, 210, 285, 296, 301, 303, 321, 329, 334, 335], "theori": [80, 88, 89, 90, 92, 144, 229, 230, 231, 233], "lfloor": [80, 100, 104, 126, 186], "rfloor": [80, 100, 104, 126, 186], "blackman": [81, 250, 251, 253, 254], "scipi": [81, 100, 128, 250, 251, 253, 254, 292, 299, 331, 335, 336], "definit": [81, 287, 288, 289, 290, 293, 294, 300, 304], "get_window": 81, "detail": 81, "discretememorylesschannel": [82, 83, 84, 85, 86, 87, 323], "memoryless": [82, 87, 258, 323, 336], "dmc": [82, 83, 84, 85, 87, 258, 323, 336, 337], "max_": 82, "mutual": [82, 302], "inform": [82, 204, 260, 261, 263, 271, 313, 319], "pr": [87, 258], "y_j": [87, 258], "assum": [87, 88, 229, 240, 258, 278, 302, 317], "ldot": [87, 258], "null": [88, 229, 335], "altern": [88, 229, 331], "hypothes": [88, 229], "w": [88, 229, 240, 329, 330, 331, 332, 333, 334, 335], "sigma": [88, 89, 90, 91, 92, 229, 230, 231, 232, 233, 240, 241], "_0": [88, 229], "_1": [88, 229], "test": [88, 229, 326, 327, 336], "statist": [88, 89, 90, 92, 229, 230, 231, 233], "limits_": [88, 100, 128, 229], "left": [88, 89, 90, 126, 128, 196, 198, 204, 210, 229, 230, 231, 233, 238, 239, 240, 241, 262, 265, 266, 268, 269, 275, 277, 280, 281, 282, 308, 310, 311, 321], "right": [88, 89, 90, 128, 196, 198, 204, 210, 229, 230, 231, 233, 238, 239, 240, 241, 262, 265, 266, 268, 269, 275, 277, 280, 281, 282, 308, 310, 311, 321], "gamma": [88, 90, 92, 229, 231, 233, 238], "sim": [88, 229, 240, 326], "chi_": [88, 89, 90], "2n": [88, 89, 90], "under": [88, 229], "detect": [88, 89, 90, 91, 92, 176, 179, 181, 182, 198, 199, 201, 202, 229, 230, 231, 232, 233, 238, 291, 297, 337], "threshold": [88, 90, 92, 229, 231, 233], "q_": [88, 89, 90, 92], "chi_n": [88, 89, 90, 92], "steven": [88, 89, 90, 92, 229, 230, 231, 233], "kai": [88, 89, 90, 92, 229, 230, 231, 233], "fundament": [88, 89, 90, 92, 229, 230, 231, 233], "n_nc": [88, 89, 90, 91, 92, 238], "For": [89, 90, 92, 230, 231, 233, 240, 259, 268, 318, 325, 330], "1e": [89, 230, 267, 334], "sigma2": [90, 92, 231, 233], "logspac": [91, 106, 134, 232, 238], "theoret": [91, 206, 208, 284, 298, 334, 337], "variou": [91, 126, 326, 335], "1_000": [91, 149, 186, 240, 267, 268, 275, 285, 286, 312, 332], "000": [91, 267, 286], "5_000": 91, "measur": [93, 95, 239, 240, 248, 249, 262, 265, 266, 273, 276, 279, 281, 282, 310, 333, 336, 337], "accumul": [93, 144, 188, 189, 190, 192, 333, 337], "contain": [93, 240, 274], "add": [93, 95, 98, 184, 196, 204, 210, 240, 267, 272, 285, 286, 296, 309, 312, 323, 334, 338], "total": [93, 269, 272, 308, 309, 311, 335], "count": [93, 96, 266], "error_r": [93, 97, 98, 334], "can": [93, 95, 96, 97, 99, 167, 184, 212, 240, 266, 269, 271, 278, 286, 289, 292, 299, 319, 327, 330, 331, 334, 336, 338], "obtain": 93, "tabul": [93, 94], "ascend": [93, 98], "other": [95, 96, 97, 99, 329, 338], "quantiti": [95, 96, 97, 98, 99], "user": [95, 96, 97, 99, 330, 331], "caution": [95, 96, 97, 99], "instanc": [95, 96, 97, 99, 184], "whatev": 98, "wa": [98, 241], "wrapper": [100, 128], "convolv": 100, "support": [100, 128, 337], "one": [100, 128, 185, 196, 197, 205, 209, 211, 269, 274, 287, 288, 290, 292, 293, 294, 299, 315, 330, 331, 332, 335], "sum_": [100, 128, 231, 233, 239, 240, 241, 262, 265, 266, 273, 310], "valid": [101, 268, 286, 295, 296, 321], "remain": [105, 120, 259, 278], "whole": [106, 134, 335], "decad": [106, 134, 287, 288, 290, 293, 294, 330, 333], "point": [106, 134, 181, 182, 201, 202, 285, 292, 299], "endpoint": [106, 134, 331], "includ": [106, 134, 326, 327, 328, 336], "max_f": [106, 134], "log10": [106, 134, 335], "evenli": [106, 134], "00000000e": [106, 134, 209, 210, 331], "00": [106, 134, 209, 210, 331], "76562500e": [106, 134], "04": [106, 134, 274, 331], "95312500e": [106, 134], "03": [106, 134, 274, 331], "97070312e": [106, 134], "98046875e": [106, 134], "99023438e": [106, 134], "95337172": 106, "30202676j": 106, "8178049": 106, "5759632j": 106, "6058636": 106, "79630028j": 106, "rad": [106, 134], "0000000000000002": 106, "0j": [106, 134, 185, 197, 205, 211], "sever": [106, 134], "200": [106, 134, 259, 296, 334], "300": [106, 134, 315, 316], "400": [106, 134, 259], "00391660e": 106, "11022302e": 106, "16j": [106, 209, 210], "53081763e": 106, "79453110e": 106, "17j": 106, "62720131e": 106, "99104274e": 106, "83622458e": 106, "17093835e": 106, "structur": 116, "angular": 116, "179": 116, "farrow1": 116, "quadrat": [116, 337], "farrow2": 116, "cubic": 116, "farrow3": 116, "quartic": [116, 337], "farrow4": 116, "13": [116, 146, 184, 196, 204, 210, 229, 230, 231, 233, 242, 245, 270, 302, 305, 337], "14": [116, 184, 196, 204, 210, 230, 245, 270, 305, 326, 327, 337], "compar": [116, 149, 176, 186, 198, 206, 208, 250, 251, 252, 253, 254, 289, 335], "vari": [116, 189], "15": [116, 176, 184, 196, 204, 210, 232, 245, 270, 271, 305, 318, 319], "xlim": [116, 259, 318, 332, 333, 335], "comparison": [116, 176, 198, 326], "run": [116, 325], "17": [116, 184, 209, 210, 266, 280, 305, 325], "18": [116, 305, 325, 334], "30": [116, 146, 149, 184, 186, 196, 204, 210, 234, 259, 287, 289, 300, 315, 316, 331, 337], "concaten": [116, 331], "19": [116, 305, 337], "should": [122, 176, 184, 327], "three": [122, 329, 335], "21719": 126, "examin": [126, 184, 196, 204, 210], "flat": [126, 252], "32": [126, 252, 329], "128": 126, "loc": 126, "lower": [126, 184, 196, 210, 308, 311], "effect": 126, "outsid": [126, 331], "symmetri": 126, "about": [126, 250, 251, 302, 328], "band": 126, "worst": 126, "1f": 126, "around": [126, 185, 197, 205, 211], "perfectli": 126, "exactli": 126, "best": [127, 252], "append": [127, 252, 315, 332], "lfilter": 128, "b_i": [128, 131, 133, 144, 149, 287, 288, 289, 290, 293, 294, 300, 304, 331], "feedback": [128, 131, 132, 144, 149, 287, 288, 289, 290, 293, 294, 300, 304, 331], "a_j": [128, 131, 132, 144, 149, 287, 288, 289, 290, 293, 294, 300, 304, 331], "These": [128, 196, 204, 210, 303, 327, 333], "differ": [128, 149, 185, 197, 205, 209, 211, 250, 251, 252, 253, 254, 271, 289, 302, 319, 321, 335], "a_0": 128, "classmethod": [128, 129, 144, 149], "zerospol": [128, 129, 134, 144, 149, 287, 288, 289, 290, 293, 294, 300, 304, 331], "self": [128, 129, 144, 149], "b_tap": [128, 133, 144, 149, 331], "a_tap": [128, 132, 144, 149, 331], "conj": [134, 287, 288, 289, 290, 293, 294, 300, 304, 331, 333], "4722987": 134, "47271105": 134, "0041658j": 134, "47394825": 134, "00830241j": 134, "47601067": 134, "01238051j": 134, "472298696877605": 134, "36961426": 134, "9678537j": 134, "57338213": 134, "77694738j": 134, "52496713": 134, "3885743j": 134, "51520024": 134, "1706839j": 134, "accordingli": 144, "dc": [144, 252], "backward": [144, 145, 337, 338], "trapezoid": [144, 145, 337], "forward": [144, 145, 188, 195, 337], "iir_back": 144, "iir_trap": 144, "iir_forw": 144, "y_back": 144, "y_trap": 144, "y_forw": 144, "height": 145, "recommend": 146, "wai": [146, 327], "zoh": [146, 147, 148, 234, 236, 237], "matlab": [146, 147, 148, 234, 236, 237, 336], "2p": [147, 236], "ramp": [147, 167, 236], "advanc": [147, 236], "ones": [147, 236, 250, 251, 253, 254, 333], "approxim": [149, 150, 238, 337], "rememb": 149, "scale": [149, 176, 287, 288, 290, 292, 293, 294, 299, 330, 331], "\u03b1": 149, "35": [149, 186, 333], "y_fir": [149, 186], "y_iir": [149, 186], "map_symbol": [151, 157, 184, 196, 204, 210, 240, 266, 267, 275, 285, 312, 332, 333, 334, 337], "decide_symbol": [151, 155, 184, 196, 204, 210, 333, 334, 337], "a_tild": [151, 155, 184, 196, 204, 210, 333, 334], "mle": [151, 155, 184, 196, 204, 210], "dot": [151, 152, 165, 184, 196, 204, 209, 210, 301], "mapsto": [151, 152, 165, 184, 196, 204, 209, 210, 301], "mathbb": [151, 152, 165, 184, 196, 204, 209, 210, 241, 301, 321], "whose": [152, 185, 197, 204, 205, 211], "roll": [152, 197, 205, 211, 321, 335], "off": [152, 197, 205, 211], "loopfilt": [167, 168, 169, 170, 171, 172, 173, 174, 175, 324, 333, 337], "ppi": [167, 169, 324], "track": 167, "constant": [167, 184, 188, 190, 192, 292, 299, 331, 333], "cannot": 167, "chirp": 167, "proportional_gain": [167, 174], "integral_gain": [167, 172], "underli": [167, 171], "mlped": [176, 177, 178, 179, 180, 181, 182, 183, 324, 333, 337], "ml": [176, 180, 324, 333], "aid": [176, 181, 198, 201], "known": [176, 179, 198, 199, 240, 271, 319], "da": [176, 198], "im": 176, "re": [176, 229], "direct": [176, 182, 198, 202, 337], "qpsk": [176, 196, 198, 204, 206, 207, 208, 210, 240, 266, 267, 284, 285, 286, 298, 301, 302, 312, 333, 336, 337], "a_rx": 176, "a_ref": 176, "da_error": [176, 198], "data_aided_error": [176, 181, 198, 201], "dd_error": [176, 198], "decision_directed_error": [176, 182, 198, 202], "grid": [176, 198, 303], "observ": [176, 198, 252, 280, 286], "slope": [176, 198], "rx": [176, 177, 180], "both": [176, 198, 285, 301, 302, 303], "veri": [176, 336], "becaus": [176, 271, 319], "unambigu": [176, 198], "a_receiv": [176, 177, 180], "a_refer": [176, 178, 180], "simul": [176, 181, 182, 198, 201, 202, 334, 336], "scheme": [176, 181, 182, 184, 196, 198, 201, 202, 204, 210, 337], "either": [179, 188, 199, 266], "modem": [181, 182, 184, 196, 201, 202, 204, 210], "n_point": [181, 182, 201, 202], "similar": [184, 196, 210, 335], "One": [184, 196, 210, 335], "distinct": [184, 196, 210], "result": [184, 196, 210, 239, 262, 268, 280, 281, 282, 308, 310, 311, 334], "envelop": [184, 330, 331], "which": [184, 196, 210, 239, 240, 241, 262, 265, 267, 273, 275, 279, 280, 281, 285, 286, 288, 290, 292, 293, 294, 299, 301, 303, 312, 335], "consid": [184, 274], "cpfsk": 184, "separ": [184, 286], "45": [184, 185, 196, 197, 204, 207, 240, 266, 267, 275, 277, 285, 286, 301, 302, 312, 332, 333, 334], "uint8": [184, 196, 204, 210, 278, 317], "complex_symbol": [184, 196, 204, 210], "70710678": [184, 196, 204], "70710678j": [184, 196, 204], "tx_sampl": [184, 196, 204, 210, 286], "50": [184, 196, 204, 210, 249, 276, 283, 301, 302, 315, 316, 329, 332], "like": [184, 327, 336, 337], "figsiz": [184, 196, 204, 210, 286, 287, 303, 330, 331, 333], "suptitl": [184, 196, 204, 210, 286, 333, 334], "noiseless": [184, 196, 204, 210, 266], "trajectori": 184, "although": 184, "lead": [184, 275, 334], "spectral": [184, 259, 292, 332, 335], "gmsk": 184, "rx_sampl": [184, 196, 204, 210, 286], "manual": [184, 196, 204, 210, 326, 328], "mf": [184, 196, 204, 210, 286], "mf_sampl": [184, 196, 204, 210], "noisi": [184, 196, 204, 210, 240], "last": [184, 196, 278, 325], "rx_symbol": [184, 196, 204, 210], "rx_complex_symbol": [184, 196, 204, 210], "_": [184, 196, 204, 210, 238, 266], "array_equ": [184, 196, 204, 210, 271, 319], "absolut": [185, 188, 190, 193, 197, 211, 241], "consecut": [185, 197, 205, 211], "adjac": [185, 197, 205, 209, 211, 334, 335], "mai": [185, 197, 205, 209, 211, 266, 285, 296, 299, 301, 303, 331], "more": [185, 197, 205, 209, 211, 337], "start": [185, 197, 205, 211, 325], "go": [185, 197, 205, 211], "counter": [185, 197, 205, 211], "clockwis": [185, 197, 205, 211], "circl": [185, 197, 205, 211, 331], "increment": [188, 189, 190, 192, 333], "sin": [188, 240, 308, 311, 315], "Then": 188, "fsk": 188, "60": [188, 250, 251, 253, 254, 335], "repeat": 188, "cp": 188, "57": 188, "bpsk": [188, 206, 208, 284, 298, 332], "format": [189, 242, 271, 319, 337], "option": [189, 287, 288, 290, 292, 293, 294, 299, 337], "convent": [196, 210], "independ": 196, "apart": 196, "taken": [196, 204, 210, 212], "jq": 196, "begin": [196, 210, 229, 286, 308, 311], "end": [196, 210, 229, 286, 308, 311, 315, 326], "nyquist": [196, 204, 210, 250, 251, 253, 254, 259, 286, 318, 335], "isi": [196, 204, 210, 286], "present": [196, 204, 210], "persist": [196, 204, 210, 285, 286, 296, 299, 334], "cascad": [196, 204, 210, 286], "therefor": [196, 204, 210, 335], "remov": [196, 204, 210, 277, 292, 299, 337], "without": [196, 204, 210, 337], "heurist": [198, 324, 333, 337], "dd": [198, 333, 337], "encod": [204, 206, 208, 256, 257, 336], "ge": [205, 211, 238, 308, 311], "were": [206, 208], "simon": [206, 208], "alouini": [206, 208], "fade": [206, 208], "optimum": [206, 208], "psk8": [206, 208, 284, 298, 334], "psk16": [206, 208, 284, 298, 334], "de": [206, 208, 333, 337], "se": [208, 298], "00j": [209, 210], "07106781e": [209, 210], "01j": [209, 210], "12323400e": [209, 210], "83697020e": 209, "22464680e": [209, 210], "annot": [209, 301, 337], "rotat": [210, 277, 333], "rel": [210, 321, 335], "2m": 210, "displaystyl": [210, 308, 311], "pi4_qpsk": 210, "partit": [212, 214, 218, 221], "befor": [223, 226, 333, 338], "decomposit": [223, 226, 337], "exceed": [227, 228], "15865525393145707": [227, 228], "158655": [227, 228], "0000010494310452": [227, 228], "perfect": 229, "knowledg": 229, "cn": [229, 240], "mathrm": 229, "sqrt": [229, 230, 231, 233, 238, 265, 266, 269, 310, 311, 321, 332, 333, 335], "____": 234, "ln": [238, 269], "62": [238, 274], "log_": [238, 239, 249, 262, 268, 279, 281, 282, 310], "54": [238, 274], "44": 238, "12ab": 238, "7b": 238, "claim": 238, "leq": 238, "8096": 238, "radarsp": 238, "weebli": 238, "upload": 238, "21471216": 238, "albersheim_alternative_form": 238, "pdf": [238, 269], "bpb": 238, "w2": 238, "wpmucdn": 238, "site": [238, 325, 331], "gatech": 238, "edu": 238, "dist": [238, 326], "462": 238, "file": [238, 326, 328], "2016": 238, "noncoher": 238, "www": [238, 250, 251, 252, 253, 254, 255, 269, 271, 319], "mathwork": [238, 250, 251, 252, 253, 254, 255, 269, 271, 319], "help": [238, 250, 251, 252, 253, 254, 255, 269, 271, 319], "html": [238, 250, 251, 252, 253, 254, 255, 269, 271, 319, 325], "semilogx": [238, 297], "nuse": 238, "axi": [239, 262, 265, 273, 279, 281, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 301, 302, 329, 337], "avg": [239, 240, 279], "ax": [239, 262, 265, 273, 279, 281, 303, 337], "along": [239, 262, 265, 273, 279, 281, 337], "entir": [239, 262, 265, 273, 279, 281], "decibel": [239, 249, 262, 276, 281, 282, 310, 336, 337], "ad": [240, 285, 286, 296, 326, 336, 337], "explicitli": 240, "set": [240, 268, 271, 285, 292, 296, 299, 301, 303, 319, 326, 328, 331], "zorder": [240, 267, 312], "infti": [240, 241], "nand": 240, "monoton": 241, "limit": [241, 285, 301, 334], "At": 241, "occur": 241, "view": [241, 326, 336], "59": 241, "shannon": 241, "semilogi": [241, 284, 297, 298], "barker": [242, 322, 336, 337], "bipolar": [242, 271, 319, 337], "seq": [242, 271, 319], "ideal": [242, 334], "minim": 242, "autocorrel": [242, 271, 319, 321], "sidelob": [242, 250, 251, 253, 254, 271, 308, 311, 319, 321], "corr": [242, 321], "lag": [242, 271, 319, 321], "cf": 248, "v_": [248, 249, 276, 282, 310], "en": [248, 279, 321], "wikipedia": [248, 279, 321], "org": [248, 279, 321], "wiki": [248, 279, 321], "type": [249, 266, 276, 278, 292, 297, 299, 317, 337], "voltag": [249, 276, 282, 310, 336], "x_": [249, 276], "mhz": [249, 276], "77": [249, 274, 276], "50e6": 249, "76": [249, 274], "98970004336019": 249, "mw": [249, 276], "dbm": [249, 276], "dbv": [249, 276], "020599913279624": 249, "center_freq": [250, 251], "hann": [250, 251, 253, 254, 292, 299], "chebyshev": [250, 251, 253, 254], "side": [250, 251, 269, 287, 288, 290, 292, 293, 294, 299, 330, 331, 332, 335], "No": [250, 251, 253, 254], "blackmanharri": [250, 251, 253, 254], "chebwin": [250, 251, 253, 254], "dsp": [250, 251, 252, 253, 254, 255, 336], "designbandpassfir": 250, "h_ham": [250, 251, 253, 254], "h_hann": [250, 251, 253, 254], "h_blackman": [250, 251, 253, 254], "h_blackman_harri": [250, 251, 253, 254], "h_chebyshev": [250, 251, 253, 254], "h_kaiser": [250, 251, 253, 254], "larger": [251, 272, 275, 285, 301, 309], "designbandstopfir": 251, "tau": 252, "l_": 252, "designfracdelayfir": 252, "h_8": [252, 308, 311], "h_16": [252, 308, 311], "h_32": 252, "h_64": 252, "cutoff_freq": [253, 254], "cutoff": [253, 254], "f_c": [253, 254], "designhighpassfir": 253, "designlowpassfir": 254, "designmultiratefir": 255, "oplu": [256, 257, 273], "uncod": 257, "doe": [259, 318], "anti": [259, 318, 337], "alias": [259, 318, 337], "x1": 259, "x2": 259, "130": 259, "x3": [259, 321], "spectrum": [259, 287, 288, 290, 292, 293, 294, 299, 315, 316, 318], "content": 259, "abov": [259, 318], "fold": 259, "cw": 259, "unalias": 259, "2048": [259, 315, 316, 318, 332], "qam": [260, 261, 263, 313], "249387366082999": [260, 261], "020599913279625": [260, 314], "7506126339170005": [263, 313], "979400086720376": [263, 264], "norm": [266, 269, 272, 296, 308, 309, 311], "sourc": 266, "max": [266, 281, 282], "percentil": [266, 299], "035042652361259": 266, "977548047387168": 266, "209548778772119": 266, "95th": 266, "95": 266, "24145780923157": 266, "inst_evm": 266, "hist": 266, "histogram": [266, 285, 286, 296], "frequency_offset": [267, 323, 337], "freq_rat": 267, "cycl": [267, 302], "5e": 267, "deg": [267, 275, 333], "path": [268, 336], "loss": [268, 336], "meter": [268, 280, 320], "transmitt": 268, "far": 268, "field": 268, "impli": 268, "possibl": [268, 336], "km": 268, "link": [268, 336, 337], "ghz": [268, 280, 320], "1e3": [268, 277, 315], "1e9": [268, 280, 320], "92": 268, "44778322188337": 268, "doubl": [268, 280], "2e3": 268, "98": 268, "468383135163": 268, "2e9": 268, "up": [268, 326], "product": [269, 335], "thought": [269, 338], "smaller": [269, 308, 311, 335], "wider": 269, "gaussdesign": 269, "onlinelibrari": 269, "wilei": 269, "doi": 269, "1002": 269, "9780470041956": 269, "app2": 269, "h_0p1": [269, 308, 311], "h_0p2": 269, "h_0p3": 269, "hadamard": [271, 319, 322, 336, 337], "comm": [271, 319], "hadamardcod": 271, "walsh": [271, 319, 322, 336, 337], "thei": [271, 319, 338], "cross": [271, 319, 321], "seq1": [271, 319], "seq2": [271, 319], "seq3": [271, 319], "quit": [271, 319], "larg": [271, 319, 326], "misalign": [271, 319], "precis": [271, 319], "xcorr12": [271, 319], "xcorr13": [271, 319], "xcorr23": [271, 319], "uniform": [271, 319], "fact": [271, 319], "high": [271, 319], "acorr1": [271, 319], "acorr2": [271, 319], "acorr3": [271, 319], "reason": [272, 309, 325], "h_half_sin": 272, "displai": [274, 285, 287, 288, 290, 292, 293, 294, 299, 301], "line": [274, 302, 326, 332], "print": [274, 329, 330, 331, 333], "quick": 274, "brown": 274, "fox": 274, "jump": 274, "lazi": 274, "dog": 274, "00000000": 274, "68": 274, "65": 274, "71": 274, "69": 274, "63": 274, "6b": 274, "72": 274, "6f": 274, "6e": 274, "00000010": 274, "66": 274, "78": 274, "6a": 274, "6d": 274, "73": 274, "74": 274, "00000020": 274, "6c": 274, "61": 274, "7a": 274, "79": 274, "67": 274, "he": 274, "02": [274, 331, 333], "00000004": 274, "05": [274, 329, 331, 333], "06": 274, "07": 274, "08": 274, "00000008": 274, "09": 274, "0a": 274, "iq_imbal": [275, 323, 337], "iq": [275, 323, 336], "imbal": [275, 323, 336], "compon": [275, 315, 316, 318], "g_i": 275, "180": 275, "g_q": 275, "x_q": 275, "horizont": 275, "stretch": 275, "while": [275, 335], "vertic": 275, "subplot": [275, 286, 333, 334], "northwest": 275, "northeast": 275, "50118723": 276, "36272725": 276, "9952623149688795": 276, "satisfi": 277, "dtypelik": [278, 317], "most": [278, 317], "signific": [278, 317], "enough": 278, "fill": 278, "smallest": 278, "unsign": 278, "diamet": 280, "55": [280, 302, 337], "eta": 280, "dbi": 280, "arcsin": 280, "83": 280, "dish": 280, "21": [280, 302], "810210290266568": 280, "437435887991374": 280, "sinc": [280, 325, 334], "antenna": [280, 336], "we": [280, 286, 336], "830810203546193": 280, "529544741425365": 280, "keyword": [284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 330, 331, 337], "pyplot": [284, 285, 288, 289, 290, 291, 292, 293, 294, 296, 298, 299, 300, 301, 302, 303, 304, 329, 330, 331, 332, 333, 334, 335], "colorbar": [285, 286, 296, 299], "scatter": 285, "overwritten": [285, 296, 299, 301], "histogram2d": [285, 296], "pcolormesh": [285, 296, 299], "cmap": [285, 296], "rainbow": [285, 296], "show_zero": [285, 296], "100_000": [285, 334], "intersymbol": 286, "interfer": 286, "ignor": [286, 326], "transient": 286, "insight": 286, "longer": [286, 308, 311, 315], "open": [286, 336], "n_time": [287, 331], "n_freq": 287, "x_axi": [287, 288, 290, 292, 293, 294, 330, 331, 332, 333, 337], "n_t": 287, "n_f": 287, "logarithm": [287, 288, 290, 292, 293, 294, 330, 331], "h_srrc": [287, 288, 289, 290, 293, 294, 300, 304, 334], "auto": [288, 290, 292, 293, 294, 299, 337], "select": [288, 290, 292, 293, 294, 299, 326], "x_label": 291, "overlap": [292, 299, 332], "detrend": [292, 299], "median": 292, "segment": [292, 299], "256": [292, 299, 332], "trend": [292, 299], "unwrap": [294, 333], "stride": 296, "1d": 296, "determin": 296, "row": 296, "collect": 296, "linecollect": 296, "linewidth": [296, 321], "solid": [296, 302], "800": 296, "loglog": 297, "vmin": 299, "10th": 299, "vmax": 299, "100th": 299, "shade": 299, "gouraud": 299, "represent": [301, 337], "markers": 301, "diff": [302, 332], "exclus": 302, "imaginari": 302, "dash": 302, "share": 302, "10e3": 302, "uniformli": 302, "style": 303, "revert": 303, "rcdefault": 303, "_rc_param": 303, "rc_param": 303, "constrained_layout": 303, "h_pad": 303, "w_pad": 303, "max_open_warn": 303, "titleweight": 303, "bold": 303, "arrang": 305, "down": 305, "column": 305, "notion": 305, "demonstr": 305, "matric": 305, "000005": 306, "000000025": 306, "005": [307, 333], "000025": 307, "excess": [308, 311, 335], "narrow": [308, 311], "expens": [308, 311], "higher": [308, 311, 335], "h_0p5": [308, 311], "h_0p9": [308, 311], "affect": [308, 311], "h_4": [308, 311], "h_rect": [309, 335], "sample_rate_offset": [312, 323, 337], "250": [315, 316, 333], "ksp": [315, 316], "conjug": [315, 316, 331], "500": [315, 316, 333], "now": [315, 316, 329, 337], "150": [315, 316, 334], "asymmetr": 316, "copi": 318, "mani": [319, 326], "walshcod": 319, "299792458": 320, "zadoff_chu": [321, 322, 337], "zadoff": [321, 322, 336, 337], "chu": [321, 322, 336, 337], "prime": 321, "gcd": 321, "ne": 321, "cyclic": 321, "x_u": 321, "c_": 321, "2q": 321, "mod": 321, "e2": 321, "93chu_sequ": 321, "x_3": 321, "139": 321, "tile": 321, "x_5": 321, "x5": 321, "xcorr": 321, "sphinx": 325, "immateri": 325, "theme": 325, "depend": [325, 326, 328, 337], "store": [325, 327, 328], "txt": [325, 326, 327, 328], "some": 325, "below": [325, 330, 331], "version": [325, 327, 336, 337], "aren": 325, "resolut": 325, "minut": 325, "ci": 325, "myst": 325, "parser": 325, "updat": [325, 337], "git": [325, 327], "math": 325, "dollar": 325, "ipykernel": 325, "26": 325, "nb": 325, "pickleshar": 325, "switch": 325, "pip": [325, 326, 327, 328, 336], "python3": [325, 326, 327, 328, 331, 336], "built": 325, "command": [325, 326], "dirhtml": 325, "locat": [325, 328], "home": [325, 331, 335], "page": 325, "directori": [325, 327], "get": 325, "necessari": 325, "webpag": 325, "webserv": 325, "easili": [325, 326, 328, 330, 331], "python": [325, 336], "server": 325, "8080": 325, "access": 325, "web": 325, "browser": 325, "localhost": 325, "librari": [326, 327, 328, 329, 334, 336, 338], "ruff": [326, 327, 337], "lint": [326, 327], "your": [326, 328, 333], "develop": [326, 327, 328], "dev": [326, 328], "pyproject": [326, 328], "toml": [326, 327, 328], "tool": [326, 328, 336], "src": [326, 335], "extend": 326, "ipynb": 326, "exclud": 326, "build": [326, 336], "_version": 326, "py": [326, 328, 331, 333, 335], "120": 326, "doc": 326, "pycodestyl": 326, "pyflak": 326, "pyupgrad": 326, "flake8": 326, "bugbear": 326, "simplifi": 326, "isort": 326, "pylint": [326, 337], "npy": 326, "rule": 326, "ruf": 326, "e501": 326, "too": 326, "long": 326, "e713": 326, "e714": 326, "plr2004": 326, "magic": 326, "plr0913": 326, "plr5501": 326, "collaps": 326, "els": [326, 332], "plr0912": 326, "plr0915": 326, "statement": 326, "__init__": 326, "f401": 326, "f403": 326, "check": 326, "hook": 326, "config": [326, 329, 330, 331, 332, 333, 334, 335], "yaml": 326, "repo": [326, 327, 331, 335], "github": [326, 336], "rev": 326, "v2": 326, "id": 326, "fixer": 326, "trail": 326, "whitespac": 326, "astral": 326, "sh": 326, "v0": 326, "enabl": [326, 337], "disabl": 326, "uninstal": 326, "extens": 326, "vscode": [326, 328], "json": [326, 328], "you": [326, 327, 328, 333, 336], "edit": [326, 331], "latest": [327, 336], "releas": [327, 337], "main": [327, 335], "mhostett": [327, 337], "Or": [327, 328], "pre": 327, "To": 327, "activ": 327, "benefici": 327, "fashion": 327, "allow": [327, 328], "immedi": 327, "seen": 327, "upon": 327, "next": 327, "clone": 327, "wherev": 327, "flag": 327, "packag": [327, 331, 336], "commit": 327, "pytest": [327, 328], "cov": 327, "xdist": 327, "benchmark": 327, "ini_opt": 328, "minvers": 328, "addopt": 328, "showloc": 328, "testpath": 328, "execut": 328, "test_psk": 328, "instruct": 328, "invok": 328, "infrastructur": 328, "debug": 328, "inlinebackend": [329, 330, 331, 332, 333, 334, 335], "print_figure_kwarg": [329, 330, 331, 332, 333, 334, 335], "facecolor": [329, 330, 331, 332, 333, 334, 335], "inlin": [329, 330, 331, 332, 333, 334, 335], "widget": [329, 330, 331, 332, 333, 334, 335], "tx": 329, "fillstyl": 329, "show": [329, 330, 331, 332, 333, 334, 335], "accomplish": [329, 334], "def": [329, 332, 334], "resample_sign": 329, "new_sample_r": 329, "ty": 329, "gca": [329, 334], "set_prop_cycl": [329, 334], "198": 329, "four": 329, "396": 329, "fourth": 329, "often": 329, "do": 329, "312": 329, "00095883": 330, "00175012": 330, "00423921": 330, "0058825": 330, "006151": 330, "00474595": 330, "0017044": 330, "00254816": 330, "00721645": 330, "0112324": 330, "01342358": 330, "01273202": 330, "00845058": 330, "0004368": 330, "01073669": 330, "02372977": 330, "03650247": 330, "04650654": 330, "05098525": 330, "04734644": 330, "03355896": 330, "00851486": 330, "02769991": 330, "07367348": 330, "12670446": 330, "18301321": 330, "23810898": 330, "28727058": 330, "32607991": 330, "35093841": 330, "35949665": 330, "conveni": [330, 331], "evalu": [330, 331], "29": 330, "31": 330, "here": [330, 331], "478207252018059": 331, "6400000000000001": 331, "7391036260090295": 331, "3061467458920719j": 331, "47820725": 331, "78207252e": 331, "58172329e": 331, "10862468e": 331, "86109590e": 331, "21565653e": 331, "01140214e": 331, "57286400e": 331, "67772160e": 331, "47338728e": 331, "10422993e": 331, "89312837e": 331, "12240078e": 331, "03953322e": 331, "69685122e": 331, "63882791e": 331, "81474977e": 331, "47193366e": 331, "85259041e": 331, "15647504e": 331, "23851924e": 331, "42176895e": 331, "84684395e": 331, "42721858e": 331, "72236648e": 331, "14721649e": 331, "10813095e": 331, "94024315e": 331, "78877688e": 331, "74077567e": 331, "87820725": 331, "53637958": 331, "94724205": 331, "13335164": 331, "1455082": 331, "04436799": 331, "88708159": 331, "71930943": 331, "5719707": 331, "46154771": 331, "39261642": 331, "36139242": 331, "35935288": 331, "3763214": 331, "40270968": 331, "43085717": 331, "45557651": 331, "47410241": 331, "48566716": 331, "49090568": 331, "49124786": 331, "48840102": 331, "4839738": 331, "47925143": 331, "47510421": 331, "47199608": 331, "47005584": 331, "46917696": 331, "46911955": 331, "denomin": 331, "73910363": 331, "30614675j": 331, "plane": 331, "092337035029908": 331, "71104892744724": 331, "684365018955985": 331, "37868538208862": 331, "1263714068241546": 331, "9993519409971622": 331, "1909320767063554": 331, "016796159999999997": 331, "46380627201816593": 331, "3806359704987265j": 331, "4988817673791569": 331, "3333421398098428j": 331, "5543277195052645": 331, "22961005941814036j": 331, "5291527586123693": 331, "28283804209787544j": 331, "lyon": 331, "understand": 331, "3rd": 331, "insid": 331, "matt": [331, 335, 337], "env": 331, "lib": 331, "_filter_design": 331, "480": 331, "runtimewarn": [331, 335], "divid": [331, 335], "encount": [331, 335], "npp_polyv": 331, "zm1": 331, "tensor": 331, "invalid": 331, "unstabl": 331, "n_symbol": 332, "pb": 332, "x_bb_rect": 332, "papr_bb_rect": 332, "x_pb_rect": 332, "papr_pb_rect": 332, "x_bb_0p1": 332, "papr_bb_0p1": 332, "x_pb_0p1": 332, "papr_pb_0p1": 332, "x_bb_0p5": 332, "papr_bb_0p5": 332, "x_pb_0p5": 332, "papr_pb_0p5": 332, "x_bb_0p9": 332, "papr_bb_0p9": 332, "x_pb_0p9": 332, "papr_pb_0p9": 332, "2f": 332, "rf": [332, 333], "512": 332, "sweep_alpha": 332, "bb_papr": 332, "pb_papr": 332, "bpsk_bb_papr": 332, "bpsk_pb_papr": 332, "qpsk_bb_papr": 332, "qpsk_pb_papr": 332, "psk8_bb_papr": 332, "psk8_pb_papr": 332, "psk16_bb_papr": 332, "psk16_pb_papr": 332, "loop_filt": 333, "0x7f312e855c90": 333, "theta_0": 333, "phase_error": 333, "freq_estim": 333, "tmp": 333, "ipykernel_32397": 333, "3044107145": 333, "deprecationwarn": 333, "convers": [333, 336, 337], "ndim": 333, "scalar": 333, "deprec": 333, "futur": 333, "ensur": 333, "extract": 333, "1093092892": 333, "28": 333, "make": [333, 338], "a_hat": [333, 334], "152932338": 333, "rad2deg": 333, "avail": [333, 334, 336], "b_nt": 333, "0005": 333, "0125": 333, "015": 333, "0175": 333, "t_lock": 333, "analyze_psk": 334, "n0": 334, "tx_mf": 334, "1e6": 334, "bpsk_ber": 334, "bpsk_ser": 334, "qpsk_ber": 334, "qpsk_ser": 334, "psk8_ber": 334, "psk8_ser": 334, "psk16_ber": 334, "psk16_ser": 334, "1e0": 334, "psk8_bin": 334, "psk8_grai": 334, "wors": 334, "rc_0p1": 335, "rc_0p5": 335, "rc_0p9": 335, "pm": 335, "nearli": 335, "small": 335, "lobe": 335, "much": 335, "freqz": 335, "worn": 335, "h_rc_0p1": 335, "h_rc_0p5": 335, "h_rc_0p9": 335, "p_rect": 335, "cumsum": 335, "p_rc_0p1": 335, "p_rc_0p5": 335, "p_rc_0p9": 335, "within": 335, "srrc_0p1": 335, "srrc_0p5": 335, "srrc_0p9": 335, "significantli": 335, "due": 335, "being": 335, "h_srrc_0p1": 335, "h_srrc_0p5": 335, "h_srrc_0p9": 335, "p_srrc_0p1": 335, "p_srrc_0p5": 335, "p_srrc_0p9": 335, "gauss_0p1": 335, "gauss_0p2": 335, "gauss_0p3": 335, "_filter": 335, "355": 335, "softwar": 336, "radio": 336, "goal": 336, "analyz": 336, "reli": 336, "interoper": 336, "numba": [336, 337], "acceler": 336, "computation": 336, "intens": 336, "addition": 336, "aim": 336, "replic": 336, "relev": 336, "toolbox": 336, "progress": 336, "someth": 336, "pleas": 336, "issu": 336, "pypi": 336, "api": [336, 337, 338], "synchron": 336, "budget": [336, 337], "manipul": 336, "januari": 337, "2024": 337, "modifi": 337, "design_multirate_tap": 337, "fix": [337, 338], "bug": [337, 338], "hostett": 337, "decemb": 337, "2023": 337, "rework": 337, "frequency_response_log": 337, "explicit": 337, "improv": 337, "jupyt": 337, "notebook": 337, "novemb": 337, "abil": 337, "renam": 337, "multirate_tap": 337, "polyphase_matrix": 337, "replac": 337, "black": 337, "septemb": 337, "sensibl": 337, "august": 337, "27": 337, "superflu": 337, "translat": 337, "juli": 337, "firinterpol": 337, "impair": 337, "fpsl": 337, "helper": 337, "synthes": 337, "semant": 338, "major": 338, "minor": 338, "patch": 338, "introduc": 338, "featur": 338, "compat": 338, "There": 338, "guarante": 338, "them": 338}, "objects": {"": [[3, 0, 0, 1, "sdr", ""]], "sdr": [[9, 1, 1, "", "AGC", "Implements an automatic gain controller (AGC)."], [18, 1, 1, "", "BinaryErasureChannel", "Implements a binary erasure channel (BEC)."], [26, 1, 1, "", "BinarySymmetricChannel", "Implements a binary symmetric channel (BSC)."], [34, 1, 1, "", "CPM", "Implements continuous-phase modulation (CPM)."], [48, 1, 1, "", "Channel", "A base class for wireless channels."], [54, 1, 1, "", "Channelizer", "Implements a polyphase channelizer FIR filter."], [59, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [76, 1, 1, "", "Decimator", "Implements a polyphase decimating FIR filter."], [80, 1, 1, "", "Differentiator", "Implements a differentiator FIR filter."], [82, 1, 1, "", "DiscreteMemorylessChannel", "Implements a discrete memoryless channel (DMC)."], [88, 1, 1, "", "EnergyDetector", "Implements an energy detector."], [93, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [100, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [116, 1, 1, "", "FarrowResampler", "Implements a piecewise polynomial Farrow arbitrary resampler."], [126, 1, 1, "", "FractionalDelay", "Implements a fractional delay FIR filter."], [128, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [144, 1, 1, "", "Integrator", "Implements an integrator IIR filter."], [146, 1, 1, "", "Interpolator", "Implements a polyphase interpolating FIR filter."], [149, 1, 1, "", "LeakyIntegrator", "Implements a leaky integrator IIR filter."], [151, 1, 1, "", "LinearModulation", "Implements linear phase/amplitude modulation with arbitrary symbol mapping."], [167, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [176, 1, 1, "", "MLPED", "Implements a maximum-likelihood phase error detector (ML-PED)."], [184, 1, 1, "", "MSK", "Implements minimum-shift keying (MSK) modulation and demodulation."], [186, 1, 1, "", "MovingAverager", "Implements a moving average FIR filter."], [188, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [196, 1, 1, "", "OQPSK", "Implements offset quadrature phase-shift keying (OQPSK) modulation and demodulation."], [198, 1, 1, "", "PED", "Implements a heuristic phase error detector (PED)."], [204, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [210, 1, 1, "", "PiMPSK", "Implements $pi/M$ phase-shift keying ($pi/M$ PSK) modulation and demodulation."], [212, 1, 1, "", "PolyphaseFIR", "Implements a generic polyphase FIR filter."], [227, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [228, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [229, 1, 1, "", "ReplicaCorrelator", "Implements an clairvoyant replica-correlator detector."], [234, 1, 1, "", "Resampler", "Implements a polyphase rational resampling FIR filter."], [238, 5, 1, "", "albersheim", "Estimates the minimum required single-sample SNR, given $N_{NC}$ non-coherent combinations, to achieve a probability of detection $P_D$ and probability of false alarm $P_{FA}$. This function implements Albersheim's equation."], [239, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [240, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [241, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [242, 5, 1, "", "barker", "Returns the Barker code/sequence of length $N$."], [243, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [244, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [245, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [246, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [247, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [248, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [249, 5, 1, "", "db", "Converts from linear units to decibels."], [250, 5, 1, "", "design_bandpass_fir", "Designs a bandpass FIR filter impulse response $h[n]$ using the window method."], [251, 5, 1, "", "design_bandstop_fir", "Designs a bandstop FIR filter impulse response $h[n]$ using the window method."], [252, 5, 1, "", "design_frac_delay_fir", "Designs a fractional delay FIR filter impulse response $h[n]$ using the Kaiser window method."], [253, 5, 1, "", "design_highpass_fir", "Designs a highpass FIR filter impulse response $h[n]$ using the window method."], [254, 5, 1, "", "design_lowpass_fir", "Designs a lowpass FIR filter impulse response $h[n]$ using the window method."], [255, 5, 1, "", "design_multirate_fir", "Designs a multirate FIR filter impulse response $h[n]$ using the Kaiser window method."], [256, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [257, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [258, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [259, 5, 1, "", "downsample", "Downsamples the time-domain signal $x[n]$ by the factor $r$, by discarding $r-1$ samples every $r$ samples."], [260, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [261, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [262, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [263, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [264, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [265, 5, 1, "", "euclidean", "Measures the Euclidean distance between two signals $x[n]$ and $y[n]$."], [266, 5, 1, "", "evm", "Calculates the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [267, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [268, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [269, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [270, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [271, 5, 1, "", "hadamard", "Returns the Hadamard code/sequence of length $N$."], [272, 5, 1, "", "half_sine", "Returns a half-sine pulse shape."], [273, 5, 1, "", "hamming", "Measures the Hamming distance between two signals $x[n]$ and $y[n]$."], [274, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [275, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [276, 5, 1, "", "linear", "Converts from decibels to linear units."], [277, 5, 1, "", "mix", "Mixes the time-domain signal $x[n]$ with a complex exponential or real sinusoid."], [278, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [279, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [280, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [281, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [282, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [283, 5, 1, "", "percent", "Converts from a ratio to a percentage."], [305, 5, 1, "", "polyphase_decompose", "Decomposes the prototype filter taps $h[n]$ into the polyphase matrix $h_i[n]$ with $B$ phases."], [306, 5, 1, "", "ppb", "Converts from a ratio to parts per billion (ppb)."], [307, 5, 1, "", "ppm", "Converts from a ratio to parts per million (ppm)."], [308, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [309, 5, 1, "", "rectangular", "Returns a rectangular pulse shape."], [310, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [311, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [312, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [313, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [314, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [315, 5, 1, "", "to_complex_bb", "Converts the real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$ to a complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c} = f_{s,r}/2$."], [316, 5, 1, "", "to_real_pb", "Converts the complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$ to a real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r} = 2f_{s,c}$."], [317, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [318, 5, 1, "", "upsample", "Upsamples the time-domain signal $x[n]$ by the factor $r$, by inserting $r-1$ zeros between each sample."], [319, 5, 1, "", "walsh", "Returns the Walsh code/sequence of length $N$."], [320, 5, 1, "", "wavelength", "Calculates the wavelength $lambda$ of an electromagnetic wave with frequency $f$."], [321, 5, 1, "", "zadoff_chu", "Returns the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.AGC": [[10, 2, 1, "", "__call__", "Performs automatic gain control on the input signal."], [11, 2, 1, "", "__init__", "Creates an automatic gain controller (AGC)."], [12, 4, 1, "", "attack", "(Settable) The attack rate $alpha$."], [13, 4, 1, "", "decay", "(Settable) The decay rate $beta$."], [14, 4, 1, "", "gain", "The current linear gain."], [15, 4, 1, "", "reference", "(Settable) The desired output magnitude."], [16, 2, 1, "", "reset", "Resets the AGC gain. Only useful when using streaming mode."], [17, 4, 1, "", "streaming", "Indicates whether the AGC is in streaming mode."]], "sdr.AGC.__call__": [[10, 3, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.AGC.__init__": [[11, 3, 2, "p-attack", "attack", "The attack rate $alpha$. The attack rate is meant to attenuate strong signals. After $n_0 approx 1 / alpha$ samples the error will reduce to $1 / e$ of its original value."], [11, 3, 2, "p-decay", "decay", "The decay rate $beta$. The decay rate is meant to amplify weak signals. After $n_0 approx 1 / beta$ samples the error will reduce to $1 / e$ of its original value."], [11, 3, 2, "p-reference", "reference", "The desired output magnitude."], [11, 3, 2, "p-streaming", "streaming", "Indicates whether the AGC operates in streaming mode. In streaming mode, the gain is preserved between calls to __call__()."]], "sdr.AGC.reset": [[16, 3, 2, "p-gain", "gain", "The initial linear gain of the AGC."]], "sdr.BinaryErasureChannel": [[19, 4, 1, "", "X", "The input alphabet $mathcal{X} = {0, 1}$ of the BEC channel."], [20, 4, 1, "", "Y", "The output alphabet $mathcal{Y} = {0, 1, e}$ of the BEC channel. Erasures $e$ are represented by -1."], [21, 2, 1, "", "__call__", "Passes the binary input sequence $x$ through the channel."], [22, 2, 1, "", "__init__", "Creates a new binary erasure channel (BEC)."], [23, 2, 1, "", "capacities", "Calculates the capacity of BEC channels."], [24, 4, 1, "", "capacity", "The capacity $C$ of the instantiated channel in bits/channel use."], [25, 4, 1, "", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.BinaryErasureChannel.__call__": [[21, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X} = {0, 1}$."]], "sdr.BinaryErasureChannel.__init__": [[22, 3, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."], [22, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."]], "sdr.BinarySymmetricChannel": [[27, 4, 1, "", "X", "The input alphabet $mathcal{X} = {0, 1}$ of the BSC channel."], [28, 4, 1, "", "Y", "The output alphabet $mathcal{Y} = {0, 1}$ of the BSC channel."], [29, 2, 1, "", "__call__", "Passes the binary input sequence $x$ through the channel."], [30, 2, 1, "", "__init__", "Creates a new binary symmetric channel (BSC)."], [31, 2, 1, "", "capacities", "Calculates the capacity of BSC channels."], [32, 4, 1, "", "capacity", "The capacity $C$ of the instantiated channel in bits/channel use."], [33, 4, 1, "", "p", "The transition probability $p$ of the BSC channel."]], "sdr.BinarySymmetricChannel.__call__": [[29, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X} = {0, 1}$."]], "sdr.BinarySymmetricChannel.__init__": [[30, 3, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."], [30, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."]], "sdr.CPM": [[35, 2, 1, "", "__init__", "Creates a new continuous-phase modulation object."], [36, 2, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [37, 4, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [38, 2, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples $tilde{x}[n]$ into decimal symbol decisions $hat{s}[k]$ using matched filtering and maximum-likelihood estimation."], [39, 4, 1, "", "index", "The modulation index $h$."], [40, 2, 1, "", "modulate", "Modulates the decimal symbols $s[k]$ into pulse-shaped complex samples $x[n]$."], [41, 4, 1, "", "order", "The modulation order $M = 2^k$."], [42, 4, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [43, 4, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the instantaneous frequency of the signal."], [44, 4, 1, "", "rx_filter", "The receive decimating matched filter. The filter coefficients are matched to the pulse shape $h[-n]^*$."], [45, 2, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [46, 4, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [47, 4, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter. The filter coefficients are the pulse shape $h[n]$."]], "sdr.CPM.__init__": [[35, 3, 2, "p-index", "index", "The modulation index $h$. The modulation index is the ratio of the frequency deviation to the symbol rate $h = Delta f / f_{sym}$. The phase change per symbol is $pi h$."], [35, 3, 2, "p-order", "order", "The modulation order $M = 2^k$."], [35, 3, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees."], [35, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the instantaneous frequency of the signal. If a string is passed, the pulse shape is normalized such that the maximum value is 1."], [35, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string."], [35, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."]], "sdr.CPM.ber": [[36, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.CPM.demodulate": [[38, 3, 2, "p-x_tilde", "x_tilde", "The received pulse-shaped complex samples $tilde{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.CPM.modulate": [[40, 3, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.CPM.ser": [[45, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.Channel": [[49, 2, 1, "", "__call__", "Passes the input sequence $x$ through the channel."], [50, 2, 1, "", "__init__", "Creates a new channel."], [51, 2, 1, "", "capacities", "Computes the channel capacity given the channel configuration."], [52, 4, 1, "", "capacity", "The channel capacity $C$ in bits/2D of the instantiated channel."], [53, 2, 1, "", "reset", "Resets the channel with a new seed."]], "sdr.Channel.__call__": [[49, 3, 2, "p-x", "x", "The input sequence $x$."]], "sdr.Channel.__init__": [[50, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."]], "sdr.Channel.reset": [[53, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."]], "sdr.Channelizer": [[55, 2, 1, "", "__call__", "Channelizes the input signal $x[n]$ with the polyphase FIR filter."], [56, 2, 1, "", "__init__", "Creates a polyphase FIR channelizing filter."], [57, 4, 1, "", "channels", "The number of channels $C$."], [58, 4, 1, "", "method", "The method used to design the polyphase channelizing filter."]], "sdr.Channelizer.__call__": [[55, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [55, 3, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Channelizer.__init__": [[56, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB. Only used when taps=\"kaiser\"."], [56, 3, 2, "p-channels", "channels", "The number of channels $C$."], [56, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even. Only used when taps=\"kaiser\"."], [56, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [56, 3, 2, "p-taps", "taps", "The prototype filter design specification."]], "sdr.ClosedLoopPLL": [[60, 4, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [61, 4, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [62, 4, 1, "", "K0", "The NCO gain $K_0$."], [63, 4, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [64, 4, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [65, 4, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [66, 2, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [67, 2, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [68, 4, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [69, 2, 1, "", "lock_time", "Returns the lock time of the PLL."], [70, 4, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [71, 4, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [72, 2, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [73, 2, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [74, 4, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [75, 4, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[66, 3, 2, "p-K0", "K0", "The NCO gain $K_0$."], [66, 3, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [66, 3, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [66, 3, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [66, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[67, 3, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[69, 3, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[72, 3, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.Decimator": [[77, 2, 1, "", "__init__", "Creates a polyphase FIR decimating filter."], [78, 4, 1, "", "method", "The method used to design the polyphase decimating filter."], [79, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."]], "sdr.Decimator.__init__": [[77, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB. Only used when taps=\"kaiser\"."], [77, 3, 2, "p-decimation", "decimation", "The decimation rate $Q$."], [77, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even. Only used when taps=\"kaiser\"."], [77, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [77, 3, 2, "p-taps", "taps", "The prototype filter design specification."]], "sdr.Differentiator": [[81, 2, 1, "", "__init__", "Creates a differentiator FIR filter."]], "sdr.Differentiator.__init__": [[81, 3, 2, "p-order", "order", "The order of the FIR differentiator $N$. The filter length is $N + 1$. Increasing the filter order increases the bandwidth of the differentiator."], [81, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [81, 3, 2, "p-window", "window", "The SciPy window definition. See scipy.signal.windows.get_window() for details. If None, no window is applied."]], "sdr.DiscreteMemorylessChannel": [[83, 4, 1, "", "P", "The transition probability matrix $P$ of the DMC channel."], [84, 4, 1, "", "X", "The input alphabet $mathcal{X}$ of the DMC channel."], [85, 4, 1, "", "Y", "The output alphabet $mathcal{Y}$ of the DMC channel."], [86, 2, 1, "", "__call__", "Passes the input sequence $x$ through the channel."], [87, 2, 1, "", "__init__", "Creates a new discrete memoryless channel (DMC)."]], "sdr.DiscreteMemorylessChannel.__call__": [[86, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.DiscreteMemorylessChannel.__init__": [[87, 3, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P = Pr(Y = y_j | X = x_i)$."], [87, 3, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [87, 3, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [87, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."]], "sdr.EnergyDetector": [[89, 2, 1, "", "p_d", "Computes the probability of detection $P_D$."], [90, 2, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [91, 2, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [92, 2, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.EnergyDetector.p_d": [[89, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [89, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [89, 3, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.p_fa": [[90, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [90, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [90, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [90, 3, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.EnergyDetector.roc": [[91, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [91, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [91, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."], [91, 3, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.threshold": [[92, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [92, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [92, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [92, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.ErrorRate": [[94, 2, 1, "", "__init__", "Creates a new error rate tabulation object."], [95, 2, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [96, 2, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [97, 2, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [98, 2, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [99, 2, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[95, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [95, 3, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [95, 3, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[96, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[97, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[99, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[101, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the FIR filter."], [102, 2, 1, "", "__init__", "Creates an FIR filter."], [103, 2, 1, "", "__len__", "Returns the filter length $N + 1$."], [104, 4, 1, "", "delay", "The delay of the FIR filter $d = lfloor frac{N + 1}{2} rfloor$ in samples."], [105, 2, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [106, 2, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the FIR filter."], [107, 2, 1, "", "group_delay", "Returns the group delay $tau_g(omega)$ of the FIR filter."], [108, 2, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [109, 4, 1, "", "order", "The order of the FIR filter $N$."], [110, 2, 1, "", "phase_delay", "Returns the phase delay $tau_{phi}(omega)$ of the FIR filter."], [111, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [112, 4, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [113, 2, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [114, 4, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [115, 4, 1, "", "taps", "The feedforward taps $h[n]$ with length $N + 1$."]], "sdr.FIR.__call__": [[101, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [101, 3, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.FIR.__init__": [[102, 3, 2, "p-h", "h", "The feedforward coefficients $h[n]$."], [102, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FIR.frequency_response": [[106, 3, 2, "p-decades", "decades", "Only used if freqs is an integer."], [106, 3, 2, "p-freqs", "freqs", "The frequency specification."], [106, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [106, 3, 2, "p-whole", "whole", "Only used if freqs is an integer."]], "sdr.FIR.group_delay": [[107, 3, 2, "p-N", "N", "The number of samples in the group delay."], [107, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[108, 3, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.phase_delay": [[110, 3, 2, "p-N", "N", "The number of samples in the phase delay."], [110, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.step_response": [[113, 3, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FarrowResampler": [[117, 2, 1, "", "__call__", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [118, 2, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [119, 4, 1, "", "delay", "The delay $d$ of the Farrow FIR filters in samples. Output sample $d cdot r$, corresponds to the first input sample, where $r$ is the current resampling rate."], [120, 2, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [121, 4, 1, "", "order", "The order of the piecewise polynomial."], [122, 2, 1, "", "reset", "Resets the filter state and fractional sample index."], [123, 4, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [124, 4, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [125, 4, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__call__": [[117, 3, 2, "p-rate", "rate", "The resampling rate $r$."], [117, 3, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.__init__": [[118, 3, 2, "p-order", "order", "The order of the piecewise polynomial. Must be between 1 and 4."], [118, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FarrowResampler.flush": [[120, 3, 2, "p-rate", "rate", "The resampling rate $r$."]], "sdr.FarrowResampler.reset": [[122, 3, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.FractionalDelay": [[127, 2, 1, "", "__init__", "Creates a fractional delay FIR filter."]], "sdr.FractionalDelay.__init__": [[127, 3, 2, "p-delay", "delay", "The fractional delay $0 le Delta n le 1$."], [127, 3, 2, "p-length", "length", "The filter length $L$. Filters with even length have best performance. Filters with odd length are equivalent to an even-length filter with an appended zero."]], "sdr.IIR": [[129, 2, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [130, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the IIR filter."], [131, 2, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [132, 4, 1, "", "a_taps", "The feedback taps $a_j$ for $j = 0,...,N$."], [133, 4, 1, "", "b_taps", "The feedforward taps $b_i$ for $i = 0,...,M$."], [134, 2, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the IIR filter."], [135, 4, 1, "", "gain", "The gain of the IIR filter."], [136, 2, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [137, 4, 1, "", "order", "The order of the IIR filter $N$."], [138, 4, 1, "", "poles", "The poles of the IIR filter."], [139, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [140, 4, 1, "", "state", "The filter state."], [141, 2, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [142, 4, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [143, 4, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[129, 3, 2, "p-gain", "gain", "The gain of the transfer function."], [129, 3, 2, "p-poles", "poles", "The poles of the transfer function."], [129, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."], [129, 3, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__call__": [[130, 3, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.IIR.__init__": [[131, 3, 2, "p-a", "a", "The feedback coefficients $a_j$ for $j = 0,...,N$."], [131, 3, 2, "p-b", "b", "The feedforward coefficients $b_i$ for $i = 0,...,M$."], [131, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.IIR.frequency_response": [[134, 3, 2, "p-decades", "decades", "Only used if freqs is an integer."], [134, 3, 2, "p-freqs", "freqs", "The frequency specification."], [134, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [134, 3, 2, "p-whole", "whole", "Only used if freqs is an integer."]], "sdr.IIR.impulse_response": [[136, 3, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[141, 3, 2, "p-N", "N", "The number of samples to return."]], "sdr.Integrator": [[145, 2, 1, "", "__init__", "Creates an integrating IIR filter."]], "sdr.Integrator.__init__": [[145, 3, 2, "p-method", "method", "The integration method."], [145, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.Interpolator": [[147, 2, 1, "", "__init__", "Creates a polyphase FIR interpolating filter."], [148, 4, 1, "", "method", "The method used to design the polyphase interpolating filter."]], "sdr.Interpolator.__init__": [[147, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB. Only used when taps=\"kaiser\"."], [147, 3, 2, "p-interpolation", "interpolation", "The interpolation rate $P$."], [147, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even. Only used when taps=\"kaiser\"."], [147, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [147, 3, 2, "p-taps", "taps", "The prototype filter design specification."]], "sdr.LeakyIntegrator": [[150, 2, 1, "", "__init__", "Creates a leaky integrator IIR filter."]], "sdr.LeakyIntegrator.__init__": [[150, 3, 2, "p-alpha", "alpha", "The leaky factor $alpha$. An FIR moving average with length $L$ is approximated when $alpha = 1 - 2/L$."], [150, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.LinearModulation": [[152, 2, 1, "", "__init__", "Creates a new linear phase/amplitude modulation object."], [153, 2, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [154, 4, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [155, 2, 1, "", "decide_symbols", "Converts the received complex symbols $tilde{a}[k]$ into decimal symbol decisions $hat{s}[k]$ and complex symbol decisions $hat{a}[k]$ using maximum-likelihood estimation (MLE)."], [156, 2, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples $tilde{x}[n]$ into decimal symbol decisions $hat{s}[k]$ using matched filtering and maximum-likelihood estimation."], [157, 2, 1, "", "map_symbols", "Converts the decimal symbols $s[k]$ to complex symbols $a[k]$."], [158, 2, 1, "", "modulate", "Modulates the decimal symbols $s[k]$ into pulse-shaped complex samples $x[n]$."], [159, 4, 1, "", "order", "The modulation order $M = 2^k$."], [160, 4, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [161, 4, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [162, 4, 1, "", "rx_filter", "The receive decimating matched filter. The filter coefficients are matched to the pulse shape $h[-n]^*$."], [163, 2, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [164, 4, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [165, 4, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."], [166, 4, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter. The filter coefficients are the pulse shape $h[n]$."]], "sdr.LinearModulation.__init__": [[152, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [152, 3, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees to apply to symbol_map."], [152, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [152, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [152, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [152, 3, 2, "p-symbol_map", "symbol_map", "The symbol mapping ${0, dots, M-1} mapsto mathbb{C}$. An $M$-length array whose indices are decimal symbols $s[k]$ and whose values are complex symbols $a[k]$, where $M$ is the modulation order."]], "sdr.LinearModulation.ber": [[153, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.LinearModulation.decide_symbols": [[155, 3, 2, "p-a_tilde", "a_tilde", "The received complex symbols $tilde{a}[k]$."]], "sdr.LinearModulation.demodulate": [[156, 3, 2, "p-x_tilde", "x_tilde", "The received pulse-shaped complex samples $tilde{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.LinearModulation.map_symbols": [[157, 3, 2, "p-s", "s", "The decimal symbols $s[k]$ to map, $0$ to $M-1$."]], "sdr.LinearModulation.modulate": [[158, 3, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.LinearModulation.ser": [[163, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.LoopFilter": [[168, 2, 1, "", "__call__", "Filters the input signal $x[n]$."], [169, 2, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [170, 4, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [171, 4, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [172, 4, 1, "", "integral_gain", "The integral gain $K_2$ of the loop filter."], [173, 4, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [174, 4, 1, "", "proportional_gain", "The proportional gain $K_1$ of the loop filter."], [175, 2, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__call__": [[168, 3, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.LoopFilter.__init__": [[169, 3, 2, "p-K0", "K0", "The NCO gain $K_0$."], [169, 3, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [169, 3, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [169, 3, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.MLPED": [[177, 4, 1, "", "A_received", "(Settable) The received signal RMS amplitude $A_{rx,rms}$."], [178, 4, 1, "", "A_reference", "(Settable) The reference signal RMS amplitude $A_{ref,rms}$."], [179, 2, 1, "", "__call__", "Detects the phase error."], [180, 2, 1, "", "__init__", "Initializes the ML-PED."], [181, 2, 1, "", "data_aided_error", "Simulates the average phase error of the data-aided PED using the specified modulation scheme."], [182, 2, 1, "", "decision_directed_error", "Simulates the average phase error of the decision-directed PED using the specified modulation scheme."], [183, 4, 1, "", "gain", "The gain of the phase error detector $K_p$."]], "sdr.MLPED.__call__": [[179, 3, 2, "p-received", "received", "The received complex symbols $tilde{a}[k]$."], [179, 3, 2, "p-reference", "reference", "The reference complex symbols, either the known transmitted complex symbols $a[k]$ or the complex symbols decisions $hat{a}[k]$."]], "sdr.MLPED.__init__": [[180, 3, 2, "p-A_received", "A_received", "The received signal RMS amplitude $A_{rx,rms}$."], [180, 3, 2, "p-A_reference", "A_reference", "The reference signal RMS amplitude $A_{ref,rms}$."]], "sdr.MLPED.data_aided_error": [[181, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [181, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.MLPED.decision_directed_error": [[182, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [182, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.MSK": [[185, 2, 1, "", "__init__", "Creates a new MSK object."]], "sdr.MSK.__init__": [[185, 3, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [185, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [185, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.MovingAverager": [[187, 2, 1, "", "__init__", "Creates a moving average FIR filter."]], "sdr.MovingAverager.__init__": [[187, 3, 2, "p-length", "length", "The length of the moving average filter $L$."], [187, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.NCO": [[189, 2, 1, "", "__call__", "Steps the NCO with variable frequency and/or phase signals."], [190, 2, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [191, 4, 1, "", "gain", "(Settable) The NCO gain $K_0$."], [192, 4, 1, "", "increment", "(Settable) The constant phase accumulation $omega$ of the NCO in radians/sample."], [193, 4, 1, "", "offset", "(Settable) The absolute phase offset $theta$ of the NCO in radians."], [194, 2, 1, "", "reset", "Resets the NCO."], [195, 2, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__call__": [[189, 3, 2, "p-freq", "freq", "The variable frequency signal $f[n]$ in radians/sample. This input signal varies the per-sample phase increment of the NCO. If None, the signal is all zeros."], [189, 3, 2, "p-output", "output", "The format of the output signal $y[n]$. Options are the accumulated phase, sine, cosine, or complex exponential."], [189, 3, 2, "p-phase", "phase", "The variable phase signal $p[n]$ in radians. This input signal varies the per-sample phase offset of the NCO. If None, the signal is all zeros."]], "sdr.NCO.__init__": [[190, 3, 2, "p-gain", "gain", "The NCO gain $K_0$."], [190, 3, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [190, 3, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.NCO.step": [[195, 3, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.OQPSK": [[197, 2, 1, "", "__init__", "Creates a new OQPSK object."]], "sdr.OQPSK.__init__": [[197, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [197, 3, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [197, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [197, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [197, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [197, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PED": [[199, 2, 1, "", "__call__", "Detects the phase error."], [200, 2, 1, "", "__init__", "Initializes the PED."], [201, 2, 1, "", "data_aided_error", "Simulates the average phase error of the data-aided PED using the specified modulation scheme."], [202, 2, 1, "", "decision_directed_error", "Simulates the average phase error of the decision-directed PED using the specified modulation scheme."], [203, 4, 1, "", "gain", "The gain of the phase error detector $K_p$."]], "sdr.PED.__call__": [[199, 3, 2, "p-received", "received", "The received complex symbols $tilde{a}[k]$."], [199, 3, 2, "p-reference", "reference", "The reference complex symbols, either the known transmitted complex symbols $a[k]$ or the complex symbols decisions $hat{a}[k]$."]], "sdr.PED.data_aided_error": [[201, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [201, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.PED.decision_directed_error": [[202, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [202, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.PSK": [[205, 2, 1, "", "__init__", "Creates a new PSK object."], [206, 2, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [207, 4, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [208, 2, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [209, 4, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[205, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [205, 3, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [205, 3, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [205, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [205, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [205, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [205, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[206, 3, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [206, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.ser": [[208, 3, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [208, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.PiMPSK": [[211, 2, 1, "", "__init__", "Creates a new $pi/M$ PSK object."]], "sdr.PiMPSK.__init__": [[211, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [211, 3, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [211, 3, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [211, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [211, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [211, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [211, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PolyphaseFIR": [[213, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the polyphase FIR filter."], [214, 2, 1, "", "__init__", "Creates a polyphase FIR filter."], [215, 4, 1, "", "branches", "The number of polyphase branches $B$."], [216, 4, 1, "", "decimation", "The integer decimation rate $Q$."], [217, 4, 1, "", "delay", "The delay of polyphase FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [218, 4, 1, "", "input", "The input connection method."], [219, 4, 1, "", "interpolation", "The integer interpolation rate $P$."], [220, 4, 1, "", "order", "The order $N = (M + 1)B - 1$ of the FIR prototype filter $h[n]$."], [221, 4, 1, "", "output", "The output connection method."], [222, 4, 1, "", "polyphase_order", "The order $M = (N + 1)/B - 1$ of each FIR polyphase filter $h_i[n]$."], [223, 4, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_i[n]$."], [224, 4, 1, "", "rate", "The fractional resampling rate $r = P/Q$. The output sample rate is $f_{s,out} = f_{s,in} cdot r$."], [225, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [226, 4, 1, "", "taps", "The prototype feedforward taps $h[n]$."]], "sdr.PolyphaseFIR.__call__": [[213, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [213, 3, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.PolyphaseFIR.__init__": [[214, 3, 2, "p-branches", "branches", "The number of polyphase branches $B$."], [214, 3, 2, "p-input", "input", "The input connection method."], [214, 3, 2, "p-output", "output", "The output connection method."], [214, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [214, 3, 2, "p-taps", "taps", "The prototype filter feedforward coefficients $h[n]$."]], "sdr.Q": [[227, 3, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[228, 3, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.ReplicaCorrelator": [[230, 2, 1, "", "p_d", "Computes the probability of detection $P_D$."], [231, 2, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [232, 2, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [233, 2, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.ReplicaCorrelator.p_d": [[230, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [230, 3, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [230, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."]], "sdr.ReplicaCorrelator.p_fa": [[231, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [231, 3, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [231, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [231, 3, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.ReplicaCorrelator.roc": [[232, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [232, 3, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [232, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."]], "sdr.ReplicaCorrelator.threshold": [[233, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [233, 3, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [233, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [233, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.Resampler": [[235, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the polyphase FIR filter."], [236, 2, 1, "", "__init__", "Creates a polyphase FIR rational resampling filter."], [237, 4, 1, "", "method", "The method used to design the polyphase resampling filter."]], "sdr.Resampler.__call__": [[235, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [235, 3, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Resampler.__init__": [[236, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB. Only used when taps=\"kaiser\"."], [236, 3, 2, "p-decimation", "decimation", "The decimation rate $Q$."], [236, 3, 2, "p-interpolation", "interpolation", "The interpolation rate $P$."], [236, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even. Only used when taps=\"kaiser\"."], [236, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [236, 3, 2, "p-taps", "taps", "The prototype filter design specification."]], "sdr.albersheim": [[238, 3, 2, "p-N_nc", "N_nc", "The number of non-coherent combinations $N_{NC} ge 1$."], [238, 3, 2, "p-p_d", "p_d", "The desired probability of detection $P_D$ in $(0, 1)$."], [238, 3, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{FA}$ in $(0, 1)$."]], "sdr.average_power": [[239, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the average power. The default is None, which computes the average power of the entire array."], [239, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [239, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[240, 3, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [240, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [240, 3, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [240, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[241, 3, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [241, 3, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.barker": [[242, 3, 2, "p-length", "length", "The length $N$ of the Barker code/sequence."], [242, 3, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[243, 3, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [243, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [243, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[244, 3, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[245, 3, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[246, 3, 2, "p-p", "p", "The probability $p$ of a bit flip."], [246, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [246, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[247, 3, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[248, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.db": [[249, 3, 2, "p-type", "type", "The type of input value or signal."], [249, 3, 2, "p-x", "x", "The input value or signal."]], "sdr.design_bandpass_fir": [[250, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [250, 3, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [250, 3, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [250, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [250, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_bandstop_fir": [[251, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [251, 3, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [251, 3, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [251, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [251, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_frac_delay_fir": [[252, 3, 2, "p-delay", "delay", "The fractional delay $0 le Delta n le 1$."], [252, 3, 2, "p-length", "length", "The filter length $L$. Filters with even length have best performance. Filters with odd length are equivalent to an even-length filter with an appended zero."]], "sdr.design_highpass_fir": [[253, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [253, 3, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [253, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [253, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_lowpass_fir": [[254, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [254, 3, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [254, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [254, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_multirate_fir": [[255, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB."], [255, 3, 2, "p-decimation", "decimation", "The decimation rate $Q$."], [255, 3, 2, "p-interpolation", "interpolation", "The interpolation rate $P$."], [255, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even."]], "sdr.diff_decode": [[256, 3, 2, "p-y", "y", "The input encoded data $y[k]$."], [256, 3, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[257, 3, 2, "p-x", "x", "The input uncoded data $x[k]$."], [257, 3, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[258, 3, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [258, 3, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [258, 3, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [258, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [258, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.downsample": [[259, 3, 2, "p-rate", "rate", "The downsampling factor $r$."], [259, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.ebn0_to_esn0": [[260, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [260, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [260, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[261, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [261, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [261, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [261, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[262, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the energy. The default is None, which computes the energy of the entire array."], [262, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [262, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[263, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [263, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [263, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[264, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [264, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.euclidean": [[265, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the distance. The default is None, which computes the distance across the entire array."], [265, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [265, 3, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.evm": [[266, 3, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [266, 3, 2, "p-output", "output", "The output type of the EVM calculation."], [266, 3, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [266, 3, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.frequency_offset": [[267, 3, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [267, 3, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [267, 3, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [267, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [267, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[268, 3, 2, "p-distance", "distance", "The distance $d$ in meters between the transmitter and receiver."], [268, 3, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[269, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [269, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [269, 3, 2, "p-sps", "sps", "The number of samples per symbol."], [269, 3, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[270, 3, 2, "p-n", "n", "The length of the Gray code."]], "sdr.hadamard": [[271, 3, 2, "p-index", "index", "The index $i$ of the Hadamard code."], [271, 3, 2, "p-length", "length", "The length $N$ of the Hadamard code/sequence. Must be a power of 2."], [271, 3, 2, "p-output", "output", "The output format of the Hadamard code/sequence."]], "sdr.half_sine": [[272, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [272, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [272, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.hamming": [[273, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the distance. The default is None, which computes the distance across the entire array."], [273, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [273, 3, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.hexdump": [[274, 3, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [274, 3, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[275, 3, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [275, 3, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [275, 3, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.linear": [[276, 3, 2, "p-type", "type", "The type of output value or signal."], [276, 3, 2, "p-x", "x", "The input value or signal in dB."]], "sdr.mix": [[277, 3, 2, "p-complex", "complex", "Indicates whether to mix by a complex exponential or real sinusoid."], [277, 3, 2, "p-freq", "freq", "The frequency $f$ of the sinusoid in Hz (or 1/samples if sample_rate=1). The frequency must satisfy $-f_s/2 le f le f_s/2$."], [277, 3, 2, "p-phase", "phase", "The phase $phi$ of the sinusoid in degrees."], [277, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal."], [277, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.pack": [[278, 3, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [278, 3, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [278, 3, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[279, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the PAPR. The default is None, which computes the PAPR of the entire array."], [279, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[280, 3, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [280, 3, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [280, 3, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[281, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the peak power. The default is None, which computes the peak power of the entire array."], [281, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [281, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[282, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [282, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.percent": [[283, 3, 2, "p-x", "x", "The input ratio."]], "sdr.plot": [[284, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [285, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [286, 5, 1, "", "eye", "Plots the eye diagram of the baseband modulated signal $x[n]$."], [287, 5, 1, "", "filter", "Plots the magnitude response $|H(omega)|^2$, impulse response $h[n]$, and zeros and poles of the filter."], [288, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [289, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [290, 5, 1, "", "magnitude_response", "Plots the magnitude response $|H(omega)|^2$ of the filter."], [291, 5, 1, "", "p_d", "Plots the probability of detection $P_D$ as a function of received SNR or ENR."], [292, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [293, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [294, 5, 1, "", "phase_response", "Plots the phase response $angle H(omega)$ of the filter."], [295, 5, 1, "", "phase_tree", "Plots the phase tree of a continuous-phase modulated (CPM) signal signal $x[n]$."], [296, 5, 1, "", "raster", "Plots a raster of the time-domain signal $x[n]$."], [297, 5, 1, "", "roc", "Plots the receiver operating characteristic (ROC) curve as a function of $P_{FA}$."], [298, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [299, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [300, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [301, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [302, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [303, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [304, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[284, 3, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [284, 3, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."], [284, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."]], "sdr.plot.constellation": [[285, 3, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if persistence=True."], [285, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to Matplotlib functions."], [285, 3, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [285, 3, 2, "p-persistence", "persistence", "Indicates whether to plot the points as a persistence plot. A persistence plot is a 2D histogram of the points."], [285, 3, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.eye": [[286, 3, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [286, 3, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\" or persistence=True."], [286, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [286, 3, 2, "p-persistence", "persistence", "Indicates whether to plot the raster as a persistence plot. A persistence plot is a 2D histogram of the rasters."], [286, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Symbol\"."], [286, 3, 2, "p-span", "span", "The number of symbols per raster."], [286, 3, 2, "p-sps", "sps", "The number of samples per symbol."], [286, 3, 2, "p-x", "x", "The baseband modulated signal $x[n]$. If x is complex, in-phase and quadrature eye diagrams are plotted in separate subplots."]], "sdr.plot.filter": [[287, 3, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [287, 3, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [287, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [287, 3, 2, "p-filter", "filter", "The filter definition."], [287, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [287, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[288, 3, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [288, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [288, 3, 2, "p-filter", "filter", "The filter definition."], [288, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [288, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [288, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.impulse_response": [[289, 3, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [289, 3, 2, "p-filter", "filter", "The filter definition."], [289, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [289, 3, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. Can be useful for comparing the impulse response of filters with different lengths."]], "sdr.plot.magnitude_response": [[290, 3, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [290, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [290, 3, 2, "p-filter", "filter", "The filter definition."], [290, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [290, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [290, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."], [290, 3, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a linear or logarithmic magnitude response."]], "sdr.plot.p_d": [[291, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [291, 3, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [291, 3, 2, "p-x", "x", "The SNR or ENR in dB."], [291, 3, 2, "p-x_label", "x_label", "The x-axis label to use."]], "sdr.plot.periodogram": [[292, 3, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [292, 3, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [292, 3, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [292, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [292, 3, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [292, 3, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [292, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [292, 3, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [292, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [292, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued signals and \"two-sided\" for complex-valued signals."], [292, 3, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a linear or logarithmic power spectral density."]], "sdr.plot.phase_delay": [[293, 3, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [293, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [293, 3, 2, "p-filter", "filter", "The filter definition."], [293, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [293, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [293, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.phase_response": [[294, 3, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [294, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [294, 3, 2, "p-filter", "filter", "The filter definition."], [294, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [294, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [294, 3, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [294, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.phase_tree": [[295, 3, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [295, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [295, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Symbol\"."], [295, 3, 2, "p-span", "span", "The number of symbols per raster."], [295, 3, 2, "p-sps", "sps", "The number of samples per symbol."], [295, 3, 2, "p-x", "x", "The baseband CPM signal $x[n]$."]], "sdr.plot.raster": [[296, 3, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [296, 3, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\" or persistence=True."], [296, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to Matplotlib functions."], [296, 3, 2, "p-length", "length", "The length of each raster in samples. This must be provided if x is 1D."], [296, 3, 2, "p-persistence", "persistence", "Indicates whether to plot the raster as a persistence plot. A persistence plot is a 2D histogram of the rasters."], [296, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [296, 3, 2, "p-stride", "stride", "The stride between each raster in samples. If None, the stride is set to length."], [296, 3, 2, "p-x", "x", "The real time-domain signal $x[n]$. If x is 1D, the rastering is determined by length and stride. If x is 2D, the rows correspond to each raster."]], "sdr.plot.roc": [[297, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to the plotting function defined by type."], [297, 3, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [297, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [297, 3, 2, "p-type", "type", "The type of plot to generate."]], "sdr.plot.ser": [[298, 3, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [298, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."], [298, 3, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.spectrogram": [[299, 3, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [299, 3, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [299, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.pcolormesh(). The following keyword arguments are set by default. The defaults may be overwritten."], [299, 3, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [299, 3, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [299, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [299, 3, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [299, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [299, 3, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a one-sided spectrum or a two-sided spectrum. The default is \"auto\" which selects \"one-sided\" for real-valued signals and \"two-sided\" for complex-valued signals."]], "sdr.plot.step_response": [[300, 3, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [300, 3, 2, "p-filter", "filter", "The filter definition."], [300, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.symbol_map": [[301, 3, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [301, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot(). The following keyword arguments are set by default. The defaults may be overwritten."], [301, 3, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [301, 3, 2, "p-modulation", "modulation", "The linear modulation or symbol map ${0, dots, M-1} mapsto mathbb{C}$."]], "sdr.plot.time_domain": [[302, 3, 2, "p-centered", "centered", "Indicates whether to center the x-axis about 0. This argument is mutually exclusive with offset."], [302, 3, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal. If \"color\", the real and imaginary parts will have different colors based on the current Matplotlib color cycle. If \"line\", the real part will have a solid line and the imaginary part will have a dashed line, and both lines will share the same color."], [302, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [302, 3, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. The units of the offset are $1/f_s$. This argument is mutually exclusive with centered."], [302, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [302, 3, 2, "p-t", "t", "The time signal $t[n]$. The units are assumed to be $1/f_s$."], [302, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[304, 3, 2, "p-filter", "filter", "The filter definition."], [304, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.polyphase_decompose": [[305, 3, 2, "p-branches", "branches", "The number of polyphase branches $B$."], [305, 3, 2, "p-taps", "taps", "The prototype filter feedforward coefficients $h[n]$."]], "sdr.ppb": [[306, 3, 2, "p-x", "x", "The input ratio."]], "sdr.ppm": [[307, 3, 2, "p-x", "x", "The input ratio."]], "sdr.raised_cosine": [[308, 3, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [308, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [308, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [308, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rectangular": [[309, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [309, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [309, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[310, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [310, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[311, 3, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [311, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [311, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [311, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[312, 3, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [312, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.snr_to_ebn0": [[313, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [313, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [313, 3, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [313, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[314, 3, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [314, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.to_complex_bb": [[315, 3, 2, "p-x_r", "x_r", "The real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$. If the length is odd, one zero is appended to the end."]], "sdr.to_real_pb": [[316, 3, 2, "p-x_c", "x_c", "The complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$."]], "sdr.unpack": [[317, 3, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [317, 3, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [317, 3, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.upsample": [[318, 3, 2, "p-rate", "rate", "The upsampling factor $r$."], [318, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.walsh": [[319, 3, 2, "p-index", "index", "The index $i$ of the Walsh code. Indicates how many transitions there are in the code."], [319, 3, 2, "p-length", "length", "The length $N$ of the Walsh code/sequence. Must be a power of 2."], [319, 3, 2, "p-output", "output", "The output format of the Walsh code/sequence."]], "sdr.wavelength": [[320, 3, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.zadoff_chu": [[321, 3, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [321, 3, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence. The root must be relatively prime to the length, i.e., $gcd(u, N) = 1$."], [321, 3, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence. When $q ne 0$, the returned sequence is a cyclic shift of the root-$u$ Zadoff-Chu sequence."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:parameter", "4": "py:property", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "parameter", "Python parameter"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"]}, "titleterms": {"convers": 0, "decibel": 0, "ratio": 0, "from": [0, 326, 327, 328], "e_b": 0, "n_0": 0, "e_": 0, "": [0, 330, 331], "n": [0, 329, 330, 331], "data": 1, "manipul": [1, 3], "detect": [2, 7], "detector": [2, 324], "theoret": 2, "limit": 2, "digit": [3, 331], "signal": [3, 323, 329, 332], "process": 3, "fir": [3, 330], "filter": [3, 7, 330, 331, 333], "iir": [3, 331], "polyphas": 3, "applic": 3, "arbitrari": [3, 329], "resampl": [3, 329], "correl": 3, "link": 4, "budget": 4, "channel": [4, 323], "capac": 4, "path": 4, "loss": 4, "antenna": 4, "measur": 5, "energi": 5, "power": [5, 332], "voltag": 5, "distanc": 5, "modul": [5, 6, 7], "linear": 6, "continu": 6, "phase": [6, 324, 333, 334], "orthogon": 6, "puls": [6, 332, 335], "shape": [6, 332, 335], "symbol": [6, 334], "map": [6, 334], "encod": 6, "plot": [7, 332], "configur": [7, 326, 328], "time": [7, 332, 333], "domain": [7, 332, 333], "frequenc": [7, 330, 331, 332, 333], "spectral": 7, "estim": 7, "analysi": 7, "probabl": 8, "constructor": [9, 18, 26, 34, 48, 54, 59, 76, 80, 82, 93, 100, 116, 126, 128, 144, 146, 149, 151, 167, 176, 184, 186, 188, 196, 198, 204, 210, 212, 234], "special": [9, 18, 26, 48, 54, 76, 80, 82, 100, 116, 126, 128, 144, 146, 149, 167, 176, 186, 188, 198, 212, 234], "method": [9, 18, 26, 34, 48, 54, 59, 76, 80, 82, 88, 93, 100, 116, 126, 128, 144, 146, 149, 151, 167, 176, 184, 186, 188, 196, 198, 204, 210, 212, 229, 234], "stream": [9, 54, 76, 80, 100, 116, 126, 128, 144, 146, 149, 186, 212, 234], "mode": [9, 54, 76, 80, 100, 116, 126, 128, 144, 146, 149, 186, 212, 234], "onli": [9, 54, 76, 80, 100, 116, 126, 128, 144, 146, 149, 186, 212, 234], "properti": [9, 18, 26, 34, 48, 54, 59, 76, 80, 82, 100, 116, 126, 128, 144, 146, 149, 151, 167, 176, 184, 186, 188, 196, 198, 204, 210, 212, 234], "note": [34, 59, 151, 184, 196, 204, 210, 268, 292, 299], "see": [35, 36, 45, 93, 95, 106, 107, 108, 110, 113, 134, 136, 141, 152, 153, 163, 185, 197, 205, 206, 208, 211, 227, 228, 248, 279, 318], "also": [35, 36, 45, 93, 95, 106, 107, 108, 110, 113, 134, 136, 141, 152, 153, 163, 185, 197, 205, 206, 208, 211, 227, 228, 248, 279, 318], "warn": [259, 318], "sequenc": 322, "simul": 323, "model": 323, "impair": 323, "synchron": 324, "lock": [324, 333], "loop": [324, 333], "error": [324, 334], "amplitud": 324, "control": 324, "document": 325, "instal": [325, 326, 327, 328, 336], "build": 325, "doc": 325, "serv": 325, "format": 326, "run": [326, 328], "linter": 326, "formatt": 326, "pre": 326, "commit": 326, "v": [326, 328], "code": [326, 328], "pypi": 327, "github": 327, "edit": 327, "local": 327, "folder": 327, "dev": 327, "depend": 327, "unit": 328, "test": 328, "command": 328, "line": 328, "farrow": 329, "construct": 329, "an": [329, 330, 331], "input": 329, "x": 329, "t_": 329, "rate": [329, 334], "r": 329, "y": 329, "frac": 329, "upsampl": 329, "integ": 329, "downsampl": 329, "irrat": 329, "creat": [330, 331], "examin": [330, 331, 332], "impuls": [330, 331], "respons": [330, 331, 333], "h": [330, 331], "step": [330, 331, 333], "omega": [330, 331], "group": [330, 331], "delai": [330, 331], "tau_g": [330, 331], "fulli": [330, 331], "analyz": [330, 331, 333], "zero": 331, "pole": 331, "stabil": 331, "peak": 332, "averag": 332, "qpsk": [332, 334], "variou": 332, "across": [332, 333], "excess": 332, "bandwidth": 332, "design": 333, "proport": 333, "plu": 333, "integr": 333, "ppi": 333, "implement": 333, "pll": 333, "close": 333, "perform": 333, "compar": 333, "zeta": 333, "b_n": 333, "t": 333, "shift": 334, "kei": 334, "constel": 334, "bpsk": 334, "8": [334, 337], "psk": 334, "16": 334, "curv": 334, "bit": 334, "rais": 335, "cosin": 335, "squar": 335, "root": 335, "gaussian": 335, "sdr": 336, "featur": 336, "v0": 337, "0": 337, "12": 337, "chang": 337, "contributor": 337, "11": 337, "10": 337, "9": 337, "7": 337, "6": 337, "5": 337, "4": 337, "3": 337, "2": 337, "1": 337, "version": 338, "alpha": 338, "releas": 338, "beta": 338}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Conversions": [[0, "conversions"]], "Decibels": [[0, "decibels"]], "Ratios": [[0, "ratios"]], "From E_b/N_0": [[0, "from-e-b-n-0"]], "From E_s/N_0": [[0, "from-e-s-n-0"]], "From S/N": [[0, "from-s-n"]], "Data manipulation": [[1, "data-manipulation"]], "Detection": [[2, "detection"], [7, "detection"]], "Detectors": [[2, "detectors"]], "Theoretical limits": [[2, "theoretical-limits"]], "Digital signal processing": [[3, "digital-signal-processing"]], "FIR filtering": [[3, "fir-filtering"]], "IIR filtering": [[3, "iir-filtering"]], "Polyphase FIR filtering": [[3, "polyphase-fir-filtering"]], "Filter applications": [[3, "filter-applications"]], "Arbitrary resampling": [[3, "arbitrary-resampling"]], "Correlation": [[3, "correlation"]], "Signal manipulation": [[3, "signal-manipulation"]], "Link budgets": [[4, "link-budgets"]], "Channel capacity": [[4, "channel-capacity"]], "Path losses": [[4, "path-losses"]], "Antennas": [[4, "antennas"]], "Measurement": [[5, "measurement"]], "Energy": [[5, "energy"]], "Power": [[5, "power"]], "Voltage": [[5, "voltage"]], "Distance": [[5, "distance"]], "Modulation": [[5, "modulation"], [6, "modulation"], [7, "modulation"]], "Linear modulations": [[6, "linear-modulations"]], "Continuous-phase modulations": [[6, "continuous-phase-modulations"]], "Orthogonal modulations": [[6, "orthogonal-modulations"]], "Pulse shaping": [[6, "pulse-shaping"]], "Symbol mapping": [[6, "symbol-mapping"], [334, "symbol-mapping"]], "Symbol encoding": [[6, "symbol-encoding"]], "Plotting": [[7, "plotting"]], "Configuration": [[7, "configuration"], [326, "configuration"], [328, "configuration"]], "Time-domain": [[7, "time-domain"]], "Frequency-domain": [[7, "frequency-domain"]], "Spectral estimation": [[7, "spectral-estimation"]], "Filter analysis": [[7, "filter-analysis"]], "Probability": [[8, "probability"]], "Constructors": [[9, "constructors"], [18, "constructors"], [26, "constructors"], [34, "constructors"], [48, "constructors"], [54, "constructors"], [59, "constructors"], [76, "constructors"], [80, "constructors"], [82, "constructors"], [93, "constructors"], [100, "constructors"], [116, "constructors"], [126, "constructors"], [128, "constructors"], [144, "constructors"], [146, "constructors"], [149, "constructors"], [151, "constructors"], [167, "constructors"], [176, "constructors"], [184, "constructors"], [186, "constructors"], [188, "constructors"], [196, "constructors"], [198, "constructors"], [204, "constructors"], [210, "constructors"], [212, "constructors"], [234, "constructors"]], "Special methods": [[9, "special-methods"], [18, "special-methods"], [26, "special-methods"], [48, "special-methods"], [54, "special-methods"], [76, "special-methods"], [80, "special-methods"], [82, "special-methods"], [100, "special-methods"], [116, "special-methods"], [126, "special-methods"], [128, "special-methods"], [144, "special-methods"], [146, "special-methods"], [149, "special-methods"], [167, "special-methods"], [176, "special-methods"], [186, "special-methods"], [188, "special-methods"], [198, "special-methods"], [212, "special-methods"], [234, "special-methods"]], "Streaming mode only": [[9, "streaming-mode-only"], [54, "streaming-mode-only"], [76, "streaming-mode-only"], [80, "streaming-mode-only"], [100, "streaming-mode-only"], [116, "streaming-mode-only"], [126, "streaming-mode-only"], [128, "streaming-mode-only"], [144, "streaming-mode-only"], [146, "streaming-mode-only"], [149, "streaming-mode-only"], [186, "streaming-mode-only"], [212, "streaming-mode-only"], [234, "streaming-mode-only"]], "Properties": [[9, "properties"], [18, "properties"], [26, "properties"], [34, "properties"], [48, "properties"], [54, "properties"], [59, "properties"], [76, "properties"], [80, "properties"], [82, "properties"], [100, "properties"], [116, "properties"], [126, "properties"], [128, "properties"], [144, "properties"], [146, "properties"], [149, "properties"], [151, "properties"], [167, "properties"], [176, "properties"], [184, "properties"], [186, "properties"], [188, "properties"], [196, "properties"], [198, "properties"], [204, "properties"], [210, "properties"], [212, "properties"], [234, "properties"]], "Methods": [[18, "methods"], [26, "methods"], [34, "methods"], [48, "methods"], [54, "methods"], [59, "methods"], [76, "methods"], [80, "methods"], [82, "methods"], [88, "methods"], [93, "methods"], [100, "methods"], [126, "methods"], [128, "methods"], [144, "methods"], [146, "methods"], [149, "methods"], [151, "methods"], [167, "methods"], [176, "methods"], [184, "methods"], [186, "methods"], [188, "methods"], [196, "methods"], [198, "methods"], [204, "methods"], [210, "methods"], [212, "methods"], [229, "methods"], [234, "methods"]], "Note": [[34, null], [59, null], [151, null], [184, null], [196, null], [204, null], [210, null], [268, null], [292, null], [299, null]], "See also": [[35, null], [36, null], [45, null], [93, null], [95, null], [106, null], [107, null], [108, null], [110, null], [113, null], [134, null], [136, null], [141, null], [152, null], [153, null], [163, null], [185, null], [197, null], [205, null], [206, null], [208, null], [211, null], [227, null], [228, null], [248, null], [279, null], [318, null]], "Warning": [[259, null], [318, null]], "Sequences": [[322, "sequences"]], "Simulation": [[323, "simulation"]], "Channel models": [[323, "channel-models"]], "Signal impairments": [[323, "signal-impairments"]], "Synchronization": [[324, "synchronization"]], "Phase-locked loops": [[324, "phase-locked-loops"], [333, "phase-locked-loops"]], "Phase error detectors": [[324, "phase-error-detectors"]], "Amplitude control loops": [[324, "amplitude-control-loops"]], "Documentation": [[325, "documentation"]], "Install": [[325, "install"], [326, "install"], [328, "install"]], "Build the docs": [[325, "build-the-docs"]], "Serve the docs": [[325, "serve-the-docs"]], "Formatting": [[326, "formatting"]], "Run the linter": [[326, "run-the-linter"]], "Run the formatter": [[326, "run-the-formatter"]], "Pre-commit": [[326, "pre-commit"]], "Run from VS Code": [[326, "run-from-vs-code"], [328, "run-from-vs-code"]], "Installation": [[327, "installation"], [336, "installation"]], "Install from PyPI": [[327, "install-from-pypi"]], "Install from GitHub": [[327, "install-from-github"]], "Editable install from local folder": [[327, "editable-install-from-local-folder"]], "Install the dev dependencies": [[327, "install-the-dev-dependencies"]], "Unit Tests": [[328, "unit-tests"]], "Run from the command line": [[328, "run-from-the-command-line"]], "Farrow arbitrary resampler": [[329, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[329, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[329, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[329, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[329, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[329, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[329, "downsample-by-an-irrational-rate"]], "FIR filters": [[330, "fir-filters"]], "Create an FIR filter": [[330, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[330, "examine-the-impulse-response-h-n"], [331, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[330, "examine-the-step-response-s-n"], [331, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[330, "examine-the-frequency-response-h-omega"], [331, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[330, "examine-the-group-delay-tau-g-omega"], [331, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[330, "fully-analyze-a-fir-filter"]], "IIR filters": [[331, "iir-filters"]], "Create an IIR filter": [[331, "create-an-iir-filter"]], "Examine the zeros and poles": [[331, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[331, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[331, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[332, "peak-to-average-power"]], "QPSK signal with various pulse shapes": [[332, "qpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[332, "examine-time-domain"]], "Examine frequency domain": [[332, "examine-frequency-domain"]], "Plot across excess bandwidth": [[332, "plot-across-excess-bandwidth"]], "Design a proportional-plus-integrator (PPI) loop filter": [[333, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[333, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[333, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[333, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[333, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[333, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[333, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[334, "phase-shift-keying"]], "Constellations": [[334, "constellations"]], "BPSK": [[334, "bpsk"]], "QPSK": [[334, "qpsk"]], "8-PSK": [[334, "id1"]], "16-PSK": [[334, "id2"]], "Error rate curves": [[334, "error-rate-curves"]], "Bit error rate curves": [[334, "bit-error-rate-curves"]], "Symbol error rate curves": [[334, "symbol-error-rate-curves"]], "Pulse shapes": [[335, "pulse-shapes"]], "Raised cosine": [[335, "raised-cosine"]], "Square-root raised cosine": [[335, "square-root-raised-cosine"]], "Gaussian": [[335, "gaussian"]], "sdr": [[336, "sdr"]], "Features": [[336, "features"]], "v0.0": [[337, "v0-0"]], "v0.0.12": [[337, "v0-0-12"]], "Changes": [[337, "changes"], [337, "id1"], [337, "id3"], [337, "id5"], [337, "id7"], [337, "id9"], [337, "id11"], [337, "id13"], [337, "id15"], [337, "id17"], [337, "id19"], [337, "id21"]], "Contributors": [[337, "contributors"], [337, "id2"], [337, "id4"], [337, "id6"], [337, "id8"], [337, "id10"], [337, "id12"], [337, "id14"], [337, "id16"], [337, "id18"], [337, "id20"], [337, "id22"]], "v0.0.11": [[337, "v0-0-11"]], "v0.0.10": [[337, "v0-0-10"]], "v0.0.9": [[337, "v0-0-9"]], "v0.0.8": [[337, "v0-0-8"]], "v0.0.7": [[337, "v0-0-7"]], "v0.0.6": [[337, "v0-0-6"]], "v0.0.5": [[337, "v0-0-5"]], "v0.0.4": [[337, "v0-0-4"]], "v0.0.3": [[337, "v0-0-3"]], "v0.0.2": [[337, "v0-0-2"]], "v0.0.1": [[337, "v0-0-1"]], "Versioning": [[338, "versioning"]], "Alpha releases": [[338, "alpha-releases"]], "Beta releases": [[338, "beta-releases"]]}, "indexentries": {"module": [[3, "module-sdr"]], "sdr": [[3, "module-sdr"]]}, "docurls": ["api/conversions/", "api/data-manipulation/", "api/detection/", "api/dsp/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/sdr.AGC/", "api/sdr.AGC.__call__/", "api/sdr.AGC.__init__/", "api/sdr.AGC.attack/", "api/sdr.AGC.decay/", "api/sdr.AGC.gain/", "api/sdr.AGC.reference/", "api/sdr.AGC.reset/", "api/sdr.AGC.streaming/", "api/sdr.BinaryErasureChannel/", "api/sdr.BinaryErasureChannel.X/", "api/sdr.BinaryErasureChannel.Y/", "api/sdr.BinaryErasureChannel.__call__/", "api/sdr.BinaryErasureChannel.__init__/", "api/sdr.BinaryErasureChannel.capacities/", "api/sdr.BinaryErasureChannel.capacity/", "api/sdr.BinaryErasureChannel.p/", "api/sdr.BinarySymmetricChannel/", "api/sdr.BinarySymmetricChannel.X/", "api/sdr.BinarySymmetricChannel.Y/", "api/sdr.BinarySymmetricChannel.__call__/", "api/sdr.BinarySymmetricChannel.__init__/", "api/sdr.BinarySymmetricChannel.capacities/", "api/sdr.BinarySymmetricChannel.capacity/", "api/sdr.BinarySymmetricChannel.p/", "api/sdr.CPM/", "api/sdr.CPM.__init__/", "api/sdr.CPM.ber/", "api/sdr.CPM.bps/", "api/sdr.CPM.demodulate/", "api/sdr.CPM.index/", "api/sdr.CPM.modulate/", "api/sdr.CPM.order/", "api/sdr.CPM.phase_offset/", "api/sdr.CPM.pulse_shape/", "api/sdr.CPM.rx_filter/", "api/sdr.CPM.ser/", "api/sdr.CPM.sps/", "api/sdr.CPM.tx_filter/", "api/sdr.Channel/", "api/sdr.Channel.__call__/", "api/sdr.Channel.__init__/", "api/sdr.Channel.capacities/", "api/sdr.Channel.capacity/", "api/sdr.Channel.reset/", "api/sdr.Channelizer/", "api/sdr.Channelizer.__call__/", "api/sdr.Channelizer.__init__/", "api/sdr.Channelizer.channels/", "api/sdr.Channelizer.method/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.Decimator/", "api/sdr.Decimator.__init__/", "api/sdr.Decimator.method/", "api/sdr.Decimator.reset/", "api/sdr.Differentiator/", "api/sdr.Differentiator.__init__/", "api/sdr.DiscreteMemorylessChannel/", "api/sdr.DiscreteMemorylessChannel.P/", "api/sdr.DiscreteMemorylessChannel.X/", "api/sdr.DiscreteMemorylessChannel.Y/", "api/sdr.DiscreteMemorylessChannel.__call__/", "api/sdr.DiscreteMemorylessChannel.__init__/", "api/sdr.EnergyDetector/", "api/sdr.EnergyDetector.p_d/", "api/sdr.EnergyDetector.p_fa/", "api/sdr.EnergyDetector.roc/", "api/sdr.EnergyDetector.threshold/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__call__/", "api/sdr.FIR.__init__/", "api/sdr.FIR.__len__/", "api/sdr.FIR.delay/", "api/sdr.FIR.flush/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.group_delay/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.phase_delay/", "api/sdr.FIR.reset/", "api/sdr.FIR.state/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__call__/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.delay/", "api/sdr.FarrowResampler.flush/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.state/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.FractionalDelay/", "api/sdr.FractionalDelay.__init__/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__call__/", "api/sdr.IIR.__init__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.state/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.Integrator/", "api/sdr.Integrator.__init__/", "api/sdr.Interpolator/", "api/sdr.Interpolator.__init__/", "api/sdr.Interpolator.method/", "api/sdr.LeakyIntegrator/", "api/sdr.LeakyIntegrator.__init__/", "api/sdr.LinearModulation/", "api/sdr.LinearModulation.__init__/", "api/sdr.LinearModulation.ber/", "api/sdr.LinearModulation.bps/", "api/sdr.LinearModulation.decide_symbols/", "api/sdr.LinearModulation.demodulate/", "api/sdr.LinearModulation.map_symbols/", "api/sdr.LinearModulation.modulate/", "api/sdr.LinearModulation.order/", "api/sdr.LinearModulation.phase_offset/", "api/sdr.LinearModulation.pulse_shape/", "api/sdr.LinearModulation.rx_filter/", "api/sdr.LinearModulation.ser/", "api/sdr.LinearModulation.sps/", "api/sdr.LinearModulation.symbol_map/", "api/sdr.LinearModulation.tx_filter/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.__call__/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.integral_gain/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.proportional_gain/", "api/sdr.LoopFilter.reset/", "api/sdr.MLPED/", "api/sdr.MLPED.A_received/", "api/sdr.MLPED.A_reference/", "api/sdr.MLPED.__call__/", "api/sdr.MLPED.__init__/", "api/sdr.MLPED.data_aided_error/", "api/sdr.MLPED.decision_directed_error/", "api/sdr.MLPED.gain/", "api/sdr.MSK/", "api/sdr.MSK.__init__/", "api/sdr.MovingAverager/", "api/sdr.MovingAverager.__init__/", "api/sdr.NCO/", "api/sdr.NCO.__call__/", "api/sdr.NCO.__init__/", "api/sdr.NCO.gain/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.OQPSK/", "api/sdr.OQPSK.__init__/", "api/sdr.PED/", "api/sdr.PED.__call__/", "api/sdr.PED.__init__/", "api/sdr.PED.data_aided_error/", "api/sdr.PED.decision_directed_error/", "api/sdr.PED.gain/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.ber/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.PiMPSK/", "api/sdr.PiMPSK.__init__/", "api/sdr.PolyphaseFIR/", "api/sdr.PolyphaseFIR.__call__/", "api/sdr.PolyphaseFIR.__init__/", "api/sdr.PolyphaseFIR.branches/", "api/sdr.PolyphaseFIR.decimation/", "api/sdr.PolyphaseFIR.delay/", "api/sdr.PolyphaseFIR.input/", "api/sdr.PolyphaseFIR.interpolation/", "api/sdr.PolyphaseFIR.order/", "api/sdr.PolyphaseFIR.output/", "api/sdr.PolyphaseFIR.polyphase_order/", "api/sdr.PolyphaseFIR.polyphase_taps/", "api/sdr.PolyphaseFIR.rate/", "api/sdr.PolyphaseFIR.reset/", "api/sdr.PolyphaseFIR.taps/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.ReplicaCorrelator/", "api/sdr.ReplicaCorrelator.p_d/", "api/sdr.ReplicaCorrelator.p_fa/", "api/sdr.ReplicaCorrelator.roc/", "api/sdr.ReplicaCorrelator.threshold/", "api/sdr.Resampler/", "api/sdr.Resampler.__call__/", "api/sdr.Resampler.__init__/", "api/sdr.Resampler.method/", "api/sdr.albersheim/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.barker/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.db/", "api/sdr.design_bandpass_fir/", "api/sdr.design_bandstop_fir/", "api/sdr.design_frac_delay_fir/", "api/sdr.design_highpass_fir/", "api/sdr.design_lowpass_fir/", "api/sdr.design_multirate_fir/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.downsample/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.euclidean/", "api/sdr.evm/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.hadamard/", "api/sdr.half_sine/", "api/sdr.hamming/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.linear/", "api/sdr.mix/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.percent/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.eye/", "api/sdr.plot.filter/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.magnitude_response/", "api/sdr.plot.p_d/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.phase_tree/", "api/sdr.plot.raster/", "api/sdr.plot.roc/", "api/sdr.plot.ser/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.polyphase_decompose/", "api/sdr.ppb/", "api/sdr.ppm/", "api/sdr.raised_cosine/", "api/sdr.rectangular/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.to_complex_bb/", "api/sdr.to_real_pb/", "api/sdr.unpack/", "api/sdr.upsample/", "api/sdr.walsh/", "api/sdr.wavelength/", "api/sdr.zadoff_chu/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/formatting/", "development/installation/", "development/unit-tests/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})