Search.setIndex({"titles": ["Data manipulation", "Filtering", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "Resampling", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.DDS", "sdr.DDS.__init__", "sdr.DDS.nco", "sdr.DDS.process", "sdr.DDS.reset", "sdr.DDS.step", "sdr.FIR", "sdr.FIR.__init__", "sdr.FIR.delay", "sdr.FIR.filter", "sdr.FIR.frequency_response", "sdr.FIR.frequency_response_log", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.reset", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FIRInterpolator", "sdr.FIRInterpolator.__init__", "sdr.FIRInterpolator.filter", "sdr.FIRInterpolator.polyphase_taps", "sdr.FIRInterpolator.rate", "sdr.FIRInterpolator.reset", "sdr.FIRInterpolator.streaming", "sdr.FIRInterpolator.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.resample", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__init__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.filter", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.filter", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.process", "sdr.NCO.reset", "sdr.NCO.step", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.demodulate", "sdr.PSK.modulate", "sdr.PSK.offset", "sdr.PSK.order", "sdr.PSK.symbol_labels", "sdr.PSK.symbol_map", "sdr.Q", "sdr.Qinv", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.energy", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.hexdump", "sdr.iq_imbalance", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.plot.constellation", "sdr.plot.filter", "sdr.plot.frequency_response", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.raised_cosine", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.unpack", "Simulation", "Synchronization", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155], "hexdump": [0, 118, 153, 154], "arraylik": [0, 2, 3, 4, 5, 6, 25, 28, 31, 32, 34, 43, 44, 45, 51, 54, 55, 58, 59, 60, 63, 74, 79, 83, 88, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 142, 143, 144], "byte": [0, 118], "width": [0, 118], "int": [0, 4, 25, 30, 31, 33, 35, 36, 37, 38, 40, 43, 44, 47, 51, 53, 58, 64, 65, 67, 68, 71, 83, 90, 91, 92, 96, 102, 106, 110, 111, 116, 117, 118, 120, 126, 127, 128, 129, 130, 131, 132, 133, 134, 139, 141, 143], "16": [0, 98, 118, 154], "str": [0, 118, 130, 133], "return": [0, 4, 8, 16, 18, 21, 22, 28, 30, 31, 34, 35, 36, 37, 40, 45, 54, 58, 63, 64, 65, 67, 71, 79, 88, 90, 93, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 139, 140, 141, 142, 143, 147, 148], "specifi": [0, 102, 103, 112, 118, 147, 148], "pack": [0, 118, 120, 153, 154], "x": [0, 3, 4, 5, 6, 8, 25, 28, 31, 34, 43, 45, 51, 54, 58, 63, 74, 79, 83, 88, 91, 93, 94, 99, 100, 101, 102, 104, 107, 109, 110, 111, 112, 113, 114, 119, 120, 121, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 135, 136, 140, 142, 143, 144, 149, 150, 151, 155], "bpe": [0, 120, 143], "ndarrai": [0, 2, 4, 6, 25, 28, 30, 31, 34, 35, 36, 37, 40, 42, 43, 45, 46, 50, 51, 54, 57, 58, 61, 62, 63, 64, 65, 67, 69, 71, 73, 74, 79, 83, 88, 90, 91, 93, 94, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 119, 120, 139, 141, 142, 143, 144], "binari": [0, 2, 4, 92, 97, 98, 104, 105, 106, 107, 108, 112, 120, 135, 143, 144], "arrai": [0, 46, 50, 92, 97, 98, 104, 106, 107, 110, 111, 112, 117, 120, 136, 143, 148, 149], "an": [0, 1, 2, 31, 37, 58, 59, 60, 67, 92, 103, 120, 129, 143, 153], "multipl": [0, 120, 143], "bit": [0, 97, 98, 103, 104, 105, 107, 108, 118, 120, 143, 154], "per": [0, 28, 88, 102, 103, 114, 116, 118, 120, 139, 141, 142, 143, 149, 152], "element": [0, 118, 120, 143], "unpack": [0, 118, 143, 153, 154], "class": [1, 7, 8, 25, 31, 43, 51, 58, 74, 83, 91, 145, 147, 148, 151], "fir": [1, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 126, 127, 128, 129, 131, 132, 134, 138, 153, 154], "implement": [1, 4, 7, 25, 31, 43, 51, 58, 74, 80, 83, 91, 145, 146], "finit": [1, 31, 43, 154], "impuls": [1, 5, 31, 37, 43, 58, 67, 116, 126, 129, 136, 149, 152, 154], "respons": [1, 5, 31, 35, 36, 37, 40, 43, 58, 64, 65, 67, 71, 116, 126, 127, 128, 129, 132, 134, 152, 154], "firinterpol": [1, 43, 44, 45, 46, 47, 48, 49, 50], "polyphas": [1, 43, 44, 46, 50], "interpol": [1, 43, 44, 45, 47], "iir": [1, 5, 8, 17, 36, 37, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 80, 126, 127, 128, 129, 131, 132, 134, 138, 147, 150, 153, 154], "infinit": [1, 58, 154], "awgn_capac": [2, 103, 153], "snr": [2, 102, 103, 144], "calcul": [2, 103, 105, 108, 115, 122], "addit": [2, 102, 103, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 144], "white": [2, 102, 103, 144], "gaussian": [2, 4, 102, 103, 116, 144, 153, 154], "nois": [2, 8, 9, 10, 15, 21, 74, 77, 81, 102, 103, 133, 144, 150], "awgn": [2, 102, 103, 144, 151, 153], "bec_capac": [2, 105, 153], "p": [2, 6, 99, 100, 104, 105, 107, 108, 112, 144], "erasur": [2, 104, 105, 112, 144], "bec": [2, 104, 105, 112, 144, 153], "bsc_capac": [2, 108, 153], "symmetr": [2, 107, 108, 112, 144], "bsc": [2, 107, 108, 112, 144, 153], "fspl": [2, 115, 153], "d": [2, 115, 122, 153], "f": [2, 16, 18, 31, 35, 36, 58, 64, 65, 102, 114, 115, 116, 122, 142, 146, 147, 148, 149, 150, 151, 152], "free": [2, 115], "space": [2, 36, 65, 115], "db": [2, 8, 19, 21, 102, 103, 115, 116, 119, 121, 122, 149, 151, 152], "parabolic_antenna": [2, 122, 153], "freq": [2, 114, 122, 144, 146, 150], "tupl": [2, 31, 35, 36, 58, 64, 65, 122, 125, 135], "gain": [2, 8, 11, 12, 13, 14, 15, 25, 26, 58, 59, 66, 74, 75, 76, 77, 83, 84, 85, 116, 122, 150], "g": [2, 122], "beamwidth": [2, 122], "theta": [2, 5, 26, 83, 85, 87, 122, 132], "parabol": [2, 122], "reflector": [2, 122], "float": [3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 36, 51, 54, 58, 59, 64, 65, 66, 74, 75, 76, 77, 78, 81, 83, 84, 85, 86, 87, 91, 92, 95, 101, 102, 103, 104, 107, 109, 113, 114, 116, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 135, 136, 139, 140, 141, 142, 144], "time": [3, 8, 15, 16, 18, 19, 20, 21, 22, 31, 58, 74, 77, 101, 102, 109, 112, 113, 114, 116, 119, 121, 123, 124, 126, 130, 133, 136, 139, 140, 141, 142, 144, 146, 147, 148, 152], "domain": [3, 101, 102, 109, 113, 114, 119, 121, 123, 124, 126, 130, 133, 136, 140, 142, 144], "signal": [3, 5, 8, 16, 18, 21, 22, 25, 28, 31, 34, 43, 45, 51, 54, 58, 63, 74, 79, 83, 88, 90, 101, 102, 103, 109, 113, 114, 115, 116, 119, 121, 122, 123, 124, 130, 133, 136, 140, 142, 147, 148, 149, 150, 152], "n": [3, 4, 5, 6, 8, 25, 28, 30, 31, 34, 35, 36, 37, 38, 40, 43, 45, 51, 54, 58, 63, 64, 65, 67, 68, 71, 74, 79, 83, 88, 90, 99, 100, 101, 102, 103, 106, 109, 112, 113, 114, 117, 119, 121, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 140, 142, 144, 150, 152], "average_pow": [3, 101, 121, 153], "averag": [3, 101, 102, 103, 121, 130], "papr": [3, 121, 149, 153, 154], "peak": [3, 109, 121, 123, 124], "ratio": [3, 21, 102, 103, 121], "peak_pow": [3, 121, 123, 153], "crest_factor": [3, 109, 121, 153, 154], "crest": [3, 109], "factor": [3, 8, 15, 24, 74, 77, 78, 109, 150], "peak_voltag": [3, 109, 124, 153], "rms_voltag": [3, 109, 140, 153], "root": [3, 4, 136, 140, 141, 147], "mean": [3, 130, 140, 152], "squar": [3, 4, 115, 122, 136, 140, 141, 147], "rm": [3, 109, 140], "psk": [4, 91, 92, 93, 94, 95, 96, 97, 98, 102, 114, 119, 142, 153], "phase": [4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 114, 119, 131, 132, 144, 153], "shift": [4, 91, 93, 94, 95, 96, 98, 147, 148], "kei": [4, 91, 93, 94, 95, 96, 98], "demodul": [4, 91, 93], "time_bandwidth": [4, 116], "span": [4, 116, 139, 141, 149, 152], "sp": [4, 116, 139, 141, 149, 152], "raised_cosin": [4, 139, 152, 153, 154], "alpha": [4, 116, 137, 139, 141, 149, 152], "rais": [4, 136, 139, 141, 147], "cosin": [4, 136, 139, 141, 147], "rc": [4, 139], "root_raised_cosin": [4, 126, 127, 128, 129, 131, 132, 134, 136, 138, 141, 147, 149, 152, 153, 154], "srrc": [4, 136, 141, 149], "binary_cod": [4, 106], "gener": [4, 102, 106, 117, 151], "code": [4, 92, 97, 98, 106, 117], "length": [4, 37, 40, 106, 116, 117, 126, 129, 130, 133, 134, 139, 141, 146, 149, 152], "2": [4, 8, 16, 18, 21, 35, 36, 43, 46, 50, 64, 65, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152], "gray_cod": [4, 117, 153], "grai": [4, 92, 97, 98, 117], "diff_decod": [4, 110, 111, 153], "y": [4, 25, 28, 30, 31, 34, 43, 45, 54, 58, 63, 74, 79, 83, 88, 90, 102, 104, 107, 110, 111, 112, 114, 119, 125, 133, 135, 136, 142, 150], "y_prev": [4, 110, 111], "0": [4, 5, 6, 15, 25, 26, 31, 35, 36, 43, 46, 50, 58, 59, 64, 65, 77, 83, 85, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 119, 120, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 155], "differenti": [4, 110, 111], "decod": [4, 110], "input": [4, 8, 16, 18, 21, 22, 25, 28, 31, 32, 34, 37, 40, 43, 44, 45, 51, 52, 54, 55, 58, 59, 60, 63, 67, 71, 74, 79, 83, 88, 99, 102, 103, 104, 105, 107, 108, 110, 111, 112, 120, 129, 134, 143, 144, 147, 148, 150], "data": [4, 110, 111, 118, 120, 143, 153], "k": [4, 91, 92, 93, 94, 96, 110, 111, 125, 135, 149, 152], "diff_encod": [4, 110, 111, 153], "use_styl": [5, 137], "appli": [5, 43, 114, 119, 125, 135, 137, 142, 144], "": [5, 8, 16, 18, 19, 20, 22, 23, 31, 35, 36, 40, 58, 64, 65, 71, 91, 93, 94, 102, 103, 114, 119, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 142, 146, 151, 153], "default": [5, 37, 40, 97, 98, 133, 137], "matplotlib": [5, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153], "rcparam": [5, 137, 146, 150], "time_domain": [5, 102, 136, 149, 152, 153, 154], "sample_r": [5, 8, 15, 23, 35, 36, 64, 65, 114, 126, 127, 128, 130, 131, 132, 133, 136, 146, 150, 152], "1": [5, 6, 8, 15, 18, 22, 24, 25, 26, 35, 36, 43, 46, 50, 58, 59, 64, 65, 74, 77, 78, 83, 85, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 155], "periodogram": [5, 130, 149, 153, 154], "estim": [5, 91, 93, 130, 133, 150], "power": [5, 101, 102, 103, 121, 122, 123, 130, 152], "spectral": [5, 130, 149, 152], "densiti": [5, 21, 130, 149, 152], "p_": [5, 101, 102, 112, 121, 123, 130], "xx": [5, 130], "us": [5, 25, 27, 32, 44, 51, 52, 59, 60, 74, 80, 91, 93, 103, 105, 108, 118, 120, 126, 129, 130, 133, 134, 143, 147, 148, 152, 153, 155], "welch": [5, 130, 133], "method": [5, 130, 133, 147, 148], "spectrogram": [5, 133, 153, 154], "b": [5, 58, 60, 103, 116, 118, 126, 127, 128, 129, 131, 132, 134, 138, 152], "h": [5, 31, 32, 35, 36, 37, 43, 58, 64, 65, 67, 74, 116, 126, 127, 129, 149, 150, 152], "omega": [5, 26, 83, 85, 86, 126, 127, 128, 131, 132, 150], "step": [5, 25, 28, 30, 31, 40, 58, 71, 83, 88, 90, 126, 134], "zero": [5, 43, 55, 58, 59, 73, 74, 120, 126, 127, 128, 129, 131, 132, 134, 136, 138, 147, 149, 150, 152], "pole": [5, 58, 59, 69, 126, 127, 128, 129, 131, 132, 134, 138, 147], "frequency_respons": [5, 31, 35, 36, 58, 64, 65, 127, 147, 148, 150, 152, 153, 154], "group_delai": [5, 128, 147, 148, 153, 154], "group": [5, 128], "delai": [5, 25, 31, 33, 51, 74, 83, 110, 111, 128, 131, 150], "tau_g": [5, 128], "impulse_respons": [5, 31, 37, 58, 67, 116, 129, 139, 141, 147, 148, 152, 153, 154], "phase_delai": [5, 131, 153], "tau_": [5, 131], "phi": [5, 91, 92, 95, 114, 119, 131], "phase_respons": [5, 132, 153], "step_respons": [5, 31, 40, 58, 71, 134, 147, 148, 150, 153, 154], "zeros_pol": [5, 138, 148, 153, 154], "kwarg": [5, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138], "q": [6, 99, 100, 153], "comput": [6, 99, 100, 102, 115, 147, 148, 150, 152], "complementari": [6, 99, 100], "cumul": [6, 99, 100], "distribut": [6, 99, 100], "function": [6, 8, 17, 31, 58, 59, 74, 99, 100, 103, 116, 130, 133, 147, 148, 150, 152, 153, 154], "standard": [6, 99, 100], "normal": [6, 8, 10, 15, 74, 77, 81, 99, 100, 116, 133, 150, 152], "mathcal": [6, 99, 100, 102, 112], "qinv": [6, 99, 100, 153], "invers": [6, 100], "farrowresampl": [7, 51, 52, 53, 54, 55, 56, 57, 146, 153, 154], "cubic": [7, 51], "farrow": [7, 51, 52, 53, 54, 55, 56, 57, 154], "arbitrari": [7, 51, 52, 53, 54, 55, 56, 57, 153, 154], "closedlooppl": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 145, 150, 153, 154], "A": [8, 16, 18, 19, 20, 21, 22, 24, 31, 74, 106, 117, 118, 119, 122, 139, 141, 145, 150], "defin": [8, 31, 58, 102, 112, 116, 145, 148, 153], "perform": [8, 145, 147, 148, 153], "close": [8, 15, 17, 145, 154], "loop": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 145, 153, 154], "pll": [8, 9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 145, 154], "thi": [8, 28, 31, 43, 58, 88, 91, 98, 102, 103, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 146, 148, 150, 152], "i": [8, 15, 24, 31, 37, 40, 41, 43, 46, 49, 50, 51, 56, 58, 67, 71, 72, 74, 77, 78, 81, 99, 100, 102, 103, 105, 108, 112, 114, 115, 116, 118, 119, 120, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 141, 142, 143, 146, 147, 148, 150, 151, 152, 153, 155], "meant": 8, "analysi": [8, 15, 150, 154], "onli": [8, 31, 39, 43, 48, 51, 55, 58, 70, 97, 98, 102, 150], "block": [8, 25, 43, 74, 83, 110, 111], "diagram": [8, 25, 43, 74, 83, 110, 111], "bb": [8, 150], "ped": [8, 14, 15, 77, 150], "lf": [8, 150], "lo": [8, 150], "e": [8, 25, 101, 104, 105, 113, 147, 148, 150, 151], "j": [8, 25, 43, 46, 50, 58, 102, 112, 119, 147, 148, 150], "nco": [8, 11, 15, 25, 26, 27, 77, 83, 84, 85, 86, 87, 88, 89, 90, 145, 150, 153, 154], "local": [8, 150], "oscil": [8, 25, 27, 83, 85, 145, 150, 154], "baseband": [8, 149, 150], "error": [8, 14, 15, 21, 74, 77, 108, 150], "detector": [8, 14, 15, 77, 150], "filter": [8, 12, 13, 15, 17, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 116, 126, 127, 128, 129, 131, 132, 134, 136, 138, 139, 141, 145, 149, 152, 153, 154], "numer": [8, 25, 27, 83, 85, 145, 148, 150, 154], "control": [8, 25, 27, 83, 85, 145, 150, 154], "The": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 147, 148, 150, 152, 153, 155], "transfer": [8, 17, 31, 58, 59, 74, 116, 147, 148, 150], "2nd": [8, 74, 77, 145, 150, 154], "order": [8, 31, 38, 51, 53, 58, 68, 74, 77, 91, 92, 96, 102, 114, 116, 139, 141, 142, 145, 150, 151, 154], "proport": [8, 12, 74, 75, 77, 115, 122, 145, 154], "plu": [8, 74, 77, 145, 154], "integr": [8, 13, 74, 76, 77, 145, 148, 154], "h_": [8, 43, 46, 50, 150], "z": [8, 25, 31, 58, 74, 83, 110, 111, 147, 148, 150], "k_1": [8, 12, 74, 75, 150], "k_2": [8, 13, 74, 76, 150], "frac": [8, 16, 18, 21, 22, 58, 74, 101, 102, 103, 109, 115, 116, 119, 121, 122, 140, 150], "k_0": [8, 11, 15, 26, 77, 83, 84, 85, 150], "k_p": [8, 14, 15, 77, 150], "refer": [8, 16, 18, 19, 20, 21, 22, 51, 74, 102, 109, 114, 116, 121, 139, 141, 142, 148, 152], "michael": [8, 16, 18, 19, 20, 21, 22, 74, 139, 141], "rice": [8, 16, 18, 19, 20, 21, 22, 74, 139, 141], "digit": [8, 16, 18, 19, 20, 21, 22, 25, 26, 74, 139, 141, 145, 150, 153, 154], "commun": [8, 16, 18, 19, 20, 21, 22, 74, 139, 141, 150, 153], "discret": [8, 16, 18, 19, 20, 21, 22, 74, 102, 112, 139, 141, 144, 146, 150], "approach": [8, 16, 18, 19, 20, 21, 22, 74, 103, 105, 108, 139, 141, 150], "appendix": [8, 74, 139, 141], "c": [8, 16, 18, 19, 20, 21, 22, 74, 91, 98, 103, 105, 108, 115, 122, 150], "lock": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 153], "exampl": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 126, 127, 128, 129, 131, 132, 134, 136, 137, 138, 139, 141, 142, 143, 150], "see": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 38, 39, 41, 42, 45, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 116, 139, 141, 153], "noise_bandwidth": [8, 15, 74, 77, 81], "damping_factor": [8, 15, 74, 77, 78], "creat": [8, 15, 25, 26, 31, 32, 43, 44, 51, 52, 58, 59, 60, 74, 77, 83, 85, 91, 92, 102, 114, 136, 142, 146, 149, 150, 151, 152], "object": [8, 15, 91, 92, 148, 150, 151], "frequency_lock_tim": [8, 16], "freq_offset": [8, 16, 18], "frequenc": [8, 16, 18, 20, 31, 35, 36, 58, 64, 65, 74, 114, 115, 122, 126, 127, 128, 130, 131, 132, 133, 144, 152], "lock_tim": [8, 18, 150], "phase_error_vari": [8, 21], "cn0": [8, 21], "varianc": [8, 21, 102], "steadi": [8, 21], "state": [8, 21, 31, 39, 41, 43, 48, 49, 51, 55, 56, 58, 70, 72], "phase_lock_tim": [8, 22], "bn": [8, 9], "bandwidth": [8, 9, 10, 15, 19, 74, 77, 81, 103, 116, 139, 141, 150, 152], "b_n": [8, 9, 10, 15, 16, 18, 21, 22, 74, 77, 81], "hz": [8, 9, 15, 16, 18, 21, 35, 36, 64, 65, 74, 77, 81, 103, 114, 115, 116, 122, 146], "bnt": [8, 10, 150], "t": [8, 10, 15, 74, 77, 81, 116, 118, 146], "repres": [8, 17, 104, 105], "k0": [8, 11, 15, 25, 26, 77, 83, 84, 85], "k1": [8, 12, 74, 75, 150], "k2": [8, 13, 74, 76, 150], "kp": [8, 14, 15, 77], "omega_3db": [8, 19], "3": [8, 16, 18, 19, 22, 43, 46, 50, 95, 96, 97, 98, 102, 103, 104, 106, 107, 112, 114, 115, 116, 117, 118, 119, 120, 122, 126, 127, 128, 129, 131, 132, 134, 136, 138, 142, 143, 148, 150, 152, 153, 154], "omega_": [8, 19], "textrm": [8, 19], "radian": [8, 19, 20, 21, 25, 26, 150], "omega_n": [8, 20, 150], "natur": [8, 20], "sampl": [8, 15, 23, 25, 26, 28, 30, 31, 33, 35, 36, 37, 40, 43, 45, 51, 55, 64, 65, 67, 71, 74, 77, 81, 83, 85, 86, 88, 90, 102, 114, 116, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 139, 141, 142, 144, 146, 149, 150, 152], "rate": [8, 15, 23, 35, 36, 43, 44, 45, 47, 51, 54, 64, 65, 114, 126, 127, 128, 130, 131, 132, 133, 136, 142, 144], "f_": [8, 15, 23, 35, 36, 45, 64, 65, 114, 116, 126, 127, 128, 130, 131, 132, 133, 136, 142, 146, 147, 148, 150, 152], "zeta": [8, 15, 24, 74, 77, 78], "damp": [8, 15, 24, 74, 77, 78, 150], "properti": [9, 10, 11, 12, 13, 14, 17, 19, 20, 23, 24, 27, 33, 38, 41, 42, 46, 47, 49, 50, 53, 56, 57, 61, 62, 66, 68, 69, 72, 73, 75, 76, 78, 80, 81, 84, 86, 87, 95, 96, 97, 98], "paramet": [15, 16, 18, 21, 26, 28, 30, 32, 34, 35, 36, 37, 40, 44, 45, 52, 54, 55, 59, 60, 63, 64, 65, 67, 71, 77, 79, 85, 88, 90, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143], "where": [15, 74, 77, 81, 102, 103, 112, 116, 147, 148, 153], "period": [15, 74, 77, 81], "second": [15, 16, 18, 22, 74, 77, 81, 116], "critic": [15, 24, 74, 77, 78, 150], "underdamp": [15, 24, 74, 77, 78], "overdamp": [15, 24, 74, 77, 78], "ted": [15, 77], "t_": [16, 18, 22, 54, 116, 152], "fl": [16, 18], "4": [16, 18, 36, 43, 46, 50, 65, 95, 96, 97, 98, 102, 103, 105, 106, 108, 112, 114, 115, 116, 117, 118, 119, 120, 122, 126, 127, 128, 129, 131, 132, 134, 136, 137, 138, 139, 141, 142, 143, 146, 148, 151, 154], "delta": [16, 18, 31, 37, 58, 67, 129, 147, 148], "offset": [16, 18, 25, 26, 83, 85, 87, 91, 92, 95, 102, 114, 119, 142, 144, 150], "take": [16, 18, 22], "onto": [16, 18, 22], "equat": [16, 18, 19, 20, 21, 22, 58], "39": 16, "pl": [18, 22], "38": 18, "34": 19, "33": 20, "sigma_": 21, "theta_": 21, "n_0": [21, 102, 103, 151], "carrier": 21, "43": 21, "40": 22, "less": 24, "than": [24, 97, 98, 119, 125, 135], "greater": 24, "dd": [25, 26, 27, 28, 29, 30, 83, 145, 150, 153, 154], "direct": [25, 26, 145, 150, 154], "synthes": [25, 26, 145, 150, 154], "note": [25, 31, 43, 46, 50, 58, 74, 83, 102, 103, 105, 108, 110, 111, 116, 119, 122, 133], "increment": [25, 26, 28, 83, 85, 86, 88, 150], "v": [25, 83], "output": [25, 28, 30, 31, 34, 37, 40, 43, 45, 58, 59, 60, 67, 71, 74, 79, 83, 88, 90, 102, 103, 104, 105, 107, 108, 111, 112, 120, 129, 134, 143, 146, 147, 148, 150], "complex": [25, 28, 30, 91, 93, 94, 98, 102, 103, 119, 125, 135, 144, 146, 147, 148, 151], "exponenti": [25, 28, 30, 146, 147, 148], "constant": [25, 26, 74, 83, 85, 86, 148, 150], "accumul": [25, 26, 83, 85, 86, 150], "absolut": [25, 26, 83, 85, 87, 103], "unit": [25, 31, 40, 58, 71, 74, 83, 85, 86, 87, 101, 102, 103, 110, 111, 113, 123, 124, 134, 139, 140, 141, 147, 148, 150], "adder": [25, 74, 83, 110, 111, 150], "process": [25, 28, 83, 88, 148, 150], "variabl": [25, 28, 83, 88, 118, 150], "reset": [25, 29, 31, 39, 43, 48, 51, 55, 58, 70, 74, 82, 83, 89], "forward": [25, 30, 83, 90], "vari": [28, 88], "number": [30, 35, 36, 37, 40, 64, 65, 67, 71, 90, 102, 116, 118, 120, 126, 127, 128, 129, 130, 131, 132, 133, 134, 139, 141, 143], "wrapper": [31, 58], "scipi": [31, 34, 45, 58, 130, 133, 152, 153], "convolv": [31, 34, 45, 136, 149], "It": [31, 58, 74, 102], "support": [31, 58], "one": [31, 58, 97, 98, 116, 118, 126, 127, 128, 130, 131, 132, 133, 147, 148, 149, 152], "stream": [31, 32, 34, 39, 41, 43, 44, 45, 48, 49, 51, 52, 55, 56, 58, 59, 60, 70, 72], "its": [31, 58, 59, 102, 147, 148, 152], "feedforward": [31, 32, 42, 43, 44, 46, 50, 58, 60, 62, 126, 127, 128, 129, 131, 132, 134, 138, 147, 148], "coeffici": [31, 32, 43, 44, 58, 60, 126, 127, 128, 129, 131, 132, 134, 138, 147, 148], "h_i": [31, 32, 42, 43, 44, 46, 50, 147], "sum_": [31, 58, 101, 102, 103, 113, 140], "sum": [31, 58, 152], "limits_": [31, 58], "bool": [31, 32, 41, 43, 44, 49, 51, 52, 56, 58, 59, 60, 72, 125, 132, 135], "fals": [31, 32, 43, 44, 51, 52, 58, 59, 60, 104, 107, 112, 125, 148, 152], "frequency_response_log": [31, 36, 58, 65], "logarithm": [31, 36, 58, 65, 126, 127, 128, 130, 131, 132, 147, 148], "axi": [31, 36, 58, 65, 125, 126, 127, 128, 130, 131, 132, 133, 135, 136, 146], "none": [31, 37, 40, 51, 55, 74, 82, 102, 103, 112, 120, 125, 126, 129, 130, 133, 134, 135, 143, 144, 146], "when": [31, 37, 40, 58, 67, 71, 102, 103, 104, 105, 107, 108, 126, 127, 128, 129, 131, 132, 134, 146, 147, 148], "mode": [31, 32, 34, 39, 41, 43, 44, 45, 48, 49, 51, 52, 55, 56, 58, 59, 60, 70, 72, 149], "u": [31, 40, 58, 71, 134, 147, 148], "indic": [31, 32, 41, 43, 44, 49, 51, 52, 56, 58, 59, 60, 72, 119, 132], "whether": [31, 32, 41, 43, 44, 49, 51, 52, 56, 58, 59, 60, 72, 132], "tap": [31, 42, 43, 44, 46, 50, 51, 57, 58, 61, 62, 147, 148], "In": [32, 34, 41, 44, 45, 46, 49, 50, 52, 56, 59, 60, 72, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 126, 127, 128, 129, 131, 132, 134, 136, 137, 138, 139, 141, 142, 143, 146, 151], "previou": [32, 44, 52, 55, 59, 60, 110, 111], "ar": [32, 36, 43, 44, 46, 50, 52, 59, 60, 65, 92, 103, 104, 105, 107, 108, 120, 125, 126, 127, 128, 130, 131, 132, 133, 135, 137, 146, 148, 150, 152, 153, 155], "preserv": [32, 41, 44, 49, 52, 56, 59, 60, 72], "between": [32, 41, 43, 44, 49, 52, 56, 59, 60, 72, 115, 130, 133, 150], "call": [32, 41, 44, 49, 52, 56, 59, 60, 72], "liter": [34, 45, 127, 128, 131, 132], "full": [34, 45], "valid": [34, 45, 149], "same": [34, 45, 147], "non": [34, 45], "convolut": [34, 45], "detail": [34, 45], "alwai": [34, 45], "produc": [34, 43, 45, 116, 152], "1024": [35, 36, 64, 65, 126, 127, 128, 131, 132, 149, 152], "from": [35, 36, 58, 59, 64, 65, 91, 92, 98, 133, 147, 148, 150, 153], "plot": [35, 36, 37, 40, 64, 65, 67, 71, 95, 96, 97, 98, 102, 103, 105, 108, 114, 116, 119, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 146, 147, 148, 149, 150, 151, 152, 153, 154], "decad": [36, 65, 126, 127, 128, 131, 132, 147, 150], "equival": [43, 102, 103, 146], "first": [43, 120, 143], "upsampl": 43, "r": [43, 44, 45, 46, 47, 50, 51, 54, 103, 116, 139, 141, 148, 150, 152], "insert": 43, "each": [43, 118, 130, 133], "prototyp": [43, 46, 50], "instead": [43, 125], "decompos": 43, "parallel": 43, "commut": 43, "prevent": 43, "need": 43, "multipli": 43, "case": 43, "2x": 43, "6": [43, 46, 50, 97, 98, 106, 112, 115, 117, 118, 122, 126, 127, 128, 129, 131, 132, 134, 136, 138, 147, 148, 150, 151], "5": [43, 46, 50, 97, 102, 104, 106, 107, 108, 112, 114, 116, 117, 118, 119, 122, 126, 127, 128, 129, 131, 132, 134, 136, 138, 139, 141, 142, 146, 147, 148, 149, 150, 151, 152, 154], "hold": [43, 120], "top": 43, "bottom": 43, "relat": [43, 46, 50, 103, 116], "polyphase_tap": [43, 46, 50], "befor": [46, 50, 155], "decomposit": [46, 50], "after": [46, 50], "np": [46, 50, 102, 103, 104, 105, 107, 108, 112, 114, 119, 126, 127, 128, 129, 131, 132, 134, 136, 138, 142, 146, 147, 148, 149, 150, 151, 152], "arang": [46, 50, 102, 146, 149, 150], "10": [46, 50, 102, 103, 106, 112, 114, 115, 116, 117, 118, 119, 121, 122, 125, 126, 127, 128, 129, 131, 132, 134, 136, 138, 139, 141, 142, 146, 147, 148, 149, 150, 151, 152], "out": [46, 50, 95, 96, 97, 98, 99, 100, 104, 106, 107, 110, 111, 112, 115, 117, 120, 122, 128, 137, 143], "7": [46, 50, 97, 98, 106, 112, 117, 118, 136], "8": [46, 50, 95, 96, 97, 98, 102, 103, 105, 106, 108, 112, 116, 117, 118, 122, 126, 127, 128, 129, 131, 132, 134, 136, 137, 138, 139, 141, 147, 148, 149, 150, 152], "9": [46, 50, 106, 112, 117, 118, 139, 141, 149, 151, 152, 154], "resampl": [51, 52, 53, 54, 55, 56, 57, 153, 154], "http": [51, 109, 116, 121], "wirelesspi": 51, "com": [51, 116], "fraction": [51, 55, 116, 146], "structur": 51, "new": [51, 52, 91, 92, 142], "given": [51, 54, 147, 148], "index": [51, 55, 135], "vector": [55, 130, 133], "should": 55, "equal": 55, "three": [55, 146, 152], "If": [55, 92, 102, 103, 112, 120, 125, 126, 129, 130, 133, 134, 135, 136, 143, 153], "lfilter": 58, "b_i": [58, 60, 62, 126, 127, 128, 129, 131, 132, 134, 138, 148], "feedback": [58, 60, 61, 126, 127, 128, 129, 131, 132, 134, 138, 148], "a_j": [58, 60, 61, 126, 127, 128, 129, 131, 132, 134, 138, 148], "These": [58, 137, 150], "differ": [58, 97, 98, 152], "a_0": 58, "left": [58, 101, 102, 103, 113, 115, 116, 119, 122, 123, 124, 140], "m": [58, 91, 92, 93, 94, 96, 98, 112], "right": [58, 101, 102, 103, 113, 115, 116, 119, 122, 123, 124, 140], "classmethod": [58, 59], "zerospol": [58, 59, 126, 127, 128, 129, 131, 132, 134, 138, 148], "self": [58, 59], "100": [58, 67, 71, 102, 103, 105, 108, 126, 129, 134, 136, 142, 146], "a_tap": [58, 61, 126, 127, 128, 129, 131, 132, 134, 138, 148, 150], "b_tap": [58, 62, 126, 127, 128, 129, 131, 132, 134, 138, 148, 150], "loopfilt": [74, 75, 76, 77, 78, 79, 80, 81, 82, 145, 150, 153, 154], "ppi": [74, 77, 145], "can": [74, 102, 116, 120, 130, 133, 147, 148, 155], "track": 74, "cannot": 74, "howev": [74, 105, 108, 146], "chirp": 74, "ramp": 74, "underli": [74, 80], "modul": [91, 92, 94, 96, 102, 114, 119, 142, 151, 153], "x_hat": [91, 93, 125, 151], "symbol": [91, 92, 93, 94, 97, 98, 102, 103, 114, 116, 125, 135, 139, 141, 149, 151, 152], "hat": [91, 93, 125, 135], "decim": [91, 93, 94, 98, 151], "maximum": [91, 93, 125, 135], "likelihood": [91, 93], "degre": [91, 92, 95, 114, 119, 122], "symbol_label": [91, 92, 97, 98], "valu": [91, 92, 97, 99, 100, 110, 111, 116, 119, 125, 133, 135, 148], "label": [91, 92, 97, 102, 114, 116, 119, 133, 136, 139, 141, 142, 146, 149, 150, 152], "consecut": [91, 92, 97], "symbol_map": [91, 95, 96, 97, 98, 135, 136, 149], "map": [91, 98, 135], "dot": [91, 98], "mapsto": [91, 98], "mathbb": [91, 98, 103], "bin": [92, 97, 98, 135, 151], "ge": 92, "like": [92, 153], "must": [92, 102, 116, 139, 141], "have": [92, 120, 143], "uniqu": 92, "plt": [95, 96, 97, 98, 102, 103, 105, 108, 114, 116, 119, 126, 127, 128, 129, 131, 132, 134, 136, 138, 139, 141, 142, 146, 147, 148, 149, 150, 151, 152], "figur": [95, 96, 97, 98, 102, 103, 105, 108, 114, 116, 119, 126, 127, 128, 129, 131, 132, 134, 136, 137, 138, 139, 141, 142, 146, 147, 148, 149, 150, 151, 152], "figsiz": [95, 96, 97, 98, 102, 103, 105, 108, 114, 116, 119, 126, 127, 128, 129, 131, 132, 134, 136, 137, 138, 139, 141, 142, 146, 147, 148, 149, 150, 151, 152], "45": [95, 102, 114, 119, 142], "adjac": [97, 98, 152], "annot": [97, 98, 135, 154], "mai": [97, 98, 137, 148], "more": [97, 98, 133], "00000000e": [98, 148], "00": [98, 148], "00j": 98, "07106781e": 98, "01": [98, 118, 148, 150], "01j": 98, "12323400e": 98, "17": [98, 122], "83697020e": 98, "22464680e": 98, "16j": 98, "real": [99, 100, 102, 146, 147, 148, 149, 150], "probabl": [99, 100, 104, 105, 107, 108, 112, 144, 153], "exceed": [99, 100], "15865525393145707": [99, 100], "158655": [99, 100], "0000010494310452": [99, 100], "measur": [101, 102, 109, 113, 121, 123, 124, 140, 150, 153, 154], "text": [101, 102, 103, 105, 108, 109, 114, 115, 121, 123, 124, 140, 142], "avg": [101, 102, 121], "seed": 102, "add": [102, 114, 142, 144, 151, 155], "which": [102, 103, 114, 119, 122, 125, 135, 142, 146, 150, 152], "ad": [102, 153, 154], "desir": [102, 151], "explicitli": 102, "assum": [102, 112, 120, 143], "contain": [102, 118], "known": 102, "pass": [102, 104, 107, 112, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 144, 147, 148], "linear": 102, "random": [102, 104, 107, 112, 114, 119, 136, 142, 149, 151], "numpi": [102, 143, 146, 147, 148, 149, 150, 151, 152, 153], "default_rng": 102, "noisi": 102, "w": [102, 146, 147, 148, 149, 150, 151, 152], "sigma": [102, 103], "For": [102, 126, 127, 128, 129, 131, 132, 134, 138, 147], "sim": 102, "cn": 102, "sinusoid": [102, 148], "set": [102, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 148], "sin": 102, "pi": [102, 115, 116, 119, 122, 126, 127, 128, 129, 131, 132, 134, 136, 138, 146, 147, 148, 149, 150], "titl": [102, 103, 105, 108, 114, 119, 136, 142, 146, 149, 150, 152], "tight_layout": [102, 103, 105, 108, 114, 136, 142, 149, 150, 151, 152], "qpsk": [102, 114, 136, 142], "e_": [102, 103, 151], "ha": [102, 116, 122, 150, 152], "randint": [102, 104, 107, 112, 114, 119, 136, 142, 149, 151], "1_000": [102, 114, 119, 142], "constel": [102, 114, 119, 125, 142], "zorder": [102, 114, 142], "infti": [102, 103], "nand": 102, "capac": [103, 105, 108], "channel": [103, 104, 105, 107, 108, 112, 153], "2d": 103, "wa": 103, "x_i": [103, 104, 105, 107, 108, 112, 119], "y_i": [103, 104, 105, 107, 108, 112], "log_2": 103, "monoton": 103, "decreas": 103, "limit": [103, 125, 135], "esn0": [103, 151], "linspac": [103, 105, 108, 148], "20": [103, 104, 107, 112, 114, 118, 119, 149, 152], "xlabel": [103, 105, 108, 146, 150, 152], "energi": [103, 113, 139, 141, 153], "psd": 103, "ylabel": [103, 105, 108, 146, 150, 152], "grid": [103, 105, 108, 137, 146, 150, 152], "true": [103, 104, 105, 107, 108, 112, 125, 132, 135, 137, 151], "At": 103, "occur": 103, "e_b": 103, "view": 103, "59": 103, "shannon": 103, "ebn0": 103, "log10": [103, 152], "sequenc": [104, 107, 112, 144], "through": [104, 107, 112, 144, 147, 148, 150], "25": [104, 107, 112, 146, 150, 152], "roughli": [104, 107, 146], "eras": 104, "11": [106, 117], "12": [106, 117, 147, 151], "13": [106, 117], "14": [106, 117], "15": [106, 117], "transit": [107, 108, 112, 144], "flip": 107, "h_b": 108, "cf": 109, "v_": [109, 124, 140], "en": [109, 121], "wikipedia": [109, 121], "org": [109, 121], "wiki": [109, 121], "encod": [110, 111], "uncod": 111, "dmc": [112, 144, 153], "memoryless": [112, 144], "matrix": [112, 144], "pr": 112, "y_j": 112, "alphabet": 112, "size": [112, 146, 149, 150, 152], "ldot": 112, "frequency_offset": [114, 144], "freq_rat": 114, "cycl": 114, "000": 114, "1e": 114, "5e": 114, "deg": [114, 119], "path": 115, "loss": 115, "log_": [115, 121], "distanc": 115, "meter": [115, 122], "transmitt": 115, "receiv": 115, "km": 115, "link": [115, 153], "ghz": [115, 122], "1e3": 115, "1e9": [115, 122], "92": 115, "44778322188337": 115, "so": [115, 116, 153], "doubl": [115, 122], "result": [115, 122], "increas": [115, 122, 148], "2e3": 115, "98": 115, "468383135163": 115, "also": [115, 116, 153], "2e9": 115, "puls": [116, 136, 139, 141, 153, 154], "shape": [116, 136, 139, 141, 153, 154], "product": [116, 152], "sym": [116, 152], "side": [116, 126, 127, 128, 130, 131, 132, 133, 147, 148, 149, 152], "thought": [116, 155], "smaller": [116, 152], "wider": 116, "even": [116, 139, 141], "amplitud": [116, 119, 144, 146, 150], "nomin": 116, "passband": [116, 149], "exp": [116, 119, 126, 127, 128, 129, 131, 132, 134, 136, 138, 146, 148, 149, 150], "sqrt": [116, 140, 149, 150, 152], "ln": 116, "www": 116, "mathwork": 116, "help": 116, "ref": 116, "gaussdesign": 116, "html": 116, "onlinelibrari": 116, "wilei": 116, "doi": 116, "pdf": 116, "1002": 116, "9780470041956": 116, "app2": 116, "h_0p1": [116, 139, 141], "h_0p2": 116, "h_0p3": 116, "displai": [118, 126, 127, 128, 130, 131, 132, 133], "consid": 118, "convert": 118, "line": 118, "string": [118, 130, 133], "print": [118, 146, 147, 148, 150], "quick": 118, "brown": 118, "fox": 118, "jump": 118, "over": 118, "lazi": 118, "dog": 118, "00000000": 118, "54": 118, "68": 118, "65": 118, "71": 118, "75": [118, 150, 151], "69": 118, "63": 118, "6b": 118, "62": 118, "72": 118, "6f": 118, "77": 118, "6e": 118, "00000010": 118, "66": 118, "78": 118, "6a": 118, "6d": 118, "70": [118, 152], "73": 118, "76": 118, "74": 118, "00000020": 118, "6c": 118, "61": 118, "7a": 118, "79": 118, "64": [118, 148], "67": 118, "he": 118, "02": [118, 148, 150], "03": [118, 148], "04": [118, 148], "00000004": 118, "05": [118, 146, 148, 150], "06": 118, "07": 118, "08": 118, "00000008": 118, "09": 118, "0a": 118, "iq_imbal": [119, 144, 153], "iq": [119, 144], "imbal": [119, 144], "posit": 119, "compon": 119, "larger": [119, 125, 135], "quadratur": 119, "lead": 119, "follow": [119, 137, 150], "g_i": 119, "180": 119, "g_q": 119, "x_q": 119, "horizont": 119, "stretch": 119, "while": [119, 152], "neg": 119, "vertic": 119, "y1": 119, "y2": 119, "subplot": [119, 150, 151], "y_1": 119, "legend": [119, 146, 149, 150, 152], "y_2": 119, "northwest": 119, "northeast": 119, "dtype": [120, 136, 143, 150], "dtypelik": [120, 143], "most": [120, 143], "signific": [120, 143], "enough": 120, "fill": 120, "last": 120, "remain": 120, "type": [120, 127, 128, 130, 131, 132, 143, 154], "smallest": 120, "unsign": 120, "integ": 120, "uint8": [120, 143], "diamet": 122, "effici": 122, "55": 122, "le": [122, 139, 141], "eta": 122, "dbi": 122, "half": 122, "arcsin": 122, "83": 122, "dish": 122, "21": 122, "810210290266568": 122, "437435887991374": 122, "23": 122, "sinc": 122, "antenna": 122, "we": [122, 153], "observ": 122, "830810203546193": 122, "529544741425365": 122, "max": [123, 124], "voltag": [124, 140], "heatmap": [125, 151], "scatter": 125, "both": [125, 135, 146, 150], "keyword": [125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 147, 148], "argument": [125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 147, 148], "pyplot": [125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152], "hist2d": 125, "n_time": [126, 148], "n_freq": 126, "x_axi": [126, 127, 128, 130, 131, 132, 133, 147, 148, 149, 150], "two": [126, 127, 128, 130, 131, 132, 133, 146, 147, 148], "log": [126, 127, 128, 130, 131, 132, 147, 148, 150], "n_t": 126, "n_f": 126, "scale": [126, 127, 128, 130, 131, 132, 133, 147, 148], "option": [126, 127, 128, 130, 131, 132, 133], "spectrum": [126, 127, 128, 130, 131, 132, 133], "h_srrc": [126, 127, 128, 129, 131, 132, 134, 136, 138], "1j": [126, 127, 128, 129, 131, 132, 134, 136, 138, 146, 148, 149, 150], "conj": [126, 127, 128, 129, 131, 132, 134, 138, 148, 150], "30": [126, 129, 134, 148], "ylim": [128, 147, 150, 152], "48": 128, "52": 128, "window": [130, 133], "hann": [130, 133], "overlap": [130, 133, 149], "fft": [130, 133], "median": 130, "segment": [130, 133], "256": [130, 133, 149], "point": [130, 133], "unwrap": [132, 150], "pcolormesh": 133, "By": 133, "color": [133, 146, 149, 150, 152], "bar": 133, "rang": [133, 150], "10th": 133, "100th": 133, "percentil": 133, "provid": [133, 153], "dynam": 133, "activ": 133, "chang": [133, 155], "vmin": 133, "vmax": 133, "represent": 135, "50": [135, 146, 149], "bpsk": [136, 149], "1000": 136, "10e3": 136, "complex64": [136, 150], "style": 137, "revert": 137, "rcdefault": 137, "_rc_param": 137, "rc_param": 137, "ax": [137, 146, 150], "autolayout": 137, "max_open_warn": 137, "titleweight": 137, "bold": 137, "linestyl": [137, 146, 150, 152], "excess": [139, 141, 152], "h_0p5": [139, 141], "h_0p9": [139, 141], "sample_rate_offset": [142, 144], "ppm": [142, 144], "part": [142, 150], "million": 142, "import": [146, 147, 148, 149, 150, 151, 152, 153], "config": [146, 147, 148, 149, 150, 151, 152], "inlinebackend": [146, 147, 148, 149, 150, 151, 152], "print_figure_kwarg": [146, 147, 148, 149, 150, 151, 152], "facecolor": [146, 147, 148, 149, 150, 151, 152], "widget": [146, 147, 148, 149, 150, 151, 152], "prop_cycl": [146, 150], "by_kei": [146, 150], "continu": 146, "tx": 146, "decai": [146, 148], "marker": [146, 147, 148], "o": 146, "fillstyl": 146, "imag": 146, "origin": 146, "show": [146, 147, 148, 149, 150, 151, 152], "now": 146, "accomplish": 146, "librari": [146, 151, 153, 155], "def": [146, 151], "resample_sign": 146, "new_sample_r": 146, "ty": 146, "notic": [146, 152], "everi": 146, "200": 146, "four": 146, "400": 146, "other": [146, 155], "appear": 146, "fourth": 146, "often": 146, "do": 146, "align": 146, "315": 146, "32": 146, "user": [147, 148], "below": [147, 148], "00095881": 147, "00175008": 147, "00423912": 147, "00588237": 147, "00615087": 147, "00474585": 147, "00170436": 147, "0025481": 147, "00721629": 147, "01123216": 147, "01342329": 147, "01273174": 147, "00845039": 147, "00043678": 147, "01073645": 147, "02372925": 147, "03650167": 147, "04650553": 147, "05098414": 147, "04734541": 147, "03355823": 147, "00851466": 147, "0276993": 147, "07367186": 147, "12670168": 147, "18306847": 147, "2381038": 147, "28726435": 147, "32607284": 147, "3509308": 147, "35948882": 147, "conveni": [147, 148], "evalu": [147, 148], "envelop": [147, 148], "easili": [147, 148], "here": [147, 148], "altern": 148, "conjug": 148, "0x000002214b040a88": 148, "47820725": 148, "78207252e": 148, "58172329e": 148, "10862468e": 148, "86109590e": 148, "21565653e": 148, "01140214e": 148, "57286400e": 148, "67772160e": 148, "47338728e": 148, "10422993e": 148, "89312837e": 148, "12240078e": 148, "03953322e": 148, "69685122e": 148, "63882791e": 148, "81474977e": 148, "47193366e": 148, "85259041e": 148, "15647504e": 148, "23851924e": 148, "42176895e": 148, "84684395e": 148, "42721858e": 148, "72236648e": 148, "14721649e": 148, "10813095e": 148, "94024315e": 148, "78877688e": 148, "74077567e": 148, "87820725": 148, "53637958": 148, "94724205": 148, "13335164": 148, "1455082": 148, "04436799": 148, "88708159": 148, "71930943": 148, "5719707": 148, "46154771": 148, "39261642": 148, "36139242": 148, "35935288": 148, "3763214": 148, "40270968": 148, "43085717": 148, "45557651": 148, "47410241": 148, "48566716": 148, "49090568": 148, "49124786": 148, "48840102": 148, "4839738": 148, "47925143": 148, "47510421": 148, "47199608": 148, "47005584": 148, "46917696": 148, "46911955": 148, "denomin": 148, "73910363": 148, "30614675j": 148, "plane": 148, "endpoint": 148, "concaten": 148, "0x000002214dc574c8": 148, "lyon": 148, "understand": 148, "3rd": 148, "edit": 148, "section": [148, 150], "insid": 148, "circl": 148, "outsid": 148, "unstabl": 148, "n_symbol": 149, "500": [149, 150], "x_bb_rect": 149, "papr_bb_rect": 149, "x_pb_rect": 149, "papr_pb_rect": 149, "x_bb_0p9": 149, "papr_bb_0p9": 149, "x_bb_0p5": 149, "papr_bb_0p5": 149, "x_bb_0p1": 149, "papr_bb_0p1": 149, "2f": 149, "rf": [149, 150], "xlim": [149, 150, 152], "x_pb_0p9": 149, "papr_pb_0p9": 149, "x_pb_0p5": 149, "papr_pb_0p5": 149, "x_pb_0p1": 149, "papr_pb_0p1": 149, "configur": 150, "0x00000290f1ce3488": 150, "theta_0": 150, "phase_error": 150, "freq_estim": 150, "suptitl": [150, 151], "ones": 150, "angl": 150, "system": [150, 153], "avail": [150, 151], "001": 150, "005": 150, "b_nt": 150, "0005": 150, "00001": 150, "0125": 150, "015": 150, "0175": 150, "t_lock": 150, "analyze_psk": 151, "100_000": 151, "achiev": [151, 152], "n0": 151, "18": 151, "rectangular": 152, "rect": 152, "rc_0p1": 152, "rc_0p5": 152, "rc_0p9": 152, "nyquist": 152, "specif": 152, "pm": 152, "roll": 152, "60": 152, "total": 152, "nearli": 152, "compar": 152, "null": 152, "small": 152, "lobe": 152, "much": 152, "higher": 152, "h_rect": 152, "freqz": 152, "worn": 152, "whole": 152, "h_rc_0p1": 152, "h_rc_0p5": 152, "h_rc_0p9": 152, "rel": 152, "main": 152, "p_rect": 152, "cumsum": 152, "ab": 152, "p_rc_0p1": 152, "p_rc_0p5": 152, "p_rc_0p9": 152, "One": 152, "within": 152, "variou": 152, "srrc_0p1": 152, "srrc_0p5": 152, "srrc_0p9": 152, "therefor": 152, "similar": 152, "significantli": 152, "due": 152, "being": 152, "h_srrc_0p1": 152, "h_srrc_0p5": 152, "h_srrc_0p9": 152, "p_srrc_0p1": 152, "p_srrc_0p5": 152, "p_srrc_0p9": 152, "gauss_0p1": 152, "gauss_0p2": 152, "gauss_0p3": 152, "python": 153, "packag": 153, "softwar": 153, "radio": 153, "goal": 153, "tool": 153, "design": 153, "build": 153, "analyz": 153, "reli": 153, "interoper": 153, "veri": 153, "possibl": 153, "numba": 153, "acceler": 153, "computation": 153, "intens": 153, "addition": 153, "aim": 153, "replic": 153, "relev": 153, "matlab": 153, "dsp": 153, "toolbox": 153, "progress": 153, "someth": 153, "you": 153, "includ": 153, "pleas": 153, "open": 153, "issu": 153, "github": 153, "impair": 153, "manipul": 153, "model": 153, "budget": 153, "util": 153, "releas": 154, "juli": 154, "2023": 154, "helper": 154, "improv": 154, "matt": 154, "hostett": 154, "mhostett": 154, "semant": 155, "major": 155, "minor": 155, "patch": 155, "introduc": 155, "api": 155, "featur": 155, "backward": 155, "compat": 155, "make": 155, "bug": 155, "fix": 155, "There": 155, "guarante": 155, "them": 155, "thei": 155}, "objects": {"": [[1, 0, 0, 1, "sdr", ""]], "sdr": [[8, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [25, 1, 1, "", "DDS", "Implements a direct digital synthesizer (DDS)."], [31, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [43, 1, 1, "", "FIRInterpolator", "Implements a polyphase finite impulse response (FIR) interpolating filter."], [51, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [58, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [74, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [83, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [91, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [99, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [100, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [101, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [102, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [103, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [104, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [105, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [106, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [107, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [108, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [109, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [110, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [111, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [112, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [113, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [114, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [115, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [116, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [117, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [118, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [119, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [120, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [121, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [122, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [123, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [124, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [139, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [140, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [141, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [142, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [143, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."]], "sdr.ClosedLoopPLL": [[9, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [10, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [11, 2, 1, "", "K0", "The NCO gain $K_0$."], [12, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [13, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [14, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [15, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [16, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [17, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [18, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [19, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [20, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [21, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [22, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [23, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [24, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[15, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [15, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [15, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [15, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [15, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[16, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[18, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[21, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.DDS": [[26, 3, 1, "", "__init__", "Creates a direct digital synthesizer (DDS)."], [27, 2, 1, "", "nco", "The numerically-controlled oscillator (NCO) used by the DDS."], [28, 3, 1, "", "process", "Steps the DDS with the variable phase increment signal $x[n]$."], [29, 3, 1, "", "reset", "Resets the DDS."], [30, 3, 1, "", "step", "Steps the DDS forward by $N$ samples."]], "sdr.DDS.__init__": [[26, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [26, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [26, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.DDS.process": [[28, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the DDS."]], "sdr.DDS.step": [[30, 4, 2, "p-N", "N", "The number of samples $N$ to step the DDS forward."]], "sdr.FIR": [[32, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [33, 2, 1, "", "delay", "The delay of the FIR filter in samples."], [34, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the FIR filter."], [35, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the FIR filter."], [36, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the FIR filter on a logarithmic frequency axis."], [37, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [38, 2, 1, "", "order", "The order of the FIR filter, $N$."], [39, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [40, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [41, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [42, 2, 1, "", "taps", "The feedforward taps $h_i$."]], "sdr.FIR.__init__": [[32, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$."], [32, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to filter()."]], "sdr.FIR.filter": [[34, 4, 2, "p-mode", "mode", "The non-streaming convolution mode. See scipy.signal.convolve() for details. In streaming mode, $N$ inputs always produce $N$ outputs."], [34, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.FIR.frequency_response": [[35, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [35, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.frequency_response_log": [[36, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [36, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [36, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[37, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.step_response": [[40, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIRInterpolator": [[44, 3, 1, "", "__init__", "Creates a polyphase FIR interpolating filter with feedforward coefficients $h_i$."], [45, 3, 1, "", "filter", "Filters and interpolates the input signal $x[n]$ with the FIR filter."], [46, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [47, 2, 1, "", "rate", "The interpolation rate $r$."], [48, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [49, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [50, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.FIRInterpolator.__init__": [[44, 4, 2, "p-rate", "rate", "The interpolation rate $r$."], [44, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to filter()."], [44, 4, 2, "p-taps", "taps", "The feedforward coefficients $h_i$."]], "sdr.FIRInterpolator.filter": [[45, 4, 2, "p-mode", "mode", "The non-streaming convolution mode. See scipy.signal.convolve() for details. In streaming mode, $N$ inputs always produce $N r$ outputs."], [45, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$."]], "sdr.FarrowResampler": [[52, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [53, 2, 1, "", "order", "The order of the filter."], [54, 3, 1, "", "resample", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [55, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [56, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [57, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__init__": [[52, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to resample()."]], "sdr.FarrowResampler.resample": [[54, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [54, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.reset": [[55, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[59, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [60, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [61, 2, 1, "", "a_taps", "The feedback taps $a_j$."], [62, 2, 1, "", "b_taps", "The feedforward taps $b_i$."], [63, 3, 1, "", "filter", "Filters the input signal $x[n]$ with the IIR filter."], [64, 3, 1, "", "frequency_response", "Returns the frequency response $H(f)$ of the IIR filter."], [65, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(f)$ of the IIR filter on a logarithmic frequency axis."], [66, 2, 1, "", "gain", "The gain of the IIR filter."], [67, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [68, 2, 1, "", "order", "The order of the IIR filter, $N$."], [69, 2, 1, "", "poles", "The poles of the IIR filter."], [70, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state."], [71, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [72, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [73, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[59, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [59, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [59, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."], [59, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__init__": [[60, 4, 2, "p-a", "a", "The feedback coefficients $a_j$."], [60, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [60, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to filter()."]], "sdr.IIR.filter": [[63, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.IIR.frequency_response": [[64, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [64, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[65, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [65, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [65, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[67, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[71, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.LoopFilter": [[75, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [76, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [77, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [78, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [79, 3, 1, "", "filter", "Filters the input signal $x[n]$."], [80, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [81, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [82, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__init__": [[77, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [77, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [77, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [77, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.LoopFilter.filter": [[79, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.NCO": [[84, 2, 1, "", "K0", "The NCO gain $K_0$."], [85, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [86, 2, 1, "", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [87, 2, 1, "", "offset", "The absolute offset $theta$ of the NCO in units."], [88, 3, 1, "", "process", "Steps the NCO with the variable-increment signal $x[n]$."], [89, 3, 1, "", "reset", "Resets the NCO."], [90, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__init__": [[85, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [85, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [85, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in units."]], "sdr.NCO.process": [[88, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the NCO."]], "sdr.NCO.step": [[90, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.PSK": [[92, 3, 1, "", "__init__", "Creates a new PSK object."], [93, 3, 1, "", "demodulate", "Demodulates the complex symbols $hat{x}[k]$ to decimal symbols $hat{s}[k]$ using maximum-likelihood estimation."], [94, 3, 1, "", "modulate", "Modulates to decimal symbols $s[k]$ to complex symbols $x[k]$."], [95, 2, 1, "", "offset", "The phase offset $phi$ in degrees."], [96, 2, 1, "", "order", "The modulation order $M = 2^k$."], [97, 2, 1, "", "symbol_labels", "The symbols values (labels) of consecutive symbols."], [98, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[92, 4, 2, "p-offset", "offset", "The phase offset $phi$ in degrees."], [92, 4, 2, "p-order", "order", "The modulation order $M = 2^k$ with $k ge 1$."], [92, 4, 2, "p-symbol_labels", "symbol_labels", "The symbol labels of consecutive symbols. If \"bin\", the symbols are binary-coded. If \"gray\", the symbols are Gray-coded. If an array-like object, the symbols are labeled by the values in the array. The array must have unique values from $0$ to $M-1$."]], "sdr.PSK.demodulate": [[93, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to demodulate."]], "sdr.PSK.modulate": [[94, 4, 2, "p-symbols", "symbols", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.Q": [[99, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[100, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.average_power": [[101, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[102, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [102, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [102, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [102, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[103, 4, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [103, 4, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.bec": [[104, 4, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [104, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[105, 4, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[106, 4, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[107, 4, 2, "p-p", "p", "The probability $p$ of a bit flip."], [107, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[108, 4, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[109, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.diff_decode": [[110, 4, 2, "p-y", "y", "The input encoded data $y[k]$."], [110, 4, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[111, 4, 2, "p-x", "x", "The input uncoded data $x[k]$."], [111, 4, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[112, 4, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [112, 4, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [112, 4, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [112, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.energy": [[113, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.frequency_offset": [[114, 4, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [114, 4, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [114, 4, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [114, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [114, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[115, 4, 2, "p-d", "d", "The distance $d$ in meters between the transmitter and receiver."], [115, 4, 2, "p-f", "f", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[116, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [116, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [116, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[117, 4, 2, "p-n", "n", "The length of the Gray code."]], "sdr.hexdump": [[118, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [118, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[119, 4, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [119, 4, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [119, 4, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.pack": [[120, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [120, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [120, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[121, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[122, 4, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [122, 4, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [122, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[123, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[124, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.plot": [[125, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [126, 5, 1, "", "filter", "Plots the frequency response $H(omega)$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [127, 5, 1, "", "frequency_response", "Plots the frequency response $H(omega)$ of the filter."], [128, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [129, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [130, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [131, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [132, 5, 1, "", "phase_response", "Plots the phase response $Theta(omega)$ of the filter."], [133, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [134, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [135, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [136, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [137, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [138, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.constellation": [[125, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [125, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [125, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.filter": [[126, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [126, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [126, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [126, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [126, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [126, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [126, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.frequency_response": [[127, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [127, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [127, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [127, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [127, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [127, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[128, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [128, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [128, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [128, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [128, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [128, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.impulse_response": [[129, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [129, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [129, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.plot.periodogram": [[130, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [130, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [130, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [130, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [130, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [130, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [130, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [130, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_delay": [[131, 4, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [131, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [131, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [131, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [131, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [131, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_response": [[132, 4, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [132, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [132, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."], [132, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [132, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [132, 4, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [132, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.spectrogram": [[133, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [133, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [133, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [133, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [133, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [133, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [133, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[134, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [134, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [134, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.plot.symbol_map": [[135, 4, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [135, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [135, 4, 2, "p-symbol_map", "symbol_map", "The complex symbols $hat{x}[k]$."]], "sdr.plot.time_domain": [[136, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\"."], [136, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[138, 4, 2, "p-a", "a", "The feedback coefficients $a_j$. For FIR filters, this is set to 1."], [138, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$."]], "sdr.raised_cosine": [[139, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [139, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [139, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[140, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[141, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [141, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [141, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[142, 4, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [142, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.unpack": [[143, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [143, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [143, 4, 2, "p-x", "x", "The input array with bpe bits per element."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"data": 0, "manipul": 0, "filter": [1, 5, 147, 148, 150], "link": 2, "budget": 2, "channel": [2, 144], "capac": 2, "path": 2, "loss": 2, "antenna": 2, "measur": 3, "energi": 3, "power": [3, 149], "voltag": 3, "modul": 4, "class": 4, "puls": [4, 149, 152], "shape": [4, 149, 152], "symbol": 4, "map": 4, "encod": 4, "plot": 5, "configur": 5, "time": [5, 150], "domain": [5, 150], "frequenc": [5, 147, 148, 150], "analysi": 5, "probabl": 6, "resampl": [7, 146], "note": 8, "constructor": [8, 25, 31, 43, 51, 58, 74, 83, 91], "method": [8, 25, 31, 43, 51, 58, 74, 83, 91], "properti": [8, 25, 31, 43, 51, 58, 74, 83, 91], "see": [25, 35, 36, 37, 40, 64, 65, 67, 71, 83, 99, 100, 109, 121, 126, 127, 128, 129, 131, 132, 134, 138], "also": [25, 35, 36, 37, 40, 64, 65, 67, 71, 83, 99, 100, 109, 121, 126, 127, 128, 129, 131, 132, 134, 138], "simul": 144, "model": 144, "signal": [144, 146], "impair": 144, "synchron": 145, "farrow": 146, "arbitrari": 146, "construct": 146, "an": [146, 147, 148], "input": 146, "x": 146, "n": [146, 147, 148], "t_": 146, "rate": 146, "r": 146, "y": 146, "frac": 146, "upsampl": 146, "integ": 146, "downsampl": 146, "irrat": 146, "fir": 147, "creat": [147, 148], "examin": [147, 148], "impuls": [147, 148], "respons": [147, 148, 150], "h": [147, 148], "step": [147, 148, 150], "": [147, 148], "omega": [147, 148], "group": [147, 148], "delai": [147, 148], "tau_g": [147, 148], "fulli": [147, 148], "analyz": [147, 148, 150], "iir": 148, "zero": 148, "pole": 148, "digit": 148, "stabil": 148, "peak": 149, "averag": 149, "rectangular": 149, "squar": [149, 152], "root": [149, 152], "rais": [149, 152], "cosin": [149, 152], "phase": [150, 151], "lock": 150, "loop": 150, "design": 150, "proport": 150, "plu": 150, "integr": 150, "ppi": 150, "implement": 150, "pll": 150, "close": 150, "perform": 150, "compar": 150, "across": 150, "zeta": 150, "b_n": 150, "t": 150, "shift": 151, "kei": 151, "constel": 151, "bpsk": 151, "qpsk": 151, "8": 151, "psk": 151, "16": 151, "gaussian": 152, "sdr": 153, "featur": 153, "v0": 154, "0": 154, "2": 154, "chang": 154, "contributor": 154, "1": 154, "version": 155, "alpha": 155, "releas": 155, "beta": 155}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Data manipulation": [[0, "data-manipulation"]], "Filtering": [[1, "filtering"]], "Link budgets": [[2, "link-budgets"]], "Channel capacity": [[2, "channel-capacity"]], "Path losses": [[2, "path-losses"]], "Antennas": [[2, "antennas"]], "Measurement": [[3, "measurement"]], "Energy": [[3, "energy"]], "Power": [[3, "power"]], "Voltage": [[3, "voltage"]], "Modulation": [[4, "modulation"]], "Classes": [[4, "classes"]], "Pulse shaping": [[4, "pulse-shaping"]], "Symbol mapping": [[4, "symbol-mapping"]], "Symbol encoding": [[4, "symbol-encoding"]], "Plotting": [[5, "plotting"]], "Configuration": [[5, "configuration"]], "Time-domain": [[5, "time-domain"]], "Frequency-domain": [[5, "frequency-domain"]], "Filter analysis": [[5, "filter-analysis"]], "Probability": [[6, "probability"]], "Resampling": [[7, "resampling"]], "Note": [[8, null]], "Constructors": [[8, "constructors"], [25, "constructors"], [31, "constructors"], [43, "constructors"], [51, "constructors"], [58, "constructors"], [74, "constructors"], [83, "constructors"], [91, "constructors"]], "Methods": [[8, "methods"], [25, "methods"], [31, "methods"], [43, "methods"], [51, "methods"], [58, "methods"], [74, "methods"], [83, "methods"], [91, "methods"]], "Properties": [[8, "properties"], [25, "properties"], [31, "properties"], [43, "properties"], [51, "properties"], [58, "properties"], [74, "properties"], [83, "properties"], [91, "properties"]], "See also": [[25, null], [35, null], [36, null], [37, null], [40, null], [64, null], [65, null], [67, null], [71, null], [83, null], [99, null], [100, null], [109, null], [121, null], [126, null], [127, null], [128, null], [129, null], [131, null], [132, null], [134, null], [138, null]], "Simulation": [[144, "simulation"]], "Channel models": [[144, "channel-models"]], "Signal impairments": [[144, "signal-impairments"]], "Synchronization": [[145, "synchronization"]], "Farrow arbitrary resampler": [[146, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[146, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[146, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[146, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[146, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[146, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[146, "downsample-by-an-irrational-rate"]], "FIR filters": [[147, "fir-filters"]], "Create an FIR filter": [[147, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[147, "examine-the-impulse-response-h-n"], [148, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[147, "examine-the-step-response-s-n"], [148, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[147, "examine-the-frequency-response-h-omega"], [148, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[147, "examine-the-group-delay-tau-g-omega"], [148, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[147, "fully-analyze-a-fir-filter"]], "IIR filters": [[148, "iir-filters"]], "Create an IIR filter": [[148, "create-an-iir-filter"]], "Examine the zeros and poles": [[148, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[148, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[148, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[149, "peak-to-average-power"]], "Rectangular pulse shape": [[149, "rectangular-pulse-shape"]], "Square-root raised cosine pulse shape": [[149, "square-root-raised-cosine-pulse-shape"]], "Phase-locked loops": [[150, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[150, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[150, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[150, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[150, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[150, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[150, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[150, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[151, "phase-shift-keying"]], "Constellations": [[151, "constellations"]], "BPSK": [[151, "bpsk"]], "QPSK": [[151, "qpsk"]], "8-PSK": [[151, "id1"]], "16-PSK": [[151, "id2"]], "Pulse shapes": [[152, "pulse-shapes"]], "Raised cosine": [[152, "raised-cosine"]], "Square-root raised cosine": [[152, "square-root-raised-cosine"]], "Gaussian": [[152, "gaussian"]], "sdr": [[153, "sdr"]], "Features": [[153, "features"]], "v0.0": [[154, "v0-0"]], "v0.0.2": [[154, "v0-0-2"]], "Changes": [[154, "changes"], [154, "id1"]], "Contributors": [[154, "contributors"], [154, "id2"]], "v0.0.1": [[154, "v0-0-1"]], "Versioning": [[155, "versioning"]], "Alpha releases": [[155, "alpha-releases"]], "Beta releases": [[155, "beta-releases"]]}, "indexentries": {"module": [[1, "module-sdr"]], "sdr": [[1, "module-sdr"]]}, "docurls": ["api/data-manipulation/", "api/filtering/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/resampling/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.DDS/", "api/sdr.DDS.__init__/", "api/sdr.DDS.nco/", "api/sdr.DDS.process/", "api/sdr.DDS.reset/", "api/sdr.DDS.step/", "api/sdr.FIR/", "api/sdr.FIR.__init__/", "api/sdr.FIR.delay/", "api/sdr.FIR.filter/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.frequency_response_log/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.reset/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FIRInterpolator/", "api/sdr.FIRInterpolator.__init__/", "api/sdr.FIRInterpolator.filter/", "api/sdr.FIRInterpolator.polyphase_taps/", "api/sdr.FIRInterpolator.rate/", "api/sdr.FIRInterpolator.reset/", "api/sdr.FIRInterpolator.streaming/", "api/sdr.FIRInterpolator.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.resample/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__init__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.filter/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.filter/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.process/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.demodulate/", "api/sdr.PSK.modulate/", "api/sdr.PSK.offset/", "api/sdr.PSK.order/", "api/sdr.PSK.symbol_labels/", "api/sdr.PSK.symbol_map/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.energy/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.plot.constellation/", "api/sdr.plot.filter/", "api/sdr.plot.frequency_response/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.raised_cosine/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.unpack/", "api/simulation/", "api/synchronization/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})