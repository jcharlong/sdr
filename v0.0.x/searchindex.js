Search.setIndex({"titles": ["Conversions", "Data manipulation", "Detection", "Digital signal processing", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.Decimator", "sdr.Decimator.__call__", "sdr.Decimator.__init__", "sdr.Decimator.__repr__", "sdr.Decimator.__str__", "sdr.Decimator.delay", "sdr.Decimator.method", "sdr.Decimator.polyphase_taps", "sdr.Decimator.rate", "sdr.Decimator.reset", "sdr.Decimator.taps", "sdr.Differentiator", "sdr.Differentiator.__init__", "sdr.EnergyDetector", "sdr.EnergyDetector.p_d", "sdr.EnergyDetector.p_fa", "sdr.EnergyDetector.roc", "sdr.EnergyDetector.threshold", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__call__", "sdr.FIR.__init__", "sdr.FIR.__len__", "sdr.FIR.__repr__", "sdr.FIR.__str__", "sdr.FIR.delay", "sdr.FIR.flush", "sdr.FIR.frequency_response", "sdr.FIR.group_delay", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.phase_delay", "sdr.FIR.reset", "sdr.FIR.state", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__call__", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__call__", "sdr.IIR.__init__", "sdr.IIR.__repr__", "sdr.IIR.__str__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.frequency_response", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.state", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.Integrator", "sdr.Integrator.__init__", "sdr.Interpolator", "sdr.Interpolator.__call__", "sdr.Interpolator.__init__", "sdr.Interpolator.__repr__", "sdr.Interpolator.__str__", "sdr.Interpolator.delay", "sdr.Interpolator.method", "sdr.Interpolator.polyphase_taps", "sdr.Interpolator.rate", "sdr.Interpolator.reset", "sdr.Interpolator.taps", "sdr.LeakyIntegrator", "sdr.LeakyIntegrator.__init__", "sdr.LinearModulation", "sdr.LinearModulation.__init__", "sdr.LinearModulation.__repr__", "sdr.LinearModulation.__str__", "sdr.LinearModulation.ber", "sdr.LinearModulation.bps", "sdr.LinearModulation.decide_symbols", "sdr.LinearModulation.demodulate", "sdr.LinearModulation.map_symbols", "sdr.LinearModulation.modulate", "sdr.LinearModulation.order", "sdr.LinearModulation.phase_offset", "sdr.LinearModulation.pulse_shape", "sdr.LinearModulation.rx_filter", "sdr.LinearModulation.ser", "sdr.LinearModulation.sps", "sdr.LinearModulation.symbol_map", "sdr.LinearModulation.tx_filter", "sdr.LoopFilter", "sdr.LoopFilter.__call__", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.iir", "sdr.LoopFilter.integral_gain", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.proportional_gain", "sdr.LoopFilter.reset", "sdr.MLPED", "sdr.MLPED.A_received", "sdr.MLPED.A_reference", "sdr.MLPED.__call__", "sdr.MLPED.__init__", "sdr.MLPED.data_aided_error", "sdr.MLPED.decision_directed_error", "sdr.MLPED.gain", "sdr.MSK", "sdr.MSK.__init__", "sdr.MovingAverage", "sdr.MovingAverage.__init__", "sdr.NCO", "sdr.NCO.__call__", "sdr.NCO.__init__", "sdr.NCO.gain", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.reset", "sdr.NCO.step", "sdr.OQPSK", "sdr.OQPSK.__init__", "sdr.OQPSK.__repr__", "sdr.OQPSK.__str__", "sdr.PED", "sdr.PED.__call__", "sdr.PED.__init__", "sdr.PED.data_aided_error", "sdr.PED.decision_directed_error", "sdr.PED.gain", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.__repr__", "sdr.PSK.__str__", "sdr.PSK.ber", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.PiMPSK", "sdr.PiMPSK.__init__", "sdr.Q", "sdr.Qinv", "sdr.ReplicaCorrelator", "sdr.ReplicaCorrelator.p_d", "sdr.ReplicaCorrelator.p_fa", "sdr.ReplicaCorrelator.roc", "sdr.ReplicaCorrelator.threshold", "sdr.Resampler", "sdr.Resampler.__call__", "sdr.Resampler.__init__", "sdr.Resampler.__repr__", "sdr.Resampler.__str__", "sdr.Resampler.delay", "sdr.Resampler.down", "sdr.Resampler.method", "sdr.Resampler.polyphase_taps", "sdr.Resampler.rate", "sdr.Resampler.reset", "sdr.Resampler.taps", "sdr.Resampler.up", "sdr.albersheim", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.barker", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.db", "sdr.design_bandpass_fir", "sdr.design_bandstop_fir", "sdr.design_frac_delay_fir", "sdr.design_highpass_fir", "sdr.design_lowpass_fir", "sdr.design_multirate_fir", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.downsample", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.euclidean", "sdr.evm", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.hadamard", "sdr.half_sine", "sdr.hamming", "sdr.hexdump", "sdr.iq_imbalance", "sdr.linear", "sdr.mix", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.percent", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.eye", "sdr.plot.filter", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.magnitude_response", "sdr.plot.p_d", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.phase_tree", "sdr.plot.raster", "sdr.plot.roc", "sdr.plot.ser", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.polyphase_decompose", "sdr.ppb", "sdr.ppm", "sdr.raised_cosine", "sdr.rectangular", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.to_complex_bb", "sdr.to_real_pb", "sdr.unpack", "sdr.upsample", "sdr.walsh", "sdr.wavelength", "sdr.zadoff_chu", "Sequences", "Simulation", "Synchronization", "Documentation", "Formatting", "Installation", "Unit Tests", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296], "db": [0, 4, 5, 9, 20, 22, 40, 42, 44, 46, 47, 48, 50, 94, 113, 123, 144, 156, 166, 170, 172, 174, 179, 181, 196, 197, 198, 199, 207, 208, 209, 210, 211, 212, 213, 218, 219, 220, 221, 222, 224, 226, 227, 233, 234, 237, 238, 239, 240, 242, 243, 249, 256, 268, 271, 272, 290, 292, 293, 295], "x": [0, 1, 3, 5, 6, 7, 8, 9, 26, 27, 37, 39, 44, 46, 51, 52, 69, 70, 76, 78, 94, 95, 96, 97, 107, 109, 116, 118, 127, 128, 144, 146, 156, 166, 174, 176, 177, 178, 183, 184, 197, 198, 201, 204, 206, 207, 214, 215, 216, 217, 220, 223, 224, 225, 231, 233, 234, 235, 236, 237, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 257, 259, 260, 264, 265, 268, 270, 275, 276, 281, 285, 290, 291, 292, 296], "arraylik": [0, 1, 2, 3, 4, 5, 6, 7, 8, 26, 27, 28, 37, 39, 40, 41, 42, 43, 44, 46, 51, 52, 53, 69, 73, 76, 77, 78, 79, 94, 96, 97, 98, 107, 109, 110, 113, 115, 116, 117, 118, 123, 136, 139, 144, 145, 146, 156, 157, 166, 167, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 196, 199, 201, 202, 204, 205, 207, 208, 209, 211, 212, 214, 215, 216, 218, 219, 220, 221, 222, 224, 225, 226, 232, 234, 236, 238, 241, 245, 246, 247, 248, 249, 250, 251, 252, 255, 257, 258, 262, 263, 264, 265, 271, 272, 275, 278, 281], "ndarrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 26, 27, 33, 36, 37, 39, 40, 41, 42, 43, 44, 49, 51, 52, 58, 59, 60, 61, 63, 65, 66, 68, 69, 70, 75, 76, 78, 82, 83, 84, 86, 88, 90, 91, 93, 94, 96, 97, 103, 106, 107, 109, 113, 115, 116, 117, 118, 121, 123, 125, 127, 128, 136, 139, 141, 142, 144, 146, 148, 149, 155, 156, 160, 161, 163, 164, 166, 170, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 191, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 253, 254, 256, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281], "float_": [0, 2, 3, 4, 5, 6, 7, 8, 39, 40, 41, 42, 43, 44, 49, 109, 113, 121, 123, 136, 141, 142, 144, 156, 160, 161, 163, 164, 166, 170, 172, 174, 176, 177, 178, 179, 180, 181, 182, 196, 199, 202, 205, 207, 208, 209, 210, 211, 212, 213, 218, 219, 220, 221, 222, 226, 227, 230, 234, 238, 241, 242, 256, 264, 265, 266, 267, 269, 271, 272, 273, 274, 278], "convert": [0, 3, 109, 115, 117, 144, 156, 166, 174, 207, 218, 219, 221, 222, 232, 234, 241, 264, 265, 271, 272, 273, 274], "linear": [0, 37, 96, 98, 102, 109, 110, 141, 142, 144, 156, 163, 164, 166, 174, 183, 185, 190, 198, 207, 234, 248, 250, 255, 257, 259, 294, 295], "unit": [0, 26, 37, 51, 66, 76, 91, 94, 96, 107, 127, 145, 146, 148, 157, 167, 175, 183, 198, 199, 207, 214, 215, 234, 258, 260, 285, 288, 289, 291, 294, 295], "percent": [0, 241, 295], "percentag": [0, 241], "ppm": [0, 265, 270, 281, 295], "part": [0, 260, 264, 265, 270, 291], "per": [0, 1, 27, 52, 97, 109, 110, 114, 116, 118, 124, 144, 145, 149, 156, 157, 166, 167, 174, 175, 198, 199, 218, 219, 221, 222, 225, 227, 230, 232, 236, 243, 244, 253, 264, 265, 266, 267, 269, 270, 271, 272, 275, 284, 290, 293, 295], "million": [0, 265, 270], "ppb": [0, 264, 295], "billion": [0, 264], "ebn0_to_esn0": [0, 123, 172, 218, 292, 295], "ebn0": [0, 7, 109, 113, 144, 156, 166, 170, 174, 199, 218, 219, 242, 292], "bp": [0, 109, 114, 144, 156, 166, 174, 218, 219, 221, 271, 292], "int": [0, 1, 3, 6, 7, 26, 28, 31, 34, 37, 38, 44, 46, 47, 50, 51, 54, 57, 59, 60, 61, 62, 63, 66, 69, 72, 76, 84, 86, 87, 91, 94, 96, 98, 101, 104, 107, 109, 110, 114, 119, 124, 141, 142, 144, 145, 146, 147, 148, 155, 156, 157, 163, 164, 166, 167, 174, 175, 183, 185, 188, 189, 195, 197, 198, 200, 201, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 236, 237, 239, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 257, 258, 263, 266, 267, 269, 271, 272, 275, 276, 277, 279, 280, 292], "ebn0_to_snr": [0, 144, 156, 166, 174, 219, 295], "esn0_to_ebn0": [0, 113, 170, 221, 295], "esn0": [0, 7, 109, 123, 144, 156, 166, 172, 174, 221, 222, 256, 292], "esn0_to_snr": [0, 222, 292, 295], "sp": [0, 6, 7, 109, 110, 116, 118, 124, 144, 145, 156, 157, 166, 167, 174, 175, 219, 222, 227, 230, 244, 253, 260, 266, 267, 269, 271, 272, 273, 274, 290, 292, 293], "1": [0, 6, 8, 9, 16, 19, 23, 25, 26, 28, 29, 30, 33, 36, 37, 38, 39, 40, 42, 43, 44, 51, 54, 55, 56, 57, 59, 60, 63, 76, 77, 80, 81, 84, 94, 95, 96, 97, 98, 99, 100, 103, 106, 107, 108, 109, 110, 115, 116, 117, 118, 125, 127, 129, 130, 136, 140, 144, 145, 146, 148, 150, 156, 157, 160, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 191, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 241, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 296], "snr_to_ebn0": [0, 113, 170, 199, 271, 295], "snr": [0, 2, 4, 7, 39, 40, 42, 44, 46, 47, 48, 49, 50, 144, 156, 166, 174, 196, 198, 199, 249, 271, 272, 273, 274, 281, 292, 295], "snr_to_esn0": [0, 123, 172, 272, 295], "pack": [1, 44, 46, 144, 156, 166, 174, 232, 236, 294, 295], "bpe": [1, 236, 275], "int_": [1, 5, 6, 109, 115, 116, 144, 156, 166, 174, 201, 203, 204, 214, 215, 216, 228, 231, 236, 275, 281], "binari": [1, 4, 6, 145, 157, 167, 173, 175, 200, 201, 202, 203, 204, 205, 216, 229, 236, 259, 275, 277, 281, 292, 294, 295], "arrai": [1, 33, 36, 44, 59, 84, 98, 103, 106, 110, 144, 145, 148, 156, 157, 166, 167, 173, 174, 175, 185, 191, 194, 197, 200, 201, 203, 204, 214, 215, 216, 220, 223, 228, 229, 231, 236, 237, 239, 260, 263, 275, 277, 289], "an": [1, 2, 3, 4, 26, 37, 39, 51, 59, 61, 76, 77, 79, 84, 86, 94, 95, 96, 97, 107, 108, 110, 145, 146, 148, 157, 167, 170, 172, 175, 178, 183, 199, 210, 236, 242, 247, 256, 260, 275, 278, 285, 294, 295], "multipl": [1, 59, 84, 236, 275, 292, 295], "bit": [1, 5, 7, 44, 46, 49, 109, 113, 114, 144, 145, 156, 157, 166, 167, 170, 173, 174, 175, 199, 201, 202, 204, 205, 218, 219, 221, 232, 236, 242, 271, 275, 294, 295], "element": [1, 232, 236, 275], "unpack": [1, 44, 46, 232, 275, 292, 294, 295], "hexdump": [1, 44, 232, 294, 295], "byte": [1, 232], "width": [1, 210, 232], "16": [1, 170, 172, 173, 187, 210, 218, 219, 221, 224, 229, 232, 242, 256, 263, 266, 269, 271, 272, 277, 290, 295], "str": [1, 26, 29, 30, 37, 38, 51, 55, 56, 76, 80, 81, 94, 96, 99, 100, 107, 109, 111, 112, 144, 146, 156, 158, 159, 166, 168, 169, 174, 183, 186, 187, 232, 244, 250, 253, 254, 257], "return": [1, 6, 9, 17, 19, 22, 23, 26, 27, 29, 30, 37, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 63, 66, 70, 76, 78, 80, 81, 84, 86, 91, 94, 96, 97, 99, 100, 107, 109, 111, 112, 113, 115, 116, 117, 118, 123, 128, 139, 141, 142, 144, 146, 149, 155, 156, 158, 159, 161, 163, 164, 166, 168, 169, 170, 172, 174, 176, 177, 179, 180, 181, 182, 183, 186, 187, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 288, 289, 290, 292, 295], "specifi": [1, 44, 47, 48, 50, 136, 141, 142, 160, 163, 164, 198, 199, 216, 232, 283, 288, 289, 295], "class": [2, 3, 5, 6, 9, 26, 37, 39, 44, 46, 47, 48, 49, 50, 51, 69, 76, 94, 96, 107, 109, 127, 136, 144, 146, 148, 156, 160, 166, 174, 178, 183, 282, 288, 289, 292, 294, 295], "replicacorrel": [2, 178, 179, 180, 181, 182, 295], "implement": [2, 3, 6, 26, 37, 39, 51, 69, 76, 94, 96, 107, 109, 127, 131, 136, 144, 146, 148, 156, 160, 166, 174, 178, 183, 196, 282, 287], "clairvoy": [2, 178], "replica": [2, 178], "correl": [2, 178, 200, 229, 277, 279], "energydetector": [2, 39, 40, 41, 42, 43, 295], "energi": [2, 39, 113, 123, 170, 172, 178, 179, 180, 181, 182, 199, 218, 219, 220, 221, 222, 227, 230, 242, 256, 266, 267, 269, 271, 272, 294, 295], "albersheim": [2, 196, 295], "p_d": [2, 7, 39, 40, 42, 178, 179, 181, 196, 249, 255, 295], "p_fa": [2, 7, 39, 40, 41, 42, 43, 178, 179, 180, 181, 182, 196, 255], "estim": [2, 9, 109, 115, 116, 144, 156, 166, 174, 196, 250, 257, 291], "minimum": [2, 6, 144, 196, 295], "requir": [2, 27, 52, 97, 196, 283, 284, 285, 286, 295], "singl": [2, 42, 59, 84, 170, 172, 196], "sampl": [2, 3, 9, 16, 24, 26, 27, 31, 37, 40, 41, 42, 43, 51, 52, 57, 59, 60, 61, 63, 66, 69, 73, 84, 86, 91, 96, 97, 98, 101, 109, 110, 116, 118, 124, 127, 129, 133, 144, 145, 146, 148, 149, 150, 152, 154, 155, 156, 157, 166, 167, 174, 175, 183, 185, 188, 196, 198, 217, 219, 222, 225, 227, 230, 235, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 257, 258, 260, 266, 267, 269, 270, 271, 272, 273, 274, 276, 281, 287, 290, 291, 293, 294, 295], "given": [2, 39, 44, 46, 47, 48, 50, 69, 70, 178, 196, 224, 288, 289], "n_": [2, 40, 41, 42, 43, 196], "nc": [2, 40, 41, 42, 43, 196], "non": [2, 27, 40, 41, 42, 43, 52, 97, 196, 230, 260, 267], "coher": [2, 40, 41, 42, 43, 196], "combin": [2, 196], "achiev": [2, 196, 292, 293], "probabl": [2, 7, 39, 40, 41, 42, 43, 176, 177, 178, 179, 180, 181, 182, 196, 201, 202, 204, 205, 216, 249, 255, 281, 295], "fals": [2, 5, 26, 28, 29, 30, 38, 39, 40, 41, 42, 43, 51, 53, 55, 56, 59, 69, 71, 76, 77, 79, 80, 81, 84, 95, 96, 97, 98, 99, 100, 107, 108, 144, 146, 147, 156, 166, 170, 172, 174, 178, 179, 180, 181, 182, 183, 185, 186, 187, 196, 197, 201, 204, 216, 220, 235, 239, 240, 243, 250, 255, 257, 260, 268, 289, 293], "alarm": [2, 39, 40, 41, 42, 43, 178, 179, 180, 181, 182, 196, 255], "p_": [2, 7, 39, 40, 41, 42, 43, 170, 172, 178, 179, 180, 181, 182, 196, 197, 198, 207, 216, 224, 234, 237, 239, 242, 250, 255, 256], "fa": [2, 7, 39, 40, 41, 42, 43, 178, 179, 180, 181, 182, 196, 255], "thi": [2, 9, 26, 46, 47, 48, 50, 51, 76, 96, 98, 109, 110, 125, 136, 144, 149, 156, 157, 166, 167, 173, 174, 175, 183, 185, 196, 198, 199, 201, 204, 216, 217, 224, 226, 229, 244, 250, 254, 257, 260, 276, 277, 283, 285, 286, 287, 289, 291, 292, 293], "function": [2, 7, 8, 9, 18, 37, 51, 76, 77, 107, 127, 176, 177, 196, 199, 217, 227, 229, 242, 249, 250, 255, 256, 257, 276, 277, 288, 289, 291, 293, 294, 295], "": [2, 3, 7, 9, 17, 19, 20, 21, 23, 24, 26, 37, 39, 46, 47, 48, 49, 50, 51, 59, 60, 63, 66, 76, 84, 91, 94, 96, 107, 109, 110, 115, 116, 117, 118, 136, 144, 146, 156, 166, 174, 178, 180, 182, 183, 196, 198, 199, 219, 222, 224, 225, 233, 243, 244, 245, 246, 248, 250, 251, 252, 253, 254, 257, 258, 260, 261, 270, 271, 272, 273, 274, 286, 287, 290, 292, 294, 295], "equat": [2, 17, 19, 20, 21, 22, 23, 40, 41, 43, 76, 107, 156, 166, 174, 179, 180, 182, 196, 226], "finit": [3, 51, 294, 295], "impuls": [3, 7, 26, 37, 51, 61, 76, 86, 94, 96, 107, 146, 183, 208, 209, 210, 211, 212, 213, 227, 245, 247, 293, 294, 295], "respons": [3, 7, 26, 37, 51, 59, 61, 66, 76, 84, 86, 91, 94, 96, 107, 146, 183, 208, 209, 210, 211, 212, 213, 227, 245, 246, 247, 248, 252, 258, 293, 294, 295], "design_lowpass_fir": [3, 59, 212, 295], "order": [3, 9, 26, 27, 30, 37, 38, 44, 49, 51, 52, 56, 62, 69, 72, 76, 81, 87, 94, 96, 97, 98, 100, 107, 109, 110, 119, 127, 129, 144, 146, 156, 166, 167, 174, 175, 183, 185, 187, 198, 208, 209, 211, 212, 218, 219, 221, 224, 225, 227, 243, 244, 253, 254, 266, 269, 270, 271, 282, 289, 290, 291, 292, 295], "design": [3, 26, 28, 32, 96, 98, 102, 110, 157, 167, 175, 183, 185, 190, 208, 209, 210, 211, 212, 213, 283, 294, 295], "lowpass": [3, 212], "h": [3, 7, 26, 37, 39, 51, 53, 55, 56, 59, 61, 76, 84, 86, 94, 96, 107, 109, 110, 121, 122, 126, 127, 144, 146, 156, 157, 166, 167, 174, 175, 178, 183, 208, 209, 210, 211, 212, 213, 227, 244, 245, 247, 248, 252, 263, 290, 291, 293], "n": [3, 5, 6, 7, 8, 9, 26, 27, 37, 38, 39, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 60, 61, 62, 63, 65, 66, 68, 69, 70, 76, 78, 79, 82, 86, 87, 91, 94, 95, 96, 97, 107, 109, 110, 116, 118, 121, 122, 126, 127, 128, 144, 146, 148, 149, 155, 156, 157, 166, 167, 174, 175, 176, 177, 178, 180, 182, 183, 184, 197, 198, 199, 200, 203, 206, 208, 209, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 228, 229, 231, 233, 235, 237, 239, 240, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 257, 258, 260, 268, 270, 271, 272, 273, 274, 276, 277, 279, 280, 281, 291, 293, 294], "us": [3, 7, 26, 28, 32, 35, 37, 38, 51, 53, 58, 59, 64, 69, 71, 76, 77, 79, 84, 89, 94, 95, 96, 97, 98, 102, 105, 107, 108, 109, 110, 115, 116, 127, 131, 136, 141, 142, 144, 146, 147, 156, 157, 160, 163, 164, 166, 167, 174, 175, 183, 185, 190, 193, 199, 202, 205, 208, 209, 210, 211, 212, 213, 224, 229, 232, 236, 243, 244, 245, 247, 249, 250, 257, 258, 275, 277, 283, 284, 285, 286, 288, 289, 291, 292, 293, 294, 296], "window": [3, 26, 37, 38, 59, 96, 183, 208, 209, 210, 211, 212, 213, 250, 257, 295], "method": [3, 7, 30, 32, 95, 98, 100, 102, 185, 187, 190, 208, 209, 210, 211, 212, 213, 250, 257, 288, 289, 295], "design_highpass_fir": [3, 211, 295], "highpass": [3, 211], "design_bandpass_fir": [3, 208, 295], "bandpass": [3, 208], "design_bandstop_fir": [3, 209, 295], "bandstop": [3, 209], "infinit": [3, 76, 94, 294, 295], "movingaverag": [3, 107, 146, 147], "move": [3, 107, 108, 146, 147, 295], "averag": [3, 5, 44, 107, 108, 136, 141, 142, 144, 146, 147, 156, 160, 163, 164, 174, 197, 198, 199, 224, 237, 250], "differenti": [3, 6, 37, 38, 144, 170, 172, 214, 215, 260, 294, 295], "integr": [3, 9, 14, 40, 41, 42, 43, 94, 95, 107, 108, 127, 129, 132, 146, 196, 282, 286, 289, 294, 295], "leakyintegr": [3, 107, 108, 146], "leaki": [3, 107, 108, 146], "interpol": [3, 26, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 126, 144, 156, 166, 174, 183, 185, 195, 213, 244, 276, 290, 292, 294, 295], "polyphas": [3, 26, 27, 28, 33, 36, 96, 97, 98, 103, 106, 183, 184, 185, 191, 194, 213, 217, 263, 276, 294, 295], "decim": [3, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 109, 110, 115, 116, 117, 118, 122, 125, 144, 145, 156, 157, 166, 167, 173, 174, 175, 183, 185, 189, 213, 217, 292, 294, 295], "ration": [3, 183, 185, 213, 295], "design_multirate_fir": [3, 28, 98, 185, 213, 295], "up": [3, 183, 185, 195, 213, 226, 284], "kaiser": [3, 26, 28, 29, 30, 32, 96, 97, 98, 99, 100, 102, 183, 185, 186, 187, 190, 208, 209, 210, 211, 212, 213], "polyphase_decompos": [3, 263, 295], "tap": [3, 26, 28, 33, 36, 37, 51, 56, 68, 69, 75, 76, 82, 83, 94, 96, 98, 103, 106, 107, 146, 183, 185, 191, 194, 263, 288, 289], "phase": [3, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 37, 51, 63, 96, 109, 110, 120, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 183, 196, 225, 233, 235, 251, 252, 253, 263, 281, 294, 295], "decompos": [3, 26, 96, 183, 263], "h_i": [3, 26, 28, 33, 36, 37, 51, 53, 68, 96, 98, 103, 106, 146, 183, 185, 191, 194, 263, 288], "matrix": [3, 216, 263, 281], "h_": [3, 9, 26, 33, 36, 37, 96, 103, 106, 183, 191, 194, 263, 291], "i": [3, 9, 16, 25, 26, 27, 28, 33, 36, 37, 38, 39, 41, 42, 43, 44, 49, 51, 52, 53, 59, 61, 66, 67, 68, 69, 74, 76, 79, 83, 84, 86, 91, 92, 94, 96, 97, 98, 103, 106, 107, 108, 109, 110, 127, 129, 130, 133, 136, 144, 146, 149, 154, 156, 157, 160, 166, 167, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 191, 194, 196, 197, 198, 199, 201, 202, 204, 205, 207, 208, 209, 210, 211, 212, 216, 218, 219, 220, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 250, 251, 252, 254, 257, 258, 260, 263, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296], "j": [3, 26, 33, 36, 59, 76, 79, 82, 84, 94, 96, 103, 106, 107, 144, 148, 156, 166, 174, 183, 191, 194, 198, 216, 233, 235, 263, 279, 288, 289], "b": [3, 76, 79, 196, 199, 227, 232, 245, 247, 258, 263, 283, 284, 293], "farrowresampl": [3, 69, 70, 71, 72, 73, 74, 75, 287, 295], "cubic": [3, 69], "farrow": [3, 69, 70, 71, 72, 73, 74, 75, 294, 295], "design_frac_delay_fir": [3, 210, 295], "length": [3, 6, 7, 26, 27, 37, 38, 42, 51, 52, 54, 61, 66, 78, 96, 97, 98, 108, 110, 116, 118, 145, 146, 147, 157, 167, 175, 183, 185, 200, 203, 208, 209, 210, 211, 212, 213, 227, 228, 229, 230, 245, 247, 250, 254, 257, 258, 266, 267, 269, 273, 277, 279, 280, 284, 287, 290, 293], "delai": [3, 7, 26, 27, 30, 31, 37, 51, 52, 56, 57, 60, 63, 69, 96, 97, 100, 101, 127, 146, 148, 183, 187, 188, 210, 214, 215, 230, 246, 251, 267, 291, 294, 295], "fraction": [3, 69, 73, 210, 227, 287, 294, 295], "mix": [3, 235, 294, 295], "freq": [3, 4, 26, 37, 51, 59, 76, 84, 94, 96, 107, 146, 148, 149, 183, 225, 226, 235, 238, 278, 281, 287, 291], "float": [3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 37, 38, 42, 44, 46, 47, 48, 50, 51, 59, 60, 63, 69, 70, 76, 77, 84, 85, 94, 96, 107, 108, 109, 110, 120, 127, 129, 130, 132, 133, 134, 136, 137, 138, 140, 143, 144, 145, 146, 148, 150, 151, 152, 153, 156, 157, 160, 165, 166, 167, 171, 174, 175, 181, 183, 192, 197, 198, 199, 201, 204, 206, 208, 209, 210, 211, 212, 213, 224, 225, 227, 233, 235, 237, 239, 240, 243, 244, 245, 246, 248, 250, 251, 252, 253, 254, 257, 259, 260, 266, 268, 269, 270, 281], "0": [3, 6, 8, 16, 26, 27, 33, 36, 37, 39, 42, 44, 51, 52, 53, 55, 56, 59, 60, 63, 68, 76, 77, 79, 80, 81, 82, 83, 84, 94, 96, 97, 98, 103, 106, 107, 109, 110, 115, 116, 117, 118, 125, 129, 144, 145, 146, 148, 150, 156, 157, 166, 167, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 191, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 233, 234, 235, 236, 238, 241, 243, 244, 245, 246, 247, 248, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 296], "time": [3, 5, 9, 16, 17, 19, 20, 21, 22, 23, 37, 51, 76, 94, 107, 127, 129, 136, 146, 156, 160, 166, 174, 197, 198, 206, 208, 209, 211, 212, 216, 217, 220, 222, 223, 225, 227, 229, 231, 233, 235, 237, 239, 240, 244, 245, 250, 254, 257, 260, 266, 268, 269, 270, 272, 273, 274, 276, 277, 281, 287, 288, 289, 293, 294, 295], "domain": [3, 5, 197, 198, 206, 208, 209, 211, 212, 217, 220, 223, 225, 231, 233, 235, 237, 239, 240, 245, 250, 254, 257, 260, 268, 270, 273, 274, 276, 281, 294, 295], "complex": [3, 5, 7, 26, 37, 39, 40, 41, 42, 43, 51, 59, 76, 84, 94, 96, 107, 109, 110, 115, 116, 117, 118, 125, 136, 139, 144, 145, 146, 148, 149, 155, 156, 157, 160, 161, 166, 167, 173, 174, 175, 178, 179, 180, 181, 182, 183, 198, 199, 217, 224, 233, 235, 243, 244, 246, 248, 251, 252, 254, 259, 260, 273, 274, 276, 281, 287, 288, 289, 291, 292, 294, 295], "exponenti": [3, 149, 217, 235, 273, 274, 276, 287, 288, 289], "real": [3, 40, 41, 43, 144, 156, 176, 177, 179, 180, 182, 198, 235, 244, 246, 248, 251, 252, 254, 260, 273, 274, 287, 288, 289, 291, 294, 295], "sinusoid": [3, 166, 198, 235, 273, 274, 289, 295], "to_complex_bb": [3, 273, 295], "x_r": [3, 273, 274], "complex_": [3, 7, 109, 115, 116, 117, 118, 125, 144, 148, 155, 156, 160, 161, 166, 173, 174, 243, 259, 273, 274, 279, 280], "passband": [3, 208, 209, 210, 211, 212, 227, 230, 266, 267, 269, 273, 274, 290, 295], "center": [3, 208, 209, 210, 211, 212, 230, 260, 267, 273, 274, 295], "f_": [3, 9, 16, 24, 27, 59, 60, 63, 84, 97, 109, 110, 124, 144, 145, 156, 157, 166, 167, 174, 175, 208, 209, 211, 212, 217, 219, 222, 225, 227, 235, 244, 245, 246, 248, 250, 251, 252, 253, 254, 257, 260, 270, 271, 272, 273, 274, 276, 287, 288, 289, 291, 293], "r": [3, 26, 27, 28, 33, 34, 36, 69, 70, 96, 97, 98, 103, 104, 106, 199, 217, 218, 219, 221, 224, 227, 235, 266, 269, 271, 273, 274, 276, 283, 284, 285, 286, 289, 290, 291, 293], "4": [3, 7, 17, 19, 26, 33, 36, 37, 40, 42, 44, 59, 80, 81, 84, 94, 96, 97, 103, 106, 107, 136, 144, 145, 146, 148, 156, 157, 160, 166, 170, 171, 172, 173, 174, 178, 179, 180, 181, 182, 183, 186, 187, 191, 194, 196, 198, 199, 200, 202, 203, 205, 208, 209, 210, 211, 212, 213, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 238, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 256, 258, 259, 260, 261, 262, 263, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 285, 287, 289, 290, 291, 292], "rate": [3, 5, 7, 9, 16, 24, 26, 27, 28, 30, 34, 44, 45, 46, 48, 49, 59, 60, 63, 69, 70, 84, 96, 97, 98, 100, 104, 109, 113, 123, 144, 156, 166, 170, 172, 174, 183, 184, 185, 187, 189, 192, 195, 213, 217, 218, 219, 221, 225, 235, 242, 244, 245, 246, 248, 250, 251, 252, 253, 254, 256, 257, 260, 270, 271, 273, 274, 276, 281, 294, 295], "baseband": [3, 7, 9, 144, 156, 166, 174, 235, 244, 253, 273, 274, 290, 291, 295], "x_c": [3, 273, 274], "c": [3, 9, 17, 19, 20, 21, 22, 23, 46, 47, 48, 49, 50, 109, 110, 125, 127, 144, 156, 166, 173, 174, 199, 202, 205, 226, 238, 259, 273, 274, 278, 291], "2": [3, 6, 7, 9, 17, 19, 22, 26, 29, 30, 33, 36, 37, 39, 40, 41, 42, 43, 44, 51, 55, 56, 57, 59, 60, 63, 80, 81, 84, 94, 96, 97, 99, 100, 103, 106, 107, 108, 109, 110, 119, 136, 144, 146, 148, 156, 157, 160, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 191, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 283, 286, 287, 288, 289, 290, 291, 292, 293], "to_real_pb": [3, 274, 290, 295], "2f_": [3, 274], "upsampl": [3, 96, 183, 276, 295], "factor": [3, 5, 9, 16, 25, 107, 108, 110, 127, 129, 130, 157, 167, 175, 206, 217, 276, 291], "downsampl": [3, 217, 295], "bsc_capac": [4, 205, 295], "p": [4, 8, 148, 149, 176, 177, 183, 185, 191, 192, 194, 195, 201, 202, 204, 205, 213, 216, 281], "calcul": [4, 5, 199, 202, 205, 224, 226, 238, 278, 295], "symmetr": [4, 204, 205, 216, 273, 274, 281, 294], "bsc": [4, 204, 205, 216, 281, 294, 295], "bec_capac": [4, 202, 295], "erasur": [4, 201, 202, 216, 281, 294], "bec": [4, 201, 202, 216, 281, 294, 295], "awgn_capac": [4, 199, 295], "addit": [4, 198, 199, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 276, 281, 294], "white": [4, 198, 199, 281, 294], "gaussian": [4, 6, 37, 94, 107, 146, 198, 199, 227, 281, 294, 295], "nois": [4, 9, 10, 11, 16, 22, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 113, 123, 127, 129, 133, 144, 156, 166, 170, 172, 174, 178, 179, 180, 181, 182, 198, 199, 218, 219, 221, 222, 242, 256, 271, 272, 281, 291, 294], "awgn": [4, 144, 156, 166, 170, 172, 174, 198, 199, 224, 242, 243, 256, 273, 274, 281, 292, 294, 295], "fspl": [4, 226], "distanc": [4, 223, 226, 231, 294, 295], "free": [4, 144, 156, 166, 174, 226, 294], "space": [4, 59, 84, 226, 294], "wavelength": [4, 278, 295], "lambda": [4, 226, 278], "electromagnet": [4, 278], "wave": [4, 144, 278], "frequenc": [4, 9, 17, 19, 21, 26, 37, 51, 59, 60, 63, 76, 84, 94, 96, 107, 127, 144, 146, 148, 149, 183, 208, 209, 210, 211, 212, 217, 225, 226, 235, 238, 245, 246, 248, 250, 251, 252, 257, 273, 274, 276, 278, 281, 293, 294, 295], "f": [4, 17, 19, 26, 37, 42, 59, 60, 63, 84, 94, 96, 148, 149, 183, 196, 198, 225, 226, 227, 235, 238, 270, 278, 279, 284, 287, 288, 289, 290, 291, 292, 293], "parabolic_antenna": [4, 238, 295], "tupl": [4, 26, 37, 38, 39, 42, 44, 46, 49, 51, 59, 60, 63, 76, 84, 94, 96, 107, 109, 115, 116, 136, 141, 142, 144, 146, 156, 160, 163, 164, 166, 174, 178, 181, 183, 197, 220, 223, 231, 237, 238, 239, 243, 245, 246, 247, 248, 251, 252, 258, 259, 262], "gain": [4, 9, 12, 13, 14, 15, 16, 76, 77, 85, 94, 107, 127, 129, 132, 134, 136, 143, 148, 150, 151, 160, 165, 196, 208, 209, 210, 211, 212, 226, 227, 230, 238, 266, 267, 269, 291, 294], "g": [4, 49, 238, 285], "beamwidth": [4, 238], "theta": [4, 148, 150, 153, 154, 238], "parabol": [4, 238], "reflector": [4, 238], "signal": [5, 7, 9, 17, 19, 22, 23, 26, 27, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 58, 69, 70, 76, 78, 94, 96, 97, 107, 109, 110, 121, 127, 128, 136, 137, 138, 140, 144, 146, 148, 149, 155, 156, 157, 166, 167, 174, 175, 178, 179, 180, 181, 182, 183, 184, 197, 198, 199, 206, 207, 208, 209, 211, 212, 213, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 231, 233, 234, 235, 237, 238, 239, 240, 244, 245, 246, 248, 250, 251, 252, 253, 254, 257, 260, 263, 268, 270, 271, 272, 273, 274, 276, 278, 288, 289, 291, 293, 294, 295], "peak_pow": [5, 237, 239, 295], "peak": [5, 144, 156, 174, 206, 224, 237, 239, 240], "average_pow": [5, 197, 237, 295], "papr": [5, 144, 156, 174, 237, 290, 295], "ratio": [5, 22, 40, 42, 44, 46, 47, 48, 49, 50, 113, 123, 144, 156, 170, 172, 174, 179, 181, 198, 199, 218, 219, 221, 222, 237, 241, 242, 256, 264, 265, 271, 272], "peak_voltag": [5, 206, 240, 295], "bool": [5, 26, 28, 37, 38, 40, 41, 42, 43, 51, 53, 59, 67, 69, 71, 74, 76, 77, 79, 84, 92, 94, 95, 96, 98, 107, 108, 144, 146, 147, 156, 166, 170, 172, 174, 179, 180, 181, 182, 183, 185, 197, 220, 235, 239, 240, 243, 252, 254, 259, 260, 268], "rms_voltag": [5, 206, 268, 295], "root": [5, 6, 110, 157, 167, 175, 224, 244, 260, 268, 269, 279, 280, 288, 294], "mean": [5, 224, 250, 257, 268, 293], "squar": [5, 6, 110, 157, 167, 175, 224, 226, 238, 260, 268, 269, 288], "rm": [5, 136, 137, 138, 140, 206, 224, 268], "crest_factor": [5, 206, 237, 295], "crest": [5, 206], "euclidean": [5, 223, 294, 295], "y": [5, 6, 26, 27, 37, 51, 52, 58, 70, 76, 78, 94, 96, 97, 107, 127, 128, 148, 149, 155, 183, 198, 201, 204, 214, 215, 216, 217, 223, 225, 231, 233, 235, 243, 248, 250, 257, 259, 270, 276, 291, 292], "between": [5, 26, 28, 38, 53, 67, 71, 74, 77, 79, 92, 95, 96, 98, 108, 147, 160, 183, 185, 223, 226, 231, 250, 254, 257, 291, 294], "two": [5, 107, 146, 208, 209, 223, 231, 244, 245, 246, 248, 250, 251, 252, 257, 279, 287, 288, 289], "ham": [5, 59, 208, 209, 211, 212, 231, 294, 295], "errorr": [5, 44, 45, 46, 47, 48, 49, 50, 292, 295], "A": [5, 9, 17, 19, 20, 21, 22, 23, 25, 27, 37, 44, 51, 52, 59, 84, 94, 97, 107, 110, 127, 136, 146, 157, 160, 167, 175, 196, 203, 208, 209, 211, 212, 228, 232, 233, 238, 266, 269, 282, 284, 291], "error": [5, 7, 9, 15, 16, 22, 44, 45, 46, 48, 49, 50, 109, 113, 123, 127, 129, 136, 139, 141, 142, 143, 144, 156, 160, 161, 163, 164, 165, 166, 170, 172, 174, 196, 205, 224, 242, 256, 291, 294, 295], "ber": [5, 7, 44, 109, 113, 144, 156, 166, 170, 174, 242, 292, 294, 295], "symbol": [5, 7, 44, 46, 49, 96, 109, 110, 114, 115, 116, 117, 118, 123, 124, 125, 136, 139, 144, 145, 156, 157, 160, 161, 166, 167, 170, 172, 173, 174, 175, 198, 218, 219, 221, 222, 224, 225, 227, 230, 243, 244, 253, 256, 259, 260, 266, 267, 269, 271, 272, 290, 291, 293, 294, 295], "ser": [5, 7, 44, 109, 123, 144, 156, 166, 172, 174, 256, 292, 294, 295], "evm": [5, 224, 294, 295], "x_hat": [5, 7, 44, 46, 224, 243, 292], "ref": [5, 136, 138, 140, 196, 208, 209, 210, 211, 212, 213, 224, 227, 229, 277], "vector": [5, 44, 59, 73, 84, 208, 209, 211, 212, 224, 250, 257, 294, 295], "magnitud": [5, 7, 37, 94, 107, 146, 200, 210, 224, 229, 245, 248, 277, 279, 294, 295], "hat": [5, 7, 46, 109, 115, 116, 136, 139, 144, 156, 160, 161, 166, 174, 224, 243, 259], "k": [5, 6, 7, 37, 46, 94, 109, 110, 114, 115, 116, 117, 118, 119, 136, 139, 144, 156, 160, 161, 166, 167, 174, 175, 214, 215, 218, 219, 221, 224, 243, 259, 260, 271, 290, 293], "linearmodul": [6, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 141, 142, 163, 164, 166, 259, 295], "amplitud": [6, 109, 110, 136, 137, 138, 140, 233, 281, 287, 291], "arbitrari": [6, 69, 70, 71, 72, 73, 74, 75, 109, 294, 295], "psk": [6, 136, 156, 160, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 198, 224, 225, 233, 242, 243, 244, 256, 259, 260, 270, 290, 291, 294, 295], "shift": [6, 144, 156, 166, 170, 171, 172, 173, 174, 279, 288, 289, 294, 295], "kei": [6, 144, 156, 166, 170, 171, 172, 173, 174, 294, 295], "demodul": [6, 109, 116, 144, 156, 166, 174, 295], "pimpsk": [6, 174, 175, 295], "pi": [6, 26, 37, 80, 81, 84, 94, 96, 97, 136, 148, 156, 160, 166, 174, 175, 183, 198, 217, 226, 227, 233, 235, 238, 245, 246, 247, 248, 251, 252, 258, 262, 273, 274, 276, 279, 287, 288, 289, 291, 294, 295], "m": [6, 76, 79, 83, 94, 107, 109, 110, 114, 115, 116, 117, 118, 119, 125, 136, 144, 156, 160, 166, 167, 173, 174, 175, 216, 218, 219, 221, 226, 259, 271, 283, 284, 285, 286, 294, 295], "oqpsk": [6, 144, 156, 157, 158, 159, 295], "offset": [6, 17, 19, 26, 96, 97, 109, 110, 120, 144, 145, 148, 149, 150, 153, 156, 157, 166, 167, 171, 174, 175, 183, 225, 235, 260, 270, 281, 291, 294, 295], "quadratur": [6, 144, 156, 233], "msk": [6, 144, 145, 253, 295], "rectangular": [6, 95, 110, 157, 167, 175, 267, 290, 293, 294, 295], "span": [6, 7, 110, 157, 167, 175, 227, 230, 244, 253, 266, 267, 269, 290, 293], "half_sin": [6, 145, 230, 295], "half": [6, 144, 156, 213, 230, 238, 294, 295], "sine": [6, 144, 149, 230, 294, 295], "time_bandwidth": [6, 227], "raised_cosin": [6, 110, 157, 167, 175, 244, 266, 293, 295], "alpha": [6, 107, 108, 110, 157, 167, 175, 227, 261, 266, 269, 290, 293], "rais": [6, 37, 94, 110, 157, 167, 175, 244, 260, 266, 269, 288, 294], "cosin": [6, 37, 94, 110, 149, 157, 167, 175, 244, 260, 266, 269, 288, 294], "rc": [6, 110, 157, 167, 175, 266], "root_raised_cosin": [6, 37, 55, 56, 94, 110, 157, 167, 175, 244, 245, 246, 247, 248, 251, 252, 258, 262, 269, 288, 290, 292, 293, 295], "srrc": [6, 110, 156, 157, 166, 167, 174, 175, 244, 260, 269, 290, 292], "binary_cod": [6, 203, 295], "gener": [6, 144, 156, 166, 174, 198, 201, 203, 204, 216, 228, 255, 283, 292, 295], "code": [6, 26, 29, 37, 51, 55, 76, 80, 94, 96, 99, 107, 109, 111, 144, 145, 146, 156, 157, 158, 166, 167, 168, 173, 174, 175, 183, 186, 200, 203, 218, 219, 221, 228, 229, 243, 259, 271, 277, 280, 285, 292, 295], "gray_cod": [6, 228, 295], "grai": [6, 144, 145, 156, 157, 166, 167, 173, 174, 175, 228, 243, 259, 292, 294], "diff_encod": [6, 144, 156, 166, 170, 172, 174, 214, 215, 295], "y_prev": [6, 214, 215], "input": [6, 9, 17, 19, 22, 23, 26, 27, 28, 31, 37, 38, 51, 52, 53, 61, 65, 66, 69, 70, 71, 73, 76, 77, 78, 79, 86, 91, 94, 95, 96, 97, 98, 101, 107, 108, 127, 128, 146, 147, 148, 149, 156, 166, 170, 172, 174, 176, 183, 184, 185, 188, 198, 199, 201, 202, 204, 205, 207, 214, 215, 216, 217, 234, 236, 241, 247, 258, 264, 265, 275, 276, 281, 288, 289, 291], "data": [6, 136, 141, 160, 163, 214, 215, 232, 236, 260, 275, 294], "diff_decod": [6, 214, 215, 295], "decod": [6, 214], "use_styl": [7, 261], "appli": [7, 26, 38, 96, 110, 183, 225, 233, 243, 244, 250, 257, 259, 260, 261, 270, 281], "default": [7, 61, 66, 145, 157, 167, 173, 175, 197, 220, 223, 231, 237, 239, 243, 246, 248, 251, 252, 254, 257, 259, 261, 292], "matplotlib": [7, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 287, 288, 289, 290, 291, 292, 293, 294], "rcparam": [7, 261], "time_domain": [7, 26, 37, 94, 96, 97, 107, 144, 146, 148, 156, 166, 174, 183, 198, 217, 229, 235, 260, 273, 274, 276, 277, 290, 291, 292, 293, 295], "ani": [7, 26, 37, 51, 59, 76, 84, 94, 96, 107, 146, 148, 149, 183, 200, 207, 217, 229, 234, 260, 276, 277, 280, 286], "dtype": [7, 26, 37, 51, 59, 76, 84, 94, 96, 107, 144, 146, 148, 149, 156, 166, 174, 183, 200, 229, 236, 260, 275, 277, 280, 291], "_scalartype_co": [7, 260], "t": [7, 9, 11, 16, 39, 127, 129, 133, 178, 227, 232, 260, 283, 287], "raster": [7, 244, 253, 254, 294, 295], "none": [7, 26, 37, 38, 42, 51, 59, 61, 66, 69, 73, 84, 96, 110, 127, 135, 146, 149, 157, 167, 175, 181, 183, 197, 198, 199, 201, 204, 208, 209, 211, 212, 216, 220, 223, 231, 236, 237, 239, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 257, 258, 259, 260, 275, 281, 287, 290, 292], "periodogram": [7, 217, 250, 273, 274, 276, 290, 294, 295], "power": [7, 144, 156, 166, 174, 197, 198, 199, 207, 224, 227, 229, 230, 234, 237, 238, 239, 250, 266, 267, 269, 277, 293, 294], "densiti": [7, 22, 250, 290, 293], "xx": [7, 250], "welch": [7, 250, 257], "spectrogram": [7, 257, 294, 295], "constel": [7, 144, 156, 166, 171, 174, 198, 224, 225, 233, 243, 270, 279, 294, 295], "symbol_map": [7, 109, 110, 125, 144, 156, 166, 171, 173, 174, 224, 259, 292, 295], "map": [7, 109, 110, 117, 125, 144, 156, 166, 173, 174, 224, 259, 294, 295], "ey": [7, 144, 156, 166, 174, 244, 294, 295], "diagram": [7, 9, 26, 96, 107, 127, 148, 183, 214, 215, 244, 294, 295], "phase_tre": [7, 144, 253, 295], "tree": [7, 253, 295], "continu": [7, 94, 144, 253, 287, 295], "cpm": [7, 253, 295], "kwarg": [7, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262], "e_b": [7, 46, 47, 48, 49, 50, 109, 113, 144, 156, 166, 170, 174, 199, 218, 219, 221, 242, 271, 294], "n_0": [7, 22, 46, 47, 48, 49, 50, 109, 113, 123, 144, 156, 166, 170, 172, 174, 198, 199, 218, 219, 221, 222, 224, 242, 243, 256, 271, 272, 292, 294], "e_": [7, 46, 47, 48, 49, 50, 109, 123, 144, 156, 166, 172, 174, 198, 199, 218, 221, 222, 224, 243, 256, 272, 292, 294], "roc": [7, 39, 42, 178, 181, 255, 295], "receiv": [7, 39, 40, 42, 44, 46, 109, 115, 116, 122, 136, 137, 139, 140, 144, 156, 160, 161, 166, 170, 172, 174, 178, 179, 180, 181, 182, 224, 226, 244, 249, 255, 295], "oper": [7, 39, 42, 178, 181, 255, 295], "characterist": [7, 39, 42, 178, 181, 255, 295], "curv": [7, 39, 42, 170, 172, 178, 181, 242, 255, 256, 295], "enr": [7, 178, 179, 181, 249], "impulse_respons": [7, 26, 37, 51, 61, 76, 86, 94, 96, 107, 146, 183, 208, 209, 210, 211, 212, 213, 227, 230, 247, 266, 267, 269, 288, 289, 293, 295], "step_respons": [7, 26, 37, 51, 66, 76, 91, 94, 96, 107, 146, 183, 258, 288, 289, 291, 295], "step": [7, 26, 37, 51, 66, 76, 91, 94, 96, 107, 146, 148, 149, 155, 183, 245, 258, 294], "zeros_pol": [7, 262, 289, 295], "zero": [7, 26, 27, 37, 51, 58, 73, 76, 77, 80, 81, 84, 93, 94, 96, 97, 98, 107, 127, 146, 149, 183, 185, 210, 229, 230, 236, 245, 246, 247, 248, 251, 252, 258, 262, 267, 273, 277, 288, 290, 291, 293, 294, 295], "pole": [7, 76, 77, 80, 81, 84, 88, 94, 107, 245, 246, 247, 248, 251, 252, 258, 262, 288, 294], "magnitude_respons": [7, 37, 59, 84, 94, 107, 146, 208, 209, 210, 211, 212, 213, 230, 248, 266, 267, 269, 288, 289, 291, 293, 295], "omega": [7, 26, 37, 51, 59, 60, 63, 76, 84, 94, 96, 107, 146, 148, 150, 152, 154, 183, 245, 246, 248, 251, 252, 291], "phase_respons": [7, 59, 84, 252, 295], "angl": [7, 160, 252, 291], "phase_delai": [7, 26, 37, 51, 63, 96, 146, 183, 251, 295], "tau_": [7, 26, 37, 51, 63, 96, 146, 183, 251], "phi": [7, 26, 37, 51, 63, 96, 109, 110, 120, 144, 145, 146, 156, 157, 166, 167, 171, 174, 175, 183, 225, 233, 235, 251], "group_delai": [7, 26, 37, 51, 60, 96, 146, 183, 210, 246, 288, 289, 295], "group": [7, 26, 37, 51, 60, 96, 146, 183, 210, 246, 294], "tau_g": [7, 26, 37, 51, 60, 96, 146, 183, 246], "iir": [7, 9, 18, 61, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 107, 108, 127, 131, 146, 245, 246, 247, 248, 251, 252, 258, 262, 288, 291, 294, 295], "q": [8, 144, 156, 176, 177, 178, 179, 180, 182, 183, 185, 189, 192, 213, 279, 295], "comput": [8, 26, 39, 40, 41, 42, 43, 59, 84, 109, 113, 123, 136, 144, 156, 160, 166, 170, 172, 174, 176, 177, 178, 179, 180, 181, 182, 197, 198, 220, 223, 226, 231, 237, 239, 288, 289, 291, 293, 295], "complementari": [8, 176, 177], "cumul": [8, 176, 177], "distribut": [8, 176, 177], "standard": [8, 176, 177], "normal": [8, 9, 11, 16, 127, 129, 133, 176, 177, 208, 209, 211, 212, 224, 227, 230, 245, 246, 248, 250, 251, 252, 257, 266, 267, 269, 291, 293], "mathcal": [8, 39, 176, 177, 178, 179, 180, 181, 182, 198, 216], "qinv": [8, 176, 177, 295], "invers": [8, 177], "closedlooppl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 282, 291, 295], "defin": [9, 51, 76, 94, 198, 216, 227, 255, 279, 282, 289, 294], "perform": [9, 27, 52, 97, 170, 172, 210, 217, 276, 279, 282, 288, 289, 292, 294, 295], "close": [9, 16, 18, 282, 294, 295], "loop": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 127, 128, 129, 130, 131, 132, 133, 134, 135, 148, 149, 150, 151, 152, 153, 154, 155, 282, 294, 295], "pll": [9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 282, 294, 295], "meant": 9, "analysi": [9, 16, 284, 291, 294, 295], "onli": [9, 27, 35, 52, 58, 59, 64, 69, 73, 84, 89, 97, 105, 110, 136, 145, 157, 167, 173, 175, 193, 198, 208, 209, 211, 212, 226, 229, 230, 254, 267, 277, 286, 291, 292], "block": [9, 26, 96, 107, 127, 148, 183, 214, 215], "bb": [9, 290, 291], "phase_err": [9, 291], "ped": [9, 15, 16, 129, 136, 140, 141, 142, 160, 161, 162, 163, 164, 165, 282, 291], "lf": [9, 291], "phase_est": [9, 291], "lo": [9, 291], "nco": [9, 12, 16, 129, 148, 149, 150, 151, 152, 153, 154, 155, 282, 291, 294, 295], "local": [9, 283, 291], "oscil": [9, 148, 150, 282, 291, 294, 295], "detector": [9, 15, 16, 39, 129, 136, 143, 160, 165, 178, 291, 295], "filter": [9, 13, 14, 16, 18, 26, 27, 28, 31, 32, 33, 35, 36, 37, 38, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 105, 106, 107, 108, 109, 116, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 144, 146, 147, 156, 166, 174, 183, 184, 185, 188, 190, 191, 193, 194, 208, 209, 210, 211, 212, 213, 217, 227, 230, 244, 245, 246, 247, 248, 251, 252, 258, 262, 263, 266, 267, 269, 276, 282, 293, 294, 295], "numer": [9, 148, 150, 282, 289, 291, 294, 295], "control": [9, 136, 148, 150, 266, 269, 282, 291, 294, 295], "The": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 72, 73, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 283, 284, 285, 286, 288, 289, 291, 292, 293, 294, 296], "transfer": [9, 18, 51, 76, 77, 107, 127, 227, 288, 289, 291], "2nd": [9, 127, 129, 282, 291, 295], "proport": [9, 13, 27, 97, 127, 129, 134, 226, 238, 282, 295], "plu": [9, 127, 129, 282, 295], "z": [9, 51, 76, 94, 107, 127, 148, 214, 215, 279, 288, 289, 291], "k_1": [9, 13, 127, 134, 291], "k_2": [9, 14, 127, 132, 291], "frac": [9, 17, 19, 22, 23, 37, 39, 40, 41, 43, 51, 57, 76, 94, 98, 107, 127, 146, 156, 166, 174, 178, 179, 180, 185, 196, 197, 198, 199, 206, 218, 219, 221, 222, 224, 226, 227, 233, 234, 235, 237, 238, 268, 271, 272, 278, 279, 291], "k_0": [9, 12, 16, 129, 148, 150, 151, 291], "k_p": [9, 15, 16, 129, 136, 143, 160, 165, 291], "refer": [9, 17, 19, 20, 21, 22, 23, 37, 39, 40, 41, 43, 44, 69, 127, 136, 138, 139, 140, 160, 161, 170, 172, 178, 179, 180, 182, 196, 198, 206, 208, 209, 210, 211, 212, 213, 224, 225, 227, 229, 237, 263, 266, 269, 270, 277, 279, 289, 293, 294], "michael": [9, 17, 19, 20, 21, 22, 23, 37, 127, 136, 160, 266, 269], "rice": [9, 17, 19, 20, 21, 22, 23, 37, 127, 136, 160, 266, 269], "digit": [9, 17, 19, 20, 21, 22, 23, 37, 127, 136, 160, 170, 172, 266, 269, 291, 294, 295], "commun": [9, 17, 19, 20, 21, 22, 23, 37, 127, 136, 160, 170, 172, 213, 263, 266, 269, 291, 294], "discret": [9, 17, 19, 20, 21, 22, 23, 37, 94, 107, 127, 136, 146, 160, 198, 216, 222, 266, 269, 272, 281, 287, 291, 294, 295], "approach": [9, 17, 19, 20, 21, 22, 23, 37, 127, 136, 160, 199, 202, 205, 266, 269, 291], "appendix": [9, 127, 266, 269], "lock": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 127, 128, 129, 130, 131, 132, 133, 134, 135, 148, 149, 150, 151, 152, 153, 154, 155], "exampl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 33, 35, 36, 37, 38, 40, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 103, 105, 106, 107, 108, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 166, 170, 171, 172, 173, 174, 176, 177, 179, 181, 183, 186, 187, 191, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 241, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 291], "see": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 35, 38, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 85, 87, 88, 89, 90, 92, 93, 95, 105, 108, 127, 128, 129, 130, 131, 132, 133, 134, 135, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 166, 171, 173, 174, 183, 193, 208, 209, 211, 212, 217, 227, 230, 245, 246, 247, 248, 251, 252, 258, 262, 266, 267, 269, 294], "noise_bandwidth": [9, 16, 127, 129, 133], "damping_factor": [9, 16, 127, 129, 130], "creat": [9, 16, 26, 28, 37, 38, 44, 45, 51, 53, 69, 71, 76, 77, 79, 94, 95, 96, 97, 98, 107, 108, 109, 110, 127, 129, 144, 145, 146, 147, 148, 150, 156, 157, 166, 167, 171, 174, 175, 183, 185, 198, 200, 224, 225, 229, 235, 270, 273, 274, 277, 279, 287, 291, 293], "object": [9, 16, 26, 29, 30, 37, 44, 45, 51, 55, 56, 76, 80, 81, 94, 96, 99, 100, 107, 109, 110, 111, 112, 144, 145, 146, 156, 157, 158, 159, 166, 167, 168, 169, 174, 175, 183, 186, 187, 229, 245, 246, 247, 248, 251, 252, 258, 262, 277, 291, 295], "phase_lock_tim": [9, 23], "frequency_lock_tim": [9, 17], "freq_offset": [9, 17, 19], "lock_tim": [9, 19, 291], "phase_error_vari": [9, 22], "cn0": [9, 22], "varianc": [9, 22, 39, 41, 43, 180, 182, 198], "steadi": [9, 22], "state": [9, 22, 26, 27, 35, 37, 51, 52, 58, 64, 65, 67, 69, 73, 74, 76, 89, 90, 92, 94, 96, 97, 105, 107, 146, 183, 193, 295], "sample_r": [9, 16, 24, 26, 59, 60, 63, 84, 96, 97, 144, 156, 166, 174, 183, 217, 225, 235, 244, 245, 246, 248, 250, 251, 252, 253, 254, 257, 260, 273, 274, 276, 287, 291, 293], "bnt": [9, 11, 291], "bandwidth": [9, 10, 11, 16, 20, 38, 127, 129, 133, 199, 208, 209, 227, 266, 269, 291, 293], "b_n": [9, 10, 11, 16, 17, 19, 22, 23, 127, 129, 133], "bn": [9, 10], "hz": [9, 10, 16, 17, 19, 22, 59, 60, 63, 84, 127, 129, 133, 199, 207, 217, 225, 226, 227, 234, 235, 238, 273, 274, 278, 287], "zeta": [9, 16, 25, 127, 129, 130], "damp": [9, 16, 25, 127, 129, 130, 291], "k0": [9, 12, 16, 129, 148, 291], "kp": [9, 15, 16, 129, 291], "k1": [9, 13, 127, 291], "k2": [9, 14, 127, 291], "repres": [9, 18, 201, 202], "omega_n": [9, 21, 291], "natur": [9, 21], "radian": [9, 20, 21, 22, 136, 139, 141, 142, 148, 149, 150, 152, 153, 154, 160, 161, 163, 164, 174, 291], "omega_3db": [9, 20], "3": [9, 17, 19, 20, 23, 26, 33, 36, 37, 39, 40, 44, 55, 56, 59, 80, 81, 84, 94, 96, 97, 103, 106, 107, 136, 144, 146, 148, 156, 160, 166, 170, 171, 172, 173, 174, 178, 179, 183, 186, 187, 191, 194, 196, 198, 199, 200, 201, 203, 204, 207, 208, 209, 210, 211, 212, 213, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 243, 244, 245, 246, 247, 248, 251, 252, 258, 260, 262, 263, 266, 267, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 283, 284, 289, 291, 293, 294], "omega_": [9, 20], "textrm": [9, 20], "properti": [10, 11, 12, 13, 14, 15, 18, 20, 21, 24, 25, 31, 32, 33, 34, 36, 57, 62, 65, 67, 68, 72, 74, 75, 82, 83, 85, 87, 88, 90, 92, 93, 101, 102, 103, 104, 106, 114, 119, 120, 121, 122, 124, 125, 126, 130, 131, 132, 133, 134, 137, 138, 143, 151, 152, 153, 165, 171, 173, 188, 189, 190, 191, 192, 194, 195, 295], "paramet": [16, 17, 19, 22, 27, 28, 38, 40, 41, 42, 43, 46, 47, 48, 50, 52, 53, 59, 60, 61, 63, 66, 70, 71, 73, 77, 78, 79, 84, 86, 91, 95, 97, 98, 108, 110, 113, 115, 116, 117, 118, 123, 128, 129, 139, 140, 141, 142, 145, 147, 149, 150, 155, 157, 161, 163, 164, 167, 170, 172, 175, 176, 177, 179, 180, 181, 182, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279], "where": [16, 27, 52, 97, 110, 127, 129, 133, 167, 175, 178, 198, 199, 216, 218, 219, 221, 227, 271, 279, 288, 289, 294], "period": [16, 127, 129, 133, 144, 279], "second": [16, 17, 19, 23, 44, 127, 129, 133, 227], "critic": [16, 25, 127, 129, 130, 291], "underdamp": [16, 25, 127, 129, 130], "overdamp": [16, 25, 127, 129, 130], "ted": [16, 129], "t_": [17, 19, 23, 70, 227, 293], "fl": [17, 19], "delta": [17, 19, 26, 37, 51, 61, 76, 86, 94, 96, 107, 146, 183, 210, 247, 288, 289], "take": [17, 19, 23, 283], "onto": [17, 19, 23], "39": 17, "pl": [19, 23, 284], "38": 19, "34": [20, 260], "33": 21, "sigma_": [22, 39, 40, 42], "theta_": [22, 136, 139, 160, 161], "carrier": [22, 166], "43": 22, "40": [23, 37, 96, 183, 217], "less": [25, 196], "than": [25, 144, 145, 157, 167, 173, 175, 196, 230, 233, 243, 259, 267], "greater": [25, 266, 269], "fir": [26, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 96, 97, 98, 99, 100, 101, 103, 105, 106, 107, 108, 146, 147, 183, 184, 185, 186, 187, 188, 191, 193, 194, 208, 209, 210, 211, 212, 213, 244, 245, 246, 247, 248, 251, 252, 258, 262, 263, 290, 294, 295], "note": [26, 33, 36, 37, 39, 40, 41, 43, 51, 76, 94, 96, 103, 106, 107, 127, 136, 146, 148, 160, 178, 179, 180, 182, 183, 191, 194, 196, 198, 199, 202, 205, 210, 214, 215, 227, 233, 238, 244, 263, 279], "equival": [26, 96, 183, 198, 199, 208, 209, 210, 211, 212, 222, 229, 272, 277, 285, 287], "first": [26, 31, 44, 96, 98, 101, 144, 154, 156, 183, 185, 188, 236, 260, 275, 284, 286], "prototyp": [26, 33, 36, 96, 103, 106, 183, 191, 194], "feedforward": [26, 28, 33, 36, 37, 51, 53, 68, 76, 79, 83, 94, 96, 98, 103, 106, 107, 146, 183, 185, 191, 194, 245, 246, 247, 248, 251, 252, 258, 262, 288, 289], "coeffici": [26, 28, 51, 53, 76, 79, 96, 98, 109, 122, 126, 144, 156, 166, 174, 183, 185, 245, 246, 247, 248, 251, 252, 258, 262, 288, 289], "discard": [26, 183], "each": [26, 27, 52, 96, 97, 183, 224, 232, 250, 254, 257], "instead": [26, 96, 183, 243], "ar": [26, 27, 28, 33, 36, 38, 39, 44, 46, 47, 48, 50, 52, 53, 71, 77, 79, 95, 96, 97, 98, 103, 106, 108, 109, 110, 122, 126, 144, 145, 147, 149, 156, 157, 166, 167, 174, 175, 178, 183, 185, 191, 194, 199, 201, 202, 204, 205, 210, 226, 229, 230, 236, 243, 244, 245, 246, 248, 250, 251, 252, 253, 254, 257, 259, 260, 261, 263, 267, 273, 274, 277, 283, 285, 287, 289, 291, 293, 294, 296], "commut": [26, 96, 183], "parallel": [26, 96, 183], "output": [26, 27, 31, 37, 51, 52, 61, 66, 76, 77, 79, 86, 91, 94, 95, 96, 97, 98, 101, 107, 108, 116, 127, 128, 146, 148, 149, 154, 155, 183, 185, 188, 198, 199, 200, 201, 202, 204, 205, 215, 216, 224, 229, 234, 236, 247, 258, 275, 277, 280, 283, 287, 288, 289, 291], "sum": [26, 39, 51, 76, 178, 293], "prevent": [26, 96, 156, 174, 183], "need": [26, 96, 183, 283, 284, 286], "done": [26, 283], "case": [26, 96, 174, 178, 183], "3x": [26, 96], "6": [26, 33, 36, 37, 44, 55, 56, 80, 81, 84, 94, 96, 97, 103, 106, 107, 136, 144, 146, 148, 156, 166, 173, 174, 179, 180, 182, 183, 191, 194, 196, 203, 207, 210, 216, 217, 218, 219, 224, 226, 228, 229, 232, 234, 238, 243, 244, 245, 246, 247, 248, 251, 252, 258, 259, 260, 262, 263, 266, 269, 273, 274, 276, 277, 279, 283, 286, 288, 289, 291, 292], "9": [26, 33, 36, 59, 84, 96, 97, 103, 106, 144, 156, 166, 174, 179, 183, 191, 194, 196, 203, 216, 224, 228, 229, 232, 263, 266, 269, 277, 283, 289, 290, 292, 293], "v": [26, 148, 207, 234, 283], "5": [26, 33, 36, 37, 39, 40, 41, 42, 43, 44, 55, 56, 59, 94, 96, 97, 103, 106, 107, 136, 144, 146, 148, 156, 166, 174, 179, 181, 183, 191, 194, 196, 198, 201, 203, 204, 205, 208, 209, 210, 211, 212, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 232, 233, 238, 241, 244, 245, 246, 247, 248, 251, 252, 258, 260, 262, 263, 266, 269, 270, 271, 272, 273, 274, 276, 277, 279, 283, 287, 288, 289, 290, 291, 292, 293], "7": [26, 29, 30, 33, 36, 37, 96, 97, 99, 100, 103, 106, 136, 144, 156, 160, 166, 173, 174, 179, 183, 191, 194, 196, 203, 210, 211, 213, 216, 224, 228, 229, 232, 263, 277, 279, 283, 284, 285, 289, 291], "8": [26, 33, 36, 37, 40, 42, 59, 80, 81, 84, 94, 96, 97, 103, 106, 107, 110, 136, 144, 145, 146, 148, 156, 157, 160, 166, 167, 170, 171, 172, 173, 174, 175, 179, 181, 183, 191, 194, 196, 198, 199, 200, 202, 203, 205, 208, 209, 210, 211, 212, 213, 216, 217, 224, 226, 227, 228, 229, 230, 232, 235, 238, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 256, 258, 259, 260, 261, 262, 263, 266, 267, 269, 273, 274, 276, 277, 279, 288, 289, 290, 291, 293], "summat": 26, "bottom": [26, 96, 183], "top": [26, 96, 183], "adder": [26, 127, 148, 214, 215, 291], "relat": [26, 33, 36, 96, 103, 106, 183, 191, 194, 199, 227], "In": [26, 27, 28, 29, 30, 33, 36, 37, 38, 40, 42, 44, 52, 53, 55, 56, 59, 67, 71, 74, 77, 79, 80, 81, 84, 92, 94, 95, 96, 97, 98, 99, 100, 103, 106, 107, 108, 136, 144, 146, 147, 148, 156, 160, 166, 170, 171, 172, 173, 174, 176, 177, 179, 181, 183, 185, 186, 187, 191, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 241, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 287, 292], "np": [26, 33, 36, 37, 40, 42, 59, 80, 81, 84, 94, 96, 97, 103, 106, 107, 109, 121, 125, 144, 146, 148, 156, 166, 170, 172, 173, 174, 179, 181, 183, 191, 194, 196, 198, 199, 200, 201, 202, 204, 205, 216, 217, 224, 225, 226, 229, 233, 235, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 256, 258, 260, 262, 263, 270, 273, 274, 276, 277, 279, 287, 288, 289, 290, 291, 292, 293], "co": [26, 96, 97, 183, 235], "64": [26, 210, 232, 289], "arang": [26, 33, 36, 96, 97, 103, 106, 183, 191, 194, 198, 200, 217, 229, 235, 263, 273, 274, 276, 277, 279, 287, 291], "280": 26, "out": [26, 29, 33, 36, 44, 55, 59, 80, 84, 96, 97, 99, 103, 106, 136, 144, 156, 166, 171, 173, 174, 176, 177, 183, 186, 191, 194, 200, 201, 203, 204, 207, 214, 215, 216, 218, 219, 221, 222, 224, 226, 228, 229, 234, 236, 238, 241, 261, 263, 264, 265, 271, 272, 275, 277, 278], "plt": [26, 37, 40, 42, 94, 96, 97, 107, 136, 144, 146, 148, 156, 160, 166, 170, 171, 172, 173, 174, 179, 181, 183, 196, 198, 199, 200, 202, 205, 208, 209, 210, 211, 212, 213, 217, 224, 225, 226, 227, 229, 230, 233, 235, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 256, 258, 259, 260, 262, 266, 267, 269, 270, 273, 274, 276, 277, 279, 287, 288, 289, 290, 291, 292, 293], "figur": [26, 37, 40, 42, 94, 96, 97, 107, 136, 144, 146, 148, 156, 160, 166, 170, 171, 172, 173, 174, 179, 181, 183, 196, 198, 199, 200, 202, 205, 208, 209, 210, 211, 212, 213, 217, 224, 225, 226, 227, 229, 230, 233, 235, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 256, 258, 259, 260, 261, 262, 266, 267, 269, 270, 273, 274, 276, 277, 279, 287, 288, 289, 290, 291, 292, 293], "figsiz": [26, 37, 40, 42, 94, 96, 97, 107, 136, 144, 146, 148, 156, 160, 166, 170, 171, 172, 173, 174, 179, 181, 183, 196, 198, 199, 200, 202, 205, 208, 209, 210, 211, 212, 213, 217, 224, 225, 226, 227, 229, 230, 233, 235, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 256, 258, 259, 260, 261, 262, 266, 267, 269, 270, 273, 274, 276, 277, 279, 287, 288, 289, 290, 291, 292, 293], "plot": [26, 37, 40, 42, 59, 60, 61, 63, 66, 84, 86, 91, 94, 96, 97, 107, 136, 144, 146, 148, 156, 160, 166, 170, 171, 172, 173, 174, 179, 181, 183, 198, 199, 200, 202, 205, 208, 209, 210, 211, 212, 213, 217, 224, 225, 226, 227, 229, 230, 233, 235, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 266, 267, 269, 270, 273, 274, 276, 277, 279, 287, 288, 289, 291, 292, 293, 294, 295], "marker": [26, 96, 97, 148, 183, 243, 259, 260, 287, 288, 289, 292], "label": [26, 37, 40, 42, 94, 96, 97, 107, 136, 145, 146, 157, 160, 167, 170, 172, 175, 179, 181, 183, 196, 198, 208, 209, 210, 211, 212, 224, 225, 227, 229, 233, 242, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 256, 257, 260, 266, 269, 270, 277, 287, 290, 291, 292, 293], "o": [26, 96, 97, 183, 287], "titl": [26, 37, 94, 96, 136, 144, 148, 156, 160, 170, 172, 183, 196, 198, 199, 200, 202, 205, 217, 224, 225, 229, 233, 235, 242, 256, 260, 270, 273, 274, 276, 277, 279, 287, 290, 291, 292, 293], "tight_layout": [26, 37, 94, 96, 136, 144, 148, 156, 160, 170, 172, 183, 196, 198, 199, 200, 202, 205, 217, 224, 225, 226, 229, 235, 242, 256, 260, 270, 273, 274, 276, 277, 279, 290, 291, 292, 293], "preserv": [26, 28, 38, 53, 67, 71, 74, 77, 79, 92, 95, 96, 98, 108, 147, 183, 185, 244, 254], "call": [26, 27, 28, 38, 52, 53, 67, 71, 74, 77, 79, 92, 95, 96, 97, 98, 108, 147, 183, 185], "true": [26, 40, 41, 42, 43, 59, 84, 96, 97, 136, 141, 142, 144, 156, 160, 163, 164, 166, 170, 172, 174, 179, 180, 181, 182, 183, 196, 197, 199, 201, 202, 204, 205, 216, 220, 226, 229, 235, 239, 240, 243, 252, 254, 259, 260, 261, 268, 277, 290, 291, 292], "y1": [26, 96, 97, 183, 233], "70": [26, 232], "y2": [26, 96, 97, 183, 233], "140": [26, 217], "y3": [26, 96, 97, 183], "210": 26, "y4": [26, 96, 183], "y5": [26, 96, 183], "flush": [26, 27, 37, 51, 52, 58, 96, 97, 146, 183, 295], "y_1": [26, 96, 183, 233], "y_2": [26, 96, 183, 233], "y_3": [26, 96, 183], "y_4": [26, 96, 183], "y_5": [26, 96, 183], "__call__": [26, 27, 28, 37, 38, 51, 52, 53, 67, 69, 70, 71, 74, 76, 77, 78, 79, 92, 94, 95, 96, 97, 98, 107, 108, 127, 128, 136, 139, 146, 147, 148, 149, 160, 161, 183, 184, 185, 295], "full": [26, 27, 52, 96, 97, 183, 184, 200, 229, 277], "__len__": [26, 37, 51, 54, 96, 146, 183], "__repr__": [26, 29, 37, 51, 55, 76, 80, 94, 96, 99, 107, 109, 111, 144, 146, 156, 158, 166, 168, 174, 183, 186], "style": [26, 29, 37, 51, 55, 76, 80, 94, 96, 99, 107, 109, 111, 144, 146, 156, 158, 166, 168, 174, 183, 186, 261], "__str__": [26, 30, 37, 51, 56, 76, 81, 94, 96, 100, 107, 109, 112, 144, 146, 156, 159, 166, 169, 174, 183, 187], "human": [26, 30, 37, 51, 56, 76, 81, 94, 96, 100, 107, 109, 112, 144, 146, 156, 159, 166, 169, 174, 183, 187], "readabl": [26, 30, 37, 51, 56, 76, 81, 94, 96, 100, 107, 109, 112, 144, 146, 156, 159, 166, 169, 174, 183, 187], "reset": [26, 35, 37, 51, 64, 69, 73, 76, 89, 94, 96, 105, 107, 127, 135, 146, 148, 154, 183, 193], "when": [26, 35, 37, 51, 58, 61, 64, 66, 76, 86, 89, 91, 94, 96, 105, 107, 108, 146, 183, 193, 198, 199, 201, 202, 204, 205, 222, 229, 245, 246, 247, 248, 251, 252, 258, 272, 277, 279, 287, 288, 289], "pass": [26, 37, 51, 58, 96, 146, 183, 198, 201, 204, 216, 224, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 281, 283, 285, 288, 289, 295], "through": [26, 37, 51, 58, 96, 146, 156, 174, 183, 201, 204, 216, 281, 288, 289, 291], "indic": [26, 28, 31, 37, 38, 41, 42, 43, 51, 53, 67, 69, 71, 74, 76, 77, 79, 92, 94, 95, 96, 98, 101, 107, 108, 109, 110, 144, 145, 146, 147, 156, 157, 166, 167, 170, 172, 174, 175, 179, 180, 181, 182, 183, 185, 188, 197, 220, 227, 230, 233, 235, 239, 240, 244, 252, 253, 254, 260, 266, 267, 268, 269, 277], "whether": [26, 28, 37, 38, 41, 42, 43, 51, 53, 67, 69, 71, 74, 76, 77, 79, 92, 94, 95, 96, 98, 107, 108, 146, 147, 170, 172, 179, 180, 181, 182, 183, 185, 197, 220, 235, 239, 240, 252, 254, 260, 268], "consist": [26, 37, 46, 47, 48, 49, 50, 51, 65, 96, 146, 183], "previou": [26, 28, 37, 38, 51, 53, 65, 71, 73, 77, 79, 95, 96, 98, 107, 108, 146, 147, 183, 185, 214, 215], "u": [26, 37, 51, 66, 76, 91, 94, 96, 107, 146, 183, 196, 258, 279, 280, 288, 289], "frequency_respons": [26, 37, 51, 59, 76, 84, 94, 96, 107, 146, 183, 295], "numpi": [26, 37, 51, 59, 76, 84, 94, 96, 107, 146, 149, 183, 198, 201, 204, 216, 275, 284, 287, 288, 289, 290, 291, 292, 293, 294], "float64": [26, 37, 51, 59, 76, 84, 94, 96, 107, 146, 148, 149, 183, 200, 229, 277, 280], "complex128": [26, 37, 51, 59, 76, 84, 94, 96, 107, 146, 148, 149, 183], "custom": [26, 32, 96, 102, 110, 157, 167, 175, 183, 190, 208, 209, 211, 212, 295], "multir": [26, 27, 28, 32, 96, 97, 98, 102, 183, 185, 190, 213, 263, 295], "polyphase_tap": [26, 30, 33, 36, 96, 97, 100, 103, 106, 183, 187, 191, 194], "index": [26, 31, 69, 73, 96, 101, 109, 144, 156, 166, 174, 183, 188, 229, 244, 253, 254, 259, 277, 280, 283], "correspond": [26, 31, 44, 49, 96, 101, 183, 188, 254], "mode": [27, 28, 35, 38, 52, 53, 58, 64, 67, 69, 71, 73, 74, 77, 79, 89, 92, 95, 97, 98, 105, 108, 147, 184, 185, 193, 200, 229, 277, 279], "l": [27, 52, 78, 97, 108, 146, 147, 210], "stream": [27, 28, 29, 30, 35, 38, 52, 53, 55, 56, 58, 64, 67, 69, 71, 73, 74, 77, 79, 80, 81, 89, 92, 95, 97, 98, 99, 100, 105, 108, 144, 147, 156, 166, 174, 185, 186, 187, 193, 289], "convolut": [27, 52, 96, 97], "ha": [27, 52, 94, 96, 97, 144, 156, 166, 198, 208, 209, 210, 211, 212, 217, 226, 227, 238, 276, 279, 291, 292, 293], "align": [27, 52, 97, 98, 156, 185, 229, 277, 287], "howev": [27, 46, 47, 48, 50, 52, 97, 127, 202, 205, 229, 277, 287], "produc": [27, 52, 96, 97, 183, 227, 293], "final": [27, 52, 97], "dictat": [27, 52, 97], "argument": [27, 28, 52, 97, 98, 185, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 284, 288, 289], "specif": [28, 49, 59, 84, 98, 185, 286, 293], "npt": [28, 59, 84, 98, 110, 145, 157, 167, 175, 185, 208, 209, 211, 212, 245, 246, 247, 248, 251, 252, 258, 262], "string": [29, 30, 55, 56, 80, 81, 99, 100, 110, 111, 112, 157, 158, 159, 167, 168, 169, 175, 186, 187, 232, 250, 257, 295], "represent": [29, 30, 55, 56, 80, 81, 99, 100, 111, 112, 158, 159, 168, 169, 186, 187, 259, 295], "print": [30, 56, 81, 100, 187, 232, 287, 288, 289, 291], "167": [30, 100], "24": [30, 100, 187], "shape": [30, 56, 81, 97, 100, 109, 110, 116, 118, 121, 122, 126, 144, 156, 157, 166, 167, 174, 175, 187, 227, 230, 244, 260, 266, 267, 269, 289, 294, 295], "12": [30, 96, 144, 156, 166, 174, 180, 182, 196, 203, 213, 228, 263, 288, 292, 295], "befor": [33, 36, 103, 106, 191, 194, 296], "decomposit": [33, 36, 103, 106, 191, 194, 295], "after": [33, 36, 103, 106, 191, 194], "10": [33, 36, 37, 40, 42, 44, 94, 96, 97, 103, 106, 110, 144, 156, 157, 166, 167, 170, 172, 174, 175, 179, 181, 183, 191, 194, 196, 197, 198, 203, 207, 208, 209, 211, 212, 216, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 251, 252, 256, 258, 260, 262, 263, 266, 267, 268, 269, 270, 271, 272, 277, 287, 288, 289, 290, 291, 292, 293], "cdot": [37, 107, 136, 160, 208, 209, 211, 212, 235], "win": 37, "quad": [37, 146], "le": [37, 146, 196, 210, 235, 238, 266, 269], "truncat": 37, "multipli": [37, 96, 183], "section": [37, 39, 46, 47, 48, 49, 50, 136, 160, 178, 289, 291], "puls": [37, 94, 109, 110, 116, 118, 121, 122, 126, 144, 156, 157, 166, 167, 174, 175, 227, 230, 244, 260, 266, 267, 269, 294, 295], "same": [37, 52, 97, 136, 160, 260, 288], "deriv": 37, "across": [37, 196, 223, 231], "fir_2": 37, "fir_6": 37, "fir_10": 37, "fir_20": 37, "20": [37, 38, 40, 42, 96, 97, 144, 148, 156, 166, 174, 179, 183, 196, 199, 201, 204, 207, 216, 224, 225, 232, 233, 234, 240, 263, 268, 276, 290, 292, 295], "fir_40": 37, "fir_80": 37, "80": [37, 213, 279], "y_axi": [37, 248, 250], "linspac": [37, 40, 59, 84, 94, 170, 172, 179, 199, 202, 205, 226, 242, 256, 289, 290, 291, 292], "100": [37, 42, 59, 76, 84, 86, 91, 94, 107, 146, 148, 170, 172, 196, 198, 199, 202, 205, 207, 208, 209, 211, 212, 224, 234, 235, 242, 244, 245, 247, 253, 256, 258, 270, 273, 274, 276, 287, 291], "ab": [37, 94, 200, 229, 277, 279, 293], "color": [37, 94, 244, 253, 254, 260, 290, 293], "linestyl": [37, 94, 136, 144, 156, 160, 166, 174, 243, 254, 259, 261, 279, 287, 291, 292, 293], "theori": [37, 39, 40, 41, 43, 94, 178, 179, 180, 182], "legend": [37, 94, 136, 160, 196, 208, 209, 210, 211, 212, 233, 287, 290, 291, 293], "d": [37, 51, 57, 146, 223, 226, 231, 238, 283, 285, 294], "lfloor": [37, 51, 57, 146], "rfloor": [37, 51, 57, 146], "blackman": [38, 208, 209, 211, 212], "increas": [38, 226, 238, 289], "scipi": [38, 51, 76, 208, 209, 211, 212, 250, 257, 293, 294], "definit": [38, 245, 246, 247, 248, 251, 252, 258, 262], "get_window": 38, "detail": 38, "If": [38, 42, 73, 110, 149, 157, 167, 175, 181, 183, 197, 198, 199, 216, 220, 236, 239, 240, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 257, 258, 259, 260, 268, 273, 275, 294], "null": [39, 178, 293], "altern": [39, 178, 289], "hypothes": [39, 178], "follow": [39, 44, 109, 144, 156, 166, 174, 233, 243, 254, 257, 259, 261, 263, 291], "assum": [39, 178, 198, 216, 236, 260, 275], "valu": [39, 109, 110, 113, 123, 144, 145, 156, 157, 166, 167, 170, 172, 174, 175, 176, 177, 200, 207, 214, 215, 227, 229, 233, 234, 243, 246, 248, 251, 252, 259, 277, 284, 289, 295], "random": [39, 107, 144, 146, 156, 166, 174, 198, 201, 204, 216, 224, 225, 233, 243, 244, 253, 260, 270, 290, 291, 292], "process": [39, 40, 41, 43, 107, 146, 178, 179, 180, 182, 213, 263, 289, 291, 294], "w": [39, 178, 198, 287, 288, 289, 290, 291, 292, 293], "sigma": [39, 40, 41, 42, 43, 178, 179, 180, 181, 182, 198, 199], "_0": [39, 178], "_1": [39, 178], "test": [39, 178, 284, 285, 294], "statist": [39, 40, 41, 43, 178, 179, 180, 182], "limits_": [39, 51, 76, 178], "left": [39, 40, 41, 76, 156, 160, 166, 174, 178, 179, 180, 182, 196, 197, 198, 199, 220, 223, 224, 226, 227, 233, 235, 238, 239, 240, 268, 279], "right": [39, 40, 41, 76, 156, 160, 166, 174, 178, 179, 180, 182, 196, 197, 198, 199, 220, 223, 224, 226, 227, 233, 235, 238, 239, 240, 268, 279], "gamma": [39, 41, 43, 178, 180, 182, 196], "sim": [39, 178, 198, 284], "chi_": [39, 40, 41], "2n": [39, 40, 41], "text": [39, 174, 178, 196, 197, 198, 199, 202, 205, 206, 207, 213, 224, 225, 226, 234, 237, 239, 240, 268, 270], "under": [39, 178], "detect": [39, 40, 41, 42, 43, 136, 139, 141, 142, 160, 161, 163, 164, 178, 179, 180, 181, 182, 196, 249, 255, 295], "threshold": [39, 41, 43, 178, 180, 182], "q_": [39, 40, 41, 43], "chi_n": [39, 40, 41, 43], "steven": [39, 40, 41, 43, 178, 179, 180, 182], "kai": [39, 40, 41, 43, 178, 179, 180, 182], "fundament": [39, 40, 41, 43, 178, 179, 180, 182], "static": [39, 40, 41, 42, 43, 178, 179, 180, 181, 182, 284], "n_nc": [39, 40, 41, 42, 43, 196], "number": [40, 41, 42, 43, 44, 46, 47, 50, 59, 60, 61, 63, 66, 84, 86, 91, 109, 110, 114, 124, 141, 142, 144, 145, 155, 156, 157, 163, 164, 166, 167, 174, 175, 196, 198, 201, 204, 216, 218, 219, 221, 227, 230, 232, 236, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 257, 258, 263, 266, 267, 269, 271, 275], "For": [40, 41, 43, 179, 180, 182, 198, 217, 226, 276, 283, 288], "101": [40, 42, 179, 181, 208, 209, 211, 212], "25": [40, 201, 204, 210, 216, 241, 244, 264, 265, 287, 290, 291, 293], "1e": [40, 179, 225, 292], "sigma2": [41, 43, 180, 182], "logspac": [42, 59, 84, 181, 196], "theoret": [42, 170, 172, 242, 256, 292, 295], "variou": [42, 284, 293], "1_000": [42, 107, 146, 198, 225, 226, 233, 270, 290], "000": [42, 225], "5_000": 42, "measur": [44, 46, 197, 198, 206, 207, 220, 223, 224, 231, 234, 237, 239, 240, 268, 291, 294, 295], "new": [44, 45, 69, 71, 107, 109, 110, 144, 145, 156, 157, 166, 167, 174, 175, 270], "accumul": [44, 94, 148, 149, 150, 152, 154, 291], "from": [44, 60, 63, 76, 77, 94, 98, 107, 109, 125, 144, 156, 166, 173, 174, 185, 207, 218, 219, 221, 222, 234, 241, 250, 257, 264, 265, 271, 272, 283, 288, 289, 291, 294], "contain": [44, 198, 232], "add": [44, 46, 49, 144, 156, 166, 174, 198, 225, 230, 254, 267, 270, 281, 292, 296], "total": [44, 227, 230, 266, 267, 269, 293], "count": [44, 47, 224], "error_r": [44, 48, 49, 292], "everi": [44, 287], "can": [44, 46, 47, 48, 50, 127, 144, 198, 224, 227, 229, 236, 244, 250, 257, 277, 285, 288, 289, 292, 294, 296], "obtain": 44, "tabul": [44, 45], "all": [44, 49, 149, 224, 244, 253, 254, 284, 286, 294], "ascend": [44, 49], "other": [46, 47, 48, 50, 287, 296], "quantiti": [46, 47, 48, 49, 50], "user": [46, 47, 48, 50, 288, 289], "caution": [46, 47, 48, 50], "instanc": [46, 47, 48, 50, 144], "transmit": [46, 109, 126, 136, 139, 144, 156, 160, 161, 166, 174, 224, 244], "e": [49, 136, 148, 160, 178, 179, 180, 181, 182, 197, 201, 202, 220, 279, 284, 285, 288, 289, 292], "whatev": 49, "wa": [49, 199], "provid": [49, 109, 113, 123, 144, 156, 166, 170, 172, 174, 254, 284, 294], "wrapper": [51, 76], "convolv": 51, "It": [51, 76, 96, 110, 127, 136, 157, 167, 175, 198, 244], "support": [51, 76, 295], "one": [51, 76, 145, 156, 157, 167, 173, 175, 227, 232, 244, 245, 246, 248, 250, 251, 252, 257, 273, 288, 289, 290, 293], "its": [51, 76, 77, 94, 107, 198, 288, 289, 293], "sum_": [51, 76, 180, 182, 197, 198, 199, 220, 223, 224, 231, 268], "valid": [52, 226, 244, 253, 254, 279], "0013559842808217807": [55, 56], "005995136544658217": [55, 56], "008698817681933214": [55, 56], "0024103767414047302": [55, 56], "010205586837665018": [55, 56], "018983779931504997": [55, 56], "011950905288150394": [55, 56], "01518393864077397": [55, 56], "051622191325047306": [55, 56], "07210389837804473": [55, 56], "04745944982876247": [55, 56], "039173517569276436": [55, 56], "17918683372907862": [55, 56], "3367363220550604": [55, 56], "4611457574513795": [55, 56], "5084040873607553": [55, 56], "30": [56, 96, 107, 146, 183, 217, 245, 247, 258, 273, 274, 289, 295], "31": [56, 288], "15": [56, 136, 144, 181, 203, 228, 229, 263, 276, 277], "remain": [58, 217, 236], "1024": [59, 60, 63, 84, 245, 246, 248, 251, 252, 290, 293], "whole": [59, 84, 293], "decad": [59, 84, 245, 246, 248, 251, 252, 288, 291], "point": [59, 84, 141, 142, 163, 164, 250, 257], "endpoint": [59, 84, 289], "includ": [59, 84, 284, 285, 286, 294], "integ": [59, 84, 236], "maximum": [59, 84, 109, 115, 116, 136, 144, 156, 166, 174, 227, 230, 243, 259, 266, 267, 269, 282, 291], "max_f": [59, 84], "log10": [59, 84], "evenli": [59, 84], "00000000e": [59, 84, 173, 174, 289], "00": [59, 84, 173, 174, 289], "76562500e": [59, 84], "04": [59, 84, 232, 289], "95312500e": [59, 84], "03": [59, 84, 232, 289], "97070312e": [59, 84], "01": [59, 84, 173, 174, 232, 289, 291], "98046875e": [59, 84], "99023438e": [59, 84], "95337172": 59, "30202676j": 59, "8178049": 59, "5759632j": 59, "6058636": 59, "79630028j": 59, "rad": [59, 84], "0000000000000002": 59, "0j": [59, 84, 145, 157, 167, 175], "sever": [59, 84], "200": [59, 84, 217, 287, 292], "300": [59, 84, 273, 274], "400": [59, 84, 217, 287], "1000": [59, 84, 141, 142, 144, 156, 163, 164, 166, 174, 224, 226, 273, 274, 292], "00391660e": 59, "14686183e": 59, "17j": 59, "53081763e": 59, "88127210e": 59, "62720131e": 59, "03715849e": 59, "83622458e": 59, "27280811e": 59, "resampl": [69, 70, 71, 72, 73, 74, 75, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 213, 263, 294, 295], "http": [69, 196, 206, 208, 209, 210, 211, 212, 213, 227, 229, 237, 277, 279, 283, 284, 285], "wirelesspi": 69, "com": [69, 196, 208, 209, 210, 211, 212, 213, 227, 229, 277, 284, 285], "structur": 69, "should": [73, 136, 144, 244, 285], "equal": [73, 144], "three": [73, 287, 293], "lfilter": 76, "b_i": [76, 79, 83, 94, 107, 245, 246, 247, 248, 251, 252, 258, 262, 289], "feedback": [76, 79, 82, 94, 107, 245, 246, 247, 248, 251, 252, 258, 262, 289], "a_j": [76, 79, 82, 94, 107, 245, 246, 247, 248, 251, 252, 258, 262, 289], "These": [76, 156, 166, 174, 261, 285, 291], "differ": [76, 107, 145, 157, 167, 173, 175, 208, 209, 210, 211, 212, 229, 260, 277, 279, 293], "a_0": 76, "classmethod": [76, 77, 94, 107], "zerospol": [76, 77, 80, 81, 84, 94, 107, 245, 246, 247, 248, 251, 252, 258, 262, 289], "self": [76, 77, 94, 107], "b_tap": [76, 81, 83, 94, 107, 289], "a_tap": [76, 81, 82, 94, 107, 289], "exp": [80, 81, 84, 149, 156, 166, 174, 217, 227, 233, 235, 245, 246, 247, 248, 251, 252, 258, 262, 274, 276, 279, 287, 289, 291], "1j": [80, 81, 84, 217, 235, 245, 246, 247, 248, 251, 252, 258, 262, 274, 276, 287, 289, 291], "conj": [80, 81, 84, 245, 246, 247, 248, 251, 252, 258, 262, 289, 291], "478207252018059": [80, 81, 289], "6400000000000001": [80, 81, 289], "7391036260090295": [81, 289], "3061467458920719j": [81, 289], "4722987": 84, "47271105": 84, "0041658j": 84, "47394825": 84, "00830241j": 84, "47601067": 84, "01238051j": 84, "472298696877605": 84, "36961426": 84, "9678537j": 84, "57338213": 84, "77694738j": 84, "52496713": 84, "3885743j": 84, "51520024": 84, "1706839j": 84, "accordingli": 94, "dc": [94, 210], "backward": [94, 95, 296], "trapezoid": [94, 95], "forward": [94, 95, 148, 155], "iir_back": 94, "iir_trap": 94, "iir_forw": 94, "y_back": 94, "y_trap": 94, "y_forw": 94, "height": 95, "insert": [96, 183], "hold": [96, 98, 183, 185, 236, 295], "recommend": 96, "wai": [96, 285], "11": [96, 144, 156, 166, 174, 203, 213, 228, 229, 263, 277, 283], "zoh": [96, 98, 102, 183, 185, 190], "13": [96, 144, 156, 166, 174, 178, 179, 180, 182, 200, 203, 228, 260, 263, 295], "matlab": [96, 98, 102, 183, 185, 190, 294], "iter": 97, "concaten": [97, 289], "linearli": [98, 185], "2r": 98, "ramp": [98, 127, 185], "advanc": [98, 185], "ones": [98, 185, 208, 209, 211, 212, 291], "84": 100, "approxim": [107, 108, 196, 295], "rememb": 107, "scale": [107, 136, 245, 246, 248, 250, 251, 252, 257, 288, 289], "compar": [107, 136, 146, 160, 170, 172, 208, 209, 210, 211, 212, 293], "randn": [107, 146, 260], "y_fir": [107, 146], "y_iir": [107, 146], "modul": [109, 110, 118, 119, 121, 136, 141, 142, 144, 148, 156, 157, 160, 163, 164, 166, 167, 170, 172, 174, 175, 218, 219, 221, 224, 242, 244, 253, 256, 259, 260, 271, 283, 286, 292, 294, 295], "nomenclatur": [109, 144, 156, 166, 174], "variabl": [109, 144, 148, 149, 156, 166, 174, 232, 291], "name": [109, 144, 156, 166, 174], "decis": [109, 115, 116, 136, 139, 142, 144, 156, 160, 161, 164, 166, 174, 244, 291], "tild": [109, 115, 116, 136, 139, 144, 156, 160, 161, 166, 174], "map_symbol": [109, 117, 144, 156, 166, 174, 198, 224, 225, 233, 243, 244, 270, 290, 291, 292, 295], "decide_symbol": [109, 115, 144, 156, 166, 174, 291, 292, 295], "a_tild": [109, 115, 144, 156, 166, 174, 291, 292], "likelihood": [109, 115, 116, 136, 144, 156, 166, 174, 282, 291], "mle": [109, 115, 144, 156, 166, 174], "match": [109, 110, 116, 122, 144, 156, 157, 166, 167, 174, 175, 295], "abstract": [109, 113, 123], "log_2": [109, 114, 144, 156, 166, 174, 199, 218, 219, 221, 271], "phase_offset": [109, 110, 120, 144, 145, 156, 157, 166, 167, 171, 174, 175, 198, 224, 225, 233, 243, 244, 259, 260, 270, 290, 291, 292], "degre": [109, 110, 120, 144, 145, 156, 157, 166, 167, 171, 174, 175, 225, 233, 235, 238, 291], "dot": [109, 110, 125, 144, 156, 166, 173, 174, 259], "mapsto": [109, 110, 125, 144, 156, 166, 173, 174, 259], "mathbb": [109, 110, 125, 144, 156, 166, 173, 174, 199, 259, 279], "sym": [109, 110, 124, 144, 145, 156, 157, 166, 167, 174, 175, 219, 222, 227, 271, 272, 293], "pulse_shap": [109, 110, 116, 118, 121, 144, 156, 157, 166, 167, 174, 175, 260, 290, 292], "tx_filter": [109, 126, 144, 156, 166, 174], "rx_filter": [109, 122, 144, 156, 166, 174], "rect": [110, 157, 167, 175, 293], "whose": [110, 145, 157, 166, 167, 175], "import": [110, 136, 157, 167, 175, 285, 287, 288, 289, 290, 291, 292, 293, 294], "roll": [110, 157, 167, 175, 279, 293], "off": [110, 157, 167, 175], "psd": [113, 123, 170, 172, 199, 218, 219, 221, 222, 242, 256, 271, 272], "p_b": 113, "x_tild": 116, "s_hat": [116, 291, 292], "size": [116, 118, 200, 216, 229, 260, 277, 287, 291, 292, 293], "p_e": 123, "loopfilt": [127, 128, 129, 130, 131, 132, 133, 134, 135, 282, 291, 295], "ppi": [127, 129, 282], "track": 127, "constant": [127, 144, 148, 150, 152, 250, 257, 289, 291], "cannot": 127, "chirp": 127, "proportional_gain": [127, 134], "integral_gain": [127, 132], "underli": [127, 131], "mlped": [136, 137, 138, 139, 140, 141, 142, 143, 282, 291], "ml": [136, 140, 282, 291], "aid": [136, 141, 160, 163], "known": [136, 139, 160, 161, 198, 229, 277], "da": [136, 160], "im": 136, "re": [136, 178], "direct": [136, 142, 160, 164, 295], "qpsk": [136, 156, 160, 166, 170, 171, 172, 174, 198, 224, 225, 242, 243, 244, 256, 259, 260, 270, 291, 294, 295], "a_rx": 136, "a_ref": 136, "da_error": [136, 160], "data_aided_error": [136, 141, 160, 163], "dd_error": [136, 160], "decision_directed_error": [136, 142, 160, 164], "grid": [136, 160, 196, 199, 202, 205, 226, 261, 287, 290, 291, 293], "xlabel": [136, 160, 196, 199, 200, 202, 205, 224, 226, 229, 277, 279, 287, 290, 291, 293], "ylabel": [136, 160, 196, 199, 200, 202, 205, 224, 226, 229, 277, 279, 287, 290, 291, 293], "comparison": [136, 160, 284], "observ": [136, 160, 210, 238, 244], "slope": [136, 160], "a_": [136, 137, 138, 140, 213], "rx": [136, 137, 140], "both": [136, 160, 196, 199, 243, 259, 260, 287, 291], "veri": [136, 294], "becaus": [136, 229, 277], "automat": 136, "agc": 136, "also": [136, 144, 160, 210, 226, 227, 294], "unambigu": [136, 160], "rang": [136, 160, 243, 291, 292], "a_receiv": [136, 137, 140], "a_refer": [136, 138, 140], "initi": [136, 140, 160, 162, 291], "simul": [136, 141, 142, 160, 163, 164, 292, 294], "scheme": [136, 141, 142, 144, 156, 160, 163, 164, 166, 174, 295], "settabl": [136, 137, 138, 148, 151, 152, 153], "either": [139, 161, 224], "modem": [141, 142, 144, 156, 163, 164, 166, 174], "n_point": [141, 142, 163, 164], "similar": [144, 156, 174, 293], "One": [144, 156, 174, 293], "distinct": [144, 156, 174], "result": [144, 156, 174, 197, 220, 226, 238, 239, 240, 266, 268, 269, 292], "envelop": [144, 288, 289], "which": [144, 156, 174, 196, 197, 198, 199, 220, 223, 225, 231, 233, 237, 238, 239, 243, 246, 248, 251, 252, 259, 270, 287, 291, 293], "lower": [144, 156, 174, 266, 269], "consid": [144, 232], "cpfsk": 144, "separ": 144, "45": [144, 145, 156, 157, 166, 171, 198, 224, 225, 233, 235, 243, 244, 259, 260, 270, 290, 291, 292], "symbol_label": [144, 145, 156, 157, 166, 167, 173, 174, 175, 292], "randint": [144, 156, 166, 174, 198, 201, 204, 216, 224, 225, 233, 243, 244, 253, 260, 270, 290, 291, 292], "uint8": [144, 156, 166, 174, 236, 275], "complex_symbol": [144, 156, 166, 174], "70710678": [144, 156, 166], "70710678j": [144, 156, 166], "tx_sampl": [144, 156, 166, 174], "50": [144, 156, 166, 174, 207, 234, 241, 259, 260, 273, 274, 287, 290], "like": [144, 285, 294, 295], "channel": [144, 156, 170, 172, 199, 201, 202, 204, 205, 216, 242, 256, 294, 295], "subplot": [144, 156, 233, 291, 292], "imag": [144, 156, 287], "trajectori": 144, "although": 144, "boundari": 144, "lead": [144, 233, 292], "spectral": [144, 217, 250, 290, 293], "effici": [144, 217, 238, 276], "gmsk": 144, "rx_sampl": [144, 156, 166, 174], "last": [144, 156, 236, 283], "rx_symbol": [144, 156, 166, 174], "rx_complex_symbol": [144, 156, 166, 174], "_": [144, 156, 166, 174, 196, 224], "14": [144, 156, 166, 174, 179, 203, 228, 263], "array_equ": [144, 156, 166, 174, 229, 277], "bin": [145, 157, 167, 173, 175, 224, 243, 259, 292], "absolut": [145, 148, 150, 153, 157, 175, 199], "consecut": [145, 157, 167, 175], "adjac": [145, 157, 167, 173, 175, 292, 293], "mai": [145, 157, 167, 173, 175, 224, 243, 254, 257, 259, 261, 289], "more": [145, 157, 167, 173, 175, 295], "start": [145, 157, 167, 175, 283], "go": [145, 157, 167, 175], "counter": [145, 157, 167, 175], "clockwis": [145, 157, 167, 175], "around": [145, 157, 167, 175], "circl": [145, 157, 167, 175, 289], "increment": [148, 149, 150, 152, 291], "Then": 148, "fsk": 148, "60": [148, 208, 209, 211, 212, 293], "repeat": 148, "cp": 148, "57": 148, "bpsk": [148, 170, 172, 242, 256, 290], "vari": 149, "format": [149, 200, 229, 277], "option": [149, 245, 246, 248, 250, 251, 252, 257, 295], "intern": 154, "set": [154, 198, 226, 229, 243, 250, 254, 257, 259, 261, 277, 284, 286, 289], "convent": [156, 174], "transit": [156, 174, 204, 205, 216, 277, 281], "independ": 156, "apart": 156, "origin": [156, 174, 276, 287], "taken": [156, 166, 174], "jq": 156, "begin": [156, 174, 178], "end": [156, 174, 178, 273, 284], "heurist": [160, 282, 291], "dd": [160, 291, 295], "encod": [166, 170, 172, 214, 215, 294], "inform": [166, 218, 219, 221, 229, 271, 277], "ge": [167, 175, 196], "were": [170, 172], "simon": [170, 172], "alouini": [170, 172], "over": [170, 172, 232], "fade": [170, 172], "chapter": [170, 172, 213, 263], "john": [170, 172], "proaki": [170, 172], "optimum": [170, 172], "psk8": [170, 172, 242, 256, 292], "psk16": [170, 172, 242, 256, 292], "de": [170, 172, 291, 295], "se": [172, 256], "00j": [173, 174], "07106781e": [173, 174], "01j": [173, 174], "12323400e": [173, 174], "17": [173, 174, 238, 263, 283], "83697020e": 173, "22464680e": [173, 174], "16j": [173, 174], "annot": [173, 259, 295], "odd": [174, 210, 273], "rotat": [174, 235, 291], "rel": [174, 279, 293], "even": [174, 208, 209, 210, 211, 212, 227, 266, 269], "2m": 174, "displaystyl": 174, "pi4_qpsk": 174, "exceed": [176, 177], "15865525393145707": [176, 177], "158655": [176, 177], "0000010494310452": [176, 177], "perfect": 178, "knowledg": 178, "cn": [178, 198], "mathrm": 178, "sqrt": [178, 179, 180, 182, 196, 223, 224, 227, 268, 279, 290, 291, 293], "____": 183, "down": [183, 185, 189, 213, 263], "2p": 185, "95": [187, 224], "desir": [196, 198, 292], "ln": [196, 227], "62": [196, 232], "log_": [196, 197, 207, 220, 226, 237, 239, 240, 268], "54": [196, 232], "44": 196, "12ab": 196, "7b": 196, "claim": 196, "leq": 196, "8096": 196, "radarsp": 196, "weebli": 196, "upload": 196, "21471216": 196, "albersheim_alternative_form": 196, "pdf": [196, 227], "bpb": 196, "w2": 196, "wpmucdn": 196, "site": [196, 283], "gatech": 196, "edu": 196, "dist": [196, 284], "462": 196, "file": [196, 284, 286], "2016": 196, "noncoher": 196, "www": [196, 208, 209, 210, 211, 212, 213, 227, 229, 277], "mathwork": [196, 208, 209, 210, 211, 212, 213, 227, 229, 277], "help": [196, 208, 209, 210, 211, 212, 213, 227, 229, 277], "html": [196, 208, 209, 210, 211, 212, 213, 227, 229, 277, 283], "semilogx": [196, 255], "nuse": 196, "axi": [197, 220, 223, 231, 237, 239, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 257, 259, 260, 287, 295], "avg": [197, 198, 237], "ax": [197, 220, 223, 231, 237, 239, 261], "along": [197, 220, 223, 231, 237, 239, 295], "entir": [197, 220, 223, 231, 237, 239], "decibel": [197, 207, 220, 234, 239, 240, 268, 294, 295], "seed": [198, 201, 204, 216, 295], "ad": [198, 254, 284, 294, 295], "explicitli": 198, "must": [198, 208, 209, 211, 212, 227, 229, 235, 254, 266, 269, 277, 279], "default_rng": [198, 201, 204, 216], "noisi": 198, "sin": [198, 273], "zorder": [198, 225, 270], "infti": [198, 199], "nand": 198, "capac": [199, 202, 205, 294, 295], "2d": [199, 254], "x_i": [199, 201, 202, 204, 205, 216, 233], "y_i": [199, 201, 202, 204, 205, 216], "monoton": 199, "decreas": 199, "limit": [199, 243, 259, 292], "At": 199, "occur": 199, "view": [199, 284, 294], "59": 199, "shannon": 199, "semilogi": [199, 242, 255, 256], "barker": [200, 280, 294, 295], "int64": [200, 229, 277, 280], "bipolar": [200, 229, 277, 295], "sequenc": [200, 201, 204, 216, 229, 277, 279, 281, 294, 295], "seq": [200, 229, 277], "have": [200, 210, 217, 229, 236, 260, 275, 276, 277], "ideal": [200, 292], "minim": 200, "autocorrel": [200, 229, 277, 279], "sidelob": [200, 208, 209, 211, 212, 229, 266, 269, 277, 279], "corr": [200, 279], "lag": [200, 229, 277, 279], "roughli": [201, 204, 287], "eras": 201, "flip": 204, "h_b": 205, "cf": 206, "v_": [206, 207, 234, 240, 268], "en": [206, 237, 279], "wikipedia": [206, 237, 279], "org": [206, 237, 279], "wiki": [206, 237, 279], "type": [207, 224, 234, 236, 250, 255, 257, 275, 295], "voltag": [207, 234, 240, 268, 294], "x_": [207, 234], "mhz": [207, 234], "77": [207, 232, 234], "50e6": 207, "76": [207, 232], "98970004336019": 207, "mw": [207, 234], "dbm": [207, 234], "dbv": [207, 234], "020599913279624": 207, "center_freq": [208, 209], "hann": [208, 209, 211, 212, 250, 257], "harri": [208, 209, 211, 212, 213, 263], "chebyshev": [208, 209, 211, 212], "atten": [208, 209, 211, 212], "nyquist": [208, 209, 211, 212, 217, 244, 276, 293], "side": [208, 209, 227, 245, 246, 248, 250, 251, 252, 257, 288, 289, 290, 293], "about": [208, 209, 260, 286], "No": [208, 209, 211, 212], "blackmanharri": [208, 209, 211, 212], "chebwin": [208, 209, 211, 212], "attenu": [208, 209, 211, 212, 213, 266, 269], "dsp": [208, 209, 210, 211, 212, 213, 294], "designbandpassfir": 208, "h_ham": [208, 209, 211, 212], "h_hann": [208, 209, 211, 212], "h_blackman": [208, 209, 211, 212], "h_blackman_harri": [208, 209, 211, 212], "h_chebyshev": [208, 209, 211, 212], "h_kaiser": [208, 209, 211, 212], "ylim": [208, 209, 210, 211, 212, 279, 288, 291, 292, 293], "larger": [209, 230, 233, 243, 259, 267], "designbandstopfir": 209, "75": [209, 232, 243, 291, 292], "best": 210, "append": [210, 273, 290], "tau": 210, "l_": 210, "designfracdelayfir": 210, "flat": 210, "h_8": [210, 266, 269], "h_16": [210, 266, 269], "h_32": 210, "32": [210, 287], "h_64": 210, "cutoff_freq": [211, 212], "cutoff": [211, 212], "f_c": [211, 212], "designhighpassfir": 211, "designlowpassfir": 212, "half_length": 213, "a_stop": 213, "stopband": [213, 266, 269], "stop": 213, "fred": [213, 263], "system": [213, 222, 229, 263, 272, 277, 284, 286, 291, 294], "designmultiratefir": 213, "oplu": [214, 215, 231], "uncod": 215, "dmc": [216, 281, 294, 295], "memoryless": [216, 281, 294], "pr": 216, "y_j": 216, "alphabet": 216, "ldot": 216, "doe": [217, 276], "anti": [217, 276, 295], "alias": [217, 276, 295], "x1": 217, "x2": 217, "130": 217, "x3": [217, 279], "spectrum": [217, 245, 246, 248, 250, 251, 252, 257, 273, 274, 276], "content": 217, "abov": [217, 276], "fold": 217, "cw": 217, "unalias": 217, "fft": [217, 250, 257, 273, 274, 276], "2048": [217, 273, 274, 276, 290], "xlim": [217, 276, 290, 291, 293], "qam": [218, 219, 221, 271], "249387366082999": [218, 219], "020599913279625": [218, 272], "7506126339170005": [221, 271], "979400086720376": [221, 222], "norm": [224, 227, 230, 266, 267, 269], "noiseless": 224, "sourc": 224, "max": [224, 239, 240], "instantan": 224, "percentil": [224, 257], "885249687042828": 224, "91249666883595": 224, "015345814831441": 224, "95th": 224, "60204417561232": 224, "inst_evm": 224, "hist": 224, "histogram": 224, "frequency_offset": [225, 281, 295], "freq_rat": 225, "cycl": [225, 260], "5e": 225, "deg": [225, 233, 291], "path": [226, 294], "loss": [226, 294], "meter": [226, 238, 278], "transmitt": 226, "far": 226, "field": 226, "neg": [226, 233], "impli": 226, "possibl": [226, 294], "so": [226, 227, 230, 266, 267, 269, 294], "km": 226, "link": [226, 294, 295], "ghz": [226, 238, 278], "1e3": [226, 235, 273], "1e9": [226, 238, 278], "92": 226, "44778322188337": 226, "doubl": [226, 238], "2e3": 226, "98": 226, "468383135163": 226, "2e9": 226, "product": [227, 293], "thought": [227, 296], "smaller": [227, 266, 269, 293], "wider": 227, "how": [227, 230, 244, 253, 254, 260, 266, 267, 269, 277, 286], "gaussdesign": 227, "onlinelibrari": 227, "wilei": 227, "doi": 227, "1002": 227, "9780470041956": 227, "app2": 227, "h_0p1": [227, 266, 269], "h_0p2": 227, "h_0p3": 227, "hadamard": [229, 277, 280], "comm": [229, 277], "hadamardcod": 229, "walsh": [229, 277, 280], "thei": [229, 277, 296], "cross": [229, 277, 279], "seq1": [229, 277], "seq2": [229, 277], "seq3": [229, 277], "quit": [229, 277], "larg": [229, 277, 284], "misalign": [229, 277], "spread": [229, 277], "precis": [229, 277], "xcorr12": [229, 277], "xcorr13": [229, 277], "xcorr23": [229, 277], "uniform": [229, 277], "fact": [229, 277], "high": [229, 277], "acorr1": [229, 277], "acorr2": [229, 277], "acorr3": [229, 277], "reason": [230, 267, 283], "h_half_sin": 230, "displai": [232, 243, 245, 246, 248, 250, 251, 252, 257, 259], "line": [232, 260, 284, 290], "quick": 232, "brown": 232, "fox": 232, "jump": 232, "lazi": 232, "dog": 232, "00000000": 232, "68": 232, "65": 232, "71": 232, "69": 232, "63": 232, "6b": 232, "72": 232, "6f": 232, "6e": 232, "00000010": 232, "66": 232, "78": 232, "6a": 232, "6d": 232, "73": 232, "74": 232, "00000020": 232, "6c": 232, "61": 232, "7a": 232, "79": 232, "67": 232, "he": 232, "02": [232, 289, 291], "00000004": 232, "05": [232, 287, 289, 291], "06": 232, "07": 232, "08": 232, "00000008": 232, "09": 232, "0a": 232, "iq_imbal": [233, 281, 295], "iq": [233, 281, 294], "imbal": [233, 281, 294], "posit": 233, "compon": [233, 273, 274, 276], "g_i": 233, "180": 233, "g_q": 233, "x_q": 233, "horizont": 233, "stretch": 233, "while": [233, 293], "vertic": 233, "northwest": 233, "northeast": 233, "50118723": 234, "36272725": 234, "9952623149688795": 234, "satisfi": 235, "remov": [235, 250, 257, 295], "dtypelik": [236, 275], "most": [236, 275], "signific": [236, 275], "enough": 236, "fill": 236, "smallest": 236, "unsign": 236, "diamet": 238, "55": [238, 260], "eta": 238, "dbi": 238, "arcsin": 238, "83": 238, "dish": 238, "21": [238, 260], "810210290266568": 238, "437435887991374": 238, "23": 238, "sinc": [238, 244, 283, 292], "antenna": [238, 294], "we": [238, 294], "830810203546193": 238, "529544741425365": 238, "keyword": [242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 288, 289], "pyplot": [242, 243, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 262, 287, 288, 289, 290, 291, 292, 293], "heatmap": [243, 292], "scatter": 243, "overwritten": [243, 254, 257, 259], "hist2d": 243, "10_000": 243, "imaginari": [244, 254, 260], "interleav": [244, 254], "base": [244, 253, 254, 260, 295], "examin": 244, "intersymbol": 244, "interfer": 244, "isi": 244, "cascad": 244, "why": 244, "often": [244, 287], "practic": 244, "n_time": [245, 289], "n_freq": 245, "x_axi": [245, 246, 248, 250, 251, 252, 257, 288, 289, 290, 291], "log": [245, 246, 248, 250, 251, 252, 288, 289, 291], "n_t": 245, "n_f": 245, "logarithm": [245, 246, 248, 250, 251, 252, 288, 289], "h_srrc": [245, 246, 247, 248, 251, 252, 258, 262, 292], "auto": [246, 248, 251, 252], "select": [246, 248, 251, 252, 284], "x_label": 249, "overlap": [250, 257, 290], "detrend": [250, 257], "median": 250, "segment": [250, 257], "256": [250, 257, 290], "trend": [250, 257], "unwrap": [252, 291], "stride": 254, "colorbar": 254, "1d": 254, "determin": 254, "row": 254, "collect": 254, "linecollect": 254, "linewidth": [254, 279], "solid": [254, 260], "cmap": 254, "rainbow": 254, "loglog": 255, "pcolormesh": 257, "vmin": 257, "10th": 257, "vmax": 257, "100th": 257, "shade": 257, "gouraud": 257, "markers": 259, "diff": [260, 290], "mutual": 260, "exclus": 260, "current": [260, 285], "dash": 260, "share": 260, "10e3": 260, "uniformli": 260, "revert": 261, "rcdefault": 261, "_rc_param": 261, "rc_param": 261, "autolayout": 261, "max_open_warn": 261, "titleweight": 261, "bold": 261, "arrang": 263, "column": 263, "notion": 263, "demonstr": 263, "matric": 263, "18": [263, 283, 292], "19": [263, 295], "000005": 264, "5000": [264, 265], "000000025": 264, "005": [265, 291], "000025": 265, "excess": [266, 269, 293], "narrow": [266, 269], "expens": [266, 269], "higher": [266, 269, 293], "h_0p5": [266, 269], "h_0p9": [266, 269], "affect": [266, 269], "longer": [266, 269, 273], "h_4": [266, 269], "h_rect": [267, 293], "sample_rate_offset": [270, 281, 295], "250": [273, 274, 291], "ksp": [273, 274], "notic": [273, 274, 287, 293], "conjug": [273, 274, 289], "500": [273, 274, 291], "now": [273, 274, 287, 295], "150": [273, 274], "asymmetr": 274, "copi": 276, "mani": [277, 284], "walshcod": 277, "299792458": 278, "zadoff_chu": [279, 280, 295], "zadoff": [279, 280, 294, 295], "chu": [279, 280, 294, 295], "prime": 279, "gcd": 279, "ne": 279, "cyclic": 279, "x_u": 279, "c_": 279, "2q": 279, "mod": 279, "e2": 279, "93chu_sequ": 279, "x_3": 279, "139": 279, "tile": 279, "x_5": 279, "x5": 279, "xcorr": 279, "sphinx": 283, "immateri": 283, "theme": 283, "depend": [283, 284, 286], "store": [283, 285, 286], "txt": [283, 284, 285, 286], "some": 283, "below": [283, 288, 289], "version": [283, 285, 294], "aren": 283, "resolut": 283, "minut": 283, "ci": 283, "myst": 283, "parser": 283, "updat": 283, "git": [283, 285], "math": 283, "dollar": 283, "ipykernel": 283, "26": 283, "nb": 283, "pickleshar": 283, "switch": 283, "pip": [283, 284, 285, 286, 294], "python3": [283, 284, 285, 286, 294], "built": 283, "run": 283, "command": [283, 284], "dirhtml": 283, "locat": [283, 286], "home": 283, "page": 283, "directori": [283, 285], "get": 283, "necessari": 283, "webpag": 283, "webserv": 283, "easili": [283, 284, 286, 288, 289], "python": [283, 294], "server": 283, "8080": 283, "access": 283, "web": 283, "browser": 283, "localhost": 283, "librari": [284, 285, 286, 287, 292, 294, 296], "ruff": [284, 285, 295], "lint": [284, 285], "your": [284, 286], "develop": [284, 285, 286], "dev": [284, 286], "pyproject": [284, 286], "toml": [284, 285, 286], "tool": [284, 286, 294], "src": 284, "extend": 284, "ipynb": 284, "exclud": 284, "build": [284, 294], "_version": 284, "py": [284, 286], "120": 284, "doc": 284, "pycodestyl": 284, "pyflak": 284, "pyupgrad": 284, "flake8": 284, "bugbear": 284, "simplifi": 284, "isort": 284, "pylint": [284, 295], "npy": 284, "rule": 284, "ruf": 284, "ignor": 284, "e501": 284, "too": 284, "long": 284, "e713": 284, "e714": 284, "plr2004": 284, "magic": 284, "plr0913": 284, "plr5501": 284, "collaps": 284, "els": [284, 290], "plr0912": 284, "branch": [284, 285], "plr0915": 284, "statement": 284, "__init__": 284, "f401": 284, "f403": 284, "manual": [284, 286], "check": 284, "hook": 284, "config": [284, 287, 288, 289, 290, 291, 292, 293], "yaml": 284, "repo": [284, 285], "github": [284, 294], "rev": 284, "v2": 284, "id": 284, "fixer": 284, "trail": 284, "whitespac": 284, "astral": 284, "sh": 284, "v0": 284, "enabl": 284, "disabl": 284, "uninstal": 284, "extens": 284, "vscode": [284, 286], "json": [284, 286], "you": [284, 285, 286, 294], "edit": [284, 289], "latest": [285, 294], "releas": [285, 295], "main": [285, 293], "mhostett": [285, 295], "Or": [285, 286], "pre": 285, "To": 285, "activ": 285, "benefici": 285, "fashion": 285, "allow": [285, 286], "chang": [285, 296], "immedi": 285, "seen": 285, "upon": 285, "next": 285, "clone": 285, "wherev": 285, "flag": 285, "packag": [285, 294], "commit": 285, "pytest": [285, 286], "cov": 285, "xdist": 285, "benchmark": 285, "ini_opt": 286, "minvers": 286, "addopt": 286, "showloc": 286, "testpath": 286, "execut": 286, "test_psk": 286, "instruct": 286, "invok": 286, "infrastructur": 286, "debug": 286, "inlinebackend": [287, 288, 289, 290, 291, 292, 293], "print_figure_kwarg": [287, 288, 289, 290, 291, 292, 293], "facecolor": [287, 288, 289, 290, 291, 292, 293], "inlin": [287, 288, 289, 290, 291, 292, 293], "widget": [287, 288, 289, 290, 291, 292, 293], "tx": 287, "decai": [287, 289], "fillstyl": 287, "show": [287, 288, 289, 290, 291, 292, 293], "accomplish": [287, 292], "def": [287, 290, 292], "resample_sign": 287, "new_sample_r": 287, "ty": 287, "gca": [287, 292], "set_prop_cycl": [287, 292], "four": 287, "appear": 287, "fourth": 287, "do": 287, "315": 287, "00095883": 288, "00175012": 288, "00423921": 288, "0058825": 288, "006151": 288, "00474595": 288, "0017044": 288, "00254816": 288, "00721645": 288, "0112324": 288, "01342358": 288, "01273202": 288, "00845058": 288, "0004368": 288, "01073669": 288, "02372977": 288, "03650247": 288, "04650654": 288, "05098525": 288, "04734644": 288, "03355896": 288, "00851486": 288, "02769991": 288, "07367348": 288, "12670446": 288, "18301321": 288, "23810898": 288, "28727058": 288, "32607991": 288, "35093841": 288, "35949665": 288, "conveni": [288, 289], "evalu": [288, 289], "29": 288, "here": [288, 289], "47820725": 289, "78207252e": 289, "58172329e": 289, "10862468e": 289, "86109590e": 289, "21565653e": 289, "01140214e": 289, "57286400e": 289, "67772160e": 289, "47338728e": 289, "10422993e": 289, "89312837e": 289, "12240078e": 289, "03953322e": 289, "69685122e": 289, "63882791e": 289, "81474977e": 289, "47193366e": 289, "85259041e": 289, "15647504e": 289, "23851924e": 289, "42176895e": 289, "84684395e": 289, "42721858e": 289, "72236648e": 289, "14721649e": 289, "10813095e": 289, "94024315e": 289, "78877688e": 289, "74077567e": 289, "87820725": 289, "53637958": 289, "94724205": 289, "13335164": 289, "1455082": 289, "04436799": 289, "88708159": 289, "71930943": 289, "5719707": 289, "46154771": 289, "39261642": 289, "36139242": 289, "35935288": 289, "3763214": 289, "40270968": 289, "43085717": 289, "45557651": 289, "47410241": 289, "48566716": 289, "49090568": 289, "49124786": 289, "48840102": 289, "4839738": 289, "47925143": 289, "47510421": 289, "47199608": 289, "47005584": 289, "46917696": 289, "46911955": 289, "denomin": 289, "73910363": 289, "30614675j": 289, "plane": 289, "092337035029908": 289, "71104892744724": 289, "684365018955985": 289, "37868538208862": 289, "1263714068241546": 289, "9993519409971622": 289, "1909320767063554": 289, "016796159999999997": 289, "46380627201816593": 289, "3806359704987265j": 289, "4988817673791569": 289, "3333421398098428j": 289, "5543277195052645": 289, "22961005941814036j": 289, "5291527586123693": 289, "28283804209787544j": 289, "lyon": 289, "understand": 289, "3rd": 289, "insid": 289, "outsid": 289, "unstabl": 289, "n_symbol": 290, "pb": 290, "x_bb_rect": 290, "papr_bb_rect": 290, "x_pb_rect": 290, "papr_pb_rect": 290, "x_bb_0p1": 290, "papr_bb_0p1": 290, "x_pb_0p1": 290, "papr_pb_0p1": 290, "x_bb_0p5": 290, "papr_bb_0p5": 290, "x_pb_0p5": 290, "papr_pb_0p5": 290, "x_bb_0p9": 290, "papr_bb_0p9": 290, "x_pb_0p9": 290, "papr_pb_0p9": 290, "2f": 290, "rf": [290, 291], "512": 290, "sweep_alpha": 290, "bb_papr": 290, "pb_papr": 290, "bpsk_bb_papr": 290, "bpsk_pb_papr": 290, "qpsk_bb_papr": 290, "qpsk_pb_papr": 290, "psk8_bb_papr": 290, "psk8_pb_papr": 290, "psk16_bb_papr": 290, "psk16_pb_papr": 290, "configur": 291, "loop_filt": 291, "0x7f28f4d4ab90": 291, "theta_0": 291, "phase_error": 291, "freq_estim": 291, "suptitl": [291, 292], "make": [291, 296], "a_hat": [291, 292], "rad2deg": 291, "avail": [291, 292, 294], "001": 291, "b_nt": 291, "0005": 291, "0125": 291, "015": 291, "0175": 291, "t_lock": 291, "analyze_psk": 292, "100_000": 292, "n0": 292, "tx_mf": 292, "1e6": 292, "bpsk_ber": 292, "bpsk_ser": 292, "qpsk_ber": 292, "qpsk_ser": 292, "psk8_ber": 292, "psk8_ser": 292, "psk16_ber": 292, "psk16_ser": 292, "1e0": 292, "psk8_bin": 292, "psk8_grai": 292, "wors": 292, "rc_0p1": 293, "rc_0p5": 293, "rc_0p9": 293, "pm": 293, "nearli": 293, "small": 293, "lobe": 293, "much": 293, "freqz": 293, "worn": 293, "h_rc_0p1": 293, "h_rc_0p5": 293, "h_rc_0p9": 293, "p_rect": 293, "cumsum": 293, "p_rc_0p1": 293, "p_rc_0p5": 293, "p_rc_0p9": 293, "within": 293, "srrc_0p1": 293, "srrc_0p5": 293, "srrc_0p9": 293, "therefor": 293, "significantli": 293, "due": 293, "being": 293, "h_srrc_0p1": 293, "h_srrc_0p5": 293, "h_srrc_0p9": 293, "p_srrc_0p1": 293, "p_srrc_0p5": 293, "p_srrc_0p9": 293, "gauss_0p1": 293, "gauss_0p2": 293, "gauss_0p3": 293, "softwar": 294, "radio": 294, "goal": 294, "analyz": 294, "reli": 294, "interoper": 294, "numba": 294, "acceler": 294, "computation": 294, "intens": 294, "addition": 294, "aim": 294, "replic": 294, "relev": 294, "toolbox": 294, "progress": 294, "someth": 294, "pleas": 294, "open": 294, "issu": 294, "pypi": 294, "api": [294, 296], "convers": [294, 295], "synchron": 294, "budget": [294, 295], "manipul": 294, "novemb": 295, "2023": 295, "abil": 295, "renam": 295, "multirate_tap": 295, "polyphase_matrix": 295, "matt": 295, "hostett": 295, "model": 295, "replac": 295, "black": 295, "improv": 295, "septemb": 295, "sensibl": 295, "august": 295, "27": 295, "without": 295, "superflu": 295, "translat": 295, "fix": [295, 296], "juli": 295, "firinterpol": 295, "impair": 295, "fpsl": 295, "helper": 295, "synthes": 295, "semant": 296, "major": 296, "minor": 296, "patch": 296, "introduc": 296, "featur": 296, "compat": 296, "bug": 296, "There": 296, "guarante": 296, "them": 296}, "objects": {"": [[3, 0, 0, 1, "sdr", ""]], "sdr": [[9, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [26, 1, 1, "", "Decimator", "Implements a polyphase decimating FIR filter."], [37, 1, 1, "", "Differentiator", "Implements a differentiator FIR filter."], [39, 1, 1, "", "EnergyDetector", "Implements an energy detector."], [44, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [51, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [69, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [76, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [94, 1, 1, "", "Integrator", "Implements an integrator IIR filter."], [96, 1, 1, "", "Interpolator", "Implements a polyphase interpolating FIR filter."], [107, 1, 1, "", "LeakyIntegrator", "Implements a leaky integrator IIR filter."], [109, 1, 1, "", "LinearModulation", "Implements linear phase/amplitude modulation with arbitrary symbol mapping."], [127, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [136, 1, 1, "", "MLPED", "Implements a maximum-likelihood phase error detector (ML-PED)."], [144, 1, 1, "", "MSK", "Implements minimum-shift keying (MSK) modulation and demodulation."], [146, 1, 1, "", "MovingAverage", "Implements a moving average FIR filter."], [148, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [156, 1, 1, "", "OQPSK", "Implements offset quadrature phase-shift keying (OQPSK) modulation and demodulation."], [160, 1, 1, "", "PED", "Implements a heuristic phase error detector (PED)."], [166, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [174, 1, 1, "", "PiMPSK", "Implements $pi/M$ phase-shift keying ($pi/M$ PSK) modulation and demodulation."], [176, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [177, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [178, 1, 1, "", "ReplicaCorrelator", "Implements an clairvoyant replica-correlator detector."], [183, 1, 1, "", "Resampler", "Implements a polyphase rational resampling FIR filter."], [196, 5, 1, "", "albersheim", "Estimates the minimum required single-sample SNR, given $N_{NC}$ non-coherent combinations, to achieve a probability of detection $P_D$ and probability of false alarm $P_{FA}$. This function implements Albersheim's equation."], [197, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [198, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [199, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [200, 5, 1, "", "barker", "Returns the Barker code/sequence of length $N$."], [201, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [202, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [203, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [204, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [205, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [206, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [207, 5, 1, "", "db", "Converts from linear units to decibels."], [208, 5, 1, "", "design_bandpass_fir", "Designs a bandpass FIR filter impulse response $h[n]$ using the window method."], [209, 5, 1, "", "design_bandstop_fir", "Designs a bandstop FIR filter impulse response $h[n]$ using the window method."], [210, 5, 1, "", "design_frac_delay_fir", "Designs a fractional delay FIR filter impulse response $h[n]$ using the Kaiser window method."], [211, 5, 1, "", "design_highpass_fir", "Designs a highpass FIR filter impulse response $h[n]$ using the window method."], [212, 5, 1, "", "design_lowpass_fir", "Designs a lowpass FIR filter impulse response $h[n]$ using the window method."], [213, 5, 1, "", "design_multirate_fir", "Designs a multirate FIR filter impulse response $h[n]$ using the Kaiser window method."], [214, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [215, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [216, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [217, 5, 1, "", "downsample", "Downsamples the time-domain signal $x[n]$ by the factor $r$."], [218, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [219, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [220, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [221, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [222, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [223, 5, 1, "", "euclidean", "Measures the Euclidean distance between two signals $x[n]$ and $y[n]$."], [224, 5, 1, "", "evm", "Calculates the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [225, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [226, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [227, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [228, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [229, 5, 1, "", "hadamard", "Returns the Hadamard code/sequence of length $N$."], [230, 5, 1, "", "half_sine", "Returns a half-sine pulse shape."], [231, 5, 1, "", "hamming", "Measures the Hamming distance between two signals $x[n]$ and $y[n]$."], [232, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [233, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [234, 5, 1, "", "linear", "Converts from decibels to linear units."], [235, 5, 1, "", "mix", "Mixes the time-domain signal $x[n]$ with a complex exponential or real sinusoid."], [236, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [237, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [238, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [239, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [240, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [241, 5, 1, "", "percent", "Converts from a ratio to a percentage."], [263, 5, 1, "", "polyphase_decompose", "Decomposes the FIR filter taps $h_i$ into the polyphase matrix $H_{i, j}$ with $B$ phases."], [264, 5, 1, "", "ppb", "Converts from a ratio to parts per billion (ppb)."], [265, 5, 1, "", "ppm", "Converts from a ratio to parts per million (ppm)."], [266, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [267, 5, 1, "", "rectangular", "Returns a rectangular pulse shape."], [268, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [269, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [270, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [271, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [272, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [273, 5, 1, "", "to_complex_bb", "Converts the real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$ to a complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c} = f_{s,r}/2$."], [274, 5, 1, "", "to_real_pb", "Converts the complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$ to a real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r} = 2f_{s,c}$."], [275, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [276, 5, 1, "", "upsample", "Upsamples the time-domain signal $x[n]$ by the factor $r$."], [277, 5, 1, "", "walsh", "Returns the Walsh code/sequence of length $N$."], [278, 5, 1, "", "wavelength", "Calculates the wavelength $lambda$ of an electromagnetic wave with frequency $f$."], [279, 5, 1, "", "zadoff_chu", "Returns the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.ClosedLoopPLL": [[10, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [11, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [12, 2, 1, "", "K0", "The NCO gain $K_0$."], [13, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [14, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [15, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [16, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [17, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [18, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [19, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [20, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [21, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [22, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [23, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [24, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [25, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[16, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [16, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [16, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [16, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [16, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[17, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[19, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[22, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.Decimator": [[27, 3, 1, "", "__call__", "Filters and decimates the input signal $x[n]$ with the polyphase FIR filter."], [28, 3, 1, "", "__init__", "Creates a polyphase FIR decimating filter."], [29, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [30, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [31, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [32, 2, 1, "", "method", "The method used to design the multirate filter."], [33, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [34, 2, 1, "", "rate", "The decimation rate $r$."], [35, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [36, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Decimator.__call__": [[27, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [27, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Decimator.__init__": [[28, 4, 2, "p-rate", "rate", "The decimation rate $r$."], [28, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [28, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.Differentiator": [[38, 3, 1, "", "__init__", "Creates a differentiator FIR filter."]], "sdr.Differentiator.__init__": [[38, 4, 2, "p-order", "order", "The order of the FIR differentiator $N$. The filter length is $N + 1$. Increasing the filter order increases the bandwidth of the differentiator."], [38, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [38, 4, 2, "p-window", "window", "The SciPy window definition. See scipy.signal.windows.get_window() for details. If None, no window is applied."]], "sdr.EnergyDetector": [[40, 3, 1, "", "p_d", "Computes the probability of detection $P_D$."], [41, 3, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [42, 3, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [43, 3, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.EnergyDetector.p_d": [[40, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [40, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [40, 4, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.p_fa": [[41, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [41, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [41, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [41, 4, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.EnergyDetector.roc": [[42, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [42, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [42, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."], [42, 4, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.threshold": [[43, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [43, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [43, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [43, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.ErrorRate": [[45, 3, 1, "", "__init__", "Creates a new error rate tabulation object."], [46, 3, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [47, 3, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [48, 3, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [49, 3, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [50, 3, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[46, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [46, 4, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [46, 4, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[47, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[48, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[50, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[52, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the FIR filter."], [53, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [54, 3, 1, "", "__len__", "Returns the filter length $N + 1$."], [55, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [56, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [57, 2, 1, "", "delay", "The delay of the FIR filter $d = lfloor frac{N + 1}{2} rfloor$ in samples."], [58, 3, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [59, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the FIR filter."], [60, 3, 1, "", "group_delay", "Returns the group delay $tau_g(omega)$ of the FIR filter."], [61, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [62, 2, 1, "", "order", "The order of the FIR filter $N$."], [63, 3, 1, "", "phase_delay", "Returns the phase delay $tau_{phi}(omega)$ of the FIR filter."], [64, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [65, 2, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [66, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [67, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [68, 2, 1, "", "taps", "The feedforward taps $h_i$ for $i = 0,...,N$."]], "sdr.FIR.__call__": [[52, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [52, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.FIR.__init__": [[53, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$ for $i = 0,...N$."], [53, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FIR.frequency_response": [[59, 4, 2, "p-decades", "decades", "Only used if freqs is an integer."], [59, 4, 2, "p-freqs", "freqs", "The frequency specification."], [59, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [59, 4, 2, "p-whole", "whole", "Only used if freqs is an integer."]], "sdr.FIR.group_delay": [[60, 4, 2, "p-N", "N", "The number of samples in the group delay."], [60, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[61, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.phase_delay": [[63, 4, 2, "p-N", "N", "The number of samples in the phase delay."], [63, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.step_response": [[66, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FarrowResampler": [[70, 3, 1, "", "__call__", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [71, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [72, 2, 1, "", "order", "The order of the filter."], [73, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [74, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [75, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__call__": [[70, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [70, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.__init__": [[71, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FarrowResampler.reset": [[73, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[77, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [78, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the IIR filter."], [79, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [80, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [81, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [82, 2, 1, "", "a_taps", "The feedback taps $a_j$ for $j = 0,...,N$."], [83, 2, 1, "", "b_taps", "The feedforward taps $b_i$ for $i = 0,...,M$."], [84, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the IIR filter."], [85, 2, 1, "", "gain", "The gain of the IIR filter."], [86, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [87, 2, 1, "", "order", "The order of the IIR filter $N$."], [88, 2, 1, "", "poles", "The poles of the IIR filter."], [89, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [90, 2, 1, "", "state", "The filter state."], [91, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [92, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [93, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[77, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [77, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [77, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."], [77, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__call__": [[78, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.IIR.__init__": [[79, 4, 2, "p-a", "a", "The feedback coefficients $a_j$ for $j = 0,...,N$."], [79, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$ for $i = 0,...,M$."], [79, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.IIR.frequency_response": [[84, 4, 2, "p-decades", "decades", "Only used if freqs is an integer."], [84, 4, 2, "p-freqs", "freqs", "The frequency specification."], [84, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [84, 4, 2, "p-whole", "whole", "Only used if freqs is an integer."]], "sdr.IIR.impulse_response": [[86, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[91, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.Integrator": [[95, 3, 1, "", "__init__", "Creates an integrating IIR filter."]], "sdr.Integrator.__init__": [[95, 4, 2, "p-method", "method", "The integration method."], [95, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.Interpolator": [[97, 3, 1, "", "__call__", "Interpolates and filters the input signal $x[n]$ with the polyphase FIR filter."], [98, 3, 1, "", "__init__", "Creates a polyphase FIR interpolating filter."], [99, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [100, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [101, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [102, 2, 1, "", "method", "The method used to design the multirate filter."], [103, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [104, 2, 1, "", "rate", "The interpolation rate $r$."], [105, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [106, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Interpolator.__call__": [[97, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [97, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Interpolator.__init__": [[98, 4, 2, "p-rate", "rate", "The interpolation rate $r$."], [98, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [98, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.LeakyIntegrator": [[108, 3, 1, "", "__init__", "Creates a leaky integrator IIR filter."]], "sdr.LeakyIntegrator.__init__": [[108, 4, 2, "p-alpha", "alpha", "The leaky factor $alpha$. An FIR moving average with length $L$ is approximated when $alpha = 1 - 2/L$."], [108, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.LinearModulation": [[110, 3, 1, "", "__init__", "Creates a new linear phase/amplitude modulation object."], [111, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [112, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [113, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [114, 2, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [115, 3, 1, "", "decide_symbols", "Converts the received complex symbols $tilde{a}[k]$ into decimal symbol decisions $hat{s}[k]$ and complex symbol decisions $hat{a}[k]$ using maximum-likelihood estimation (MLE)."], [116, 3, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples $tilde{x}[n]$ into decimal symbol decisions $hat{s}[k]$ using matched filtering and maximum-likelihood estimation."], [117, 3, 1, "", "map_symbols", "Converts the decimal symbols $s[k]$ to complex symbols $a[k]$."], [118, 3, 1, "", "modulate", "Modulates the decimal symbols $s[k]$ into pulse-shaped complex samples $x[n]$."], [119, 2, 1, "", "order", "The modulation order $M = 2^k$."], [120, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [121, 2, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [122, 2, 1, "", "rx_filter", "The receive decimating matched filter. The filter coefficients are matched to the pulse shape $h[-n]^*$."], [123, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [124, 2, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [125, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."], [126, 2, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter. The filter coefficients are the pulse shape $h[n]$."]], "sdr.LinearModulation.__init__": [[110, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [110, 4, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees to apply to symbol_map."], [110, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [110, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [110, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [110, 4, 2, "p-symbol_map", "symbol_map", "The symbol mapping ${0, dots, M-1} mapsto mathbb{C}$. An $M$-length array whose indices are decimal symbols $s[k]$ and whose values are complex symbols $a[k]$, where $M$ is the modulation order."]], "sdr.LinearModulation.ber": [[113, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.LinearModulation.decide_symbols": [[115, 4, 2, "p-a_tilde", "a_tilde", "The received complex symbols $tilde{a}[k]$."]], "sdr.LinearModulation.demodulate": [[116, 4, 2, "p-x_tilde", "x_tilde", "The received pulse-shaped complex samples $tilde{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.LinearModulation.map_symbols": [[117, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to map, $0$ to $M-1$."]], "sdr.LinearModulation.modulate": [[118, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.LinearModulation.ser": [[123, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.LoopFilter": [[128, 3, 1, "", "__call__", "Filters the input signal $x[n]$."], [129, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [130, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [131, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [132, 2, 1, "", "integral_gain", "The integral gain $K_2$ of the loop filter."], [133, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [134, 2, 1, "", "proportional_gain", "The proportional gain $K_1$ of the loop filter."], [135, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__call__": [[128, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.LoopFilter.__init__": [[129, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [129, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [129, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [129, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.MLPED": [[137, 2, 1, "", "A_received", "(Settable) The received signal RMS amplitude $A_{rx,rms}$."], [138, 2, 1, "", "A_reference", "(Settable) The reference signal RMS amplitude $A_{ref,rms}$."], [139, 3, 1, "", "__call__", "Detects the phase error."], [140, 3, 1, "", "__init__", "Initializes the ML-PED."], [141, 3, 1, "", "data_aided_error", "Simulates the average phase error of the data-aided PED using the specified modulation scheme."], [142, 3, 1, "", "decision_directed_error", "Simulates the average phase error of the decision-directed PED using the specified modulation scheme."], [143, 2, 1, "", "gain", "The gain of the phase error detector $K_p$."]], "sdr.MLPED.__call__": [[139, 4, 2, "p-received", "received", "The received complex symbols $tilde{a}[k]$."], [139, 4, 2, "p-reference", "reference", "The reference complex symbols, either the known transmitted complex symbols $a[k]$ or the complex symbols decisions $hat{a}[k]$."]], "sdr.MLPED.__init__": [[140, 4, 2, "p-A_received", "A_received", "The received signal RMS amplitude $A_{rx,rms}$."], [140, 4, 2, "p-A_reference", "A_reference", "The reference signal RMS amplitude $A_{ref,rms}$."]], "sdr.MLPED.data_aided_error": [[141, 4, 2, "p-modem", "modem", "The linear modulation scheme."], [141, 4, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.MLPED.decision_directed_error": [[142, 4, 2, "p-modem", "modem", "The linear modulation scheme."], [142, 4, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.MSK": [[145, 3, 1, "", "__init__", "Creates a new MSK object."]], "sdr.MSK.__init__": [[145, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [145, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [145, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.MovingAverage": [[147, 3, 1, "", "__init__", "Creates a moving average FIR filter."]], "sdr.MovingAverage.__init__": [[147, 4, 2, "p-length", "length", "The length of the moving average filter $L$."], [147, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.NCO": [[149, 3, 1, "", "__call__", "Steps the NCO with variable frequency and/or phase signals."], [150, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [151, 2, 1, "", "gain", "(Settable) The NCO gain $K_0$."], [152, 2, 1, "", "increment", "(Settable) The constant phase accumulation $omega$ of the NCO in radians/sample."], [153, 2, 1, "", "offset", "(Settable) The absolute phase offset $theta$ of the NCO in radians."], [154, 3, 1, "", "reset", "Resets the NCO."], [155, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__call__": [[149, 4, 2, "p-freq", "freq", "The variable frequency signal $f[n]$ in radians/sample. This input signal varies the per-sample phase increment of the NCO. If None, the signal is all zeros."], [149, 4, 2, "p-output", "output", "The format of the output signal $y[n]$. Options are the accumulated phase, sine, cosine, or complex exponential."], [149, 4, 2, "p-phase", "phase", "The variable phase signal $p[n]$ in radians. This input signal varies the per-sample phase offset of the NCO. If None, the signal is all zeros."]], "sdr.NCO.__init__": [[150, 4, 2, "p-gain", "gain", "The NCO gain $K_0$."], [150, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [150, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.NCO.step": [[155, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.OQPSK": [[157, 3, 1, "", "__init__", "Creates a new OQPSK object."], [158, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [159, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."]], "sdr.OQPSK.__init__": [[157, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [157, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [157, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [157, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [157, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [157, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PED": [[161, 3, 1, "", "__call__", "Detects the phase error."], [162, 3, 1, "", "__init__", "Initializes the PED."], [163, 3, 1, "", "data_aided_error", "Simulates the average phase error of the data-aided PED using the specified modulation scheme."], [164, 3, 1, "", "decision_directed_error", "Simulates the average phase error of the decision-directed PED using the specified modulation scheme."], [165, 2, 1, "", "gain", "The gain of the phase error detector $K_p$."]], "sdr.PED.__call__": [[161, 4, 2, "p-received", "received", "The received complex symbols $tilde{a}[k]$."], [161, 4, 2, "p-reference", "reference", "The reference complex symbols, either the known transmitted complex symbols $a[k]$ or the complex symbols decisions $hat{a}[k]$."]], "sdr.PED.data_aided_error": [[163, 4, 2, "p-modem", "modem", "The linear modulation scheme."], [163, 4, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.PED.decision_directed_error": [[164, 4, 2, "p-modem", "modem", "The linear modulation scheme."], [164, 4, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.PSK": [[167, 3, 1, "", "__init__", "Creates a new PSK object."], [168, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [169, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [170, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [171, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [172, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [173, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[167, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [167, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [167, 4, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [167, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [167, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [167, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [167, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[170, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [170, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.ser": [[172, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [172, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.PiMPSK": [[175, 3, 1, "", "__init__", "Creates a new $pi/M$ PSK object."]], "sdr.PiMPSK.__init__": [[175, 4, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [175, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [175, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [175, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [175, 4, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [175, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [175, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.Q": [[176, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[177, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.ReplicaCorrelator": [[179, 3, 1, "", "p_d", "Computes the probability of detection $P_D$."], [180, 3, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [181, 3, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [182, 3, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.ReplicaCorrelator.p_d": [[179, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [179, 4, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [179, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."]], "sdr.ReplicaCorrelator.p_fa": [[180, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [180, 4, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [180, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [180, 4, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.ReplicaCorrelator.roc": [[181, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [181, 4, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [181, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."]], "sdr.ReplicaCorrelator.threshold": [[182, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [182, 4, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [182, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [182, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.Resampler": [[184, 3, 1, "", "__call__", "Resamples and filters the input signal $x[n]$ with the polyphase FIR filter."], [185, 3, 1, "", "__init__", "Creates a polyphase FIR rational resampling filter."], [186, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [187, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [188, 2, 1, "", "delay", "The delay of FIR filter in samples. The delay indicates the output sample index that corresponds to the first input sample."], [189, 2, 1, "", "down", "The decimation rate $Q$."], [190, 2, 1, "", "method", "The method used to design the multirate filter."], [191, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [192, 2, 1, "", "rate", "The resampling rate $P/Q$."], [193, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [194, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."], [195, 2, 1, "", "up", "The interpolation rate $P$."]], "sdr.Resampler.__init__": [[185, 4, 2, "p-down", "down", "The decimation rate $Q$."], [185, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [185, 4, 2, "p-taps", "taps", "The multirate filter design specification."], [185, 4, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.albersheim": [[196, 4, 2, "p-N_nc", "N_nc", "The number of non-coherent combinations $N_{NC} ge 1$."], [196, 4, 2, "p-p_d", "p_d", "The desired probability of detection $P_D$ in $(0, 1)$."], [196, 4, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{FA}$ in $(0, 1)$."]], "sdr.average_power": [[197, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the average power. The default is None, which computes the average power of the entire array."], [197, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [197, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[198, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [198, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [198, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [198, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[199, 4, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [199, 4, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.barker": [[200, 4, 2, "p-length", "length", "The length $N$ of the Barker code/sequence."], [200, 4, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[201, 4, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [201, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [201, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[202, 4, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[203, 4, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[204, 4, 2, "p-p", "p", "The probability $p$ of a bit flip."], [204, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [204, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[205, 4, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[206, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.db": [[207, 4, 2, "p-type", "type", "The type of input value or signal."], [207, 4, 2, "p-x", "x", "The input value or signal."]], "sdr.design_bandpass_fir": [[208, 4, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [208, 4, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [208, 4, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [208, 4, 2, "p-order", "order", "The filter order $N$. Must be even."], [208, 4, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_bandstop_fir": [[209, 4, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [209, 4, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [209, 4, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [209, 4, 2, "p-order", "order", "The filter order $N$. Must be even."], [209, 4, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_frac_delay_fir": [[210, 4, 2, "p-delay", "delay", "The fractional delay $0 le Delta n le 1$."], [210, 4, 2, "p-length", "length", "The filter length $L$. Filters with even length have best performance. Filters with odd length are equivalent to an even-length filter with an appended zero."]], "sdr.design_highpass_fir": [[211, 4, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [211, 4, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [211, 4, 2, "p-order", "order", "The filter order $N$. Must be even."], [211, 4, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_lowpass_fir": [[212, 4, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [212, 4, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [212, 4, 2, "p-order", "order", "The filter order $N$. Must be even."], [212, 4, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_multirate_fir": [[213, 4, 2, "p-A_stop", "A_stop", "The stopband attenuation $A_{text{stop}}$ in dB."], [213, 4, 2, "p-down", "down", "The decimation rate $Q$."], [213, 4, 2, "p-half_length", "half_length", "The half-length of the polyphase filters."], [213, 4, 2, "p-up", "up", "The interpolation rate $P$."]], "sdr.diff_decode": [[214, 4, 2, "p-y", "y", "The input encoded data $y[k]$."], [214, 4, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[215, 4, 2, "p-x", "x", "The input uncoded data $x[k]$."], [215, 4, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[216, 4, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [216, 4, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [216, 4, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [216, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [216, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.downsample": [[217, 4, 2, "p-rate", "rate", "The downsampling factor $r$."], [217, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.ebn0_to_esn0": [[218, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [218, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [218, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[219, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [219, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [219, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [219, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[220, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the energy. The default is None, which computes the energy of the entire array."], [220, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [220, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[221, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [221, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [221, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[222, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [222, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.euclidean": [[223, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the distance. The default is None, which computes the distance across the entire array."], [223, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [223, 4, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.evm": [[224, 4, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [224, 4, 2, "p-output", "output", "The output type of the EVM calculation."], [224, 4, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [224, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.frequency_offset": [[225, 4, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [225, 4, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [225, 4, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [225, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [225, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[226, 4, 2, "p-distance", "distance", "The distance $d$ in meters between the transmitter and receiver."], [226, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[227, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [227, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [227, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [227, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[228, 4, 2, "p-n", "n", "The length of the Gray code."]], "sdr.hadamard": [[229, 4, 2, "p-index", "index", "The index $i$ of the Hadamard code."], [229, 4, 2, "p-length", "length", "The length $N$ of the Hadamard code/sequence. Must be a power of 2."], [229, 4, 2, "p-output", "output", "The output format of the Hadamard code/sequence."]], "sdr.half_sine": [[230, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [230, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [230, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.hamming": [[231, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the distance. The default is None, which computes the distance across the entire array."], [231, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [231, 4, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.hexdump": [[232, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [232, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[233, 4, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [233, 4, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [233, 4, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.linear": [[234, 4, 2, "p-type", "type", "The type of output value or signal."], [234, 4, 2, "p-x", "x", "The input value or signal in dB."]], "sdr.mix": [[235, 4, 2, "p-complex", "complex", "Indicates whether to mix by a complex exponential or real sinusoid."], [235, 4, 2, "p-freq", "freq", "The frequency $f$ of the sinusoid in Hz (or 1/samples if sample_rate=1). The frequency must satisfy $-f_s/2 le f le f_s/2$."], [235, 4, 2, "p-phase", "phase", "The phase $phi$ of the sinusoid in degrees."], [235, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal."], [235, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.pack": [[236, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [236, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [236, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[237, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the PAPR. The default is None, which computes the PAPR of the entire array."], [237, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[238, 4, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [238, 4, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [238, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[239, 4, 2, "p-axis", "axis", "Axis or axes along which to compute the peak power. The default is None, which computes the peak power of the entire array."], [239, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [239, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[240, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [240, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.percent": [[241, 4, 2, "p-x", "x", "The input ratio."]], "sdr.plot": [[242, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [243, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [244, 5, 1, "", "eye", "Plots the eye diagram of the baseband modulated signal $x[n]$."], [245, 5, 1, "", "filter", "Plots the magnitude response $|H(omega)|^2$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [246, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [247, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [248, 5, 1, "", "magnitude_response", "Plots the magnitude response $|H(omega)|^2$ of the filter."], [249, 5, 1, "", "p_d", "Plots the probability of detection $P_D$ as a function of received SNR or ENR."], [250, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [251, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [252, 5, 1, "", "phase_response", "Plots the phase response $angle H(omega)$ of the filter."], [253, 5, 1, "", "phase_tree", "Plots the phase tree of a continuous-phase modulated (CPM) signal signal $x[n]$."], [254, 5, 1, "", "raster", "Plots a raster of the time-domain signal $x[n]$."], [255, 5, 1, "", "roc", "Plots the receiver operating characteristic (ROC) curve as a function of $P_{FA}$."], [256, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [257, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [258, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [259, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [260, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [261, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [262, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[242, 4, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [242, 4, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."], [242, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."]], "sdr.plot.constellation": [[243, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [243, 4, 2, "p-kwargs", "kwargs", "If heatmap=False, additional keyword arguments to pass to matplotlib.pyplot.scatter(). The following keyword arguments are set by default. The defaults may be overwritten."], [243, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [243, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.eye": [[244, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [244, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [244, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [244, 4, 2, "p-span", "span", "The number of symbols per raster."], [244, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [244, 4, 2, "p-x", "x", "The baseband modulated signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved."]], "sdr.plot.filter": [[245, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [245, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [245, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [245, 4, 2, "p-filter", "filter", "The filter definition."], [245, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [245, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[246, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [246, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [246, 4, 2, "p-filter", "filter", "The filter definition."], [246, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [246, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [246, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.impulse_response": [[247, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [247, 4, 2, "p-filter", "filter", "The filter definition."], [247, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.magnitude_response": [[248, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [248, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [248, 4, 2, "p-filter", "filter", "The filter definition."], [248, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [248, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [248, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."], [248, 4, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a linear or logarithmic magnitude response."]], "sdr.plot.p_d": [[249, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [249, 4, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [249, 4, 2, "p-x", "x", "The SNR or ENR in dB."], [249, 4, 2, "p-x_label", "x_label", "The x-axis label to use."]], "sdr.plot.periodogram": [[250, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [250, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [250, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [250, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [250, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [250, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [250, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [250, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [250, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [250, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."], [250, 4, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a linear or logarithmic power spectral density."]], "sdr.plot.phase_delay": [[251, 4, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [251, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [251, 4, 2, "p-filter", "filter", "The filter definition."], [251, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [251, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [251, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.phase_response": [[252, 4, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [252, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [252, 4, 2, "p-filter", "filter", "The filter definition."], [252, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [252, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [252, 4, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [252, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.phase_tree": [[253, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [253, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [253, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [253, 4, 2, "p-span", "span", "The number of symbols per raster."], [253, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [253, 4, 2, "p-x", "x", "The baseband CPM signal $x[n]$."]], "sdr.plot.raster": [[254, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [254, 4, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\"."], [254, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.collections.LineCollection. The following keyword arguments are set by default. The defaults may be overwritten."], [254, 4, 2, "p-length", "length", "The length of each raster in samples. This must be provided if x is 1D."], [254, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [254, 4, 2, "p-stride", "stride", "The stride between each raster in samples. If None, the stride is set to length."], [254, 4, 2, "p-x", "x", "The time-domain signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved. If x is 1D, the rastering is determined by length and stride. If x is 2D, the rows correspond to each raster."]], "sdr.plot.roc": [[255, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to the plotting function defined by type."], [255, 4, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [255, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [255, 4, 2, "p-type", "type", "The type of plot to generate."]], "sdr.plot.ser": [[256, 4, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [256, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."], [256, 4, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.spectrogram": [[257, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [257, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [257, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.pcolormesh(). The following keyword arguments are set by default. The defaults may be overwritten."], [257, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [257, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [257, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [257, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [257, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [257, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[258, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [258, 4, 2, "p-filter", "filter", "The filter definition."], [258, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.symbol_map": [[259, 4, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [259, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot(). The following keyword arguments are set by default. The defaults may be overwritten."], [259, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [259, 4, 2, "p-modulation", "modulation", "The linear modulation or symbol map ${0, dots, M-1} mapsto mathbb{C}$."]], "sdr.plot.time_domain": [[260, 4, 2, "p-centered", "centered", "Indicates whether to center the x-axis about 0. This argument is mutually exclusive with offset."], [260, 4, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal. If \"color\", the real and imaginary parts will have different colors based on the current Matplotlib color cycle. If \"line\", the real part will have a solid line and the imaginary part will have a dashed line, and both lines will share the same color."], [260, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [260, 4, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. The units of the offset are $1/f_s$. This argument is mutually exclusive with centered."], [260, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [260, 4, 2, "p-t", "t", "The time signal $t[n]$. The units are assumed to be $1/f_s$."], [260, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[262, 4, 2, "p-filter", "filter", "The filter definition."], [262, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.polyphase_decompose": [[263, 4, 2, "p-phases", "phases", "The number of phases $B$."], [263, 4, 2, "p-taps", "taps", "The multirate FIR filter taps $h_i$."]], "sdr.ppb": [[264, 4, 2, "p-x", "x", "The input ratio."]], "sdr.ppm": [[265, 4, 2, "p-x", "x", "The input ratio."]], "sdr.raised_cosine": [[266, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [266, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [266, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [266, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rectangular": [[267, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [267, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [267, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[268, 4, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [268, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[269, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [269, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [269, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [269, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[270, 4, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [270, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.snr_to_ebn0": [[271, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [271, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [271, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [271, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[272, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [272, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.to_complex_bb": [[273, 4, 2, "p-x_r", "x_r", "The real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$. If the length is odd, one zero is appended to the end."]], "sdr.to_real_pb": [[274, 4, 2, "p-x_c", "x_c", "The complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$."]], "sdr.unpack": [[275, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [275, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [275, 4, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.upsample": [[276, 4, 2, "p-rate", "rate", "The upsampling factor $r$."], [276, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.walsh": [[277, 4, 2, "p-index", "index", "The index $i$ of the Walsh code. Indicates how many transitions there are in the code."], [277, 4, 2, "p-length", "length", "The length $N$ of the Walsh code/sequence. Must be a power of 2."], [277, 4, 2, "p-output", "output", "The output format of the Walsh code/sequence."]], "sdr.wavelength": [[278, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.zadoff_chu": [[279, 4, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [279, 4, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence. The root must be relatively prime to the length, i.e., $gcd(u, N) = 1$."], [279, 4, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence. When $q ne 0$, the returned sequence is a cyclic shift of the root-$u$ Zadoff-Chu sequence."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"convers": 0, "decibel": 0, "ratio": 0, "from": [0, 284, 285, 286], "e_b": 0, "n_0": 0, "e_": 0, "": [0, 288, 289], "n": [0, 287, 288, 289], "data": 1, "manipul": [1, 3], "detect": [2, 7], "detector": [2, 282], "theoret": 2, "limit": 2, "digit": [3, 289], "signal": [3, 281, 287, 290], "process": 3, "fir": [3, 288], "filter": [3, 7, 288, 289, 291], "iir": [3, 289], "applic": 3, "multir": 3, "arbitrari": [3, 287], "resampl": [3, 287], "correl": 3, "link": 4, "budget": 4, "channel": [4, 281], "capac": 4, "path": 4, "loss": 4, "antenna": 4, "measur": 5, "energi": 5, "power": [5, 290], "voltag": 5, "distanc": 5, "modul": [5, 6, 7], "linear": 6, "continu": 6, "phase": [6, 282, 291, 292], "orthogon": 6, "puls": [6, 290, 293], "shape": [6, 290, 293], "symbol": [6, 292], "map": [6, 292], "encod": 6, "plot": [7, 290], "configur": [7, 284, 286], "time": [7, 290, 291], "domain": [7, 290, 291], "frequenc": [7, 288, 289, 290, 291], "spectral": 7, "estim": 7, "analysi": 7, "probabl": 8, "note": [9, 109, 144, 156, 166, 174, 226, 250, 257], "constructor": [9, 26, 37, 44, 51, 69, 76, 94, 96, 107, 109, 127, 136, 144, 146, 148, 156, 160, 166, 174, 183], "method": [9, 26, 37, 39, 44, 51, 69, 76, 94, 96, 107, 109, 127, 136, 144, 146, 148, 156, 160, 166, 174, 178, 183], "properti": [9, 26, 37, 51, 69, 76, 94, 96, 107, 109, 127, 136, 144, 146, 148, 156, 160, 166, 174, 183], "special": [26, 37, 51, 69, 76, 94, 96, 107, 127, 136, 146, 148, 160, 183], "string": [26, 37, 51, 76, 94, 96, 107, 109, 144, 146, 156, 166, 174, 183], "represent": [26, 37, 51, 76, 94, 96, 107, 109, 144, 146, 156, 166, 174, 183], "stream": [26, 37, 51, 76, 94, 96, 107, 146, 183], "mode": [26, 37, 51, 76, 94, 96, 107, 146, 183], "onli": [26, 37, 51, 76, 94, 96, 107, 146, 183], "see": [44, 46, 59, 60, 61, 63, 66, 84, 86, 91, 110, 113, 123, 145, 157, 167, 170, 172, 175, 176, 177, 206, 237, 276], "also": [44, 46, 59, 60, 61, 63, 66, 84, 86, 91, 110, 113, 123, 145, 157, 167, 170, 172, 175, 176, 177, 206, 237, 276], "warn": [217, 276], "sequenc": 280, "simul": 281, "model": 281, "impair": 281, "synchron": 282, "error": [282, 292], "document": 283, "instal": [283, 284, 285, 286, 294], "build": 283, "doc": 283, "serv": 283, "format": 284, "run": [284, 286], "linter": 284, "formatt": 284, "pre": 284, "commit": 284, "v": [284, 286], "code": [284, 286], "pypi": 285, "github": 285, "edit": 285, "local": 285, "folder": 285, "dev": 285, "depend": 285, "unit": 286, "test": 286, "command": 286, "line": 286, "farrow": 287, "construct": 287, "an": [287, 288, 289], "input": 287, "x": 287, "t_": 287, "rate": [287, 292], "r": 287, "y": 287, "frac": 287, "upsampl": 287, "integ": 287, "downsampl": 287, "irrat": 287, "creat": [288, 289], "examin": [288, 289, 290], "impuls": [288, 289], "respons": [288, 289, 291], "h": [288, 289], "step": [288, 289, 291], "omega": [288, 289], "group": [288, 289], "delai": [288, 289], "tau_g": [288, 289], "fulli": [288, 289], "analyz": [288, 289, 291], "zero": 289, "pole": 289, "stabil": 289, "peak": 290, "averag": 290, "qpsk": [290, 292], "variou": 290, "across": [290, 291], "excess": 290, "bandwidth": 290, "lock": 291, "loop": 291, "design": 291, "proport": 291, "plu": 291, "integr": 291, "ppi": 291, "implement": 291, "pll": 291, "close": 291, "perform": 291, "compar": 291, "zeta": 291, "b_n": 291, "t": 291, "shift": 292, "kei": 292, "constel": 292, "bpsk": 292, "8": [292, 295], "psk": 292, "16": 292, "curv": 292, "bit": 292, "rais": 293, "cosin": 293, "squar": 293, "root": 293, "gaussian": 293, "sdr": 294, "featur": 294, "v0": 295, "0": 295, "10": 295, "chang": 295, "contributor": 295, "9": 295, "7": 295, "6": 295, "5": 295, "4": 295, "3": 295, "2": 295, "1": 295, "version": 296, "alpha": 296, "releas": 296, "beta": 296}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Conversions": [[0, "conversions"]], "Decibels": [[0, "decibels"]], "Ratios": [[0, "ratios"]], "From E_b/N_0": [[0, "from-e-b-n-0"]], "From E_s/N_0": [[0, "from-e-s-n-0"]], "From S/N": [[0, "from-s-n"]], "Data manipulation": [[1, "data-manipulation"]], "Detection": [[2, "detection"], [7, "detection"]], "Detectors": [[2, "detectors"]], "Theoretical limits": [[2, "theoretical-limits"]], "Digital signal processing": [[3, "digital-signal-processing"]], "FIR filtering": [[3, "fir-filtering"]], "IIR filtering": [[3, "iir-filtering"]], "Filter applications": [[3, "filter-applications"]], "Multirate filtering": [[3, "multirate-filtering"]], "Arbitrary resampling": [[3, "arbitrary-resampling"]], "Correlation": [[3, "correlation"]], "Signal manipulation": [[3, "signal-manipulation"]], "Link budgets": [[4, "link-budgets"]], "Channel capacity": [[4, "channel-capacity"]], "Path losses": [[4, "path-losses"]], "Antennas": [[4, "antennas"]], "Measurement": [[5, "measurement"]], "Energy": [[5, "energy"]], "Power": [[5, "power"]], "Voltage": [[5, "voltage"]], "Distance": [[5, "distance"]], "Modulation": [[5, "modulation"], [6, "modulation"], [7, "modulation"]], "Linear modulations": [[6, "linear-modulations"]], "Continuous-phase modulations": [[6, "continuous-phase-modulations"]], "Orthogonal modulations": [[6, "orthogonal-modulations"]], "Pulse shaping": [[6, "pulse-shaping"]], "Symbol mapping": [[6, "symbol-mapping"], [292, "symbol-mapping"]], "Symbol encoding": [[6, "symbol-encoding"]], "Plotting": [[7, "plotting"]], "Configuration": [[7, "configuration"], [284, "configuration"], [286, "configuration"]], "Time-domain": [[7, "time-domain"]], "Frequency-domain": [[7, "frequency-domain"]], "Spectral estimation": [[7, "spectral-estimation"]], "Filter analysis": [[7, "filter-analysis"]], "Probability": [[8, "probability"]], "Note": [[9, null], [109, null], [144, null], [156, null], [166, null], [174, null], [226, null], [250, null], [257, null]], "Constructors": [[9, "constructors"], [26, "constructors"], [37, "constructors"], [44, "constructors"], [51, "constructors"], [69, "constructors"], [76, "constructors"], [94, "constructors"], [96, "constructors"], [107, "constructors"], [109, "constructors"], [127, "constructors"], [136, "constructors"], [144, "constructors"], [146, "constructors"], [148, "constructors"], [156, "constructors"], [160, "constructors"], [166, "constructors"], [174, "constructors"], [183, "constructors"]], "Methods": [[9, "methods"], [26, "methods"], [37, "methods"], [39, "methods"], [44, "methods"], [51, "methods"], [69, "methods"], [76, "methods"], [94, "methods"], [96, "methods"], [107, "methods"], [109, "methods"], [127, "methods"], [136, "methods"], [144, "methods"], [146, "methods"], [148, "methods"], [156, "methods"], [160, "methods"], [166, "methods"], [174, "methods"], [178, "methods"], [183, "methods"]], "Properties": [[9, "properties"], [26, "properties"], [37, "properties"], [51, "properties"], [69, "properties"], [76, "properties"], [94, "properties"], [96, "properties"], [107, "properties"], [109, "properties"], [127, "properties"], [136, "properties"], [144, "properties"], [146, "properties"], [148, "properties"], [156, "properties"], [160, "properties"], [166, "properties"], [174, "properties"], [183, "properties"]], "Special methods": [[26, "special-methods"], [37, "special-methods"], [51, "special-methods"], [69, "special-methods"], [76, "special-methods"], [94, "special-methods"], [96, "special-methods"], [107, "special-methods"], [127, "special-methods"], [136, "special-methods"], [146, "special-methods"], [148, "special-methods"], [160, "special-methods"], [183, "special-methods"]], "String representation": [[26, "string-representation"], [37, "string-representation"], [51, "string-representation"], [76, "string-representation"], [94, "string-representation"], [96, "string-representation"], [107, "string-representation"], [109, "string-representation"], [144, "string-representation"], [146, "string-representation"], [156, "string-representation"], [166, "string-representation"], [174, "string-representation"], [183, "string-representation"]], "Streaming mode only": [[26, "streaming-mode-only"], [37, "streaming-mode-only"], [51, "streaming-mode-only"], [76, "streaming-mode-only"], [94, "streaming-mode-only"], [96, "streaming-mode-only"], [107, "streaming-mode-only"], [146, "streaming-mode-only"], [183, "streaming-mode-only"]], "See also": [[44, null], [46, null], [59, null], [60, null], [61, null], [63, null], [66, null], [84, null], [86, null], [91, null], [110, null], [113, null], [123, null], [145, null], [157, null], [167, null], [170, null], [172, null], [175, null], [176, null], [177, null], [206, null], [237, null], [276, null]], "Warning": [[217, null], [276, null]], "Sequences": [[280, "sequences"]], "Simulation": [[281, "simulation"]], "Channel models": [[281, "channel-models"]], "Signal impairments": [[281, "signal-impairments"]], "Synchronization": [[282, "synchronization"]], "Phase error detectors": [[282, "phase-error-detectors"]], "Documentation": [[283, "documentation"]], "Install": [[283, "install"], [284, "install"], [286, "install"]], "Build the docs": [[283, "build-the-docs"]], "Serve the docs": [[283, "serve-the-docs"]], "Formatting": [[284, "formatting"]], "Run the linter": [[284, "run-the-linter"]], "Run the formatter": [[284, "run-the-formatter"]], "Pre-commit": [[284, "pre-commit"]], "Run from VS Code": [[284, "run-from-vs-code"], [286, "run-from-vs-code"]], "Installation": [[285, "installation"], [294, "installation"]], "Install from PyPI": [[285, "install-from-pypi"]], "Install from GitHub": [[285, "install-from-github"]], "Editable install from local folder": [[285, "editable-install-from-local-folder"]], "Install the dev dependencies": [[285, "install-the-dev-dependencies"]], "Unit Tests": [[286, "unit-tests"]], "Run from the command line": [[286, "run-from-the-command-line"]], "Farrow arbitrary resampler": [[287, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[287, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[287, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[287, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[287, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[287, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[287, "downsample-by-an-irrational-rate"]], "FIR filters": [[288, "fir-filters"]], "Create an FIR filter": [[288, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[288, "examine-the-impulse-response-h-n"], [289, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[288, "examine-the-step-response-s-n"], [289, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[288, "examine-the-frequency-response-h-omega"], [289, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[288, "examine-the-group-delay-tau-g-omega"], [289, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[288, "fully-analyze-a-fir-filter"]], "IIR filters": [[289, "iir-filters"]], "Create an IIR filter": [[289, "create-an-iir-filter"]], "Examine the zeros and poles": [[289, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[289, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[289, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[290, "peak-to-average-power"]], "QPSK signal with various pulse shapes": [[290, "qpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[290, "examine-time-domain"]], "Examine frequency domain": [[290, "examine-frequency-domain"]], "Plot across excess bandwidth": [[290, "plot-across-excess-bandwidth"]], "Phase-locked loops": [[291, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[291, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[291, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[291, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[291, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[291, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[291, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[291, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[292, "phase-shift-keying"]], "Constellations": [[292, "constellations"]], "BPSK": [[292, "bpsk"]], "QPSK": [[292, "qpsk"]], "8-PSK": [[292, "id1"]], "16-PSK": [[292, "id2"]], "Error rate curves": [[292, "error-rate-curves"]], "Bit error rate curves": [[292, "bit-error-rate-curves"]], "Symbol error rate curves": [[292, "symbol-error-rate-curves"]], "Pulse shapes": [[293, "pulse-shapes"]], "Raised cosine": [[293, "raised-cosine"]], "Square-root raised cosine": [[293, "square-root-raised-cosine"]], "Gaussian": [[293, "gaussian"]], "sdr": [[294, "sdr"]], "Features": [[294, "features"]], "v0.0": [[295, "v0-0"]], "v0.0.10": [[295, "v0-0-10"]], "Changes": [[295, "changes"], [295, "id1"], [295, "id3"], [295, "id5"], [295, "id7"], [295, "id9"], [295, "id11"], [295, "id13"], [295, "id15"], [295, "id17"]], "Contributors": [[295, "contributors"], [295, "id2"], [295, "id4"], [295, "id6"], [295, "id8"], [295, "id10"], [295, "id12"], [295, "id14"], [295, "id16"], [295, "id18"]], "v0.0.9": [[295, "v0-0-9"]], "v0.0.8": [[295, "v0-0-8"]], "v0.0.7": [[295, "v0-0-7"]], "v0.0.6": [[295, "v0-0-6"]], "v0.0.5": [[295, "v0-0-5"]], "v0.0.4": [[295, "v0-0-4"]], "v0.0.3": [[295, "v0-0-3"]], "v0.0.2": [[295, "v0-0-2"]], "v0.0.1": [[295, "v0-0-1"]], "Versioning": [[296, "versioning"]], "Alpha releases": [[296, "alpha-releases"]], "Beta releases": [[296, "beta-releases"]]}, "indexentries": {"module": [[3, "module-sdr"]], "sdr": [[3, "module-sdr"]]}, "docurls": ["api/conversions/", "api/data-manipulation/", "api/detection/", "api/dsp/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.Decimator/", "api/sdr.Decimator.__call__/", "api/sdr.Decimator.__init__/", "api/sdr.Decimator.__repr__/", "api/sdr.Decimator.__str__/", "api/sdr.Decimator.delay/", "api/sdr.Decimator.method/", "api/sdr.Decimator.polyphase_taps/", "api/sdr.Decimator.rate/", "api/sdr.Decimator.reset/", "api/sdr.Decimator.taps/", "api/sdr.Differentiator/", "api/sdr.Differentiator.__init__/", "api/sdr.EnergyDetector/", "api/sdr.EnergyDetector.p_d/", "api/sdr.EnergyDetector.p_fa/", "api/sdr.EnergyDetector.roc/", "api/sdr.EnergyDetector.threshold/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__call__/", "api/sdr.FIR.__init__/", "api/sdr.FIR.__len__/", "api/sdr.FIR.__repr__/", "api/sdr.FIR.__str__/", "api/sdr.FIR.delay/", "api/sdr.FIR.flush/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.group_delay/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.phase_delay/", "api/sdr.FIR.reset/", "api/sdr.FIR.state/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__call__/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__call__/", "api/sdr.IIR.__init__/", "api/sdr.IIR.__repr__/", "api/sdr.IIR.__str__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.state/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.Integrator/", "api/sdr.Integrator.__init__/", "api/sdr.Interpolator/", "api/sdr.Interpolator.__call__/", "api/sdr.Interpolator.__init__/", "api/sdr.Interpolator.__repr__/", "api/sdr.Interpolator.__str__/", "api/sdr.Interpolator.delay/", "api/sdr.Interpolator.method/", "api/sdr.Interpolator.polyphase_taps/", "api/sdr.Interpolator.rate/", "api/sdr.Interpolator.reset/", "api/sdr.Interpolator.taps/", "api/sdr.LeakyIntegrator/", "api/sdr.LeakyIntegrator.__init__/", "api/sdr.LinearModulation/", "api/sdr.LinearModulation.__init__/", "api/sdr.LinearModulation.__repr__/", "api/sdr.LinearModulation.__str__/", "api/sdr.LinearModulation.ber/", "api/sdr.LinearModulation.bps/", "api/sdr.LinearModulation.decide_symbols/", "api/sdr.LinearModulation.demodulate/", "api/sdr.LinearModulation.map_symbols/", "api/sdr.LinearModulation.modulate/", "api/sdr.LinearModulation.order/", "api/sdr.LinearModulation.phase_offset/", "api/sdr.LinearModulation.pulse_shape/", "api/sdr.LinearModulation.rx_filter/", "api/sdr.LinearModulation.ser/", "api/sdr.LinearModulation.sps/", "api/sdr.LinearModulation.symbol_map/", "api/sdr.LinearModulation.tx_filter/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.__call__/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.integral_gain/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.proportional_gain/", "api/sdr.LoopFilter.reset/", "api/sdr.MLPED/", "api/sdr.MLPED.A_received/", "api/sdr.MLPED.A_reference/", "api/sdr.MLPED.__call__/", "api/sdr.MLPED.__init__/", "api/sdr.MLPED.data_aided_error/", "api/sdr.MLPED.decision_directed_error/", "api/sdr.MLPED.gain/", "api/sdr.MSK/", "api/sdr.MSK.__init__/", "api/sdr.MovingAverage/", "api/sdr.MovingAverage.__init__/", "api/sdr.NCO/", "api/sdr.NCO.__call__/", "api/sdr.NCO.__init__/", "api/sdr.NCO.gain/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.OQPSK/", "api/sdr.OQPSK.__init__/", "api/sdr.OQPSK.__repr__/", "api/sdr.OQPSK.__str__/", "api/sdr.PED/", "api/sdr.PED.__call__/", "api/sdr.PED.__init__/", "api/sdr.PED.data_aided_error/", "api/sdr.PED.decision_directed_error/", "api/sdr.PED.gain/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.__repr__/", "api/sdr.PSK.__str__/", "api/sdr.PSK.ber/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.PiMPSK/", "api/sdr.PiMPSK.__init__/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.ReplicaCorrelator/", "api/sdr.ReplicaCorrelator.p_d/", "api/sdr.ReplicaCorrelator.p_fa/", "api/sdr.ReplicaCorrelator.roc/", "api/sdr.ReplicaCorrelator.threshold/", "api/sdr.Resampler/", "api/sdr.Resampler.__call__/", "api/sdr.Resampler.__init__/", "api/sdr.Resampler.__repr__/", "api/sdr.Resampler.__str__/", "api/sdr.Resampler.delay/", "api/sdr.Resampler.down/", "api/sdr.Resampler.method/", "api/sdr.Resampler.polyphase_taps/", "api/sdr.Resampler.rate/", "api/sdr.Resampler.reset/", "api/sdr.Resampler.taps/", "api/sdr.Resampler.up/", "api/sdr.albersheim/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.barker/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.db/", "api/sdr.design_bandpass_fir/", "api/sdr.design_bandstop_fir/", "api/sdr.design_frac_delay_fir/", "api/sdr.design_highpass_fir/", "api/sdr.design_lowpass_fir/", "api/sdr.design_multirate_fir/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.downsample/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.euclidean/", "api/sdr.evm/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.hadamard/", "api/sdr.half_sine/", "api/sdr.hamming/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.linear/", "api/sdr.mix/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.percent/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.eye/", "api/sdr.plot.filter/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.magnitude_response/", "api/sdr.plot.p_d/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.phase_tree/", "api/sdr.plot.raster/", "api/sdr.plot.roc/", "api/sdr.plot.ser/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.polyphase_decompose/", "api/sdr.ppb/", "api/sdr.ppm/", "api/sdr.raised_cosine/", "api/sdr.rectangular/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.to_complex_bb/", "api/sdr.to_real_pb/", "api/sdr.unpack/", "api/sdr.upsample/", "api/sdr.walsh/", "api/sdr.wavelength/", "api/sdr.zadoff_chu/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/formatting/", "development/installation/", "development/unit-tests/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})