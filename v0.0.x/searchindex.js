Search.setIndex({"titles": ["Conversions", "Data manipulation", "Detection", "Digital signal processing", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.DDS", "sdr.DDS.__call__", "sdr.DDS.__init__", "sdr.DDS.nco", "sdr.DDS.reset", "sdr.DDS.step", "sdr.Decimator", "sdr.Decimator.__call__", "sdr.Decimator.__init__", "sdr.Decimator.__repr__", "sdr.Decimator.__str__", "sdr.Decimator.method", "sdr.Decimator.polyphase_taps", "sdr.Decimator.rate", "sdr.Decimator.reset", "sdr.Decimator.taps", "sdr.EnergyDetector", "sdr.EnergyDetector.p_d", "sdr.EnergyDetector.p_fa", "sdr.EnergyDetector.roc", "sdr.EnergyDetector.threshold", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__call__", "sdr.FIR.__init__", "sdr.FIR.__len__", "sdr.FIR.__repr__", "sdr.FIR.__str__", "sdr.FIR.delay", "sdr.FIR.flush", "sdr.FIR.frequency_response", "sdr.FIR.frequency_response_log", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.reset", "sdr.FIR.state", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__call__", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__call__", "sdr.IIR.__init__", "sdr.IIR.__repr__", "sdr.IIR.__str__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.state", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.Interpolator", "sdr.Interpolator.__call__", "sdr.Interpolator.__init__", "sdr.Interpolator.__repr__", "sdr.Interpolator.__str__", "sdr.Interpolator.method", "sdr.Interpolator.polyphase_taps", "sdr.Interpolator.rate", "sdr.Interpolator.reset", "sdr.Interpolator.taps", "sdr.LinearModulation", "sdr.LinearModulation.__init__", "sdr.LinearModulation.__repr__", "sdr.LinearModulation.__str__", "sdr.LinearModulation.ber", "sdr.LinearModulation.bps", "sdr.LinearModulation.decide_symbols", "sdr.LinearModulation.demodulate", "sdr.LinearModulation.map_symbols", "sdr.LinearModulation.modulate", "sdr.LinearModulation.order", "sdr.LinearModulation.phase_offset", "sdr.LinearModulation.pulse_shape", "sdr.LinearModulation.rx_filter", "sdr.LinearModulation.ser", "sdr.LinearModulation.sps", "sdr.LinearModulation.symbol_map", "sdr.LinearModulation.tx_filter", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__call__", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__call__", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.reset", "sdr.NCO.step", "sdr.OQPSK", "sdr.OQPSK.__init__", "sdr.OQPSK.__repr__", "sdr.OQPSK.__str__", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.__repr__", "sdr.PSK.__str__", "sdr.PSK.ber", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.PiMPSK", "sdr.PiMPSK.__init__", "sdr.Q", "sdr.Qinv", "sdr.ReplicaCorrelator", "sdr.ReplicaCorrelator.p_d", "sdr.ReplicaCorrelator.p_fa", "sdr.ReplicaCorrelator.roc", "sdr.ReplicaCorrelator.threshold", "sdr.albersheim", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.barker", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.db", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.downsample", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.evm", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.half_sine", "sdr.hexdump", "sdr.iq_imbalance", "sdr.linear", "sdr.mix", "sdr.multirate_taps", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.eye", "sdr.plot.filter", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.magnitude_response", "sdr.plot.p_d", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.raster", "sdr.plot.roc", "sdr.plot.ser", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.polyphase_matrix", "sdr.raised_cosine", "sdr.rectangular", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.to_complex_bb", "sdr.to_real_pb", "sdr.unpack", "sdr.upsample", "sdr.wavelength", "sdr.zadoff_chu", "Sequences", "Simulation", "Synchronization", "Documentation", "Installation", "Linter", "Unit Tests", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250], "db": [0, 4, 5, 9, 20, 22, 43, 45, 47, 49, 50, 51, 53, 111, 121, 142, 146, 150, 152, 154, 159, 161, 163, 164, 165, 166, 174, 179, 180, 182, 183, 184, 186, 187, 191, 192, 194, 196, 197, 198, 199, 200, 201, 207, 213, 223, 226, 227, 244, 246, 247, 249], "x": [0, 1, 3, 5, 6, 7, 8, 9, 26, 27, 32, 33, 42, 47, 49, 54, 55, 71, 72, 78, 80, 97, 98, 107, 114, 116, 125, 128, 134, 136, 142, 146, 154, 156, 157, 158, 164, 165, 168, 171, 173, 174, 175, 176, 177, 178, 181, 184, 185, 191, 192, 193, 195, 196, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 214, 216, 217, 223, 225, 230, 231, 235, 238, 244, 245, 246, 250], "arraylik": [0, 1, 2, 3, 4, 5, 6, 7, 8, 26, 27, 32, 33, 34, 42, 43, 44, 45, 46, 47, 49, 54, 55, 56, 71, 72, 75, 78, 79, 80, 81, 97, 98, 99, 107, 108, 111, 113, 114, 115, 116, 121, 125, 128, 134, 136, 142, 143, 146, 147, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 223, 225, 226, 227, 228, 229, 230, 231, 235], "ndarrai": [0, 1, 2, 3, 4, 6, 8, 26, 27, 31, 32, 33, 38, 41, 42, 43, 44, 45, 46, 47, 52, 54, 55, 61, 62, 63, 64, 67, 68, 70, 71, 72, 77, 78, 80, 84, 85, 86, 87, 89, 91, 93, 94, 96, 97, 98, 103, 106, 107, 111, 113, 114, 115, 116, 119, 121, 123, 125, 128, 134, 136, 141, 142, 146, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235], "convert": [0, 3, 107, 113, 115, 142, 146, 154, 174, 179, 180, 182, 183, 190, 192, 220, 226, 227, 228, 229], "linear": [0, 97, 99, 102, 107, 108, 142, 146, 154, 165, 174, 192, 208, 212, 214, 216, 248, 249], "unit": [0, 26, 32, 54, 68, 78, 94, 97, 125, 134, 137, 138, 139, 143, 147, 155, 165, 166, 174, 175, 176, 181, 192, 215, 217, 238, 242, 243, 245, 248], "ebn0_to_esn0": [0, 121, 152, 179, 246, 249], "ebn0": [0, 7, 107, 111, 142, 146, 150, 154, 166, 179, 180, 200, 246], "bp": [0, 107, 112, 142, 146, 154, 179, 180, 182, 226, 246], "int": [0, 1, 3, 6, 7, 26, 31, 32, 34, 39, 47, 49, 50, 53, 54, 57, 60, 62, 63, 64, 65, 68, 71, 74, 78, 86, 87, 89, 90, 94, 97, 99, 104, 107, 108, 112, 117, 122, 134, 141, 142, 143, 146, 147, 154, 155, 165, 167, 170, 175, 176, 178, 179, 180, 182, 183, 187, 188, 189, 190, 194, 195, 202, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 220, 221, 222, 224, 226, 227, 230, 231, 233, 234, 246], "ebn0_to_snr": [0, 142, 146, 154, 180, 249], "esn0_to_ebn0": [0, 111, 150, 182, 249], "esn0": [0, 7, 107, 121, 142, 146, 152, 154, 182, 183, 213, 246], "esn0_to_snr": [0, 183, 246, 249], "sp": [0, 6, 7, 107, 108, 114, 116, 122, 142, 143, 146, 147, 154, 155, 180, 183, 187, 189, 202, 221, 222, 224, 226, 227, 228, 229, 244, 246, 247], "1": [0, 3, 6, 8, 9, 16, 19, 23, 25, 26, 28, 32, 34, 35, 36, 38, 41, 42, 43, 45, 46, 47, 54, 57, 58, 59, 60, 62, 63, 78, 79, 82, 83, 86, 87, 97, 98, 99, 100, 101, 103, 106, 107, 108, 113, 114, 115, 116, 123, 125, 129, 130, 134, 137, 142, 143, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 241, 242, 243, 244, 245, 246, 247, 250], "snr_to_ebn0": [0, 111, 150, 166, 226, 249], "snr": [0, 2, 4, 7, 42, 43, 45, 47, 49, 50, 51, 52, 53, 142, 146, 154, 163, 165, 166, 207, 226, 227, 228, 229, 235, 246, 249], "snr_to_esn0": [0, 121, 152, 227, 249], "pack": [1, 47, 49, 142, 146, 154, 190, 195, 248, 249], "bpe": [1, 195, 230], "binari": [1, 4, 6, 143, 147, 153, 155, 167, 168, 169, 170, 171, 172, 177, 195, 216, 230, 235, 246, 248, 249], "arrai": [1, 38, 41, 47, 99, 103, 106, 108, 142, 143, 146, 147, 153, 154, 155, 167, 168, 170, 171, 175, 176, 177, 188, 195, 217, 220, 230, 243], "an": [1, 2, 3, 4, 32, 42, 54, 64, 78, 79, 81, 89, 97, 98, 108, 143, 147, 150, 152, 155, 158, 166, 195, 200, 205, 213, 230, 238, 239, 248], "multipl": [1, 195, 230, 246, 249], "bit": [1, 5, 7, 47, 49, 52, 107, 111, 112, 142, 143, 146, 147, 150, 153, 154, 155, 166, 168, 169, 171, 172, 179, 180, 182, 190, 195, 200, 226, 230, 248, 249], "per": [1, 27, 33, 55, 98, 107, 108, 112, 114, 116, 122, 136, 142, 143, 146, 147, 154, 155, 165, 166, 179, 180, 182, 183, 185, 187, 189, 190, 195, 201, 202, 221, 222, 224, 225, 226, 227, 230, 244, 247, 249], "element": [1, 190, 195, 230], "unpack": [1, 47, 49, 190, 230, 246, 248, 249], "hexdump": [1, 47, 190, 248, 249], "byte": [1, 190], "width": [1, 190], "16": [1, 150, 152, 153, 179, 180, 182, 190, 200, 213, 220, 221, 224, 226, 227, 244, 249], "str": [1, 32, 35, 36, 54, 58, 59, 78, 82, 83, 97, 100, 101, 107, 109, 110, 142, 144, 145, 146, 148, 149, 154, 190, 202, 208, 211, 214], "return": [1, 6, 9, 17, 19, 22, 23, 27, 31, 32, 33, 35, 36, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 68, 72, 78, 80, 82, 83, 86, 87, 89, 94, 97, 98, 100, 101, 107, 109, 110, 111, 113, 114, 115, 116, 121, 128, 136, 141, 142, 144, 145, 146, 148, 149, 150, 152, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 246, 249], "specifi": [1, 47, 50, 51, 53, 165, 166, 177, 190, 242, 243], "class": [2, 3, 5, 6, 9, 26, 32, 42, 47, 49, 50, 51, 52, 53, 54, 71, 78, 97, 107, 125, 134, 142, 146, 154, 158, 236, 242, 243, 246, 248, 249], "replicacorrel": [2, 158, 159, 160, 161, 162], "implement": [2, 3, 6, 26, 32, 42, 54, 71, 78, 97, 107, 125, 131, 134, 142, 146, 154, 158, 163, 236, 241], "clairvoy": [2, 158], "replica": [2, 158], "correl": [2, 158, 167, 233], "energydetector": [2, 42, 43, 44, 45, 46], "energi": [2, 42, 111, 121, 150, 152, 158, 159, 160, 161, 162, 166, 179, 180, 181, 182, 183, 187, 189, 200, 213, 221, 222, 224, 226, 227, 248, 249], "albersheim": [2, 163], "p_d": [2, 7, 42, 43, 45, 158, 159, 161, 163, 207, 212], "p_fa": [2, 7, 42, 43, 44, 45, 46, 158, 159, 160, 161, 162, 163, 212], "estim": [2, 107, 113, 114, 142, 146, 154, 163, 208, 214, 245], "minimum": [2, 163], "requir": [2, 33, 55, 98, 163, 237, 238, 239, 240], "singl": [2, 45, 150, 152, 163], "sampl": [2, 3, 9, 16, 24, 26, 27, 28, 31, 32, 33, 43, 44, 45, 46, 54, 55, 60, 62, 63, 64, 68, 71, 75, 86, 87, 89, 94, 97, 98, 99, 107, 108, 114, 116, 122, 125, 129, 132, 134, 136, 137, 138, 141, 142, 143, 146, 147, 154, 155, 163, 165, 178, 180, 183, 185, 187, 189, 193, 202, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 217, 221, 222, 224, 225, 226, 227, 228, 229, 231, 235, 241, 244, 245, 247, 248, 249], "given": [2, 42, 47, 49, 50, 51, 53, 71, 72, 158, 163, 184, 242, 243], "n_": [2, 43, 44, 45, 46, 163], "nc": [2, 43, 44, 45, 46, 163], "non": [2, 33, 43, 44, 45, 46, 55, 98, 163, 189, 222], "coher": [2, 43, 44, 45, 46, 163], "combin": [2, 163], "achiev": [2, 3, 163, 194, 220, 246, 247], "probabl": [2, 7, 42, 43, 44, 45, 46, 156, 157, 158, 159, 160, 161, 162, 163, 168, 169, 171, 172, 177, 207, 212, 235, 249], "fals": [2, 5, 7, 32, 34, 35, 36, 42, 43, 44, 45, 46, 54, 56, 58, 59, 71, 73, 78, 79, 81, 82, 83, 97, 98, 99, 100, 101, 150, 152, 158, 159, 160, 161, 162, 163, 164, 168, 171, 177, 193, 198, 199, 201, 208, 212, 214, 217, 223, 243, 247], "alarm": [2, 42, 43, 44, 45, 46, 158, 159, 160, 161, 162, 163, 212], "p_": [2, 7, 42, 43, 44, 45, 46, 150, 152, 158, 159, 160, 161, 162, 163, 164, 165, 174, 177, 184, 192, 196, 198, 200, 208, 212, 213], "fa": [2, 7, 42, 43, 44, 45, 46, 158, 159, 160, 161, 162, 163, 212], "thi": [2, 9, 27, 32, 49, 50, 51, 53, 54, 78, 97, 107, 108, 123, 136, 142, 143, 146, 147, 153, 154, 155, 163, 165, 166, 178, 184, 186, 194, 202, 206, 208, 211, 214, 217, 231, 237, 238, 239, 240, 241, 243, 245, 246, 247], "function": [2, 7, 8, 9, 18, 54, 78, 79, 125, 156, 157, 163, 166, 178, 187, 200, 207, 208, 212, 213, 214, 231, 239, 242, 243, 245, 247, 248, 249], "": [2, 3, 7, 9, 17, 19, 20, 21, 23, 24, 32, 42, 49, 50, 51, 52, 53, 54, 62, 63, 68, 78, 86, 87, 94, 97, 107, 108, 113, 114, 115, 116, 142, 146, 154, 158, 160, 162, 163, 165, 166, 180, 183, 184, 185, 191, 201, 202, 203, 204, 206, 208, 209, 210, 211, 214, 215, 217, 218, 225, 226, 227, 228, 229, 240, 241, 244, 246, 248], "equat": [2, 17, 19, 20, 21, 22, 23, 43, 44, 46, 78, 142, 146, 154, 159, 160, 162, 163, 186], "fir": [3, 32, 33, 34, 35, 36, 38, 40, 41, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 103, 105, 106, 194, 202, 203, 204, 205, 206, 209, 210, 215, 219, 220, 244, 248, 249], "finit": [3, 32, 54, 97, 248, 249], "impuls": [3, 7, 32, 54, 64, 78, 89, 97, 187, 203, 205, 217, 247, 248, 249], "respons": [3, 7, 32, 54, 62, 63, 64, 68, 78, 86, 87, 89, 94, 97, 187, 203, 204, 205, 206, 210, 215, 247, 248, 249], "iir": [3, 7, 9, 18, 63, 64, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 125, 131, 203, 204, 205, 206, 209, 210, 215, 219, 242, 245, 248, 249], "infinit": [3, 78, 248, 249], "interpol": [3, 32, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 124, 142, 146, 154, 194, 202, 220, 231, 244, 246, 248, 249], "polyphas": [3, 32, 33, 34, 38, 41, 97, 98, 99, 103, 106, 178, 194, 220, 231, 248, 249], "decim": [3, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 107, 108, 113, 114, 115, 116, 120, 123, 142, 143, 146, 147, 153, 154, 155, 178, 194, 220, 246, 248, 249], "multirate_tap": [3, 34, 99, 194, 249], "p": [3, 4, 8, 156, 157, 168, 169, 171, 172, 177, 194, 220, 235], "q": [3, 8, 142, 156, 157, 158, 159, 160, 162, 194, 220, 233, 249], "comput": [3, 8, 32, 42, 43, 44, 45, 46, 107, 111, 121, 142, 146, 150, 152, 154, 156, 157, 158, 159, 160, 161, 162, 165, 186, 194, 242, 243, 245, 247], "ration": [3, 194, 220], "polyphase_matrix": [3, 220, 249], "tap": [3, 32, 34, 38, 41, 54, 59, 70, 71, 77, 78, 84, 85, 97, 99, 103, 106, 220, 242, 243], "h_i": [3, 32, 34, 38, 41, 54, 56, 70, 97, 99, 103, 106, 220, 242], "matrix": [3, 177, 220, 235], "h_": [3, 9, 32, 38, 41, 97, 103, 106, 220, 245], "i": [3, 9, 16, 25, 32, 33, 34, 38, 41, 42, 44, 45, 46, 47, 52, 54, 55, 56, 64, 68, 69, 70, 71, 76, 78, 81, 85, 89, 94, 95, 97, 98, 99, 103, 106, 108, 125, 129, 130, 132, 142, 143, 146, 147, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 172, 174, 177, 179, 180, 182, 183, 185, 186, 187, 189, 190, 191, 192, 195, 197, 198, 199, 201, 202, 203, 205, 206, 208, 211, 214, 215, 217, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250], "j": [3, 9, 26, 32, 38, 41, 78, 81, 84, 97, 103, 106, 142, 146, 154, 165, 177, 191, 193, 220, 233, 242, 243, 245], "farrowresampl": [3, 71, 72, 73, 74, 75, 76, 77, 241, 249], "cubic": [3, 71], "farrow": [3, 71, 72, 73, 74, 75, 76, 77, 248, 249], "arbitrari": [3, 6, 71, 72, 73, 74, 75, 76, 77, 107, 248, 249], "mix": [3, 193, 248, 249], "freq": [3, 4, 185, 193, 197, 232, 235, 241, 245], "float": [3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 42, 45, 47, 49, 50, 51, 53, 62, 63, 71, 72, 78, 79, 86, 87, 88, 107, 108, 118, 125, 126, 127, 129, 130, 132, 134, 135, 137, 138, 139, 142, 143, 146, 147, 151, 154, 155, 158, 161, 164, 165, 166, 168, 171, 173, 181, 184, 185, 187, 191, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 206, 208, 209, 210, 211, 214, 216, 217, 221, 223, 224, 225, 232, 235], "0": [3, 6, 8, 16, 26, 28, 32, 33, 38, 41, 42, 45, 47, 54, 55, 56, 58, 59, 62, 63, 70, 78, 79, 81, 82, 83, 84, 85, 86, 87, 97, 98, 99, 103, 106, 107, 108, 113, 114, 115, 116, 123, 129, 134, 137, 142, 143, 146, 147, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 191, 192, 193, 195, 197, 201, 202, 203, 204, 205, 206, 209, 210, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250], "time": [3, 5, 9, 16, 17, 19, 20, 21, 22, 23, 54, 78, 125, 129, 142, 146, 154, 164, 165, 173, 177, 178, 181, 183, 185, 187, 191, 193, 196, 198, 199, 202, 203, 208, 211, 214, 217, 221, 223, 224, 225, 227, 228, 229, 231, 235, 241, 242, 243, 247, 248, 249], "domain": [3, 5, 164, 165, 173, 178, 181, 185, 191, 193, 196, 198, 199, 203, 208, 211, 214, 217, 223, 225, 228, 229, 231, 235, 248, 249], "n": [3, 5, 6, 7, 8, 9, 26, 27, 31, 32, 33, 42, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 78, 80, 81, 84, 86, 87, 89, 90, 94, 97, 98, 107, 108, 114, 116, 119, 120, 124, 125, 128, 134, 136, 141, 142, 143, 146, 147, 154, 155, 156, 157, 158, 160, 162, 164, 165, 166, 167, 170, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 191, 193, 194, 196, 198, 199, 202, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 217, 223, 225, 226, 227, 228, 229, 231, 233, 234, 235, 245, 247, 248], "complex": [3, 5, 7, 26, 27, 31, 42, 43, 44, 45, 46, 107, 108, 113, 114, 115, 116, 123, 142, 143, 146, 147, 153, 154, 155, 158, 159, 160, 161, 162, 165, 166, 178, 184, 191, 193, 201, 202, 211, 216, 217, 228, 229, 231, 235, 241, 242, 243, 245, 246, 248, 249], "exponenti": [3, 26, 27, 31, 178, 193, 228, 229, 231, 241, 242, 243], "real": [3, 43, 44, 46, 156, 157, 159, 160, 162, 165, 193, 202, 211, 217, 228, 229, 241, 242, 243, 245, 248, 249], "sinusoid": [3, 146, 165, 193, 228, 229, 243, 249], "to_complex_bb": [3, 228, 249], "x_r": [3, 228, 229], "passband": [3, 187, 189, 221, 222, 224, 228, 229, 244, 249], "center": [3, 189, 217, 222, 228, 229, 249], "f_": [3, 9, 16, 24, 33, 62, 63, 86, 87, 98, 107, 108, 122, 142, 143, 146, 147, 154, 155, 178, 180, 183, 185, 187, 193, 202, 203, 204, 206, 208, 209, 210, 211, 214, 217, 225, 226, 227, 228, 229, 231, 241, 242, 243, 245, 247], "r": [3, 32, 33, 34, 38, 39, 41, 71, 72, 97, 98, 99, 103, 104, 106, 166, 178, 179, 180, 182, 184, 187, 193, 221, 224, 226, 228, 229, 231, 237, 238, 239, 240, 243, 244, 245, 247], "4": [3, 17, 19, 32, 38, 41, 43, 45, 47, 63, 82, 83, 87, 97, 98, 103, 106, 142, 143, 146, 150, 151, 152, 153, 154, 158, 159, 160, 161, 162, 163, 165, 166, 167, 169, 170, 172, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 197, 200, 201, 202, 203, 204, 205, 206, 209, 210, 213, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 237, 238, 241, 243, 244, 246], "rate": [3, 5, 7, 9, 16, 24, 32, 33, 34, 36, 39, 47, 48, 49, 51, 52, 62, 63, 71, 72, 86, 87, 97, 98, 99, 101, 104, 107, 111, 121, 142, 146, 150, 152, 154, 178, 179, 180, 182, 185, 193, 194, 200, 202, 203, 204, 206, 208, 209, 210, 211, 213, 214, 217, 220, 225, 226, 228, 229, 231, 235, 248, 249], "baseband": [3, 7, 9, 142, 146, 154, 193, 202, 228, 229, 244, 245, 249], "x_c": [3, 228, 229], "c": [3, 9, 17, 19, 20, 21, 22, 23, 49, 50, 51, 52, 53, 107, 108, 123, 125, 142, 146, 153, 154, 166, 169, 172, 186, 197, 216, 228, 229, 232, 245], "2": [3, 6, 7, 9, 17, 19, 22, 32, 35, 36, 38, 41, 42, 43, 44, 45, 46, 47, 54, 58, 59, 60, 62, 63, 82, 83, 86, 87, 97, 98, 100, 101, 103, 106, 107, 108, 117, 142, 143, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 238, 240, 241, 242, 243, 244, 245, 246, 247], "to_real_pb": [3, 229, 244, 249], "2f_": [3, 229], "upsampl": [3, 97, 231, 249], "factor": [3, 5, 9, 16, 25, 108, 125, 129, 130, 143, 147, 155, 173, 178, 231, 245], "downsampl": [3, 178, 249], "bsc_capac": [4, 172, 249], "calcul": [4, 5, 166, 169, 172, 184, 186, 197, 232, 249], "symmetr": [4, 171, 172, 177, 228, 229, 235, 248], "bsc": [4, 171, 172, 177, 235, 248, 249], "bec_capac": [4, 169, 249], "erasur": [4, 168, 169, 177, 235, 248], "bec": [4, 168, 169, 177, 235, 248, 249], "awgn_capac": [4, 166, 249], "addit": [4, 165, 166, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 231, 235, 248], "white": [4, 165, 166, 235, 248], "gaussian": [4, 6, 165, 166, 187, 235, 248, 249], "nois": [4, 9, 10, 11, 16, 22, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 111, 121, 125, 129, 132, 142, 146, 150, 152, 154, 158, 159, 160, 161, 162, 165, 166, 179, 180, 182, 183, 200, 213, 226, 227, 235, 245, 248], "awgn": [4, 142, 146, 150, 152, 154, 165, 166, 184, 200, 201, 213, 228, 229, 235, 246, 248, 249], "fspl": [4, 186], "d": [4, 32, 54, 60, 97, 186, 197, 237, 238, 248], "f": [4, 17, 19, 32, 45, 62, 63, 86, 87, 97, 163, 165, 185, 186, 187, 193, 197, 225, 232, 233, 241, 242, 243, 244, 245, 246, 247], "free": [4, 142, 146, 154, 186, 248], "space": [4, 63, 87, 186, 248], "wavelength": [4, 232, 249], "lambda": [4, 186, 232], "electromagnet": [4, 232], "wave": [4, 232], "frequenc": [4, 9, 17, 19, 21, 32, 54, 62, 63, 78, 86, 87, 97, 125, 178, 185, 186, 193, 197, 203, 204, 206, 208, 209, 210, 214, 228, 229, 231, 232, 235, 247, 248, 249], "parabolic_antenna": [4, 197, 249], "tupl": [4, 32, 42, 45, 47, 49, 52, 54, 62, 63, 78, 86, 87, 97, 107, 114, 142, 146, 154, 158, 161, 197, 201, 203, 204, 205, 206, 209, 210, 215, 216, 219], "gain": [4, 9, 12, 13, 14, 15, 16, 26, 28, 78, 79, 88, 125, 126, 127, 129, 134, 135, 137, 163, 186, 187, 189, 197, 221, 222, 224, 245, 248], "g": [4, 52, 197, 238], "beamwidth": [4, 197], "theta": [4, 28, 134, 137, 139, 197], "parabol": [4, 197], "reflector": [4, 197], "signal": [5, 7, 9, 17, 19, 22, 23, 26, 27, 32, 33, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 61, 71, 72, 78, 80, 97, 98, 107, 108, 119, 125, 128, 134, 136, 141, 142, 143, 146, 147, 154, 155, 158, 159, 160, 161, 162, 164, 165, 166, 173, 174, 178, 179, 180, 181, 182, 183, 185, 186, 187, 191, 192, 193, 194, 196, 197, 198, 199, 202, 203, 204, 206, 208, 209, 210, 211, 214, 217, 220, 223, 225, 226, 227, 228, 229, 231, 232, 242, 243, 245, 247, 248, 249], "peak_pow": [5, 196, 198, 249], "bool": [5, 7, 32, 34, 43, 44, 45, 46, 54, 56, 69, 71, 73, 76, 78, 79, 81, 95, 97, 99, 150, 152, 159, 160, 161, 162, 164, 193, 198, 199, 201, 210, 211, 216, 217, 223], "peak": [5, 142, 154, 173, 184, 196, 198, 199], "average_pow": [5, 164, 196, 249], "averag": [5, 47, 142, 154, 164, 165, 166, 184, 196, 208], "papr": [5, 142, 154, 196, 244, 249], "ratio": [5, 22, 43, 45, 47, 49, 50, 51, 52, 53, 111, 121, 142, 150, 152, 154, 159, 161, 165, 166, 179, 180, 182, 183, 196, 200, 213, 226, 227], "peak_voltag": [5, 173, 199, 249], "rms_voltag": [5, 173, 223, 249], "root": [5, 6, 108, 143, 147, 155, 184, 202, 217, 223, 224, 233, 234, 242, 248], "mean": [5, 184, 208, 214, 223, 247], "squar": [5, 6, 108, 143, 147, 155, 184, 186, 197, 217, 223, 224, 242], "rm": [5, 173, 184, 223], "crest_factor": [5, 173, 196, 249], "crest": [5, 173], "errorr": [5, 47, 48, 49, 50, 51, 52, 53, 246, 249], "A": [5, 9, 17, 19, 20, 21, 22, 23, 25, 33, 47, 54, 55, 98, 108, 125, 143, 147, 155, 163, 170, 188, 190, 191, 197, 221, 224, 236, 245], "error": [5, 7, 9, 15, 16, 22, 47, 48, 49, 51, 52, 53, 107, 111, 121, 125, 129, 142, 146, 150, 152, 154, 163, 172, 184, 200, 213, 245, 248, 249], "ber": [5, 7, 47, 107, 111, 142, 146, 150, 154, 200, 246, 248, 249], "symbol": [5, 7, 47, 49, 52, 97, 107, 108, 112, 113, 114, 115, 116, 121, 122, 123, 142, 143, 146, 147, 150, 152, 153, 154, 155, 165, 179, 180, 182, 183, 184, 185, 187, 189, 201, 202, 213, 216, 221, 222, 224, 226, 227, 244, 247, 248, 249], "ser": [5, 7, 47, 107, 121, 142, 146, 152, 154, 213, 246, 248, 249], "evm": [5, 184, 248, 249], "x_hat": [5, 7, 47, 49, 107, 114, 142, 146, 154, 184, 201, 246], "ref": [5, 163, 184, 187, 194], "vector": [5, 47, 75, 184, 208, 214, 248, 249], "magnitud": [5, 7, 167, 184, 203, 206, 233, 248, 249], "hat": [5, 7, 49, 107, 113, 114, 142, 146, 154, 184, 201, 216], "k": [5, 6, 7, 49, 107, 108, 112, 113, 114, 115, 116, 117, 142, 146, 147, 154, 155, 175, 176, 179, 180, 182, 184, 201, 216, 226, 244, 247], "linearmodul": [6, 7, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 146, 216, 249], "phase": [6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 107, 108, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 150, 151, 152, 153, 154, 155, 163, 185, 191, 193, 209, 210, 235, 248], "amplitud": [6, 107, 108, 191, 235, 241, 245], "psk": [6, 142, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 165, 184, 185, 191, 200, 201, 202, 213, 216, 225, 244, 248, 249], "shift": [6, 142, 146, 150, 151, 152, 153, 154, 233, 234, 242, 243, 248], "kei": [6, 142, 146, 150, 151, 152, 153, 154, 248], "demodul": [6, 107, 114, 142, 146, 154, 246, 249], "pimpsk": [6, 154, 155, 249], "pi": [6, 32, 82, 83, 97, 98, 142, 146, 154, 155, 165, 178, 186, 187, 191, 193, 197, 203, 204, 205, 206, 209, 210, 215, 217, 219, 228, 229, 231, 233, 241, 242, 243, 245, 248, 249], "m": [6, 78, 81, 85, 107, 108, 112, 113, 114, 115, 116, 117, 123, 142, 146, 147, 153, 154, 155, 177, 179, 180, 182, 186, 216, 226, 237, 238, 239, 240, 248, 249], "oqpsk": [6, 142, 143, 144, 145, 249], "offset": [6, 17, 19, 26, 28, 32, 97, 98, 107, 108, 118, 134, 137, 139, 142, 143, 146, 147, 151, 154, 155, 185, 193, 217, 225, 235, 245, 248, 249], "quadratur": [6, 142, 191], "rectangular": [6, 108, 143, 147, 155, 222, 244, 247, 248, 249], "span": [6, 7, 108, 143, 147, 155, 187, 189, 202, 221, 222, 224, 244, 247], "half_sin": [6, 108, 143, 147, 155, 189, 249], "half": [6, 108, 142, 143, 147, 155, 189, 194, 197, 248, 249], "sine": [6, 108, 143, 147, 155, 189, 248, 249], "time_bandwidth": [6, 187], "raised_cosin": [6, 108, 143, 147, 155, 202, 221, 247, 249], "alpha": [6, 187, 218, 221, 224, 244, 247], "rais": [6, 108, 143, 147, 155, 202, 217, 221, 224, 242, 248], "cosin": [6, 108, 143, 147, 155, 202, 217, 221, 224, 242, 248], "rc": [6, 108, 143, 147, 155, 221], "root_raised_cosin": [6, 58, 59, 108, 143, 147, 155, 202, 203, 204, 205, 206, 209, 210, 215, 217, 219, 224, 242, 244, 246, 247, 249], "srrc": [6, 108, 142, 143, 146, 147, 154, 155, 202, 217, 224, 244], "binary_cod": [6, 170, 249], "gener": [6, 142, 146, 154, 165, 170, 188, 212, 237, 246, 249], "code": [6, 32, 35, 54, 58, 78, 82, 97, 100, 107, 109, 142, 143, 144, 146, 147, 148, 153, 154, 155, 167, 170, 179, 180, 182, 188, 201, 216, 226, 234, 238, 246, 249], "length": [6, 7, 32, 33, 45, 54, 55, 57, 64, 68, 80, 97, 98, 99, 108, 114, 116, 143, 147, 155, 167, 170, 187, 188, 189, 194, 203, 205, 208, 211, 214, 215, 221, 222, 224, 228, 233, 234, 239, 241, 244, 247], "gray_cod": [6, 188, 249], "grai": [6, 142, 143, 146, 147, 153, 154, 155, 188, 201, 216, 246, 248], "diff_encod": [6, 150, 152, 175, 176, 249], "y_prev": [6, 175, 176], "differenti": [6, 150, 152, 175, 176, 217, 248, 249], "input": [6, 9, 17, 19, 22, 23, 26, 27, 32, 33, 34, 54, 55, 56, 64, 67, 68, 71, 72, 73, 75, 78, 79, 80, 81, 89, 94, 97, 98, 99, 125, 128, 134, 136, 142, 146, 150, 152, 154, 156, 165, 166, 168, 169, 171, 172, 174, 175, 176, 177, 178, 192, 195, 205, 215, 230, 231, 235, 242, 243, 245], "data": [6, 175, 176, 190, 195, 230, 248], "diff_decod": [6, 175, 176, 249], "y": [6, 26, 27, 31, 32, 33, 54, 55, 61, 72, 78, 80, 97, 98, 125, 128, 134, 136, 141, 165, 168, 171, 175, 176, 177, 178, 185, 191, 193, 201, 206, 208, 214, 216, 217, 225, 231, 245, 246], "decod": [6, 175], "use_styl": [7, 218], "appli": [7, 32, 97, 108, 185, 191, 201, 202, 208, 214, 216, 217, 218, 225, 235], "default": [7, 64, 68, 143, 147, 153, 155, 201, 206, 208, 211, 214, 216, 218, 246], "matplotlib": [7, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 241, 242, 243, 244, 245, 246, 247, 248], "rcparam": [7, 218], "time_domain": [7, 32, 97, 98, 142, 146, 154, 165, 178, 193, 217, 228, 229, 231, 244, 246, 247, 249], "raster": [7, 202, 211, 248, 249], "none": [7, 32, 45, 47, 51, 54, 64, 68, 71, 75, 97, 107, 111, 125, 133, 142, 146, 150, 152, 154, 161, 165, 166, 177, 195, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 230, 235, 241, 244, 246], "periodogram": [7, 178, 208, 228, 229, 231, 244, 248, 249], "power": [7, 142, 146, 154, 164, 165, 166, 174, 184, 187, 189, 192, 196, 197, 198, 208, 221, 222, 224, 247, 248], "densiti": [7, 22, 208, 244, 247], "xx": [7, 208], "us": [7, 26, 29, 32, 34, 37, 40, 54, 56, 61, 66, 71, 73, 78, 79, 81, 92, 97, 98, 99, 102, 105, 107, 113, 114, 125, 131, 142, 146, 154, 166, 169, 172, 184, 190, 194, 195, 201, 202, 203, 205, 207, 208, 214, 215, 230, 237, 238, 239, 240, 242, 243, 246, 247, 248, 250], "welch": [7, 208, 214], "method": [7, 36, 37, 101, 102, 208, 214, 239, 242, 243, 249], "spectrogram": [7, 214, 248, 249], "constel": [7, 142, 146, 151, 154, 165, 184, 185, 191, 201, 225, 233, 248, 249], "heatmap": [7, 201, 246], "symbol_map": [7, 107, 108, 123, 142, 146, 151, 153, 154, 184, 216, 217, 246, 249], "map": [7, 107, 108, 115, 123, 142, 146, 153, 154, 184, 216, 248, 249], "ey": [7, 202, 248, 249], "diagram": [7, 9, 26, 32, 97, 125, 134, 175, 176, 202, 248, 249], "kwarg": [7, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219], "e_b": [7, 49, 50, 51, 52, 53, 107, 111, 142, 146, 150, 154, 166, 179, 180, 182, 200, 226, 248], "n_0": [7, 22, 49, 50, 51, 52, 53, 107, 111, 121, 142, 146, 150, 152, 154, 165, 166, 179, 180, 182, 183, 184, 200, 201, 213, 226, 227, 246, 248], "e_": [7, 49, 50, 51, 52, 53, 107, 121, 142, 146, 152, 154, 165, 166, 179, 182, 183, 184, 201, 213, 227, 246, 248], "roc": [7, 42, 45, 158, 161, 212], "receiv": [7, 42, 43, 45, 47, 49, 107, 113, 114, 120, 142, 146, 150, 152, 154, 158, 159, 160, 161, 162, 184, 186, 202, 207, 212], "oper": [7, 42, 45, 158, 161, 212, 249], "characterist": [7, 42, 45, 158, 161, 212], "curv": [7, 42, 45, 150, 152, 158, 161, 200, 212, 213], "enr": [7, 158, 159, 161, 207], "impulse_respons": [7, 32, 54, 64, 78, 89, 97, 187, 189, 194, 205, 221, 222, 224, 242, 243, 247, 249], "h": [7, 32, 42, 54, 56, 58, 59, 62, 63, 64, 78, 86, 87, 89, 97, 107, 108, 119, 120, 124, 125, 142, 143, 146, 147, 154, 155, 158, 187, 194, 202, 203, 205, 206, 210, 220, 244, 245, 247], "step_respons": [7, 32, 54, 68, 78, 94, 97, 215, 242, 243, 245, 249], "step": [7, 26, 27, 31, 32, 54, 68, 78, 94, 97, 134, 136, 141, 203, 215, 248], "zeros_pol": [7, 219, 243, 249], "zero": [7, 32, 33, 54, 61, 75, 78, 79, 82, 83, 96, 97, 98, 99, 125, 189, 195, 203, 204, 205, 206, 209, 210, 215, 217, 219, 222, 228, 242, 244, 245, 247, 248, 249], "pole": [7, 78, 79, 82, 83, 91, 203, 204, 205, 206, 209, 210, 215, 219, 242, 248], "magnitude_respons": [7, 62, 63, 86, 87, 189, 194, 206, 221, 222, 224, 242, 243, 245, 247, 249], "omega": [7, 28, 32, 54, 62, 63, 78, 86, 87, 97, 134, 137, 138, 203, 204, 206, 209, 210, 245], "phase_respons": [7, 62, 63, 86, 87, 210, 249], "angl": [7, 210, 245], "phase_delai": [7, 209, 249], "delai": [7, 26, 32, 33, 36, 54, 55, 59, 60, 71, 97, 98, 101, 125, 134, 175, 176, 189, 204, 209, 222, 245, 248], "tau_": [7, 209], "phi": [7, 107, 108, 118, 142, 143, 146, 147, 151, 154, 155, 185, 191, 193, 209], "group_delai": [7, 204, 242, 243, 249], "group": [7, 204, 248], "tau_g": [7, 204], "complementari": [8, 156, 157], "cumul": [8, 156, 157], "distribut": [8, 156, 157], "standard": [8, 156, 157], "normal": [8, 9, 11, 16, 125, 129, 132, 156, 157, 184, 187, 189, 203, 204, 206, 208, 209, 210, 214, 221, 222, 224, 245, 247], "mathcal": [8, 42, 156, 157, 158, 159, 160, 161, 162, 165, 177], "qinv": [8, 156, 157, 249], "invers": [8, 157], "closedlooppl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 236, 245, 249], "defin": [9, 54, 78, 165, 177, 187, 212, 233, 236, 243, 248], "perform": [9, 33, 55, 98, 150, 152, 178, 231, 233, 236, 242, 243, 246, 248], "close": [9, 16, 18, 236, 248, 249], "loop": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 236, 248, 249], "pll": [9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 236, 248, 249], "meant": 9, "analysi": [9, 16, 239, 245, 248, 249], "onli": [9, 33, 40, 55, 61, 66, 71, 75, 92, 98, 105, 143, 147, 153, 155, 165, 186, 189, 211, 222, 240, 245, 246], "block": [9, 26, 32, 97, 125, 134, 175, 176], "bb": [9, 244, 245], "ped": [9, 15, 16, 129, 245], "lf": [9, 245], "lo": [9, 245], "e": [9, 26, 52, 158, 159, 160, 161, 162, 164, 168, 169, 181, 233, 238, 242, 243, 245, 246], "nco": [9, 12, 16, 26, 28, 29, 129, 134, 135, 136, 137, 138, 139, 140, 141, 236, 245, 248, 249], "local": [9, 237, 239, 245], "oscil": [9, 26, 29, 134, 137, 236, 245, 248, 249], "detector": [9, 15, 16, 42, 129, 158, 245], "filter": [9, 13, 14, 16, 18, 32, 33, 34, 37, 38, 40, 41, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103, 105, 106, 107, 114, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 142, 146, 154, 178, 187, 189, 194, 202, 203, 204, 205, 206, 209, 210, 215, 217, 219, 220, 221, 222, 224, 231, 236, 247, 248, 249], "numer": [9, 26, 29, 134, 137, 236, 243, 245, 248, 249], "control": [9, 26, 29, 134, 137, 221, 224, 236, 245, 248, 249], "The": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 74, 75, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 98, 99, 102, 103, 104, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 250], "transfer": [9, 18, 54, 78, 79, 125, 187, 242, 243, 245], "2nd": [9, 125, 129, 236, 245, 249], "order": [9, 32, 33, 36, 47, 52, 54, 55, 59, 65, 71, 74, 78, 83, 90, 97, 98, 99, 101, 107, 108, 117, 125, 129, 142, 146, 147, 154, 155, 165, 179, 180, 182, 184, 185, 187, 201, 202, 211, 221, 224, 225, 226, 236, 243, 244, 245, 246, 249], "proport": [9, 13, 33, 98, 125, 126, 129, 186, 197, 236, 249], "plu": [9, 125, 129, 236, 249], "integr": [9, 14, 43, 44, 45, 46, 125, 127, 129, 163, 236, 240, 243, 249], "z": [9, 26, 54, 78, 125, 134, 175, 176, 233, 242, 243, 245], "k_1": [9, 13, 125, 126, 245], "k_2": [9, 14, 125, 127, 245], "frac": [9, 17, 19, 22, 23, 32, 42, 43, 44, 46, 54, 60, 78, 97, 99, 125, 142, 146, 154, 158, 159, 160, 163, 164, 165, 166, 173, 179, 180, 182, 183, 184, 186, 187, 191, 192, 193, 196, 197, 223, 226, 227, 232, 233, 245], "k_0": [9, 12, 16, 28, 129, 134, 135, 137, 245], "k_p": [9, 15, 16, 129, 245], "refer": [9, 17, 19, 20, 21, 22, 23, 42, 43, 44, 46, 47, 71, 125, 150, 152, 158, 159, 160, 162, 163, 165, 173, 184, 185, 187, 194, 196, 220, 221, 224, 225, 233, 243, 247, 248], "michael": [9, 17, 19, 20, 21, 22, 23, 125, 221, 224], "rice": [9, 17, 19, 20, 21, 22, 23, 125, 221, 224], "digit": [9, 17, 19, 20, 21, 22, 23, 26, 28, 125, 150, 152, 221, 224, 236, 245, 248, 249], "commun": [9, 17, 19, 20, 21, 22, 23, 125, 150, 152, 194, 220, 221, 224, 245, 248], "discret": [9, 17, 19, 20, 21, 22, 23, 125, 165, 177, 183, 221, 224, 227, 235, 241, 245, 248], "approach": [9, 17, 19, 20, 21, 22, 23, 125, 166, 169, 172, 221, 224, 245], "appendix": [9, 125, 221, 224], "lock": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141], "exampl": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 38, 40, 41, 43, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 103, 105, 106, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 150, 151, 152, 153, 154, 156, 157, 159, 161, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 200, 201, 202, 203, 204, 205, 206, 209, 210, 213, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 245], "see": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 40, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 88, 90, 91, 92, 93, 95, 96, 105, 108, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 151, 153, 154, 155, 178, 187, 189, 203, 204, 205, 206, 209, 210, 215, 219, 221, 222, 224, 248], "noise_bandwidth": [9, 16, 125, 129, 132], "damping_factor": [9, 16, 125, 129, 130], "creat": [9, 16, 26, 28, 32, 34, 47, 48, 54, 56, 71, 73, 78, 79, 81, 97, 98, 99, 107, 108, 125, 129, 134, 137, 142, 143, 146, 147, 151, 154, 155, 165, 167, 184, 185, 193, 217, 225, 228, 229, 233, 241, 245, 247], "object": [9, 16, 32, 35, 36, 47, 48, 54, 58, 59, 78, 82, 83, 97, 100, 101, 107, 108, 109, 110, 142, 143, 144, 145, 146, 147, 148, 149, 154, 155, 203, 204, 205, 206, 209, 210, 215, 219, 245, 249], "phase_lock_tim": [9, 23], "frequency_lock_tim": [9, 17], "freq_offset": [9, 17, 19], "lock_tim": [9, 19, 245], "phase_error_vari": [9, 22], "cn0": [9, 22], "varianc": [9, 22, 42, 44, 46, 160, 162, 165], "steadi": [9, 22], "state": [9, 22, 32, 33, 40, 54, 55, 61, 66, 67, 69, 71, 75, 76, 78, 92, 93, 95, 97, 98, 105, 249], "sample_r": [9, 16, 24, 32, 62, 63, 86, 87, 97, 98, 142, 146, 154, 178, 185, 193, 202, 203, 204, 206, 208, 209, 210, 211, 214, 217, 228, 229, 231, 241, 245, 247], "bnt": [9, 11, 245], "bandwidth": [9, 10, 11, 16, 20, 125, 129, 132, 166, 187, 221, 224, 245, 247], "b_n": [9, 10, 11, 16, 17, 19, 22, 23, 125, 129, 132], "t": [9, 11, 16, 42, 125, 129, 132, 158, 187, 190, 239, 241], "bn": [9, 10], "hz": [9, 10, 16, 17, 19, 22, 62, 63, 86, 87, 125, 129, 132, 166, 174, 178, 185, 186, 187, 192, 193, 197, 228, 229, 232, 241], "zeta": [9, 16, 25, 125, 129, 130], "damp": [9, 16, 25, 125, 129, 130, 245], "k0": [9, 12, 16, 26, 28, 129, 134, 135, 137], "kp": [9, 15, 16, 129], "k1": [9, 13, 125, 126, 245], "k2": [9, 14, 125, 127, 245], "repres": [9, 18, 168, 169], "omega_n": [9, 21, 245], "natur": [9, 21], "radian": [9, 20, 21, 22, 26, 28, 154, 245], "omega_3db": [9, 20], "3": [9, 17, 19, 20, 23, 32, 38, 41, 42, 43, 47, 58, 59, 82, 83, 97, 98, 103, 106, 142, 146, 150, 151, 152, 153, 154, 158, 159, 163, 165, 166, 167, 168, 170, 171, 174, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 201, 202, 203, 204, 205, 206, 209, 210, 215, 217, 219, 220, 221, 222, 224, 225, 226, 228, 229, 230, 231, 232, 233, 243, 245, 247, 248], "omega_": [9, 20], "textrm": [9, 20], "properti": [10, 11, 12, 13, 14, 15, 18, 20, 21, 24, 25, 29, 37, 38, 39, 41, 60, 65, 67, 69, 70, 74, 76, 77, 84, 85, 88, 90, 91, 93, 95, 96, 102, 103, 104, 106, 112, 117, 118, 119, 120, 122, 123, 124, 126, 127, 130, 131, 132, 135, 138, 139, 151, 153, 239, 249], "paramet": [16, 17, 19, 22, 27, 28, 31, 33, 34, 43, 44, 45, 46, 49, 50, 51, 53, 55, 56, 62, 63, 64, 68, 72, 73, 75, 79, 80, 81, 86, 87, 89, 94, 98, 99, 108, 111, 113, 114, 115, 116, 121, 128, 129, 136, 137, 141, 143, 147, 150, 152, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233], "where": [16, 33, 55, 98, 108, 125, 129, 132, 147, 155, 158, 165, 166, 177, 179, 180, 182, 187, 226, 233, 242, 243, 248], "period": [16, 125, 129, 132, 233], "second": [16, 17, 19, 23, 47, 125, 129, 132, 187], "critic": [16, 25, 125, 129, 130, 245], "underdamp": [16, 25, 125, 129, 130], "overdamp": [16, 25, 125, 129, 130], "ted": [16, 129], "t_": [17, 19, 23, 72, 187, 247], "fl": [17, 19], "delta": [17, 19, 32, 54, 64, 78, 89, 97, 205, 242, 243], "take": [17, 19, 23], "onto": [17, 19, 23], "39": 17, "pl": [19, 23], "38": 19, "34": 20, "33": 21, "sigma_": [22, 42, 43, 45], "theta_": 22, "carrier": [22, 146], "43": 22, "40": [23, 97, 178], "less": [25, 163], "than": [25, 143, 147, 153, 155, 163, 189, 191, 201, 216, 222], "greater": [25, 221, 224], "dd": [26, 27, 28, 29, 30, 31, 134, 236, 245, 248, 249], "direct": [26, 28, 236, 245, 248, 249], "synthes": [26, 28, 236, 245, 248, 249], "note": [26, 32, 38, 41, 42, 43, 44, 46, 54, 78, 97, 103, 106, 125, 134, 142, 146, 154, 158, 159, 160, 162, 163, 165, 166, 169, 172, 175, 176, 187, 191, 197, 202, 220, 233], "increment": [26, 27, 28, 134, 136, 137, 138, 245], "v": [26, 134, 174, 192, 237], "output": [26, 27, 31, 32, 33, 54, 55, 64, 68, 78, 79, 81, 89, 94, 97, 98, 114, 125, 128, 134, 136, 141, 165, 166, 167, 168, 169, 171, 172, 176, 177, 184, 192, 195, 205, 215, 230, 237, 241, 242, 243, 245], "constant": [26, 28, 125, 134, 137, 138, 208, 214, 243, 245], "accumul": [26, 28, 47, 134, 137, 138, 245], "absolut": [26, 28, 134, 137, 139, 143, 155, 166], "adder": [26, 32, 125, 134, 175, 176, 245], "__call__": [26, 27, 32, 33, 34, 54, 55, 56, 69, 71, 72, 73, 76, 78, 79, 80, 81, 95, 97, 98, 99, 125, 128, 134, 136, 249], "variabl": [26, 27, 134, 136, 190, 245], "reset": [26, 30, 32, 40, 54, 66, 71, 75, 78, 92, 97, 105, 125, 133, 134, 140], "forward": [26, 31, 134, 141], "vari": [27, 136], "number": [31, 43, 44, 45, 46, 47, 49, 50, 53, 62, 63, 64, 68, 86, 87, 89, 94, 107, 108, 112, 122, 141, 142, 143, 146, 147, 154, 155, 163, 165, 179, 180, 182, 187, 189, 190, 195, 201, 202, 203, 204, 205, 206, 208, 209, 210, 214, 215, 221, 222, 224, 226, 230], "equival": [32, 97, 165, 166, 183, 227, 238, 241], "first": [32, 47, 97, 142, 195, 217, 230, 239, 240], "prototyp": [32, 38, 41, 97, 103, 106], "feedforward": [32, 34, 38, 41, 54, 56, 70, 78, 81, 85, 97, 99, 103, 106, 203, 204, 205, 206, 209, 210, 215, 219, 242, 243], "coeffici": [32, 34, 54, 56, 78, 81, 97, 99, 107, 120, 124, 142, 146, 154, 203, 204, 205, 206, 209, 210, 215, 219, 242, 243], "discard": 32, "between": [32, 34, 56, 69, 73, 76, 79, 81, 95, 97, 99, 186, 208, 211, 214, 245, 248], "each": [32, 33, 55, 97, 98, 184, 190, 208, 211, 214], "instead": [32, 97, 201], "decompos": [32, 97], "ar": [32, 33, 34, 38, 41, 42, 47, 49, 50, 51, 53, 55, 56, 63, 73, 79, 81, 87, 97, 98, 99, 103, 106, 107, 108, 120, 124, 142, 143, 146, 147, 154, 155, 158, 166, 168, 169, 171, 172, 186, 189, 195, 201, 202, 203, 204, 206, 208, 209, 210, 211, 214, 216, 217, 218, 220, 222, 228, 229, 237, 238, 239, 241, 243, 245, 247, 248, 250], "commut": [32, 97], "parallel": [32, 97], "sum": [32, 42, 54, 78, 158, 247], "prevent": [32, 97, 142, 154], "need": [32, 97, 239, 240], "done": [32, 237], "case": [32, 97, 154, 158], "2x": [32, 97], "6": [32, 38, 41, 47, 58, 59, 82, 83, 97, 98, 103, 106, 142, 146, 153, 154, 159, 160, 162, 163, 170, 174, 177, 178, 179, 180, 184, 186, 188, 190, 192, 197, 201, 202, 203, 204, 205, 206, 209, 210, 215, 216, 217, 219, 220, 221, 224, 228, 229, 231, 233, 240, 242, 243, 245, 246], "5": [32, 38, 41, 42, 43, 44, 45, 46, 47, 58, 59, 97, 98, 103, 106, 142, 146, 154, 159, 161, 163, 165, 168, 170, 171, 172, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 190, 191, 197, 202, 203, 204, 205, 206, 209, 210, 215, 217, 219, 220, 221, 224, 225, 226, 227, 228, 229, 231, 233, 237, 241, 242, 243, 244, 245, 246, 247], "summat": 32, "bottom": [32, 97], "top": [32, 97], "relat": [32, 38, 41, 97, 103, 106, 166, 187], "In": [32, 33, 34, 35, 36, 38, 41, 43, 45, 47, 55, 56, 58, 59, 69, 73, 76, 79, 81, 82, 83, 95, 97, 98, 99, 100, 101, 103, 106, 142, 146, 150, 151, 152, 153, 154, 156, 157, 159, 161, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 200, 201, 202, 203, 204, 205, 206, 209, 210, 213, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 241, 246], "np": [32, 38, 41, 43, 45, 82, 83, 97, 98, 103, 106, 142, 146, 150, 152, 154, 159, 161, 163, 165, 166, 167, 168, 169, 171, 172, 177, 178, 184, 185, 186, 191, 193, 200, 201, 202, 203, 204, 205, 206, 209, 210, 213, 215, 217, 219, 220, 225, 228, 229, 231, 233, 241, 242, 243, 244, 245, 246, 247], "co": [32, 97, 98, 193], "64": [32, 184, 190, 243], "arang": [32, 38, 41, 97, 98, 103, 106, 165, 167, 178, 193, 220, 228, 229, 231, 233, 241, 245], "280": 32, "7": [32, 35, 36, 38, 41, 97, 98, 100, 101, 103, 106, 142, 146, 153, 154, 159, 163, 170, 177, 184, 188, 190, 194, 217, 220, 233, 243], "kaiser": [32, 34, 35, 36, 37, 97, 98, 99, 100, 101, 102], "window": [32, 97, 208, 214], "out": [32, 35, 38, 41, 47, 58, 82, 97, 98, 100, 103, 106, 142, 146, 151, 153, 154, 156, 157, 167, 168, 170, 171, 174, 175, 176, 177, 179, 180, 182, 183, 184, 186, 188, 192, 195, 197, 204, 218, 220, 226, 227, 230, 232], "plt": [32, 43, 45, 97, 98, 142, 146, 150, 151, 152, 153, 154, 159, 161, 163, 165, 166, 167, 169, 172, 178, 184, 185, 186, 187, 189, 191, 193, 194, 200, 201, 202, 203, 204, 205, 206, 209, 210, 213, 215, 216, 217, 219, 221, 222, 224, 225, 228, 229, 231, 233, 241, 242, 243, 244, 245, 246, 247], "figur": [32, 43, 45, 97, 98, 142, 146, 150, 151, 152, 153, 154, 159, 161, 163, 165, 166, 167, 169, 172, 178, 184, 185, 186, 187, 189, 191, 193, 194, 200, 201, 202, 203, 204, 205, 206, 209, 210, 213, 215, 216, 217, 218, 219, 221, 222, 224, 225, 228, 229, 231, 233, 241, 242, 243, 244, 245, 246, 247], "figsiz": [32, 43, 45, 97, 98, 142, 146, 150, 151, 152, 153, 154, 159, 161, 163, 165, 166, 167, 169, 172, 178, 184, 185, 186, 187, 189, 191, 193, 194, 200, 201, 202, 203, 204, 205, 206, 209, 210, 213, 215, 216, 217, 218, 219, 221, 222, 224, 225, 228, 229, 231, 233, 241, 242, 243, 244, 245, 246, 247], "8": [32, 38, 41, 43, 45, 82, 83, 97, 98, 103, 106, 108, 142, 143, 146, 147, 150, 151, 152, 153, 154, 155, 159, 161, 163, 165, 166, 167, 169, 170, 172, 177, 178, 184, 186, 187, 188, 189, 190, 193, 194, 197, 200, 201, 202, 203, 204, 205, 206, 209, 210, 213, 215, 216, 217, 218, 219, 220, 221, 222, 224, 228, 229, 231, 233, 238, 242, 243, 244, 245, 247], "plot": [32, 43, 45, 62, 63, 64, 68, 86, 87, 89, 94, 97, 98, 142, 146, 150, 151, 152, 153, 154, 159, 161, 165, 166, 167, 169, 172, 178, 184, 185, 186, 187, 189, 191, 193, 194, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 228, 229, 231, 233, 241, 242, 243, 245, 246, 247, 248, 249], "marker": [32, 97, 98, 201, 216, 241, 242, 243, 246], "o": [32, 97, 98, 241], "label": [32, 43, 45, 97, 98, 143, 147, 150, 152, 155, 159, 161, 163, 165, 184, 185, 187, 191, 200, 202, 203, 204, 206, 207, 208, 209, 210, 211, 213, 214, 217, 221, 224, 225, 241, 244, 245, 246, 247], "titl": [32, 97, 150, 152, 163, 165, 166, 167, 169, 172, 178, 184, 185, 191, 193, 200, 213, 217, 225, 228, 229, 231, 233, 241, 244, 245, 246, 247], "tight_layout": [32, 97, 150, 152, 163, 165, 166, 167, 169, 172, 178, 184, 185, 186, 193, 200, 213, 217, 225, 228, 229, 231, 233, 244, 245, 246, 247], "preserv": [32, 34, 56, 69, 73, 76, 79, 81, 95, 97, 99, 202, 211], "call": [32, 33, 34, 55, 56, 69, 73, 76, 79, 81, 95, 97, 98, 99], "true": [32, 43, 44, 45, 46, 97, 98, 142, 146, 150, 152, 154, 159, 160, 161, 162, 163, 164, 166, 168, 169, 171, 172, 177, 186, 193, 198, 199, 201, 210, 211, 216, 218, 223, 244, 246], "y1": [32, 97, 98, 191], "70": [32, 190, 247], "y2": [32, 97, 98, 191], "140": [32, 178], "y3": [32, 97, 98], "210": 32, "y4": [32, 97], "y5": [32, 97], "flush": [32, 33, 54, 55, 61, 97, 98, 249], "y_1": [32, 97, 191], "y_2": [32, 97, 191], "y_3": [32, 97], "y_4": [32, 97], "y_5": [32, 97], "full": [32, 33, 55, 97, 98, 167], "__len__": [32, 54, 57, 97], "__repr__": [32, 35, 54, 58, 78, 82, 97, 100, 107, 109, 142, 144, 146, 148, 154], "style": [32, 35, 54, 58, 78, 82, 97, 100, 107, 109, 142, 144, 146, 148, 154, 218], "__str__": [32, 36, 54, 59, 78, 83, 97, 101, 107, 110, 142, 145, 146, 149, 154], "human": [32, 36, 54, 59, 78, 83, 97, 101, 107, 110, 142, 145, 146, 149, 154], "readabl": [32, 36, 54, 59, 78, 83, 97, 101, 107, 110, 142, 145, 146, 149, 154], "when": [32, 40, 54, 61, 64, 66, 68, 78, 89, 92, 94, 97, 105, 165, 166, 168, 169, 171, 172, 183, 203, 204, 205, 206, 209, 210, 215, 227, 233, 241, 242, 243], "pass": [32, 54, 61, 97, 165, 168, 171, 177, 184, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 235, 237, 238, 242, 243, 249], "through": [32, 54, 61, 97, 142, 154, 168, 171, 177, 235, 242, 243, 245], "indic": [32, 34, 44, 45, 46, 54, 56, 69, 71, 73, 76, 78, 79, 81, 95, 97, 99, 108, 142, 143, 146, 147, 150, 152, 154, 155, 159, 160, 161, 162, 164, 187, 189, 191, 193, 198, 199, 202, 210, 211, 217, 221, 222, 223, 224], "whether": [32, 34, 44, 45, 46, 54, 56, 69, 71, 73, 76, 78, 79, 81, 95, 97, 99, 150, 152, 159, 160, 161, 162, 164, 193, 198, 199, 210, 211, 217, 223], "consist": [32, 49, 50, 51, 52, 53, 54, 67, 97], "previou": [32, 34, 54, 56, 67, 73, 75, 79, 81, 97, 99, 175, 176], "u": [32, 54, 68, 78, 94, 97, 163, 215, 233, 234, 242, 243], "frequency_respons": [32, 54, 62, 78, 86, 97, 249], "numpi": [32, 47, 52, 54, 62, 63, 78, 86, 87, 97, 107, 114, 142, 146, 154, 165, 230, 241, 242, 243, 244, 245, 246, 247, 248], "frequency_response_log": [32, 54, 63, 78, 87, 97], "logarithm": [32, 54, 63, 78, 87, 97, 203, 204, 206, 208, 209, 210, 242, 243], "axi": [32, 54, 63, 78, 87, 97, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 214, 216, 217, 241], "custom": [32, 37, 97, 102, 108, 143, 147, 155], "design": [32, 34, 37, 97, 99, 102, 108, 143, 147, 155, 194, 237, 248, 249], "multir": [32, 33, 34, 37, 97, 98, 99, 102, 194, 220, 249], "polyphase_tap": [32, 36, 38, 41, 97, 98, 101, 103, 106], "lfloor": [32, 54, 60, 97], "rfloor": [32, 54, 60, 97], "mode": [33, 34, 40, 55, 56, 61, 66, 69, 71, 73, 75, 76, 79, 81, 92, 95, 98, 99, 105, 167, 233], "l": [33, 55, 80, 98], "stream": [33, 34, 35, 36, 40, 55, 56, 58, 59, 61, 66, 69, 71, 73, 75, 76, 79, 81, 82, 83, 92, 95, 98, 99, 100, 101, 105, 142, 146, 154, 243], "convolut": [33, 55, 97, 98], "ha": [33, 55, 97, 98, 142, 146, 165, 178, 186, 187, 197, 231, 233, 245, 246, 247], "align": [33, 55, 98, 142, 241], "howev": [33, 49, 50, 51, 53, 55, 98, 125, 169, 172, 241], "produc": [33, 55, 97, 98, 187, 247], "final": [33, 55, 98], "dictat": [33, 55, 98], "argument": [33, 34, 55, 98, 99, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 239, 242, 243], "specif": [34, 52, 99, 240, 247], "npt": [34, 99, 108, 143, 147, 155, 203, 204, 205, 206, 209, 210, 215, 219], "string": [35, 36, 58, 59, 82, 83, 100, 101, 109, 110, 144, 145, 148, 149, 190, 208, 214, 249], "represent": [35, 36, 58, 59, 82, 83, 100, 101, 109, 110, 144, 145, 148, 149, 216, 249], "print": [36, 59, 83, 101, 190, 241, 242, 243, 245], "167": [36, 101], "24": [36, 101], "shape": [36, 59, 83, 98, 101, 107, 108, 114, 116, 119, 120, 124, 142, 143, 146, 147, 154, 155, 187, 189, 202, 217, 221, 222, 224, 243, 248, 249], "84": [36, 101], "befor": [38, 41, 103, 106, 250], "decomposit": [38, 41, 103, 106, 249], "after": [38, 41, 103, 106], "10": [38, 41, 43, 45, 47, 97, 98, 103, 106, 108, 142, 143, 146, 147, 150, 152, 154, 155, 159, 161, 163, 164, 165, 170, 174, 177, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 209, 210, 213, 215, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 241, 242, 243, 244, 245, 246, 247], "9": [38, 41, 97, 98, 103, 106, 142, 146, 154, 159, 163, 170, 177, 184, 188, 190, 220, 221, 224, 243, 244, 246, 247, 249], "null": [42, 158, 206, 208, 247], "altern": [42, 158, 243], "hypothes": [42, 158], "follow": [42, 47, 191, 201, 211, 214, 216, 218, 220, 245], "assum": [42, 158, 165, 177, 195, 230], "valu": [42, 107, 108, 111, 121, 142, 143, 146, 147, 150, 152, 154, 155, 156, 157, 167, 174, 175, 176, 187, 191, 192, 201, 216, 243, 249], "random": [42, 142, 146, 154, 165, 168, 171, 177, 184, 185, 191, 201, 202, 217, 225, 244, 246], "process": [42, 43, 44, 46, 158, 159, 160, 162, 194, 220, 243, 245, 248], "w": [42, 158, 165, 241, 242, 243, 244, 245, 246, 247], "sigma": [42, 43, 44, 45, 46, 158, 159, 160, 161, 162, 165, 166], "_0": [42, 158], "_1": [42, 158], "test": [42, 158, 238, 248], "statist": [42, 43, 44, 46, 158, 159, 160, 162], "limits_": [42, 54, 78, 158], "left": [42, 43, 44, 78, 142, 146, 154, 158, 159, 160, 162, 163, 164, 165, 166, 181, 184, 186, 187, 191, 193, 197, 198, 199, 223, 233], "right": [42, 43, 44, 78, 142, 146, 154, 158, 159, 160, 162, 163, 164, 165, 166, 181, 184, 186, 187, 191, 193, 197, 198, 199, 223, 233], "gamma": [42, 44, 46, 158, 160, 162, 163], "sim": [42, 158, 165], "chi_": [42, 43, 44], "2n": [42, 43, 44], "text": [42, 154, 158, 163, 164, 165, 166, 169, 172, 173, 174, 184, 185, 186, 192, 194, 196, 198, 199, 223, 225], "under": [42, 158], "detect": [42, 43, 44, 45, 46, 158, 159, 160, 161, 162, 163, 207, 212], "threshold": [42, 44, 46, 158, 160, 162], "q_": [42, 43, 44, 46], "chi_n": [42, 43, 44, 46], "steven": [42, 43, 44, 46, 158, 159, 160, 162], "kai": [42, 43, 44, 46, 158, 159, 160, 162], "fundament": [42, 43, 44, 46, 158, 159, 160, 162], "theori": [42, 43, 44, 46, 158, 159, 160, 162], "section": [42, 49, 50, 51, 52, 53, 158, 243, 245], "static": [42, 43, 44, 45, 46, 158, 159, 160, 161, 162, 239], "n_nc": [42, 43, 44, 45, 46, 163], "For": [43, 44, 46, 159, 160, 162, 165, 178, 186, 231, 242], "linspac": [43, 150, 152, 159, 166, 169, 172, 186, 200, 213, 243, 244, 245, 246], "20": [43, 45, 97, 98, 142, 146, 154, 159, 163, 166, 168, 171, 174, 177, 184, 185, 190, 191, 192, 199, 220, 223, 231, 244, 246, 247, 249], "101": [43, 45, 159, 161], "25": [43, 168, 171, 177, 202, 241, 244, 245, 247], "1e": [43, 159, 185, 246], "sigma2": [44, 46, 160, 162], "If": [45, 75, 161, 164, 165, 166, 177, 195, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 214, 215, 216, 217, 223, 228, 230, 248], "logspac": [45, 161, 163], "theoret": [45, 150, 152, 200, 213, 246, 249], "variou": [45, 239, 247], "100": [45, 78, 89, 94, 150, 152, 163, 165, 166, 169, 172, 174, 184, 192, 193, 200, 202, 203, 205, 213, 215, 217, 225, 228, 229, 231, 239, 241, 245], "1_000": [45, 165, 185, 186, 191, 225, 244], "000": [45, 185], "5_000": 45, "measur": [47, 49, 164, 165, 173, 174, 181, 184, 192, 196, 198, 199, 223, 245, 248, 249], "new": [47, 48, 71, 73, 107, 108, 142, 143, 146, 147, 154, 155, 225], "from": [47, 62, 63, 78, 79, 86, 87, 107, 123, 142, 146, 153, 154, 174, 179, 180, 182, 183, 192, 208, 214, 226, 227, 237, 242, 243, 245, 248], "contain": [47, 165, 190], "add": [47, 49, 52, 142, 146, 154, 165, 185, 189, 211, 222, 225, 235, 246, 250], "total": [47, 187, 189, 221, 222, 224, 247], "count": [47, 50, 184], "error_r": [47, 51, 52, 246], "everi": [47, 241], "can": [47, 49, 50, 51, 53, 108, 125, 143, 147, 155, 165, 184, 187, 194, 195, 202, 208, 214, 238, 242, 243, 246, 248, 250], "obtain": 47, "tabul": [47, 48], "all": [47, 52, 184, 202, 211, 240, 248], "ascend": [47, 52], "correspond": [47, 52, 211], "other": [49, 50, 51, 53, 241, 250], "quantiti": [49, 50, 51, 52, 53], "user": [49, 50, 51, 53, 108, 143, 147, 155, 242, 243], "caution": [49, 50, 51, 53], "instanc": [49, 50, 51, 53, 239], "transmit": [49, 107, 124, 142, 146, 154, 184, 202], "whatev": 52, "wa": [52, 166], "provid": [52, 107, 111, 121, 142, 146, 150, 152, 154, 211, 248], "wrapper": [54, 78], "scipi": [54, 78, 208, 214, 247, 248], "convolv": [54, 217], "It": [54, 78, 97, 108, 125, 143, 147, 155, 165, 202], "support": [54, 78, 249], "one": [54, 78, 142, 143, 147, 153, 155, 187, 190, 202, 203, 204, 206, 208, 209, 210, 214, 228, 242, 243, 244, 247], "its": [54, 78, 79, 165, 242, 243, 247], "sum_": [54, 78, 160, 162, 164, 165, 166, 181, 184, 223], "valid": [55, 186, 202, 211, 233], "same": [55, 98, 217, 242], "0013559842808217807": [58, 59], "005995136544658217": [58, 59], "008698817681933214": [58, 59], "0024103767414047302": [58, 59], "010205586837665018": [58, 59], "018983779931504997": [58, 59], "011950905288150394": [58, 59], "01518393864077397": [58, 59], "051622191325047306": [58, 59], "07210389837804473": [58, 59], "04745944982876247": [58, 59], "039173517569276436": [58, 59], "17918683372907862": [58, 59], "3367363220550604": [58, 59], "4611457574513795": [58, 59], "5084040873607553": [58, 59], "30": [59, 97, 178, 203, 205, 215, 228, 229, 243, 249], "31": 59, "15": [59, 161, 170, 188, 220, 231], "remain": [61, 178, 195], "1024": [62, 63, 86, 87, 203, 204, 206, 209, 210, 244, 247], "decad": [63, 87, 203, 204, 206, 209, 210, 242, 245], "resampl": [71, 72, 73, 74, 75, 76, 77, 194, 220, 248, 249], "http": [71, 163, 173, 187, 194, 196, 233, 237, 238], "wirelesspi": 71, "com": [71, 163, 187, 194, 238], "fraction": [71, 75, 187, 241], "structur": 71, "index": [71, 75, 202, 211, 216, 237], "should": [75, 202, 238], "equal": 75, "three": [75, 241, 247], "lfilter": 78, "b_i": [78, 81, 85, 203, 204, 205, 206, 209, 210, 215, 219, 243], "feedback": [78, 81, 84, 203, 204, 205, 206, 209, 210, 215, 219, 243], "a_j": [78, 81, 84, 203, 204, 205, 206, 209, 210, 215, 219, 243], "These": [78, 142, 146, 154, 218, 238, 245], "differ": [78, 143, 147, 153, 155, 217, 233, 247], "a_0": 78, "b": [78, 81, 163, 166, 187, 190, 203, 205, 215, 237, 247], "classmethod": [78, 79], "zerospol": [78, 79, 82, 83, 203, 204, 205, 206, 209, 210, 215, 219, 243], "self": [78, 79], "b_tap": [78, 83, 85, 243], "a_tap": [78, 83, 84, 243], "exp": [82, 83, 142, 146, 154, 178, 187, 191, 193, 203, 204, 205, 206, 209, 210, 215, 217, 219, 229, 231, 233, 241, 243, 245], "1j": [82, 83, 178, 193, 203, 204, 205, 206, 209, 210, 215, 217, 219, 229, 231, 241, 243, 245], "conj": [82, 83, 203, 204, 205, 206, 209, 210, 215, 219, 243, 245], "478207252018059": [82, 83, 243], "6400000000000001": [82, 83, 243], "7391036260090295": [83, 243], "3061467458920719j": [83, 243], "insert": 97, "multipli": 97, "hold": [97, 99, 195, 249], "recommend": 97, "wai": [97, 238], "11": [97, 142, 146, 154, 170, 188, 194, 220, 237], "zoh": [97, 99, 102], "12": [97, 142, 146, 154, 160, 162, 163, 170, 188, 194, 220, 242, 246], "13": [97, 142, 146, 154, 158, 159, 160, 162, 167, 170, 188, 220, 249], "iter": 98, "concaten": [98, 243], "linearli": 99, "2r": 99, "ramp": [99, 125], "ones": [99, 245], "modul": [107, 108, 116, 117, 119, 142, 143, 146, 147, 150, 152, 154, 155, 165, 179, 180, 182, 184, 185, 191, 200, 201, 202, 213, 216, 225, 226, 237, 240, 244, 246, 248, 249], "map_symbol": [107, 115, 142, 146, 154, 249], "decide_symbol": [107, 113, 142, 146, 154, 249], "a_hat": [107, 113, 142, 146, 154], "decis": [107, 113, 114, 142, 146, 154, 202], "maximum": [107, 113, 114, 142, 146, 154, 187, 189, 201, 216, 221, 222, 224], "likelihood": [107, 113, 114, 142, 146, 154], "mle": [107, 113, 142, 146, 154], "puls": [107, 108, 114, 116, 119, 120, 124, 142, 143, 146, 147, 154, 155, 187, 189, 202, 217, 221, 222, 224, 248, 249], "match": [107, 108, 114, 120, 142, 143, 146, 147, 154, 155], "abstract": [107, 111, 121], "log_2": [107, 112, 142, 146, 154, 166, 179, 180, 182, 226], "phase_offset": [107, 108, 118, 142, 143, 146, 147, 151, 154, 155, 165, 184, 185, 191, 201, 202, 216, 225, 244, 246], "degre": [107, 108, 118, 142, 143, 146, 147, 151, 154, 155, 185, 191, 193, 197], "dot": [107, 108, 123, 142, 146, 153, 154, 216], "mapsto": [107, 108, 123, 142, 146, 153, 154, 216], "mathbb": [107, 108, 123, 142, 146, 153, 154, 166, 216, 233], "sym": [107, 108, 122, 142, 143, 146, 147, 154, 155, 180, 183, 187, 226, 227, 247], "pulse_shap": [107, 108, 114, 116, 119, 142, 143, 146, 147, 154, 155, 244], "tx_filter": [107, 124, 142, 146, 154], "rx_filter": [107, 120, 142, 146, 154], "rect": [108, 143, 147, 155, 247], "whose": [108, 143, 146, 147, 155], "import": [108, 143, 147, 155, 238, 241, 242, 243, 244, 245, 246, 247, 248], "roll": [108, 143, 147, 155, 233, 247], "off": [108, 143, 147, 155], "option": [108, 143, 147, 155, 203, 204, 206, 208, 209, 210, 214], "conveni": [108, 143, 147, 155, 242, 243], "own": [108, 143, 147, 155], "psd": [111, 121, 150, 152, 166, 179, 180, 182, 183, 200, 213, 226, 227], "p_b": 111, "s_hat": [114, 246], "size": [114, 116, 167, 177, 241, 245, 246, 247], "p_e": 121, "loopfilt": [125, 126, 127, 128, 129, 130, 131, 132, 133, 236, 245, 249], "ppi": [125, 129, 236], "track": 125, "cannot": 125, "chirp": 125, "underli": [125, 131], "qpsk": [142, 146, 150, 151, 152, 154, 165, 184, 185, 200, 201, 202, 213, 216, 217, 225, 248, 249], "scheme": [142, 146, 154, 249], "similar": [142, 154, 239, 247], "convent": [142, 154], "One": [142, 154, 247], "distinct": [142, 154], "channel": [142, 150, 152, 166, 168, 169, 171, 172, 177, 200, 213, 248, 249], "transit": [142, 154, 171, 172, 177, 235], "independ": 142, "apart": 142, "origin": [142, 154, 231, 241], "which": [142, 154, 163, 165, 166, 185, 191, 197, 201, 216, 225, 241, 245, 247], "result": [142, 154, 164, 186, 197, 198, 199, 221, 223, 224, 246], "lower": [142, 154, 206, 208, 221, 224], "taken": [142, 146, 154], "jq": 142, "begin": [142, 154, 158], "end": [142, 154, 158, 228], "modem": [142, 146, 154], "45": [142, 143, 146, 151, 165, 184, 185, 191, 193, 201, 202, 216, 225, 244, 246], "symbol_label": [142, 143, 146, 147, 153, 154, 155, 246], "randint": [142, 146, 154, 165, 168, 171, 177, 184, 185, 191, 201, 202, 217, 225, 244, 246], "1000": [142, 146, 154, 184, 186, 217, 228, 229, 246], "dtype": [142, 146, 154, 195, 217, 230, 245], "uint8": [142, 146, 154, 195, 230], "complex_symbol": [142, 146, 154], "70710678": [142, 146], "70710678j": [142, 146], "linestyl": [142, 146, 154, 201, 211, 216, 218, 233, 241, 245, 246, 247], "tx_sampl": [142, 146, 154], "50": [142, 146, 154, 174, 192, 216, 228, 229, 241, 244], "rx_sampl": [142, 146, 154], "last": [142, 195, 237], "rx_symbol": [142, 146, 154], "rx_complex_symbol": [142, 146, 154], "array_equ": [142, 146, 154], "bin": [143, 147, 153, 155, 184, 201, 216, 246], "consecut": [143, 147, 155], "adjac": [143, 147, 153, 155, 246, 247], "mai": [143, 147, 153, 155, 184, 201, 211, 214, 216, 218, 243], "more": [143, 147, 153, 155, 249], "start": [143, 147, 155, 237], "0j": [143, 147, 155], "go": [143, 147, 155], "counter": [143, 147, 155], "clockwis": [143, 147, 155], "around": [143, 147, 155], "circl": [143, 147, 155, 243], "encod": [146, 150, 152, 175, 176, 248], "inform": [146, 179, 180, 182, 226], "ge": [147, 155, 163], "were": [150, 152], "simon": [150, 152], "alouini": [150, 152], "over": [150, 152, 190], "fade": [150, 152], "chapter": [150, 152, 194, 220], "john": [150, 152], "proaki": [150, 152], "optimum": [150, 152], "bpsk": [150, 152, 200, 213, 217, 244], "psk8": [150, 152, 200, 213, 246], "psk16": [150, 152, 200, 213, 246], "compar": [150, 152, 247], "de": [150, 152, 249], "se": [152, 213], "00000000e": [153, 154, 243], "00": [153, 154, 243], "00j": [153, 154], "07106781e": [153, 154], "01": [153, 154, 190, 243, 245], "01j": [153, 154], "12323400e": [153, 154], "17": [153, 154, 197, 220], "83697020e": 153, "22464680e": [153, 154], "16j": [153, 154], "annot": [153, 216, 249], "odd": [154, 228], "rotat": [154, 193], "rel": [154, 233, 247], "even": [154, 187, 221, 224], "2m": 154, "displaystyl": 154, "pi4_qpsk": 154, "exceed": [156, 157], "15865525393145707": [156, 157], "158655": [156, 157], "0000010494310452": [156, 157], "perfect": 158, "knowledg": 158, "cn": [158, 165], "mathrm": 158, "re": 158, "sqrt": [158, 159, 160, 162, 163, 184, 187, 223, 233, 244, 245, 247], "14": [159, 170, 188, 220, 238], "desir": [163, 165, 246], "ln": [163, 187], "62": [163, 190], "_": [163, 184], "log_": [163, 164, 174, 186, 196, 198, 199, 223], "54": [163, 190], "44": 163, "12ab": 163, "7b": 163, "claim": 163, "leq": 163, "le": [163, 193, 197, 221, 224], "8096": 163, "radarsp": 163, "weebli": 163, "upload": 163, "21471216": 163, "albersheim_alternative_form": 163, "pdf": [163, 187], "bpb": 163, "w2": 163, "wpmucdn": 163, "site": [163, 237], "gatech": 163, "edu": 163, "dist": 163, "462": 163, "file": [163, 239, 240], "2016": 163, "noncoher": 163, "approxim": 163, "www": [163, 187, 194], "mathwork": [163, 187, 194], "help": [163, 187, 194], "html": [163, 187, 194, 237], "semilogx": [163, 212], "legend": [163, 191, 241, 244, 245, 247], "grid": [163, 166, 169, 172, 186, 218, 241, 244, 245, 247], "both": [163, 166, 201, 216, 217, 241, 245], "xlabel": [163, 166, 167, 169, 172, 184, 186, 233, 241, 244, 245, 247], "ylabel": [163, 166, 167, 169, 172, 184, 186, 233, 241, 244, 245, 247], "across": 163, "nuse": 163, "avg": [164, 165, 196], "seed": 165, "ad": [165, 211, 239, 248, 249], "explicitli": 165, "known": 165, "must": [165, 187, 193, 211, 221, 224, 233], "default_rng": 165, "noisi": 165, "set": [165, 186, 201, 206, 208, 211, 214, 216, 218, 239, 240, 243], "sin": [165, 228], "zorder": [165, 185, 225], "infti": [165, 166], "nand": 165, "capac": [166, 169, 172, 248, 249], "2d": [166, 211], "x_i": [166, 168, 169, 171, 172, 177, 191], "y_i": [166, 168, 169, 171, 172, 177], "monoton": 166, "decreas": 166, "limit": [166, 201, 206, 208, 216, 246], "At": 166, "occur": 166, "view": [166, 239, 248], "59": 166, "shannon": 166, "semilogi": [166, 200, 212, 213], "barker": [167, 234, 248, 249], "bipolar": [167, 249], "sequenc": [167, 168, 171, 177, 233, 235, 248, 249], "format": [167, 239], "seq": 167, "have": [167, 178, 195, 217, 230, 231], "ideal": [167, 246], "minim": 167, "autocorrel": [167, 233], "sidelob": [167, 221, 224, 233], "corr": [167, 233], "lag": [167, 233], "ab": [167, 233, 247], "roughli": [168, 171, 241], "eras": 168, "flip": 171, "h_b": 172, "cf": 173, "v_": [173, 174, 192, 199, 223], "en": [173, 196, 233], "wikipedia": [173, 196, 233], "org": [173, 196, 233], "wiki": [173, 196, 233], "type": [174, 184, 192, 195, 208, 212, 214, 230, 249], "voltag": [174, 192, 199, 223, 248], "decibel": [174, 192, 248, 249], "ani": [174, 178, 192, 206, 208, 231, 240], "x_": [174, 192], "mhz": [174, 192], "77": [174, 190, 192], "50e6": 174, "76": [174, 190], "98970004336019": 174, "mw": [174, 192], "dbm": [174, 192], "dbv": [174, 192], "020599913279624": 174, "uncod": 176, "dmc": [177, 235, 248, 249], "memoryless": [177, 235, 248], "pr": 177, "y_j": 177, "alphabet": 177, "ldot": 177, "doe": [178, 231], "anti": [178, 231, 249], "alias": [178, 231, 249], "spectral": [178, 208, 244, 247], "effici": [178, 197, 231], "400": [178, 241], "x1": 178, "200": [178, 241, 246], "x2": 178, "130": 178, "x3": [178, 233], "spectrum": [178, 203, 204, 206, 208, 209, 210, 214, 228, 229, 231], "content": 178, "abov": [178, 231], "nyquist": [178, 202, 231, 247], "fold": 178, "cw": 178, "unalias": 178, "fft": [178, 208, 214, 228, 229, 231], "2048": [178, 228, 229, 231, 244], "xlim": [178, 231, 244, 245, 247], "qam": [179, 180, 182, 226], "249387366082999": [179, 180], "020599913279625": [179, 227], "750612633917001": [182, 226], "979400086720376": [182, 183], "system": [183, 194, 220, 227, 239, 240, 245, 248], "norm": [184, 187, 189, 221, 222, 224], "noiseless": 184, "sourc": 184, "max": [184, 198, 199, 239], "instantan": 184, "percentil": [184, 206, 208, 214], "either": 184, "69314378714579": 184, "132032790532964": 184, "181": 184, "78967734879592": 184, "142": 184, "65541042417823": 184, "95th": 184, "95": 184, "68": [184, 190], "87772227698701": 184, "inst_evm": 184, "hist": 184, "histogram": 184, "frequency_offset": [185, 235, 249], "freq_rat": 185, "cycl": [185, 217], "5e": 185, "deg": [185, 191], "path": [186, 239, 248], "loss": [186, 248], "distanc": 186, "meter": [186, 197, 232], "transmitt": 186, "far": 186, "field": 186, "neg": [186, 191], "impli": 186, "possibl": [186, 248], "so": [186, 187, 189, 221, 222, 224, 248], "km": 186, "link": [186, 248, 249], "ghz": [186, 197, 232], "1e3": [186, 193, 228], "1e9": [186, 197, 232], "92": 186, "44778322188337": 186, "doubl": [186, 197], "increas": [186, 197, 243], "2e3": 186, "98": 186, "468383135163": 186, "also": [186, 187, 248], "2e9": 186, "up": 186, "product": [187, 247], "side": [187, 203, 204, 206, 208, 209, 210, 214, 242, 243, 244, 247], "thought": [187, 250], "smaller": [187, 221, 224, 247], "wider": 187, "how": [187, 189, 202, 211, 217, 221, 222, 224, 239, 240], "gaussdesign": 187, "onlinelibrari": 187, "wilei": 187, "doi": 187, "1002": 187, "9780470041956": 187, "app2": 187, "h_0p1": [187, 221, 224], "h_0p2": 187, "h_0p3": 187, "reason": [189, 222], "larger": [189, 191, 201, 216, 222], "h_half_sin": 189, "displai": [190, 201, 203, 204, 206, 208, 209, 210, 214, 216], "consid": 190, "line": [190, 217, 244], "quick": 190, "brown": 190, "fox": 190, "jump": 190, "lazi": 190, "dog": 190, "00000000": 190, "65": 190, "71": 190, "75": [190, 201, 245, 246], "69": 190, "63": 190, "6b": 190, "72": 190, "6f": 190, "6e": 190, "00000010": 190, "66": 190, "78": 190, "6a": 190, "6d": 190, "73": 190, "74": 190, "00000020": 190, "6c": 190, "61": 190, "7a": 190, "79": 190, "67": 190, "he": 190, "02": [190, 243, 245], "03": [190, 243], "04": [190, 243], "00000004": 190, "05": [190, 241, 243, 245], "06": 190, "07": 190, "08": 190, "00000008": 190, "09": 190, "0a": 190, "iq_imbal": [191, 235, 249], "iq": [191, 235, 248], "imbal": [191, 235, 248], "posit": 191, "compon": [191, 228, 229, 231], "lead": [191, 246], "g_i": 191, "180": 191, "g_q": 191, "x_q": 191, "horizont": 191, "stretch": 191, "while": [191, 247], "vertic": 191, "subplot": [191, 245, 246], "northwest": 191, "northeast": 191, "50118723": 192, "36272725": 192, "9952623149688795": 192, "satisfi": 193, "cdot": 193, "remov": [193, 208, 214, 249], "half_length": 194, "a_stop": 194, "80": [194, 233], "stopband": [194, 221, 224], "attenu": [194, 221, 224], "a_": 194, "stop": 194, "fred": [194, 220], "harri": [194, 220], "dsp": [194, 248], "designmultiratefir": 194, "dtypelik": [195, 230], "most": [195, 230], "signific": [195, 230], "enough": 195, "fill": 195, "smallest": 195, "unsign": 195, "integ": 195, "diamet": 197, "55": 197, "eta": 197, "dbi": 197, "arcsin": 197, "83": 197, "dish": 197, "21": 197, "810210290266568": 197, "437435887991374": 197, "23": 197, "sinc": [197, 202, 237, 246], "antenna": [197, 248], "we": [197, 248], "observ": [197, 202], "830810203546193": 197, "529544741425365": 197, "keyword": [200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 242, 243], "pyplot": [200, 201, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 241, 242, 243, 244, 245, 246, 247], "scatter": 201, "overwritten": [201, 211, 214, 216], "rang": [201, 245, 246], "hist2d": 201, "10_000": 201, "color": [202, 211, 217, 244, 247], "imaginari": [202, 211, 217], "interleav": [202, 211], "base": [202, 211, 217], "examin": 202, "intersymbol": 202, "interfer": 202, "isi": 202, "two": [202, 203, 204, 206, 208, 209, 210, 214, 233, 241, 242, 243], "cascad": 202, "why": 202, "often": [202, 241], "practic": 202, "n_time": [203, 243], "n_freq": 203, "x_axi": [203, 204, 206, 208, 209, 210, 214, 242, 243, 244, 245], "log": [203, 204, 206, 208, 209, 210, 242, 243, 245], "definit": [203, 204, 205, 206, 209, 210, 215, 219], "n_t": 203, "n_f": 203, "scale": [203, 204, 206, 208, 209, 210, 214, 242, 243], "h_srrc": [203, 204, 205, 206, 209, 210, 215, 217, 219, 246], "ylim": [204, 233, 242, 245, 246, 247], "48": 204, "52": 204, "10th": [206, 208, 214], "crop": [206, 208], "deep": [206, 208], "x_label": 207, "hann": [208, 214], "overlap": [208, 214, 244], "detrend": [208, 214], "median": 208, "segment": [208, 214], "256": [208, 214, 244], "point": [208, 214], "trend": [208, 214], "unwrap": [210, 245], "stride": 211, "colorbar": 211, "1d": 211, "determin": 211, "row": 211, "collect": 211, "linecollect": 211, "linewidth": [211, 233], "solid": [211, 217], "cmap": 211, "rainbow": 211, "loglog": 212, "pcolormesh": 214, "vmin": 214, "vmax": 214, "100th": 214, "shade": 214, "gouraud": 214, "markers": 216, "diff": [217, 244], "about": [217, 239, 240], "mutual": 217, "exclus": 217, "part": [217, 225, 245], "current": [217, 238], "dash": 217, "share": 217, "10e3": 217, "revert": 218, "rcdefault": 218, "_rc_param": 218, "rc_param": 218, "ax": 218, "autolayout": 218, "max_open_warn": 218, "titleweight": 218, "bold": 218, "arrang": 220, "down": 220, "column": 220, "notion": 220, "demonstr": 220, "18": [220, 246], "19": 220, "excess": [221, 224, 247], "narrow": [221, 224], "expens": [221, 224], "higher": [221, 224, 247], "h_0p5": [221, 224], "h_0p9": [221, 224], "affect": [221, 224], "longer": [221, 224, 228], "h_4": [221, 224], "h_8": [221, 224], "h_16": [221, 224], "h_rect": [222, 247], "sample_rate_offset": [225, 235, 249], "ppm": [225, 235], "million": 225, "append": [228, 244], "250": [228, 229], "300": [228, 229], "ksp": [228, 229], "notic": [228, 229, 241, 247], "conjug": [228, 229, 243], "500": [228, 229, 245], "now": [228, 229, 241, 249], "150": [228, 229], "asymmetr": 229, "copi": 231, "299792458": 232, "zadoff_chu": [233, 234, 249], "zadoff": [233, 234, 248, 249], "chu": [233, 234, 248, 249], "prime": 233, "gcd": 233, "ne": 233, "cyclic": 233, "x_u": 233, "c_": 233, "2q": 233, "mod": 233, "e2": 233, "93chu_sequ": 233, "x_3": 233, "139": 233, "tile": 233, "x_5": 233, "x5": 233, "cross": 233, "xcorr": 233, "sphinx": 237, "immateri": 237, "theme": 237, "depend": [237, 239, 240], "store": [237, 238, 240], "txt": [237, 238, 239, 240], "myst": 237, "parser": 237, "updat": 237, "git": [237, 238], "math": 237, "dollar": 237, "ipykernel": 237, "nb": 237, "switch": 237, "pip": [237, 238, 239, 240, 248], "python3": [237, 238, 239, 240, 248], "built": 237, "run": 237, "command": 237, "dirhtml": 237, "locat": [237, 240], "home": 237, "page": 237, "directori": [237, 238], "get": 237, "necessari": 237, "webpag": 237, "webserv": 237, "easili": [237, 239, 240, 242, 243], "python": [237, 248], "server": 237, "8080": 237, "access": [237, 239], "web": 237, "browser": 237, "localhost": 237, "latest": [238, 248], "releas": [238, 249], "version": [238, 248], "main": [238, 247], "branch": [238, 239], "mhostett": [238, 249], "Or": [238, 240], "pre": 238, "To": 238, "activ": 238, "develop": [238, 239, 240], "librari": [238, 239, 240, 241, 246, 248, 250], "benefici": 238, "fashion": 238, "allow": [238, 240], "chang": [238, 250], "immedi": 238, "seen": 238, "upon": 238, "next": 238, "clone": 238, "repo": 238, "wherev": 238, "you": [238, 239, 240, 248], "like": [238, 248, 249], "flag": 238, "includ": [238, 239, 240, 248], "packag": [238, 248], "lint": 238, "pylint": [238, 239], "black": 238, "jupyt": 238, "22": 238, "pytest": [238, 240], "cov": 238, "toml": [238, 239, 240], "xdist": 238, "benchmark": 238, "your": [239, 240], "dev": [239, 240], "nuisanc": 239, "warn": 239, "ignor": 239, "list": 239, "pyproject": [239, 240], "tool": [239, 240, 248], "src": 239, "_version": 239, "py": [239, 240], "disabl": 239, "comparison": 239, "callabl": 239, "doesn": 239, "understand": [239, 243], "metaclass": 239, "fixm": 239, "global": 239, "statement": 239, "invalid": 239, "name": 239, "miss": 239, "docstr": 239, "protect": 239, "too": 239, "mani": 239, "ancestor": 239, "attribut": 239, "public": 239, "unneed": 239, "min": 239, "120": 239, "manual": [239, 240], "vscode": [239, 240], "json": [239, 240], "instruct": [239, 240], "invok": [239, 240], "edit": [239, 243], "ini_opt": 240, "minvers": 240, "addopt": 240, "showloc": 240, "testpath": 240, "execut": 240, "test_psk": 240, "infrastructur": 240, "debug": 240, "config": [241, 242, 243, 244, 245, 246, 247], "inlinebackend": [241, 242, 243, 244, 245, 246, 247], "print_figure_kwarg": [241, 242, 243, 244, 245, 246, 247], "facecolor": [241, 242, 243, 244, 245, 246, 247], "widget": [241, 242, 243, 244, 245, 246, 247], "continu": 241, "tx": 241, "decai": [241, 243], "fillstyl": 241, "imag": 241, "show": [241, 242, 243, 244, 245, 246, 247], "accomplish": [241, 246], "def": [241, 244, 246], "resample_sign": 241, "new_sample_r": 241, "ty": 241, "gca": [241, 246], "set_prop_cycl": [241, 246], "four": 241, "appear": 241, "fourth": 241, "do": 241, "315": 241, "32": 241, "below": [242, 243], "00095883": 242, "00175012": 242, "00423921": 242, "0058825": 242, "006151": 242, "00474595": 242, "0017044": 242, "00254816": 242, "00721645": 242, "0112324": 242, "01342358": 242, "01273202": 242, "00845058": 242, "0004368": 242, "01073669": 242, "02372977": 242, "03650247": 242, "04650654": 242, "05098525": 242, "04734644": 242, "03355896": 242, "00851486": 242, "02769991": 242, "07367348": 242, "12670447": 242, "1830132": 242, "23810898": 242, "28727058": 242, "3260799": 242, "3509384": 242, "35949665": 242, "evalu": [242, 243], "envelop": [242, 243], "here": [242, 243], "47820725": 243, "78207252e": 243, "58172329e": 243, "10862468e": 243, "86109590e": 243, "21565653e": 243, "01140214e": 243, "57286400e": 243, "67772160e": 243, "47338728e": 243, "10422993e": 243, "89312837e": 243, "12240078e": 243, "03953322e": 243, "69685122e": 243, "63882791e": 243, "81474977e": 243, "47193366e": 243, "85259041e": 243, "15647504e": 243, "23851924e": 243, "42176895e": 243, "84684395e": 243, "42721858e": 243, "72236648e": 243, "14721649e": 243, "10813095e": 243, "94024315e": 243, "78877688e": 243, "74077567e": 243, "87820725": 243, "53637958": 243, "94724205": 243, "13335164": 243, "1455082": 243, "04436799": 243, "88708159": 243, "71930943": 243, "5719707": 243, "46154771": 243, "39261642": 243, "36139242": 243, "35935288": 243, "3763214": 243, "40270968": 243, "43085717": 243, "45557651": 243, "47410241": 243, "48566716": 243, "49090568": 243, "49124786": 243, "48840102": 243, "4839738": 243, "47925143": 243, "47510421": 243, "47199608": 243, "47005584": 243, "46917696": 243, "46911955": 243, "denomin": 243, "73910363": 243, "30614675j": 243, "plane": 243, "endpoint": 243, "092337035029908": 243, "71104892744724": 243, "684365018955985": 243, "37868538208862": 243, "1263714068241546": 243, "9993519409971622": 243, "1909320767063554": 243, "016796159999999997": 243, "46380627201679264": 243, "3806359704987118j": 243, "4988817673846036": 243, "333342139809402j": 243, "5543277195082319": 243, "22961005941718524j": 243, "5291527586053246": 243, "2828380420991956j": 243, "lyon": 243, "3rd": 243, "insid": 243, "outsid": 243, "unstabl": 243, "n_symbol": 244, "els": 244, "pb": 244, "x_bb_rect": 244, "papr_bb_rect": 244, "x_pb_rect": 244, "papr_pb_rect": 244, "x_bb_0p1": 244, "papr_bb_0p1": 244, "x_pb_0p1": 244, "papr_pb_0p1": 244, "x_bb_0p5": 244, "papr_bb_0p5": 244, "x_pb_0p5": 244, "papr_pb_0p5": 244, "x_bb_0p9": 244, "papr_bb_0p9": 244, "x_pb_0p9": 244, "papr_pb_0p9": 244, "2f": 244, "rf": [244, 245], "512": 244, "sweep_alpha": 244, "bb_papr": 244, "pb_papr": 244, "bpsk_bb_papr": 244, "bpsk_pb_papr": 244, "qpsk_bb_papr": 244, "qpsk_pb_papr": 244, "psk8_bb_papr": 244, "psk8_pb_papr": 244, "psk16_bb_papr": 244, "psk16_pb_papr": 244, "configur": 245, "loop_filt": 245, "0x000002276d2bcc08": 245, "theta_0": 245, "phase_error": 245, "freq_estim": 245, "suptitl": [245, 246], "avail": [245, 246, 248], "001": 245, "005": 245, "b_nt": 245, "0005": 245, "0125": 245, "015": 245, "0175": 245, "t_lock": 245, "analyze_psk": 246, "100_000": 246, "n0": 246, "tx_mf": 246, "1e6": 246, "bpsk_ber": 246, "bpsk_ser": 246, "qpsk_ber": 246, "qpsk_ser": 246, "psk8_ber": 246, "psk8_ser": 246, "psk16_ber": 246, "psk16_ser": 246, "simul": [246, 248], "1e0": 246, "psk8_bin": 246, "psk8_grai": 246, "wors": 246, "rc_0p1": 247, "rc_0p5": 247, "rc_0p9": 247, "pm": 247, "60": 247, "nearli": 247, "small": 247, "lobe": 247, "much": 247, "freqz": 247, "worn": 247, "whole": 247, "h_rc_0p1": 247, "h_rc_0p5": 247, "h_rc_0p9": 247, "p_rect": 247, "cumsum": 247, "p_rc_0p1": 247, "p_rc_0p5": 247, "p_rc_0p9": 247, "within": 247, "srrc_0p1": 247, "srrc_0p5": 247, "srrc_0p9": 247, "therefor": 247, "significantli": 247, "due": 247, "being": 247, "h_srrc_0p1": 247, "h_srrc_0p5": 247, "h_srrc_0p9": 247, "p_srrc_0p1": 247, "p_srrc_0p5": 247, "p_srrc_0p9": 247, "gauss_0p1": 247, "gauss_0p2": 247, "gauss_0p3": 247, "softwar": 248, "radio": 248, "goal": 248, "analyz": 248, "build": 248, "reli": 248, "interoper": 248, "veri": 248, "numba": 248, "acceler": 248, "computation": 248, "intens": 248, "addition": 248, "aim": 248, "replic": 248, "relev": 248, "matlab": 248, "toolbox": 248, "progress": 248, "someth": 248, "pleas": 248, "open": 248, "issu": 248, "github": 248, "pypi": 248, "api": [248, 250], "convers": [248, 249], "synchron": 248, "budget": [248, 249], "manipul": 248, "august": 249, "27": 249, "2023": 249, "matt": 249, "hostett": 249, "without": 249, "abil": 249, "improv": 249, "renam": 249, "superflu": 249, "replac": 249, "translat": 249, "fix": [249, 250], "juli": 249, "firinterpol": 249, "model": 249, "impair": 249, "fpsl": 249, "helper": 249, "semant": 250, "major": 250, "minor": 250, "patch": 250, "introduc": 250, "featur": 250, "backward": 250, "compat": 250, "make": 250, "bug": 250, "There": 250, "guarante": 250, "them": 250, "thei": 250}, "objects": {"": [[3, 0, 0, 1, "sdr", ""]], "sdr": [[9, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [26, 1, 1, "", "DDS", "Implements a direct digital synthesizer (DDS)."], [32, 1, 1, "", "Decimator", "Implements a polyphase finite impulse response (FIR) decimating filter."], [42, 1, 1, "", "EnergyDetector", "Implements an energy detector."], [47, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [54, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [71, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [78, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [97, 1, 1, "", "Interpolator", "Implements a polyphase finite impulse response (FIR) interpolating filter."], [107, 1, 1, "", "LinearModulation", "Implements linear phase/amplitude modulation with arbitrary symbol mapping."], [125, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [134, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [142, 1, 1, "", "OQPSK", "Implements offset quadrature phase-shift keying (OQPSK) modulation and demodulation."], [146, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [154, 1, 1, "", "PiMPSK", "Implements $pi/M$ phase-shift keying ($pi/M$ PSK) modulation and demodulation."], [156, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [157, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [158, 1, 1, "", "ReplicaCorrelator", "Implements an clairvoyant replica-correlator detector."], [163, 5, 1, "", "albersheim", "Estimates the minimum required single-sample SNR, given $N_{NC}$ non-coherent combinations, to achieve a probability of detection $P_D$ and probability of false alarm $P_{FA}$. This function implements Albersheim's equation."], [164, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [165, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [166, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [167, 5, 1, "", "barker", "Returns the Barker code/sequence of length $N$."], [168, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [169, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [170, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [171, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [172, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [173, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [174, 5, 1, "", "db", "Converts from linear units to decibels."], [175, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [176, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [177, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [178, 5, 1, "", "downsample", "Downsamples the time-domain signal $x[n]$ by the factor $r$."], [179, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [180, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [181, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [182, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [183, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [184, 5, 1, "", "evm", "Calculates the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [185, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [186, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [187, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [188, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [189, 5, 1, "", "half_sine", "Returns a half-sine pulse shape."], [190, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [191, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [192, 5, 1, "", "linear", "Converts from decibels to linear units."], [193, 5, 1, "", "mix", "Mixes the time-domain signal $x[n]$ with a complex exponential or real sinusoid."], [194, 5, 1, "", "multirate_taps", "Computes the multirate FIR filter that achieves rational resampling by $P/Q$."], [195, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [196, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [197, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [198, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [199, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [220, 5, 1, "", "polyphase_matrix", "Converts the multirate FIR filter taps $h_i$ into the polyphase matrix $H_{i, j}$ that achieves rational resampling by $P/Q$."], [221, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [222, 5, 1, "", "rectangular", "Returns a rectangular pulse shape."], [223, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [224, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [225, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [226, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [227, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [228, 5, 1, "", "to_complex_bb", "Converts the real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$ to a complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c} = f_{s,r}/2$."], [229, 5, 1, "", "to_real_pb", "Converts the complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$ to a real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r} = 2f_{s,c}$."], [230, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [231, 5, 1, "", "upsample", "Upsamples the time-domain signal $x[n]$ by the factor $r$."], [232, 5, 1, "", "wavelength", "Calculates the wavelength $lambda$ of a electromagnetic wave with frequency $f$."], [233, 5, 1, "", "zadoff_chu", "Returns the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.ClosedLoopPLL": [[10, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [11, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [12, 2, 1, "", "K0", "The NCO gain $K_0$."], [13, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [14, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [15, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [16, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [17, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [18, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [19, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [20, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [21, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [22, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [23, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [24, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [25, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[16, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [16, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [16, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [16, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [16, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[17, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[19, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[22, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.DDS": [[27, 3, 1, "", "__call__", "Steps the DDS with the variable phase increment signal $x[n]$."], [28, 3, 1, "", "__init__", "Creates a direct digital synthesizer (DDS)."], [29, 2, 1, "", "nco", "The numerically-controlled oscillator (NCO) used by the DDS."], [30, 3, 1, "", "reset", "Resets the DDS."], [31, 3, 1, "", "step", "Steps the DDS forward by $N$ samples."]], "sdr.DDS.__call__": [[27, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the DDS."]], "sdr.DDS.__init__": [[28, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [28, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [28, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.DDS.step": [[31, 4, 2, "p-N", "N", "The number of samples $N$ to step the DDS forward."]], "sdr.Decimator": [[33, 3, 1, "", "__call__", "Filters and decimates the input signal $x[n]$ with the polyphase FIR filter."], [34, 3, 1, "", "__init__", "Creates a polyphase FIR decimating filter."], [35, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [36, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [37, 2, 1, "", "method", "The method used to design the multirate filter."], [38, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [39, 2, 1, "", "rate", "The decimation rate $r$."], [40, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [41, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Decimator.__call__": [[33, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [33, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Decimator.__init__": [[34, 4, 2, "p-rate", "rate", "The decimation rate $r$."], [34, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [34, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.EnergyDetector": [[43, 3, 1, "", "p_d", "Computes the probability of detection $P_D$."], [44, 3, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [45, 3, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [46, 3, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.EnergyDetector.p_d": [[43, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [43, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [43, 4, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.p_fa": [[44, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [44, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [44, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [44, 4, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.EnergyDetector.roc": [[45, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [45, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [45, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."], [45, 4, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.threshold": [[46, 4, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [46, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [46, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [46, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.ErrorRate": [[48, 3, 1, "", "__init__", "Creates a new error rate tabulation object."], [49, 3, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [50, 3, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [51, 3, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [52, 3, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [53, 3, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[49, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [49, 4, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [49, 4, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[50, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[51, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[53, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[55, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the FIR filter."], [56, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [57, 3, 1, "", "__len__", "Returns the filter length $N + 1$."], [58, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [59, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [60, 2, 1, "", "delay", "The delay of the FIR filter $d = lfloor frac{N + 1}{2} rfloor$ in samples."], [61, 3, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [62, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the FIR filter."], [63, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(omega)$ of the FIR filter on a logarithmic frequency axis."], [64, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [65, 2, 1, "", "order", "The order of the FIR filter $N$."], [66, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [67, 2, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [68, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [69, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [70, 2, 1, "", "taps", "The feedforward taps $h_i$ for $i = 0,...,N$."]], "sdr.FIR.__call__": [[55, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [55, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.FIR.__init__": [[56, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$ for $i = 0,...N$."], [56, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FIR.frequency_response": [[62, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [62, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.frequency_response_log": [[63, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [63, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [63, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[64, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.step_response": [[68, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FarrowResampler": [[72, 3, 1, "", "__call__", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [73, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [74, 2, 1, "", "order", "The order of the filter."], [75, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [76, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [77, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__call__": [[72, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [72, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.__init__": [[73, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FarrowResampler.reset": [[75, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[79, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [80, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the IIR filter."], [81, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [82, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [83, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [84, 2, 1, "", "a_taps", "The feedback taps $a_j$ for $j = 0,...,N$."], [85, 2, 1, "", "b_taps", "The feedforward taps $b_i$ for $i = 0,...,M$."], [86, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the IIR filter."], [87, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(omega)$ of the IIR filter on a logarithmic frequency axis."], [88, 2, 1, "", "gain", "The gain of the IIR filter."], [89, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [90, 2, 1, "", "order", "The order of the IIR filter $N$."], [91, 2, 1, "", "poles", "The poles of the IIR filter."], [92, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [93, 2, 1, "", "state", "The filter state."], [94, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [95, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [96, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[79, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [79, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [79, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."], [79, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__call__": [[80, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.IIR.__init__": [[81, 4, 2, "p-a", "a", "The feedback coefficients $a_j$ for $j = 0,...,N$."], [81, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$ for $i = 0,...,M$."], [81, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.IIR.frequency_response": [[86, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [86, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[87, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [87, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [87, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[89, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[94, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.Interpolator": [[98, 3, 1, "", "__call__", "Interpolates and filters the input signal $x[n]$ with the polyphase FIR filter."], [99, 3, 1, "", "__init__", "Creates a polyphase FIR interpolating filter."], [100, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [101, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [102, 2, 1, "", "method", "The method used to design the multirate filter."], [103, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [104, 2, 1, "", "rate", "The interpolation rate $r$."], [105, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [106, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Interpolator.__call__": [[98, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [98, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Interpolator.__init__": [[99, 4, 2, "p-rate", "rate", "The interpolation rate $r$."], [99, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [99, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.LinearModulation": [[108, 3, 1, "", "__init__", "Creates a new linear phase/amplitude modulation object."], [109, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [110, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [111, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [112, 2, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [113, 3, 1, "", "decide_symbols", "Converts the received complex symbols $hat{a}[k]$ into decimal symbol decisions $hat{s}[k]$ using maximum-likelihood estimation (MLE)."], [114, 3, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples $hat{x}[n]$ into decimal symbol decisions $hat{s}[k]$ using matched filtering and maximum-likelihood estimation."], [115, 3, 1, "", "map_symbols", "Converts the decimal symbols $s[k]$ to complex symbols $a[k]$."], [116, 3, 1, "", "modulate", "Modulates the decimal symbols $s[k]$ into pulse-shaped complex samples $x[n]$."], [117, 2, 1, "", "order", "The modulation order $M = 2^k$."], [118, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [119, 2, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [120, 2, 1, "", "rx_filter", "The receive decimating matched filter. The filter coefficients are matched to the pulse shape $h[-n]^*$."], [121, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [122, 2, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [123, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."], [124, 2, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter. The filter coefficients are the pulse shape $h[n]$."]], "sdr.LinearModulation.__init__": [[108, 4, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees to apply to symbol_map."], [108, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [108, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [108, 4, 2, "p-symbol_map", "symbol_map", "The symbol mapping ${0, dots, M-1} mapsto mathbb{C}$. An $M$-length array whose indices are decimal symbols $s[k]$ and whose values are complex symbols $a[k]$, where $M$ is the modulation order."]], "sdr.LinearModulation.ber": [[111, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.LinearModulation.decide_symbols": [[113, 4, 2, "p-a_hat", "a_hat", "The received complex symbols $hat{a}[k]$."]], "sdr.LinearModulation.demodulate": [[114, 4, 2, "p-x_hat", "x_hat", "The received pulse-shaped complex samples $hat{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.LinearModulation.map_symbols": [[115, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to map, $0$ to $M-1$."]], "sdr.LinearModulation.modulate": [[116, 4, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.LinearModulation.ser": [[121, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.LoopFilter": [[126, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [127, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [128, 3, 1, "", "__call__", "Filters the input signal $x[n]$."], [129, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [130, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [131, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [132, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [133, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__call__": [[128, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.LoopFilter.__init__": [[129, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [129, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [129, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [129, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.NCO": [[135, 2, 1, "", "K0", "The NCO gain $K_0$."], [136, 3, 1, "", "__call__", "Steps the NCO with the variable-increment signal $x[n]$."], [137, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [138, 2, 1, "", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [139, 2, 1, "", "offset", "The absolute offset $theta$ of the NCO in units."], [140, 3, 1, "", "reset", "Resets the NCO."], [141, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__call__": [[136, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the NCO."]], "sdr.NCO.__init__": [[137, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [137, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [137, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in units."]], "sdr.NCO.step": [[141, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.OQPSK": [[143, 3, 1, "", "__init__", "Creates a new OQPSK object."], [144, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [145, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."]], "sdr.OQPSK.__init__": [[143, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [143, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [143, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [143, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK": [[147, 3, 1, "", "__init__", "Creates a new PSK object."], [148, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [149, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [150, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [151, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [152, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [153, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[147, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [147, 4, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [147, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [147, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [147, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[150, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [150, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.ser": [[152, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [152, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.PiMPSK": [[155, 3, 1, "", "__init__", "Creates a new $pi/M$ PSK object."]], "sdr.PiMPSK.__init__": [[155, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [155, 4, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [155, 4, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [155, 4, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [155, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.Q": [[156, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[157, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.ReplicaCorrelator": [[159, 3, 1, "", "p_d", "Computes the probability of detection $P_D$."], [160, 3, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [161, 3, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [162, 3, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.ReplicaCorrelator.p_d": [[159, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [159, 4, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [159, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."]], "sdr.ReplicaCorrelator.p_fa": [[160, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [160, 4, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [160, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [160, 4, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.ReplicaCorrelator.roc": [[161, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [161, 4, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [161, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."]], "sdr.ReplicaCorrelator.threshold": [[162, 4, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [162, 4, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [162, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [162, 4, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.albersheim": [[163, 4, 2, "p-N_nc", "N_nc", "The number of non-coherent combinations $N_{NC} ge 1$."], [163, 4, 2, "p-p_d", "p_d", "The desired probability of detection $P_D$ in $(0, 1)$."], [163, 4, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{FA}$ in $(0, 1)$."]], "sdr.average_power": [[164, 4, 2, "p-db", "db", "Indicates whether to return the result in dB."], [164, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[165, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [165, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [165, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [165, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[166, 4, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [166, 4, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.barker": [[167, 4, 2, "p-length", "length", "The length $N$ of the Barker code/sequence."], [167, 4, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[168, 4, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [168, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[169, 4, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[170, 4, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[171, 4, 2, "p-p", "p", "The probability $p$ of a bit flip."], [171, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[172, 4, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[173, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.db": [[174, 4, 2, "p-type", "type", "The type of input value or signal."], [174, 4, 2, "p-x", "x", "The input value or signal."]], "sdr.diff_decode": [[175, 4, 2, "p-y", "y", "The input encoded data $y[k]$."], [175, 4, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[176, 4, 2, "p-x", "x", "The input uncoded data $x[k]$."], [176, 4, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[177, 4, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [177, 4, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [177, 4, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [177, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.downsample": [[178, 4, 2, "p-rate", "rate", "The downsampling factor $r$."], [178, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.ebn0_to_esn0": [[179, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [179, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [179, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[180, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [180, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [180, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [180, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[181, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[182, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [182, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [182, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[183, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [183, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.evm": [[184, 4, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [184, 4, 2, "p-output", "output", "The output type of the EVM calculation."], [184, 4, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [184, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.frequency_offset": [[185, 4, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [185, 4, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [185, 4, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [185, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [185, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[186, 4, 2, "p-d", "d", "The distance $d$ in meters between the transmitter and receiver."], [186, 4, 2, "p-f", "f", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[187, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [187, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [187, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [187, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[188, 4, 2, "p-n", "n", "The length of the Gray code."]], "sdr.half_sine": [[189, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [189, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [189, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.hexdump": [[190, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [190, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[191, 4, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [191, 4, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [191, 4, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.linear": [[192, 4, 2, "p-type", "type", "The type of output value or signal."], [192, 4, 2, "p-x", "x", "The input value or signal in dB."]], "sdr.mix": [[193, 4, 2, "p-complex", "complex", "Indicates whether to mix by a complex exponential or real sinusoid."], [193, 4, 2, "p-freq", "freq", "The frequency $f$ of the sinusoid in Hz (or 1/samples if sample_rate=1). The frequency must satisfy $-f_s/2 le f le f_s/2$."], [193, 4, 2, "p-phase", "phase", "The phase $phi$ of the sinusoid in degrees."], [193, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal."], [193, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.multirate_taps": [[194, 4, 2, "p-A_stop", "A_stop", "The stopband attenuation $A_{text{stop}}$ in dB."], [194, 4, 2, "p-P", "P", "The interpolation rate $P$."], [194, 4, 2, "p-Q", "Q", "The decimation rate $Q$."], [194, 4, 2, "p-half_length", "half_length", "The half-length of the polyphase filters."]], "sdr.pack": [[195, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [195, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [195, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[196, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[197, 4, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [197, 4, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [197, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[198, 4, 2, "p-db", "db", "Indicates whether to return the result in dB."], [198, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[199, 4, 2, "p-db", "db", "Indicates whether to return the result in dB."], [199, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.plot": [[200, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [201, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [202, 5, 1, "", "eye", "Plots the eye diagram of the baseband modulated signal $x[n]$."], [203, 5, 1, "", "filter", "Plots the magnitude response $|H(omega)|^2$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [204, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [205, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [206, 5, 1, "", "magnitude_response", "Plots the magnitude response $|H(omega)|^2$ of the filter."], [207, 5, 1, "", "p_d", "Plots the probability of detection $P_D$ as a function of received SNR or ENR."], [208, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [209, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [210, 5, 1, "", "phase_response", "Plots the phase response $angle H(omega)$ of the filter."], [211, 5, 1, "", "raster", "Plots a raster of the time-domain signal $x[n]$."], [212, 5, 1, "", "roc", "Plots the receiver operating characteristic (ROC) curve as a function of $P_{FA}$."], [213, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [214, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [215, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [216, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [217, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [218, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [219, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[200, 4, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [200, 4, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."], [200, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."]], "sdr.plot.constellation": [[201, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [201, 4, 2, "p-kwargs", "kwargs", "If heatmap=False, additional keyword arguments to pass to matplotlib.pyplot.scatter(). The following keyword arguments are set by default. The defaults may be overwritten."], [201, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [201, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.eye": [[202, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [202, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [202, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [202, 4, 2, "p-span", "span", "The number of symbols per raster."], [202, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [202, 4, 2, "p-x", "x", "The baseband modulated signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved."]], "sdr.plot.filter": [[203, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [203, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [203, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [203, 4, 2, "p-filter", "filter", "The filter definition."], [203, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [203, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[204, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [204, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [204, 4, 2, "p-filter", "filter", "The filter definition."], [204, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [204, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [204, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.impulse_response": [[205, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [205, 4, 2, "p-filter", "filter", "The filter definition."], [205, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.magnitude_response": [[206, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [206, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [206, 4, 2, "p-filter", "filter", "The filter definition."], [206, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [206, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [206, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.p_d": [[207, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [207, 4, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [207, 4, 2, "p-x", "x", "The SNR or ENR in dB."], [207, 4, 2, "p-x_label", "x_label", "The x-axis label to use."]], "sdr.plot.periodogram": [[208, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [208, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [208, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [208, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [208, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [208, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [208, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [208, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [208, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [208, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_delay": [[209, 4, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [209, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [209, 4, 2, "p-filter", "filter", "The filter definition."], [209, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [209, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [209, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_response": [[210, 4, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [210, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [210, 4, 2, "p-filter", "filter", "The filter definition."], [210, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [210, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [210, 4, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [210, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.raster": [[211, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [211, 4, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\"."], [211, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.collections.LineCollection. The following keyword arguments are set by default. The defaults may be overwritten."], [211, 4, 2, "p-length", "length", "The length of each raster in samples. This must be provided if x is 1D."], [211, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [211, 4, 2, "p-stride", "stride", "The stride between each raster in samples. If None, the stride is set to length."], [211, 4, 2, "p-x", "x", "The time-domain signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved. If x is 1D, the rastering is determined by length and stride. If x is 2D, the rows correspond to each raster."]], "sdr.plot.roc": [[212, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to the plotting function defined by type."], [212, 4, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [212, 4, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [212, 4, 2, "p-type", "type", "The type of plot to generate."]], "sdr.plot.ser": [[213, 4, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [213, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."], [213, 4, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.spectrogram": [[214, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [214, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [214, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.pcolormesh(). The following keyword arguments are set by default. The defaults may be overwritten."], [214, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [214, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [214, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [214, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [214, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [214, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[215, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [215, 4, 2, "p-filter", "filter", "The filter definition."], [215, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.symbol_map": [[216, 4, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [216, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot(). The following keyword arguments are set by default. The defaults may be overwritten."], [216, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [216, 4, 2, "p-modulation", "modulation", "The linear modulation or symbol map ${0, dots, M-1} mapsto mathbb{C}$."]], "sdr.plot.time_domain": [[217, 4, 2, "p-centered", "centered", "Indicates whether to center the x-axis about 0. This argument is mutually exclusive with offset."], [217, 4, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal. If \"color\", the real and imaginary parts will have different colors based on the current Matplotlib color cycle. If \"line\", the real part will have a solid line and the imaginary part will have a dashed line, and both lines will share the same color."], [217, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [217, 4, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. The units of the offset are $1/f_s$. This argument is mutually exclusive with centered."], [217, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [217, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[219, 4, 2, "p-filter", "filter", "The filter definition."], [219, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.polyphase_matrix": [[220, 4, 2, "p-P", "P", "The interpolation rate $P$."], [220, 4, 2, "p-Q", "Q", "The decimation rate $Q$."], [220, 4, 2, "p-taps", "taps", "The multirate FIR filter taps $h_i$."]], "sdr.raised_cosine": [[221, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [221, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [221, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [221, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rectangular": [[222, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [222, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [222, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[223, 4, 2, "p-db", "db", "Indicates whether to return the result in dB."], [223, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[224, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [224, 4, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [224, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [224, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[225, 4, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [225, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.snr_to_ebn0": [[226, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [226, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [226, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [226, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[227, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [227, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.to_complex_bb": [[228, 4, 2, "p-x_r", "x_r", "The real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$. If the length is odd, one zero is appended to the end."]], "sdr.to_real_pb": [[229, 4, 2, "p-x_c", "x_c", "The complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$."]], "sdr.unpack": [[230, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [230, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [230, 4, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.upsample": [[231, 4, 2, "p-rate", "rate", "The upsampling factor $r$."], [231, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.wavelength": [[232, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.zadoff_chu": [[233, 4, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [233, 4, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence. The root must be relatively prime to the length, i.e., $gcd(u, N) = 1$."], [233, 4, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence. When $q ne 0$, the returned sequence is a cyclic shift of the root-$u$ Zadoff-Chu sequence."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"convers": 0, "decibel": 0, "from": [0, 238, 239, 240], "e_b": 0, "n_0": 0, "e_": 0, "": [0, 242, 243], "n": [0, 241, 242, 243], "data": 1, "manipul": [1, 3], "detect": [2, 7], "detector": 2, "theoret": 2, "limit": 2, "digit": [3, 243], "signal": [3, 235, 241, 244], "process": 3, "filter": [3, 7, 242, 243, 245], "multir": 3, "resampl": [3, 241], "correl": 3, "link": 4, "budget": 4, "channel": [4, 235], "capac": 4, "path": 4, "loss": 4, "antenna": 4, "measur": 5, "energi": 5, "power": [5, 244], "voltag": 5, "modul": [5, 6, 7], "linear": 6, "orthogon": 6, "puls": [6, 244, 247], "shape": [6, 244, 247], "symbol": [6, 246], "map": [6, 246], "encod": 6, "plot": [7, 244], "configur": [7, 239, 240], "time": [7, 244, 245], "domain": [7, 244, 245], "frequenc": [7, 242, 243, 244, 245], "spectral": 7, "estim": 7, "analysi": 7, "probabl": 8, "note": [9, 186, 194, 206, 208, 214], "constructor": [9, 26, 32, 47, 54, 71, 78, 97, 107, 125, 134, 142, 146, 154], "method": [9, 26, 32, 42, 47, 54, 71, 78, 97, 107, 125, 134, 142, 146, 154, 158], "properti": [9, 26, 32, 54, 71, 78, 97, 107, 125, 134, 142, 146, 154], "see": [26, 47, 49, 62, 63, 64, 68, 86, 87, 89, 94, 111, 121, 134, 150, 152, 156, 157, 173, 196, 231], "also": [26, 47, 49, 62, 63, 64, 68, 86, 87, 89, 94, 111, 121, 134, 150, 152, 156, 157, 173, 196, 231], "special": [26, 32, 54, 71, 78, 97, 125, 134], "string": [32, 54, 78, 97, 107, 142, 146, 154], "represent": [32, 54, 78, 97, 107, 142, 146, 154], "stream": [32, 54, 78, 97], "mode": [32, 54, 78, 97], "onli": [32, 54, 78, 97], "warn": [178, 231], "sequenc": 234, "simul": 235, "model": 235, "impair": 235, "synchron": 236, "document": 237, "instal": [237, 238, 239, 240, 248], "build": 237, "doc": 237, "serv": 237, "pypi": 238, "github": 238, "edit": 238, "local": 238, "folder": 238, "dev": 238, "depend": 238, "linter": 239, "run": [239, 240], "command": [239, 240], "line": [239, 240], "v": [239, 240], "code": [239, 240], "unit": 240, "test": 240, "farrow": 241, "arbitrari": 241, "construct": 241, "an": [241, 242, 243], "input": 241, "x": 241, "t_": 241, "rate": [241, 246], "r": 241, "y": 241, "frac": 241, "upsampl": 241, "integ": 241, "downsampl": 241, "irrat": 241, "fir": 242, "creat": [242, 243], "examin": [242, 243, 244], "impuls": [242, 243], "respons": [242, 243, 245], "h": [242, 243], "step": [242, 243, 245], "omega": [242, 243], "group": [242, 243], "delai": [242, 243], "tau_g": [242, 243], "fulli": [242, 243], "analyz": [242, 243, 245], "iir": 243, "zero": 243, "pole": 243, "stabil": 243, "peak": 244, "averag": 244, "qpsk": [244, 246], "variou": 244, "across": [244, 245], "excess": 244, "bandwidth": 244, "phase": [245, 246], "lock": 245, "loop": 245, "design": 245, "proport": 245, "plu": 245, "integr": 245, "ppi": 245, "implement": 245, "pll": 245, "close": 245, "perform": 245, "compar": 245, "zeta": 245, "b_n": 245, "t": 245, "shift": 246, "kei": 246, "constel": 246, "bpsk": 246, "8": 246, "psk": 246, "16": 246, "error": 246, "curv": 246, "bit": 246, "rais": 247, "cosin": 247, "squar": 247, "root": 247, "gaussian": 247, "sdr": 248, "featur": 248, "v0": 249, "0": 249, "7": 249, "chang": 249, "contributor": 249, "6": 249, "5": 249, "4": 249, "3": 249, "2": 249, "1": 249, "version": 250, "alpha": 250, "releas": 250, "beta": 250}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Conversions": [[0, "conversions"]], "Decibels": [[0, "decibels"]], "From E_b/N_0": [[0, "from-e-b-n-0"]], "From E_s/N_0": [[0, "from-e-s-n-0"]], "From S/N": [[0, "from-s-n"]], "Data manipulation": [[1, "data-manipulation"]], "Detection": [[2, "detection"], [7, "detection"]], "Detectors": [[2, "detectors"]], "Theoretical limits": [[2, "theoretical-limits"]], "Digital signal processing": [[3, "digital-signal-processing"]], "Filtering": [[3, "filtering"]], "Multirate filtering": [[3, "multirate-filtering"]], "Resampling": [[3, "resampling"]], "Correlation": [[3, "correlation"]], "Signal manipulation": [[3, "signal-manipulation"]], "Link budgets": [[4, "link-budgets"]], "Channel capacity": [[4, "channel-capacity"]], "Path losses": [[4, "path-losses"]], "Antennas": [[4, "antennas"]], "Measurement": [[5, "measurement"]], "Energy": [[5, "energy"]], "Power": [[5, "power"]], "Voltage": [[5, "voltage"]], "Modulation": [[5, "modulation"], [6, "modulation"], [7, "modulation"]], "Linear modulations": [[6, "linear-modulations"]], "Orthogonal modulations": [[6, "orthogonal-modulations"]], "Pulse shaping": [[6, "pulse-shaping"]], "Symbol mapping": [[6, "symbol-mapping"], [246, "symbol-mapping"]], "Symbol encoding": [[6, "symbol-encoding"]], "Plotting": [[7, "plotting"]], "Configuration": [[7, "configuration"], [239, "configuration"], [240, "configuration"]], "Time-domain": [[7, "time-domain"]], "Frequency-domain": [[7, "frequency-domain"]], "Spectral estimation": [[7, "spectral-estimation"]], "Filter analysis": [[7, "filter-analysis"]], "Probability": [[8, "probability"]], "Note": [[9, null], [186, null], [194, null], [206, null], [208, null], [208, null], [214, null]], "Constructors": [[9, "constructors"], [26, "constructors"], [32, "constructors"], [47, "constructors"], [54, "constructors"], [71, "constructors"], [78, "constructors"], [97, "constructors"], [107, "constructors"], [125, "constructors"], [134, "constructors"], [142, "constructors"], [146, "constructors"], [154, "constructors"]], "Methods": [[9, "methods"], [26, "methods"], [32, "methods"], [42, "methods"], [47, "methods"], [54, "methods"], [71, "methods"], [78, "methods"], [97, "methods"], [107, "methods"], [125, "methods"], [134, "methods"], [142, "methods"], [146, "methods"], [154, "methods"], [158, "methods"]], "Properties": [[9, "properties"], [26, "properties"], [32, "properties"], [54, "properties"], [71, "properties"], [78, "properties"], [97, "properties"], [107, "properties"], [125, "properties"], [134, "properties"], [142, "properties"], [146, "properties"], [154, "properties"]], "See also": [[26, null], [47, null], [49, null], [62, null], [63, null], [64, null], [68, null], [86, null], [87, null], [89, null], [94, null], [111, null], [121, null], [134, null], [150, null], [152, null], [156, null], [157, null], [173, null], [196, null], [231, null]], "Special methods": [[26, "special-methods"], [32, "special-methods"], [54, "special-methods"], [71, "special-methods"], [78, "special-methods"], [97, "special-methods"], [125, "special-methods"], [134, "special-methods"]], "String representation": [[32, "string-representation"], [54, "string-representation"], [78, "string-representation"], [97, "string-representation"], [107, "string-representation"], [142, "string-representation"], [146, "string-representation"], [154, "string-representation"]], "Streaming mode only": [[32, "streaming-mode-only"], [54, "streaming-mode-only"], [78, "streaming-mode-only"], [97, "streaming-mode-only"]], "Warning": [[178, null], [231, null]], "Sequences": [[234, "sequences"]], "Simulation": [[235, "simulation"]], "Channel models": [[235, "channel-models"]], "Signal impairments": [[235, "signal-impairments"]], "Synchronization": [[236, "synchronization"]], "Documentation": [[237, "documentation"]], "Install": [[237, "install"], [239, "install"], [240, "install"]], "Build the docs": [[237, "build-the-docs"]], "Serve the docs": [[237, "serve-the-docs"]], "Installation": [[238, "installation"], [248, "installation"]], "Install from PyPI": [[238, "install-from-pypi"]], "Install from GitHub": [[238, "install-from-github"]], "Editable install from local folder": [[238, "editable-install-from-local-folder"]], "Install the dev dependencies": [[238, "install-the-dev-dependencies"]], "Linter": [[239, "linter"]], "Run from the command line": [[239, "run-from-the-command-line"], [240, "run-from-the-command-line"]], "Run from VS Code": [[239, "run-from-vs-code"], [240, "run-from-vs-code"]], "Unit Tests": [[240, "unit-tests"]], "Farrow arbitrary resampler": [[241, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[241, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[241, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[241, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[241, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[241, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[241, "downsample-by-an-irrational-rate"]], "FIR filters": [[242, "fir-filters"]], "Create an FIR filter": [[242, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[242, "examine-the-impulse-response-h-n"], [243, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[242, "examine-the-step-response-s-n"], [243, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[242, "examine-the-frequency-response-h-omega"], [243, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[242, "examine-the-group-delay-tau-g-omega"], [243, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[242, "fully-analyze-a-fir-filter"]], "IIR filters": [[243, "iir-filters"]], "Create an IIR filter": [[243, "create-an-iir-filter"]], "Examine the zeros and poles": [[243, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[243, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[243, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[244, "peak-to-average-power"]], "QPSK signal with various pulse shapes": [[244, "qpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[244, "examine-time-domain"]], "Examine frequency domain": [[244, "examine-frequency-domain"]], "Plot across excess bandwidth": [[244, "plot-across-excess-bandwidth"]], "Phase-locked loops": [[245, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[245, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[245, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[245, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[245, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[245, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[245, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[245, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[246, "phase-shift-keying"]], "Constellations": [[246, "constellations"]], "BPSK": [[246, "bpsk"]], "QPSK": [[246, "qpsk"]], "8-PSK": [[246, "id1"]], "16-PSK": [[246, "id2"]], "Error rate curves": [[246, "error-rate-curves"]], "Bit error rate curves": [[246, "bit-error-rate-curves"]], "Symbol error rate curves": [[246, "symbol-error-rate-curves"]], "Pulse shapes": [[247, "pulse-shapes"]], "Raised cosine": [[247, "raised-cosine"]], "Square-root raised cosine": [[247, "square-root-raised-cosine"]], "Gaussian": [[247, "gaussian"]], "sdr": [[248, "sdr"]], "Features": [[248, "features"]], "v0.0": [[249, "v0-0"]], "v0.0.7": [[249, "v0-0-7"]], "Changes": [[249, "changes"], [249, "id1"], [249, "id3"], [249, "id5"], [249, "id7"], [249, "id9"], [249, "id11"]], "Contributors": [[249, "contributors"], [249, "id2"], [249, "id4"], [249, "id6"], [249, "id8"], [249, "id10"], [249, "id12"]], "v0.0.6": [[249, "v0-0-6"]], "v0.0.5": [[249, "v0-0-5"]], "v0.0.4": [[249, "v0-0-4"]], "v0.0.3": [[249, "v0-0-3"]], "v0.0.2": [[249, "v0-0-2"]], "v0.0.1": [[249, "v0-0-1"]], "Versioning": [[250, "versioning"]], "Alpha releases": [[250, "alpha-releases"]], "Beta releases": [[250, "beta-releases"]]}, "indexentries": {"module": [[3, "module-sdr"]], "sdr": [[3, "module-sdr"]]}, "docurls": ["api/conversions/", "api/data-manipulation/", "api/detection/", "api/dsp/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.DDS/", "api/sdr.DDS.__call__/", "api/sdr.DDS.__init__/", "api/sdr.DDS.nco/", "api/sdr.DDS.reset/", "api/sdr.DDS.step/", "api/sdr.Decimator/", "api/sdr.Decimator.__call__/", "api/sdr.Decimator.__init__/", "api/sdr.Decimator.__repr__/", "api/sdr.Decimator.__str__/", "api/sdr.Decimator.method/", "api/sdr.Decimator.polyphase_taps/", "api/sdr.Decimator.rate/", "api/sdr.Decimator.reset/", "api/sdr.Decimator.taps/", "api/sdr.EnergyDetector/", "api/sdr.EnergyDetector.p_d/", "api/sdr.EnergyDetector.p_fa/", "api/sdr.EnergyDetector.roc/", "api/sdr.EnergyDetector.threshold/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__call__/", "api/sdr.FIR.__init__/", "api/sdr.FIR.__len__/", "api/sdr.FIR.__repr__/", "api/sdr.FIR.__str__/", "api/sdr.FIR.delay/", "api/sdr.FIR.flush/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.frequency_response_log/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.reset/", "api/sdr.FIR.state/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__call__/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__call__/", "api/sdr.IIR.__init__/", "api/sdr.IIR.__repr__/", "api/sdr.IIR.__str__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.state/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.Interpolator/", "api/sdr.Interpolator.__call__/", "api/sdr.Interpolator.__init__/", "api/sdr.Interpolator.__repr__/", "api/sdr.Interpolator.__str__/", "api/sdr.Interpolator.method/", "api/sdr.Interpolator.polyphase_taps/", "api/sdr.Interpolator.rate/", "api/sdr.Interpolator.reset/", "api/sdr.Interpolator.taps/", "api/sdr.LinearModulation/", "api/sdr.LinearModulation.__init__/", "api/sdr.LinearModulation.__repr__/", "api/sdr.LinearModulation.__str__/", "api/sdr.LinearModulation.ber/", "api/sdr.LinearModulation.bps/", "api/sdr.LinearModulation.decide_symbols/", "api/sdr.LinearModulation.demodulate/", "api/sdr.LinearModulation.map_symbols/", "api/sdr.LinearModulation.modulate/", "api/sdr.LinearModulation.order/", "api/sdr.LinearModulation.phase_offset/", "api/sdr.LinearModulation.pulse_shape/", "api/sdr.LinearModulation.rx_filter/", "api/sdr.LinearModulation.ser/", "api/sdr.LinearModulation.sps/", "api/sdr.LinearModulation.symbol_map/", "api/sdr.LinearModulation.tx_filter/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__call__/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__call__/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.OQPSK/", "api/sdr.OQPSK.__init__/", "api/sdr.OQPSK.__repr__/", "api/sdr.OQPSK.__str__/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.__repr__/", "api/sdr.PSK.__str__/", "api/sdr.PSK.ber/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.PiMPSK/", "api/sdr.PiMPSK.__init__/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.ReplicaCorrelator/", "api/sdr.ReplicaCorrelator.p_d/", "api/sdr.ReplicaCorrelator.p_fa/", "api/sdr.ReplicaCorrelator.roc/", "api/sdr.ReplicaCorrelator.threshold/", "api/sdr.albersheim/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.barker/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.db/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.downsample/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.evm/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.half_sine/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.linear/", "api/sdr.mix/", "api/sdr.multirate_taps/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.eye/", "api/sdr.plot.filter/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.magnitude_response/", "api/sdr.plot.p_d/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.raster/", "api/sdr.plot.roc/", "api/sdr.plot.ser/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.polyphase_matrix/", "api/sdr.raised_cosine/", "api/sdr.rectangular/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.to_complex_bb/", "api/sdr.to_real_pb/", "api/sdr.unpack/", "api/sdr.upsample/", "api/sdr.wavelength/", "api/sdr.zadoff_chu/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/installation/", "development/linter/", "development/unit-tests/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})