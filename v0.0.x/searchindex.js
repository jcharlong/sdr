Search.setIndex({"titles": ["Conversions", "Data manipulation", "Digital signal processing", "Link budgets", "Measurement", "Modulation", "Plotting", "Probability", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.DDS", "sdr.DDS.__call__", "sdr.DDS.__init__", "sdr.DDS.nco", "sdr.DDS.reset", "sdr.DDS.step", "sdr.Decimator", "sdr.Decimator.__call__", "sdr.Decimator.__init__", "sdr.Decimator.__repr__", "sdr.Decimator.__str__", "sdr.Decimator.method", "sdr.Decimator.polyphase_taps", "sdr.Decimator.rate", "sdr.Decimator.reset", "sdr.Decimator.taps", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__call__", "sdr.FIR.__init__", "sdr.FIR.__len__", "sdr.FIR.__repr__", "sdr.FIR.__str__", "sdr.FIR.delay", "sdr.FIR.flush", "sdr.FIR.frequency_response", "sdr.FIR.frequency_response_log", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.reset", "sdr.FIR.state", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FarrowResampler", "sdr.FarrowResampler.__call__", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.order", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__call__", "sdr.IIR.__init__", "sdr.IIR.__repr__", "sdr.IIR.__str__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.frequency_response", "sdr.IIR.frequency_response_log", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.state", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.Interpolator", "sdr.Interpolator.__call__", "sdr.Interpolator.__init__", "sdr.Interpolator.__repr__", "sdr.Interpolator.__str__", "sdr.Interpolator.method", "sdr.Interpolator.polyphase_taps", "sdr.Interpolator.rate", "sdr.Interpolator.reset", "sdr.Interpolator.taps", "sdr.LoopFilter", "sdr.LoopFilter.K1", "sdr.LoopFilter.K2", "sdr.LoopFilter.__call__", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.iir", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.reset", "sdr.NCO", "sdr.NCO.K0", "sdr.NCO.__call__", "sdr.NCO.__init__", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.reset", "sdr.NCO.step", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.ber", "sdr.PSK.bps", "sdr.PSK.demodulate", "sdr.PSK.modulate", "sdr.PSK.order", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.Q", "sdr.Qinv", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.barker", "sdr.bec", "sdr.bec_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.crest_factor", "sdr.db", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.downsample", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.evm", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.hexdump", "sdr.iq_imbalance", "sdr.linear", "sdr.mix", "sdr.multirate_taps", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.eye", "sdr.plot.filter", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.magnitude_response", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.raster", "sdr.plot.ser", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.polyphase_matrix", "sdr.raised_cosine", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.to_complex_bb", "sdr.to_real_pb", "sdr.unpack", "sdr.upsample", "sdr.zadoff_chu", "Sequences", "Simulation", "Synchronization", "Documentation", "Installation", "Linter", "Unit Tests", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "sdr", "v0.0", "Versioning"], "terms": {"sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211], "db": [0, 3, 4, 8, 19, 21, 41, 43, 44, 45, 47, 120, 126, 130, 131, 132, 140, 145, 146, 148, 149, 150, 152, 153, 156, 157, 159, 161, 162, 163, 164, 165, 166, 176, 185, 188, 189, 205, 207, 208, 210], "x": [0, 1, 2, 4, 5, 6, 7, 8, 25, 26, 31, 32, 41, 43, 48, 49, 65, 66, 72, 74, 91, 92, 101, 104, 110, 112, 118, 122, 123, 128, 129, 130, 131, 134, 137, 139, 140, 141, 142, 143, 144, 147, 150, 151, 156, 157, 158, 160, 161, 163, 164, 166, 167, 168, 169, 171, 172, 173, 174, 175, 177, 179, 180, 185, 187, 192, 193, 196, 199, 205, 206, 207, 211], "arraylik": [0, 1, 2, 3, 4, 5, 6, 7, 25, 26, 31, 32, 33, 41, 43, 48, 49, 50, 65, 66, 69, 72, 73, 74, 75, 91, 92, 93, 101, 104, 110, 112, 118, 119, 120, 122, 123, 126, 128, 129, 130, 131, 132, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 196], "ndarrai": [0, 1, 2, 3, 5, 7, 25, 26, 30, 31, 32, 37, 40, 41, 46, 48, 49, 55, 56, 57, 58, 61, 62, 64, 65, 66, 71, 72, 74, 78, 79, 80, 81, 83, 85, 87, 88, 90, 91, 92, 97, 100, 101, 104, 110, 112, 117, 118, 120, 122, 123, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 151, 152, 153, 154, 156, 157, 158, 159, 160, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196], "convert": [0, 2, 140, 145, 146, 148, 149, 155, 157, 183, 188, 189, 190, 191], "linear": [0, 91, 93, 96, 118, 131, 140, 157, 172, 177, 209, 210], "unit": [0, 25, 31, 48, 62, 72, 88, 91, 101, 110, 113, 114, 115, 119, 131, 132, 140, 141, 142, 147, 157, 178, 180, 184, 186, 199, 203, 204, 206, 209], "ebn0_to_esn0": [0, 126, 145, 207, 210], "ebn0": [0, 6, 118, 120, 132, 145, 146, 165, 207], "bp": [0, 118, 121, 145, 146, 148, 188, 207], "int": [0, 1, 2, 5, 6, 25, 30, 31, 33, 38, 41, 43, 44, 47, 48, 51, 54, 56, 57, 58, 59, 62, 65, 68, 72, 80, 81, 83, 84, 88, 91, 93, 98, 110, 117, 118, 119, 121, 124, 131, 133, 136, 141, 142, 144, 145, 146, 148, 149, 153, 154, 155, 159, 160, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 183, 184, 186, 188, 189, 192, 193, 194, 195, 207], "ebn0_to_snr": [0, 146, 210], "esn0_to_ebn0": [0, 120, 148, 210], "esn0": [0, 6, 118, 126, 148, 149, 176, 207], "esn0_to_snr": [0, 149, 207, 210], "sp": [0, 5, 6, 146, 149, 153, 167, 184, 186, 188, 189, 190, 191, 205, 207, 208], "1": [0, 2, 6, 7, 8, 15, 18, 22, 24, 25, 27, 31, 33, 34, 35, 37, 40, 41, 48, 51, 52, 53, 54, 56, 57, 72, 73, 76, 77, 80, 81, 91, 92, 93, 94, 95, 97, 100, 101, 105, 106, 110, 113, 118, 119, 120, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 202, 203, 204, 205, 206, 207, 208, 211], "snr_to_ebn0": [0, 120, 132, 188, 210], "snr": [0, 3, 41, 43, 44, 45, 46, 47, 131, 132, 188, 189, 190, 191, 196, 207, 210], "snr_to_esn0": [0, 126, 189, 210], "pack": [1, 41, 43, 155, 160, 209, 210], "bpe": [1, 160, 192], "binari": [1, 3, 5, 119, 127, 133, 134, 135, 136, 137, 138, 143, 160, 179, 192, 196, 207, 209, 210], "arrai": [1, 37, 40, 41, 93, 97, 100, 119, 127, 133, 134, 136, 137, 141, 142, 143, 154, 160, 180, 183, 192, 204], "an": [1, 2, 3, 31, 48, 58, 72, 73, 75, 83, 91, 92, 119, 120, 126, 132, 160, 165, 170, 176, 192, 199, 200, 209], "multipl": [1, 160, 192, 207], "bit": [1, 4, 6, 41, 43, 46, 118, 119, 120, 121, 127, 132, 134, 135, 137, 138, 145, 146, 148, 155, 160, 165, 188, 192, 209, 210], "per": [1, 26, 32, 49, 92, 112, 118, 119, 121, 131, 132, 145, 146, 148, 149, 151, 153, 155, 160, 166, 167, 184, 186, 187, 188, 189, 192, 205, 208], "element": [1, 155, 160, 192], "unpack": [1, 41, 43, 155, 192, 207, 209, 210], "hexdump": [1, 41, 155, 209, 210], "byte": [1, 155], "width": [1, 155], "16": [1, 120, 126, 127, 145, 146, 148, 155, 165, 176, 183, 184, 186, 188, 189, 205, 210], "str": [1, 31, 34, 35, 48, 52, 53, 72, 76, 77, 91, 94, 95, 155, 167, 172, 175, 177], "return": [1, 5, 8, 16, 18, 21, 22, 26, 30, 31, 32, 34, 35, 41, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 62, 66, 72, 74, 76, 77, 80, 81, 83, 88, 91, 92, 94, 95, 104, 112, 117, 120, 122, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 203, 204, 205, 207], "specifi": [1, 41, 44, 45, 47, 131, 132, 143, 155, 203, 204], "class": [2, 4, 8, 25, 31, 41, 43, 44, 45, 46, 47, 48, 65, 72, 91, 101, 110, 118, 197, 203, 204, 207, 209, 210], "fir": [2, 31, 32, 33, 34, 35, 37, 39, 40, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 95, 97, 99, 100, 159, 167, 168, 169, 170, 171, 173, 174, 178, 182, 183, 205, 209, 210], "implement": [2, 5, 25, 31, 48, 65, 72, 91, 101, 107, 110, 118, 197, 202], "finit": [2, 31, 48, 91, 209, 210], "impuls": [2, 6, 31, 48, 58, 72, 83, 91, 153, 168, 170, 180, 208, 209, 210], "respons": [2, 6, 31, 48, 56, 57, 58, 62, 72, 80, 81, 83, 88, 91, 153, 168, 169, 170, 171, 174, 178, 208, 209, 210], "iir": [2, 6, 8, 17, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 101, 107, 168, 169, 170, 171, 173, 174, 178, 182, 203, 206, 209, 210], "infinit": [2, 72, 209, 210], "interpol": [2, 31, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 159, 167, 183, 193, 205, 207, 209, 210], "polyphas": [2, 31, 32, 33, 37, 40, 91, 92, 93, 97, 100, 144, 159, 183, 193, 209, 210], "decim": [2, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 118, 119, 122, 123, 127, 144, 159, 183, 207, 209, 210], "multirate_tap": [2, 33, 93, 159, 210], "p": [2, 3, 7, 128, 129, 134, 135, 137, 138, 143, 159, 183, 196], "q": [2, 7, 128, 129, 159, 183, 194, 210], "comput": [2, 7, 31, 118, 120, 126, 128, 129, 131, 152, 159, 203, 204, 206, 208], "achiev": [2, 159, 183, 207, 208], "ration": [2, 159, 183], "polyphase_matrix": [2, 183, 210], "tap": [2, 31, 33, 37, 40, 48, 53, 64, 65, 71, 72, 78, 79, 91, 93, 97, 100, 183, 203, 204], "h_i": [2, 31, 33, 37, 40, 48, 50, 64, 91, 93, 97, 100, 183, 203], "matrix": [2, 143, 183, 196], "h_": [2, 8, 31, 37, 40, 91, 97, 100, 183, 206], "i": [2, 8, 15, 24, 31, 32, 33, 37, 40, 41, 46, 48, 49, 50, 58, 62, 63, 64, 65, 70, 72, 75, 79, 83, 88, 89, 91, 92, 93, 97, 100, 101, 105, 106, 108, 118, 119, 128, 129, 130, 131, 132, 135, 138, 140, 143, 145, 146, 148, 149, 151, 152, 153, 155, 156, 157, 160, 162, 163, 164, 166, 167, 168, 170, 171, 172, 175, 177, 178, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211], "j": [2, 8, 25, 31, 37, 40, 72, 75, 78, 91, 97, 100, 118, 131, 143, 156, 158, 183, 194, 203, 204, 206], "farrowresampl": [2, 65, 66, 67, 68, 69, 70, 71, 202, 210], "cubic": [2, 65], "farrow": [2, 65, 66, 67, 68, 69, 70, 71, 209, 210], "arbitrari": [2, 65, 66, 67, 68, 69, 70, 71, 209, 210], "mix": [2, 158, 209, 210], "freq": [2, 3, 151, 158, 162, 196, 202, 206], "float": [2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 41, 43, 44, 45, 47, 56, 57, 65, 66, 72, 73, 80, 81, 82, 101, 102, 103, 105, 106, 108, 110, 111, 113, 114, 115, 118, 119, 125, 130, 131, 132, 134, 137, 139, 147, 150, 151, 153, 156, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 171, 172, 173, 174, 175, 177, 179, 180, 184, 185, 186, 187, 196], "0": [2, 5, 6, 7, 15, 25, 27, 31, 32, 37, 40, 41, 48, 49, 50, 52, 53, 56, 57, 64, 72, 73, 75, 76, 77, 78, 79, 80, 81, 91, 92, 93, 97, 100, 105, 110, 113, 118, 119, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 160, 162, 166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 198, 199, 202, 203, 204, 205, 206, 207, 208, 211], "time": [2, 4, 8, 15, 16, 18, 19, 20, 21, 22, 48, 72, 101, 105, 118, 130, 131, 139, 143, 144, 147, 149, 151, 153, 156, 158, 161, 163, 164, 167, 168, 172, 175, 177, 180, 184, 185, 186, 187, 189, 190, 191, 193, 196, 202, 203, 204, 208, 209, 210], "domain": [2, 4, 130, 131, 139, 144, 147, 151, 156, 158, 161, 163, 164, 168, 172, 175, 177, 180, 185, 187, 190, 191, 193, 196, 209, 210], "n": [2, 4, 5, 6, 7, 8, 25, 26, 30, 31, 32, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 72, 74, 75, 78, 80, 81, 83, 84, 88, 91, 92, 101, 104, 110, 112, 117, 128, 129, 130, 131, 132, 133, 136, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 158, 159, 161, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 180, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 206, 208, 209], "complex": [2, 4, 6, 25, 26, 30, 118, 119, 122, 123, 127, 131, 132, 144, 150, 156, 158, 166, 167, 175, 179, 180, 190, 191, 193, 196, 202, 203, 204, 206, 207, 209, 210], "exponenti": [2, 25, 26, 30, 144, 158, 190, 191, 193, 202, 203, 204], "real": [2, 128, 129, 131, 158, 167, 175, 180, 190, 191, 202, 203, 204, 206, 209, 210], "sinusoid": [2, 118, 131, 158, 190, 191, 204], "to_complex_bb": [2, 190, 210], "x_r": [2, 190, 191], "passband": [2, 153, 190, 191, 205, 210], "center": [2, 180, 190, 191, 210], "f_": [2, 8, 15, 23, 32, 56, 57, 80, 81, 92, 144, 146, 149, 151, 153, 158, 167, 168, 169, 171, 172, 173, 174, 175, 177, 180, 187, 188, 189, 190, 191, 193, 202, 203, 204, 206, 208], "": [2, 6, 8, 16, 18, 19, 20, 22, 23, 31, 43, 44, 45, 46, 47, 48, 56, 57, 62, 72, 80, 81, 88, 91, 118, 122, 123, 131, 132, 146, 149, 150, 151, 156, 166, 167, 168, 169, 171, 172, 173, 174, 175, 177, 178, 180, 181, 187, 188, 189, 190, 191, 201, 202, 205, 207, 209], "r": [2, 31, 32, 33, 37, 38, 40, 65, 66, 91, 92, 93, 97, 98, 100, 132, 144, 145, 146, 148, 150, 153, 158, 184, 186, 188, 190, 191, 193, 198, 199, 200, 201, 204, 205, 206, 208], "4": [2, 16, 18, 31, 37, 40, 41, 57, 76, 77, 81, 91, 92, 97, 100, 120, 125, 126, 127, 131, 132, 133, 135, 136, 138, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 162, 165, 166, 167, 168, 169, 170, 171, 173, 174, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 198, 199, 202, 204, 205, 207], "sampl": [2, 8, 15, 23, 25, 26, 27, 30, 31, 32, 48, 49, 54, 56, 57, 58, 62, 65, 69, 80, 81, 83, 88, 91, 92, 93, 101, 105, 108, 110, 112, 113, 114, 117, 131, 144, 146, 149, 151, 153, 158, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 180, 184, 186, 187, 188, 189, 190, 191, 193, 196, 202, 205, 206, 208, 209], "rate": [2, 4, 6, 8, 15, 23, 31, 32, 33, 35, 38, 41, 42, 43, 45, 46, 56, 57, 65, 66, 80, 81, 91, 92, 93, 95, 98, 118, 120, 126, 144, 145, 146, 148, 151, 158, 159, 165, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 180, 183, 187, 188, 190, 191, 193, 196, 209, 210], "baseband": [2, 6, 8, 158, 167, 190, 191, 205, 206, 210], "x_c": [2, 190, 191], "c": [2, 8, 16, 18, 19, 20, 21, 22, 43, 44, 45, 46, 47, 101, 118, 127, 132, 135, 138, 152, 162, 190, 191, 206], "2": [2, 5, 6, 8, 16, 18, 21, 31, 34, 35, 37, 40, 41, 48, 52, 53, 54, 56, 57, 76, 77, 80, 81, 91, 92, 94, 95, 97, 100, 118, 119, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 199, 201, 202, 203, 204, 205, 206, 207, 208], "to_real_pb": [2, 191, 205, 210], "2f_": [2, 191], "upsampl": [2, 91, 193], "factor": [2, 4, 8, 15, 24, 101, 105, 106, 139, 144, 193, 206], "downsampl": [2, 144], "bsc_capac": [3, 138, 210], "calcul": [3, 4, 132, 135, 138, 150, 152, 162], "symmetr": [3, 137, 138, 143, 190, 191, 196, 209], "bsc": [3, 137, 138, 143, 196, 209, 210], "bec_capac": [3, 135, 210], "erasur": [3, 134, 135, 143, 196, 209], "bec": [3, 134, 135, 143, 196, 209, 210], "awgn_capac": [3, 132, 210], "addit": [3, 131, 132, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 193, 196, 209], "white": [3, 131, 132, 196, 209], "gaussian": [3, 5, 131, 132, 153, 196, 209, 210], "nois": [3, 8, 9, 10, 15, 21, 41, 43, 44, 45, 46, 47, 101, 105, 108, 120, 126, 131, 132, 145, 146, 148, 149, 165, 176, 188, 189, 196, 206, 209], "awgn": [3, 120, 126, 131, 132, 150, 165, 166, 176, 190, 191, 196, 207, 209, 210], "fspl": [3, 152], "d": [3, 31, 48, 54, 91, 152, 162, 198, 199, 209], "f": [3, 16, 18, 31, 56, 57, 80, 81, 91, 131, 151, 152, 153, 158, 162, 187, 194, 202, 203, 204, 205, 206, 207, 208], "free": [3, 152, 209], "space": [3, 57, 81, 152, 209], "parabolic_antenna": [3, 162, 210], "tupl": [3, 31, 41, 43, 46, 48, 56, 57, 72, 80, 81, 91, 162, 166, 168, 169, 170, 171, 173, 174, 178, 179, 182], "gain": [3, 8, 11, 12, 13, 14, 15, 25, 27, 72, 73, 82, 101, 102, 103, 105, 110, 111, 113, 152, 153, 162, 206, 209], "g": [3, 46, 162, 199], "beamwidth": [3, 162], "theta": [3, 27, 110, 113, 115, 162], "parabol": [3, 162], "reflector": [3, 162], "signal": [4, 6, 8, 16, 18, 21, 22, 25, 26, 31, 32, 41, 43, 44, 45, 46, 47, 48, 49, 55, 65, 66, 72, 74, 91, 92, 101, 104, 110, 112, 117, 130, 131, 132, 139, 140, 144, 145, 146, 147, 148, 149, 151, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 167, 172, 175, 177, 180, 183, 185, 187, 188, 189, 190, 191, 193, 203, 204, 206, 208, 209, 210], "peak_pow": [4, 161, 163, 210], "bool": [4, 6, 31, 33, 48, 50, 63, 65, 67, 70, 72, 73, 75, 89, 91, 93, 120, 126, 130, 158, 163, 164, 166, 174, 175, 179, 180, 185], "fals": [4, 6, 31, 33, 34, 35, 48, 50, 52, 53, 65, 67, 72, 73, 75, 76, 77, 91, 92, 93, 94, 95, 120, 126, 130, 134, 137, 143, 158, 163, 164, 166, 172, 177, 180, 185, 204, 208], "peak": [4, 139, 150, 161, 163, 164], "average_pow": [4, 130, 161, 210], "averag": [4, 41, 130, 131, 132, 150, 161, 172], "papr": [4, 161, 205, 210], "ratio": [4, 21, 41, 43, 44, 45, 46, 47, 120, 126, 131, 132, 145, 146, 148, 149, 161, 165, 176, 188, 189], "peak_voltag": [4, 139, 164, 210], "rms_voltag": [4, 139, 185, 210], "root": [4, 5, 150, 167, 180, 185, 186, 194, 195, 203, 209], "mean": [4, 150, 172, 177, 185, 208], "squar": [4, 5, 150, 152, 162, 180, 185, 186, 203], "rm": [4, 139, 150, 185], "crest_factor": [4, 139, 161, 210], "crest": [4, 139], "errorr": [4, 41, 42, 43, 44, 45, 46, 47, 207, 210], "A": [4, 8, 16, 18, 19, 20, 21, 22, 24, 32, 41, 48, 49, 92, 101, 136, 154, 155, 156, 162, 184, 186, 197, 206], "error": [4, 6, 8, 14, 15, 21, 41, 42, 43, 45, 46, 47, 101, 105, 118, 120, 126, 138, 150, 165, 176, 206, 209, 210], "ber": [4, 6, 41, 118, 120, 165, 207, 209, 210], "symbol": [4, 6, 41, 43, 46, 91, 118, 119, 120, 121, 122, 123, 126, 127, 131, 145, 146, 148, 149, 150, 151, 153, 166, 167, 176, 179, 184, 186, 188, 189, 205, 208, 209, 210], "ser": [4, 6, 41, 118, 126, 176, 207, 209, 210], "evm": [4, 150, 209, 210], "x_hat": [4, 6, 41, 43, 118, 122, 150, 166, 207], "ref": [4, 150, 153, 159], "vector": [4, 41, 69, 150, 172, 177, 209, 210], "magnitud": [4, 6, 133, 150, 168, 171, 194, 209, 210], "hat": [4, 6, 43, 118, 122, 150, 166, 179], "k": [4, 5, 6, 43, 118, 119, 121, 122, 123, 124, 141, 142, 145, 146, 148, 150, 166, 179, 188, 205, 208], "psk": [5, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 150, 151, 156, 165, 166, 167, 176, 179, 187, 205, 209, 210], "phase": [5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 125, 126, 127, 151, 156, 158, 173, 174, 196, 209], "shift": [5, 118, 120, 125, 126, 127, 194, 195, 203, 204, 209], "kei": [5, 118, 120, 125, 126, 127, 209], "demodul": [5, 118, 122, 207], "raised_cosin": [5, 167, 184, 208, 210], "alpha": [5, 153, 181, 184, 186, 205, 208], "span": [5, 6, 153, 167, 184, 186, 205, 208], "rais": [5, 167, 180, 184, 186, 203, 209], "cosin": [5, 167, 180, 184, 186, 203, 209], "rc": [5, 184], "root_raised_cosin": [5, 52, 53, 167, 168, 169, 170, 171, 173, 174, 178, 180, 182, 186, 203, 205, 207, 208, 210], "srrc": [5, 167, 180, 186, 205], "time_bandwidth": [5, 153], "binary_cod": [5, 136, 210], "gener": [5, 131, 136, 154, 198, 207], "code": [5, 31, 34, 48, 52, 72, 76, 91, 94, 119, 127, 133, 136, 145, 146, 148, 154, 166, 179, 188, 195, 199, 207, 210], "length": [5, 6, 31, 32, 48, 49, 51, 58, 62, 74, 91, 92, 93, 119, 133, 136, 153, 154, 159, 168, 170, 172, 175, 177, 178, 184, 186, 190, 194, 195, 200, 202, 205, 208], "gray_cod": [5, 154, 210], "grai": [5, 119, 127, 154, 166, 179, 207, 209], "diff_encod": [5, 120, 126, 141, 142, 210], "y_prev": [5, 141, 142], "differenti": [5, 120, 126, 141, 142, 180, 209, 210], "input": [5, 8, 16, 18, 21, 22, 25, 26, 31, 32, 33, 48, 49, 50, 58, 61, 62, 65, 66, 67, 69, 72, 73, 74, 75, 83, 88, 91, 92, 93, 101, 104, 110, 112, 118, 120, 126, 128, 131, 132, 134, 135, 137, 138, 140, 141, 142, 143, 144, 157, 160, 170, 178, 192, 193, 196, 203, 204, 206], "data": [5, 141, 142, 155, 160, 192, 209], "diff_decod": [5, 141, 142, 210], "y": [5, 25, 26, 30, 31, 32, 48, 49, 55, 66, 72, 74, 91, 92, 101, 104, 110, 112, 117, 131, 134, 137, 141, 142, 143, 144, 151, 156, 158, 166, 171, 172, 177, 179, 180, 187, 193, 206, 207], "decod": [5, 141], "use_styl": [6, 181], "appli": [6, 31, 91, 151, 156, 166, 167, 172, 177, 179, 180, 181, 187, 196], "default": [6, 58, 62, 119, 127, 166, 171, 172, 175, 177, 179, 181, 207], "matplotlib": [6, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 202, 203, 204, 205, 206, 207, 208, 209], "rcparam": [6, 181], "time_domain": [6, 31, 91, 92, 131, 144, 158, 180, 190, 191, 193, 205, 207, 208, 210], "raster": [6, 167, 175, 209], "none": [6, 31, 41, 45, 48, 58, 62, 65, 69, 91, 101, 109, 118, 120, 126, 131, 132, 143, 160, 166, 167, 168, 170, 172, 175, 177, 178, 179, 180, 192, 196, 202, 205, 207], "periodogram": [6, 144, 172, 190, 191, 193, 205, 209, 210], "sample_r": [6, 8, 15, 23, 31, 56, 57, 80, 81, 91, 92, 144, 151, 158, 167, 168, 169, 171, 172, 173, 174, 175, 177, 180, 190, 191, 193, 202, 206, 208], "power": [6, 118, 130, 131, 132, 140, 150, 157, 161, 162, 163, 172, 208, 209], "densiti": [6, 21, 172, 205, 208], "p_": [6, 120, 126, 130, 131, 140, 143, 150, 157, 161, 163, 165, 172, 176], "xx": [6, 172], "us": [6, 25, 28, 31, 33, 36, 39, 48, 50, 55, 60, 65, 67, 72, 73, 75, 86, 91, 92, 93, 96, 99, 101, 107, 118, 122, 132, 135, 138, 150, 155, 159, 160, 166, 167, 168, 170, 172, 177, 178, 192, 198, 199, 200, 201, 203, 204, 207, 208, 209, 211], "welch": [6, 172, 177], "method": [6, 35, 36, 95, 96, 172, 177, 200, 203, 204, 210], "spectrogram": [6, 177, 209, 210], "constel": [6, 125, 131, 150, 151, 156, 166, 187, 194, 209, 210], "heatmap": [6, 166, 207], "symbol_map": [6, 118, 125, 127, 150, 179, 180, 207, 210], "map": [6, 118, 127, 150, 179, 209, 210], "ey": [6, 167, 209], "diagram": [6, 8, 25, 31, 91, 101, 110, 141, 142, 167, 209], "kwarg": [6, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182], "function": [6, 7, 8, 17, 48, 72, 73, 101, 128, 129, 132, 144, 153, 165, 172, 176, 177, 193, 200, 203, 204, 206, 208, 209, 210], "e_b": [6, 43, 44, 45, 46, 47, 118, 120, 132, 145, 146, 148, 165, 188, 209], "n_0": [6, 21, 43, 44, 45, 46, 47, 118, 120, 126, 131, 132, 145, 146, 148, 149, 150, 165, 166, 176, 188, 189, 207, 209], "e_": [6, 43, 44, 45, 46, 47, 118, 126, 131, 132, 145, 148, 149, 150, 166, 176, 189, 207, 209], "impulse_respons": [6, 31, 48, 58, 72, 83, 91, 153, 159, 170, 184, 186, 203, 204, 208, 210], "h": [6, 31, 48, 50, 52, 53, 56, 57, 58, 72, 80, 81, 83, 91, 101, 153, 159, 167, 168, 170, 171, 174, 183, 205, 206, 208], "step_respons": [6, 31, 48, 62, 72, 88, 91, 178, 203, 204, 206, 210], "step": [6, 25, 26, 30, 31, 48, 62, 72, 88, 91, 110, 112, 117, 168, 178, 209], "zeros_pol": [6, 182, 204, 210], "zero": [6, 31, 32, 48, 55, 69, 72, 73, 76, 77, 90, 91, 92, 93, 101, 160, 168, 169, 170, 171, 173, 174, 178, 180, 182, 190, 203, 205, 206, 208, 209, 210], "pole": [6, 72, 73, 76, 77, 85, 168, 169, 170, 171, 173, 174, 178, 182, 203, 209], "magnitude_respons": [6, 56, 57, 80, 81, 159, 171, 184, 186, 203, 204, 206, 208, 210], "omega": [6, 27, 31, 48, 56, 57, 72, 80, 81, 91, 110, 113, 114, 168, 169, 171, 173, 174, 206], "phase_respons": [6, 56, 57, 80, 81, 174, 210], "angl": [6, 174, 206], "phase_delai": [6, 173, 210], "delai": [6, 25, 31, 32, 35, 48, 49, 53, 54, 65, 91, 92, 95, 101, 110, 141, 142, 169, 173, 206, 209], "tau_": [6, 173], "phi": [6, 118, 119, 125, 151, 156, 158, 173], "group_delai": [6, 169, 203, 204, 210], "group": [6, 169, 209], "tau_g": [6, 169], "complementari": [7, 128, 129], "cumul": [7, 128, 129], "distribut": [7, 128, 129], "standard": [7, 128, 129], "normal": [7, 8, 10, 15, 101, 105, 108, 128, 129, 150, 153, 177, 206, 208], "mathcal": [7, 128, 129, 131, 143], "qinv": [7, 128, 129, 210], "invers": [7, 129], "closedlooppl": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 197, 206, 210], "defin": [8, 48, 72, 131, 143, 153, 194, 197, 204, 209], "perform": [8, 32, 49, 92, 120, 126, 144, 193, 194, 197, 203, 204, 207, 209], "close": [8, 15, 17, 197, 209, 210], "loop": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 197, 209, 210], "pll": [8, 9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 197, 209, 210], "thi": [8, 26, 31, 43, 44, 45, 47, 48, 72, 91, 112, 118, 127, 131, 132, 144, 150, 152, 159, 167, 171, 172, 175, 177, 180, 193, 198, 199, 200, 201, 202, 204, 206, 207, 208], "meant": 8, "analysi": [8, 15, 200, 206, 209, 210], "onli": [8, 32, 39, 49, 55, 60, 65, 69, 86, 92, 99, 119, 127, 131, 152, 175, 201, 206, 207], "block": [8, 25, 31, 91, 101, 110, 141, 142], "bb": [8, 205, 206], "ped": [8, 14, 15, 105, 206], "lf": [8, 206], "lo": [8, 206], "e": [8, 25, 46, 130, 134, 135, 147, 194, 199, 203, 204, 206, 207], "nco": [8, 11, 15, 25, 27, 28, 105, 110, 111, 112, 113, 114, 115, 116, 117, 197, 206, 209, 210], "local": [8, 198, 200, 206], "oscil": [8, 25, 28, 110, 113, 197, 206, 209, 210], "detector": [8, 14, 15, 105, 206], "filter": [8, 12, 13, 15, 17, 31, 32, 33, 36, 37, 39, 40, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 144, 153, 159, 167, 168, 169, 170, 171, 173, 174, 178, 180, 182, 183, 184, 186, 193, 197, 208, 209, 210], "numer": [8, 25, 28, 110, 113, 197, 204, 206, 209, 210], "control": [8, 25, 28, 110, 113, 184, 186, 197, 206, 209, 210], "The": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 54, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 68, 69, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 91, 92, 93, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201, 203, 204, 206, 207, 208, 209, 211], "transfer": [8, 17, 48, 72, 73, 101, 153, 203, 204, 206], "2nd": [8, 101, 105, 197, 206, 210], "order": [8, 31, 32, 35, 41, 46, 48, 49, 53, 59, 65, 68, 72, 77, 84, 91, 92, 93, 95, 101, 105, 118, 119, 124, 131, 145, 146, 148, 150, 151, 153, 166, 167, 175, 184, 186, 187, 188, 197, 204, 205, 206, 207, 210], "proport": [8, 12, 32, 92, 101, 102, 105, 152, 162, 197, 210], "plu": [8, 101, 105, 197, 210], "integr": [8, 13, 101, 103, 105, 197, 201, 204, 210], "z": [8, 25, 48, 72, 101, 110, 141, 142, 194, 203, 204, 206], "k_1": [8, 12, 101, 102, 206], "k_2": [8, 13, 101, 103, 206], "frac": [8, 16, 18, 21, 22, 31, 48, 54, 72, 91, 93, 101, 118, 130, 131, 132, 139, 145, 146, 148, 149, 150, 152, 153, 156, 157, 158, 161, 162, 185, 188, 189, 194, 206], "k_0": [8, 11, 15, 27, 105, 110, 111, 113, 206], "k_p": [8, 14, 15, 105, 206], "refer": [8, 16, 18, 19, 20, 21, 22, 41, 65, 101, 120, 126, 131, 139, 150, 151, 153, 159, 161, 183, 184, 186, 187, 194, 204, 208, 209], "michael": [8, 16, 18, 19, 20, 21, 22, 101, 184, 186], "rice": [8, 16, 18, 19, 20, 21, 22, 101, 184, 186], "digit": [8, 16, 18, 19, 20, 21, 22, 25, 27, 101, 120, 126, 184, 186, 197, 206, 209, 210], "commun": [8, 16, 18, 19, 20, 21, 22, 101, 120, 126, 159, 183, 184, 186, 206, 209], "discret": [8, 16, 18, 19, 20, 21, 22, 101, 131, 143, 149, 184, 186, 189, 196, 202, 206, 209], "approach": [8, 16, 18, 19, 20, 21, 22, 101, 132, 135, 138, 184, 186, 206], "appendix": [8, 101, 184, 186], "lock": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117], "exampl": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 167, 168, 169, 170, 171, 173, 174, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 206], "see": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 39, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 82, 84, 85, 86, 87, 89, 90, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 125, 127, 144, 153, 168, 169, 170, 171, 173, 174, 178, 182, 184, 186, 209], "noise_bandwidth": [8, 15, 101, 105, 108], "damping_factor": [8, 15, 101, 105, 106], "creat": [8, 15, 25, 27, 31, 33, 41, 42, 48, 50, 65, 67, 72, 73, 75, 91, 92, 93, 101, 105, 110, 113, 118, 119, 125, 131, 133, 150, 151, 158, 180, 187, 190, 191, 194, 202, 206, 208], "object": [8, 15, 31, 34, 35, 41, 42, 48, 52, 53, 72, 76, 77, 91, 94, 95, 118, 119, 168, 169, 170, 171, 173, 174, 178, 182, 206, 210], "phase_lock_tim": [8, 22], "frequency_lock_tim": [8, 16], "freq_offset": [8, 16, 18], "frequenc": [8, 16, 18, 20, 31, 48, 56, 57, 72, 80, 81, 91, 101, 144, 151, 152, 158, 162, 168, 169, 171, 172, 173, 174, 177, 190, 191, 193, 196, 208, 209, 210], "lock_tim": [8, 18, 206], "phase_error_vari": [8, 21], "cn0": [8, 21], "varianc": [8, 21, 131], "steadi": [8, 21], "state": [8, 21, 31, 32, 39, 48, 49, 55, 60, 61, 63, 65, 69, 70, 72, 86, 87, 89, 91, 92, 99, 210], "bnt": [8, 10, 206], "bandwidth": [8, 9, 10, 15, 19, 101, 105, 108, 132, 153, 184, 186, 206, 208], "b_n": [8, 9, 10, 15, 16, 18, 21, 22, 101, 105, 108], "t": [8, 10, 15, 101, 105, 108, 153, 155, 200, 202], "bn": [8, 9], "hz": [8, 9, 15, 16, 18, 21, 56, 57, 80, 81, 101, 105, 108, 132, 140, 144, 151, 152, 153, 157, 158, 162, 190, 191, 202], "zeta": [8, 15, 24, 101, 105, 106], "damp": [8, 15, 24, 101, 105, 106, 206], "k0": [8, 11, 15, 25, 27, 105, 110, 111, 113], "kp": [8, 14, 15, 105], "k1": [8, 12, 101, 102, 206], "k2": [8, 13, 101, 103, 206], "repres": [8, 17, 134, 135], "omega_n": [8, 20, 206], "natur": [8, 20], "radian": [8, 19, 20, 21, 25, 27, 206], "omega_3db": [8, 19], "3": [8, 16, 18, 19, 22, 31, 37, 40, 41, 52, 53, 76, 77, 91, 92, 97, 100, 120, 125, 126, 127, 131, 132, 133, 134, 136, 137, 140, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 166, 167, 168, 169, 170, 171, 173, 174, 178, 180, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 204, 206, 208, 209], "omega_": [8, 19], "textrm": [8, 19], "properti": [9, 10, 11, 12, 13, 14, 17, 19, 20, 23, 24, 28, 36, 37, 38, 40, 54, 59, 61, 63, 64, 68, 70, 71, 78, 79, 82, 84, 85, 87, 89, 90, 96, 97, 98, 100, 102, 103, 106, 107, 108, 111, 114, 115, 121, 124, 125, 127, 200, 210], "paramet": [15, 16, 18, 21, 26, 27, 30, 32, 33, 43, 44, 45, 47, 49, 50, 56, 57, 58, 62, 66, 67, 69, 73, 74, 75, 80, 81, 83, 88, 92, 93, 104, 105, 112, 113, 117, 119, 120, 122, 123, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194], "where": [15, 32, 49, 92, 101, 105, 108, 119, 131, 132, 143, 145, 146, 148, 153, 188, 194, 203, 204, 209], "period": [15, 101, 105, 108, 194], "second": [15, 16, 18, 22, 41, 101, 105, 108, 153], "critic": [15, 24, 101, 105, 106, 206], "underdamp": [15, 24, 101, 105, 106], "overdamp": [15, 24, 101, 105, 106], "ted": [15, 105], "t_": [16, 18, 22, 66, 153, 208], "fl": [16, 18], "delta": [16, 18, 31, 48, 58, 72, 83, 91, 170, 203, 204], "offset": [16, 18, 25, 27, 31, 91, 92, 110, 113, 115, 118, 119, 125, 151, 158, 180, 187, 196, 206, 209, 210], "take": [16, 18, 22], "onto": [16, 18, 22], "equat": [16, 18, 19, 20, 21, 22, 72, 118, 152], "39": 16, "pl": [18, 22], "38": 18, "34": 19, "33": 20, "sigma_": 21, "theta_": 21, "carrier": [21, 118], "43": 21, "40": [22, 91, 144], "less": 24, "than": [24, 119, 127, 156, 166, 179], "greater": [24, 184, 186], "dd": [25, 26, 27, 28, 29, 30, 110, 197, 206, 209, 210], "direct": [25, 27, 197, 206, 209, 210], "synthes": [25, 27, 197, 206, 209, 210], "note": [25, 31, 37, 40, 48, 72, 91, 97, 100, 101, 110, 118, 131, 132, 135, 138, 141, 142, 153, 156, 162, 167, 183, 194], "increment": [25, 26, 27, 110, 112, 113, 114, 206], "v": [25, 110, 140, 157, 198], "output": [25, 26, 30, 31, 32, 48, 49, 58, 62, 72, 73, 75, 83, 88, 91, 92, 101, 104, 110, 112, 117, 131, 132, 133, 134, 135, 137, 138, 142, 143, 150, 157, 160, 170, 178, 192, 198, 202, 203, 204, 206], "constant": [25, 27, 101, 110, 113, 114, 172, 177, 204, 206], "accumul": [25, 27, 41, 110, 113, 114, 206], "absolut": [25, 27, 110, 113, 115, 132], "adder": [25, 31, 101, 110, 141, 142, 206], "__call__": [25, 26, 31, 32, 33, 48, 49, 50, 63, 65, 66, 67, 70, 72, 73, 74, 75, 89, 91, 92, 93, 101, 104, 110, 112, 210], "variabl": [25, 26, 110, 112, 155, 206], "reset": [25, 29, 31, 39, 48, 60, 65, 69, 72, 86, 91, 99, 101, 109, 110, 116], "forward": [25, 30, 110, 117], "vari": [26, 112], "number": [30, 41, 43, 44, 47, 56, 57, 58, 62, 80, 81, 83, 88, 117, 118, 121, 131, 145, 146, 148, 153, 155, 160, 166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 184, 186, 188, 192], "equival": [31, 91, 131, 132, 149, 189, 199, 202], "first": [31, 41, 91, 160, 180, 192, 200, 201], "prototyp": [31, 37, 40, 91, 97, 100], "feedforward": [31, 33, 37, 40, 48, 50, 64, 72, 75, 79, 91, 93, 97, 100, 168, 169, 170, 171, 173, 174, 178, 182, 203, 204], "coeffici": [31, 33, 48, 50, 72, 75, 91, 93, 168, 169, 170, 171, 173, 174, 178, 182, 203, 204], "discard": 31, "between": [31, 33, 50, 63, 67, 70, 73, 75, 89, 91, 93, 152, 172, 175, 177, 206, 209], "each": [31, 32, 49, 91, 92, 150, 155, 172, 175, 177], "instead": [31, 91, 166], "decompos": [31, 91], "ar": [31, 32, 33, 37, 40, 41, 43, 44, 45, 47, 49, 50, 57, 67, 73, 75, 81, 91, 92, 93, 97, 100, 118, 119, 132, 134, 135, 137, 138, 152, 160, 166, 167, 168, 169, 171, 172, 173, 174, 175, 177, 179, 180, 181, 183, 190, 191, 198, 199, 200, 202, 204, 206, 208, 209, 211], "commut": [31, 91], "parallel": [31, 91], "sum": [31, 48, 72, 208], "prevent": [31, 91], "need": [31, 91, 200, 201], "done": [31, 198], "case": [31, 91], "2x": [31, 91], "6": [31, 37, 40, 41, 52, 53, 76, 77, 91, 92, 97, 100, 127, 136, 140, 143, 144, 145, 146, 150, 152, 154, 155, 157, 162, 166, 167, 168, 169, 170, 171, 173, 174, 178, 179, 180, 182, 183, 184, 186, 190, 191, 193, 194, 201, 203, 204, 206, 207, 210], "5": [31, 37, 40, 41, 52, 53, 91, 92, 97, 100, 131, 134, 136, 137, 138, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 162, 167, 168, 169, 170, 171, 173, 174, 178, 180, 182, 183, 184, 186, 187, 188, 189, 190, 191, 193, 194, 198, 202, 203, 204, 205, 206, 207, 208], "summat": 31, "bottom": [31, 91], "top": [31, 91], "relat": [31, 37, 40, 91, 97, 100, 132, 153], "In": [31, 32, 33, 34, 35, 37, 40, 41, 49, 50, 52, 53, 63, 67, 70, 73, 75, 76, 77, 89, 91, 92, 93, 94, 95, 97, 100, 120, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 167, 168, 169, 170, 171, 173, 174, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 202, 207], "np": [31, 37, 40, 76, 77, 91, 92, 97, 100, 120, 126, 131, 132, 133, 134, 135, 137, 138, 143, 144, 150, 151, 152, 156, 158, 165, 166, 167, 168, 169, 170, 171, 173, 174, 176, 178, 180, 182, 183, 187, 190, 191, 193, 194, 202, 203, 204, 205, 206, 207, 208], "co": [31, 91, 92, 158], "pi": [31, 76, 77, 91, 92, 118, 131, 144, 152, 153, 156, 158, 162, 168, 169, 170, 171, 173, 174, 178, 180, 182, 190, 191, 193, 194, 202, 203, 204, 206], "64": [31, 155, 204], "arang": [31, 37, 40, 91, 92, 97, 100, 131, 133, 144, 158, 183, 190, 191, 193, 194, 202, 206], "280": 31, "7": [31, 34, 35, 37, 40, 91, 92, 94, 95, 97, 100, 127, 136, 143, 150, 154, 155, 159, 180, 183, 194, 204], "kaiser": [31, 33, 34, 35, 36, 91, 92, 93, 94, 95, 96], "window": [31, 91, 172, 177], "out": [31, 34, 37, 40, 41, 52, 76, 91, 92, 94, 97, 100, 125, 127, 128, 129, 133, 134, 136, 137, 140, 141, 142, 143, 145, 146, 148, 149, 150, 152, 154, 157, 160, 162, 169, 181, 183, 188, 189, 192], "plt": [31, 91, 92, 120, 125, 126, 127, 131, 132, 133, 135, 138, 144, 150, 151, 152, 153, 156, 158, 159, 165, 166, 167, 168, 169, 170, 171, 173, 174, 176, 178, 179, 180, 182, 184, 186, 187, 190, 191, 193, 194, 202, 203, 204, 205, 206, 207, 208], "figur": [31, 91, 92, 120, 125, 126, 127, 131, 132, 133, 135, 138, 144, 150, 151, 152, 153, 156, 158, 159, 165, 166, 167, 168, 169, 170, 171, 173, 174, 176, 178, 179, 180, 181, 182, 184, 186, 187, 190, 191, 193, 194, 202, 203, 204, 205, 206, 207, 208], "figsiz": [31, 91, 92, 120, 125, 126, 127, 131, 132, 133, 135, 138, 144, 150, 151, 152, 153, 156, 158, 159, 165, 166, 167, 168, 169, 170, 171, 173, 174, 176, 178, 179, 180, 181, 182, 184, 186, 187, 190, 191, 193, 194, 202, 203, 204, 205, 206, 207, 208], "8": [31, 37, 40, 76, 77, 91, 92, 97, 100, 120, 125, 126, 127, 131, 132, 133, 135, 136, 138, 143, 144, 150, 152, 153, 154, 155, 158, 159, 162, 165, 166, 167, 168, 169, 170, 171, 173, 174, 176, 178, 179, 180, 181, 182, 183, 184, 186, 190, 191, 193, 194, 199, 203, 204, 205, 206, 208], "plot": [31, 56, 57, 58, 62, 80, 81, 83, 88, 91, 92, 120, 125, 126, 127, 131, 132, 133, 135, 138, 144, 150, 151, 152, 153, 156, 158, 159, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 190, 191, 193, 194, 202, 203, 204, 206, 207, 208, 209, 210], "marker": [31, 91, 92, 166, 179, 202, 203, 204, 207], "o": [31, 91, 92, 202], "label": [31, 91, 92, 119, 120, 126, 131, 150, 151, 153, 156, 165, 167, 175, 176, 177, 180, 184, 186, 187, 202, 205, 206, 207, 208], "titl": [31, 91, 120, 126, 131, 132, 133, 135, 138, 144, 150, 151, 156, 158, 165, 176, 180, 187, 190, 191, 193, 194, 202, 205, 206, 207, 208], "tight_layout": [31, 91, 120, 126, 131, 132, 133, 135, 138, 144, 150, 151, 152, 158, 165, 176, 180, 187, 190, 191, 193, 194, 205, 206, 207, 208], "preserv": [31, 33, 50, 63, 67, 70, 73, 75, 89, 91, 93, 167, 175], "call": [31, 32, 33, 49, 50, 63, 67, 70, 73, 75, 89, 91, 92, 93], "true": [31, 91, 92, 120, 126, 130, 132, 134, 135, 137, 138, 143, 152, 158, 163, 164, 166, 174, 175, 179, 181, 185, 205, 207], "y1": [31, 91, 92, 156], "70": [31, 155, 208], "y2": [31, 91, 92, 156], "140": [31, 144], "y3": [31, 91, 92], "210": 31, "y4": [31, 91], "y5": [31, 91], "flush": [31, 32, 48, 49, 55, 91, 92, 210], "y_1": [31, 91, 156], "y_2": [31, 91, 156], "y_3": [31, 91], "y_4": [31, 91], "y_5": [31, 91], "full": [31, 32, 49, 91, 92, 133], "__len__": [31, 48, 51, 91], "__repr__": [31, 34, 48, 52, 72, 76, 91, 94], "style": [31, 34, 48, 52, 72, 76, 91, 94, 181], "__str__": [31, 35, 48, 53, 72, 77, 91, 95], "human": [31, 35, 48, 53, 72, 77, 91, 95], "readabl": [31, 35, 48, 53, 72, 77, 91, 95], "when": [31, 39, 48, 55, 58, 60, 62, 72, 83, 86, 88, 91, 99, 131, 132, 134, 135, 137, 138, 149, 168, 169, 170, 171, 173, 174, 178, 189, 194, 202, 203, 204], "pass": [31, 48, 55, 91, 131, 134, 137, 143, 150, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 196, 198, 199, 203, 204, 210], "through": [31, 48, 55, 91, 134, 137, 143, 196, 203, 204, 206], "indic": [31, 33, 48, 50, 63, 65, 67, 70, 72, 73, 75, 89, 91, 93, 118, 119, 120, 126, 130, 156, 158, 163, 164, 167, 174, 175, 180, 185], "whether": [31, 33, 48, 50, 63, 65, 67, 70, 72, 73, 75, 89, 91, 93, 120, 126, 130, 158, 163, 164, 174, 175, 180, 185], "consist": [31, 43, 44, 45, 46, 47, 48, 61, 91], "previou": [31, 33, 48, 50, 61, 67, 69, 73, 75, 91, 93, 141, 142], "u": [31, 48, 62, 72, 88, 91, 178, 194, 195, 203, 204], "frequency_respons": [31, 48, 56, 72, 80, 91, 210], "numpi": [31, 41, 46, 48, 56, 57, 72, 80, 81, 91, 131, 192, 202, 203, 204, 205, 206, 207, 208, 209], "frequency_response_log": [31, 48, 57, 72, 81, 91], "logarithm": [31, 48, 57, 72, 81, 91, 168, 169, 171, 172, 173, 174, 203, 204], "axi": [31, 48, 57, 72, 81, 91, 166, 167, 168, 169, 171, 172, 173, 174, 175, 177, 179, 180, 202], "custom": [31, 36, 91, 96], "design": [31, 33, 36, 91, 93, 96, 159, 198, 209, 210], "multir": [31, 32, 33, 36, 91, 92, 93, 96, 159, 183, 210], "polyphase_tap": [31, 35, 37, 40, 91, 92, 95, 97, 100], "lfloor": [31, 48, 54, 91], "rfloor": [31, 48, 54, 91], "mode": [32, 33, 39, 49, 50, 55, 60, 63, 65, 67, 69, 70, 73, 75, 86, 89, 92, 93, 99, 133, 194], "l": [32, 49, 74, 92], "non": [32, 49, 92], "stream": [32, 33, 34, 35, 39, 49, 50, 52, 53, 55, 60, 63, 65, 67, 69, 70, 73, 75, 76, 77, 86, 89, 92, 93, 94, 95, 99, 118, 204], "convolut": [32, 49, 91, 92], "ha": [32, 49, 91, 92, 131, 144, 152, 153, 162, 193, 194, 206, 207, 208], "align": [32, 49, 92, 202], "howev": [32, 43, 44, 45, 47, 49, 92, 101, 135, 138, 202], "produc": [32, 49, 91, 92, 153, 208], "final": [32, 49, 92], "requir": [32, 49, 92, 198, 199, 200, 201], "dictat": [32, 49, 92], "argument": [32, 33, 49, 92, 93, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 200, 203, 204], "specif": [33, 46, 93, 201, 208], "npt": [33, 93, 119, 168, 169, 170, 171, 173, 174, 178, 182], "string": [34, 35, 52, 53, 76, 77, 94, 95, 155, 172, 177, 210], "represent": [34, 35, 52, 53, 76, 77, 94, 95, 179, 210], "print": [35, 53, 77, 95, 155, 202, 203, 204, 206], "167": [35, 95], "24": [35, 95], "shape": [35, 53, 77, 92, 95, 153, 167, 180, 184, 186, 204, 209, 210], "84": [35, 95], "befor": [37, 40, 97, 100, 211], "decomposit": [37, 40, 97, 100, 210], "after": [37, 40, 97, 100], "10": [37, 40, 41, 91, 92, 97, 100, 120, 126, 130, 131, 136, 140, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 173, 174, 176, 178, 180, 182, 183, 184, 185, 186, 187, 188, 189, 202, 203, 204, 205, 206, 207, 208], "9": [37, 40, 91, 92, 97, 100, 136, 143, 150, 154, 155, 183, 184, 186, 204, 205, 207, 208, 210], "measur": [41, 43, 130, 131, 139, 140, 147, 150, 157, 161, 163, 164, 185, 206, 209, 210], "new": [41, 42, 65, 67, 118, 119, 187], "from": [41, 56, 57, 72, 73, 80, 81, 118, 127, 140, 145, 146, 148, 149, 157, 172, 177, 188, 189, 198, 203, 204, 206, 209], "receiv": [41, 43, 120, 126, 150, 152, 167], "contain": [41, 131, 155], "add": [41, 43, 46, 131, 151, 175, 187, 196, 207, 211], "total": [41, 208], "count": [41, 44, 150], "error_r": [41, 45, 46, 207], "everi": [41, 202], "can": [41, 43, 44, 45, 47, 101, 131, 150, 153, 159, 160, 167, 172, 177, 199, 203, 204, 207, 209, 211], "obtain": 41, "follow": [41, 156, 166, 175, 177, 179, 181, 183, 206], "tabul": [41, 42], "given": [41, 43, 44, 45, 47, 65, 66, 150, 203, 204], "all": [41, 46, 150, 167, 175, 201, 209], "ascend": [41, 46], "correspond": [41, 46, 175], "other": [43, 44, 45, 47, 202, 211], "quantiti": [43, 44, 45, 46, 47], "user": [43, 44, 45, 47, 203, 204], "caution": [43, 44, 45, 47], "instanc": [43, 44, 45, 47, 200], "transmit": [43, 150, 167], "section": [43, 44, 45, 46, 47, 204, 206], "whatev": 46, "wa": [46, 132], "provid": [46, 118, 120, 126, 175, 209], "wrapper": [48, 72], "scipi": [48, 72, 172, 177, 208, 209], "convolv": [48, 180], "It": [48, 72, 91, 101, 131, 167], "support": [48, 72, 210], "one": [48, 72, 119, 127, 153, 155, 167, 168, 169, 171, 172, 173, 174, 177, 190, 203, 204, 205, 208], "its": [48, 72, 73, 131, 203, 204, 208], "sum_": [48, 72, 130, 131, 132, 147, 150, 185], "limits_": [48, 72], "valid": [49, 152, 167, 175, 194], "same": [49, 92, 180, 203], "0013559842808217807": [52, 53], "005995136544658217": [52, 53], "008698817681933214": [52, 53], "0024103767414047302": [52, 53], "010205586837665018": [52, 53], "018983779931504997": [52, 53], "011950905288150394": [52, 53], "01518393864077397": [52, 53], "051622191325047306": [52, 53], "07210389837804473": [52, 53], "04745944982876247": [52, 53], "039173517569276436": [52, 53], "17918683372907862": [52, 53], "3367363220550604": [52, 53], "4611457574513795": [52, 53], "5084040873607553": [52, 53], "30": [53, 91, 144, 168, 170, 178, 190, 191, 204, 210], "31": 53, "15": [53, 136, 154, 183, 193], "remain": [55, 144, 160], "1024": [56, 57, 80, 81, 168, 169, 171, 173, 174, 205, 208], "decad": [57, 81, 168, 169, 171, 173, 174, 203, 206], "resampl": [65, 66, 67, 68, 69, 70, 71, 159, 183, 209, 210], "http": [65, 139, 153, 159, 161, 194, 198, 199], "wirelesspi": 65, "com": [65, 153, 159, 199], "fraction": [65, 69, 153, 202], "structur": 65, "index": [65, 69, 167, 175, 179, 198], "should": [69, 167, 199], "equal": 69, "three": [69, 202, 208], "If": [69, 130, 131, 132, 143, 160, 163, 164, 166, 167, 168, 170, 172, 175, 177, 178, 179, 180, 185, 190, 192, 209], "lfilter": 72, "b_i": [72, 75, 79, 168, 169, 170, 171, 173, 174, 178, 182, 204], "feedback": [72, 75, 78, 168, 169, 170, 171, 173, 174, 178, 182, 204], "a_j": [72, 75, 78, 168, 169, 170, 171, 173, 174, 178, 182, 204], "These": [72, 118, 181, 199, 206], "differ": [72, 119, 127, 180, 194, 208], "a_0": 72, "left": [72, 118, 130, 131, 132, 147, 150, 152, 153, 156, 158, 162, 163, 164, 185, 194], "m": [72, 75, 79, 118, 119, 121, 122, 123, 124, 127, 143, 145, 146, 148, 152, 188, 198, 199, 200, 201, 209], "right": [72, 118, 130, 131, 132, 147, 150, 152, 153, 156, 158, 162, 163, 164, 185, 194], "b": [72, 75, 132, 153, 155, 168, 170, 178, 198, 208], "classmethod": [72, 73], "zerospol": [72, 73, 76, 77, 168, 169, 170, 171, 173, 174, 178, 182, 204], "self": [72, 73], "100": [72, 83, 88, 120, 126, 131, 132, 135, 138, 140, 150, 157, 158, 165, 167, 168, 170, 176, 178, 180, 187, 190, 191, 193, 200, 202, 206], "b_tap": [72, 77, 79, 204], "a_tap": [72, 77, 78, 204], "exp": [76, 77, 118, 144, 153, 156, 158, 168, 169, 170, 171, 173, 174, 178, 180, 182, 191, 193, 194, 202, 204, 206], "1j": [76, 77, 144, 158, 168, 169, 170, 171, 173, 174, 178, 180, 182, 191, 193, 202, 204, 206], "conj": [76, 77, 168, 169, 170, 171, 173, 174, 178, 182, 204, 206], "478207252018059": [76, 77, 204], "6400000000000001": [76, 77, 204], "7391036260090295": [77, 204], "3061467458920719j": [77, 204], "insert": 91, "multipli": 91, "hold": [91, 93, 160, 210], "20": [91, 92, 132, 134, 137, 140, 143, 150, 151, 155, 156, 157, 164, 183, 185, 193, 205, 207, 208], "recommend": 91, "wai": [91, 199], "11": [91, 136, 154, 159, 183, 198], "zoh": [91, 93, 96], "12": [91, 136, 154, 159, 183, 203, 207], "13": [91, 133, 136, 154, 183, 210], "iter": 92, "concaten": [92, 204], "linearli": 93, "2r": 93, "ramp": [93, 101], "ones": [93, 206], "loopfilt": [101, 102, 103, 104, 105, 106, 107, 108, 109, 197, 206, 210], "ppi": [101, 105, 197], "track": 101, "cannot": 101, "chirp": 101, "underli": [101, 107], "modul": [118, 119, 120, 123, 124, 126, 131, 145, 146, 148, 150, 151, 156, 165, 166, 167, 176, 187, 188, 198, 201, 205, 207, 209, 210], "scheme": 118, "encod": [118, 120, 126, 141, 142, 209], "inform": [118, 145, 146, 148, 188], "taken": 118, "dot": [118, 127], "mathbb": [118, 127, 132, 194], "phase_offset": [118, 119, 125, 131, 150, 151, 156, 166, 167, 179, 187, 205, 207], "valu": [118, 119, 120, 126, 128, 129, 133, 140, 141, 142, 153, 156, 157, 166, 179, 204, 210], "maximum": [118, 122, 166, 179], "likelihood": [118, 122], "estim": [118, 122, 172, 177, 206], "degre": [118, 119, 125, 151, 156, 158, 162], "mapsto": [118, 127], "log_2": [118, 121, 132, 145, 146, 148, 188], "symbol_label": [119, 127, 207], "bin": [119, 127, 150, 166, 179, 207], "ge": 119, "consecut": 119, "adjac": [119, 127, 207, 208], "mai": [119, 127, 150, 166, 175, 177, 179, 181, 204], "more": [119, 127, 210], "whose": 119, "start": [119, 198], "0j": 119, "go": 119, "counter": 119, "clockwis": 119, "around": 119, "circl": [119, 204], "energi": [120, 126, 132, 145, 146, 147, 148, 149, 165, 176, 184, 186, 188, 189, 209, 210], "psd": [120, 126, 132, 145, 146, 148, 149, 165, 176, 188, 189], "were": [120, 126], "simon": [120, 126], "alouini": [120, 126], "over": [120, 126, 155], "fade": [120, 126], "channel": [120, 126, 132, 134, 135, 137, 138, 143, 165, 176, 209, 210], "chapter": [120, 126, 159, 183], "singl": [120, 126], "john": [120, 126], "proaki": [120, 126], "optimum": [120, 126], "theoret": [120, 126, 165, 176, 207, 210], "curv": [120, 126, 165, 176], "bpsk": [120, 126, 165, 176, 180, 205], "qpsk": [120, 125, 126, 131, 150, 151, 165, 166, 167, 176, 179, 180, 187], "psk8": [120, 126, 165, 176, 207], "psk16": [120, 126, 165, 176, 207], "linspac": [120, 126, 132, 135, 138, 152, 165, 176, 204, 205, 206, 207], "compar": [120, 126, 208], "de": [120, 126, 210], "45": [125, 131, 150, 151, 156, 158, 166, 167, 179, 187, 205, 207], "se": [126, 176], "00000000e": [127, 204], "00": [127, 204], "00j": 127, "07106781e": 127, "01": [127, 155, 204, 206], "01j": 127, "12323400e": 127, "17": [127, 150, 162, 183], "83697020e": 127, "22464680e": 127, "16j": 127, "annot": [127, 179, 210], "probabl": [128, 129, 134, 135, 137, 138, 143, 196, 210], "exceed": [128, 129], "15865525393145707": [128, 129], "158655": [128, 129], "0000010494310452": [128, 129], "text": [130, 131, 132, 135, 138, 139, 140, 150, 151, 152, 157, 159, 161, 163, 164, 185, 187], "avg": [130, 131, 161], "result": [130, 152, 162, 163, 164, 184, 185, 186, 207], "log_": [130, 140, 152, 161, 163, 164, 185], "seed": 131, "which": [131, 132, 151, 156, 162, 166, 179, 187, 202, 206, 208], "ad": [131, 175, 200, 209, 210], "desir": [131, 207], "explicitli": 131, "assum": [131, 143, 160, 192], "known": 131, "must": [131, 153, 158, 175, 184, 186, 194], "random": [131, 134, 137, 143, 150, 151, 156, 166, 167, 180, 187, 205, 207], "default_rng": 131, "noisi": 131, "w": [131, 202, 203, 204, 205, 206, 207, 208], "sigma": [131, 132], "For": [131, 144, 152, 193, 203], "sim": 131, "cn": 131, "set": [131, 152, 166, 171, 172, 175, 177, 179, 181, 200, 201, 204], "sin": [131, 190], "randint": [131, 134, 137, 143, 150, 151, 156, 166, 167, 180, 187, 205, 207], "1_000": [131, 151, 152, 156, 187, 205], "zorder": [131, 151, 187], "infti": [131, 132], "nand": 131, "capac": [132, 135, 138, 209, 210], "2d": [132, 175], "x_i": [132, 134, 135, 137, 138, 143, 156], "y_i": [132, 134, 135, 137, 138, 143], "monoton": 132, "decreas": 132, "limit": [132, 166, 171, 172, 179, 207], "xlabel": [132, 133, 135, 138, 150, 152, 194, 202, 205, 206, 208], "ylabel": [132, 133, 135, 138, 150, 152, 194, 202, 205, 206, 208], "grid": [132, 135, 138, 152, 181, 202, 205, 206, 208], "At": 132, "occur": 132, "view": [132, 200, 209], "59": 132, "shannon": 132, "semilogi": [132, 165, 176], "both": [132, 166, 179, 180, 202, 206], "barker": [133, 195, 209, 210], "bipolar": [133, 210], "sequenc": [133, 134, 137, 143, 194, 196, 209, 210], "format": [133, 200], "seq": 133, "have": [133, 144, 160, 180, 192, 193], "ideal": [133, 207], "minim": 133, "autocorrel": [133, 194], "sidelob": [133, 184, 186, 194], "corr": [133, 194], "correl": [133, 194], "lag": [133, 194], "size": [133, 143, 202, 206, 207, 208], "ab": [133, 194, 208], "25": [134, 137, 143, 167, 202, 205, 206, 208], "roughli": [134, 137, 202], "eras": 134, "14": [136, 154, 183, 199], "transit": [137, 138, 143, 196], "flip": 137, "h_b": 138, "cf": 139, "v_": [139, 140, 157, 164, 185], "en": [139, 161, 194], "wikipedia": [139, 161, 194], "org": [139, 161, 194], "wiki": [139, 161, 194], "type": [140, 150, 157, 160, 172, 177, 192, 210], "voltag": [140, 157, 164, 185, 209], "decibel": [140, 157, 209, 210], "ani": [140, 144, 157, 171, 172, 193, 201], "x_": [140, 157], "50": [140, 157, 179, 190, 191, 202, 205], "mhz": [140, 157], "77": [140, 155, 157], "50e6": 140, "76": [140, 155], "98970004336019": 140, "mw": [140, 157], "dbm": [140, 157], "dbv": [140, 157], "020599913279624": 140, "uncod": 142, "dmc": [143, 196, 209, 210], "memoryless": [143, 196, 209], "pr": 143, "y_j": 143, "alphabet": 143, "ldot": 143, "doe": [144, 193], "anti": [144, 193], "alias": [144, 193], "spectral": [144, 172, 205, 208], "effici": [144, 162, 193], "400": [144, 202], "x1": 144, "200": [144, 202, 207], "x2": 144, "130": 144, "x3": [144, 194], "spectrum": [144, 168, 169, 171, 172, 173, 174, 177, 190, 191, 193], "content": 144, "abov": [144, 193], "nyquist": [144, 167, 193, 208], "fold": 144, "cw": 144, "unalias": 144, "fft": [144, 172, 177, 190, 191, 193], "2048": [144, 190, 191, 193, 205], "xlim": [144, 193, 205, 206, 208], "qam": [145, 146, 148, 188], "249387366082999": [145, 146], "020599913279625": [145, 189], "sym": [146, 149, 153, 188, 189, 208], "750612633917001": [148, 188], "979400086720376": [148, 149], "system": [149, 159, 183, 189, 200, 201, 206, 209], "norm": 150, "noiseless": 150, "sourc": 150, "max": [150, 163, 164, 200], "_": 150, "sqrt": [150, 153, 185, 194, 205, 206, 208], "instantan": 150, "percentil": [150, 171, 172, 177], "1000": [150, 152, 180, 190, 191, 207], "either": 150, "982880014888725": 150, "970244026922732": 150, "430042720806671": 150, "95th": 150, "95": 150, "018658454457313": 150, "inst_evm": 150, "hist": 150, "histogram": 150, "frequency_offset": [151, 196, 210], "freq_rat": 151, "cycl": [151, 180], "000": 151, "1e": [151, 207], "5e": 151, "deg": [151, 156], "path": [152, 200, 209], "loss": [152, 209], "distanc": 152, "meter": [152, 162], "transmitt": 152, "far": 152, "field": 152, "lambda": 152, "neg": [152, 156], "impli": 152, "possibl": [152, 209], "so": [152, 153, 209], "km": 152, "link": [152, 209, 210], "ghz": [152, 162], "1e3": [152, 158, 190], "1e9": [152, 162], "92": 152, "44778322188337": 152, "doubl": [152, 162], "increas": [152, 162, 204], "2e3": 152, "98": 152, "468383135163": 152, "also": [152, 153, 209], "2e9": 152, "up": 152, "puls": [153, 167, 180, 184, 186, 209, 210], "product": [153, 208], "side": [153, 168, 169, 171, 172, 173, 174, 177, 203, 204, 205, 208], "thought": [153, 211], "smaller": [153, 184, 186, 208], "wider": 153, "even": [153, 184, 186], "amplitud": [153, 156, 196, 202, 206], "nomin": 153, "ln": 153, "www": [153, 159], "mathwork": [153, 159], "help": [153, 159], "gaussdesign": 153, "html": [153, 159, 198], "onlinelibrari": 153, "wilei": 153, "doi": 153, "pdf": 153, "1002": 153, "9780470041956": 153, "app2": 153, "h_0p1": [153, 184, 186], "h_0p2": 153, "h_0p3": 153, "displai": [155, 166, 168, 169, 171, 172, 173, 174, 177, 179], "consid": 155, "line": [155, 180, 205], "quick": 155, "brown": 155, "fox": 155, "jump": 155, "lazi": 155, "dog": 155, "00000000": 155, "54": 155, "68": 155, "65": 155, "71": 155, "75": [155, 166, 206, 207], "69": 155, "63": 155, "6b": 155, "62": 155, "72": 155, "6f": 155, "6e": 155, "00000010": 155, "66": 155, "78": 155, "6a": 155, "6d": 155, "73": 155, "74": 155, "00000020": 155, "6c": 155, "61": 155, "7a": 155, "79": 155, "67": 155, "he": 155, "02": [155, 204, 206], "03": [155, 204], "04": [155, 204], "00000004": 155, "05": [155, 202, 204, 206], "06": 155, "07": 155, "08": 155, "00000008": 155, "09": 155, "0a": 155, "iq_imbal": [156, 196, 210], "iq": [156, 196, 209], "imbal": [156, 196, 209], "posit": 156, "compon": [156, 190, 191, 193], "larger": [156, 166, 179], "quadratur": 156, "lead": [156, 207], "g_i": 156, "180": 156, "g_q": 156, "x_q": 156, "horizont": 156, "stretch": 156, "while": [156, 208], "vertic": 156, "subplot": [156, 206, 207], "legend": [156, 202, 205, 206, 208], "northwest": 156, "northeast": 156, "50118723": 157, "36272725": 157, "9952623149688795": 157, "satisfi": 158, "le": [158, 162, 184, 186], "cdot": 158, "remov": [158, 172, 177, 210], "rotat": 158, "half_length": 159, "a_stop": 159, "80": [159, 194], "half": [159, 162], "stopband": [159, 184, 186], "attenu": [159, 184, 186], "a_": 159, "stop": 159, "fred": [159, 183], "harri": [159, 183], "process": [159, 183, 204, 206, 209], "dsp": [159, 209], "designmultiratefir": 159, "dtype": [160, 180, 192, 206], "dtypelik": [160, 192], "most": [160, 192], "signific": [160, 192], "enough": 160, "fill": 160, "last": [160, 198], "smallest": 160, "unsign": 160, "integ": 160, "uint8": [160, 192], "diamet": 162, "55": 162, "eta": 162, "dbi": 162, "arcsin": 162, "83": 162, "dish": 162, "21": 162, "810210290266568": 162, "437435887991374": 162, "23": 162, "sinc": [162, 167, 198, 207], "antenna": [162, 209], "we": [162, 209], "observ": [162, 167], "830810203546193": 162, "529544741425365": 162, "keyword": [165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 203, 204], "pyplot": [165, 166, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 202, 203, 204, 205, 206, 207, 208], "scatter": 166, "overwritten": [166, 175, 177, 179], "rang": [166, 206, 207], "hist2d": 166, "linestyl": [166, 175, 179, 181, 194, 202, 206, 207, 208], "10_000": 166, "color": [167, 175, 180, 205, 208], "imaginari": [167, 175, 180], "interleav": [167, 175], "how": [167, 175, 180, 200, 201], "base": [167, 175, 180], "examin": 167, "intersymbol": 167, "interfer": 167, "isi": 167, "decis": 167, "two": [167, 168, 169, 171, 172, 173, 174, 177, 194, 202, 203, 204], "cascad": 167, "why": 167, "often": [167, 202], "practic": 167, "n_time": [168, 204], "n_freq": 168, "x_axi": [168, 169, 171, 172, 173, 174, 177, 203, 204, 205, 206], "log": [168, 169, 171, 172, 173, 174, 203, 204, 206], "definit": [168, 169, 170, 171, 173, 174, 178, 182], "n_t": 168, "n_f": 168, "scale": [168, 169, 171, 172, 173, 174, 177, 203, 204], "option": [168, 169, 171, 172, 173, 174, 177], "h_srrc": [168, 169, 170, 171, 173, 174, 178, 180, 182, 207], "ylim": [169, 194, 203, 206, 207, 208], "48": 169, "52": 169, "lower": [171, 172, 184, 186], "10th": [171, 172, 177], "crop": [171, 172], "deep": [171, 172], "null": [171, 172, 208], "hann": [172, 177], "overlap": [172, 177, 205], "detrend": [172, 177], "median": 172, "segment": [172, 177], "256": [172, 177, 205], "point": [172, 177], "trend": [172, 177], "unwrap": [174, 206], "stride": 175, "colorbar": 175, "1d": 175, "determin": 175, "row": 175, "collect": 175, "linecollect": 175, "linewidth": [175, 194], "solid": [175, 180], "cmap": 175, "rainbow": 175, "pcolormesh": 177, "vmin": 177, "vmax": 177, "100th": 177, "shade": 177, "gouraud": 177, "markers": 179, "diff": [180, 205], "about": [180, 200, 201], "mutual": 180, "exclus": 180, "part": [180, 187, 206], "current": [180, 199], "dash": 180, "share": 180, "10e3": 180, "revert": 181, "rcdefault": 181, "_rc_param": 181, "rc_param": 181, "ax": 181, "autolayout": 181, "max_open_warn": 181, "titleweight": 181, "bold": 181, "arrang": 183, "down": 183, "column": 183, "notion": 183, "demonstr": 183, "18": [183, 207], "19": 183, "excess": [184, 186, 208], "narrow": [184, 186], "expens": [184, 186], "higher": [184, 186, 208], "h_0p5": [184, 186], "h_0p9": [184, 186], "affect": [184, 186], "longer": [184, 186, 190], "h_4": [184, 186], "h_8": [184, 186], "h_16": [184, 186], "sample_rate_offset": [187, 196, 210], "ppm": [187, 196], "million": 187, "odd": 190, "append": [190, 205], "end": 190, "250": [190, 191], "300": [190, 191], "ksp": [190, 191], "notic": [190, 191, 202, 208], "conjug": [190, 191, 204], "500": [190, 191, 206], "now": [190, 191, 202], "150": [190, 191], "asymmetr": 191, "origin": [193, 202], "copi": 193, "zadoff_chu": [194, 195, 210], "zadoff": [194, 195, 209, 210], "chu": [194, 195, 209, 210], "rel": [194, 208], "prime": 194, "gcd": 194, "ne": 194, "cyclic": 194, "x_u": 194, "c_": 194, "2q": 194, "mod": 194, "e2": 194, "93chu_sequ": 194, "x_3": 194, "139": 194, "roll": [194, 208], "tile": 194, "x_5": 194, "x5": 194, "cross": 194, "xcorr": 194, "sphinx": 198, "immateri": 198, "theme": 198, "depend": [198, 200, 201], "store": [198, 199, 201], "txt": [198, 199, 200, 201], "myst": 198, "parser": 198, "updat": 198, "git": [198, 199], "math": 198, "dollar": 198, "ipykernel": 198, "nb": 198, "switch": 198, "pip": [198, 199, 200, 201, 209], "python3": [198, 199, 200, 201, 209], "built": 198, "run": 198, "command": 198, "dirhtml": 198, "locat": [198, 201], "home": 198, "page": 198, "site": 198, "directori": [198, 199], "get": 198, "necessari": 198, "webpag": 198, "webserv": 198, "easili": [198, 200, 201, 203, 204], "python": [198, 209], "server": 198, "8080": 198, "access": [198, 200], "web": 198, "browser": 198, "localhost": 198, "latest": [199, 209], "releas": [199, 210], "version": [199, 209], "main": [199, 208], "branch": [199, 200], "mhostett": [199, 210], "Or": [199, 201], "pre": 199, "To": 199, "activ": 199, "develop": [199, 200, 201], "librari": [199, 200, 201, 202, 207, 209, 211], "benefici": 199, "fashion": 199, "allow": [199, 201], "chang": [199, 211], "immedi": 199, "seen": 199, "upon": 199, "next": 199, "import": [199, 202, 203, 204, 205, 206, 207, 208, 209], "clone": 199, "repo": 199, "wherev": 199, "you": [199, 200, 201, 209], "like": [199, 209, 210], "flag": 199, "includ": [199, 200, 201, 209], "packag": [199, 209], "lint": 199, "test": [199, 209], "pylint": [199, 200], "black": 199, "jupyt": 199, "22": 199, "pytest": [199, 201], "cov": 199, "toml": [199, 200, 201], "xdist": 199, "benchmark": 199, "static": 200, "your": [200, 201], "dev": [200, 201], "variou": [200, 208], "nuisanc": 200, "warn": 200, "ignor": 200, "list": 200, "pyproject": [200, 201], "tool": [200, 201, 209], "src": 200, "_version": 200, "py": [200, 201], "disabl": 200, "comparison": 200, "callabl": 200, "doesn": 200, "understand": [200, 204], "metaclass": 200, "fixm": 200, "global": 200, "statement": 200, "invalid": 200, "name": 200, "miss": 200, "docstr": 200, "protect": 200, "too": 200, "mani": 200, "ancestor": 200, "attribut": 200, "public": 200, "unneed": 200, "min": 200, "similar": [200, 208], "120": 200, "manual": [200, 201], "file": [200, 201], "vscode": [200, 201], "json": [200, 201], "instruct": [200, 201], "invok": [200, 201], "edit": [200, 204], "ini_opt": 201, "minvers": 201, "addopt": 201, "showloc": 201, "testpath": 201, "execut": 201, "test_psk": 201, "infrastructur": 201, "debug": 201, "config": [202, 203, 204, 205, 206, 207, 208], "inlinebackend": [202, 203, 204, 205, 206, 207, 208], "print_figure_kwarg": [202, 203, 204, 205, 206, 207, 208], "facecolor": [202, 203, 204, 205, 206, 207, 208], "widget": [202, 203, 204, 205, 206, 207, 208], "continu": 202, "tx": 202, "decai": [202, 204], "fillstyl": 202, "imag": 202, "show": [202, 203, 204, 205, 206, 207, 208], "accomplish": [202, 207], "def": [202, 205, 207], "resample_sign": 202, "new_sample_r": 202, "ty": 202, "gca": [202, 207], "set_prop_cycl": [202, 207], "four": 202, "appear": 202, "fourth": 202, "do": 202, "315": 202, "32": 202, "below": [203, 204], "00095883": 203, "00175012": 203, "00423921": 203, "0058825": 203, "006151": 203, "00474595": 203, "0017044": 203, "00254816": 203, "00721645": 203, "0112324": 203, "01342358": 203, "01273202": 203, "00845058": 203, "0004368": 203, "01073669": 203, "02372977": 203, "03650247": 203, "04650654": 203, "05098525": 203, "04734644": 203, "03355896": 203, "00851486": 203, "02769991": 203, "07367348": 203, "12670447": 203, "1830132": 203, "23810898": 203, "28727058": 203, "3260799": 203, "3509384": 203, "35949665": 203, "conveni": [203, 204], "evalu": [203, 204], "envelop": [203, 204], "here": [203, 204], "altern": 204, "47820725": 204, "78207252e": 204, "58172329e": 204, "10862468e": 204, "86109590e": 204, "21565653e": 204, "01140214e": 204, "57286400e": 204, "67772160e": 204, "47338728e": 204, "10422993e": 204, "89312837e": 204, "12240078e": 204, "03953322e": 204, "69685122e": 204, "63882791e": 204, "81474977e": 204, "47193366e": 204, "85259041e": 204, "15647504e": 204, "23851924e": 204, "42176895e": 204, "84684395e": 204, "42721858e": 204, "72236648e": 204, "14721649e": 204, "10813095e": 204, "94024315e": 204, "78877688e": 204, "74077567e": 204, "87820725": 204, "53637958": 204, "94724205": 204, "13335164": 204, "1455082": 204, "04436799": 204, "88708159": 204, "71930943": 204, "5719707": 204, "46154771": 204, "39261642": 204, "36139242": 204, "35935288": 204, "3763214": 204, "40270968": 204, "43085717": 204, "45557651": 204, "47410241": 204, "48566716": 204, "49090568": 204, "49124786": 204, "48840102": 204, "4839738": 204, "47925143": 204, "47510421": 204, "47199608": 204, "47005584": 204, "46917696": 204, "46911955": 204, "denomin": 204, "73910363": 204, "30614675j": 204, "plane": 204, "endpoint": 204, "092337035029908": 204, "71104892744724": 204, "684365018955985": 204, "37868538208862": 204, "1263714068241546": 204, "9993519409971622": 204, "1909320767063554": 204, "016796159999999997": 204, "46380627201679264": 204, "3806359704987118j": 204, "4988817673846036": 204, "333342139809402j": 204, "5543277195082319": 204, "22961005941718524j": 204, "5291527586053246": 204, "2828380420991956j": 204, "lyon": 204, "3rd": 204, "insid": 204, "outsid": 204, "unstabl": 204, "n_symbol": 205, "pulse_shap": 205, "els": 205, "pb": 205, "x_bb_rect": 205, "papr_bb_rect": 205, "x_pb_rect": 205, "papr_pb_rect": 205, "x_bb_0p1": 205, "papr_bb_0p1": 205, "x_pb_0p1": 205, "papr_pb_0p1": 205, "x_bb_0p5": 205, "papr_bb_0p5": 205, "x_pb_0p5": 205, "papr_pb_0p5": 205, "x_bb_0p9": 205, "papr_bb_0p9": 205, "x_pb_0p9": 205, "papr_pb_0p9": 205, "rectangular": [205, 208], "2f": 205, "rf": [205, 206], "512": 205, "sweep_alpha": 205, "bb_papr": 205, "pb_papr": 205, "bpsk_bb_papr": 205, "bpsk_pb_papr": 205, "qpsk_bb_papr": 205, "qpsk_pb_papr": 205, "psk8_bb_papr": 205, "psk8_pb_papr": 205, "psk16_bb_papr": 205, "psk16_pb_papr": 205, "configur": 206, "loop_filt": 206, "0x000002276d2bcc08": 206, "theta_0": 206, "phase_error": 206, "freq_estim": 206, "suptitl": [206, 207], "avail": [206, 207, 209], "001": 206, "005": 206, "b_nt": 206, "0005": 206, "0125": 206, "015": 206, "0175": 206, "t_lock": 206, "analyze_psk": 207, "100_000": 207, "n0": 207, "tx_mf": 207, "1e6": 207, "s_hat": 207, "bpsk_ber": 207, "bpsk_ser": 207, "qpsk_ber": 207, "qpsk_ser": 207, "psk8_ber": 207, "psk8_ser": 207, "psk16_ber": 207, "psk16_ser": 207, "simul": [207, 209], "1e0": 207, "psk8_bin": 207, "psk8_grai": 207, "wors": 207, "rect": 208, "rc_0p1": 208, "rc_0p5": 208, "rc_0p9": 208, "pm": 208, "60": 208, "nearli": 208, "small": 208, "lobe": 208, "much": 208, "h_rect": 208, "freqz": 208, "worn": 208, "whole": 208, "h_rc_0p1": 208, "h_rc_0p5": 208, "h_rc_0p9": 208, "p_rect": 208, "log10": 208, "cumsum": 208, "p_rc_0p1": 208, "p_rc_0p5": 208, "p_rc_0p9": 208, "One": 208, "within": 208, "srrc_0p1": 208, "srrc_0p5": 208, "srrc_0p9": 208, "therefor": 208, "significantli": 208, "due": 208, "being": 208, "h_srrc_0p1": 208, "h_srrc_0p5": 208, "h_srrc_0p9": 208, "p_srrc_0p1": 208, "p_srrc_0p5": 208, "p_srrc_0p9": 208, "gauss_0p1": 208, "gauss_0p2": 208, "gauss_0p3": 208, "softwar": 209, "radio": 209, "goal": 209, "analyz": 209, "build": 209, "reli": 209, "interoper": 209, "veri": 209, "numba": 209, "acceler": 209, "computation": 209, "intens": 209, "addition": 209, "aim": 209, "replic": 209, "relev": 209, "matlab": 209, "toolbox": 209, "progress": 209, "someth": 209, "pleas": 209, "open": 209, "issu": 209, "github": 209, "pypi": 209, "api": [209, 211], "convers": [209, 210], "synchron": 209, "budget": [209, 210], "manipul": 209, "august": 210, "2023": 210, "abil": 210, "improv": 210, "renam": 210, "superflu": 210, "replac": 210, "matt": 210, "hostett": 210, "translat": 210, "fix": [210, 211], "juli": 210, "firinterpol": 210, "model": 210, "impair": 210, "fpsl": 210, "helper": 210, "semant": 211, "major": 211, "minor": 211, "patch": 211, "introduc": 211, "featur": 211, "backward": 211, "compat": 211, "make": 211, "bug": 211, "There": 211, "guarante": 211, "them": 211, "thei": 211}, "objects": {"": [[2, 0, 0, 1, "sdr", ""]], "sdr": [[8, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [25, 1, 1, "", "DDS", "Implements a direct digital synthesizer (DDS)."], [31, 1, 1, "", "Decimator", "Implements a polyphase finite impulse response (FIR) decimating filter."], [41, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [48, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [65, 1, 1, "", "FarrowResampler", "Implements a cubic Farrow arbitrary resampler."], [72, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [91, 1, 1, "", "Interpolator", "Implements a polyphase finite impulse response (FIR) interpolating filter."], [101, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [110, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [118, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [128, 5, 1, "", "Q", "Computes the complementary cumulative distribution function $Q(x)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [129, 5, 1, "", "Qinv", "Computes the inverse complementary cumulative distribution function $Q^{-1}(p)$ of the standard normal distribution $mathcal{N}(0, 1)$."], [130, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [131, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [132, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [133, 5, 1, "", "barker", "Returns the Barker code/sequence of length $N$."], [134, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC) with erasure probability $p$."], [135, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [136, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [137, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC) with transition probability $p$."], [138, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [139, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [140, 5, 1, "", "db", "Converts from linear units to decibels."], [141, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [142, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [143, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC) with transition probability matrix $P$."], [144, 5, 1, "", "downsample", "Downsamples the time-domain signal $x[n]$ by the factor $r$."], [145, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [146, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [147, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [148, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [149, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [150, 5, 1, "", "evm", "Calculates the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [151, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [152, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [153, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [154, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [155, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [156, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [157, 5, 1, "", "linear", "Converts from decibels to linear units."], [158, 5, 1, "", "mix", "Mixes the time-domain signal $x[n]$ with a complex exponential or real sinusoid."], [159, 5, 1, "", "multirate_taps", "Computes the multirate FIR filter that achieves rational resampling by $P/Q$."], [160, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [161, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [162, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [163, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [164, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [183, 5, 1, "", "polyphase_matrix", "Converts the multirate FIR filter taps $h_i$ into the polyphase matrix $H_{i, j}$ that achieves rational resampling by $P/Q$."], [184, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [185, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [186, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [187, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [188, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [189, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [190, 5, 1, "", "to_complex_bb", "Converts the real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$ to a complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c} = f_{s,r}/2$."], [191, 5, 1, "", "to_real_pb", "Converts the complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$ to a real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r} = 2f_{s,c}$."], [192, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [193, 5, 1, "", "upsample", "Upsamples the time-domain signal $x[n]$ by the factor $r$."], [194, 5, 1, "", "zadoff_chu", "Returns the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.ClosedLoopPLL": [[9, 2, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [10, 2, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [11, 2, 1, "", "K0", "The NCO gain $K_0$."], [12, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [13, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [14, 2, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [15, 3, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [16, 3, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [17, 2, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [18, 3, 1, "", "lock_time", "Returns the lock time of the PLL."], [19, 2, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [20, 2, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [21, 3, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [22, 3, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [23, 2, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [24, 2, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[15, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [15, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [15, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [15, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [15, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[16, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[18, 4, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[21, 4, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.DDS": [[26, 3, 1, "", "__call__", "Steps the DDS with the variable phase increment signal $x[n]$."], [27, 3, 1, "", "__init__", "Creates a direct digital synthesizer (DDS)."], [28, 2, 1, "", "nco", "The numerically-controlled oscillator (NCO) used by the DDS."], [29, 3, 1, "", "reset", "Resets the DDS."], [30, 3, 1, "", "step", "Steps the DDS forward by $N$ samples."]], "sdr.DDS.__call__": [[26, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the DDS."]], "sdr.DDS.__init__": [[27, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [27, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [27, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.DDS.step": [[30, 4, 2, "p-N", "N", "The number of samples $N$ to step the DDS forward."]], "sdr.Decimator": [[32, 3, 1, "", "__call__", "Filters and decimates the input signal $x[n]$ with the polyphase FIR filter."], [33, 3, 1, "", "__init__", "Creates a polyphase FIR decimating filter."], [34, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [35, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [36, 2, 1, "", "method", "The method used to design the multirate filter."], [37, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [38, 2, 1, "", "rate", "The decimation rate $r$."], [39, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [40, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Decimator.__call__": [[32, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [32, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Decimator.__init__": [[33, 4, 2, "p-rate", "rate", "The decimation rate $r$."], [33, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [33, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.ErrorRate": [[42, 3, 1, "", "__init__", "Creates a new error rate tabulation object."], [43, 3, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [44, 3, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [45, 3, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [46, 3, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [47, 3, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[43, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [43, 4, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [43, 4, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[44, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[45, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[47, 4, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[49, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the FIR filter."], [50, 3, 1, "", "__init__", "Creates a FIR filter with feedforward coefficients $h_i$."], [51, 3, 1, "", "__len__", "Returns the filter length $N + 1$."], [52, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [53, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [54, 2, 1, "", "delay", "The delay of the FIR filter $d = lfloor frac{N + 1}{2} rfloor$ in samples."], [55, 3, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [56, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the FIR filter."], [57, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(omega)$ of the FIR filter on a logarithmic frequency axis."], [58, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [59, 2, 1, "", "order", "The order of the FIR filter $N$."], [60, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [61, 2, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [62, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [63, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [64, 2, 1, "", "taps", "The feedforward taps $h_i$ for $i = 0,...,N$."]], "sdr.FIR.__call__": [[49, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [49, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.FIR.__init__": [[50, 4, 2, "p-h", "h", "The feedforward coefficients $h_i$ for $i = 0,...N$."], [50, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FIR.frequency_response": [[56, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [56, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.frequency_response_log": [[57, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [57, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [57, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[58, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.step_response": [[62, 4, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FarrowResampler": [[66, 3, 1, "", "__call__", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [67, 3, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [68, 2, 1, "", "order", "The order of the filter."], [69, 3, 1, "", "reset", "Streaming-mode only: Resets the filter state and fractional sample index."], [70, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [71, 2, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__call__": [[66, 4, 2, "p-rate", "rate", "The resampling rate $r$."], [66, 4, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.__init__": [[67, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FarrowResampler.reset": [[69, 4, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.IIR": [[73, 3, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [74, 3, 1, "", "__call__", "Filters the input signal $x[n]$ with the IIR filter."], [75, 3, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [76, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [77, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [78, 2, 1, "", "a_taps", "The feedback taps $a_j$ for $j = 0,...,N$."], [79, 2, 1, "", "b_taps", "The feedforward taps $b_i$ for $i = 0,...,M$."], [80, 3, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the IIR filter."], [81, 3, 1, "", "frequency_response_log", "Returns the frequency response $H(omega)$ of the IIR filter on a logarithmic frequency axis."], [82, 2, 1, "", "gain", "The gain of the IIR filter."], [83, 3, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter. The impulse response $h[n]$ is the filter output when the input is an impulse $delta[n]$."], [84, 2, 1, "", "order", "The order of the IIR filter $N$."], [85, 2, 1, "", "poles", "The poles of the IIR filter."], [86, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [87, 2, 1, "", "state", "The filter state."], [88, 3, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter. The step response $s[n]$ is the filter output when the input is a unit step $u[n]$."], [89, 2, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [90, 2, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[73, 4, 2, "p-gain", "gain", "The gain of the transfer function."], [73, 4, 2, "p-poles", "poles", "The poles of the transfer function."], [73, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."], [73, 4, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__call__": [[74, 4, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.IIR.__init__": [[75, 4, 2, "p-a", "a", "The feedback coefficients $a_j$ for $j = 0,...,N$."], [75, 4, 2, "p-b", "b", "The feedforward coefficients $b_i$ for $i = 0,...,M$."], [75, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.IIR.frequency_response": [[80, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [80, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.frequency_response_log": [[81, 4, 2, "p-N", "N", "The number of samples in the frequency response."], [81, 4, 2, "p-decades", "decades", "The number of frequency decades to plot."], [81, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.impulse_response": [[83, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[88, 4, 2, "p-N", "N", "The number of samples to return."]], "sdr.Interpolator": [[92, 3, 1, "", "__call__", "Interpolates and filters the input signal $x[n]$ with the polyphase FIR filter."], [93, 3, 1, "", "__init__", "Creates a polyphase FIR interpolating filter."], [94, 3, 1, "", "__repr__", "Returns a code-styled string representation of the object."], [95, 3, 1, "", "__str__", "Returns a human-readable string representation of the object."], [96, 2, 1, "", "method", "The method used to design the multirate filter."], [97, 2, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_{i, j}$."], [98, 2, 1, "", "rate", "The interpolation rate $r$."], [99, 3, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [100, 2, 1, "", "taps", "The prototype feedforward taps $h_i$."]], "sdr.Interpolator.__call__": [[92, 4, 2, "p-mode", "mode", "The non-streaming convolution mode."], [92, 4, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Interpolator.__init__": [[93, 4, 2, "p-rate", "rate", "The interpolation rate $r$."], [93, 4, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [93, 4, 2, "p-taps", "taps", "The multirate filter design specification."]], "sdr.LoopFilter": [[102, 2, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [103, 2, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [104, 3, 1, "", "__call__", "Filters the input signal $x[n]$."], [105, 3, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [106, 2, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [107, 2, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [108, 2, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [109, 3, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__call__": [[104, 4, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.LoopFilter.__init__": [[105, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [105, 4, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [105, 4, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [105, 4, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.NCO": [[111, 2, 1, "", "K0", "The NCO gain $K_0$."], [112, 3, 1, "", "__call__", "Steps the NCO with the variable-increment signal $x[n]$."], [113, 3, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [114, 2, 1, "", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [115, 2, 1, "", "offset", "The absolute offset $theta$ of the NCO in units."], [116, 3, 1, "", "reset", "Resets the NCO."], [117, 3, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__call__": [[112, 4, 2, "p-x", "x", "The variable-increment signal $x[n]$. This input signal varies the per-sample increment of the NCO."]], "sdr.NCO.__init__": [[113, 4, 2, "p-K0", "K0", "The NCO gain $K_0$."], [113, 4, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in units/sample."], [113, 4, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in units."]], "sdr.NCO.step": [[117, 4, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.PSK": [[119, 3, 1, "", "__init__", "Creates a new PSK object."], [120, 3, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [121, 2, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [122, 3, 1, "", "demodulate", "Demodulates the complex symbols $hat{x}[k]$ to decimal symbols $hat{s}[k]$ using maximum-likelihood estimation."], [123, 3, 1, "", "modulate", "Modulates to decimal symbols $s[k]$ to complex symbols $x[k]$."], [124, 2, 1, "", "order", "The modulation order $M = 2^k$."], [125, 2, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [126, 3, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [127, 2, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$. This maps decimal symbols from $0$ to $M-1$ to complex symbols."]], "sdr.PSK.__init__": [[119, 4, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [119, 4, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [119, 4, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[120, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [120, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.demodulate": [[122, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to demodulate."]], "sdr.PSK.modulate": [[123, 4, 2, "p-symbols", "symbols", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.PSK.ser": [[126, 4, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [126, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.Q": [[128, 4, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[129, 4, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.average_power": [[130, 4, 2, "p-db", "db", "Indicates whether to return the result in dB."], [130, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[131, 4, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [131, 4, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [131, 4, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [131, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[132, 4, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [132, 4, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.barker": [[133, 4, 2, "p-length", "length", "The length $N$ of the Barker code/sequence."], [133, 4, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[134, 4, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [134, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[135, 4, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.binary_code": [[136, 4, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[137, 4, 2, "p-p", "p", "The probability $p$ of a bit flip."], [137, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[138, 4, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.crest_factor": [[139, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.db": [[140, 4, 2, "p-type", "type", "The type of input value or signal."], [140, 4, 2, "p-x", "x", "The input value or signal."]], "sdr.diff_decode": [[141, 4, 2, "p-y", "y", "The input encoded data $y[k]$."], [141, 4, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[142, 4, 2, "p-x", "x", "The input uncoded data $x[k]$."], [142, 4, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[143, 4, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [143, 4, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [143, 4, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [143, 4, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.downsample": [[144, 4, 2, "p-rate", "rate", "The downsampling factor $r$."], [144, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.ebn0_to_esn0": [[145, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [145, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [145, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[146, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [146, 4, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [146, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [146, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[147, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[148, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [148, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [148, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[149, 4, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [149, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.evm": [[150, 4, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [150, 4, 2, "p-output", "output", "The output type of the EVM calculation."], [150, 4, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [150, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.frequency_offset": [[151, 4, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [151, 4, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [151, 4, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [151, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [151, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[152, 4, 2, "p-d", "d", "The distance $d$ in meters between the transmitter and receiver."], [152, 4, 2, "p-f", "f", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[153, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [153, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [153, 4, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[154, 4, 2, "p-n", "n", "The length of the Gray code."]], "sdr.hexdump": [[155, 4, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [155, 4, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[156, 4, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [156, 4, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [156, 4, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.linear": [[157, 4, 2, "p-type", "type", "The type of output value or signal."], [157, 4, 2, "p-x", "x", "The input value or signal in dB."]], "sdr.mix": [[158, 4, 2, "p-complex", "complex", "Indicates whether to mix by a complex exponential or real sinusoid."], [158, 4, 2, "p-freq", "freq", "The frequency $f$ of the sinusoid in Hz (or 1/samples if sample_rate=1). The frequency must satisfy $-f_s/2 le f le f_s/2$."], [158, 4, 2, "p-phase", "phase", "The phase $phi$ of the sinusoid in degrees."], [158, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal."], [158, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.multirate_taps": [[159, 4, 2, "p-A_stop", "A_stop", "The stopband attenuation $A_{text{stop}}$ in dB."], [159, 4, 2, "p-P", "P", "The interpolation rate $P$."], [159, 4, 2, "p-Q", "Q", "The decimation rate $Q$."], [159, 4, 2, "p-half_length", "half_length", "The half-length of the polyphase filters."]], "sdr.pack": [[160, 4, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [160, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [160, 4, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[161, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[162, 4, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [162, 4, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [162, 4, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[163, 4, 2, "p-db", "db", "Indicates whether to return the result in dB."], [163, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[164, 4, 2, "p-db", "db", "Indicates whether to return the result in dB."], [164, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.plot": [[165, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [166, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [167, 5, 1, "", "eye", "Plots the eye diagram of the baseband modulated signal $x[n]$."], [168, 5, 1, "", "filter", "Plots the magnitude response $|H(omega)|^2$, impulse response $h[n]$, step response $s[n]$, and zeros and poles of the filter."], [169, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [170, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [171, 5, 1, "", "magnitude_response", "Plots the magnitude response $|H(omega)|^2$ of the filter."], [172, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [173, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [174, 5, 1, "", "phase_response", "Plots the phase response $angle H(omega)$ of the filter."], [175, 5, 1, "", "raster", "Plots a raster of the time-domain signal $x[n]$."], [176, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [177, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [178, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [179, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [180, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [181, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [182, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[165, 4, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [165, 4, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."], [165, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."]], "sdr.plot.constellation": [[166, 4, 2, "p-heatmap", "heatmap", "If True, a heatmap is plotted instead of a scatter plot."], [166, 4, 2, "p-kwargs", "kwargs", "If heatmap=False, additional keyword arguments to pass to matplotlib.pyplot.scatter(). The following keyword arguments are set by default. The defaults may be overwritten."], [166, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [166, 4, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.eye": [[167, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [167, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [167, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [167, 4, 2, "p-span", "span", "The number of symbols per raster."], [167, 4, 2, "p-sps", "sps", "The number of samples per symbol."], [167, 4, 2, "p-x", "x", "The baseband modulated signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved."]], "sdr.plot.filter": [[168, 4, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [168, 4, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [168, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [168, 4, 2, "p-filter", "filter", "The filter definition."], [168, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [168, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[169, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [169, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [169, 4, 2, "p-filter", "filter", "The filter definition."], [169, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [169, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [169, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.impulse_response": [[170, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [170, 4, 2, "p-filter", "filter", "The filter definition."], [170, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.magnitude_response": [[171, 4, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [171, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [171, 4, 2, "p-filter", "filter", "The filter definition."], [171, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [171, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [171, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.periodogram": [[172, 4, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [172, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [172, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [172, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [172, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [172, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [172, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [172, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [172, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [172, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_delay": [[173, 4, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [173, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [173, 4, 2, "p-filter", "filter", "The filter definition."], [173, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [173, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [173, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.phase_response": [[174, 4, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [174, 4, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [174, 4, 2, "p-filter", "filter", "The filter definition."], [174, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [174, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [174, 4, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [174, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.raster": [[175, 4, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [175, 4, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\"."], [175, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.collections.LineCollection. The following keyword arguments are set by default. The defaults may be overwritten."], [175, 4, 2, "p-length", "length", "The length of each raster in samples. This must be provided if x is 1D."], [175, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [175, 4, 2, "p-stride", "stride", "The stride between each raster in samples. If None, the stride is set to length."], [175, 4, 2, "p-x", "x", "The time-domain signal $x[n]$. If x is complex, the real and imaginary rasters are interleaved. Time order is preserved. If x is 1D, the rastering is determined by length and stride. If x is 2D, the rows correspond to each raster."]], "sdr.plot.ser": [[176, 4, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [176, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."], [176, 4, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.spectrogram": [[177, 4, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [177, 4, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [177, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.pcolormesh(). The following keyword arguments are set by default. The defaults may be overwritten."], [177, 4, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [177, 4, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [177, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If the sample rate is 1, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [177, 4, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [177, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."], [177, 4, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum or two-sided spectrum."]], "sdr.plot.step_response": [[178, 4, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [178, 4, 2, "p-filter", "filter", "The filter definition."], [178, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.symbol_map": [[179, 4, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [179, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot(). The following keyword arguments are set by default. The defaults may be overwritten."], [179, 4, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [179, 4, 2, "p-symbol_map", "symbol_map", "The complex symbols $hat{x}[k]$."]], "sdr.plot.time_domain": [[180, 4, 2, "p-centered", "centered", "Indicates whether to center the x-axis about 0. This argument is mutually exclusive with offset."], [180, 4, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal. If \"color\", the real and imaginary parts will have different colors based on the current Matplotlib color cycle. If \"line\", the real part will have a solid line and the imaginary part will have a dashed line, and both lines will share the same color."], [180, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [180, 4, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. The units of the offset are $1/f_s$. This argument is mutually exclusive with centered."], [180, 4, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [180, 4, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[182, 4, 2, "p-filter", "filter", "The filter definition."], [182, 4, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.polyphase_matrix": [[183, 4, 2, "p-P", "P", "The interpolation rate $P$."], [183, 4, 2, "p-Q", "Q", "The decimation rate $Q$."], [183, 4, 2, "p-taps", "taps", "The multirate FIR filter taps $h_i$."]], "sdr.raised_cosine": [[184, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [184, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [184, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[185, 4, 2, "p-db", "db", "Indicates whether to return the result in dB."], [185, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[186, 4, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [186, 4, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [186, 4, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[187, 4, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [187, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.snr_to_ebn0": [[188, 4, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [188, 4, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [188, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [188, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[189, 4, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [189, 4, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.to_complex_bb": [[190, 4, 2, "p-x_r", "x_r", "The real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$. If the length is odd, one zero is appended to the end."]], "sdr.to_real_pb": [[191, 4, 2, "p-x_c", "x_c", "The complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$."]], "sdr.unpack": [[192, 4, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [192, 4, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [192, 4, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.upsample": [[193, 4, 2, "p-rate", "rate", "The upsampling factor $r$."], [193, 4, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.zadoff_chu": [[194, 4, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [194, 4, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence. The root must be relatively prime to the length, i.e., $gcd(u, N) = 1$."], [194, 4, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence. When $q ne 0$, the returned sequence is a cyclic shift of the root-$u$ Zadoff-Chu sequence."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:parameter", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "function", "Python function"]}, "titleterms": {"convers": 0, "decibel": 0, "from": [0, 199, 200, 201], "e_b": 0, "n_0": 0, "e_": 0, "": [0, 203, 204], "n": [0, 202, 203, 204], "data": 1, "manipul": [1, 2], "digit": [2, 204], "signal": [2, 196, 202, 205], "process": 2, "filter": [2, 6, 203, 204, 206], "multir": 2, "resampl": [2, 202], "correl": 2, "link": 3, "budget": 3, "channel": [3, 196], "capac": 3, "path": 3, "loss": 3, "antenna": 3, "measur": 4, "energi": 4, "power": [4, 205], "voltag": 4, "modul": [4, 5, 6], "class": 5, "puls": [5, 205, 208], "shape": [5, 205, 208], "symbol": [5, 207], "map": [5, 207], "encod": 5, "plot": [6, 205], "configur": [6, 200, 201], "time": [6, 205, 206], "domain": [6, 205, 206], "frequenc": [6, 203, 204, 205, 206], "spectral": 6, "estim": 6, "analysi": 6, "probabl": 7, "note": [8, 152, 159, 171, 172, 177], "constructor": [8, 25, 31, 41, 48, 65, 72, 91, 101, 110, 118], "method": [8, 25, 31, 41, 48, 65, 72, 91, 101, 110, 118], "properti": [8, 25, 31, 48, 65, 72, 91, 101, 110, 118], "see": [25, 41, 43, 56, 57, 58, 62, 80, 81, 83, 88, 110, 120, 126, 128, 129, 139, 161, 193], "also": [25, 41, 43, 56, 57, 58, 62, 80, 81, 83, 88, 110, 120, 126, 128, 129, 139, 161, 193], "special": [25, 31, 48, 65, 72, 91, 101, 110], "string": [31, 48, 72, 91], "represent": [31, 48, 72, 91], "stream": [31, 48, 72, 91], "mode": [31, 48, 72, 91], "onli": [31, 48, 72, 91], "warn": [144, 193], "sequenc": 195, "simul": 196, "model": 196, "impair": 196, "synchron": 197, "document": 198, "instal": [198, 199, 200, 201, 209], "build": 198, "doc": 198, "serv": 198, "pypi": 199, "github": 199, "edit": 199, "local": 199, "folder": 199, "dev": 199, "depend": 199, "linter": 200, "run": [200, 201], "command": [200, 201], "line": [200, 201], "v": [200, 201], "code": [200, 201], "unit": 201, "test": 201, "farrow": 202, "arbitrari": 202, "construct": 202, "an": [202, 203, 204], "input": 202, "x": 202, "t_": 202, "rate": [202, 207], "r": 202, "y": 202, "frac": 202, "upsampl": 202, "integ": 202, "downsampl": 202, "irrat": 202, "fir": 203, "creat": [203, 204], "examin": [203, 204, 205], "impuls": [203, 204], "respons": [203, 204, 206], "h": [203, 204], "step": [203, 204, 206], "omega": [203, 204], "group": [203, 204], "delai": [203, 204], "tau_g": [203, 204], "fulli": [203, 204], "analyz": [203, 204, 206], "iir": 204, "zero": 204, "pole": 204, "stabil": 204, "peak": 205, "averag": 205, "qpsk": [205, 207], "variou": 205, "across": [205, 206], "excess": 205, "bandwidth": 205, "phase": [206, 207], "lock": 206, "loop": 206, "design": 206, "proport": 206, "plu": 206, "integr": 206, "ppi": 206, "implement": 206, "pll": 206, "close": 206, "perform": 206, "compar": 206, "zeta": 206, "b_n": 206, "t": 206, "shift": 207, "kei": 207, "constel": 207, "bpsk": 207, "8": 207, "psk": 207, "16": 207, "error": 207, "curv": 207, "bit": 207, "rais": 208, "cosin": 208, "squar": 208, "root": 208, "gaussian": 208, "sdr": 209, "featur": 209, "v0": 210, "0": 210, "5": 210, "chang": 210, "contributor": 210, "4": 210, "3": 210, "2": 210, "1": 210, "version": 211, "alpha": 211, "releas": 211, "beta": 211}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Conversions": [[0, "conversions"]], "Decibels": [[0, "decibels"]], "From E_b/N_0": [[0, "from-e-b-n-0"]], "From E_s/N_0": [[0, "from-e-s-n-0"]], "From S/N": [[0, "from-s-n"]], "Data manipulation": [[1, "data-manipulation"]], "Digital signal processing": [[2, "digital-signal-processing"]], "Filtering": [[2, "filtering"]], "Multirate filtering": [[2, "multirate-filtering"]], "Resampling": [[2, "resampling"]], "Correlation": [[2, "correlation"]], "Signal manipulation": [[2, "signal-manipulation"]], "Link budgets": [[3, "link-budgets"]], "Channel capacity": [[3, "channel-capacity"]], "Path losses": [[3, "path-losses"]], "Antennas": [[3, "antennas"]], "Measurement": [[4, "measurement"]], "Energy": [[4, "energy"]], "Power": [[4, "power"]], "Voltage": [[4, "voltage"]], "Modulation": [[4, "modulation"], [5, "modulation"], [6, "modulation"]], "Classes": [[5, "classes"]], "Pulse shaping": [[5, "pulse-shaping"]], "Symbol mapping": [[5, "symbol-mapping"], [207, "symbol-mapping"]], "Symbol encoding": [[5, "symbol-encoding"]], "Plotting": [[6, "plotting"]], "Configuration": [[6, "configuration"], [200, "configuration"], [201, "configuration"]], "Time-domain": [[6, "time-domain"]], "Frequency-domain": [[6, "frequency-domain"]], "Spectral estimation": [[6, "spectral-estimation"]], "Filter analysis": [[6, "filter-analysis"]], "Probability": [[7, "probability"]], "Note": [[8, null], [152, null], [159, null], [171, null], [172, null], [172, null], [177, null]], "Constructors": [[8, "constructors"], [25, "constructors"], [31, "constructors"], [41, "constructors"], [48, "constructors"], [65, "constructors"], [72, "constructors"], [91, "constructors"], [101, "constructors"], [110, "constructors"], [118, "constructors"]], "Methods": [[8, "methods"], [25, "methods"], [31, "methods"], [41, "methods"], [48, "methods"], [65, "methods"], [72, "methods"], [91, "methods"], [101, "methods"], [110, "methods"], [118, "methods"]], "Properties": [[8, "properties"], [25, "properties"], [31, "properties"], [48, "properties"], [65, "properties"], [72, "properties"], [91, "properties"], [101, "properties"], [110, "properties"], [118, "properties"]], "See also": [[25, null], [41, null], [43, null], [56, null], [57, null], [58, null], [62, null], [80, null], [81, null], [83, null], [88, null], [110, null], [120, null], [126, null], [128, null], [129, null], [139, null], [161, null], [193, null]], "Special methods": [[25, "special-methods"], [31, "special-methods"], [48, "special-methods"], [65, "special-methods"], [72, "special-methods"], [91, "special-methods"], [101, "special-methods"], [110, "special-methods"]], "String representation": [[31, "string-representation"], [48, "string-representation"], [72, "string-representation"], [91, "string-representation"]], "Streaming mode only": [[31, "streaming-mode-only"], [48, "streaming-mode-only"], [72, "streaming-mode-only"], [91, "streaming-mode-only"]], "Warning": [[144, null], [193, null]], "Sequences": [[195, "sequences"]], "Simulation": [[196, "simulation"]], "Channel models": [[196, "channel-models"]], "Signal impairments": [[196, "signal-impairments"]], "Synchronization": [[197, "synchronization"]], "Documentation": [[198, "documentation"]], "Install": [[198, "install"], [200, "install"], [201, "install"]], "Build the docs": [[198, "build-the-docs"]], "Serve the docs": [[198, "serve-the-docs"]], "Installation": [[199, "installation"], [209, "installation"]], "Install from PyPI": [[199, "install-from-pypi"]], "Install from GitHub": [[199, "install-from-github"]], "Editable install from local folder": [[199, "editable-install-from-local-folder"]], "Install the dev dependencies": [[199, "install-the-dev-dependencies"]], "Linter": [[200, "linter"]], "Run from the command line": [[200, "run-from-the-command-line"], [201, "run-from-the-command-line"]], "Run from VS Code": [[200, "run-from-vs-code"], [201, "run-from-vs-code"]], "Unit Tests": [[201, "unit-tests"]], "Farrow arbitrary resampler": [[202, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[202, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[202, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[202, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[202, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[202, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[202, "downsample-by-an-irrational-rate"]], "FIR filters": [[203, "fir-filters"]], "Create an FIR filter": [[203, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[203, "examine-the-impulse-response-h-n"], [204, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[203, "examine-the-step-response-s-n"], [204, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[203, "examine-the-frequency-response-h-omega"], [204, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[203, "examine-the-group-delay-tau-g-omega"], [204, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[203, "fully-analyze-a-fir-filter"]], "IIR filters": [[204, "iir-filters"]], "Create an IIR filter": [[204, "create-an-iir-filter"]], "Examine the zeros and poles": [[204, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[204, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[204, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[205, "peak-to-average-power"]], "QPSK signal with various pulse shapes": [[205, "qpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[205, "examine-time-domain"]], "Examine frequency domain": [[205, "examine-frequency-domain"]], "Plot across excess bandwidth": [[205, "plot-across-excess-bandwidth"]], "Phase-locked loops": [[206, "phase-locked-loops"]], "Design a proportional-plus-integrator (PPI) loop filter": [[206, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[206, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[206, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[206, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[206, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[206, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[206, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[207, "phase-shift-keying"]], "Constellations": [[207, "constellations"]], "BPSK": [[207, "bpsk"]], "QPSK": [[207, "qpsk"]], "8-PSK": [[207, "id1"]], "16-PSK": [[207, "id2"]], "Error rate curves": [[207, "error-rate-curves"]], "Bit error rate curves": [[207, "bit-error-rate-curves"]], "Symbol error rate curves": [[207, "symbol-error-rate-curves"]], "Pulse shapes": [[208, "pulse-shapes"]], "Raised cosine": [[208, "raised-cosine"]], "Square-root raised cosine": [[208, "square-root-raised-cosine"]], "Gaussian": [[208, "gaussian"]], "sdr": [[209, "sdr"]], "Features": [[209, "features"]], "v0.0": [[210, "v0-0"]], "v0.0.5": [[210, "v0-0-5"]], "Changes": [[210, "changes"], [210, "id1"], [210, "id3"], [210, "id5"], [210, "id7"]], "Contributors": [[210, "contributors"], [210, "id2"], [210, "id4"], [210, "id6"], [210, "id8"]], "v0.0.4": [[210, "v0-0-4"]], "v0.0.3": [[210, "v0-0-3"]], "v0.0.2": [[210, "v0-0-2"]], "v0.0.1": [[210, "v0-0-1"]], "Versioning": [[211, "versioning"]], "Alpha releases": [[211, "alpha-releases"]], "Beta releases": [[211, "beta-releases"]]}, "indexentries": {"module": [[2, "module-sdr"]], "sdr": [[2, "module-sdr"]]}, "docurls": ["api/conversions/", "api/data-manipulation/", "api/dsp/", "api/link-budgets/", "api/measurement/", "api/modulation/", "api/plotting/", "api/probability/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.DDS/", "api/sdr.DDS.__call__/", "api/sdr.DDS.__init__/", "api/sdr.DDS.nco/", "api/sdr.DDS.reset/", "api/sdr.DDS.step/", "api/sdr.Decimator/", "api/sdr.Decimator.__call__/", "api/sdr.Decimator.__init__/", "api/sdr.Decimator.__repr__/", "api/sdr.Decimator.__str__/", "api/sdr.Decimator.method/", "api/sdr.Decimator.polyphase_taps/", "api/sdr.Decimator.rate/", "api/sdr.Decimator.reset/", "api/sdr.Decimator.taps/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__call__/", "api/sdr.FIR.__init__/", "api/sdr.FIR.__len__/", "api/sdr.FIR.__repr__/", "api/sdr.FIR.__str__/", "api/sdr.FIR.delay/", "api/sdr.FIR.flush/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.frequency_response_log/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.reset/", "api/sdr.FIR.state/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__call__/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__call__/", "api/sdr.IIR.__init__/", "api/sdr.IIR.__repr__/", "api/sdr.IIR.__str__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.frequency_response_log/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.state/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.Interpolator/", "api/sdr.Interpolator.__call__/", "api/sdr.Interpolator.__init__/", "api/sdr.Interpolator.__repr__/", "api/sdr.Interpolator.__str__/", "api/sdr.Interpolator.method/", "api/sdr.Interpolator.polyphase_taps/", "api/sdr.Interpolator.rate/", "api/sdr.Interpolator.reset/", "api/sdr.Interpolator.taps/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.K1/", "api/sdr.LoopFilter.K2/", "api/sdr.LoopFilter.__call__/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.reset/", "api/sdr.NCO/", "api/sdr.NCO.K0/", "api/sdr.NCO.__call__/", "api/sdr.NCO.__init__/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.ber/", "api/sdr.PSK.bps/", "api/sdr.PSK.demodulate/", "api/sdr.PSK.modulate/", "api/sdr.PSK.order/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.barker/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.crest_factor/", "api/sdr.db/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.downsample/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.evm/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.linear/", "api/sdr.mix/", "api/sdr.multirate_taps/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.eye/", "api/sdr.plot.filter/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.magnitude_response/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.raster/", "api/sdr.plot.ser/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.polyphase_matrix/", "api/sdr.raised_cosine/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.to_complex_bb/", "api/sdr.to_real_pb/", "api/sdr.unpack/", "api/sdr.upsample/", "api/sdr.zadoff_chu/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/installation/", "development/linter/", "development/unit-tests/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "", "release-notes/v0.0/", "release-notes/versioning/"]})