Search.setIndex({"titles": ["Coding", "Conversions", "Detection", "Digital signal processing", "Link budgets", "Measurement", "Miscellaneous", "Modulation", "Plotting", "sdr.AGC", "sdr.AGC.__call__", "sdr.AGC.__init__", "sdr.AGC.attack", "sdr.AGC.decay", "sdr.AGC.gain", "sdr.AGC.reference", "sdr.AGC.reset", "sdr.AGC.streaming", "sdr.AdditiveScrambler", "sdr.AdditiveScrambler.__init__", "sdr.AdditiveScrambler.descramble", "sdr.AdditiveScrambler.lfsr", "sdr.AdditiveScrambler.scramble", "sdr.BinaryErasureChannel", "sdr.BinaryErasureChannel.X", "sdr.BinaryErasureChannel.Y", "sdr.BinaryErasureChannel.__call__", "sdr.BinaryErasureChannel.__init__", "sdr.BinaryErasureChannel.capacities", "sdr.BinaryErasureChannel.capacity", "sdr.BinaryErasureChannel.p", "sdr.BinarySymmetricChannel", "sdr.BinarySymmetricChannel.X", "sdr.BinarySymmetricChannel.Y", "sdr.BinarySymmetricChannel.__call__", "sdr.BinarySymmetricChannel.__init__", "sdr.BinarySymmetricChannel.capacities", "sdr.BinarySymmetricChannel.capacity", "sdr.BinarySymmetricChannel.p", "sdr.BlockInterleaver", "sdr.BlockInterleaver.__init__", "sdr.CPM", "sdr.CPM.__init__", "sdr.CPM.ber", "sdr.CPM.bps", "sdr.CPM.demodulate", "sdr.CPM.index", "sdr.CPM.modulate", "sdr.CPM.order", "sdr.CPM.phase_offset", "sdr.CPM.pulse_shape", "sdr.CPM.rx_filter", "sdr.CPM.ser", "sdr.CPM.sps", "sdr.CPM.tx_filter", "sdr.Channel", "sdr.Channel.__call__", "sdr.Channel.__init__", "sdr.Channel.capacities", "sdr.Channel.capacity", "sdr.Channel.reset", "sdr.Channelizer", "sdr.Channelizer.__call__", "sdr.Channelizer.__init__", "sdr.Channelizer.channels", "sdr.Channelizer.method", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.Decimator", "sdr.Decimator.__init__", "sdr.Decimator.method", "sdr.Decimator.reset", "sdr.Differentiator", "sdr.Differentiator.__init__", "sdr.DiscreteMemorylessChannel", "sdr.DiscreteMemorylessChannel.P", "sdr.DiscreteMemorylessChannel.X", "sdr.DiscreteMemorylessChannel.Y", "sdr.DiscreteMemorylessChannel.__call__", "sdr.DiscreteMemorylessChannel.__init__", "sdr.EnergyDetector", "sdr.EnergyDetector.p_d", "sdr.EnergyDetector.p_fa", "sdr.EnergyDetector.roc", "sdr.EnergyDetector.threshold", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__call__", "sdr.FIR.__init__", "sdr.FIR.__len__", "sdr.FIR.delay", "sdr.FIR.flush", "sdr.FIR.frequency_response", "sdr.FIR.group_delay", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.phase_delay", "sdr.FIR.reset", "sdr.FIR.state", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FLFSR", "sdr.FLFSR.Taps", "sdr.FLFSR.__call__", "sdr.FLFSR.__init__", "sdr.FLFSR.characteristic_poly", "sdr.FLFSR.feedback_poly", "sdr.FLFSR.field", "sdr.FLFSR.initial_state", "sdr.FLFSR.order", "sdr.FLFSR.reset", "sdr.FLFSR.state", "sdr.FLFSR.step", "sdr.FLFSR.taps", "sdr.FLFSR.to_galois_lfsr", "sdr.FarrowResampler", "sdr.FarrowResampler.__call__", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.delay", "sdr.FarrowResampler.flush", "sdr.FarrowResampler.order", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.state", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.FractionalDelay", "sdr.FractionalDelay.__init__", "sdr.GLFSR", "sdr.GLFSR.Taps", "sdr.GLFSR.__init__", "sdr.GLFSR.characteristic_poly", "sdr.GLFSR.feedback_poly", "sdr.GLFSR.field", "sdr.GLFSR.initial_state", "sdr.GLFSR.order", "sdr.GLFSR.reset", "sdr.GLFSR.state", "sdr.GLFSR.step", "sdr.GLFSR.taps", "sdr.GLFSR.to_fibonacci_lfsr", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__call__", "sdr.IIR.__init__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.frequency_response", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.state", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.Integrator", "sdr.Integrator.__init__", "sdr.Interleaver", "sdr.Interleaver.__init__", "sdr.Interleaver.__len__", "sdr.Interleaver.deinterleave", "sdr.Interleaver.interleave", "sdr.Interleaver.inverse_map", "sdr.Interleaver.map", "sdr.Interpolator", "sdr.Interpolator.__init__", "sdr.Interpolator.method", "sdr.LeakyIntegrator", "sdr.LeakyIntegrator.__init__", "sdr.LinearModulation", "sdr.LinearModulation.__init__", "sdr.LinearModulation.ber", "sdr.LinearModulation.bps", "sdr.LinearModulation.decide_symbols", "sdr.LinearModulation.demodulate", "sdr.LinearModulation.map_symbols", "sdr.LinearModulation.modulate", "sdr.LinearModulation.order", "sdr.LinearModulation.phase_offset", "sdr.LinearModulation.pulse_shape", "sdr.LinearModulation.rx_filter", "sdr.LinearModulation.ser", "sdr.LinearModulation.sps", "sdr.LinearModulation.symbol_map", "sdr.LinearModulation.tx_filter", "sdr.LoopFilter", "sdr.LoopFilter.__call__", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.iir", "sdr.LoopFilter.integral_gain", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.proportional_gain", "sdr.LoopFilter.reset", "sdr.MLPED", "sdr.MLPED.A_received", "sdr.MLPED.A_reference", "sdr.MLPED.__call__", "sdr.MLPED.__init__", "sdr.MLPED.data_aided_error", "sdr.MLPED.decision_directed_error", "sdr.MLPED.gain", "sdr.MSK", "sdr.MSK.__init__", "sdr.MovingAverager", "sdr.MovingAverager.__init__", "sdr.NCO", "sdr.NCO.__call__", "sdr.NCO.__init__", "sdr.NCO.gain", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.reset", "sdr.NCO.step", "sdr.OQPSK", "sdr.OQPSK.__init__", "sdr.PED", "sdr.PED.__call__", "sdr.PED.__init__", "sdr.PED.data_aided_error", "sdr.PED.decision_directed_error", "sdr.PED.gain", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.ber", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.PiMPSK", "sdr.PiMPSK.__init__", "sdr.PolyphaseFIR", "sdr.PolyphaseFIR.__call__", "sdr.PolyphaseFIR.__init__", "sdr.PolyphaseFIR.branches", "sdr.PolyphaseFIR.decimation", "sdr.PolyphaseFIR.delay", "sdr.PolyphaseFIR.input", "sdr.PolyphaseFIR.interpolation", "sdr.PolyphaseFIR.order", "sdr.PolyphaseFIR.output", "sdr.PolyphaseFIR.polyphase_order", "sdr.PolyphaseFIR.polyphase_taps", "sdr.PolyphaseFIR.rate", "sdr.PolyphaseFIR.reset", "sdr.PolyphaseFIR.taps", "sdr.Q", "sdr.Qinv", "sdr.ReplicaCorrelator", "sdr.ReplicaCorrelator.p_d", "sdr.ReplicaCorrelator.p_fa", "sdr.ReplicaCorrelator.roc", "sdr.ReplicaCorrelator.threshold", "sdr.Resampler", "sdr.Resampler.__call__", "sdr.Resampler.__init__", "sdr.Resampler.method", "sdr.albersheim", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.barker_code", "sdr.bec", "sdr.bec_capacity", "sdr.berlekamp_massey", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.coherent_gain", "sdr.coherent_gain_loss", "sdr.crest_factor", "sdr.db", "sdr.design_bandpass_fir", "sdr.design_bandstop_fir", "sdr.design_frac_delay_fir", "sdr.design_highpass_fir", "sdr.design_lowpass_fir", "sdr.design_multirate_fir", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.downsample", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.euclidean", "sdr.evm", "sdr.frequency_offset", "sdr.fspl", "sdr.gaussian", "sdr.gray_code", "sdr.h0", "sdr.h1", "sdr.hadamard_code", "sdr.half_sine", "sdr.hamming", "sdr.hexdump", "sdr.iq_imbalance", "sdr.kasami_code", "sdr.linear", "sdr.m_sequence", "sdr.max_frequency_offset", "sdr.max_integration_time", "sdr.min_snr", "sdr.mix", "sdr.non_coherent_gain", "sdr.p_d", "sdr.p_fa", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.peebles", "sdr.percent", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.detector_pdfs", "sdr.plot.eye", "sdr.plot.filter", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.magnitude_response", "sdr.plot.p_d", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.phase_tree", "sdr.plot.raster", "sdr.plot.roc", "sdr.plot.ser", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.polyphase_decompose", "sdr.ppb", "sdr.ppm", "sdr.raised_cosine", "sdr.rectangular", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.threshold", "sdr.to_complex_bb", "sdr.to_real_pb", "sdr.unpack", "sdr.upsample", "sdr.walsh_code", "sdr.wavelength", "sdr.zadoff_chu_sequence", "Sequences", "Simulation", "Synchronization", "Documentation", "Formatting", "Installation", "Unit Tests", "Coherent integration", "Detection", "Digital signal processing", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Modulation", "Non-coherent integration", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "Synchronization", "sdr", "v0.0", "Versioning"], "terms": {"class": [0, 2, 3, 5, 7, 9, 18, 23, 31, 39, 41, 55, 61, 66, 83, 87, 89, 95, 100, 102, 103, 104, 105, 106, 107, 123, 129, 137, 147, 149, 154, 162, 178, 180, 187, 190, 192, 208, 217, 225, 227, 229, 237, 239, 245, 251, 253, 270, 275, 379, 380, 381, 390, 391, 396, 399, 400], "sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 390, 391, 393, 394, 395, 396, 397, 400, 401], "implement": [0, 2, 3, 7, 9, 18, 23, 31, 39, 41, 61, 83, 87, 89, 95, 107, 123, 137, 147, 149, 162, 178, 180, 187, 190, 192, 208, 212, 217, 225, 227, 229, 237, 239, 245, 251, 253, 270, 275, 279, 286, 337, 379, 380, 381, 389], "an": [0, 2, 3, 4, 6, 9, 11, 18, 19, 31, 42, 61, 83, 87, 95, 107, 109, 113, 115, 132, 134, 136, 148, 157, 159, 161, 162, 163, 165, 168, 170, 178, 179, 180, 181, 187, 190, 191, 193, 226, 227, 229, 238, 246, 247, 249, 252, 270, 275, 282, 291, 296, 325, 326, 332, 339, 345, 354, 358, 374, 377, 381, 384, 395, 399, 400], "arbitrari": [0, 7, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 180, 181, 192, 388, 399, 400], "blockinterleav": [0, 39, 40, 400], "block": [0, 9, 18, 39, 40, 61, 66, 83, 107, 187, 190, 208, 229, 275, 300, 301, 399], "additivescrambl": [0, 18, 19, 20, 21, 22, 400], "addit": [0, 4, 18, 19, 281, 282, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 375, 380, 386, 393, 399, 400], "db": [1, 4, 5, 43, 52, 61, 63, 66, 77, 79, 84, 96, 98, 100, 102, 103, 104, 106, 178, 188, 194, 204, 225, 237, 245, 247, 249, 251, 271, 273, 277, 279, 280, 281, 282, 290, 291, 293, 294, 295, 296, 297, 298, 299, 304, 305, 306, 307, 308, 310, 312, 313, 315, 316, 321, 323, 325, 326, 327, 329, 330, 333, 334, 335, 336, 337, 339, 340, 341, 347, 354, 366, 369, 370, 386, 393, 394, 396, 397, 400], "x": [1, 3, 5, 6, 7, 8, 9, 10, 18, 19, 20, 22, 23, 24, 26, 31, 32, 34, 39, 41, 45, 47, 55, 56, 61, 62, 66, 83, 87, 89, 91, 93, 94, 95, 100, 102, 107, 108, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 147, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 164, 178, 179, 180, 183, 184, 187, 190, 192, 197, 199, 208, 209, 225, 227, 237, 245, 251, 253, 254, 255, 259, 268, 269, 270, 275, 276, 280, 281, 284, 286, 288, 290, 291, 292, 293, 300, 301, 302, 303, 306, 309, 310, 311, 315, 316, 319, 321, 323, 324, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 355, 357, 358, 362, 363, 366, 368, 371, 374, 375, 379, 380, 384, 386, 393, 394, 395, 396, 400, 401], "arraylik": [1, 2, 3, 4, 5, 6, 7, 8, 19, 23, 28, 31, 36, 41, 42, 43, 45, 47, 52, 61, 62, 63, 83, 84, 87, 89, 94, 95, 96, 97, 98, 99, 100, 102, 107, 108, 109, 123, 124, 126, 132, 137, 143, 147, 149, 150, 151, 157, 162, 163, 164, 165, 178, 187, 188, 190, 192, 193, 194, 196, 197, 198, 199, 204, 217, 220, 225, 226, 227, 237, 238, 245, 246, 247, 249, 251, 252, 253, 254, 255, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 282, 284, 285, 288, 289, 290, 291, 293, 294, 295, 297, 298, 300, 301, 302, 304, 305, 306, 307, 308, 310, 311, 312, 320, 323, 325, 326, 327, 329, 330, 331, 332, 334, 337, 338, 343, 344, 345, 346, 347, 348, 349, 350, 353, 355, 356, 360, 361, 362, 363, 369, 370, 371, 374, 377, 380], "ndarrai": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 18, 20, 22, 23, 24, 25, 26, 28, 31, 32, 33, 34, 36, 39, 41, 43, 45, 47, 50, 52, 55, 56, 58, 61, 62, 83, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 105, 107, 108, 112, 113, 114, 115, 117, 119, 120, 122, 123, 125, 137, 138, 141, 144, 146, 147, 162, 164, 166, 167, 168, 170, 172, 174, 175, 177, 178, 180, 181, 183, 184, 185, 186, 187, 190, 192, 194, 196, 197, 198, 199, 202, 204, 206, 208, 209, 217, 220, 222, 223, 225, 227, 229, 230, 236, 237, 239, 240, 242, 243, 245, 247, 249, 250, 251, 253, 254, 264, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 351, 352, 354, 357, 358, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380], "float64": [1, 2, 3, 4, 5, 6, 7, 8, 23, 28, 31, 36, 61, 83, 87, 89, 90, 95, 96, 97, 98, 99, 100, 105, 107, 113, 147, 162, 168, 178, 187, 190, 192, 194, 202, 204, 217, 222, 223, 225, 227, 229, 230, 237, 239, 240, 242, 243, 245, 247, 249, 251, 253, 268, 269, 270, 271, 272, 273, 274, 275, 279, 282, 283, 285, 289, 291, 293, 294, 295, 296, 297, 298, 299, 304, 305, 306, 307, 308, 312, 313, 317, 318, 322, 323, 324, 327, 329, 330, 331, 334, 337, 338, 339, 341, 354, 362, 363, 364, 365, 367, 369, 370, 371, 372, 373, 376, 377, 379], "convert": [1, 3, 123, 136, 149, 161, 192, 196, 198, 225, 237, 245, 251, 293, 304, 305, 307, 308, 315, 316, 320, 323, 327, 329, 330, 331, 338, 362, 363, 369, 370, 371, 372, 373], "from": [1, 61, 100, 114, 117, 123, 124, 149, 150, 162, 163, 178, 188, 190, 206, 250, 253, 255, 259, 262, 277, 279, 293, 304, 305, 307, 308, 322, 323, 324, 337, 338, 348, 355, 362, 363, 369, 370, 379, 382, 386, 390, 391, 393, 395, 399], "linear": [1, 9, 14, 16, 61, 87, 123, 127, 129, 131, 135, 137, 149, 152, 154, 156, 160, 187, 188, 189, 192, 193, 222, 223, 225, 237, 242, 243, 245, 251, 275, 277, 278, 279, 281, 286, 293, 315, 316, 323, 324, 327, 329, 330, 331, 341, 346, 348, 353, 355, 357, 371, 386, 393, 399, 400], "unit": [1, 120, 175, 208, 226, 229, 238, 246, 252, 281, 282, 293, 300, 301, 315, 316, 323, 331, 356, 358, 371, 384, 390, 391, 395, 399, 400], "percent": [1, 338, 400], "percentag": [1, 338], "ppm": [1, 363, 368, 380, 400], "part": [1, 286, 358, 362, 363, 368, 395], "per": [1, 6, 41, 42, 44, 45, 46, 47, 53, 62, 108, 192, 193, 195, 197, 199, 205, 225, 226, 230, 237, 238, 245, 246, 251, 252, 254, 276, 281, 282, 304, 305, 307, 308, 311, 313, 318, 320, 332, 340, 342, 351, 362, 363, 364, 365, 367, 368, 369, 370, 374, 383, 394, 397, 400], "million": [1, 363, 368], "ppb": [1, 362, 400], "billion": [1, 362], "ebn0_to_esn0": [1, 52, 204, 249, 304, 396, 400], "ebn0": [1, 8, 41, 43, 192, 194, 225, 237, 245, 247, 251, 282, 304, 305, 339, 396], "bp": [1, 41, 44, 192, 195, 225, 237, 245, 251, 304, 305, 307, 369, 396], "int": [1, 3, 6, 7, 8, 23, 26, 27, 31, 34, 35, 39, 40, 41, 42, 44, 48, 53, 55, 57, 60, 61, 63, 83, 84, 87, 88, 89, 93, 94, 100, 102, 103, 106, 107, 110, 111, 113, 114, 115, 116, 117, 120, 123, 131, 134, 137, 139, 140, 142, 147, 148, 149, 156, 159, 162, 168, 170, 171, 175, 178, 180, 182, 187, 188, 190, 192, 193, 195, 200, 205, 222, 223, 225, 226, 227, 228, 229, 236, 237, 238, 242, 243, 245, 246, 251, 252, 253, 255, 256, 257, 258, 260, 261, 263, 275, 277, 279, 280, 281, 283, 284, 287, 288, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 313, 314, 315, 316, 317, 318, 319, 320, 322, 324, 327, 329, 330, 331, 332, 333, 335, 337, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 355, 356, 361, 364, 365, 367, 369, 370, 371, 374, 375, 376, 378, 379, 396], "e_b": [1, 8, 41, 43, 102, 103, 104, 105, 106, 192, 194, 225, 237, 245, 247, 251, 282, 304, 305, 307, 339, 369, 399], "n_0": [1, 8, 11, 12, 13, 41, 43, 52, 79, 102, 103, 104, 105, 106, 192, 194, 204, 225, 237, 245, 247, 249, 251, 281, 282, 304, 305, 307, 308, 310, 339, 340, 354, 369, 370, 396, 399], "e_": [1, 8, 41, 52, 102, 103, 104, 105, 106, 192, 204, 225, 237, 245, 249, 251, 281, 282, 304, 307, 308, 310, 340, 354, 370, 396, 399], "ebn0_to_snr": [1, 225, 237, 245, 251, 305, 400], "": [1, 8, 18, 19, 41, 45, 47, 61, 66, 74, 76, 77, 78, 80, 81, 83, 87, 95, 102, 103, 104, 105, 106, 107, 113, 114, 117, 120, 123, 124, 126, 130, 132, 133, 147, 149, 150, 151, 155, 157, 158, 162, 168, 175, 178, 187, 190, 192, 193, 196, 197, 198, 199, 217, 225, 227, 237, 245, 251, 253, 265, 270, 272, 274, 275, 279, 281, 282, 291, 305, 308, 310, 311, 316, 321, 327, 330, 337, 340, 342, 343, 344, 346, 348, 349, 350, 351, 352, 355, 356, 358, 359, 368, 369, 370, 372, 373, 385, 386, 389, 393, 394, 396, 399, 400], "n": [1, 3, 5, 6, 8, 9, 10, 18, 19, 20, 22, 39, 41, 42, 45, 47, 50, 51, 54, 61, 62, 63, 66, 83, 84, 87, 88, 94, 95, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 134, 135, 137, 138, 141, 144, 147, 148, 149, 150, 151, 152, 153, 155, 157, 158, 160, 162, 164, 165, 166, 170, 171, 175, 178, 179, 180, 181, 183, 184, 187, 188, 190, 192, 193, 197, 199, 202, 203, 207, 208, 209, 225, 227, 229, 230, 236, 237, 238, 245, 246, 251, 252, 253, 254, 255, 259, 261, 262, 263, 264, 267, 268, 269, 270, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 286, 287, 290, 292, 294, 295, 296, 297, 298, 299, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 319, 321, 322, 324, 327, 328, 329, 330, 331, 333, 335, 336, 337, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 355, 356, 358, 361, 366, 368, 369, 370, 371, 372, 373, 375, 376, 378, 379, 380, 395, 397, 399], "esn0_to_ebn0": [1, 43, 194, 247, 307, 400], "esn0": [1, 8, 41, 52, 192, 204, 225, 237, 245, 249, 251, 307, 308, 354, 396], "esn0_to_snr": [1, 308, 396, 400], "sp": [1, 7, 8, 41, 42, 45, 47, 53, 192, 193, 197, 199, 205, 225, 226, 237, 238, 245, 246, 251, 252, 305, 308, 313, 318, 342, 351, 358, 364, 365, 367, 369, 370, 372, 373, 394, 396, 397], "1": [1, 2, 3, 6, 7, 9, 11, 12, 13, 16, 18, 19, 23, 24, 25, 26, 31, 32, 33, 34, 39, 42, 45, 47, 61, 63, 66, 73, 76, 80, 82, 83, 84, 87, 88, 89, 94, 95, 96, 98, 99, 100, 107, 110, 111, 113, 114, 117, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 139, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 168, 178, 179, 180, 185, 187, 188, 190, 191, 192, 193, 196, 197, 198, 199, 206, 208, 210, 211, 217, 221, 225, 226, 227, 229, 231, 237, 238, 239, 245, 246, 247, 248, 249, 250, 251, 252, 253, 261, 263, 264, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 352, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 386, 389, 390, 391, 393, 394, 395, 396, 397, 401], "snr_to_ebn0": [1, 43, 194, 247, 282, 369, 400], "snr": [1, 2, 4, 8, 95, 96, 98, 100, 102, 103, 104, 105, 106, 225, 237, 245, 251, 279, 281, 282, 290, 291, 315, 316, 327, 329, 330, 331, 337, 341, 347, 369, 370, 371, 372, 373, 380, 386, 393, 396, 400], "snr_to_esn0": [1, 52, 204, 249, 370, 400], "replicacorrel": [2, 270, 271, 272, 273, 274, 400], "clairvoy": [2, 270], "replica": [2, 270], "correl": [2, 270, 283, 317, 322, 376, 378], "energydetector": [2, 95, 96, 97, 98, 99, 400], "energi": [2, 43, 52, 95, 194, 204, 247, 249, 270, 271, 272, 273, 274, 282, 304, 305, 306, 307, 308, 313, 318, 339, 354, 364, 365, 367, 369, 370, 399, 400], "h0": [2, 315, 316, 330, 331, 341, 371, 386, 393, 400], "sigma2": [2, 97, 99, 272, 274, 315, 316, 330, 331, 341, 371, 386, 393], "float": [2, 3, 5, 7, 9, 11, 12, 13, 14, 15, 16, 23, 27, 29, 30, 31, 35, 37, 38, 41, 42, 46, 49, 55, 59, 61, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 98, 100, 102, 103, 104, 106, 107, 113, 114, 117, 137, 138, 141, 147, 148, 162, 163, 168, 169, 178, 187, 188, 190, 191, 192, 193, 201, 208, 210, 211, 213, 214, 215, 217, 218, 219, 221, 224, 225, 226, 227, 229, 231, 232, 233, 234, 237, 238, 239, 244, 245, 246, 248, 251, 252, 253, 265, 273, 275, 277, 280, 281, 282, 284, 288, 292, 294, 295, 296, 297, 298, 299, 310, 311, 313, 315, 316, 321, 328, 329, 333, 335, 336, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 355, 357, 358, 364, 366, 367, 368, 380], "0": [2, 3, 6, 7, 9, 11, 16, 18, 19, 23, 24, 25, 26, 31, 32, 33, 34, 39, 41, 42, 45, 47, 61, 62, 73, 83, 87, 89, 94, 95, 98, 100, 107, 108, 113, 114, 117, 123, 124, 126, 127, 128, 130, 133, 134, 135, 136, 137, 147, 148, 149, 150, 151, 152, 153, 155, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 178, 180, 181, 187, 188, 190, 192, 193, 196, 197, 198, 199, 206, 210, 225, 226, 227, 229, 231, 237, 238, 245, 246, 248, 250, 251, 252, 253, 254, 261, 263, 264, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 337, 338, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 386, 389, 390, 391, 393, 394, 395, 396, 397, 401], "rv_continu": [2, 315, 316, 341], "comput": [2, 6, 41, 43, 52, 55, 58, 83, 89, 95, 96, 97, 98, 99, 113, 168, 192, 194, 204, 217, 225, 237, 239, 245, 247, 249, 251, 268, 269, 270, 271, 272, 273, 274, 280, 281, 290, 291, 306, 309, 312, 315, 316, 319, 325, 326, 327, 329, 330, 331, 333, 335, 371, 390, 391, 395, 397, 400], "statist": [2, 95, 96, 97, 99, 270, 271, 272, 274, 315, 316, 341, 400], "distribut": [2, 6, 268, 269, 315, 316, 341, 386, 393, 400], "under": [2, 8, 95, 270, 315, 316, 341, 386, 393], "null": [2, 95, 270, 315, 386, 393, 397], "hypothesi": [2, 315, 316, 386, 393], "mathcal": [2, 6, 8, 23, 24, 25, 26, 31, 32, 33, 34, 89, 91, 92, 93, 94, 95, 268, 269, 270, 271, 272, 273, 274, 281, 302, 315, 316, 341, 386, 393], "h": [2, 3, 8, 41, 42, 46, 50, 51, 54, 61, 63, 83, 84, 87, 95, 107, 109, 113, 115, 122, 147, 162, 168, 170, 178, 187, 188, 190, 192, 193, 202, 203, 207, 208, 225, 227, 237, 238, 245, 246, 251, 252, 253, 255, 261, 264, 267, 270, 275, 277, 294, 295, 296, 297, 298, 299, 313, 315, 316, 341, 343, 345, 346, 350, 361, 364, 367, 386, 393, 394, 395, 397], "_0": [2, 8, 95, 270, 315, 341, 386, 393], "h1": [2, 315, 316, 330, 341, 386, 393, 400], "altern": [2, 95, 270, 279, 316, 386, 391, 393], "_1": [2, 8, 95, 270, 316, 341, 386, 393], "p_d": [2, 8, 95, 96, 98, 270, 271, 273, 279, 315, 316, 327, 330, 337, 347, 353, 386, 393, 400], "p_fa": [2, 8, 95, 96, 97, 98, 99, 270, 271, 272, 273, 274, 279, 315, 316, 327, 329, 330, 331, 337, 341, 353, 371, 386, 393, 400], "probabl": [2, 8, 23, 27, 30, 31, 35, 38, 89, 90, 94, 95, 96, 97, 98, 99, 268, 269, 270, 271, 272, 273, 274, 279, 284, 285, 288, 289, 302, 315, 316, 327, 329, 330, 331, 337, 341, 342, 347, 353, 371, 386, 393, 399, 400], "p_": [2, 8, 95, 96, 97, 98, 99, 247, 249, 270, 271, 272, 273, 274, 279, 280, 281, 293, 302, 310, 323, 327, 329, 330, 331, 333, 335, 337, 339, 348, 353, 354, 371, 386, 393], "d": [2, 62, 87, 107, 111, 123, 137, 140, 147, 149, 227, 279, 286, 309, 312, 319, 327, 330, 334, 337, 382, 383, 384, 386, 393, 399], "threshold": [2, 95, 97, 99, 270, 272, 274, 315, 316, 329, 330, 331, 341, 371, 386, 393, 399, 400], "fals": [2, 5, 11, 61, 63, 83, 84, 88, 95, 96, 97, 98, 99, 107, 109, 113, 137, 139, 162, 163, 165, 168, 179, 187, 188, 190, 191, 225, 227, 228, 237, 245, 247, 249, 251, 255, 270, 271, 272, 273, 274, 275, 277, 279, 280, 284, 288, 302, 306, 315, 316, 327, 328, 329, 330, 331, 335, 336, 337, 340, 341, 342, 348, 352, 353, 355, 358, 366, 371, 386, 391, 393, 397, 399, 400], "alarm": [2, 95, 96, 97, 98, 99, 270, 271, 272, 273, 274, 279, 315, 316, 327, 329, 330, 331, 337, 341, 353, 371, 386, 393, 399, 400], "fa": [2, 8, 95, 96, 97, 98, 99, 270, 271, 272, 273, 274, 279, 327, 329, 330, 331, 337, 353, 371, 386, 393], "gamma": [2, 95, 97, 99, 270, 272, 274, 279, 331, 341, 371], "min_snr": [2, 279, 327, 337, 400], "minimum": [2, 7, 225, 279, 327, 399, 400], "signal": [2, 5, 8, 9, 10, 11, 12, 13, 41, 42, 50, 61, 62, 66, 74, 76, 79, 80, 83, 87, 88, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 112, 137, 138, 141, 147, 162, 164, 178, 187, 190, 192, 193, 202, 208, 209, 217, 218, 219, 221, 225, 227, 229, 230, 236, 237, 238, 245, 246, 251, 252, 253, 254, 255, 259, 262, 270, 271, 272, 273, 274, 275, 276, 279, 280, 281, 282, 290, 291, 292, 293, 294, 295, 297, 298, 299, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 319, 321, 323, 327, 328, 329, 330, 331, 333, 334, 335, 336, 341, 342, 343, 344, 346, 348, 349, 350, 351, 352, 355, 358, 361, 366, 368, 369, 370, 371, 372, 373, 375, 377, 386, 390, 391, 393, 395, 397, 399, 400], "nois": [2, 4, 9, 43, 52, 66, 67, 68, 73, 79, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 194, 204, 208, 210, 214, 225, 237, 245, 247, 249, 251, 270, 271, 272, 273, 274, 279, 281, 282, 304, 305, 307, 308, 315, 316, 327, 329, 330, 331, 339, 341, 354, 369, 370, 371, 380, 386, 393, 395, 399], "ratio": [2, 5, 42, 43, 46, 52, 79, 96, 98, 100, 102, 103, 104, 105, 106, 194, 204, 225, 237, 247, 249, 251, 271, 273, 279, 281, 282, 304, 305, 307, 308, 315, 316, 327, 329, 330, 333, 338, 339, 341, 354, 362, 363, 369, 370], "requir": [2, 62, 108, 254, 276, 279, 286, 327, 382, 383, 384, 385, 400], "achiev": [2, 279, 327, 330, 331, 371, 386, 393, 396, 397, 400], "desir": [2, 9, 11, 15, 279, 281, 327, 329, 337, 371, 393, 396], "albersheim": [2, 279, 327, 400], "estim": [2, 45, 66, 196, 197, 279, 327, 337, 348, 355, 395], "peebl": [2, 337, 400], "gain": [2, 4, 9, 10, 11, 14, 16, 17, 66, 69, 70, 71, 72, 73, 162, 163, 169, 178, 190, 208, 210, 213, 215, 217, 224, 229, 231, 232, 239, 244, 279, 290, 291, 294, 295, 296, 297, 298, 312, 313, 318, 325, 326, 329, 334, 337, 364, 365, 367, 381, 386, 393, 395, 399, 400], "given": [2, 55, 58, 89, 95, 100, 102, 103, 104, 106, 136, 137, 138, 161, 253, 264, 267, 268, 269, 270, 279, 291, 310, 337, 390, 391], "coherent_gain": [2, 279, 290, 329, 337, 386, 400], "time_bandwidth": [2, 7, 290, 313], "float32": [2, 290, 325, 326], "improv": [2, 290, 329, 400], "coherent_gain_loss": [2, 291, 400], "time": [2, 3, 5, 9, 39, 40, 66, 73, 74, 76, 77, 78, 79, 80, 87, 94, 107, 134, 137, 159, 162, 178, 190, 208, 210, 217, 227, 237, 239, 245, 251, 280, 281, 290, 291, 292, 294, 295, 297, 298, 302, 303, 306, 308, 309, 311, 313, 317, 319, 321, 325, 326, 327, 328, 333, 335, 336, 343, 348, 352, 355, 358, 364, 366, 367, 368, 370, 372, 373, 375, 376, 380, 386, 389, 390, 391, 393, 397, 399, 400], "freq": [2, 3, 4, 61, 83, 87, 107, 113, 147, 162, 168, 178, 187, 190, 227, 229, 230, 253, 275, 291, 311, 312, 328, 334, 377, 380, 389, 395], "loss": [2, 291, 312, 325, 326, 399, 400], "cgl": [2, 291, 325, 326, 399], "frequenc": [2, 4, 41, 42, 46, 50, 61, 66, 74, 76, 78, 83, 87, 107, 113, 114, 117, 137, 147, 162, 168, 178, 187, 190, 208, 225, 227, 229, 230, 253, 275, 291, 294, 295, 296, 297, 298, 303, 311, 312, 325, 326, 328, 334, 343, 344, 346, 348, 349, 350, 355, 372, 373, 375, 377, 380, 397, 399, 400], "offset": [2, 7, 41, 42, 49, 74, 76, 83, 137, 187, 192, 193, 201, 225, 226, 229, 230, 231, 234, 237, 238, 245, 246, 248, 251, 252, 275, 291, 311, 325, 326, 328, 345, 358, 368, 380, 395, 399, 400], "max_integration_tim": [2, 326, 400], "maximum": [2, 42, 45, 113, 168, 196, 197, 217, 313, 318, 325, 326, 340, 357, 364, 365, 367, 381, 395, 399, 400], "produc": [2, 61, 62, 108, 123, 131, 134, 136, 149, 156, 159, 161, 187, 253, 254, 255, 262, 275, 276, 286, 290, 313, 325, 326, 379, 397], "most": [2, 325, 326, 332, 374], "provid": [2, 41, 43, 52, 105, 192, 194, 204, 225, 237, 245, 247, 249, 251, 325, 326, 341, 342, 352, 383, 399], "max_frequency_offset": [2, 325, 400], "non_coherent_gain": [2, 279, 329, 337, 393, 400], "n_nc": [2, 95, 96, 97, 98, 99, 279, 315, 316, 327, 329, 330, 331, 337, 371, 393, 400], "n_": [2, 96, 97, 98, 99, 279, 315, 316, 327, 329, 330, 331, 337, 371, 393], "nc": [2, 96, 97, 98, 99, 279, 315, 316, 327, 329, 330, 331, 337, 371, 393], "sampl": [2, 3, 11, 12, 13, 41, 42, 45, 47, 53, 61, 62, 66, 73, 81, 83, 87, 96, 97, 98, 99, 107, 108, 111, 113, 114, 115, 117, 120, 137, 140, 143, 147, 168, 170, 175, 187, 188, 192, 193, 197, 199, 205, 210, 214, 225, 226, 227, 229, 230, 231, 233, 236, 237, 238, 245, 246, 251, 252, 253, 254, 258, 265, 275, 276, 277, 279, 281, 290, 303, 305, 308, 311, 313, 315, 316, 318, 327, 328, 329, 330, 331, 337, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 355, 356, 358, 364, 365, 367, 368, 369, 370, 371, 372, 373, 375, 380, 386, 389, 393, 394, 395, 397, 399, 400], "finit": [3, 18, 107, 123, 129, 149, 154, 399, 400], "impuls": [3, 8, 61, 83, 87, 107, 115, 147, 162, 170, 178, 187, 190, 227, 253, 275, 294, 295, 296, 297, 298, 299, 313, 343, 345, 364, 367, 397, 399, 400], "respons": [3, 8, 61, 83, 87, 107, 113, 115, 120, 147, 162, 168, 170, 175, 178, 187, 190, 227, 253, 275, 294, 295, 296, 297, 298, 299, 313, 342, 343, 344, 345, 346, 350, 356, 364, 367, 397, 399, 400], "design_lowpass_fir": [3, 113, 298, 400], "order": [3, 41, 42, 48, 61, 62, 63, 66, 83, 84, 87, 88, 100, 105, 107, 108, 116, 123, 124, 130, 131, 132, 133, 134, 135, 136, 137, 139, 142, 147, 149, 150, 155, 156, 157, 158, 159, 160, 161, 162, 171, 178, 187, 188, 190, 192, 193, 200, 208, 210, 225, 227, 237, 245, 246, 251, 252, 253, 254, 261, 263, 275, 276, 277, 281, 283, 286, 294, 295, 297, 298, 299, 304, 305, 307, 310, 311, 313, 317, 322, 324, 340, 342, 351, 364, 367, 368, 369, 376, 381, 391, 394, 395, 396, 400], "design": [3, 42, 61, 63, 65, 83, 84, 85, 147, 187, 188, 189, 193, 238, 246, 252, 275, 277, 278, 294, 295, 296, 297, 298, 299, 382, 399, 400], "lowpass": [3, 298], "us": [3, 8, 9, 16, 18, 21, 23, 28, 29, 31, 36, 37, 42, 61, 63, 65, 83, 84, 85, 86, 87, 88, 89, 107, 109, 112, 113, 118, 137, 139, 141, 147, 162, 163, 165, 168, 173, 178, 179, 187, 188, 189, 190, 191, 193, 196, 197, 208, 212, 217, 222, 223, 227, 228, 237, 238, 239, 242, 243, 245, 246, 251, 252, 253, 255, 259, 262, 266, 275, 277, 278, 279, 282, 285, 286, 289, 294, 295, 296, 297, 298, 299, 310, 317, 320, 322, 324, 325, 326, 327, 329, 332, 337, 340, 341, 342, 343, 345, 347, 348, 355, 356, 359, 374, 376, 382, 383, 384, 385, 390, 391, 393, 395, 396, 397, 399, 400, 401], "window": [3, 83, 87, 88, 113, 187, 275, 294, 295, 296, 297, 298, 299, 348, 355, 400], "method": [3, 8, 45, 65, 85, 179, 188, 189, 196, 197, 255, 259, 262, 277, 278, 294, 295, 296, 297, 298, 299, 348, 355, 390, 391, 400], "design_highpass_fir": [3, 297, 400], "highpass": [3, 297], "design_bandpass_fir": [3, 294, 400], "bandpass": [3, 294], "design_bandstop_fir": [3, 295, 400], "bandstop": [3, 295], "infinit": [3, 162, 178, 399, 400], "polyphasefir": [3, 61, 83, 187, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 275, 400], "gener": [3, 27, 35, 57, 60, 94, 225, 237, 245, 251, 253, 281, 284, 286, 287, 288, 302, 314, 324, 341, 353, 379, 382, 386, 393, 396, 400], "interpol": [3, 41, 54, 61, 83, 137, 187, 188, 189, 192, 207, 225, 237, 245, 251, 253, 255, 259, 260, 262, 275, 277, 299, 375, 394, 396, 399, 400], "decim": [3, 41, 42, 45, 47, 51, 61, 83, 84, 85, 86, 187, 192, 193, 196, 197, 198, 199, 203, 206, 225, 226, 237, 238, 245, 246, 250, 251, 252, 253, 255, 257, 259, 262, 275, 277, 299, 303, 324, 396, 399, 400], "ration": [3, 275, 277, 299, 400], "channel": [3, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 89, 90, 91, 92, 93, 94, 225, 237, 247, 249, 253, 255, 262, 282, 284, 285, 288, 289, 302, 339, 354, 399, 400], "design_multirate_fir": [3, 63, 84, 188, 277, 299, 400], "multir": [3, 61, 62, 83, 187, 275, 299, 361, 400], "kaiser": [3, 61, 63, 65, 83, 84, 85, 187, 188, 189, 275, 277, 278, 294, 295, 296, 297, 298, 299, 400], "polyphase_decompos": [3, 361, 400], "branch": [3, 61, 83, 187, 253, 255, 256, 264, 267, 275, 361, 383, 384], "tap": [3, 18, 61, 63, 83, 84, 87, 107, 122, 123, 124, 135, 136, 137, 146, 147, 149, 150, 160, 161, 162, 166, 167, 178, 187, 188, 190, 227, 253, 255, 261, 263, 264, 267, 275, 277, 286, 361, 390, 391], "decompos": [3, 61, 83, 187, 275, 361], "prototyp": [3, 61, 63, 83, 84, 187, 188, 253, 254, 255, 261, 264, 267, 275, 276, 277, 361, 400], "matrix": [3, 39, 89, 90, 94, 302, 361], "h_i": [3, 61, 83, 187, 253, 263, 264, 267, 275, 361, 390], "b": [3, 61, 83, 162, 165, 187, 253, 255, 256, 261, 263, 264, 267, 275, 279, 282, 313, 320, 343, 345, 356, 361, 382, 383, 391, 397], "phase": [3, 8, 41, 42, 46, 49, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 107, 117, 147, 187, 192, 193, 201, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 275, 279, 311, 321, 324, 328, 342, 349, 350, 351, 361, 380, 386, 392, 393, 398, 399, 400], "movingaverag": [3, 190, 227, 228, 400], "move": [3, 190, 191, 227, 228, 399, 400], "averag": [3, 5, 100, 190, 191, 217, 222, 223, 225, 227, 228, 237, 239, 242, 243, 251, 280, 281, 282, 310, 333, 348, 392, 399, 400], "differenti": [3, 7, 87, 88, 225, 247, 249, 300, 301, 358, 399, 400], "integr": [3, 66, 71, 96, 97, 98, 99, 178, 179, 190, 191, 208, 210, 213, 227, 279, 290, 291, 315, 316, 325, 326, 327, 329, 330, 331, 337, 371, 381, 385, 387, 391, 399, 400], "leakyintegr": [3, 190, 191, 227, 400], "leaki": [3, 190, 191, 227, 399, 400], "farrowresampl": [3, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 389, 400], "piecewis": [3, 137, 139, 142], "polynomi": [3, 19, 126, 127, 128, 131, 137, 139, 142, 151, 152, 153, 156, 286, 322, 324, 379, 400], "farrow": [3, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 388, 399, 400], "fractionaldelai": [3, 147, 148, 400], "fraction": [3, 61, 83, 137, 143, 147, 148, 187, 253, 265, 275, 296, 313, 389, 399, 400], "delai": [3, 8, 61, 62, 83, 87, 107, 108, 111, 114, 117, 137, 140, 147, 148, 187, 208, 227, 229, 253, 254, 258, 275, 276, 296, 300, 301, 318, 344, 349, 365, 395, 399, 400], "design_frac_delay_fir": [3, 296, 400], "length": [3, 8, 42, 45, 47, 61, 62, 63, 83, 84, 87, 88, 98, 107, 108, 110, 115, 120, 122, 147, 148, 164, 180, 183, 184, 187, 188, 191, 193, 197, 199, 226, 227, 228, 238, 246, 252, 253, 254, 275, 276, 277, 283, 287, 290, 291, 294, 295, 296, 297, 298, 299, 313, 314, 317, 318, 322, 324, 329, 343, 345, 348, 352, 355, 356, 364, 365, 367, 372, 376, 378, 383, 389, 394, 397, 400], "mix": [3, 61, 328, 399, 400], "domain": [3, 5, 280, 281, 292, 294, 295, 297, 298, 303, 306, 309, 311, 319, 321, 328, 333, 335, 336, 343, 348, 352, 355, 358, 366, 368, 372, 373, 375, 380, 386, 393, 399, 400], "complex": [3, 5, 8, 41, 42, 45, 47, 61, 66, 83, 87, 95, 96, 97, 98, 99, 107, 113, 147, 162, 168, 178, 187, 190, 192, 193, 196, 197, 198, 199, 206, 217, 220, 225, 226, 227, 229, 230, 236, 237, 238, 239, 240, 245, 246, 250, 251, 252, 253, 270, 271, 272, 273, 274, 275, 281, 282, 303, 310, 315, 316, 321, 327, 328, 329, 330, 331, 340, 342, 344, 346, 348, 349, 350, 355, 357, 358, 371, 372, 373, 375, 380, 386, 389, 390, 391, 393, 395, 396, 399, 400], "exponenti": [3, 61, 230, 303, 328, 372, 373, 375, 389, 390, 391, 400], "real": [3, 96, 97, 99, 268, 269, 271, 272, 274, 281, 315, 316, 327, 328, 329, 330, 331, 344, 346, 348, 349, 350, 352, 355, 358, 371, 372, 373, 386, 390, 391, 393, 395, 399, 400], "sinusoid": [3, 245, 281, 328, 372, 373, 391, 400], "to_complex_bb": [3, 372, 400], "x_r": [3, 372, 373], "complex128": [3, 8, 9, 10, 41, 47, 61, 83, 87, 107, 113, 147, 162, 168, 178, 187, 190, 192, 196, 197, 198, 199, 206, 225, 227, 229, 230, 236, 237, 239, 240, 245, 250, 251, 253, 275, 340, 357, 372, 373, 378, 379], "passband": [3, 147, 294, 295, 296, 297, 298, 313, 318, 364, 365, 367, 372, 373, 394, 400], "baseband": [3, 8, 66, 225, 237, 245, 251, 328, 342, 351, 372, 373, 394, 395, 400], "to_real_pb": [3, 373, 394, 400], "x_c": [3, 372, 373], "upsampl": [3, 187, 275, 375, 400], "rate": [3, 5, 8, 9, 11, 12, 13, 41, 42, 43, 46, 52, 61, 62, 63, 66, 73, 81, 83, 84, 100, 101, 102, 104, 105, 113, 114, 117, 137, 138, 140, 141, 168, 187, 188, 192, 194, 204, 225, 237, 245, 247, 249, 251, 253, 254, 257, 260, 265, 275, 276, 277, 290, 299, 303, 304, 305, 307, 311, 328, 329, 339, 342, 343, 344, 346, 348, 349, 350, 351, 352, 354, 355, 358, 368, 369, 372, 373, 375, 380, 386, 393, 399, 400], "factor": [3, 5, 66, 73, 82, 190, 191, 193, 208, 210, 211, 238, 246, 252, 292, 303, 375, 395], "r": [3, 9, 39, 40, 61, 83, 137, 138, 140, 141, 187, 253, 254, 265, 275, 276, 282, 303, 304, 305, 307, 310, 313, 328, 364, 367, 369, 372, 373, 375, 382, 383, 384, 385, 391, 394, 395, 397], "insert": [3, 187, 275, 375], "zero": [3, 8, 61, 83, 87, 107, 112, 137, 141, 143, 147, 148, 162, 163, 168, 177, 178, 187, 188, 190, 208, 227, 230, 253, 275, 277, 291, 296, 317, 318, 332, 343, 344, 345, 346, 349, 350, 356, 360, 365, 372, 375, 376, 390, 394, 395, 397, 399, 400], "between": [3, 5, 11, 17, 63, 83, 84, 88, 89, 109, 121, 139, 145, 163, 165, 176, 179, 187, 188, 191, 228, 239, 255, 275, 277, 279, 291, 309, 312, 319, 348, 352, 355, 375, 395, 399], "each": [3, 61, 62, 63, 83, 84, 108, 187, 188, 253, 254, 255, 259, 262, 263, 275, 276, 277, 299, 310, 320, 324, 330, 348, 352, 355, 375], "downsampl": [3, 61, 83, 275, 303, 400], "discard": [3, 61, 83, 275, 303], "everi": [3, 61, 83, 100, 275, 303, 389], "bsc_capac": [4, 289, 400], "p": [4, 6, 23, 27, 28, 30, 31, 35, 36, 38, 61, 83, 89, 90, 94, 123, 149, 187, 188, 229, 230, 253, 260, 265, 268, 269, 275, 277, 284, 285, 286, 288, 289, 299, 302, 380], "calcul": [4, 5, 23, 28, 31, 36, 282, 285, 289, 310, 312, 325, 326, 334, 377, 386, 393, 400], "binari": [4, 6, 23, 26, 27, 31, 34, 35, 42, 89, 226, 238, 246, 250, 252, 283, 284, 285, 287, 288, 289, 302, 317, 322, 332, 357, 374, 376, 379, 380, 396, 399, 400], "symmetr": [4, 31, 35, 89, 288, 289, 302, 372, 373, 380, 399], "bsc": [4, 31, 32, 33, 35, 36, 38, 89, 288, 289, 302, 380, 399, 400], "bec_capac": [4, 285, 400], "erasur": [4, 23, 25, 26, 27, 30, 89, 284, 285, 302, 380, 399], "bec": [4, 23, 24, 25, 27, 28, 30, 89, 284, 285, 302, 380, 399, 400], "awgn_capac": [4, 282, 400], "white": [4, 281, 282, 380, 386, 393, 399], "gaussian": [4, 7, 87, 178, 190, 227, 281, 282, 313, 380, 386, 393, 399, 400], "awgn": [4, 225, 237, 245, 247, 249, 251, 281, 282, 310, 339, 340, 354, 372, 373, 380, 396, 399, 400], "fspl": [4, 312], "distanc": [4, 309, 312, 319, 399, 400], "free": [4, 225, 237, 245, 251, 312, 399], "space": [4, 61, 113, 168, 291, 312, 399], "wavelength": [4, 377, 400], "lambda": [4, 312, 377, 386, 393], "electromagnet": [4, 377], "wave": [4, 137, 225, 377], "f": [4, 19, 42, 46, 61, 74, 76, 83, 87, 98, 113, 114, 117, 123, 126, 127, 128, 147, 149, 151, 152, 153, 168, 178, 187, 229, 230, 275, 281, 291, 311, 312, 313, 325, 326, 328, 329, 330, 334, 364, 367, 368, 377, 378, 383, 386, 389, 390, 391, 393, 394, 395, 396, 397], "parabolic_antenna": [4, 334, 400], "tupl": [4, 61, 83, 87, 88, 95, 98, 100, 102, 105, 107, 113, 114, 117, 147, 162, 168, 178, 187, 190, 192, 196, 197, 217, 222, 223, 225, 227, 237, 239, 242, 243, 245, 251, 253, 270, 273, 275, 280, 306, 309, 319, 322, 333, 334, 335, 340, 343, 344, 345, 346, 349, 350, 356, 357, 360], "g": [4, 105, 334, 384], "beamwidth": [4, 334], "theta": [4, 229, 231, 234, 334], "parabol": [4, 334], "reflector": [4, 334], "peak_pow": [5, 333, 335, 400], "peak": [5, 225, 237, 251, 292, 310, 333, 335, 336, 392], "average_pow": [5, 280, 333, 400], "papr": [5, 225, 237, 251, 333, 394, 400], "peak_voltag": [5, 292, 336, 400], "bool": [5, 9, 11, 17, 61, 63, 83, 84, 87, 88, 96, 97, 98, 99, 107, 109, 113, 121, 137, 139, 145, 147, 162, 163, 165, 168, 176, 178, 179, 187, 188, 190, 191, 225, 227, 228, 237, 245, 247, 249, 251, 253, 255, 271, 272, 273, 274, 275, 277, 280, 306, 315, 316, 327, 328, 329, 330, 331, 335, 336, 340, 341, 342, 350, 352, 357, 358, 366, 371], "rms_voltag": [5, 292, 366, 400], "root": [5, 7, 193, 238, 246, 252, 310, 342, 358, 366, 367, 378, 379, 390, 399], "mean": [5, 310, 348, 355, 366, 386, 393, 397], "squar": [5, 7, 193, 238, 246, 252, 279, 310, 312, 315, 316, 327, 329, 330, 331, 334, 337, 342, 358, 366, 367, 371, 390, 400], "rm": [5, 217, 218, 219, 221, 292, 310, 366], "crest_factor": [5, 292, 333, 400], "crest": [5, 292], "euclidean": [5, 309, 399, 400], "y": [5, 7, 9, 10, 18, 20, 22, 23, 25, 26, 31, 33, 34, 39, 56, 61, 83, 87, 89, 92, 93, 94, 107, 108, 112, 123, 125, 137, 138, 141, 149, 162, 164, 178, 180, 183, 184, 187, 190, 208, 209, 229, 230, 236, 253, 254, 255, 262, 275, 276, 281, 284, 286, 288, 290, 300, 301, 302, 303, 309, 311, 319, 321, 328, 329, 340, 346, 348, 355, 357, 368, 375, 379, 395, 396], "two": [5, 9, 190, 227, 237, 245, 251, 291, 294, 295, 309, 319, 343, 344, 346, 348, 349, 350, 355, 378, 386, 389, 390, 391, 393], "ham": [5, 113, 294, 295, 297, 298, 319, 399, 400], "int_": [5, 6, 7, 18, 20, 22, 23, 24, 25, 31, 32, 33, 39, 41, 45, 89, 91, 92, 123, 125, 180, 181, 185, 186, 192, 196, 197, 225, 237, 245, 251, 284, 287, 288, 300, 301, 302, 314, 319, 332, 374, 379, 380], "errorr": [5, 100, 101, 102, 103, 104, 105, 106, 396, 400], "A": [5, 9, 39, 42, 55, 62, 66, 74, 76, 77, 78, 79, 80, 82, 87, 100, 107, 108, 113, 123, 124, 137, 149, 150, 168, 178, 190, 193, 208, 217, 227, 238, 239, 246, 252, 254, 276, 279, 286, 287, 294, 295, 297, 298, 314, 315, 316, 320, 321, 327, 329, 330, 331, 334, 340, 342, 352, 364, 367, 371, 380, 381, 383, 386, 393, 395], "bit": [5, 6, 8, 23, 28, 29, 31, 36, 37, 41, 42, 43, 44, 55, 58, 59, 89, 100, 102, 105, 192, 194, 195, 225, 226, 237, 238, 245, 246, 247, 250, 251, 252, 282, 284, 285, 288, 289, 304, 305, 307, 320, 332, 339, 369, 374, 399, 400], "error": [5, 8, 11, 12, 13, 31, 41, 43, 52, 66, 72, 73, 79, 100, 101, 102, 104, 105, 106, 192, 194, 204, 208, 210, 217, 220, 222, 223, 224, 225, 237, 239, 240, 242, 243, 244, 245, 247, 249, 251, 279, 289, 310, 337, 339, 354, 383, 395, 399, 400], "ber": [5, 8, 41, 43, 100, 192, 194, 225, 237, 245, 247, 251, 339, 396, 399, 400], "symbol": [5, 8, 41, 42, 44, 45, 46, 47, 52, 53, 100, 102, 105, 123, 125, 134, 149, 159, 187, 192, 193, 195, 196, 197, 198, 199, 204, 205, 206, 217, 220, 225, 226, 237, 238, 239, 240, 245, 246, 247, 249, 250, 251, 252, 281, 286, 304, 305, 307, 308, 310, 311, 313, 318, 340, 342, 351, 354, 357, 358, 364, 365, 367, 369, 370, 394, 395, 397, 399, 400], "ser": [5, 8, 41, 52, 100, 192, 204, 225, 237, 245, 249, 251, 354, 396, 399, 400], "evm": [5, 310, 399, 400], "x_hat": [5, 8, 100, 102, 310, 340, 396], "ref": [5, 217, 219, 221, 279, 294, 295, 296, 297, 298, 299, 310, 313, 317, 376], "vector": [5, 18, 19, 100, 113, 123, 124, 126, 130, 132, 133, 143, 149, 150, 151, 155, 157, 158, 168, 294, 295, 297, 298, 310, 348, 355, 399, 400], "magnitud": [5, 8, 9, 11, 15, 87, 147, 178, 190, 227, 296, 310, 343, 346, 378, 399, 400], "hat": [5, 8, 41, 45, 102, 192, 196, 197, 217, 220, 225, 237, 239, 240, 245, 251, 310, 340, 357], "k": [5, 7, 8, 18, 41, 42, 44, 45, 47, 48, 61, 87, 102, 123, 149, 178, 192, 193, 195, 196, 197, 198, 199, 200, 217, 220, 225, 237, 239, 240, 245, 246, 251, 252, 279, 300, 301, 304, 305, 307, 310, 322, 329, 337, 340, 357, 358, 369, 386, 393, 394, 397], "q": [6, 61, 83, 84, 187, 225, 237, 253, 257, 265, 268, 269, 270, 271, 272, 274, 275, 277, 299, 324, 378, 400], "ccdf": [6, 268, 269], "standard": [6, 268, 269, 386, 393, 400], "normal": [6, 42, 66, 68, 73, 208, 210, 214, 268, 269, 294, 295, 297, 298, 310, 313, 315, 316, 318, 343, 344, 346, 348, 349, 350, 355, 364, 365, 367, 386, 393, 395, 397], "qinv": [6, 268, 269, 400], "invers": [6, 61, 269, 325, 326], "pack": [6, 100, 102, 225, 237, 245, 251, 320, 332, 399, 400], "bpe": [6, 332, 374], "arrai": [6, 18, 23, 31, 39, 42, 62, 89, 100, 113, 134, 159, 168, 180, 188, 193, 225, 226, 229, 237, 238, 245, 246, 250, 251, 252, 261, 263, 264, 267, 277, 280, 283, 284, 287, 288, 291, 300, 301, 302, 306, 309, 314, 317, 319, 322, 324, 325, 326, 332, 333, 335, 358, 361, 374, 376, 391, 395], "multipl": [6, 113, 168, 183, 184, 332, 374, 396, 400], "element": [6, 40, 181, 320, 332, 374, 395], "unpack": [6, 100, 102, 320, 374, 396, 399, 400], "hexdump": [6, 100, 320, 399, 400], "byte": [6, 320], "width": [6, 147, 296, 320], "16": [6, 123, 137, 147, 149, 180, 225, 237, 245, 247, 249, 250, 251, 296, 304, 305, 307, 315, 316, 317, 320, 330, 339, 354, 361, 364, 367, 369, 370, 376, 394], "str": [6, 88, 320, 342, 348, 351, 352, 355], "return": [6, 7, 10, 20, 22, 26, 28, 34, 36, 43, 45, 47, 52, 56, 58, 61, 62, 66, 74, 76, 79, 80, 83, 87, 93, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 114, 115, 117, 120, 124, 125, 134, 136, 138, 141, 147, 150, 159, 161, 162, 164, 168, 170, 175, 178, 183, 184, 187, 190, 194, 196, 197, 198, 199, 204, 209, 220, 222, 223, 227, 230, 236, 240, 242, 243, 247, 249, 253, 254, 268, 269, 271, 272, 273, 274, 275, 276, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 386, 390, 391, 393, 394, 396, 400], "specifi": [6, 19, 100, 103, 104, 106, 123, 126, 132, 149, 151, 157, 217, 222, 223, 239, 242, 243, 281, 282, 302, 320, 382, 390, 391, 400], "linearmodul": [7, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 222, 223, 242, 243, 245, 357, 400], "amplitud": [7, 61, 192, 193, 217, 218, 219, 221, 321, 380, 386, 393, 395], "map": [7, 8, 39, 180, 181, 185, 186, 192, 193, 198, 206, 225, 229, 237, 245, 250, 251, 310, 357, 399, 400], "psk": [7, 217, 237, 239, 245, 246, 247, 248, 249, 250, 251, 252, 281, 310, 311, 321, 339, 340, 342, 354, 357, 358, 368, 394, 395, 399, 400], "shift": [7, 123, 124, 135, 149, 150, 160, 225, 237, 245, 247, 248, 249, 250, 251, 286, 324, 378, 379, 390, 391, 392, 399, 400], "kei": [7, 225, 237, 245, 247, 248, 249, 250, 251, 392, 399, 400], "demodul": [7, 41, 45, 192, 197, 225, 237, 245, 251, 400], "pimpsk": [7, 251, 252, 400], "pi": [7, 9, 39, 42, 46, 61, 83, 87, 137, 168, 178, 180, 181, 185, 186, 187, 217, 229, 237, 239, 245, 251, 252, 275, 281, 291, 303, 312, 313, 321, 328, 334, 343, 344, 345, 346, 349, 350, 356, 360, 364, 367, 372, 373, 375, 378, 389, 390, 391, 395, 399, 400], "m": [7, 41, 42, 44, 45, 47, 48, 61, 83, 94, 123, 149, 162, 165, 167, 178, 187, 190, 192, 193, 195, 196, 197, 198, 199, 200, 206, 217, 225, 237, 239, 245, 246, 250, 251, 252, 253, 261, 263, 275, 286, 290, 291, 302, 304, 305, 307, 312, 322, 324, 325, 326, 329, 357, 369, 379, 382, 383, 384, 385, 386, 393, 399, 400], "oqpsk": [7, 225, 237, 238, 400], "quadratur": [7, 237, 321, 342], "cpm": [7, 8, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 351, 399, 400], "msk": [7, 225, 226, 351, 399, 400], "rectangular": [7, 42, 179, 193, 238, 246, 252, 365, 394, 397, 399, 400], "span": [7, 8, 42, 193, 238, 246, 252, 313, 318, 342, 351, 364, 365, 367, 394, 397, 400], "half_sin": [7, 226, 318, 400], "half": [7, 225, 237, 318, 334, 399, 400], "sine": [7, 137, 225, 230, 318, 399, 400], "raised_cosin": [7, 193, 238, 246, 252, 364, 397, 400], "alpha": [7, 9, 11, 12, 61, 190, 191, 193, 238, 246, 252, 313, 359, 364, 367, 394, 397], "rais": [7, 87, 178, 193, 238, 246, 252, 342, 358, 364, 367, 390, 399], "cosin": [7, 87, 178, 193, 230, 238, 246, 252, 342, 358, 364, 367, 390, 399, 400], "rc": [7, 193, 237, 238, 245, 246, 251, 252, 342, 364], "root_raised_cosin": [7, 87, 178, 193, 238, 246, 252, 343, 344, 345, 346, 349, 350, 356, 360, 367, 390, 394, 396, 397, 400], "srrc": [7, 193, 237, 238, 245, 246, 251, 252, 342, 358, 367, 394, 396], "diff_encod": [7, 225, 237, 245, 247, 249, 251, 300, 301, 400], "y_prev": [7, 300, 301], "input": [7, 9, 10, 18, 20, 22, 23, 24, 26, 31, 32, 34, 39, 40, 55, 56, 61, 62, 63, 66, 74, 76, 79, 80, 83, 84, 87, 88, 89, 91, 93, 94, 107, 108, 109, 115, 119, 120, 123, 125, 137, 138, 139, 140, 143, 144, 147, 162, 163, 164, 165, 170, 175, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 190, 191, 208, 209, 227, 228, 229, 230, 237, 245, 247, 249, 251, 253, 254, 255, 258, 259, 268, 275, 276, 277, 281, 282, 284, 285, 288, 289, 293, 300, 301, 302, 303, 315, 316, 323, 327, 329, 330, 331, 332, 338, 345, 356, 362, 363, 371, 374, 375, 380, 390, 391, 393, 395, 400], "data": [7, 217, 222, 239, 242, 300, 301, 320, 332, 358, 374, 399], "diff_decod": [7, 300, 301, 400], "decod": [7, 286, 300], "use_styl": [8, 359, 386, 389, 390, 391, 393, 394, 395, 396, 397], "appli": [8, 45, 61, 83, 88, 187, 193, 225, 237, 245, 251, 275, 311, 321, 340, 342, 345, 348, 355, 357, 358, 359, 368, 380, 399], "default": [8, 19, 42, 115, 120, 124, 126, 132, 134, 150, 151, 157, 159, 226, 238, 246, 250, 252, 280, 283, 286, 306, 309, 317, 319, 322, 324, 333, 335, 340, 344, 346, 348, 349, 350, 352, 355, 357, 359, 376, 396, 400], "matplotlib": [8, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 386, 389, 390, 391, 393, 394, 395, 396, 397, 399], "rcparam": [8, 359], "time_domain": [8, 9, 83, 87, 137, 178, 187, 190, 225, 227, 229, 237, 245, 251, 275, 281, 283, 303, 317, 322, 328, 358, 372, 373, 375, 376, 378, 386, 389, 393, 394, 395, 396, 397, 400], "ani": [8, 23, 26, 31, 34, 61, 83, 87, 89, 93, 107, 113, 147, 162, 168, 178, 187, 190, 227, 229, 230, 253, 275, 283, 293, 303, 317, 322, 323, 324, 329, 358, 375, 376, 379, 385], "dtype": [8, 23, 26, 31, 34, 61, 83, 87, 89, 93, 107, 113, 147, 162, 168, 178, 187, 190, 225, 227, 229, 230, 237, 245, 251, 253, 275, 283, 317, 322, 324, 332, 358, 374, 376, 379, 395], "_scalartype_co": [8, 358], "t": [8, 18, 66, 68, 73, 95, 123, 124, 135, 149, 150, 160, 208, 210, 214, 270, 286, 291, 313, 315, 316, 320, 325, 327, 329, 330, 331, 358, 364, 367, 371, 382, 389, 400], "raster": [8, 342, 351, 352, 399, 400], "none": [8, 18, 19, 23, 27, 31, 35, 41, 43, 55, 57, 60, 61, 83, 87, 88, 89, 94, 98, 107, 113, 115, 120, 123, 124, 126, 132, 137, 143, 147, 149, 150, 151, 157, 168, 187, 193, 208, 216, 227, 230, 238, 246, 252, 253, 273, 275, 279, 280, 281, 282, 284, 288, 294, 295, 297, 298, 302, 306, 309, 315, 316, 319, 322, 324, 327, 330, 331, 332, 333, 335, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 355, 356, 357, 358, 371, 374, 380, 386, 389, 393, 394, 396], "periodogram": [8, 61, 303, 348, 372, 373, 375, 394, 399, 400], "power": [8, 225, 237, 245, 251, 280, 281, 282, 293, 310, 313, 315, 316, 317, 318, 323, 333, 334, 335, 348, 364, 365, 367, 376, 386, 392, 393, 397, 399], "densiti": [8, 79, 315, 316, 330, 331, 341, 342, 348, 371, 386, 393, 394, 397], "xx": [8, 18, 348], "welch": [8, 348, 355], "spectrogram": [8, 355, 399, 400], "constel": [8, 225, 237, 245, 248, 251, 281, 310, 311, 321, 340, 368, 378, 399, 400], "symbol_map": [8, 192, 193, 206, 225, 237, 245, 248, 250, 251, 310, 357, 396, 400], "ey": [8, 225, 237, 245, 251, 342, 399, 400], "2": [8, 9, 18, 19, 23, 31, 39, 41, 42, 48, 61, 62, 66, 74, 76, 79, 83, 87, 89, 95, 96, 97, 98, 99, 100, 107, 111, 113, 114, 117, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 147, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 168, 178, 180, 187, 190, 191, 192, 193, 200, 217, 225, 227, 229, 237, 238, 239, 245, 246, 247, 248, 249, 250, 251, 252, 253, 261, 263, 264, 267, 268, 269, 270, 271, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 382, 385, 386, 389, 390, 391, 393, 394, 395, 396, 397], "diagram": [8, 9, 18, 61, 66, 83, 107, 187, 190, 208, 225, 229, 237, 245, 251, 275, 300, 301, 342, 399, 400], "phase_tre": [8, 225, 351, 400], "tree": [8, 351, 399, 400], "continu": [8, 41, 42, 178, 225, 351, 389, 399, 400], "function": [8, 66, 75, 87, 107, 147, 162, 163, 190, 208, 229, 268, 269, 279, 282, 286, 290, 291, 303, 313, 315, 316, 317, 325, 326, 329, 330, 331, 337, 339, 340, 341, 342, 347, 348, 352, 353, 354, 355, 364, 367, 371, 375, 376, 390, 391, 395, 397, 399, 400], "receiv": [8, 9, 41, 45, 51, 95, 96, 98, 100, 102, 192, 196, 197, 203, 217, 218, 220, 221, 225, 237, 239, 240, 245, 247, 249, 251, 270, 271, 272, 273, 274, 310, 312, 330, 342, 347, 353, 399, 400], "enr": [8, 270, 271, 273, 347], "roc": [8, 95, 98, 270, 273, 330, 353, 399, 400], "oper": [8, 11, 95, 98, 270, 273, 330, 353, 395, 399, 400], "characterist": [8, 19, 95, 98, 123, 126, 127, 128, 149, 151, 152, 153, 270, 273, 286, 324, 330, 353, 399, 400], "curv": [8, 95, 98, 247, 249, 270, 273, 279, 337, 339, 353, 354, 400], "detector_pdf": [8, 315, 316, 330, 331, 341, 371], "pdf": [8, 330, 331, 341, 371, 386, 393, 399], "detector": [8, 31, 66, 72, 73, 95, 210, 217, 224, 239, 244, 270, 279, 315, 316, 327, 329, 330, 331, 337, 341, 371, 395, 399, 400], "impulse_respons": [8, 61, 83, 87, 107, 115, 147, 162, 170, 178, 187, 190, 227, 253, 275, 294, 295, 296, 297, 298, 299, 313, 318, 345, 364, 365, 367, 390, 391, 397, 400], "step_respons": [8, 61, 83, 87, 107, 120, 147, 162, 175, 178, 187, 190, 227, 253, 275, 356, 390, 391, 395, 400], "step": [8, 61, 83, 87, 107, 120, 123, 130, 132, 133, 134, 136, 147, 149, 155, 157, 158, 159, 161, 162, 175, 178, 187, 190, 227, 229, 230, 236, 253, 275, 286, 315, 316, 356, 386, 393, 399], "zeros_pol": [8, 360, 391, 400], "pole": [8, 162, 163, 168, 172, 178, 190, 343, 344, 345, 346, 349, 350, 356, 360, 390, 399], "magnitude_respons": [8, 87, 113, 147, 168, 178, 190, 227, 294, 295, 296, 297, 298, 299, 313, 318, 346, 364, 365, 367, 390, 391, 395, 397, 400], "omega": [8, 61, 83, 87, 107, 113, 114, 117, 137, 147, 162, 168, 178, 187, 190, 227, 229, 231, 233, 253, 275, 343, 344, 346, 349, 350, 395], "phase_respons": [8, 113, 168, 350, 400], "angl": [8, 239, 350, 395], "phase_delai": [8, 61, 83, 87, 107, 117, 147, 187, 227, 253, 275, 349, 400], "tau_": [8, 61, 83, 87, 107, 117, 147, 187, 227, 253, 275, 349], "phi": [8, 41, 42, 49, 61, 83, 87, 107, 117, 147, 187, 192, 193, 201, 225, 226, 227, 237, 238, 245, 246, 248, 251, 252, 253, 275, 311, 321, 328, 349], "group_delai": [8, 61, 83, 87, 107, 114, 147, 187, 227, 253, 275, 296, 344, 390, 391, 400], "group": [8, 61, 83, 87, 107, 114, 147, 187, 227, 253, 275, 296, 344, 399], "tau_g": [8, 61, 83, 87, 107, 114, 147, 187, 227, 253, 275, 344], "iir": [8, 66, 75, 115, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 190, 191, 208, 212, 227, 343, 344, 345, 346, 349, 350, 356, 360, 388, 390, 395, 399, 400], "agc": [9, 10, 11, 12, 13, 14, 15, 16, 17, 217, 381, 399, 400], "automat": [9, 10, 11, 217, 341, 381, 399, 400], "control": [9, 10, 11, 66, 217, 229, 231, 364, 367, 395, 399, 400], "note": [9, 18, 23, 31, 39, 61, 83, 87, 89, 95, 96, 97, 99, 107, 123, 127, 128, 147, 149, 152, 153, 162, 178, 187, 190, 208, 217, 227, 229, 239, 253, 259, 262, 264, 267, 270, 271, 272, 274, 275, 279, 281, 282, 285, 286, 289, 290, 291, 296, 300, 301, 313, 321, 325, 326, 329, 334, 337, 342, 361, 364, 367, 378], "exp": [9, 61, 168, 229, 230, 237, 245, 251, 303, 313, 321, 328, 343, 344, 345, 346, 349, 350, 356, 360, 373, 375, 378, 389, 391, 395], "z": [9, 66, 107, 162, 178, 190, 208, 229, 286, 300, 301, 378, 390, 391, 395], "log": [9, 343, 344, 346, 348, 349, 350, 352, 390, 391, 395], "beta": [9, 11, 13], "output": [9, 10, 11, 15, 18, 20, 22, 23, 25, 26, 31, 33, 34, 39, 40, 56, 61, 62, 83, 89, 92, 93, 94, 108, 115, 120, 123, 125, 134, 136, 137, 140, 149, 159, 161, 163, 165, 170, 175, 179, 181, 185, 186, 187, 188, 190, 191, 197, 208, 209, 227, 229, 230, 236, 253, 254, 255, 258, 262, 265, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 301, 302, 310, 317, 322, 323, 324, 329, 332, 337, 345, 356, 374, 376, 379, 382, 389, 390, 391, 393, 395, 400], "attack": [9, 11, 12], "decai": [9, 11, 13, 389, 391], "refer": [9, 11, 15, 18, 23, 31, 61, 66, 74, 76, 77, 78, 79, 80, 83, 87, 89, 95, 96, 97, 99, 100, 123, 137, 149, 187, 208, 217, 219, 220, 221, 239, 240, 247, 249, 270, 271, 272, 274, 275, 279, 281, 286, 291, 292, 294, 295, 296, 297, 298, 299, 310, 311, 313, 317, 322, 324, 329, 333, 337, 361, 364, 367, 368, 376, 378, 391, 393, 397, 399], "adder": [9, 18, 83, 123, 149, 208, 229, 300, 301, 395], "multipli": [9, 66, 87, 187, 275], "michael": [9, 66, 74, 76, 77, 78, 79, 80, 87, 137, 208, 217, 239, 364, 367], "rice": [9, 66, 74, 76, 77, 78, 79, 80, 87, 137, 208, 217, 239, 364, 367], "digit": [9, 23, 31, 66, 74, 76, 77, 78, 79, 80, 87, 89, 137, 208, 217, 239, 247, 249, 364, 367, 395, 399, 400], "commun": [9, 23, 31, 61, 66, 74, 76, 77, 78, 79, 80, 83, 87, 89, 137, 187, 208, 217, 239, 247, 249, 275, 299, 361, 364, 367, 395, 399], "discret": [9, 61, 66, 74, 76, 77, 78, 79, 80, 87, 89, 94, 137, 178, 190, 208, 217, 227, 239, 281, 302, 308, 364, 367, 370, 380, 389, 395, 399, 400], "approach": [9, 23, 31, 66, 74, 76, 77, 78, 79, 80, 87, 137, 208, 217, 239, 282, 285, 289, 364, 367, 395], "section": [9, 87, 95, 102, 103, 104, 105, 106, 137, 217, 239, 270, 391, 395], "9": [9, 39, 61, 83, 89, 113, 123, 132, 134, 137, 147, 149, 157, 159, 168, 180, 187, 225, 237, 245, 251, 253, 261, 263, 264, 267, 271, 275, 279, 286, 287, 291, 302, 310, 314, 315, 316, 317, 320, 322, 327, 329, 330, 331, 361, 364, 367, 371, 376, 378, 391, 393, 394, 396, 397], "5": [9, 18, 23, 31, 39, 41, 42, 61, 83, 87, 89, 95, 96, 97, 98, 99, 100, 113, 123, 124, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 147, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 161, 178, 180, 187, 190, 217, 225, 227, 229, 237, 245, 251, 253, 261, 263, 264, 267, 271, 273, 275, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 298, 302, 303, 304, 305, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 324, 325, 326, 327, 329, 330, 331, 334, 337, 338, 341, 342, 343, 344, 345, 346, 349, 350, 356, 358, 360, 361, 364, 367, 368, 369, 370, 371, 372, 373, 375, 376, 378, 382, 390, 391, 394, 395, 397], "qasim": [9, 137], "chaudhari": [9, 137], "how": [9, 313, 315, 316, 318, 327, 329, 330, 331, 342, 351, 352, 358, 364, 365, 367, 371, 376, 385], "work": 9, "exampl": [9, 18, 23, 31, 39, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 187, 190, 191, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 245, 247, 248, 249, 250, 251, 261, 263, 264, 266, 267, 268, 269, 271, 273, 275, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 386, 393, 395, 400], "creat": [9, 11, 18, 19, 23, 27, 31, 35, 39, 40, 41, 42, 55, 57, 61, 63, 66, 73, 83, 84, 87, 88, 89, 94, 100, 101, 107, 109, 123, 124, 126, 132, 136, 137, 139, 147, 148, 149, 150, 151, 157, 161, 162, 163, 165, 178, 179, 180, 181, 187, 188, 190, 191, 192, 193, 208, 210, 225, 226, 227, 228, 229, 231, 237, 238, 245, 246, 248, 251, 252, 253, 255, 275, 277, 281, 283, 310, 311, 317, 322, 328, 368, 372, 373, 376, 378, 389, 395, 397], "bursti": 9, "surround": 9, "In": [9, 11, 17, 18, 23, 31, 39, 61, 62, 63, 83, 84, 87, 88, 89, 96, 98, 100, 108, 109, 113, 121, 123, 124, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 139, 145, 147, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 161, 163, 165, 168, 176, 178, 179, 180, 187, 188, 190, 191, 217, 225, 227, 228, 229, 237, 239, 245, 247, 248, 249, 250, 251, 254, 255, 261, 263, 264, 267, 268, 269, 271, 273, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 386, 389, 393, 396], "np": [9, 18, 23, 24, 25, 31, 32, 33, 39, 61, 83, 87, 89, 90, 91, 92, 96, 98, 113, 137, 147, 168, 178, 180, 185, 186, 187, 190, 192, 202, 206, 225, 227, 229, 237, 245, 247, 249, 250, 251, 261, 263, 264, 267, 271, 273, 275, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 302, 303, 310, 311, 312, 315, 316, 317, 321, 322, 325, 326, 327, 328, 329, 330, 337, 339, 340, 342, 343, 344, 345, 346, 349, 350, 351, 352, 354, 356, 358, 360, 361, 368, 372, 373, 375, 376, 378, 386, 389, 390, 391, 393, 394, 395, 396, 397], "1j": [9, 61, 168, 303, 315, 316, 328, 343, 344, 345, 346, 349, 350, 356, 360, 373, 375, 386, 389, 391, 393, 395], "arang": [9, 39, 61, 83, 137, 147, 180, 187, 261, 263, 264, 267, 275, 281, 283, 303, 317, 322, 328, 329, 361, 372, 373, 375, 376, 378, 389, 395], "5000": [9, 362, 363], "100": [9, 87, 98, 113, 162, 168, 170, 175, 178, 190, 227, 229, 247, 249, 279, 281, 282, 285, 289, 291, 293, 294, 295, 297, 298, 303, 310, 323, 326, 328, 337, 339, 340, 343, 345, 351, 354, 356, 368, 372, 373, 375, 389, 395], "1000": [9, 113, 168, 222, 223, 225, 237, 242, 243, 245, 251, 310, 312, 372, 373, 383, 396], "2000": 9, "10": [9, 39, 61, 87, 89, 96, 98, 100, 123, 130, 132, 133, 134, 136, 137, 147, 149, 155, 157, 158, 159, 161, 178, 180, 187, 193, 225, 237, 238, 245, 246, 247, 249, 251, 252, 261, 263, 264, 267, 271, 273, 275, 279, 280, 281, 286, 287, 290, 291, 293, 294, 295, 297, 298, 302, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 323, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 339, 340, 343, 344, 345, 346, 349, 350, 354, 356, 358, 360, 361, 364, 365, 366, 367, 368, 369, 370, 371, 376, 378, 386, 390, 393, 395, 396, 397], "3000": 9, "4000": 9, "001": [9, 341, 395], "random": [9, 18, 23, 27, 31, 35, 57, 60, 61, 89, 94, 95, 190, 225, 227, 237, 245, 251, 268, 281, 284, 288, 302, 310, 311, 321, 340, 342, 351, 358, 368, 386, 393, 394, 395, 396], "randn": [9, 61, 190, 227, 358], "size": [9, 39, 40, 45, 47, 94, 134, 159, 180, 182, 183, 184, 197, 199, 283, 286, 302, 315, 316, 317, 322, 324, 358, 376, 389, 395, 396, 397], "3": [9, 18, 23, 31, 39, 61, 66, 74, 76, 77, 80, 83, 87, 89, 95, 96, 100, 113, 123, 124, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 139, 147, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 161, 168, 178, 180, 187, 190, 217, 225, 227, 229, 237, 239, 245, 247, 248, 249, 250, 251, 253, 261, 263, 264, 267, 270, 271, 275, 279, 281, 282, 283, 284, 286, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 302, 303, 304, 305, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 337, 340, 341, 342, 343, 344, 345, 346, 349, 350, 356, 358, 360, 361, 364, 365, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 386, 391, 393, 395, 397, 399], "plt": [9, 23, 31, 61, 83, 87, 96, 98, 137, 147, 178, 187, 190, 217, 225, 227, 229, 237, 239, 245, 247, 248, 249, 250, 251, 271, 273, 275, 279, 281, 282, 283, 285, 289, 290, 291, 294, 295, 296, 297, 298, 299, 303, 310, 311, 312, 313, 315, 316, 317, 318, 321, 322, 325, 326, 327, 328, 329, 330, 331, 337, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 356, 357, 358, 360, 364, 365, 367, 368, 371, 372, 373, 375, 376, 378, 386, 389, 390, 391, 393, 394, 395, 396, 397], "figur": [9, 23, 31, 61, 83, 87, 96, 98, 137, 147, 178, 187, 190, 217, 225, 227, 229, 237, 239, 245, 247, 248, 249, 250, 251, 271, 273, 275, 279, 281, 282, 283, 285, 289, 290, 291, 294, 295, 296, 297, 298, 299, 303, 310, 311, 312, 313, 315, 316, 317, 318, 321, 322, 325, 326, 327, 328, 329, 330, 331, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 354, 356, 357, 358, 359, 360, 364, 365, 367, 368, 371, 372, 373, 375, 376, 378, 386, 389, 390, 391, 393, 394, 395, 396, 397], "plot": [9, 23, 31, 61, 83, 87, 96, 98, 113, 114, 115, 117, 120, 137, 147, 168, 170, 175, 178, 187, 190, 217, 225, 227, 229, 237, 239, 245, 247, 248, 249, 250, 251, 271, 273, 275, 279, 281, 282, 283, 285, 289, 290, 291, 294, 295, 296, 297, 298, 299, 303, 310, 311, 312, 313, 315, 316, 317, 318, 321, 322, 325, 326, 328, 329, 330, 331, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 364, 365, 367, 368, 371, 372, 373, 375, 376, 378, 386, 389, 390, 391, 393, 395, 396, 397, 399, 400], "titl": [9, 23, 31, 61, 83, 87, 137, 178, 187, 217, 229, 239, 247, 249, 275, 279, 281, 282, 283, 285, 289, 290, 291, 303, 310, 311, 315, 316, 317, 321, 322, 325, 326, 327, 328, 329, 330, 331, 337, 339, 341, 354, 358, 368, 371, 372, 373, 375, 376, 378, 386, 389, 393, 394, 395, 396, 397], "01": [9, 113, 168, 250, 251, 320, 386, 391, 393, 395], "notic": [9, 134, 136, 159, 161, 327, 329, 372, 373, 386, 389, 393, 397], "over": [9, 123, 127, 128, 129, 130, 132, 133, 134, 135, 149, 152, 153, 154, 155, 157, 158, 159, 160, 247, 249, 283, 286, 290, 317, 320, 322, 324, 376], "i": [9, 11, 12, 13, 17, 19, 23, 27, 31, 35, 41, 42, 46, 57, 60, 61, 62, 63, 66, 73, 82, 83, 84, 87, 88, 89, 94, 95, 96, 97, 98, 99, 100, 105, 107, 108, 113, 115, 120, 121, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 140, 145, 147, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 162, 165, 167, 168, 170, 175, 176, 178, 181, 185, 186, 187, 188, 190, 191, 192, 193, 208, 210, 211, 214, 217, 225, 227, 230, 237, 238, 239, 245, 246, 251, 252, 253, 254, 255, 259, 262, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 284, 285, 286, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 302, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 342, 343, 344, 345, 346, 348, 349, 350, 352, 355, 356, 358, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 382, 383, 384, 385, 386, 389, 390, 391, 393, 394, 395, 396, 397, 399, 401], "amplifi": [9, 11, 13], "accord": 9, "also": [9, 61, 134, 159, 217, 225, 239, 296, 312, 313, 399], "when": [9, 16, 23, 31, 61, 63, 83, 84, 86, 87, 107, 112, 115, 118, 120, 137, 141, 147, 162, 170, 173, 175, 178, 187, 188, 190, 191, 227, 253, 266, 275, 277, 281, 282, 284, 285, 288, 289, 308, 317, 329, 343, 344, 345, 346, 349, 350, 356, 370, 376, 378, 386, 389, 390, 391, 393], "interest": 9, "appear": [9, 389], "quickli": 9, "decreas": [9, 282, 327], "4": [9, 18, 23, 31, 39, 61, 74, 76, 83, 87, 89, 96, 100, 113, 123, 124, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 139, 147, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 161, 168, 178, 180, 187, 190, 217, 225, 226, 227, 229, 237, 238, 239, 245, 247, 248, 249, 250, 251, 253, 261, 263, 264, 267, 270, 271, 272, 274, 275, 279, 281, 282, 283, 286, 287, 290, 291, 294, 295, 296, 297, 298, 302, 303, 304, 305, 307, 308, 310, 311, 312, 314, 315, 316, 317, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 337, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 354, 356, 357, 358, 359, 360, 361, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 384, 389, 391, 394, 395, 396], "6": [9, 18, 23, 31, 39, 61, 83, 87, 89, 100, 123, 124, 130, 132, 133, 134, 135, 136, 137, 147, 149, 150, 155, 157, 158, 159, 160, 161, 168, 178, 180, 187, 190, 217, 225, 227, 229, 237, 245, 250, 251, 253, 261, 263, 264, 267, 271, 272, 274, 275, 279, 283, 286, 287, 290, 291, 293, 296, 302, 303, 304, 305, 310, 312, 314, 315, 316, 317, 320, 322, 323, 324, 325, 326, 327, 329, 330, 331, 334, 337, 340, 342, 343, 344, 345, 346, 349, 350, 356, 357, 358, 360, 361, 364, 367, 371, 372, 373, 375, 376, 378, 382, 385, 390, 391, 395, 396], "ylim": [9, 137, 147, 190, 227, 291, 294, 295, 296, 297, 298, 303, 315, 316, 325, 326, 329, 375, 378, 390, 395, 396, 397], "__call__": [9, 10, 11, 17, 23, 26, 31, 34, 55, 56, 61, 62, 63, 83, 84, 87, 88, 89, 93, 107, 108, 109, 121, 123, 125, 137, 138, 139, 145, 147, 162, 163, 164, 165, 176, 178, 179, 187, 188, 190, 191, 208, 209, 217, 220, 227, 228, 229, 230, 239, 240, 253, 254, 255, 275, 276, 277, 400], "perform": [9, 10, 62, 66, 108, 148, 247, 249, 254, 276, 290, 296, 303, 330, 375, 378, 381, 386, 390, 391, 393, 396, 399, 400], "reset": [9, 16, 23, 31, 55, 60, 61, 83, 86, 87, 89, 107, 118, 123, 132, 137, 143, 147, 149, 157, 162, 173, 178, 187, 190, 208, 216, 227, 229, 235, 253, 266, 275], "indic": [9, 11, 17, 41, 42, 61, 63, 83, 84, 87, 88, 96, 97, 98, 99, 107, 109, 121, 137, 139, 145, 147, 162, 163, 165, 176, 178, 179, 185, 186, 187, 188, 190, 191, 192, 193, 225, 226, 227, 228, 237, 238, 245, 246, 247, 249, 251, 252, 253, 255, 258, 271, 272, 273, 274, 275, 277, 280, 306, 313, 315, 316, 318, 321, 327, 328, 329, 330, 331, 335, 336, 340, 341, 342, 350, 351, 352, 358, 364, 365, 366, 367, 371, 376, 386, 393], "whether": [9, 11, 17, 61, 63, 83, 84, 87, 88, 96, 97, 98, 99, 107, 109, 121, 137, 139, 145, 147, 162, 163, 165, 176, 178, 179, 187, 188, 190, 191, 227, 228, 247, 249, 253, 255, 271, 272, 273, 274, 275, 277, 280, 306, 315, 316, 327, 328, 329, 330, 331, 335, 336, 340, 341, 342, 350, 352, 358, 366, 371], "The": [9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 390, 391, 393, 395, 396, 397, 399, 401], "current": [9, 14, 123, 133, 140, 149, 158, 358, 384], "settabl": [9, 12, 13, 15, 217, 218, 219, 229, 232, 233, 234], "paramet": [10, 11, 16, 19, 20, 22, 26, 27, 34, 35, 40, 42, 43, 45, 47, 52, 56, 57, 60, 62, 63, 73, 74, 76, 79, 84, 88, 93, 94, 96, 97, 98, 99, 102, 103, 104, 106, 108, 109, 113, 114, 115, 117, 120, 124, 125, 126, 132, 134, 138, 139, 141, 143, 148, 150, 151, 157, 159, 163, 164, 165, 168, 170, 175, 179, 181, 183, 184, 188, 191, 193, 194, 196, 197, 198, 199, 204, 209, 210, 220, 221, 222, 223, 226, 228, 230, 231, 236, 238, 240, 242, 243, 246, 247, 249, 252, 254, 255, 268, 269, 271, 272, 273, 274, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 386, 393], "stream": [11, 16, 17, 62, 63, 84, 86, 88, 108, 109, 112, 118, 121, 139, 141, 145, 163, 165, 173, 176, 179, 188, 191, 225, 228, 237, 245, 251, 254, 255, 266, 276, 277, 391], "meant": [11, 12, 13, 66], "attenu": [11, 12, 63, 84, 188, 277, 294, 295, 297, 298, 299, 364, 367], "strong": [11, 12], "after": [11, 12, 13, 264, 267, 329], "approx": [11, 12, 13, 147], "reduc": [11, 12, 13, 291], "e": [11, 12, 13, 23, 25, 26, 105, 217, 239, 270, 271, 272, 273, 274, 280, 284, 285, 306, 322, 378, 383, 384, 390, 391, 396], "its": [11, 12, 13, 107, 123, 124, 132, 134, 149, 150, 157, 162, 163, 178, 190, 279, 281, 337, 390, 391, 397], "origin": [11, 12, 13, 134, 159, 237, 251, 375, 389], "valu": [11, 12, 13, 41, 42, 43, 52, 95, 181, 192, 193, 194, 204, 225, 226, 237, 238, 245, 246, 247, 249, 251, 252, 268, 269, 283, 286, 293, 300, 301, 313, 317, 321, 322, 323, 324, 329, 340, 341, 344, 346, 348, 349, 350, 355, 357, 376, 383, 391, 400], "weak": [11, 13], "mode": [11, 16, 17, 62, 63, 84, 86, 88, 108, 109, 112, 118, 121, 139, 141, 145, 163, 165, 173, 176, 179, 188, 191, 228, 254, 255, 266, 276, 277, 283, 317, 322, 342, 376, 378], "preserv": [11, 17, 63, 83, 84, 88, 109, 121, 139, 145, 163, 165, 176, 179, 187, 188, 191, 228, 255, 275, 277], "call": [11, 17, 62, 63, 83, 84, 88, 108, 109, 121, 134, 139, 145, 159, 163, 165, 176, 179, 187, 188, 191, 228, 254, 255, 275, 276, 277], "properti": [12, 13, 14, 15, 17, 21, 24, 25, 29, 30, 32, 33, 37, 38, 44, 46, 48, 49, 50, 51, 53, 54, 59, 64, 65, 67, 68, 69, 70, 71, 72, 75, 77, 78, 81, 82, 85, 90, 91, 92, 111, 116, 119, 121, 122, 127, 128, 129, 130, 131, 133, 135, 140, 142, 144, 145, 146, 152, 153, 154, 155, 156, 158, 160, 166, 167, 169, 171, 172, 174, 176, 177, 185, 186, 189, 195, 200, 201, 202, 203, 205, 206, 207, 211, 212, 213, 214, 215, 218, 219, 224, 232, 233, 234, 244, 248, 250, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 278, 400], "onli": [16, 42, 62, 63, 66, 84, 86, 108, 112, 113, 118, 141, 168, 173, 188, 193, 217, 226, 238, 246, 250, 252, 254, 266, 276, 277, 281, 294, 295, 297, 298, 312, 315, 316, 317, 318, 324, 327, 329, 330, 331, 340, 342, 352, 365, 371, 376, 385, 386, 393, 395, 396], "initi": [16, 19, 123, 124, 126, 130, 132, 134, 136, 149, 150, 151, 155, 157, 159, 161, 217, 221, 239, 241, 324, 386, 393, 395], "scrambler": [18, 19, 399, 400], "c_n": [18, 123, 149], "c_1": [18, 123, 124, 135, 149, 150, 160], "c_0": [18, 123, 124, 135, 149, 150, 160], "v": [18, 83, 123, 149, 229, 253, 293, 323, 382], "state": [18, 19, 61, 62, 66, 79, 83, 86, 87, 107, 108, 112, 118, 119, 121, 124, 126, 130, 132, 133, 134, 136, 137, 141, 143, 144, 145, 147, 150, 151, 155, 157, 158, 159, 161, 162, 173, 174, 176, 178, 187, 190, 227, 253, 254, 266, 275, 276, 286, 324, 400], "sequenc": [18, 20, 22, 23, 26, 31, 34, 39, 55, 56, 89, 93, 123, 127, 131, 134, 136, 149, 152, 156, 159, 161, 180, 183, 184, 283, 284, 286, 288, 302, 317, 322, 324, 376, 378, 380, 399, 400], "field": [18, 123, 124, 129, 134, 136, 149, 150, 154, 159, 161, 283, 286, 312, 317, 322, 324, 376, 379], "http": [18, 279, 292, 294, 295, 296, 297, 298, 299, 313, 317, 322, 324, 333, 376, 378, 382, 383, 384], "en": [18, 292, 322, 324, 333, 378], "wikipedia": [18, 292, 322, 324, 333, 378], "org": [18, 292, 322, 324, 333, 378], "wiki": [18, 292, 322, 324, 333, 378], "construct": 18, "ieee": 18, "802": 18, "11": [18, 39, 61, 89, 123, 132, 134, 137, 149, 157, 159, 180, 187, 225, 237, 245, 251, 286, 287, 291, 299, 314, 315, 316, 317, 329, 330, 331, 361, 371, 376, 378, 382, 386, 391], "c": [18, 19, 23, 28, 29, 31, 36, 37, 39, 40, 55, 58, 59, 61, 62, 63, 64, 66, 74, 76, 77, 78, 79, 80, 89, 102, 103, 104, 105, 106, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 192, 193, 206, 208, 225, 237, 245, 250, 251, 282, 285, 286, 289, 312, 324, 334, 357, 372, 373, 377, 379, 395], "galoi": [18, 19, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 283, 286, 317, 322, 324, 376, 379, 399, 400], "poli": [18, 123, 124, 127, 128, 129, 132, 135, 136, 149, 150, 152, 153, 154, 157, 160, 161, 286, 322, 324, 379], "degre": [18, 41, 42, 49, 123, 131, 149, 156, 192, 193, 201, 225, 226, 237, 238, 245, 246, 248, 251, 252, 286, 311, 321, 322, 324, 328, 334, 379, 386, 393, 395], "7": [18, 23, 31, 39, 61, 83, 87, 89, 123, 124, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 147, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 161, 180, 187, 217, 225, 237, 239, 245, 250, 251, 253, 261, 263, 264, 267, 271, 275, 279, 283, 286, 287, 291, 296, 297, 299, 302, 310, 314, 315, 316, 317, 320, 322, 324, 329, 330, 331, 361, 371, 376, 378, 382, 391, 393, 395], "out": [18, 23, 31, 39, 61, 83, 89, 100, 113, 123, 124, 127, 128, 129, 130, 132, 133, 134, 135, 136, 147, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 161, 168, 180, 187, 217, 225, 237, 245, 248, 250, 251, 253, 261, 263, 264, 265, 267, 268, 269, 275, 283, 284, 286, 287, 288, 290, 291, 293, 300, 301, 302, 304, 305, 307, 308, 310, 312, 314, 315, 316, 317, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 334, 338, 359, 361, 362, 363, 369, 370, 371, 374, 376, 377], "gf": [18, 123, 124, 127, 128, 129, 130, 132, 133, 134, 135, 136, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 161, 283, 286, 317, 322, 324, 376], "scrambl": [18, 21, 22, 400], "descrambl": [18, 20], "randint": [18, 23, 31, 89, 225, 237, 245, 251, 281, 284, 288, 302, 310, 311, 321, 340, 342, 351, 358, 368, 394, 395, 396], "20": [18, 23, 31, 87, 88, 89, 96, 98, 123, 137, 149, 187, 229, 271, 275, 279, 282, 284, 288, 290, 293, 302, 310, 311, 315, 316, 320, 321, 323, 327, 329, 330, 336, 361, 366, 375, 394, 396, 400], "array_equ": [18, 225, 237, 245, 251, 286, 317, 376], "true": [18, 83, 96, 97, 98, 99, 113, 127, 128, 137, 152, 153, 168, 187, 217, 222, 223, 225, 237, 239, 242, 243, 245, 247, 249, 251, 271, 272, 273, 274, 275, 279, 280, 284, 286, 288, 302, 306, 315, 316, 317, 327, 328, 329, 330, 331, 335, 336, 337, 340, 341, 342, 350, 352, 357, 358, 359, 366, 371, 376, 386, 393, 395, 396], "characteristic_poli": [18, 19, 123, 124, 126, 127, 128, 136, 149, 150, 151, 152, 153, 161, 286], "polylik": [18, 19, 123, 126, 149, 151, 322, 324], "lfsr": [18, 21, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 286, 324, 379, 399, 400], "flfsr": [18, 19, 21, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 149, 161, 286, 379, 400], "fibonacci": [18, 21, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 149, 161, 286, 324, 379, 399, 400], "feedback_poli": [19, 123, 124, 126, 127, 128, 136, 149, 150, 151, 152, 153, 161, 286], "c_": [19, 123, 124, 126, 127, 128, 135, 149, 150, 151, 152, 153, 160, 286, 378], "cdot": [19, 61, 83, 87, 107, 123, 126, 127, 128, 140, 149, 151, 152, 153, 187, 190, 217, 239, 253, 254, 265, 275, 276, 286, 294, 295, 297, 298, 321, 322, 328, 337], "dot": [19, 123, 124, 126, 127, 128, 130, 132, 133, 135, 149, 150, 151, 152, 153, 155, 157, 158, 160, 192, 193, 206, 225, 237, 245, 250, 251, 286, 324, 357], "feedback": [19, 123, 126, 127, 128, 149, 151, 152, 153, 162, 165, 166, 178, 190, 286, 324, 343, 344, 345, 346, 349, 350, 356, 360, 379, 391], "either": [19, 126, 151, 220, 229, 240, 310], "must": [19, 63, 84, 126, 139, 151, 183, 184, 188, 277, 281, 294, 295, 297, 298, 299, 313, 317, 322, 328, 352, 364, 367, 376, 378, 386, 393], "both": [19, 126, 136, 151, 161, 217, 239, 290, 329, 340, 357, 358, 359], "s_0": [19, 123, 124, 126, 130, 132, 133, 149, 150, 151, 155, 157, 158], "s_1": [19, 123, 124, 126, 130, 132, 133, 149, 150, 151, 155, 157, 158, 386, 393], "s_": [19, 123, 124, 126, 130, 132, 133, 149, 150, 151, 155, 157, 158], "which": [19, 124, 126, 132, 150, 151, 157, 225, 237, 251, 280, 281, 282, 306, 309, 311, 319, 321, 322, 324, 333, 334, 335, 340, 342, 344, 346, 348, 349, 350, 355, 357, 359, 368, 386, 393, 397], "correspond": [19, 100, 105, 124, 126, 132, 140, 150, 151, 157, 258, 324, 352], "all": [19, 61, 83, 100, 105, 124, 126, 150, 151, 187, 230, 253, 255, 262, 275, 310, 342, 351, 352, 383, 385, 399, 400], "ones": [19, 124, 126, 150, 151, 188, 277, 294, 295, 297, 298, 386, 393, 395], "primitive_poli": [19, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 322, 324], "binaryerasurechannel": [23, 24, 25, 26, 27, 28, 29, 30, 380, 400], "ar": [23, 25, 26, 31, 41, 42, 51, 54, 61, 62, 63, 83, 84, 88, 89, 95, 100, 102, 103, 104, 106, 108, 109, 123, 134, 136, 139, 148, 149, 161, 163, 165, 179, 187, 188, 191, 192, 193, 203, 207, 225, 226, 228, 230, 237, 238, 245, 246, 251, 252, 253, 254, 255, 262, 264, 267, 270, 275, 276, 277, 282, 284, 285, 286, 288, 289, 291, 296, 299, 312, 317, 318, 322, 324, 332, 340, 342, 343, 344, 346, 348, 349, 350, 351, 352, 355, 357, 358, 359, 361, 365, 372, 373, 376, 382, 384, 386, 389, 391, 393, 395, 397, 399, 401], "x_i": [23, 26, 31, 34, 89, 93, 94, 282, 284, 285, 288, 289, 302, 321], "y_i": [23, 26, 31, 34, 61, 62, 89, 93, 253, 282, 284, 285, 288, 289, 302], "capac": [23, 28, 29, 31, 36, 37, 55, 58, 59, 89, 282, 285, 289, 399, 400], "text": [23, 31, 63, 84, 89, 95, 188, 251, 270, 277, 279, 280, 281, 282, 285, 289, 290, 291, 292, 293, 299, 310, 311, 312, 323, 329, 333, 335, 336, 366, 368], "john": [23, 31, 89, 247, 249], "proaki": [23, 31, 89, 247, 249], "chapter": [23, 31, 61, 83, 89, 187, 247, 249, 275, 299, 361], "model": [23, 31, 89, 123, 149, 286, 400], "pass": [23, 26, 27, 31, 34, 35, 42, 55, 56, 57, 60, 61, 83, 87, 89, 93, 94, 107, 112, 137, 141, 147, 187, 227, 253, 255, 259, 275, 281, 284, 288, 302, 310, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 380, 382, 384, 390, 391, 400], "through": [23, 26, 31, 34, 55, 56, 61, 83, 87, 89, 93, 107, 112, 123, 125, 137, 141, 147, 187, 227, 237, 251, 253, 275, 284, 288, 302, 380, 390, 391, 395], "25": [23, 31, 61, 89, 96, 123, 149, 284, 288, 291, 296, 302, 315, 316, 338, 362, 363, 389, 394, 395, 397], "roughli": [23, 31, 284, 288, 389], "eras": [23, 284], "seed": [23, 27, 31, 35, 55, 57, 60, 89, 94, 281, 284, 288, 302, 400], "count_nonzero": [23, 31, 89], "thi": [23, 27, 31, 35, 42, 45, 57, 60, 66, 83, 94, 102, 103, 104, 106, 107, 134, 159, 162, 187, 188, 193, 196, 197, 206, 217, 225, 230, 237, 238, 246, 250, 251, 252, 275, 277, 279, 281, 282, 284, 286, 288, 291, 302, 303, 310, 312, 315, 316, 317, 327, 329, 330, 331, 337, 340, 342, 348, 352, 355, 358, 371, 375, 376, 382, 384, 385, 386, 389, 391, 393, 395, 396, 397], "75": [23, 89, 295, 320, 395], "howev": [23, 31, 62, 102, 103, 104, 106, 108, 147, 208, 254, 276, 279, 285, 289, 317, 329, 376, 389], "linearli": [23, 188, 277], "linspac": [23, 31, 87, 96, 113, 168, 178, 247, 249, 271, 279, 282, 285, 289, 291, 312, 315, 316, 325, 326, 329, 330, 337, 339, 354, 386, 391, 393, 394, 395, 396], "101": [23, 31, 96, 98, 271, 273, 294, 295, 297, 298, 315, 316, 329, 330, 386, 393], "xlabel": [23, 31, 217, 239, 279, 282, 283, 285, 289, 290, 291, 310, 312, 317, 322, 325, 326, 327, 329, 376, 378, 386, 393, 394, 395, 397], "ylabel": [23, 31, 217, 239, 279, 282, 285, 289, 290, 291, 310, 312, 325, 326, 327, 329, 386, 393, 394, 395, 397], "new": [23, 27, 31, 35, 41, 42, 55, 57, 60, 89, 94, 100, 101, 123, 126, 132, 137, 139, 149, 151, 157, 190, 192, 193, 225, 226, 237, 238, 245, 246, 251, 252, 368], "int64": [23, 26, 31, 34, 89, 93, 283, 317, 322, 324, 376, 379], "static": [23, 28, 31, 36, 55, 58, 89, 95, 96, 97, 98, 99, 270, 271, 272, 273, 274, 383], "alphabet": [23, 24, 25, 31, 32, 33, 89, 91, 92, 94, 302], "repres": [23, 25, 26, 66, 75, 284, 285, 324], "instanti": [23, 29, 31, 37, 55, 59, 89], "number": [27, 35, 40, 41, 42, 44, 53, 57, 60, 61, 62, 63, 64, 83, 94, 96, 97, 98, 99, 100, 102, 103, 106, 113, 114, 115, 117, 120, 134, 159, 168, 170, 175, 187, 192, 193, 195, 205, 222, 223, 225, 226, 236, 237, 238, 242, 243, 245, 246, 251, 252, 253, 255, 256, 264, 267, 275, 279, 281, 284, 288, 290, 302, 304, 305, 307, 313, 315, 316, 318, 320, 327, 329, 330, 331, 332, 337, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 355, 356, 361, 364, 365, 367, 369, 371, 374], "numpi": [27, 35, 57, 60, 61, 83, 87, 94, 107, 113, 147, 162, 168, 178, 187, 190, 227, 230, 253, 275, 281, 284, 288, 302, 340, 374, 383, 386, 389, 390, 391, 393, 394, 395, 396, 397, 399, 400], "default_rng": [27, 35, 57, 60, 94, 281, 284, 288, 302, 386, 393], "binarysymmetricchannel": [31, 32, 33, 34, 35, 36, 37, 38, 380, 400], "h_b": [31, 289], "appropri": 31, "modul": [31, 41, 42, 46, 47, 48, 192, 193, 199, 200, 202, 217, 222, 223, 225, 229, 237, 238, 239, 242, 243, 245, 246, 247, 249, 251, 252, 304, 305, 307, 310, 339, 342, 351, 354, 357, 358, 369, 382, 385, 396, 399, 400], "hard": 31, "decis": [31, 41, 45, 192, 196, 197, 217, 220, 223, 225, 237, 239, 240, 243, 245, 251, 395], "transit": [31, 35, 38, 89, 90, 94, 237, 251, 288, 289, 302, 376], "flip": [31, 288], "189": 31, "18872187554086717": 31, "interleav": [39, 40, 180, 181, 182, 183, 184, 185, 186, 399, 400], "feed": 39, "down": [39, 361], "column": [39, 40, 361], "read": 39, "across": [39, 61, 87, 255, 279, 309, 319, 327, 329], "row": [39, 40, 352], "8": [39, 42, 61, 83, 87, 89, 113, 123, 132, 134, 137, 147, 149, 157, 159, 168, 178, 180, 187, 193, 225, 226, 237, 238, 245, 246, 247, 249, 250, 251, 252, 253, 261, 263, 264, 267, 275, 279, 286, 287, 291, 296, 302, 310, 314, 315, 316, 317, 320, 322, 329, 330, 331, 334, 337, 339, 342, 343, 344, 345, 346, 349, 350, 354, 356, 358, 359, 360, 361, 364, 367, 371, 376, 378, 386, 390, 391, 393, 394, 395, 397], "inverse_map": [39, 180, 185], "deinterleav": [39, 180, 183, 185], "12": [39, 61, 123, 132, 134, 137, 149, 157, 159, 180, 187, 225, 237, 245, 251, 272, 274, 279, 287, 314, 315, 316, 327, 329, 330, 361, 390, 396], "col": [39, 40], "__len__": [39, 61, 83, 87, 107, 110, 147, 180, 182, 187, 227, 253, 275], "permut": [39, 180, 181, 185, 186], "determin": [40, 286, 352, 386, 393], "separ": [40, 225, 342], "consecut": [40, 42, 226, 238, 246, 252], "nomenclatur": [41, 192, 225, 237, 245, 251], "variabl": [41, 192, 225, 229, 230, 237, 245, 251, 268, 320, 395], "name": [41, 123, 192, 225, 237, 245, 251], "follow": [41, 95, 100, 192, 225, 237, 245, 251, 321, 340, 352, 355, 357, 359, 361, 386, 393, 395], "tild": [41, 45, 192, 196, 197, 217, 220, 225, 237, 239, 240, 245, 251], "puls": [41, 42, 45, 47, 50, 51, 54, 87, 178, 192, 193, 197, 199, 202, 203, 207, 225, 237, 238, 245, 246, 251, 252, 313, 318, 342, 358, 364, 365, 367, 392, 399, 400], "shape": [41, 42, 45, 47, 50, 51, 54, 61, 192, 193, 197, 199, 202, 203, 207, 225, 237, 238, 245, 246, 251, 252, 313, 318, 342, 358, 364, 365, 367, 391, 392, 399, 400], "index": [41, 42, 46, 137, 143, 192, 225, 237, 245, 251, 258, 317, 322, 324, 342, 351, 352, 357, 376, 379, 382], "object": [41, 42, 66, 73, 100, 101, 192, 193, 225, 226, 237, 238, 245, 246, 251, 252, 286, 317, 343, 344, 345, 346, 349, 350, 356, 360, 376, 395, 400], "x_tild": [41, 45, 197], "abstract": [41, 43, 52, 192, 194, 204], "log_2": [41, 44, 192, 195, 225, 237, 245, 251, 282, 304, 305, 307, 369], "phase_offset": [41, 42, 49, 192, 193, 201, 225, 226, 237, 238, 245, 246, 248, 251, 252, 281, 310, 311, 321, 340, 342, 357, 358, 368, 394, 395, 396], "f_": [41, 42, 46, 53, 61, 62, 66, 73, 81, 83, 113, 114, 117, 168, 187, 192, 193, 205, 225, 226, 237, 238, 245, 246, 251, 252, 253, 254, 265, 275, 276, 294, 295, 297, 298, 303, 305, 308, 311, 313, 328, 342, 343, 344, 346, 348, 349, 350, 351, 352, 355, 358, 368, 369, 370, 372, 373, 375, 389, 390, 391, 395, 397], "sym": [41, 42, 46, 53, 192, 193, 205, 225, 226, 237, 238, 245, 246, 251, 252, 305, 308, 313, 364, 367, 369, 370, 397], "pulse_shap": [41, 42, 45, 47, 50, 192, 193, 197, 199, 202, 225, 237, 238, 245, 246, 251, 252, 342, 358, 394, 396], "instantan": [41, 42, 50, 310], "tx_filter": [41, 54, 192, 207, 225, 237, 245, 251], "transmit": [41, 54, 102, 192, 207, 217, 220, 225, 237, 239, 240, 245, 251, 310, 342], "filter": [41, 45, 51, 54, 61, 62, 63, 65, 66, 70, 71, 73, 75, 83, 84, 85, 86, 87, 88, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 137, 140, 141, 143, 144, 145, 146, 147, 148, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 187, 188, 189, 190, 191, 192, 197, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 225, 227, 228, 237, 245, 251, 253, 254, 255, 258, 261, 263, 264, 266, 267, 275, 276, 277, 278, 294, 295, 296, 297, 298, 299, 303, 313, 318, 342, 343, 344, 345, 346, 349, 350, 356, 360, 361, 364, 365, 367, 375, 381, 388, 397, 399, 400], "coeffici": [41, 51, 54, 61, 63, 83, 84, 107, 109, 162, 165, 187, 188, 203, 207, 255, 275, 277, 324, 343, 344, 345, 346, 349, 350, 356, 360, 361, 390, 391], "rx_filter": [41, 51, 192, 203, 225, 237, 245, 251], "match": [41, 42, 45, 51, 192, 193, 197, 203, 225, 237, 238, 245, 246, 251, 252, 342, 400], "symbol_label": [42, 225, 226, 237, 238, 245, 246, 250, 251, 252, 396], "bin": [42, 226, 238, 246, 250, 252, 291, 310, 315, 316, 340, 352, 357, 386, 393, 396], "grai": [42, 225, 226, 237, 238, 245, 246, 250, 251, 252, 314, 340, 357, 379, 396, 399], "rect": [42, 193, 238, 246, 252, 397], "deviat": [42, 46, 386, 393], "delta": [42, 46, 74, 76, 115, 147, 148, 170, 291, 296, 325, 326, 345, 390, 391], "chang": [42, 46, 384, 401], "label": [42, 61, 83, 87, 96, 98, 137, 147, 178, 187, 190, 217, 226, 227, 238, 239, 246, 247, 249, 252, 271, 273, 275, 279, 281, 291, 294, 295, 296, 297, 298, 310, 311, 313, 317, 321, 322, 325, 326, 327, 329, 330, 337, 339, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 354, 355, 358, 364, 367, 368, 376, 386, 389, 393, 394, 395, 396, 397], "code": [42, 226, 238, 246, 250, 252, 283, 287, 304, 305, 307, 314, 317, 322, 340, 357, 369, 376, 379, 384, 396, 399, 400], "adjac": [42, 226, 238, 246, 250, 252, 396, 397], "mai": [42, 226, 238, 246, 250, 252, 310, 340, 352, 355, 357, 359, 391, 400], "differ": [42, 136, 161, 162, 190, 226, 238, 246, 250, 252, 279, 294, 295, 296, 297, 298, 317, 345, 358, 376, 378, 397], "more": [42, 134, 159, 226, 238, 246, 250, 252, 400], "than": [42, 82, 134, 159, 225, 226, 238, 246, 250, 252, 279, 318, 321, 327, 337, 340, 357, 365, 386, 393], "one": [42, 107, 134, 159, 162, 226, 237, 238, 246, 250, 252, 313, 320, 343, 344, 346, 348, 349, 350, 355, 372, 383, 390, 391, 394, 397], "npt": [42, 63, 84, 113, 168, 188, 193, 226, 238, 246, 252, 277, 294, 295, 297, 298, 343, 344, 345, 346, 349, 350, 356, 360], "whose": [42, 193, 226, 238, 245, 246, 252, 324], "If": [42, 88, 94, 98, 134, 143, 159, 193, 230, 238, 246, 252, 273, 275, 280, 281, 282, 290, 291, 302, 306, 329, 332, 335, 336, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 355, 356, 357, 358, 366, 372, 374, 386, 393, 399], "string": [42, 193, 238, 246, 252, 320, 348, 355, 400], "custom": [42, 61, 65, 83, 85, 180, 187, 189, 193, 238, 246, 252, 275, 278, 294, 295, 297, 298, 400], "It": [42, 107, 162, 187, 193, 208, 217, 238, 246, 252, 281, 386, 393], "import": [42, 193, 217, 238, 246, 252, 384, 386, 389, 390, 391, 393, 394, 395, 396, 397, 399], "psd": [43, 52, 194, 204, 247, 249, 282, 304, 305, 307, 308, 339, 354, 369, 370], "p_b": [43, 194], "likelihood": [45, 196, 197, 217, 381, 395, 400], "s_hat": [45, 197, 395, 396], "p_e": [52, 204], "base": [55, 342, 351, 352, 358, 380, 400], "wireless": [55, 380], "configur": [55, 58, 89, 123, 149, 395], "2d": [55, 58, 59, 89, 282, 340, 342, 352], "polyphas": [61, 62, 63, 65, 83, 84, 85, 187, 188, 189, 253, 254, 255, 256, 258, 259, 262, 263, 264, 267, 275, 276, 277, 278, 299, 303, 361, 375, 399, 400], "fir": [61, 62, 63, 83, 84, 86, 87, 88, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 137, 140, 147, 148, 187, 188, 190, 191, 225, 227, 228, 237, 245, 251, 253, 254, 255, 258, 261, 263, 264, 266, 267, 275, 276, 277, 294, 295, 296, 297, 298, 299, 342, 343, 344, 345, 346, 349, 350, 356, 360, 361, 388, 394, 399, 400], "effici": [61, 134, 159, 225, 303, 327, 334, 375], "split": 61, "equal": [61, 123, 143, 225, 290, 386, 393], "ha": [61, 108, 178, 187, 225, 237, 245, 254, 276, 281, 294, 295, 296, 297, 298, 303, 312, 313, 334, 364, 367, 375, 378, 386, 393, 395, 396, 397], "bandwidth": [61, 66, 67, 68, 73, 77, 88, 208, 210, 214, 282, 290, 291, 294, 295, 313, 364, 367, 395, 397, 400], "equival": [61, 83, 136, 148, 161, 187, 275, 281, 282, 286, 294, 295, 296, 297, 298, 308, 317, 342, 370, 376, 384, 386, 389, 393], "first": [61, 83, 100, 134, 140, 187, 188, 225, 237, 258, 275, 277, 332, 345, 358, 374, 383, 385, 386, 393, 400], "f_i": 61, "feedforward": [61, 63, 83, 84, 87, 107, 109, 122, 147, 162, 165, 167, 178, 187, 188, 190, 227, 253, 255, 264, 267, 275, 277, 343, 344, 345, 346, 349, 350, 356, 360, 361, 390, 391], "instead": [61, 83, 187, 275], "commut": [61, 83, 187, 253, 255, 259, 262, 275], "parallel": [61, 83, 187, 253, 255, 262, 275], "fourier": 61, "transform": 61, "idft": 61, "bottom": [61, 83, 187, 253, 255, 259, 262, 275], "top": [61, 83, 187, 253, 255, 259, 262, 275], "relat": [61, 83, 135, 160, 187, 253, 264, 267, 275, 282, 313], "j": [61, 83, 113, 162, 165, 166, 168, 178, 181, 185, 186, 187, 190, 225, 229, 237, 245, 251, 253, 264, 267, 275, 281, 302, 321, 328, 378, 390, 391], "fred": [61, 83, 187, 275, 299, 361], "harri": [61, 83, 187, 275, 294, 295, 297, 298, 299, 361], "process": [61, 83, 95, 96, 97, 99, 123, 125, 187, 190, 227, 270, 271, 272, 274, 275, 299, 361, 391, 395, 399], "system": [61, 83, 187, 275, 299, 308, 317, 361, 370, 376, 383, 385, 395, 399], "tone": 61, "increas": [61, 88, 312, 334, 391], "10_000": 61, "rang": [61, 217, 239, 340, 395, 396], "overlai": 61, "boundari": [61, 225], "center": [61, 294, 295, 296, 297, 298, 318, 358, 365, 372, 373, 400], "so": [61, 237, 245, 251, 279, 312, 313, 318, 364, 365, 367, 399], "wrap": 61, "posit": [61, 181, 185, 186, 321], "neg": [61, 134, 159, 312, 321], "fft": [61, 303, 348, 355, 372, 373, 375], "1024": [61, 113, 114, 117, 168, 343, 344, 346, 349, 350, 394, 397], "color": [61, 87, 178, 279, 329, 337, 342, 351, 352, 358, 386, 393, 394, 397], "f_start": 61, "f_stop": 61, "fill_betweenx": 61, "80": [61, 63, 84, 87, 188, 277, 299, 378], "xtick": 61, "legend": [61, 87, 147, 178, 217, 239, 279, 291, 325, 326, 327, 329, 330, 337, 386, 393, 394, 395, 397], "spread": [61, 317, 376], "10000": 61, "1001": [61, 290, 291, 315, 316, 325, 326, 341], "full": [61, 62, 83, 108, 187, 253, 254, 275, 276, 283, 317, 322, 376], "flush": [61, 62, 83, 87, 107, 108, 112, 137, 141, 147, 187, 227, 253, 254, 275, 276, 400], "consist": [61, 83, 87, 102, 103, 104, 105, 106, 107, 119, 137, 144, 147, 187, 227, 253, 275], "previou": [61, 63, 83, 84, 87, 88, 107, 109, 119, 137, 139, 143, 144, 147, 163, 165, 179, 187, 188, 190, 191, 227, 228, 253, 255, 275, 277, 300, 301], "frequency_respons": [61, 83, 87, 107, 113, 147, 162, 168, 178, 187, 190, 227, 253, 275, 400], "polyphase_tap": [61, 83, 187, 253, 261, 263, 264, 267, 275], "polyphase_ord": [61, 63, 83, 84, 187, 188, 253, 261, 263, 275, 277, 299, 400], "hold": [61, 83, 187, 188, 253, 255, 259, 275, 277, 332, 400], "connect": [61, 83, 187, 253, 255, 259, 262, 275], "sum": [61, 83, 95, 107, 162, 187, 253, 255, 262, 270, 275, 386, 393, 397], "integ": [61, 83, 113, 168, 187, 253, 257, 260, 275, 324, 332], "resampl": [61, 83, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 187, 253, 254, 265, 275, 276, 277, 278, 299, 361, 388, 399, 400], "l": [62, 108, 147, 148, 164, 191, 227, 228, 254, 276, 296], "non": [62, 96, 97, 98, 99, 108, 254, 276, 279, 315, 316, 318, 327, 329, 330, 331, 337, 358, 365, 371, 383, 386, 387, 399, 400], "convolut": [62, 108, 187, 254, 276], "have": [62, 148, 283, 290, 296, 303, 317, 332, 358, 374, 375, 376, 386, 393], "proport": [62, 66, 70, 208, 210, 215, 254, 276, 312, 334, 381, 400], "align": [62, 108, 188, 237, 254, 276, 277, 317, 376, 386, 389, 393], "where": [62, 73, 89, 94, 108, 140, 193, 210, 246, 252, 254, 270, 276, 281, 282, 291, 302, 304, 305, 307, 313, 369, 378, 390, 391, 399], "final": [62, 108, 254, 276], "dictat": [62, 108, 254, 276, 324], "argument": [62, 63, 84, 108, 188, 254, 276, 277, 290, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 383, 390, 391, 400], "23": [63, 84, 123, 149, 188, 277, 299, 315, 316, 330, 334], "atten": [63, 84, 188, 277, 294, 295, 297, 298, 299, 400], "specif": [63, 84, 105, 113, 168, 188, 277, 385, 397], "odd": [63, 84, 148, 188, 251, 277, 296, 299, 372], "even": [63, 84, 148, 188, 251, 277, 294, 295, 296, 297, 298, 299, 313, 322, 364, 367], "stopband": [63, 84, 188, 277, 299, 364, 367], "a_": [63, 84, 188, 217, 218, 219, 221, 277, 299], "stop": [63, 84, 188, 277, 299], "closedlooppl": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 381, 395, 400], "defin": [66, 89, 107, 123, 127, 128, 129, 131, 135, 149, 152, 153, 154, 156, 160, 162, 178, 281, 291, 302, 313, 353, 364, 367, 378, 381, 391, 399], "close": [66, 73, 75, 381, 399, 400], "loop": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 208, 209, 210, 211, 212, 213, 214, 215, 216, 229, 230, 231, 232, 233, 234, 235, 236, 398, 399, 400], "pll": [66, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 381, 399, 400], "analysi": [66, 73, 383, 395, 399, 400], "bb": [66, 394, 395], "phase_err": [66, 395], "ped": [66, 72, 73, 210, 217, 221, 222, 223, 239, 240, 241, 242, 243, 244, 381, 395, 399, 400], "lf": [66, 395], "phase_est": [66, 395], "lo": [66, 395], "nco": [66, 69, 73, 210, 229, 230, 231, 232, 233, 234, 235, 236, 381, 395, 399, 400], "local": [66, 382, 395], "oscil": [66, 229, 231, 381, 395, 399, 400], "numer": [66, 229, 231, 325, 326, 381, 391, 395, 399, 400], "transfer": [66, 75, 107, 162, 163, 190, 208, 313, 364, 367, 390, 391, 395], "2nd": [66, 208, 210, 381, 395, 400], "plu": [66, 208, 210, 381, 400], "h_": [66, 87, 395], "k_1": [66, 70, 208, 215, 395], "k_2": [66, 71, 208, 213, 395], "frac": [66, 74, 76, 79, 80, 87, 95, 96, 97, 99, 107, 111, 147, 162, 178, 188, 190, 208, 227, 237, 245, 251, 270, 271, 272, 277, 279, 280, 281, 282, 291, 292, 304, 305, 307, 308, 310, 312, 313, 321, 323, 328, 333, 334, 337, 364, 366, 367, 369, 370, 377, 378, 386, 393, 395], "k_0": [66, 69, 73, 210, 229, 231, 232, 395], "k_p": [66, 72, 73, 210, 217, 224, 239, 244, 395], "appendix": [66, 208, 313, 364, 367], "lock": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 208, 209, 210, 211, 212, 213, 214, 215, 216, 229, 230, 231, 232, 233, 234, 235, 236, 398, 399], "see": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 86, 88, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 116, 118, 119, 121, 122, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 161, 162, 163, 164, 165, 166, 167, 169, 171, 172, 173, 174, 176, 177, 179, 191, 208, 209, 210, 211, 212, 213, 214, 215, 216, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 245, 248, 250, 251, 266, 275, 290, 294, 295, 297, 298, 303, 313, 318, 329, 343, 344, 345, 346, 349, 350, 356, 360, 364, 365, 367, 399], "noise_bandwidth": [66, 73, 208, 210, 214], "damping_factor": [66, 73, 208, 210, 211], "phase_lock_tim": [66, 80], "frequency_lock_tim": [66, 74], "freq_offset": [66, 74, 76, 326], "lock_tim": [66, 76, 395], "phase_error_vari": [66, 79], "cn0": [66, 79], "varianc": [66, 79, 95, 97, 99, 272, 274, 281, 315, 316, 327, 329, 330, 331, 341, 371, 386, 393], "steadi": [66, 79], "sample_r": [66, 73, 81, 83, 113, 114, 117, 137, 168, 187, 275, 303, 311, 328, 342, 343, 344, 346, 348, 349, 350, 351, 352, 355, 358, 372, 373, 375, 389, 395, 397], "bnt": [66, 68, 395], "b_n": [66, 67, 68, 73, 74, 76, 79, 80, 208, 210, 214], "bn": [66, 67], "hz": [66, 67, 73, 74, 76, 79, 113, 114, 117, 168, 210, 214, 282, 290, 291, 293, 303, 311, 312, 313, 323, 325, 326, 328, 334, 372, 373, 377, 389], "zeta": [66, 73, 82, 208, 210, 211], "damp": [66, 73, 82, 208, 210, 211, 395], "k0": [66, 69, 73, 210, 229, 395], "kp": [66, 72, 73, 210, 395], "k1": [66, 70, 208, 395], "k2": [66, 71, 208, 395], "omega_n": [66, 78, 395], "natur": [66, 78], "radian": [66, 77, 78, 79, 217, 220, 222, 223, 229, 230, 231, 233, 234, 239, 240, 242, 243, 251, 395], "omega_3db": [66, 77], "omega_": [66, 77], "textrm": [66, 77], "period": [73, 210, 214, 225, 378], "second": [73, 74, 76, 80, 100, 208, 210, 214, 290, 291, 313, 325, 326, 383, 386, 393], "critic": [73, 82, 210, 211, 395], "underdamp": [73, 82, 210, 211], "overdamp": [73, 82, 210, 211], "ted": [73, 210], "t_": [74, 76, 80, 123, 138, 149, 313, 364, 367, 397], "fl": [74, 76], "take": [74, 76, 80, 382], "onto": [74, 76, 80], "equat": [74, 76, 77, 78, 79, 80, 96, 97, 99, 162, 190, 237, 245, 251, 271, 272, 274, 279, 312, 337], "39": 74, "pl": [76, 80, 383], "38": 76, "34": [77, 315, 316, 358], "33": [78, 315, 316], "sigma_": [79, 95, 96, 98], "theta_": [79, 217, 220, 239, 240], "carrier": [79, 245], "43": 79, "40": [80, 87, 137, 187, 275, 303, 329], "less": [82, 279, 327, 337], "greater": [82, 364, 367], "prevent": [83, 187, 237, 251, 275], "need": [83, 187, 275, 382, 383, 385], "done": [83, 329, 382], "case": [83, 187, 251, 270, 275, 291, 364, 367], "3x": [83, 123, 124, 127, 128, 129, 130, 132, 133, 134, 135, 136, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 161, 187, 286], "summat": [83, 253], "co": [83, 137, 187, 229, 275, 328, 364, 367], "64": [83, 147, 296, 320, 391], "280": 83, "marker": [83, 137, 187, 229, 275, 340, 357, 358, 389, 390, 391, 396], "o": [83, 137, 187, 275, 389], "y1": [83, 137, 187, 275, 321], "70": [83, 320], "y2": [83, 137, 187, 275, 321], "140": [83, 303], "y3": [83, 137, 187, 275], "210": 83, "y4": [83, 137, 187, 275], "y5": [83, 137, 187, 275], "y_1": [83, 187, 275, 321], "y_2": [83, 187, 275, 321, 386], "y_3": [83, 187, 275], "y_4": [83, 187, 275], "y_5": [83, 187, 275], "win": 87, "quad": [87, 227], "le": [87, 148, 227, 279, 296, 328, 334, 337, 364, 367], "truncat": 87, "same": [87, 108, 123, 134, 136, 149, 159, 161, 217, 239, 290, 342, 358, 390], "deriv": 87, "fir_2": 87, "fir_6": 87, "fir_10": 87, "fir_20": 87, "fir_40": 87, "fir_80": 87, "y_axi": [87, 346, 348, 355, 400], "ab": [87, 134, 159, 178, 283, 315, 316, 317, 322, 376, 378, 386, 393, 397], "linestyl": [87, 178, 217, 225, 237, 239, 245, 251, 279, 327, 337, 340, 352, 357, 359, 378, 386, 389, 393, 396, 397], "theori": [87, 95, 96, 97, 99, 178, 270, 271, 272, 274, 279, 327, 386, 393], "lfloor": [87, 107, 111, 147, 227], "rfloor": [87, 107, 111, 147, 227], "blackman": [88, 294, 295, 297, 298], "scipi": [88, 107, 162, 294, 295, 297, 298, 341, 348, 355, 386, 391, 393, 397, 399], "definit": [88, 343, 344, 345, 346, 349, 350, 356, 360], "get_window": 88, "detail": 88, "discretememorylesschannel": [89, 90, 91, 92, 93, 94, 380, 400], "memoryless": [89, 94, 302, 380, 399], "dmc": [89, 90, 91, 92, 94, 302, 380, 399, 400], "max_": 89, "mutual": [89, 358], "inform": [89, 245, 304, 305, 307, 317, 369, 376], "pr": [94, 302], "y_j": [94, 302], "assum": [94, 95, 270, 281, 302, 332, 358, 374], "ldot": [94, 302], "hypothes": [95, 270], "w": [95, 270, 281, 383, 386, 389, 390, 391, 393, 394, 395, 396, 397], "sigma": [95, 96, 97, 98, 99, 270, 271, 272, 273, 274, 281, 282, 315, 316, 330, 331, 371, 386, 393], "test": [95, 270, 383, 384, 399, 400], "limits_": [95, 107, 162, 270], "left": [95, 96, 97, 123, 147, 149, 162, 237, 239, 245, 251, 270, 271, 272, 274, 279, 280, 281, 282, 291, 306, 309, 310, 312, 313, 315, 316, 321, 327, 328, 329, 330, 331, 334, 335, 336, 337, 364, 366, 367, 371, 378, 386, 393], "right": [95, 96, 97, 123, 149, 162, 237, 239, 245, 251, 270, 271, 272, 274, 279, 280, 281, 282, 291, 306, 309, 310, 312, 313, 315, 316, 321, 327, 328, 329, 330, 331, 334, 335, 336, 337, 364, 366, 367, 371, 378, 386, 393], "sim": [95, 270, 281, 383, 386, 393], "chi_": [95, 96, 97, 386, 393], "2n": [95, 96, 97, 286], "detect": [95, 96, 97, 98, 99, 217, 220, 222, 223, 239, 240, 242, 243, 270, 271, 272, 273, 274, 279, 290, 291, 315, 316, 327, 330, 331, 337, 341, 347, 353, 371, 399, 400], "q_": [95, 96, 97, 99], "chi_n": [95, 96, 97, 99], "steven": [95, 96, 97, 99, 270, 271, 272, 274], "kai": [95, 96, 97, 99, 270, 271, 272, 274], "fundament": [95, 96, 97, 99, 270, 271, 272, 274], "coher": [96, 97, 98, 99, 279, 290, 291, 315, 316, 325, 326, 327, 329, 330, 331, 337, 371, 387, 399, 400], "For": [96, 97, 99, 271, 272, 274, 281, 286, 303, 312, 375, 382, 390], "1e": [96, 271, 279, 291, 311, 315, 316, 325, 327, 329, 330, 337, 341, 371, 386, 393, 396], "logspac": [98, 113, 168, 273, 279, 290, 327, 329, 330], "theoret": [98, 247, 249, 279, 327, 330, 331, 337, 339, 354, 371, 386, 393, 396, 399, 400], "singl": [98, 113, 168, 247, 249, 279, 342, 395], "variou": [98, 147, 279, 290, 291, 325, 326, 329, 330, 337, 383, 397], "1_000": [98, 190, 227, 281, 311, 312, 321, 340, 342, 368, 394], "000": [98, 311, 342], "5_000": 98, "measur": [100, 102, 280, 281, 292, 293, 306, 309, 310, 319, 323, 333, 335, 336, 366, 386, 393, 395, 399, 400], "accumul": [100, 178, 229, 230, 231, 233, 395, 400], "contain": [100, 181, 281, 320], "add": [100, 102, 105, 225, 237, 245, 251, 281, 311, 318, 340, 342, 352, 365, 368, 380, 396, 401], "total": [100, 313, 318, 364, 365, 367, 397], "count": [100, 103, 310], "error_r": [100, 104, 105, 396], "can": [100, 102, 103, 104, 106, 208, 225, 253, 281, 310, 313, 317, 332, 342, 345, 348, 355, 376, 384, 386, 390, 391, 393, 396, 399, 401], "obtain": 100, "tabul": [100, 101], "ascend": [100, 105], "other": [102, 103, 104, 106, 324, 389, 401], "quantiti": [102, 103, 104, 105, 106], "user": [102, 103, 104, 106, 390, 391], "caution": [102, 103, 104, 106], "instanc": [102, 103, 104, 106, 225], "whatev": 105, "wa": [105, 282], "wrapper": [107, 162], "convolv": 107, "support": [107, 162, 400], "sum_": [107, 162, 272, 274, 280, 281, 282, 290, 306, 309, 310, 319, 329, 366, 386, 393], "valid": [108, 312, 324, 342, 351, 352, 378], "remain": [112, 141, 303, 332], "whole": [113, 168, 397], "decad": [113, 168, 343, 344, 346, 349, 350, 390, 395], "point": [113, 168, 222, 223, 242, 243, 329, 340, 341, 348, 355], "endpoint": [113, 168, 391], "includ": [113, 168, 383, 384, 385, 399], "max_f": [113, 168], "log10": [113, 168, 397], "evenli": [113, 168], "00000000e": [113, 168, 250, 251, 391], "00": [113, 168, 250, 251, 386, 391, 393], "76562500e": [113, 168], "04": [113, 168, 320, 391, 393], "95312500e": [113, 168], "03": [113, 168, 320, 386, 391, 393], "97070312e": [113, 168], "98046875e": [113, 168], "99023438e": [113, 168], "95337172": 113, "30202676j": 113, "8178049": 113, "5759632j": 113, "6058636": 113, "79630028j": 113, "rad": [113, 168], "0000000000000002": 113, "0j": [113, 168, 226, 238, 246, 252], "sever": [113, 168, 322], "200": [113, 168, 291, 303, 326, 352, 396], "300": [113, 168, 291, 326, 372, 373], "400": [113, 168, 291, 303, 326], "00391660e": 113, "14686183e": 113, "17j": 113, "53081763e": 113, "88127210e": 113, "62720131e": 113, "03715849e": 113, "83622458e": 113, "27280811e": 113, "u": [120, 175, 356, 378, 379, 390, 391], "regist": [123, 124, 135, 149, 150, 160, 286, 324, 379], "reciproc": [123, 127, 128, 149, 152, 153], "recurr": [123, 127, 131, 135, 149, 152, 156, 160, 286], "y_t": [123, 149, 286], "y_": [123, 149, 286], "t_0": [123, 149], "t_1": [123, 149], "addition": [123, 399], "next": [123, 134, 149, 159, 384], "revers": [123, 127, 128, 134, 152, 153, 159], "gardner": [123, 149, 286], "2019": [123, 149, 286], "applic": [123, 149, 286], "cryptographi": [123, 149, 286], "berlekamp_massei": [123, 149, 286, 379, 400], "primit": [123, 149, 322, 324], "mathrm": [123, 149, 270, 283, 286, 315, 316, 317, 322, 324, 327, 329, 330, 331, 371, 376, 386, 393], "print": [123, 124, 136, 149, 150, 161, 286, 320, 386, 389, 390, 391, 393, 395], "initial_st": [123, 124, 130, 136, 149, 150, 155, 161, 286], "5x": [123, 124, 128, 136, 149, 150, 153, 161, 286], "13": [123, 134, 137, 149, 159, 180, 187, 225, 237, 245, 251, 270, 271, 272, 274, 283, 287, 290, 314, 315, 316, 327, 329, 330, 358, 361], "14": [123, 134, 137, 149, 159, 180, 225, 237, 245, 251, 271, 287, 314, 315, 316, 329, 330, 337, 361], "15": [123, 134, 137, 149, 159, 180, 217, 225, 237, 245, 251, 273, 287, 314, 315, 316, 317, 322, 330, 361, 375, 376, 386], "17": [123, 137, 149, 225, 250, 251, 310, 315, 316, 330, 334, 361, 382], "18": [123, 137, 149, 315, 316, 330, 361, 382, 396], "19": [123, 137, 149, 315, 316, 330, 361, 400], "21": [123, 149, 279, 315, 316, 327, 330, 334, 358], "10x": [123, 149], "22": [123, 149, 315, 316, 330], "24": [123, 149, 315, 316], "classmethod": [123, 124, 149, 150, 162, 163, 178, 190], "fieldarrai": [123, 124, 125, 129, 130, 133, 134, 135, 149, 150, 154, 155, 158, 159, 160, 283, 286, 317, 322, 324, 376, 379, 383], "self": [123, 124, 149, 150, 162, 163, 178, 190], "to_galois_lfsr": [123, 136], "glfsr": [123, 136, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 286, 379, 400], "type": [123, 129, 134, 149, 154, 159, 286, 293, 310, 315, 316, 323, 327, 329, 330, 331, 332, 348, 353, 355, 371, 374, 383, 400], "subclass": [123, 129, 149, 154], "arithmet": [123, 128, 129, 149, 153, 154], "coeff": [124, 135, 150, 160], "irreducible_poli": [126, 151], "unaffect": [130, 155], "minim": [131, 156, 279, 283, 286, 379], "modifi": [132, 133, 157, 158, 400], "view": [132, 157, 282, 383, 399], "direct": [134, 159, 217, 223, 239, 243, 400], "backward": [134, 159, 178, 179, 400, 401], "end": [134, 159, 237, 251, 270, 342, 364, 367, 372, 383, 386, 393], "iter": [134, 159], "fibonacci_lfsr": [136, 161], "galois_lfsr": [136, 161], "ident": [136, 161], "structur": 137, "angular": 137, "179": 137, "farrow1": 137, "quadrat": [137, 400], "farrow2": 137, "cubic": 137, "farrow3": 137, "quartic": [137, 400], "farrow4": 137, "compar": [137, 190, 217, 227, 239, 247, 249, 279, 290, 294, 295, 296, 297, 298, 315, 316, 324, 327, 330, 337, 345, 386, 393, 397], "vari": [137, 230], "xlim": [137, 303, 315, 316, 375, 394, 395, 397], "comparison": [137, 217, 239, 279, 337, 383], "run": [137, 382], "30": [137, 187, 190, 225, 227, 237, 245, 251, 275, 303, 315, 316, 329, 343, 345, 356, 372, 373, 391, 400], "concaten": [137, 391], "should": [143, 217, 225, 384], "three": [143, 389, 397], "21719": 147, "examin": [147, 225, 237, 245, 251, 322, 329, 386, 393], "flat": [147, 296], "32": [147, 296, 315, 316, 317, 376, 389, 393], "128": 147, "loc": [147, 329, 330], "lower": [147, 225, 237, 251, 364, 367, 386, 393], "effect": 147, "outsid": [147, 391], "symmetri": 147, "about": [147, 294, 295, 358, 385], "band": 147, "worst": [147, 291], "1f": 147, "around": [147, 226, 238, 246, 252], "perfectli": 147, "exactli": [147, 327], "best": [148, 296], "append": [148, 296, 372, 394], "c_2": 149, "26": [149, 315, 316, 382, 400], "to_fibonacci_lfsr": [149, 161], "lfilter": 162, "b_i": [162, 165, 167, 178, 190, 343, 344, 345, 346, 349, 350, 356, 360, 391], "a_j": [162, 165, 166, 178, 190, 343, 344, 345, 346, 349, 350, 356, 360, 391], "These": [162, 237, 245, 251, 291, 359, 384, 395], "a_0": 162, "zerospol": [162, 163, 168, 178, 190, 343, 344, 345, 346, 349, 350, 356, 360, 391], "b_tap": [162, 167, 178, 190, 391], "a_tap": [162, 166, 178, 190, 391], "conj": [168, 343, 344, 345, 346, 349, 350, 356, 360, 391, 395], "4722987": 168, "47271105": 168, "0041658j": 168, "47394825": 168, "00830241j": 168, "47601067": 168, "01238051j": 168, "472298696877605": 168, "36961426": 168, "9678537j": 168, "57338213": 168, "77694738j": 168, "52496713": 168, "3885743j": 168, "51520024": 168, "1706839j": 168, "accordingli": 178, "dc": [178, 296], "trapezoid": [178, 179, 400], "forward": [178, 179, 229, 236, 400], "iir_back": 178, "iir_trap": 178, "iir_forw": 178, "y_back": 178, "y_trap": 178, "y_forw": 178, "height": 179, "mapsto": [181, 185, 186, 192, 193, 206, 225, 237, 245, 250, 251, 357], "th": [181, 185, 186], "place": [181, 185, 186], "recommend": 187, "wai": [187, 384], "zoh": [187, 188, 189, 275, 277, 278], "matlab": [187, 188, 189, 275, 277, 278, 399], "2p": [188, 277], "ramp": [188, 208, 277], "advanc": [188, 277], "approxim": [190, 191, 279, 327, 337, 399, 400], "rememb": 190, "scale": [190, 217, 315, 316, 343, 344, 346, 348, 349, 350, 355, 386, 390, 391, 393], "\u03b1": 190, "35": [190, 227, 315, 316, 395], "y_fir": [190, 227], "y_iir": [190, 227], "map_symbol": [192, 198, 225, 237, 245, 251, 281, 310, 311, 321, 340, 368, 394, 395, 396, 400], "decide_symbol": [192, 196, 225, 237, 245, 251, 395, 396, 400], "a_tild": [192, 196, 225, 237, 245, 251, 395, 396], "mle": [192, 196, 225, 237, 245, 251], "mathbb": [192, 193, 206, 225, 237, 245, 250, 251, 282, 357, 378], "roll": [193, 238, 246, 252, 378, 397], "off": [193, 238, 246, 252], "loopfilt": [208, 209, 210, 211, 212, 213, 214, 215, 216, 381, 395, 400], "ppi": [208, 210, 381], "track": 208, "constant": [208, 225, 229, 231, 233, 329, 348, 355, 386, 391, 393, 395], "cannot": [208, 329], "chirp": 208, "proportional_gain": [208, 215], "integral_gain": [208, 213], "underli": [208, 212], "mlped": [217, 218, 219, 220, 221, 222, 223, 224, 381, 395, 400], "ml": [217, 221, 381, 395], "aid": [217, 222, 239, 242], "known": [217, 220, 239, 240, 281, 291, 317, 376], "da": [217, 239], "im": 217, "re": [217, 270, 315, 316, 327, 329, 330, 331, 371, 386, 393], "qpsk": [217, 237, 239, 245, 247, 248, 249, 251, 281, 310, 311, 339, 340, 342, 354, 357, 358, 368, 395, 399, 400], "a_rx": 217, "a_ref": 217, "da_error": [217, 239], "data_aided_error": [217, 222, 239, 242], "dd_error": [217, 239], "decision_directed_error": [217, 223, 239, 243], "grid": [217, 239, 359], "observ": [217, 239, 296, 330, 331, 334, 342, 371], "slope": [217, 239], "rx": [217, 218, 221], "veri": [217, 399], "becaus": [217, 317, 327, 376], "unambigu": [217, 239], "a_receiv": [217, 218, 221], "a_refer": [217, 219, 221], "simul": [217, 222, 223, 239, 242, 243, 396, 399], "scheme": [217, 222, 223, 225, 237, 239, 242, 243, 245, 251, 400], "modem": [222, 223, 225, 237, 242, 243, 245, 251], "n_point": [222, 223, 242, 243], "similar": [225, 237, 251, 291, 397], "One": [225, 237, 251, 397], "distinct": [225, 237, 251], "result": [225, 237, 251, 280, 306, 312, 334, 335, 336, 364, 366, 367, 386, 393, 396], "envelop": [225, 390, 391], "consid": [225, 320], "cpfsk": 225, "45": [225, 226, 237, 238, 245, 248, 281, 310, 311, 321, 328, 340, 342, 357, 358, 368, 394, 395, 396], "uint8": [225, 237, 245, 251, 332, 374], "complex_symbol": [225, 237, 245, 251], "70710678": [225, 237, 245], "70710678j": [225, 237, 245], "tx_sampl": [225, 237, 245, 251, 342], "50": [225, 237, 245, 251, 293, 323, 326, 338, 357, 358, 372, 373, 389, 394], "like": [225, 384, 399, 400], "figsiz": [225, 237, 245, 251, 342, 343, 359, 390, 391, 395], "suptitl": [225, 237, 245, 251, 342, 395, 396], "noiseless": [225, 237, 245, 251, 310], "trajectori": 225, "although": 225, "lead": [225, 321, 396], "spectral": [225, 303, 348, 394, 397], "gmsk": 225, "rx_sampl": [225, 237, 245, 251, 342], "manual": [225, 237, 245, 251, 383, 385], "mf": [225, 237, 245, 251, 342], "mf_sampl": [225, 237, 245, 251], "noisi": [225, 237, 245, 251, 281], "last": [225, 237, 332, 382], "rx_symbol": [225, 237, 245, 251], "rx_complex_symbol": [225, 237, 245, 251], "_": [225, 237, 245, 251, 279, 290, 310, 329, 386, 393], "absolut": [226, 229, 231, 234, 238, 252, 282, 386, 393], "start": [226, 238, 246, 252, 382], "go": [226, 238, 246, 252], "counter": [226, 238, 246, 252], "clockwis": [226, 238, 246, 252], "circl": [226, 238, 246, 252, 391], "increment": [229, 230, 231, 233, 395], "sin": [229, 281, 291, 364, 367, 372], "Then": 229, "fsk": 229, "60": [229, 294, 295, 297, 298, 397], "repeat": 229, "cp": 229, "57": 229, "bpsk": [229, 247, 249, 339, 354, 394], "format": [230, 283, 317, 322, 324, 376, 400], "option": [230, 343, 344, 346, 348, 349, 350, 355, 400], "convent": [237, 251, 383], "independ": 237, "apart": 237, "taken": [237, 245, 251, 253], "jq": 237, "begin": [237, 251, 270, 342, 364, 367, 386, 393], "nyquist": [237, 245, 251, 294, 295, 297, 298, 303, 342, 375, 397], "isi": [237, 245, 251, 342], "present": [237, 245, 251, 386, 393], "persist": [237, 245, 251, 340, 342, 352, 396, 400], "cascad": [237, 245, 251, 342], "therefor": [237, 245, 251, 397], "remov": [237, 245, 251, 328, 348, 355, 400], "without": [237, 245, 251, 400], "heurist": [239, 381, 395, 400], "dd": [239, 395, 400], "encod": [245, 247, 249, 300, 301, 399], "ge": [246, 252, 279, 337, 364, 367], "were": [247, 249], "simon": [247, 249], "alouini": [247, 249], "fade": [247, 249], "optimum": [247, 249], "psk8": [247, 249, 339, 354, 396], "psk16": [247, 249, 339, 354, 396], "de": [247, 249, 395, 400], "se": [249, 354], "00j": [250, 251], "07106781e": [250, 251], "01j": [250, 251], "12323400e": [250, 251], "83697020e": 250, "22464680e": [250, 251], "16j": [250, 251], "annot": [250, 341, 357, 383, 400], "rotat": [251, 328, 395], "rel": [251, 378, 397], "2m": 251, "displaystyl": [251, 364, 367], "pi4_qpsk": 251, "partit": [253, 255, 259, 262], "befor": [264, 267, 327, 329, 395, 401], "decomposit": [264, 267, 400], "complementari": [268, 269], "cumul": [268, 269], "exce": 268, "exceed": [268, 269], "15865525393145707": [268, 269], "158655": [268, 269], "0000010494310452": [268, 269], "perfect": 270, "knowledg": 270, "cn": [270, 281, 386, 393], "sqrt": [270, 271, 272, 274, 279, 309, 310, 313, 315, 316, 366, 367, 378, 386, 393, 394, 395, 397], "____": 275, "combin": [279, 327, 337], "ln": [279, 313], "62": [279, 320], "log_": [279, 280, 290, 291, 293, 306, 312, 333, 335, 336, 337, 366], "54": [279, 320], "44": 279, "12ab": 279, "7b": 279, "claim": [279, 337], "leq": [279, 337], "8096": 279, "law": [279, 315, 316, 327, 329, 330, 331, 337, 371, 400], "find": [279, 286, 379], "wide": 279, "mark": [279, 337], "richard": [279, 337], "form": 279, "www": [279, 294, 295, 296, 297, 298, 299, 313, 317, 376], "mathwork": [279, 294, 295, 296, 297, 298, 299, 313, 317, 376], "com": [279, 294, 295, 296, 297, 298, 299, 313, 317, 376, 383, 384], "help": [279, 294, 295, 296, 297, 298, 299, 313, 317, 376], "html": [279, 294, 295, 296, 297, 298, 299, 313, 317, 376, 382], "semilogx": [279, 290, 327, 329, 337, 353], "gca": [279, 315, 316, 327, 386, 389, 393, 396], "set_prop_cycl": [279, 315, 316, 327, 386, 389, 393, 396], "nfrom": [279, 327], "solid": [279, 327, 352, 358], "dash": [279, 327, 358], "against": [279, 337], "post": [279, 337], "fig": [279, 337], "ax": [279, 280, 306, 309, 319, 333, 335, 337, 359, 400], "subplot": [279, 321, 337, 342, 395, 396], "sharei": [279, 337], "31": [279, 315, 316, 337, 390], "astyp": [279, 329, 337], "95": [279, 310, 337], "snr_ref": [279, 329, 337, 393], "set_xlabel": [279, 337], "set_ylabel": [279, 337], "g_": [279, 329, 337, 393], "set_titl": [279, 337], "g_nc": [279, 329, 393], "axi": [280, 306, 309, 319, 333, 335, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 355, 357, 358, 386, 389, 393, 400], "avg": [280, 281, 333], "along": [280, 286, 306, 309, 319, 333, 335, 400], "entir": [280, 306, 309, 319, 333, 335], "decibel": [280, 293, 306, 323, 335, 336, 366, 399, 400], "ad": [281, 340, 342, 352, 383, 399, 400], "explicitli": [281, 329], "set": [281, 312, 317, 322, 340, 348, 352, 355, 357, 359, 376, 383, 385, 391], "zorder": [281, 311, 368], "infti": [281, 282], "nand": 281, "monoton": 282, "limit": [282, 340, 357, 396], "At": 282, "occur": [282, 291], "59": 282, "shannon": 282, "semilogi": [282, 339, 353, 354], "barker_cod": [283, 379, 400], "bipolar": [283, 317, 322, 324, 376, 400], "barker": [283, 379, 399, 400], "ideal": [283, 396], "autocorrel": [283, 317, 322, 376, 378], "sidelob": [283, 294, 295, 297, 298, 317, 364, 367, 376, 378], "seq": 283, "corr": [283, 378], "lag": [283, 317, 322, 376, 378], "berlekamp": [286, 400], "massei": [286, 400], "algorithm": [286, 400], "depend": [286, 382, 383, 385, 400], "least": 286, "jason": 286, "sach": 286, "uniniti": 286, "vi": 286, "sing": 286, "jame": 286, "synthesi": [286, 399, 400], "bch": 286, "below": [286, 382, 390, 391], "reproduc": 286, "binary_cod": [287, 379, 400], "product": [290, 313, 397], "t_c": [290, 291, 325, 326], "b_c": [290, 291], "unitless": 290, "n_c": [290, 315, 316, 327, 330, 331, 371, 386, 400], "g_c": [290, 386], "reduct": [290, 291, 386, 393], "simpli": 290, "010299956639812": 290, "010299956639813": 290, "due": [291, 329, 397], "dure": 291, "scallop": 291, "sinc": [291, 325, 326, 334, 382, 396], "235": [291, 326], "8038919141626675": 291, "mhz": [291, 293, 323], "\u03bc": 291, "25e": 291, "1e6": [291, 396], "9120975839632417": 291, "dft": 291, "commonli": 291, "suppos": [291, 327], "long": [291, 383], "khz": 291, "500": [291, 326, 372, 373, 395], "unwindow": 291, "well": 291, "9223975406030527": 291, "pad": 291, "twice": 291, "14335017": 291, "57922366": 291, "32626966": 291, "42007077": 291, "92239754": 291, "2e3": [291, 312], "5e": [291, 311, 325], "2e": [291, 325, 386, 393], "55": [291, 334, 358, 400], "1e3": [291, 312, 325, 326, 328, 372], "cf": 292, "v_": [292, 293, 323, 336, 366], "voltag": [293, 323, 336, 366, 386, 393, 399], "x_": [293, 323], "77": [293, 320, 323], "50e6": 293, "76": [293, 320, 386], "98970004336019": 293, "mw": [293, 323], "dbm": [293, 323], "dbv": [293, 323], "020599913279624": 293, "center_freq": [294, 295], "hann": [294, 295, 297, 298, 348, 355], "chebyshev": [294, 295, 297, 298], "side": [294, 295, 313, 343, 344, 346, 348, 349, 350, 355, 390, 391, 394, 397], "No": [294, 295, 297, 298], "blackmanharri": [294, 295, 297, 298], "chebwin": [294, 295, 297, 298], "dsp": [294, 295, 296, 297, 298, 299, 399], "designbandpassfir": 294, "h_ham": [294, 295, 297, 298], "h_hann": [294, 295, 297, 298], "h_blackman": [294, 295, 297, 298], "h_blackman_harri": [294, 295, 297, 298], "h_chebyshev": [294, 295, 297, 298], "h_kaiser": [294, 295, 297, 298], "larger": [295, 318, 321, 340, 357, 365], "designbandstopfir": 295, "tau": 296, "l_": 296, "designfracdelayfir": 296, "h_8": [296, 364, 367], "h_16": [296, 364, 367], "h_32": 296, "h_64": 296, "cutoff_freq": [297, 298], "cutoff": [297, 298], "f_c": [297, 298], "designhighpassfir": 297, "designlowpassfir": 298, "designmultiratefir": 299, "oplu": [300, 301, 319], "uncod": 301, "doe": [303, 375], "anti": [303, 375, 400], "alias": [303, 375, 400], "x1": 303, "x2": 303, "130": 303, "x3": [303, 378], "spectrum": [303, 343, 344, 346, 348, 349, 350, 355, 372, 373, 375], "content": 303, "abov": [303, 375], "fold": 303, "cw": 303, "unalias": 303, "2048": [303, 372, 373, 375, 394], "qam": [304, 305, 307, 369], "249387366082999": [304, 305], "020599913279625": [304, 370], "7506126339170005": [307, 369], "979400086720376": [307, 308], "norm": [310, 313, 318, 352, 364, 365, 367, 386, 393], "sourc": 310, "max": [310, 335, 336, 386, 393], "percentil": [310, 355], "94728530044342": 310, "897607564282385": 310, "999460624632469": 310, "95th": 310, "183707227542744": 310, "inst_evm": 310, "hist": [310, 315, 316, 386, 393], "histogram": [310, 340, 342, 352], "frequency_offset": [311, 380, 400], "freq_rat": 311, "cycl": [311, 358], "deg": [311, 321, 395], "path": [312, 399], "meter": [312, 334, 377], "transmitt": 312, "far": 312, "impli": 312, "possibl": [312, 399], "km": 312, "link": [312, 399, 400], "ghz": [312, 334, 377], "1e9": [312, 334, 377], "92": 312, "44778322188337": 312, "doubl": [312, 334], "98": 312, "468383135163": 312, "2e9": 312, "up": [312, 383], "thought": [313, 401], "smaller": [313, 329, 341, 364, 367, 397], "wider": 313, "gaussdesign": 313, "h_0p1": [313, 364, 367], "h_0p2": 313, "h_0p3": 313, "gray_cod": [314, 379, 400], "affect": [315, 316, 327, 329, 330, 331, 364, 367, 371], "allow": [315, 316, 327, 330, 331, 371, 384, 385, 399], "a2": [315, 316, 386, 393], "1622776601683795": [315, 316], "x_h0": [315, 316, 386, 393], "rng": [315, 316, 386, 393], "100_000": [315, 316, 340, 386, 393, 396], "x_h1": [315, 316, 386, 393], "9061938024368232": [315, 316, 330, 371], "8912709229530473": [315, 316], "z_h0": [315, 316], "z_h1": [315, 316], "histtyp": [315, 316, 386, 393], "5174271293851465": [315, 316, 330, 371], "7229165664874564": [315, 316], "302585092994046": [315, 316, 330, 371], "7229165664874556": [315, 316], "2815515655446004": [315, 316], "6903095079298097": [315, 316], "27": [315, 316, 400], "28": [315, 316, 395, 400], "29": [315, 316, 390], "6448536269514744": [315, 316], "5533811909871471": [315, 316], "70554345409542": [315, 316], "5533811909871473": [315, 316], "36": [315, 316], "37": [315, 316], "hadamard_cod": [317, 376, 379, 400], "hadamard": [317, 376, 379, 399, 400], "comm": [317, 376], "hadamardcod": 317, "walsh": [317, 376, 379, 399, 400], "thei": [317, 324, 376, 401], "walsh_cod": [317, 376, 379, 400], "cross": [317, 322, 376, 378], "seq1": [317, 322, 376], "seq2": [317, 322, 376], "seq3": [317, 322, 376], "quit": [317, 376], "larg": [317, 322, 376, 383], "misalign": [317, 376], "precis": [317, 329, 376], "xcorr12": [317, 322, 376], "xcorr13": [317, 322, 376], "xcorr23": [317, 322, 376], "uniform": [317, 376], "fact": [317, 376], "high": [317, 376], "acorr1": [317, 376], "acorr2": [317, 376], "acorr3": [317, 376], "reason": [318, 365, 382], "h_half_sin": 318, "displai": [320, 340, 343, 344, 346, 348, 349, 350, 355, 357], "line": [320, 358, 359, 383, 394], "quick": 320, "brown": 320, "fox": 320, "jump": 320, "lazi": 320, "dog": 320, "00000000": 320, "68": 320, "65": 320, "71": 320, "69": 320, "63": [320, 322], "6b": 320, "72": 320, "6f": 320, "6e": 320, "00000010": 320, "66": 320, "78": 320, "6a": 320, "6d": 320, "73": 320, "74": 320, "00000020": 320, "6c": 320, "61": 320, "7a": 320, "79": [320, 337], "67": 320, "he": 320, "02": [320, 391, 395], "00000004": 320, "05": [320, 389, 391, 395], "06": [320, 329, 341], "07": 320, "08": 320, "00000008": 320, "09": 320, "0a": 320, "iq_imbal": [321, 380, 400], "iq": [321, 380, 399], "imbal": [321, 380, 399], "compon": [321, 372, 373, 375], "g_i": 321, "180": 321, "g_q": 321, "x_q": 321, "horizont": 321, "stretch": 321, "while": [321, 397], "vertic": 321, "northwest": 321, "northeast": 321, "kasami_cod": [322, 379, 400], "kasami": [322, 379, 399, 400], "small": [322, 397], "There": [322, 401], "acorr12": 322, "acorr13": 322, "acorr23": 322, "50118723": 323, "36272725": 323, "9952623149688795": 323, "m_sequenc": [324, 379, 400], "maxim": 324, "interpret": 324, "maximum_length_sequ": 324, "just": 324, "6560": 324, "integration_tim": 325, "techniqu": [325, 326], "442": 325, "2433896262681": 325, "3e": 325, "24338963": 325, "221": 325, "12169481": 325, "147": 325, "41446321": 325, "10e": [325, 386], "0018818867640235891": 326, "inf": 326, "00442243": 326, "00221122": 326, "00147414": 326, "00110561": 326, "00088449": 326, "183490056794499": 327, "now": [327, 372, 373, 389, 400], "267486807285799": 327, "732513192714245": 327, "satisfi": 328, "extrapol": 329, "necessari": [329, 382], "slightli": 329, "referenc": 329, "solv": 329, "lack": 329, "nan": 329, "499445060713011": 329, "666092814306324": 329, "410342926869486": 329, "parameter": 329, "51": 329, "upper": [329, 330], "0e": [329, 330], "7630284641923553": 330, "5414214845561176": 330, "541421484556116": 330, "07864960352514258": 331, "3678794411714425": 331, "36787944117144245": 331, "dtypelik": [332, 374], "signific": [332, 374], "enough": 332, "fill": 332, "smallest": 332, "unsign": 332, "diamet": 334, "eta": 334, "dbi": 334, "arcsin": 334, "83": 334, "dish": 334, "810210290266568": 334, "437435887991374": 334, "antenna": [334, 399], "we": [334, 342, 386, 393, 399], "830810203546193": 334, "529544741425365": 334, "253": 337, "46": 337, "0183": 337, "999": 337, "kwarg": [339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360], "keyword": [339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 390, 391, 400], "pyplot": [339, 340, 341, 344, 345, 346, 347, 348, 349, 350, 352, 354, 355, 356, 357, 358, 359, 360, 386, 389, 390, 391, 393, 394, 395, 396, 397], "colorbar": [340, 342, 352], "scatter": 340, "overwritten": [340, 352, 355, 357], "histogram2d": [340, 352], "pcolormesh": [340, 352, 355], "cmap": [340, 352], "rainbow": [340, 352], "show_zero": [340, 352], "stat": [341, 386, 393], "shade": [341, 355], "p_h0": 341, "p_h1": 341, "tail": 341, "longer": [341, 342, 364, 367, 372], "intersymbol": 342, "interfer": 342, "ignor": [342, 383], "transient": 342, "insight": 342, "open": [342, 399], "n_time": [343, 391], "n_freq": 343, "x_axi": [343, 344, 346, 348, 349, 350, 390, 391, 394, 395, 400], "n_t": 343, "n_f": 343, "logarithm": [343, 344, 346, 348, 349, 350, 390, 391], "h_srrc": [343, 344, 345, 346, 349, 350, 356, 360, 396], "auto": [344, 346, 348, 349, 350, 355, 400], "select": [344, 346, 348, 349, 350, 355, 383], "x_label": 347, "overlap": [348, 355, 394], "detrend": [348, 355], "median": 348, "segment": [348, 355], "256": [348, 355, 394], "trend": [348, 355], "unwrap": [350, 395], "stride": 352, "1d": 352, "collect": 352, "linecollect": 352, "linewidth": [352, 359, 378], "800": 352, "loglog": 353, "vmin": 355, "10th": 355, "vmax": 355, "100th": 355, "gouraud": 355, "represent": [357, 400], "markers": 357, "diff": [358, 394], "exclus": 358, "imaginari": 358, "share": 358, "10e3": 358, "uniformli": 358, "style": 359, "revert": 359, "rcdefault": 359, "_rc_param": 359, "rc_param": 359, "constrained_layout": 359, "h_pad": 359, "w_pad": 359, "max_open_warn": 359, "titleweight": 359, "bold": 359, "arrang": 361, "notion": 361, "demonstr": 361, "matric": 361, "000005": 362, "000000025": 362, "005": [363, 395], "000025": 363, "excess": [364, 367, 397], "narrow": [364, 367], "expens": [364, 367], "higher": [364, 367, 397], "h_0p5": [364, 367], "h_0p9": [364, 367], "h_4": [364, 367], "h_rect": [365, 397], "sample_rate_offset": [368, 380, 400], "250": [372, 373, 395], "ksp": [372, 373], "conjug": [372, 373, 391], "150": [372, 373, 396], "2f_": 373, "asymmetr": 373, "copi": 375, "mani": [376, 383], "walshcod": 376, "299792458": 377, "zadoff_chu_sequ": [378, 379, 400], "zadoff": [378, 379, 399, 400], "chu": [378, 379, 399, 400], "prime": 378, "gcd": 378, "ne": 378, "cyclic": 378, "x_u": 378, "2q": 378, "mod": 378, "e2": 378, "93chu_sequ": 378, "x_3": 378, "139": 378, "tile": 378, "x_5": 378, "x5": 378, "xcorr": 378, "sphinx": 382, "immateri": 382, "theme": 382, "store": [382, 384, 385], "txt": [382, 383, 384, 385], "some": 382, "version": [382, 384, 399, 400], "aren": 382, "resolut": 382, "minut": 382, "ci": 382, "myst": 382, "parser": 382, "updat": [382, 400], "git": [382, 384], "math": 382, "dollar": 382, "ipykernel": 382, "nb": 382, "pickleshar": 382, "switch": 382, "pip": [382, 383, 384, 385, 399], "python3": [382, 383, 384, 385, 391, 399], "built": 382, "command": [382, 383], "dirhtml": 382, "locat": [382, 385], "home": [382, 391, 397], "page": 382, "site": [382, 391], "directori": [382, 384], "get": 382, "webpag": 382, "webserv": 382, "easili": [382, 383, 385, 390, 391], "python": [382, 399, 400], "server": 382, "8080": 382, "access": 382, "web": 382, "browser": 382, "localhost": 382, "librari": [383, 384, 385, 389, 396, 399, 401], "ruff": [383, 384, 400], "lint": [383, 384], "your": [383, 385, 395], "develop": [383, 384, 385], "dev": [383, 385], "pyproject": [383, 385], "toml": [383, 384, 385], "tool": [383, 385, 399], "src": [383, 397], "extend": 383, "ipynb": 383, "exclud": 383, "build": [383, 399], "dist": 383, "_version": 383, "py": [383, 385, 391, 395, 397], "120": 383, "doc": 383, "pycodestyl": 383, "warn": 383, "pyflak": 383, "pyupgrad": 383, "flake8": 383, "bugbear": 383, "simplifi": 383, "dtz": 383, "datetimez": 383, "pydocstyl": 383, "isort": 383, "pylint": [383, 400], "npy": 383, "rule": 383, "ruf": 383, "perf": 383, "perflint": 383, "d200": 383, "fit": 383, "d212": 383, "multi": 383, "summari": 383, "e501": 383, "too": 383, "e713": 383, "e714": 383, "plr2004": 383, "magic": 383, "plr0913": 383, "plr5501": 383, "collaps": 383, "els": [383, 393, 394], "plr0912": 383, "plr0915": 383, "statement": 383, "plw0603": 383, "global": 383, "up006": 383, "pep585": 383, "render": 383, "wrong": 383, "d213": 383, "file": [383, 385], "__init__": 383, "f401": 383, "f403": 383, "googl": 383, "check": 383, "hook": 383, "config": [383, 386, 389, 390, 391, 393, 394, 395, 396, 397], "yaml": 383, "repo": [383, 384, 391, 397], "github": [383, 399], "rev": 383, "v2": 383, "id": 383, "arg": 383, "maxkb": 383, "fixer": 383, "trail": 383, "whitespac": 383, "astral": 383, "sh": 383, "v0": 383, "enabl": [383, 400], "disabl": 383, "uninstal": 383, "extens": 383, "vscode": [383, 385], "json": [383, 385], "you": [383, 384, 385, 395, 399], "edit": [383, 391], "latest": [384, 399], "releas": [384, 400], "main": [384, 397], "mhostett": [384, 400], "Or": [384, 385], "pre": 384, "To": 384, "activ": 384, "benefici": 384, "fashion": 384, "immedi": 384, "seen": 384, "upon": 384, "clone": 384, "wherev": 384, "flag": 384, "packag": [384, 391, 399], "commit": 384, "pytest": [384, 385], "cov": 384, "xdist": 384, "benchmark": 384, "ini_opt": 385, "minvers": 385, "addopt": 385, "showloc": 385, "testpath": 385, "execut": 385, "test_psk": 385, "instruct": 385, "invok": 385, "infrastructur": 385, "debug": 385, "inlinebackend": [386, 389, 390, 391, 393, 394, 395, 396, 397], "print_figure_kwarg": [386, 389, 390, 391, 393, 394, 395, 396, 397], "facecolor": [386, 389, 390, 391, 393, 394, 395, 396, 397], "inlin": [386, 389, 390, 391, 393, 394, 395, 396, 397], "widget": [386, 389, 390, 391, 393, 394, 395, 396, 397], "show": [386, 389, 390, 391, 393, 394, 395, 396, 397], "snr1": [386, 393], "snr2": [386, 393], "2f": [386, 393, 394], "00e": [386, 393], "w_1": [386, 393], "a_1": [386, 393], "sigma_1": [386, 393], "def": [386, 389, 393, 394, 396], "create_x": [386, 393], "a1": [386, 393], "sigma1": [386, 393], "x1_h0": [386, 393], "x1_h1": [386, 393], "condit": [386, 393], "x1_h0_real_theori": [386, 393], "x1_h1_real_theori": [386, 393], "min": [386, 393], "unknown": [386, 393], "common": [386, 393], "z_1": [386, 393], "z1_h0": [386, 393], "z1_h1": [386, 393], "nu": [386, 393], "chi": [386, 393], "freedom": [386, 393], "central": [386, 393], "lambda_": [386, 393], "z1_h0_theori": [386, 393], "chi2": [386, 393], "z1_h1_theori": [386, 393], "ncx2": [386, 393], "isf": [386, 393], "sf": [386, 393], "axvlin": [386, 393], "empir": [386, 393], "p_d_mea": [386, 393], "p_fa_mea": [386, 393], "11e": 386, "05e": [386, 393], "x2_h0": [386, 393], "x2_h1": [386, 393], "x2_h0_real_theori": [386, 393], "x2_h1_real_theori": [386, 393], "contigu": [386, 393], "y2_h0": 386, "lib": [386, 391, 393], "stride_trick": [386, 393], "sliding_window_view": [386, 393], "y2_h1": 386, "sigma_2": 386, "a_2": 386, "y2_h0_real_theori": 386, "y2_h1_real_theori": 386, "similarli": 386, "z_2": [386, 393], "z2_h0": [386, 393], "z2_h1": [386, 393], "z2_h0_theori": [386, 393], "z2_h1_theori": [386, 393], "tx": 389, "fillstyl": 389, "accomplish": [389, 396], "resample_sign": 389, "new_sample_r": 389, "ty": 389, "198": 389, "four": 389, "396": 389, "fourth": 389, "often": 389, "do": 389, "312": 389, "00095883": 390, "00175012": 390, "00423921": 390, "0058825": 390, "006151": 390, "00474595": 390, "0017044": 390, "00254816": 390, "00721645": 390, "0112324": 390, "01342358": 390, "01273202": 390, "00845058": 390, "0004368": 390, "01073669": 390, "02372977": 390, "03650247": 390, "04650654": 390, "05098525": 390, "04734644": 390, "03355896": 390, "00851486": 390, "02769991": 390, "07367348": 390, "12670446": 390, "18301321": 390, "23810898": 390, "28727058": 390, "32607991": 390, "35093841": 390, "35949665": 390, "conveni": [390, 391], "evalu": [390, 391], "here": [390, 391], "478207252018059": 391, "6400000000000001": 391, "7391036260090295": 391, "3061467458920719j": 391, "47820725": 391, "78207252e": 391, "58172329e": 391, "10862468e": 391, "86109590e": 391, "21565653e": 391, "01140214e": 391, "57286400e": 391, "67772160e": 391, "47338728e": 391, "10422993e": 391, "89312837e": 391, "12240078e": 391, "03953322e": 391, "69685122e": 391, "63882791e": 391, "81474977e": 391, "47193366e": 391, "85259041e": 391, "15647504e": 391, "23851924e": 391, "42176895e": 391, "84684395e": 391, "42721858e": 391, "72236648e": 391, "14721649e": 391, "10813095e": 391, "94024315e": 391, "78877688e": 391, "74077567e": 391, "87820725": 391, "53637958": 391, "94724205": 391, "13335164": 391, "1455082": 391, "04436799": 391, "88708159": 391, "71930943": 391, "5719707": 391, "46154771": 391, "39261642": 391, "36139242": 391, "35935288": 391, "3763214": 391, "40270968": 391, "43085717": 391, "45557651": 391, "47410241": 391, "48566716": 391, "49090568": 391, "49124786": 391, "48840102": 391, "4839738": 391, "47925143": 391, "47510421": 391, "47199608": 391, "47005584": 391, "46917696": 391, "46911955": 391, "denomin": 391, "73910363": 391, "30614675j": 391, "plane": 391, "092337035029908": 391, "71104892744724": 391, "684365018955985": 391, "37868538208862": 391, "1263714068241546": 391, "9993519409971622": 391, "1909320767063554": 391, "016796159999999997": 391, "46380627201816593": 391, "3806359704987265j": 391, "4988817673791569": 391, "3333421398098428j": 391, "5543277195052645": 391, "22961005941814036j": 391, "5291527586123693": 391, "28283804209787544j": 391, "lyon": 391, "understand": 391, "3rd": 391, "insid": 391, "matt": [391, 397, 400], "venv": 391, "_filter_design": 391, "478": 391, "runtimewarn": [391, 397], "divid": [391, 397], "encount": [391, 397], "npp_polyv": 391, "zm1": 391, "tensor": 391, "invalid": 391, "unstabl": 391, "52e": 393, "56e": 393, "20e": 393, "n_symbol": 394, "pb": 394, "x_bb_rect": 394, "papr_bb_rect": 394, "x_pb_rect": 394, "papr_pb_rect": 394, "x_bb_0p1": 394, "papr_bb_0p1": 394, "x_pb_0p1": 394, "papr_pb_0p1": 394, "x_bb_0p5": 394, "papr_bb_0p5": 394, "x_pb_0p5": 394, "papr_pb_0p5": 394, "x_bb_0p9": 394, "papr_bb_0p9": 394, "x_pb_0p9": 394, "papr_pb_0p9": 394, "rf": [394, 395], "512": 394, "sweep_alpha": 394, "bb_papr": 394, "pb_papr": 394, "bpsk_bb_papr": 394, "bpsk_pb_papr": 394, "qpsk_bb_papr": 394, "qpsk_pb_papr": 394, "psk8_bb_papr": 394, "psk8_pb_papr": 394, "psk16_bb_papr": 394, "psk16_pb_papr": 394, "loop_filt": 395, "0x7f4d09414b10": 395, "theta_0": 395, "phase_error": 395, "freq_estim": 395, "tmp": 395, "ipykernel_3870": 395, "3044107145": 395, "deprecationwarn": 395, "convers": [395, 399, 400], "ndim": 395, "scalar": 395, "deprec": 395, "futur": 395, "ensur": 395, "extract": 395, "1093092892": 395, "make": [395, 401], "a_hat": [395, 396], "152932338": 395, "rad2deg": 395, "avail": [395, 396, 399], "b_nt": 395, "0005": 395, "0125": 395, "015": 395, "0175": 395, "t_lock": 395, "analyze_psk": 396, "n0": 396, "tx_mf": 396, "bpsk_ber": 396, "bpsk_ser": 396, "qpsk_ber": 396, "qpsk_ser": 396, "psk8_ber": 396, "psk8_ser": 396, "psk16_ber": 396, "psk16_ser": 396, "1e0": 396, "psk8_bin": 396, "psk8_grai": 396, "wors": 396, "rc_0p1": 397, "rc_0p5": 397, "rc_0p9": 397, "pm": 397, "nearli": 397, "lobe": 397, "much": 397, "freqz": 397, "worn": 397, "h_rc_0p1": 397, "h_rc_0p5": 397, "h_rc_0p9": 397, "p_rect": 397, "cumsum": 397, "p_rc_0p1": 397, "p_rc_0p5": 397, "p_rc_0p9": 397, "within": 397, "srrc_0p1": 397, "srrc_0p5": 397, "srrc_0p9": 397, "significantli": 397, "being": 397, "h_srrc_0p1": 397, "h_srrc_0p5": 397, "h_srrc_0p9": 397, "p_srrc_0p1": 397, "p_srrc_0p5": 397, "p_srrc_0p9": 397, "gauss_0p1": 397, "gauss_0p2": 397, "gauss_0p3": 397, "_filter": 397, "356": 397, "softwar": 399, "radio": 399, "goal": 399, "analyz": 399, "reli": 399, "interoper": 399, "numba": [399, 400], "acceler": 399, "computation": 399, "intens": 399, "aim": 399, "replic": 399, "relev": 399, "toolbox": 399, "progress": 399, "someth": 399, "pleas": 399, "issu": 399, "pypi": 399, "api": [399, 400, 401], "synchron": 399, "budget": [399, 400], "miscellan": 399, "2024": 400, "renam": 400, "h0_theori": 400, "h1_theori": 400, "hostett": 400, "march": 400, "helper": 400, "detection_pdf": 400, "februari": 400, "fix": [400, 401], "bug": [400, 401], "made": 400, "pin": 400, "januari": 400, "zadoff_chu": 400, "design_multirate_tap": 400, "decemb": 400, "2023": 400, "rework": 400, "frequency_response_log": 400, "explicit": 400, "jupyt": 400, "notebook": 400, "novemb": 400, "abil": 400, "multirate_tap": 400, "polyphase_matrix": 400, "replac": 400, "black": 400, "septemb": 400, "sensibl": 400, "august": 400, "superflu": 400, "translat": 400, "juli": 400, "firinterpol": 400, "impair": 400, "fpsl": 400, "synthes": 400, "semant": 401, "major": 401, "minor": 401, "patch": 401, "introduc": 401, "featur": 401, "compat": 401, "guarante": 401, "them": 401}, "objects": {"": [[3, 0, 0, 1, "sdr", ""]], "sdr": [[9, 1, 1, "", "AGC", "Implements an automatic gain controller (AGC)."], [18, 1, 1, "", "AdditiveScrambler", "Implements an additive scrambler."], [23, 1, 1, "", "BinaryErasureChannel", "Implements a binary erasure channel (BEC)."], [31, 1, 1, "", "BinarySymmetricChannel", "Implements a binary symmetric channel (BSC)."], [39, 1, 1, "", "BlockInterleaver", "Implements a block interleaver."], [41, 1, 1, "", "CPM", "Implements continuous-phase modulation (CPM)."], [55, 1, 1, "", "Channel", "A base class for wireless channels."], [61, 1, 1, "", "Channelizer", "Implements a polyphase channelizer FIR filter."], [66, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [83, 1, 1, "", "Decimator", "Implements a polyphase decimating FIR filter."], [87, 1, 1, "", "Differentiator", "Implements a differentiator FIR filter."], [89, 1, 1, "", "DiscreteMemorylessChannel", "Implements a discrete memoryless channel (DMC)."], [95, 1, 1, "", "EnergyDetector", "Implements an energy detector."], [100, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [107, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [123, 1, 1, "", "FLFSR", "Implements a Fibonacci linear-feedback shift register (LFSR)."], [137, 1, 1, "", "FarrowResampler", "Implements a piecewise polynomial Farrow arbitrary resampler."], [147, 1, 1, "", "FractionalDelay", "Implements a fractional delay FIR filter."], [149, 1, 1, "", "GLFSR", "Implements a Galois linear-feedback shift register (LFSR)."], [162, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [178, 1, 1, "", "Integrator", "Implements an integrator IIR filter."], [180, 1, 1, "", "Interleaver", "Implements an arbitrary interleaver."], [187, 1, 1, "", "Interpolator", "Implements a polyphase interpolating FIR filter."], [190, 1, 1, "", "LeakyIntegrator", "Implements a leaky integrator IIR filter."], [192, 1, 1, "", "LinearModulation", "Implements linear phase/amplitude modulation with arbitrary symbol mapping."], [208, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [217, 1, 1, "", "MLPED", "Implements a maximum-likelihood phase error detector (ML-PED)."], [225, 1, 1, "", "MSK", "Implements minimum-shift keying (MSK) modulation and demodulation."], [227, 1, 1, "", "MovingAverager", "Implements a moving average FIR filter."], [229, 1, 1, "", "NCO", "Implements a numerically-controlled oscillator (NCO)."], [237, 1, 1, "", "OQPSK", "Implements offset quadrature phase-shift keying (OQPSK) modulation and demodulation."], [239, 1, 1, "", "PED", "Implements a heuristic phase error detector (PED)."], [245, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [251, 1, 1, "", "PiMPSK", "Implements $pi/M$ phase-shift keying ($pi/M$ PSK) modulation and demodulation."], [253, 1, 1, "", "PolyphaseFIR", "Implements a generic polyphase FIR filter."], [268, 5, 1, "", "Q", "Computes the CCDF of the standard normal distribution $mathcal{N}(0, 1)$.."], [269, 5, 1, "", "Qinv", "Computes the inverse CCDF of the standard normal distribution $mathcal{N}(0, 1)$."], [270, 1, 1, "", "ReplicaCorrelator", "Implements an clairvoyant replica-correlator detector."], [275, 1, 1, "", "Resampler", "Implements a polyphase rational resampling FIR filter."], [279, 5, 1, "", "albersheim", "Estimates the minimum signal-to-noise ratio (SNR) required to achieve the desired probability of detection $P_{D}$."], [280, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [281, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [282, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [283, 5, 1, "", "barker_code", "Returns the Barker code/sequence of length $N$."], [284, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC)."], [285, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [286, 5, 1, "", "berlekamp_massey", "Finds the minimal polynomial $c(x)$ that produces the linear recurrent sequence $y$."], [287, 5, 1, "", "binary_code", "Generates a binary code of length $2^n$."], [288, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC)."], [289, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [290, 5, 1, "", "coherent_gain", "Computes the SNR improvement by coherent integration."], [291, 5, 1, "", "coherent_gain_loss", "Computes the coherent gain loss (CGL) given a time or frequency offset."], [292, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [293, 5, 1, "", "db", "Converts from linear units to decibels."], [294, 5, 1, "", "design_bandpass_fir", "Designs a bandpass FIR filter impulse response $h[n]$ using the window method."], [295, 5, 1, "", "design_bandstop_fir", "Designs a bandstop FIR filter impulse response $h[n]$ using the window method."], [296, 5, 1, "", "design_frac_delay_fir", "Designs a fractional delay FIR filter impulse response $h[n]$ using the Kaiser window method."], [297, 5, 1, "", "design_highpass_fir", "Designs a highpass FIR filter impulse response $h[n]$ using the window method."], [298, 5, 1, "", "design_lowpass_fir", "Designs a lowpass FIR filter impulse response $h[n]$ using the window method."], [299, 5, 1, "", "design_multirate_fir", "Designs a multirate FIR filter impulse response $h[n]$ using the Kaiser window method."], [300, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [301, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [302, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC)."], [303, 5, 1, "", "downsample", "Downsamples the time-domain signal $x[n]$ by the factor $r$, by discarding $r-1$ samples every $r$ samples."], [304, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [305, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [306, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [307, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [308, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [309, 5, 1, "", "euclidean", "Measures the Euclidean distance between two signals $x[n]$ and $y[n]$."], [310, 5, 1, "", "evm", "Calculates the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [311, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [312, 5, 1, "", "fspl", "Calculates the free-space path loss (FSPL) in dB."], [313, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [314, 5, 1, "", "gray_code", "Generates a Gray code of length $2^n$."], [315, 5, 1, "", "h0", "Computes the statistical distribution under the null hypothesis $mathcal{H}_0$."], [316, 5, 1, "", "h1", "Computes the statistical distribution under the alternative hypothesis $mathcal{H}_1$."], [317, 5, 1, "", "hadamard_code", "Returns the Hadamard code/sequence of length $N$."], [318, 5, 1, "", "half_sine", "Returns a half-sine pulse shape."], [319, 5, 1, "", "hamming", "Measures the Hamming distance between two signals $x[n]$ and $y[n]$."], [320, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [321, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [322, 5, 1, "", "kasami_code", "Returns the Kasami code/sequence of length $N$."], [323, 5, 1, "", "linear", "Converts from decibels to linear units."], [324, 5, 1, "", "m_sequence", "Generates a maximal-length sequence (m-sequence) from a Fibonacci linear feedback shift register (LFSR)."], [325, 5, 1, "", "max_frequency_offset", "Computes the maximum frequency offset that produces at most the provided coherent gain loss (CGL)."], [326, 5, 1, "", "max_integration_time", "Computes the maximum integration time that produces at most the provided coherent gain loss (CGL)."], [327, 5, 1, "", "min_snr", "Computes the minimum signal-to-noise ratio (SNR) required to achieve the desired probability of detection $P_{D}$."], [328, 5, 1, "", "mix", "Mixes a time-domain signal with a complex exponential or real sinusoid."], [329, 5, 1, "", "non_coherent_gain", "Computes the SNR improvement by non-coherently integrating $N_{NC}$ samples."], [330, 5, 1, "", "p_d", "Computes the theoretical probability of detection $P_{D}$."], [331, 5, 1, "", "p_fa", "Computes the theoretical probability of false alarm $P_{FA}$."], [332, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [333, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [334, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [335, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [336, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [337, 5, 1, "", "peebles", "Estimates the non-coherent integration gain for a given probability of detection $P_{D}$ and false alarm $P_{FA}$."], [338, 5, 1, "", "percent", "Converts from a ratio to a percentage."], [361, 5, 1, "", "polyphase_decompose", "Decomposes the prototype filter taps $h[n]$ into the polyphase matrix $h_i[n]$ with $B$ phases."], [362, 5, 1, "", "ppb", "Converts from a ratio to parts per billion (ppb)."], [363, 5, 1, "", "ppm", "Converts from a ratio to parts per million (ppm)."], [364, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [365, 5, 1, "", "rectangular", "Returns a rectangular pulse shape."], [366, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [367, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [368, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [369, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [370, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [371, 5, 1, "", "threshold", "Computes the theoretical detection threshold $gamma$."], [372, 5, 1, "", "to_complex_bb", "Converts a real passband signal to a complex baseband signal."], [373, 5, 1, "", "to_real_pb", "Converts a complex baseband signal to a real passband signal."], [374, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [375, 5, 1, "", "upsample", "Upsamples the time-domain signal $x[n]$ by the factor $r$, by inserting $r-1$ zeros between each sample."], [376, 5, 1, "", "walsh_code", "Returns the Walsh code/sequence of length $N$."], [377, 5, 1, "", "wavelength", "Calculates the wavelength $lambda$ of an electromagnetic wave with frequency $f$."], [378, 5, 1, "", "zadoff_chu_sequence", "Returns the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.AGC": [[10, 2, 1, "", "__call__", "Performs automatic gain control on the input signal."], [11, 2, 1, "", "__init__", "Creates an automatic gain controller (AGC)."], [12, 4, 1, "", "attack", "(Settable) The attack rate $alpha$."], [13, 4, 1, "", "decay", "(Settable) The decay rate $beta$."], [14, 4, 1, "", "gain", "The current linear gain."], [15, 4, 1, "", "reference", "(Settable) The desired output magnitude."], [16, 2, 1, "", "reset", "Resets the AGC gain. Only useful when using streaming mode."], [17, 4, 1, "", "streaming", "Indicates whether the AGC is in streaming mode."]], "sdr.AGC.__call__": [[10, 3, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.AGC.__init__": [[11, 3, 2, "p-attack", "attack", "The attack rate $alpha$. The attack rate is meant to attenuate strong signals. After $n_0 approx 1 / alpha$ samples the error will reduce to $1 / e$ of its original value."], [11, 3, 2, "p-decay", "decay", "The decay rate $beta$. The decay rate is meant to amplify weak signals. After $n_0 approx 1 / beta$ samples the error will reduce to $1 / e$ of its original value."], [11, 3, 2, "p-reference", "reference", "The desired output magnitude."], [11, 3, 2, "p-streaming", "streaming", "Indicates whether the AGC operates in streaming mode. In streaming mode, the gain is preserved between calls to __call__()."]], "sdr.AGC.reset": [[16, 3, 2, "p-gain", "gain", "The initial linear gain of the AGC."]], "sdr.AdditiveScrambler": [[19, 2, 1, "", "__init__", "Creates an additive scrambler."], [20, 2, 1, "", "descramble", "Descrambles the input sequence $y[n]$."], [21, 4, 1, "", "lfsr", "The Fibonacci LFSR used for scrambling."], [22, 2, 1, "", "scramble", "Scrambles the input sequence $x[n]$."]], "sdr.AdditiveScrambler.__init__": [[19, 3, 2, "p-characteristic_poly", "characteristic_poly", "The characteristic polynomial $c(x) = x^{n} - c_{n-1} cdot x^{n-1} - c_{n-2} cdot x^{n-2} - dots - c_{1} cdot x - c_{0}$."], [19, 3, 2, "p-feedback_poly", "feedback_poly", "The feedback polynomial $f(x) = -c_{0} cdot x^{n} - c_{1} cdot x^{n-1} - dots - c_{n-2} cdot x^{2} - c_{n-1} cdot x + 1$."], [19, 3, 2, "p-state", "state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$. The default is None which corresponds to all ones."]], "sdr.AdditiveScrambler.descramble": [[20, 3, 2, "p-y", "y", "The input sequence $y[n]$."]], "sdr.AdditiveScrambler.scramble": [[22, 3, 2, "p-x", "x", "The input sequence $x[n]$."]], "sdr.BinaryErasureChannel": [[24, 4, 1, "", "X", "The input alphabet $mathcal{X} = {0, 1}$ of the BEC channel."], [25, 4, 1, "", "Y", "The output alphabet $mathcal{Y} = {0, 1, e}$ of the BEC channel. Erasures $e$ are represented by -1."], [26, 2, 1, "", "__call__", "Passes the binary input sequence $x$ through the channel."], [27, 2, 1, "", "__init__", "Creates a new binary erasure channel (BEC)."], [28, 2, 1, "", "capacities", "Calculates the capacity of BEC channels."], [29, 4, 1, "", "capacity", "The capacity $C$ of the instantiated channel in bits/channel use."], [30, 4, 1, "", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.BinaryErasureChannel.__call__": [[26, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X} = {0, 1}$."]], "sdr.BinaryErasureChannel.__init__": [[27, 3, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."], [27, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."]], "sdr.BinarySymmetricChannel": [[32, 4, 1, "", "X", "The input alphabet $mathcal{X} = {0, 1}$ of the BSC channel."], [33, 4, 1, "", "Y", "The output alphabet $mathcal{Y} = {0, 1}$ of the BSC channel."], [34, 2, 1, "", "__call__", "Passes the binary input sequence $x$ through the channel."], [35, 2, 1, "", "__init__", "Creates a new binary symmetric channel (BSC)."], [36, 2, 1, "", "capacities", "Calculates the capacity of BSC channels."], [37, 4, 1, "", "capacity", "The capacity $C$ of the instantiated channel in bits/channel use."], [38, 4, 1, "", "p", "The transition probability $p$ of the BSC channel."]], "sdr.BinarySymmetricChannel.__call__": [[34, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X} = {0, 1}$."]], "sdr.BinarySymmetricChannel.__init__": [[35, 3, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."], [35, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."]], "sdr.BlockInterleaver": [[40, 2, 1, "", "__init__", "Creates a $R times C$ block interleaver."]], "sdr.BlockInterleaver.__init__": [[40, 3, 2, "p-cols", "cols", "The number of columns $C$ in the interleaver."], [40, 3, 2, "p-rows", "rows", "The number of rows $R$ in the interleaver. The row size determines the output separation of consecutive input elements."]], "sdr.CPM": [[42, 2, 1, "", "__init__", "Creates a new continuous-phase modulation object."], [43, 2, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [44, 4, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [45, 2, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples into decimal symbol decisions."], [46, 4, 1, "", "index", "The modulation index $h$."], [47, 2, 1, "", "modulate", "Modulates the decimal symbols $s[k]$ into pulse-shaped complex samples $x[n]$."], [48, 4, 1, "", "order", "The modulation order $M = 2^k$."], [49, 4, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [50, 4, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the instantaneous frequency of the signal."], [51, 4, 1, "", "rx_filter", "The receive decimating matched filter. The filter coefficients are matched to the pulse shape $h[-n]^*$."], [52, 2, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [53, 4, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [54, 4, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter. The filter coefficients are the pulse shape $h[n]$."]], "sdr.CPM.__init__": [[42, 3, 2, "p-index", "index", "The modulation index $h$. The modulation index is the ratio of the frequency deviation to the symbol rate $h = Delta f / f_{sym}$. The phase change per symbol is $pi h$."], [42, 3, 2, "p-order", "order", "The modulation order $M = 2^k$."], [42, 3, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees."], [42, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the instantaneous frequency of the signal. If a string is passed, the pulse shape is normalized such that the maximum value is 1."], [42, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string."], [42, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [42, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.CPM.ber": [[43, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.CPM.demodulate": [[45, 3, 2, "p-x_tilde", "x_tilde", "The received pulse-shaped complex samples $tilde{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.CPM.modulate": [[47, 3, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.CPM.ser": [[52, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.Channel": [[56, 2, 1, "", "__call__", "Passes the input sequence $x$ through the channel."], [57, 2, 1, "", "__init__", "Creates a new channel."], [58, 2, 1, "", "capacities", "Computes the channel capacity given the channel configuration."], [59, 4, 1, "", "capacity", "The channel capacity $C$ in bits/2D of the instantiated channel."], [60, 2, 1, "", "reset", "Resets the channel with a new seed."]], "sdr.Channel.__call__": [[56, 3, 2, "p-x", "x", "The input sequence $x$."]], "sdr.Channel.__init__": [[57, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."]], "sdr.Channel.reset": [[60, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."]], "sdr.Channelizer": [[62, 2, 1, "", "__call__", "Channelizes the input signal $x[n]$ with the polyphase FIR filter."], [63, 2, 1, "", "__init__", "Creates a polyphase FIR channelizing filter."], [64, 4, 1, "", "channels", "The number of channels $C$."], [65, 4, 1, "", "method", "The method used to design the polyphase channelizing filter."]], "sdr.Channelizer.__call__": [[62, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [62, 3, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Channelizer.__init__": [[63, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB. Only used when taps=\"kaiser\"."], [63, 3, 2, "p-channels", "channels", "The number of channels $C$."], [63, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even. Only used when taps=\"kaiser\"."], [63, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [63, 3, 2, "p-taps", "taps", "The prototype filter design specification."]], "sdr.ClosedLoopPLL": [[67, 4, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [68, 4, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [69, 4, 1, "", "K0", "The NCO gain $K_0$."], [70, 4, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [71, 4, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [72, 4, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [73, 2, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [74, 2, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [75, 4, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [76, 2, 1, "", "lock_time", "Returns the lock time of the PLL."], [77, 4, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [78, 4, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [79, 2, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [80, 2, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [81, 4, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [82, 4, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[73, 3, 2, "p-K0", "K0", "The NCO gain $K_0$."], [73, 3, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [73, 3, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [73, 3, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [73, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[74, 3, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[76, 3, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[79, 3, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.Decimator": [[84, 2, 1, "", "__init__", "Creates a polyphase FIR decimating filter."], [85, 4, 1, "", "method", "The method used to design the polyphase decimating filter."], [86, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."]], "sdr.Decimator.__init__": [[84, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB. Only used when taps=\"kaiser\"."], [84, 3, 2, "p-decimation", "decimation", "The decimation rate $Q$."], [84, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even. Only used when taps=\"kaiser\"."], [84, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [84, 3, 2, "p-taps", "taps", "The prototype filter design specification."]], "sdr.Differentiator": [[88, 2, 1, "", "__init__", "Creates a differentiator FIR filter."]], "sdr.Differentiator.__init__": [[88, 3, 2, "p-order", "order", "The order of the FIR differentiator $N$. The filter length is $N + 1$. Increasing the filter order increases the bandwidth of the differentiator."], [88, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [88, 3, 2, "p-window", "window", "The SciPy window definition. See scipy.signal.windows.get_window() for details. If None, no window is applied."]], "sdr.DiscreteMemorylessChannel": [[90, 4, 1, "", "P", "The transition probability matrix $P$ of the DMC channel."], [91, 4, 1, "", "X", "The input alphabet $mathcal{X}$ of the DMC channel."], [92, 4, 1, "", "Y", "The output alphabet $mathcal{Y}$ of the DMC channel."], [93, 2, 1, "", "__call__", "Passes the input sequence $x$ through the channel."], [94, 2, 1, "", "__init__", "Creates a new discrete memoryless channel (DMC)."]], "sdr.DiscreteMemorylessChannel.__call__": [[93, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.DiscreteMemorylessChannel.__init__": [[94, 3, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P = Pr(Y = y_j | X = x_i)$."], [94, 3, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [94, 3, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [94, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."]], "sdr.EnergyDetector": [[96, 2, 1, "", "p_d", "Computes the probability of detection $P_D$."], [97, 2, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [98, 2, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [99, 2, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.EnergyDetector.p_d": [[96, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [96, 3, 2, "p-complex", "complex", "Indicates whether the signal is real or complex."], [96, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [96, 3, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.p_fa": [[97, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [97, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [97, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [97, 3, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.EnergyDetector.roc": [[98, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [98, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [98, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."], [98, 3, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.threshold": [[99, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [99, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [99, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [99, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.ErrorRate": [[101, 2, 1, "", "__init__", "Creates a new error rate tabulation object."], [102, 2, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [103, 2, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [104, 2, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [105, 2, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [106, 2, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[102, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [102, 3, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [102, 3, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[103, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[104, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[106, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[108, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the FIR filter."], [109, 2, 1, "", "__init__", "Creates an FIR filter."], [110, 2, 1, "", "__len__", "Returns the filter length $N + 1$."], [111, 4, 1, "", "delay", "The delay of the FIR filter $d = lfloor frac{N + 1}{2} rfloor$ in samples."], [112, 2, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [113, 2, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the FIR filter."], [114, 2, 1, "", "group_delay", "Returns the group delay $tau_g(omega)$ of the FIR filter."], [115, 2, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter."], [116, 4, 1, "", "order", "The order of the FIR filter $N$."], [117, 2, 1, "", "phase_delay", "Returns the phase delay $tau_{phi}(omega)$ of the FIR filter."], [118, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [119, 4, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [120, 2, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter."], [121, 4, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [122, 4, 1, "", "taps", "The feedforward taps $h[n]$ with length $N + 1$."]], "sdr.FIR.__call__": [[108, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [108, 3, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.FIR.__init__": [[109, 3, 2, "p-h", "h", "The feedforward coefficients $h[n]$."], [109, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FIR.frequency_response": [[113, 3, 2, "p-decades", "decades", "Only used if freqs is an integer."], [113, 3, 2, "p-freqs", "freqs", "The frequency specification."], [113, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [113, 3, 2, "p-whole", "whole", "Only used if freqs is an integer."]], "sdr.FIR.group_delay": [[114, 3, 2, "p-N", "N", "The number of samples in the group delay."], [114, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[115, 3, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.phase_delay": [[117, 3, 2, "p-N", "N", "The number of samples in the phase delay."], [117, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.step_response": [[120, 3, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FLFSR": [[124, 2, 1, "", "Taps", "Creates a Fibonacci LFSR from its taps."], [125, 2, 1, "", "__call__", "Processes the input symbols $x[n]$ through the Fibonacci LFSR."], [126, 2, 1, "", "__init__", "Creates a new Fibonacci LFSR."], [127, 4, 1, "", "characteristic_poly", "The characteristic polynomial $c(x)$ that defines the linear recurrent sequence."], [128, 4, 1, "", "feedback_poly", "The feedback polynomial $f(x)$ that defines the feedback arithmetic."], [129, 4, 1, "", "field", "The FieldArray subclass for the finite field that defines the linear arithmetic."], [130, 4, 1, "", "initial_state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$."], [131, 4, 1, "", "order", "The order of the linear recurrence/linear recurrent sequence."], [132, 2, 1, "", "reset", "Resets the Fibonacci LFSR state to the specified state."], [133, 4, 1, "", "state", "The current state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$."], [134, 2, 1, "", "step", "Produces the next steps output symbols."], [135, 4, 1, "", "taps", "The shift register taps $T = [c_{n-1}, c_{n-2}, dots, c_1, c_0]$."], [136, 2, 1, "", "to_galois_lfsr", "Converts the Fibonacci LFSR to a Galois LFSR that produces the same output."]], "sdr.FLFSR.Taps": [[124, 3, 2, "p-state", "state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$. The default is None which corresponds to all ones."], [124, 3, 2, "p-taps", "taps", "The shift register taps $T = [c_{n-1}, c_{n-2}, dots, c_1, c_0]$."]], "sdr.FLFSR.__call__": [[125, 3, 2, "p-x", "x", "The input symbols $x[n]$."]], "sdr.FLFSR.__init__": [[126, 3, 2, "p-characteristic_poly", "characteristic_poly", "The characteristic polynomial $c(x) = x^{n} - c_{n-1} cdot x^{n-1} - c_{n-2} cdot x^{n-2} - dots - c_{1} cdot x - c_{0}$."], [126, 3, 2, "p-feedback_poly", "feedback_poly", "The feedback polynomial $f(x) = -c_{0} cdot x^{n} - c_{1} cdot x^{n-1} - dots - c_{n-2} cdot x^{2} - c_{n-1} cdot x + 1$."], [126, 3, 2, "p-state", "state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$. The default is None which corresponds to all ones."]], "sdr.FLFSR.reset": [[132, 3, 2, "p-state", "state", "The state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$. The default is None which corresponds to the initial state."]], "sdr.FLFSR.step": [[134, 3, 2, "p-steps", "steps", "The direction and number of output symbols to produce. The default is 1. If negative, the Fibonacci LFSR will step backwards."]], "sdr.FarrowResampler": [[138, 2, 1, "", "__call__", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [139, 2, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [140, 4, 1, "", "delay", "The delay $d$ of the Farrow FIR filters in samples."], [141, 2, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [142, 4, 1, "", "order", "The order of the piecewise polynomial."], [143, 2, 1, "", "reset", "Resets the filter state and fractional sample index."], [144, 4, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [145, 4, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [146, 4, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__call__": [[138, 3, 2, "p-rate", "rate", "The resampling rate $r$."], [138, 3, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.__init__": [[139, 3, 2, "p-order", "order", "The order of the piecewise polynomial. Must be between 1 and 4."], [139, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FarrowResampler.flush": [[141, 3, 2, "p-rate", "rate", "The resampling rate $r$."]], "sdr.FarrowResampler.reset": [[143, 3, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.FractionalDelay": [[148, 2, 1, "", "__init__", "Creates a fractional delay FIR filter."]], "sdr.FractionalDelay.__init__": [[148, 3, 2, "p-delay", "delay", "The fractional delay $0 le Delta n le 1$."], [148, 3, 2, "p-length", "length", "The filter length $L$. Filters with even length have best performance. Filters with odd length are equivalent to an even-length filter with an appended zero."]], "sdr.GLFSR": [[150, 2, 1, "", "Taps", "Creates a Galois LFSR from its taps."], [151, 2, 1, "", "__init__", "Creates a new Galois LFSR."], [152, 4, 1, "", "characteristic_poly", "The characteristic polynomial $c(x)$ that defines the linear recurrent sequence."], [153, 4, 1, "", "feedback_poly", "The feedback polynomial $f(x)$ that defines the feedback arithmetic."], [154, 4, 1, "", "field", "The FieldArray subclass for the finite field that defines the linear arithmetic."], [155, 4, 1, "", "initial_state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$."], [156, 4, 1, "", "order", "The order of the linear recurrence/linear recurrent sequence."], [157, 2, 1, "", "reset", "Resets the Galois LFSR state to the specified state."], [158, 4, 1, "", "state", "The current state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$."], [159, 2, 1, "", "step", "Produces the next steps output symbols."], [160, 4, 1, "", "taps", "The shift register taps $T = [c_0, c_1, dots, c_{n-2}, c_{n-1}]$."], [161, 2, 1, "", "to_fibonacci_lfsr", "Converts the Galois LFSR to a Fibonacci LFSR that produces the same output."]], "sdr.GLFSR.Taps": [[150, 3, 2, "p-state", "state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$. The default is None which corresponds to all ones."], [150, 3, 2, "p-taps", "taps", "The shift register taps $T = [c_0, c_1, dots, c_{n-2}, c_{n-1}]$."]], "sdr.GLFSR.__init__": [[151, 3, 2, "p-characteristic_poly", "characteristic_poly", "The characteristic polynomial $c(x) = x^{n} - c_{n-1} cdot x^{n-1} - c_{n-2} cdot x^{n-2} - dots - c_{1} cdot x - c_{0}$."], [151, 3, 2, "p-feedback_poly", "feedback_poly", "The feedback polynomial $f(x) = -c_{0} cdot x^{n} - c_{1} cdot x^{n-1} - dots - c_{n-2} cdot x^{2} - c_{n-1} cdot x + 1$."], [151, 3, 2, "p-state", "state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$. The default is None which corresponds to all ones."]], "sdr.GLFSR.reset": [[157, 3, 2, "p-state", "state", "The state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$. The default is None which corresponds to the initial state."]], "sdr.GLFSR.step": [[159, 3, 2, "p-steps", "steps", "The direction and number of output symbols to produce. The default is 1. If negative, the Galois LFSR will step backwards."]], "sdr.IIR": [[163, 2, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [164, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the IIR filter."], [165, 2, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [166, 4, 1, "", "a_taps", "The feedback taps $a_j$ for $j = 0,...,N$."], [167, 4, 1, "", "b_taps", "The feedforward taps $b_i$ for $i = 0,...,M$."], [168, 2, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the IIR filter."], [169, 4, 1, "", "gain", "The gain of the IIR filter."], [170, 2, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter."], [171, 4, 1, "", "order", "The order of the IIR filter $N$."], [172, 4, 1, "", "poles", "The poles of the IIR filter."], [173, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [174, 4, 1, "", "state", "The filter state."], [175, 2, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter."], [176, 4, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [177, 4, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[163, 3, 2, "p-gain", "gain", "The gain of the transfer function."], [163, 3, 2, "p-poles", "poles", "The poles of the transfer function."], [163, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."], [163, 3, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__call__": [[164, 3, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.IIR.__init__": [[165, 3, 2, "p-a", "a", "The feedback coefficients $a_j$ for $j = 0,...,N$."], [165, 3, 2, "p-b", "b", "The feedforward coefficients $b_i$ for $i = 0,...,M$."], [165, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.IIR.frequency_response": [[168, 3, 2, "p-decades", "decades", "Only used if freqs is an integer."], [168, 3, 2, "p-freqs", "freqs", "The frequency specification."], [168, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [168, 3, 2, "p-whole", "whole", "Only used if freqs is an integer."]], "sdr.IIR.impulse_response": [[170, 3, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[175, 3, 2, "p-N", "N", "The number of samples to return."]], "sdr.Integrator": [[179, 2, 1, "", "__init__", "Creates an integrating IIR filter."]], "sdr.Integrator.__init__": [[179, 3, 2, "p-method", "method", "The integration method."], [179, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.Interleaver": [[181, 2, 1, "", "__init__", "Creates an arbitrary interleaver."], [182, 2, 1, "", "__len__", "The size of the interleaver."], [183, 2, 1, "", "deinterleave", "Deinterleaves the input sequence $y[n]$."], [184, 2, 1, "", "interleave", "Interleaves the input sequence $x[n]$."], [185, 4, 1, "", "inverse_map", "The deinterleaver permutation map $pi^{-1}$."], [186, 4, 1, "", "map", "The interleaver permutation map $pi$."]], "sdr.Interleaver.__init__": [[181, 3, 2, "p-map", "map", "The interleaver permutation map $pi : i mapsto j$, containing the values $[0, N)$. The $i$-th input element will be placed at the $pi(i)$-th output position."]], "sdr.Interleaver.deinterleave": [[183, 3, 2, "p-y", "y", "The input sequence $y[n]$. Length must be a multiple of the interleaver size."]], "sdr.Interleaver.interleave": [[184, 3, 2, "p-x", "x", "The input sequence $x[n]$. Length must be a multiple of the interleaver size."]], "sdr.Interpolator": [[188, 2, 1, "", "__init__", "Creates a polyphase FIR interpolating filter."], [189, 4, 1, "", "method", "The method used to design the polyphase interpolating filter."]], "sdr.Interpolator.__init__": [[188, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB. Only used when taps=\"kaiser\"."], [188, 3, 2, "p-interpolation", "interpolation", "The interpolation rate $P$."], [188, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even. Only used when taps=\"kaiser\"."], [188, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [188, 3, 2, "p-taps", "taps", "The prototype filter design specification."]], "sdr.LeakyIntegrator": [[191, 2, 1, "", "__init__", "Creates a leaky integrator IIR filter."]], "sdr.LeakyIntegrator.__init__": [[191, 3, 2, "p-alpha", "alpha", "The leaky factor $alpha$. An FIR moving average with length $L$ is approximated when $alpha = 1 - 2/L$."], [191, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.LinearModulation": [[193, 2, 1, "", "__init__", "Creates a new linear phase/amplitude modulation object."], [194, 2, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [195, 4, 1, "", "bps", "The number of bits per symbol $k = log_2 M$."], [196, 2, 1, "", "decide_symbols", "Converts the received complex symbols into MLE symbol decisions."], [197, 2, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples."], [198, 2, 1, "", "map_symbols", "Converts the decimal symbols into complex symbols."], [199, 2, 1, "", "modulate", "Modulates the decimal symbols into pulse-shaped complex samples."], [200, 4, 1, "", "order", "The modulation order $M = 2^k$."], [201, 4, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [202, 4, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [203, 4, 1, "", "rx_filter", "The receive decimating matched filter."], [204, 2, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [205, 4, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [206, 4, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$."], [207, 4, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter."]], "sdr.LinearModulation.__init__": [[193, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [193, 3, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees to apply to symbol_map."], [193, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [193, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [193, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [193, 3, 2, "p-symbol_map", "symbol_map", "The symbol mapping ${0, dots, M-1} mapsto mathbb{C}$. An $M$-length array whose indices are decimal symbols $s[k]$ and whose values are complex symbols $a[k]$, where $M$ is the modulation order."]], "sdr.LinearModulation.ber": [[194, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.LinearModulation.decide_symbols": [[196, 3, 2, "p-a_tilde", "a_tilde", "The received complex symbols $tilde{a}[k]$."]], "sdr.LinearModulation.demodulate": [[197, 3, 2, "p-x_tilde", "x_tilde", "The received pulse-shaped complex samples $tilde{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.LinearModulation.map_symbols": [[198, 3, 2, "p-s", "s", "The decimal symbols $s[k]$ to map, $0$ to $M-1$."]], "sdr.LinearModulation.modulate": [[199, 3, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.LinearModulation.ser": [[204, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.LoopFilter": [[209, 2, 1, "", "__call__", "Filters the input signal $x[n]$."], [210, 2, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [211, 4, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter."], [212, 4, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [213, 4, 1, "", "integral_gain", "The integral gain $K_2$ of the loop filter."], [214, 4, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter."], [215, 4, 1, "", "proportional_gain", "The proportional gain $K_1$ of the loop filter."], [216, 2, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__call__": [[209, 3, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.LoopFilter.__init__": [[210, 3, 2, "p-K0", "K0", "The NCO gain $K_0$."], [210, 3, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [210, 3, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [210, 3, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.MLPED": [[218, 4, 1, "", "A_received", "(Settable) The received signal RMS amplitude $A_{rx,rms}$."], [219, 4, 1, "", "A_reference", "(Settable) The reference signal RMS amplitude $A_{ref,rms}$."], [220, 2, 1, "", "__call__", "Detects the phase error."], [221, 2, 1, "", "__init__", "Initializes the ML-PED."], [222, 2, 1, "", "data_aided_error", "Simulates the average phase error of the data-aided PED using the specified modulation scheme."], [223, 2, 1, "", "decision_directed_error", "Simulates the average phase error of the decision-directed PED using the specified modulation scheme."], [224, 4, 1, "", "gain", "The gain of the phase error detector $K_p$."]], "sdr.MLPED.__call__": [[220, 3, 2, "p-received", "received", "The received complex symbols $tilde{a}[k]$."], [220, 3, 2, "p-reference", "reference", "The reference complex symbols, either the known transmitted complex symbols $a[k]$ or the complex symbols decisions $hat{a}[k]$."]], "sdr.MLPED.__init__": [[221, 3, 2, "p-A_received", "A_received", "The received signal RMS amplitude $A_{rx,rms}$."], [221, 3, 2, "p-A_reference", "A_reference", "The reference signal RMS amplitude $A_{ref,rms}$."]], "sdr.MLPED.data_aided_error": [[222, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [222, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.MLPED.decision_directed_error": [[223, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [223, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.MSK": [[226, 2, 1, "", "__init__", "Creates a new MSK object."]], "sdr.MSK.__init__": [[226, 3, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [226, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [226, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.MovingAverager": [[228, 2, 1, "", "__init__", "Creates a moving average FIR filter."]], "sdr.MovingAverager.__init__": [[228, 3, 2, "p-length", "length", "The length of the moving average filter $L$."], [228, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.NCO": [[230, 2, 1, "", "__call__", "Steps the NCO with variable frequency and/or phase signals."], [231, 2, 1, "", "__init__", "Creates a numerically-controlled oscillator (NCO)."], [232, 4, 1, "", "gain", "(Settable) The NCO gain $K_0$."], [233, 4, 1, "", "increment", "(Settable) The constant phase accumulation $omega$ of the NCO in radians/sample."], [234, 4, 1, "", "offset", "(Settable) The absolute phase offset $theta$ of the NCO in radians."], [235, 2, 1, "", "reset", "Resets the NCO."], [236, 2, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__call__": [[230, 3, 2, "p-freq", "freq", "The variable frequency signal $f[n]$ in radians/sample. This input signal varies the per-sample phase increment of the NCO. If None, the signal is all zeros."], [230, 3, 2, "p-output", "output", "The format of the output signal $y[n]$. Options are the accumulated phase, sine, cosine, or complex exponential."], [230, 3, 2, "p-phase", "phase", "The variable phase signal $p[n]$ in radians. This input signal varies the per-sample phase offset of the NCO. If None, the signal is all zeros."]], "sdr.NCO.__init__": [[231, 3, 2, "p-gain", "gain", "The NCO gain $K_0$."], [231, 3, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [231, 3, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.NCO.step": [[236, 3, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.OQPSK": [[238, 2, 1, "", "__init__", "Creates a new OQPSK object."]], "sdr.OQPSK.__init__": [[238, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [238, 3, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [238, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [238, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [238, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [238, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PED": [[240, 2, 1, "", "__call__", "Detects the phase error."], [241, 2, 1, "", "__init__", "Initializes the PED."], [242, 2, 1, "", "data_aided_error", "Simulates the average phase error of the data-aided PED using the specified modulation scheme."], [243, 2, 1, "", "decision_directed_error", "Simulates the average phase error of the decision-directed PED using the specified modulation scheme."], [244, 4, 1, "", "gain", "The gain of the phase error detector $K_p$."]], "sdr.PED.__call__": [[240, 3, 2, "p-received", "received", "The received complex symbols $tilde{a}[k]$."], [240, 3, 2, "p-reference", "reference", "The reference complex symbols, either the known transmitted complex symbols $a[k]$ or the complex symbols decisions $hat{a}[k]$."]], "sdr.PED.data_aided_error": [[242, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [242, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.PED.decision_directed_error": [[243, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [243, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.PSK": [[246, 2, 1, "", "__init__", "Creates a new PSK object."], [247, 2, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [248, 4, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [249, 2, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [250, 4, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$."]], "sdr.PSK.__init__": [[246, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [246, 3, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [246, 3, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [246, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [246, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [246, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [246, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[247, 3, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [247, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.ser": [[249, 3, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [249, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.PiMPSK": [[252, 2, 1, "", "__init__", "Creates a new $pi/M$ PSK object."]], "sdr.PiMPSK.__init__": [[252, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [252, 3, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the bits per symbol."], [252, 3, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [252, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [252, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [252, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [252, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PolyphaseFIR": [[254, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the polyphase FIR filter."], [255, 2, 1, "", "__init__", "Creates a polyphase FIR filter."], [256, 4, 1, "", "branches", "The number of polyphase branches $B$."], [257, 4, 1, "", "decimation", "The integer decimation rate $Q$."], [258, 4, 1, "", "delay", "The delay of polyphase FIR filter in samples."], [259, 4, 1, "", "input", "The input connection method."], [260, 4, 1, "", "interpolation", "The integer interpolation rate $P$."], [261, 4, 1, "", "order", "The order $N = (M + 1)B - 1$ of the FIR prototype filter $h[n]$."], [262, 4, 1, "", "output", "The output connection method."], [263, 4, 1, "", "polyphase_order", "The order $M = (N + 1)/B - 1$ of each FIR polyphase filter $h_i[n]$."], [264, 4, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_i[n]$."], [265, 4, 1, "", "rate", "The fractional resampling rate $r = P/Q$. The output sample rate is $f_{s,out} = f_{s,in} cdot r$."], [266, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [267, 4, 1, "", "taps", "The prototype feedforward taps $h[n]$."]], "sdr.PolyphaseFIR.__call__": [[254, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [254, 3, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.PolyphaseFIR.__init__": [[255, 3, 2, "p-branches", "branches", "The number of polyphase branches $B$."], [255, 3, 2, "p-input", "input", "The input connection method."], [255, 3, 2, "p-output", "output", "The output connection method."], [255, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [255, 3, 2, "p-taps", "taps", "The prototype filter feedforward coefficients $h[n]$."]], "sdr.Q": [[268, 3, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[269, 3, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.ReplicaCorrelator": [[271, 2, 1, "", "p_d", "Computes the probability of detection $P_D$."], [272, 2, 1, "", "p_fa", "Computes the probability of false alarm $P_{FA}$."], [273, 2, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [274, 2, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.ReplicaCorrelator.p_d": [[271, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [271, 3, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [271, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."]], "sdr.ReplicaCorrelator.p_fa": [[272, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [272, 3, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [272, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [272, 3, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.ReplicaCorrelator.roc": [[273, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [273, 3, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [273, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."]], "sdr.ReplicaCorrelator.threshold": [[274, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [274, 3, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [274, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [274, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.Resampler": [[276, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the polyphase FIR filter."], [277, 2, 1, "", "__init__", "Creates a polyphase FIR rational resampling filter."], [278, 4, 1, "", "method", "The method used to design the polyphase resampling filter."]], "sdr.Resampler.__call__": [[276, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [276, 3, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Resampler.__init__": [[277, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB. Only used when taps=\"kaiser\"."], [277, 3, 2, "p-decimation", "decimation", "The decimation rate $Q$."], [277, 3, 2, "p-interpolation", "interpolation", "The interpolation rate $P$."], [277, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even. Only used when taps=\"kaiser\"."], [277, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [277, 3, 2, "p-taps", "taps", "The prototype filter design specification."]], "sdr.albersheim": [[279, 3, 2, "p-n_nc", "n_nc", "The number of non-coherent combinations $N_{NC} ge 1$."], [279, 3, 2, "p-p_d", "p_d", "The desired probability of detection $P_D$ in $(0, 1)$."], [279, 3, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{FA}$ in $(0, 1)$."]], "sdr.average_power": [[280, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the average power. The default is None, which computes the average power of the entire array."], [280, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [280, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[281, 3, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [281, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [281, 3, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [281, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[282, 3, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [282, 3, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.barker_code": [[283, 3, 2, "p-length", "length", "The length $N$ of the Barker code/sequence."], [283, 3, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[284, 3, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [284, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [284, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[285, 3, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.berlekamp_massey": [[286, 3, 2, "p-output", "output", "The output object type."], [286, 3, 2, "p-sequence", "sequence", "A linear recurrent sequence $y$ in $mathrm{GF}(p^m)$."]], "sdr.binary_code": [[287, 3, 2, "p-n", "n", "The length of the binary code."]], "sdr.bsc": [[288, 3, 2, "p-p", "p", "The probability $p$ of a bit flip."], [288, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [288, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[289, 3, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.coherent_gain": [[290, 3, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $T_C B_C$ in seconds-Hz (unitless). If the signal bandwidth equals the sample rate, the argument equals the number of samples $N_C$ to coherently integrate."]], "sdr.coherent_gain_loss": [[291, 3, 2, "p-freq", "freq", "The frequency offset $Delta f$ or signal bandwidth $B_C$ in Hz."], [291, 3, 2, "p-time", "time", "The coherent integration time $T_C$ or time offset in $Delta t$ in seconds."]], "sdr.crest_factor": [[292, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.db": [[293, 3, 2, "p-type", "type", "The type of input value or signal."], [293, 3, 2, "p-x", "x", "The input value or signal."]], "sdr.design_bandpass_fir": [[294, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [294, 3, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [294, 3, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [294, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [294, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_bandstop_fir": [[295, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [295, 3, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [295, 3, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [295, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [295, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_frac_delay_fir": [[296, 3, 2, "p-delay", "delay", "The fractional delay $0 le Delta n le 1$."], [296, 3, 2, "p-length", "length", "The filter length $L$. Filters with even length have best performance. Filters with odd length are equivalent to an even-length filter with an appended zero."]], "sdr.design_highpass_fir": [[297, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [297, 3, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [297, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [297, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_lowpass_fir": [[298, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [298, 3, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [298, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [298, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_multirate_fir": [[299, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB."], [299, 3, 2, "p-decimation", "decimation", "The decimation rate $Q$."], [299, 3, 2, "p-interpolation", "interpolation", "The interpolation rate $P$."], [299, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even."]], "sdr.diff_decode": [[300, 3, 2, "p-y", "y", "The input encoded data $y[k]$."], [300, 3, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[301, 3, 2, "p-x", "x", "The input uncoded data $x[k]$."], [301, 3, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[302, 3, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [302, 3, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [302, 3, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [302, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [302, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.downsample": [[303, 3, 2, "p-rate", "rate", "The downsampling factor $r$."], [303, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.ebn0_to_esn0": [[304, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [304, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [304, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[305, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [305, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [305, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [305, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[306, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the energy. The default is None, which computes the energy of the entire array."], [306, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [306, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[307, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [307, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [307, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[308, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [308, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.euclidean": [[309, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the distance. The default is None, which computes the distance across the entire array."], [309, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [309, 3, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.evm": [[310, 3, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [310, 3, 2, "p-output", "output", "The output type of the EVM calculation."], [310, 3, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [310, 3, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.frequency_offset": [[311, 3, 2, "p-freq", "freq", "The frequency offset $f$ in Hz (or in cycles/sample if sample_rate=1)."], [311, 3, 2, "p-freq_rate", "freq_rate", "The frequency offset rate $f_{text{rate}}$ in Hz/s (or in cycles/sample^2 if sample_rate=1)."], [311, 3, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [311, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [311, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.fspl": [[312, 3, 2, "p-distance", "distance", "The distance $d$ in meters between the transmitter and receiver."], [312, 3, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.gaussian": [[313, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [313, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [313, 3, 2, "p-sps", "sps", "The number of samples per symbol."], [313, 3, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gray_code": [[314, 3, 2, "p-n", "n", "The length of the Gray code."]], "sdr.h0": [[315, 3, 2, "p-complex", "complex", "Indicates whether the input signal is real or complex. This affects how the SNR is converted to noise variance."], [315, 3, 2, "p-detector", "detector", "The detector type."], [315, 3, 2, "p-n_c", "n_c", "The number of samples to coherently integrate $N_C$."], [315, 3, 2, "p-n_nc", "n_nc", "The number of samples to non-coherently integrate $N_{NC}$. Non-coherent integration is only allowable for linear and square-law detectors."], [315, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$ in linear units."]], "sdr.h1": [[316, 3, 2, "p-complex", "complex", "Indicates whether the input signal is real or complex. This affects how the SNR is converted to noise variance."], [316, 3, 2, "p-detector", "detector", "The detector type."], [316, 3, 2, "p-n_c", "n_c", "The number of samples to coherently integrate $N_C$."], [316, 3, 2, "p-n_nc", "n_nc", "The number of samples to non-coherently integrate $N_{NC}$. Non-coherent integration is only allowable for linear and square-law detectors."], [316, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$ in linear units."], [316, 3, 2, "p-snr", "snr", "The signal-to-noise ratio $S / sigma^2$ in dB."]], "sdr.hadamard_code": [[317, 3, 2, "p-index", "index", "The index $i$ in $[0, N)$ of the Hadamard code."], [317, 3, 2, "p-length", "length", "The length $N$ of the Hadamard code/sequence. Must be a power of 2."], [317, 3, 2, "p-output", "output", "The output format of the Hadamard code/sequence."]], "sdr.half_sine": [[318, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [318, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [318, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.hamming": [[319, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the distance. The default is None, which computes the distance across the entire array."], [319, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [319, 3, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.hexdump": [[320, 3, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [320, 3, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[321, 3, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [321, 3, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [321, 3, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.kasami_code": [[322, 3, 2, "p-index", "index", "The index of the Kasami code."], [322, 3, 2, "p-length", "length", "The length $N = 2^n - 1$ of the Kasami code/sequence. The degree $n$ must be even."], [322, 3, 2, "p-output", "output", "The output format of the Kasami code/sequence."], [322, 3, 2, "p-poly", "poly", "The primitive polynomial of degree $n$ over $mathrm{GF}(2)$. The default is None, which uses the default primitive polynomial of degree $n$, i.e. galois.primitive_poly(2, n)."]], "sdr.linear": [[323, 3, 2, "p-type", "type", "The type of output value or signal."], [323, 3, 2, "p-x", "x", "The input value or signal in dB."]], "sdr.m_sequence": [[324, 3, 2, "p-degree", "degree", "The degree $n$ of the LFSR."], [324, 3, 2, "p-index", "index", "The index $i$ in $[1, q^{n})$ of the m-sequence. The index represents the initial state of the LFSR. The index dictates the phase of the m-sequence. The integer index is interpreted as a polynomial over $mathrm{GF}(q)$, whose coefficients are the shift register values. The default is 1, which corresponds to the $[0, dots, 0, 1]$ state."], [324, 3, 2, "p-output", "output", "The output format of the m-sequence."], [324, 3, 2, "p-poly", "poly", "The characteristic polynomial of the LFSR over $mathrm{GF}(q)$. The default is None, which uses the primitive polynomial of degree $n$ over $mathrm{GF}(2)$, galois.primitive_poly(2, degree)."]], "sdr.max_frequency_offset": [[325, 3, 2, "p-cgl", "cgl", "The coherent gain loss (CGL) in dB."], [325, 3, 2, "p-integration_time", "integration_time", "The coherent integration time $T_c$ in seconds."]], "sdr.max_integration_time": [[326, 3, 2, "p-cgl", "cgl", "The coherent gain loss (CGL) in dB."], [326, 3, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ in Hz."]], "sdr.min_snr": [[327, 3, 2, "p-complex", "complex", "Indicates whether the input signal is real or complex. This affects how the SNR is converted to noise variance."], [327, 3, 2, "p-detector", "detector", "The detector type."], [327, 3, 2, "p-n_c", "n_c", "The number of samples to coherently integrate $N_C$."], [327, 3, 2, "p-n_nc", "n_nc", "The number of samples to non-coherently integrate $N_{NC}$. Non-coherent integration is only allowable for linear and square-law detectors."], [327, 3, 2, "p-p_d", "p_d", "The desired probability of detection $P_{D}$ in $(0, 1)$."], [327, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$ in $(0, 1)$."]], "sdr.mix": [[328, 3, 2, "p-complex", "complex", "Indicates whether to mix by a complex exponential or real sinusoid."], [328, 3, 2, "p-freq", "freq", "The frequency $f$ of the sinusoid in Hz (or 1/samples if sample_rate=1). The frequency must satisfy $-f_s/2 le f le f_s/2$."], [328, 3, 2, "p-phase", "phase", "The phase $phi$ of the sinusoid in degrees."], [328, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal."], [328, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.non_coherent_gain": [[329, 3, 2, "p-complex", "complex", "Indicates whether the input signal is real or complex. This affects how the SNR is converted to noise variance."], [329, 3, 2, "p-detector", "detector", "The detector type."], [329, 3, 2, "p-extrapolate", "extrapolate", "Indicates whether to extrapolate $G_{NC}$ using smaller values of $N_{NC}$. This is only done when the non-coherent gain cannot be explicitly solved for due to lack of floating-point precision. If False, the function will return np.nan for any $N_{NC}$ that cannot be solved for."], [329, 3, 2, "p-n_nc", "n_nc", "The number of samples $N_{NC}$ to non-coherently integrate."], [329, 3, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{FA}$. This is used to compute the necessary thresholds before and after integration. The non-coherent gain is slightly affected by the $P_{FA}$."], [329, 3, 2, "p-snr", "snr", "The reference SNR in dB."], [329, 3, 2, "p-snr_ref", "snr_ref", "The SNR reference."]], "sdr.p_d": [[330, 3, 2, "p-complex", "complex", "Indicates whether the input signal is real or complex. This affects how the SNR is converted to noise variance."], [330, 3, 2, "p-detector", "detector", "The detector type."], [330, 3, 2, "p-n_c", "n_c", "The number of samples to coherently integrate $N_C$."], [330, 3, 2, "p-n_nc", "n_nc", "The number of samples to non-coherently integrate $N_{NC}$. Non-coherent integration is only allowable for linear and square-law detectors."], [330, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$ in $(0, 1)$."], [330, 3, 2, "p-snr", "snr", "The signal-to-noise ratio $S / sigma^2$ in dB."]], "sdr.p_fa": [[331, 3, 2, "p-complex", "complex", "Indicates whether the input signal is real or complex. This affects how the SNR is converted to noise variance."], [331, 3, 2, "p-detector", "detector", "The detector type."], [331, 3, 2, "p-n_c", "n_c", "The number of samples to coherently integrate $N_C$."], [331, 3, 2, "p-n_nc", "n_nc", "The number of samples to non-coherently integrate $N_{NC}$. Non-coherent integration is only allowable for linear and square-law detectors."], [331, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$ in linear units."], [331, 3, 2, "p-threshold", "threshold", "The detection threshold $gamma$ in linear units."]], "sdr.pack": [[332, 3, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [332, 3, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [332, 3, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[333, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the PAPR. The default is None, which computes the PAPR of the entire array."], [333, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[334, 3, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [334, 3, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [334, 3, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[335, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the peak power. The default is None, which computes the peak power of the entire array."], [335, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [335, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[336, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [336, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peebles": [[337, 3, 2, "p-n_nc", "n_nc", "The number of non-coherent combinations $N_{NC} ge 1$."], [337, 3, 2, "p-p_d", "p_d", "The desired probability of detection $P_D$ in $(0, 1)$."], [337, 3, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{FA}$ in $(0, 1)$."]], "sdr.percent": [[338, 3, 2, "p-x", "x", "The input ratio."]], "sdr.plot": [[339, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [340, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [341, 5, 1, "", "detector_pdfs", "Plots the probability density functions (PDFs) of the detector under $mathcal{H}_0$ and $mathcal{H}_1$."], [342, 5, 1, "", "eye", "Plots the eye diagram of the baseband modulated signal $x[n]$."], [343, 5, 1, "", "filter", "Plots the magnitude response $|H(omega)|^2$, impulse response $h[n]$, and zeros and poles of the filter."], [344, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [345, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [346, 5, 1, "", "magnitude_response", "Plots the magnitude response $|H(omega)|^2$ of the filter."], [347, 5, 1, "", "p_d", "Plots the probability of detection $P_D$ as a function of received SNR or ENR."], [348, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [349, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [350, 5, 1, "", "phase_response", "Plots the phase response $angle H(omega)$ of the filter."], [351, 5, 1, "", "phase_tree", "Plots the phase tree of a continuous-phase modulated (CPM) signal signal $x[n]$."], [352, 5, 1, "", "raster", "Plots a raster of the time-domain signal $x[n]$."], [353, 5, 1, "", "roc", "Plots the receiver operating characteristic (ROC) curve as a function of $P_{FA}$."], [354, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [355, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [356, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [357, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [358, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [359, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [360, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[339, 3, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [339, 3, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."], [339, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."]], "sdr.plot.constellation": [[340, 3, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if persistence=True."], [340, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to Matplotlib functions."], [340, 3, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [340, 3, 2, "p-persistence", "persistence", "Indicates whether to plot the points as a persistence plot. A persistence plot is a 2D histogram of the points."], [340, 3, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.detector_pdfs": [[341, 3, 2, "p-annotate", "annotate", "Indicates whether to annotate the plot with the probabilities of false alarm and detection."], [341, 3, 2, "p-h0", "h0", "The statistical distribution under $mathcal{H}_0$."], [341, 3, 2, "p-h1", "h1", "The statistical distribution under $mathcal{H}_1$."], [341, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [341, 3, 2, "p-p_h0", "p_h0", "The probability of the $mathcal{H}_0$ tails to plot. The smaller the value, the longer the x-axis."], [341, 3, 2, "p-p_h1", "p_h1", "The probability of the $mathcal{H}_1$ tails to plot. The smaller the value, the longer the x-axis."], [341, 3, 2, "p-points", "points", "The number of points to use for the x-axis."], [341, 3, 2, "p-shade", "shade", "Indicates whether to shade the tails of the PDFs."], [341, 3, 2, "p-threshold", "threshold", "The detection threshold $gamma$."], [341, 3, 2, "p-x", "x", "The x-axis values to use for the plot. If not provided, it will be generated automatically."]], "sdr.plot.eye": [[342, 3, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [342, 3, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\" or persistence=True."], [342, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [342, 3, 2, "p-persistence", "persistence", "Indicates whether to plot the raster as a persistence plot. A persistence plot is a 2D histogram of the rasters."], [342, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Symbol\"."], [342, 3, 2, "p-span", "span", "The number of symbols per raster."], [342, 3, 2, "p-sps", "sps", "The number of samples per symbol."], [342, 3, 2, "p-x", "x", "The baseband modulated signal $x[n]$. If x is complex, in-phase and quadrature eye diagrams are plotted in separate subplots."]], "sdr.plot.filter": [[343, 3, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [343, 3, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [343, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [343, 3, 2, "p-filter", "filter", "The filter definition."], [343, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [343, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[344, 3, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [344, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [344, 3, 2, "p-filter", "filter", "The filter definition."], [344, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [344, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [344, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.impulse_response": [[345, 3, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [345, 3, 2, "p-filter", "filter", "The filter definition."], [345, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [345, 3, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. Can be useful for comparing the impulse response of filters with different lengths."]], "sdr.plot.magnitude_response": [[346, 3, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [346, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [346, 3, 2, "p-filter", "filter", "The filter definition."], [346, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [346, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [346, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."], [346, 3, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a linear or logarithmic magnitude response."]], "sdr.plot.p_d": [[347, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [347, 3, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [347, 3, 2, "p-x", "x", "The SNR or ENR in dB."], [347, 3, 2, "p-x_label", "x_label", "The x-axis label to use."]], "sdr.plot.periodogram": [[348, 3, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [348, 3, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [348, 3, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [348, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [348, 3, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [348, 3, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [348, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [348, 3, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [348, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [348, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued signals and \"two-sided\" for complex-valued signals."], [348, 3, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a linear or logarithmic power spectral density."]], "sdr.plot.phase_delay": [[349, 3, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [349, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [349, 3, 2, "p-filter", "filter", "The filter definition."], [349, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [349, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [349, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.phase_response": [[350, 3, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [350, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [350, 3, 2, "p-filter", "filter", "The filter definition."], [350, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [350, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [350, 3, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [350, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.phase_tree": [[351, 3, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [351, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [351, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Symbol\"."], [351, 3, 2, "p-span", "span", "The number of symbols per raster."], [351, 3, 2, "p-sps", "sps", "The number of samples per symbol."], [351, 3, 2, "p-x", "x", "The baseband CPM signal $x[n]$."]], "sdr.plot.raster": [[352, 3, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [352, 3, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\" or persistence=True."], [352, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to Matplotlib functions."], [352, 3, 2, "p-length", "length", "The length of each raster in samples. This must be provided if x is 1D."], [352, 3, 2, "p-persistence", "persistence", "Indicates whether to plot the raster as a persistence plot. A persistence plot is a 2D histogram of the rasters."], [352, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [352, 3, 2, "p-stride", "stride", "The stride between each raster in samples. If None, the stride is set to length."], [352, 3, 2, "p-x", "x", "The real time-domain signal $x[n]$. If x is 1D, the rastering is determined by length and stride. If x is 2D, the rows correspond to each raster."]], "sdr.plot.roc": [[353, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to the plotting function defined by type."], [353, 3, 2, "p-p_d", "p_d", "The probability of detection $P_D$."], [353, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{FA}$."], [353, 3, 2, "p-type", "type", "The type of plot to generate."]], "sdr.plot.ser": [[354, 3, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [354, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."], [354, 3, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.spectrogram": [[355, 3, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [355, 3, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [355, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.pcolormesh(). The following keyword arguments are set by default. The defaults may be overwritten."], [355, 3, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [355, 3, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [355, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [355, 3, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [355, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [355, 3, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a one-sided spectrum or a two-sided spectrum. The default is \"auto\" which selects \"one-sided\" for real-valued signals and \"two-sided\" for complex-valued signals."]], "sdr.plot.step_response": [[356, 3, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [356, 3, 2, "p-filter", "filter", "The filter definition."], [356, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.symbol_map": [[357, 3, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [357, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot(). The following keyword arguments are set by default. The defaults may be overwritten."], [357, 3, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [357, 3, 2, "p-modulation", "modulation", "The linear modulation or symbol map ${0, dots, M-1} mapsto mathbb{C}$."]], "sdr.plot.time_domain": [[358, 3, 2, "p-centered", "centered", "Indicates whether to center the x-axis about 0. This argument is mutually exclusive with offset."], [358, 3, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal. If \"color\", the real and imaginary parts will have different colors based on the current Matplotlib color cycle. If \"line\", the real part will have a solid line and the imaginary part will have a dashed line, and both lines will share the same color."], [358, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [358, 3, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. The units of the offset are $1/f_s$. This argument is mutually exclusive with centered."], [358, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [358, 3, 2, "p-t", "t", "The time signal $t[n]$. The units are assumed to be $1/f_s$."], [358, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[360, 3, 2, "p-filter", "filter", "The filter definition."], [360, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.polyphase_decompose": [[361, 3, 2, "p-branches", "branches", "The number of polyphase branches $B$."], [361, 3, 2, "p-taps", "taps", "The prototype filter feedforward coefficients $h[n]$."]], "sdr.ppb": [[362, 3, 2, "p-x", "x", "The input ratio."]], "sdr.ppm": [[363, 3, 2, "p-x", "x", "The input ratio."]], "sdr.raised_cosine": [[364, 3, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [364, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [364, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [364, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rectangular": [[365, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [365, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [365, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_voltage": [[366, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [366, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[367, 3, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [367, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [367, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [367, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[368, 3, 2, "p-ppm", "ppm", "The sample rate offset $f_{s,text{new}} / f_s$ in parts per million (ppm)."], [368, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.snr_to_ebn0": [[369, 3, 2, "p-bps", "bps", "Bits per symbol $log_2 M$, where $M$ is the modulation order."], [369, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [369, 3, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [369, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[370, 3, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [370, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.threshold": [[371, 3, 2, "p-complex", "complex", "Indicates whether the input signal is real or complex. This affects how the SNR is converted to noise variance."], [371, 3, 2, "p-detector", "detector", "The detector type."], [371, 3, 2, "p-n_c", "n_c", "The number of samples to coherently integrate $N_C$."], [371, 3, 2, "p-n_nc", "n_nc", "The number of samples to non-coherently integrate $N_{NC}$. Non-coherent integration is only allowable for linear and square-law detectors."], [371, 3, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{FA}$ in $(0, 1)$."], [371, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$ in linear units."]], "sdr.to_complex_bb": [[372, 3, 2, "p-x_r", "x_r", "The real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$. If the length is odd, one zero is appended to the end."]], "sdr.to_real_pb": [[373, 3, 2, "p-x_c", "x_c", "The complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$."]], "sdr.unpack": [[374, 3, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [374, 3, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [374, 3, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.upsample": [[375, 3, 2, "p-rate", "rate", "The upsampling factor $r$."], [375, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.walsh_code": [[376, 3, 2, "p-index", "index", "The index $i$ in $[0, N)$ of the Walsh code. Indicates how many transitions there are in the code."], [376, 3, 2, "p-length", "length", "The length $N$ of the Walsh code/sequence. Must be a power of 2."], [376, 3, 2, "p-output", "output", "The output format of the Walsh code/sequence."]], "sdr.wavelength": [[377, 3, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.zadoff_chu_sequence": [[378, 3, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [378, 3, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence. The root must be relatively prime to the length, i.e., $gcd(u, N) = 1$."], [378, 3, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence. When $q ne 0$, the returned sequence is a cyclic shift of the root-$u$ Zadoff-Chu sequence."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:parameter", "4": "py:property", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "parameter", "Python parameter"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"]}, "titleterms": {"code": [0, 383, 385], "interleav": 0, "scrambler": 0, "convers": 1, "decibel": 1, "ratio": 1, "signal": [1, 3, 380, 388, 389, 394], "nois": 1, "detect": [2, 8, 386, 387, 393], "detector": [2, 381], "theoret": 2, "perform": [2, 395], "approxim": 2, "coher": [2, 386, 393], "integr": [2, 386, 393, 395], "non": [2, 393], "digit": [3, 388, 391], "process": [3, 388], "fir": [3, 390], "filter": [3, 8, 390, 391, 395], "iir": [3, 391], "polyphas": 3, "applic": 3, "arbitrari": [3, 389], "resampl": [3, 389], "correl": [3, 379], "manipul": [3, 6], "link": 4, "budget": 4, "channel": [4, 380], "capac": 4, "path": 4, "loss": 4, "antenna": 4, "measur": 5, "energi": 5, "power": [5, 394], "voltag": 5, "distanc": 5, "modul": [5, 7, 8, 392], "miscellan": 6, "probabl": 6, "data": 6, "linear": [7, 379], "continu": 7, "phase": [7, 381, 395, 396], "orthogon": 7, "puls": [7, 394, 397], "shape": [7, 394, 397], "symbol": [7, 379, 396], "encod": 7, "plot": [8, 394], "configur": [8, 383, 385], "time": [8, 394, 395], "domain": [8, 394, 395], "frequenc": [8, 390, 391, 394, 395], "spectral": 8, "estim": 8, "analysi": 8, "constructor": [9, 18, 23, 31, 39, 41, 55, 61, 66, 83, 87, 89, 100, 107, 123, 137, 147, 149, 162, 178, 180, 187, 190, 192, 208, 217, 225, 227, 229, 237, 239, 245, 251, 253, 275], "special": [9, 23, 31, 39, 55, 61, 83, 87, 89, 107, 123, 137, 147, 162, 178, 180, 187, 190, 208, 217, 227, 229, 239, 253, 275], "method": [9, 18, 23, 31, 39, 41, 55, 61, 66, 83, 87, 89, 95, 100, 107, 123, 137, 147, 149, 162, 178, 180, 187, 190, 192, 208, 217, 225, 227, 229, 237, 239, 245, 251, 253, 270, 275], "stream": [9, 61, 83, 87, 107, 137, 147, 162, 178, 187, 190, 227, 253, 275], "mode": [9, 61, 83, 87, 107, 137, 147, 162, 178, 187, 190, 227, 253, 275], "onli": [9, 61, 83, 87, 107, 137, 147, 162, 178, 187, 190, 227, 253, 275], "properti": [9, 18, 23, 31, 39, 41, 55, 61, 66, 83, 87, 89, 107, 123, 137, 147, 149, 162, 178, 180, 187, 190, 192, 208, 217, 225, 227, 229, 237, 239, 245, 251, 253, 275], "note": [19, 41, 66, 126, 151, 192, 225, 237, 245, 251, 312, 348, 355], "see": [19, 42, 43, 52, 100, 102, 113, 114, 115, 117, 120, 123, 126, 149, 151, 168, 170, 175, 193, 194, 204, 226, 238, 246, 247, 249, 252, 268, 269, 279, 292, 315, 316, 327, 333, 337, 341, 375], "also": [19, 42, 43, 52, 100, 102, 113, 114, 115, 117, 120, 123, 126, 149, 151, 168, 170, 175, 193, 194, 204, 226, 238, 246, 247, 249, 252, 268, 269, 279, 292, 315, 316, 327, 333, 337, 341, 375], "polynomi": [123, 149], "state": [123, 149], "warn": [303, 375], "sequenc": 379, "map": [379, 396], "recurr": 379, "maxim": 379, "length": 379, "simul": 380, "model": 380, "impair": 380, "synchron": [381, 398], "lock": [381, 395], "loop": [381, 395], "error": [381, 396], "amplitud": 381, "control": 381, "document": 382, "instal": [382, 383, 384, 385, 399], "build": 382, "doc": 382, "serv": 382, "format": 383, "run": [383, 385], "linter": 383, "formatt": 383, "pre": 383, "commit": 383, "from": [383, 384, 385], "v": [383, 385], "pypi": 384, "github": 384, "edit": 384, "local": 384, "folder": 384, "dev": 384, "depend": 384, "unit": 385, "test": 385, "command": 385, "line": 385, "x_1": [386, 393], "n": [386, 389, 390, 391, 393], "x_2": [386, 393], "farrow": 389, "construct": 389, "an": [389, 390, 391], "input": 389, "x": 389, "t_": 389, "rate": [389, 396], "r": 389, "y": 389, "frac": 389, "upsampl": 389, "integ": 389, "downsampl": 389, "irrat": 389, "creat": [390, 391], "examin": [390, 391, 394], "impuls": [390, 391], "respons": [390, 391, 395], "h": [390, 391], "step": [390, 391, 395], "": [390, 391], "omega": [390, 391], "group": [390, 391], "delai": [390, 391], "tau_g": [390, 391], "fulli": [390, 391], "analyz": [390, 391, 395], "zero": 391, "pole": 391, "stabil": 391, "peak": 394, "averag": 394, "qpsk": [394, 396], "variou": 394, "across": [394, 395], "excess": 394, "bandwidth": 394, "design": 395, "proport": 395, "plu": 395, "ppi": 395, "implement": 395, "pll": 395, "close": 395, "compar": 395, "zeta": 395, "b_n": 395, "t": 395, "shift": 396, "kei": 396, "constel": 396, "bpsk": 396, "8": [396, 400], "psk": 396, "16": [396, 400], "curv": 396, "bit": 396, "rais": 397, "cosin": 397, "squar": 397, "root": 397, "gaussian": 397, "sdr": 399, "featur": 399, "v0": 400, "0": 400, "18": 400, "chang": 400, "contributor": 400, "17": 400, "15": 400, "14": 400, "13": 400, "12": 400, "11": 400, "10": 400, "9": 400, "7": 400, "6": 400, "5": 400, "4": 400, "3": 400, "2": 400, "1": 400, "version": 401, "alpha": 401, "releas": 401, "beta": 401}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Coding": [[0, "coding"]], "Interleavers": [[0, "interleavers"]], "Scramblers": [[0, "scramblers"]], "Conversions": [[1, "conversions"]], "Decibels": [[1, "decibels"]], "Ratios": [[1, "ratios"]], "Signal-to-noise ratios": [[1, "signal-to-noise-ratios"]], "Detection": [[2, "detection"], [8, "detection"], [387, "detection"]], "Detectors": [[2, "detectors"]], "Theoretical performance": [[2, "theoretical-performance"]], "Approximated performance": [[2, "approximated-performance"]], "Coherent integration": [[2, "coherent-integration"], [386, "coherent-integration"]], "Non-coherent integration": [[2, "non-coherent-integration"], [393, "non-coherent-integration"]], "Digital signal processing": [[3, "digital-signal-processing"], [388, "digital-signal-processing"]], "FIR filtering": [[3, "fir-filtering"]], "IIR filtering": [[3, "iir-filtering"]], "Polyphase FIR filtering": [[3, "polyphase-fir-filtering"]], "Filter applications": [[3, "filter-applications"]], "Arbitrary resampling": [[3, "arbitrary-resampling"]], "Correlation": [[3, "correlation"]], "Signal manipulation": [[3, "signal-manipulation"]], "Link budgets": [[4, "link-budgets"]], "Channel capacity": [[4, "channel-capacity"]], "Path losses": [[4, "path-losses"]], "Antennas": [[4, "antennas"]], "Measurement": [[5, "measurement"]], "Energy": [[5, "energy"]], "Power": [[5, "power"]], "Voltage": [[5, "voltage"]], "Distance": [[5, "distance"]], "Modulation": [[5, "modulation"], [7, "modulation"], [8, "modulation"], [392, "modulation"]], "Miscellaneous": [[6, "miscellaneous"]], "Probability": [[6, "probability"]], "Data manipulation": [[6, "data-manipulation"]], "Linear modulations": [[7, "linear-modulations"]], "Continuous-phase modulations": [[7, "continuous-phase-modulations"]], "Orthogonal modulations": [[7, "orthogonal-modulations"]], "Pulse shaping": [[7, "pulse-shaping"]], "Symbol encoding": [[7, "symbol-encoding"]], "Plotting": [[8, "plotting"]], "Configuration": [[8, "configuration"], [383, "configuration"], [385, "configuration"]], "Time-domain": [[8, "time-domain"]], "Frequency-domain": [[8, "frequency-domain"]], "Spectral estimation": [[8, "spectral-estimation"]], "Filter analysis": [[8, "filter-analysis"]], "Constructors": [[9, "constructors"], [18, "constructors"], [23, "constructors"], [31, "constructors"], [39, "constructors"], [41, "constructors"], [55, "constructors"], [61, "constructors"], [66, "constructors"], [83, "constructors"], [87, "constructors"], [89, "constructors"], [100, "constructors"], [107, "constructors"], [123, "constructors"], [137, "constructors"], [147, "constructors"], [149, "constructors"], [162, "constructors"], [178, "constructors"], [180, "constructors"], [187, "constructors"], [190, "constructors"], [192, "constructors"], [208, "constructors"], [217, "constructors"], [225, "constructors"], [227, "constructors"], [229, "constructors"], [237, "constructors"], [239, "constructors"], [245, "constructors"], [251, "constructors"], [253, "constructors"], [275, "constructors"]], "Special methods": [[9, "special-methods"], [23, "special-methods"], [31, "special-methods"], [39, "special-methods"], [55, "special-methods"], [61, "special-methods"], [83, "special-methods"], [87, "special-methods"], [89, "special-methods"], [107, "special-methods"], [123, "special-methods"], [137, "special-methods"], [147, "special-methods"], [162, "special-methods"], [178, "special-methods"], [180, "special-methods"], [187, "special-methods"], [190, "special-methods"], [208, "special-methods"], [217, "special-methods"], [227, "special-methods"], [229, "special-methods"], [239, "special-methods"], [253, "special-methods"], [275, "special-methods"]], "Streaming mode only": [[9, "streaming-mode-only"], [61, "streaming-mode-only"], [83, "streaming-mode-only"], [87, "streaming-mode-only"], [107, "streaming-mode-only"], [137, "streaming-mode-only"], [147, "streaming-mode-only"], [162, "streaming-mode-only"], [178, "streaming-mode-only"], [187, "streaming-mode-only"], [190, "streaming-mode-only"], [227, "streaming-mode-only"], [253, "streaming-mode-only"], [275, "streaming-mode-only"]], "Properties": [[9, "properties"], [18, "properties"], [23, "properties"], [31, "properties"], [39, "properties"], [41, "properties"], [55, "properties"], [61, "properties"], [66, "properties"], [83, "properties"], [87, "properties"], [89, "properties"], [107, "properties"], [123, "properties"], [137, "properties"], [147, "properties"], [149, "properties"], [162, "properties"], [178, "properties"], [180, "properties"], [187, "properties"], [190, "properties"], [192, "properties"], [208, "properties"], [217, "properties"], [225, "properties"], [227, "properties"], [229, "properties"], [237, "properties"], [239, "properties"], [245, "properties"], [251, "properties"], [253, "properties"], [275, "properties"]], "Methods": [[18, "methods"], [23, "methods"], [31, "methods"], [39, "methods"], [41, "methods"], [55, "methods"], [61, "methods"], [66, "methods"], [83, "methods"], [87, "methods"], [89, "methods"], [95, "methods"], [100, "methods"], [107, "methods"], [123, "methods"], [147, "methods"], [149, "methods"], [162, "methods"], [178, "methods"], [180, "methods"], [187, "methods"], [190, "methods"], [192, "methods"], [208, "methods"], [217, "methods"], [225, "methods"], [227, "methods"], [229, "methods"], [237, "methods"], [239, "methods"], [245, "methods"], [251, "methods"], [253, "methods"], [270, "methods"], [275, "methods"]], "Note": [[19, null], [41, null], [66, null], [126, null], [151, null], [192, null], [225, null], [237, null], [245, null], [251, null], [312, null], [348, null], [355, null]], "See also": [[19, null], [42, null], [43, null], [52, null], [100, null], [102, null], [113, null], [114, null], [115, null], [117, null], [120, null], [123, null], [126, null], [149, null], [151, null], [168, null], [170, null], [175, null], [193, null], [194, null], [204, null], [226, null], [238, null], [246, null], [247, null], [249, null], [252, null], [268, null], [269, null], [279, null], [292, null], [315, null], [316, null], [327, null], [333, null], [337, null], [341, null], [375, null]], "Polynomials": [[123, "polynomials"], [149, "polynomials"]], "State": [[123, "state"], [149, "state"]], "Warning": [[303, null], [375, null]], "Sequences": [[379, "sequences"]], "Symbol-mapping sequences": [[379, "symbol-mapping-sequences"]], "Correlation sequences": [[379, "correlation-sequences"]], "Linear recurrent sequences": [[379, "linear-recurrent-sequences"]], "Maximal-length sequences": [[379, "maximal-length-sequences"]], "Simulation": [[380, "simulation"]], "Channel models": [[380, "channel-models"]], "Signal impairments": [[380, "signal-impairments"]], "Synchronization": [[381, "synchronization"], [398, "synchronization"]], "Phase-locked loops": [[381, "phase-locked-loops"], [395, "phase-locked-loops"]], "Phase error detectors": [[381, "phase-error-detectors"]], "Amplitude control loops": [[381, "amplitude-control-loops"]], "Documentation": [[382, "documentation"]], "Install": [[382, "install"], [383, "install"], [385, "install"]], "Build the docs": [[382, "build-the-docs"]], "Serve the docs": [[382, "serve-the-docs"]], "Formatting": [[383, "formatting"]], "Run the linter": [[383, "run-the-linter"]], "Run the formatter": [[383, "run-the-formatter"]], "Pre-commit": [[383, "pre-commit"]], "Run from VS Code": [[383, "run-from-vs-code"], [385, "run-from-vs-code"]], "Installation": [[384, "installation"], [399, "installation"]], "Install from PyPI": [[384, "install-from-pypi"]], "Install from GitHub": [[384, "install-from-github"]], "Editable install from local folder": [[384, "editable-install-from-local-folder"]], "Install the dev dependencies": [[384, "install-the-dev-dependencies"]], "Unit Tests": [[385, "unit-tests"]], "Run from the command line": [[385, "run-from-the-command-line"]], "Detect x_1[n]": [[386, "detect-x-1-n"], [393, "detect-x-1-n"]], "Detect x_2[n]": [[386, "detect-x-2-n"], [393, "detect-x-2-n"]], "Farrow arbitrary resampler": [[389, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[389, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[389, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[389, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[389, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[389, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[389, "downsample-by-an-irrational-rate"]], "FIR filters": [[390, "fir-filters"]], "Create an FIR filter": [[390, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[390, "examine-the-impulse-response-h-n"], [391, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[390, "examine-the-step-response-s-n"], [391, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[390, "examine-the-frequency-response-h-omega"], [391, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[390, "examine-the-group-delay-tau-g-omega"], [391, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[390, "fully-analyze-a-fir-filter"]], "IIR filters": [[391, "iir-filters"]], "Create an IIR filter": [[391, "create-an-iir-filter"]], "Examine the zeros and poles": [[391, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[391, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[391, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[394, "peak-to-average-power"]], "QPSK signal with various pulse shapes": [[394, "qpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[394, "examine-time-domain"]], "Examine frequency domain": [[394, "examine-frequency-domain"]], "Plot across excess bandwidth": [[394, "plot-across-excess-bandwidth"]], "Design a proportional-plus-integrator (PPI) loop filter": [[395, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[395, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[395, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[395, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[395, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[395, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[395, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[396, "phase-shift-keying"]], "Constellations": [[396, "constellations"]], "BPSK": [[396, "bpsk"]], "QPSK": [[396, "qpsk"]], "8-PSK": [[396, "id1"]], "16-PSK": [[396, "id2"]], "Error rate curves": [[396, "error-rate-curves"]], "Bit error rate curves": [[396, "bit-error-rate-curves"]], "Symbol error rate curves": [[396, "symbol-error-rate-curves"]], "Symbol mapping": [[396, "symbol-mapping"]], "Pulse shapes": [[397, "pulse-shapes"]], "Raised cosine": [[397, "raised-cosine"]], "Square-root raised cosine": [[397, "square-root-raised-cosine"]], "Gaussian": [[397, "gaussian"]], "sdr": [[399, "sdr"]], "Features": [[399, "features"]], "v0.0": [[400, "v0-0"]], "v0.0.18": [[400, "v0-0-18"]], "Changes": [[400, "changes"], [400, "id1"], [400, "id3"], [400, "id5"], [400, "id7"], [400, "id9"], [400, "id11"], [400, "id13"], [400, "id15"], [400, "id17"], [400, "id19"], [400, "id21"], [400, "id23"], [400, "id25"], [400, "id27"], [400, "id29"], [400, "id31"], [400, "id33"]], "Contributors": [[400, "contributors"], [400, "id2"], [400, "id4"], [400, "id6"], [400, "id8"], [400, "id10"], [400, "id12"], [400, "id14"], [400, "id16"], [400, "id18"], [400, "id20"], [400, "id22"], [400, "id24"], [400, "id26"], [400, "id28"], [400, "id30"], [400, "id32"], [400, "id34"]], "v0.0.17": [[400, "v0-0-17"]], "v0.0.16": [[400, "v0-0-16"]], "v0.0.15": [[400, "v0-0-15"]], "v0.0.14": [[400, "v0-0-14"]], "v0.0.13": [[400, "v0-0-13"]], "v0.0.12": [[400, "v0-0-12"]], "v0.0.11": [[400, "v0-0-11"]], "v0.0.10": [[400, "v0-0-10"]], "v0.0.9": [[400, "v0-0-9"]], "v0.0.8": [[400, "v0-0-8"]], "v0.0.7": [[400, "v0-0-7"]], "v0.0.6": [[400, "v0-0-6"]], "v0.0.5": [[400, "v0-0-5"]], "v0.0.4": [[400, "v0-0-4"]], "v0.0.3": [[400, "v0-0-3"]], "v0.0.2": [[400, "v0-0-2"]], "v0.0.1": [[400, "v0-0-1"]], "Versioning": [[401, "versioning"]], "Alpha releases": [[401, "alpha-releases"]], "Beta releases": [[401, "beta-releases"]]}, "indexentries": {"module": [[3, "module-sdr"]], "sdr": [[3, "module-sdr"]]}, "docurls": ["api/coding/", "api/conversions/", "api/detection/", "api/dsp/", "api/link-budgets/", "api/measurement/", "api/misc/", "api/modulation/", "api/plotting/", "api/sdr.AGC/", "api/sdr.AGC.__call__/", "api/sdr.AGC.__init__/", "api/sdr.AGC.attack/", "api/sdr.AGC.decay/", "api/sdr.AGC.gain/", "api/sdr.AGC.reference/", "api/sdr.AGC.reset/", "api/sdr.AGC.streaming/", "api/sdr.AdditiveScrambler/", "api/sdr.AdditiveScrambler.__init__/", "api/sdr.AdditiveScrambler.descramble/", "api/sdr.AdditiveScrambler.lfsr/", "api/sdr.AdditiveScrambler.scramble/", "api/sdr.BinaryErasureChannel/", "api/sdr.BinaryErasureChannel.X/", "api/sdr.BinaryErasureChannel.Y/", "api/sdr.BinaryErasureChannel.__call__/", "api/sdr.BinaryErasureChannel.__init__/", "api/sdr.BinaryErasureChannel.capacities/", "api/sdr.BinaryErasureChannel.capacity/", "api/sdr.BinaryErasureChannel.p/", "api/sdr.BinarySymmetricChannel/", "api/sdr.BinarySymmetricChannel.X/", "api/sdr.BinarySymmetricChannel.Y/", "api/sdr.BinarySymmetricChannel.__call__/", "api/sdr.BinarySymmetricChannel.__init__/", "api/sdr.BinarySymmetricChannel.capacities/", "api/sdr.BinarySymmetricChannel.capacity/", "api/sdr.BinarySymmetricChannel.p/", "api/sdr.BlockInterleaver/", "api/sdr.BlockInterleaver.__init__/", "api/sdr.CPM/", "api/sdr.CPM.__init__/", "api/sdr.CPM.ber/", "api/sdr.CPM.bps/", "api/sdr.CPM.demodulate/", "api/sdr.CPM.index/", "api/sdr.CPM.modulate/", "api/sdr.CPM.order/", "api/sdr.CPM.phase_offset/", "api/sdr.CPM.pulse_shape/", "api/sdr.CPM.rx_filter/", "api/sdr.CPM.ser/", "api/sdr.CPM.sps/", "api/sdr.CPM.tx_filter/", "api/sdr.Channel/", "api/sdr.Channel.__call__/", "api/sdr.Channel.__init__/", "api/sdr.Channel.capacities/", "api/sdr.Channel.capacity/", "api/sdr.Channel.reset/", "api/sdr.Channelizer/", "api/sdr.Channelizer.__call__/", "api/sdr.Channelizer.__init__/", "api/sdr.Channelizer.channels/", "api/sdr.Channelizer.method/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.Decimator/", "api/sdr.Decimator.__init__/", "api/sdr.Decimator.method/", "api/sdr.Decimator.reset/", "api/sdr.Differentiator/", "api/sdr.Differentiator.__init__/", "api/sdr.DiscreteMemorylessChannel/", "api/sdr.DiscreteMemorylessChannel.P/", "api/sdr.DiscreteMemorylessChannel.X/", "api/sdr.DiscreteMemorylessChannel.Y/", "api/sdr.DiscreteMemorylessChannel.__call__/", "api/sdr.DiscreteMemorylessChannel.__init__/", "api/sdr.EnergyDetector/", "api/sdr.EnergyDetector.p_d/", "api/sdr.EnergyDetector.p_fa/", "api/sdr.EnergyDetector.roc/", "api/sdr.EnergyDetector.threshold/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__call__/", "api/sdr.FIR.__init__/", "api/sdr.FIR.__len__/", "api/sdr.FIR.delay/", "api/sdr.FIR.flush/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.group_delay/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.phase_delay/", "api/sdr.FIR.reset/", "api/sdr.FIR.state/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FLFSR/", "api/sdr.FLFSR.Taps/", "api/sdr.FLFSR.__call__/", "api/sdr.FLFSR.__init__/", "api/sdr.FLFSR.characteristic_poly/", "api/sdr.FLFSR.feedback_poly/", "api/sdr.FLFSR.field/", "api/sdr.FLFSR.initial_state/", "api/sdr.FLFSR.order/", "api/sdr.FLFSR.reset/", "api/sdr.FLFSR.state/", "api/sdr.FLFSR.step/", "api/sdr.FLFSR.taps/", "api/sdr.FLFSR.to_galois_lfsr/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__call__/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.delay/", "api/sdr.FarrowResampler.flush/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.state/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.FractionalDelay/", "api/sdr.FractionalDelay.__init__/", "api/sdr.GLFSR/", "api/sdr.GLFSR.Taps/", "api/sdr.GLFSR.__init__/", "api/sdr.GLFSR.characteristic_poly/", "api/sdr.GLFSR.feedback_poly/", "api/sdr.GLFSR.field/", "api/sdr.GLFSR.initial_state/", "api/sdr.GLFSR.order/", "api/sdr.GLFSR.reset/", "api/sdr.GLFSR.state/", "api/sdr.GLFSR.step/", "api/sdr.GLFSR.taps/", "api/sdr.GLFSR.to_fibonacci_lfsr/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__call__/", "api/sdr.IIR.__init__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.state/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.Integrator/", "api/sdr.Integrator.__init__/", "api/sdr.Interleaver/", "api/sdr.Interleaver.__init__/", "api/sdr.Interleaver.__len__/", "api/sdr.Interleaver.deinterleave/", "api/sdr.Interleaver.interleave/", "api/sdr.Interleaver.inverse_map/", "api/sdr.Interleaver.map/", "api/sdr.Interpolator/", "api/sdr.Interpolator.__init__/", "api/sdr.Interpolator.method/", "api/sdr.LeakyIntegrator/", "api/sdr.LeakyIntegrator.__init__/", "api/sdr.LinearModulation/", "api/sdr.LinearModulation.__init__/", "api/sdr.LinearModulation.ber/", "api/sdr.LinearModulation.bps/", "api/sdr.LinearModulation.decide_symbols/", "api/sdr.LinearModulation.demodulate/", "api/sdr.LinearModulation.map_symbols/", "api/sdr.LinearModulation.modulate/", "api/sdr.LinearModulation.order/", "api/sdr.LinearModulation.phase_offset/", "api/sdr.LinearModulation.pulse_shape/", "api/sdr.LinearModulation.rx_filter/", "api/sdr.LinearModulation.ser/", "api/sdr.LinearModulation.sps/", "api/sdr.LinearModulation.symbol_map/", "api/sdr.LinearModulation.tx_filter/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.__call__/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.integral_gain/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.proportional_gain/", "api/sdr.LoopFilter.reset/", "api/sdr.MLPED/", "api/sdr.MLPED.A_received/", "api/sdr.MLPED.A_reference/", "api/sdr.MLPED.__call__/", "api/sdr.MLPED.__init__/", "api/sdr.MLPED.data_aided_error/", "api/sdr.MLPED.decision_directed_error/", "api/sdr.MLPED.gain/", "api/sdr.MSK/", "api/sdr.MSK.__init__/", "api/sdr.MovingAverager/", "api/sdr.MovingAverager.__init__/", "api/sdr.NCO/", "api/sdr.NCO.__call__/", "api/sdr.NCO.__init__/", "api/sdr.NCO.gain/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.OQPSK/", "api/sdr.OQPSK.__init__/", "api/sdr.PED/", "api/sdr.PED.__call__/", "api/sdr.PED.__init__/", "api/sdr.PED.data_aided_error/", "api/sdr.PED.decision_directed_error/", "api/sdr.PED.gain/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.ber/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.PiMPSK/", "api/sdr.PiMPSK.__init__/", "api/sdr.PolyphaseFIR/", "api/sdr.PolyphaseFIR.__call__/", "api/sdr.PolyphaseFIR.__init__/", "api/sdr.PolyphaseFIR.branches/", "api/sdr.PolyphaseFIR.decimation/", "api/sdr.PolyphaseFIR.delay/", "api/sdr.PolyphaseFIR.input/", "api/sdr.PolyphaseFIR.interpolation/", "api/sdr.PolyphaseFIR.order/", "api/sdr.PolyphaseFIR.output/", "api/sdr.PolyphaseFIR.polyphase_order/", "api/sdr.PolyphaseFIR.polyphase_taps/", "api/sdr.PolyphaseFIR.rate/", "api/sdr.PolyphaseFIR.reset/", "api/sdr.PolyphaseFIR.taps/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.ReplicaCorrelator/", "api/sdr.ReplicaCorrelator.p_d/", "api/sdr.ReplicaCorrelator.p_fa/", "api/sdr.ReplicaCorrelator.roc/", "api/sdr.ReplicaCorrelator.threshold/", "api/sdr.Resampler/", "api/sdr.Resampler.__call__/", "api/sdr.Resampler.__init__/", "api/sdr.Resampler.method/", "api/sdr.albersheim/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.barker_code/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.berlekamp_massey/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.coherent_gain/", "api/sdr.coherent_gain_loss/", "api/sdr.crest_factor/", "api/sdr.db/", "api/sdr.design_bandpass_fir/", "api/sdr.design_bandstop_fir/", "api/sdr.design_frac_delay_fir/", "api/sdr.design_highpass_fir/", "api/sdr.design_lowpass_fir/", "api/sdr.design_multirate_fir/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.downsample/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.euclidean/", "api/sdr.evm/", "api/sdr.frequency_offset/", "api/sdr.fspl/", "api/sdr.gaussian/", "api/sdr.gray_code/", "api/sdr.h0/", "api/sdr.h1/", "api/sdr.hadamard_code/", "api/sdr.half_sine/", "api/sdr.hamming/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.kasami_code/", "api/sdr.linear/", "api/sdr.m_sequence/", "api/sdr.max_frequency_offset/", "api/sdr.max_integration_time/", "api/sdr.min_snr/", "api/sdr.mix/", "api/sdr.non_coherent_gain/", "api/sdr.p_d/", "api/sdr.p_fa/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.peebles/", "api/sdr.percent/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.detector_pdfs/", "api/sdr.plot.eye/", "api/sdr.plot.filter/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.magnitude_response/", "api/sdr.plot.p_d/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.phase_tree/", "api/sdr.plot.raster/", "api/sdr.plot.roc/", "api/sdr.plot.ser/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.polyphase_decompose/", "api/sdr.ppb/", "api/sdr.ppm/", "api/sdr.raised_cosine/", "api/sdr.rectangular/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.threshold/", "api/sdr.to_complex_bb/", "api/sdr.to_real_pb/", "api/sdr.unpack/", "api/sdr.upsample/", "api/sdr.walsh_code/", "api/sdr.wavelength/", "api/sdr.zadoff_chu_sequence/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/formatting/", "development/installation/", "development/unit-tests/", "examples/coherent-integration/", "examples/detection/", "examples/dsp/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/modulation/", "examples/non-coherent-integration/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "examples/synchronization/", "", "release-notes/v0.0/", "release-notes/versioning/"]})